/*********************************************************************************************************
*
* File                : spi_nor.c
* Hardware Environment:
* Build Environment   : STM32CUBEIDE  Version: 1.13.2
* Version             : V1.0
* By                  :
*
*                                  (c) Copyright 2005-2011, WaveShare
*                                       http://www.waveshare.net
*                                          All Rights Reserved
*
*********************************************************************************************************/

#include "spi_nor.h"
#include "log.h"
#include <stm32f4xx.h>
#include <stm32f4xx_hal_spi.h>
//#include <stdio.h>
/**SPI1 GPIO Configuration
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
  PB3     ------> SPI1_SCK
  PB4     ------> SPI1_CS
*/
#define SPI3_CS_Pin GPIO_PIN_15
#define SPI3_CS_GPIO_Port GPIOA
#define SPI3_SCK_Pin GPIO_PIN_10
#define SPI3_SCK_GPIO_Port GPIOC
#define SPI3_MISO_Pin GPIO_PIN_11
#define SPI3_MISO_GPIO_Port GPIOC
#define SPI3_MOSI_Pin GPIO_PIN_12
#define SPI3_MOSI_GPIO_Port GPIOC

#define SPI_FLASH_MISO_PIN SPI3_MISO_Pin
#define SPI_FLASH_MOSI_PIN SPI3_MOSI_Pin
#define SPI_FLASH_SCK_PIN SPI3_SCK_Pin
#define SPI_FLASH_CS_PIN SPI3_CS_Pin

#define FLASH_DUMMY_BYTE 0xA5

#define FLASH_READY 0
#define FLASH_BUSY  1
#define FLASH_TIMEOUT 2

/* 第一地址周期 */
#define ADDR_1st_CYCLE(ADDR) (uint8_t)((ADDR)& 0xFF)
/* 第二地址周期 */
#define ADDR_2nd_CYCLE(ADDR) (uint8_t)(((ADDR)& 0xFF00) >> 8)
/* 第三地址周期 */
#define ADDR_3rd_CYCLE(ADDR) (uint8_t)(((ADDR)& 0xFF0000) >> 16)
/* 第四地址周期 */
#define ADDR_4th_CYCLE(ADDR) (uint8_t)(((ADDR)& 0xFF000000) >> 24)

#define UNDEFINED_CMD 0xFF

typedef struct __attribute__((__packed__))
{
    uint8_t page_offset;    // 页偏移量
    uint8_t read_cmd;       // 读取指令
    uint8_t read_id_cmd;    // 读取ID指令
    uint8_t write_cmd;      // 写入指令
    uint8_t write_en_cmd;   // 写使能指令
    uint8_t erase_cmd;      // 擦除指令
    uint8_t status_cmd;     // 状态指令
    uint8_t busy_bit;       // 忙状态位
    uint8_t busy_state;     // 忙状态值
    uint32_t freq;          // SPI频率
} spi_conf_t;

static spi_conf_t spi_conf;

extern SPI_HandleTypeDef hspi3; //SPI 句柄

// 初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_init(SPI_HandleTypeDef* spiHandle)
{
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
	  if(spiHandle->Instance==SPI3)
	  {
	  /* USER CODE BEGIN SPI3_MspInit 0 */

	  /* USER CODE END SPI3_MspInit 0 */
	    /* SPI3 clock enable */
	    __HAL_RCC_SPI3_CLK_ENABLE();

	    __HAL_RCC_GPIOC_CLK_ENABLE();
	    /**SPI3 GPIO Configuration
	    PC10     ------> SPI3_SCK
	    PC11     ------> SPI3_MISO
	    PC12     ------> SPI3_MOSI
	    */
	    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
//	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	    GPIO_InitStruct.Pin = SPI3_MISO_Pin;
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	    GPIO_InitStruct.Pin = SPI3_MOSI_Pin;
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
//	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	  /* USER CODE BEGIN SPI3_MspInit 1 */

	  /* USER CODE END SPI3_MspInit 1 */
	  }
}

// 取消初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_uninit(SPI_HandleTypeDef* spiHandle)
{
	  if(spiHandle->Instance==SPI3)
	  {
	  /* USER CODE BEGIN SPI3_MspDeInit 0 */

	  /* USER CODE END SPI3_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI3_CLK_DISABLE();

	    /**SPI3 GPIO Configuration
	    PC10     ------> SPI3_SCK
	    PC11     ------> SPI3_MISO
	    PC12     ------> SPI3_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOC, SPI3_SCK_Pin|SPI3_MISO_Pin|SPI3_MOSI_Pin);

	  /* USER CODE BEGIN SPI3_MspDeInit 1 */

	  /* USER CODE END SPI3_MspDeInit 1 */
	  }
}

static inline void spi_flash_select_chip()
{
   	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
}

static inline void spi_flash_deselect_chip()
{
  	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
}

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
    uint32_t system_clock_khz = SystemCoreClock / 1000;

    if (spi_freq_khz >= system_clock_khz / 2)
    	return SPI_BAUDRATEPRESCALER_2;
    else if (spi_freq_khz >= system_clock_khz / 4)
    	return SPI_BAUDRATEPRESCALER_4;
    else if (spi_freq_khz >= system_clock_khz / 8)
    	return SPI_BAUDRATEPRESCALER_8;
    else if (spi_freq_khz >= system_clock_khz / 16)
    	return SPI_BAUDRATEPRESCALER_16;
    else if (spi_freq_khz >= system_clock_khz / 32)
    	return SPI_BAUDRATEPRESCALER_32;
    else if (spi_freq_khz >= system_clock_khz / 64)
    	return SPI_BAUDRATEPRESCALER_64;
    else if (spi_freq_khz >= system_clock_khz / 128)
    	return SPI_BAUDRATEPRESCALER_128;
    else
    	return SPI_BAUDRATEPRESCALER_256;
}

// 初始化SPI Flash
static int spi_flash_init(void *conf, uint32_t conf_size)
{
    SPI_InitTypeDef Init;

	if (conf_size < sizeof(spi_conf_t))
        return -1;

    spi_conf = *(spi_conf_t *)conf;

//    spi_flash_gpio_init(&hspi1);

    spi_flash_deselect_chip();

    /* 配置SPI */
    hspi3.Instance = SPI3;
    hspi3.Init.Mode = SPI_MODE_MASTER;
    hspi3.Init.Direction = SPI_DIRECTION_2LINES;
    hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
    hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
    hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
    hspi3.Init.NSS = SPI_NSS_SOFT;
    hspi3.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq);
    hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
    hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hspi3.Init.CRCPolynomial = 10;
    HAL_SPI_Init(&hspi3)  ;

    /* Enable SPI */
    __HAL_SPI_ENABLE(&hspi3);

    return 0;
}

// 取消初始化SPI Flash
static void spi_flash_uninit()
{
    spi_flash_gpio_uninit(&hspi3);

    /* 禁用SPI */
    __HAL_SPI_DISABLE(&hspi3);
}

// 发送一个字节到SPI Flash并返回接收到的字节
static uint8_t spi_flash_send_byte(uint8_t byte)
{
	uint8_t rx_byte;

    HAL_SPI_TransmitReceive_IT(&hspi3,&byte,&rx_byte,1);

 	return rx_byte;
}

static inline uint8_t spi_flash_read_byte()
{
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
}

static uint32_t spi_flash_read_status()
{
    uint8_t status;
    uint32_t flash_status = FLASH_READY;

    spi_flash_select_chip();

    spi_flash_send_byte(spi_conf.status_cmd);

    status = spi_flash_read_byte();

    if (spi_conf.busy_state == 1 && (status & (1 << spi_conf.busy_bit)))
        flash_status = FLASH_BUSY;
    else if (spi_conf.busy_state == 0 && !(status & (1 << spi_conf.busy_bit)))
        flash_status = FLASH_BUSY;

    spi_flash_deselect_chip();

    return flash_status;
}

static uint32_t spi_flash_get_status()
{
    uint32_t status, timeout = 0x1000000;

    status = spi_flash_read_status();

    /* Wait for an operation to complete or a TIMEOUT to occur */
    while (status == FLASH_BUSY && timeout)
    {
        status = spi_flash_read_status();
        timeout --;
    }

    if (!timeout)
        status = FLASH_TIMEOUT;

    return status;
}

static void spi_flash_read_id(chip_id_t *chip_id)
{
    spi_flash_select_chip();

    spi_flash_send_byte(spi_conf.read_id_cmd);

    chip_id->maker_id = spi_flash_read_byte();
    chip_id->device_id = spi_flash_read_byte();
    chip_id->third_id = spi_flash_read_byte();
    chip_id->fourth_id = spi_flash_read_byte();
    chip_id->fifth_id = spi_flash_read_byte();
    chip_id->sixth_id = spi_flash_read_byte();

    spi_flash_deselect_chip();
}

static void spi_flash_write_enable()
{
    if (spi_conf.write_en_cmd == UNDEFINED_CMD)
        return;

    spi_flash_select_chip();
    spi_flash_send_byte(spi_conf.write_en_cmd);
    spi_flash_deselect_chip();
}

static void spi_flash_write_page_async(uint8_t *buf, uint32_t page,
    uint32_t page_size)
{
    uint32_t i;

    spi_flash_write_enable();

    spi_flash_select_chip();

    spi_flash_send_byte(spi_conf.write_cmd);

    page = page << spi_conf.page_offset;

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));
    spi_flash_send_byte(ADDR_1st_CYCLE(page));

    for (i = 0; i < page_size; i++)
        spi_flash_send_byte(buf[i]);

    spi_flash_deselect_chip();
}

static uint32_t spi_flash_read_data(uint8_t *buf, uint32_t page,
    uint32_t page_offset, uint32_t data_size)
{
    uint32_t i, addr = (page << spi_conf.page_offset) + page_offset;

    spi_flash_select_chip();

    spi_flash_send_byte(spi_conf.read_cmd);

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));

    /* AT45DB requires write of dummy byte after address */
    spi_flash_send_byte(FLASH_DUMMY_BYTE);

    for (i = 0; i < data_size; i++)
        buf[i] = spi_flash_read_byte();

    spi_flash_deselect_chip();

    return FLASH_READY;
}

static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page,
    uint32_t page_size)
{
    return spi_flash_read_data(buf, page, 0, page_size);
}

static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page,
    uint32_t offset, uint32_t data_size)
{
    return FLASH_STATUS_INVALID_CMD;
}

static uint32_t spi_flash_erase_block(uint32_t page)
{
    uint32_t addr = page << spi_conf.page_offset;

    spi_flash_write_enable();

    spi_flash_select_chip();

    spi_flash_send_byte(spi_conf.erase_cmd);

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));

    spi_flash_deselect_chip();

    return spi_flash_get_status();
}

static inline bool spi_flash_is_bb_supported()
{
    return false;
}

flash_hal_t hal_spi_nor =
{
    .init = spi_flash_init,
    .uninit = spi_flash_uninit,
    .read_id = spi_flash_read_id,
    .erase_block = spi_flash_erase_block,
    .read_page = spi_flash_read_page,
    .read_spare_data = spi_flash_read_spare_data, 
    .write_page_async = spi_flash_write_page_async,
    .read_status = spi_flash_read_status,
    .is_bb_supported = spi_flash_is_bb_supported
};
