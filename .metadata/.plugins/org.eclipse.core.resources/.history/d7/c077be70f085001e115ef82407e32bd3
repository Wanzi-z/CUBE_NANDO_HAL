/*  Copyright (C) 2020 NANDO authors
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License version 3.
 */

#include <stm32f1xx_hal.h>
#include <stm32f1xx_hal_flash_ex.h>
// 擦除指定页的Flash存储器
int flash_page_erase(uint32_t page_addr)
{
    HAL_StatusTypeDef status;
/*    FLASH_EraseInitTypeDef Erase_INIT;

    Erase_INIT.TypeErase = FLASH_TYPEERASE_PAGES;
    Erase_INIT.PageAddress = page_addr;
    Erase_INIT.NbPages = 1;

    uint32_t PageError = 0;

    HAL_FLASH_Unlock();
    status = HAL_FLASHEx_Erase(&Erase_INIT, &PageError);
    HAL_FLASH_Lock();*/
    __disable_irq(); // 关闭中断
    HAL_FLASH_Unlock(); // 解锁Flash存储器

    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR |
        FLASH_FLAG_WRPERR); // 清除Flash标志位

    status = HAL_FLASHEx_OBGetUserData(page_addr); // 擦除指定页

    HAL_FLASH_Lock(); // 锁定Flash存储器
    __enable_irq(); // 使能中断

    return status != HAL_OK ? -1 : 0;
}

// 向Flash存储器写入数据
int flash_write(uint32_t addr, uint8_t *data, uint32_t data_len)
{
    uint32_t word, count, i;
    int ret = -1;

    __disable_irq(); // 关闭中断
    HAL_FLASH_Unlock(); // 解锁Flash存储器

    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR |
        FLASH_FLAG_WRPERR); // 清除Flash标志位

    count = data_len / 4; // 计算需要写入的32位字数
    if (data_len % 4)
        count++;
    for (i = 0 ; i < count ; i++)
    {
        word = *((uint64_t *)data + i); // 从数据缓冲区中读取32位字
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,addr, word) != HAL_OK) // 写入Flash存储器
            goto Exit;

        addr += 4; // 更新地址，指向下一个32位字

    }

    ret = data_len;
Exit:
    HAL_FLASH_Lock(); // 锁定Flash存储器
    __enable_irq(); // 使能中断

    return ret;
}

// 从Flash存储器读取数据
int flash_read(uint32_t addr, uint8_t *data, uint64_t data_len)
{
    uint64_t i;

    for(i = 0; i < data_len; i++)
        data[i] = *(uint8_t *) (addr + i); // 从Flash存储器中读取字节数据

    return i;
}
