
F103BOOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a08  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002bec  08002bec  00012bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c6c  08002c6c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002c6c  08002c6c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c6c  08002c6c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c6c  08002c6c  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c70  08002c70  00012c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002cdc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20000220  08002cdc  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000811c  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a88  00000000  00000000  000281f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000780  00000000  00000000  00029c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a5  00000000  00000000  0002a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019cde  00000000  00000000  0002a99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a3c0  00000000  00000000  0004467b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092190  00000000  00000000  0004ea3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002430  00000000  00000000  000e0bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000e2ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	08002bd4 	.word	0x08002bd4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	08002bd4 	.word	0x08002bd4

08000224 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b08a      	sub	sp, #40	; 0x28
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000238:	4b3b      	ldr	r3, [pc, #236]	; (8000328 <MX_GPIO_Init+0x104>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a3a      	ldr	r2, [pc, #232]	; (8000328 <MX_GPIO_Init+0x104>)
 800023e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b38      	ldr	r3, [pc, #224]	; (8000328 <MX_GPIO_Init+0x104>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000250:	4b35      	ldr	r3, [pc, #212]	; (8000328 <MX_GPIO_Init+0x104>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a34      	ldr	r2, [pc, #208]	; (8000328 <MX_GPIO_Init+0x104>)
 8000256:	f043 0310 	orr.w	r3, r3, #16
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b32      	ldr	r3, [pc, #200]	; (8000328 <MX_GPIO_Init+0x104>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0310 	and.w	r3, r3, #16
 8000264:	613b      	str	r3, [r7, #16]
 8000266:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000268:	4b2f      	ldr	r3, [pc, #188]	; (8000328 <MX_GPIO_Init+0x104>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a2e      	ldr	r2, [pc, #184]	; (8000328 <MX_GPIO_Init+0x104>)
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b2c      	ldr	r3, [pc, #176]	; (8000328 <MX_GPIO_Init+0x104>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0304 	and.w	r3, r3, #4
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000280:	4b29      	ldr	r3, [pc, #164]	; (8000328 <MX_GPIO_Init+0x104>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a28      	ldr	r2, [pc, #160]	; (8000328 <MX_GPIO_Init+0x104>)
 8000286:	f043 0308 	orr.w	r3, r3, #8
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b26      	ldr	r3, [pc, #152]	; (8000328 <MX_GPIO_Init+0x104>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0308 	and.w	r3, r3, #8
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000298:	4b23      	ldr	r3, [pc, #140]	; (8000328 <MX_GPIO_Init+0x104>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a22      	ldr	r2, [pc, #136]	; (8000328 <MX_GPIO_Init+0x104>)
 800029e:	f043 0320 	orr.w	r3, r3, #32
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b20      	ldr	r3, [pc, #128]	; (8000328 <MX_GPIO_Init+0x104>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0320 	and.w	r3, r3, #32
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80002b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002b4:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b6:	2303      	movs	r3, #3
 80002b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002ba:	f107 0318 	add.w	r3, r7, #24
 80002be:	4619      	mov	r1, r3
 80002c0:	481a      	ldr	r0, [pc, #104]	; (800032c <MX_GPIO_Init+0x108>)
 80002c2:	f000 fd03 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80002c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002ca:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002cc:	2303      	movs	r3, #3
 80002ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d0:	f107 0318 	add.w	r3, r7, #24
 80002d4:	4619      	mov	r1, r3
 80002d6:	4816      	ldr	r0, [pc, #88]	; (8000330 <MX_GPIO_Init+0x10c>)
 80002d8:	f000 fcf8 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002dc:	f649 13ff 	movw	r3, #39423	; 0x99ff
 80002e0:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e2:	2303      	movs	r3, #3
 80002e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	4619      	mov	r1, r3
 80002ec:	4811      	ldr	r0, [pc, #68]	; (8000334 <MX_GPIO_Init+0x110>)
 80002ee:	f000 fced 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80002f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002f6:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f8:	2303      	movs	r3, #3
 80002fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002fc:	f107 0318 	add.w	r3, r7, #24
 8000300:	4619      	mov	r1, r3
 8000302:	480d      	ldr	r0, [pc, #52]	; (8000338 <MX_GPIO_Init+0x114>)
 8000304:	f000 fce2 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800030c:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800030e:	2303      	movs	r3, #3
 8000310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000312:	f107 0318 	add.w	r3, r7, #24
 8000316:	4619      	mov	r1, r3
 8000318:	4808      	ldr	r0, [pc, #32]	; (800033c <MX_GPIO_Init+0x118>)
 800031a:	f000 fcd7 	bl	8000ccc <HAL_GPIO_Init>

}
 800031e:	bf00      	nop
 8000320:	3728      	adds	r7, #40	; 0x28
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	40011800 	.word	0x40011800
 8000330:	40011000 	.word	0x40011000
 8000334:	40010800 	.word	0x40010800
 8000338:	40010c00 	.word	0x40010c00
 800033c:	40011400 	.word	0x40011400

08000340 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	b29a      	uxth	r2, r3
 8000350:	f04f 33ff 	mov.w	r3, #4294967295
 8000354:	68b9      	ldr	r1, [r7, #8]
 8000356:	4804      	ldr	r0, [pc, #16]	; (8000368 <_write+0x28>)
 8000358:	f000 fece 	bl	80010f8 <HAL_UART_Transmit>
    return len;
 800035c:	687b      	ldr	r3, [r7, #4]
}
 800035e:	4618      	mov	r0, r3
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000088 	.word	0x20000088

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  app_func_t app;
  uint32_t jump_addr, vt_offset, sp_addr;
  volatile config_t *config = (config_t *)BOOT_DATA_ADDRESS;
 8000372:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <main+0x88>)
 8000374:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000376:	f000 f9f7 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037a:	f7ff ff53 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800037e:	f000 f94f 	bl	8000620 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf(VERSION);
 8000382:	481d      	ldr	r0, [pc, #116]	; (80003f8 <main+0x8c>)
 8000384:	f001 fdb4 	bl	8001ef0 <puts>

  printf("Start application: ");
 8000388:	481c      	ldr	r0, [pc, #112]	; (80003fc <main+0x90>)
 800038a:	f001 fd4b 	bl	8001e24 <iprintf>
  /* Jump to user application */
  if (!config->active_image) {
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	2b00      	cmp	r3, #0
 8000396:	d10c      	bne.n	80003b2 <main+0x46>
      printf(" 0\r\n");
 8000398:	4819      	ldr	r0, [pc, #100]	; (8000400 <main+0x94>)
 800039a:	f001 fda9 	bl	8001ef0 <puts>
      vt_offset = APP1_ADDRESS_OFFSET;
 800039e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003a2:	613b      	str	r3, [r7, #16]
      jump_addr = *(__IO uint32_t *)(APP1_ADDRESS + 4);
 80003a4:	4b17      	ldr	r3, [pc, #92]	; (8000404 <main+0x98>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	617b      	str	r3, [r7, #20]
      sp_addr = *(__IO uint32_t *)APP1_ADDRESS;
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <main+0x9c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	e00b      	b.n	80003ca <main+0x5e>
  } else {
      printf(" 1\r\n");
 80003b2:	4816      	ldr	r0, [pc, #88]	; (800040c <main+0xa0>)
 80003b4:	f001 fd9c 	bl	8001ef0 <puts>
      vt_offset = APP2_ADDRESS_OFFSET;
 80003b8:	f44f 3308 	mov.w	r3, #139264	; 0x22000
 80003bc:	613b      	str	r3, [r7, #16]
      jump_addr = *(__IO uint32_t *)(APP2_ADDRESS + 4);
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <main+0xa4>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	617b      	str	r3, [r7, #20]
      sp_addr = *(__IO uint32_t *)APP2_ADDRESS;
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <main+0xa8>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	60fb      	str	r3, [r7, #12]
  }

  // Relocate the vector table
  SCB->VTOR = FLASH_BASE | vt_offset;
 80003ca:	4a13      	ldr	r2, [pc, #76]	; (8000418 <main+0xac>)
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80003d2:	6093      	str	r3, [r2, #8]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	f383 8808 	msr	MSP, r3
}
 80003de:	bf00      	nop

  // Set the stack pointer
  __set_MSP(sp_addr);
  // Jump to the application
  app = (app_func_t)jump_addr;
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	607b      	str	r3, [r7, #4]
  app();
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4798      	blx	r3

  return 0;
 80003e8:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3718      	adds	r7, #24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	08003800 	.word	0x08003800
 80003f8:	08002bec 	.word	0x08002bec
 80003fc:	08002c14 	.word	0x08002c14
 8000400:	08002c28 	.word	0x08002c28
 8000404:	08004004 	.word	0x08004004
 8000408:	08004000 	.word	0x08004000
 800040c:	08002c2c 	.word	0x08002c2c
 8000410:	08022004 	.word	0x08022004
 8000414:	08022000 	.word	0x08022000
 8000418:	e000ed00 	.word	0xe000ed00

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	e7fe      	b.n	8000424 <Error_Handler+0x8>
	...

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042e:	4b19      	ldr	r3, [pc, #100]	; (8000494 <HAL_MspInit+0x6c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a18      	ldr	r2, [pc, #96]	; (8000494 <HAL_MspInit+0x6c>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b16      	ldr	r3, [pc, #88]	; (8000494 <HAL_MspInit+0x6c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <HAL_MspInit+0x6c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a12      	ldr	r2, [pc, #72]	; (8000494 <HAL_MspInit+0x6c>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <HAL_MspInit+0x6c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	2100      	movs	r1, #0
 8000462:	2005      	movs	r0, #5
 8000464:	f000 fab9 	bl	80009da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000468:	2005      	movs	r0, #5
 800046a:	f000 fad2 	bl	8000a12 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <HAL_MspInit+0x70>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <HAL_MspInit+0x70>)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e2:	f000 f987 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}

080004ea <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr
	...

080004f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <USART1_IRQHandler+0x10>)
 80004fe:	f000 fe7f 	bl	8001200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000088 	.word	0x20000088

0800050c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	e00a      	b.n	8000534 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800051e:	f3af 8000 	nop.w
 8000522:	4601      	mov	r1, r0
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	60ba      	str	r2, [r7, #8]
 800052a:	b2ca      	uxtb	r2, r1
 800052c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	3301      	adds	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	429a      	cmp	r2, r3
 800053a:	dbf0      	blt.n	800051e <_read+0x12>
  }

  return len;
 800053c:	687b      	ldr	r3, [r7, #4]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800056c:	605a      	str	r2, [r3, #4]
  return 0;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <_isatty>:

int _isatty(int file)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800058e:	b480      	push	{r7}
 8000590:	b085      	sub	sp, #20
 8000592:	af00      	add	r7, sp, #0
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800059a:	2300      	movs	r3, #0
}
 800059c:	4618      	mov	r0, r3
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
	...

080005a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <_sbrk+0x5c>)
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <_sbrk+0x60>)
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <_sbrk+0x64>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d102      	bne.n	80005ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <_sbrk+0x64>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <_sbrk+0x68>)
 80005c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <_sbrk+0x64>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d207      	bcs.n	80005e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d8:	f001 fdb8 	bl	800214c <__errno>
 80005dc:	4603      	mov	r3, r0
 80005de:	220c      	movs	r2, #12
 80005e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	e009      	b.n	80005fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <_sbrk+0x64>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <_sbrk+0x64>)
 80005f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005fa:	68fb      	ldr	r3, [r7, #12]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000c000 	.word	0x2000c000
 8000608:	00001000 	.word	0x00001000
 800060c:	20000084 	.word	0x20000084
 8000610:	20000220 	.word	0x20000220

08000614 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART1_UART_Init+0x4c>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_USART1_UART_Init+0x50>)
 8000628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_USART1_UART_Init+0x4c>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART1_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART1_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART1_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART1_UART_Init+0x4c>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART1_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART1_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART1_UART_Init+0x4c>)
 8000658:	f000 fcfe 	bl	8001058 <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000662:	f7ff fedb 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000088 	.word	0x20000088
 8000670:	40013800 	.word	0x40013800

08000674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a20      	ldr	r2, [pc, #128]	; (8000710 <HAL_UART_MspInit+0x9c>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d139      	bne.n	8000708 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <HAL_UART_MspInit+0xa0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <HAL_UART_MspInit+0xa0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <HAL_UART_MspInit+0xa0>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <HAL_UART_MspInit+0xa0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a18      	ldr	r2, [pc, #96]	; (8000714 <HAL_UART_MspInit+0xa0>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <HAL_UART_MspInit+0xa0>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0304 	and.w	r3, r3, #4
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ce:	2303      	movs	r3, #3
 80006d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	4619      	mov	r1, r3
 80006d8:	480f      	ldr	r0, [pc, #60]	; (8000718 <HAL_UART_MspInit+0xa4>)
 80006da:	f000 faf7 	bl	8000ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	4619      	mov	r1, r3
 80006f2:	4809      	ldr	r0, [pc, #36]	; (8000718 <HAL_UART_MspInit+0xa4>)
 80006f4:	f000 faea 	bl	8000ccc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	2025      	movs	r0, #37	; 0x25
 80006fe:	f000 f96c 	bl	80009da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000702:	2025      	movs	r0, #37	; 0x25
 8000704:	f000 f985 	bl	8000a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40013800 	.word	0x40013800
 8000714:	40021000 	.word	0x40021000
 8000718:	40010800 	.word	0x40010800

0800071c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800071c:	f7ff ff7a 	bl	8000614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000722:	490c      	ldr	r1, [pc, #48]	; (8000754 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000724:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a09      	ldr	r2, [pc, #36]	; (800075c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000738:	4c09      	ldr	r4, [pc, #36]	; (8000760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000746:	f001 fd07 	bl	8002158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f7ff fe0f 	bl	800036c <main>
  bx lr
 800074e:	4770      	bx	lr
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000758:	08002c74 	.word	0x08002c74
  ldr r2, =_sbss
 800075c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000760:	20000220 	.word	0x20000220

08000764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_2_IRQHandler>
	...

08000768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_Init+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_Init+0x28>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f923 	bl	80009c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	200f      	movs	r0, #15
 8000780:	f000 f808 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff fe50 	bl	8000428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40022000 	.word	0x40022000

08000794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_InitTick+0x58>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f93b 	bl	8000a2e <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e00e      	b.n	80007e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d80a      	bhi.n	80007de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	f000 f903 	bl	80009da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_InitTick+0x5c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_IncTick+0x1c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_IncTick+0x20>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a03      	ldr	r2, [pc, #12]	; (8000814 <HAL_IncTick+0x20>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	20000008 	.word	0x20000008
 8000814:	200000d0 	.word	0x200000d0

08000818 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return uwTick;
 800081c:	4b02      	ldr	r3, [pc, #8]	; (8000828 <HAL_GetTick+0x10>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	200000d0 	.word	0x200000d0

0800082c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085e:	4a04      	ldr	r2, [pc, #16]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <__NVIC_GetPriorityGrouping+0x18>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	f003 0307 	and.w	r3, r3, #7
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	db0b      	blt.n	80008ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 021f 	and.w	r2, r3, #31
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <__NVIC_EnableIRQ+0x34>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	095b      	lsrs	r3, r3, #5
 80008b0:	2001      	movs	r0, #1
 80008b2:	fa00 f202 	lsl.w	r2, r0, r2
 80008b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	; (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	; 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000990:	d301      	bcc.n	8000996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000992:	2301      	movs	r3, #1
 8000994:	e00f      	b.n	80009b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <SysTick_Config+0x40>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099e:	210f      	movs	r1, #15
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f7ff ff90 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <SysTick_Config+0x40>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <SysTick_Config+0x40>)
 80009b0:	2207      	movs	r2, #7
 80009b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	e000e010 	.word	0xe000e010

080009c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ff2d 	bl	800082c <__NVIC_SetPriorityGrouping>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ec:	f7ff ff42 	bl	8000874 <__NVIC_GetPriorityGrouping>
 80009f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	68b9      	ldr	r1, [r7, #8]
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f7ff ff90 	bl	800091c <NVIC_EncodePriority>
 80009fc:	4602      	mov	r2, r0
 80009fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff5f 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff35 	bl	8000890 <__NVIC_EnableIRQ>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ffa2 	bl	8000980 <SysTick_Config>
 8000a3c:	4603      	mov	r3, r0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b085      	sub	sp, #20
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d008      	beq.n	8000a70 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2204      	movs	r2, #4
 8000a62:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e020      	b.n	8000ab2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f022 020e 	bic.w	r2, r2, #14
 8000a7e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f022 0201 	bic.w	r2, r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a98:	2101      	movs	r1, #1
 8000a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d005      	beq.n	8000ae0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e0d6      	b.n	8000c8e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f022 020e 	bic.w	r2, r2, #14
 8000aee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f022 0201 	bic.w	r2, r2, #1
 8000afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b64      	ldr	r3, [pc, #400]	; (8000c98 <HAL_DMA_Abort_IT+0x1dc>)
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d958      	bls.n	8000bbe <HAL_DMA_Abort_IT+0x102>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a62      	ldr	r2, [pc, #392]	; (8000c9c <HAL_DMA_Abort_IT+0x1e0>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d04f      	beq.n	8000bb6 <HAL_DMA_Abort_IT+0xfa>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a61      	ldr	r2, [pc, #388]	; (8000ca0 <HAL_DMA_Abort_IT+0x1e4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d048      	beq.n	8000bb2 <HAL_DMA_Abort_IT+0xf6>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a5f      	ldr	r2, [pc, #380]	; (8000ca4 <HAL_DMA_Abort_IT+0x1e8>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d040      	beq.n	8000bac <HAL_DMA_Abort_IT+0xf0>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a5e      	ldr	r2, [pc, #376]	; (8000ca8 <HAL_DMA_Abort_IT+0x1ec>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d038      	beq.n	8000ba6 <HAL_DMA_Abort_IT+0xea>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a5c      	ldr	r2, [pc, #368]	; (8000cac <HAL_DMA_Abort_IT+0x1f0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d030      	beq.n	8000ba0 <HAL_DMA_Abort_IT+0xe4>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a5b      	ldr	r2, [pc, #364]	; (8000cb0 <HAL_DMA_Abort_IT+0x1f4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d028      	beq.n	8000b9a <HAL_DMA_Abort_IT+0xde>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a52      	ldr	r2, [pc, #328]	; (8000c98 <HAL_DMA_Abort_IT+0x1dc>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d020      	beq.n	8000b94 <HAL_DMA_Abort_IT+0xd8>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a57      	ldr	r2, [pc, #348]	; (8000cb4 <HAL_DMA_Abort_IT+0x1f8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d019      	beq.n	8000b90 <HAL_DMA_Abort_IT+0xd4>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a55      	ldr	r2, [pc, #340]	; (8000cb8 <HAL_DMA_Abort_IT+0x1fc>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d012      	beq.n	8000b8c <HAL_DMA_Abort_IT+0xd0>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a54      	ldr	r2, [pc, #336]	; (8000cbc <HAL_DMA_Abort_IT+0x200>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d00a      	beq.n	8000b86 <HAL_DMA_Abort_IT+0xca>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a52      	ldr	r2, [pc, #328]	; (8000cc0 <HAL_DMA_Abort_IT+0x204>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d102      	bne.n	8000b80 <HAL_DMA_Abort_IT+0xc4>
 8000b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7e:	e01b      	b.n	8000bb8 <HAL_DMA_Abort_IT+0xfc>
 8000b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b84:	e018      	b.n	8000bb8 <HAL_DMA_Abort_IT+0xfc>
 8000b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8a:	e015      	b.n	8000bb8 <HAL_DMA_Abort_IT+0xfc>
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	e013      	b.n	8000bb8 <HAL_DMA_Abort_IT+0xfc>
 8000b90:	2301      	movs	r3, #1
 8000b92:	e011      	b.n	8000bb8 <HAL_DMA_Abort_IT+0xfc>
 8000b94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b98:	e00e      	b.n	8000bb8 <HAL_DMA_Abort_IT+0xfc>
 8000b9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b9e:	e00b      	b.n	8000bb8 <HAL_DMA_Abort_IT+0xfc>
 8000ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba4:	e008      	b.n	8000bb8 <HAL_DMA_Abort_IT+0xfc>
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	e005      	b.n	8000bb8 <HAL_DMA_Abort_IT+0xfc>
 8000bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb0:	e002      	b.n	8000bb8 <HAL_DMA_Abort_IT+0xfc>
 8000bb2:	2310      	movs	r3, #16
 8000bb4:	e000      	b.n	8000bb8 <HAL_DMA_Abort_IT+0xfc>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	4a42      	ldr	r2, [pc, #264]	; (8000cc4 <HAL_DMA_Abort_IT+0x208>)
 8000bba:	6053      	str	r3, [r2, #4]
 8000bbc:	e057      	b.n	8000c6e <HAL_DMA_Abort_IT+0x1b2>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a36      	ldr	r2, [pc, #216]	; (8000c9c <HAL_DMA_Abort_IT+0x1e0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d04f      	beq.n	8000c68 <HAL_DMA_Abort_IT+0x1ac>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <HAL_DMA_Abort_IT+0x1e4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d048      	beq.n	8000c64 <HAL_DMA_Abort_IT+0x1a8>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a33      	ldr	r2, [pc, #204]	; (8000ca4 <HAL_DMA_Abort_IT+0x1e8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d040      	beq.n	8000c5e <HAL_DMA_Abort_IT+0x1a2>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a31      	ldr	r2, [pc, #196]	; (8000ca8 <HAL_DMA_Abort_IT+0x1ec>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d038      	beq.n	8000c58 <HAL_DMA_Abort_IT+0x19c>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a30      	ldr	r2, [pc, #192]	; (8000cac <HAL_DMA_Abort_IT+0x1f0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d030      	beq.n	8000c52 <HAL_DMA_Abort_IT+0x196>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a2e      	ldr	r2, [pc, #184]	; (8000cb0 <HAL_DMA_Abort_IT+0x1f4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d028      	beq.n	8000c4c <HAL_DMA_Abort_IT+0x190>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a26      	ldr	r2, [pc, #152]	; (8000c98 <HAL_DMA_Abort_IT+0x1dc>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d020      	beq.n	8000c46 <HAL_DMA_Abort_IT+0x18a>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <HAL_DMA_Abort_IT+0x1f8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d019      	beq.n	8000c42 <HAL_DMA_Abort_IT+0x186>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a29      	ldr	r2, [pc, #164]	; (8000cb8 <HAL_DMA_Abort_IT+0x1fc>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d012      	beq.n	8000c3e <HAL_DMA_Abort_IT+0x182>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a27      	ldr	r2, [pc, #156]	; (8000cbc <HAL_DMA_Abort_IT+0x200>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d00a      	beq.n	8000c38 <HAL_DMA_Abort_IT+0x17c>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a26      	ldr	r2, [pc, #152]	; (8000cc0 <HAL_DMA_Abort_IT+0x204>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d102      	bne.n	8000c32 <HAL_DMA_Abort_IT+0x176>
 8000c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c30:	e01b      	b.n	8000c6a <HAL_DMA_Abort_IT+0x1ae>
 8000c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c36:	e018      	b.n	8000c6a <HAL_DMA_Abort_IT+0x1ae>
 8000c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3c:	e015      	b.n	8000c6a <HAL_DMA_Abort_IT+0x1ae>
 8000c3e:	2310      	movs	r3, #16
 8000c40:	e013      	b.n	8000c6a <HAL_DMA_Abort_IT+0x1ae>
 8000c42:	2301      	movs	r3, #1
 8000c44:	e011      	b.n	8000c6a <HAL_DMA_Abort_IT+0x1ae>
 8000c46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c4a:	e00e      	b.n	8000c6a <HAL_DMA_Abort_IT+0x1ae>
 8000c4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c50:	e00b      	b.n	8000c6a <HAL_DMA_Abort_IT+0x1ae>
 8000c52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c56:	e008      	b.n	8000c6a <HAL_DMA_Abort_IT+0x1ae>
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	e005      	b.n	8000c6a <HAL_DMA_Abort_IT+0x1ae>
 8000c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c62:	e002      	b.n	8000c6a <HAL_DMA_Abort_IT+0x1ae>
 8000c64:	2310      	movs	r3, #16
 8000c66:	e000      	b.n	8000c6a <HAL_DMA_Abort_IT+0x1ae>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_DMA_Abort_IT+0x20c>)
 8000c6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	4798      	blx	r3
    } 
  }
  return status;
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40020080 	.word	0x40020080
 8000c9c:	40020008 	.word	0x40020008
 8000ca0:	4002001c 	.word	0x4002001c
 8000ca4:	40020030 	.word	0x40020030
 8000ca8:	40020044 	.word	0x40020044
 8000cac:	40020058 	.word	0x40020058
 8000cb0:	4002006c 	.word	0x4002006c
 8000cb4:	40020408 	.word	0x40020408
 8000cb8:	4002041c 	.word	0x4002041c
 8000cbc:	40020430 	.word	0x40020430
 8000cc0:	40020444 	.word	0x40020444
 8000cc4:	40020400 	.word	0x40020400
 8000cc8:	40020000 	.word	0x40020000

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b08b      	sub	sp, #44	; 0x2c
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cde:	e179      	b.n	8000fd4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	69fa      	ldr	r2, [r7, #28]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	f040 8168 	bne.w	8000fce <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	4a96      	ldr	r2, [pc, #600]	; (8000f5c <HAL_GPIO_Init+0x290>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d05e      	beq.n	8000dc6 <HAL_GPIO_Init+0xfa>
 8000d08:	4a94      	ldr	r2, [pc, #592]	; (8000f5c <HAL_GPIO_Init+0x290>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d875      	bhi.n	8000dfa <HAL_GPIO_Init+0x12e>
 8000d0e:	4a94      	ldr	r2, [pc, #592]	; (8000f60 <HAL_GPIO_Init+0x294>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d058      	beq.n	8000dc6 <HAL_GPIO_Init+0xfa>
 8000d14:	4a92      	ldr	r2, [pc, #584]	; (8000f60 <HAL_GPIO_Init+0x294>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d86f      	bhi.n	8000dfa <HAL_GPIO_Init+0x12e>
 8000d1a:	4a92      	ldr	r2, [pc, #584]	; (8000f64 <HAL_GPIO_Init+0x298>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d052      	beq.n	8000dc6 <HAL_GPIO_Init+0xfa>
 8000d20:	4a90      	ldr	r2, [pc, #576]	; (8000f64 <HAL_GPIO_Init+0x298>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d869      	bhi.n	8000dfa <HAL_GPIO_Init+0x12e>
 8000d26:	4a90      	ldr	r2, [pc, #576]	; (8000f68 <HAL_GPIO_Init+0x29c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d04c      	beq.n	8000dc6 <HAL_GPIO_Init+0xfa>
 8000d2c:	4a8e      	ldr	r2, [pc, #568]	; (8000f68 <HAL_GPIO_Init+0x29c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d863      	bhi.n	8000dfa <HAL_GPIO_Init+0x12e>
 8000d32:	4a8e      	ldr	r2, [pc, #568]	; (8000f6c <HAL_GPIO_Init+0x2a0>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d046      	beq.n	8000dc6 <HAL_GPIO_Init+0xfa>
 8000d38:	4a8c      	ldr	r2, [pc, #560]	; (8000f6c <HAL_GPIO_Init+0x2a0>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d85d      	bhi.n	8000dfa <HAL_GPIO_Init+0x12e>
 8000d3e:	2b12      	cmp	r3, #18
 8000d40:	d82a      	bhi.n	8000d98 <HAL_GPIO_Init+0xcc>
 8000d42:	2b12      	cmp	r3, #18
 8000d44:	d859      	bhi.n	8000dfa <HAL_GPIO_Init+0x12e>
 8000d46:	a201      	add	r2, pc, #4	; (adr r2, 8000d4c <HAL_GPIO_Init+0x80>)
 8000d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4c:	08000dc7 	.word	0x08000dc7
 8000d50:	08000da1 	.word	0x08000da1
 8000d54:	08000db3 	.word	0x08000db3
 8000d58:	08000df5 	.word	0x08000df5
 8000d5c:	08000dfb 	.word	0x08000dfb
 8000d60:	08000dfb 	.word	0x08000dfb
 8000d64:	08000dfb 	.word	0x08000dfb
 8000d68:	08000dfb 	.word	0x08000dfb
 8000d6c:	08000dfb 	.word	0x08000dfb
 8000d70:	08000dfb 	.word	0x08000dfb
 8000d74:	08000dfb 	.word	0x08000dfb
 8000d78:	08000dfb 	.word	0x08000dfb
 8000d7c:	08000dfb 	.word	0x08000dfb
 8000d80:	08000dfb 	.word	0x08000dfb
 8000d84:	08000dfb 	.word	0x08000dfb
 8000d88:	08000dfb 	.word	0x08000dfb
 8000d8c:	08000dfb 	.word	0x08000dfb
 8000d90:	08000da9 	.word	0x08000da9
 8000d94:	08000dbd 	.word	0x08000dbd
 8000d98:	4a75      	ldr	r2, [pc, #468]	; (8000f70 <HAL_GPIO_Init+0x2a4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d013      	beq.n	8000dc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d9e:	e02c      	b.n	8000dfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	623b      	str	r3, [r7, #32]
          break;
 8000da6:	e029      	b.n	8000dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	3304      	adds	r3, #4
 8000dae:	623b      	str	r3, [r7, #32]
          break;
 8000db0:	e024      	b.n	8000dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	3308      	adds	r3, #8
 8000db8:	623b      	str	r3, [r7, #32]
          break;
 8000dba:	e01f      	b.n	8000dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	330c      	adds	r3, #12
 8000dc2:	623b      	str	r3, [r7, #32]
          break;
 8000dc4:	e01a      	b.n	8000dfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d102      	bne.n	8000dd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	623b      	str	r3, [r7, #32]
          break;
 8000dd2:	e013      	b.n	8000dfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d105      	bne.n	8000de8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	611a      	str	r2, [r3, #16]
          break;
 8000de6:	e009      	b.n	8000dfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de8:	2308      	movs	r3, #8
 8000dea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	615a      	str	r2, [r3, #20]
          break;
 8000df2:	e003      	b.n	8000dfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
          break;
 8000df8:	e000      	b.n	8000dfc <HAL_GPIO_Init+0x130>
          break;
 8000dfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2bff      	cmp	r3, #255	; 0xff
 8000e00:	d801      	bhi.n	8000e06 <HAL_GPIO_Init+0x13a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	e001      	b.n	8000e0a <HAL_GPIO_Init+0x13e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	2bff      	cmp	r3, #255	; 0xff
 8000e10:	d802      	bhi.n	8000e18 <HAL_GPIO_Init+0x14c>
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	e002      	b.n	8000e1e <HAL_GPIO_Init+0x152>
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	3b08      	subs	r3, #8
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	210f      	movs	r1, #15
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	401a      	ands	r2, r3
 8000e30:	6a39      	ldr	r1, [r7, #32]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 80c1 	beq.w	8000fce <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e4c:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <HAL_GPIO_Init+0x2a8>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a48      	ldr	r2, [pc, #288]	; (8000f74 <HAL_GPIO_Init+0x2a8>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b46      	ldr	r3, [pc, #280]	; (8000f74 <HAL_GPIO_Init+0x2a8>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e64:	4a44      	ldr	r2, [pc, #272]	; (8000f78 <HAL_GPIO_Init+0x2ac>)
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	089b      	lsrs	r3, r3, #2
 8000e6a:	3302      	adds	r3, #2
 8000e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a3c      	ldr	r2, [pc, #240]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d01f      	beq.n	8000ed0 <HAL_GPIO_Init+0x204>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a3b      	ldr	r2, [pc, #236]	; (8000f80 <HAL_GPIO_Init+0x2b4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d019      	beq.n	8000ecc <HAL_GPIO_Init+0x200>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a3a      	ldr	r2, [pc, #232]	; (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d013      	beq.n	8000ec8 <HAL_GPIO_Init+0x1fc>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a39      	ldr	r2, [pc, #228]	; (8000f88 <HAL_GPIO_Init+0x2bc>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d00d      	beq.n	8000ec4 <HAL_GPIO_Init+0x1f8>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a38      	ldr	r2, [pc, #224]	; (8000f8c <HAL_GPIO_Init+0x2c0>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d007      	beq.n	8000ec0 <HAL_GPIO_Init+0x1f4>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a37      	ldr	r2, [pc, #220]	; (8000f90 <HAL_GPIO_Init+0x2c4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d101      	bne.n	8000ebc <HAL_GPIO_Init+0x1f0>
 8000eb8:	2305      	movs	r3, #5
 8000eba:	e00a      	b.n	8000ed2 <HAL_GPIO_Init+0x206>
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	e008      	b.n	8000ed2 <HAL_GPIO_Init+0x206>
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e006      	b.n	8000ed2 <HAL_GPIO_Init+0x206>
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e004      	b.n	8000ed2 <HAL_GPIO_Init+0x206>
 8000ec8:	2302      	movs	r3, #2
 8000eca:	e002      	b.n	8000ed2 <HAL_GPIO_Init+0x206>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <HAL_GPIO_Init+0x206>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed4:	f002 0203 	and.w	r2, r2, #3
 8000ed8:	0092      	lsls	r2, r2, #2
 8000eda:	4093      	lsls	r3, r2
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ee2:	4925      	ldr	r1, [pc, #148]	; (8000f78 <HAL_GPIO_Init+0x2ac>)
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	4924      	ldr	r1, [pc, #144]	; (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	608b      	str	r3, [r1, #8]
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	4920      	ldr	r1, [pc, #128]	; (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	491a      	ldr	r1, [pc, #104]	; (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	60cb      	str	r3, [r1, #12]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4916      	ldr	r1, [pc, #88]	; (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d025      	beq.n	8000f98 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	4910      	ldr	r1, [pc, #64]	; (8000f94 <HAL_GPIO_Init+0x2c8>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	604b      	str	r3, [r1, #4]
 8000f58:	e025      	b.n	8000fa6 <HAL_GPIO_Init+0x2da>
 8000f5a:	bf00      	nop
 8000f5c:	10320000 	.word	0x10320000
 8000f60:	10310000 	.word	0x10310000
 8000f64:	10220000 	.word	0x10220000
 8000f68:	10210000 	.word	0x10210000
 8000f6c:	10120000 	.word	0x10120000
 8000f70:	10110000 	.word	0x10110000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	40010c00 	.word	0x40010c00
 8000f84:	40011000 	.word	0x40011000
 8000f88:	40011400 	.word	0x40011400
 8000f8c:	40011800 	.word	0x40011800
 8000f90:	40011c00 	.word	0x40011c00
 8000f94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	4913      	ldr	r1, [pc, #76]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
 8000fbe:	e006      	b.n	8000fce <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	4909      	ldr	r1, [pc, #36]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	fa22 f303 	lsr.w	r3, r2, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f47f ae7e 	bne.w	8000ce0 <HAL_GPIO_Init+0x14>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	372c      	adds	r7, #44	; 0x2c
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <HAL_RCC_GetHCLKFreq+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	20000000 	.word	0x20000000

08001008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800100c:	f7ff fff2 	bl	8000ff4 <HAL_RCC_GetHCLKFreq>
 8001010:	4602      	mov	r2, r0
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	0a1b      	lsrs	r3, r3, #8
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	4903      	ldr	r1, [pc, #12]	; (800102c <HAL_RCC_GetPCLK1Freq+0x24>)
 800101e:	5ccb      	ldrb	r3, [r1, r3]
 8001020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40021000 	.word	0x40021000
 800102c:	08002c30 	.word	0x08002c30

08001030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_RCC_GetHCLKFreq>
 8001038:	4602      	mov	r2, r0
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	0adb      	lsrs	r3, r3, #11
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	4903      	ldr	r1, [pc, #12]	; (8001054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001046:	5ccb      	ldrb	r3, [r1, r3]
 8001048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	08002c30 	.word	0x08002c30

08001058 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e042      	b.n	80010f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d106      	bne.n	8001084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff faf8 	bl	8000674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2224      	movs	r2, #36	; 0x24
 8001088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800109a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fd71 	bl	8001b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80010b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80010c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2220      	movs	r2, #32
 80010dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2220      	movs	r2, #32
 80010e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	4613      	mov	r3, r2
 8001106:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b20      	cmp	r3, #32
 8001116:	d16d      	bne.n	80011f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <HAL_UART_Transmit+0x2c>
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e066      	b.n	80011f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2200      	movs	r2, #0
 800112c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2221      	movs	r2, #33	; 0x21
 8001132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001136:	f7ff fb6f 	bl	8000818 <HAL_GetTick>
 800113a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	88fa      	ldrh	r2, [r7, #6]
 8001140:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	88fa      	ldrh	r2, [r7, #6]
 8001146:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001150:	d108      	bne.n	8001164 <HAL_UART_Transmit+0x6c>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d104      	bne.n	8001164 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	e003      	b.n	800116c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800116c:	e02a      	b.n	80011c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2200      	movs	r2, #0
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f000 faf9 	bl	8001770 <UART_WaitOnFlagUntilTimeout>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e036      	b.n	80011f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10b      	bne.n	80011a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800119c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	3302      	adds	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	e007      	b.n	80011b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	3301      	adds	r3, #1
 80011b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	3b01      	subs	r3, #1
 80011be:	b29a      	uxth	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1cf      	bne.n	800116e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2200      	movs	r2, #0
 80011d6:	2140      	movs	r1, #64	; 0x40
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 fac9 	bl	8001770 <UART_WaitOnFlagUntilTimeout>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e006      	b.n	80011f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2220      	movs	r2, #32
 80011ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e000      	b.n	80011f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80011f4:	2302      	movs	r3, #2
  }
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3720      	adds	r7, #32
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0ba      	sub	sp, #232	; 0xe8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800123e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10f      	bne.n	8001266 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800124a:	f003 0320 	and.w	r3, r3, #32
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <HAL_UART_IRQHandler+0x66>
 8001252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fbd1 	bl	8001a06 <UART_Receive_IT>
      return;
 8001264:	e25b      	b.n	800171e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80de 	beq.w	800142c <HAL_UART_IRQHandler+0x22c>
 8001270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d106      	bne.n	800128a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800127c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001280:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80d1 	beq.w	800142c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800128a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <HAL_UART_IRQHandler+0xae>
 8001296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800129a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f043 0201 	orr.w	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80012ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <HAL_UART_IRQHandler+0xd2>
 80012ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f043 0202 	orr.w	r2, r3, #2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80012d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00b      	beq.n	80012f6 <HAL_UART_IRQHandler+0xf6>
 80012de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f043 0204 	orr.w	r2, r3, #4
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80012f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d011      	beq.n	8001326 <HAL_UART_IRQHandler+0x126>
 8001302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800130e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f043 0208 	orr.w	r2, r3, #8
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 81f2 	beq.w	8001714 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <HAL_UART_IRQHandler+0x14e>
 800133c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 fb5c 	bl	8001a06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf14      	ite	ne
 800135c:	2301      	movne	r3, #1
 800135e:	2300      	moveq	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d103      	bne.n	800137a <HAL_UART_IRQHandler+0x17a>
 8001372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001376:	2b00      	cmp	r3, #0
 8001378:	d04f      	beq.n	800141a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fa66 	bl	800184c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800138a:	2b00      	cmp	r3, #0
 800138c:	d041      	beq.n	8001412 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3314      	adds	r3, #20
 8001394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800139c:	e853 3f00 	ldrex	r3, [r3]
 80013a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80013a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3314      	adds	r3, #20
 80013b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80013ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80013be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80013c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80013ca:	e841 2300 	strex	r3, r2, [r1]
 80013ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80013d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1d9      	bne.n	800138e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d013      	beq.n	800140a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e6:	4a7e      	ldr	r2, [pc, #504]	; (80015e0 <HAL_UART_IRQHandler+0x3e0>)
 80013e8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fb64 	bl	8000abc <HAL_DMA_Abort_IT>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d016      	beq.n	8001428 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001404:	4610      	mov	r0, r2
 8001406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001408:	e00e      	b.n	8001428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f99c 	bl	8001748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001410:	e00a      	b.n	8001428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f998 	bl	8001748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001418:	e006      	b.n	8001428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f994 	bl	8001748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001426:	e175      	b.n	8001714 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001428:	bf00      	nop
    return;
 800142a:	e173      	b.n	8001714 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 814f 	bne.w	80016d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8148 	beq.w	80016d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 8141 	beq.w	80016d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80b6 	beq.w	80015e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8145 	beq.w	8001718 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001496:	429a      	cmp	r2, r3
 8001498:	f080 813e 	bcs.w	8001718 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80014a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b20      	cmp	r3, #32
 80014ac:	f000 8088 	beq.w	80015c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	330c      	adds	r3, #12
 80014b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014be:	e853 3f00 	ldrex	r3, [r3]
 80014c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80014c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	330c      	adds	r3, #12
 80014d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80014dc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80014e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80014e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80014ec:	e841 2300 	strex	r3, r2, [r1]
 80014f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80014f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1d9      	bne.n	80014b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3314      	adds	r3, #20
 8001502:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001506:	e853 3f00 	ldrex	r3, [r3]
 800150a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800150c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3314      	adds	r3, #20
 800151c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001520:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001524:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001526:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001528:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800152c:	e841 2300 	strex	r3, r2, [r1]
 8001530:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1e1      	bne.n	80014fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3314      	adds	r3, #20
 800153e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001542:	e853 3f00 	ldrex	r3, [r3]
 8001546:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800154a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800154e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3314      	adds	r3, #20
 8001558:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800155c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800155e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001560:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001562:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001564:	e841 2300 	strex	r3, r2, [r1]
 8001568:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800156a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e3      	bne.n	8001538 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2220      	movs	r2, #32
 8001574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	330c      	adds	r3, #12
 8001584:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001588:	e853 3f00 	ldrex	r3, [r3]
 800158c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800158e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001590:	f023 0310 	bic.w	r3, r3, #16
 8001594:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	330c      	adds	r3, #12
 800159e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80015a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80015a4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80015a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015aa:	e841 2300 	strex	r3, r2, [r1]
 80015ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80015b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1e3      	bne.n	800157e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fa43 	bl	8000a46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2202      	movs	r2, #2
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f8bf 	bl	800175a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80015dc:	e09c      	b.n	8001718 <HAL_UART_IRQHandler+0x518>
 80015de:	bf00      	nop
 80015e0:	08001911 	.word	0x08001911
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 808e 	beq.w	800171c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8089 	beq.w	800171c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	330c      	adds	r3, #12
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001614:	e853 3f00 	ldrex	r3, [r3]
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	330c      	adds	r3, #12
 800162a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800162e:	647a      	str	r2, [r7, #68]	; 0x44
 8001630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001636:	e841 2300 	strex	r3, r2, [r1]
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800163c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1e3      	bne.n	800160a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3314      	adds	r3, #20
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	e853 3f00 	ldrex	r3, [r3]
 8001650:	623b      	str	r3, [r7, #32]
   return(result);
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3314      	adds	r3, #20
 8001662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001666:	633a      	str	r2, [r7, #48]	; 0x30
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800166a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800166c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800166e:	e841 2300 	strex	r3, r2, [r1]
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1e3      	bne.n	8001642 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2220      	movs	r2, #32
 800167e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	330c      	adds	r3, #12
 800168e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	e853 3f00 	ldrex	r3, [r3]
 8001696:	60fb      	str	r3, [r7, #12]
   return(result);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f023 0310 	bic.w	r3, r3, #16
 800169e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	330c      	adds	r3, #12
 80016a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80016ac:	61fa      	str	r2, [r7, #28]
 80016ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016b0:	69b9      	ldr	r1, [r7, #24]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	e841 2300 	strex	r3, r2, [r1]
 80016b8:	617b      	str	r3, [r7, #20]
   return(result);
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e3      	bne.n	8001688 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2202      	movs	r2, #2
 80016c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80016c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80016ca:	4619      	mov	r1, r3
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f844 	bl	800175a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80016d2:	e023      	b.n	800171c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80016d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d009      	beq.n	80016f4 <HAL_UART_IRQHandler+0x4f4>
 80016e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 f923 	bl	8001938 <UART_Transmit_IT>
    return;
 80016f2:	e014      	b.n	800171e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80016f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00e      	beq.n	800171e <HAL_UART_IRQHandler+0x51e>
 8001700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f962 	bl	80019d6 <UART_EndTransmit_IT>
    return;
 8001712:	e004      	b.n	800171e <HAL_UART_IRQHandler+0x51e>
    return;
 8001714:	bf00      	nop
 8001716:	e002      	b.n	800171e <HAL_UART_IRQHandler+0x51e>
      return;
 8001718:	bf00      	nop
 800171a:	e000      	b.n	800171e <HAL_UART_IRQHandler+0x51e>
      return;
 800171c:	bf00      	nop
  }
}
 800171e:	37e8      	adds	r7, #232	; 0xe8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b090      	sub	sp, #64	; 0x40
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	4613      	mov	r3, r2
 800177e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001780:	e050      	b.n	8001824 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d04c      	beq.n	8001824 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800178a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001790:	f7ff f842 	bl	8000818 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800179c:	429a      	cmp	r2, r3
 800179e:	d241      	bcs.n	8001824 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	330c      	adds	r3, #12
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017aa:	e853 3f00 	ldrex	r3, [r3]
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	330c      	adds	r3, #12
 80017be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017c0:	637a      	str	r2, [r7, #52]	; 0x34
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017c8:	e841 2300 	strex	r3, r2, [r1]
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80017ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e5      	bne.n	80017a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3314      	adds	r3, #20
 80017da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	e853 3f00 	ldrex	r3, [r3]
 80017e2:	613b      	str	r3, [r7, #16]
   return(result);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	3314      	adds	r3, #20
 80017f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017f4:	623a      	str	r2, [r7, #32]
 80017f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017f8:	69f9      	ldr	r1, [r7, #28]
 80017fa:	6a3a      	ldr	r2, [r7, #32]
 80017fc:	e841 2300 	strex	r3, r2, [r1]
 8001800:	61bb      	str	r3, [r7, #24]
   return(result);
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1e5      	bne.n	80017d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2220      	movs	r2, #32
 800180c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e00f      	b.n	8001844 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	4013      	ands	r3, r2
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	429a      	cmp	r2, r3
 8001832:	bf0c      	ite	eq
 8001834:	2301      	moveq	r3, #1
 8001836:	2300      	movne	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	429a      	cmp	r2, r3
 8001840:	d09f      	beq.n	8001782 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3740      	adds	r7, #64	; 0x40
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800184c:	b480      	push	{r7}
 800184e:	b095      	sub	sp, #84	; 0x54
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	330c      	adds	r3, #12
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800185c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185e:	e853 3f00 	ldrex	r3, [r3]
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001866:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800186a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	330c      	adds	r3, #12
 8001872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001874:	643a      	str	r2, [r7, #64]	; 0x40
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001878:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800187a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800187c:	e841 2300 	strex	r3, r2, [r1]
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1e5      	bne.n	8001854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3314      	adds	r3, #20
 800188e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	e853 3f00 	ldrex	r3, [r3]
 8001896:	61fb      	str	r3, [r7, #28]
   return(result);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3314      	adds	r3, #20
 80018a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b0:	e841 2300 	strex	r3, r2, [r1]
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1e5      	bne.n	8001888 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d119      	bne.n	80018f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	330c      	adds	r3, #12
 80018ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	e853 3f00 	ldrex	r3, [r3]
 80018d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f023 0310 	bic.w	r3, r3, #16
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	330c      	adds	r3, #12
 80018e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018e4:	61ba      	str	r2, [r7, #24]
 80018e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018e8:	6979      	ldr	r1, [r7, #20]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	e841 2300 	strex	r3, r2, [r1]
 80018f0:	613b      	str	r3, [r7, #16]
   return(result);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1e5      	bne.n	80018c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2220      	movs	r2, #32
 80018fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001906:	bf00      	nop
 8001908:	3754      	adds	r7, #84	; 0x54
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff ff0c 	bl	8001748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b21      	cmp	r3, #33	; 0x21
 800194a:	d13e      	bne.n	80019ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001954:	d114      	bne.n	8001980 <UART_Transmit_IT+0x48>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d110      	bne.n	8001980 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001972:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	1c9a      	adds	r2, r3, #2
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	621a      	str	r2, [r3, #32]
 800197e:	e008      	b.n	8001992 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	1c59      	adds	r1, r3, #1
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6211      	str	r1, [r2, #32]
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001996:	b29b      	uxth	r3, r3
 8001998:	3b01      	subs	r3, #1
 800199a:	b29b      	uxth	r3, r3
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4619      	mov	r1, r3
 80019a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10f      	bne.n	80019c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
  }
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fe94 	bl	8001724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b08c      	sub	sp, #48	; 0x30
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b22      	cmp	r3, #34	; 0x22
 8001a18:	f040 80ae 	bne.w	8001b78 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a24:	d117      	bne.n	8001a56 <UART_Receive_IT+0x50>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d113      	bne.n	8001a56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	1c9a      	adds	r2, r3, #2
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
 8001a54:	e026      	b.n	8001aa4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a68:	d007      	beq.n	8001a7a <UART_Receive_IT+0x74>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10a      	bne.n	8001a88 <UART_Receive_IT+0x82>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e008      	b.n	8001a9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d15d      	bne.n	8001b74 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0220 	bic.w	r2, r2, #32
 8001ac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d135      	bne.n	8001b6a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	330c      	adds	r3, #12
 8001b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	e853 3f00 	ldrex	r3, [r3]
 8001b12:	613b      	str	r3, [r7, #16]
   return(result);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f023 0310 	bic.w	r3, r3, #16
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	330c      	adds	r3, #12
 8001b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b24:	623a      	str	r2, [r7, #32]
 8001b26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b28:	69f9      	ldr	r1, [r7, #28]
 8001b2a:	6a3a      	ldr	r2, [r7, #32]
 8001b2c:	e841 2300 	strex	r3, r2, [r1]
 8001b30:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e5      	bne.n	8001b04 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d10a      	bne.n	8001b5c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fdf9 	bl	800175a <HAL_UARTEx_RxEventCallback>
 8001b68:	e002      	b.n	8001b70 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fde3 	bl	8001736 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e002      	b.n	8001b7a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e000      	b.n	8001b7a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
  }
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3730      	adds	r7, #48	; 0x30
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001bbe:	f023 030c 	bic.w	r3, r3, #12
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2c      	ldr	r2, [pc, #176]	; (8001c98 <UART_SetConfig+0x114>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d103      	bne.n	8001bf4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001bec:	f7ff fa20 	bl	8001030 <HAL_RCC_GetPCLK2Freq>
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	e002      	b.n	8001bfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001bf4:	f7ff fa08 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 8001bf8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	009a      	lsls	r2, r3, #2
 8001c04:	441a      	add	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <UART_SetConfig+0x118>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	0119      	lsls	r1, r3, #4
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	009a      	lsls	r2, r3, #2
 8001c24:	441a      	add	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c30:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <UART_SetConfig+0x118>)
 8001c32:	fba3 0302 	umull	r0, r3, r3, r2
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2064      	movs	r0, #100	; 0x64
 8001c3a:	fb00 f303 	mul.w	r3, r0, r3
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	3332      	adds	r3, #50	; 0x32
 8001c44:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <UART_SetConfig+0x118>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c50:	4419      	add	r1, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	009a      	lsls	r2, r3, #2
 8001c5c:	441a      	add	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <UART_SetConfig+0x118>)
 8001c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2064      	movs	r0, #100	; 0x64
 8001c72:	fb00 f303 	mul.w	r3, r0, r3
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	3332      	adds	r3, #50	; 0x32
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <UART_SetConfig+0x118>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	f003 020f 	and.w	r2, r3, #15
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	440a      	add	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40013800 	.word	0x40013800
 8001c9c:	51eb851f 	.word	0x51eb851f

08001ca0 <std>:
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	b510      	push	{r4, lr}
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8001caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001cae:	6083      	str	r3, [r0, #8]
 8001cb0:	8181      	strh	r1, [r0, #12]
 8001cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8001cb4:	81c2      	strh	r2, [r0, #14]
 8001cb6:	6183      	str	r3, [r0, #24]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	2208      	movs	r2, #8
 8001cbc:	305c      	adds	r0, #92	; 0x5c
 8001cbe:	f000 f9f7 	bl	80020b0 <memset>
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <std+0x58>)
 8001cc4:	6224      	str	r4, [r4, #32]
 8001cc6:	6263      	str	r3, [r4, #36]	; 0x24
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <std+0x5c>)
 8001cca:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <std+0x60>)
 8001cce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <std+0x64>)
 8001cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <std+0x68>)
 8001cd6:	429c      	cmp	r4, r3
 8001cd8:	d006      	beq.n	8001ce8 <std+0x48>
 8001cda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001cde:	4294      	cmp	r4, r2
 8001ce0:	d002      	beq.n	8001ce8 <std+0x48>
 8001ce2:	33d0      	adds	r3, #208	; 0xd0
 8001ce4:	429c      	cmp	r4, r3
 8001ce6:	d105      	bne.n	8001cf4 <std+0x54>
 8001ce8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cf0:	f000 ba56 	b.w	80021a0 <__retarget_lock_init_recursive>
 8001cf4:	bd10      	pop	{r4, pc}
 8001cf6:	bf00      	nop
 8001cf8:	08001f01 	.word	0x08001f01
 8001cfc:	08001f23 	.word	0x08001f23
 8001d00:	08001f5b 	.word	0x08001f5b
 8001d04:	08001f7f 	.word	0x08001f7f
 8001d08:	200000d4 	.word	0x200000d4

08001d0c <stdio_exit_handler>:
 8001d0c:	4a02      	ldr	r2, [pc, #8]	; (8001d18 <stdio_exit_handler+0xc>)
 8001d0e:	4903      	ldr	r1, [pc, #12]	; (8001d1c <stdio_exit_handler+0x10>)
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <stdio_exit_handler+0x14>)
 8001d12:	f000 b869 	b.w	8001de8 <_fwalk_sglue>
 8001d16:	bf00      	nop
 8001d18:	2000000c 	.word	0x2000000c
 8001d1c:	08002a41 	.word	0x08002a41
 8001d20:	20000018 	.word	0x20000018

08001d24 <cleanup_stdio>:
 8001d24:	6841      	ldr	r1, [r0, #4]
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <cleanup_stdio+0x34>)
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	4299      	cmp	r1, r3
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	d001      	beq.n	8001d34 <cleanup_stdio+0x10>
 8001d30:	f000 fe86 	bl	8002a40 <_fflush_r>
 8001d34:	68a1      	ldr	r1, [r4, #8]
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <cleanup_stdio+0x38>)
 8001d38:	4299      	cmp	r1, r3
 8001d3a:	d002      	beq.n	8001d42 <cleanup_stdio+0x1e>
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f000 fe7f 	bl	8002a40 <_fflush_r>
 8001d42:	68e1      	ldr	r1, [r4, #12]
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <cleanup_stdio+0x3c>)
 8001d46:	4299      	cmp	r1, r3
 8001d48:	d004      	beq.n	8001d54 <cleanup_stdio+0x30>
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d50:	f000 be76 	b.w	8002a40 <_fflush_r>
 8001d54:	bd10      	pop	{r4, pc}
 8001d56:	bf00      	nop
 8001d58:	200000d4 	.word	0x200000d4
 8001d5c:	2000013c 	.word	0x2000013c
 8001d60:	200001a4 	.word	0x200001a4

08001d64 <global_stdio_init.part.0>:
 8001d64:	b510      	push	{r4, lr}
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <global_stdio_init.part.0+0x30>)
 8001d68:	4c0b      	ldr	r4, [pc, #44]	; (8001d98 <global_stdio_init.part.0+0x34>)
 8001d6a:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <global_stdio_init.part.0+0x38>)
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	2104      	movs	r1, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	f7ff ff94 	bl	8001ca0 <std>
 8001d78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2109      	movs	r1, #9
 8001d80:	f7ff ff8e 	bl	8001ca0 <std>
 8001d84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001d88:	2202      	movs	r2, #2
 8001d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d8e:	2112      	movs	r1, #18
 8001d90:	f7ff bf86 	b.w	8001ca0 <std>
 8001d94:	2000020c 	.word	0x2000020c
 8001d98:	200000d4 	.word	0x200000d4
 8001d9c:	08001d0d 	.word	0x08001d0d

08001da0 <__sfp_lock_acquire>:
 8001da0:	4801      	ldr	r0, [pc, #4]	; (8001da8 <__sfp_lock_acquire+0x8>)
 8001da2:	f000 b9fe 	b.w	80021a2 <__retarget_lock_acquire_recursive>
 8001da6:	bf00      	nop
 8001da8:	20000215 	.word	0x20000215

08001dac <__sfp_lock_release>:
 8001dac:	4801      	ldr	r0, [pc, #4]	; (8001db4 <__sfp_lock_release+0x8>)
 8001dae:	f000 b9f9 	b.w	80021a4 <__retarget_lock_release_recursive>
 8001db2:	bf00      	nop
 8001db4:	20000215 	.word	0x20000215

08001db8 <__sinit>:
 8001db8:	b510      	push	{r4, lr}
 8001dba:	4604      	mov	r4, r0
 8001dbc:	f7ff fff0 	bl	8001da0 <__sfp_lock_acquire>
 8001dc0:	6a23      	ldr	r3, [r4, #32]
 8001dc2:	b11b      	cbz	r3, 8001dcc <__sinit+0x14>
 8001dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dc8:	f7ff bff0 	b.w	8001dac <__sfp_lock_release>
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <__sinit+0x28>)
 8001dce:	6223      	str	r3, [r4, #32]
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <__sinit+0x2c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f5      	bne.n	8001dc4 <__sinit+0xc>
 8001dd8:	f7ff ffc4 	bl	8001d64 <global_stdio_init.part.0>
 8001ddc:	e7f2      	b.n	8001dc4 <__sinit+0xc>
 8001dde:	bf00      	nop
 8001de0:	08001d25 	.word	0x08001d25
 8001de4:	2000020c 	.word	0x2000020c

08001de8 <_fwalk_sglue>:
 8001de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dec:	4607      	mov	r7, r0
 8001dee:	4688      	mov	r8, r1
 8001df0:	4614      	mov	r4, r2
 8001df2:	2600      	movs	r6, #0
 8001df4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001df8:	f1b9 0901 	subs.w	r9, r9, #1
 8001dfc:	d505      	bpl.n	8001e0a <_fwalk_sglue+0x22>
 8001dfe:	6824      	ldr	r4, [r4, #0]
 8001e00:	2c00      	cmp	r4, #0
 8001e02:	d1f7      	bne.n	8001df4 <_fwalk_sglue+0xc>
 8001e04:	4630      	mov	r0, r6
 8001e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e0a:	89ab      	ldrh	r3, [r5, #12]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d907      	bls.n	8001e20 <_fwalk_sglue+0x38>
 8001e10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e14:	3301      	adds	r3, #1
 8001e16:	d003      	beq.n	8001e20 <_fwalk_sglue+0x38>
 8001e18:	4629      	mov	r1, r5
 8001e1a:	4638      	mov	r0, r7
 8001e1c:	47c0      	blx	r8
 8001e1e:	4306      	orrs	r6, r0
 8001e20:	3568      	adds	r5, #104	; 0x68
 8001e22:	e7e9      	b.n	8001df8 <_fwalk_sglue+0x10>

08001e24 <iprintf>:
 8001e24:	b40f      	push	{r0, r1, r2, r3}
 8001e26:	b507      	push	{r0, r1, r2, lr}
 8001e28:	4906      	ldr	r1, [pc, #24]	; (8001e44 <iprintf+0x20>)
 8001e2a:	ab04      	add	r3, sp, #16
 8001e2c:	6808      	ldr	r0, [r1, #0]
 8001e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e32:	6881      	ldr	r1, [r0, #8]
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	f000 fad3 	bl	80023e0 <_vfiprintf_r>
 8001e3a:	b003      	add	sp, #12
 8001e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e40:	b004      	add	sp, #16
 8001e42:	4770      	bx	lr
 8001e44:	20000064 	.word	0x20000064

08001e48 <_puts_r>:
 8001e48:	6a03      	ldr	r3, [r0, #32]
 8001e4a:	b570      	push	{r4, r5, r6, lr}
 8001e4c:	4605      	mov	r5, r0
 8001e4e:	460e      	mov	r6, r1
 8001e50:	6884      	ldr	r4, [r0, #8]
 8001e52:	b90b      	cbnz	r3, 8001e58 <_puts_r+0x10>
 8001e54:	f7ff ffb0 	bl	8001db8 <__sinit>
 8001e58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e5a:	07db      	lsls	r3, r3, #31
 8001e5c:	d405      	bmi.n	8001e6a <_puts_r+0x22>
 8001e5e:	89a3      	ldrh	r3, [r4, #12]
 8001e60:	0598      	lsls	r0, r3, #22
 8001e62:	d402      	bmi.n	8001e6a <_puts_r+0x22>
 8001e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e66:	f000 f99c 	bl	80021a2 <__retarget_lock_acquire_recursive>
 8001e6a:	89a3      	ldrh	r3, [r4, #12]
 8001e6c:	0719      	lsls	r1, r3, #28
 8001e6e:	d513      	bpl.n	8001e98 <_puts_r+0x50>
 8001e70:	6923      	ldr	r3, [r4, #16]
 8001e72:	b18b      	cbz	r3, 8001e98 <_puts_r+0x50>
 8001e74:	3e01      	subs	r6, #1
 8001e76:	68a3      	ldr	r3, [r4, #8]
 8001e78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60a3      	str	r3, [r4, #8]
 8001e80:	b9e9      	cbnz	r1, 8001ebe <_puts_r+0x76>
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	da2e      	bge.n	8001ee4 <_puts_r+0x9c>
 8001e86:	4622      	mov	r2, r4
 8001e88:	210a      	movs	r1, #10
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	f000 f87b 	bl	8001f86 <__swbuf_r>
 8001e90:	3001      	adds	r0, #1
 8001e92:	d007      	beq.n	8001ea4 <_puts_r+0x5c>
 8001e94:	250a      	movs	r5, #10
 8001e96:	e007      	b.n	8001ea8 <_puts_r+0x60>
 8001e98:	4621      	mov	r1, r4
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	f000 f8b0 	bl	8002000 <__swsetup_r>
 8001ea0:	2800      	cmp	r0, #0
 8001ea2:	d0e7      	beq.n	8001e74 <_puts_r+0x2c>
 8001ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8001ea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001eaa:	07da      	lsls	r2, r3, #31
 8001eac:	d405      	bmi.n	8001eba <_puts_r+0x72>
 8001eae:	89a3      	ldrh	r3, [r4, #12]
 8001eb0:	059b      	lsls	r3, r3, #22
 8001eb2:	d402      	bmi.n	8001eba <_puts_r+0x72>
 8001eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001eb6:	f000 f975 	bl	80021a4 <__retarget_lock_release_recursive>
 8001eba:	4628      	mov	r0, r5
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	da04      	bge.n	8001ecc <_puts_r+0x84>
 8001ec2:	69a2      	ldr	r2, [r4, #24]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dc06      	bgt.n	8001ed6 <_puts_r+0x8e>
 8001ec8:	290a      	cmp	r1, #10
 8001eca:	d004      	beq.n	8001ed6 <_puts_r+0x8e>
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	6022      	str	r2, [r4, #0]
 8001ed2:	7019      	strb	r1, [r3, #0]
 8001ed4:	e7cf      	b.n	8001e76 <_puts_r+0x2e>
 8001ed6:	4622      	mov	r2, r4
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f000 f854 	bl	8001f86 <__swbuf_r>
 8001ede:	3001      	adds	r0, #1
 8001ee0:	d1c9      	bne.n	8001e76 <_puts_r+0x2e>
 8001ee2:	e7df      	b.n	8001ea4 <_puts_r+0x5c>
 8001ee4:	250a      	movs	r5, #10
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	6022      	str	r2, [r4, #0]
 8001eec:	701d      	strb	r5, [r3, #0]
 8001eee:	e7db      	b.n	8001ea8 <_puts_r+0x60>

08001ef0 <puts>:
 8001ef0:	4b02      	ldr	r3, [pc, #8]	; (8001efc <puts+0xc>)
 8001ef2:	4601      	mov	r1, r0
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	f7ff bfa7 	b.w	8001e48 <_puts_r>
 8001efa:	bf00      	nop
 8001efc:	20000064 	.word	0x20000064

08001f00 <__sread>:
 8001f00:	b510      	push	{r4, lr}
 8001f02:	460c      	mov	r4, r1
 8001f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f08:	f000 f8fc 	bl	8002104 <_read_r>
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	bfab      	itete	ge
 8001f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f12:	89a3      	ldrhlt	r3, [r4, #12]
 8001f14:	181b      	addge	r3, r3, r0
 8001f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f1a:	bfac      	ite	ge
 8001f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f1e:	81a3      	strhlt	r3, [r4, #12]
 8001f20:	bd10      	pop	{r4, pc}

08001f22 <__swrite>:
 8001f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f26:	461f      	mov	r7, r3
 8001f28:	898b      	ldrh	r3, [r1, #12]
 8001f2a:	4605      	mov	r5, r0
 8001f2c:	05db      	lsls	r3, r3, #23
 8001f2e:	460c      	mov	r4, r1
 8001f30:	4616      	mov	r6, r2
 8001f32:	d505      	bpl.n	8001f40 <__swrite+0x1e>
 8001f34:	2302      	movs	r3, #2
 8001f36:	2200      	movs	r2, #0
 8001f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f3c:	f000 f8d0 	bl	80020e0 <_lseek_r>
 8001f40:	89a3      	ldrh	r3, [r4, #12]
 8001f42:	4632      	mov	r2, r6
 8001f44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f48:	81a3      	strh	r3, [r4, #12]
 8001f4a:	4628      	mov	r0, r5
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f56:	f000 b8e7 	b.w	8002128 <_write_r>

08001f5a <__sseek>:
 8001f5a:	b510      	push	{r4, lr}
 8001f5c:	460c      	mov	r4, r1
 8001f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f62:	f000 f8bd 	bl	80020e0 <_lseek_r>
 8001f66:	1c43      	adds	r3, r0, #1
 8001f68:	89a3      	ldrh	r3, [r4, #12]
 8001f6a:	bf15      	itete	ne
 8001f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f76:	81a3      	strheq	r3, [r4, #12]
 8001f78:	bf18      	it	ne
 8001f7a:	81a3      	strhne	r3, [r4, #12]
 8001f7c:	bd10      	pop	{r4, pc}

08001f7e <__sclose>:
 8001f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f82:	f000 b89d 	b.w	80020c0 <_close_r>

08001f86 <__swbuf_r>:
 8001f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f88:	460e      	mov	r6, r1
 8001f8a:	4614      	mov	r4, r2
 8001f8c:	4605      	mov	r5, r0
 8001f8e:	b118      	cbz	r0, 8001f98 <__swbuf_r+0x12>
 8001f90:	6a03      	ldr	r3, [r0, #32]
 8001f92:	b90b      	cbnz	r3, 8001f98 <__swbuf_r+0x12>
 8001f94:	f7ff ff10 	bl	8001db8 <__sinit>
 8001f98:	69a3      	ldr	r3, [r4, #24]
 8001f9a:	60a3      	str	r3, [r4, #8]
 8001f9c:	89a3      	ldrh	r3, [r4, #12]
 8001f9e:	071a      	lsls	r2, r3, #28
 8001fa0:	d525      	bpl.n	8001fee <__swbuf_r+0x68>
 8001fa2:	6923      	ldr	r3, [r4, #16]
 8001fa4:	b31b      	cbz	r3, 8001fee <__swbuf_r+0x68>
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	6922      	ldr	r2, [r4, #16]
 8001faa:	b2f6      	uxtb	r6, r6
 8001fac:	1a98      	subs	r0, r3, r2
 8001fae:	6963      	ldr	r3, [r4, #20]
 8001fb0:	4637      	mov	r7, r6
 8001fb2:	4283      	cmp	r3, r0
 8001fb4:	dc04      	bgt.n	8001fc0 <__swbuf_r+0x3a>
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f000 fd41 	bl	8002a40 <_fflush_r>
 8001fbe:	b9e0      	cbnz	r0, 8001ffa <__swbuf_r+0x74>
 8001fc0:	68a3      	ldr	r3, [r4, #8]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	60a3      	str	r3, [r4, #8]
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	6022      	str	r2, [r4, #0]
 8001fcc:	701e      	strb	r6, [r3, #0]
 8001fce:	6962      	ldr	r2, [r4, #20]
 8001fd0:	1c43      	adds	r3, r0, #1
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d004      	beq.n	8001fe0 <__swbuf_r+0x5a>
 8001fd6:	89a3      	ldrh	r3, [r4, #12]
 8001fd8:	07db      	lsls	r3, r3, #31
 8001fda:	d506      	bpl.n	8001fea <__swbuf_r+0x64>
 8001fdc:	2e0a      	cmp	r6, #10
 8001fde:	d104      	bne.n	8001fea <__swbuf_r+0x64>
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	4628      	mov	r0, r5
 8001fe4:	f000 fd2c 	bl	8002a40 <_fflush_r>
 8001fe8:	b938      	cbnz	r0, 8001ffa <__swbuf_r+0x74>
 8001fea:	4638      	mov	r0, r7
 8001fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fee:	4621      	mov	r1, r4
 8001ff0:	4628      	mov	r0, r5
 8001ff2:	f000 f805 	bl	8002000 <__swsetup_r>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d0d5      	beq.n	8001fa6 <__swbuf_r+0x20>
 8001ffa:	f04f 37ff 	mov.w	r7, #4294967295
 8001ffe:	e7f4      	b.n	8001fea <__swbuf_r+0x64>

08002000 <__swsetup_r>:
 8002000:	b538      	push	{r3, r4, r5, lr}
 8002002:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <__swsetup_r+0xac>)
 8002004:	4605      	mov	r5, r0
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	460c      	mov	r4, r1
 800200a:	b118      	cbz	r0, 8002014 <__swsetup_r+0x14>
 800200c:	6a03      	ldr	r3, [r0, #32]
 800200e:	b90b      	cbnz	r3, 8002014 <__swsetup_r+0x14>
 8002010:	f7ff fed2 	bl	8001db8 <__sinit>
 8002014:	89a3      	ldrh	r3, [r4, #12]
 8002016:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800201a:	0718      	lsls	r0, r3, #28
 800201c:	d422      	bmi.n	8002064 <__swsetup_r+0x64>
 800201e:	06d9      	lsls	r1, r3, #27
 8002020:	d407      	bmi.n	8002032 <__swsetup_r+0x32>
 8002022:	2309      	movs	r3, #9
 8002024:	602b      	str	r3, [r5, #0]
 8002026:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800202a:	f04f 30ff 	mov.w	r0, #4294967295
 800202e:	81a3      	strh	r3, [r4, #12]
 8002030:	e034      	b.n	800209c <__swsetup_r+0x9c>
 8002032:	0758      	lsls	r0, r3, #29
 8002034:	d512      	bpl.n	800205c <__swsetup_r+0x5c>
 8002036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002038:	b141      	cbz	r1, 800204c <__swsetup_r+0x4c>
 800203a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800203e:	4299      	cmp	r1, r3
 8002040:	d002      	beq.n	8002048 <__swsetup_r+0x48>
 8002042:	4628      	mov	r0, r5
 8002044:	f000 f8b0 	bl	80021a8 <_free_r>
 8002048:	2300      	movs	r3, #0
 800204a:	6363      	str	r3, [r4, #52]	; 0x34
 800204c:	89a3      	ldrh	r3, [r4, #12]
 800204e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002052:	81a3      	strh	r3, [r4, #12]
 8002054:	2300      	movs	r3, #0
 8002056:	6063      	str	r3, [r4, #4]
 8002058:	6923      	ldr	r3, [r4, #16]
 800205a:	6023      	str	r3, [r4, #0]
 800205c:	89a3      	ldrh	r3, [r4, #12]
 800205e:	f043 0308 	orr.w	r3, r3, #8
 8002062:	81a3      	strh	r3, [r4, #12]
 8002064:	6923      	ldr	r3, [r4, #16]
 8002066:	b94b      	cbnz	r3, 800207c <__swsetup_r+0x7c>
 8002068:	89a3      	ldrh	r3, [r4, #12]
 800206a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800206e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002072:	d003      	beq.n	800207c <__swsetup_r+0x7c>
 8002074:	4621      	mov	r1, r4
 8002076:	4628      	mov	r0, r5
 8002078:	f000 fd2f 	bl	8002ada <__smakebuf_r>
 800207c:	89a0      	ldrh	r0, [r4, #12]
 800207e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002082:	f010 0301 	ands.w	r3, r0, #1
 8002086:	d00a      	beq.n	800209e <__swsetup_r+0x9e>
 8002088:	2300      	movs	r3, #0
 800208a:	60a3      	str	r3, [r4, #8]
 800208c:	6963      	ldr	r3, [r4, #20]
 800208e:	425b      	negs	r3, r3
 8002090:	61a3      	str	r3, [r4, #24]
 8002092:	6923      	ldr	r3, [r4, #16]
 8002094:	b943      	cbnz	r3, 80020a8 <__swsetup_r+0xa8>
 8002096:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800209a:	d1c4      	bne.n	8002026 <__swsetup_r+0x26>
 800209c:	bd38      	pop	{r3, r4, r5, pc}
 800209e:	0781      	lsls	r1, r0, #30
 80020a0:	bf58      	it	pl
 80020a2:	6963      	ldrpl	r3, [r4, #20]
 80020a4:	60a3      	str	r3, [r4, #8]
 80020a6:	e7f4      	b.n	8002092 <__swsetup_r+0x92>
 80020a8:	2000      	movs	r0, #0
 80020aa:	e7f7      	b.n	800209c <__swsetup_r+0x9c>
 80020ac:	20000064 	.word	0x20000064

080020b0 <memset>:
 80020b0:	4603      	mov	r3, r0
 80020b2:	4402      	add	r2, r0
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d100      	bne.n	80020ba <memset+0xa>
 80020b8:	4770      	bx	lr
 80020ba:	f803 1b01 	strb.w	r1, [r3], #1
 80020be:	e7f9      	b.n	80020b4 <memset+0x4>

080020c0 <_close_r>:
 80020c0:	b538      	push	{r3, r4, r5, lr}
 80020c2:	2300      	movs	r3, #0
 80020c4:	4d05      	ldr	r5, [pc, #20]	; (80020dc <_close_r+0x1c>)
 80020c6:	4604      	mov	r4, r0
 80020c8:	4608      	mov	r0, r1
 80020ca:	602b      	str	r3, [r5, #0]
 80020cc:	f7fe fa3b 	bl	8000546 <_close>
 80020d0:	1c43      	adds	r3, r0, #1
 80020d2:	d102      	bne.n	80020da <_close_r+0x1a>
 80020d4:	682b      	ldr	r3, [r5, #0]
 80020d6:	b103      	cbz	r3, 80020da <_close_r+0x1a>
 80020d8:	6023      	str	r3, [r4, #0]
 80020da:	bd38      	pop	{r3, r4, r5, pc}
 80020dc:	20000210 	.word	0x20000210

080020e0 <_lseek_r>:
 80020e0:	b538      	push	{r3, r4, r5, lr}
 80020e2:	4604      	mov	r4, r0
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	2200      	movs	r2, #0
 80020ea:	4d05      	ldr	r5, [pc, #20]	; (8002100 <_lseek_r+0x20>)
 80020ec:	602a      	str	r2, [r5, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f7fe fa4d 	bl	800058e <_lseek>
 80020f4:	1c43      	adds	r3, r0, #1
 80020f6:	d102      	bne.n	80020fe <_lseek_r+0x1e>
 80020f8:	682b      	ldr	r3, [r5, #0]
 80020fa:	b103      	cbz	r3, 80020fe <_lseek_r+0x1e>
 80020fc:	6023      	str	r3, [r4, #0]
 80020fe:	bd38      	pop	{r3, r4, r5, pc}
 8002100:	20000210 	.word	0x20000210

08002104 <_read_r>:
 8002104:	b538      	push	{r3, r4, r5, lr}
 8002106:	4604      	mov	r4, r0
 8002108:	4608      	mov	r0, r1
 800210a:	4611      	mov	r1, r2
 800210c:	2200      	movs	r2, #0
 800210e:	4d05      	ldr	r5, [pc, #20]	; (8002124 <_read_r+0x20>)
 8002110:	602a      	str	r2, [r5, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	f7fe f9fa 	bl	800050c <_read>
 8002118:	1c43      	adds	r3, r0, #1
 800211a:	d102      	bne.n	8002122 <_read_r+0x1e>
 800211c:	682b      	ldr	r3, [r5, #0]
 800211e:	b103      	cbz	r3, 8002122 <_read_r+0x1e>
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	bd38      	pop	{r3, r4, r5, pc}
 8002124:	20000210 	.word	0x20000210

08002128 <_write_r>:
 8002128:	b538      	push	{r3, r4, r5, lr}
 800212a:	4604      	mov	r4, r0
 800212c:	4608      	mov	r0, r1
 800212e:	4611      	mov	r1, r2
 8002130:	2200      	movs	r2, #0
 8002132:	4d05      	ldr	r5, [pc, #20]	; (8002148 <_write_r+0x20>)
 8002134:	602a      	str	r2, [r5, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	f7fe f902 	bl	8000340 <_write>
 800213c:	1c43      	adds	r3, r0, #1
 800213e:	d102      	bne.n	8002146 <_write_r+0x1e>
 8002140:	682b      	ldr	r3, [r5, #0]
 8002142:	b103      	cbz	r3, 8002146 <_write_r+0x1e>
 8002144:	6023      	str	r3, [r4, #0]
 8002146:	bd38      	pop	{r3, r4, r5, pc}
 8002148:	20000210 	.word	0x20000210

0800214c <__errno>:
 800214c:	4b01      	ldr	r3, [pc, #4]	; (8002154 <__errno+0x8>)
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000064 	.word	0x20000064

08002158 <__libc_init_array>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	2600      	movs	r6, #0
 800215c:	4d0c      	ldr	r5, [pc, #48]	; (8002190 <__libc_init_array+0x38>)
 800215e:	4c0d      	ldr	r4, [pc, #52]	; (8002194 <__libc_init_array+0x3c>)
 8002160:	1b64      	subs	r4, r4, r5
 8002162:	10a4      	asrs	r4, r4, #2
 8002164:	42a6      	cmp	r6, r4
 8002166:	d109      	bne.n	800217c <__libc_init_array+0x24>
 8002168:	f000 fd34 	bl	8002bd4 <_init>
 800216c:	2600      	movs	r6, #0
 800216e:	4d0a      	ldr	r5, [pc, #40]	; (8002198 <__libc_init_array+0x40>)
 8002170:	4c0a      	ldr	r4, [pc, #40]	; (800219c <__libc_init_array+0x44>)
 8002172:	1b64      	subs	r4, r4, r5
 8002174:	10a4      	asrs	r4, r4, #2
 8002176:	42a6      	cmp	r6, r4
 8002178:	d105      	bne.n	8002186 <__libc_init_array+0x2e>
 800217a:	bd70      	pop	{r4, r5, r6, pc}
 800217c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002180:	4798      	blx	r3
 8002182:	3601      	adds	r6, #1
 8002184:	e7ee      	b.n	8002164 <__libc_init_array+0xc>
 8002186:	f855 3b04 	ldr.w	r3, [r5], #4
 800218a:	4798      	blx	r3
 800218c:	3601      	adds	r6, #1
 800218e:	e7f2      	b.n	8002176 <__libc_init_array+0x1e>
 8002190:	08002c6c 	.word	0x08002c6c
 8002194:	08002c6c 	.word	0x08002c6c
 8002198:	08002c6c 	.word	0x08002c6c
 800219c:	08002c70 	.word	0x08002c70

080021a0 <__retarget_lock_init_recursive>:
 80021a0:	4770      	bx	lr

080021a2 <__retarget_lock_acquire_recursive>:
 80021a2:	4770      	bx	lr

080021a4 <__retarget_lock_release_recursive>:
 80021a4:	4770      	bx	lr
	...

080021a8 <_free_r>:
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4605      	mov	r5, r0
 80021ac:	2900      	cmp	r1, #0
 80021ae:	d040      	beq.n	8002232 <_free_r+0x8a>
 80021b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021b4:	1f0c      	subs	r4, r1, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bfb8      	it	lt
 80021ba:	18e4      	addlt	r4, r4, r3
 80021bc:	f000 f8dc 	bl	8002378 <__malloc_lock>
 80021c0:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <_free_r+0x8c>)
 80021c2:	6813      	ldr	r3, [r2, #0]
 80021c4:	b933      	cbnz	r3, 80021d4 <_free_r+0x2c>
 80021c6:	6063      	str	r3, [r4, #4]
 80021c8:	6014      	str	r4, [r2, #0]
 80021ca:	4628      	mov	r0, r5
 80021cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021d0:	f000 b8d8 	b.w	8002384 <__malloc_unlock>
 80021d4:	42a3      	cmp	r3, r4
 80021d6:	d908      	bls.n	80021ea <_free_r+0x42>
 80021d8:	6820      	ldr	r0, [r4, #0]
 80021da:	1821      	adds	r1, r4, r0
 80021dc:	428b      	cmp	r3, r1
 80021de:	bf01      	itttt	eq
 80021e0:	6819      	ldreq	r1, [r3, #0]
 80021e2:	685b      	ldreq	r3, [r3, #4]
 80021e4:	1809      	addeq	r1, r1, r0
 80021e6:	6021      	streq	r1, [r4, #0]
 80021e8:	e7ed      	b.n	80021c6 <_free_r+0x1e>
 80021ea:	461a      	mov	r2, r3
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	b10b      	cbz	r3, 80021f4 <_free_r+0x4c>
 80021f0:	42a3      	cmp	r3, r4
 80021f2:	d9fa      	bls.n	80021ea <_free_r+0x42>
 80021f4:	6811      	ldr	r1, [r2, #0]
 80021f6:	1850      	adds	r0, r2, r1
 80021f8:	42a0      	cmp	r0, r4
 80021fa:	d10b      	bne.n	8002214 <_free_r+0x6c>
 80021fc:	6820      	ldr	r0, [r4, #0]
 80021fe:	4401      	add	r1, r0
 8002200:	1850      	adds	r0, r2, r1
 8002202:	4283      	cmp	r3, r0
 8002204:	6011      	str	r1, [r2, #0]
 8002206:	d1e0      	bne.n	80021ca <_free_r+0x22>
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4408      	add	r0, r1
 800220e:	6010      	str	r0, [r2, #0]
 8002210:	6053      	str	r3, [r2, #4]
 8002212:	e7da      	b.n	80021ca <_free_r+0x22>
 8002214:	d902      	bls.n	800221c <_free_r+0x74>
 8002216:	230c      	movs	r3, #12
 8002218:	602b      	str	r3, [r5, #0]
 800221a:	e7d6      	b.n	80021ca <_free_r+0x22>
 800221c:	6820      	ldr	r0, [r4, #0]
 800221e:	1821      	adds	r1, r4, r0
 8002220:	428b      	cmp	r3, r1
 8002222:	bf01      	itttt	eq
 8002224:	6819      	ldreq	r1, [r3, #0]
 8002226:	685b      	ldreq	r3, [r3, #4]
 8002228:	1809      	addeq	r1, r1, r0
 800222a:	6021      	streq	r1, [r4, #0]
 800222c:	6063      	str	r3, [r4, #4]
 800222e:	6054      	str	r4, [r2, #4]
 8002230:	e7cb      	b.n	80021ca <_free_r+0x22>
 8002232:	bd38      	pop	{r3, r4, r5, pc}
 8002234:	20000218 	.word	0x20000218

08002238 <sbrk_aligned>:
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	4e0e      	ldr	r6, [pc, #56]	; (8002274 <sbrk_aligned+0x3c>)
 800223c:	460c      	mov	r4, r1
 800223e:	6831      	ldr	r1, [r6, #0]
 8002240:	4605      	mov	r5, r0
 8002242:	b911      	cbnz	r1, 800224a <sbrk_aligned+0x12>
 8002244:	f000 fca8 	bl	8002b98 <_sbrk_r>
 8002248:	6030      	str	r0, [r6, #0]
 800224a:	4621      	mov	r1, r4
 800224c:	4628      	mov	r0, r5
 800224e:	f000 fca3 	bl	8002b98 <_sbrk_r>
 8002252:	1c43      	adds	r3, r0, #1
 8002254:	d00a      	beq.n	800226c <sbrk_aligned+0x34>
 8002256:	1cc4      	adds	r4, r0, #3
 8002258:	f024 0403 	bic.w	r4, r4, #3
 800225c:	42a0      	cmp	r0, r4
 800225e:	d007      	beq.n	8002270 <sbrk_aligned+0x38>
 8002260:	1a21      	subs	r1, r4, r0
 8002262:	4628      	mov	r0, r5
 8002264:	f000 fc98 	bl	8002b98 <_sbrk_r>
 8002268:	3001      	adds	r0, #1
 800226a:	d101      	bne.n	8002270 <sbrk_aligned+0x38>
 800226c:	f04f 34ff 	mov.w	r4, #4294967295
 8002270:	4620      	mov	r0, r4
 8002272:	bd70      	pop	{r4, r5, r6, pc}
 8002274:	2000021c 	.word	0x2000021c

08002278 <_malloc_r>:
 8002278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800227c:	1ccd      	adds	r5, r1, #3
 800227e:	f025 0503 	bic.w	r5, r5, #3
 8002282:	3508      	adds	r5, #8
 8002284:	2d0c      	cmp	r5, #12
 8002286:	bf38      	it	cc
 8002288:	250c      	movcc	r5, #12
 800228a:	2d00      	cmp	r5, #0
 800228c:	4607      	mov	r7, r0
 800228e:	db01      	blt.n	8002294 <_malloc_r+0x1c>
 8002290:	42a9      	cmp	r1, r5
 8002292:	d905      	bls.n	80022a0 <_malloc_r+0x28>
 8002294:	230c      	movs	r3, #12
 8002296:	2600      	movs	r6, #0
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4630      	mov	r0, r6
 800229c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002374 <_malloc_r+0xfc>
 80022a4:	f000 f868 	bl	8002378 <__malloc_lock>
 80022a8:	f8d8 3000 	ldr.w	r3, [r8]
 80022ac:	461c      	mov	r4, r3
 80022ae:	bb5c      	cbnz	r4, 8002308 <_malloc_r+0x90>
 80022b0:	4629      	mov	r1, r5
 80022b2:	4638      	mov	r0, r7
 80022b4:	f7ff ffc0 	bl	8002238 <sbrk_aligned>
 80022b8:	1c43      	adds	r3, r0, #1
 80022ba:	4604      	mov	r4, r0
 80022bc:	d155      	bne.n	800236a <_malloc_r+0xf2>
 80022be:	f8d8 4000 	ldr.w	r4, [r8]
 80022c2:	4626      	mov	r6, r4
 80022c4:	2e00      	cmp	r6, #0
 80022c6:	d145      	bne.n	8002354 <_malloc_r+0xdc>
 80022c8:	2c00      	cmp	r4, #0
 80022ca:	d048      	beq.n	800235e <_malloc_r+0xe6>
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	4631      	mov	r1, r6
 80022d0:	4638      	mov	r0, r7
 80022d2:	eb04 0903 	add.w	r9, r4, r3
 80022d6:	f000 fc5f 	bl	8002b98 <_sbrk_r>
 80022da:	4581      	cmp	r9, r0
 80022dc:	d13f      	bne.n	800235e <_malloc_r+0xe6>
 80022de:	6821      	ldr	r1, [r4, #0]
 80022e0:	4638      	mov	r0, r7
 80022e2:	1a6d      	subs	r5, r5, r1
 80022e4:	4629      	mov	r1, r5
 80022e6:	f7ff ffa7 	bl	8002238 <sbrk_aligned>
 80022ea:	3001      	adds	r0, #1
 80022ec:	d037      	beq.n	800235e <_malloc_r+0xe6>
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	442b      	add	r3, r5
 80022f2:	6023      	str	r3, [r4, #0]
 80022f4:	f8d8 3000 	ldr.w	r3, [r8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d038      	beq.n	800236e <_malloc_r+0xf6>
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	42a2      	cmp	r2, r4
 8002300:	d12b      	bne.n	800235a <_malloc_r+0xe2>
 8002302:	2200      	movs	r2, #0
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	e00f      	b.n	8002328 <_malloc_r+0xb0>
 8002308:	6822      	ldr	r2, [r4, #0]
 800230a:	1b52      	subs	r2, r2, r5
 800230c:	d41f      	bmi.n	800234e <_malloc_r+0xd6>
 800230e:	2a0b      	cmp	r2, #11
 8002310:	d917      	bls.n	8002342 <_malloc_r+0xca>
 8002312:	1961      	adds	r1, r4, r5
 8002314:	42a3      	cmp	r3, r4
 8002316:	6025      	str	r5, [r4, #0]
 8002318:	bf18      	it	ne
 800231a:	6059      	strne	r1, [r3, #4]
 800231c:	6863      	ldr	r3, [r4, #4]
 800231e:	bf08      	it	eq
 8002320:	f8c8 1000 	streq.w	r1, [r8]
 8002324:	5162      	str	r2, [r4, r5]
 8002326:	604b      	str	r3, [r1, #4]
 8002328:	4638      	mov	r0, r7
 800232a:	f104 060b 	add.w	r6, r4, #11
 800232e:	f000 f829 	bl	8002384 <__malloc_unlock>
 8002332:	f026 0607 	bic.w	r6, r6, #7
 8002336:	1d23      	adds	r3, r4, #4
 8002338:	1af2      	subs	r2, r6, r3
 800233a:	d0ae      	beq.n	800229a <_malloc_r+0x22>
 800233c:	1b9b      	subs	r3, r3, r6
 800233e:	50a3      	str	r3, [r4, r2]
 8002340:	e7ab      	b.n	800229a <_malloc_r+0x22>
 8002342:	42a3      	cmp	r3, r4
 8002344:	6862      	ldr	r2, [r4, #4]
 8002346:	d1dd      	bne.n	8002304 <_malloc_r+0x8c>
 8002348:	f8c8 2000 	str.w	r2, [r8]
 800234c:	e7ec      	b.n	8002328 <_malloc_r+0xb0>
 800234e:	4623      	mov	r3, r4
 8002350:	6864      	ldr	r4, [r4, #4]
 8002352:	e7ac      	b.n	80022ae <_malloc_r+0x36>
 8002354:	4634      	mov	r4, r6
 8002356:	6876      	ldr	r6, [r6, #4]
 8002358:	e7b4      	b.n	80022c4 <_malloc_r+0x4c>
 800235a:	4613      	mov	r3, r2
 800235c:	e7cc      	b.n	80022f8 <_malloc_r+0x80>
 800235e:	230c      	movs	r3, #12
 8002360:	4638      	mov	r0, r7
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	f000 f80e 	bl	8002384 <__malloc_unlock>
 8002368:	e797      	b.n	800229a <_malloc_r+0x22>
 800236a:	6025      	str	r5, [r4, #0]
 800236c:	e7dc      	b.n	8002328 <_malloc_r+0xb0>
 800236e:	605b      	str	r3, [r3, #4]
 8002370:	deff      	udf	#255	; 0xff
 8002372:	bf00      	nop
 8002374:	20000218 	.word	0x20000218

08002378 <__malloc_lock>:
 8002378:	4801      	ldr	r0, [pc, #4]	; (8002380 <__malloc_lock+0x8>)
 800237a:	f7ff bf12 	b.w	80021a2 <__retarget_lock_acquire_recursive>
 800237e:	bf00      	nop
 8002380:	20000214 	.word	0x20000214

08002384 <__malloc_unlock>:
 8002384:	4801      	ldr	r0, [pc, #4]	; (800238c <__malloc_unlock+0x8>)
 8002386:	f7ff bf0d 	b.w	80021a4 <__retarget_lock_release_recursive>
 800238a:	bf00      	nop
 800238c:	20000214 	.word	0x20000214

08002390 <__sfputc_r>:
 8002390:	6893      	ldr	r3, [r2, #8]
 8002392:	b410      	push	{r4}
 8002394:	3b01      	subs	r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	6093      	str	r3, [r2, #8]
 800239a:	da07      	bge.n	80023ac <__sfputc_r+0x1c>
 800239c:	6994      	ldr	r4, [r2, #24]
 800239e:	42a3      	cmp	r3, r4
 80023a0:	db01      	blt.n	80023a6 <__sfputc_r+0x16>
 80023a2:	290a      	cmp	r1, #10
 80023a4:	d102      	bne.n	80023ac <__sfputc_r+0x1c>
 80023a6:	bc10      	pop	{r4}
 80023a8:	f7ff bded 	b.w	8001f86 <__swbuf_r>
 80023ac:	6813      	ldr	r3, [r2, #0]
 80023ae:	1c58      	adds	r0, r3, #1
 80023b0:	6010      	str	r0, [r2, #0]
 80023b2:	7019      	strb	r1, [r3, #0]
 80023b4:	4608      	mov	r0, r1
 80023b6:	bc10      	pop	{r4}
 80023b8:	4770      	bx	lr

080023ba <__sfputs_r>:
 80023ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023bc:	4606      	mov	r6, r0
 80023be:	460f      	mov	r7, r1
 80023c0:	4614      	mov	r4, r2
 80023c2:	18d5      	adds	r5, r2, r3
 80023c4:	42ac      	cmp	r4, r5
 80023c6:	d101      	bne.n	80023cc <__sfputs_r+0x12>
 80023c8:	2000      	movs	r0, #0
 80023ca:	e007      	b.n	80023dc <__sfputs_r+0x22>
 80023cc:	463a      	mov	r2, r7
 80023ce:	4630      	mov	r0, r6
 80023d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023d4:	f7ff ffdc 	bl	8002390 <__sfputc_r>
 80023d8:	1c43      	adds	r3, r0, #1
 80023da:	d1f3      	bne.n	80023c4 <__sfputs_r+0xa>
 80023dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080023e0 <_vfiprintf_r>:
 80023e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e4:	460d      	mov	r5, r1
 80023e6:	4614      	mov	r4, r2
 80023e8:	4698      	mov	r8, r3
 80023ea:	4606      	mov	r6, r0
 80023ec:	b09d      	sub	sp, #116	; 0x74
 80023ee:	b118      	cbz	r0, 80023f8 <_vfiprintf_r+0x18>
 80023f0:	6a03      	ldr	r3, [r0, #32]
 80023f2:	b90b      	cbnz	r3, 80023f8 <_vfiprintf_r+0x18>
 80023f4:	f7ff fce0 	bl	8001db8 <__sinit>
 80023f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023fa:	07d9      	lsls	r1, r3, #31
 80023fc:	d405      	bmi.n	800240a <_vfiprintf_r+0x2a>
 80023fe:	89ab      	ldrh	r3, [r5, #12]
 8002400:	059a      	lsls	r2, r3, #22
 8002402:	d402      	bmi.n	800240a <_vfiprintf_r+0x2a>
 8002404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002406:	f7ff fecc 	bl	80021a2 <__retarget_lock_acquire_recursive>
 800240a:	89ab      	ldrh	r3, [r5, #12]
 800240c:	071b      	lsls	r3, r3, #28
 800240e:	d501      	bpl.n	8002414 <_vfiprintf_r+0x34>
 8002410:	692b      	ldr	r3, [r5, #16]
 8002412:	b99b      	cbnz	r3, 800243c <_vfiprintf_r+0x5c>
 8002414:	4629      	mov	r1, r5
 8002416:	4630      	mov	r0, r6
 8002418:	f7ff fdf2 	bl	8002000 <__swsetup_r>
 800241c:	b170      	cbz	r0, 800243c <_vfiprintf_r+0x5c>
 800241e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002420:	07dc      	lsls	r4, r3, #31
 8002422:	d504      	bpl.n	800242e <_vfiprintf_r+0x4e>
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	b01d      	add	sp, #116	; 0x74
 800242a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800242e:	89ab      	ldrh	r3, [r5, #12]
 8002430:	0598      	lsls	r0, r3, #22
 8002432:	d4f7      	bmi.n	8002424 <_vfiprintf_r+0x44>
 8002434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002436:	f7ff feb5 	bl	80021a4 <__retarget_lock_release_recursive>
 800243a:	e7f3      	b.n	8002424 <_vfiprintf_r+0x44>
 800243c:	2300      	movs	r3, #0
 800243e:	9309      	str	r3, [sp, #36]	; 0x24
 8002440:	2320      	movs	r3, #32
 8002442:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002446:	2330      	movs	r3, #48	; 0x30
 8002448:	f04f 0901 	mov.w	r9, #1
 800244c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002450:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002600 <_vfiprintf_r+0x220>
 8002454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002458:	4623      	mov	r3, r4
 800245a:	469a      	mov	sl, r3
 800245c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002460:	b10a      	cbz	r2, 8002466 <_vfiprintf_r+0x86>
 8002462:	2a25      	cmp	r2, #37	; 0x25
 8002464:	d1f9      	bne.n	800245a <_vfiprintf_r+0x7a>
 8002466:	ebba 0b04 	subs.w	fp, sl, r4
 800246a:	d00b      	beq.n	8002484 <_vfiprintf_r+0xa4>
 800246c:	465b      	mov	r3, fp
 800246e:	4622      	mov	r2, r4
 8002470:	4629      	mov	r1, r5
 8002472:	4630      	mov	r0, r6
 8002474:	f7ff ffa1 	bl	80023ba <__sfputs_r>
 8002478:	3001      	adds	r0, #1
 800247a:	f000 80a9 	beq.w	80025d0 <_vfiprintf_r+0x1f0>
 800247e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002480:	445a      	add	r2, fp
 8002482:	9209      	str	r2, [sp, #36]	; 0x24
 8002484:	f89a 3000 	ldrb.w	r3, [sl]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80a1 	beq.w	80025d0 <_vfiprintf_r+0x1f0>
 800248e:	2300      	movs	r3, #0
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002498:	f10a 0a01 	add.w	sl, sl, #1
 800249c:	9304      	str	r3, [sp, #16]
 800249e:	9307      	str	r3, [sp, #28]
 80024a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024a4:	931a      	str	r3, [sp, #104]	; 0x68
 80024a6:	4654      	mov	r4, sl
 80024a8:	2205      	movs	r2, #5
 80024aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024ae:	4854      	ldr	r0, [pc, #336]	; (8002600 <_vfiprintf_r+0x220>)
 80024b0:	f000 fb82 	bl	8002bb8 <memchr>
 80024b4:	9a04      	ldr	r2, [sp, #16]
 80024b6:	b9d8      	cbnz	r0, 80024f0 <_vfiprintf_r+0x110>
 80024b8:	06d1      	lsls	r1, r2, #27
 80024ba:	bf44      	itt	mi
 80024bc:	2320      	movmi	r3, #32
 80024be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024c2:	0713      	lsls	r3, r2, #28
 80024c4:	bf44      	itt	mi
 80024c6:	232b      	movmi	r3, #43	; 0x2b
 80024c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024cc:	f89a 3000 	ldrb.w	r3, [sl]
 80024d0:	2b2a      	cmp	r3, #42	; 0x2a
 80024d2:	d015      	beq.n	8002500 <_vfiprintf_r+0x120>
 80024d4:	4654      	mov	r4, sl
 80024d6:	2000      	movs	r0, #0
 80024d8:	f04f 0c0a 	mov.w	ip, #10
 80024dc:	9a07      	ldr	r2, [sp, #28]
 80024de:	4621      	mov	r1, r4
 80024e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024e4:	3b30      	subs	r3, #48	; 0x30
 80024e6:	2b09      	cmp	r3, #9
 80024e8:	d94d      	bls.n	8002586 <_vfiprintf_r+0x1a6>
 80024ea:	b1b0      	cbz	r0, 800251a <_vfiprintf_r+0x13a>
 80024ec:	9207      	str	r2, [sp, #28]
 80024ee:	e014      	b.n	800251a <_vfiprintf_r+0x13a>
 80024f0:	eba0 0308 	sub.w	r3, r0, r8
 80024f4:	fa09 f303 	lsl.w	r3, r9, r3
 80024f8:	4313      	orrs	r3, r2
 80024fa:	46a2      	mov	sl, r4
 80024fc:	9304      	str	r3, [sp, #16]
 80024fe:	e7d2      	b.n	80024a6 <_vfiprintf_r+0xc6>
 8002500:	9b03      	ldr	r3, [sp, #12]
 8002502:	1d19      	adds	r1, r3, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	9103      	str	r1, [sp, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	bfbb      	ittet	lt
 800250c:	425b      	neglt	r3, r3
 800250e:	f042 0202 	orrlt.w	r2, r2, #2
 8002512:	9307      	strge	r3, [sp, #28]
 8002514:	9307      	strlt	r3, [sp, #28]
 8002516:	bfb8      	it	lt
 8002518:	9204      	strlt	r2, [sp, #16]
 800251a:	7823      	ldrb	r3, [r4, #0]
 800251c:	2b2e      	cmp	r3, #46	; 0x2e
 800251e:	d10c      	bne.n	800253a <_vfiprintf_r+0x15a>
 8002520:	7863      	ldrb	r3, [r4, #1]
 8002522:	2b2a      	cmp	r3, #42	; 0x2a
 8002524:	d134      	bne.n	8002590 <_vfiprintf_r+0x1b0>
 8002526:	9b03      	ldr	r3, [sp, #12]
 8002528:	3402      	adds	r4, #2
 800252a:	1d1a      	adds	r2, r3, #4
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	9203      	str	r2, [sp, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	bfb8      	it	lt
 8002534:	f04f 33ff 	movlt.w	r3, #4294967295
 8002538:	9305      	str	r3, [sp, #20]
 800253a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002604 <_vfiprintf_r+0x224>
 800253e:	2203      	movs	r2, #3
 8002540:	4650      	mov	r0, sl
 8002542:	7821      	ldrb	r1, [r4, #0]
 8002544:	f000 fb38 	bl	8002bb8 <memchr>
 8002548:	b138      	cbz	r0, 800255a <_vfiprintf_r+0x17a>
 800254a:	2240      	movs	r2, #64	; 0x40
 800254c:	9b04      	ldr	r3, [sp, #16]
 800254e:	eba0 000a 	sub.w	r0, r0, sl
 8002552:	4082      	lsls	r2, r0
 8002554:	4313      	orrs	r3, r2
 8002556:	3401      	adds	r4, #1
 8002558:	9304      	str	r3, [sp, #16]
 800255a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800255e:	2206      	movs	r2, #6
 8002560:	4829      	ldr	r0, [pc, #164]	; (8002608 <_vfiprintf_r+0x228>)
 8002562:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002566:	f000 fb27 	bl	8002bb8 <memchr>
 800256a:	2800      	cmp	r0, #0
 800256c:	d03f      	beq.n	80025ee <_vfiprintf_r+0x20e>
 800256e:	4b27      	ldr	r3, [pc, #156]	; (800260c <_vfiprintf_r+0x22c>)
 8002570:	bb1b      	cbnz	r3, 80025ba <_vfiprintf_r+0x1da>
 8002572:	9b03      	ldr	r3, [sp, #12]
 8002574:	3307      	adds	r3, #7
 8002576:	f023 0307 	bic.w	r3, r3, #7
 800257a:	3308      	adds	r3, #8
 800257c:	9303      	str	r3, [sp, #12]
 800257e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002580:	443b      	add	r3, r7
 8002582:	9309      	str	r3, [sp, #36]	; 0x24
 8002584:	e768      	b.n	8002458 <_vfiprintf_r+0x78>
 8002586:	460c      	mov	r4, r1
 8002588:	2001      	movs	r0, #1
 800258a:	fb0c 3202 	mla	r2, ip, r2, r3
 800258e:	e7a6      	b.n	80024de <_vfiprintf_r+0xfe>
 8002590:	2300      	movs	r3, #0
 8002592:	f04f 0c0a 	mov.w	ip, #10
 8002596:	4619      	mov	r1, r3
 8002598:	3401      	adds	r4, #1
 800259a:	9305      	str	r3, [sp, #20]
 800259c:	4620      	mov	r0, r4
 800259e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025a2:	3a30      	subs	r2, #48	; 0x30
 80025a4:	2a09      	cmp	r2, #9
 80025a6:	d903      	bls.n	80025b0 <_vfiprintf_r+0x1d0>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0c6      	beq.n	800253a <_vfiprintf_r+0x15a>
 80025ac:	9105      	str	r1, [sp, #20]
 80025ae:	e7c4      	b.n	800253a <_vfiprintf_r+0x15a>
 80025b0:	4604      	mov	r4, r0
 80025b2:	2301      	movs	r3, #1
 80025b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80025b8:	e7f0      	b.n	800259c <_vfiprintf_r+0x1bc>
 80025ba:	ab03      	add	r3, sp, #12
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	462a      	mov	r2, r5
 80025c0:	4630      	mov	r0, r6
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <_vfiprintf_r+0x230>)
 80025c4:	a904      	add	r1, sp, #16
 80025c6:	f3af 8000 	nop.w
 80025ca:	4607      	mov	r7, r0
 80025cc:	1c78      	adds	r0, r7, #1
 80025ce:	d1d6      	bne.n	800257e <_vfiprintf_r+0x19e>
 80025d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025d2:	07d9      	lsls	r1, r3, #31
 80025d4:	d405      	bmi.n	80025e2 <_vfiprintf_r+0x202>
 80025d6:	89ab      	ldrh	r3, [r5, #12]
 80025d8:	059a      	lsls	r2, r3, #22
 80025da:	d402      	bmi.n	80025e2 <_vfiprintf_r+0x202>
 80025dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025de:	f7ff fde1 	bl	80021a4 <__retarget_lock_release_recursive>
 80025e2:	89ab      	ldrh	r3, [r5, #12]
 80025e4:	065b      	lsls	r3, r3, #25
 80025e6:	f53f af1d 	bmi.w	8002424 <_vfiprintf_r+0x44>
 80025ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025ec:	e71c      	b.n	8002428 <_vfiprintf_r+0x48>
 80025ee:	ab03      	add	r3, sp, #12
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	462a      	mov	r2, r5
 80025f4:	4630      	mov	r0, r6
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <_vfiprintf_r+0x230>)
 80025f8:	a904      	add	r1, sp, #16
 80025fa:	f000 f87d 	bl	80026f8 <_printf_i>
 80025fe:	e7e4      	b.n	80025ca <_vfiprintf_r+0x1ea>
 8002600:	08002c38 	.word	0x08002c38
 8002604:	08002c3e 	.word	0x08002c3e
 8002608:	08002c42 	.word	0x08002c42
 800260c:	00000000 	.word	0x00000000
 8002610:	080023bb 	.word	0x080023bb

08002614 <_printf_common>:
 8002614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002618:	4616      	mov	r6, r2
 800261a:	4699      	mov	r9, r3
 800261c:	688a      	ldr	r2, [r1, #8]
 800261e:	690b      	ldr	r3, [r1, #16]
 8002620:	4607      	mov	r7, r0
 8002622:	4293      	cmp	r3, r2
 8002624:	bfb8      	it	lt
 8002626:	4613      	movlt	r3, r2
 8002628:	6033      	str	r3, [r6, #0]
 800262a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800262e:	460c      	mov	r4, r1
 8002630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002634:	b10a      	cbz	r2, 800263a <_printf_common+0x26>
 8002636:	3301      	adds	r3, #1
 8002638:	6033      	str	r3, [r6, #0]
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	0699      	lsls	r1, r3, #26
 800263e:	bf42      	ittt	mi
 8002640:	6833      	ldrmi	r3, [r6, #0]
 8002642:	3302      	addmi	r3, #2
 8002644:	6033      	strmi	r3, [r6, #0]
 8002646:	6825      	ldr	r5, [r4, #0]
 8002648:	f015 0506 	ands.w	r5, r5, #6
 800264c:	d106      	bne.n	800265c <_printf_common+0x48>
 800264e:	f104 0a19 	add.w	sl, r4, #25
 8002652:	68e3      	ldr	r3, [r4, #12]
 8002654:	6832      	ldr	r2, [r6, #0]
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	42ab      	cmp	r3, r5
 800265a:	dc2b      	bgt.n	80026b4 <_printf_common+0xa0>
 800265c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002660:	1e13      	subs	r3, r2, #0
 8002662:	6822      	ldr	r2, [r4, #0]
 8002664:	bf18      	it	ne
 8002666:	2301      	movne	r3, #1
 8002668:	0692      	lsls	r2, r2, #26
 800266a:	d430      	bmi.n	80026ce <_printf_common+0xba>
 800266c:	4649      	mov	r1, r9
 800266e:	4638      	mov	r0, r7
 8002670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002674:	47c0      	blx	r8
 8002676:	3001      	adds	r0, #1
 8002678:	d023      	beq.n	80026c2 <_printf_common+0xae>
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	6922      	ldr	r2, [r4, #16]
 800267e:	f003 0306 	and.w	r3, r3, #6
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf14      	ite	ne
 8002686:	2500      	movne	r5, #0
 8002688:	6833      	ldreq	r3, [r6, #0]
 800268a:	f04f 0600 	mov.w	r6, #0
 800268e:	bf08      	it	eq
 8002690:	68e5      	ldreq	r5, [r4, #12]
 8002692:	f104 041a 	add.w	r4, r4, #26
 8002696:	bf08      	it	eq
 8002698:	1aed      	subeq	r5, r5, r3
 800269a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800269e:	bf08      	it	eq
 80026a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bfc4      	itt	gt
 80026a8:	1a9b      	subgt	r3, r3, r2
 80026aa:	18ed      	addgt	r5, r5, r3
 80026ac:	42b5      	cmp	r5, r6
 80026ae:	d11a      	bne.n	80026e6 <_printf_common+0xd2>
 80026b0:	2000      	movs	r0, #0
 80026b2:	e008      	b.n	80026c6 <_printf_common+0xb2>
 80026b4:	2301      	movs	r3, #1
 80026b6:	4652      	mov	r2, sl
 80026b8:	4649      	mov	r1, r9
 80026ba:	4638      	mov	r0, r7
 80026bc:	47c0      	blx	r8
 80026be:	3001      	adds	r0, #1
 80026c0:	d103      	bne.n	80026ca <_printf_common+0xb6>
 80026c2:	f04f 30ff 	mov.w	r0, #4294967295
 80026c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ca:	3501      	adds	r5, #1
 80026cc:	e7c1      	b.n	8002652 <_printf_common+0x3e>
 80026ce:	2030      	movs	r0, #48	; 0x30
 80026d0:	18e1      	adds	r1, r4, r3
 80026d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026dc:	4422      	add	r2, r4
 80026de:	3302      	adds	r3, #2
 80026e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026e4:	e7c2      	b.n	800266c <_printf_common+0x58>
 80026e6:	2301      	movs	r3, #1
 80026e8:	4622      	mov	r2, r4
 80026ea:	4649      	mov	r1, r9
 80026ec:	4638      	mov	r0, r7
 80026ee:	47c0      	blx	r8
 80026f0:	3001      	adds	r0, #1
 80026f2:	d0e6      	beq.n	80026c2 <_printf_common+0xae>
 80026f4:	3601      	adds	r6, #1
 80026f6:	e7d9      	b.n	80026ac <_printf_common+0x98>

080026f8 <_printf_i>:
 80026f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026fc:	7e0f      	ldrb	r7, [r1, #24]
 80026fe:	4691      	mov	r9, r2
 8002700:	2f78      	cmp	r7, #120	; 0x78
 8002702:	4680      	mov	r8, r0
 8002704:	460c      	mov	r4, r1
 8002706:	469a      	mov	sl, r3
 8002708:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800270a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800270e:	d807      	bhi.n	8002720 <_printf_i+0x28>
 8002710:	2f62      	cmp	r7, #98	; 0x62
 8002712:	d80a      	bhi.n	800272a <_printf_i+0x32>
 8002714:	2f00      	cmp	r7, #0
 8002716:	f000 80d5 	beq.w	80028c4 <_printf_i+0x1cc>
 800271a:	2f58      	cmp	r7, #88	; 0x58
 800271c:	f000 80c1 	beq.w	80028a2 <_printf_i+0x1aa>
 8002720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002728:	e03a      	b.n	80027a0 <_printf_i+0xa8>
 800272a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800272e:	2b15      	cmp	r3, #21
 8002730:	d8f6      	bhi.n	8002720 <_printf_i+0x28>
 8002732:	a101      	add	r1, pc, #4	; (adr r1, 8002738 <_printf_i+0x40>)
 8002734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002738:	08002791 	.word	0x08002791
 800273c:	080027a5 	.word	0x080027a5
 8002740:	08002721 	.word	0x08002721
 8002744:	08002721 	.word	0x08002721
 8002748:	08002721 	.word	0x08002721
 800274c:	08002721 	.word	0x08002721
 8002750:	080027a5 	.word	0x080027a5
 8002754:	08002721 	.word	0x08002721
 8002758:	08002721 	.word	0x08002721
 800275c:	08002721 	.word	0x08002721
 8002760:	08002721 	.word	0x08002721
 8002764:	080028ab 	.word	0x080028ab
 8002768:	080027d1 	.word	0x080027d1
 800276c:	08002865 	.word	0x08002865
 8002770:	08002721 	.word	0x08002721
 8002774:	08002721 	.word	0x08002721
 8002778:	080028cd 	.word	0x080028cd
 800277c:	08002721 	.word	0x08002721
 8002780:	080027d1 	.word	0x080027d1
 8002784:	08002721 	.word	0x08002721
 8002788:	08002721 	.word	0x08002721
 800278c:	0800286d 	.word	0x0800286d
 8002790:	682b      	ldr	r3, [r5, #0]
 8002792:	1d1a      	adds	r2, r3, #4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	602a      	str	r2, [r5, #0]
 8002798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800279c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0a0      	b.n	80028e6 <_printf_i+0x1ee>
 80027a4:	6820      	ldr	r0, [r4, #0]
 80027a6:	682b      	ldr	r3, [r5, #0]
 80027a8:	0607      	lsls	r7, r0, #24
 80027aa:	f103 0104 	add.w	r1, r3, #4
 80027ae:	6029      	str	r1, [r5, #0]
 80027b0:	d501      	bpl.n	80027b6 <_printf_i+0xbe>
 80027b2:	681e      	ldr	r6, [r3, #0]
 80027b4:	e003      	b.n	80027be <_printf_i+0xc6>
 80027b6:	0646      	lsls	r6, r0, #25
 80027b8:	d5fb      	bpl.n	80027b2 <_printf_i+0xba>
 80027ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80027be:	2e00      	cmp	r6, #0
 80027c0:	da03      	bge.n	80027ca <_printf_i+0xd2>
 80027c2:	232d      	movs	r3, #45	; 0x2d
 80027c4:	4276      	negs	r6, r6
 80027c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027ca:	230a      	movs	r3, #10
 80027cc:	4859      	ldr	r0, [pc, #356]	; (8002934 <_printf_i+0x23c>)
 80027ce:	e012      	b.n	80027f6 <_printf_i+0xfe>
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	6820      	ldr	r0, [r4, #0]
 80027d4:	1d19      	adds	r1, r3, #4
 80027d6:	6029      	str	r1, [r5, #0]
 80027d8:	0605      	lsls	r5, r0, #24
 80027da:	d501      	bpl.n	80027e0 <_printf_i+0xe8>
 80027dc:	681e      	ldr	r6, [r3, #0]
 80027de:	e002      	b.n	80027e6 <_printf_i+0xee>
 80027e0:	0641      	lsls	r1, r0, #25
 80027e2:	d5fb      	bpl.n	80027dc <_printf_i+0xe4>
 80027e4:	881e      	ldrh	r6, [r3, #0]
 80027e6:	2f6f      	cmp	r7, #111	; 0x6f
 80027e8:	bf0c      	ite	eq
 80027ea:	2308      	moveq	r3, #8
 80027ec:	230a      	movne	r3, #10
 80027ee:	4851      	ldr	r0, [pc, #324]	; (8002934 <_printf_i+0x23c>)
 80027f0:	2100      	movs	r1, #0
 80027f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027f6:	6865      	ldr	r5, [r4, #4]
 80027f8:	2d00      	cmp	r5, #0
 80027fa:	bfa8      	it	ge
 80027fc:	6821      	ldrge	r1, [r4, #0]
 80027fe:	60a5      	str	r5, [r4, #8]
 8002800:	bfa4      	itt	ge
 8002802:	f021 0104 	bicge.w	r1, r1, #4
 8002806:	6021      	strge	r1, [r4, #0]
 8002808:	b90e      	cbnz	r6, 800280e <_printf_i+0x116>
 800280a:	2d00      	cmp	r5, #0
 800280c:	d04b      	beq.n	80028a6 <_printf_i+0x1ae>
 800280e:	4615      	mov	r5, r2
 8002810:	fbb6 f1f3 	udiv	r1, r6, r3
 8002814:	fb03 6711 	mls	r7, r3, r1, r6
 8002818:	5dc7      	ldrb	r7, [r0, r7]
 800281a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800281e:	4637      	mov	r7, r6
 8002820:	42bb      	cmp	r3, r7
 8002822:	460e      	mov	r6, r1
 8002824:	d9f4      	bls.n	8002810 <_printf_i+0x118>
 8002826:	2b08      	cmp	r3, #8
 8002828:	d10b      	bne.n	8002842 <_printf_i+0x14a>
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	07de      	lsls	r6, r3, #31
 800282e:	d508      	bpl.n	8002842 <_printf_i+0x14a>
 8002830:	6923      	ldr	r3, [r4, #16]
 8002832:	6861      	ldr	r1, [r4, #4]
 8002834:	4299      	cmp	r1, r3
 8002836:	bfde      	ittt	le
 8002838:	2330      	movle	r3, #48	; 0x30
 800283a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800283e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002842:	1b52      	subs	r2, r2, r5
 8002844:	6122      	str	r2, [r4, #16]
 8002846:	464b      	mov	r3, r9
 8002848:	4621      	mov	r1, r4
 800284a:	4640      	mov	r0, r8
 800284c:	f8cd a000 	str.w	sl, [sp]
 8002850:	aa03      	add	r2, sp, #12
 8002852:	f7ff fedf 	bl	8002614 <_printf_common>
 8002856:	3001      	adds	r0, #1
 8002858:	d14a      	bne.n	80028f0 <_printf_i+0x1f8>
 800285a:	f04f 30ff 	mov.w	r0, #4294967295
 800285e:	b004      	add	sp, #16
 8002860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	f043 0320 	orr.w	r3, r3, #32
 800286a:	6023      	str	r3, [r4, #0]
 800286c:	2778      	movs	r7, #120	; 0x78
 800286e:	4832      	ldr	r0, [pc, #200]	; (8002938 <_printf_i+0x240>)
 8002870:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	6829      	ldr	r1, [r5, #0]
 8002878:	061f      	lsls	r7, r3, #24
 800287a:	f851 6b04 	ldr.w	r6, [r1], #4
 800287e:	d402      	bmi.n	8002886 <_printf_i+0x18e>
 8002880:	065f      	lsls	r7, r3, #25
 8002882:	bf48      	it	mi
 8002884:	b2b6      	uxthmi	r6, r6
 8002886:	07df      	lsls	r7, r3, #31
 8002888:	bf48      	it	mi
 800288a:	f043 0320 	orrmi.w	r3, r3, #32
 800288e:	6029      	str	r1, [r5, #0]
 8002890:	bf48      	it	mi
 8002892:	6023      	strmi	r3, [r4, #0]
 8002894:	b91e      	cbnz	r6, 800289e <_printf_i+0x1a6>
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	f023 0320 	bic.w	r3, r3, #32
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	2310      	movs	r3, #16
 80028a0:	e7a6      	b.n	80027f0 <_printf_i+0xf8>
 80028a2:	4824      	ldr	r0, [pc, #144]	; (8002934 <_printf_i+0x23c>)
 80028a4:	e7e4      	b.n	8002870 <_printf_i+0x178>
 80028a6:	4615      	mov	r5, r2
 80028a8:	e7bd      	b.n	8002826 <_printf_i+0x12e>
 80028aa:	682b      	ldr	r3, [r5, #0]
 80028ac:	6826      	ldr	r6, [r4, #0]
 80028ae:	1d18      	adds	r0, r3, #4
 80028b0:	6961      	ldr	r1, [r4, #20]
 80028b2:	6028      	str	r0, [r5, #0]
 80028b4:	0635      	lsls	r5, r6, #24
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	d501      	bpl.n	80028be <_printf_i+0x1c6>
 80028ba:	6019      	str	r1, [r3, #0]
 80028bc:	e002      	b.n	80028c4 <_printf_i+0x1cc>
 80028be:	0670      	lsls	r0, r6, #25
 80028c0:	d5fb      	bpl.n	80028ba <_printf_i+0x1c2>
 80028c2:	8019      	strh	r1, [r3, #0]
 80028c4:	2300      	movs	r3, #0
 80028c6:	4615      	mov	r5, r2
 80028c8:	6123      	str	r3, [r4, #16]
 80028ca:	e7bc      	b.n	8002846 <_printf_i+0x14e>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	2100      	movs	r1, #0
 80028d0:	1d1a      	adds	r2, r3, #4
 80028d2:	602a      	str	r2, [r5, #0]
 80028d4:	681d      	ldr	r5, [r3, #0]
 80028d6:	6862      	ldr	r2, [r4, #4]
 80028d8:	4628      	mov	r0, r5
 80028da:	f000 f96d 	bl	8002bb8 <memchr>
 80028de:	b108      	cbz	r0, 80028e4 <_printf_i+0x1ec>
 80028e0:	1b40      	subs	r0, r0, r5
 80028e2:	6060      	str	r0, [r4, #4]
 80028e4:	6863      	ldr	r3, [r4, #4]
 80028e6:	6123      	str	r3, [r4, #16]
 80028e8:	2300      	movs	r3, #0
 80028ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028ee:	e7aa      	b.n	8002846 <_printf_i+0x14e>
 80028f0:	462a      	mov	r2, r5
 80028f2:	4649      	mov	r1, r9
 80028f4:	4640      	mov	r0, r8
 80028f6:	6923      	ldr	r3, [r4, #16]
 80028f8:	47d0      	blx	sl
 80028fa:	3001      	adds	r0, #1
 80028fc:	d0ad      	beq.n	800285a <_printf_i+0x162>
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	079b      	lsls	r3, r3, #30
 8002902:	d413      	bmi.n	800292c <_printf_i+0x234>
 8002904:	68e0      	ldr	r0, [r4, #12]
 8002906:	9b03      	ldr	r3, [sp, #12]
 8002908:	4298      	cmp	r0, r3
 800290a:	bfb8      	it	lt
 800290c:	4618      	movlt	r0, r3
 800290e:	e7a6      	b.n	800285e <_printf_i+0x166>
 8002910:	2301      	movs	r3, #1
 8002912:	4632      	mov	r2, r6
 8002914:	4649      	mov	r1, r9
 8002916:	4640      	mov	r0, r8
 8002918:	47d0      	blx	sl
 800291a:	3001      	adds	r0, #1
 800291c:	d09d      	beq.n	800285a <_printf_i+0x162>
 800291e:	3501      	adds	r5, #1
 8002920:	68e3      	ldr	r3, [r4, #12]
 8002922:	9903      	ldr	r1, [sp, #12]
 8002924:	1a5b      	subs	r3, r3, r1
 8002926:	42ab      	cmp	r3, r5
 8002928:	dcf2      	bgt.n	8002910 <_printf_i+0x218>
 800292a:	e7eb      	b.n	8002904 <_printf_i+0x20c>
 800292c:	2500      	movs	r5, #0
 800292e:	f104 0619 	add.w	r6, r4, #25
 8002932:	e7f5      	b.n	8002920 <_printf_i+0x228>
 8002934:	08002c49 	.word	0x08002c49
 8002938:	08002c5a 	.word	0x08002c5a

0800293c <__sflush_r>:
 800293c:	898a      	ldrh	r2, [r1, #12]
 800293e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002940:	4605      	mov	r5, r0
 8002942:	0710      	lsls	r0, r2, #28
 8002944:	460c      	mov	r4, r1
 8002946:	d457      	bmi.n	80029f8 <__sflush_r+0xbc>
 8002948:	684b      	ldr	r3, [r1, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	dc04      	bgt.n	8002958 <__sflush_r+0x1c>
 800294e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	dc01      	bgt.n	8002958 <__sflush_r+0x1c>
 8002954:	2000      	movs	r0, #0
 8002956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800295a:	2e00      	cmp	r6, #0
 800295c:	d0fa      	beq.n	8002954 <__sflush_r+0x18>
 800295e:	2300      	movs	r3, #0
 8002960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002964:	682f      	ldr	r7, [r5, #0]
 8002966:	6a21      	ldr	r1, [r4, #32]
 8002968:	602b      	str	r3, [r5, #0]
 800296a:	d032      	beq.n	80029d2 <__sflush_r+0x96>
 800296c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800296e:	89a3      	ldrh	r3, [r4, #12]
 8002970:	075a      	lsls	r2, r3, #29
 8002972:	d505      	bpl.n	8002980 <__sflush_r+0x44>
 8002974:	6863      	ldr	r3, [r4, #4]
 8002976:	1ac0      	subs	r0, r0, r3
 8002978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800297a:	b10b      	cbz	r3, 8002980 <__sflush_r+0x44>
 800297c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800297e:	1ac0      	subs	r0, r0, r3
 8002980:	2300      	movs	r3, #0
 8002982:	4602      	mov	r2, r0
 8002984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002986:	4628      	mov	r0, r5
 8002988:	6a21      	ldr	r1, [r4, #32]
 800298a:	47b0      	blx	r6
 800298c:	1c43      	adds	r3, r0, #1
 800298e:	89a3      	ldrh	r3, [r4, #12]
 8002990:	d106      	bne.n	80029a0 <__sflush_r+0x64>
 8002992:	6829      	ldr	r1, [r5, #0]
 8002994:	291d      	cmp	r1, #29
 8002996:	d82b      	bhi.n	80029f0 <__sflush_r+0xb4>
 8002998:	4a28      	ldr	r2, [pc, #160]	; (8002a3c <__sflush_r+0x100>)
 800299a:	410a      	asrs	r2, r1
 800299c:	07d6      	lsls	r6, r2, #31
 800299e:	d427      	bmi.n	80029f0 <__sflush_r+0xb4>
 80029a0:	2200      	movs	r2, #0
 80029a2:	6062      	str	r2, [r4, #4]
 80029a4:	6922      	ldr	r2, [r4, #16]
 80029a6:	04d9      	lsls	r1, r3, #19
 80029a8:	6022      	str	r2, [r4, #0]
 80029aa:	d504      	bpl.n	80029b6 <__sflush_r+0x7a>
 80029ac:	1c42      	adds	r2, r0, #1
 80029ae:	d101      	bne.n	80029b4 <__sflush_r+0x78>
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	b903      	cbnz	r3, 80029b6 <__sflush_r+0x7a>
 80029b4:	6560      	str	r0, [r4, #84]	; 0x54
 80029b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029b8:	602f      	str	r7, [r5, #0]
 80029ba:	2900      	cmp	r1, #0
 80029bc:	d0ca      	beq.n	8002954 <__sflush_r+0x18>
 80029be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029c2:	4299      	cmp	r1, r3
 80029c4:	d002      	beq.n	80029cc <__sflush_r+0x90>
 80029c6:	4628      	mov	r0, r5
 80029c8:	f7ff fbee 	bl	80021a8 <_free_r>
 80029cc:	2000      	movs	r0, #0
 80029ce:	6360      	str	r0, [r4, #52]	; 0x34
 80029d0:	e7c1      	b.n	8002956 <__sflush_r+0x1a>
 80029d2:	2301      	movs	r3, #1
 80029d4:	4628      	mov	r0, r5
 80029d6:	47b0      	blx	r6
 80029d8:	1c41      	adds	r1, r0, #1
 80029da:	d1c8      	bne.n	800296e <__sflush_r+0x32>
 80029dc:	682b      	ldr	r3, [r5, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0c5      	beq.n	800296e <__sflush_r+0x32>
 80029e2:	2b1d      	cmp	r3, #29
 80029e4:	d001      	beq.n	80029ea <__sflush_r+0xae>
 80029e6:	2b16      	cmp	r3, #22
 80029e8:	d101      	bne.n	80029ee <__sflush_r+0xb2>
 80029ea:	602f      	str	r7, [r5, #0]
 80029ec:	e7b2      	b.n	8002954 <__sflush_r+0x18>
 80029ee:	89a3      	ldrh	r3, [r4, #12]
 80029f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f4:	81a3      	strh	r3, [r4, #12]
 80029f6:	e7ae      	b.n	8002956 <__sflush_r+0x1a>
 80029f8:	690f      	ldr	r7, [r1, #16]
 80029fa:	2f00      	cmp	r7, #0
 80029fc:	d0aa      	beq.n	8002954 <__sflush_r+0x18>
 80029fe:	0793      	lsls	r3, r2, #30
 8002a00:	bf18      	it	ne
 8002a02:	2300      	movne	r3, #0
 8002a04:	680e      	ldr	r6, [r1, #0]
 8002a06:	bf08      	it	eq
 8002a08:	694b      	ldreq	r3, [r1, #20]
 8002a0a:	1bf6      	subs	r6, r6, r7
 8002a0c:	600f      	str	r7, [r1, #0]
 8002a0e:	608b      	str	r3, [r1, #8]
 8002a10:	2e00      	cmp	r6, #0
 8002a12:	dd9f      	ble.n	8002954 <__sflush_r+0x18>
 8002a14:	4633      	mov	r3, r6
 8002a16:	463a      	mov	r2, r7
 8002a18:	4628      	mov	r0, r5
 8002a1a:	6a21      	ldr	r1, [r4, #32]
 8002a1c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002a20:	47e0      	blx	ip
 8002a22:	2800      	cmp	r0, #0
 8002a24:	dc06      	bgt.n	8002a34 <__sflush_r+0xf8>
 8002a26:	89a3      	ldrh	r3, [r4, #12]
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a30:	81a3      	strh	r3, [r4, #12]
 8002a32:	e790      	b.n	8002956 <__sflush_r+0x1a>
 8002a34:	4407      	add	r7, r0
 8002a36:	1a36      	subs	r6, r6, r0
 8002a38:	e7ea      	b.n	8002a10 <__sflush_r+0xd4>
 8002a3a:	bf00      	nop
 8002a3c:	dfbffffe 	.word	0xdfbffffe

08002a40 <_fflush_r>:
 8002a40:	b538      	push	{r3, r4, r5, lr}
 8002a42:	690b      	ldr	r3, [r1, #16]
 8002a44:	4605      	mov	r5, r0
 8002a46:	460c      	mov	r4, r1
 8002a48:	b913      	cbnz	r3, 8002a50 <_fflush_r+0x10>
 8002a4a:	2500      	movs	r5, #0
 8002a4c:	4628      	mov	r0, r5
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
 8002a50:	b118      	cbz	r0, 8002a5a <_fflush_r+0x1a>
 8002a52:	6a03      	ldr	r3, [r0, #32]
 8002a54:	b90b      	cbnz	r3, 8002a5a <_fflush_r+0x1a>
 8002a56:	f7ff f9af 	bl	8001db8 <__sinit>
 8002a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f3      	beq.n	8002a4a <_fflush_r+0xa>
 8002a62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a64:	07d0      	lsls	r0, r2, #31
 8002a66:	d404      	bmi.n	8002a72 <_fflush_r+0x32>
 8002a68:	0599      	lsls	r1, r3, #22
 8002a6a:	d402      	bmi.n	8002a72 <_fflush_r+0x32>
 8002a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a6e:	f7ff fb98 	bl	80021a2 <__retarget_lock_acquire_recursive>
 8002a72:	4628      	mov	r0, r5
 8002a74:	4621      	mov	r1, r4
 8002a76:	f7ff ff61 	bl	800293c <__sflush_r>
 8002a7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a7c:	4605      	mov	r5, r0
 8002a7e:	07da      	lsls	r2, r3, #31
 8002a80:	d4e4      	bmi.n	8002a4c <_fflush_r+0xc>
 8002a82:	89a3      	ldrh	r3, [r4, #12]
 8002a84:	059b      	lsls	r3, r3, #22
 8002a86:	d4e1      	bmi.n	8002a4c <_fflush_r+0xc>
 8002a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a8a:	f7ff fb8b 	bl	80021a4 <__retarget_lock_release_recursive>
 8002a8e:	e7dd      	b.n	8002a4c <_fflush_r+0xc>

08002a90 <__swhatbuf_r>:
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	460c      	mov	r4, r1
 8002a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a98:	4615      	mov	r5, r2
 8002a9a:	2900      	cmp	r1, #0
 8002a9c:	461e      	mov	r6, r3
 8002a9e:	b096      	sub	sp, #88	; 0x58
 8002aa0:	da0c      	bge.n	8002abc <__swhatbuf_r+0x2c>
 8002aa2:	89a3      	ldrh	r3, [r4, #12]
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002aaa:	bf0c      	ite	eq
 8002aac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002ab0:	2340      	movne	r3, #64	; 0x40
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	6031      	str	r1, [r6, #0]
 8002ab6:	602b      	str	r3, [r5, #0]
 8002ab8:	b016      	add	sp, #88	; 0x58
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	466a      	mov	r2, sp
 8002abe:	f000 f849 	bl	8002b54 <_fstat_r>
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	dbed      	blt.n	8002aa2 <__swhatbuf_r+0x12>
 8002ac6:	9901      	ldr	r1, [sp, #4]
 8002ac8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002acc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002ad0:	4259      	negs	r1, r3
 8002ad2:	4159      	adcs	r1, r3
 8002ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad8:	e7eb      	b.n	8002ab2 <__swhatbuf_r+0x22>

08002ada <__smakebuf_r>:
 8002ada:	898b      	ldrh	r3, [r1, #12]
 8002adc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ade:	079d      	lsls	r5, r3, #30
 8002ae0:	4606      	mov	r6, r0
 8002ae2:	460c      	mov	r4, r1
 8002ae4:	d507      	bpl.n	8002af6 <__smakebuf_r+0x1c>
 8002ae6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002aea:	6023      	str	r3, [r4, #0]
 8002aec:	6123      	str	r3, [r4, #16]
 8002aee:	2301      	movs	r3, #1
 8002af0:	6163      	str	r3, [r4, #20]
 8002af2:	b002      	add	sp, #8
 8002af4:	bd70      	pop	{r4, r5, r6, pc}
 8002af6:	466a      	mov	r2, sp
 8002af8:	ab01      	add	r3, sp, #4
 8002afa:	f7ff ffc9 	bl	8002a90 <__swhatbuf_r>
 8002afe:	9900      	ldr	r1, [sp, #0]
 8002b00:	4605      	mov	r5, r0
 8002b02:	4630      	mov	r0, r6
 8002b04:	f7ff fbb8 	bl	8002278 <_malloc_r>
 8002b08:	b948      	cbnz	r0, 8002b1e <__smakebuf_r+0x44>
 8002b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b0e:	059a      	lsls	r2, r3, #22
 8002b10:	d4ef      	bmi.n	8002af2 <__smakebuf_r+0x18>
 8002b12:	f023 0303 	bic.w	r3, r3, #3
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	81a3      	strh	r3, [r4, #12]
 8002b1c:	e7e3      	b.n	8002ae6 <__smakebuf_r+0xc>
 8002b1e:	89a3      	ldrh	r3, [r4, #12]
 8002b20:	6020      	str	r0, [r4, #0]
 8002b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b26:	81a3      	strh	r3, [r4, #12]
 8002b28:	9b00      	ldr	r3, [sp, #0]
 8002b2a:	6120      	str	r0, [r4, #16]
 8002b2c:	6163      	str	r3, [r4, #20]
 8002b2e:	9b01      	ldr	r3, [sp, #4]
 8002b30:	b15b      	cbz	r3, 8002b4a <__smakebuf_r+0x70>
 8002b32:	4630      	mov	r0, r6
 8002b34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b38:	f000 f81e 	bl	8002b78 <_isatty_r>
 8002b3c:	b128      	cbz	r0, 8002b4a <__smakebuf_r+0x70>
 8002b3e:	89a3      	ldrh	r3, [r4, #12]
 8002b40:	f023 0303 	bic.w	r3, r3, #3
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	81a3      	strh	r3, [r4, #12]
 8002b4a:	89a3      	ldrh	r3, [r4, #12]
 8002b4c:	431d      	orrs	r5, r3
 8002b4e:	81a5      	strh	r5, [r4, #12]
 8002b50:	e7cf      	b.n	8002af2 <__smakebuf_r+0x18>
	...

08002b54 <_fstat_r>:
 8002b54:	b538      	push	{r3, r4, r5, lr}
 8002b56:	2300      	movs	r3, #0
 8002b58:	4d06      	ldr	r5, [pc, #24]	; (8002b74 <_fstat_r+0x20>)
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	602b      	str	r3, [r5, #0]
 8002b62:	f7fd fcfb 	bl	800055c <_fstat>
 8002b66:	1c43      	adds	r3, r0, #1
 8002b68:	d102      	bne.n	8002b70 <_fstat_r+0x1c>
 8002b6a:	682b      	ldr	r3, [r5, #0]
 8002b6c:	b103      	cbz	r3, 8002b70 <_fstat_r+0x1c>
 8002b6e:	6023      	str	r3, [r4, #0]
 8002b70:	bd38      	pop	{r3, r4, r5, pc}
 8002b72:	bf00      	nop
 8002b74:	20000210 	.word	0x20000210

08002b78 <_isatty_r>:
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	4d05      	ldr	r5, [pc, #20]	; (8002b94 <_isatty_r+0x1c>)
 8002b7e:	4604      	mov	r4, r0
 8002b80:	4608      	mov	r0, r1
 8002b82:	602b      	str	r3, [r5, #0]
 8002b84:	f7fd fcf9 	bl	800057a <_isatty>
 8002b88:	1c43      	adds	r3, r0, #1
 8002b8a:	d102      	bne.n	8002b92 <_isatty_r+0x1a>
 8002b8c:	682b      	ldr	r3, [r5, #0]
 8002b8e:	b103      	cbz	r3, 8002b92 <_isatty_r+0x1a>
 8002b90:	6023      	str	r3, [r4, #0]
 8002b92:	bd38      	pop	{r3, r4, r5, pc}
 8002b94:	20000210 	.word	0x20000210

08002b98 <_sbrk_r>:
 8002b98:	b538      	push	{r3, r4, r5, lr}
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	4d05      	ldr	r5, [pc, #20]	; (8002bb4 <_sbrk_r+0x1c>)
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	4608      	mov	r0, r1
 8002ba2:	602b      	str	r3, [r5, #0]
 8002ba4:	f7fd fd00 	bl	80005a8 <_sbrk>
 8002ba8:	1c43      	adds	r3, r0, #1
 8002baa:	d102      	bne.n	8002bb2 <_sbrk_r+0x1a>
 8002bac:	682b      	ldr	r3, [r5, #0]
 8002bae:	b103      	cbz	r3, 8002bb2 <_sbrk_r+0x1a>
 8002bb0:	6023      	str	r3, [r4, #0]
 8002bb2:	bd38      	pop	{r3, r4, r5, pc}
 8002bb4:	20000210 	.word	0x20000210

08002bb8 <memchr>:
 8002bb8:	4603      	mov	r3, r0
 8002bba:	b510      	push	{r4, lr}
 8002bbc:	b2c9      	uxtb	r1, r1
 8002bbe:	4402      	add	r2, r0
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	d101      	bne.n	8002bca <memchr+0x12>
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	e003      	b.n	8002bd2 <memchr+0x1a>
 8002bca:	7804      	ldrb	r4, [r0, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	428c      	cmp	r4, r1
 8002bd0:	d1f6      	bne.n	8002bc0 <memchr+0x8>
 8002bd2:	bd10      	pop	{r4, pc}

08002bd4 <_init>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	bf00      	nop
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr

08002be0 <_fini>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr
