/*  Copyright (C) 2020 NANDO authors
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License version 3.
 */

#include "stm32f1xx.h"

// 擦除指定页的Flash存储器
int flash_page_erase(uint32_t page_addr)
{
    FLASH_Status status;

    __disable_irq(); // 关闭中断
    FLASH_Unlock(); // 解锁Flash存储器

    FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR |
        FLASH_FLAG_WRPRTERR); // 清除Flash标志位

    status = FLASH_ErasePage(page_addr); // 擦除指定页

    FLASH_Lock(); // 锁定Flash存储器
    __enable_irq(); // 使能中断

    return status != FLASH_COMPLETE ? -1 : 0;
}

// 向Flash存储器写入数据
int flash_write(uint32_t addr, uint8_t *data, uint32_t data_len)
{
    int ret = -1;
    uint32_t data_word;
    uint32_t i;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();

    for (i = 0; i < data_len; i += 4)
    {
        // 从数据缓冲区中读取32位字
        memcpy(&data_word, &data[i], 4);

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data_word) != HAL_OK)
            goto Exit;

        addr += 4; // 更新地址，指向下一个32位字
    }

    ret = data_len;
Exit:
    // 锁定Flash存储器
    HAL_FLASH_Lock();

    return ret;
}

// 从Flash存储器读取数据
int flash_read(uint32_t addr, uint8_t *data, uint32_t data_len)
{
    uint32_t i;

    for (i = 0; i < data_len; i++)
    {
        data[i] = *(__IO uint8_t *)(addr + i); // 从Flash存储器中读取字节数据
    }

    return i;
}
