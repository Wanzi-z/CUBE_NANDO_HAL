
NANDO_USBHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b10  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007c98  08007c98  00008c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cf8  08007cf8  000090fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007cf8  08007cf8  00008cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d00  08007d00  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d00  08007d00  00008d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d04  08007d04  00008d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08007d08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090fc  2**0
                  CONTENTS
 10 .bss          00001c4c  200000fc  200000fc  000090fc  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20001d48  20001d48  000090fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d9f  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003206  00000000  00000000  0001aecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  0001e0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa7  00000000  00000000  0001ef00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023139  00000000  00000000  0001f9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f22  00000000  00000000  00042ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c696b  00000000  00000000  00056a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d36d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038c8  00000000  00000000  0011d3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  00120c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c80 	.word	0x08007c80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08007c80 	.word	0x08007c80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	4b1e      	ldr	r3, [pc, #120]	@ (800053c <MX_GPIO_Init+0x84>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c6:	4a1d      	ldr	r2, [pc, #116]	@ (800053c <MX_GPIO_Init+0x84>)
 80004c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ce:	4b1b      	ldr	r3, [pc, #108]	@ (800053c <MX_GPIO_Init+0x84>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	4b17      	ldr	r3, [pc, #92]	@ (800053c <MX_GPIO_Init+0x84>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	4a16      	ldr	r2, [pc, #88]	@ (800053c <MX_GPIO_Init+0x84>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ea:	4b14      	ldr	r3, [pc, #80]	@ (800053c <MX_GPIO_Init+0x84>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	4b10      	ldr	r3, [pc, #64]	@ (800053c <MX_GPIO_Init+0x84>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	4a0f      	ldr	r2, [pc, #60]	@ (800053c <MX_GPIO_Init+0x84>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6313      	str	r3, [r2, #48]	@ 0x30
 8000506:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <MX_GPIO_Init+0x84>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	4b09      	ldr	r3, [pc, #36]	@ (800053c <MX_GPIO_Init+0x84>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	4a08      	ldr	r2, [pc, #32]	@ (800053c <MX_GPIO_Init+0x84>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	6313      	str	r3, [r2, #48]	@ 0x30
 8000522:	4b06      	ldr	r3, [pc, #24]	@ (800053c <MX_GPIO_Init+0x84>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40023800 	.word	0x40023800

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 f9a0 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f808 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f7ff ffb4 	bl	80004b8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000550:	f006 fe26 	bl	80071a0 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000554:	f000 f8f4 	bl	8000740 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x18>

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	@ 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f007 fb5c 	bl	8007c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b29      	ldr	r3, [pc, #164]	@ (800062c <SystemClock_Config+0xd0>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	4a28      	ldr	r2, [pc, #160]	@ (800062c <SystemClock_Config+0xd0>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000590:	4b26      	ldr	r3, [pc, #152]	@ (800062c <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <SystemClock_Config+0xd4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <SystemClock_Config+0xd4>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005cc:	2305      	movs	r3, #5
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d0:	23a8      	movs	r3, #168	@ 0xa8
 80005d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 ff77 	bl	80024d4 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ec:	f000 f822 	bl	8000634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2105      	movs	r1, #5
 800060e:	4618      	mov	r0, r3
 8000610:	f002 f9d8 	bl	80029c4 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061a:	f000 f80b 	bl	8000634 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800061e:	f002 fab7 	bl	8002b90 <HAL_RCC_EnableCSS>
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	@ 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
}
 800063a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <Error_Handler+0x8>

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <HAL_MspInit+0x4c>)
 800064c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064e:	4a0f      	ldr	r2, [pc, #60]	@ (800068c <HAL_MspInit+0x4c>)
 8000650:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000654:	6453      	str	r3, [r2, #68]	@ 0x44
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <HAL_MspInit+0x4c>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800065a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <HAL_MspInit+0x4c>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066a:	4a08      	ldr	r2, [pc, #32]	@ (800068c <HAL_MspInit+0x4c>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000670:	6413      	str	r3, [r2, #64]	@ 0x40
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <HAL_MspInit+0x4c>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000694:	f002 fb82 	bl	8002d9c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <NMI_Handler+0x8>

0800069c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <MemManage_Handler+0x4>

080006ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <UsageFault_Handler+0x4>

080006bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ea:	f000 f91f 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006f8:	4802      	ldr	r0, [pc, #8]	@ (8000704 <USART1_IRQHandler+0x10>)
 80006fa:	f002 fbbb 	bl	8002e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000118 	.word	0x20000118

08000708 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800070c:	4802      	ldr	r0, [pc, #8]	@ (8000718 <OTG_HS_IRQHandler+0x10>)
 800070e:	f000 fdd5 	bl	80012bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20001644 	.word	0x20001644

0800071c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <SystemInit+0x20>)
 8000722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000726:	4a05      	ldr	r2, [pc, #20]	@ (800073c <SystemInit+0x20>)
 8000728:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800072c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <MX_USART1_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000778:	f002 fb2b 	bl	8002dd2 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000782:	f7ff ff57 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000118 	.word	0x20000118
 8000790:	40011000 	.word	0x40011000

08000794 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	@ 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000828 <HAL_UART_MspInit+0x94>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d134      	bne.n	8000820 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <HAL_UART_MspInit+0x98>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007be:	4a1b      	ldr	r2, [pc, #108]	@ (800082c <HAL_UART_MspInit+0x98>)
 80007c0:	f043 0310 	orr.w	r3, r3, #16
 80007c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <HAL_UART_MspInit+0x98>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <HAL_UART_MspInit+0x98>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a14      	ldr	r2, [pc, #80]	@ (800082c <HAL_UART_MspInit+0x98>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <HAL_UART_MspInit+0x98>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000800:	2307      	movs	r3, #7
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4809      	ldr	r0, [pc, #36]	@ (8000830 <HAL_UART_MspInit+0x9c>)
 800080c:	f000 fa76 	bl	8000cfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	2025      	movs	r0, #37	@ 0x25
 8000816:	f000 f9a8 	bl	8000b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800081a:	2025      	movs	r0, #37	@ 0x25
 800081c:	f000 f9c1 	bl	8000ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	@ 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40011000 	.word	0x40011000
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000

08000834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800086c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000838:	f7ff ff70 	bl	800071c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	@ (8000870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	@ (8000874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	@ (8000878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	@ (8000880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000862:	f007 f9e9 	bl	8007c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000866:	f7ff fe6b 	bl	8000540 <main>
  bx  lr    
 800086a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800086c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000878:	08007d08 	.word	0x08007d08
  ldr r2, =_sbss
 800087c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000880:	20001d48 	.word	0x20001d48

08000884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800088c:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_Init+0x40>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0d      	ldr	r2, [pc, #52]	@ (80008c8 <HAL_Init+0x40>)
 8000892:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000898:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <HAL_Init+0x40>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <HAL_Init+0x40>)
 800089e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <HAL_Init+0x40>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	@ (80008c8 <HAL_Init+0x40>)
 80008aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f94f 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 f808 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008bc:	f7ff fec0 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023c00 	.word	0x40023c00

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_InitTick+0x54>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_InitTick+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f967 	bl	8000bbe <HAL_SYSTICK_Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00e      	b.n	8000918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d80a      	bhi.n	8000916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f000 f92f 	bl	8000b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4a06      	ldr	r2, [pc, #24]	@ (8000928 <HAL_InitTick+0x5c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	20000004 	.word	0x20000004

0800092c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_IncTick+0x20>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <HAL_IncTick+0x24>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <HAL_IncTick+0x24>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008
 8000950:	20000160 	.word	0x20000160

08000954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTick;
 8000958:	4b03      	ldr	r3, [pc, #12]	@ (8000968 <HAL_GetTick+0x14>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000160 	.word	0x20000160

0800096c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000974:	f7ff ffee 	bl	8000954 <HAL_GetTick>
 8000978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000984:	d005      	beq.n	8000992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_Delay+0x44>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4413      	add	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000992:	bf00      	nop
 8000994:	f7ff ffde 	bl	8000954 <HAL_GetTick>
 8000998:	4602      	mov	r2, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d8f7      	bhi.n	8000994 <HAL_Delay+0x28>
  {
  }
}
 80009a4:	bf00      	nop
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	db0b      	blt.n	8000a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f003 021f 	and.w	r2, r3, #31
 8000a30:	4907      	ldr	r1, [pc, #28]	@ (8000a50 <__NVIC_EnableIRQ+0x38>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	2001      	movs	r0, #1
 8000a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	@ (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	@ (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	@ 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	@ 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b20:	d301      	bcc.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00f      	b.n	8000b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <SysTick_Config+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f7ff ff8e 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <SysTick_Config+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <SysTick_Config+0x40>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff29 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7c:	f7ff ff3e 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f7ff ff8e 	bl	8000aa8 <NVIC_EncodePriority>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff5d 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff31 	bl	8000a18 <__NVIC_EnableIRQ>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ffa2 	bl	8000b10 <SysTick_Config>
 8000bcc:	4603      	mov	r3, r0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff feb6 	bl	8000954 <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d008      	beq.n	8000c08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e052      	b.n	8000cae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f022 0216 	bic.w	r2, r2, #22
 8000c16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d103      	bne.n	8000c38 <HAL_DMA_Abort+0x62>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d007      	beq.n	8000c48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0208 	bic.w	r2, r2, #8
 8000c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c58:	e013      	b.n	8000c82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c5a:	f7ff fe7b 	bl	8000954 <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b05      	cmp	r3, #5
 8000c66:	d90c      	bls.n	8000c82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2203      	movs	r2, #3
 8000c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e015      	b.n	8000cae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1e4      	bne.n	8000c5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c94:	223f      	movs	r2, #63	@ 0x3f
 8000c96:	409a      	lsls	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d004      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e00c      	b.n	8000cee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2205      	movs	r2, #5
 8000cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0201 	bic.w	r2, r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	@ 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	e16b      	b.n	8000ff0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 815a 	bne.w	8000fea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d005      	beq.n	8000d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d130      	bne.n	8000db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d84:	2201      	movs	r2, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	f003 0201 	and.w	r2, r3, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d017      	beq.n	8000dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d123      	bne.n	8000e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	220f      	movs	r2, #15
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	08da      	lsrs	r2, r3, #3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3208      	adds	r2, #8
 8000e3a:	69b9      	ldr	r1, [r7, #24]
 8000e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0203 	and.w	r2, r3, #3
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 80b4 	beq.w	8000fea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b60      	ldr	r3, [pc, #384]	@ (8001008 <HAL_GPIO_Init+0x30c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	4a5f      	ldr	r2, [pc, #380]	@ (8001008 <HAL_GPIO_Init+0x30c>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e92:	4b5d      	ldr	r3, [pc, #372]	@ (8001008 <HAL_GPIO_Init+0x30c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800100c <HAL_GPIO_Init+0x310>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a52      	ldr	r2, [pc, #328]	@ (8001010 <HAL_GPIO_Init+0x314>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d02b      	beq.n	8000f22 <HAL_GPIO_Init+0x226>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a51      	ldr	r2, [pc, #324]	@ (8001014 <HAL_GPIO_Init+0x318>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d025      	beq.n	8000f1e <HAL_GPIO_Init+0x222>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a50      	ldr	r2, [pc, #320]	@ (8001018 <HAL_GPIO_Init+0x31c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d01f      	beq.n	8000f1a <HAL_GPIO_Init+0x21e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4f      	ldr	r2, [pc, #316]	@ (800101c <HAL_GPIO_Init+0x320>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d019      	beq.n	8000f16 <HAL_GPIO_Init+0x21a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8001020 <HAL_GPIO_Init+0x324>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0x216>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4d      	ldr	r2, [pc, #308]	@ (8001024 <HAL_GPIO_Init+0x328>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00d      	beq.n	8000f0e <HAL_GPIO_Init+0x212>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8001028 <HAL_GPIO_Init+0x32c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d007      	beq.n	8000f0a <HAL_GPIO_Init+0x20e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4b      	ldr	r2, [pc, #300]	@ (800102c <HAL_GPIO_Init+0x330>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_GPIO_Init+0x20a>
 8000f02:	2307      	movs	r3, #7
 8000f04:	e00e      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f06:	2308      	movs	r3, #8
 8000f08:	e00c      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	e00a      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f0e:	2305      	movs	r3, #5
 8000f10:	e008      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f12:	2304      	movs	r3, #4
 8000f14:	e006      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f16:	2303      	movs	r3, #3
 8000f18:	e004      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e002      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f22:	2300      	movs	r3, #0
 8000f24:	69fa      	ldr	r2, [r7, #28]
 8000f26:	f002 0203 	and.w	r2, r2, #3
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	4093      	lsls	r3, r2
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f34:	4935      	ldr	r1, [pc, #212]	@ (800100c <HAL_GPIO_Init+0x310>)
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f42:	4b3b      	ldr	r3, [pc, #236]	@ (8001030 <HAL_GPIO_Init+0x334>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f66:	4a32      	ldr	r2, [pc, #200]	@ (8001030 <HAL_GPIO_Init+0x334>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f6c:	4b30      	ldr	r3, [pc, #192]	@ (8001030 <HAL_GPIO_Init+0x334>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f90:	4a27      	ldr	r2, [pc, #156]	@ (8001030 <HAL_GPIO_Init+0x334>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <HAL_GPIO_Init+0x334>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fba:	4a1d      	ldr	r2, [pc, #116]	@ (8001030 <HAL_GPIO_Init+0x334>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <HAL_GPIO_Init+0x334>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe4:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <HAL_GPIO_Init+0x334>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3301      	adds	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	f67f ae90 	bls.w	8000d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3724      	adds	r7, #36	@ 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40013800 	.word	0x40013800
 8001010:	40020000 	.word	0x40020000
 8001014:	40020400 	.word	0x40020400
 8001018:	40020800 	.word	0x40020800
 800101c:	40020c00 	.word	0x40020c00
 8001020:	40021000 	.word	0x40021000
 8001024:	40021400 	.word	0x40021400
 8001028:	40021800 	.word	0x40021800
 800102c:	40021c00 	.word	0x40021c00
 8001030:	40013c00 	.word	0x40013c00

08001034 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af02      	add	r7, sp, #8
 800103a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e101      	b.n	800124a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d106      	bne.n	8001066 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f006 fa7d 	bl	8007560 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2203      	movs	r2, #3
 800106a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001074:	d102      	bne.n	800107c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f002 fedc 	bl	8003e3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7c1a      	ldrb	r2, [r3, #16]
 800108e:	f88d 2000 	strb.w	r2, [sp]
 8001092:	3304      	adds	r3, #4
 8001094:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001096:	f002 fdbb 	bl	8003c10 <USB_CoreInit>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2202      	movs	r2, #2
 80010a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0ce      	b.n	800124a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fed4 	bl	8003e60 <USB_SetCurrentMode>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2202      	movs	r2, #2
 80010c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e0bf      	b.n	800124a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e04a      	b.n	8001166 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	3315      	adds	r3, #21
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	3314      	adds	r3, #20
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	b298      	uxth	r0, r3
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	332e      	adds	r3, #46	@ 0x2e
 800110c:	4602      	mov	r2, r0
 800110e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	3318      	adds	r3, #24
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	331c      	adds	r3, #28
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	3320      	adds	r3, #32
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	3324      	adds	r3, #36	@ 0x24
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	3301      	adds	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	791b      	ldrb	r3, [r3, #4]
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	429a      	cmp	r2, r3
 800116e:	d3af      	bcc.n	80010d0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e044      	b.n	8001200 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	3301      	adds	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	429a      	cmp	r2, r3
 8001208:	d3b5      	bcc.n	8001176 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7c1a      	ldrb	r2, [r3, #16]
 8001212:	f88d 2000 	strb.w	r2, [sp]
 8001216:	3304      	adds	r3, #4
 8001218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121a:	f002 fe6d 	bl	8003ef8 <USB_DevInit>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2202      	movs	r2, #2
 8001228:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e00c      	b.n	800124a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f003 feb1 	bl	8004faa <USB_DevDisconnect>

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_PCD_Start+0x1c>
 800126a:	2302      	movs	r3, #2
 800126c:	e022      	b.n	80012b4 <HAL_PCD_Start+0x62>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d009      	beq.n	8001296 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001286:	2b01      	cmp	r3, #1
 8001288:	d105      	bne.n	8001296 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800128e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f002 fdbe 	bl	8003e1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 fe5f 	bl	8004f68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b08d      	sub	sp, #52	@ 0x34
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 ff1d 	bl	8005112 <USB_GetMode>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f040 848c 	bne.w	8001bf8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 fe81 	bl	8004fec <USB_ReadInterrupts>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 8482 	beq.w	8001bf6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f003 fe6e 	bl	8004fec <USB_ReadInterrupts>
 8001310:	4603      	mov	r3, r0
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b02      	cmp	r3, #2
 8001318:	d107      	bne.n	800132a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f002 0202 	and.w	r2, r2, #2
 8001328:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fe5c 	bl	8004fec <USB_ReadInterrupts>
 8001334:	4603      	mov	r3, r0
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b10      	cmp	r3, #16
 800133c:	d161      	bne.n	8001402 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0210 	bic.w	r2, r2, #16
 800134c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	f003 020f 	and.w	r2, r3, #15
 800135a:	4613      	mov	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	3304      	adds	r3, #4
 800136c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	0c5b      	lsrs	r3, r3, #17
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	2b02      	cmp	r3, #2
 8001378:	d124      	bne.n	80013c4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d035      	beq.n	80013f2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001394:	b29b      	uxth	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	6a38      	ldr	r0, [r7, #32]
 800139a:	f003 fc93 	bl	8004cc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013aa:	441a      	add	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	695a      	ldr	r2, [r3, #20]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013bc:	441a      	add	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	615a      	str	r2, [r3, #20]
 80013c2:	e016      	b.n	80013f2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	0c5b      	lsrs	r3, r3, #17
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	2b06      	cmp	r3, #6
 80013ce:	d110      	bne.n	80013f2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80013d6:	2208      	movs	r2, #8
 80013d8:	4619      	mov	r1, r3
 80013da:	6a38      	ldr	r0, [r7, #32]
 80013dc:	f003 fc72 	bl	8004cc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ec:	441a      	add	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	699a      	ldr	r2, [r3, #24]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0210 	orr.w	r2, r2, #16
 8001400:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fdf0 	bl	8004fec <USB_ReadInterrupts>
 800140c:	4603      	mov	r3, r0
 800140e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001412:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001416:	f040 80a7 	bne.w	8001568 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f003 fdf5 	bl	8005012 <USB_ReadDevAllOutEpInterrupt>
 8001428:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800142a:	e099      	b.n	8001560 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800142c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 808e 	beq.w	8001554 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f003 fe19 	bl	800507a <USB_ReadDevOutEPInterrupt>
 8001448:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00c      	beq.n	800146e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001456:	015a      	lsls	r2, r3, #5
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001460:	461a      	mov	r2, r3
 8001462:	2301      	movs	r3, #1
 8001464:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001466:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fea1 	bl	80021b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	015a      	lsls	r2, r3, #5
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	4413      	add	r3, r2
 8001480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001484:	461a      	mov	r2, r3
 8001486:	2308      	movs	r3, #8
 8001488:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800148a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 ff77 	bl	8002380 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149e:	015a      	lsls	r2, r3, #5
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	4413      	add	r3, r2
 80014a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014a8:	461a      	mov	r2, r3
 80014aa:	2310      	movs	r3, #16
 80014ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d030      	beq.n	800151a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c0:	2b80      	cmp	r3, #128	@ 0x80
 80014c2:	d109      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	3304      	adds	r3, #4
 80014ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	78db      	ldrb	r3, [r3, #3]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d108      	bne.n	8001508 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2200      	movs	r2, #0
 80014fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4619      	mov	r1, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f006 f97c 	bl	8007800 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	015a      	lsls	r2, r3, #5
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4413      	add	r3, r2
 8001510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001514:	461a      	mov	r2, r3
 8001516:	2302      	movs	r3, #2
 8001518:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001530:	461a      	mov	r2, r3
 8001532:	2320      	movs	r3, #32
 8001534:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d009      	beq.n	8001554 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	015a      	lsls	r2, r3, #5
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4413      	add	r3, r2
 8001548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800154c:	461a      	mov	r2, r3
 800154e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001552:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001556:	3301      	adds	r3, #1
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800155a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001562:	2b00      	cmp	r3, #0
 8001564:	f47f af62 	bne.w	800142c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f003 fd3d 	bl	8004fec <USB_ReadInterrupts>
 8001572:	4603      	mov	r3, r0
 8001574:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001578:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800157c:	f040 80db 	bne.w	8001736 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f003 fd5e 	bl	8005046 <USB_ReadDevAllInEpInterrupt>
 800158a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001590:	e0cd      	b.n	800172e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80c2 	beq.w	8001722 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 fd84 	bl	80050b6 <USB_ReadDevInEPInterrupt>
 80015ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d057      	beq.n	800166a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	2201      	movs	r2, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69f9      	ldr	r1, [r7, #28]
 80015d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80015da:	4013      	ands	r3, r2
 80015dc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	015a      	lsls	r2, r3, #5
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	4413      	add	r3, r2
 80015e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ea:	461a      	mov	r2, r3
 80015ec:	2301      	movs	r3, #1
 80015ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	799b      	ldrb	r3, [r3, #6]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d132      	bne.n	800165e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3320      	adds	r3, #32
 8001608:	6819      	ldr	r1, [r3, #0]
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4403      	add	r3, r0
 8001618:	331c      	adds	r3, #28
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4419      	add	r1, r3
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4403      	add	r3, r0
 800162c:	3320      	adds	r3, #32
 800162e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	2b00      	cmp	r3, #0
 8001634:	d113      	bne.n	800165e <HAL_PCD_IRQHandler+0x3a2>
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	3324      	adds	r3, #36	@ 0x24
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d108      	bne.n	800165e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001656:	461a      	mov	r2, r3
 8001658:	2101      	movs	r1, #1
 800165a:	f003 fd8b 	bl	8005174 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800165e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4619      	mov	r1, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f006 f846 	bl	80076f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	015a      	lsls	r2, r3, #5
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001680:	461a      	mov	r2, r3
 8001682:	2308      	movs	r3, #8
 8001684:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	015a      	lsls	r2, r3, #5
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4413      	add	r3, r2
 8001698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800169c:	461a      	mov	r2, r3
 800169e:	2310      	movs	r3, #16
 80016a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	015a      	lsls	r2, r3, #5
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	4413      	add	r3, r2
 80016b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016b8:	461a      	mov	r2, r3
 80016ba:	2340      	movs	r3, #64	@ 0x40
 80016bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d023      	beq.n	8001710 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016ca:	6a38      	ldr	r0, [r7, #32]
 80016cc:	f002 fd78 	bl	80041c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	3310      	adds	r3, #16
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	3304      	adds	r3, #4
 80016e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	78db      	ldrb	r3, [r3, #3]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2200      	movs	r2, #0
 80016f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f006 f893 	bl	8007824 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800170a:	461a      	mov	r2, r3
 800170c:	2302      	movs	r3, #2
 800170e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800171a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fcbb 	bl	8002098 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	3301      	adds	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800172e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001730:	2b00      	cmp	r3, #0
 8001732:	f47f af2e 	bne.w	8001592 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fc56 	bl	8004fec <USB_ReadInterrupts>
 8001740:	4603      	mov	r3, r0
 8001742:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001746:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800174a:	d122      	bne.n	8001792 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001772:	2100      	movs	r1, #0
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fea1 	bl	80024bc <HAL_PCDEx_LPM_Callback>
 800177a:	e002      	b.n	8001782 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f006 f831 	bl	80077e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fc28 	bl	8004fec <USB_ReadInterrupts>
 800179c:	4603      	mov	r3, r0
 800179e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017a6:	d112      	bne.n	80017ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d102      	bne.n	80017be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f005 ffed 	bl	8007798 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80017cc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fc0a 	bl	8004fec <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017e2:	f040 80b7 	bne.w	8001954 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2110      	movs	r1, #16
 8001800:	4618      	mov	r0, r3
 8001802:	f002 fcdd 	bl	80041c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800180a:	e046      	b.n	800189a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800180c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800180e:	015a      	lsls	r2, r3, #5
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	4413      	add	r3, r2
 8001814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001818:	461a      	mov	r2, r3
 800181a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800181e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001830:	0151      	lsls	r1, r2, #5
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	440a      	add	r2, r1
 8001836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800183a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800183e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	4413      	add	r3, r2
 8001848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800184c:	461a      	mov	r2, r3
 800184e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001852:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	4413      	add	r3, r2
 800185c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001864:	0151      	lsls	r1, r2, #5
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	440a      	add	r2, r1
 800186a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800186e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001872:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4413      	add	r3, r2
 800187c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001884:	0151      	lsls	r1, r2, #5
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	440a      	add	r2, r1
 800188a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800188e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001892:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001896:	3301      	adds	r3, #1
 8001898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	791b      	ldrb	r3, [r3, #4]
 800189e:	461a      	mov	r2, r3
 80018a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d3b2      	bcc.n	800180c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018b4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80018b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7bdb      	ldrb	r3, [r3, #15]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d016      	beq.n	80018f0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018d2:	f043 030b 	orr.w	r3, r3, #11
 80018d6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018e8:	f043 030b 	orr.w	r3, r3, #11
 80018ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ee:	e015      	b.n	800191c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001902:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001906:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001916:	f043 030b 	orr.w	r3, r3, #11
 800191a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800192a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800192e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800193e:	461a      	mov	r2, r3
 8001940:	f003 fc18 	bl	8005174 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f003 fb47 	bl	8004fec <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001968:	d123      	bne.n	80019b2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fbdd 	bl	800512e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f002 fc9a 	bl	80042b2 <USB_GetDevSpeed>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681c      	ldr	r4, [r3, #0]
 800198a:	f001 f9d3 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 800198e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001994:	461a      	mov	r2, r3
 8001996:	4620      	mov	r0, r4
 8001998:	f002 f99e 	bl	8003cd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f005 fed2 	bl	8007746 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80019b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 fb18 	bl	8004fec <USB_ReadInterrupts>
 80019bc:	4603      	mov	r3, r0
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d10a      	bne.n	80019dc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f005 feaf 	bl	800772a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f002 0208 	and.w	r2, r2, #8
 80019da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fb03 	bl	8004fec <USB_ReadInterrupts>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ec:	2b80      	cmp	r3, #128	@ 0x80
 80019ee:	d123      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019fc:	2301      	movs	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a00:	e014      	b.n	8001a2c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d105      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fb08 	bl	8002036 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	3301      	adds	r3, #1
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	791b      	ldrb	r3, [r3, #4]
 8001a30:	461a      	mov	r2, r3
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d3e4      	bcc.n	8001a02 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fad5 	bl	8004fec <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a4c:	d13c      	bne.n	8001ac8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4e:	2301      	movs	r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a52:	e02b      	b.n	8001aac <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	015a      	lsls	r2, r3, #5
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3318      	adds	r3, #24
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d115      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	da12      	bge.n	8001aa6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3317      	adds	r3, #23
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fac8 	bl	8002036 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	791b      	ldrb	r3, [r3, #4]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d3cd      	bcc.n	8001a54 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fa8d 	bl	8004fec <USB_ReadInterrupts>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001adc:	d156      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ade:	2301      	movs	r3, #1
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae2:	e045      	b.n	8001b70 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	015a      	lsls	r2, r3, #5
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af8:	4613      	mov	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d12e      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da2b      	bge.n	8001b6a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d121      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10a      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b66:	6053      	str	r3, [r2, #4]
            break;
 8001b68:	e008      	b.n	8001b7c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	791b      	ldrb	r3, [r3, #4]
 8001b74:	461a      	mov	r2, r3
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d3b3      	bcc.n	8001ae4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 fa2b 	bl	8004fec <USB_ReadInterrupts>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba0:	d10a      	bne.n	8001bb8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f005 fe50 	bl	8007848 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001bb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 fa15 	bl	8004fec <USB_ReadInterrupts>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d115      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f005 fe40 	bl	8007864 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	e000      	b.n	8001bf8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001bf6:	bf00      	nop
    }
  }
}
 8001bf8:	3734      	adds	r7, #52	@ 0x34
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}

08001bfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_PCD_SetAddress+0x1a>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e012      	b.n	8001c3e <HAL_PCD_SetAddress+0x40>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 f974 	bl	8004f1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	4608      	mov	r0, r1
 8001c50:	4611      	mov	r1, r2
 8001c52:	461a      	mov	r2, r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	70fb      	strb	r3, [r7, #3]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	803b      	strh	r3, [r7, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	da0f      	bge.n	8001c8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 020f 	and.w	r2, r3, #15
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	3310      	adds	r3, #16
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	3304      	adds	r3, #4
 8001c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	705a      	strb	r2, [r3, #1]
 8001c8a:	e00f      	b.n	8001cac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	f003 020f 	and.w	r2, r3, #15
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cb8:	883a      	ldrh	r2, [r7, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	78ba      	ldrb	r2, [r7, #2]
 8001cc2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	785b      	ldrb	r3, [r3, #1]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cd6:	78bb      	ldrb	r3, [r7, #2]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d102      	bne.n	8001ce2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_PCD_EP_Open+0xaa>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e00e      	b.n	8001d0e <HAL_PCD_EP_Open+0xc8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68f9      	ldr	r1, [r7, #12]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 fafc 	bl	80042fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	da0f      	bge.n	8001d4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	f003 020f 	and.w	r2, r3, #15
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	3310      	adds	r3, #16
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3304      	adds	r3, #4
 8001d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	705a      	strb	r2, [r3, #1]
 8001d48:	e00f      	b.n	8001d6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 020f 	and.w	r2, r3, #15
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	3304      	adds	r3, #4
 8001d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_PCD_EP_Close+0x6e>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e00e      	b.n	8001da2 <HAL_PCD_EP_Close+0x8c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68f9      	ldr	r1, [r7, #12]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f002 fb3a 	bl	800440c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	460b      	mov	r3, r1
 8001db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dba:	7afb      	ldrb	r3, [r7, #11]
 8001dbc:	f003 020f 	and.w	r2, r3, #15
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2200      	movs	r2, #0
 8001dea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	799b      	ldrb	r3, [r3, #6]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d102      	bne.n	8001e06 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	799b      	ldrb	r3, [r3, #6]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	6979      	ldr	r1, [r7, #20]
 8001e12:	f002 fbd7 	bl	80045c4 <USB_EPStartXfer>

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f003 020f 	and.w	r2, r3, #15
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e60:	7afb      	ldrb	r3, [r7, #11]
 8001e62:	f003 020f 	and.w	r2, r3, #15
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	3310      	adds	r3, #16
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2200      	movs	r2, #0
 8001e88:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e90:	7afb      	ldrb	r3, [r7, #11]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	799b      	ldrb	r3, [r3, #6]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d102      	bne.n	8001eaa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	799b      	ldrb	r3, [r3, #6]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	6979      	ldr	r1, [r7, #20]
 8001eb6:	f002 fb85 	bl	80045c4 <USB_EPStartXfer>

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	7912      	ldrb	r2, [r2, #4]
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e04f      	b.n	8001f82 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da0f      	bge.n	8001f0a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3310      	adds	r3, #16
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	3304      	adds	r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	705a      	strb	r2, [r3, #1]
 8001f08:	e00d      	b.n	8001f26 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_PCD_EP_SetStall+0x82>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e01d      	b.n	8001f82 <HAL_PCD_EP_SetStall+0xbe>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68f9      	ldr	r1, [r7, #12]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f002 ff0d 	bl	8004d74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7999      	ldrb	r1, [r3, #6]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f72:	461a      	mov	r2, r3
 8001f74:	f003 f8fe 	bl	8005174 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	7912      	ldrb	r2, [r2, #4]
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e042      	b.n	800202e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	da0f      	bge.n	8001fd0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 020f 	and.w	r2, r3, #15
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	3310      	adds	r3, #16
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	705a      	strb	r2, [r3, #1]
 8001fce:	e00f      	b.n	8001ff0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	f003 020f 	and.w	r2, r3, #15
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_PCD_EP_ClrStall+0x86>
 800200c:	2302      	movs	r3, #2
 800200e:	e00e      	b.n	800202e <HAL_PCD_EP_ClrStall+0xa4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68f9      	ldr	r1, [r7, #12]
 800201e:	4618      	mov	r0, r3
 8002020:	f002 ff16 	bl	8004e50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002046:	2b00      	cmp	r3, #0
 8002048:	da0c      	bge.n	8002064 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 020f 	and.w	r2, r3, #15
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	3310      	adds	r3, #16
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e00c      	b.n	800207e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 020f 	and.w	r2, r3, #15
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	3304      	adds	r3, #4
 800207c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68f9      	ldr	r1, [r7, #12]
 8002084:	4618      	mov	r0, r3
 8002086:	f002 fd35 	bl	8004af4 <USB_EPStopXfer>
 800208a:	4603      	mov	r3, r0
 800208c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800208e:	7afb      	ldrb	r3, [r7, #11]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	@ 0x28
 800209c:	af02      	add	r7, sp, #8
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	3310      	adds	r3, #16
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	3304      	adds	r3, #4
 80020be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d901      	bls.n	80020d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e06b      	b.n	80021a8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d902      	bls.n	80020ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	3303      	adds	r3, #3
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f4:	e02a      	b.n	800214c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	429a      	cmp	r2, r3
 800210a:	d902      	bls.n	8002112 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3303      	adds	r3, #3
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	68d9      	ldr	r1, [r3, #12]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	4603      	mov	r3, r0
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f002 fd8a 	bl	8004c48 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	441a      	add	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	695a      	ldr	r2, [r3, #20]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	441a      	add	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	429a      	cmp	r2, r3
 8002160:	d809      	bhi.n	8002176 <PCD_WriteEmptyTxFifo+0xde>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800216a:	429a      	cmp	r2, r3
 800216c:	d203      	bcs.n	8002176 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1bf      	bne.n	80020f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	429a      	cmp	r2, r3
 8002180:	d811      	bhi.n	80021a6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	2201      	movs	r2, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	43db      	mvns	r3, r3
 800219c:	6939      	ldr	r1, [r7, #16]
 800219e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021a2:	4013      	ands	r3, r2
 80021a4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	333c      	adds	r3, #60	@ 0x3c
 80021c8:	3304      	adds	r3, #4
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	799b      	ldrb	r3, [r3, #6]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d17b      	bne.n	80022de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d015      	beq.n	800221c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	4a61      	ldr	r2, [pc, #388]	@ (8002378 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	f240 80b9 	bls.w	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80b3 	beq.w	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002212:	461a      	mov	r2, r3
 8002214:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002218:	6093      	str	r3, [r2, #8]
 800221a:	e0a7      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	4413      	add	r3, r2
 800222e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002232:	461a      	mov	r2, r3
 8002234:	2320      	movs	r3, #32
 8002236:	6093      	str	r3, [r2, #8]
 8002238:	e098      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	f040 8093 	bne.w	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4a4b      	ldr	r2, [pc, #300]	@ (8002378 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d90f      	bls.n	800226e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002264:	461a      	mov	r2, r3
 8002266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800226a:	6093      	str	r3, [r2, #8]
 800226c:	e07e      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	4413      	add	r3, r2
 8002280:	3304      	adds	r3, #4
 8002282:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	0159      	lsls	r1, r3, #5
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	440b      	add	r3, r1
 8002290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229a:	1ad2      	subs	r2, r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d114      	bne.n	80022d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022b8:	461a      	mov	r2, r3
 80022ba:	2101      	movs	r1, #1
 80022bc:	f002 ff5a 	bl	8005174 <USB_EP0_OutStart>
 80022c0:	e006      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	441a      	add	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f005 f9f2 	bl	80076c0 <HAL_PCD_DataOutStageCallback>
 80022dc:	e046      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	4a26      	ldr	r2, [pc, #152]	@ (800237c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d124      	bne.n	8002330 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022fc:	461a      	mov	r2, r3
 80022fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002302:	6093      	str	r3, [r2, #8]
 8002304:	e032      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	4413      	add	r3, r2
 8002318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800231c:	461a      	mov	r2, r3
 800231e:	2320      	movs	r3, #32
 8002320:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	4619      	mov	r1, r3
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f005 f9c9 	bl	80076c0 <HAL_PCD_DataOutStageCallback>
 800232e:	e01d      	b.n	800236c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d114      	bne.n	8002360 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d108      	bne.n	8002360 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002358:	461a      	mov	r2, r3
 800235a:	2100      	movs	r1, #0
 800235c:	f002 ff0a 	bl	8005174 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	4619      	mov	r1, r3
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f005 f9aa 	bl	80076c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	4f54300a 	.word	0x4f54300a
 800237c:	4f54310a 	.word	0x4f54310a

08002380 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	333c      	adds	r3, #60	@ 0x3c
 8002398:	3304      	adds	r3, #4
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4a15      	ldr	r2, [pc, #84]	@ (8002408 <PCD_EP_OutSetupPacket_int+0x88>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d90e      	bls.n	80023d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023cc:	461a      	mov	r2, r3
 80023ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f005 f961 	bl	800769c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <PCD_EP_OutSetupPacket_int+0x88>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d90c      	bls.n	80023fc <PCD_EP_OutSetupPacket_int+0x7c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	799b      	ldrb	r3, [r3, #6]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d108      	bne.n	80023fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023f4:	461a      	mov	r2, r3
 80023f6:	2101      	movs	r1, #1
 80023f8:	f002 febc 	bl	8005174 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	4f54300a 	.word	0x4f54300a

0800240c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
 8002418:	4613      	mov	r3, r2
 800241a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800242a:	883b      	ldrh	r3, [r7, #0]
 800242c:	0419      	lsls	r1, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	430a      	orrs	r2, r1
 8002436:	629a      	str	r2, [r3, #40]	@ 0x28
 8002438:	e028      	b.n	800248c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	4413      	add	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e00d      	b.n	800246a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	3340      	adds	r3, #64	@ 0x40
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	4413      	add	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	3301      	adds	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	3b01      	subs	r3, #1
 8002470:	429a      	cmp	r2, r3
 8002472:	d3ec      	bcc.n	800244e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002474:	883b      	ldrh	r3, [r7, #0]
 8002476:	0418      	lsls	r0, r3, #16
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6819      	ldr	r1, [r3, #0]
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	3b01      	subs	r3, #1
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	4302      	orrs	r2, r0
 8002484:	3340      	adds	r3, #64	@ 0x40
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e267      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d075      	beq.n	80025de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024f2:	4b88      	ldr	r3, [pc, #544]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d00c      	beq.n	8002518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b85      	ldr	r3, [pc, #532]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002506:	2b08      	cmp	r3, #8
 8002508:	d112      	bne.n	8002530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250a:	4b82      	ldr	r3, [pc, #520]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002512:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002516:	d10b      	bne.n	8002530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	4b7e      	ldr	r3, [pc, #504]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d05b      	beq.n	80025dc <HAL_RCC_OscConfig+0x108>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d157      	bne.n	80025dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e242      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002538:	d106      	bne.n	8002548 <HAL_RCC_OscConfig+0x74>
 800253a:	4b76      	ldr	r3, [pc, #472]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a75      	ldr	r2, [pc, #468]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e01d      	b.n	8002584 <HAL_RCC_OscConfig+0xb0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x98>
 8002552:	4b70      	ldr	r3, [pc, #448]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6f      	ldr	r2, [pc, #444]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b6d      	ldr	r3, [pc, #436]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6c      	ldr	r2, [pc, #432]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0xb0>
 800256c:	4b69      	ldr	r3, [pc, #420]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a68      	ldr	r2, [pc, #416]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b66      	ldr	r3, [pc, #408]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a65      	ldr	r2, [pc, #404]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fe f9e2 	bl	8000954 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe f9de 	bl	8000954 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e207      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0xc0>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe f9ce 	bl	8000954 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025bc:	f7fe f9ca 	bl	8000954 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	@ 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1f3      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	4b51      	ldr	r3, [pc, #324]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0xe8>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d063      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d11c      	bne.n	800263c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b44      	ldr	r3, [pc, #272]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d116      	bne.n	800263c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	4b41      	ldr	r3, [pc, #260]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x152>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1c7      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b3b      	ldr	r3, [pc, #236]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4937      	ldr	r1, [pc, #220]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	e03a      	b.n	80026b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002644:	4b34      	ldr	r3, [pc, #208]	@ (8002718 <HAL_RCC_OscConfig+0x244>)
 8002646:	2201      	movs	r2, #1
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe f983 	bl	8000954 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002652:	f7fe f97f 	bl	8000954 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1a8      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	4b2b      	ldr	r3, [pc, #172]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4925      	ldr	r1, [pc, #148]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
 8002684:	e015      	b.n	80026b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002686:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_RCC_OscConfig+0x244>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe f962 	bl	8000954 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002694:	f7fe f95e 	bl	8000954 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e187      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d036      	beq.n	800272c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d016      	beq.n	80026f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c6:	4b15      	ldr	r3, [pc, #84]	@ (800271c <HAL_RCC_OscConfig+0x248>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe f942 	bl	8000954 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d4:	f7fe f93e 	bl	8000954 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e167      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80026e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x200>
 80026f2:	e01b      	b.n	800272c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f4:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_RCC_OscConfig+0x248>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fa:	f7fe f92b 	bl	8000954 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	e00e      	b.n	8002720 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002702:	f7fe f927 	bl	8000954 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d907      	bls.n	8002720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e150      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
 8002714:	40023800 	.word	0x40023800
 8002718:	42470000 	.word	0x42470000
 800271c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b88      	ldr	r3, [pc, #544]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ea      	bne.n	8002702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8097 	beq.w	8002868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b81      	ldr	r3, [pc, #516]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	4b7d      	ldr	r3, [pc, #500]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a7c      	ldr	r2, [pc, #496]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b7a      	ldr	r3, [pc, #488]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b77      	ldr	r3, [pc, #476]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d118      	bne.n	80027a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b74      	ldr	r3, [pc, #464]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a73      	ldr	r2, [pc, #460]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7fe f8e7 	bl	8000954 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7fe f8e3 	bl	8000954 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e10c      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4b6a      	ldr	r3, [pc, #424]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x2ea>
 80027b0:	4b64      	ldr	r3, [pc, #400]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b4:	4a63      	ldr	r2, [pc, #396]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80027bc:	e01c      	b.n	80027f8 <HAL_RCC_OscConfig+0x324>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x30c>
 80027c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0x324>
 80027e0:	4b58      	ldr	r3, [pc, #352]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	4a57      	ldr	r2, [pc, #348]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ec:	4b55      	ldr	r3, [pc, #340]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	4a54      	ldr	r2, [pc, #336]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 0304 	bic.w	r3, r3, #4
 80027f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d015      	beq.n	800282c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe f8a8 	bl	8000954 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe f8a4 	bl	8000954 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0cb      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281e:	4b49      	ldr	r3, [pc, #292]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ee      	beq.n	8002808 <HAL_RCC_OscConfig+0x334>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7fe f892 	bl	8000954 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f7fe f88e 	bl	8000954 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0b5      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284a:	4b3e      	ldr	r3, [pc, #248]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ee      	bne.n	8002834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b39      	ldr	r3, [pc, #228]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	4a38      	ldr	r2, [pc, #224]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002866:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a1 	beq.w	80029b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002872:	4b34      	ldr	r3, [pc, #208]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b08      	cmp	r3, #8
 800287c:	d05c      	beq.n	8002938 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d141      	bne.n	800290a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b31      	ldr	r3, [pc, #196]	@ (800294c <HAL_RCC_OscConfig+0x478>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe f862 	bl	8000954 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe f85e 	bl	8000954 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e087      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b27      	ldr	r3, [pc, #156]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	491b      	ldr	r1, [pc, #108]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_RCC_OscConfig+0x478>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe f837 	bl	8000954 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe f833 	bl	8000954 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e05c      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x416>
 8002908:	e054      	b.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b10      	ldr	r3, [pc, #64]	@ (800294c <HAL_RCC_OscConfig+0x478>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe f820 	bl	8000954 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe f81c 	bl	8000954 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e045      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x444>
 8002936:	e03d      	b.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e038      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
 8002944:	40023800 	.word	0x40023800
 8002948:	40007000 	.word	0x40007000
 800294c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002950:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <HAL_RCC_OscConfig+0x4ec>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d028      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d121      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d11a      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002988:	4293      	cmp	r3, r2
 800298a:	d111      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	3b01      	subs	r3, #1
 800299a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0cc      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b68      	ldr	r3, [pc, #416]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d90c      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b65      	ldr	r3, [pc, #404]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b63      	ldr	r3, [pc, #396]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0b8      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a18:	4b59      	ldr	r3, [pc, #356]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a58      	ldr	r2, [pc, #352]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a30:	4b53      	ldr	r3, [pc, #332]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a52      	ldr	r2, [pc, #328]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b50      	ldr	r3, [pc, #320]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	494d      	ldr	r1, [pc, #308]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d044      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b47      	ldr	r3, [pc, #284]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d119      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e07f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b3f      	ldr	r3, [pc, #252]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e06f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b3b      	ldr	r3, [pc, #236]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e067      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b37      	ldr	r3, [pc, #220]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4934      	ldr	r1, [pc, #208]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7fd ff4e 	bl	8000954 <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fd ff4a 	bl	8000954 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e04f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b25      	ldr	r3, [pc, #148]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d20c      	bcs.n	8002b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b20      	ldr	r3, [pc, #128]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e032      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4916      	ldr	r1, [pc, #88]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b36:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	490e      	ldr	r1, [pc, #56]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b4a:	f000 f82d 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	490a      	ldr	r1, [pc, #40]	@ (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	5ccb      	ldrb	r3, [r1, r3]
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	4a09      	ldr	r2, [pc, #36]	@ (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b66:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd feae 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023c00 	.word	0x40023c00
 8002b80:	40023800 	.word	0x40023800
 8002b84:	08007ce0 	.word	0x08007ce0
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	20000004 	.word	0x20000004

08002b90 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <HAL_RCC_EnableCSS+0x14>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	4247004c 	.word	0x4247004c

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bac:	b090      	sub	sp, #64	@ 0x40
 8002bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bb8:	2300      	movs	r3, #0
 8002bba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc0:	4b59      	ldr	r3, [pc, #356]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d00d      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	f200 80a1 	bhi.w	8002d14 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x34>
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bda:	e09b      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4b53      	ldr	r3, [pc, #332]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x184>)
 8002bde:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002be0:	e09b      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002be2:	4b53      	ldr	r3, [pc, #332]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002be4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002be6:	e098      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be8:	4b4f      	ldr	r3, [pc, #316]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bf0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bf2:	4b4d      	ldr	r3, [pc, #308]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d028      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	2200      	movs	r2, #0
 8002c06:	623b      	str	r3, [r7, #32]
 8002c08:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c10:	2100      	movs	r1, #0
 8002c12:	4b47      	ldr	r3, [pc, #284]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c14:	fb03 f201 	mul.w	r2, r3, r1
 8002c18:	2300      	movs	r3, #0
 8002c1a:	fb00 f303 	mul.w	r3, r0, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	4a43      	ldr	r2, [pc, #268]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c22:	fba0 1202 	umull	r1, r2, r0, r2
 8002c26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c28:	460a      	mov	r2, r1
 8002c2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c2e:	4413      	add	r3, r2
 8002c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c34:	2200      	movs	r2, #0
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	61fa      	str	r2, [r7, #28]
 8002c3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c42:	f7fd fac1 	bl	80001c8 <__aeabi_uldivmod>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c4e:	e053      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c50:	4b35      	ldr	r3, [pc, #212]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	2200      	movs	r2, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	617a      	str	r2, [r7, #20]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c62:	f04f 0b00 	mov.w	fp, #0
 8002c66:	4652      	mov	r2, sl
 8002c68:	465b      	mov	r3, fp
 8002c6a:	f04f 0000 	mov.w	r0, #0
 8002c6e:	f04f 0100 	mov.w	r1, #0
 8002c72:	0159      	lsls	r1, r3, #5
 8002c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c78:	0150      	lsls	r0, r2, #5
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	ebb2 080a 	subs.w	r8, r2, sl
 8002c82:	eb63 090b 	sbc.w	r9, r3, fp
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c9a:	ebb2 0408 	subs.w	r4, r2, r8
 8002c9e:	eb63 0509 	sbc.w	r5, r3, r9
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	00eb      	lsls	r3, r5, #3
 8002cac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb0:	00e2      	lsls	r2, r4, #3
 8002cb2:	4614      	mov	r4, r2
 8002cb4:	461d      	mov	r5, r3
 8002cb6:	eb14 030a 	adds.w	r3, r4, sl
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	eb45 030b 	adc.w	r3, r5, fp
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cce:	4629      	mov	r1, r5
 8002cd0:	028b      	lsls	r3, r1, #10
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cd8:	4621      	mov	r1, r4
 8002cda:	028a      	lsls	r2, r1, #10
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	60fa      	str	r2, [r7, #12]
 8002ce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cec:	f7fd fa6c 	bl	80001c8 <__aeabi_uldivmod>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	3301      	adds	r3, #1
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002d08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d12:	e002      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d14:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3740      	adds	r7, #64	@ 0x40
 8002d20:	46bd      	mov	sp, r7
 8002d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	00f42400 	.word	0x00f42400
 8002d30:	00989680 	.word	0x00989680

08002d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d38:	4b03      	ldr	r3, [pc, #12]	@ (8002d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	20000000 	.word	0x20000000

08002d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d50:	f7ff fff0 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	0a9b      	lsrs	r3, r3, #10
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4903      	ldr	r1, [pc, #12]	@ (8002d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	08007cf0 	.word	0x08007cf0

08002d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d78:	f7ff ffdc 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	0b5b      	lsrs	r3, r3, #13
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4903      	ldr	r1, [pc, #12]	@ (8002d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40023800 	.word	0x40023800
 8002d98:	08007cf0 	.word	0x08007cf0

08002d9c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <HAL_RCC_NMI_IRQHandler+0x20>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da8:	2b80      	cmp	r3, #128	@ 0x80
 8002daa:	d104      	bne.n	8002db6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002dac:	f000 f80a 	bl	8002dc4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002db0:	4b03      	ldr	r3, [pc, #12]	@ (8002dc0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002db2:	2280      	movs	r2, #128	@ 0x80
 8002db4:	701a      	strb	r2, [r3, #0]
  }
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	4002380e 	.word	0x4002380e

08002dc4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e042      	b.n	8002e6a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d106      	bne.n	8002dfe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7fd fccb 	bl	8000794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2224      	movs	r2, #36	@ 0x24
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e14:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fc86 	bl	8003728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e3a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b0ba      	sub	sp, #232	@ 0xe8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_UART_IRQHandler+0x66>
 8002ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fb69 	bl	80035aa <UART_Receive_IT>
      return;
 8002ed8:	e25b      	b.n	8003392 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80de 	beq.w	80030a0 <HAL_UART_IRQHandler+0x22c>
 8002ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80d1 	beq.w	80030a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_UART_IRQHandler+0xae>
 8002f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_UART_IRQHandler+0xd2>
 8002f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3e:	f043 0202 	orr.w	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <HAL_UART_IRQHandler+0xf6>
 8002f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	f043 0204 	orr.w	r2, r3, #4
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d011      	beq.n	8002f9a <HAL_UART_IRQHandler+0x126>
 8002f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d105      	bne.n	8002f8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	f043 0208 	orr.w	r2, r3, #8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 81f2 	beq.w	8003388 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x14e>
 8002fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 faf4 	bl	80035aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fcc:	2b40      	cmp	r3, #64	@ 0x40
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <HAL_UART_IRQHandler+0x17a>
 8002fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d04f      	beq.n	800308e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f9fc 	bl	80033ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffe:	2b40      	cmp	r3, #64	@ 0x40
 8003000:	d141      	bne.n	8003086 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3314      	adds	r3, #20
 8003008:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003010:	e853 3f00 	ldrex	r3, [r3]
 8003014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800301c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3314      	adds	r3, #20
 800302a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800302e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003032:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800303a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800303e:	e841 2300 	strex	r3, r2, [r1]
 8003042:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1d9      	bne.n	8003002 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d013      	beq.n	800307e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305a:	4a7e      	ldr	r2, [pc, #504]	@ (8003254 <HAL_UART_IRQHandler+0x3e0>)
 800305c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fe27 	bl	8000cb6 <HAL_DMA_Abort_IT>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003078:	4610      	mov	r0, r2
 800307a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800307c:	e00e      	b.n	800309c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f99e 	bl	80033c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003084:	e00a      	b.n	800309c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f99a 	bl	80033c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	e006      	b.n	800309c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f996 	bl	80033c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800309a:	e175      	b.n	8003388 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309c:	bf00      	nop
    return;
 800309e:	e173      	b.n	8003388 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	f040 814f 	bne.w	8003348 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8148 	beq.w	8003348 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8141 	beq.w	8003348 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e6:	2b40      	cmp	r3, #64	@ 0x40
 80030e8:	f040 80b6 	bne.w	8003258 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8145 	beq.w	800338c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800310a:	429a      	cmp	r2, r3
 800310c:	f080 813e 	bcs.w	800338c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003116:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003122:	f000 8088 	beq.w	8003236 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003134:	e853 3f00 	ldrex	r3, [r3]
 8003138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800313c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003144:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	330c      	adds	r3, #12
 800314e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003152:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800315e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003162:	e841 2300 	strex	r3, r2, [r1]
 8003166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800316a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1d9      	bne.n	8003126 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3314      	adds	r3, #20
 8003178:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3314      	adds	r3, #20
 8003192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003196:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800319a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800319e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e1      	bne.n	8003172 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3314      	adds	r3, #20
 80031b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3314      	adds	r3, #20
 80031ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80031d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1e3      	bne.n	80031ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003206:	f023 0310 	bic.w	r3, r3, #16
 800320a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	330c      	adds	r3, #12
 8003214:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003218:	65ba      	str	r2, [r7, #88]	@ 0x58
 800321a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800321e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e3      	bne.n	80031f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd fcd0 	bl	8000bd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003244:	b29b      	uxth	r3, r3
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	b29b      	uxth	r3, r3
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f8c1 	bl	80033d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003252:	e09b      	b.n	800338c <HAL_UART_IRQHandler+0x518>
 8003254:	080034b3 	.word	0x080034b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003260:	b29b      	uxth	r3, r3
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 808e 	beq.w	8003390 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8089 	beq.w	8003390 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	330c      	adds	r3, #12
 8003284:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800328e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003290:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003294:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80032a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80032a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032aa:	e841 2300 	strex	r3, r2, [r1]
 80032ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1e3      	bne.n	800327e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3314      	adds	r3, #20
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	623b      	str	r3, [r7, #32]
   return(result);
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3314      	adds	r3, #20
 80032d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80032da:	633a      	str	r2, [r7, #48]	@ 0x30
 80032dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e3      	bne.n	80032b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	330c      	adds	r3, #12
 8003302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	e853 3f00 	ldrex	r3, [r3]
 800330a:	60fb      	str	r3, [r7, #12]
   return(result);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0310 	bic.w	r3, r3, #16
 8003312:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003320:	61fa      	str	r2, [r7, #28]
 8003322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003324:	69b9      	ldr	r1, [r7, #24]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	e841 2300 	strex	r3, r2, [r1]
 800332c:	617b      	str	r3, [r7, #20]
   return(result);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e3      	bne.n	80032fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800333a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800333e:	4619      	mov	r1, r3
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f847 	bl	80033d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003346:	e023      	b.n	8003390 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800334c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003350:	2b00      	cmp	r3, #0
 8003352:	d009      	beq.n	8003368 <HAL_UART_IRQHandler+0x4f4>
 8003354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f8ba 	bl	80034da <UART_Transmit_IT>
    return;
 8003366:	e014      	b.n	8003392 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800336c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00e      	beq.n	8003392 <HAL_UART_IRQHandler+0x51e>
 8003374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f8fa 	bl	800357a <UART_EndTransmit_IT>
    return;
 8003386:	e004      	b.n	8003392 <HAL_UART_IRQHandler+0x51e>
    return;
 8003388:	bf00      	nop
 800338a:	e002      	b.n	8003392 <HAL_UART_IRQHandler+0x51e>
      return;
 800338c:	bf00      	nop
 800338e:	e000      	b.n	8003392 <HAL_UART_IRQHandler+0x51e>
      return;
 8003390:	bf00      	nop
  }
}
 8003392:	37e8      	adds	r7, #232	@ 0xe8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b095      	sub	sp, #84	@ 0x54
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003406:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800340a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003414:	643a      	str	r2, [r7, #64]	@ 0x40
 8003416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800341a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e5      	bne.n	80033f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3314      	adds	r3, #20
 800342e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	61fb      	str	r3, [r7, #28]
   return(result);
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3314      	adds	r3, #20
 8003446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003448:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800344a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800344e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e5      	bne.n	8003428 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	2b01      	cmp	r3, #1
 8003462:	d119      	bne.n	8003498 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	60bb      	str	r3, [r7, #8]
   return(result);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f023 0310 	bic.w	r3, r3, #16
 800347a:	647b      	str	r3, [r7, #68]	@ 0x44
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	330c      	adds	r3, #12
 8003482:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003484:	61ba      	str	r2, [r7, #24]
 8003486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6979      	ldr	r1, [r7, #20]
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	613b      	str	r3, [r7, #16]
   return(result);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e5      	bne.n	8003464 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034a6:	bf00      	nop
 80034a8:	3754      	adds	r7, #84	@ 0x54
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f7ff ff77 	bl	80033c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b21      	cmp	r3, #33	@ 0x21
 80034ec:	d13e      	bne.n	800356c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f6:	d114      	bne.n	8003522 <UART_Transmit_IT+0x48>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d110      	bne.n	8003522 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003514:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	1c9a      	adds	r2, r3, #2
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	621a      	str	r2, [r3, #32]
 8003520:	e008      	b.n	8003534 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	1c59      	adds	r1, r3, #1
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6211      	str	r1, [r2, #32]
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29b      	uxth	r3, r3
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4619      	mov	r1, r3
 8003542:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10f      	bne.n	8003568 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003556:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003566:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003590:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fefc 	bl	8003398 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b08c      	sub	sp, #48	@ 0x30
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b22      	cmp	r3, #34	@ 0x22
 80035bc:	f040 80ae 	bne.w	800371c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c8:	d117      	bne.n	80035fa <UART_Receive_IT+0x50>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d113      	bne.n	80035fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	1c9a      	adds	r2, r3, #2
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80035f8:	e026      	b.n	8003648 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003600:	2300      	movs	r3, #0
 8003602:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360c:	d007      	beq.n	800361e <UART_Receive_IT+0x74>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <UART_Receive_IT+0x82>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e008      	b.n	800363e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003638:	b2da      	uxtb	r2, r3
 800363a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29b      	uxth	r3, r3
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	4619      	mov	r1, r3
 8003656:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003658:	2b00      	cmp	r3, #0
 800365a:	d15d      	bne.n	8003718 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0220 	bic.w	r2, r2, #32
 800366a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800367a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d135      	bne.n	800370e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	330c      	adds	r3, #12
 80036ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	613b      	str	r3, [r7, #16]
   return(result);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f023 0310 	bic.w	r3, r3, #16
 80036be:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	330c      	adds	r3, #12
 80036c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c8:	623a      	str	r2, [r7, #32]
 80036ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	69f9      	ldr	r1, [r7, #28]
 80036ce:	6a3a      	ldr	r2, [r7, #32]
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e5      	bne.n	80036a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d10a      	bne.n	8003700 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003704:	4619      	mov	r1, r3
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff fe64 	bl	80033d4 <HAL_UARTEx_RxEventCallback>
 800370c:	e002      	b.n	8003714 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fe4c 	bl	80033ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e002      	b.n	800371e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	e000      	b.n	800371e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	3730      	adds	r7, #48	@ 0x30
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800372c:	b0c0      	sub	sp, #256	@ 0x100
 800372e:	af00      	add	r7, sp, #0
 8003730:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003744:	68d9      	ldr	r1, [r3, #12]
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	ea40 0301 	orr.w	r3, r0, r1
 8003750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	431a      	orrs	r2, r3
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	431a      	orrs	r2, r3
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003780:	f021 010c 	bic.w	r1, r1, #12
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800378e:	430b      	orrs	r3, r1
 8003790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a2:	6999      	ldr	r1, [r3, #24]
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	ea40 0301 	orr.w	r3, r0, r1
 80037ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b8f      	ldr	r3, [pc, #572]	@ (80039f4 <UART_SetConfig+0x2cc>)
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d005      	beq.n	80037c8 <UART_SetConfig+0xa0>
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b8d      	ldr	r3, [pc, #564]	@ (80039f8 <UART_SetConfig+0x2d0>)
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d104      	bne.n	80037d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037c8:	f7ff fad4 	bl	8002d74 <HAL_RCC_GetPCLK2Freq>
 80037cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037d0:	e003      	b.n	80037da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037d2:	f7ff fabb 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 80037d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037e4:	f040 810c 	bne.w	8003a00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037fa:	4622      	mov	r2, r4
 80037fc:	462b      	mov	r3, r5
 80037fe:	1891      	adds	r1, r2, r2
 8003800:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003802:	415b      	adcs	r3, r3
 8003804:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800380a:	4621      	mov	r1, r4
 800380c:	eb12 0801 	adds.w	r8, r2, r1
 8003810:	4629      	mov	r1, r5
 8003812:	eb43 0901 	adc.w	r9, r3, r1
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800382a:	4690      	mov	r8, r2
 800382c:	4699      	mov	r9, r3
 800382e:	4623      	mov	r3, r4
 8003830:	eb18 0303 	adds.w	r3, r8, r3
 8003834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003838:	462b      	mov	r3, r5
 800383a:	eb49 0303 	adc.w	r3, r9, r3
 800383e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800384e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003856:	460b      	mov	r3, r1
 8003858:	18db      	adds	r3, r3, r3
 800385a:	653b      	str	r3, [r7, #80]	@ 0x50
 800385c:	4613      	mov	r3, r2
 800385e:	eb42 0303 	adc.w	r3, r2, r3
 8003862:	657b      	str	r3, [r7, #84]	@ 0x54
 8003864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800386c:	f7fc fcac 	bl	80001c8 <__aeabi_uldivmod>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4b61      	ldr	r3, [pc, #388]	@ (80039fc <UART_SetConfig+0x2d4>)
 8003876:	fba3 2302 	umull	r2, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	011c      	lsls	r4, r3, #4
 800387e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003882:	2200      	movs	r2, #0
 8003884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003888:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800388c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	1891      	adds	r1, r2, r2
 8003896:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003898:	415b      	adcs	r3, r3
 800389a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800389c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038a0:	4641      	mov	r1, r8
 80038a2:	eb12 0a01 	adds.w	sl, r2, r1
 80038a6:	4649      	mov	r1, r9
 80038a8:	eb43 0b01 	adc.w	fp, r3, r1
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c0:	4692      	mov	sl, r2
 80038c2:	469b      	mov	fp, r3
 80038c4:	4643      	mov	r3, r8
 80038c6:	eb1a 0303 	adds.w	r3, sl, r3
 80038ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038ce:	464b      	mov	r3, r9
 80038d0:	eb4b 0303 	adc.w	r3, fp, r3
 80038d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038ec:	460b      	mov	r3, r1
 80038ee:	18db      	adds	r3, r3, r3
 80038f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80038f2:	4613      	mov	r3, r2
 80038f4:	eb42 0303 	adc.w	r3, r2, r3
 80038f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003902:	f7fc fc61 	bl	80001c8 <__aeabi_uldivmod>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4611      	mov	r1, r2
 800390c:	4b3b      	ldr	r3, [pc, #236]	@ (80039fc <UART_SetConfig+0x2d4>)
 800390e:	fba3 2301 	umull	r2, r3, r3, r1
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2264      	movs	r2, #100	@ 0x64
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	1acb      	subs	r3, r1, r3
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003922:	4b36      	ldr	r3, [pc, #216]	@ (80039fc <UART_SetConfig+0x2d4>)
 8003924:	fba3 2302 	umull	r2, r3, r3, r2
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003930:	441c      	add	r4, r3
 8003932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003936:	2200      	movs	r2, #0
 8003938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800393c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003944:	4642      	mov	r2, r8
 8003946:	464b      	mov	r3, r9
 8003948:	1891      	adds	r1, r2, r2
 800394a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800394c:	415b      	adcs	r3, r3
 800394e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003954:	4641      	mov	r1, r8
 8003956:	1851      	adds	r1, r2, r1
 8003958:	6339      	str	r1, [r7, #48]	@ 0x30
 800395a:	4649      	mov	r1, r9
 800395c:	414b      	adcs	r3, r1
 800395e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800396c:	4659      	mov	r1, fp
 800396e:	00cb      	lsls	r3, r1, #3
 8003970:	4651      	mov	r1, sl
 8003972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003976:	4651      	mov	r1, sl
 8003978:	00ca      	lsls	r2, r1, #3
 800397a:	4610      	mov	r0, r2
 800397c:	4619      	mov	r1, r3
 800397e:	4603      	mov	r3, r0
 8003980:	4642      	mov	r2, r8
 8003982:	189b      	adds	r3, r3, r2
 8003984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003988:	464b      	mov	r3, r9
 800398a:	460a      	mov	r2, r1
 800398c:	eb42 0303 	adc.w	r3, r2, r3
 8003990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039a8:	460b      	mov	r3, r1
 80039aa:	18db      	adds	r3, r3, r3
 80039ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ae:	4613      	mov	r3, r2
 80039b0:	eb42 0303 	adc.w	r3, r2, r3
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039be:	f7fc fc03 	bl	80001c8 <__aeabi_uldivmod>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <UART_SetConfig+0x2d4>)
 80039c8:	fba3 1302 	umull	r1, r3, r3, r2
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	2164      	movs	r1, #100	@ 0x64
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	3332      	adds	r3, #50	@ 0x32
 80039da:	4a08      	ldr	r2, [pc, #32]	@ (80039fc <UART_SetConfig+0x2d4>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	f003 0207 	and.w	r2, r3, #7
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4422      	add	r2, r4
 80039ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039f0:	e106      	b.n	8003c00 <UART_SetConfig+0x4d8>
 80039f2:	bf00      	nop
 80039f4:	40011000 	.word	0x40011000
 80039f8:	40011400 	.word	0x40011400
 80039fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a12:	4642      	mov	r2, r8
 8003a14:	464b      	mov	r3, r9
 8003a16:	1891      	adds	r1, r2, r2
 8003a18:	6239      	str	r1, [r7, #32]
 8003a1a:	415b      	adcs	r3, r3
 8003a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a22:	4641      	mov	r1, r8
 8003a24:	1854      	adds	r4, r2, r1
 8003a26:	4649      	mov	r1, r9
 8003a28:	eb43 0501 	adc.w	r5, r3, r1
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	00eb      	lsls	r3, r5, #3
 8003a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a3a:	00e2      	lsls	r2, r4, #3
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	461d      	mov	r5, r3
 8003a40:	4643      	mov	r3, r8
 8003a42:	18e3      	adds	r3, r4, r3
 8003a44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a48:	464b      	mov	r3, r9
 8003a4a:	eb45 0303 	adc.w	r3, r5, r3
 8003a4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a6e:	4629      	mov	r1, r5
 8003a70:	008b      	lsls	r3, r1, #2
 8003a72:	4621      	mov	r1, r4
 8003a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a78:	4621      	mov	r1, r4
 8003a7a:	008a      	lsls	r2, r1, #2
 8003a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a80:	f7fc fba2 	bl	80001c8 <__aeabi_uldivmod>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4b60      	ldr	r3, [pc, #384]	@ (8003c0c <UART_SetConfig+0x4e4>)
 8003a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	011c      	lsls	r4, r3, #4
 8003a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	1891      	adds	r1, r2, r2
 8003aaa:	61b9      	str	r1, [r7, #24]
 8003aac:	415b      	adcs	r3, r3
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	1851      	adds	r1, r2, r1
 8003ab8:	6139      	str	r1, [r7, #16]
 8003aba:	4649      	mov	r1, r9
 8003abc:	414b      	adcs	r3, r1
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003acc:	4659      	mov	r1, fp
 8003ace:	00cb      	lsls	r3, r1, #3
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	00ca      	lsls	r2, r1, #3
 8003ada:	4610      	mov	r0, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ae8:	464b      	mov	r3, r9
 8003aea:	460a      	mov	r2, r1
 8003aec:	eb42 0303 	adc.w	r3, r2, r3
 8003af0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003afe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	008b      	lsls	r3, r1, #2
 8003b10:	4641      	mov	r1, r8
 8003b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b16:	4641      	mov	r1, r8
 8003b18:	008a      	lsls	r2, r1, #2
 8003b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b1e:	f7fc fb53 	bl	80001c8 <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4611      	mov	r1, r2
 8003b28:	4b38      	ldr	r3, [pc, #224]	@ (8003c0c <UART_SetConfig+0x4e4>)
 8003b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2264      	movs	r2, #100	@ 0x64
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	1acb      	subs	r3, r1, r3
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	3332      	adds	r3, #50	@ 0x32
 8003b3c:	4a33      	ldr	r2, [pc, #204]	@ (8003c0c <UART_SetConfig+0x4e4>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b48:	441c      	add	r4, r3
 8003b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b4e:	2200      	movs	r2, #0
 8003b50:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b52:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b58:	4642      	mov	r2, r8
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	1891      	adds	r1, r2, r2
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	415b      	adcs	r3, r3
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b68:	4641      	mov	r1, r8
 8003b6a:	1851      	adds	r1, r2, r1
 8003b6c:	6039      	str	r1, [r7, #0]
 8003b6e:	4649      	mov	r1, r9
 8003b70:	414b      	adcs	r3, r1
 8003b72:	607b      	str	r3, [r7, #4]
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b80:	4659      	mov	r1, fp
 8003b82:	00cb      	lsls	r3, r1, #3
 8003b84:	4651      	mov	r1, sl
 8003b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8a:	4651      	mov	r1, sl
 8003b8c:	00ca      	lsls	r2, r1, #3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	4619      	mov	r1, r3
 8003b92:	4603      	mov	r3, r0
 8003b94:	4642      	mov	r2, r8
 8003b96:	189b      	adds	r3, r3, r2
 8003b98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	460a      	mov	r2, r1
 8003b9e:	eb42 0303 	adc.w	r3, r2, r3
 8003ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bae:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	008b      	lsls	r3, r1, #2
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	008a      	lsls	r2, r1, #2
 8003bca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bce:	f7fc fafb 	bl	80001c8 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c0c <UART_SetConfig+0x4e4>)
 8003bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	2164      	movs	r1, #100	@ 0x64
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	3332      	adds	r3, #50	@ 0x32
 8003bea:	4a08      	ldr	r2, [pc, #32]	@ (8003c0c <UART_SetConfig+0x4e4>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4422      	add	r2, r4
 8003bfe:	609a      	str	r2, [r3, #8]
}
 8003c00:	bf00      	nop
 8003c02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c06:	46bd      	mov	sp, r7
 8003c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0c:	51eb851f 	.word	0x51eb851f

08003c10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c10:	b084      	sub	sp, #16
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	f107 001c 	add.w	r0, r7, #28
 8003c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d123      	bne.n	8003c72 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003c3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f001 fae2 	bl	8005230 <USB_CoreReset>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	e01b      	b.n	8003caa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f001 fad6 	bl	8005230 <USB_CoreReset>
 8003c84:	4603      	mov	r3, r0
 8003c86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d106      	bne.n	8003c9e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c9c:	e005      	b.n	8003caa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003caa:	7fbb      	ldrb	r3, [r7, #30]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d10b      	bne.n	8003cc8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f043 0206 	orr.w	r2, r3, #6
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f043 0220 	orr.w	r2, r3, #32
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cd4:	b004      	add	sp, #16
 8003cd6:	4770      	bx	lr

08003cd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d165      	bne.n	8003db8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4a41      	ldr	r2, [pc, #260]	@ (8003df4 <USB_SetTurnaroundTime+0x11c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d906      	bls.n	8003d02 <USB_SetTurnaroundTime+0x2a>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4a40      	ldr	r2, [pc, #256]	@ (8003df8 <USB_SetTurnaroundTime+0x120>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d202      	bcs.n	8003d02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e062      	b.n	8003dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4a3c      	ldr	r2, [pc, #240]	@ (8003df8 <USB_SetTurnaroundTime+0x120>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d306      	bcc.n	8003d18 <USB_SetTurnaroundTime+0x40>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4a3b      	ldr	r2, [pc, #236]	@ (8003dfc <USB_SetTurnaroundTime+0x124>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d202      	bcs.n	8003d18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d12:	230e      	movs	r3, #14
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	e057      	b.n	8003dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4a38      	ldr	r2, [pc, #224]	@ (8003dfc <USB_SetTurnaroundTime+0x124>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d306      	bcc.n	8003d2e <USB_SetTurnaroundTime+0x56>
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4a37      	ldr	r2, [pc, #220]	@ (8003e00 <USB_SetTurnaroundTime+0x128>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d202      	bcs.n	8003d2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d28:	230d      	movs	r3, #13
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	e04c      	b.n	8003dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4a33      	ldr	r2, [pc, #204]	@ (8003e00 <USB_SetTurnaroundTime+0x128>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d306      	bcc.n	8003d44 <USB_SetTurnaroundTime+0x6c>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4a32      	ldr	r2, [pc, #200]	@ (8003e04 <USB_SetTurnaroundTime+0x12c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d802      	bhi.n	8003d44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d3e:	230c      	movs	r3, #12
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	e041      	b.n	8003dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4a2f      	ldr	r2, [pc, #188]	@ (8003e04 <USB_SetTurnaroundTime+0x12c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d906      	bls.n	8003d5a <USB_SetTurnaroundTime+0x82>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8003e08 <USB_SetTurnaroundTime+0x130>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d802      	bhi.n	8003d5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d54:	230b      	movs	r3, #11
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e036      	b.n	8003dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003e08 <USB_SetTurnaroundTime+0x130>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d906      	bls.n	8003d70 <USB_SetTurnaroundTime+0x98>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4a29      	ldr	r2, [pc, #164]	@ (8003e0c <USB_SetTurnaroundTime+0x134>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d802      	bhi.n	8003d70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d6a:	230a      	movs	r3, #10
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e02b      	b.n	8003dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4a26      	ldr	r2, [pc, #152]	@ (8003e0c <USB_SetTurnaroundTime+0x134>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d906      	bls.n	8003d86 <USB_SetTurnaroundTime+0xae>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4a25      	ldr	r2, [pc, #148]	@ (8003e10 <USB_SetTurnaroundTime+0x138>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d202      	bcs.n	8003d86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d80:	2309      	movs	r3, #9
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e020      	b.n	8003dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4a21      	ldr	r2, [pc, #132]	@ (8003e10 <USB_SetTurnaroundTime+0x138>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d306      	bcc.n	8003d9c <USB_SetTurnaroundTime+0xc4>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4a20      	ldr	r2, [pc, #128]	@ (8003e14 <USB_SetTurnaroundTime+0x13c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d802      	bhi.n	8003d9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d96:	2308      	movs	r3, #8
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	e015      	b.n	8003dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <USB_SetTurnaroundTime+0x13c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d906      	bls.n	8003db2 <USB_SetTurnaroundTime+0xda>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e18 <USB_SetTurnaroundTime+0x140>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d202      	bcs.n	8003db2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003dac:	2307      	movs	r3, #7
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e00a      	b.n	8003dc8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003db2:	2306      	movs	r3, #6
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	e007      	b.n	8003dc8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003dbe:	2309      	movs	r3, #9
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e001      	b.n	8003dc8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003dc4:	2309      	movs	r3, #9
 8003dc6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	029b      	lsls	r3, r3, #10
 8003ddc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	00d8acbf 	.word	0x00d8acbf
 8003df8:	00e4e1c0 	.word	0x00e4e1c0
 8003dfc:	00f42400 	.word	0x00f42400
 8003e00:	01067380 	.word	0x01067380
 8003e04:	011a499f 	.word	0x011a499f
 8003e08:	01312cff 	.word	0x01312cff
 8003e0c:	014ca43f 	.word	0x014ca43f
 8003e10:	016e3600 	.word	0x016e3600
 8003e14:	01a6ab1f 	.word	0x01a6ab1f
 8003e18:	01e84800 	.word	0x01e84800

08003e1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f043 0201 	orr.w	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 0201 	bic.w	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d115      	bne.n	8003eae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e8e:	200a      	movs	r0, #10
 8003e90:	f7fc fd6c 	bl	800096c <HAL_Delay>
      ms += 10U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	330a      	adds	r3, #10
 8003e98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f001 f939 	bl	8005112 <USB_GetMode>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d01e      	beq.n	8003ee4 <USB_SetCurrentMode+0x84>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2bc7      	cmp	r3, #199	@ 0xc7
 8003eaa:	d9f0      	bls.n	8003e8e <USB_SetCurrentMode+0x2e>
 8003eac:	e01a      	b.n	8003ee4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d115      	bne.n	8003ee0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ec0:	200a      	movs	r0, #10
 8003ec2:	f7fc fd53 	bl	800096c <HAL_Delay>
      ms += 10U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	330a      	adds	r3, #10
 8003eca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f001 f920 	bl	8005112 <USB_GetMode>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <USB_SetCurrentMode+0x84>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2bc7      	cmp	r3, #199	@ 0xc7
 8003edc:	d9f0      	bls.n	8003ec0 <USB_SetCurrentMode+0x60>
 8003ede:	e001      	b.n	8003ee4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e005      	b.n	8003ef0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2bc8      	cmp	r3, #200	@ 0xc8
 8003ee8:	d101      	bne.n	8003eee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ef8:	b084      	sub	sp, #16
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	e009      	b.n	8003f2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	3340      	adds	r3, #64	@ 0x40
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	2200      	movs	r2, #0
 8003f24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b0e      	cmp	r3, #14
 8003f30:	d9f2      	bls.n	8003f18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11c      	bne.n	8003f74 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f72:	e00b      	b.n	8003f8c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f78:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f84:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f92:	461a      	mov	r2, r3
 8003f94:	2300      	movs	r3, #0
 8003f96:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f98:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10d      	bne.n	8003fbc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fa8:	2100      	movs	r1, #0
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f968 	bl	8004280 <USB_SetDevSpeed>
 8003fb0:	e008      	b.n	8003fc4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f963 	bl	8004280 <USB_SetDevSpeed>
 8003fba:	e003      	b.n	8003fc4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fbc:	2103      	movs	r1, #3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f95e 	bl	8004280 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fc4:	2110      	movs	r1, #16
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8fa 	bl	80041c0 <USB_FlushTxFifo>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f924 	bl	8004224 <USB_FlushRxFifo>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fec:	461a      	mov	r2, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004004:	461a      	mov	r2, r3
 8004006:	2300      	movs	r3, #0
 8004008:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	e043      	b.n	8004098 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004022:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004026:	d118      	bne.n	800405a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800403a:	461a      	mov	r2, r3
 800403c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e013      	b.n	800406c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004050:	461a      	mov	r2, r3
 8004052:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	e008      	b.n	800406c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004066:	461a      	mov	r2, r3
 8004068:	2300      	movs	r3, #0
 800406a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004078:	461a      	mov	r2, r3
 800407a:	2300      	movs	r3, #0
 800407c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800408a:	461a      	mov	r2, r3
 800408c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004090:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3301      	adds	r3, #1
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800409c:	461a      	mov	r2, r3
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d3b5      	bcc.n	8004010 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	e043      	b.n	8004132 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040c0:	d118      	bne.n	80040f4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d4:	461a      	mov	r2, r3
 80040d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	e013      	b.n	8004106 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ea:	461a      	mov	r2, r3
 80040ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e008      	b.n	8004106 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004100:	461a      	mov	r2, r3
 8004102:	2300      	movs	r3, #0
 8004104:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004112:	461a      	mov	r2, r3
 8004114:	2300      	movs	r3, #0
 8004116:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004124:	461a      	mov	r2, r3
 8004126:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800412a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3301      	adds	r3, #1
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004136:	461a      	mov	r2, r3
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4293      	cmp	r3, r2
 800413c:	d3b5      	bcc.n	80040aa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800414c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004150:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800415e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004160:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f043 0210 	orr.w	r2, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699a      	ldr	r2, [r3, #24]
 8004178:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <USB_DevInit+0x2c4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004180:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f043 0208 	orr.w	r2, r3, #8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004194:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004198:	2b01      	cmp	r3, #1
 800419a:	d107      	bne.n	80041ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041a4:	f043 0304 	orr.w	r3, r3, #4
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041b8:	b004      	add	sp, #16
 80041ba:	4770      	bx	lr
 80041bc:	803c3800 	.word	0x803c3800

080041c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3301      	adds	r3, #1
 80041d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041da:	d901      	bls.n	80041e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e01b      	b.n	8004218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	daf2      	bge.n	80041ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	019b      	lsls	r3, r3, #6
 80041f0:	f043 0220 	orr.w	r2, r3, #32
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004204:	d901      	bls.n	800420a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e006      	b.n	8004218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b20      	cmp	r3, #32
 8004214:	d0f0      	beq.n	80041f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800423c:	d901      	bls.n	8004242 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e018      	b.n	8004274 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	daf2      	bge.n	8004230 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2210      	movs	r2, #16
 8004252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004260:	d901      	bls.n	8004266 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e006      	b.n	8004274 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b10      	cmp	r3, #16
 8004270:	d0f0      	beq.n	8004254 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	68f9      	ldr	r1, [r7, #12]
 800429c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b087      	sub	sp, #28
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0306 	and.w	r3, r3, #6
 80042ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]
 80042d6:	e00a      	b.n	80042ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d002      	beq.n	80042e4 <USB_GetDevSpeed+0x32>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d102      	bne.n	80042ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80042e4:	2302      	movs	r3, #2
 80042e6:	75fb      	strb	r3, [r7, #23]
 80042e8:	e001      	b.n	80042ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80042ea:	230f      	movs	r3, #15
 80042ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d13a      	bne.n	800438e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	2101      	movs	r1, #1
 800432a:	fa01 f303 	lsl.w	r3, r1, r3
 800432e:	b29b      	uxth	r3, r3
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004336:	4313      	orrs	r3, r2
 8004338:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d155      	bne.n	80043fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	791b      	ldrb	r3, [r3, #4]
 800436a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800436c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	059b      	lsls	r3, r3, #22
 8004372:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004374:	4313      	orrs	r3, r2
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	e036      	b.n	80043fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004394:	69da      	ldr	r2, [r3, #28]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	2101      	movs	r1, #1
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	68f9      	ldr	r1, [r7, #12]
 80043a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11a      	bne.n	80043fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	791b      	ldrb	r3, [r3, #4]
 80043e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043e2:	430b      	orrs	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	785b      	ldrb	r3, [r3, #1]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d161      	bne.n	80044ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800443a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800443e:	d11f      	bne.n	8004480 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	0151      	lsls	r1, r2, #5
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	440a      	add	r2, r1
 8004456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800445a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800445e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	440a      	add	r2, r1
 8004476:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800447a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800447e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	2101      	movs	r1, #1
 8004492:	fa01 f303 	lsl.w	r3, r1, r3
 8004496:	b29b      	uxth	r3, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044a0:	4013      	ands	r3, r2
 80044a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	2101      	movs	r1, #1
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044c4:	4013      	ands	r3, r2
 80044c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	0159      	lsls	r1, r3, #5
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	440b      	add	r3, r1
 80044de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e2:	4619      	mov	r1, r3
 80044e4:	4b35      	ldr	r3, [pc, #212]	@ (80045bc <USB_DeactivateEndpoint+0x1b0>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
 80044ea:	e060      	b.n	80045ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004502:	d11f      	bne.n	8004544 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	440a      	add	r2, r1
 800451a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800451e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004522:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800453e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004542:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800454a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	2101      	movs	r1, #1
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	43db      	mvns	r3, r3
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004564:	4013      	ands	r3, r2
 8004566:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	2101      	movs	r1, #1
 800457a:	fa01 f303 	lsl.w	r3, r1, r3
 800457e:	041b      	lsls	r3, r3, #16
 8004580:	43db      	mvns	r3, r3
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004588:	4013      	ands	r3, r2
 800458a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	0159      	lsls	r1, r3, #5
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	440b      	add	r3, r1
 80045a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a6:	4619      	mov	r1, r3
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <USB_DeactivateEndpoint+0x1b4>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	ec337800 	.word	0xec337800
 80045c0:	eff37800 	.word	0xeff37800

080045c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	@ 0x28
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	f040 817a 	bne.w	80048da <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d132      	bne.n	8004654 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004608:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800460c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	440a      	add	r2, r1
 8004628:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800462c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800464c:	0cdb      	lsrs	r3, r3, #19
 800464e:	04db      	lsls	r3, r3, #19
 8004650:	6113      	str	r3, [r2, #16]
 8004652:	e092      	b.n	800477a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	440a      	add	r2, r1
 800466a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800466e:	0cdb      	lsrs	r3, r3, #19
 8004670:	04db      	lsls	r3, r3, #19
 8004672:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800468e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004692:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004696:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d11a      	bne.n	80046d4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d903      	bls.n	80046b2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	0151      	lsls	r1, r2, #5
 80046c4:	69fa      	ldr	r2, [r7, #28]
 80046c6:	440a      	add	r2, r1
 80046c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80046d0:	6113      	str	r3, [r2, #16]
 80046d2:	e01b      	b.n	800470c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	6919      	ldr	r1, [r3, #16]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	440b      	add	r3, r1
 80046ec:	1e59      	subs	r1, r3, #1
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046f6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046f8:	4ba2      	ldr	r3, [pc, #648]	@ (8004984 <USB_EPStartXfer+0x3c0>)
 80046fa:	400b      	ands	r3, r1
 80046fc:	69b9      	ldr	r1, [r7, #24]
 80046fe:	0148      	lsls	r0, r1, #5
 8004700:	69f9      	ldr	r1, [r7, #28]
 8004702:	4401      	add	r1, r0
 8004704:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004708:	4313      	orrs	r3, r2
 800470a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004722:	69b9      	ldr	r1, [r7, #24]
 8004724:	0148      	lsls	r0, r1, #5
 8004726:	69f9      	ldr	r1, [r7, #28]
 8004728:	4401      	add	r1, r0
 800472a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800472e:	4313      	orrs	r3, r2
 8004730:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	791b      	ldrb	r3, [r3, #4]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d11f      	bne.n	800477a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	440a      	add	r2, r1
 8004750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004754:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004758:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	0151      	lsls	r1, r2, #5
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	440a      	add	r2, r1
 8004770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004774:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004778:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d14b      	bne.n	8004818 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004794:	461a      	mov	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	791b      	ldrb	r3, [r3, #4]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d128      	bne.n	80047f6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d110      	bne.n	80047d6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	0151      	lsls	r1, r2, #5
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	440a      	add	r2, r1
 80047ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	e00f      	b.n	80047f6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	0151      	lsls	r1, r2, #5
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	440a      	add	r2, r1
 80047ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004810:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e165      	b.n	8004ae4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004832:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004836:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	791b      	ldrb	r3, [r3, #4]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d015      	beq.n	800486c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 814d 	beq.w	8004ae4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	2101      	movs	r1, #1
 800485c:	fa01 f303 	lsl.w	r3, r1, r3
 8004860:	69f9      	ldr	r1, [r7, #28]
 8004862:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004866:	4313      	orrs	r3, r2
 8004868:	634b      	str	r3, [r1, #52]	@ 0x34
 800486a:	e13b      	b.n	8004ae4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d110      	bne.n	800489e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004896:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	e00f      	b.n	80048be <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	0151      	lsls	r1, r2, #5
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	440a      	add	r2, r1
 80048b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	68d9      	ldr	r1, [r3, #12]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	b298      	uxth	r0, r3
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	4603      	mov	r3, r0
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f9b8 	bl	8004c48 <USB_WritePacket>
 80048d8:	e104      	b.n	8004ae4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048f4:	0cdb      	lsrs	r3, r3, #19
 80048f6:	04db      	lsls	r3, r3, #19
 80048f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004914:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004918:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800491c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d131      	bne.n	8004988 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004952:	69b9      	ldr	r1, [r7, #24]
 8004954:	0148      	lsls	r0, r1, #5
 8004956:	69f9      	ldr	r1, [r7, #28]
 8004958:	4401      	add	r1, r0
 800495a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800495e:	4313      	orrs	r3, r2
 8004960:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800497c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004980:	6113      	str	r3, [r2, #16]
 8004982:	e061      	b.n	8004a48 <USB_EPStartXfer+0x484>
 8004984:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d123      	bne.n	80049d8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a6:	69b9      	ldr	r1, [r7, #24]
 80049a8:	0148      	lsls	r0, r1, #5
 80049aa:	69f9      	ldr	r1, [r7, #28]
 80049ac:	4401      	add	r1, r0
 80049ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80049b2:	4313      	orrs	r3, r2
 80049b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049d4:	6113      	str	r3, [r2, #16]
 80049d6:	e037      	b.n	8004a48 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4413      	add	r3, r2
 80049e2:	1e5a      	subs	r2, r3, #1
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	8afa      	ldrh	r2, [r7, #22]
 80049f4:	fb03 f202 	mul.w	r2, r3, r2
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	8afb      	ldrh	r3, [r7, #22]
 8004a0c:	04d9      	lsls	r1, r3, #19
 8004a0e:	4b38      	ldr	r3, [pc, #224]	@ (8004af0 <USB_EPStartXfer+0x52c>)
 8004a10:	400b      	ands	r3, r1
 8004a12:	69b9      	ldr	r1, [r7, #24]
 8004a14:	0148      	lsls	r0, r1, #5
 8004a16:	69f9      	ldr	r1, [r7, #28]
 8004a18:	4401      	add	r1, r0
 8004a1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a38:	69b9      	ldr	r1, [r7, #24]
 8004a3a:	0148      	lsls	r0, r1, #5
 8004a3c:	69f9      	ldr	r1, [r7, #28]
 8004a3e:	4401      	add	r1, r0
 8004a40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a44:	4313      	orrs	r3, r2
 8004a46:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d10d      	bne.n	8004a6a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	68d9      	ldr	r1, [r3, #12]
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a66:	460a      	mov	r2, r1
 8004a68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	791b      	ldrb	r3, [r3, #4]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d128      	bne.n	8004ac4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d110      	bne.n	8004aa4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e00f      	b.n	8004ac4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ade:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ae2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	1ff80000 	.word	0x1ff80000

08004af4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d14a      	bne.n	8004ba8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b2a:	f040 8086 	bne.w	8004c3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	7812      	ldrb	r2, [r2, #0]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	7812      	ldrb	r2, [r2, #0]
 8004b66:	0151      	lsls	r1, r2, #5
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d902      	bls.n	8004b8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	75fb      	strb	r3, [r7, #23]
          break;
 8004b8a:	e056      	b.n	8004c3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ba4:	d0e7      	beq.n	8004b76 <USB_EPStopXfer+0x82>
 8004ba6:	e048      	b.n	8004c3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bc0:	d13b      	bne.n	8004c3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	7812      	ldrb	r2, [r2, #0]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004be0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004be4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	7812      	ldrb	r2, [r2, #0]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d902      	bls.n	8004c20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c1e:	e00c      	b.n	8004c3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c38:	d0e7      	beq.n	8004c0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b089      	sub	sp, #36	@ 0x24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	4611      	mov	r1, r2
 8004c54:	461a      	mov	r2, r3
 8004c56:	460b      	mov	r3, r1
 8004c58:	71fb      	strb	r3, [r7, #7]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d123      	bne.n	8004cb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c6e:	88bb      	ldrh	r3, [r7, #4]
 8004c70:	3303      	adds	r3, #3
 8004c72:	089b      	lsrs	r3, r3, #2
 8004c74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	e018      	b.n	8004cae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	031a      	lsls	r2, r3, #12
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c88:	461a      	mov	r2, r3
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	3301      	adds	r3, #1
 8004c94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	3301      	adds	r3, #1
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d3e2      	bcc.n	8004c7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3724      	adds	r7, #36	@ 0x24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b08b      	sub	sp, #44	@ 0x2c
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	089b      	lsrs	r3, r3, #2
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	e014      	b.n	8004d1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	3301      	adds	r3, #1
 8004d00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	3301      	adds	r3, #1
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	3301      	adds	r3, #1
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	3301      	adds	r3, #1
 8004d18:	623b      	str	r3, [r7, #32]
 8004d1a:	6a3a      	ldr	r2, [r7, #32]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d3e6      	bcc.n	8004cf0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d22:	8bfb      	ldrh	r3, [r7, #30]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01e      	beq.n	8004d66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d32:	461a      	mov	r2, r3
 8004d34:	f107 0310 	add.w	r3, r7, #16
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	701a      	strb	r2, [r3, #0]
      i++;
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	3301      	adds	r3, #1
 8004d52:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	3301      	adds	r3, #1
 8004d58:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004d5a:	8bfb      	ldrh	r3, [r7, #30]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d60:	8bfb      	ldrh	r3, [r7, #30]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1ea      	bne.n	8004d3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	372c      	adds	r7, #44	@ 0x2c
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d12c      	bne.n	8004dea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	db12      	blt.n	8004dc8 <USB_EPSetStall+0x54>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00f      	beq.n	8004dc8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004dc6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004de2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	e02b      	b.n	8004e42 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	db12      	blt.n	8004e22 <USB_EPSetStall+0xae>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00f      	beq.n	8004e22 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e20:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	785b      	ldrb	r3, [r3, #1]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d128      	bne.n	8004ebe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	791b      	ldrb	r3, [r3, #4]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d003      	beq.n	8004e9c <USB_EPClearStall+0x4c>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	791b      	ldrb	r3, [r3, #4]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d138      	bne.n	8004f0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	0151      	lsls	r1, r2, #5
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	e027      	b.n	8004f0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ed8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004edc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	791b      	ldrb	r3, [r3, #4]
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d003      	beq.n	8004eee <USB_EPClearStall+0x9e>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	791b      	ldrb	r3, [r3, #4]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d10f      	bne.n	8004f0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004f3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004f50:	68f9      	ldr	r1, [r7, #12]
 8004f52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f96:	f023 0302 	bic.w	r3, r3, #2
 8004f9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b085      	sub	sp, #20
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004fc4:	f023 0303 	bic.w	r3, r3, #3
 8004fc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fd8:	f043 0302 	orr.w	r3, r3, #2
 8004fdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4013      	ands	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005004:	68fb      	ldr	r3, [r7, #12]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	4013      	ands	r3, r2
 8005034:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	0c1b      	lsrs	r3, r3, #16
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005046:	b480      	push	{r7}
 8005048:	b085      	sub	sp, #20
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	4013      	ands	r3, r2
 8005068:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	b29b      	uxth	r3, r3
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800507a:	b480      	push	{r7}
 800507c:	b085      	sub	sp, #20
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	4013      	ands	r3, r2
 80050a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050a8:	68bb      	ldr	r3, [r7, #8]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b087      	sub	sp, #28
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	460b      	mov	r3, r1
 80050c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	fa22 f303 	lsr.w	r3, r2, r3
 80050e6:	01db      	lsls	r3, r3, #7
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4013      	ands	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005104:	68bb      	ldr	r3, [r7, #8]
}
 8005106:	4618      	mov	r0, r3
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0301 	and.w	r3, r3, #1
}
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005148:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800514c:	f023 0307 	bic.w	r3, r3, #7
 8005150:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005164:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	460b      	mov	r3, r1
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	333c      	adds	r3, #60	@ 0x3c
 800518a:	3304      	adds	r3, #4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4a26      	ldr	r2, [pc, #152]	@ (800522c <USB_EP0_OutStart+0xb8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d90a      	bls.n	80051ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051a8:	d101      	bne.n	80051ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e037      	b.n	800521e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b4:	461a      	mov	r2, r3
 80051b6:	2300      	movs	r3, #0
 80051b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051dc:	f043 0318 	orr.w	r3, r3, #24
 80051e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80051f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80051f6:	7afb      	ldrb	r3, [r7, #11]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d10f      	bne.n	800521c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005202:	461a      	mov	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005216:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800521a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	4f54300a 	.word	0x4f54300a

08005230 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005248:	d901      	bls.n	800524e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e01b      	b.n	8005286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	daf2      	bge.n	800523c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f043 0201 	orr.w	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3301      	adds	r3, #1
 800526a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005272:	d901      	bls.n	8005278 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e006      	b.n	8005286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d0f0      	beq.n	8005266 <USB_CoreReset+0x36>

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80052a4:	f002 fc7c 	bl	8007ba0 <USBD_static_malloc>
 80052a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d109      	bne.n	80052c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	32b0      	adds	r2, #176	@ 0xb0
 80052ba:	2100      	movs	r1, #0
 80052bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80052c0:	2302      	movs	r3, #2
 80052c2:	e0d4      	b.n	800546e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80052c4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80052c8:	2100      	movs	r1, #0
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f002 fcac 	bl	8007c28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	32b0      	adds	r2, #176	@ 0xb0
 80052da:	68f9      	ldr	r1, [r7, #12]
 80052dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	32b0      	adds	r2, #176	@ 0xb0
 80052ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	7c1b      	ldrb	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d138      	bne.n	800536e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005478 <USBD_CDC_Init+0x1e4>)
 80052fe:	7819      	ldrb	r1, [r3, #0]
 8005300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005304:	2202      	movs	r2, #2
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f002 fb27 	bl	800795a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800530c:	4b5a      	ldr	r3, [pc, #360]	@ (8005478 <USBD_CDC_Init+0x1e4>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	f003 020f 	and.w	r2, r3, #15
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	3324      	adds	r3, #36	@ 0x24
 8005322:	2201      	movs	r2, #1
 8005324:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005326:	4b55      	ldr	r3, [pc, #340]	@ (800547c <USBD_CDC_Init+0x1e8>)
 8005328:	7819      	ldrb	r1, [r3, #0]
 800532a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800532e:	2202      	movs	r2, #2
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f002 fb12 	bl	800795a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005336:	4b51      	ldr	r3, [pc, #324]	@ (800547c <USBD_CDC_Init+0x1e8>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f003 020f 	and.w	r2, r3, #15
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800534e:	2201      	movs	r2, #1
 8005350:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005352:	4b4b      	ldr	r3, [pc, #300]	@ (8005480 <USBD_CDC_Init+0x1ec>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	f003 020f 	and.w	r2, r3, #15
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	3326      	adds	r3, #38	@ 0x26
 8005368:	2210      	movs	r2, #16
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	e035      	b.n	80053da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800536e:	4b42      	ldr	r3, [pc, #264]	@ (8005478 <USBD_CDC_Init+0x1e4>)
 8005370:	7819      	ldrb	r1, [r3, #0]
 8005372:	2340      	movs	r3, #64	@ 0x40
 8005374:	2202      	movs	r2, #2
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f002 faef 	bl	800795a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800537c:	4b3e      	ldr	r3, [pc, #248]	@ (8005478 <USBD_CDC_Init+0x1e4>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	f003 020f 	and.w	r2, r3, #15
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	3324      	adds	r3, #36	@ 0x24
 8005392:	2201      	movs	r2, #1
 8005394:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005396:	4b39      	ldr	r3, [pc, #228]	@ (800547c <USBD_CDC_Init+0x1e8>)
 8005398:	7819      	ldrb	r1, [r3, #0]
 800539a:	2340      	movs	r3, #64	@ 0x40
 800539c:	2202      	movs	r2, #2
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f002 fadb 	bl	800795a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80053a4:	4b35      	ldr	r3, [pc, #212]	@ (800547c <USBD_CDC_Init+0x1e8>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f003 020f 	and.w	r2, r3, #15
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053bc:	2201      	movs	r2, #1
 80053be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80053c0:	4b2f      	ldr	r3, [pc, #188]	@ (8005480 <USBD_CDC_Init+0x1ec>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f003 020f 	and.w	r2, r3, #15
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	3326      	adds	r3, #38	@ 0x26
 80053d6:	2210      	movs	r2, #16
 80053d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80053da:	4b29      	ldr	r3, [pc, #164]	@ (8005480 <USBD_CDC_Init+0x1ec>)
 80053dc:	7819      	ldrb	r1, [r3, #0]
 80053de:	2308      	movs	r3, #8
 80053e0:	2203      	movs	r2, #3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f002 fab9 	bl	800795a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80053e8:	4b25      	ldr	r3, [pc, #148]	@ (8005480 <USBD_CDC_Init+0x1ec>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	f003 020f 	and.w	r2, r3, #15
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	3324      	adds	r3, #36	@ 0x24
 80053fe:	2201      	movs	r2, #1
 8005400:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	33b0      	adds	r3, #176	@ 0xb0
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005438:	2302      	movs	r3, #2
 800543a:	e018      	b.n	800546e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	7c1b      	ldrb	r3, [r3, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10a      	bne.n	800545a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005444:	4b0d      	ldr	r3, [pc, #52]	@ (800547c <USBD_CDC_Init+0x1e8>)
 8005446:	7819      	ldrb	r1, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800544e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f002 fb70 	bl	8007b38 <USBD_LL_PrepareReceive>
 8005458:	e008      	b.n	800546c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800545a:	4b08      	ldr	r3, [pc, #32]	@ (800547c <USBD_CDC_Init+0x1e8>)
 800545c:	7819      	ldrb	r1, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005464:	2340      	movs	r3, #64	@ 0x40
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f002 fb66 	bl	8007b38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000093 	.word	0x20000093
 800547c:	20000094 	.word	0x20000094
 8005480:	20000095 	.word	0x20000095

08005484 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005490:	4b3a      	ldr	r3, [pc, #232]	@ (800557c <USBD_CDC_DeInit+0xf8>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f002 fa85 	bl	80079a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800549c:	4b37      	ldr	r3, [pc, #220]	@ (800557c <USBD_CDC_DeInit+0xf8>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 020f 	and.w	r2, r3, #15
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	3324      	adds	r3, #36	@ 0x24
 80054b2:	2200      	movs	r2, #0
 80054b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80054b6:	4b32      	ldr	r3, [pc, #200]	@ (8005580 <USBD_CDC_DeInit+0xfc>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	4619      	mov	r1, r3
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f002 fa72 	bl	80079a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80054c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005580 <USBD_CDC_DeInit+0xfc>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	f003 020f 	and.w	r2, r3, #15
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80054da:	2200      	movs	r2, #0
 80054dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80054de:	4b29      	ldr	r3, [pc, #164]	@ (8005584 <USBD_CDC_DeInit+0x100>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f002 fa5e 	bl	80079a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80054ea:	4b26      	ldr	r3, [pc, #152]	@ (8005584 <USBD_CDC_DeInit+0x100>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	f003 020f 	and.w	r2, r3, #15
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	3324      	adds	r3, #36	@ 0x24
 8005500:	2200      	movs	r2, #0
 8005502:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005504:	4b1f      	ldr	r3, [pc, #124]	@ (8005584 <USBD_CDC_DeInit+0x100>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	f003 020f 	and.w	r2, r3, #15
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	3326      	adds	r3, #38	@ 0x26
 800551a:	2200      	movs	r2, #0
 800551c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	32b0      	adds	r2, #176	@ 0xb0
 8005528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01f      	beq.n	8005570 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	33b0      	adds	r3, #176	@ 0xb0
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	32b0      	adds	r2, #176	@ 0xb0
 800554e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005552:	4618      	mov	r0, r3
 8005554:	f002 fb32 	bl	8007bbc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	32b0      	adds	r2, #176	@ 0xb0
 8005562:	2100      	movs	r1, #0
 8005564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000093 	.word	0x20000093
 8005580:	20000094 	.word	0x20000094
 8005584:	20000095 	.word	0x20000095

08005588 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	32b0      	adds	r2, #176	@ 0xb0
 800559c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e0bf      	b.n	8005738 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d050      	beq.n	8005666 <USBD_CDC_Setup+0xde>
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	f040 80af 	bne.w	8005728 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	88db      	ldrh	r3, [r3, #6]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d03a      	beq.n	8005648 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	b25b      	sxtb	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	da1b      	bge.n	8005614 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	33b0      	adds	r3, #176	@ 0xb0
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80055f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	88d2      	ldrh	r2, [r2, #6]
 80055f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	88db      	ldrh	r3, [r3, #6]
 80055fe:	2b07      	cmp	r3, #7
 8005600:	bf28      	it	cs
 8005602:	2307      	movcs	r3, #7
 8005604:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	89fa      	ldrh	r2, [r7, #14]
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f001 fd47 	bl	80070a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005612:	e090      	b.n	8005736 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	785a      	ldrb	r2, [r3, #1]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	88db      	ldrh	r3, [r3, #6]
 8005622:	2b3f      	cmp	r3, #63	@ 0x3f
 8005624:	d803      	bhi.n	800562e <USBD_CDC_Setup+0xa6>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	88db      	ldrh	r3, [r3, #6]
 800562a:	b2da      	uxtb	r2, r3
 800562c:	e000      	b.n	8005630 <USBD_CDC_Setup+0xa8>
 800562e:	2240      	movs	r2, #64	@ 0x40
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005636:	6939      	ldr	r1, [r7, #16]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800563e:	461a      	mov	r2, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 fd59 	bl	80070f8 <USBD_CtlPrepareRx>
      break;
 8005646:	e076      	b.n	8005736 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	33b0      	adds	r3, #176	@ 0xb0
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	7850      	ldrb	r0, [r2, #1]
 800565e:	2200      	movs	r2, #0
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	4798      	blx	r3
      break;
 8005664:	e067      	b.n	8005736 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	785b      	ldrb	r3, [r3, #1]
 800566a:	2b0b      	cmp	r3, #11
 800566c:	d851      	bhi.n	8005712 <USBD_CDC_Setup+0x18a>
 800566e:	a201      	add	r2, pc, #4	@ (adr r2, 8005674 <USBD_CDC_Setup+0xec>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	080056a5 	.word	0x080056a5
 8005678:	08005721 	.word	0x08005721
 800567c:	08005713 	.word	0x08005713
 8005680:	08005713 	.word	0x08005713
 8005684:	08005713 	.word	0x08005713
 8005688:	08005713 	.word	0x08005713
 800568c:	08005713 	.word	0x08005713
 8005690:	08005713 	.word	0x08005713
 8005694:	08005713 	.word	0x08005713
 8005698:	08005713 	.word	0x08005713
 800569c:	080056cf 	.word	0x080056cf
 80056a0:	080056f9 	.word	0x080056f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d107      	bne.n	80056c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80056b0:	f107 030a 	add.w	r3, r7, #10
 80056b4:	2202      	movs	r2, #2
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f001 fcf1 	bl	80070a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056be:	e032      	b.n	8005726 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 fc7b 	bl	8006fbe <USBD_CtlError>
            ret = USBD_FAIL;
 80056c8:	2303      	movs	r3, #3
 80056ca:	75fb      	strb	r3, [r7, #23]
          break;
 80056cc:	e02b      	b.n	8005726 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d107      	bne.n	80056ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80056da:	f107 030d 	add.w	r3, r7, #13
 80056de:	2201      	movs	r2, #1
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 fcdc 	bl	80070a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056e8:	e01d      	b.n	8005726 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80056ea:	6839      	ldr	r1, [r7, #0]
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 fc66 	bl	8006fbe <USBD_CtlError>
            ret = USBD_FAIL;
 80056f2:	2303      	movs	r3, #3
 80056f4:	75fb      	strb	r3, [r7, #23]
          break;
 80056f6:	e016      	b.n	8005726 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b03      	cmp	r3, #3
 8005702:	d00f      	beq.n	8005724 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f001 fc59 	bl	8006fbe <USBD_CtlError>
            ret = USBD_FAIL;
 800570c:	2303      	movs	r3, #3
 800570e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005710:	e008      	b.n	8005724 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 fc52 	bl	8006fbe <USBD_CtlError>
          ret = USBD_FAIL;
 800571a:	2303      	movs	r3, #3
 800571c:	75fb      	strb	r3, [r7, #23]
          break;
 800571e:	e002      	b.n	8005726 <USBD_CDC_Setup+0x19e>
          break;
 8005720:	bf00      	nop
 8005722:	e008      	b.n	8005736 <USBD_CDC_Setup+0x1ae>
          break;
 8005724:	bf00      	nop
      }
      break;
 8005726:	e006      	b.n	8005736 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005728:	6839      	ldr	r1, [r7, #0]
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f001 fc47 	bl	8006fbe <USBD_CtlError>
      ret = USBD_FAIL;
 8005730:	2303      	movs	r3, #3
 8005732:	75fb      	strb	r3, [r7, #23]
      break;
 8005734:	bf00      	nop
  }

  return (uint8_t)ret;
 8005736:	7dfb      	ldrb	r3, [r7, #23]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005752:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	32b0      	adds	r2, #176	@ 0xb0
 800575e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005766:	2303      	movs	r3, #3
 8005768:	e065      	b.n	8005836 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	32b0      	adds	r2, #176	@ 0xb0
 8005774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005778:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	f003 020f 	and.w	r2, r3, #15
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	3318      	adds	r3, #24
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d02f      	beq.n	80057f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	f003 020f 	and.w	r2, r3, #15
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	3318      	adds	r3, #24
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	f003 010f 	and.w	r1, r3, #15
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	460b      	mov	r3, r1
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	440b      	add	r3, r1
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4403      	add	r3, r0
 80057bc:	331c      	adds	r3, #28
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d112      	bne.n	80057f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	f003 020f 	and.w	r2, r3, #15
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	3318      	adds	r3, #24
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80057e6:	78f9      	ldrb	r1, [r7, #3]
 80057e8:	2300      	movs	r3, #0
 80057ea:	2200      	movs	r2, #0
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f002 f982 	bl	8007af6 <USBD_LL_Transmit>
 80057f2:	e01f      	b.n	8005834 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	33b0      	adds	r3, #176	@ 0xb0
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d010      	beq.n	8005834 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	33b0      	adds	r3, #176	@ 0xb0
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	32b0      	adds	r2, #176	@ 0xb0
 8005854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005858:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	32b0      	adds	r2, #176	@ 0xb0
 8005864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800586c:	2303      	movs	r3, #3
 800586e:	e01a      	b.n	80058a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f002 f980 	bl	8007b7a <USBD_LL_GetRxDataSize>
 800587a:	4602      	mov	r2, r0
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	33b0      	adds	r3, #176	@ 0xb0
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80058a0:	4611      	mov	r1, r2
 80058a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	32b0      	adds	r2, #176	@ 0xb0
 80058c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e024      	b.n	800591a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	33b0      	adds	r3, #176	@ 0xb0
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d019      	beq.n	8005918 <USBD_CDC_EP0_RxReady+0x6a>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80058ea:	2bff      	cmp	r3, #255	@ 0xff
 80058ec:	d014      	beq.n	8005918 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	33b0      	adds	r3, #176	@ 0xb0
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005906:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800590e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	22ff      	movs	r2, #255	@ 0xff
 8005914:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800592c:	2182      	movs	r1, #130	@ 0x82
 800592e:	4818      	ldr	r0, [pc, #96]	@ (8005990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005930:	f000 fd0f 	bl	8006352 <USBD_GetEpDesc>
 8005934:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005936:	2101      	movs	r1, #1
 8005938:	4815      	ldr	r0, [pc, #84]	@ (8005990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800593a:	f000 fd0a 	bl	8006352 <USBD_GetEpDesc>
 800593e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005940:	2181      	movs	r1, #129	@ 0x81
 8005942:	4813      	ldr	r0, [pc, #76]	@ (8005990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005944:	f000 fd05 	bl	8006352 <USBD_GetEpDesc>
 8005948:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2210      	movs	r2, #16
 8005954:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d006      	beq.n	800596a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2200      	movs	r2, #0
 8005960:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005964:	711a      	strb	r2, [r3, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d006      	beq.n	800597e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005978:	711a      	strb	r2, [r3, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2243      	movs	r2, #67	@ 0x43
 8005982:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005984:	4b02      	ldr	r3, [pc, #8]	@ (8005990 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000050 	.word	0x20000050

08005994 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800599c:	2182      	movs	r1, #130	@ 0x82
 800599e:	4818      	ldr	r0, [pc, #96]	@ (8005a00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059a0:	f000 fcd7 	bl	8006352 <USBD_GetEpDesc>
 80059a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059a6:	2101      	movs	r1, #1
 80059a8:	4815      	ldr	r0, [pc, #84]	@ (8005a00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059aa:	f000 fcd2 	bl	8006352 <USBD_GetEpDesc>
 80059ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059b0:	2181      	movs	r1, #129	@ 0x81
 80059b2:	4813      	ldr	r0, [pc, #76]	@ (8005a00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059b4:	f000 fccd 	bl	8006352 <USBD_GetEpDesc>
 80059b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2210      	movs	r2, #16
 80059c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d006      	beq.n	80059da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2200      	movs	r2, #0
 80059d0:	711a      	strb	r2, [r3, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f042 0202 	orr.w	r2, r2, #2
 80059d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d006      	beq.n	80059ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	711a      	strb	r2, [r3, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f042 0202 	orr.w	r2, r2, #2
 80059ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2243      	movs	r2, #67	@ 0x43
 80059f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059f4:	4b02      	ldr	r3, [pc, #8]	@ (8005a00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000050 	.word	0x20000050

08005a04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a0c:	2182      	movs	r1, #130	@ 0x82
 8005a0e:	4818      	ldr	r0, [pc, #96]	@ (8005a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a10:	f000 fc9f 	bl	8006352 <USBD_GetEpDesc>
 8005a14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a16:	2101      	movs	r1, #1
 8005a18:	4815      	ldr	r0, [pc, #84]	@ (8005a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a1a:	f000 fc9a 	bl	8006352 <USBD_GetEpDesc>
 8005a1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a20:	2181      	movs	r1, #129	@ 0x81
 8005a22:	4813      	ldr	r0, [pc, #76]	@ (8005a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a24:	f000 fc95 	bl	8006352 <USBD_GetEpDesc>
 8005a28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2210      	movs	r2, #16
 8005a34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d006      	beq.n	8005a4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a44:	711a      	strb	r2, [r3, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d006      	beq.n	8005a5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a58:	711a      	strb	r2, [r3, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2243      	movs	r2, #67	@ 0x43
 8005a62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a64:	4b02      	ldr	r3, [pc, #8]	@ (8005a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000050 	.word	0x20000050

08005a74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	220a      	movs	r2, #10
 8005a80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a82:	4b03      	ldr	r3, [pc, #12]	@ (8005a90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	2000000c 	.word	0x2000000c

08005a94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e009      	b.n	8005abc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	33b0      	adds	r3, #176	@ 0xb0
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	32b0      	adds	r2, #176	@ 0xb0
 8005ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e008      	b.n	8005b00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	32b0      	adds	r2, #176	@ 0xb0
 8005b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e004      	b.n	8005b3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	32b0      	adds	r2, #176	@ 0xb0
 8005b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b5e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	32b0      	adds	r2, #176	@ 0xb0
 8005b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e018      	b.n	8005ba8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	7c1b      	ldrb	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb0 <USBD_CDC_ReceivePacket+0x68>)
 8005b80:	7819      	ldrb	r1, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 ffd3 	bl	8007b38 <USBD_LL_PrepareReceive>
 8005b92:	e008      	b.n	8005ba6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b94:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <USBD_CDC_ReceivePacket+0x68>)
 8005b96:	7819      	ldrb	r1, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b9e:	2340      	movs	r3, #64	@ 0x40
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f001 ffc9 	bl	8007b38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	20000094 	.word	0x20000094

08005bb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e01f      	b.n	8005c0c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	79fa      	ldrb	r2, [r7, #7]
 8005bfe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f001 fe3d 	bl	8007880 <USBD_LL_Init>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e025      	b.n	8005c78 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	32ae      	adds	r2, #174	@ 0xae
 8005c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00f      	beq.n	8005c68 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	32ae      	adds	r2, #174	@ 0xae
 8005c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	f107 020e 	add.w	r2, r7, #14
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	4798      	blx	r3
 8005c60:	4602      	mov	r2, r0
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f001 fe4b 	bl	8007924 <USBD_LL_Start>
 8005c8e:	4603      	mov	r3, r0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ca0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d009      	beq.n	8005cdc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	78fa      	ldrb	r2, [r7, #3]
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4798      	blx	r3
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	4611      	mov	r1, r2
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	4798      	blx	r3
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 f90c 	bl	8006f4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005d40:	461a      	mov	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d01a      	beq.n	8005d8c <USBD_LL_SetupStage+0x72>
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d822      	bhi.n	8005da0 <USBD_LL_SetupStage+0x86>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <USBD_LL_SetupStage+0x4a>
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d00a      	beq.n	8005d78 <USBD_LL_SetupStage+0x5e>
 8005d62:	e01d      	b.n	8005da0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fb63 	bl	8006438 <USBD_StdDevReq>
 8005d72:	4603      	mov	r3, r0
 8005d74:	73fb      	strb	r3, [r7, #15]
      break;
 8005d76:	e020      	b.n	8005dba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fbcb 	bl	800651c <USBD_StdItfReq>
 8005d86:	4603      	mov	r3, r0
 8005d88:	73fb      	strb	r3, [r7, #15]
      break;
 8005d8a:	e016      	b.n	8005dba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fc2d 	bl	80065f4 <USBD_StdEPReq>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d9e:	e00c      	b.n	8005dba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005da6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 fe18 	bl	80079e4 <USBD_LL_StallEP>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73fb      	strb	r3, [r7, #15]
      break;
 8005db8:	bf00      	nop
  }

  return ret;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005dd6:	7afb      	ldrb	r3, [r7, #11]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d16e      	bne.n	8005eba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005de2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	f040 8098 	bne.w	8005f20 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d913      	bls.n	8005e24 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	1ad2      	subs	r2, r2, r3
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	4293      	cmp	r3, r2
 8005e14:	bf28      	it	cs
 8005e16:	4613      	movcs	r3, r2
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f001 f988 	bl	8007132 <USBD_CtlContinueRx>
 8005e22:	e07d      	b.n	8005f20 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d014      	beq.n	8005e5c <USBD_LL_DataOutStage+0x98>
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d81d      	bhi.n	8005e72 <USBD_LL_DataOutStage+0xae>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <USBD_LL_DataOutStage+0x7c>
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d003      	beq.n	8005e46 <USBD_LL_DataOutStage+0x82>
 8005e3e:	e018      	b.n	8005e72 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	75bb      	strb	r3, [r7, #22]
            break;
 8005e44:	e018      	b.n	8005e78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	4619      	mov	r1, r3
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fa64 	bl	800631e <USBD_CoreFindIF>
 8005e56:	4603      	mov	r3, r0
 8005e58:	75bb      	strb	r3, [r7, #22]
            break;
 8005e5a:	e00d      	b.n	8005e78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	4619      	mov	r1, r3
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fa66 	bl	8006338 <USBD_CoreFindEP>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	75bb      	strb	r3, [r7, #22]
            break;
 8005e70:	e002      	b.n	8005e78 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	75bb      	strb	r3, [r7, #22]
            break;
 8005e76:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e78:	7dbb      	ldrb	r3, [r7, #22]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d119      	bne.n	8005eb2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d113      	bne.n	8005eb2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e8a:	7dba      	ldrb	r2, [r7, #22]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	32ae      	adds	r2, #174	@ 0xae
 8005e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e9a:	7dba      	ldrb	r2, [r7, #22]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ea2:	7dba      	ldrb	r2, [r7, #22]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	32ae      	adds	r2, #174	@ 0xae
 8005ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f001 f94e 	bl	8007154 <USBD_CtlSendStatus>
 8005eb8:	e032      	b.n	8005f20 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005eba:	7afb      	ldrb	r3, [r7, #11]
 8005ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 fa37 	bl	8006338 <USBD_CoreFindEP>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ece:	7dbb      	ldrb	r3, [r7, #22]
 8005ed0:	2bff      	cmp	r3, #255	@ 0xff
 8005ed2:	d025      	beq.n	8005f20 <USBD_LL_DataOutStage+0x15c>
 8005ed4:	7dbb      	ldrb	r3, [r7, #22]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d122      	bne.n	8005f20 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d117      	bne.n	8005f16 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ee6:	7dba      	ldrb	r2, [r7, #22]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	32ae      	adds	r2, #174	@ 0xae
 8005eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00f      	beq.n	8005f16 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ef6:	7dba      	ldrb	r2, [r7, #22]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005efe:	7dba      	ldrb	r2, [r7, #22]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	32ae      	adds	r2, #174	@ 0xae
 8005f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	7afa      	ldrb	r2, [r7, #11]
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	4798      	blx	r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	e000      	b.n	8005f22 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b086      	sub	sp, #24
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	460b      	mov	r3, r1
 8005f34:	607a      	str	r2, [r7, #4]
 8005f36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f38:	7afb      	ldrb	r3, [r7, #11]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d16f      	bne.n	800601e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3314      	adds	r3, #20
 8005f42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d15a      	bne.n	8006004 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d914      	bls.n	8005f84 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	1ad2      	subs	r2, r2, r3
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f001 f8b0 	bl	80070d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f76:	2300      	movs	r3, #0
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f001 fddb 	bl	8007b38 <USBD_LL_PrepareReceive>
 8005f82:	e03f      	b.n	8006004 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d11c      	bne.n	8005fca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d316      	bcc.n	8005fca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d20f      	bcs.n	8005fca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005faa:	2200      	movs	r2, #0
 8005fac:	2100      	movs	r1, #0
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f001 f891 	bl	80070d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f001 fdb8 	bl	8007b38 <USBD_LL_PrepareReceive>
 8005fc8:	e01c      	b.n	8006004 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d10f      	bne.n	8005ff6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d009      	beq.n	8005ff6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ff6:	2180      	movs	r1, #128	@ 0x80
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f001 fcf3 	bl	80079e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f001 f8bb 	bl	800717a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d03a      	beq.n	8006084 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f7ff fe42 	bl	8005c98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800601c:	e032      	b.n	8006084 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800601e:	7afb      	ldrb	r3, [r7, #11]
 8006020:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006024:	b2db      	uxtb	r3, r3
 8006026:	4619      	mov	r1, r3
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f985 	bl	8006338 <USBD_CoreFindEP>
 800602e:	4603      	mov	r3, r0
 8006030:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	2bff      	cmp	r3, #255	@ 0xff
 8006036:	d025      	beq.n	8006084 <USBD_LL_DataInStage+0x15a>
 8006038:	7dfb      	ldrb	r3, [r7, #23]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d122      	bne.n	8006084 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b03      	cmp	r3, #3
 8006048:	d11c      	bne.n	8006084 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800604a:	7dfa      	ldrb	r2, [r7, #23]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	32ae      	adds	r2, #174	@ 0xae
 8006050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d014      	beq.n	8006084 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800605a:	7dfa      	ldrb	r2, [r7, #23]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006062:	7dfa      	ldrb	r2, [r7, #23]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	32ae      	adds	r2, #174	@ 0xae
 8006068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	7afa      	ldrb	r2, [r7, #11]
 8006070:	4611      	mov	r1, r2
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	4798      	blx	r3
 8006076:	4603      	mov	r3, r0
 8006078:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800607a:	7dbb      	ldrb	r3, [r7, #22]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006080:	7dbb      	ldrb	r3, [r7, #22]
 8006082:	e000      	b.n	8006086 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b084      	sub	sp, #16
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d014      	beq.n	80060f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00e      	beq.n	80060f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6852      	ldr	r2, [r2, #4]
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	4611      	mov	r1, r2
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80060f0:	2303      	movs	r3, #3
 80060f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060f4:	2340      	movs	r3, #64	@ 0x40
 80060f6:	2200      	movs	r2, #0
 80060f8:	2100      	movs	r1, #0
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 fc2d 	bl	800795a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2240      	movs	r2, #64	@ 0x40
 800610c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006110:	2340      	movs	r3, #64	@ 0x40
 8006112:	2200      	movs	r2, #0
 8006114:	2180      	movs	r1, #128	@ 0x80
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 fc1f 	bl	800795a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2240      	movs	r2, #64	@ 0x40
 8006126:	621a      	str	r2, [r3, #32]

  return ret;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	460b      	mov	r3, r1
 800613c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b04      	cmp	r3, #4
 8006164:	d006      	beq.n	8006174 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800616c:	b2da      	uxtb	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2204      	movs	r2, #4
 8006178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b04      	cmp	r3, #4
 800619c:	d106      	bne.n	80061ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d110      	bne.n	80061f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	32ae      	adds	r2, #174	@ 0xae
 8006210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006218:	2303      	movs	r3, #3
 800621a:	e01c      	b.n	8006256 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b03      	cmp	r3, #3
 8006226:	d115      	bne.n	8006254 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	32ae      	adds	r2, #174	@ 0xae
 8006232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00b      	beq.n	8006254 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	32ae      	adds	r2, #174	@ 0xae
 8006246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	78fa      	ldrb	r2, [r7, #3]
 800624e:	4611      	mov	r1, r2
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	32ae      	adds	r2, #174	@ 0xae
 8006274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800627c:	2303      	movs	r3, #3
 800627e:	e01c      	b.n	80062ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b03      	cmp	r3, #3
 800628a:	d115      	bne.n	80062b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	32ae      	adds	r2, #174	@ 0xae
 8006296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	32ae      	adds	r2, #174	@ 0xae
 80062aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b0:	78fa      	ldrb	r2, [r7, #3]
 80062b2:	4611      	mov	r1, r2
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00e      	beq.n	8006314 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6852      	ldr	r2, [r2, #4]
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	4611      	mov	r1, r2
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006310:	2303      	movs	r3, #3
 8006312:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800632a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006344:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b086      	sub	sp, #24
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	885b      	ldrh	r3, [r3, #2]
 800636e:	b29b      	uxth	r3, r3
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	7812      	ldrb	r2, [r2, #0]
 8006374:	4293      	cmp	r3, r2
 8006376:	d91f      	bls.n	80063b8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800637e:	e013      	b.n	80063a8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006380:	f107 030a 	add.w	r3, r7, #10
 8006384:	4619      	mov	r1, r3
 8006386:	6978      	ldr	r0, [r7, #20]
 8006388:	f000 f81b 	bl	80063c2 <USBD_GetNextDesc>
 800638c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	2b05      	cmp	r3, #5
 8006394:	d108      	bne.n	80063a8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	789b      	ldrb	r3, [r3, #2]
 800639e:	78fa      	ldrb	r2, [r7, #3]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d008      	beq.n	80063b6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	885b      	ldrh	r3, [r3, #2]
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	897b      	ldrh	r3, [r7, #10]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d8e5      	bhi.n	8006380 <USBD_GetEpDesc+0x2e>
 80063b4:	e000      	b.n	80063b8 <USBD_GetEpDesc+0x66>
          break;
 80063b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80063b8:	693b      	ldr	r3, [r7, #16]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	7812      	ldrb	r2, [r2, #0]
 80063d8:	4413      	add	r3, r2
 80063da:	b29a      	uxth	r2, r3
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4413      	add	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80063ec:	68fb      	ldr	r3, [r7, #12]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b087      	sub	sp, #28
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	3301      	adds	r3, #1
 8006410:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006418:	8a3b      	ldrh	r3, [r7, #16]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	b21a      	sxth	r2, r3
 800641e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006422:	4313      	orrs	r3, r2
 8006424:	b21b      	sxth	r3, r3
 8006426:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006428:	89fb      	ldrh	r3, [r7, #14]
}
 800642a:	4618      	mov	r0, r3
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
	...

08006438 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800644e:	2b40      	cmp	r3, #64	@ 0x40
 8006450:	d005      	beq.n	800645e <USBD_StdDevReq+0x26>
 8006452:	2b40      	cmp	r3, #64	@ 0x40
 8006454:	d857      	bhi.n	8006506 <USBD_StdDevReq+0xce>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00f      	beq.n	800647a <USBD_StdDevReq+0x42>
 800645a:	2b20      	cmp	r3, #32
 800645c:	d153      	bne.n	8006506 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	32ae      	adds	r2, #174	@ 0xae
 8006468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	4798      	blx	r3
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]
      break;
 8006478:	e04a      	b.n	8006510 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	2b09      	cmp	r3, #9
 8006480:	d83b      	bhi.n	80064fa <USBD_StdDevReq+0xc2>
 8006482:	a201      	add	r2, pc, #4	@ (adr r2, 8006488 <USBD_StdDevReq+0x50>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	080064dd 	.word	0x080064dd
 800648c:	080064f1 	.word	0x080064f1
 8006490:	080064fb 	.word	0x080064fb
 8006494:	080064e7 	.word	0x080064e7
 8006498:	080064fb 	.word	0x080064fb
 800649c:	080064bb 	.word	0x080064bb
 80064a0:	080064b1 	.word	0x080064b1
 80064a4:	080064fb 	.word	0x080064fb
 80064a8:	080064d3 	.word	0x080064d3
 80064ac:	080064c5 	.word	0x080064c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa3c 	bl	8006930 <USBD_GetDescriptor>
          break;
 80064b8:	e024      	b.n	8006504 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fba1 	bl	8006c04 <USBD_SetAddress>
          break;
 80064c2:	e01f      	b.n	8006504 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fbe0 	bl	8006c8c <USBD_SetConfig>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
          break;
 80064d0:	e018      	b.n	8006504 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fc83 	bl	8006de0 <USBD_GetConfig>
          break;
 80064da:	e013      	b.n	8006504 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fcb4 	bl	8006e4c <USBD_GetStatus>
          break;
 80064e4:	e00e      	b.n	8006504 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fce3 	bl	8006eb4 <USBD_SetFeature>
          break;
 80064ee:	e009      	b.n	8006504 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fd07 	bl	8006f06 <USBD_ClrFeature>
          break;
 80064f8:	e004      	b.n	8006504 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fd5e 	bl	8006fbe <USBD_CtlError>
          break;
 8006502:	bf00      	nop
      }
      break;
 8006504:	e004      	b.n	8006510 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fd58 	bl	8006fbe <USBD_CtlError>
      break;
 800650e:	bf00      	nop
  }

  return ret;
 8006510:	7bfb      	ldrb	r3, [r7, #15]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop

0800651c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006532:	2b40      	cmp	r3, #64	@ 0x40
 8006534:	d005      	beq.n	8006542 <USBD_StdItfReq+0x26>
 8006536:	2b40      	cmp	r3, #64	@ 0x40
 8006538:	d852      	bhi.n	80065e0 <USBD_StdItfReq+0xc4>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <USBD_StdItfReq+0x26>
 800653e:	2b20      	cmp	r3, #32
 8006540:	d14e      	bne.n	80065e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006548:	b2db      	uxtb	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	2b02      	cmp	r3, #2
 800654e:	d840      	bhi.n	80065d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	889b      	ldrh	r3, [r3, #4]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b01      	cmp	r3, #1
 8006558:	d836      	bhi.n	80065c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	889b      	ldrh	r3, [r3, #4]
 800655e:	b2db      	uxtb	r3, r3
 8006560:	4619      	mov	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff fedb 	bl	800631e <USBD_CoreFindIF>
 8006568:	4603      	mov	r3, r0
 800656a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	2bff      	cmp	r3, #255	@ 0xff
 8006570:	d01d      	beq.n	80065ae <USBD_StdItfReq+0x92>
 8006572:	7bbb      	ldrb	r3, [r7, #14]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d11a      	bne.n	80065ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006578:	7bba      	ldrb	r2, [r7, #14]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	32ae      	adds	r2, #174	@ 0xae
 800657e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00f      	beq.n	80065a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006588:	7bba      	ldrb	r2, [r7, #14]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006590:	7bba      	ldrb	r2, [r7, #14]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	32ae      	adds	r2, #174	@ 0xae
 8006596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
 80065a2:	4603      	mov	r3, r0
 80065a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065a6:	e004      	b.n	80065b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80065a8:	2303      	movs	r3, #3
 80065aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065ac:	e001      	b.n	80065b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80065ae:	2303      	movs	r3, #3
 80065b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	88db      	ldrh	r3, [r3, #6]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d110      	bne.n	80065dc <USBD_StdItfReq+0xc0>
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10d      	bne.n	80065dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fdc7 	bl	8007154 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065c6:	e009      	b.n	80065dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fcf7 	bl	8006fbe <USBD_CtlError>
          break;
 80065d0:	e004      	b.n	80065dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fcf2 	bl	8006fbe <USBD_CtlError>
          break;
 80065da:	e000      	b.n	80065de <USBD_StdItfReq+0xc2>
          break;
 80065dc:	bf00      	nop
      }
      break;
 80065de:	e004      	b.n	80065ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fceb 	bl	8006fbe <USBD_CtlError>
      break;
 80065e8:	bf00      	nop
  }

  return ret;
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	889b      	ldrh	r3, [r3, #4]
 8006606:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006610:	2b40      	cmp	r3, #64	@ 0x40
 8006612:	d007      	beq.n	8006624 <USBD_StdEPReq+0x30>
 8006614:	2b40      	cmp	r3, #64	@ 0x40
 8006616:	f200 817f 	bhi.w	8006918 <USBD_StdEPReq+0x324>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d02a      	beq.n	8006674 <USBD_StdEPReq+0x80>
 800661e:	2b20      	cmp	r3, #32
 8006620:	f040 817a 	bne.w	8006918 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff fe85 	bl	8006338 <USBD_CoreFindEP>
 800662e:	4603      	mov	r3, r0
 8006630:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006632:	7b7b      	ldrb	r3, [r7, #13]
 8006634:	2bff      	cmp	r3, #255	@ 0xff
 8006636:	f000 8174 	beq.w	8006922 <USBD_StdEPReq+0x32e>
 800663a:	7b7b      	ldrb	r3, [r7, #13]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f040 8170 	bne.w	8006922 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006642:	7b7a      	ldrb	r2, [r7, #13]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800664a:	7b7a      	ldrb	r2, [r7, #13]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	32ae      	adds	r2, #174	@ 0xae
 8006650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 8163 	beq.w	8006922 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800665c:	7b7a      	ldrb	r2, [r7, #13]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	32ae      	adds	r2, #174	@ 0xae
 8006662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
 800666e:	4603      	mov	r3, r0
 8006670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006672:	e156      	b.n	8006922 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b03      	cmp	r3, #3
 800667a:	d008      	beq.n	800668e <USBD_StdEPReq+0x9a>
 800667c:	2b03      	cmp	r3, #3
 800667e:	f300 8145 	bgt.w	800690c <USBD_StdEPReq+0x318>
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 809b 	beq.w	80067be <USBD_StdEPReq+0x1ca>
 8006688:	2b01      	cmp	r3, #1
 800668a:	d03c      	beq.n	8006706 <USBD_StdEPReq+0x112>
 800668c:	e13e      	b.n	800690c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d002      	beq.n	80066a0 <USBD_StdEPReq+0xac>
 800669a:	2b03      	cmp	r3, #3
 800669c:	d016      	beq.n	80066cc <USBD_StdEPReq+0xd8>
 800669e:	e02c      	b.n	80066fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00d      	beq.n	80066c2 <USBD_StdEPReq+0xce>
 80066a6:	7bbb      	ldrb	r3, [r7, #14]
 80066a8:	2b80      	cmp	r3, #128	@ 0x80
 80066aa:	d00a      	beq.n	80066c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 f997 	bl	80079e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066b6:	2180      	movs	r1, #128	@ 0x80
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f001 f993 	bl	80079e4 <USBD_LL_StallEP>
 80066be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066c0:	e020      	b.n	8006704 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fc7a 	bl	8006fbe <USBD_CtlError>
              break;
 80066ca:	e01b      	b.n	8006704 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	885b      	ldrh	r3, [r3, #2]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10e      	bne.n	80066f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00b      	beq.n	80066f2 <USBD_StdEPReq+0xfe>
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	2b80      	cmp	r3, #128	@ 0x80
 80066de:	d008      	beq.n	80066f2 <USBD_StdEPReq+0xfe>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	88db      	ldrh	r3, [r3, #6]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d104      	bne.n	80066f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80066e8:	7bbb      	ldrb	r3, [r7, #14]
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 f979 	bl	80079e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fd2e 	bl	8007154 <USBD_CtlSendStatus>

              break;
 80066f8:	e004      	b.n	8006704 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fc5e 	bl	8006fbe <USBD_CtlError>
              break;
 8006702:	bf00      	nop
          }
          break;
 8006704:	e107      	b.n	8006916 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d002      	beq.n	8006718 <USBD_StdEPReq+0x124>
 8006712:	2b03      	cmp	r3, #3
 8006714:	d016      	beq.n	8006744 <USBD_StdEPReq+0x150>
 8006716:	e04b      	b.n	80067b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00d      	beq.n	800673a <USBD_StdEPReq+0x146>
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	2b80      	cmp	r3, #128	@ 0x80
 8006722:	d00a      	beq.n	800673a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 f95b 	bl	80079e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800672e:	2180      	movs	r1, #128	@ 0x80
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 f957 	bl	80079e4 <USBD_LL_StallEP>
 8006736:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006738:	e040      	b.n	80067bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fc3e 	bl	8006fbe <USBD_CtlError>
              break;
 8006742:	e03b      	b.n	80067bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	885b      	ldrh	r3, [r3, #2]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d136      	bne.n	80067ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006756:	7bbb      	ldrb	r3, [r7, #14]
 8006758:	4619      	mov	r1, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f001 f961 	bl	8007a22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fcf7 	bl	8007154 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006766:	7bbb      	ldrb	r3, [r7, #14]
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff fde4 	bl	8006338 <USBD_CoreFindEP>
 8006770:	4603      	mov	r3, r0
 8006772:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006774:	7b7b      	ldrb	r3, [r7, #13]
 8006776:	2bff      	cmp	r3, #255	@ 0xff
 8006778:	d01f      	beq.n	80067ba <USBD_StdEPReq+0x1c6>
 800677a:	7b7b      	ldrb	r3, [r7, #13]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d11c      	bne.n	80067ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006780:	7b7a      	ldrb	r2, [r7, #13]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006788:	7b7a      	ldrb	r2, [r7, #13]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	32ae      	adds	r2, #174	@ 0xae
 800678e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d010      	beq.n	80067ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006798:	7b7a      	ldrb	r2, [r7, #13]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	32ae      	adds	r2, #174	@ 0xae
 800679e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
 80067aa:	4603      	mov	r3, r0
 80067ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80067ae:	e004      	b.n	80067ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fc03 	bl	8006fbe <USBD_CtlError>
              break;
 80067b8:	e000      	b.n	80067bc <USBD_StdEPReq+0x1c8>
              break;
 80067ba:	bf00      	nop
          }
          break;
 80067bc:	e0ab      	b.n	8006916 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d002      	beq.n	80067d0 <USBD_StdEPReq+0x1dc>
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d032      	beq.n	8006834 <USBD_StdEPReq+0x240>
 80067ce:	e097      	b.n	8006900 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <USBD_StdEPReq+0x1f2>
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	2b80      	cmp	r3, #128	@ 0x80
 80067da:	d004      	beq.n	80067e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fbed 	bl	8006fbe <USBD_CtlError>
                break;
 80067e4:	e091      	b.n	800690a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da0b      	bge.n	8006806 <USBD_StdEPReq+0x212>
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	3310      	adds	r3, #16
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	4413      	add	r3, r2
 8006802:	3304      	adds	r3, #4
 8006804:	e00b      	b.n	800681e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006806:	7bbb      	ldrb	r3, [r7, #14]
 8006808:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	4413      	add	r3, r2
 800681c:	3304      	adds	r3, #4
 800681e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2202      	movs	r2, #2
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fc37 	bl	80070a0 <USBD_CtlSendData>
              break;
 8006832:	e06a      	b.n	800690a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006838:	2b00      	cmp	r3, #0
 800683a:	da11      	bge.n	8006860 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	f003 020f 	and.w	r2, r3, #15
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	3324      	adds	r3, #36	@ 0x24
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d117      	bne.n	8006886 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fbb0 	bl	8006fbe <USBD_CtlError>
                  break;
 800685e:	e054      	b.n	800690a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	f003 020f 	and.w	r2, r3, #15
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fb9d 	bl	8006fbe <USBD_CtlError>
                  break;
 8006884:	e041      	b.n	800690a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800688a:	2b00      	cmp	r3, #0
 800688c:	da0b      	bge.n	80068a6 <USBD_StdEPReq+0x2b2>
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	3310      	adds	r3, #16
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	4413      	add	r3, r2
 80068a2:	3304      	adds	r3, #4
 80068a4:	e00b      	b.n	80068be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	4413      	add	r3, r2
 80068bc:	3304      	adds	r3, #4
 80068be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <USBD_StdEPReq+0x2d8>
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	2b80      	cmp	r3, #128	@ 0x80
 80068ca:	d103      	bne.n	80068d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e00e      	b.n	80068f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 f8c1 	bl	8007a60 <USBD_LL_IsStallEP>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2201      	movs	r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e002      	b.n	80068f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2202      	movs	r2, #2
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fbd1 	bl	80070a0 <USBD_CtlSendData>
              break;
 80068fe:	e004      	b.n	800690a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fb5b 	bl	8006fbe <USBD_CtlError>
              break;
 8006908:	bf00      	nop
          }
          break;
 800690a:	e004      	b.n	8006916 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb55 	bl	8006fbe <USBD_CtlError>
          break;
 8006914:	bf00      	nop
      }
      break;
 8006916:	e005      	b.n	8006924 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fb4f 	bl	8006fbe <USBD_CtlError>
      break;
 8006920:	e000      	b.n	8006924 <USBD_StdEPReq+0x330>
      break;
 8006922:	bf00      	nop
  }

  return ret;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	885b      	ldrh	r3, [r3, #2]
 800694a:	0a1b      	lsrs	r3, r3, #8
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	2b06      	cmp	r3, #6
 8006952:	f200 8128 	bhi.w	8006ba6 <USBD_GetDescriptor+0x276>
 8006956:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <USBD_GetDescriptor+0x2c>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	08006979 	.word	0x08006979
 8006960:	08006991 	.word	0x08006991
 8006964:	080069d1 	.word	0x080069d1
 8006968:	08006ba7 	.word	0x08006ba7
 800696c:	08006ba7 	.word	0x08006ba7
 8006970:	08006b47 	.word	0x08006b47
 8006974:	08006b73 	.word	0x08006b73
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	7c12      	ldrb	r2, [r2, #16]
 8006984:	f107 0108 	add.w	r1, r7, #8
 8006988:	4610      	mov	r0, r2
 800698a:	4798      	blx	r3
 800698c:	60f8      	str	r0, [r7, #12]
      break;
 800698e:	e112      	b.n	8006bb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	7c1b      	ldrb	r3, [r3, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10d      	bne.n	80069b4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800699e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a0:	f107 0208 	add.w	r2, r7, #8
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3301      	adds	r3, #1
 80069ae:	2202      	movs	r2, #2
 80069b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80069b2:	e100      	b.n	8006bb6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069bc:	f107 0208 	add.w	r2, r7, #8
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3301      	adds	r3, #1
 80069ca:	2202      	movs	r2, #2
 80069cc:	701a      	strb	r2, [r3, #0]
      break;
 80069ce:	e0f2      	b.n	8006bb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	885b      	ldrh	r3, [r3, #2]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b05      	cmp	r3, #5
 80069d8:	f200 80ac 	bhi.w	8006b34 <USBD_GetDescriptor+0x204>
 80069dc:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <USBD_GetDescriptor+0xb4>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	080069fd 	.word	0x080069fd
 80069e8:	08006a31 	.word	0x08006a31
 80069ec:	08006a65 	.word	0x08006a65
 80069f0:	08006a99 	.word	0x08006a99
 80069f4:	08006acd 	.word	0x08006acd
 80069f8:	08006b01 	.word	0x08006b01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	7c12      	ldrb	r2, [r2, #16]
 8006a14:	f107 0108 	add.w	r1, r7, #8
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4798      	blx	r3
 8006a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a1e:	e091      	b.n	8006b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 facb 	bl	8006fbe <USBD_CtlError>
            err++;
 8006a28:	7afb      	ldrb	r3, [r7, #11]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a2e:	e089      	b.n	8006b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00b      	beq.n	8006a54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	7c12      	ldrb	r2, [r2, #16]
 8006a48:	f107 0108 	add.w	r1, r7, #8
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4798      	blx	r3
 8006a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a52:	e077      	b.n	8006b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fab1 	bl	8006fbe <USBD_CtlError>
            err++;
 8006a5c:	7afb      	ldrb	r3, [r7, #11]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	72fb      	strb	r3, [r7, #11]
          break;
 8006a62:	e06f      	b.n	8006b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	7c12      	ldrb	r2, [r2, #16]
 8006a7c:	f107 0108 	add.w	r1, r7, #8
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
 8006a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a86:	e05d      	b.n	8006b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa97 	bl	8006fbe <USBD_CtlError>
            err++;
 8006a90:	7afb      	ldrb	r3, [r7, #11]
 8006a92:	3301      	adds	r3, #1
 8006a94:	72fb      	strb	r3, [r7, #11]
          break;
 8006a96:	e055      	b.n	8006b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00b      	beq.n	8006abc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	7c12      	ldrb	r2, [r2, #16]
 8006ab0:	f107 0108 	add.w	r1, r7, #8
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4798      	blx	r3
 8006ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aba:	e043      	b.n	8006b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa7d 	bl	8006fbe <USBD_CtlError>
            err++;
 8006ac4:	7afb      	ldrb	r3, [r7, #11]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8006aca:	e03b      	b.n	8006b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	7c12      	ldrb	r2, [r2, #16]
 8006ae4:	f107 0108 	add.w	r1, r7, #8
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4798      	blx	r3
 8006aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aee:	e029      	b.n	8006b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fa63 	bl	8006fbe <USBD_CtlError>
            err++;
 8006af8:	7afb      	ldrb	r3, [r7, #11]
 8006afa:	3301      	adds	r3, #1
 8006afc:	72fb      	strb	r3, [r7, #11]
          break;
 8006afe:	e021      	b.n	8006b44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00b      	beq.n	8006b24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	7c12      	ldrb	r2, [r2, #16]
 8006b18:	f107 0108 	add.w	r1, r7, #8
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	4798      	blx	r3
 8006b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b22:	e00f      	b.n	8006b44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fa49 	bl	8006fbe <USBD_CtlError>
            err++;
 8006b2c:	7afb      	ldrb	r3, [r7, #11]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	72fb      	strb	r3, [r7, #11]
          break;
 8006b32:	e007      	b.n	8006b44 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa41 	bl	8006fbe <USBD_CtlError>
          err++;
 8006b3c:	7afb      	ldrb	r3, [r7, #11]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b42:	bf00      	nop
      }
      break;
 8006b44:	e037      	b.n	8006bb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	7c1b      	ldrb	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b56:	f107 0208 	add.w	r2, r7, #8
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	4798      	blx	r3
 8006b5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b60:	e029      	b.n	8006bb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa2a 	bl	8006fbe <USBD_CtlError>
        err++;
 8006b6a:	7afb      	ldrb	r3, [r7, #11]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b70:	e021      	b.n	8006bb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	7c1b      	ldrb	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10d      	bne.n	8006b96 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b82:	f107 0208 	add.w	r2, r7, #8
 8006b86:	4610      	mov	r0, r2
 8006b88:	4798      	blx	r3
 8006b8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	2207      	movs	r2, #7
 8006b92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b94:	e00f      	b.n	8006bb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fa10 	bl	8006fbe <USBD_CtlError>
        err++;
 8006b9e:	7afb      	ldrb	r3, [r7, #11]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ba4:	e007      	b.n	8006bb6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fa08 	bl	8006fbe <USBD_CtlError>
      err++;
 8006bae:	7afb      	ldrb	r3, [r7, #11]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	72fb      	strb	r3, [r7, #11]
      break;
 8006bb4:	bf00      	nop
  }

  if (err != 0U)
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d11e      	bne.n	8006bfa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	88db      	ldrh	r3, [r3, #6]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d016      	beq.n	8006bf2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006bc4:	893b      	ldrh	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00e      	beq.n	8006be8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	88da      	ldrh	r2, [r3, #6]
 8006bce:	893b      	ldrh	r3, [r7, #8]
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	bf28      	it	cs
 8006bd4:	4613      	movcs	r3, r2
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006bda:	893b      	ldrh	r3, [r7, #8]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	68f9      	ldr	r1, [r7, #12]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fa5d 	bl	80070a0 <USBD_CtlSendData>
 8006be6:	e009      	b.n	8006bfc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f9e7 	bl	8006fbe <USBD_CtlError>
 8006bf0:	e004      	b.n	8006bfc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 faae 	bl	8007154 <USBD_CtlSendStatus>
 8006bf8:	e000      	b.n	8006bfc <USBD_GetDescriptor+0x2cc>
    return;
 8006bfa:	bf00      	nop
  }
}
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop

08006c04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	889b      	ldrh	r3, [r3, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d131      	bne.n	8006c7a <USBD_SetAddress+0x76>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	88db      	ldrh	r3, [r3, #6]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d12d      	bne.n	8006c7a <USBD_SetAddress+0x76>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	885b      	ldrh	r3, [r3, #2]
 8006c22:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c24:	d829      	bhi.n	8006c7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	885b      	ldrh	r3, [r3, #2]
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d104      	bne.n	8006c48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f9bc 	bl	8006fbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c46:	e01d      	b.n	8006c84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	7bfa      	ldrb	r2, [r7, #15]
 8006c4c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 ff2f 	bl	8007ab8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fa7a 	bl	8007154 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d004      	beq.n	8006c70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6e:	e009      	b.n	8006c84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c78:	e004      	b.n	8006c84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f99e 	bl	8006fbe <USBD_CtlError>
  }
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	885b      	ldrh	r3, [r3, #2]
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	4b4e      	ldr	r3, [pc, #312]	@ (8006ddc <USBD_SetConfig+0x150>)
 8006ca2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8006ddc <USBD_SetConfig+0x150>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d905      	bls.n	8006cb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f985 	bl	8006fbe <USBD_CtlError>
    return USBD_FAIL;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e08c      	b.n	8006dd2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d002      	beq.n	8006cca <USBD_SetConfig+0x3e>
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d029      	beq.n	8006d1c <USBD_SetConfig+0x90>
 8006cc8:	e075      	b.n	8006db6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006cca:	4b44      	ldr	r3, [pc, #272]	@ (8006ddc <USBD_SetConfig+0x150>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d020      	beq.n	8006d14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006cd2:	4b42      	ldr	r3, [pc, #264]	@ (8006ddc <USBD_SetConfig+0x150>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cdc:	4b3f      	ldr	r3, [pc, #252]	@ (8006ddc <USBD_SetConfig+0x150>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7fe ffe3 	bl	8005cae <USBD_SetClassConfig>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d008      	beq.n	8006d04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f962 	bl	8006fbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d02:	e065      	b.n	8006dd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fa25 	bl	8007154 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d12:	e05d      	b.n	8006dd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fa1d 	bl	8007154 <USBD_CtlSendStatus>
      break;
 8006d1a:	e059      	b.n	8006dd0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8006ddc <USBD_SetConfig+0x150>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d112      	bne.n	8006d4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ddc <USBD_SetConfig+0x150>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d36:	4b29      	ldr	r3, [pc, #164]	@ (8006ddc <USBD_SetConfig+0x150>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7fe ffd2 	bl	8005ce6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa06 	bl	8007154 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d48:	e042      	b.n	8006dd0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d4a:	4b24      	ldr	r3, [pc, #144]	@ (8006ddc <USBD_SetConfig+0x150>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d02a      	beq.n	8006dae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7fe ffc0 	bl	8005ce6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d66:	4b1d      	ldr	r3, [pc, #116]	@ (8006ddc <USBD_SetConfig+0x150>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d70:	4b1a      	ldr	r3, [pc, #104]	@ (8006ddc <USBD_SetConfig+0x150>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fe ff99 	bl	8005cae <USBD_SetClassConfig>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00f      	beq.n	8006da6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f918 	bl	8006fbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fe ffa5 	bl	8005ce6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006da4:	e014      	b.n	8006dd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f9d4 	bl	8007154 <USBD_CtlSendStatus>
      break;
 8006dac:	e010      	b.n	8006dd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f9d0 	bl	8007154 <USBD_CtlSendStatus>
      break;
 8006db4:	e00c      	b.n	8006dd0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f900 	bl	8006fbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dbe:	4b07      	ldr	r3, [pc, #28]	@ (8006ddc <USBD_SetConfig+0x150>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7fe ff8e 	bl	8005ce6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8006dce:	bf00      	nop
  }

  return ret;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000164 	.word	0x20000164

08006de0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	88db      	ldrh	r3, [r3, #6]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d004      	beq.n	8006dfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f8e2 	bl	8006fbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006dfa:	e023      	b.n	8006e44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	dc02      	bgt.n	8006e0e <USBD_GetConfig+0x2e>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dc03      	bgt.n	8006e14 <USBD_GetConfig+0x34>
 8006e0c:	e015      	b.n	8006e3a <USBD_GetConfig+0x5a>
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d00b      	beq.n	8006e2a <USBD_GetConfig+0x4a>
 8006e12:	e012      	b.n	8006e3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f93c 	bl	80070a0 <USBD_CtlSendData>
        break;
 8006e28:	e00c      	b.n	8006e44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	2201      	movs	r2, #1
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f934 	bl	80070a0 <USBD_CtlSendData>
        break;
 8006e38:	e004      	b.n	8006e44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f8be 	bl	8006fbe <USBD_CtlError>
        break;
 8006e42:	bf00      	nop
}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d81e      	bhi.n	8006ea2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	88db      	ldrh	r3, [r3, #6]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d004      	beq.n	8006e76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f8a5 	bl	8006fbe <USBD_CtlError>
        break;
 8006e74:	e01a      	b.n	8006eac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f043 0202 	orr.w	r2, r3, #2
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	330c      	adds	r3, #12
 8006e96:	2202      	movs	r2, #2
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f900 	bl	80070a0 <USBD_CtlSendData>
      break;
 8006ea0:	e004      	b.n	8006eac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f88a 	bl	8006fbe <USBD_CtlError>
      break;
 8006eaa:	bf00      	nop
  }
}
 8006eac:	bf00      	nop
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	885b      	ldrh	r3, [r3, #2]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d107      	bne.n	8006ed6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f940 	bl	8007154 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ed4:	e013      	b.n	8006efe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	885b      	ldrh	r3, [r3, #2]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d10b      	bne.n	8006ef6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	889b      	ldrh	r3, [r3, #4]
 8006ee2:	0a1b      	lsrs	r3, r3, #8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f930 	bl	8007154 <USBD_CtlSendStatus>
}
 8006ef4:	e003      	b.n	8006efe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f860 	bl	8006fbe <USBD_CtlError>
}
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d80b      	bhi.n	8006f36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	885b      	ldrh	r3, [r3, #2]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d10c      	bne.n	8006f40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f910 	bl	8007154 <USBD_CtlSendStatus>
      }
      break;
 8006f34:	e004      	b.n	8006f40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f840 	bl	8006fbe <USBD_CtlError>
      break;
 8006f3e:	e000      	b.n	8006f42 <USBD_ClrFeature+0x3c>
      break;
 8006f40:	bf00      	nop
  }
}
 8006f42:	bf00      	nop
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3301      	adds	r3, #1
 8006f64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	781a      	ldrb	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3301      	adds	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff fa40 	bl	80063fa <SWAPBYTE>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f7ff fa33 	bl	80063fa <SWAPBYTE>
 8006f94:	4603      	mov	r3, r0
 8006f96:	461a      	mov	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f7ff fa26 	bl	80063fa <SWAPBYTE>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	80da      	strh	r2, [r3, #6]
}
 8006fb6:	bf00      	nop
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fc8:	2180      	movs	r1, #128	@ 0x80
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fd0a 	bl	80079e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fd06 	bl	80079e4 <USBD_LL_StallEP>
}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d036      	beq.n	8007064 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ffa:	6938      	ldr	r0, [r7, #16]
 8006ffc:	f000 f836 	bl	800706c <USBD_GetLen>
 8007000:	4603      	mov	r3, r0
 8007002:	3301      	adds	r3, #1
 8007004:	b29b      	uxth	r3, r3
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	b29a      	uxth	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	4413      	add	r3, r2
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	701a      	strb	r2, [r3, #0]
  idx++;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	3301      	adds	r3, #1
 800701e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007020:	7dfb      	ldrb	r3, [r7, #23]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	4413      	add	r3, r2
 8007026:	2203      	movs	r2, #3
 8007028:	701a      	strb	r2, [r3, #0]
  idx++;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
 800702c:	3301      	adds	r3, #1
 800702e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007030:	e013      	b.n	800705a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	4413      	add	r3, r2
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	7812      	ldrb	r2, [r2, #0]
 800703c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	3301      	adds	r3, #1
 8007042:	613b      	str	r3, [r7, #16]
    idx++;
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	3301      	adds	r3, #1
 8007048:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	4413      	add	r3, r2
 8007050:	2200      	movs	r2, #0
 8007052:	701a      	strb	r2, [r3, #0]
    idx++;
 8007054:	7dfb      	ldrb	r3, [r7, #23]
 8007056:	3301      	adds	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e7      	bne.n	8007032 <USBD_GetString+0x52>
 8007062:	e000      	b.n	8007066 <USBD_GetString+0x86>
    return;
 8007064:	bf00      	nop
  }
}
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800707c:	e005      	b.n	800708a <USBD_GetLen+0x1e>
  {
    len++;
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	3301      	adds	r3, #1
 8007082:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	3301      	adds	r3, #1
 8007088:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f5      	bne.n	800707e <USBD_GetLen+0x12>
  }

  return len;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	2100      	movs	r1, #0
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 fd15 	bl	8007af6 <USBD_LL_Transmit>

  return USBD_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	2100      	movs	r1, #0
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 fd04 	bl	8007af6 <USBD_LL_Transmit>

  return USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2203      	movs	r2, #3
 8007108:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	2100      	movs	r1, #0
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 fd08 	bl	8007b38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	2100      	movs	r1, #0
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 fcf7 	bl	8007b38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2204      	movs	r2, #4
 8007160:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007164:	2300      	movs	r3, #0
 8007166:	2200      	movs	r2, #0
 8007168:	2100      	movs	r1, #0
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fcc3 	bl	8007af6 <USBD_LL_Transmit>

  return USBD_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2205      	movs	r2, #5
 8007186:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800718a:	2300      	movs	r3, #0
 800718c:	2200      	movs	r2, #0
 800718e:	2100      	movs	r1, #0
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fcd1 	bl	8007b38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80071a4:	2201      	movs	r2, #1
 80071a6:	4912      	ldr	r1, [pc, #72]	@ (80071f0 <MX_USB_DEVICE_Init+0x50>)
 80071a8:	4812      	ldr	r0, [pc, #72]	@ (80071f4 <MX_USB_DEVICE_Init+0x54>)
 80071aa:	f7fe fd03 	bl	8005bb4 <USBD_Init>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80071b4:	f7f9 fa3e 	bl	8000634 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80071b8:	490f      	ldr	r1, [pc, #60]	@ (80071f8 <MX_USB_DEVICE_Init+0x58>)
 80071ba:	480e      	ldr	r0, [pc, #56]	@ (80071f4 <MX_USB_DEVICE_Init+0x54>)
 80071bc:	f7fe fd2a 	bl	8005c14 <USBD_RegisterClass>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80071c6:	f7f9 fa35 	bl	8000634 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80071ca:	490c      	ldr	r1, [pc, #48]	@ (80071fc <MX_USB_DEVICE_Init+0x5c>)
 80071cc:	4809      	ldr	r0, [pc, #36]	@ (80071f4 <MX_USB_DEVICE_Init+0x54>)
 80071ce:	f7fe fc61 	bl	8005a94 <USBD_CDC_RegisterInterface>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80071d8:	f7f9 fa2c 	bl	8000634 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80071dc:	4805      	ldr	r0, [pc, #20]	@ (80071f4 <MX_USB_DEVICE_Init+0x54>)
 80071de:	f7fe fd4f 	bl	8005c80 <USBD_Start>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80071e8:	f7f9 fa24 	bl	8000634 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071ec:	bf00      	nop
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	200000ac 	.word	0x200000ac
 80071f4:	20000168 	.word	0x20000168
 80071f8:	20000018 	.word	0x20000018
 80071fc:	20000098 	.word	0x20000098

08007200 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8007204:	2200      	movs	r2, #0
 8007206:	4905      	ldr	r1, [pc, #20]	@ (800721c <CDC_Init_HS+0x1c>)
 8007208:	4805      	ldr	r0, [pc, #20]	@ (8007220 <CDC_Init_HS+0x20>)
 800720a:	f7fe fc5d 	bl	8005ac8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800720e:	4905      	ldr	r1, [pc, #20]	@ (8007224 <CDC_Init_HS+0x24>)
 8007210:	4803      	ldr	r0, [pc, #12]	@ (8007220 <CDC_Init_HS+0x20>)
 8007212:	f7fe fc7b 	bl	8005b0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007216:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007218:	4618      	mov	r0, r3
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000c44 	.word	0x20000c44
 8007220:	20000168 	.word	0x20000168
 8007224:	20000444 	.word	0x20000444

08007228 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800722c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800722e:	4618      	mov	r0, r3
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	71fb      	strb	r3, [r7, #7]
 8007244:	4613      	mov	r3, r2
 8007246:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	2b23      	cmp	r3, #35	@ 0x23
 800724c:	d84a      	bhi.n	80072e4 <CDC_Control_HS+0xac>
 800724e:	a201      	add	r2, pc, #4	@ (adr r2, 8007254 <CDC_Control_HS+0x1c>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	080072e5 	.word	0x080072e5
 8007258:	080072e5 	.word	0x080072e5
 800725c:	080072e5 	.word	0x080072e5
 8007260:	080072e5 	.word	0x080072e5
 8007264:	080072e5 	.word	0x080072e5
 8007268:	080072e5 	.word	0x080072e5
 800726c:	080072e5 	.word	0x080072e5
 8007270:	080072e5 	.word	0x080072e5
 8007274:	080072e5 	.word	0x080072e5
 8007278:	080072e5 	.word	0x080072e5
 800727c:	080072e5 	.word	0x080072e5
 8007280:	080072e5 	.word	0x080072e5
 8007284:	080072e5 	.word	0x080072e5
 8007288:	080072e5 	.word	0x080072e5
 800728c:	080072e5 	.word	0x080072e5
 8007290:	080072e5 	.word	0x080072e5
 8007294:	080072e5 	.word	0x080072e5
 8007298:	080072e5 	.word	0x080072e5
 800729c:	080072e5 	.word	0x080072e5
 80072a0:	080072e5 	.word	0x080072e5
 80072a4:	080072e5 	.word	0x080072e5
 80072a8:	080072e5 	.word	0x080072e5
 80072ac:	080072e5 	.word	0x080072e5
 80072b0:	080072e5 	.word	0x080072e5
 80072b4:	080072e5 	.word	0x080072e5
 80072b8:	080072e5 	.word	0x080072e5
 80072bc:	080072e5 	.word	0x080072e5
 80072c0:	080072e5 	.word	0x080072e5
 80072c4:	080072e5 	.word	0x080072e5
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	080072e5 	.word	0x080072e5
 80072d0:	080072e5 	.word	0x080072e5
 80072d4:	080072e5 	.word	0x080072e5
 80072d8:	080072e5 	.word	0x080072e5
 80072dc:	080072e5 	.word	0x080072e5
 80072e0:	080072e5 	.word	0x080072e5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80072e4:	bf00      	nop
  }

  return (USBD_OK);
 80072e6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4805      	ldr	r0, [pc, #20]	@ (8007318 <CDC_Receive_HS+0x24>)
 8007302:	f7fe fc03 	bl	8005b0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8007306:	4804      	ldr	r0, [pc, #16]	@ (8007318 <CDC_Receive_HS+0x24>)
 8007308:	f7fe fc1e 	bl	8005b48 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800730c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000168 	.word	0x20000168

0800731c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	4613      	mov	r3, r2
 8007328:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800732e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007332:	4618      	mov	r0, r3
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	6039      	str	r1, [r7, #0]
 800734a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2212      	movs	r2, #18
 8007350:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8007352:	4b03      	ldr	r3, [pc, #12]	@ (8007360 <USBD_HS_DeviceDescriptor+0x20>)
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	200000c8 	.word	0x200000c8

08007364 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	6039      	str	r1, [r7, #0]
 800736e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2204      	movs	r2, #4
 8007374:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007376:	4b03      	ldr	r3, [pc, #12]	@ (8007384 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	200000dc 	.word	0x200000dc

08007388 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	6039      	str	r1, [r7, #0]
 8007392:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d105      	bne.n	80073a6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	4907      	ldr	r1, [pc, #28]	@ (80073bc <USBD_HS_ProductStrDescriptor+0x34>)
 800739e:	4808      	ldr	r0, [pc, #32]	@ (80073c0 <USBD_HS_ProductStrDescriptor+0x38>)
 80073a0:	f7ff fe1e 	bl	8006fe0 <USBD_GetString>
 80073a4:	e004      	b.n	80073b0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4904      	ldr	r1, [pc, #16]	@ (80073bc <USBD_HS_ProductStrDescriptor+0x34>)
 80073aa:	4805      	ldr	r0, [pc, #20]	@ (80073c0 <USBD_HS_ProductStrDescriptor+0x38>)
 80073ac:	f7ff fe18 	bl	8006fe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073b0:	4b02      	ldr	r3, [pc, #8]	@ (80073bc <USBD_HS_ProductStrDescriptor+0x34>)
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20001444 	.word	0x20001444
 80073c0:	08007c98 	.word	0x08007c98

080073c4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	6039      	str	r1, [r7, #0]
 80073ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	4904      	ldr	r1, [pc, #16]	@ (80073e4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80073d4:	4804      	ldr	r0, [pc, #16]	@ (80073e8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80073d6:	f7ff fe03 	bl	8006fe0 <USBD_GetString>
  return USBD_StrDesc;
 80073da:	4b02      	ldr	r3, [pc, #8]	@ (80073e4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	20001444 	.word	0x20001444
 80073e8:	08007cb0 	.word	0x08007cb0

080073ec <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	4603      	mov	r3, r0
 80073f4:	6039      	str	r1, [r7, #0]
 80073f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	221a      	movs	r2, #26
 80073fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80073fe:	f000 f843 	bl	8007488 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007402:	4b02      	ldr	r3, [pc, #8]	@ (800740c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	200000e0 	.word	0x200000e0

08007410 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	6039      	str	r1, [r7, #0]
 800741a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800741c:	79fb      	ldrb	r3, [r7, #7]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d105      	bne.n	800742e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	4907      	ldr	r1, [pc, #28]	@ (8007444 <USBD_HS_ConfigStrDescriptor+0x34>)
 8007426:	4808      	ldr	r0, [pc, #32]	@ (8007448 <USBD_HS_ConfigStrDescriptor+0x38>)
 8007428:	f7ff fdda 	bl	8006fe0 <USBD_GetString>
 800742c:	e004      	b.n	8007438 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	4904      	ldr	r1, [pc, #16]	@ (8007444 <USBD_HS_ConfigStrDescriptor+0x34>)
 8007432:	4805      	ldr	r0, [pc, #20]	@ (8007448 <USBD_HS_ConfigStrDescriptor+0x38>)
 8007434:	f7ff fdd4 	bl	8006fe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007438:	4b02      	ldr	r3, [pc, #8]	@ (8007444 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	20001444 	.word	0x20001444
 8007448:	08007cc4 	.word	0x08007cc4

0800744c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d105      	bne.n	800746a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	4907      	ldr	r1, [pc, #28]	@ (8007480 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007462:	4808      	ldr	r0, [pc, #32]	@ (8007484 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007464:	f7ff fdbc 	bl	8006fe0 <USBD_GetString>
 8007468:	e004      	b.n	8007474 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	4904      	ldr	r1, [pc, #16]	@ (8007480 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800746e:	4805      	ldr	r0, [pc, #20]	@ (8007484 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007470:	f7ff fdb6 	bl	8006fe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007474:	4b02      	ldr	r3, [pc, #8]	@ (8007480 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20001444 	.word	0x20001444
 8007484:	08007cd0 	.word	0x08007cd0

08007488 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800748e:	4b0f      	ldr	r3, [pc, #60]	@ (80074cc <Get_SerialNum+0x44>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007494:	4b0e      	ldr	r3, [pc, #56]	@ (80074d0 <Get_SerialNum+0x48>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800749a:	4b0e      	ldr	r3, [pc, #56]	@ (80074d4 <Get_SerialNum+0x4c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4413      	add	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074ae:	2208      	movs	r2, #8
 80074b0:	4909      	ldr	r1, [pc, #36]	@ (80074d8 <Get_SerialNum+0x50>)
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f814 	bl	80074e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074b8:	2204      	movs	r2, #4
 80074ba:	4908      	ldr	r1, [pc, #32]	@ (80074dc <Get_SerialNum+0x54>)
 80074bc:	68b8      	ldr	r0, [r7, #8]
 80074be:	f000 f80f 	bl	80074e0 <IntToUnicode>
  }
}
 80074c2:	bf00      	nop
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	1fff7a10 	.word	0x1fff7a10
 80074d0:	1fff7a14 	.word	0x1fff7a14
 80074d4:	1fff7a18 	.word	0x1fff7a18
 80074d8:	200000e2 	.word	0x200000e2
 80074dc:	200000f2 	.word	0x200000f2

080074e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b087      	sub	sp, #28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074f2:	2300      	movs	r3, #0
 80074f4:	75fb      	strb	r3, [r7, #23]
 80074f6:	e027      	b.n	8007548 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	0f1b      	lsrs	r3, r3, #28
 80074fc:	2b09      	cmp	r3, #9
 80074fe:	d80b      	bhi.n	8007518 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	0f1b      	lsrs	r3, r3, #28
 8007504:	b2da      	uxtb	r2, r3
 8007506:	7dfb      	ldrb	r3, [r7, #23]
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	4619      	mov	r1, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	440b      	add	r3, r1
 8007510:	3230      	adds	r2, #48	@ 0x30
 8007512:	b2d2      	uxtb	r2, r2
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	e00a      	b.n	800752e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	0f1b      	lsrs	r3, r3, #28
 800751c:	b2da      	uxtb	r2, r3
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	4619      	mov	r1, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	440b      	add	r3, r1
 8007528:	3237      	adds	r2, #55	@ 0x37
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	3301      	adds	r3, #1
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	4413      	add	r3, r2
 800753e:	2200      	movs	r2, #0
 8007540:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	3301      	adds	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
 8007548:	7dfa      	ldrb	r2, [r7, #23]
 800754a:	79fb      	ldrb	r3, [r7, #7]
 800754c:	429a      	cmp	r2, r3
 800754e:	d3d3      	bcc.n	80074f8 <IntToUnicode+0x18>
  }
}
 8007550:	bf00      	nop
 8007552:	bf00      	nop
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
	...

08007560 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08c      	sub	sp, #48	@ 0x30
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007568:	f107 031c 	add.w	r3, r7, #28
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	605a      	str	r2, [r3, #4]
 8007572:	609a      	str	r2, [r3, #8]
 8007574:	60da      	str	r2, [r3, #12]
 8007576:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a42      	ldr	r2, [pc, #264]	@ (8007688 <HAL_PCD_MspInit+0x128>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d17e      	bne.n	8007680 <HAL_PCD_MspInit+0x120>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007582:	2300      	movs	r3, #0
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	4b41      	ldr	r3, [pc, #260]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 8007588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758a:	4a40      	ldr	r2, [pc, #256]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 800758c:	f043 0304 	orr.w	r3, r3, #4
 8007590:	6313      	str	r3, [r2, #48]	@ 0x30
 8007592:	4b3e      	ldr	r3, [pc, #248]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 8007594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007596:	f003 0304 	and.w	r3, r3, #4
 800759a:	61bb      	str	r3, [r7, #24]
 800759c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	4b3a      	ldr	r3, [pc, #232]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 80075a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a6:	4a39      	ldr	r2, [pc, #228]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 80075a8:	f043 0301 	orr.w	r3, r3, #1
 80075ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80075ae:	4b37      	ldr	r3, [pc, #220]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 80075b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075ba:	2300      	movs	r3, #0
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	4b33      	ldr	r3, [pc, #204]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 80075c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c2:	4a32      	ldr	r2, [pc, #200]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 80075c4:	f043 0302 	orr.w	r3, r3, #2
 80075c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80075ca:	4b30      	ldr	r3, [pc, #192]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 80075cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	613b      	str	r3, [r7, #16]
 80075d4:	693b      	ldr	r3, [r7, #16]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80075d6:	230d      	movs	r3, #13
 80075d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075da:	2302      	movs	r3, #2
 80075dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075e2:	2303      	movs	r3, #3
 80075e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80075e6:	230a      	movs	r3, #10
 80075e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075ea:	f107 031c 	add.w	r3, r7, #28
 80075ee:	4619      	mov	r1, r3
 80075f0:	4827      	ldr	r0, [pc, #156]	@ (8007690 <HAL_PCD_MspInit+0x130>)
 80075f2:	f7f9 fb83 	bl	8000cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80075f6:	2328      	movs	r3, #40	@ 0x28
 80075f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075fa:	2302      	movs	r3, #2
 80075fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007602:	2303      	movs	r3, #3
 8007604:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007606:	230a      	movs	r3, #10
 8007608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800760a:	f107 031c 	add.w	r3, r7, #28
 800760e:	4619      	mov	r1, r3
 8007610:	4820      	ldr	r0, [pc, #128]	@ (8007694 <HAL_PCD_MspInit+0x134>)
 8007612:	f7f9 fb73 	bl	8000cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8007616:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800761a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800761c:	2302      	movs	r3, #2
 800761e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007620:	2300      	movs	r3, #0
 8007622:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007624:	2303      	movs	r3, #3
 8007626:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007628:	230a      	movs	r3, #10
 800762a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800762c:	f107 031c 	add.w	r3, r7, #28
 8007630:	4619      	mov	r1, r3
 8007632:	4819      	ldr	r0, [pc, #100]	@ (8007698 <HAL_PCD_MspInit+0x138>)
 8007634:	f7f9 fb62 	bl	8000cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	4b13      	ldr	r3, [pc, #76]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 800763e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007640:	4a12      	ldr	r2, [pc, #72]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 8007642:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007646:	6313      	str	r3, [r2, #48]	@ 0x30
 8007648:	4b10      	ldr	r3, [pc, #64]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 800764a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8007654:	2300      	movs	r3, #0
 8007656:	60bb      	str	r3, [r7, #8]
 8007658:	4b0c      	ldr	r3, [pc, #48]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 800765a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765c:	4a0b      	ldr	r2, [pc, #44]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 800765e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007662:	6313      	str	r3, [r2, #48]	@ 0x30
 8007664:	4b09      	ldr	r3, [pc, #36]	@ (800768c <HAL_PCD_MspInit+0x12c>)
 8007666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007668:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800766c:	60bb      	str	r3, [r7, #8]
 800766e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8007670:	2200      	movs	r2, #0
 8007672:	2100      	movs	r1, #0
 8007674:	204d      	movs	r0, #77	@ 0x4d
 8007676:	f7f9 fa78 	bl	8000b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800767a:	204d      	movs	r0, #77	@ 0x4d
 800767c:	f7f9 fa91 	bl	8000ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8007680:	bf00      	nop
 8007682:	3730      	adds	r7, #48	@ 0x30
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	40040000 	.word	0x40040000
 800768c:	40023800 	.word	0x40023800
 8007690:	40020800 	.word	0x40020800
 8007694:	40020000 	.word	0x40020000
 8007698:	40020400 	.word	0x40020400

0800769c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80076b0:	4619      	mov	r1, r3
 80076b2:	4610      	mov	r0, r2
 80076b4:	f7fe fb31 	bl	8005d1a <USBD_LL_SetupStage>
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80076d2:	78fa      	ldrb	r2, [r7, #3]
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	4613      	mov	r3, r2
 80076d8:	00db      	lsls	r3, r3, #3
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	440b      	add	r3, r1
 80076e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	4619      	mov	r1, r3
 80076ea:	f7fe fb6b 	bl	8005dc4 <USBD_LL_DataOutStage>
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007708:	78fa      	ldrb	r2, [r7, #3]
 800770a:	6879      	ldr	r1, [r7, #4]
 800770c:	4613      	mov	r3, r2
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	4413      	add	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	440b      	add	r3, r1
 8007716:	3320      	adds	r3, #32
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	4619      	mov	r1, r3
 800771e:	f7fe fc04 	bl	8005f2a <USBD_LL_DataInStage>
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007738:	4618      	mov	r0, r3
 800773a:	f7fe fd3e 	bl	80061ba <USBD_LL_SOF>
}
 800773e:	bf00      	nop
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800774e:	2301      	movs	r3, #1
 8007750:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	79db      	ldrb	r3, [r3, #7]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d102      	bne.n	8007760 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800775a:	2300      	movs	r3, #0
 800775c:	73fb      	strb	r3, [r7, #15]
 800775e:	e008      	b.n	8007772 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	79db      	ldrb	r3, [r3, #7]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d102      	bne.n	800776e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007768:	2301      	movs	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
 800776c:	e001      	b.n	8007772 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800776e:	f7f8 ff61 	bl	8000634 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007778:	7bfa      	ldrb	r2, [r7, #15]
 800777a:	4611      	mov	r1, r2
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe fcd8 	bl	8006132 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe fc80 	bl	800608e <USBD_LL_Reset>
}
 800778e:	bf00      	nop
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe fcd3 	bl	8006152 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6812      	ldr	r2, [r2, #0]
 80077ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077be:	f043 0301 	orr.w	r3, r3, #1
 80077c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	7adb      	ldrb	r3, [r3, #11]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d005      	beq.n	80077d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077cc:	4b04      	ldr	r3, [pc, #16]	@ (80077e0 <HAL_PCD_SuspendCallback+0x48>)
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	4a03      	ldr	r2, [pc, #12]	@ (80077e0 <HAL_PCD_SuspendCallback+0x48>)
 80077d2:	f043 0306 	orr.w	r3, r3, #6
 80077d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	e000ed00 	.word	0xe000ed00

080077e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fe fcc9 	bl	800618a <USBD_LL_Resume>
}
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007812:	78fa      	ldrb	r2, [r7, #3]
 8007814:	4611      	mov	r1, r2
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fd21 	bl	800625e <USBD_LL_IsoOUTIncomplete>
}
 800781c:	bf00      	nop
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007836:	78fa      	ldrb	r2, [r7, #3]
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe fcdd 	bl	80061fa <USBD_LL_IsoINIncomplete>
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe fd33 	bl	80062c2 <USBD_LL_DevConnected>
}
 800785c:	bf00      	nop
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe fd30 	bl	80062d8 <USBD_LL_DevDisconnected>
}
 8007878:	bf00      	nop
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d140      	bne.n	8007912 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8007890:	4a22      	ldr	r2, [pc, #136]	@ (800791c <USBD_LL_Init+0x9c>)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a20      	ldr	r2, [pc, #128]	@ (800791c <USBD_LL_Init+0x9c>)
 800789c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80078a0:	4b1e      	ldr	r3, [pc, #120]	@ (800791c <USBD_LL_Init+0x9c>)
 80078a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007920 <USBD_LL_Init+0xa0>)
 80078a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 80078a6:	4b1d      	ldr	r3, [pc, #116]	@ (800791c <USBD_LL_Init+0x9c>)
 80078a8:	2206      	movs	r2, #6
 80078aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80078ac:	4b1b      	ldr	r3, [pc, #108]	@ (800791c <USBD_LL_Init+0x9c>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80078b2:	4b1a      	ldr	r3, [pc, #104]	@ (800791c <USBD_LL_Init+0x9c>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80078b8:	4b18      	ldr	r3, [pc, #96]	@ (800791c <USBD_LL_Init+0x9c>)
 80078ba:	2201      	movs	r2, #1
 80078bc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = ENABLE;
 80078be:	4b17      	ldr	r3, [pc, #92]	@ (800791c <USBD_LL_Init+0x9c>)
 80078c0:	2201      	movs	r2, #1
 80078c2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80078c4:	4b15      	ldr	r3, [pc, #84]	@ (800791c <USBD_LL_Init+0x9c>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80078ca:	4b14      	ldr	r3, [pc, #80]	@ (800791c <USBD_LL_Init+0x9c>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80078d0:	4b12      	ldr	r3, [pc, #72]	@ (800791c <USBD_LL_Init+0x9c>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80078d6:	4b11      	ldr	r3, [pc, #68]	@ (800791c <USBD_LL_Init+0x9c>)
 80078d8:	2200      	movs	r2, #0
 80078da:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80078dc:	4b0f      	ldr	r3, [pc, #60]	@ (800791c <USBD_LL_Init+0x9c>)
 80078de:	2200      	movs	r2, #0
 80078e0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80078e2:	480e      	ldr	r0, [pc, #56]	@ (800791c <USBD_LL_Init+0x9c>)
 80078e4:	f7f9 fba6 	bl	8001034 <HAL_PCD_Init>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80078ee:	f7f8 fea1 	bl	8000634 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80078f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80078f6:	4809      	ldr	r0, [pc, #36]	@ (800791c <USBD_LL_Init+0x9c>)
 80078f8:	f7fa fdcf 	bl	800249a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80078fc:	2280      	movs	r2, #128	@ 0x80
 80078fe:	2100      	movs	r1, #0
 8007900:	4806      	ldr	r0, [pc, #24]	@ (800791c <USBD_LL_Init+0x9c>)
 8007902:	f7fa fd83 	bl	800240c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8007906:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800790a:	2101      	movs	r1, #1
 800790c:	4803      	ldr	r0, [pc, #12]	@ (800791c <USBD_LL_Init+0x9c>)
 800790e:	f7fa fd7d 	bl	800240c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20001644 	.word	0x20001644
 8007920:	40040000 	.word	0x40040000

08007924 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800793a:	4618      	mov	r0, r3
 800793c:	f7f9 fc89 	bl	8001252 <HAL_PCD_Start>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f942 	bl	8007bd0 <USBD_Get_USB_Status>
 800794c:	4603      	mov	r3, r0
 800794e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007950:	7bbb      	ldrb	r3, [r7, #14]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	4608      	mov	r0, r1
 8007964:	4611      	mov	r1, r2
 8007966:	461a      	mov	r2, r3
 8007968:	4603      	mov	r3, r0
 800796a:	70fb      	strb	r3, [r7, #3]
 800796c:	460b      	mov	r3, r1
 800796e:	70bb      	strb	r3, [r7, #2]
 8007970:	4613      	mov	r3, r2
 8007972:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007982:	78bb      	ldrb	r3, [r7, #2]
 8007984:	883a      	ldrh	r2, [r7, #0]
 8007986:	78f9      	ldrb	r1, [r7, #3]
 8007988:	f7fa f95d 	bl	8001c46 <HAL_PCD_EP_Open>
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 f91c 	bl	8007bd0 <USBD_Get_USB_Status>
 8007998:	4603      	mov	r3, r0
 800799a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800799c:	7bbb      	ldrb	r3, [r7, #14]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079c0:	78fa      	ldrb	r2, [r7, #3]
 80079c2:	4611      	mov	r1, r2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fa f9a6 	bl	8001d16 <HAL_PCD_EP_Close>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 f8fd 	bl	8007bd0 <USBD_Get_USB_Status>
 80079d6:	4603      	mov	r3, r0
 80079d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079da:	7bbb      	ldrb	r3, [r7, #14]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f4:	2300      	movs	r3, #0
 80079f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079fe:	78fa      	ldrb	r2, [r7, #3]
 8007a00:	4611      	mov	r1, r2
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fa fa5e 	bl	8001ec4 <HAL_PCD_EP_SetStall>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 f8de 	bl	8007bd0 <USBD_Get_USB_Status>
 8007a14:	4603      	mov	r3, r0
 8007a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a3c:	78fa      	ldrb	r2, [r7, #3]
 8007a3e:	4611      	mov	r1, r2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fa faa2 	bl	8001f8a <HAL_PCD_EP_ClrStall>
 8007a46:	4603      	mov	r3, r0
 8007a48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 f8bf 	bl	8007bd0 <USBD_Get_USB_Status>
 8007a52:	4603      	mov	r3, r0
 8007a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	da0b      	bge.n	8007a94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a82:	68f9      	ldr	r1, [r7, #12]
 8007a84:	4613      	mov	r3, r2
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	440b      	add	r3, r1
 8007a8e:	3316      	adds	r3, #22
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	e00b      	b.n	8007aac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a94:	78fb      	ldrb	r3, [r7, #3]
 8007a96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a9a:	68f9      	ldr	r1, [r7, #12]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	440b      	add	r3, r1
 8007aa6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007aaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ad2:	78fa      	ldrb	r2, [r7, #3]
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fa f891 	bl	8001bfe <HAL_PCD_SetAddress>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 f874 	bl	8007bd0 <USBD_Get_USB_Status>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	603b      	str	r3, [r7, #0]
 8007b02:	460b      	mov	r3, r1
 8007b04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b14:	7af9      	ldrb	r1, [r7, #11]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	f7fa f999 	bl	8001e50 <HAL_PCD_EP_Transmit>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 f853 	bl	8007bd0 <USBD_Get_USB_Status>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	460b      	mov	r3, r1
 8007b46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b56:	7af9      	ldrb	r1, [r7, #11]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	f7fa f925 	bl	8001daa <HAL_PCD_EP_Receive>
 8007b60:	4603      	mov	r3, r0
 8007b62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b64:	7dfb      	ldrb	r3, [r7, #23]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 f832 	bl	8007bd0 <USBD_Get_USB_Status>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b70:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	4611      	mov	r1, r2
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fa f945 	bl	8001e20 <HAL_PCD_EP_GetRxCount>
 8007b96:	4603      	mov	r3, r0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ba8:	4b03      	ldr	r3, [pc, #12]	@ (8007bb8 <USBD_static_malloc+0x18>)
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	20001b28 	.word	0x20001b28

08007bbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]

}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	2b03      	cmp	r3, #3
 8007be2:	d817      	bhi.n	8007c14 <USBD_Get_USB_Status+0x44>
 8007be4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bec <USBD_Get_USB_Status+0x1c>)
 8007be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bea:	bf00      	nop
 8007bec:	08007bfd 	.word	0x08007bfd
 8007bf0:	08007c03 	.word	0x08007c03
 8007bf4:	08007c09 	.word	0x08007c09
 8007bf8:	08007c0f 	.word	0x08007c0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8007c00:	e00b      	b.n	8007c1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c02:	2303      	movs	r3, #3
 8007c04:	73fb      	strb	r3, [r7, #15]
    break;
 8007c06:	e008      	b.n	8007c1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c0c:	e005      	b.n	8007c1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	73fb      	strb	r3, [r7, #15]
    break;
 8007c12:	e002      	b.n	8007c1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c14:	2303      	movs	r3, #3
 8007c16:	73fb      	strb	r3, [r7, #15]
    break;
 8007c18:	bf00      	nop
  }
  return usb_status;
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <memset>:
 8007c28:	4402      	add	r2, r0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d100      	bne.n	8007c32 <memset+0xa>
 8007c30:	4770      	bx	lr
 8007c32:	f803 1b01 	strb.w	r1, [r3], #1
 8007c36:	e7f9      	b.n	8007c2c <memset+0x4>

08007c38 <__libc_init_array>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	4d0d      	ldr	r5, [pc, #52]	@ (8007c70 <__libc_init_array+0x38>)
 8007c3c:	4c0d      	ldr	r4, [pc, #52]	@ (8007c74 <__libc_init_array+0x3c>)
 8007c3e:	1b64      	subs	r4, r4, r5
 8007c40:	10a4      	asrs	r4, r4, #2
 8007c42:	2600      	movs	r6, #0
 8007c44:	42a6      	cmp	r6, r4
 8007c46:	d109      	bne.n	8007c5c <__libc_init_array+0x24>
 8007c48:	4d0b      	ldr	r5, [pc, #44]	@ (8007c78 <__libc_init_array+0x40>)
 8007c4a:	4c0c      	ldr	r4, [pc, #48]	@ (8007c7c <__libc_init_array+0x44>)
 8007c4c:	f000 f818 	bl	8007c80 <_init>
 8007c50:	1b64      	subs	r4, r4, r5
 8007c52:	10a4      	asrs	r4, r4, #2
 8007c54:	2600      	movs	r6, #0
 8007c56:	42a6      	cmp	r6, r4
 8007c58:	d105      	bne.n	8007c66 <__libc_init_array+0x2e>
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c60:	4798      	blx	r3
 8007c62:	3601      	adds	r6, #1
 8007c64:	e7ee      	b.n	8007c44 <__libc_init_array+0xc>
 8007c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6a:	4798      	blx	r3
 8007c6c:	3601      	adds	r6, #1
 8007c6e:	e7f2      	b.n	8007c56 <__libc_init_array+0x1e>
 8007c70:	08007d00 	.word	0x08007d00
 8007c74:	08007d00 	.word	0x08007d00
 8007c78:	08007d00 	.word	0x08007d00
 8007c7c:	08007d04 	.word	0x08007d04

08007c80 <_init>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	bf00      	nop
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr

08007c8c <_fini>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr
