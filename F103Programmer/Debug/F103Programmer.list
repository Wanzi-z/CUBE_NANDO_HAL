
F103Programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010318  080041e4  080041e4  000041e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d78  080144fc  080144fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015274  08015274  00020310  2**0
                  CONTENTS
  4 .ARM          00000008  08015274  08015274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801527c  0801527c  00020310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801527c  0801527c  0001527c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015280  08015280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  08015284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006264  20000310  08015594  00020310  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20006574  08015594  00026574  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020339  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f5fd  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063f8  00000000  00000000  0003f979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad8  00000000  00000000  00045d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000140e  00000000  00000000  00047850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216d2  00000000  00000000  00048c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027104  00000000  00000000  0006a330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a21c3  00000000  00000000  00091434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007158  00000000  00000000  001335f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0013a750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041e4 <__do_global_dtors_aux>:
 80041e4:	b510      	push	{r4, lr}
 80041e6:	4c05      	ldr	r4, [pc, #20]	; (80041fc <__do_global_dtors_aux+0x18>)
 80041e8:	7823      	ldrb	r3, [r4, #0]
 80041ea:	b933      	cbnz	r3, 80041fa <__do_global_dtors_aux+0x16>
 80041ec:	4b04      	ldr	r3, [pc, #16]	; (8004200 <__do_global_dtors_aux+0x1c>)
 80041ee:	b113      	cbz	r3, 80041f6 <__do_global_dtors_aux+0x12>
 80041f0:	4804      	ldr	r0, [pc, #16]	; (8004204 <__do_global_dtors_aux+0x20>)
 80041f2:	f3af 8000 	nop.w
 80041f6:	2301      	movs	r3, #1
 80041f8:	7023      	strb	r3, [r4, #0]
 80041fa:	bd10      	pop	{r4, pc}
 80041fc:	20000310 	.word	0x20000310
 8004200:	00000000 	.word	0x00000000
 8004204:	080144e4 	.word	0x080144e4

08004208 <frame_dummy>:
 8004208:	b508      	push	{r3, lr}
 800420a:	4b03      	ldr	r3, [pc, #12]	; (8004218 <frame_dummy+0x10>)
 800420c:	b11b      	cbz	r3, 8004216 <frame_dummy+0xe>
 800420e:	4903      	ldr	r1, [pc, #12]	; (800421c <frame_dummy+0x14>)
 8004210:	4803      	ldr	r0, [pc, #12]	; (8004220 <frame_dummy+0x18>)
 8004212:	f3af 8000 	nop.w
 8004216:	bd08      	pop	{r3, pc}
 8004218:	00000000 	.word	0x00000000
 800421c:	20000314 	.word	0x20000314
 8004220:	080144e4 	.word	0x080144e4

08004224 <__aeabi_uldivmod>:
 8004224:	b953      	cbnz	r3, 800423c <__aeabi_uldivmod+0x18>
 8004226:	b94a      	cbnz	r2, 800423c <__aeabi_uldivmod+0x18>
 8004228:	2900      	cmp	r1, #0
 800422a:	bf08      	it	eq
 800422c:	2800      	cmpeq	r0, #0
 800422e:	bf1c      	itt	ne
 8004230:	f04f 31ff 	movne.w	r1, #4294967295
 8004234:	f04f 30ff 	movne.w	r0, #4294967295
 8004238:	f000 b972 	b.w	8004520 <__aeabi_idiv0>
 800423c:	f1ad 0c08 	sub.w	ip, sp, #8
 8004240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004244:	f000 f806 	bl	8004254 <__udivmoddi4>
 8004248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800424c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004250:	b004      	add	sp, #16
 8004252:	4770      	bx	lr

08004254 <__udivmoddi4>:
 8004254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	9e08      	ldr	r6, [sp, #32]
 800425a:	460d      	mov	r5, r1
 800425c:	4604      	mov	r4, r0
 800425e:	468e      	mov	lr, r1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d14c      	bne.n	80042fe <__udivmoddi4+0xaa>
 8004264:	428a      	cmp	r2, r1
 8004266:	4694      	mov	ip, r2
 8004268:	d967      	bls.n	800433a <__udivmoddi4+0xe6>
 800426a:	fab2 f382 	clz	r3, r2
 800426e:	b153      	cbz	r3, 8004286 <__udivmoddi4+0x32>
 8004270:	fa02 fc03 	lsl.w	ip, r2, r3
 8004274:	f1c3 0220 	rsb	r2, r3, #32
 8004278:	fa01 fe03 	lsl.w	lr, r1, r3
 800427c:	fa20 f202 	lsr.w	r2, r0, r2
 8004280:	ea42 0e0e 	orr.w	lr, r2, lr
 8004284:	409c      	lsls	r4, r3
 8004286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800428a:	fbbe f1f7 	udiv	r1, lr, r7
 800428e:	fa1f f58c 	uxth.w	r5, ip
 8004292:	fb07 ee11 	mls	lr, r7, r1, lr
 8004296:	fb01 f005 	mul.w	r0, r1, r5
 800429a:	0c22      	lsrs	r2, r4, #16
 800429c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80042a0:	4290      	cmp	r0, r2
 80042a2:	d90a      	bls.n	80042ba <__udivmoddi4+0x66>
 80042a4:	eb1c 0202 	adds.w	r2, ip, r2
 80042a8:	f101 3eff 	add.w	lr, r1, #4294967295
 80042ac:	f080 8119 	bcs.w	80044e2 <__udivmoddi4+0x28e>
 80042b0:	4290      	cmp	r0, r2
 80042b2:	f240 8116 	bls.w	80044e2 <__udivmoddi4+0x28e>
 80042b6:	3902      	subs	r1, #2
 80042b8:	4462      	add	r2, ip
 80042ba:	1a12      	subs	r2, r2, r0
 80042bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80042c0:	fb07 2210 	mls	r2, r7, r0, r2
 80042c4:	fb00 f505 	mul.w	r5, r0, r5
 80042c8:	b2a4      	uxth	r4, r4
 80042ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80042ce:	42a5      	cmp	r5, r4
 80042d0:	d90a      	bls.n	80042e8 <__udivmoddi4+0x94>
 80042d2:	eb1c 0404 	adds.w	r4, ip, r4
 80042d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80042da:	f080 8104 	bcs.w	80044e6 <__udivmoddi4+0x292>
 80042de:	42a5      	cmp	r5, r4
 80042e0:	f240 8101 	bls.w	80044e6 <__udivmoddi4+0x292>
 80042e4:	4464      	add	r4, ip
 80042e6:	3802      	subs	r0, #2
 80042e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80042ec:	2100      	movs	r1, #0
 80042ee:	1b64      	subs	r4, r4, r5
 80042f0:	b11e      	cbz	r6, 80042fa <__udivmoddi4+0xa6>
 80042f2:	40dc      	lsrs	r4, r3
 80042f4:	2300      	movs	r3, #0
 80042f6:	e9c6 4300 	strd	r4, r3, [r6]
 80042fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fe:	428b      	cmp	r3, r1
 8004300:	d908      	bls.n	8004314 <__udivmoddi4+0xc0>
 8004302:	2e00      	cmp	r6, #0
 8004304:	f000 80ea 	beq.w	80044dc <__udivmoddi4+0x288>
 8004308:	2100      	movs	r1, #0
 800430a:	e9c6 0500 	strd	r0, r5, [r6]
 800430e:	4608      	mov	r0, r1
 8004310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004314:	fab3 f183 	clz	r1, r3
 8004318:	2900      	cmp	r1, #0
 800431a:	d148      	bne.n	80043ae <__udivmoddi4+0x15a>
 800431c:	42ab      	cmp	r3, r5
 800431e:	d302      	bcc.n	8004326 <__udivmoddi4+0xd2>
 8004320:	4282      	cmp	r2, r0
 8004322:	f200 80f8 	bhi.w	8004516 <__udivmoddi4+0x2c2>
 8004326:	1a84      	subs	r4, r0, r2
 8004328:	eb65 0203 	sbc.w	r2, r5, r3
 800432c:	2001      	movs	r0, #1
 800432e:	4696      	mov	lr, r2
 8004330:	2e00      	cmp	r6, #0
 8004332:	d0e2      	beq.n	80042fa <__udivmoddi4+0xa6>
 8004334:	e9c6 4e00 	strd	r4, lr, [r6]
 8004338:	e7df      	b.n	80042fa <__udivmoddi4+0xa6>
 800433a:	b902      	cbnz	r2, 800433e <__udivmoddi4+0xea>
 800433c:	deff      	udf	#255	; 0xff
 800433e:	fab2 f382 	clz	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	f040 808e 	bne.w	8004464 <__udivmoddi4+0x210>
 8004348:	1a88      	subs	r0, r1, r2
 800434a:	2101      	movs	r1, #1
 800434c:	0c17      	lsrs	r7, r2, #16
 800434e:	fa1f fe82 	uxth.w	lr, r2
 8004352:	fbb0 f5f7 	udiv	r5, r0, r7
 8004356:	fb07 0015 	mls	r0, r7, r5, r0
 800435a:	0c22      	lsrs	r2, r4, #16
 800435c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004360:	fb0e f005 	mul.w	r0, lr, r5
 8004364:	4290      	cmp	r0, r2
 8004366:	d908      	bls.n	800437a <__udivmoddi4+0x126>
 8004368:	eb1c 0202 	adds.w	r2, ip, r2
 800436c:	f105 38ff 	add.w	r8, r5, #4294967295
 8004370:	d202      	bcs.n	8004378 <__udivmoddi4+0x124>
 8004372:	4290      	cmp	r0, r2
 8004374:	f200 80cc 	bhi.w	8004510 <__udivmoddi4+0x2bc>
 8004378:	4645      	mov	r5, r8
 800437a:	1a12      	subs	r2, r2, r0
 800437c:	fbb2 f0f7 	udiv	r0, r2, r7
 8004380:	fb07 2210 	mls	r2, r7, r0, r2
 8004384:	fb0e fe00 	mul.w	lr, lr, r0
 8004388:	b2a4      	uxth	r4, r4
 800438a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800438e:	45a6      	cmp	lr, r4
 8004390:	d908      	bls.n	80043a4 <__udivmoddi4+0x150>
 8004392:	eb1c 0404 	adds.w	r4, ip, r4
 8004396:	f100 32ff 	add.w	r2, r0, #4294967295
 800439a:	d202      	bcs.n	80043a2 <__udivmoddi4+0x14e>
 800439c:	45a6      	cmp	lr, r4
 800439e:	f200 80b4 	bhi.w	800450a <__udivmoddi4+0x2b6>
 80043a2:	4610      	mov	r0, r2
 80043a4:	eba4 040e 	sub.w	r4, r4, lr
 80043a8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80043ac:	e7a0      	b.n	80042f0 <__udivmoddi4+0x9c>
 80043ae:	f1c1 0720 	rsb	r7, r1, #32
 80043b2:	408b      	lsls	r3, r1
 80043b4:	fa22 fc07 	lsr.w	ip, r2, r7
 80043b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80043bc:	fa25 fa07 	lsr.w	sl, r5, r7
 80043c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80043c4:	fbba f8f9 	udiv	r8, sl, r9
 80043c8:	408d      	lsls	r5, r1
 80043ca:	fa20 f307 	lsr.w	r3, r0, r7
 80043ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80043d2:	fa1f fe8c 	uxth.w	lr, ip
 80043d6:	432b      	orrs	r3, r5
 80043d8:	fa00 f501 	lsl.w	r5, r0, r1
 80043dc:	fb08 f00e 	mul.w	r0, r8, lr
 80043e0:	0c1c      	lsrs	r4, r3, #16
 80043e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80043e6:	42a0      	cmp	r0, r4
 80043e8:	fa02 f201 	lsl.w	r2, r2, r1
 80043ec:	d90b      	bls.n	8004406 <__udivmoddi4+0x1b2>
 80043ee:	eb1c 0404 	adds.w	r4, ip, r4
 80043f2:	f108 3aff 	add.w	sl, r8, #4294967295
 80043f6:	f080 8086 	bcs.w	8004506 <__udivmoddi4+0x2b2>
 80043fa:	42a0      	cmp	r0, r4
 80043fc:	f240 8083 	bls.w	8004506 <__udivmoddi4+0x2b2>
 8004400:	f1a8 0802 	sub.w	r8, r8, #2
 8004404:	4464      	add	r4, ip
 8004406:	1a24      	subs	r4, r4, r0
 8004408:	b298      	uxth	r0, r3
 800440a:	fbb4 f3f9 	udiv	r3, r4, r9
 800440e:	fb09 4413 	mls	r4, r9, r3, r4
 8004412:	fb03 fe0e 	mul.w	lr, r3, lr
 8004416:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800441a:	45a6      	cmp	lr, r4
 800441c:	d908      	bls.n	8004430 <__udivmoddi4+0x1dc>
 800441e:	eb1c 0404 	adds.w	r4, ip, r4
 8004422:	f103 30ff 	add.w	r0, r3, #4294967295
 8004426:	d26a      	bcs.n	80044fe <__udivmoddi4+0x2aa>
 8004428:	45a6      	cmp	lr, r4
 800442a:	d968      	bls.n	80044fe <__udivmoddi4+0x2aa>
 800442c:	3b02      	subs	r3, #2
 800442e:	4464      	add	r4, ip
 8004430:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8004434:	fba0 9302 	umull	r9, r3, r0, r2
 8004438:	eba4 040e 	sub.w	r4, r4, lr
 800443c:	429c      	cmp	r4, r3
 800443e:	46c8      	mov	r8, r9
 8004440:	469e      	mov	lr, r3
 8004442:	d354      	bcc.n	80044ee <__udivmoddi4+0x29a>
 8004444:	d051      	beq.n	80044ea <__udivmoddi4+0x296>
 8004446:	2e00      	cmp	r6, #0
 8004448:	d067      	beq.n	800451a <__udivmoddi4+0x2c6>
 800444a:	ebb5 0308 	subs.w	r3, r5, r8
 800444e:	eb64 040e 	sbc.w	r4, r4, lr
 8004452:	40cb      	lsrs	r3, r1
 8004454:	fa04 f707 	lsl.w	r7, r4, r7
 8004458:	431f      	orrs	r7, r3
 800445a:	40cc      	lsrs	r4, r1
 800445c:	e9c6 7400 	strd	r7, r4, [r6]
 8004460:	2100      	movs	r1, #0
 8004462:	e74a      	b.n	80042fa <__udivmoddi4+0xa6>
 8004464:	fa02 fc03 	lsl.w	ip, r2, r3
 8004468:	f1c3 0020 	rsb	r0, r3, #32
 800446c:	40c1      	lsrs	r1, r0
 800446e:	409d      	lsls	r5, r3
 8004470:	fa24 f000 	lsr.w	r0, r4, r0
 8004474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004478:	4328      	orrs	r0, r5
 800447a:	fbb1 f5f7 	udiv	r5, r1, r7
 800447e:	fb07 1115 	mls	r1, r7, r5, r1
 8004482:	fa1f fe8c 	uxth.w	lr, ip
 8004486:	0c02      	lsrs	r2, r0, #16
 8004488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800448c:	fb05 f10e 	mul.w	r1, r5, lr
 8004490:	4291      	cmp	r1, r2
 8004492:	fa04 f403 	lsl.w	r4, r4, r3
 8004496:	d908      	bls.n	80044aa <__udivmoddi4+0x256>
 8004498:	eb1c 0202 	adds.w	r2, ip, r2
 800449c:	f105 38ff 	add.w	r8, r5, #4294967295
 80044a0:	d22f      	bcs.n	8004502 <__udivmoddi4+0x2ae>
 80044a2:	4291      	cmp	r1, r2
 80044a4:	d92d      	bls.n	8004502 <__udivmoddi4+0x2ae>
 80044a6:	3d02      	subs	r5, #2
 80044a8:	4462      	add	r2, ip
 80044aa:	1a52      	subs	r2, r2, r1
 80044ac:	fbb2 f1f7 	udiv	r1, r2, r7
 80044b0:	fb07 2211 	mls	r2, r7, r1, r2
 80044b4:	b280      	uxth	r0, r0
 80044b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80044ba:	fb01 f20e 	mul.w	r2, r1, lr
 80044be:	4282      	cmp	r2, r0
 80044c0:	d908      	bls.n	80044d4 <__udivmoddi4+0x280>
 80044c2:	eb1c 0000 	adds.w	r0, ip, r0
 80044c6:	f101 38ff 	add.w	r8, r1, #4294967295
 80044ca:	d216      	bcs.n	80044fa <__udivmoddi4+0x2a6>
 80044cc:	4282      	cmp	r2, r0
 80044ce:	d914      	bls.n	80044fa <__udivmoddi4+0x2a6>
 80044d0:	3902      	subs	r1, #2
 80044d2:	4460      	add	r0, ip
 80044d4:	1a80      	subs	r0, r0, r2
 80044d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80044da:	e73a      	b.n	8004352 <__udivmoddi4+0xfe>
 80044dc:	4631      	mov	r1, r6
 80044de:	4630      	mov	r0, r6
 80044e0:	e70b      	b.n	80042fa <__udivmoddi4+0xa6>
 80044e2:	4671      	mov	r1, lr
 80044e4:	e6e9      	b.n	80042ba <__udivmoddi4+0x66>
 80044e6:	4610      	mov	r0, r2
 80044e8:	e6fe      	b.n	80042e8 <__udivmoddi4+0x94>
 80044ea:	454d      	cmp	r5, r9
 80044ec:	d2ab      	bcs.n	8004446 <__udivmoddi4+0x1f2>
 80044ee:	ebb9 0802 	subs.w	r8, r9, r2
 80044f2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80044f6:	3801      	subs	r0, #1
 80044f8:	e7a5      	b.n	8004446 <__udivmoddi4+0x1f2>
 80044fa:	4641      	mov	r1, r8
 80044fc:	e7ea      	b.n	80044d4 <__udivmoddi4+0x280>
 80044fe:	4603      	mov	r3, r0
 8004500:	e796      	b.n	8004430 <__udivmoddi4+0x1dc>
 8004502:	4645      	mov	r5, r8
 8004504:	e7d1      	b.n	80044aa <__udivmoddi4+0x256>
 8004506:	46d0      	mov	r8, sl
 8004508:	e77d      	b.n	8004406 <__udivmoddi4+0x1b2>
 800450a:	4464      	add	r4, ip
 800450c:	3802      	subs	r0, #2
 800450e:	e749      	b.n	80043a4 <__udivmoddi4+0x150>
 8004510:	3d02      	subs	r5, #2
 8004512:	4462      	add	r2, ip
 8004514:	e731      	b.n	800437a <__udivmoddi4+0x126>
 8004516:	4608      	mov	r0, r1
 8004518:	e70a      	b.n	8004330 <__udivmoddi4+0xdc>
 800451a:	4631      	mov	r1, r6
 800451c:	e6ed      	b.n	80042fa <__udivmoddi4+0xa6>
 800451e:	bf00      	nop

08004520 <__aeabi_idiv0>:
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop

08004524 <cdc_send>:
#include "cdc_endp.h"

#define SEND_TIMEOUT 0x1000000          // 发送超时时间

static int cdc_send(uint8_t *data, uint32_t len)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
    uint32_t timeout = SEND_TIMEOUT;
 800452e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004532:	60fb      	str	r3, [r7, #12]

    if (!CDC_IsPacketSent())              // 如果之前的CDC发送未完成
 8004534:	f000 f986 	bl	8004844 <CDC_IsPacketSent>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d117      	bne.n	800456e <cdc_send+0x4a>
    {
        DEBUG_PRINT("Wait for previous CDC TX\r\n");  // 打印调试信息，等待上一次CDC发送完成
 800453e:	4816      	ldr	r0, [pc, #88]	; (8004598 <cdc_send+0x74>)
 8004540:	f00f f950 	bl	80137e4 <puts>
        while (!CDC_IsPacketSent() && --timeout);    // 等待CDC发送完成，或者超时
 8004544:	bf00      	nop
 8004546:	f000 f97d 	bl	8004844 <CDC_IsPacketSent>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <cdc_send+0x38>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3b01      	subs	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f4      	bne.n	8004546 <cdc_send+0x22>
        if (!timeout)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d105      	bne.n	800456e <cdc_send+0x4a>
        {
            ERROR_PRINT("Failed to send data, CDC is busy\r\n");   // 打印错误信息，发送超时，CDC忙碌
 8004562:	480e      	ldr	r0, [pc, #56]	; (800459c <cdc_send+0x78>)
 8004564:	f00f f93e 	bl	80137e4 <puts>
            return -1;                                          // 返回错误代码
 8004568:	f04f 33ff 	mov.w	r3, #4294967295
 800456c:	e00f      	b.n	800458e <cdc_send+0x6a>
        }
    }

    if (!CDC_Send_DATA(data, len))                              // 发送数据
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	4619      	mov	r1, r3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f93f 	bl	80047f8 <CDC_Send_DATA>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <cdc_send+0x68>
    {
        ERROR_PRINT("Failed to send data\r\n");                  // 打印错误信息，发送数据失败
 8004580:	4807      	ldr	r0, [pc, #28]	; (80045a0 <cdc_send+0x7c>)
 8004582:	f00f f92f 	bl	80137e4 <puts>
        return -1;                                              // 返回错误代码
 8004586:	f04f 33ff 	mov.w	r3, #4294967295
 800458a:	e000      	b.n	800458e <cdc_send+0x6a>
    }

    return 0;                                                   // 返回成功代码
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	080144fc 	.word	0x080144fc
 800459c:	08014518 	.word	0x08014518
 80045a0:	08014544 	.word	0x08014544

080045a4 <cdc_send_ready>:

static int cdc_send_ready()
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
    return CDC_IsPacketSent();                                  // 返回CDC是否可发送数据的状态
 80045a8:	f000 f94c 	bl	8004844 <CDC_IsPacketSent>
 80045ac:	4603      	mov	r3, r0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <cdc_peek>:

static uint32_t cdc_peek(uint8_t **data)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
    return USB_Data_Peek(data);                                 // 查看USB数据
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f82a 	bl	8004614 <USB_Data_Peek>
 80045c0:	4603      	mov	r3, r0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <cdc_consume>:

static void cdc_consume()
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
    uint8_t *data;

    USB_Data_Get(&data);                                        // 获取USB数据
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f84c 	bl	8004670 <USB_Data_Get>
    USB_DataRx_Sched();                                         // 调度USB数据接收
 80045d8:	f000 f8aa 	bl	8004730 <USB_DataRx_Sched>
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <cdc_init>:
    .peek = cdc_peek,
    .consume = cdc_consume,
};

void cdc_init()
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
    np_comm_register(&cdc_comm_cb);                             // 注册CDC通信回调函数
 80045e8:	4803      	ldr	r0, [pc, #12]	; (80045f8 <cdc_init+0x14>)
 80045ea:	f003 fc55 	bl	8007e98 <np_comm_register>

    /* Enable receive of data */
    CDC_Receive_DATA();                                         // 启用数据接收
 80045ee:	f000 f91f 	bl	8004830 <CDC_Receive_DATA>
}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000000 	.word	0x20000000

080045fc <EP1_IN_Callback>:
* Output         : None.
* Return         : None.
*******************************************************************************/

void EP1_IN_Callback ()
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  packet_sent = 1;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <EP1_IN_Callback+0x14>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000014 	.word	0x20000014

08004614 <USB_Data_Peek>:

static packet_t circ_buf[CIRC_BUF_SIZE];
static volatile uint8_t head, size, tail = CIRC_BUF_SIZE - 1;

uint32_t USB_Data_Peek(uint8_t **data)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  if (!size)
 800461c:	4b11      	ldr	r3, [pc, #68]	; (8004664 <USB_Data_Peek+0x50>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <USB_Data_Peek+0x16>
    return 0;
 8004626:	2300      	movs	r3, #0
 8004628:	e017      	b.n	800465a <USB_Data_Peek+0x46>

  *data = circ_buf[head].pbuf;
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <USB_Data_Peek+0x54>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	4613      	mov	r3, r2
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4a0c      	ldr	r2, [pc, #48]	; (800466c <USB_Data_Peek+0x58>)
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]

  return circ_buf[head].len;
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <USB_Data_Peek+0x54>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	4619      	mov	r1, r3
 800464a:	4a08      	ldr	r2, [pc, #32]	; (800466c <USB_Data_Peek+0x58>)
 800464c:	460b      	mov	r3, r1
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	440b      	add	r3, r1
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	3340      	adds	r3, #64	; 0x40
 8004658:	681b      	ldr	r3, [r3, #0]
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr
 8004664:	20000c39 	.word	0x20000c39
 8004668:	20000c38 	.word	0x20000c38
 800466c:	20000330 	.word	0x20000330

08004670 <USB_Data_Get>:

uint32_t USB_Data_Get(uint8_t **data)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t len;

  if (!size)
 8004678:	4b21      	ldr	r3, [pc, #132]	; (8004700 <USB_Data_Get+0x90>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <USB_Data_Get+0x16>
    return 0;
 8004682:	2300      	movs	r3, #0
 8004684:	e036      	b.n	80046f4 <USB_Data_Get+0x84>

  *data = circ_buf[head].pbuf;
 8004686:	4b1f      	ldr	r3, [pc, #124]	; (8004704 <USB_Data_Get+0x94>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	4613      	mov	r3, r2
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4a1c      	ldr	r2, [pc, #112]	; (8004708 <USB_Data_Get+0x98>)
 8004698:	441a      	add	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
  len = circ_buf[head].len;
 800469e:	4b19      	ldr	r3, [pc, #100]	; (8004704 <USB_Data_Get+0x94>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	4619      	mov	r1, r3
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <USB_Data_Get+0x98>)
 80046a8:	460b      	mov	r3, r1
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	440b      	add	r3, r1
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	3340      	adds	r3, #64	; 0x40
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]
  head = (head + 1) % CIRC_BUF_SIZE;
 80046b8:	4b12      	ldr	r3, [pc, #72]	; (8004704 <USB_Data_Get+0x94>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	4b12      	ldr	r3, [pc, #72]	; (800470c <USB_Data_Get+0x9c>)
 80046c2:	fb83 1302 	smull	r1, r3, r3, r2
 80046c6:	1119      	asrs	r1, r3, #4
 80046c8:	17d3      	asrs	r3, r2, #31
 80046ca:	1ac9      	subs	r1, r1, r3
 80046cc:	460b      	mov	r3, r1
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	440b      	add	r3, r1
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	1ad1      	subs	r1, r2, r3
 80046d6:	b2ca      	uxtb	r2, r1
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <USB_Data_Get+0x94>)
 80046da:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046dc:	b672      	cpsid	i
}
 80046de:	bf00      	nop
  __disable_irq();
  size--;
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <USB_Data_Get+0x90>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <USB_Data_Get+0x90>)
 80046ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046ee:	b662      	cpsie	i
}
 80046f0:	bf00      	nop
  __enable_irq();

  return len;
 80046f2:	68fb      	ldr	r3, [r7, #12]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000c39 	.word	0x20000c39
 8004704:	20000c38 	.word	0x20000c38
 8004708:	20000330 	.word	0x20000330
 800470c:	78787879 	.word	0x78787879

08004710 <USB_DataRx_Sched_Internal>:

static inline void USB_DataRx_Sched_Internal(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  if (size < CIRC_BUF_SIZE)
 8004714:	4b04      	ldr	r3, [pc, #16]	; (8004728 <USB_DataRx_Sched_Internal+0x18>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b21      	cmp	r3, #33	; 0x21
 800471c:	d802      	bhi.n	8004724 <USB_DataRx_Sched_Internal+0x14>
	  USBD_CtlReceiveStatus(&hUsbDeviceFS);
 800471e:	4803      	ldr	r0, [pc, #12]	; (800472c <USB_DataRx_Sched_Internal+0x1c>)
 8004720:	f00e fa76 	bl	8012c10 <USBD_CtlReceiveStatus>
}
 8004724:	bf00      	nop
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20000c39 	.word	0x20000c39
 800472c:	20005254 	.word	0x20005254

08004730 <USB_DataRx_Sched>:

void USB_DataRx_Sched(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004734:	b672      	cpsid	i
}
 8004736:	bf00      	nop
  __disable_irq();
  USB_DataRx_Sched_Internal();
 8004738:	f7ff ffea 	bl	8004710 <USB_DataRx_Sched_Internal>
  __ASM volatile ("cpsie i" : : : "memory");
 800473c:	b662      	cpsie	i
}
 800473e:	bf00      	nop
  __enable_irq();
}
 8004740:	bf00      	nop
 8004742:	bd80      	pop	{r7, pc}

08004744 <EP3_OUT_Callback>:

void EP3_OUT_Callback(uint8_t **Buf, uint32_t *Len)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
	Receive_length = USBD_GetRxCount(&hUsbDeviceFS, CDC_OUT_EP);
 800474e:	2101      	movs	r1, #1
 8004750:	4823      	ldr	r0, [pc, #140]	; (80047e0 <EP3_OUT_Callback+0x9c>)
 8004752:	f00e fa70 	bl	8012c36 <USBD_GetRxCount>
 8004756:	4603      	mov	r3, r0
 8004758:	4a22      	ldr	r2, [pc, #136]	; (80047e4 <EP3_OUT_Callback+0xa0>)
 800475a:	6013      	str	r3, [r2, #0]
    if (size < CIRC_BUF_SIZE)
 800475c:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <EP3_OUT_Callback+0xa4>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b21      	cmp	r3, #33	; 0x21
 8004764:	d838      	bhi.n	80047d8 <EP3_OUT_Callback+0x94>
    {
        tail = (tail + 1) % CIRC_BUF_SIZE;
 8004766:	4b21      	ldr	r3, [pc, #132]	; (80047ec <EP3_OUT_Callback+0xa8>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <EP3_OUT_Callback+0xac>)
 8004770:	fb83 1302 	smull	r1, r3, r3, r2
 8004774:	1119      	asrs	r1, r3, #4
 8004776:	17d3      	asrs	r3, r2, #31
 8004778:	1ac9      	subs	r1, r1, r3
 800477a:	460b      	mov	r3, r1
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	440b      	add	r3, r1
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	1ad1      	subs	r1, r2, r3
 8004784:	b2ca      	uxtb	r2, r1
 8004786:	4b19      	ldr	r3, [pc, #100]	; (80047ec <EP3_OUT_Callback+0xa8>)
 8004788:	701a      	strb	r2, [r3, #0]
        memcpy(circ_buf[tail].pbuf, Buf, Receive_length);
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <EP3_OUT_Callback+0xa8>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	4613      	mov	r3, r2
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4a16      	ldr	r2, [pc, #88]	; (80047f4 <EP3_OUT_Callback+0xb0>)
 800479c:	4413      	add	r3, r2
 800479e:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <EP3_OUT_Callback+0xa0>)
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f00f f978 	bl	8013a9a <memcpy>
        circ_buf[tail].len = Receive_length;
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <EP3_OUT_Callback+0xa8>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	4618      	mov	r0, r3
 80047b2:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <EP3_OUT_Callback+0xa0>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	490f      	ldr	r1, [pc, #60]	; (80047f4 <EP3_OUT_Callback+0xb0>)
 80047b8:	4603      	mov	r3, r0
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	4403      	add	r3, r0
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	3340      	adds	r3, #64	; 0x40
 80047c4:	601a      	str	r2, [r3, #0]
        size++;
 80047c6:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <EP3_OUT_Callback+0xa4>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	3301      	adds	r3, #1
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <EP3_OUT_Callback+0xa4>)
 80047d2:	701a      	strb	r2, [r3, #0]
        USB_DataRx_Sched_Internal();
 80047d4:	f7ff ff9c 	bl	8004710 <USB_DataRx_Sched_Internal>
    }
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20005254 	.word	0x20005254
 80047e4:	2000032c 	.word	0x2000032c
 80047e8:	20000c39 	.word	0x20000c39
 80047ec:	20000010 	.word	0x20000010
 80047f0:	78787879 	.word	0x78787879
 80047f4:	20000330 	.word	0x20000330

080047f8 <CDC_Send_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Send_DATA (uint8_t *ptrBuffer, uint8_t Send_length)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	70fb      	strb	r3, [r7, #3]
  /*if max buffer is Not reached*/
  if(Send_length <= CDC_DATA_FS_MAX_PACKET_SIZE)
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	2b40      	cmp	r3, #64	; 0x40
 8004808:	d80a      	bhi.n	8004820 <CDC_Send_DATA+0x28>
  {
	/*Sent flag*/
	packet_sent = 0;
 800480a:	4b08      	ldr	r3, [pc, #32]	; (800482c <CDC_Send_DATA+0x34>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
	/* send  packet to PMA*/
    CDC_Transmit_FS((unsigned char*)ptrBuffer, Send_length);
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	b29b      	uxth	r3, r3
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f00e fae2 	bl	8012de0 <CDC_Transmit_FS>
  }
  else
  {
    return 0;
  }
  return 1;
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <CDC_Send_DATA+0x2a>
    return 0;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000014 	.word	0x20000014

08004830 <CDC_Receive_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Receive_DATA(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  USBD_CtlReceiveStatus(&hUsbDeviceFS);
 8004834:	4802      	ldr	r0, [pc, #8]	; (8004840 <CDC_Receive_DATA+0x10>)
 8004836:	f00e f9eb 	bl	8012c10 <USBD_CtlReceiveStatus>
  return 1 ;
 800483a:	2301      	movs	r3, #1
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20005254 	.word	0x20005254

08004844 <CDC_IsPacketSent>:
* Input          : None.
* Output         : None.
* Return         : 1/0.
*******************************************************************************/
int CDC_IsPacketSent(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return packet_sent;
 8004848:	4b02      	ldr	r3, [pc, #8]	; (8004854 <CDC_IsPacketSent+0x10>)
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr
 8004854:	20000014 	.word	0x20000014

08004858 <is_external_clock_avail>:
 */

#include "clock.h"
#include <stm32f1xx.h>

bool is_external_clock_avail() {
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
	return (RCC->CR & RCC_CR_HSERDY) != RESET;
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <is_external_clock_avail+0x20>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf14      	ite	ne
 8004868:	2301      	movne	r3, #1
 800486a:	2300      	moveq	r3, #0
 800486c:	b2db      	uxtb	r3, r3
}
 800486e:	4618      	mov	r0, r3
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000

0800487c <flash_page_erase>:

#include <stm32f1xx_hal.h>

// 擦除指定页的Flash存储器
int flash_page_erase(uint32_t page_addr)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef Erase_INIT;

    /* Fill EraseInit structure*/
    Erase_INIT.TypeErase = FLASH_TYPEERASE_PAGES;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
    Erase_INIT.PageAddress = page_addr;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	617b      	str	r3, [r7, #20]
    Erase_INIT.NbPages = 1;
 800488c:	2301      	movs	r3, #1
 800488e:	61bb      	str	r3, [r7, #24]

    uint32_t PageError = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	60bb      	str	r3, [r7, #8]

    HAL_FLASH_Unlock();
 8004894:	f005 f9b2 	bl	8009bfc <HAL_FLASH_Unlock>
    status = HAL_FLASHEx_Erase(&Erase_INIT, &PageError);
 8004898:	f107 0208 	add.w	r2, r7, #8
 800489c:	f107 030c 	add.w	r3, r7, #12
 80048a0:	4611      	mov	r1, r2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f005 fa92 	bl	8009dcc <HAL_FLASHEx_Erase>
 80048a8:	4603      	mov	r3, r0
 80048aa:	77fb      	strb	r3, [r7, #31]
    HAL_FLASH_Lock();
 80048ac:	f005 f9cc 	bl	8009c48 <HAL_FLASH_Lock>

    return status != HAL_OK ? -1 : 0;
 80048b0:	7ffb      	ldrb	r3, [r7, #31]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <flash_page_erase+0x40>
 80048b6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ba:	e000      	b.n	80048be <flash_page_erase+0x42>
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3720      	adds	r7, #32
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <flash_write>:

// 向Flash存储器写入数据
int flash_write(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 80048c6:	b5b0      	push	{r4, r5, r7, lr}
 80048c8:	b088      	sub	sp, #32
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
    uint32_t word, count, i;
    int ret = -1;
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295
 80048d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80048d8:	b672      	cpsid	i
}
 80048da:	bf00      	nop

    __disable_irq(); // 关闭中断
    HAL_FLASH_Unlock(); // 解锁Flash存储器
 80048dc:	f005 f98e 	bl	8009bfc <HAL_FLASH_Unlock>

//    _HAL_FLASH_ClEAR_FLAG(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR |
//        FLASH_FLAG_WRPERR); // 清除Flash标志位

    count = data_len / 4; // 计算需要写入的32位字数
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	089b      	lsrs	r3, r3, #2
 80048e4:	61fb      	str	r3, [r7, #28]
    if (data_len % 4)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <flash_write+0x30>
        count++;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
    for (i = 0 ; i < count ; i++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	e018      	b.n	800492e <flash_write+0x68>
    {
        word = *((uint32_t *)data + i); // 从数据缓冲区中读取32位字
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	4413      	add	r3, r2
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	613b      	str	r3, [r7, #16]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,addr, word) != HAL_OK) // 写入Flash存储器
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2200      	movs	r2, #0
 800490c:	461c      	mov	r4, r3
 800490e:	4615      	mov	r5, r2
 8004910:	4622      	mov	r2, r4
 8004912:	462b      	mov	r3, r5
 8004914:	68f9      	ldr	r1, [r7, #12]
 8004916:	2002      	movs	r0, #2
 8004918:	f005 f80a 	bl	8009930 <HAL_FLASH_Program>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10c      	bne.n	800493c <flash_write+0x76>
            goto Exit;

        addr += 4; // 更新地址，指向下一个32位字
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3304      	adds	r3, #4
 8004926:	60fb      	str	r3, [r7, #12]
    for (i = 0 ; i < count ; i++)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	3301      	adds	r3, #1
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	429a      	cmp	r2, r3
 8004934:	d3e2      	bcc.n	80048fc <flash_write+0x36>

    }

    ret = data_len;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e000      	b.n	800493e <flash_write+0x78>
            goto Exit;
 800493c:	bf00      	nop
Exit:
    HAL_FLASH_Lock(); // 锁定Flash存储器
 800493e:	f005 f983 	bl	8009c48 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8004942:	b662      	cpsie	i
}
 8004944:	bf00      	nop
    __enable_irq(); // 使能中断

    return ret;
 8004946:	697b      	ldr	r3, [r7, #20]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bdb0      	pop	{r4, r5, r7, pc}

08004950 <flash_read>:

// 从Flash存储器读取数据
int flash_read(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for(i = 0; i < data_len; i++)
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	e00b      	b.n	800497a <flash_read+0x2a>
        data[i] = *(uint8_t *) (addr + i); // 从Flash存储器中读取字节数据
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	4413      	add	r3, r2
 8004968:	4619      	mov	r1, r3
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	4413      	add	r3, r2
 8004970:	780a      	ldrb	r2, [r1, #0]
 8004972:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < data_len; i++)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	3301      	adds	r3, #1
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	429a      	cmp	r2, r3
 8004980:	d3ef      	bcc.n	8004962 <flash_read+0x12>

    return i;
 8004982:	697b      	ldr	r3, [r7, #20]
}
 8004984:	4618      	mov	r0, r3
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr
	...

08004990 <HAL_FSMC_MspInit>:
  /* USER CODE END FSMC_Init 2 */
}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004996:	f107 0308 	add.w	r3, r7, #8
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	609a      	str	r2, [r3, #8]
 80049a2:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80049a4:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <HAL_FSMC_MspInit+0x90>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d135      	bne.n	8004a18 <HAL_FSMC_MspInit+0x88>
    return;
  }
  FSMC_Initialized = 1;
 80049ac:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <HAL_FSMC_MspInit+0x90>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80049b2:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_FSMC_MspInit+0x94>)
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_FSMC_MspInit+0x94>)
 80049b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049bc:	6153      	str	r3, [r2, #20]
 80049be:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_FSMC_MspInit+0x94>)
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c6:	607b      	str	r3, [r7, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80049ca:	f64f 7380 	movw	r3, #65408	; 0xff80
 80049ce:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d0:	2302      	movs	r3, #2
 80049d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049d4:	2303      	movs	r3, #3
 80049d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049d8:	f107 0308 	add.w	r3, r7, #8
 80049dc:	4619      	mov	r1, r3
 80049de:	4812      	ldr	r0, [pc, #72]	; (8004a28 <HAL_FSMC_MspInit+0x98>)
 80049e0:	f005 fa9c 	bl	8009f1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80049e4:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80049e8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ea:	2302      	movs	r3, #2
 80049ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049ee:	2303      	movs	r3, #3
 80049f0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049f2:	f107 0308 	add.w	r3, r7, #8
 80049f6:	4619      	mov	r1, r3
 80049f8:	480c      	ldr	r0, [pc, #48]	; (8004a2c <HAL_FSMC_MspInit+0x9c>)
 80049fa:	f005 fa8f 	bl	8009f1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80049fe:	2340      	movs	r3, #64	; 0x40
 8004a00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a0a:	f107 0308 	add.w	r3, r7, #8
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4806      	ldr	r0, [pc, #24]	; (8004a2c <HAL_FSMC_MspInit+0x9c>)
 8004a12:	f005 fa83 	bl	8009f1c <HAL_GPIO_Init>
 8004a16:	e000      	b.n	8004a1a <HAL_FSMC_MspInit+0x8a>
    return;
 8004a18:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000c7c 	.word	0x20000c7c
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40011800 	.word	0x40011800
 8004a2c:	40011400 	.word	0x40011400

08004a30 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8004a38:	f7ff ffaa 	bl	8004990 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004a3c:	bf00      	nop
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <nand_gpio_init>:
static fsmc_conf_t fsmc_conf;   // FSMC NAND Flash的配置结构体

static uint32_t FSMC_Initialized = 0;

static void nand_gpio_init(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN FSMC_MspInit 0 */

	  /* USER CODE END FSMC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a4a:	f107 0308 	add.w	r3, r7, #8
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	60da      	str	r2, [r3, #12]
	  if (FSMC_Initialized) {
 8004a58:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <nand_gpio_init+0xa0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d13d      	bne.n	8004adc <nand_gpio_init+0x98>
	    return;
	  }
	  FSMC_Initialized = 1;
 8004a60:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <nand_gpio_init+0xa0>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

	  /* Peripheral clock enable */
	  __HAL_RCC_FSMC_CLK_ENABLE();
 8004a66:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <nand_gpio_init+0xa4>)
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ae8 <nand_gpio_init+0xa4>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6153      	str	r3, [r2, #20]
 8004a72:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <nand_gpio_init+0xa4>)
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
	  PD5   ------> FSMC_NWE
	  PD6   ------> FSMC_NWAIT
	  PD7   ------> FSMC_NCE2
	  */
	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004a7e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004a82:	60bb      	str	r3, [r7, #8]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a84:	2302      	movs	r3, #2
 8004a86:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	4619      	mov	r1, r3
 8004a92:	4816      	ldr	r0, [pc, #88]	; (8004aec <nand_gpio_init+0xa8>)
 8004a94:	f005 fa42 	bl	8009f1c <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004a98:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8004a9c:	60bb      	str	r3, [r7, #8]
	                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
	                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004aa6:	f107 0308 	add.w	r3, r7, #8
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4810      	ldr	r0, [pc, #64]	; (8004af0 <nand_gpio_init+0xac>)
 8004aae:	f005 fa35 	bl	8009f1c <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004ab2:	2340      	movs	r3, #64	; 0x40
 8004ab4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004abe:	f107 0308 	add.w	r3, r7, #8
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	480a      	ldr	r0, [pc, #40]	; (8004af0 <nand_gpio_init+0xac>)
 8004ac6:	f005 fa29 	bl	8009f1c <HAL_GPIO_Init>

	  /* Peripheral interrupt init */
	  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8004aca:	2200      	movs	r2, #0
 8004acc:	2100      	movs	r1, #0
 8004ace:	2030      	movs	r0, #48	; 0x30
 8004ad0:	f004 fda7 	bl	8009622 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004ad4:	2030      	movs	r0, #48	; 0x30
 8004ad6:	f004 fdc0 	bl	800965a <HAL_NVIC_EnableIRQ>
 8004ada:	e000      	b.n	8004ade <nand_gpio_init+0x9a>
	    return;
 8004adc:	bf00      	nop
	  /* USER CODE BEGIN FSMC_MspInit 1 */

	  /* USER CODE END FSMC_MspInit 1 */
}
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20000c98 	.word	0x20000c98
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40011800 	.word	0x40011800
 8004af0:	40011400 	.word	0x40011400

08004af4 <nand_fsmc_init>:


static void nand_fsmc_init()
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af00      	add	r7, sp, #0
//    FSMC_NAND_InitTypeDef fsmc_init;

//    FSMC_NAND_PCC_TimingTypeDef timing_init;
    FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8004afa:	f107 0318 	add.w	r3, r7, #24
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	609a      	str	r2, [r3, #8]
 8004b06:	60da      	str	r2, [r3, #12]
    FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8004b08:	f107 0308 	add.w	r3, r7, #8
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	609a      	str	r2, [r3, #8]
 8004b14:	60da      	str	r2, [r3, #12]

//    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
//    __HAL_RCC_FSMC_CLK_ENABLE();

    hnand1.Instance = FSMC_NAND_DEVICE;
 8004b16:	4b28      	ldr	r3, [pc, #160]	; (8004bb8 <nand_fsmc_init+0xc4>)
 8004b18:	4a28      	ldr	r2, [pc, #160]	; (8004bbc <nand_fsmc_init+0xc8>)
 8004b1a:	601a      	str	r2, [r3, #0]
//    fsmc_init.FSMC_Bank = FSMC_Bank2_NAND;  // 设置FSMC NAND Flash的相关参数
    hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8004b1c:	4b26      	ldr	r3, [pc, #152]	; (8004bb8 <nand_fsmc_init+0xc4>)
 8004b1e:	2210      	movs	r2, #16
 8004b20:	605a      	str	r2, [r3, #4]
//    fsmc_init.FSMC_Waitfeature = FSMC_Waitfeature_Enable;
    hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8004b22:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <nand_fsmc_init+0xc4>)
 8004b24:	2202      	movs	r2, #2
 8004b26:	609a      	str	r2, [r3, #8]
//    fsmc_init.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
    hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8004b28:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <nand_fsmc_init+0xc4>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60da      	str	r2, [r3, #12]
//    fsmc_init.FSMC_ECC = FSMC_ECC_Enable;
    hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8004b2e:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <nand_fsmc_init+0xc4>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	611a      	str	r2, [r3, #16]
//    fsmc_init.FSMC_ECCPageSize = FSMC_ECCPageSize_2048Bytes;
    hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8004b34:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <nand_fsmc_init+0xc4>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	615a      	str	r2, [r3, #20]
//    fsmc_init.FSMC_TCLRSetupTime = fsmc_conf.clr_setup_time;
    hnand1.Init.TCLRSetupTime = fsmc_conf.clr_setup_time;
 8004b3a:	4b21      	ldr	r3, [pc, #132]	; (8004bc0 <nand_fsmc_init+0xcc>)
 8004b3c:	791b      	ldrb	r3, [r3, #4]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <nand_fsmc_init+0xc4>)
 8004b42:	619a      	str	r2, [r3, #24]
//    fsmc_init.FSMC_TARSetupTime = fsmc_conf.ar_setup_time;
    hnand1.Init.TARSetupTime = fsmc_conf.ar_setup_time;
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <nand_fsmc_init+0xcc>)
 8004b46:	795b      	ldrb	r3, [r3, #5]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4b1b      	ldr	r3, [pc, #108]	; (8004bb8 <nand_fsmc_init+0xc4>)
 8004b4c:	61da      	str	r2, [r3, #28]
    /* ComSpaceTiming */
//    timing_init.FSMC_SetupTime = fsmc_conf.setup_time;  // 设置时序参数
    ComSpaceTiming.SetupTime = fsmc_conf.setup_time;  // 设置时序参数
 8004b4e:	4b1c      	ldr	r3, [pc, #112]	; (8004bc0 <nand_fsmc_init+0xcc>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	61bb      	str	r3, [r7, #24]
//    timing_init.FSMC_WaitSetupTime = fsmc_conf.wait_setup_time;
    ComSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 8004b54:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <nand_fsmc_init+0xcc>)
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	61fb      	str	r3, [r7, #28]
//    timing_init.FSMC_HoldSetupTime = fsmc_conf.hold_setup_time;
    ComSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 8004b5a:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <nand_fsmc_init+0xcc>)
 8004b5c:	789b      	ldrb	r3, [r3, #2]
 8004b5e:	623b      	str	r3, [r7, #32]
//    timing_init.FSMC_HiZSetupTime = fsmc_conf.hi_z_setup_time;
    ComSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 8004b60:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <nand_fsmc_init+0xcc>)
 8004b62:	78db      	ldrb	r3, [r3, #3]
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
    /* AttSpaceTiming */
    AttSpaceTiming.SetupTime = fsmc_conf.setup_time;
 8004b66:	4b16      	ldr	r3, [pc, #88]	; (8004bc0 <nand_fsmc_init+0xcc>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	60bb      	str	r3, [r7, #8]
    AttSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 8004b6c:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <nand_fsmc_init+0xcc>)
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	60fb      	str	r3, [r7, #12]
    AttSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 8004b72:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <nand_fsmc_init+0xcc>)
 8004b74:	789b      	ldrb	r3, [r3, #2]
 8004b76:	613b      	str	r3, [r7, #16]
    AttSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 8004b78:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <nand_fsmc_init+0xcc>)
 8004b7a:	78db      	ldrb	r3, [r3, #3]
 8004b7c:	617b      	str	r3, [r7, #20]

    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8004b7e:	f107 0208 	add.w	r2, r7, #8
 8004b82:	f107 0318 	add.w	r3, r7, #24
 8004b86:	4619      	mov	r1, r3
 8004b88:	480b      	ldr	r0, [pc, #44]	; (8004bb8 <nand_fsmc_init+0xc4>)
 8004b8a:	f005 fc3f 	bl	800a40c <HAL_NAND_Init>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <nand_fsmc_init+0xa4>
    {
      Error_Handler( );
 8004b94:	f000 feb5 	bl	8005902 <Error_Handler>
    }  // 初始化FSMC NAND Flash

//    FSMC_NANDCmd(FSMC_Bank_NAND, ENABLE);  // 使能FSMC NAND Flash
    __HAL_RCC_FSMC_CLK_ENABLE();
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <nand_fsmc_init+0xd0>)
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <nand_fsmc_init+0xd0>)
 8004b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba2:	6153      	str	r3, [r2, #20]
 8004ba4:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <nand_fsmc_init+0xd0>)
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
}
 8004bb0:	bf00      	nop
 8004bb2:	3728      	adds	r7, #40	; 0x28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	20000c3c 	.word	0x20000c3c
 8004bbc:	a0000060 	.word	0xa0000060
 8004bc0:	20000c80 	.word	0x20000c80
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <nand_print_fsmc_info>:

static void nand_print_fsmc_info()
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
    DEBUG_PRINT("Setup time: %d\r\n", fsmc_conf.setup_time);
 8004bcc:	4b42      	ldr	r3, [pc, #264]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4842      	ldr	r0, [pc, #264]	; (8004cdc <nand_print_fsmc_info+0x114>)
 8004bd4:	f00e fda0 	bl	8013718 <iprintf>
    DEBUG_PRINT("Wait setup time: %d\r\n", fsmc_conf.wait_setup_time);
 8004bd8:	4b3f      	ldr	r3, [pc, #252]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4840      	ldr	r0, [pc, #256]	; (8004ce0 <nand_print_fsmc_info+0x118>)
 8004be0:	f00e fd9a 	bl	8013718 <iprintf>
    DEBUG_PRINT("Hold setup time: %d\r\n", fsmc_conf.hold_setup_time);
 8004be4:	4b3c      	ldr	r3, [pc, #240]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004be6:	789b      	ldrb	r3, [r3, #2]
 8004be8:	4619      	mov	r1, r3
 8004bea:	483e      	ldr	r0, [pc, #248]	; (8004ce4 <nand_print_fsmc_info+0x11c>)
 8004bec:	f00e fd94 	bl	8013718 <iprintf>
    DEBUG_PRINT("HiZ setup time: %d\r\n", fsmc_conf.hi_z_setup_time);
 8004bf0:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004bf2:	78db      	ldrb	r3, [r3, #3]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	483c      	ldr	r0, [pc, #240]	; (8004ce8 <nand_print_fsmc_info+0x120>)
 8004bf8:	f00e fd8e 	bl	8013718 <iprintf>
    DEBUG_PRINT("CLR setup time: %d\r\n", fsmc_conf.clr_setup_time);
 8004bfc:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004bfe:	791b      	ldrb	r3, [r3, #4]
 8004c00:	4619      	mov	r1, r3
 8004c02:	483a      	ldr	r0, [pc, #232]	; (8004cec <nand_print_fsmc_info+0x124>)
 8004c04:	f00e fd88 	bl	8013718 <iprintf>
    DEBUG_PRINT("AR setup time: %d\r\n", fsmc_conf.ar_setup_time);
 8004c08:	4b33      	ldr	r3, [pc, #204]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c0a:	795b      	ldrb	r3, [r3, #5]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4838      	ldr	r0, [pc, #224]	; (8004cf0 <nand_print_fsmc_info+0x128>)
 8004c10:	f00e fd82 	bl	8013718 <iprintf>
    DEBUG_PRINT("Row cycles: %d\r\n", fsmc_conf.row_cycles);
 8004c14:	4b30      	ldr	r3, [pc, #192]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c16:	799b      	ldrb	r3, [r3, #6]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4836      	ldr	r0, [pc, #216]	; (8004cf4 <nand_print_fsmc_info+0x12c>)
 8004c1c:	f00e fd7c 	bl	8013718 <iprintf>
    DEBUG_PRINT("Col. cycles: %d\r\n", fsmc_conf.col_cycles);
 8004c20:	4b2d      	ldr	r3, [pc, #180]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c22:	79db      	ldrb	r3, [r3, #7]
 8004c24:	4619      	mov	r1, r3
 8004c26:	4834      	ldr	r0, [pc, #208]	; (8004cf8 <nand_print_fsmc_info+0x130>)
 8004c28:	f00e fd76 	bl	8013718 <iprintf>
    DEBUG_PRINT("Read command 1: %d\r\n", fsmc_conf.read1_cmd);
 8004c2c:	4b2a      	ldr	r3, [pc, #168]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c2e:	7a1b      	ldrb	r3, [r3, #8]
 8004c30:	4619      	mov	r1, r3
 8004c32:	4832      	ldr	r0, [pc, #200]	; (8004cfc <nand_print_fsmc_info+0x134>)
 8004c34:	f00e fd70 	bl	8013718 <iprintf>
    DEBUG_PRINT("Read command 2: %d\r\n", fsmc_conf.read2_cmd);
 8004c38:	4b27      	ldr	r3, [pc, #156]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c3a:	7a5b      	ldrb	r3, [r3, #9]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4830      	ldr	r0, [pc, #192]	; (8004d00 <nand_print_fsmc_info+0x138>)
 8004c40:	f00e fd6a 	bl	8013718 <iprintf>
    DEBUG_PRINT("Read spare command: %d\r\n", fsmc_conf.read_spare_cmd);    
 8004c44:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c46:	7a9b      	ldrb	r3, [r3, #10]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	482e      	ldr	r0, [pc, #184]	; (8004d04 <nand_print_fsmc_info+0x13c>)
 8004c4c:	f00e fd64 	bl	8013718 <iprintf>
    DEBUG_PRINT("Read ID command: %d\r\n", fsmc_conf.read_id_cmd);
 8004c50:	4b21      	ldr	r3, [pc, #132]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c52:	7adb      	ldrb	r3, [r3, #11]
 8004c54:	4619      	mov	r1, r3
 8004c56:	482c      	ldr	r0, [pc, #176]	; (8004d08 <nand_print_fsmc_info+0x140>)
 8004c58:	f00e fd5e 	bl	8013718 <iprintf>
    DEBUG_PRINT("Reset command: %d\r\n", fsmc_conf.reset_cmd);
 8004c5c:	4b1e      	ldr	r3, [pc, #120]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c5e:	7b1b      	ldrb	r3, [r3, #12]
 8004c60:	4619      	mov	r1, r3
 8004c62:	482a      	ldr	r0, [pc, #168]	; (8004d0c <nand_print_fsmc_info+0x144>)
 8004c64:	f00e fd58 	bl	8013718 <iprintf>
    DEBUG_PRINT("Write 1 command: %d\r\n", fsmc_conf.write1_cmd);
 8004c68:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c6a:	7b5b      	ldrb	r3, [r3, #13]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4828      	ldr	r0, [pc, #160]	; (8004d10 <nand_print_fsmc_info+0x148>)
 8004c70:	f00e fd52 	bl	8013718 <iprintf>
    DEBUG_PRINT("Write 2 command: %d\r\n", fsmc_conf.write2_cmd);
 8004c74:	4b18      	ldr	r3, [pc, #96]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c76:	7b9b      	ldrb	r3, [r3, #14]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4826      	ldr	r0, [pc, #152]	; (8004d14 <nand_print_fsmc_info+0x14c>)
 8004c7c:	f00e fd4c 	bl	8013718 <iprintf>
    DEBUG_PRINT("Erase 1 command: %d\r\n", fsmc_conf.erase1_cmd);
 8004c80:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c82:	7bdb      	ldrb	r3, [r3, #15]
 8004c84:	4619      	mov	r1, r3
 8004c86:	4824      	ldr	r0, [pc, #144]	; (8004d18 <nand_print_fsmc_info+0x150>)
 8004c88:	f00e fd46 	bl	8013718 <iprintf>
    DEBUG_PRINT("Erase 2 command: %d\r\n", fsmc_conf.erase2_cmd);
 8004c8c:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c8e:	7c1b      	ldrb	r3, [r3, #16]
 8004c90:	4619      	mov	r1, r3
 8004c92:	4822      	ldr	r0, [pc, #136]	; (8004d1c <nand_print_fsmc_info+0x154>)
 8004c94:	f00e fd40 	bl	8013718 <iprintf>
    DEBUG_PRINT("Status command: %d\r\n", fsmc_conf.status_cmd);
 8004c98:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004c9a:	7c5b      	ldrb	r3, [r3, #17]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4820      	ldr	r0, [pc, #128]	; (8004d20 <nand_print_fsmc_info+0x158>)
 8004ca0:	f00e fd3a 	bl	8013718 <iprintf>
    DEBUG_PRINT("Set feature command: %d\r\n", fsmc_conf.set_features_cmd);
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004ca6:	7c9b      	ldrb	r3, [r3, #18]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	481e      	ldr	r0, [pc, #120]	; (8004d24 <nand_print_fsmc_info+0x15c>)
 8004cac:	f00e fd34 	bl	8013718 <iprintf>
    DEBUG_PRINT("Enable ECC address: %d\r\n", fsmc_conf.enable_ecc_addr);
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004cb2:	7cdb      	ldrb	r3, [r3, #19]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	481c      	ldr	r0, [pc, #112]	; (8004d28 <nand_print_fsmc_info+0x160>)
 8004cb8:	f00e fd2e 	bl	8013718 <iprintf>
    DEBUG_PRINT("Enable ECC value: %d\r\n", fsmc_conf.enable_ecc_value);
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004cbe:	7d1b      	ldrb	r3, [r3, #20]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	481a      	ldr	r0, [pc, #104]	; (8004d2c <nand_print_fsmc_info+0x164>)
 8004cc4:	f00e fd28 	bl	8013718 <iprintf>
    DEBUG_PRINT("Disable ECC value: %d\r\n", fsmc_conf.disable_ecc_value);
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <nand_print_fsmc_info+0x110>)
 8004cca:	7d5b      	ldrb	r3, [r3, #21]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4818      	ldr	r0, [pc, #96]	; (8004d30 <nand_print_fsmc_info+0x168>)
 8004cd0:	f00e fd22 	bl	8013718 <iprintf>
}
 8004cd4:	bf00      	nop
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000c80 	.word	0x20000c80
 8004cdc:	08014560 	.word	0x08014560
 8004ce0:	08014574 	.word	0x08014574
 8004ce4:	0801458c 	.word	0x0801458c
 8004ce8:	080145a4 	.word	0x080145a4
 8004cec:	080145bc 	.word	0x080145bc
 8004cf0:	080145d4 	.word	0x080145d4
 8004cf4:	080145e8 	.word	0x080145e8
 8004cf8:	080145fc 	.word	0x080145fc
 8004cfc:	08014610 	.word	0x08014610
 8004d00:	08014628 	.word	0x08014628
 8004d04:	08014640 	.word	0x08014640
 8004d08:	0801465c 	.word	0x0801465c
 8004d0c:	08014674 	.word	0x08014674
 8004d10:	08014688 	.word	0x08014688
 8004d14:	080146a0 	.word	0x080146a0
 8004d18:	080146b8 	.word	0x080146b8
 8004d1c:	080146d0 	.word	0x080146d0
 8004d20:	080146e8 	.word	0x080146e8
 8004d24:	08014700 	.word	0x08014700
 8004d28:	0801471c 	.word	0x0801471c
 8004d2c:	08014738 	.word	0x08014738
 8004d30:	08014750 	.word	0x08014750

08004d34 <nand_reset>:

static void nand_reset()
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.reset_cmd;  // 发送复位命令给NAND Flash
 8004d38:	4b03      	ldr	r3, [pc, #12]	; (8004d48 <nand_reset+0x14>)
 8004d3a:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <nand_reset+0x18>)
 8004d3c:	7b12      	ldrb	r2, [r2, #12]
 8004d3e:	701a      	strb	r2, [r3, #0]
}
 8004d40:	bf00      	nop
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr
 8004d48:	70010000 	.word	0x70010000
 8004d4c:	20000c80 	.word	0x20000c80

08004d50 <nand_init>:

static int nand_init(void *conf, uint32_t conf_size)
{
 8004d50:	b5b0      	push	{r4, r5, r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(fsmc_conf_t))
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b15      	cmp	r3, #21
 8004d5e:	d802      	bhi.n	8004d66 <nand_init+0x16>
        return -1;
 8004d60:	f04f 33ff 	mov.w	r3, #4294967295
 8004d64:	e015      	b.n	8004d92 <nand_init+0x42>
   
    fsmc_conf = *(fsmc_conf_t *)conf;  // 从传入的配置结构体中获取配置参数
 8004d66:	4a0d      	ldr	r2, [pc, #52]	; (8004d9c <nand_init+0x4c>)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4614      	mov	r4, r2
 8004d6c:	461d      	mov	r5, r3
 8004d6e:	6828      	ldr	r0, [r5, #0]
 8004d70:	6869      	ldr	r1, [r5, #4]
 8004d72:	68aa      	ldr	r2, [r5, #8]
 8004d74:	68eb      	ldr	r3, [r5, #12]
 8004d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d78:	6928      	ldr	r0, [r5, #16]
 8004d7a:	6020      	str	r0, [r4, #0]
 8004d7c:	8aab      	ldrh	r3, [r5, #20]
 8004d7e:	80a3      	strh	r3, [r4, #4]

    nand_gpio_init();  // 初始化GPIO引脚
 8004d80:	f7ff fe60 	bl	8004a44 <nand_gpio_init>
    nand_fsmc_init();  // 初始化FSMC NAND Flash
 8004d84:	f7ff feb6 	bl	8004af4 <nand_fsmc_init>
    nand_print_fsmc_info();  // 打印FSMC的配置信息
 8004d88:	f7ff ff1e 	bl	8004bc8 <nand_print_fsmc_info>
    nand_reset();  // 复位NAND Flash
 8004d8c:	f7ff ffd2 	bl	8004d34 <nand_reset>

    return 0;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bdb0      	pop	{r4, r5, r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000c80 	.word	0x20000c80

08004da0 <nand_uninit>:

static void nand_uninit()
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
    //TODO
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <nand_read_status>:

static uint32_t nand_read_status()
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
    uint32_t data, status;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.status_cmd;  // 发送状态命令给NAND Flash
 8004db2:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <nand_read_status+0x48>)
 8004db4:	4a10      	ldr	r2, [pc, #64]	; (8004df8 <nand_read_status+0x4c>)
 8004db6:	7c52      	ldrb	r2, [r2, #17]
 8004db8:	701a      	strb	r2, [r3, #0]
    data = *(__IO uint8_t *)(Bank_NAND_ADDR);
 8004dba:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	603b      	str	r3, [r7, #0]

    if ((data & NAND_ERROR) == NAND_ERROR)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <nand_read_status+0x28>
        status = FLASH_STATUS_ERROR;
 8004dce:	2302      	movs	r3, #2
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	e009      	b.n	8004de8 <nand_read_status+0x3c>
    else if ((data & NAND_READY) == NAND_READY)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <nand_read_status+0x38>
        status = FLASH_STATUS_READY;
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
 8004de2:	e001      	b.n	8004de8 <nand_read_status+0x3c>
    else
        status = FLASH_STATUS_BUSY;
 8004de4:	2301      	movs	r3, #1
 8004de6:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的状态
 8004de8:	687b      	ldr	r3, [r7, #4]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr
 8004df4:	70010000 	.word	0x70010000
 8004df8:	20000c80 	.word	0x20000c80

08004dfc <nand_get_status>:

static uint32_t nand_get_status()
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8004e02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e06:	603b      	str	r3, [r7, #0]

    status = nand_read_status();
 8004e08:	f7ff ffd0 	bl	8004dac <nand_read_status>
 8004e0c:	6078      	str	r0, [r7, #4]

    /* 等待NAND操作完成或超时发生 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8004e0e:	e005      	b.n	8004e1c <nand_get_status+0x20>
    {
        status = nand_read_status();
 8004e10:	f7ff ffcc 	bl	8004dac <nand_read_status>
 8004e14:	6078      	str	r0, [r7, #4]
        timeout --;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d102      	bne.n	8004e28 <nand_get_status+0x2c>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f3      	bne.n	8004e10 <nand_get_status+0x14>
    }

    if (!timeout)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <nand_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的最终状态
 8004e32:	687b      	ldr	r3, [r7, #4]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <nand_read_id>:

// 从NAND Flash读取ID
static void nand_read_id(chip_id_t *nand_id)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
    uint32_t data = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_id_cmd;  // 发送读取ID的命令给NAND Flash
 8004e48:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <nand_read_id+0x6c>)
 8004e4a:	4a18      	ldr	r2, [pc, #96]	; (8004eac <nand_read_id+0x70>)
 8004e4c:	7ad2      	ldrb	r2, [r2, #11]
 8004e4e:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004e50:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <nand_read_id+0x74>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]

    /* 从NAND Flash读取ID的序列 */
    data = *(__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA);
 8004e56:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60fb      	str	r3, [r7, #12]
    nand_id->maker_id   = ADDR_1st_CYCLE(data);  // 读取制造商ID
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	701a      	strb	r2, [r3, #0]
    nand_id->device_id  = ADDR_2nd_CYCLE(data);  // 读取设备ID
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	0a1b      	lsrs	r3, r3, #8
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	705a      	strb	r2, [r3, #1]
    nand_id->third_id   = ADDR_3rd_CYCLE(data);  // 读取第三个ID
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	0c1b      	lsrs	r3, r3, #16
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	709a      	strb	r2, [r3, #2]
    nand_id->fourth_id  = ADDR_4th_CYCLE(data);  // 读取第四个ID
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	0e1b      	lsrs	r3, r3, #24
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	70da      	strb	r2, [r3, #3]

    data = *((__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA) + 1);
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <nand_read_id+0x78>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60fb      	str	r3, [r7, #12]
    nand_id->fifth_id   = ADDR_1st_CYCLE(data);  // 读取第五个ID
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	711a      	strb	r2, [r3, #4]
    nand_id->sixth_id   = ADDR_2nd_CYCLE(data);  // 读取第六个ID
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	0a1b      	lsrs	r3, r3, #8
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	715a      	strb	r2, [r3, #5]
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	70010000 	.word	0x70010000
 8004eac:	20000c80 	.word	0x20000c80
 8004eb0:	70020000 	.word	0x70020000
 8004eb4:	70000004 	.word	0x70000004

08004eb8 <nand_write_page_async>:

// 异步方式写入NAND Flash的页数据
static void nand_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write1_cmd;  // 发送写入命令给NAND Flash
 8004ec4:	4b4c      	ldr	r3, [pc, #304]	; (8004ff8 <nand_write_page_async+0x140>)
 8004ec6:	4a4d      	ldr	r2, [pc, #308]	; (8004ffc <nand_write_page_async+0x144>)
 8004ec8:	7b52      	ldrb	r2, [r2, #13]
 8004eca:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8004ecc:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <nand_write_page_async+0x144>)
 8004ece:	79db      	ldrb	r3, [r3, #7]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d82c      	bhi.n	8004f30 <nand_write_page_async+0x78>
 8004ed6:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <nand_write_page_async+0x24>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004ef5 	.word	0x08004ef5
 8004ee4:	08004f03 	.word	0x08004f03
 8004ee8:	08004f17 	.word	0x08004f17
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004eec:	4b44      	ldr	r3, [pc, #272]	; (8005000 <nand_write_page_async+0x148>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	701a      	strb	r2, [r3, #0]
        break;
 8004ef2:	e01e      	b.n	8004f32 <nand_write_page_async+0x7a>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004ef4:	4b42      	ldr	r3, [pc, #264]	; (8005000 <nand_write_page_async+0x148>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004efa:	4b41      	ldr	r3, [pc, #260]	; (8005000 <nand_write_page_async+0x148>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]
        break;
 8004f00:	e017      	b.n	8004f32 <nand_write_page_async+0x7a>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f02:	4b3f      	ldr	r3, [pc, #252]	; (8005000 <nand_write_page_async+0x148>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f08:	4b3d      	ldr	r3, [pc, #244]	; (8005000 <nand_write_page_async+0x148>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f0e:	4b3c      	ldr	r3, [pc, #240]	; (8005000 <nand_write_page_async+0x148>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
        break;
 8004f14:	e00d      	b.n	8004f32 <nand_write_page_async+0x7a>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f16:	4b3a      	ldr	r3, [pc, #232]	; (8005000 <nand_write_page_async+0x148>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f1c:	4b38      	ldr	r3, [pc, #224]	; (8005000 <nand_write_page_async+0x148>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f22:	4b37      	ldr	r3, [pc, #220]	; (8005000 <nand_write_page_async+0x148>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f28:	4b35      	ldr	r3, [pc, #212]	; (8005000 <nand_write_page_async+0x148>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
        break;
 8004f2e:	e000      	b.n	8004f32 <nand_write_page_async+0x7a>
    default:
        break;
 8004f30:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8004f32:	4b32      	ldr	r3, [pc, #200]	; (8004ffc <nand_write_page_async+0x144>)
 8004f34:	799b      	ldrb	r3, [r3, #6]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d83d      	bhi.n	8004fb8 <nand_write_page_async+0x100>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <nand_write_page_async+0x8c>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f55 	.word	0x08004f55
 8004f48:	08004f5f 	.word	0x08004f5f
 8004f4c:	08004f73 	.word	0x08004f73
 8004f50:	08004f91 	.word	0x08004f91
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8004f54:	4b2a      	ldr	r3, [pc, #168]	; (8005000 <nand_write_page_async+0x148>)
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]
        break;
 8004f5c:	e02d      	b.n	8004fba <nand_write_page_async+0x102>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8004f5e:	4b28      	ldr	r3, [pc, #160]	; (8005000 <nand_write_page_async+0x148>)
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	0a1a      	lsrs	r2, r3, #8
 8004f6a:	4b25      	ldr	r3, [pc, #148]	; (8005000 <nand_write_page_async+0x148>)
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]
        break;
 8004f70:	e023      	b.n	8004fba <nand_write_page_async+0x102>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8004f72:	4b23      	ldr	r3, [pc, #140]	; (8005000 <nand_write_page_async+0x148>)
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	0a1a      	lsrs	r2, r3, #8
 8004f7e:	4b20      	ldr	r3, [pc, #128]	; (8005000 <nand_write_page_async+0x148>)
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	0c1a      	lsrs	r2, r3, #16
 8004f88:	4b1d      	ldr	r3, [pc, #116]	; (8005000 <nand_write_page_async+0x148>)
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]
        break;
 8004f8e:	e014      	b.n	8004fba <nand_write_page_async+0x102>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8004f90:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <nand_write_page_async+0x148>)
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	0a1a      	lsrs	r2, r3, #8
 8004f9c:	4b18      	ldr	r3, [pc, #96]	; (8005000 <nand_write_page_async+0x148>)
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	0c1a      	lsrs	r2, r3, #16
 8004fa6:	4b16      	ldr	r3, [pc, #88]	; (8005000 <nand_write_page_async+0x148>)
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	0e1a      	lsrs	r2, r3, #24
 8004fb0:	4b13      	ldr	r3, [pc, #76]	; (8005000 <nand_write_page_async+0x148>)
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]
        break;
 8004fb6:	e000      	b.n	8004fba <nand_write_page_async+0x102>
    default:
        break;
 8004fb8:	bf00      	nop
    }

    for(i = 0; i < page_size; i++)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	e009      	b.n	8004fd4 <nand_write_page_async+0x11c>
        *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = buf[i];  // 逐字节写入数据到NAND Flash的数据区
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	7013      	strb	r3, [r2, #0]
    for(i = 0; i < page_size; i++)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d3f1      	bcc.n	8004fc0 <nand_write_page_async+0x108>

    if (fsmc_conf.write2_cmd != UNDEFINED_CMD)
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <nand_write_page_async+0x144>)
 8004fde:	7b9b      	ldrb	r3, [r3, #14]
 8004fe0:	2bff      	cmp	r3, #255	; 0xff
 8004fe2:	d003      	beq.n	8004fec <nand_write_page_async+0x134>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write2_cmd;  // 发送写入命令2给NAND Flash
 8004fe4:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <nand_write_page_async+0x140>)
 8004fe6:	4a05      	ldr	r2, [pc, #20]	; (8004ffc <nand_write_page_async+0x144>)
 8004fe8:	7b92      	ldrb	r2, [r2, #14]
 8004fea:	701a      	strb	r2, [r3, #0]
}
 8004fec:	bf00      	nop
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	70010000 	.word	0x70010000
 8004ffc:	20000c80 	.word	0x20000c80
 8005000:	70020000 	.word	0x70020000

08005004 <nand_read_data>:

// 从NAND Flash读取数据
static uint32_t nand_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read1_cmd;  // 发送读取命令给NAND Flash
 8005012:	4b55      	ldr	r3, [pc, #340]	; (8005168 <nand_read_data+0x164>)
 8005014:	4a55      	ldr	r2, [pc, #340]	; (800516c <nand_read_data+0x168>)
 8005016:	7a12      	ldrb	r2, [r2, #8]
 8005018:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 800501a:	4b54      	ldr	r3, [pc, #336]	; (800516c <nand_read_data+0x168>)
 800501c:	79db      	ldrb	r3, [r3, #7]
 800501e:	3b01      	subs	r3, #1
 8005020:	2b03      	cmp	r3, #3
 8005022:	d83c      	bhi.n	800509e <nand_read_data+0x9a>
 8005024:	a201      	add	r2, pc, #4	; (adr r2, 800502c <nand_read_data+0x28>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	0800503d 	.word	0x0800503d
 8005030:	08005047 	.word	0x08005047
 8005034:	0800505b 	.word	0x0800505b
 8005038:	08005079 	.word	0x08005079
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 800503c:	4b4c      	ldr	r3, [pc, #304]	; (8005170 <nand_read_data+0x16c>)
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
        break;
 8005044:	e02c      	b.n	80050a0 <nand_read_data+0x9c>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8005046:	4b4a      	ldr	r3, [pc, #296]	; (8005170 <nand_read_data+0x16c>)
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	0a1a      	lsrs	r2, r3, #8
 8005052:	4b47      	ldr	r3, [pc, #284]	; (8005170 <nand_read_data+0x16c>)
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
        break;
 8005058:	e022      	b.n	80050a0 <nand_read_data+0x9c>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 800505a:	4b45      	ldr	r3, [pc, #276]	; (8005170 <nand_read_data+0x16c>)
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0a1a      	lsrs	r2, r3, #8
 8005066:	4b42      	ldr	r3, [pc, #264]	; (8005170 <nand_read_data+0x16c>)
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	0c1a      	lsrs	r2, r3, #16
 8005070:	4b3f      	ldr	r3, [pc, #252]	; (8005170 <nand_read_data+0x16c>)
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
        break;
 8005076:	e013      	b.n	80050a0 <nand_read_data+0x9c>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8005078:	4b3d      	ldr	r3, [pc, #244]	; (8005170 <nand_read_data+0x16c>)
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	0a1a      	lsrs	r2, r3, #8
 8005084:	4b3a      	ldr	r3, [pc, #232]	; (8005170 <nand_read_data+0x16c>)
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	0c1a      	lsrs	r2, r3, #16
 800508e:	4b38      	ldr	r3, [pc, #224]	; (8005170 <nand_read_data+0x16c>)
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page_offset);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	0e1a      	lsrs	r2, r3, #24
 8005098:	4b35      	ldr	r3, [pc, #212]	; (8005170 <nand_read_data+0x16c>)
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]
    default:
        break;
 800509e:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 80050a0:	4b32      	ldr	r3, [pc, #200]	; (800516c <nand_read_data+0x168>)
 80050a2:	799b      	ldrb	r3, [r3, #6]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d83c      	bhi.n	8005124 <nand_read_data+0x120>
 80050aa:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <nand_read_data+0xac>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050c1 	.word	0x080050c1
 80050b4:	080050cb 	.word	0x080050cb
 80050b8:	080050df 	.word	0x080050df
 80050bc:	080050fd 	.word	0x080050fd
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80050c0:	4b2b      	ldr	r3, [pc, #172]	; (8005170 <nand_read_data+0x16c>)
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]
        break;
 80050c8:	e02d      	b.n	8005126 <nand_read_data+0x122>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80050ca:	4b29      	ldr	r3, [pc, #164]	; (8005170 <nand_read_data+0x16c>)
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	0a1a      	lsrs	r2, r3, #8
 80050d6:	4b26      	ldr	r3, [pc, #152]	; (8005170 <nand_read_data+0x16c>)
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
        break;
 80050dc:	e023      	b.n	8005126 <nand_read_data+0x122>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80050de:	4b24      	ldr	r3, [pc, #144]	; (8005170 <nand_read_data+0x16c>)
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	0a1a      	lsrs	r2, r3, #8
 80050ea:	4b21      	ldr	r3, [pc, #132]	; (8005170 <nand_read_data+0x16c>)
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	0c1a      	lsrs	r2, r3, #16
 80050f4:	4b1e      	ldr	r3, [pc, #120]	; (8005170 <nand_read_data+0x16c>)
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
        break;
 80050fa:	e014      	b.n	8005126 <nand_read_data+0x122>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80050fc:	4b1c      	ldr	r3, [pc, #112]	; (8005170 <nand_read_data+0x16c>)
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	0a1a      	lsrs	r2, r3, #8
 8005108:	4b19      	ldr	r3, [pc, #100]	; (8005170 <nand_read_data+0x16c>)
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	0c1a      	lsrs	r2, r3, #16
 8005112:	4b17      	ldr	r3, [pc, #92]	; (8005170 <nand_read_data+0x16c>)
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	0e1a      	lsrs	r2, r3, #24
 800511c:	4b14      	ldr	r3, [pc, #80]	; (8005170 <nand_read_data+0x16c>)
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]
        break;
 8005122:	e000      	b.n	8005126 <nand_read_data+0x122>
    default:
        break;
 8005124:	bf00      	nop
    }

    if (fsmc_conf.read2_cmd != UNDEFINED_CMD)
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <nand_read_data+0x168>)
 8005128:	7a5b      	ldrb	r3, [r3, #9]
 800512a:	2bff      	cmp	r3, #255	; 0xff
 800512c:	d003      	beq.n	8005136 <nand_read_data+0x132>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read2_cmd;  // 发送读取命令2给NAND Flash
 800512e:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <nand_read_data+0x164>)
 8005130:	4a0e      	ldr	r2, [pc, #56]	; (800516c <nand_read_data+0x168>)
 8005132:	7a52      	ldrb	r2, [r2, #9]
 8005134:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < data_size; i++)
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	e00a      	b.n	8005152 <nand_read_data+0x14e>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 800513c:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	4413      	add	r3, r2
 8005146:	780a      	ldrb	r2, [r1, #0]
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3301      	adds	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d3f0      	bcc.n	800513c <nand_read_data+0x138>

    return nand_get_status();  // 获取NAND Flash的状态
 800515a:	f7ff fe4f 	bl	8004dfc <nand_get_status>
 800515e:	4603      	mov	r3, r0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	70010000 	.word	0x70010000
 800516c:	20000c80 	.word	0x20000c80
 8005170:	70020000 	.word	0x70020000

08005174 <nand_read_page>:

// 从NAND Flash读取数据页
static uint32_t nand_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
    return nand_read_data(buf, page, 0, page_size);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff ff3c 	bl	8005004 <nand_read_data>
 800518c:	4603      	mov	r3, r0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <nand_read_spare_data>:

// 从NAND Flash读取备用数据
static uint32_t nand_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
    uint32_t i;

    if (fsmc_conf.read_spare_cmd == UNDEFINED_CMD)
 80051a6:	4b54      	ldr	r3, [pc, #336]	; (80052f8 <nand_read_spare_data+0x160>)
 80051a8:	7a9b      	ldrb	r3, [r3, #10]
 80051aa:	2bff      	cmp	r3, #255	; 0xff
 80051ac:	d101      	bne.n	80051b2 <nand_read_spare_data+0x1a>
        return FLASH_STATUS_INVALID_CMD;
 80051ae:	2304      	movs	r3, #4
 80051b0:	e09e      	b.n	80052f0 <nand_read_spare_data+0x158>

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_spare_cmd;  // 发送读取备用数据命令给NAND Flash
 80051b2:	4b52      	ldr	r3, [pc, #328]	; (80052fc <nand_read_spare_data+0x164>)
 80051b4:	4a50      	ldr	r2, [pc, #320]	; (80052f8 <nand_read_spare_data+0x160>)
 80051b6:	7a92      	ldrb	r2, [r2, #10]
 80051b8:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 80051ba:	4b4f      	ldr	r3, [pc, #316]	; (80052f8 <nand_read_spare_data+0x160>)
 80051bc:	79db      	ldrb	r3, [r3, #7]
 80051be:	3b01      	subs	r3, #1
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d83c      	bhi.n	800523e <nand_read_spare_data+0xa6>
 80051c4:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <nand_read_spare_data+0x34>)
 80051c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ca:	bf00      	nop
 80051cc:	080051dd 	.word	0x080051dd
 80051d0:	080051e7 	.word	0x080051e7
 80051d4:	080051fb 	.word	0x080051fb
 80051d8:	08005219 	.word	0x08005219
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80051dc:	4b48      	ldr	r3, [pc, #288]	; (8005300 <nand_read_spare_data+0x168>)
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]
        break;
 80051e4:	e02c      	b.n	8005240 <nand_read_spare_data+0xa8>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80051e6:	4b46      	ldr	r3, [pc, #280]	; (8005300 <nand_read_spare_data+0x168>)
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0a1a      	lsrs	r2, r3, #8
 80051f2:	4b43      	ldr	r3, [pc, #268]	; (8005300 <nand_read_spare_data+0x168>)
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
        break;
 80051f8:	e022      	b.n	8005240 <nand_read_spare_data+0xa8>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80051fa:	4b41      	ldr	r3, [pc, #260]	; (8005300 <nand_read_spare_data+0x168>)
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	0a1a      	lsrs	r2, r3, #8
 8005206:	4b3e      	ldr	r3, [pc, #248]	; (8005300 <nand_read_spare_data+0x168>)
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	0c1a      	lsrs	r2, r3, #16
 8005210:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <nand_read_spare_data+0x168>)
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]
        break;
 8005216:	e013      	b.n	8005240 <nand_read_spare_data+0xa8>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8005218:	4b39      	ldr	r3, [pc, #228]	; (8005300 <nand_read_spare_data+0x168>)
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	0a1a      	lsrs	r2, r3, #8
 8005224:	4b36      	ldr	r3, [pc, #216]	; (8005300 <nand_read_spare_data+0x168>)
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	0c1a      	lsrs	r2, r3, #16
 800522e:	4b34      	ldr	r3, [pc, #208]	; (8005300 <nand_read_spare_data+0x168>)
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(offset);  // 发送列地址的第4个周期
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	0e1a      	lsrs	r2, r3, #24
 8005238:	4b31      	ldr	r3, [pc, #196]	; (8005300 <nand_read_spare_data+0x168>)
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
    default:
        break;
 800523e:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8005240:	4b2d      	ldr	r3, [pc, #180]	; (80052f8 <nand_read_spare_data+0x160>)
 8005242:	799b      	ldrb	r3, [r3, #6]
 8005244:	3b01      	subs	r3, #1
 8005246:	2b03      	cmp	r3, #3
 8005248:	d83c      	bhi.n	80052c4 <nand_read_spare_data+0x12c>
 800524a:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <nand_read_spare_data+0xb8>)
 800524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005250:	08005261 	.word	0x08005261
 8005254:	0800526b 	.word	0x0800526b
 8005258:	0800527f 	.word	0x0800527f
 800525c:	0800529d 	.word	0x0800529d
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8005260:	4b27      	ldr	r3, [pc, #156]	; (8005300 <nand_read_spare_data+0x168>)
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
        break;
 8005268:	e02d      	b.n	80052c6 <nand_read_spare_data+0x12e>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800526a:	4b25      	ldr	r3, [pc, #148]	; (8005300 <nand_read_spare_data+0x168>)
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	0a1a      	lsrs	r2, r3, #8
 8005276:	4b22      	ldr	r3, [pc, #136]	; (8005300 <nand_read_spare_data+0x168>)
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
        break;
 800527c:	e023      	b.n	80052c6 <nand_read_spare_data+0x12e>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800527e:	4b20      	ldr	r3, [pc, #128]	; (8005300 <nand_read_spare_data+0x168>)
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	0a1a      	lsrs	r2, r3, #8
 800528a:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <nand_read_spare_data+0x168>)
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	0c1a      	lsrs	r2, r3, #16
 8005294:	4b1a      	ldr	r3, [pc, #104]	; (8005300 <nand_read_spare_data+0x168>)
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]
        break;
 800529a:	e014      	b.n	80052c6 <nand_read_spare_data+0x12e>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800529c:	4b18      	ldr	r3, [pc, #96]	; (8005300 <nand_read_spare_data+0x168>)
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	0a1a      	lsrs	r2, r3, #8
 80052a8:	4b15      	ldr	r3, [pc, #84]	; (8005300 <nand_read_spare_data+0x168>)
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	0c1a      	lsrs	r2, r3, #16
 80052b2:	4b13      	ldr	r3, [pc, #76]	; (8005300 <nand_read_spare_data+0x168>)
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	0e1a      	lsrs	r2, r3, #24
 80052bc:	4b10      	ldr	r3, [pc, #64]	; (8005300 <nand_read_spare_data+0x168>)
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
        break;
 80052c2:	e000      	b.n	80052c6 <nand_read_spare_data+0x12e>
    default:
        break;
 80052c4:	bf00      	nop
    }

    for (i = 0; i < data_size; i++)
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e00a      	b.n	80052e2 <nand_read_spare_data+0x14a>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 80052cc:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	4413      	add	r3, r2
 80052d6:	780a      	ldrb	r2, [r1, #0]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	3301      	adds	r3, #1
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d3f0      	bcc.n	80052cc <nand_read_spare_data+0x134>

    return nand_get_status();  // 获取NAND Flash的状态
 80052ea:	f7ff fd87 	bl	8004dfc <nand_get_status>
 80052ee:	4603      	mov	r3, r0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20000c80 	.word	0x20000c80
 80052fc:	70010000 	.word	0x70010000
 8005300:	70020000 	.word	0x70020000

08005304 <nand_erase_block>:

// 擦除NAND Flash的块
static uint32_t nand_erase_block(uint32_t page)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase1_cmd;  // 发送擦除命令1给NAND Flash
 800530c:	4b2a      	ldr	r3, [pc, #168]	; (80053b8 <nand_erase_block+0xb4>)
 800530e:	4a2b      	ldr	r2, [pc, #172]	; (80053bc <nand_erase_block+0xb8>)
 8005310:	7bd2      	ldrb	r2, [r2, #15]
 8005312:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.row_cycles)
 8005314:	4b29      	ldr	r3, [pc, #164]	; (80053bc <nand_erase_block+0xb8>)
 8005316:	799b      	ldrb	r3, [r3, #6]
 8005318:	3b01      	subs	r3, #1
 800531a:	2b03      	cmp	r3, #3
 800531c:	d83c      	bhi.n	8005398 <nand_erase_block+0x94>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <nand_erase_block+0x20>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005335 	.word	0x08005335
 8005328:	0800533f 	.word	0x0800533f
 800532c:	08005353 	.word	0x08005353
 8005330:	08005371 	.word	0x08005371
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8005334:	4b22      	ldr	r3, [pc, #136]	; (80053c0 <nand_erase_block+0xbc>)
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]
        break;
 800533c:	e02d      	b.n	800539a <nand_erase_block+0x96>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800533e:	4b20      	ldr	r3, [pc, #128]	; (80053c0 <nand_erase_block+0xbc>)
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	0a1a      	lsrs	r2, r3, #8
 800534a:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <nand_erase_block+0xbc>)
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	701a      	strb	r2, [r3, #0]
        break;
 8005350:	e023      	b.n	800539a <nand_erase_block+0x96>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <nand_erase_block+0xbc>)
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	0a1a      	lsrs	r2, r3, #8
 800535e:	4b18      	ldr	r3, [pc, #96]	; (80053c0 <nand_erase_block+0xbc>)
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	0c1a      	lsrs	r2, r3, #16
 8005368:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <nand_erase_block+0xbc>)
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]
        break;
 800536e:	e014      	b.n	800539a <nand_erase_block+0x96>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8005370:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <nand_erase_block+0xbc>)
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	0a1a      	lsrs	r2, r3, #8
 800537c:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <nand_erase_block+0xbc>)
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	0c1a      	lsrs	r2, r3, #16
 8005386:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <nand_erase_block+0xbc>)
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	0e1a      	lsrs	r2, r3, #24
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <nand_erase_block+0xbc>)
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
        break;
 8005396:	e000      	b.n	800539a <nand_erase_block+0x96>
    default:
        break;
 8005398:	bf00      	nop
    }

    if (fsmc_conf.erase2_cmd != UNDEFINED_CMD)
 800539a:	4b08      	ldr	r3, [pc, #32]	; (80053bc <nand_erase_block+0xb8>)
 800539c:	7c1b      	ldrb	r3, [r3, #16]
 800539e:	2bff      	cmp	r3, #255	; 0xff
 80053a0:	d003      	beq.n	80053aa <nand_erase_block+0xa6>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase2_cmd;  // 发送擦除命令2给NAND Flash
 80053a2:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <nand_erase_block+0xb4>)
 80053a4:	4a05      	ldr	r2, [pc, #20]	; (80053bc <nand_erase_block+0xb8>)
 80053a6:	7c12      	ldrb	r2, [r2, #16]
 80053a8:	701a      	strb	r2, [r3, #0]

    return nand_get_status();  // 获取NAND Flash的状态
 80053aa:	f7ff fd27 	bl	8004dfc <nand_get_status>
 80053ae:	4603      	mov	r3, r0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	70010000 	.word	0x70010000
 80053bc:	20000c80 	.word	0x20000c80
 80053c0:	70020000 	.word	0x70020000

080053c4 <nand_is_bb_supported>:

// 检查是否支持坏块
static inline bool nand_is_bb_supported()
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
    return true;
 80053c8:	2301      	movs	r3, #1
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr
	...

080053d4 <nand_enable_hw_ecc>:

// 启用或禁用硬件ECC
static uint32_t nand_enable_hw_ecc(bool enable)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
    uint8_t enable_ecc;

    if (fsmc_conf.set_features_cmd == UNDEFINED_CMD)
 80053de:	4b16      	ldr	r3, [pc, #88]	; (8005438 <nand_enable_hw_ecc+0x64>)
 80053e0:	7c9b      	ldrb	r3, [r3, #18]
 80053e2:	2bff      	cmp	r3, #255	; 0xff
 80053e4:	d101      	bne.n	80053ea <nand_enable_hw_ecc+0x16>
        return FLASH_STATUS_INVALID_CMD;
 80053e6:	2304      	movs	r3, #4
 80053e8:	e021      	b.n	800542e <nand_enable_hw_ecc+0x5a>

    enable_ecc = enable ? fsmc_conf.enable_ecc_value : fsmc_conf.disable_ecc_value;
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <nand_enable_hw_ecc+0x22>
 80053f0:	4b11      	ldr	r3, [pc, #68]	; (8005438 <nand_enable_hw_ecc+0x64>)
 80053f2:	7d1b      	ldrb	r3, [r3, #20]
 80053f4:	e001      	b.n	80053fa <nand_enable_hw_ecc+0x26>
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <nand_enable_hw_ecc+0x64>)
 80053f8:	7d5b      	ldrb	r3, [r3, #21]
 80053fa:	73fb      	strb	r3, [r7, #15]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.set_features_cmd;  // 发送设置特性命令给NAND Flash
 80053fc:	4b0f      	ldr	r3, [pc, #60]	; (800543c <nand_enable_hw_ecc+0x68>)
 80053fe:	4a0e      	ldr	r2, [pc, #56]	; (8005438 <nand_enable_hw_ecc+0x64>)
 8005400:	7c92      	ldrb	r2, [r2, #18]
 8005402:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = fsmc_conf.enable_ecc_addr;  // 发送使能ECC地址
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <nand_enable_hw_ecc+0x6c>)
 8005406:	4a0c      	ldr	r2, [pc, #48]	; (8005438 <nand_enable_hw_ecc+0x64>)
 8005408:	7cd2      	ldrb	r2, [r2, #19]
 800540a:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = enable_ecc;  // 发送使能ECC的值
 800540c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8005414:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 800541c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8005424:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]

    return 0;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr
 8005438:	20000c80 	.word	0x20000c80
 800543c:	70010000 	.word	0x70010000
 8005440:	70020000 	.word	0x70020000

08005444 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08a      	sub	sp, #40	; 0x28
 8005448:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800544a:	f107 0318 	add.w	r3, r7, #24
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	605a      	str	r2, [r3, #4]
 8005454:	609a      	str	r2, [r3, #8]
 8005456:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005458:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <MX_GPIO_Init+0x144>)
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	4a4a      	ldr	r2, [pc, #296]	; (8005588 <MX_GPIO_Init+0x144>)
 800545e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005462:	6193      	str	r3, [r2, #24]
 8005464:	4b48      	ldr	r3, [pc, #288]	; (8005588 <MX_GPIO_Init+0x144>)
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005470:	4b45      	ldr	r3, [pc, #276]	; (8005588 <MX_GPIO_Init+0x144>)
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	4a44      	ldr	r2, [pc, #272]	; (8005588 <MX_GPIO_Init+0x144>)
 8005476:	f043 0310 	orr.w	r3, r3, #16
 800547a:	6193      	str	r3, [r2, #24]
 800547c:	4b42      	ldr	r3, [pc, #264]	; (8005588 <MX_GPIO_Init+0x144>)
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005488:	4b3f      	ldr	r3, [pc, #252]	; (8005588 <MX_GPIO_Init+0x144>)
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	4a3e      	ldr	r2, [pc, #248]	; (8005588 <MX_GPIO_Init+0x144>)
 800548e:	f043 0304 	orr.w	r3, r3, #4
 8005492:	6193      	str	r3, [r2, #24]
 8005494:	4b3c      	ldr	r3, [pc, #240]	; (8005588 <MX_GPIO_Init+0x144>)
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054a0:	4b39      	ldr	r3, [pc, #228]	; (8005588 <MX_GPIO_Init+0x144>)
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	4a38      	ldr	r2, [pc, #224]	; (8005588 <MX_GPIO_Init+0x144>)
 80054a6:	f043 0308 	orr.w	r3, r3, #8
 80054aa:	6193      	str	r3, [r2, #24]
 80054ac:	4b36      	ldr	r3, [pc, #216]	; (8005588 <MX_GPIO_Init+0x144>)
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054b8:	4b33      	ldr	r3, [pc, #204]	; (8005588 <MX_GPIO_Init+0x144>)
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	4a32      	ldr	r2, [pc, #200]	; (8005588 <MX_GPIO_Init+0x144>)
 80054be:	f043 0320 	orr.w	r3, r3, #32
 80054c2:	6193      	str	r3, [r2, #24]
 80054c4:	4b30      	ldr	r3, [pc, #192]	; (8005588 <MX_GPIO_Init+0x144>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|YELLOW_Pin|SPI1_CS_Pin, GPIO_PIN_SET);
 80054d0:	2201      	movs	r2, #1
 80054d2:	2113      	movs	r1, #19
 80054d4:	482d      	ldr	r0, [pc, #180]	; (800558c <MX_GPIO_Init+0x148>)
 80054d6:	f004 ff81 	bl	800a3dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80054da:	237f      	movs	r3, #127	; 0x7f
 80054dc:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054de:	2303      	movs	r3, #3
 80054e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054e2:	f107 0318 	add.w	r3, r7, #24
 80054e6:	4619      	mov	r1, r3
 80054e8:	4829      	ldr	r0, [pc, #164]	; (8005590 <MX_GPIO_Init+0x14c>)
 80054ea:	f004 fd17 	bl	8009f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80054ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054f2:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054f4:	2303      	movs	r3, #3
 80054f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054f8:	f107 0318 	add.w	r3, r7, #24
 80054fc:	4619      	mov	r1, r3
 80054fe:	4825      	ldr	r0, [pc, #148]	; (8005594 <MX_GPIO_Init+0x150>)
 8005500:	f004 fd0c 	bl	8009f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RED_Pin|YELLOW_Pin;
 8005504:	2303      	movs	r3, #3
 8005506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005508:	2301      	movs	r3, #1
 800550a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800550c:	2301      	movs	r3, #1
 800550e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005510:	2303      	movs	r3, #3
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005514:	f107 0318 	add.w	r3, r7, #24
 8005518:	4619      	mov	r1, r3
 800551a:	481c      	ldr	r0, [pc, #112]	; (800558c <MX_GPIO_Init+0x148>)
 800551c:	f004 fcfe 	bl	8009f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_15;
 8005520:	f248 130c 	movw	r3, #33036	; 0x810c
 8005524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005526:	2303      	movs	r3, #3
 8005528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800552a:	f107 0318 	add.w	r3, r7, #24
 800552e:	4619      	mov	r1, r3
 8005530:	4816      	ldr	r0, [pc, #88]	; (800558c <MX_GPIO_Init+0x148>)
 8005532:	f004 fcf3 	bl	8009f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8005536:	2310      	movs	r3, #16
 8005538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800553a:	2301      	movs	r3, #1
 800553c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800553e:	2301      	movs	r3, #1
 8005540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005542:	2302      	movs	r3, #2
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8005546:	f107 0318 	add.w	r3, r7, #24
 800554a:	4619      	mov	r1, r3
 800554c:	480f      	ldr	r0, [pc, #60]	; (800558c <MX_GPIO_Init+0x148>)
 800554e:	f004 fce5 	bl	8009f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8005552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005556:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005558:	2303      	movs	r3, #3
 800555a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800555c:	f107 0318 	add.w	r3, r7, #24
 8005560:	4619      	mov	r1, r3
 8005562:	480d      	ldr	r0, [pc, #52]	; (8005598 <MX_GPIO_Init+0x154>)
 8005564:	f004 fcda 	bl	8009f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8005568:	f242 030c 	movw	r3, #8204	; 0x200c
 800556c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800556e:	2303      	movs	r3, #3
 8005570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005572:	f107 0318 	add.w	r3, r7, #24
 8005576:	4619      	mov	r1, r3
 8005578:	4808      	ldr	r0, [pc, #32]	; (800559c <MX_GPIO_Init+0x158>)
 800557a:	f004 fccf 	bl	8009f1c <HAL_GPIO_Init>

}
 800557e:	bf00      	nop
 8005580:	3728      	adds	r7, #40	; 0x28
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	40021000 	.word	0x40021000
 800558c:	40010800 	.word	0x40010800
 8005590:	40011800 	.word	0x40011800
 8005594:	40011000 	.word	0x40011000
 8005598:	40010c00 	.word	0x40010c00
 800559c:	40011400 	.word	0x40011400

080055a0 <jtag_init>:
 */

#include <stm32f1xx.h>

void jtag_init()
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
    /* Enable JTAG in low power mode */
    HAL_DBGMCU_EnableDBGSleepMode();
 80055a4:	f003 ff18 	bl	80093d8 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 80055a8:	f003 ff32 	bl	8009410 <HAL_DBGMCU_EnableDBGStandbyMode>
    HAL_DBGMCU_EnableDBGStopMode();
 80055ac:	f003 ff22 	bl	80093f4 <HAL_DBGMCU_EnableDBGStopMode>
}
 80055b0:	bf00      	nop
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <led_init>:

#include "led.h"
#include "gpio.h"

void led_init()
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ba:	f107 0308 	add.w	r3, r7, #8
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	605a      	str	r2, [r3, #4]
 80055c4:	609a      	str	r2, [r3, #8]
 80055c6:	60da      	str	r2, [r3, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE(); // 初始化GPIOE时钟
 80055c8:	4b19      	ldr	r3, [pc, #100]	; (8005630 <led_init+0x7c>)
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	4a18      	ldr	r2, [pc, #96]	; (8005630 <led_init+0x7c>)
 80055ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d2:	6193      	str	r3, [r2, #24]
 80055d4:	4b16      	ldr	r3, [pc, #88]	; (8005630 <led_init+0x7c>)
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	607b      	str	r3, [r7, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE(); // 初始化GPIOC时钟
 80055e0:	4b13      	ldr	r3, [pc, #76]	; (8005630 <led_init+0x7c>)
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	4a12      	ldr	r2, [pc, #72]	; (8005630 <led_init+0x7c>)
 80055e6:	f043 0310 	orr.w	r3, r3, #16
 80055ea:	6193      	str	r3, [r2, #24]
 80055ec:	4b10      	ldr	r3, [pc, #64]	; (8005630 <led_init+0x7c>)
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	603b      	str	r3, [r7, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, RED_Pin|YELLOW_Pin, GPIO_PIN_SET);
 80055f8:	2201      	movs	r2, #1
 80055fa:	2103      	movs	r1, #3
 80055fc:	480d      	ldr	r0, [pc, #52]	; (8005634 <led_init+0x80>)
 80055fe:	f004 feed 	bl	800a3dc <HAL_GPIO_WritePin>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = RED_Pin|YELLOW_Pin;
 8005602:	2303      	movs	r3, #3
 8005604:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005606:	2301      	movs	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800560e:	2302      	movs	r3, #2
 8005610:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	4619      	mov	r1, r3
 8005618:	4806      	ldr	r0, [pc, #24]	; (8005634 <led_init+0x80>)
 800561a:	f004 fc7f 	bl	8009f1c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, RED_Pin|YELLOW_Pin, GPIO_PIN_RESET); // 将引脚0和引脚1的状态置为低电平
 800561e:	2200      	movs	r2, #0
 8005620:	2103      	movs	r1, #3
 8005622:	4804      	ldr	r0, [pc, #16]	; (8005634 <led_init+0x80>)
 8005624:	f004 feda 	bl	800a3dc <HAL_GPIO_WritePin>
}
 8005628:	bf00      	nop
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40021000 	.word	0x40021000
 8005634:	40010800 	.word	0x40010800

08005638 <led_set>:

static void led_set(GPIO_TypeDef *gpiox, uint16_t pin, bool on)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	807b      	strh	r3, [r7, #2]
 8005644:	4613      	mov	r3, r2
 8005646:	707b      	strb	r3, [r7, #1]
    if (on)
 8005648:	787b      	ldrb	r3, [r7, #1]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d006      	beq.n	800565c <led_set+0x24>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_SET); // 设置引脚为高电平
 800564e:	887b      	ldrh	r3, [r7, #2]
 8005650:	2201      	movs	r2, #1
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f004 fec1 	bl	800a3dc <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
}
 800565a:	e005      	b.n	8005668 <led_set+0x30>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
 800565c:	887b      	ldrh	r3, [r7, #2]
 800565e:	2200      	movs	r2, #0
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f004 feba 	bl	800a3dc <HAL_GPIO_WritePin>
}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <led_wr_set>:

void led_wr_set(bool on)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOA, RED_Pin, on); // 设置引脚LED1的状态
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	461a      	mov	r2, r3
 800567e:	2101      	movs	r1, #1
 8005680:	4803      	ldr	r0, [pc, #12]	; (8005690 <led_wr_set+0x20>)
 8005682:	f7ff ffd9 	bl	8005638 <led_set>
}
 8005686:	bf00      	nop
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40010800 	.word	0x40010800

08005694 <led_rd_set>:

void led_rd_set(bool on)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOA, YELLOW_Pin, on); // 设置引脚LED2的状态
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	461a      	mov	r2, r3
 80056a2:	2102      	movs	r1, #2
 80056a4:	4803      	ldr	r0, [pc, #12]	; (80056b4 <led_rd_set+0x20>)
 80056a6:	f7ff ffc7 	bl	8005638 <led_set>
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40010800 	.word	0x40010800

080056b8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	4804      	ldr	r0, [pc, #16]	; (80056e0 <_write+0x28>)
 80056d0:	f008 fd20 	bl	800e114 <HAL_UART_Transmit>
    return len;
 80056d4:	687b      	ldr	r3, [r7, #4]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	200051e0 	.word	0x200051e0

080056e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80056e8:	f003 fe14 	bl	8009314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80056ec:	f000 f854 	bl	8005798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80056f0:	f7ff fea8 	bl	8005444 <MX_GPIO_Init>
//  MX_FSMC_Init();
  MX_RTC_Init();
 80056f4:	f002 fbe0 	bl	8007eb8 <MX_RTC_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 80056f8:	f003 fd70 	bl	80091dc <MX_USART1_UART_Init>
//  MX_USB_DEVICE_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 80056fc:	f000 f8ad 	bl	800585a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nNAND programmer ver: %d.%d.%d\r\n", SW_VERSION_MAJOR,
 8005700:	2300      	movs	r3, #0
 8005702:	2205      	movs	r2, #5
 8005704:	2103      	movs	r1, #3
 8005706:	481c      	ldr	r0, [pc, #112]	; (8005778 <main+0x94>)
 8005708:	f00e f806 	bl	8013718 <iprintf>
      SW_VERSION_MINOR, SW_VERSION_BUILD);

  if (!is_external_clock_avail())
 800570c:	f7ff f8a4 	bl	8004858 <is_external_clock_avail>
 8005710:	4603      	mov	r3, r0
 8005712:	f083 0301 	eor.w	r3, r3, #1
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <main+0x3e>
      printf("External clock not detected. Fallback to internal clock.\r\n");
 800571c:	4817      	ldr	r0, [pc, #92]	; (800577c <main+0x98>)
 800571e:	f00e f861 	bl	80137e4 <puts>

  printf("JTAG init...");
 8005722:	4817      	ldr	r0, [pc, #92]	; (8005780 <main+0x9c>)
 8005724:	f00d fff8 	bl	8013718 <iprintf>
  jtag_init();
 8005728:	f7ff ff3a 	bl	80055a0 <jtag_init>
  printf("done.\r\n");
 800572c:	4815      	ldr	r0, [pc, #84]	; (8005784 <main+0xa0>)
 800572e:	f00e f859 	bl	80137e4 <puts>

  printf("LED init...");
 8005732:	4815      	ldr	r0, [pc, #84]	; (8005788 <main+0xa4>)
 8005734:	f00d fff0 	bl	8013718 <iprintf>
  led_init();
 8005738:	f7ff ff3c 	bl	80055b4 <led_init>
  printf("done.\r\n");
 800573c:	4811      	ldr	r0, [pc, #68]	; (8005784 <main+0xa0>)
 800573e:	f00e f851 	bl	80137e4 <puts>

  printf("USB init...");
 8005742:	4812      	ldr	r0, [pc, #72]	; (800578c <main+0xa8>)
 8005744:	f00d ffe8 	bl	8013718 <iprintf>
  MX_USB_DEVICE_Init();
 8005748:	f00d fa86 	bl	8012c58 <MX_USB_DEVICE_Init>
  printf("done.\r\n");
 800574c:	480d      	ldr	r0, [pc, #52]	; (8005784 <main+0xa0>)
 800574e:	f00e f849 	bl	80137e4 <puts>

  printf("CDC init...");
 8005752:	480f      	ldr	r0, [pc, #60]	; (8005790 <main+0xac>)
 8005754:	f00d ffe0 	bl	8013718 <iprintf>
  cdc_init();
 8005758:	f7fe ff44 	bl	80045e4 <cdc_init>
  printf("done.\r\n");
 800575c:	4809      	ldr	r0, [pc, #36]	; (8005784 <main+0xa0>)
 800575e:	f00e f841 	bl	80137e4 <puts>

  printf("Programmer init...");
 8005762:	480c      	ldr	r0, [pc, #48]	; (8005794 <main+0xb0>)
 8005764:	f00d ffd8 	bl	8013718 <iprintf>
  np_init();
 8005768:	f002 fb7c 	bl	8007e64 <np_init>
  printf("done.\r\n");
 800576c:	4805      	ldr	r0, [pc, #20]	; (8005784 <main+0xa0>)
 800576e:	f00e f839 	bl	80137e4 <puts>
//  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }
  np_handler();
 8005772:	f002 fb85 	bl	8007e80 <np_handler>
 8005776:	e7fc      	b.n	8005772 <main+0x8e>
 8005778:	08014768 	.word	0x08014768
 800577c:	0801478c 	.word	0x0801478c
 8005780:	080147c8 	.word	0x080147c8
 8005784:	080147d8 	.word	0x080147d8
 8005788:	080147e0 	.word	0x080147e0
 800578c:	080147ec 	.word	0x080147ec
 8005790:	080147f8 	.word	0x080147f8
 8005794:	08014804 	.word	0x08014804

08005798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b096      	sub	sp, #88	; 0x58
 800579c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800579e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057a2:	2228      	movs	r2, #40	; 0x28
 80057a4:	2100      	movs	r1, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f00e f8fc 	bl	80139a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80057ac:	f107 031c 	add.w	r3, r7, #28
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	605a      	str	r2, [r3, #4]
 80057b6:	609a      	str	r2, [r3, #8]
 80057b8:	60da      	str	r2, [r3, #12]
 80057ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	605a      	str	r2, [r3, #4]
 80057c4:	609a      	str	r2, [r3, #8]
 80057c6:	60da      	str	r2, [r3, #12]
 80057c8:	611a      	str	r2, [r3, #16]
 80057ca:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80057cc:	2309      	movs	r3, #9
 80057ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80057d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80057d6:	2300      	movs	r3, #0
 80057d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057da:	2301      	movs	r3, #1
 80057dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80057de:	2301      	movs	r3, #1
 80057e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057e2:	2302      	movs	r3, #2
 80057e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80057e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80057ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80057f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057f6:	4618      	mov	r0, r3
 80057f8:	f006 fcc6 	bl	800c188 <HAL_RCC_OscConfig>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8005802:	f000 f87e 	bl	8005902 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005806:	230f      	movs	r3, #15
 8005808:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800580a:	2302      	movs	r3, #2
 800580c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800580e:	2300      	movs	r3, #0
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005818:	2300      	movs	r3, #0
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800581c:	f107 031c 	add.w	r3, r7, #28
 8005820:	2102      	movs	r1, #2
 8005822:	4618      	mov	r0, r3
 8005824:	f006 ff32 	bl	800c68c <HAL_RCC_ClockConfig>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800582e:	f000 f868 	bl	8005902 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8005832:	2311      	movs	r3, #17
 8005834:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800583a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	4618      	mov	r0, r3
 8005844:	f007 f8b0 	bl	800c9a8 <HAL_RCCEx_PeriphCLKConfig>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800584e:	f000 f858 	bl	8005902 <Error_Handler>
  }
}
 8005852:	bf00      	nop
 8005854:	3758      	adds	r7, #88	; 0x58
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	af00      	add	r7, sp, #0
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800585e:	2200      	movs	r2, #0
 8005860:	2100      	movs	r1, #0
 8005862:	2001      	movs	r0, #1
 8005864:	f003 fedd 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8005868:	2001      	movs	r0, #1
 800586a:	f003 fef6 	bl	800965a <HAL_NVIC_EnableIRQ>
  /* RTC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800586e:	2200      	movs	r2, #0
 8005870:	2100      	movs	r1, #0
 8005872:	2003      	movs	r0, #3
 8005874:	f003 fed5 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8005878:	2003      	movs	r0, #3
 800587a:	f003 feee 	bl	800965a <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800587e:	2200      	movs	r2, #0
 8005880:	2100      	movs	r1, #0
 8005882:	2004      	movs	r0, #4
 8005884:	f003 fecd 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005888:	2004      	movs	r0, #4
 800588a:	f003 fee6 	bl	800965a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800588e:	2200      	movs	r2, #0
 8005890:	2100      	movs	r1, #0
 8005892:	2005      	movs	r0, #5
 8005894:	f003 fec5 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005898:	2005      	movs	r0, #5
 800589a:	f003 fede 	bl	800965a <HAL_NVIC_EnableIRQ>
  /* USB_HP_CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800589e:	2200      	movs	r2, #0
 80058a0:	2100      	movs	r1, #0
 80058a2:	2013      	movs	r0, #19
 80058a4:	f003 febd 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80058a8:	2013      	movs	r0, #19
 80058aa:	f003 fed6 	bl	800965a <HAL_NVIC_EnableIRQ>
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80058ae:	2200      	movs	r2, #0
 80058b0:	2100      	movs	r1, #0
 80058b2:	2014      	movs	r0, #20
 80058b4:	f003 feb5 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80058b8:	2014      	movs	r0, #20
 80058ba:	f003 fece 	bl	800965a <HAL_NVIC_EnableIRQ>
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80058be:	2200      	movs	r2, #0
 80058c0:	2100      	movs	r1, #0
 80058c2:	2023      	movs	r0, #35	; 0x23
 80058c4:	f003 fead 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80058c8:	2023      	movs	r0, #35	; 0x23
 80058ca:	f003 fec6 	bl	800965a <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80058ce:	2200      	movs	r2, #0
 80058d0:	2100      	movs	r1, #0
 80058d2:	2025      	movs	r0, #37	; 0x25
 80058d4:	f003 fea5 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80058d8:	2025      	movs	r0, #37	; 0x25
 80058da:	f003 febe 	bl	800965a <HAL_NVIC_EnableIRQ>
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80058de:	2200      	movs	r2, #0
 80058e0:	2100      	movs	r1, #0
 80058e2:	2029      	movs	r0, #41	; 0x29
 80058e4:	f003 fe9d 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80058e8:	2029      	movs	r0, #41	; 0x29
 80058ea:	f003 feb6 	bl	800965a <HAL_NVIC_EnableIRQ>
  /* FSMC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 80058ee:	2200      	movs	r2, #0
 80058f0:	2100      	movs	r1, #0
 80058f2:	2030      	movs	r0, #48	; 0x30
 80058f4:	f003 fe95 	bl	8009622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 80058f8:	2030      	movs	r0, #48	; 0x30
 80058fa:	f003 feae 	bl	800965a <HAL_NVIC_EnableIRQ>
}
 80058fe:	bf00      	nop
 8005900:	bd80      	pop	{r7, pc}

08005902 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005902:	b480      	push	{r7}
 8005904:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005906:	b672      	cpsid	i
}
 8005908:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800590a:	e7fe      	b.n	800590a <Error_Handler+0x8>

0800590c <nand_bad_block_table_init>:

static uint32_t nand_bad_block_table_count; // NAND 坏块表中的块计数
static uint32_t nand_bad_block_table[NAND_BAD_BLOCK_TABLE_SIZE]; // NAND 坏块表

void nand_bad_block_table_init()
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
    memset(nand_bad_block_table, 0, sizeof(nand_bad_block_table)); // 初始化 NAND 坏块表为 0
 8005910:	2250      	movs	r2, #80	; 0x50
 8005912:	2100      	movs	r1, #0
 8005914:	4803      	ldr	r0, [pc, #12]	; (8005924 <nand_bad_block_table_init+0x18>)
 8005916:	f00e f845 	bl	80139a4 <memset>
    nand_bad_block_table_count = 0; // 初始化 NAND 坏块计数为 0
 800591a:	4b03      	ldr	r3, [pc, #12]	; (8005928 <nand_bad_block_table_init+0x1c>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
}
 8005920:	bf00      	nop
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000ca0 	.word	0x20000ca0
 8005928:	20000c9c 	.word	0x20000c9c

0800592c <nand_bad_block_table_add>:

int nand_bad_block_table_add(uint32_t page)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
    if (nand_bad_block_table_count == NAND_BAD_BLOCK_TABLE_SIZE)
 8005934:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <nand_bad_block_table_add+0x34>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b14      	cmp	r3, #20
 800593a:	d102      	bne.n	8005942 <nand_bad_block_table_add+0x16>
        return -1; // 坏块表已满，无法添加
 800593c:	f04f 33ff 	mov.w	r3, #4294967295
 8005940:	e009      	b.n	8005956 <nand_bad_block_table_add+0x2a>

    nand_bad_block_table[nand_bad_block_table_count++] = page; // 在坏块表末尾添加新的块
 8005942:	4b07      	ldr	r3, [pc, #28]	; (8005960 <nand_bad_block_table_add+0x34>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	4905      	ldr	r1, [pc, #20]	; (8005960 <nand_bad_block_table_add+0x34>)
 800594a:	600a      	str	r2, [r1, #0]
 800594c:	4905      	ldr	r1, [pc, #20]	; (8005964 <nand_bad_block_table_add+0x38>)
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0; // 添加成功
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr
 8005960:	20000c9c 	.word	0x20000c9c
 8005964:	20000ca0 	.word	0x20000ca0

08005968 <nand_bad_block_table_lookup>:

bool nand_bad_block_table_lookup(uint32_t page)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
    uint32_t i;

    for (i = 0; i < nand_bad_block_table_count; i++)
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	e00b      	b.n	800598e <nand_bad_block_table_lookup+0x26>
    {
        if (nand_bad_block_table[i] == page)
 8005976:	4a0b      	ldr	r2, [pc, #44]	; (80059a4 <nand_bad_block_table_lookup+0x3c>)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d101      	bne.n	8005988 <nand_bad_block_table_lookup+0x20>
            return true; // 在坏块表中找到了对应的块
 8005984:	2301      	movs	r3, #1
 8005986:	e008      	b.n	800599a <nand_bad_block_table_lookup+0x32>
    for (i = 0; i < nand_bad_block_table_count; i++)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3301      	adds	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <nand_bad_block_table_lookup+0x40>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	429a      	cmp	r2, r3
 8005996:	d3ee      	bcc.n	8005976 <nand_bad_block_table_lookup+0xe>
    }

    return false; // 在坏块表中未找到对应的块
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr
 80059a4:	20000ca0 	.word	0x20000ca0
 80059a8:	20000c9c 	.word	0x20000c9c

080059ac <nand_bad_block_table_iter_alloc>:

void *nand_bad_block_table_iter_alloc(uint32_t *page)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
    if (!nand_bad_block_table_count)
 80059b4:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <nand_bad_block_table_iter_alloc+0x28>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <nand_bad_block_table_iter_alloc+0x14>
        return NULL; // 坏块表为空，无法进行迭代
 80059bc:	2300      	movs	r3, #0
 80059be:	e004      	b.n	80059ca <nand_bad_block_table_iter_alloc+0x1e>

    *page = nand_bad_block_table[0]; // 将坏块表的第一个块赋值给 page
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <nand_bad_block_table_iter_alloc+0x2c>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	601a      	str	r2, [r3, #0]

    return &nand_bad_block_table[0]; // 返回坏块表的第一个块的地址作为迭代器
 80059c8:	4b03      	ldr	r3, [pc, #12]	; (80059d8 <nand_bad_block_table_iter_alloc+0x2c>)
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr
 80059d4:	20000c9c 	.word	0x20000c9c
 80059d8:	20000ca0 	.word	0x20000ca0

080059dc <nand_bad_block_table_iter_next>:

void *nand_bad_block_table_iter_next(void *iter, uint32_t *page)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
    uint32_t *bbt_iter = iter;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60fb      	str	r3, [r7, #12]

    if (!bbt_iter)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <nand_bad_block_table_iter_next+0x18>
       return NULL; // 无效的迭代器，无法进行下一次迭代
 80059f0:	2300      	movs	r3, #0
 80059f2:	e012      	b.n	8005a1a <nand_bad_block_table_iter_next+0x3e>

    bbt_iter++; // 迭代器指向下一个块
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3304      	adds	r3, #4
 80059f8:	60fb      	str	r3, [r7, #12]

    if (bbt_iter - &nand_bad_block_table[0] >= nand_bad_block_table_count)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <nand_bad_block_table_iter_next+0x48>)
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	109b      	asrs	r3, r3, #2
 8005a02:	461a      	mov	r2, r3
 8005a04:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <nand_bad_block_table_iter_next+0x4c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d301      	bcc.n	8005a10 <nand_bad_block_table_iter_next+0x34>
        return NULL; // 已达到坏块表的末尾，无法进行下一次迭代
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e004      	b.n	8005a1a <nand_bad_block_table_iter_next+0x3e>

    *page = *bbt_iter; // 将当前迭代的块赋值给 page
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	601a      	str	r2, [r3, #0]

    return bbt_iter; // 返回下一次迭代的迭代器
 8005a18:	68fb      	ldr	r3, [r7, #12]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr
 8005a24:	20000ca0 	.word	0x20000ca0
 8005a28:	20000c9c 	.word	0x20000c9c

08005a2c <np_send_ok_status>:
static flash_hal_t *hal[] = { &hal_fsmc, &hal_spi_nor, &hal_spi_nand };  // HAL 驱动数组

uint8_t np_packet_send_buf[NP_PACKET_BUF_SIZE];    // 发送数据包缓冲区

static int np_send_ok_status()
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_OK };       // 正常状态响应
 8005a32:	2301      	movs	r3, #1
 8005a34:	703b      	strb	r3, [r7, #0]
 8005a36:	2300      	movs	r3, #0
 8005a38:	707b      	strb	r3, [r7, #1]
    size_t len = sizeof(status);
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	607b      	str	r3, [r7, #4]

    if (np_comm_cb)
 8005a3e:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <np_send_ok_status+0x34>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d006      	beq.n	8005a54 <np_send_ok_status+0x28>
        np_comm_cb->send((uint8_t *)&status, len);             // 发送响应数据
 8005a46:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <np_send_ok_status+0x34>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	463a      	mov	r2, r7
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4610      	mov	r0, r2
 8005a52:	4798      	blx	r3

    return 0;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000cf0 	.word	0x20000cf0

08005a64 <np_send_error>:

static int np_send_error(uint8_t err_code)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	71fb      	strb	r3, [r7, #7]
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_ERROR };    // 错误状态响应
 8005a6e:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <np_send_error+0x4c>)
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	833b      	strh	r3, [r7, #24]
    np_resp_err_t err_status = { status, err_code };           // 错误状态信息
 8005a74:	f107 0308 	add.w	r3, r7, #8
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	609a      	str	r2, [r3, #8]
 8005a80:	819a      	strh	r2, [r3, #12]
 8005a82:	8b3b      	ldrh	r3, [r7, #24]
 8005a84:	813b      	strh	r3, [r7, #8]
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	72bb      	strb	r3, [r7, #10]
    size_t len = sizeof(err_status);
 8005a8a:	230e      	movs	r3, #14
 8005a8c:	61fb      	str	r3, [r7, #28]

    if (np_comm_cb)
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <np_send_error+0x50>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <np_send_error+0x42>
        np_comm_cb->send((uint8_t *)&err_status, len);         // 发送错误响应数据
 8005a96:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <np_send_error+0x50>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f107 0208 	add.w	r2, r7, #8
 8005aa0:	69f9      	ldr	r1, [r7, #28]
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	4798      	blx	r3

    return 0;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3720      	adds	r7, #32
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	08014818 	.word	0x08014818
 8005ab4:	20000cf0 	.word	0x20000cf0

08005ab8 <np_send_bad_block_info>:

// 发送坏块信息函数，参数为块地址、大小和是否跳过标志
static int np_send_bad_block_info(uint64_t addr, uint32_t size, bool is_skipped)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	; 0x28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	70fb      	strb	r3, [r7, #3]
    // 根据是否跳过标志确定info的值
    uint8_t info = is_skipped ? NP_STATUS_BB_SKIP : NP_STATUS_BB;
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <np_send_bad_block_info+0x18>
 8005acc:	2304      	movs	r3, #4
 8005ace:	e000      	b.n	8005ad2 <np_send_bad_block_info+0x1a>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, info };
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8005adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    // 构造坏块信息
    np_resp_bad_block_t bad_block = { resp_header, addr, size };
 8005ae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ae6:	82bb      	strh	r3, [r7, #20]
 8005ae8:	f107 0318 	add.w	r3, r7, #24
 8005aec:	3b02      	subs	r3, #2
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8c7 301e 	str.w	r3, [r7, #30]

    // 调用回调函数发送坏块信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&bad_block, sizeof(bad_block)))
 8005afc:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <np_send_bad_block_info+0x6c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f107 0214 	add.w	r2, r7, #20
 8005b06:	210e      	movs	r1, #14
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4798      	blx	r3
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <np_send_bad_block_info+0x60>
        return -1;
 8005b12:	f04f 33ff 	mov.w	r3, #4294967295
 8005b16:	e000      	b.n	8005b1a <np_send_bad_block_info+0x62>

    return 0;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3728      	adds	r7, #40	; 0x28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000cf0 	.word	0x20000cf0

08005b28 <np_send_progress>:

// 发送进度信息函数，参数为进度值
static int np_send_progress(uint64_t progress)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	e9c7 0100 	strd	r0, r1, [r7]
    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_PROGRESS };
 8005b32:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <np_send_progress+0x48>)
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	82bb      	strh	r3, [r7, #20]

    // 构造进度信息
    np_resp_progress_t resp_progress = { resp_header, progress };
 8005b38:	8abb      	ldrh	r3, [r7, #20]
 8005b3a:	813b      	strh	r3, [r7, #8]
 8005b3c:	f107 0308 	add.w	r3, r7, #8
 8005b40:	3302      	adds	r3, #2
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]

    // 调用回调函数发送进度信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&resp_progress, sizeof(resp_progress)))
 8005b4a:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <np_send_progress+0x4c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f107 0208 	add.w	r2, r7, #8
 8005b54:	210a      	movs	r1, #10
 8005b56:	4610      	mov	r0, r2
 8005b58:	4798      	blx	r3
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <np_send_progress+0x3e>
        return -1;
 8005b60:	f04f 33ff 	mov.w	r3, #4294967295
 8005b64:	e000      	b.n	8005b68 <np_send_progress+0x40>

    return 0;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	0801481c 	.word	0x0801481c
 8005b74:	20000cf0 	.word	0x20000cf0

08005b78 <_np_cmd_nand_read_id>:

// 内部函数，用于执行NAND读取ID的命令
static int _np_cmd_nand_read_id(np_prog_t *prog)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b089      	sub	sp, #36	; 0x24
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	6078      	str	r0, [r7, #4]
    np_resp_id_t resp;
    size_t resp_len = sizeof(resp);
 8005b80:	2308      	movs	r3, #8
 8005b82:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read ID command\r\n");
 8005b84:	481c      	ldr	r0, [pc, #112]	; (8005bf8 <_np_cmd_nand_read_id+0x80>)
 8005b86:	f00d fe2d 	bl	80137e4 <puts>

    // 设置响应头部的code和info字段
    resp.header.code = NP_RESP_DATA;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	3b02      	subs	r3, #2
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	737b      	strb	r3, [r7, #13]

    // 调用硬件抽象层的读取ID函数
    hal[prog->hal]->read_id(&resp.nand_id);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b9e:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4b15      	ldr	r3, [pc, #84]	; (8005bfc <_np_cmd_nand_read_id+0x84>)
 8005ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f107 020c 	add.w	r2, r7, #12
 8005bb0:	3202      	adds	r2, #2
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	4798      	blx	r3

    // 如果设置了通信回调函数，则发送响应数据
    if (np_comm_cb)
 8005bb6:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <_np_cmd_nand_read_id+0x88>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <_np_cmd_nand_read_id+0x56>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8005bbe:	4b10      	ldr	r3, [pc, #64]	; (8005c00 <_np_cmd_nand_read_id+0x88>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f107 020c 	add.w	r2, r7, #12
 8005bc8:	6979      	ldr	r1, [r7, #20]
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4798      	blx	r3

    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8005bce:	7bbb      	ldrb	r3, [r7, #14]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8005bd0:	4619      	mov	r1, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8005bd4:	4618      	mov	r0, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8005bd6:	7c3b      	ldrb	r3, [r7, #16]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8005bd8:	461c      	mov	r4, r3
        resp.nand_id.fourth_id, resp.nand_id.fifth_id);
 8005bda:	7c7b      	ldrb	r3, [r7, #17]
 8005bdc:	7cba      	ldrb	r2, [r7, #18]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8005bde:	9201      	str	r2, [sp, #4]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	4623      	mov	r3, r4
 8005be4:	4602      	mov	r2, r0
 8005be6:	4807      	ldr	r0, [pc, #28]	; (8005c04 <_np_cmd_nand_read_id+0x8c>)
 8005be8:	f00d fd96 	bl	8013718 <iprintf>

    return 0;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd90      	pop	{r4, r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	08014820 	.word	0x08014820
 8005bfc:	20000040 	.word	0x20000040
 8005c00:	20000cf0 	.word	0x20000cf0
 8005c04:	08014834 	.word	0x08014834

08005c08 <np_cmd_nand_read_id>:

// 执行NAND读取ID的命令
static int np_cmd_nand_read_id(np_prog_t *prog)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 8005c10:	2001      	movs	r0, #1
 8005c12:	f7ff fd3f 	bl	8005694 <led_rd_set>
    ret = _np_cmd_nand_read_id(prog);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff ffae 	bl	8005b78 <_np_cmd_nand_read_id>
 8005c1c:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 8005c1e:	2000      	movs	r0, #0
 8005c20:	f7ff fd38 	bl	8005694 <led_rd_set>

    return ret;
 8005c24:	68fb      	ldr	r3, [r7, #12]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <np_read_bad_block_info_from_page>:

// 从页中读取坏块信息，参数为编程器、块号、页号和坏块标志指针
static int np_read_bad_block_info_from_page(np_prog_t *prog, uint32_t block,
    uint32_t page, bool *is_bad)
{
 8005c30:	b5b0      	push	{r4, r5, r7, lr}
 8005c32:	b08a      	sub	sp, #40	; 0x28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
    uint32_t status;
    uint64_t addr = block * prog->chip_info.block_size;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c44:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	fb02 f303 	mul.w	r3, r2, r3
 8005c4e:	2200      	movs	r2, #0
 8005c50:	461c      	mov	r4, r3
 8005c52:	4615      	mov	r5, r2
 8005c54:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c5e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off];
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005c68:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3338      	adds	r3, #56	; 0x38
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	3304      	adds	r3, #4
 8005c76:	617b      	str	r3, [r7, #20]

    // 从页的备用区域读取坏块标志
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c7e:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005c82:	461a      	mov	r2, r3
 8005c84:	4b35      	ldr	r3, [pc, #212]	; (8005d5c <np_read_bad_block_info_from_page+0x12c>)
 8005c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8a:	695c      	ldr	r4, [r3, #20]
        prog->chip_info.bb_mark_off, 1);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c92:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8005c96:	461a      	mov	r2, r3
 8005c98:	2301      	movs	r3, #1
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	6978      	ldr	r0, [r7, #20]
 8005c9e:	47a0      	blx	r4
 8005ca0:	6278      	str	r0, [r7, #36]	; 0x24

    // 如果读取命令无效，则尝试读取整个页的数据
    if (status == FLASH_STATUS_INVALID_CMD)
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d11a      	bne.n	8005cde <np_read_bad_block_info_from_page+0xae>
    {
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cae:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4b29      	ldr	r3, [pc, #164]	; (8005d5c <np_read_bad_block_info_from_page+0x12c>)
 8005cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	f102 003c 	add.w	r0, r2, #60	; 0x3c
            prog->chip_info.page_size + prog->chip_info.spare_size);
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005cc8:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005cd2:	f8d2 2238 	ldr.w	r2, [r2, #568]	; 0x238
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8005cd6:	440a      	add	r2, r1
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	4798      	blx	r3
 8005cdc:	6278      	str	r0, [r7, #36]	; 0x24
    }

    switch (status)
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d010      	beq.n	8005d06 <np_read_bad_block_info_from_page+0xd6>
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d815      	bhi.n	8005d16 <np_read_bad_block_info_from_page+0xe6>
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d018      	beq.n	8005d22 <np_read_bad_block_info_from_page+0xf2>
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d10f      	bne.n	8005d16 <np_read_bad_block_info_from_page+0xe6>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        ERROR_PRINT("NAND read bad block info error at 0x%" PRIx64 "\r\n",
 8005cf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cfa:	4819      	ldr	r0, [pc, #100]	; (8005d60 <np_read_bad_block_info_from_page+0x130>)
 8005cfc:	f00d fd0c 	bl	8013718 <iprintf>
            addr);
        return NP_ERR_NAND_RD;
 8005d00:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8005d04:	e025      	b.n	8005d52 <np_read_bad_block_info_from_page+0x122>
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND read timeout at 0x%" PRIx64 "\r\n", addr);
 8005d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d0a:	4816      	ldr	r0, [pc, #88]	; (8005d64 <np_read_bad_block_info_from_page+0x134>)
 8005d0c:	f00d fd04 	bl	8013718 <iprintf>
        return NP_ERR_NAND_RD;
 8005d10:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8005d14:	e01d      	b.n	8005d52 <np_read_bad_block_info_from_page+0x122>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8005d16:	4814      	ldr	r0, [pc, #80]	; (8005d68 <np_read_bad_block_info_from_page+0x138>)
 8005d18:	f00d fd64 	bl	80137e4 <puts>
        return NP_ERR_NAND_RD;
 8005d1c:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8005d20:	e017      	b.n	8005d52 <np_read_bad_block_info_from_page+0x122>
        break;
 8005d22:	bf00      	nop
    }

    // 判断坏块标志是否为NP_NAND_GOOD_BLOCK_MARK
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d2a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005d34:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8005d38:	4413      	add	r3, r2
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8005d42:	2bff      	cmp	r3, #255	; 0xff
 8005d44:	bf14      	ite	ne
 8005d46:	2301      	movne	r3, #1
 8005d48:	2300      	moveq	r3, #0
 8005d4a:	b2da      	uxtb	r2, r3
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	701a      	strb	r2, [r3, #0]

    return 0;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3728      	adds	r7, #40	; 0x28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bdb0      	pop	{r4, r5, r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000040 	.word	0x20000040
 8005d60:	08014860 	.word	0x08014860
 8005d64:	08014894 	.word	0x08014894
 8005d68:	080148bc 	.word	0x080148bc

08005d6c <_np_cmd_read_bad_blocks>:

// 内部函数，执行读取坏块命令，并可选择发送进度信息
static int _np_cmd_read_bad_blocks(np_prog_t *prog, bool send_progress)
{
 8005d6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005d70:	b088      	sub	sp, #32
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	460b      	mov	r3, r1
 8005d78:	70fb      	strb	r3, [r7, #3]
    int ret;
    bool is_bad;
    uint32_t block, block_num, page_num, page;

    // 检查是否支持坏块检测
    if (!hal[prog->hal]->is_bb_supported())
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d80:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005d84:	461a      	mov	r2, r3
 8005d86:	4b40      	ldr	r3, [pc, #256]	; (8005e88 <_np_cmd_read_bad_blocks+0x11c>)
 8005d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	4798      	blx	r3
 8005d90:	4603      	mov	r3, r0
 8005d92:	f083 0301 	eor.w	r3, r3, #1
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d16a      	bne.n	8005e72 <_np_cmd_read_bad_blocks+0x106>
        goto Exit;

    block_num = prog->chip_info.total_size / prog->chip_info.block_size;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8005da2:	3330      	adds	r3, #48	; 0x30
 8005da4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005dae:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005db2:	2200      	movs	r2, #0
 8005db4:	4698      	mov	r8, r3
 8005db6:	4691      	mov	r9, r2
 8005db8:	4642      	mov	r2, r8
 8005dba:	464b      	mov	r3, r9
 8005dbc:	f7fe fa32 	bl	8004224 <__aeabi_uldivmod>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
    page_num = prog->chip_info.block_size / prog->chip_info.page_size;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005dce:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005dd8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de0:	617b      	str	r3, [r7, #20]

    /* Bad block - not 0xFF value in the first or second page in the block at
     * some offset in the page spare area
     */
    // 遍历所有块
    for (block = 0; block < block_num; block++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	e03f      	b.n	8005e68 <_np_cmd_read_bad_blocks+0xfc>
    {
        page = block * page_num;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	fb02 f303 	mul.w	r3, r2, r3
 8005df0:	613b      	str	r3, [r7, #16]

        // 如果需要发送进度信息，则调用np_send_progress函数发送
        if (send_progress)
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <_np_cmd_read_bad_blocks+0x9c>
            np_send_progress(page);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	461c      	mov	r4, r3
 8005dfe:	4615      	mov	r5, r2
 8005e00:	4620      	mov	r0, r4
 8005e02:	4629      	mov	r1, r5
 8005e04:	f7ff fe90 	bl	8005b28 <np_send_progress>

        // 从第一个页和第二个页读取坏块信息
        if ((ret = np_read_bad_block_info_from_page(prog, block, page,
 8005e08:	f107 030b 	add.w	r3, r7, #11
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	69f9      	ldr	r1, [r7, #28]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff ff0d 	bl	8005c30 <np_read_bad_block_info_from_page>
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <_np_cmd_read_bad_blocks+0xb6>
            &is_bad)))
        {
            return ret;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	e02c      	b.n	8005e7c <_np_cmd_read_bad_blocks+0x110>
        }

        if (!is_bad && (ret = np_read_bad_block_info_from_page(prog, block,
 8005e22:	7afb      	ldrb	r3, [r7, #11]
 8005e24:	f083 0301 	eor.w	r3, r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00d      	beq.n	8005e4a <_np_cmd_read_bad_blocks+0xde>
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	f107 030b 	add.w	r3, r7, #11
 8005e36:	69f9      	ldr	r1, [r7, #28]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff fef9 	bl	8005c30 <np_read_bad_block_info_from_page>
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <_np_cmd_read_bad_blocks+0xde>
            page + 1, &is_bad)))
        {
            return ret;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	e018      	b.n	8005e7c <_np_cmd_read_bad_blocks+0x110>
        }

        // 如果是坏块，则将该页添加到坏块表中
        if (is_bad && nand_bad_block_table_add(page))
 8005e4a:	7afb      	ldrb	r3, [r7, #11]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <_np_cmd_read_bad_blocks+0xf6>
 8005e50:	6938      	ldr	r0, [r7, #16]
 8005e52:	f7ff fd6b 	bl	800592c <nand_bad_block_table_add>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <_np_cmd_read_bad_blocks+0xf6>
            return NP_ERR_BBT_OVERFLOW;
 8005e5c:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8005e60:	e00c      	b.n	8005e7c <_np_cmd_read_bad_blocks+0x110>
    for (block = 0; block < block_num; block++)
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	3301      	adds	r3, #1
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d3bb      	bcc.n	8005de8 <_np_cmd_read_bad_blocks+0x7c>
    }

Exit:
 8005e70:	e000      	b.n	8005e74 <_np_cmd_read_bad_blocks+0x108>
        goto Exit;
 8005e72:	bf00      	nop
    prog->bb_is_read = 1;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	635a      	str	r2, [r3, #52]	; 0x34

    return 0;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3720      	adds	r7, #32
 8005e80:	46bd      	mov	sp, r7
 8005e82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e86:	bf00      	nop
 8005e88:	20000040 	.word	0x20000040

08005e8c <np_nand_erase>:

// NAND擦除函数
static int np_nand_erase(np_prog_t *prog, uint32_t page)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
    uint32_t status;
    uint64_t addr = page * prog->chip_info.page_size;
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8005e9c:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 8005ea0:	6838      	ldr	r0, [r7, #0]
 8005ea2:	fb00 f101 	mul.w	r1, r0, r1
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	460a      	mov	r2, r1
 8005eaa:	4603      	mov	r3, r0
 8005eac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    DEBUG_PRINT("NAND erase at 0x%" PRIx64 "\r\n", addr);
 8005eb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005eb4:	481f      	ldr	r0, [pc, #124]	; (8005f34 <np_nand_erase+0xa8>)
 8005eb6:	f00d fc2f 	bl	8013718 <iprintf>

    // 调用硬件抽象层的块擦除函数
    status = hal[prog->hal]->erase_block(page);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ec0:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4b1c      	ldr	r3, [pc, #112]	; (8005f38 <np_nand_erase+0xac>)
 8005ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	6838      	ldr	r0, [r7, #0]
 8005ed0:	4798      	blx	r3
 8005ed2:	60f8      	str	r0, [r7, #12]
    switch (status)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d018      	beq.n	8005f0c <np_nand_erase+0x80>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d81b      	bhi.n	8005f18 <np_nand_erase+0x8c>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01e      	beq.n	8005f24 <np_nand_erase+0x98>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d115      	bne.n	8005f18 <np_nand_erase+0x8c>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果擦除命令失败，发送坏块信息
        if (np_send_bad_block_info(addr, prog->chip_info.block_size, false))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ef2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005efc:	f7ff fddc 	bl	8005ab8 <np_send_bad_block_info>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d010      	beq.n	8005f28 <np_nand_erase+0x9c>
            return -1;
 8005f06:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0a:	e00f      	b.n	8005f2c <np_nand_erase+0xa0>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND erase timeout at 0x%" PRIx64 "\r\n", addr);
 8005f0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f10:	480a      	ldr	r0, [pc, #40]	; (8005f3c <np_nand_erase+0xb0>)
 8005f12:	f00d fc01 	bl	8013718 <iprintf>
        break;
 8005f16:	e008      	b.n	8005f2a <np_nand_erase+0x9e>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8005f18:	4809      	ldr	r0, [pc, #36]	; (8005f40 <np_nand_erase+0xb4>)
 8005f1a:	f00d fc63 	bl	80137e4 <puts>
        return -1;
 8005f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f22:	e003      	b.n	8005f2c <np_nand_erase+0xa0>
        break;
 8005f24:	bf00      	nop
 8005f26:	e000      	b.n	8005f2a <np_nand_erase+0x9e>
        break;
 8005f28:	bf00      	nop
    }

    return 0;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	080148d8 	.word	0x080148d8
 8005f38:	20000040 	.word	0x20000040
 8005f3c:	080148f0 	.word	0x080148f0
 8005f40:	080148bc 	.word	0x080148bc

08005f44 <_np_cmd_nand_erase>:

// 执行NAND擦除命令的内部函数
static int _np_cmd_nand_erase(np_prog_t *prog)
{
 8005f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f48:	b0ac      	sub	sp, #176	; 0xb0
 8005f4a:	af04      	add	r7, sp, #16
 8005f4c:	6578      	str	r0, [r7, #84]	; 0x54
    int ret;
    uint64_t addr, len, total_size, total_len;
    uint32_t page, pages, pages_in_block, page_size, block_size;
    np_erase_cmd_t *erase_cmd;
    bool skip_bb, inc_spare, is_bad = false;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_erase_cmd_t))
 8005f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2b11      	cmp	r3, #17
 8005f5a:	d808      	bhi.n	8005f6e <_np_cmd_nand_erase+0x2a>
    {
        ERROR_PRINT("Wrong buffer length for erase command %lu\r\n",
 8005f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	4619      	mov	r1, r3
 8005f62:	48a7      	ldr	r0, [pc, #668]	; (8006200 <_np_cmd_nand_erase+0x2bc>)
 8005f64:	f00d fbd8 	bl	8013718 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8005f68:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8005f6c:	e1bf      	b.n	80062ee <_np_cmd_nand_erase+0x3aa>
    }
    erase_cmd = (np_erase_cmd_t *)prog->rx_buf;
 8005f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	677b      	str	r3, [r7, #116]	; 0x74
    total_len = len = erase_cmd->len;
 8005f74:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005f76:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8005f7a:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8005f7e:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8005f82:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005f86:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    addr = erase_cmd->addr;
 8005f8a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005f8c:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8005f90:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8005f94:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    skip_bb = erase_cmd->flags.skip_bb;
 8005f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f9a:	7c5b      	ldrb	r3, [r3, #17]
 8005f9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bf14      	ite	ne
 8005fa6:	2301      	movne	r3, #1
 8005fa8:	2300      	moveq	r3, #0
 8005faa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    inc_spare = erase_cmd->flags.inc_spare;
 8005fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fb0:	7c5b      	ldrb	r3, [r3, #17]
 8005fb2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    DEBUG_PRINT("Erase at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n", addr,
 8005fc4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005fc8:	e9cd 2300 	strd	r2, r3, [sp]
 8005fcc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8005fd0:	488c      	ldr	r0, [pc, #560]	; (8006204 <_np_cmd_nand_erase+0x2c0>)
 8005fd2:	f00d fba1 	bl	8013718 <iprintf>
            len);

    pages_in_block = prog->chip_info.block_size / prog->chip_info.page_size;
 8005fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fd8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005fdc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fe2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005fe6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fee:	663b      	str	r3, [r7, #96]	; 0x60

    if (inc_spare)
 8005ff0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d03f      	beq.n	8006078 <_np_cmd_nand_erase+0x134>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8005ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ffa:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8005ffe:	3330      	adds	r3, #48	; 0x30
 8006000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006006:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800600a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800600e:	2200      	movs	r2, #0
 8006010:	64bb      	str	r3, [r7, #72]	; 0x48
 8006012:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006014:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006018:	f7fe f904 	bl	8004224 <__aeabi_uldivmod>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4613      	mov	r3, r2
 8006022:	65fb      	str	r3, [r7, #92]	; 0x5c
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8006024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006026:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800602a:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 800602e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006030:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006034:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8006038:	4413      	add	r3, r2
 800603a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = pages_in_block * page_size;
 800603e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006044:	fb02 f303 	mul.w	r3, r2, r3
 8006048:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = (uint64_t)pages * page_size;
 800604a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800604c:	2200      	movs	r2, #0
 800604e:	469a      	mov	sl, r3
 8006050:	4693      	mov	fp, r2
 8006052:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006056:	2200      	movs	r2, #0
 8006058:	4698      	mov	r8, r3
 800605a:	4691      	mov	r9, r2
 800605c:	fb08 f20b 	mul.w	r2, r8, fp
 8006060:	fb0a f309 	mul.w	r3, sl, r9
 8006064:	4413      	add	r3, r2
 8006066:	fbaa 4508 	umull	r4, r5, sl, r8
 800606a:	442b      	add	r3, r5
 800606c:	461d      	mov	r5, r3
 800606e:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 8006072:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 8006076:	e014      	b.n	80060a2 <_np_cmd_nand_erase+0x15e>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8006078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800607a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800607e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006082:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = prog->chip_info.block_size;
 8006086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006088:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800608c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006090:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = prog->chip_info.total_size;
 8006092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006094:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006098:	3330      	adds	r3, #48	; 0x30
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    }

    // 如果设置了跳过坏块标志，并且坏块表未读取，则调用_np_cmd_read_bad_blocks函数进行坏块表读取
    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 80060a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <_np_cmd_nand_erase+0x182>
 80060aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <_np_cmd_nand_erase+0x182>
 80060b2:	2100      	movs	r1, #0
 80060b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80060b6:	f7ff fe59 	bl	8005d6c <_np_cmd_read_bad_blocks>
 80060ba:	65b8      	str	r0, [r7, #88]	; 0x58
 80060bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <_np_cmd_nand_erase+0x182>
    	false)))
    {
        return ret;
 80060c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060c4:	e113      	b.n	80062ee <_np_cmd_nand_erase+0x3aa>
    }

    // 检查地址是否对齐到块大小
    if (addr % block_size)
 80060c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060c8:	2200      	movs	r2, #0
 80060ca:	643b      	str	r3, [r7, #64]	; 0x40
 80060cc:	647a      	str	r2, [r7, #68]	; 0x44
 80060ce:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060d6:	f7fe f8a5 	bl	8004224 <__aeabi_uldivmod>
 80060da:	4313      	orrs	r3, r2
 80060dc:	d009      	beq.n	80060f2 <_np_cmd_nand_erase+0x1ae>
    {
        ERROR_PRINT("Address 0x%" PRIx64
 80060de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80060e6:	4848      	ldr	r0, [pc, #288]	; (8006208 <_np_cmd_nand_erase+0x2c4>)
 80060e8:	f00d fb16 	bl	8013718 <iprintf>
                " is not aligned to block size 0x%lx\r\n", addr, block_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 80060ec:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80060f0:	e0fd      	b.n	80062ee <_np_cmd_nand_erase+0x3aa>
    }

    // 检查长度是否为零
    if (!len)
 80060f2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80060f6:	4313      	orrs	r3, r2
 80060f8:	d105      	bne.n	8006106 <_np_cmd_nand_erase+0x1c2>
    {
        ERROR_PRINT("Length is 0\r\n");
 80060fa:	4844      	ldr	r0, [pc, #272]	; (800620c <_np_cmd_nand_erase+0x2c8>)
 80060fc:	f00d fb72 	bl	80137e4 <puts>
        return NP_ERR_LEN_INVALID;
 8006100:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8006104:	e0f3      	b.n	80062ee <_np_cmd_nand_erase+0x3aa>
    }

    // 检查长度是否对齐到块大小
    if (len % block_size)
 8006106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006108:	2200      	movs	r2, #0
 800610a:	63bb      	str	r3, [r7, #56]	; 0x38
 800610c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800610e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006112:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006116:	f7fe f885 	bl	8004224 <__aeabi_uldivmod>
 800611a:	4313      	orrs	r3, r2
 800611c:	d009      	beq.n	8006132 <_np_cmd_nand_erase+0x1ee>
    {
        ERROR_PRINT("Length 0x%" PRIx64
 800611e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006126:	483a      	ldr	r0, [pc, #232]	; (8006210 <_np_cmd_nand_erase+0x2cc>)
 8006128:	f00d faf6 	bl	8013718 <iprintf>
                " is not aligned to block size 0x%lx\r\n", len, block_size);
        return NP_ERR_LEN_NOT_ALIGN;
 800612c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8006130:	e0dd      	b.n	80062ee <_np_cmd_nand_erase+0x3aa>
    }

    // 检查擦除地址是否超出芯片大小
    if (addr + len > total_size)
 8006132:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006136:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800613a:	1884      	adds	r4, r0, r2
 800613c:	633c      	str	r4, [r7, #48]	; 0x30
 800613e:	eb41 0303 	adc.w	r3, r1, r3
 8006142:	637b      	str	r3, [r7, #52]	; 0x34
 8006144:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006148:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800614c:	4604      	mov	r4, r0
 800614e:	42a2      	cmp	r2, r4
 8006150:	418b      	sbcs	r3, r1
 8006152:	d20f      	bcs.n	8006174 <_np_cmd_nand_erase+0x230>
    {
        ERROR_PRINT("Erase address exceded 0x%" PRIx64 "+0x%" PRIx64
 8006154:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006158:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800615c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006160:	e9cd 2300 	strd	r2, r3, [sp]
 8006164:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006168:	482a      	ldr	r0, [pc, #168]	; (8006214 <_np_cmd_nand_erase+0x2d0>)
 800616a:	f00d fad5 	bl	8013718 <iprintf>
            " is more then chip size 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 800616e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006172:	e0bc      	b.n	80062ee <_np_cmd_nand_erase+0x3aa>
    }

    page = addr / page_size;
 8006174:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006178:	2200      	movs	r2, #0
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
 800617c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800617e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006182:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006186:	f7fe f84d 	bl	8004224 <__aeabi_uldivmod>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4613      	mov	r3, r2
 8006190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    while (len)
 8006194:	e0a3      	b.n	80062de <_np_cmd_nand_erase+0x39a>
    {
        if (addr >= total_size)
 8006196:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800619a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800619e:	4290      	cmp	r0, r2
 80061a0:	eb71 0303 	sbcs.w	r3, r1, r3
 80061a4:	d30b      	bcc.n	80061be <_np_cmd_nand_erase+0x27a>
        {
            ERROR_PRINT("Erase address 0x%" PRIx64
 80061a6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80061aa:	e9cd 2300 	strd	r2, r3, [sp]
 80061ae:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80061b2:	4819      	ldr	r0, [pc, #100]	; (8006218 <_np_cmd_nand_erase+0x2d4>)
 80061b4:	f00d fab0 	bl	8013718 <iprintf>
                " is more then chip size 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 80061b8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80061bc:	e097      	b.n	80062ee <_np_cmd_nand_erase+0x3aa>
        }

        // 如果设置了跳过坏块标志，并且当前块为坏块，则跳过当前块，并发送坏块信息
        if (skip_bb && (is_bad = nand_bad_block_table_lookup(page)))
 80061be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d02c      	beq.n	8006220 <_np_cmd_nand_erase+0x2dc>
 80061c6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80061ca:	f7ff fbcd 	bl	8005968 <nand_bad_block_table_lookup>
 80061ce:	4603      	mov	r3, r0
 80061d0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80061d4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d021      	beq.n	8006220 <_np_cmd_nand_erase+0x2dc>
        {
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", addr);
 80061dc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80061e0:	480e      	ldr	r0, [pc, #56]	; (800621c <_np_cmd_nand_erase+0x2d8>)
 80061e2:	f00d fa99 	bl	8013718 <iprintf>
            if (np_send_bad_block_info(addr, block_size, true))
 80061e6:	2301      	movs	r3, #1
 80061e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80061ea:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061ee:	f7ff fc63 	bl	8005ab8 <np_send_bad_block_info>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d013      	beq.n	8006220 <_np_cmd_nand_erase+0x2dc>
                return -1;
 80061f8:	f04f 33ff 	mov.w	r3, #4294967295
 80061fc:	e077      	b.n	80062ee <_np_cmd_nand_erase+0x3aa>
 80061fe:	bf00      	nop
 8006200:	08014918 	.word	0x08014918
 8006204:	0801494c 	.word	0x0801494c
 8006208:	08014974 	.word	0x08014974
 800620c:	080149b0 	.word	0x080149b0
 8006210:	080149c4 	.word	0x080149c4
 8006214:	08014a00 	.word	0x08014a00
 8006218:	08014a4c 	.word	0x08014a4c
 800621c:	08014a88 	.word	0x08014a88
        }

        // 如果不是坏块，则执行擦除操作
        if (!is_bad && np_nand_erase(prog, page))
 8006220:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006224:	f083 0301 	eor.w	r3, r3, #1
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <_np_cmd_nand_erase+0x300>
 800622e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006232:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006234:	f7ff fe2a 	bl	8005e8c <np_nand_erase>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <_np_cmd_nand_erase+0x300>
            return NP_ERR_NAND_ERASE;
 800623e:	f06f 0368 	mvn.w	r3, #104	; 0x68
 8006242:	e054      	b.n	80062ee <_np_cmd_nand_erase+0x3aa>

        addr += block_size;
 8006244:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006246:	2200      	movs	r2, #0
 8006248:	623b      	str	r3, [r7, #32]
 800624a:	627a      	str	r2, [r7, #36]	; 0x24
 800624c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006250:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006254:	4621      	mov	r1, r4
 8006256:	1851      	adds	r1, r2, r1
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	4629      	mov	r1, r5
 800625c:	414b      	adcs	r3, r1
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006264:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
        page += pages_in_block;
 8006268:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800626c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800626e:	4413      	add	r3, r2
 8006270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        /* 在部分擦除时不计算坏块 */
        if (!is_bad || (is_bad && erase_cmd->len == total_size))
 8006274:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006278:	f083 0301 	eor.w	r3, r3, #1
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10e      	bne.n	80062a0 <_np_cmd_nand_erase+0x35c>
 8006282:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006286:	2b00      	cmp	r3, #0
 8006288:	d01c      	beq.n	80062c4 <_np_cmd_nand_erase+0x380>
 800628a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800628c:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8006290:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8006294:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006298:	4299      	cmp	r1, r3
 800629a:	bf08      	it	eq
 800629c:	4290      	cmpeq	r0, r2
 800629e:	d111      	bne.n	80062c4 <_np_cmd_nand_erase+0x380>
            len -= block_size;
 80062a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062a2:	2200      	movs	r2, #0
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	61fa      	str	r2, [r7, #28]
 80062a8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80062ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80062b0:	4604      	mov	r4, r0
 80062b2:	1b14      	subs	r4, r2, r4
 80062b4:	603c      	str	r4, [r7, #0]
 80062b6:	eb63 0301 	sbc.w	r3, r3, r1
 80062ba:	607b      	str	r3, [r7, #4]
 80062bc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80062c0:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

        // 发送进度信息
        np_send_progress(total_len - len);
 80062c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062c8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80062cc:	1a84      	subs	r4, r0, r2
 80062ce:	613c      	str	r4, [r7, #16]
 80062d0:	eb61 0303 	sbc.w	r3, r1, r3
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80062da:	f7ff fc25 	bl	8005b28 <np_send_progress>
    while (len)
 80062de:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f47f af57 	bne.w	8006196 <_np_cmd_nand_erase+0x252>
    }

    return np_send_ok_status();
 80062e8:	f7ff fba0 	bl	8005a2c <np_send_ok_status>
 80062ec:	4603      	mov	r3, r0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	37a0      	adds	r7, #160	; 0xa0
 80062f2:	46bd      	mov	sp, r7
 80062f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080062f8 <np_cmd_nand_erase>:

// 执行NAND擦除命令的函数
static int np_cmd_nand_erase(np_prog_t *prog)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
    int ret;

    // 设置写入指示灯
    led_wr_set(true);
 8006300:	2001      	movs	r0, #1
 8006302:	f7ff f9b5 	bl	8005670 <led_wr_set>
    // 调用内部的_np_cmd_nand_erase函数执行擦除命令
    ret = _np_cmd_nand_erase(prog);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff fe1c 	bl	8005f44 <_np_cmd_nand_erase>
 800630c:	60f8      	str	r0, [r7, #12]
    // 关闭写入指示灯
    led_wr_set(false);
 800630e:	2000      	movs	r0, #0
 8006310:	f7ff f9ae 	bl	8005670 <led_wr_set>

    return ret;
 8006314:	68fb      	ldr	r3, [r7, #12]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <np_send_write_ack>:

// 发送写入确认的函数
static int np_send_write_ack(uint64_t bytes_ack)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	e9c7 0100 	strd	r0, r1, [r7]
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_WRITE_ACK };
 800632a:	4b13      	ldr	r3, [pc, #76]	; (8006378 <np_send_write_ack+0x58>)
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	83bb      	strh	r3, [r7, #28]
    np_resp_write_ack_t write_ack = { resp_header, bytes_ack };
 8006330:	f107 030c 	add.w	r3, r7, #12
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	605a      	str	r2, [r3, #4]
 800633a:	609a      	str	r2, [r3, #8]
 800633c:	819a      	strh	r2, [r3, #12]
 800633e:	8bbb      	ldrh	r3, [r7, #28]
 8006340:	81bb      	strh	r3, [r7, #12]
 8006342:	f107 0310 	add.w	r3, r7, #16
 8006346:	3b02      	subs	r3, #2
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	605a      	str	r2, [r3, #4]

    // 发送写入确认响应
    if (np_comm_cb->send((uint8_t *)&write_ack, sizeof(write_ack)))
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <np_send_write_ack+0x5c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f107 020c 	add.w	r2, r7, #12
 800635a:	210e      	movs	r1, #14
 800635c:	4610      	mov	r0, r2
 800635e:	4798      	blx	r3
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <np_send_write_ack+0x4c>
        return -1;
 8006366:	f04f 33ff 	mov.w	r3, #4294967295
 800636a:	e000      	b.n	800636e <np_send_write_ack+0x4e>

    return 0;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	08014aa8 	.word	0x08014aa8
 800637c:	20000cf0 	.word	0x20000cf0

08006380 <np_cmd_nand_write_start>:

// 执行NAND写入开始命令的函数
static int np_cmd_nand_write_start(np_prog_t *prog)
{
 8006380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006384:	b09a      	sub	sp, #104	; 0x68
 8006386:	af04      	add	r7, sp, #16
 8006388:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint64_t addr, len;
    uint32_t pages, pages_in_block;
    np_write_start_cmd_t *write_start_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b11      	cmp	r3, #17
 8006390:	d808      	bhi.n	80063a4 <np_cmd_nand_write_start+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write start command %lu\r\n",
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	4619      	mov	r1, r3
 8006398:	489d      	ldr	r0, [pc, #628]	; (8006610 <np_cmd_nand_write_start+0x290>)
 800639a:	f00d f9bd 	bl	8013718 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 800639e:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80063a2:	e184      	b.n	80066ae <np_cmd_nand_write_start+0x32e>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	657b      	str	r3, [r7, #84]	; 0x54

    // 如果硬件支持硬件ECC，启用硬件ECC
    if (hal[prog->hal]->enable_hw_ecc)
 80063aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80063b0:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 80063b4:	461a      	mov	r2, r3
 80063b6:	4b97      	ldr	r3, [pc, #604]	; (8006614 <np_cmd_nand_write_start+0x294>)
 80063b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d015      	beq.n	80063ee <np_cmd_nand_write_start+0x6e>
        hal[prog->hal]->enable_hw_ecc(write_start_cmd->flags.enable_hw_ecc);
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80063c8:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 80063cc:	461a      	mov	r2, r3
 80063ce:	4b91      	ldr	r3, [pc, #580]	; (8006614 <np_cmd_nand_write_start+0x294>)
 80063d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d8:	7c5b      	ldrb	r3, [r3, #17]
 80063da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	bf14      	ite	ne
 80063e4:	2301      	movne	r3, #1
 80063e6:	2300      	moveq	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	4618      	mov	r0, r3
 80063ec:	4790      	blx	r2

    addr = write_start_cmd->addr;
 80063ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063f0:	f8d1 2001 	ldr.w	r2, [r1, #1]
 80063f4:	f8d1 3005 	ldr.w	r3, [r1, #5]
 80063f8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    len = write_start_cmd->len;
 80063fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063fe:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8006402:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8006406:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    DEBUG_PRINT("Write at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n",
 800640a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800640e:	e9cd 2300 	strd	r2, r3, [sp]
 8006412:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006416:	4880      	ldr	r0, [pc, #512]	; (8006618 <np_cmd_nand_write_start+0x298>)
 8006418:	f00d f97e 	bl	8013718 <iprintf>
        addr, len);

    if (write_start_cmd->flags.inc_spare)
 800641c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800641e:	7c5b      	ldrb	r3, [r3, #17]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d051      	beq.n	80064ce <np_cmd_nand_write_start+0x14e>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006430:	3330      	adds	r3, #48	; 0x30
 8006432:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800643c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006440:	2200      	movs	r2, #0
 8006442:	623b      	str	r3, [r7, #32]
 8006444:	627a      	str	r2, [r7, #36]	; 0x24
 8006446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800644a:	f7fd feeb 	bl	8004224 <__aeabi_uldivmod>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4613      	mov	r3, r2
 8006454:	63fb      	str	r3, [r7, #60]	; 0x3c
        pages_in_block = prog->chip_info.block_size /
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800645c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006466:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 800646a:	fbb2 f3f3 	udiv	r3, r2, r3
 800646e:	63bb      	str	r3, [r7, #56]	; 0x38
        prog->page_size = prog->chip_info.page_size +
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006476:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
            prog->chip_info.spare_size;
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006480:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
        prog->page_size = prog->chip_info.page_size +
 8006484:	441a      	add	r2, r3
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	621a      	str	r2, [r3, #32]
        prog->block_size = pages_in_block * prog->page_size;
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	6a1a      	ldr	r2, [r3, #32]
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	fb03 f202 	mul.w	r2, r3, r2
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = (uint64_t)pages * prog->page_size;
 8006498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649a:	2200      	movs	r2, #0
 800649c:	469a      	mov	sl, r3
 800649e:	4693      	mov	fp, r2
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	2200      	movs	r2, #0
 80064a6:	61bb      	str	r3, [r7, #24]
 80064a8:	61fa      	str	r2, [r7, #28]
 80064aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80064ae:	4603      	mov	r3, r0
 80064b0:	fb03 f20b 	mul.w	r2, r3, fp
 80064b4:	460b      	mov	r3, r1
 80064b6:	fb0a f303 	mul.w	r3, sl, r3
 80064ba:	4413      	add	r3, r2
 80064bc:	4602      	mov	r2, r0
 80064be:	fbaa 4502 	umull	r4, r5, sl, r2
 80064c2:	442b      	add	r3, r5
 80064c4:	461d      	mov	r5, r3
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 80064cc:	e016      	b.n	80064fc <np_cmd_nand_write_start+0x17c>
    }
    else
    {
        prog->page_size = prog->chip_info.page_size;
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064d4:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	621a      	str	r2, [r3, #32]
        prog->block_size = prog->chip_info.block_size;
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064e2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = prog->chip_info.total_size;
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80064f0:	3330      	adds	r3, #48	; 0x30
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064f8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }

    // 检查写入地址是否超出芯片大小
    if (addr + len > prog->total_size)
 80064fc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006500:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006504:	eb10 0802 	adds.w	r8, r0, r2
 8006508:	eb41 0903 	adc.w	r9, r1, r3
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006512:	4542      	cmp	r2, r8
 8006514:	eb73 0309 	sbcs.w	r3, r3, r9
 8006518:	d210      	bcs.n	800653c <np_cmd_nand_write_start+0x1bc>
    {
        ERROR_PRINT("Write address 0x%" PRIx64 "+0x%" PRIx64
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006520:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006524:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006528:	e9cd 2300 	strd	r2, r3, [sp]
 800652c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006530:	483a      	ldr	r0, [pc, #232]	; (800661c <np_cmd_nand_write_start+0x29c>)
 8006532:	f00d f8f1 	bl	8013718 <iprintf>
            " is more then chip size 0x%" PRIx64 "\r\n", addr, len,
            prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8006536:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800653a:	e0b8      	b.n	80066ae <np_cmd_nand_write_start+0x32e>
    }

    // 检查地址是否对齐到页大小
    if (addr % prog->page_size)
 800653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	2200      	movs	r2, #0
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	617a      	str	r2, [r7, #20]
 8006546:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800654a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800654e:	f7fd fe69 	bl	8004224 <__aeabi_uldivmod>
 8006552:	4313      	orrs	r3, r2
 8006554:	d00a      	beq.n	800656c <np_cmd_nand_write_start+0x1ec>
    {
        ERROR_PRINT("Address 0x%" PRIx64
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006560:	482f      	ldr	r0, [pc, #188]	; (8006620 <np_cmd_nand_write_start+0x2a0>)
 8006562:	f00d f8d9 	bl	8013718 <iprintf>
            " is not aligned to page size 0x%lx\r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8006566:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800656a:	e0a0      	b.n	80066ae <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否为零
    if (!len)
 800656c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006570:	4313      	orrs	r3, r2
 8006572:	d105      	bne.n	8006580 <np_cmd_nand_write_start+0x200>
    {
        ERROR_PRINT("Length is 0\r\n");
 8006574:	482b      	ldr	r0, [pc, #172]	; (8006624 <np_cmd_nand_write_start+0x2a4>)
 8006576:	f00d f935 	bl	80137e4 <puts>
        return NP_ERR_LEN_INVALID;
 800657a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800657e:	e096      	b.n	80066ae <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否对齐到页大小
    if (len % prog->page_size)
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	2200      	movs	r2, #0
 8006586:	60bb      	str	r3, [r7, #8]
 8006588:	60fa      	str	r2, [r7, #12]
 800658a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800658e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006592:	f7fd fe47 	bl	8004224 <__aeabi_uldivmod>
 8006596:	4313      	orrs	r3, r2
 8006598:	d00a      	beq.n	80065b0 <np_cmd_nand_write_start+0x230>
    {
        ERROR_PRINT("Length 0x%" PRIx64
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065a4:	4820      	ldr	r0, [pc, #128]	; (8006628 <np_cmd_nand_write_start+0x2a8>)
 80065a6:	f00d f8b7 	bl	8013718 <iprintf>
            " is not aligned to page size 0x%lx\r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 80065aa:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80065ae:	e07e      	b.n	80066ae <np_cmd_nand_write_start+0x32e>
    }

    // 设置跳过坏块标志，并且读取坏块信息
    prog->skip_bb = write_start_cmd->flags.skip_bb;
 80065b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b2:	7c5b      	ldrb	r3, [r3, #17]
 80065b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    if (prog->skip_bb && !prog->bb_is_read &&
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00d      	beq.n	80065f0 <np_cmd_nand_write_start+0x270>
 80065d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d109      	bne.n	80065f0 <np_cmd_nand_write_start+0x270>
        (ret = _np_cmd_read_bad_blocks(prog, false)))
 80065dc:	2100      	movs	r1, #0
 80065de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065e0:	f7ff fbc4 	bl	8005d6c <_np_cmd_read_bad_blocks>
 80065e4:	6378      	str	r0, [r7, #52]	; 0x34
    if (prog->skip_bb && !prog->bb_is_read &&
 80065e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <np_cmd_nand_write_start+0x270>
    {
        return ret;
 80065ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ee:	e05e      	b.n	80066ae <np_cmd_nand_write_start+0x32e>
    }

    // 检查页大小是否超过缓冲区大小
    if (prog->page_size > sizeof(prog->page.buf))
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 80065f8:	d91a      	bls.n	8006630 <np_cmd_nand_write_start+0x2b0>
    {
        ERROR_PRINT("Page size 0x%lx"
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f44f 5207 	mov.w	r2, #8640	; 0x21c0
 8006602:	4619      	mov	r1, r3
 8006604:	4809      	ldr	r0, [pc, #36]	; (800662c <np_cmd_nand_write_start+0x2ac>)
 8006606:	f00d f887 	bl	8013718 <iprintf>
            " is more then buffer size 0x%x\r\n", prog->page_size, sizeof(prog->page.buf));
        return NP_ERR_BUF_OVERFLOW;
 800660a:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 800660e:	e04e      	b.n	80066ae <np_cmd_nand_write_start+0x32e>
 8006610:	08014aac 	.word	0x08014aac
 8006614:	20000040 	.word	0x20000040
 8006618:	08014ae8 	.word	0x08014ae8
 800661c:	08014b10 	.word	0x08014b10
 8006620:	08014b54 	.word	0x08014b54
 8006624:	080149b0 	.word	0x080149b0
 8006628:	08014b90 	.word	0x08014b90
 800662c:	08014bcc 	.word	0x08014bcc
    }

    // 设置写入相关的参数
    prog->addr = addr;
 8006630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006632:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006636:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 800663a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800663c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006640:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 8006644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006646:	2201      	movs	r2, #1
 8006648:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	2200      	movs	r2, #0
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006658:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800665c:	f7fd fde2 	bl	8004224 <__aeabi_uldivmod>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800666a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006674:	461a      	mov	r2, r3
 8006676:	2300      	movs	r3, #0
 8006678:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006682:	3310      	adds	r3, #16
 8006684:	4619      	mov	r1, r3
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	f04f 0300 	mov.w	r3, #0
 800668e:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006698:	3310      	adds	r3, #16
 800669a:	4619      	mov	r1, r3
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	e9c1 2300 	strd	r2, r3, [r1]

    // 发送OK状态响应
    return np_send_ok_status();
 80066a8:	f7ff f9c0 	bl	8005a2c <np_send_ok_status>
 80066ac:	4603      	mov	r3, r0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3758      	adds	r7, #88	; 0x58
 80066b2:	46bd      	mov	sp, r7
 80066b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080066b8 <np_nand_handle_status>:

// 处理NAND状态的函数
static int np_nand_handle_status(np_prog_t *prog)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
    switch (hal[prog->hal]->read_status())
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80066c6:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 80066ca:	461a      	mov	r2, r3
 80066cc:	4b37      	ldr	r3, [pc, #220]	; (80067ac <np_nand_handle_status+0xf4>)
 80066ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	4798      	blx	r3
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d006      	beq.n	80066ea <np_nand_handle_status+0x32>
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d84b      	bhi.n	8006778 <np_nand_handle_status+0xc0>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d010      	beq.n	8006706 <np_nand_handle_status+0x4e>
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d01d      	beq.n	8006724 <np_nand_handle_status+0x6c>
 80066e8:	e046      	b.n	8006778 <np_nand_handle_status+0xc0>
    {
    case FLASH_STATUS_ERROR:
        // 如果状态为错误，发送坏块信息
        if (np_send_bad_block_info(prog->addr, prog->block_size, false))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066f4:	2300      	movs	r3, #0
 80066f6:	f7ff f9df 	bl	8005ab8 <np_send_bad_block_info>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <np_nand_handle_status+0x4e>
            return -1;
 8006700:	f04f 33ff 	mov.w	r3, #4294967295
 8006704:	e04e      	b.n	80067a4 <np_nand_handle_status+0xec>
        /* 继续执行下面的代码 */
    case FLASH_STATUS_READY:
        // 如果状态为就绪，表示操作完成，将标志位和超时计数器重置
        prog->nand_wr_in_progress = 0;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800670c:	461a      	mov	r2, r3
 800670e:	2300      	movs	r3, #0
 8006710:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800671a:	461a      	mov	r2, r3
 800671c:	2300      	movs	r3, #0
 800671e:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        break;
 8006722:	e03e      	b.n	80067a2 <np_nand_handle_status+0xea>
    case FLASH_STATUS_BUSY:
        // 如果状态为繁忙，增加超时计数器，并检查是否超时
        if (++prog->nand_timeout == NP_NAND_TIMEOUT)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800672a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800672e:	3301      	adds	r3, #1
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006736:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006740:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006748:	d12a      	bne.n	80067a0 <np_nand_handle_status+0xe8>
        {
            ERROR_PRINT("NAND write timeout at 0x%" PRIx64 "\r\n", prog->addr);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006750:	4817      	ldr	r0, [pc, #92]	; (80067b0 <np_nand_handle_status+0xf8>)
 8006752:	f00c ffe1 	bl	8013718 <iprintf>
            prog->nand_wr_in_progress = 0;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800675c:	461a      	mov	r2, r3
 800675e:	2300      	movs	r3, #0
 8006760:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
            prog->nand_timeout = 0;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800676a:	461a      	mov	r2, r3
 800676c:	2300      	movs	r3, #0
 800676e:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
            return -1;
 8006772:	f04f 33ff 	mov.w	r3, #4294967295
 8006776:	e015      	b.n	80067a4 <np_nand_handle_status+0xec>
        }
        break;
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8006778:	480e      	ldr	r0, [pc, #56]	; (80067b4 <np_nand_handle_status+0xfc>)
 800677a:	f00d f833 	bl	80137e4 <puts>
        prog->nand_wr_in_progress = 0;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006784:	461a      	mov	r2, r3
 8006786:	2300      	movs	r3, #0
 8006788:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006792:	461a      	mov	r2, r3
 8006794:	2300      	movs	r3, #0
 8006796:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        return -1;
 800679a:	f04f 33ff 	mov.w	r3, #4294967295
 800679e:	e001      	b.n	80067a4 <np_nand_handle_status+0xec>
        break;
 80067a0:	bf00      	nop
    }

    return 0;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20000040 	.word	0x20000040
 80067b0:	08014c04 	.word	0x08014c04
 80067b4:	080148bc 	.word	0x080148bc

080067b8 <np_nand_write>:

// 执行NAND写入的函数
static int np_nand_write(np_prog_t *prog)
{   
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af02      	add	r7, sp, #8
 80067be:	6078      	str	r0, [r7, #4]
    // 如果上一次的NAND写入还在进行中，等待其完成
    if (prog->nand_wr_in_progress)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80067c6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d012      	beq.n	80067f4 <np_nand_write+0x3c>
    {
        DEBUG_PRINT("Wait for previous NAND write\r\n");
 80067ce:	481e      	ldr	r0, [pc, #120]	; (8006848 <np_nand_write+0x90>)
 80067d0:	f00d f808 	bl	80137e4 <puts>
        do
        {
            if (np_nand_handle_status(prog))
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ff6f 	bl	80066b8 <np_nand_handle_status>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <np_nand_write+0x2e>
                return -1;
 80067e0:	f04f 33ff 	mov.w	r3, #4294967295
 80067e4:	e02c      	b.n	8006840 <np_nand_write+0x88>
        }
        while (prog->nand_wr_in_progress);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80067ec:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1ef      	bne.n	80067d4 <np_nand_write+0x1c>
    }

    DEBUG_PRINT("NAND write at 0x%" PRIx64 " %lu bytes\r\n", prog->addr,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	6a09      	ldr	r1, [r1, #32]
 80067fe:	9100      	str	r1, [sp, #0]
 8006800:	4812      	ldr	r0, [pc, #72]	; (800684c <np_nand_write+0x94>)
 8006802:	f00c ff89 	bl	8013718 <iprintf>
        prog->page_size);

    // 调用硬件抽象层函数执行异步写入操作
    hal[prog->hal]->write_page_async(prog->page.buf, prog->page.page,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800680c:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8006810:	461a      	mov	r2, r3
 8006812:	4b0f      	ldr	r3, [pc, #60]	; (8006850 <np_nand_write+0x98>)
 8006814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	f102 003c 	add.w	r0, r2, #60	; 0x3c
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006826:	f8d2 11fc 	ldr.w	r1, [r2, #508]	; 0x1fc
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6a12      	ldr	r2, [r2, #32]
 800682e:	4798      	blx	r3
        prog->page_size);

    prog->nand_wr_in_progress = 1;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006836:	461a      	mov	r2, r3
 8006838:	2301      	movs	r3, #1
 800683a:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

    return 0;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	08014c2c 	.word	0x08014c2c
 800684c:	08014c4c 	.word	0x08014c4c
 8006850:	20000040 	.word	0x20000040

08006854 <np_cmd_nand_write_data>:

// 执行NAND写入数据命令的函数
static int np_cmd_nand_write_data(np_prog_t *prog)
{
 8006854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006858:	b092      	sub	sp, #72	; 0x48
 800685a:	af02      	add	r7, sp, #8
 800685c:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint32_t write_len, bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d808      	bhi.n	8006878 <np_cmd_nand_write_data+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write data command %lu\r\n",
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	4619      	mov	r1, r3
 800686c:	486e      	ldr	r0, [pc, #440]	; (8006a28 <np_cmd_nand_write_data+0x1d4>)
 800686e:	f00c ff53 	bl	8013718 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8006872:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8006876:	e1a1      	b.n	8006bbc <np_cmd_nand_write_data+0x368>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 8006878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	63bb      	str	r3, [r7, #56]	; 0x38
    len = write_data_cmd->len;
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	785b      	ldrb	r3, [r3, #1]
 8006882:	637b      	str	r3, [r7, #52]	; 0x34
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 8006884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006886:	3302      	adds	r3, #2
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	d906      	bls.n	800689a <np_cmd_nand_write_data+0x46>
    {
        ERROR_PRINT("Data size is wrong 0x%lx\r\n", len);
 800688c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800688e:	4867      	ldr	r0, [pc, #412]	; (8006a2c <np_cmd_nand_write_data+0x1d8>)
 8006890:	f00c ff42 	bl	8013718 <iprintf>
        return NP_ERR_CMD_DATA_SIZE;
 8006894:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8006898:	e190      	b.n	8006bbc <np_cmd_nand_write_data+0x368>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 800689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689c:	1c9a      	adds	r2, r3, #2
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d00a      	beq.n	80068bc <np_cmd_nand_write_data+0x68>
    {
        ERROR_PRINT("Buffer len 0x%lx is bigger then command 0x%lx\r\n",
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	6859      	ldr	r1, [r3, #4]
 80068aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ac:	3302      	adds	r3, #2
 80068ae:	461a      	mov	r2, r3
 80068b0:	485f      	ldr	r0, [pc, #380]	; (8006a30 <np_cmd_nand_write_data+0x1dc>)
 80068b2:	f00c ff31 	bl	8013718 <iprintf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 80068b6:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80068ba:	e17f      	b.n	8006bbc <np_cmd_nand_write_data+0x368>
    }

    // 检查写入地址是否已设置
    if (!prog->addr_is_set)
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d105      	bne.n	80068d0 <np_cmd_nand_write_data+0x7c>
    {
        ERROR_PRINT("Write address is not set\r\n");
 80068c4:	485b      	ldr	r0, [pc, #364]	; (8006a34 <np_cmd_nand_write_data+0x1e0>)
 80068c6:	f00c ff8d 	bl	80137e4 <puts>
        return NP_ERR_ADDR_INVALID;
 80068ca:	f06f 0364 	mvn.w	r3, #100	; 0x64
 80068ce:	e175      	b.n	8006bbc <np_cmd_nand_write_data+0x368>
    }

    // 计算本次写入的长度
    if (prog->page.offset + len > prog->page_size)
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80068da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068dc:	441a      	add	r2, r3
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d909      	bls.n	80068fa <np_cmd_nand_write_data+0xa6>
        write_len = prog->page_size - prog->page.offset;
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	6a1a      	ldr	r2, [r3, #32]
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f8:	e001      	b.n	80068fe <np_cmd_nand_write_data+0xaa>
    else
        write_len = len;
 80068fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c

    // 将数据拷贝到页缓冲区
    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800690a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800690e:	18d0      	adds	r0, r2, r3
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	3302      	adds	r3, #2
 8006914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006916:	4619      	mov	r1, r3
 8006918:	f00d f8bf 	bl	8013a9a <memcpy>
    prog->page.offset += write_len;
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006922:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006928:	441a      	add	r2, r3
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006930:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    // 如果页缓冲区已满，进行页写入操作
    if (prog->page.offset == prog->page_size)
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800693a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	429a      	cmp	r2, r3
 8006944:	f040 80a2 	bne.w	8006a8c <np_cmd_nand_write_data+0x238>
    {
        // 如果启用了跳过坏块，并且当前页是坏块，跳过该坏块
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 8006948:	e038      	b.n	80069bc <np_cmd_nand_write_data+0x168>
        {
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", prog->addr);
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006950:	4839      	ldr	r0, [pc, #228]	; (8006a38 <np_cmd_nand_write_data+0x1e4>)
 8006952:	f00c fee1 	bl	8013718 <iprintf>
            if (np_send_bad_block_info(prog->addr, prog->block_size, true))
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006960:	2301      	movs	r3, #1
 8006962:	f7ff f8a9 	bl	8005ab8 <np_send_bad_block_info>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <np_cmd_nand_write_data+0x11e>
                return -1;
 800696c:	f04f 33ff 	mov.w	r3, #4294967295
 8006970:	e124      	b.n	8006bbc <np_cmd_nand_write_data+0x368>

            prog->addr += prog->block_size;
 8006972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006974:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	2200      	movs	r2, #0
 800697e:	623b      	str	r3, [r7, #32]
 8006980:	627a      	str	r2, [r7, #36]	; 0x24
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	18c3      	adds	r3, r0, r3
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	eb41 0303 	adc.w	r3, r1, r3
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006996:	e9c3 1202 	strd	r1, r2, [r3, #8]
            prog->page.page += prog->block_size / prog->page_size;
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069a0:	f8d3 11fc 	ldr.w	r1, [r3, #508]	; 0x1fc
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b0:	18ca      	adds	r2, r1, r3
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069b8:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <np_cmd_nand_write_data+0x18c>
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069d0:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fe ffc7 	bl	8005968 <nand_bad_block_table_lookup>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1b4      	bne.n	800694a <np_cmd_nand_write_data+0xf6>
        }

        // 检查写入地址是否超过芯片大小
        if (prog->addr >= prog->total_size)
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80069ec:	4290      	cmp	r0, r2
 80069ee:	eb71 0303 	sbcs.w	r3, r1, r3
 80069f2:	d30f      	bcc.n	8006a14 <np_cmd_nand_write_data+0x1c0>
        {
            ERROR_PRINT("Write address 0x%" PRIx64
 80069f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006a00:	e9cd 2300 	strd	r2, r3, [sp]
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	480c      	ldr	r0, [pc, #48]	; (8006a3c <np_cmd_nand_write_data+0x1e8>)
 8006a0a:	f00c fe85 	bl	8013718 <iprintf>
                " is more then chip size 0x%" PRIx64 "\r\n", prog->addr,
                prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8006a0e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006a12:	e0d3      	b.n	8006bbc <np_cmd_nand_write_data+0x368>
        }

        // 执行NAND写入操作
        if (np_nand_write(prog))
 8006a14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a16:	f7ff fecf 	bl	80067b8 <np_nand_write>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00f      	beq.n	8006a40 <np_cmd_nand_write_data+0x1ec>
            return NP_ERR_NAND_WR;
 8006a20:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8006a24:	e0ca      	b.n	8006bbc <np_cmd_nand_write_data+0x368>
 8006a26:	bf00      	nop
 8006a28:	08014c70 	.word	0x08014c70
 8006a2c:	08014ca8 	.word	0x08014ca8
 8006a30:	08014ccc 	.word	0x08014ccc
 8006a34:	08014d04 	.word	0x08014d04
 8006a38:	08014a88 	.word	0x08014a88
 8006a3c:	08014d28 	.word	0x08014d28

        // 更新地址和页偏移
        prog->addr += prog->page_size;
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	61fa      	str	r2, [r7, #28]
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	18c3      	adds	r3, r0, r3
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	eb41 0303 	adc.w	r3, r1, r3
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a64:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a6e:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8006a72:	3301      	adds	r3, #1
 8006a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a76:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006a7a:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a84:	461a      	mov	r2, r3
 8006a86:	2300      	movs	r3, #0
 8006a88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    // 处理剩余的数据
    bytes_left = len - write_len;
 8006a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	633b      	str	r3, [r7, #48]	; 0x30
    if (bytes_left)
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d016      	beq.n	8006ac8 <np_cmd_nand_write_data+0x274>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	1c9a      	adds	r2, r3, #2
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa6:	4413      	add	r3, r2
 8006aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f00c fff5 	bl	8013a9a <memcpy>
        prog->page.offset += bytes_left;
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006ab6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	4413      	add	r3, r2
 8006abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ac0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006ac4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    // 更新已写入和已确认的字节数
    prog->bytes_written += len;
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006ace:	3310      	adds	r3, #16
 8006ad0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ad4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	468a      	mov	sl, r1
 8006ada:	4683      	mov	fp, r0
 8006adc:	eb12 010a 	adds.w	r1, r2, sl
 8006ae0:	6039      	str	r1, [r7, #0]
 8006ae2:	eb43 030b 	adc.w	r3, r3, fp
 8006ae6:	607b      	str	r3, [r7, #4]
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006aee:	3310      	adds	r3, #16
 8006af0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006af4:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afa:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006afe:	3310      	adds	r3, #16
 8006b00:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b06:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006b0a:	3310      	adds	r3, #16
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	1a84      	subs	r4, r0, r2
 8006b12:	eb61 0503 	sbc.w	r5, r1, r3
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	4698      	mov	r8, r3
 8006b1e:	4691      	mov	r9, r2
 8006b20:	4544      	cmp	r4, r8
 8006b22:	eb75 0309 	sbcs.w	r3, r5, r9
 8006b26:	d20c      	bcs.n	8006b42 <np_cmd_nand_write_data+0x2ee>
        prog->bytes_written == prog->len)
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006b2e:	3310      	adds	r3, #16
 8006b30:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8006b3a:	4299      	cmp	r1, r3
 8006b3c:	bf08      	it	eq
 8006b3e:	4290      	cmpeq	r0, r2
 8006b40:	d11b      	bne.n	8006b7a <np_cmd_nand_write_data+0x326>
    {
        // 发送写入确认响应
        if (np_send_write_ack(prog->bytes_written))
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006b48:	3310      	adds	r3, #16
 8006b4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	f7ff fbe5 	bl	8006320 <np_send_write_ack>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <np_cmd_nand_write_data+0x30e>
            return -1;
 8006b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b60:	e02c      	b.n	8006bbc <np_cmd_nand_write_data+0x368>
        prog->bytes_ack = prog->bytes_written;
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006b68:	3310      	adds	r3, #16
 8006b6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006b74:	3310      	adds	r3, #16
 8006b76:	e9c3 0100 	strd	r0, r1, [r3]
    }

    // 检查实际写入的数据长度是否超过指定的长度
    if (prog->bytes_written > prog->len)
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006b80:	3310      	adds	r3, #16
 8006b82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b88:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8006b8c:	4290      	cmp	r0, r2
 8006b8e:	eb71 0303 	sbcs.w	r3, r1, r3
 8006b92:	d212      	bcs.n	8006bba <np_cmd_nand_write_data+0x366>
    {
        ERROR_PRINT("Actual write data length 0x%" PRIx64
 8006b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b96:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006b9a:	3310      	adds	r3, #16
 8006b9c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006ba6:	e9cd 2300 	strd	r2, r3, [sp]
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4806      	ldr	r0, [pc, #24]	; (8006bc8 <np_cmd_nand_write_data+0x374>)
 8006bb0:	f00c fdb2 	bl	8013718 <iprintf>
            " is more then 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 8006bb4:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8006bb8:	e000      	b.n	8006bbc <np_cmd_nand_write_data+0x368>
    }

    return 0;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3740      	adds	r7, #64	; 0x40
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bc6:	bf00      	nop
 8006bc8:	08014d64 	.word	0x08014d64

08006bcc <np_cmd_nand_write_end>:

// 结束NAND写入命令的函数
static int np_cmd_nand_write_end(np_prog_t *prog)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
    // 清除地址已设置的标志位
    prog->addr_is_set = 0;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	631a      	str	r2, [r3, #48]	; 0x30

    // 检查是否有未写入的数据
    if (prog->page.offset)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006be0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <np_cmd_nand_write_end+0x34>
    {
        ERROR_PRINT("Data of 0x%lx length was not written\r\n",
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006bee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4806      	ldr	r0, [pc, #24]	; (8006c10 <np_cmd_nand_write_end+0x44>)
 8006bf6:	f00c fd8f 	bl	8013718 <iprintf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8006bfa:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8006bfe:	e002      	b.n	8006c06 <np_cmd_nand_write_end+0x3a>
    }

    // 发送操作完成的响应
    return np_send_ok_status();
 8006c00:	f7fe ff14 	bl	8005a2c <np_send_ok_status>
 8006c04:	4603      	mov	r3, r0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	08014da4 	.word	0x08014da4

08006c14 <np_cmd_nand_write>:

// 执行NAND写入命令的函数
static int np_cmd_nand_write(np_prog_t *prog)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]

    // 根据命令类型执行相应的操作
    switch (cmd->code)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b05      	cmp	r3, #5
 8006c2c:	d013      	beq.n	8006c56 <np_cmd_nand_write+0x42>
 8006c2e:	2b05      	cmp	r3, #5
 8006c30:	dc19      	bgt.n	8006c66 <np_cmd_nand_write+0x52>
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d002      	beq.n	8006c3c <np_cmd_nand_write+0x28>
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d008      	beq.n	8006c4c <np_cmd_nand_write+0x38>
    case NP_CMD_NAND_WRITE_E:
        ret = np_cmd_nand_write_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8006c3a:	e014      	b.n	8006c66 <np_cmd_nand_write+0x52>
        led_wr_set(true);
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	f7fe fd17 	bl	8005670 <led_wr_set>
        ret = np_cmd_nand_write_start(prog);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff fb9c 	bl	8006380 <np_cmd_nand_write_start>
 8006c48:	60f8      	str	r0, [r7, #12]
        break;
 8006c4a:	e00d      	b.n	8006c68 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_data(prog);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff fe01 	bl	8006854 <np_cmd_nand_write_data>
 8006c52:	60f8      	str	r0, [r7, #12]
        break;
 8006c54:	e008      	b.n	8006c68 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_end(prog);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff ffb8 	bl	8006bcc <np_cmd_nand_write_end>
 8006c5c:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8006c5e:	2000      	movs	r0, #0
 8006c60:	f7fe fd06 	bl	8005670 <led_wr_set>
        break;
 8006c64:	e000      	b.n	8006c68 <np_cmd_nand_write+0x54>
        break;
 8006c66:	bf00      	nop
    }

    // 如果操作失败，关闭写入指示灯
    if (ret < 0)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da02      	bge.n	8006c74 <np_cmd_nand_write+0x60>
        led_wr_set(false);
 8006c6e:	2000      	movs	r0, #0
 8006c70:	f7fe fcfe 	bl	8005670 <led_wr_set>

    return ret;
 8006c74:	68fb      	ldr	r3, [r7, #12]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <np_nand_read>:

// 执行NAND读取操作的函数
static int np_nand_read(uint64_t addr, np_page_t *page, uint32_t page_size,
    uint32_t block_size, np_prog_t *prog)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	603b      	str	r3, [r7, #0]
    uint32_t status;

    // 调用硬件抽象层函数执行页面读取操作
    status = hal[prog->hal]->read_page(page->buf, page->page, page_size);
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006c94:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4b1c      	ldr	r3, [pc, #112]	; (8006d0c <np_nand_read+0x8c>)
 8006c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006caa:	f8d2 11c0 	ldr.w	r1, [r2, #448]	; 0x1c0
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	4798      	blx	r3
 8006cb2:	6178      	str	r0, [r7, #20]
    switch (status)
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d014      	beq.n	8006ce4 <np_nand_read+0x64>
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d817      	bhi.n	8006cf0 <np_nand_read+0x70>
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d01a      	beq.n	8006cfc <np_nand_read+0x7c>
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d111      	bne.n	8006cf0 <np_nand_read+0x70>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果读取状态为错误，发送坏块信息
        if (np_send_bad_block_info(addr, block_size, false))
 8006ccc:	2300      	movs	r3, #0
 8006cce:	6a3a      	ldr	r2, [r7, #32]
 8006cd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cd4:	f7fe fef0 	bl	8005ab8 <np_send_bad_block_info>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d010      	beq.n	8006d00 <np_nand_read+0x80>
            return -1;
 8006cde:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce2:	e00f      	b.n	8006d04 <np_nand_read+0x84>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND write timeout at 0x%" PRIx64 "\r\n", addr);
 8006ce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ce8:	4809      	ldr	r0, [pc, #36]	; (8006d10 <np_nand_read+0x90>)
 8006cea:	f00c fd15 	bl	8013718 <iprintf>
        break;
 8006cee:	e008      	b.n	8006d02 <np_nand_read+0x82>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8006cf0:	4808      	ldr	r0, [pc, #32]	; (8006d14 <np_nand_read+0x94>)
 8006cf2:	f00c fd77 	bl	80137e4 <puts>
        return -1;
 8006cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfa:	e003      	b.n	8006d04 <np_nand_read+0x84>
        break;
 8006cfc:	bf00      	nop
 8006cfe:	e000      	b.n	8006d02 <np_nand_read+0x82>
        break;
 8006d00:	bf00      	nop
    }

    return 0;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20000040 	.word	0x20000040
 8006d10:	08014c04 	.word	0x08014c04
 8006d14:	080148bc 	.word	0x080148bc

08006d18 <_np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int _np_cmd_nand_read(np_prog_t *prog)
{
 8006d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d1c:	b0b4      	sub	sp, #208	; 0xd0
 8006d1e:	af04      	add	r7, sp, #16
 8006d20:	6778      	str	r0, [r7, #116]	; 0x74
    np_read_cmd_t *read_cmd;
    bool skip_bb, inc_spare;
    uint64_t addr, len, total_size;
    uint32_t send_len, block_size, page_size, pages,
        pages_in_block;
    uint32_t resp_header_size = offsetof(np_resp_t, data);
 8006d22:	2302      	movs	r3, #2
 8006d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t tx_data_len = sizeof(np_packet_send_buf) - resp_header_size;
 8006d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d2c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006d30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    np_resp_t *resp = (np_resp_t *)np_packet_send_buf;
 8006d34:	4ba8      	ldr	r3, [pc, #672]	; (8006fd8 <_np_cmd_nand_read+0x2c0>)
 8006d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_read_cmd_t))
 8006d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2b11      	cmp	r3, #17
 8006d40:	d808      	bhi.n	8006d54 <_np_cmd_nand_read+0x3c>
    {
        ERROR_PRINT("Wrong buffer length for read command %lu\r\n",
 8006d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4619      	mov	r1, r3
 8006d48:	48a4      	ldr	r0, [pc, #656]	; (8006fdc <_np_cmd_nand_read+0x2c4>)
 8006d4a:	f00c fce5 	bl	8013718 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8006d4e:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8006d52:	e27d      	b.n	8007250 <_np_cmd_nand_read+0x538>
    }

    read_cmd = (np_read_cmd_t *)prog->rx_buf;
 8006d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    addr = read_cmd->addr;
 8006d5c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006d60:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8006d64:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8006d68:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
    len = read_cmd->len;
 8006d6c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006d70:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8006d74:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8006d78:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    skip_bb = read_cmd->flags.skip_bb;
 8006d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d80:	7c5b      	ldrb	r3, [r3, #17]
 8006d82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	bf14      	ite	ne
 8006d8c:	2301      	movne	r3, #1
 8006d8e:	2300      	moveq	r3, #0
 8006d90:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    inc_spare = read_cmd->flags.inc_spare;
 8006d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d98:	7c5b      	ldrb	r3, [r3, #17]
 8006d9a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	bf14      	ite	ne
 8006da4:	2301      	movne	r3, #1
 8006da6:	2300      	moveq	r3, #0
 8006da8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    DEBUG_PRINT("Read at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n", addr,
 8006dac:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006db0:	e9cd 2300 	strd	r2, r3, [sp]
 8006db4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006db8:	4889      	ldr	r0, [pc, #548]	; (8006fe0 <_np_cmd_nand_read+0x2c8>)
 8006dba:	f00c fcad 	bl	8013718 <iprintf>
        len);

    if (inc_spare)
 8006dbe:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d056      	beq.n	8006e74 <_np_cmd_nand_read+0x15c>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8006dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006dcc:	3330      	adds	r3, #48	; 0x30
 8006dce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dd4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006dd8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006ddc:	2200      	movs	r2, #0
 8006dde:	66bb      	str	r3, [r7, #104]	; 0x68
 8006de0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006de2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006de6:	f7fd fa1d 	bl	8004224 <__aeabi_uldivmod>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4613      	mov	r3, r2
 8006df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        pages_in_block = prog->chip_info.block_size /
 8006df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006df6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006dfa:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 8006dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e04:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 8006e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8006e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e16:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8006e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e20:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8006e24:	4413      	add	r3, r2
 8006e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = pages_in_block * page_size;
 8006e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e32:	fb02 f303 	mul.w	r3, r2, r3
 8006e36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = (uint64_t)pages * page_size;
 8006e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e3e:	2200      	movs	r2, #0
 8006e40:	663b      	str	r3, [r7, #96]	; 0x60
 8006e42:	667a      	str	r2, [r7, #100]	; 0x64
 8006e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4698      	mov	r8, r3
 8006e4c:	4691      	mov	r9, r2
 8006e4e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006e52:	460b      	mov	r3, r1
 8006e54:	fb08 f203 	mul.w	r2, r8, r3
 8006e58:	4603      	mov	r3, r0
 8006e5a:	fb03 f309 	mul.w	r3, r3, r9
 8006e5e:	4413      	add	r3, r2
 8006e60:	4602      	mov	r2, r0
 8006e62:	fba2 4508 	umull	r4, r5, r2, r8
 8006e66:	442b      	add	r3, r5
 8006e68:	461d      	mov	r5, r3
 8006e6a:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 8006e6e:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 8006e72:	e015      	b.n	8006ea0 <_np_cmd_nand_read+0x188>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8006e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e7a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006e7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = prog->chip_info.block_size;
 8006e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e88:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = prog->chip_info.total_size;
 8006e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e92:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006e96:	3330      	adds	r3, #48	; 0x30
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
    }

    if (addr + len > total_size)
 8006ea0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006ea4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006ea8:	eb10 0a02 	adds.w	sl, r0, r2
 8006eac:	eb41 0b03 	adc.w	fp, r1, r3
 8006eb0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006eb4:	4552      	cmp	r2, sl
 8006eb6:	eb73 030b 	sbcs.w	r3, r3, fp
 8006eba:	d20f      	bcs.n	8006edc <_np_cmd_nand_read+0x1c4>
    {
        ERROR_PRINT("Read address 0x%" PRIx64 "+0x%" PRIx64
 8006ebc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006ec0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ec4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006ec8:	e9cd 2300 	strd	r2, r3, [sp]
 8006ecc:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006ed0:	4844      	ldr	r0, [pc, #272]	; (8006fe4 <_np_cmd_nand_read+0x2cc>)
 8006ed2:	f00c fc21 	bl	8013718 <iprintf>
            " is more then chip size 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8006ed6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006eda:	e1b9      	b.n	8007250 <_np_cmd_nand_read+0x538>
    }

    if (addr % page_size)
 8006edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ee4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006ee6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006eea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006eee:	f7fd f999 	bl	8004224 <__aeabi_uldivmod>
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	d00a      	beq.n	8006f0c <_np_cmd_nand_read+0x1f4>
    {
        ERROR_PRINT("Read address 0x%" PRIx64
 8006ef6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f00:	4839      	ldr	r0, [pc, #228]	; (8006fe8 <_np_cmd_nand_read+0x2d0>)
 8006f02:	f00c fc09 	bl	8013718 <iprintf>
            " is not aligned to page size 0x%lx\r\n", addr, page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8006f06:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006f0a:	e1a1      	b.n	8007250 <_np_cmd_nand_read+0x538>
    }

    if (!len)
 8006f0c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006f10:	4313      	orrs	r3, r2
 8006f12:	d105      	bne.n	8006f20 <_np_cmd_nand_read+0x208>
    {
        ERROR_PRINT("Length is 0\r\n");
 8006f14:	4835      	ldr	r0, [pc, #212]	; (8006fec <_np_cmd_nand_read+0x2d4>)
 8006f16:	f00c fc65 	bl	80137e4 <puts>
        return NP_ERR_LEN_INVALID;
 8006f1a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8006f1e:	e197      	b.n	8007250 <_np_cmd_nand_read+0x538>
    }

    if (len % page_size)
 8006f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f24:	2200      	movs	r2, #0
 8006f26:	653b      	str	r3, [r7, #80]	; 0x50
 8006f28:	657a      	str	r2, [r7, #84]	; 0x54
 8006f2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f32:	f7fd f977 	bl	8004224 <__aeabi_uldivmod>
 8006f36:	4313      	orrs	r3, r2
 8006f38:	d00a      	beq.n	8006f50 <_np_cmd_nand_read+0x238>
    {
        ERROR_PRINT("Read length 0x%" PRIx64
 8006f3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006f44:	482a      	ldr	r0, [pc, #168]	; (8006ff0 <_np_cmd_nand_read+0x2d8>)
 8006f46:	f00c fbe7 	bl	8013718 <iprintf>
            " is not aligned to page size 0x%lx\r\n", len, page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8006f4a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8006f4e:	e17f      	b.n	8007250 <_np_cmd_nand_read+0x538>
    }

    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 8006f50:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00d      	beq.n	8006f74 <_np_cmd_nand_read+0x25c>
 8006f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d109      	bne.n	8006f74 <_np_cmd_nand_read+0x25c>
 8006f60:	2100      	movs	r1, #0
 8006f62:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006f64:	f7fe ff02 	bl	8005d6c <_np_cmd_read_bad_blocks>
 8006f68:	67f8      	str	r0, [r7, #124]	; 0x7c
 8006f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <_np_cmd_nand_read+0x25c>
        false)))
    {
        return ret;
 8006f70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f72:	e16d      	b.n	8007250 <_np_cmd_nand_read+0x538>
    }

    page.page = addr / page_size;
 8006f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f78:	2200      	movs	r2, #0
 8006f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f7c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006f7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f82:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006f86:	f7fd f94d 	bl	8004224 <__aeabi_uldivmod>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <_np_cmd_nand_read+0x2dc>)
 8006f90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f94:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    page.offset = 0;
 8006f98:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <_np_cmd_nand_read+0x2dc>)
 8006f9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4

    resp->code = NP_RESP_DATA;
 8006fa6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006faa:	2300      	movs	r3, #0
 8006fac:	7013      	strb	r3, [r2, #0]

    while (len)
 8006fae:	e149      	b.n	8007244 <_np_cmd_nand_read+0x52c>
    {
        if (addr >= total_size)
 8006fb0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006fb4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006fb8:	4290      	cmp	r0, r2
 8006fba:	eb71 0303 	sbcs.w	r3, r1, r3
 8006fbe:	d31d      	bcc.n	8006ffc <_np_cmd_nand_read+0x2e4>
        {
            ERROR_PRINT("Read address 0x%" PRIx64
 8006fc0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006fc4:	e9cd 2300 	strd	r2, r3, [sp]
 8006fc8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006fcc:	480a      	ldr	r0, [pc, #40]	; (8006ff8 <_np_cmd_nand_read+0x2e0>)
 8006fce:	f00c fba3 	bl	8013718 <iprintf>
                " is more then chip size 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8006fd2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006fd6:	e13b      	b.n	8007250 <_np_cmd_nand_read+0x538>
 8006fd8:	20002f40 	.word	0x20002f40
 8006fdc:	08014dd4 	.word	0x08014dd4
 8006fe0:	08014e08 	.word	0x08014e08
 8006fe4:	08014e30 	.word	0x08014e30
 8006fe8:	08014e74 	.word	0x08014e74
 8006fec:	080149b0 	.word	0x080149b0
 8006ff0:	08014eb4 	.word	0x08014eb4
 8006ff4:	20002f80 	.word	0x20002f80
 8006ff8:	08014ef4 	.word	0x08014ef4
        }

        if (skip_bb && nand_bad_block_table_lookup(page.page))
 8006ffc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8007000:	2b00      	cmp	r3, #0
 8007002:	d060      	beq.n	80070c6 <_np_cmd_nand_read+0x3ae>
 8007004:	4b95      	ldr	r3, [pc, #596]	; (800725c <_np_cmd_nand_read+0x544>)
 8007006:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800700a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe fcaa 	bl	8005968 <nand_bad_block_table_lookup>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d055      	beq.n	80070c6 <_np_cmd_nand_read+0x3ae>
        {
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", addr);
 800701a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800701e:	4890      	ldr	r0, [pc, #576]	; (8007260 <_np_cmd_nand_read+0x548>)
 8007020:	f00c fb7a 	bl	8013718 <iprintf>
            if (np_send_bad_block_info(addr, block_size, true))
 8007024:	2301      	movs	r3, #1
 8007026:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800702a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800702e:	f7fe fd43 	bl	8005ab8 <np_send_bad_block_info>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <_np_cmd_nand_read+0x326>
                return -1;
 8007038:	f04f 33ff 	mov.w	r3, #4294967295
 800703c:	e108      	b.n	8007250 <_np_cmd_nand_read+0x538>

            /* 在部分读取时不计算坏块 */
            if (read_cmd->len == total_size)
 800703e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007042:	f8d3 0009 	ldr.w	r0, [r3, #9]
 8007046:	f8d3 100d 	ldr.w	r1, [r3, #13]
 800704a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800704e:	428b      	cmp	r3, r1
 8007050:	bf08      	it	eq
 8007052:	4282      	cmpeq	r2, r0
 8007054:	d112      	bne.n	800707c <_np_cmd_nand_read+0x364>
                len -= block_size;
 8007056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800705a:	2200      	movs	r2, #0
 800705c:	643b      	str	r3, [r7, #64]	; 0x40
 800705e:	647a      	str	r2, [r7, #68]	; 0x44
 8007060:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007064:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007068:	4604      	mov	r4, r0
 800706a:	1b14      	subs	r4, r2, r4
 800706c:	61bc      	str	r4, [r7, #24]
 800706e:	eb63 0301 	sbc.w	r3, r3, r1
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007078:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
            addr += block_size;
 800707c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007080:	2200      	movs	r2, #0
 8007082:	63bb      	str	r3, [r7, #56]	; 0x38
 8007084:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007086:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800708a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800708e:	4621      	mov	r1, r4
 8007090:	1851      	adds	r1, r2, r1
 8007092:	6139      	str	r1, [r7, #16]
 8007094:	4629      	mov	r1, r5
 8007096:	414b      	adcs	r3, r1
 8007098:	617b      	str	r3, [r7, #20]
 800709a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800709e:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
            page.page += block_size / page_size;
 80070a2:	4b6e      	ldr	r3, [pc, #440]	; (800725c <_np_cmd_nand_read+0x544>)
 80070a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80070a8:	f8d3 11c0 	ldr.w	r1, [r3, #448]	; 0x1c0
 80070ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80070b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b8:	18ca      	adds	r2, r1, r3
 80070ba:	4b68      	ldr	r3, [pc, #416]	; (800725c <_np_cmd_nand_read+0x544>)
 80070bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80070c0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
            continue;
 80070c4:	e0be      	b.n	8007244 <_np_cmd_nand_read+0x52c>
        }

        if (np_nand_read(addr, &page, page_size, block_size, prog))
 80070c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070d4:	4a61      	ldr	r2, [pc, #388]	; (800725c <_np_cmd_nand_read+0x544>)
 80070d6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80070da:	f7ff fdd1 	bl	8006c80 <np_nand_read>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d07c      	beq.n	80071de <_np_cmd_nand_read+0x4c6>
            return NP_ERR_NAND_RD;
 80070e4:	f06f 0367 	mvn.w	r3, #103	; 0x67
 80070e8:	e0b2      	b.n	8007250 <_np_cmd_nand_read+0x538>

        while (page.offset < page_size && len)
        {
            if (page_size - page.offset >= tx_data_len)
 80070ea:	4b5c      	ldr	r3, [pc, #368]	; (800725c <_np_cmd_nand_read+0x544>)
 80070ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80070f0:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80070f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070f8:	1a9a      	subs	r2, r3, r2
 80070fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070fe:	4293      	cmp	r3, r2
 8007100:	d804      	bhi.n	800710c <_np_cmd_nand_read+0x3f4>
                send_len = tx_data_len;
 8007102:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800710a:	e009      	b.n	8007120 <_np_cmd_nand_read+0x408>
            else
                send_len = page_size - page.offset;
 800710c:	4b53      	ldr	r3, [pc, #332]	; (800725c <_np_cmd_nand_read+0x544>)
 800710e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007112:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8007116:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            if (send_len > len)
 8007120:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007124:	2200      	movs	r2, #0
 8007126:	633b      	str	r3, [r7, #48]	; 0x30
 8007128:	637a      	str	r2, [r7, #52]	; 0x34
 800712a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800712e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007132:	4604      	mov	r4, r0
 8007134:	42a2      	cmp	r2, r4
 8007136:	418b      	sbcs	r3, r1
 8007138:	d203      	bcs.n	8007142 <_np_cmd_nand_read+0x42a>
                send_len = len;
 800713a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800713e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            memcpy(resp->data, page.buf + page.offset, send_len);
 8007142:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007146:	1c98      	adds	r0, r3, #2
 8007148:	4b44      	ldr	r3, [pc, #272]	; (800725c <_np_cmd_nand_read+0x544>)
 800714a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800714e:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8007152:	4b42      	ldr	r3, [pc, #264]	; (800725c <_np_cmd_nand_read+0x544>)
 8007154:	4413      	add	r3, r2
 8007156:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800715a:	4619      	mov	r1, r3
 800715c:	f00c fc9d 	bl	8013a9a <memcpy>

            while (!np_comm_cb->send_ready());
 8007160:	bf00      	nop
 8007162:	4b40      	ldr	r3, [pc, #256]	; (8007264 <_np_cmd_nand_read+0x54c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	4798      	blx	r3
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0f8      	beq.n	8007162 <_np_cmd_nand_read+0x44a>

            resp->info = send_len;
 8007170:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007174:	b2db      	uxtb	r3, r3
 8007176:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800717a:	7053      	strb	r3, [r2, #1]
            if (np_comm_cb->send(np_packet_send_buf,
 800717c:	4b39      	ldr	r3, [pc, #228]	; (8007264 <_np_cmd_nand_read+0x54c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681c      	ldr	r4, [r3, #0]
 8007182:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007186:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800718a:	4413      	add	r3, r2
 800718c:	4619      	mov	r1, r3
 800718e:	4836      	ldr	r0, [pc, #216]	; (8007268 <_np_cmd_nand_read+0x550>)
 8007190:	47a0      	blx	r4
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <_np_cmd_nand_read+0x486>
                resp_header_size + send_len))
            {
                return -1;
 8007198:	f04f 33ff 	mov.w	r3, #4294967295
 800719c:	e058      	b.n	8007250 <_np_cmd_nand_read+0x538>
            }

            page.offset += send_len;
 800719e:	4b2f      	ldr	r3, [pc, #188]	; (800725c <_np_cmd_nand_read+0x544>)
 80071a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071a4:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80071a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071ac:	441a      	add	r2, r3
 80071ae:	4b2b      	ldr	r3, [pc, #172]	; (800725c <_np_cmd_nand_read+0x544>)
 80071b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071b4:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            len -= send_len;
 80071b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071bc:	2200      	movs	r2, #0
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28
 80071c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071c2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80071c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80071ca:	4604      	mov	r4, r0
 80071cc:	1b14      	subs	r4, r2, r4
 80071ce:	60bc      	str	r4, [r7, #8]
 80071d0:	eb63 0301 	sbc.w	r3, r3, r1
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80071da:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
        while (page.offset < page_size && len)
 80071de:	4b1f      	ldr	r3, [pc, #124]	; (800725c <_np_cmd_nand_read+0x544>)
 80071e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071e4:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80071e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d904      	bls.n	80071fa <_np_cmd_nand_read+0x4e2>
 80071f0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f47f af78 	bne.w	80070ea <_np_cmd_nand_read+0x3d2>
        }

        addr += page_size;
 80071fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071fe:	2200      	movs	r2, #0
 8007200:	623b      	str	r3, [r7, #32]
 8007202:	627a      	str	r2, [r7, #36]	; 0x24
 8007204:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007208:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800720c:	4621      	mov	r1, r4
 800720e:	1851      	adds	r1, r2, r1
 8007210:	6039      	str	r1, [r7, #0]
 8007212:	4629      	mov	r1, r5
 8007214:	414b      	adcs	r3, r1
 8007216:	607b      	str	r3, [r7, #4]
 8007218:	e9d7 3400 	ldrd	r3, r4, [r7]
 800721c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
        page.offset = 0;
 8007220:	4b0e      	ldr	r3, [pc, #56]	; (800725c <_np_cmd_nand_read+0x544>)
 8007222:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007226:	461a      	mov	r2, r3
 8007228:	2300      	movs	r3, #0
 800722a:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
        page.page++;
 800722e:	4b0b      	ldr	r3, [pc, #44]	; (800725c <_np_cmd_nand_read+0x544>)
 8007230:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007234:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	4b08      	ldr	r3, [pc, #32]	; (800725c <_np_cmd_nand_read+0x544>)
 800723c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007240:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    while (len)
 8007244:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007248:	4313      	orrs	r3, r2
 800724a:	f47f aeb1 	bne.w	8006fb0 <_np_cmd_nand_read+0x298>
    }

    return 0;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	37c0      	adds	r7, #192	; 0xc0
 8007254:	46bd      	mov	sp, r7
 8007256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800725a:	bf00      	nop
 800725c:	20002f80 	.word	0x20002f80
 8007260:	08014a88 	.word	0x08014a88
 8007264:	20000cf0 	.word	0x20000cf0
 8007268:	20002f40 	.word	0x20002f40

0800726c <np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int np_cmd_nand_read(np_prog_t *prog)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 8007274:	2001      	movs	r0, #1
 8007276:	f7fe fa0d 	bl	8005694 <led_rd_set>
    ret = _np_cmd_nand_read(prog); // 执行NAND读取命令
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7ff fd4c 	bl	8006d18 <_np_cmd_nand_read>
 8007280:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 8007282:	2000      	movs	r0, #0
 8007284:	f7fe fa06 	bl	8005694 <led_rd_set>

    return ret;
 8007288:	68fb      	ldr	r3, [r7, #12]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <np_fill_chip_info>:

// 填充芯片信息
static void np_fill_chip_info(np_conf_cmd_t *conf_cmd, np_prog_t *prog)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
    prog->chip_info.page_size = conf_cmd->page_size;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80072a8:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
    prog->chip_info.block_size = conf_cmd->block_size;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80072b8:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
    prog->chip_info.total_size = conf_cmd->total_size;
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	f8d1 200a 	ldr.w	r2, [r1, #10]
 80072c2:	f8d1 300e 	ldr.w	r3, [r1, #14]
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	f501 5108 	add.w	r1, r1, #8704	; 0x2200
 80072cc:	3130      	adds	r1, #48	; 0x30
 80072ce:	e9c1 2300 	strd	r2, r3, [r1]
    prog->chip_info.spare_size = conf_cmd->spare_size;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80072de:	f8c2 3238 	str.w	r3, [r2, #568]	; 0x238
    prog->chip_info.bb_mark_off = conf_cmd->bb_mark_off;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	7d9a      	ldrb	r2, [r3, #22]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072ec:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
    prog->chip_is_conf = 1;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2201      	movs	r2, #1
 80072f4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr

08007300 <np_print_chip_info>:

// 打印芯片信息
static void np_print_chip_info(np_prog_t *prog)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
    DEBUG_PRINT("Page size: %lu\r\n", prog->chip_info.page_size);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800730e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007312:	4619      	mov	r1, r3
 8007314:	4815      	ldr	r0, [pc, #84]	; (800736c <np_print_chip_info+0x6c>)
 8007316:	f00c f9ff 	bl	8013718 <iprintf>
    DEBUG_PRINT("Block size: %lu\r\n", prog->chip_info.block_size);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007320:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007324:	4619      	mov	r1, r3
 8007326:	4812      	ldr	r0, [pc, #72]	; (8007370 <np_print_chip_info+0x70>)
 8007328:	f00c f9f6 	bl	8013718 <iprintf>
    DEBUG_PRINT("Total size: 0x%" PRIx64 "\r\n", prog->chip_info.total_size);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007332:	3330      	adds	r3, #48	; 0x30
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	480e      	ldr	r0, [pc, #56]	; (8007374 <np_print_chip_info+0x74>)
 800733a:	f00c f9ed 	bl	8013718 <iprintf>
    DEBUG_PRINT("Spare size: %lu\r\n", prog->chip_info.spare_size);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007344:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8007348:	4619      	mov	r1, r3
 800734a:	480b      	ldr	r0, [pc, #44]	; (8007378 <np_print_chip_info+0x78>)
 800734c:	f00c f9e4 	bl	8013718 <iprintf>
    DEBUG_PRINT("Bad block mark offset: %d\r\n", prog->chip_info.bb_mark_off);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007356:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 800735a:	4619      	mov	r1, r3
 800735c:	4807      	ldr	r0, [pc, #28]	; (800737c <np_print_chip_info+0x7c>)
 800735e:	f00c f9db 	bl	8013718 <iprintf>
}
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	08014f30 	.word	0x08014f30
 8007370:	08014f44 	.word	0x08014f44
 8007374:	08014f58 	.word	0x08014f58
 8007378:	08014f70 	.word	0x08014f70
 800737c:	08014f84 	.word	0x08014f84

08007380 <np_cmd_nand_conf>:

// 执行NAND配置命令
static int np_cmd_nand_conf(np_prog_t *prog)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
    np_conf_cmd_t *conf_cmd;

    DEBUG_PRINT("Chip configure command\r\n");
 8007388:	4825      	ldr	r0, [pc, #148]	; (8007420 <np_cmd_nand_conf+0xa0>)
 800738a:	f00c fa2b 	bl	80137e4 <puts>

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_conf_cmd_t))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2b16      	cmp	r3, #22
 8007394:	d808      	bhi.n	80073a8 <np_cmd_nand_conf+0x28>
    {
        ERROR_PRINT("Wrong buffer length for configuration command %lu\r\n",
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	4619      	mov	r1, r3
 800739c:	4821      	ldr	r0, [pc, #132]	; (8007424 <np_cmd_nand_conf+0xa4>)
 800739e:	f00c f9bb 	bl	8013718 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80073a2:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80073a6:	e036      	b.n	8007416 <np_cmd_nand_conf+0x96>
    }

    conf_cmd = (np_conf_cmd_t *)prog->rx_buf;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60fb      	str	r3, [r7, #12]

    np_fill_chip_info(conf_cmd, prog); // 填充芯片信息
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f7ff ff6e 	bl	8007292 <np_fill_chip_info>
    np_print_chip_info(prog); // 打印芯片信息
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff ffa2 	bl	8007300 <np_print_chip_info>

    prog->hal = conf_cmd->hal;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	785a      	ldrb	r2, [r3, #1]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073c6:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073d0:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <np_cmd_nand_conf+0xa8>)
 80073d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	f102 0017 	add.w	r0, r2, #23
        prog->rx_buf_len - sizeof(np_conf_cmd_t)))
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6852      	ldr	r2, [r2, #4]
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 80073e8:	3a17      	subs	r2, #23
 80073ea:	4611      	mov	r1, r2
 80073ec:	4798      	blx	r3
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d008      	beq.n	8007406 <np_cmd_nand_conf+0x86>
    {
        ERROR_PRINT("Wrong buffer length for hal configuration command %lu\r\n",
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	4619      	mov	r1, r3
 80073fa:	480c      	ldr	r0, [pc, #48]	; (800742c <np_cmd_nand_conf+0xac>)
 80073fc:	f00c f98c 	bl	8013718 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8007400:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8007404:	e007      	b.n	8007416 <np_cmd_nand_conf+0x96>
    }

    nand_bad_block_table_init(); // 初始化坏块表
 8007406:	f7fe fa81 	bl	800590c <nand_bad_block_table_init>
    prog->bb_is_read = 0;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	635a      	str	r2, [r3, #52]	; 0x34

    return np_send_ok_status();
 8007410:	f7fe fb0c 	bl	8005a2c <np_send_ok_status>
 8007414:	4603      	mov	r3, r0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	08014fa0 	.word	0x08014fa0
 8007424:	08014fb8 	.word	0x08014fb8
 8007428:	20000040 	.word	0x20000040
 800742c:	08014ff4 	.word	0x08014ff4

08007430 <np_send_bad_blocks>:

// 发送坏块信息
static int np_send_bad_blocks(np_prog_t *prog)
{
 8007430:	b5b0      	push	{r4, r5, r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
    uint32_t page;
    void *bb_iter;

    // 遍历坏块表，并发送坏块信息
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 8007438:	f107 0308 	add.w	r3, r7, #8
 800743c:	4618      	mov	r0, r3
 800743e:	f7fe fab5 	bl	80059ac <nand_bad_block_table_iter_alloc>
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	e021      	b.n	800748a <np_send_bad_blocks+0x5a>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
    {
        if (np_send_bad_block_info(page * prog->chip_info.page_size,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800744c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	fb02 f303 	mul.w	r3, r2, r3
 8007456:	2200      	movs	r2, #0
 8007458:	461c      	mov	r4, r3
 800745a:	4615      	mov	r5, r2
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007462:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007466:	2300      	movs	r3, #0
 8007468:	4620      	mov	r0, r4
 800746a:	4629      	mov	r1, r5
 800746c:	f7fe fb24 	bl	8005ab8 <np_send_bad_block_info>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <np_send_bad_blocks+0x4c>
            prog->chip_info.block_size, false))
        {
            return -1;
 8007476:	f04f 33ff 	mov.w	r3, #4294967295
 800747a:	e00a      	b.n	8007492 <np_send_bad_blocks+0x62>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
 800747c:	f107 0308 	add.w	r3, r7, #8
 8007480:	4619      	mov	r1, r3
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f7fe faaa 	bl	80059dc <nand_bad_block_table_iter_next>
 8007488:	60f8      	str	r0, [r7, #12]
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1da      	bne.n	8007446 <np_send_bad_blocks+0x16>
        }
    }

    return 0;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bdb0      	pop	{r4, r5, r7, pc}

0800749a <np_cmd_read_bad_blocks>:

// 执行读取坏块命令
int np_cmd_read_bad_blocks(np_prog_t *prog)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 80074a2:	2001      	movs	r0, #1
 80074a4:	f7fe f8f6 	bl	8005694 <led_rd_set>
    nand_bad_block_table_init(); // 初始化坏块表
 80074a8:	f7fe fa30 	bl	800590c <nand_bad_block_table_init>
    ret = _np_cmd_read_bad_blocks(prog, true); // 执行读取坏块命令
 80074ac:	2101      	movs	r1, #1
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fe fc5c 	bl	8005d6c <_np_cmd_read_bad_blocks>
 80074b4:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 80074b6:	2000      	movs	r0, #0
 80074b8:	f7fe f8ec 	bl	8005694 <led_rd_set>

    if (ret || (ret = np_send_bad_blocks(prog))) // 发送坏块信息
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <np_cmd_read_bad_blocks+0x36>
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff ffb4 	bl	8007430 <np_send_bad_blocks>
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <np_cmd_read_bad_blocks+0x3a>
        return ret;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	e002      	b.n	80074da <np_cmd_read_bad_blocks+0x40>

    return np_send_ok_status(); // 发送成功状态
 80074d4:	f7fe faaa 	bl	8005a2c <np_send_ok_status>
 80074d8:	4603      	mov	r3, r0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <np_cmd_version_get>:

// 获取版本号命令
int np_cmd_version_get(np_prog_t *prog)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
    np_resp_version_t resp;
    size_t resp_len = sizeof(resp);
 80074ec:	2306      	movs	r3, #6
 80074ee:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read version command\r\n");
 80074f0:	4810      	ldr	r0, [pc, #64]	; (8007534 <np_cmd_version_get+0x50>)
 80074f2:	f00c f977 	bl	80137e4 <puts>

    resp.header.code = NP_RESP_DATA;
 80074f6:	2300      	movs	r3, #0
 80074f8:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	3b02      	subs	r3, #2
 8007500:	b2db      	uxtb	r3, r3
 8007502:	737b      	strb	r3, [r7, #13]
    resp.version.major = SW_VERSION_MAJOR;
 8007504:	2303      	movs	r3, #3
 8007506:	73bb      	strb	r3, [r7, #14]
    resp.version.minor = SW_VERSION_MINOR;
 8007508:	2305      	movs	r3, #5
 800750a:	73fb      	strb	r3, [r7, #15]
    resp.version.build = SW_VERSION_BUILD;
 800750c:	2300      	movs	r3, #0
 800750e:	823b      	strh	r3, [r7, #16]

    if (np_comm_cb)
 8007510:	4b09      	ldr	r3, [pc, #36]	; (8007538 <np_cmd_version_get+0x54>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d007      	beq.n	8007528 <np_cmd_version_get+0x44>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8007518:	4b07      	ldr	r3, [pc, #28]	; (8007538 <np_cmd_version_get+0x54>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f107 020c 	add.w	r2, r7, #12
 8007522:	6979      	ldr	r1, [r7, #20]
 8007524:	4610      	mov	r0, r2
 8007526:	4798      	blx	r3

    return 0;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	08015034 	.word	0x08015034
 8007538:	20000cf0 	.word	0x20000cf0

0800753c <np_boot_config_read>:

// 读取引导配置
static int np_boot_config_read(boot_config_t *config)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
    if (flash_read(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 8007544:	2201      	movs	r2, #1
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	4806      	ldr	r0, [pc, #24]	; (8007564 <np_boot_config_read+0x28>)
 800754a:	f7fd fa01 	bl	8004950 <flash_read>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	da02      	bge.n	800755a <np_boot_config_read+0x1e>
        < 0)
    {
        return -1;
 8007554:	f04f 33ff 	mov.w	r3, #4294967295
 8007558:	e000      	b.n	800755c <np_boot_config_read+0x20>
    }
    
    return 0;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	08003800 	.word	0x08003800

08007568 <np_boot_config_write>:

// 写入引导配置
static int np_boot_config_write(boot_config_t *config)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
    if (flash_page_erase(BOOT_CONFIG_ADDR) < 0)
 8007570:	480c      	ldr	r0, [pc, #48]	; (80075a4 <np_boot_config_write+0x3c>)
 8007572:	f7fd f983 	bl	800487c <flash_page_erase>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	da02      	bge.n	8007582 <np_boot_config_write+0x1a>
        return -1;
 800757c:	f04f 33ff 	mov.w	r3, #4294967295
 8007580:	e00b      	b.n	800759a <np_boot_config_write+0x32>

    if (flash_write(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 8007582:	2201      	movs	r2, #1
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	4807      	ldr	r0, [pc, #28]	; (80075a4 <np_boot_config_write+0x3c>)
 8007588:	f7fd f99d 	bl	80048c6 <flash_write>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	da02      	bge.n	8007598 <np_boot_config_write+0x30>
        < 0)
    {
        return -1;
 8007592:	f04f 33ff 	mov.w	r3, #4294967295
 8007596:	e000      	b.n	800759a <np_boot_config_write+0x32>
    }

    return 0;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	08003800 	.word	0x08003800

080075a8 <np_cmd_active_image_get>:

// 获取活动镜像命令
static int np_cmd_active_image_get(np_prog_t *prog)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;
    np_resp_active_image_t resp;
    size_t resp_len = sizeof(resp);
 80075b0:	2303      	movs	r3, #3
 80075b2:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Get active image command\r\n");
 80075b4:	481c      	ldr	r0, [pc, #112]	; (8007628 <np_cmd_active_image_get+0x80>)
 80075b6:	f00c f915 	bl	80137e4 <puts>

    if (prog->active_image == 0xff)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075c0:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 80075c4:	2bff      	cmp	r3, #255	; 0xff
 80075c6:	d110      	bne.n	80075ea <np_cmd_active_image_get+0x42>
    {
        if (np_boot_config_read(&boot_config))
 80075c8:	f107 0310 	add.w	r3, r7, #16
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff ffb5 	bl	800753c <np_boot_config_read>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <np_cmd_active_image_get+0x36>
            return NP_ERR_INTERNAL;
 80075d8:	f04f 33ff 	mov.w	r3, #4294967295
 80075dc:	e01f      	b.n	800761e <np_cmd_active_image_get+0x76>
        prog->active_image = boot_config.active_image;
 80075de:	7c3a      	ldrb	r2, [r7, #16]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075e6:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    }

    resp.header.code = NP_RESP_DATA;
 80075ea:	2300      	movs	r3, #0
 80075ec:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	3b02      	subs	r3, #2
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	737b      	strb	r3, [r7, #13]
    resp.active_image = prog->active_image;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075fe:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8007602:	73bb      	strb	r3, [r7, #14]

    if (np_comm_cb)
 8007604:	4b09      	ldr	r3, [pc, #36]	; (800762c <np_cmd_active_image_get+0x84>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <np_cmd_active_image_get+0x74>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 800760c:	4b07      	ldr	r3, [pc, #28]	; (800762c <np_cmd_active_image_get+0x84>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f107 020c 	add.w	r2, r7, #12
 8007616:	6979      	ldr	r1, [r7, #20]
 8007618:	4610      	mov	r0, r2
 800761a:	4798      	blx	r3

    return 0;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	0801504c 	.word	0x0801504c
 800762c:	20000cf0 	.word	0x20000cf0

08007630 <np_cmd_fw_update_start>:

// 开始固件更新命令
static int np_cmd_fw_update_start(np_prog_t *prog)
{
 8007630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007634:	b092      	sub	sp, #72	; 0x48
 8007636:	af04      	add	r7, sp, #16
 8007638:	61f8      	str	r0, [r7, #28]
    uint64_t addr, len;
    np_write_start_cmd_t *write_start_cmd;

    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2b11      	cmp	r3, #17
 8007640:	d808      	bhi.n	8007654 <np_cmd_fw_update_start+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write start command %lu\r\n",
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	4619      	mov	r1, r3
 8007648:	4870      	ldr	r0, [pc, #448]	; (800780c <np_cmd_fw_update_start+0x1dc>)
 800764a:	f00c f865 	bl	8013718 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 800764e:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8007652:	e0d5      	b.n	8007800 <np_cmd_fw_update_start+0x1d0>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	637b      	str	r3, [r7, #52]	; 0x34
    addr = write_start_cmd->addr;
 800765a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800765c:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8007660:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8007664:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    len = write_start_cmd->len;
 8007668:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800766a:	f8d1 2009 	ldr.w	r2, [r1, #9]
 800766e:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8007672:	e9c7 2308 	strd	r2, r3, [r7, #32]

    DEBUG_PRINT("Write at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n", addr,
 8007676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800767a:	e9cd 2300 	strd	r2, r3, [sp]
 800767e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007682:	4863      	ldr	r0, [pc, #396]	; (8007810 <np_cmd_fw_update_start+0x1e0>)
 8007684:	f00c f848 	bl	8013718 <iprintf>
        len);

    prog->base_addr = FLASH_START_ADDR;
 8007688:	69f9      	ldr	r1, [r7, #28]
 800768a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800768e:	f04f 0300 	mov.w	r3, #0
 8007692:	e9c1 2306 	strd	r2, r3, [r1, #24]
    prog->page_size = FLASH_PAGE_SIZE;
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800769c:	621a      	str	r2, [r3, #32]
    prog->block_size = FLASH_BLOCK_SIZE;
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24
    prog->total_size = FLASH_SIZE;
 80076a6:	69f9      	ldr	r1, [r7, #28]
 80076a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80076ac:	f04f 0300 	mov.w	r3, #0
 80076b0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    if (addr + len > prog->base_addr + prog->total_size)
 80076b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80076b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076bc:	1884      	adds	r4, r0, r2
 80076be:	eb41 0503 	adc.w	r5, r1, r3
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80076ce:	eb10 0802 	adds.w	r8, r0, r2
 80076d2:	eb41 0903 	adc.w	r9, r1, r3
 80076d6:	45a0      	cmp	r8, r4
 80076d8:	eb79 0305 	sbcs.w	r3, r9, r5
 80076dc:	d217      	bcs.n	800770e <np_cmd_fw_update_start+0xde>
    {
        ERROR_PRINT("Write address 0x%" PRIx64 "+0x%" PRIx64
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80076ea:	eb10 0a02 	adds.w	sl, r0, r2
 80076ee:	eb41 0b03 	adc.w	fp, r1, r3
 80076f2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80076f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076fa:	e9cd 2300 	strd	r2, r3, [sp]
 80076fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007702:	4844      	ldr	r0, [pc, #272]	; (8007814 <np_cmd_fw_update_start+0x1e4>)
 8007704:	f00c f808 	bl	8013718 <iprintf>
            " is more then flash size 0x%" PRIx64 "\r\n", addr, len,
            prog->base_addr + prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8007708:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800770c:	e078      	b.n	8007800 <np_cmd_fw_update_start+0x1d0>
    }

    if (addr % prog->page_size)
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	2200      	movs	r2, #0
 8007714:	613b      	str	r3, [r7, #16]
 8007716:	617a      	str	r2, [r7, #20]
 8007718:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800771c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007720:	f7fc fd80 	bl	8004224 <__aeabi_uldivmod>
 8007724:	4313      	orrs	r3, r2
 8007726:	d00a      	beq.n	800773e <np_cmd_fw_update_start+0x10e>
    {
        ERROR_PRINT("Address 0x%" PRIx64
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007732:	4839      	ldr	r0, [pc, #228]	; (8007818 <np_cmd_fw_update_start+0x1e8>)
 8007734:	f00b fff0 	bl	8013718 <iprintf>
            " is not aligned to page size 0x%lx\r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8007738:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800773c:	e060      	b.n	8007800 <np_cmd_fw_update_start+0x1d0>
    }

    if (!len)
 800773e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007742:	4313      	orrs	r3, r2
 8007744:	d105      	bne.n	8007752 <np_cmd_fw_update_start+0x122>
    {
        ERROR_PRINT("Length is 0\r\n");
 8007746:	4835      	ldr	r0, [pc, #212]	; (800781c <np_cmd_fw_update_start+0x1ec>)
 8007748:	f00c f84c 	bl	80137e4 <puts>
        return NP_ERR_LEN_INVALID;
 800774c:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8007750:	e056      	b.n	8007800 <np_cmd_fw_update_start+0x1d0>
    }

    if (len % prog->page_size)
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	2200      	movs	r2, #0
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	60fa      	str	r2, [r7, #12]
 800775c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007760:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007764:	f7fc fd5e 	bl	8004224 <__aeabi_uldivmod>
 8007768:	4313      	orrs	r3, r2
 800776a:	d00a      	beq.n	8007782 <np_cmd_fw_update_start+0x152>
    {
        ERROR_PRINT("Length 0x%" PRIx64
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007776:	482a      	ldr	r0, [pc, #168]	; (8007820 <np_cmd_fw_update_start+0x1f0>)
 8007778:	f00b ffce 	bl	8013718 <iprintf>
            " is not aligned to page size 0x%lx\r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 800777c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007780:	e03e      	b.n	8007800 <np_cmd_fw_update_start+0x1d0>
    }

    prog->addr = addr;
 8007782:	69f9      	ldr	r1, [r7, #28]
 8007784:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007788:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 800778c:	69f9      	ldr	r1, [r7, #28]
 800778e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007792:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	2201      	movs	r2, #1
 800779a:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	6a1b      	ldr	r3, [r3, #32]
 80077a0:	2200      	movs	r2, #0
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80077ae:	f7fc fd39 	bl	8004224 <__aeabi_uldivmod>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80077bc:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80077c6:	461a      	mov	r2, r3
 80077c8:	2300      	movs	r3, #0
 80077ca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80077d4:	3310      	adds	r3, #16
 80077d6:	4619      	mov	r1, r3
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80077ea:	3310      	adds	r3, #16
 80077ec:	4619      	mov	r1, r3
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	f04f 0300 	mov.w	r3, #0
 80077f6:	e9c1 2300 	strd	r2, r3, [r1]

    return np_send_ok_status();
 80077fa:	f7fe f917 	bl	8005a2c <np_send_ok_status>
 80077fe:	4603      	mov	r3, r0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3738      	adds	r7, #56	; 0x38
 8007804:	46bd      	mov	sp, r7
 8007806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800780a:	bf00      	nop
 800780c:	08014aac 	.word	0x08014aac
 8007810:	08014ae8 	.word	0x08014ae8
 8007814:	08015068 	.word	0x08015068
 8007818:	08014b54 	.word	0x08014b54
 800781c:	080149b0 	.word	0x080149b0
 8007820:	08014b90 	.word	0x08014b90

08007824 <np_cmd_fw_update_data>:

// 写入固件数据命令
static int np_cmd_fw_update_data(np_prog_t *prog)
{
 8007824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	b0a7      	sub	sp, #156	; 0x9c
 800782a:	af02      	add	r7, sp, #8
 800782c:	6778      	str	r0, [r7, #116]	; 0x74
    uint32_t write_len;
    uint64_t bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 800782e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d808      	bhi.n	8007848 <np_cmd_fw_update_data+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write data command %lu\r\n",
 8007836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	4619      	mov	r1, r3
 800783c:	487a      	ldr	r0, [pc, #488]	; (8007a28 <np_cmd_fw_update_data+0x204>)
 800783e:	f00b ff6b 	bl	8013718 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8007842:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8007846:	e1d0      	b.n	8007bea <np_cmd_fw_update_data+0x3c6>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 8007848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    len = write_data_cmd->len;
 8007850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007854:	785b      	ldrb	r3, [r3, #1]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2200      	movs	r2, #0
 800785a:	60bb      	str	r3, [r7, #8]
 800785c:	60fa      	str	r2, [r7, #12]
 800785e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007862:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 8007866:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800786a:	1c94      	adds	r4, r2, #2
 800786c:	f143 0500 	adc.w	r5, r3, #0
 8007870:	2c41      	cmp	r4, #65	; 0x41
 8007872:	f175 0300 	sbcs.w	r3, r5, #0
 8007876:	d307      	bcc.n	8007888 <np_cmd_fw_update_data+0x64>
    {
        ERROR_PRINT("Data size is wrong 0x%" PRIx64 "\r\n", len);
 8007878:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800787c:	486b      	ldr	r0, [pc, #428]	; (8007a2c <np_cmd_fw_update_data+0x208>)
 800787e:	f00b ff4b 	bl	8013718 <iprintf>
        return NP_ERR_CMD_DATA_SIZE;
 8007882:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8007886:	e1b0      	b.n	8007bea <np_cmd_fw_update_data+0x3c6>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 8007888:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800788c:	f112 0802 	adds.w	r8, r2, #2
 8007890:	f143 0900 	adc.w	r9, r3, #0
 8007894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	469a      	mov	sl, r3
 800789c:	4693      	mov	fp, r2
 800789e:	45d9      	cmp	r9, fp
 80078a0:	bf08      	it	eq
 80078a2:	45d0      	cmpeq	r8, sl
 80078a4:	d010      	beq.n	80078c8 <np_cmd_fw_update_data+0xa4>
    {
        ERROR_PRINT("Buffer len 0x%lx is bigger then command 0x%" PRIx64 "\r\n",
 80078a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078a8:	6859      	ldr	r1, [r3, #4]
 80078aa:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80078ae:	1c90      	adds	r0, r2, #2
 80078b0:	66b8      	str	r0, [r7, #104]	; 0x68
 80078b2:	f143 0300 	adc.w	r3, r3, #0
 80078b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80078bc:	485c      	ldr	r0, [pc, #368]	; (8007a30 <np_cmd_fw_update_data+0x20c>)
 80078be:	f00b ff2b 	bl	8013718 <iprintf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 80078c2:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80078c6:	e190      	b.n	8007bea <np_cmd_fw_update_data+0x3c6>
    }

    if (!prog->addr_is_set)
 80078c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d105      	bne.n	80078dc <np_cmd_fw_update_data+0xb8>
    {
        ERROR_PRINT("Write address is not set\r\n");
 80078d0:	4858      	ldr	r0, [pc, #352]	; (8007a34 <np_cmd_fw_update_data+0x210>)
 80078d2:	f00b ff87 	bl	80137e4 <puts>
        return NP_ERR_ADDR_INVALID;
 80078d6:	f06f 0364 	mvn.w	r3, #100	; 0x64
 80078da:	e186      	b.n	8007bea <np_cmd_fw_update_data+0x3c6>
    }

    if (prog->page.offset + len > prog->page_size)
 80078dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80078e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078e6:	2200      	movs	r2, #0
 80078e8:	663b      	str	r3, [r7, #96]	; 0x60
 80078ea:	667a      	str	r2, [r7, #100]	; 0x64
 80078ec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80078f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80078f4:	4621      	mov	r1, r4
 80078f6:	1889      	adds	r1, r1, r2
 80078f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80078fa:	4629      	mov	r1, r5
 80078fc:	eb43 0101 	adc.w	r1, r3, r1
 8007900:	65f9      	str	r1, [r7, #92]	; 0x5c
 8007902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	2200      	movs	r2, #0
 8007908:	653b      	str	r3, [r7, #80]	; 0x50
 800790a:	657a      	str	r2, [r7, #84]	; 0x54
 800790c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007910:	4618      	mov	r0, r3
 8007912:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007916:	460d      	mov	r5, r1
 8007918:	42a8      	cmp	r0, r5
 800791a:	4623      	mov	r3, r4
 800791c:	4193      	sbcs	r3, r2
 800791e:	d20a      	bcs.n	8007936 <np_cmd_fw_update_data+0x112>
        write_len = prog->page_size - prog->page.offset;
 8007920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007922:	6a1a      	ldr	r2, [r3, #32]
 8007924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007926:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800792a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007934:	e003      	b.n	800793e <np_cmd_fw_update_data+0x11a>
    else
        write_len = len;
 8007936:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800793a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 800793e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007940:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007946:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800794a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800794e:	18d0      	adds	r0, r2, r3
 8007950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007954:	3302      	adds	r3, #2
 8007956:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800795a:	4619      	mov	r1, r3
 800795c:	f00c f89d 	bl	8013a9a <memcpy>
    prog->page.offset += write_len;
 8007960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007962:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007966:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800796a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800796e:	441a      	add	r2, r3
 8007970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007972:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007976:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    if (prog->page.offset == prog->page_size)
 800797a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800797c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007980:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	429a      	cmp	r2, r3
 800798a:	d17f      	bne.n	8007a8c <np_cmd_fw_update_data+0x268>
    {
        if (prog->addr >= prog->base_addr + prog->total_size)
 800798c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800798e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007994:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800799a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800799e:	1886      	adds	r6, r0, r2
 80079a0:	64be      	str	r6, [r7, #72]	; 0x48
 80079a2:	eb41 0303 	adc.w	r3, r1, r3
 80079a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80079ac:	4611      	mov	r1, r2
 80079ae:	428c      	cmp	r4, r1
 80079b0:	eb75 0303 	sbcs.w	r3, r5, r3
 80079b4:	d319      	bcc.n	80079ea <np_cmd_fw_update_data+0x1c6>
        {
            ERROR_PRINT("Write address 0x%" PRIx64
 80079b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079b8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80079bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80079c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079c4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80079c8:	1886      	adds	r6, r0, r2
 80079ca:	643e      	str	r6, [r7, #64]	; 0x40
 80079cc:	eb41 0303 	adc.w	r3, r1, r3
 80079d0:	647b      	str	r3, [r7, #68]	; 0x44
 80079d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079d6:	e9cd 2300 	strd	r2, r3, [sp]
 80079da:	4622      	mov	r2, r4
 80079dc:	462b      	mov	r3, r5
 80079de:	4816      	ldr	r0, [pc, #88]	; (8007a38 <np_cmd_fw_update_data+0x214>)
 80079e0:	f00b fe9a 	bl	8013718 <iprintf>
                " is more then flash size 0x%" PRIx64 "\r\n",
                prog->addr, prog->base_addr + prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 80079e4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80079e8:	e0ff      	b.n	8007bea <np_cmd_fw_update_data+0x3c6>
        }

        if (flash_page_erase((uint32_t)prog->addr) < 0)
 80079ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80079f0:	4613      	mov	r3, r2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fc ff42 	bl	800487c <flash_page_erase>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	da02      	bge.n	8007a04 <np_cmd_fw_update_data+0x1e0>
            return NP_ERR_INTERNAL;
 80079fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007a02:	e0f2      	b.n	8007bea <np_cmd_fw_update_data+0x3c6>

        if (flash_write((uint32_t)prog->addr, prog->page.buf,
 8007a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a0e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	461a      	mov	r2, r3
 8007a18:	f7fc ff55 	bl	80048c6 <flash_write>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	da0c      	bge.n	8007a3c <np_cmd_fw_update_data+0x218>
            prog->page_size) < 0)
        {
            return NP_ERR_INTERNAL;
 8007a22:	f04f 33ff 	mov.w	r3, #4294967295
 8007a26:	e0e0      	b.n	8007bea <np_cmd_fw_update_data+0x3c6>
 8007a28:	08014c70 	.word	0x08014c70
 8007a2c:	080150ac 	.word	0x080150ac
 8007a30:	080150d0 	.word	0x080150d0
 8007a34:	08014d04 	.word	0x08014d04
 8007a38:	08015108 	.word	0x08015108
        }

        prog->addr += prog->page_size;
 8007a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a3e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	2200      	movs	r2, #0
 8007a48:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a4a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a4c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007a50:	4623      	mov	r3, r4
 8007a52:	18c3      	adds	r3, r0, r3
 8007a54:	633b      	str	r3, [r7, #48]	; 0x30
 8007a56:	462b      	mov	r3, r5
 8007a58:	eb41 0303 	adc.w	r3, r1, r3
 8007a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a60:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007a64:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8007a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007a6e:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8007a72:	3301      	adds	r3, #1
 8007a74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007a76:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007a7a:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8007a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007a84:	461a      	mov	r2, r3
 8007a86:	2300      	movs	r3, #0
 8007a88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    bytes_left = len - write_len;
 8007a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a90:	2200      	movs	r2, #0
 8007a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a96:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007a9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	1b14      	subs	r4, r2, r4
 8007aa2:	603c      	str	r4, [r7, #0]
 8007aa4:	eb63 0301 	sbc.w	r3, r3, r1
 8007aa8:	607b      	str	r3, [r7, #4]
 8007aaa:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007aae:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (bytes_left)
 8007ab2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	d018      	beq.n	8007aec <np_cmd_fw_update_data+0x2c8>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8007aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007abc:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8007ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ac4:	1c9a      	adds	r2, r3, #2
 8007ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aca:	4413      	add	r3, r2
 8007acc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ace:	4619      	mov	r1, r3
 8007ad0:	f00b ffe3 	bl	8013a9a <memcpy>
        prog->page.offset += bytes_left;
 8007ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007ada:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ae0:	4413      	add	r3, r2
 8007ae2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007ae4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007ae8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    prog->bytes_written += len;
 8007aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aee:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007af2:	3310      	adds	r3, #16
 8007af4:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007af8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007afc:	1884      	adds	r4, r0, r2
 8007afe:	623c      	str	r4, [r7, #32]
 8007b00:	eb41 0303 	adc.w	r3, r1, r3
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
 8007b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b08:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007b12:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8007b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b18:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007b1c:	3310      	adds	r3, #16
 8007b1e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b24:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007b28:	3310      	adds	r3, #16
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	1a84      	subs	r4, r0, r2
 8007b30:	61bc      	str	r4, [r7, #24]
 8007b32:	eb61 0303 	sbc.w	r3, r1, r3
 8007b36:	61fb      	str	r3, [r7, #28]
 8007b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	613b      	str	r3, [r7, #16]
 8007b40:	617a      	str	r2, [r7, #20]
 8007b42:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007b46:	4618      	mov	r0, r3
 8007b48:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b4c:	460d      	mov	r5, r1
 8007b4e:	42a8      	cmp	r0, r5
 8007b50:	4623      	mov	r3, r4
 8007b52:	4193      	sbcs	r3, r2
 8007b54:	d20c      	bcs.n	8007b70 <np_cmd_fw_update_data+0x34c>
        prog->bytes_written == prog->len)
 8007b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b58:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007b5c:	3310      	adds	r3, #16
 8007b5e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8007b68:	4299      	cmp	r1, r3
 8007b6a:	bf08      	it	eq
 8007b6c:	4290      	cmpeq	r0, r2
 8007b6e:	d11b      	bne.n	8007ba8 <np_cmd_fw_update_data+0x384>
    {
        if (np_send_write_ack(prog->bytes_written))
 8007b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b72:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007b76:	3310      	adds	r3, #16
 8007b78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4619      	mov	r1, r3
 8007b80:	f7fe fbce 	bl	8006320 <np_send_write_ack>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <np_cmd_fw_update_data+0x36c>
            return -1;
 8007b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8e:	e02c      	b.n	8007bea <np_cmd_fw_update_data+0x3c6>
        prog->bytes_ack = prog->bytes_written;
 8007b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b92:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007b96:	3310      	adds	r3, #16
 8007b98:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b9e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007ba2:	3310      	adds	r3, #16
 8007ba4:	e9c3 0100 	strd	r0, r1, [r3]
    }

    if (prog->bytes_written > prog->len)
 8007ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007baa:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007bae:	3310      	adds	r3, #16
 8007bb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bb4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007bb6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8007bba:	4290      	cmp	r0, r2
 8007bbc:	eb71 0303 	sbcs.w	r3, r1, r3
 8007bc0:	d212      	bcs.n	8007be8 <np_cmd_fw_update_data+0x3c4>
    {
        ERROR_PRINT("Actual write data length 0x%" PRIx64
 8007bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc4:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007bc8:	3310      	adds	r3, #16
 8007bca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bd0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007bd4:	e9cd 2300 	strd	r2, r3, [sp]
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4805      	ldr	r0, [pc, #20]	; (8007bf4 <np_cmd_fw_update_data+0x3d0>)
 8007bde:	f00b fd9b 	bl	8013718 <iprintf>
            " is more then 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 8007be2:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8007be6:	e000      	b.n	8007bea <np_cmd_fw_update_data+0x3c6>
    }

    return 0;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3794      	adds	r7, #148	; 0x94
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf4:	08014d64 	.word	0x08014d64

08007bf8 <np_cmd_fw_update_end>:


// 固件更新结束命令
static int np_cmd_fw_update_end(np_prog_t *prog)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;

    prog->addr_is_set = 0;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	631a      	str	r2, [r3, #48]	; 0x30

    if (prog->page.offset)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007c0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00b      	beq.n	8007c2c <np_cmd_fw_update_end+0x34>
    {
        ERROR_PRINT("Data of 0x%lx length was not written\r\n",
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007c1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c1e:	4619      	mov	r1, r3
 8007c20:	481d      	ldr	r0, [pc, #116]	; (8007c98 <np_cmd_fw_update_end+0xa0>)
 8007c22:	f00b fd79 	bl	8013718 <iprintf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8007c26:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8007c2a:	e030      	b.n	8007c8e <np_cmd_fw_update_end+0x96>
    }

    if (np_boot_config_read(&boot_config))
 8007c2c:	f107 030c 	add.w	r3, r7, #12
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff fc83 	bl	800753c <np_boot_config_read>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <np_cmd_fw_update_end+0x4a>
        return NP_ERR_INTERNAL;
 8007c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c40:	e025      	b.n	8007c8e <np_cmd_fw_update_end+0x96>

    if (prog->active_image == 0xff)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007c48:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8007c4c:	2bff      	cmp	r3, #255	; 0xff
 8007c4e:	d105      	bne.n	8007c5c <np_cmd_fw_update_end+0x64>
        prog->active_image = boot_config.active_image;
 8007c50:	7b3a      	ldrb	r2, [r7, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007c58:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    boot_config.active_image = prog->active_image ? 0 : 1;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007c62:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bf0c      	ite	eq
 8007c6a:	2301      	moveq	r3, #1
 8007c6c:	2300      	movne	r3, #0
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	733b      	strb	r3, [r7, #12]
    if (np_boot_config_write(&boot_config))
 8007c72:	f107 030c 	add.w	r3, r7, #12
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff fc76 	bl	8007568 <np_boot_config_write>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <np_cmd_fw_update_end+0x90>
        return NP_ERR_INTERNAL;
 8007c82:	f04f 33ff 	mov.w	r3, #4294967295
 8007c86:	e002      	b.n	8007c8e <np_cmd_fw_update_end+0x96>

    return np_send_ok_status();
 8007c88:	f7fd fed0 	bl	8005a2c <np_send_ok_status>
 8007c8c:	4603      	mov	r3, r0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	08014da4 	.word	0x08014da4

08007c9c <np_cmd_fw_update>:

// 固件更新命令
static int np_cmd_fw_update(np_prog_t *prog)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]

    switch (cmd->code)
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b0c      	cmp	r3, #12
 8007cb4:	d013      	beq.n	8007cde <np_cmd_fw_update+0x42>
 8007cb6:	2b0c      	cmp	r3, #12
 8007cb8:	dc19      	bgt.n	8007cee <np_cmd_fw_update+0x52>
 8007cba:	2b0a      	cmp	r3, #10
 8007cbc:	d002      	beq.n	8007cc4 <np_cmd_fw_update+0x28>
 8007cbe:	2b0b      	cmp	r3, #11
 8007cc0:	d008      	beq.n	8007cd4 <np_cmd_fw_update+0x38>
    case NP_CMD_FW_UPDATE_E:
        ret = np_cmd_fw_update_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8007cc2:	e014      	b.n	8007cee <np_cmd_fw_update+0x52>
        led_wr_set(true);
 8007cc4:	2001      	movs	r0, #1
 8007cc6:	f7fd fcd3 	bl	8005670 <led_wr_set>
        ret = np_cmd_fw_update_start(prog);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff fcb0 	bl	8007630 <np_cmd_fw_update_start>
 8007cd0:	60f8      	str	r0, [r7, #12]
        break;
 8007cd2:	e00d      	b.n	8007cf0 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_data(prog);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff fda5 	bl	8007824 <np_cmd_fw_update_data>
 8007cda:	60f8      	str	r0, [r7, #12]
        break;
 8007cdc:	e008      	b.n	8007cf0 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_end(prog);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff ff8a 	bl	8007bf8 <np_cmd_fw_update_end>
 8007ce4:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	f7fd fcc2 	bl	8005670 <led_wr_set>
        break;
 8007cec:	e000      	b.n	8007cf0 <np_cmd_fw_update+0x54>
        break;
 8007cee:	bf00      	nop
    }

    if (ret < 0)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	da02      	bge.n	8007cfc <np_cmd_fw_update+0x60>
        led_wr_set(false);
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	f7fd fcba 	bl	8005670 <led_wr_set>

    return ret;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <np_cmd_is_valid>:
    { NP_CMD_FW_UPDATE_E, 0, np_cmd_fw_update },                 // 固件更新结束命令
};

// 检查命令是否有效
static bool np_cmd_is_valid(np_cmd_code_t code)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	71fb      	strb	r3, [r7, #7]
    return code >= 0 && code < NP_CMD_NAND_LAST;
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	2b0c      	cmp	r3, #12
 8007d14:	bf94      	ite	ls
 8007d16:	2301      	movls	r3, #1
 8007d18:	2300      	movhi	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bc80      	pop	{r7}
 8007d24:	4770      	bx	lr
	...

08007d28 <np_cmd_handler>:

// 命令处理函数
static int np_cmd_handler(np_prog_t *prog)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd;

    if (prog->rx_buf_len < sizeof(np_cmd_t))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d108      	bne.n	8007d4a <np_cmd_handler+0x22>
    {
        ERROR_PRINT("Wrong buffer length for command %lu\r\n",
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4823      	ldr	r0, [pc, #140]	; (8007dcc <np_cmd_handler+0xa4>)
 8007d40:	f00b fcea 	bl	8013718 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8007d44:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8007d48:	e03b      	b.n	8007dc2 <np_cmd_handler+0x9a>
    }
    cmd = (np_cmd_t *)prog->rx_buf;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	60fb      	str	r3, [r7, #12]

    if (!np_cmd_is_valid(cmd->code))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff ffd6 	bl	8007d06 <np_cmd_is_valid>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	f083 0301 	eor.w	r3, r3, #1
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d008      	beq.n	8007d78 <np_cmd_handler+0x50>
    {
        ERROR_PRINT("Invalid cmd code %d\r\n", cmd->code);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4818      	ldr	r0, [pc, #96]	; (8007dd0 <np_cmd_handler+0xa8>)
 8007d6e:	f00b fcd3 	bl	8013718 <iprintf>
        return NP_ERR_CMD_INVALID;
 8007d72:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 8007d76:	e024      	b.n	8007dc2 <np_cmd_handler+0x9a>
    }

    if (!prog->chip_is_conf && cmd_handler[cmd->code].is_chip_cmd)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d112      	bne.n	8007da6 <np_cmd_handler+0x7e>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	4619      	mov	r1, r3
 8007d86:	4a13      	ldr	r2, [pc, #76]	; (8007dd4 <np_cmd_handler+0xac>)
 8007d88:	460b      	mov	r3, r1
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	440b      	add	r3, r1
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	3304      	adds	r3, #4
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d005      	beq.n	8007da6 <np_cmd_handler+0x7e>
    {
        ERROR_PRINT("Chip is not configured\r\n");
 8007d9a:	480f      	ldr	r0, [pc, #60]	; (8007dd8 <np_cmd_handler+0xb0>)
 8007d9c:	f00b fd22 	bl	80137e4 <puts>
        return NP_ERR_CHIP_NOT_CONF;
 8007da0:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8007da4:	e00d      	b.n	8007dc2 <np_cmd_handler+0x9a>
    }

    return cmd_handler[cmd->code].exec(prog);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	4619      	mov	r1, r3
 8007dac:	4a09      	ldr	r2, [pc, #36]	; (8007dd4 <np_cmd_handler+0xac>)
 8007dae:	460b      	mov	r3, r1
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	440b      	add	r3, r1
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	3308      	adds	r3, #8
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	4798      	blx	r3
 8007dc0:	4603      	mov	r3, r0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	08015148 	.word	0x08015148
 8007dd0:	08015178 	.word	0x08015178
 8007dd4:	2000004c 	.word	0x2000004c
 8007dd8:	08015198 	.word	0x08015198

08007ddc <np_packet_handler>:

// 数据包处理函数
static void np_packet_handler(np_prog_t *prog)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
    int ret;

    do
    {
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8007de4:	4b12      	ldr	r3, [pc, #72]	; (8007e30 <np_packet_handler+0x54>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	4610      	mov	r0, r2
 8007dee:	4798      	blx	r3
 8007df0:	4602      	mov	r2, r0
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	605a      	str	r2, [r3, #4]
        if (!prog->rx_buf_len)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d012      	beq.n	8007e24 <np_packet_handler+0x48>
            break;

        ret = np_cmd_handler(prog);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff ff92 	bl	8007d28 <np_cmd_handler>
 8007e04:	60f8      	str	r0, [r7, #12]

        np_comm_cb->consume();
 8007e06:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <np_packet_handler+0x54>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	4798      	blx	r3

        if (ret < 0)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	dae7      	bge.n	8007de4 <np_packet_handler+0x8>
            np_send_error(-ret);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	425b      	negs	r3, r3
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fd fe21 	bl	8005a64 <np_send_error>
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8007e22:	e7df      	b.n	8007de4 <np_packet_handler+0x8>
            break;
 8007e24:	bf00      	nop
    }
    while (1);
}
 8007e26:	bf00      	nop
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000cf0 	.word	0x20000cf0

08007e34 <np_nand_handler>:

// NAND 处理函数
static void np_nand_handler(np_prog_t *prog)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
    if (prog->nand_wr_in_progress)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007e42:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d008      	beq.n	8007e5c <np_nand_handler+0x28>
    {
        if (np_nand_handle_status(prog))
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7fe fc34 	bl	80066b8 <np_nand_handle_status>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <np_nand_handler+0x28>
            np_send_error(NP_ERR_NAND_WR);
 8007e56:	2099      	movs	r0, #153	; 0x99
 8007e58:	f7fd fe04 	bl	8005a64 <np_send_error>
    }
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <np_init>:

// NP 初始化函数
void np_init()
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
    prog.active_image = 0xff;
 8007e68:	4b04      	ldr	r3, [pc, #16]	; (8007e7c <np_init+0x18>)
 8007e6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007e6e:	22ff      	movs	r2, #255	; 0xff
 8007e70:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
}
 8007e74:	bf00      	nop
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bc80      	pop	{r7}
 8007e7a:	4770      	bx	lr
 8007e7c:	20000cf8 	.word	0x20000cf8

08007e80 <np_handler>:

// NP 处理函数
void np_handler()
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
    np_packet_handler(&prog);
 8007e84:	4803      	ldr	r0, [pc, #12]	; (8007e94 <np_handler+0x14>)
 8007e86:	f7ff ffa9 	bl	8007ddc <np_packet_handler>
    np_nand_handler(&prog);
 8007e8a:	4802      	ldr	r0, [pc, #8]	; (8007e94 <np_handler+0x14>)
 8007e8c:	f7ff ffd2 	bl	8007e34 <np_nand_handler>
}
 8007e90:	bf00      	nop
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	20000cf8 	.word	0x20000cf8

08007e98 <np_comm_register>:

// 注册 NP 通信回调函数
int np_comm_register(np_comm_cb_t *cb)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
    np_comm_cb = cb;
 8007ea0:	4a04      	ldr	r2, [pc, #16]	; (8007eb4 <np_comm_register+0x1c>)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6013      	str	r3, [r2, #0]

    return 0;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bc80      	pop	{r7}
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	20000cf0 	.word	0x20000cf0

08007eb8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8007ebe:	1d3b      	adds	r3, r7, #4
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	460a      	mov	r2, r1
 8007ec4:	801a      	strh	r2, [r3, #0]
 8007ec6:	460a      	mov	r2, r1
 8007ec8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8007eca:	2300      	movs	r3, #0
 8007ecc:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007ece:	4b1d      	ldr	r3, [pc, #116]	; (8007f44 <MX_RTC_Init+0x8c>)
 8007ed0:	4a1d      	ldr	r2, [pc, #116]	; (8007f48 <MX_RTC_Init+0x90>)
 8007ed2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8007ed4:	4b1b      	ldr	r3, [pc, #108]	; (8007f44 <MX_RTC_Init+0x8c>)
 8007ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eda:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8007edc:	4b19      	ldr	r3, [pc, #100]	; (8007f44 <MX_RTC_Init+0x8c>)
 8007ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ee2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007ee4:	4817      	ldr	r0, [pc, #92]	; (8007f44 <MX_RTC_Init+0x8c>)
 8007ee6:	f004 feed 	bl	800ccc4 <HAL_RTC_Init>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8007ef0:	f7fd fd07 	bl	8005902 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007f00:	1d3b      	adds	r3, r7, #4
 8007f02:	2201      	movs	r2, #1
 8007f04:	4619      	mov	r1, r3
 8007f06:	480f      	ldr	r0, [pc, #60]	; (8007f44 <MX_RTC_Init+0x8c>)
 8007f08:	f004 ff68 	bl	800cddc <HAL_RTC_SetTime>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8007f12:	f7fd fcf6 	bl	8005902 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007f16:	2301      	movs	r3, #1
 8007f18:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8007f26:	463b      	mov	r3, r7
 8007f28:	2201      	movs	r2, #1
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4805      	ldr	r0, [pc, #20]	; (8007f44 <MX_RTC_Init+0x8c>)
 8007f2e:	f004 ffed 	bl	800cf0c <HAL_RTC_SetDate>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8007f38:	f7fd fce3 	bl	8005902 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20005148 	.word	0x20005148
 8007f48:	40002800 	.word	0x40002800

08007f4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a0b      	ldr	r2, [pc, #44]	; (8007f88 <HAL_RTC_MspInit+0x3c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d110      	bne.n	8007f80 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8007f5e:	f004 f8ef 	bl	800c140 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8007f62:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <HAL_RTC_MspInit+0x40>)
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	4a09      	ldr	r2, [pc, #36]	; (8007f8c <HAL_RTC_MspInit+0x40>)
 8007f68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f6c:	61d3      	str	r3, [r2, #28]
 8007f6e:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <HAL_RTC_MspInit+0x40>)
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <HAL_RTC_MspInit+0x44>)
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	40002800 	.word	0x40002800
 8007f8c:	40021000 	.word	0x40021000
 8007f90:	4242043c 	.word	0x4242043c

08007f94 <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f9c:	f107 0310 	add.w	r3, r7, #16
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	605a      	str	r2, [r3, #4]
 8007fa6:	609a      	str	r2, [r3, #8]
 8007fa8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a1b      	ldr	r2, [pc, #108]	; (800801c <HAL_SPI_MspInit+0x88>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d12f      	bne.n	8008014 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007fb4:	4b1a      	ldr	r3, [pc, #104]	; (8008020 <HAL_SPI_MspInit+0x8c>)
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	4a19      	ldr	r2, [pc, #100]	; (8008020 <HAL_SPI_MspInit+0x8c>)
 8007fba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fbe:	6193      	str	r3, [r2, #24]
 8007fc0:	4b17      	ldr	r3, [pc, #92]	; (8008020 <HAL_SPI_MspInit+0x8c>)
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fcc:	4b14      	ldr	r3, [pc, #80]	; (8008020 <HAL_SPI_MspInit+0x8c>)
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	4a13      	ldr	r2, [pc, #76]	; (8008020 <HAL_SPI_MspInit+0x8c>)
 8007fd2:	f043 0304 	orr.w	r3, r3, #4
 8007fd6:	6193      	str	r3, [r2, #24]
 8007fd8:	4b11      	ldr	r3, [pc, #68]	; (8008020 <HAL_SPI_MspInit+0x8c>)
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	60bb      	str	r3, [r7, #8]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8007fe4:	23a0      	movs	r3, #160	; 0xa0
 8007fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fe8:	2302      	movs	r3, #2
 8007fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007fec:	2303      	movs	r3, #3
 8007fee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ff0:	f107 0310 	add.w	r3, r7, #16
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	480b      	ldr	r0, [pc, #44]	; (8008024 <HAL_SPI_MspInit+0x90>)
 8007ff8:	f001 ff90 	bl	8009f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8007ffc:	2340      	movs	r3, #64	; 0x40
 8007ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008004:	2300      	movs	r3, #0
 8008006:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8008008:	f107 0310 	add.w	r3, r7, #16
 800800c:	4619      	mov	r1, r3
 800800e:	4805      	ldr	r0, [pc, #20]	; (8008024 <HAL_SPI_MspInit+0x90>)
 8008010:	f001 ff84 	bl	8009f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8008014:	bf00      	nop
 8008016:	3720      	adds	r7, #32
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	40013000 	.word	0x40013000
 8008020:	40021000 	.word	0x40021000
 8008024:	40010800 	.word	0x40010800

08008028 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a09      	ldr	r2, [pc, #36]	; (800805c <HAL_SPI_MspDeInit+0x34>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d10c      	bne.n	8008054 <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800803a:	4b09      	ldr	r3, [pc, #36]	; (8008060 <HAL_SPI_MspDeInit+0x38>)
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	4a08      	ldr	r2, [pc, #32]	; (8008060 <HAL_SPI_MspDeInit+0x38>)
 8008040:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008044:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8008046:	21e0      	movs	r1, #224	; 0xe0
 8008048:	4806      	ldr	r0, [pc, #24]	; (8008064 <HAL_SPI_MspDeInit+0x3c>)
 800804a:	f002 f8fb 	bl	800a244 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800804e:	2023      	movs	r0, #35	; 0x23
 8008050:	f001 fb11 	bl	8009676 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	40013000 	.word	0x40013000
 8008060:	40021000 	.word	0x40021000
 8008064:	40010800 	.word	0x40010800

08008068 <spi_flash_gpio_init>:

static uint32_t flash_last_operation = FLASH_OP_EMPTY;
static uint32_t current_die = 0;

static void spi_flash_gpio_init()
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800806e:	f107 0310 	add.w	r3, r7, #16
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	605a      	str	r2, [r3, #4]
 8008078:	609a      	str	r2, [r3, #8]
 800807a:	60da      	str	r2, [r3, #12]

    __HAL_RCC_SPI1_CLK_ENABLE();
 800807c:	4b2b      	ldr	r3, [pc, #172]	; (800812c <spi_flash_gpio_init+0xc4>)
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	4a2a      	ldr	r2, [pc, #168]	; (800812c <spi_flash_gpio_init+0xc4>)
 8008082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008086:	6193      	str	r3, [r2, #24]
 8008088:	4b28      	ldr	r3, [pc, #160]	; (800812c <spi_flash_gpio_init+0xc4>)
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008094:	4b25      	ldr	r3, [pc, #148]	; (800812c <spi_flash_gpio_init+0xc4>)
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	4a24      	ldr	r2, [pc, #144]	; (800812c <spi_flash_gpio_init+0xc4>)
 800809a:	f043 0304 	orr.w	r3, r3, #4
 800809e:	6193      	str	r3, [r2, #24]
 80080a0:	4b22      	ldr	r3, [pc, #136]	; (800812c <spi_flash_gpio_init+0xc4>)
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	60bb      	str	r3, [r7, #8]
 80080aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080ac:	4b1f      	ldr	r3, [pc, #124]	; (800812c <spi_flash_gpio_init+0xc4>)
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	4a1e      	ldr	r2, [pc, #120]	; (800812c <spi_flash_gpio_init+0xc4>)
 80080b2:	f043 0308 	orr.w	r3, r3, #8
 80080b6:	6193      	str	r3, [r2, #24]
 80080b8:	4b1c      	ldr	r3, [pc, #112]	; (800812c <spi_flash_gpio_init+0xc4>)
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f003 0308 	and.w	r3, r3, #8
 80080c0:	607b      	str	r3, [r7, #4]
 80080c2:	687b      	ldr	r3, [r7, #4]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_CS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80080c4:	2320      	movs	r3, #32
 80080c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c8:	2302      	movs	r3, #2
 80080ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	61bb      	str	r3, [r7, #24]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80080d0:	f107 0310 	add.w	r3, r7, #16
 80080d4:	4619      	mov	r1, r3
 80080d6:	4816      	ldr	r0, [pc, #88]	; (8008130 <spi_flash_gpio_init+0xc8>)
 80080d8:	f001 ff20 	bl	8009f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 80080dc:	2380      	movs	r3, #128	; 0x80
 80080de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e0:	2302      	movs	r3, #2
 80080e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e4:	2300      	movs	r3, #0
 80080e6:	61bb      	str	r3, [r7, #24]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ__MEDIUM;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080e8:	f107 0310 	add.w	r3, r7, #16
 80080ec:	4619      	mov	r1, r3
 80080ee:	4810      	ldr	r0, [pc, #64]	; (8008130 <spi_flash_gpio_init+0xc8>)
 80080f0:	f001 ff14 	bl	8009f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80080f4:	2340      	movs	r3, #64	; 0x40
 80080f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080f8:	2300      	movs	r3, #0
 80080fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61bb      	str	r3, [r7, #24]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_MEDIUM;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008100:	f107 0310 	add.w	r3, r7, #16
 8008104:	4619      	mov	r1, r3
 8008106:	480a      	ldr	r0, [pc, #40]	; (8008130 <spi_flash_gpio_init+0xc8>)
 8008108:	f001 ff08 	bl	8009f1c <HAL_GPIO_Init>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800810c:	2310      	movs	r3, #16
 800810e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008110:	2301      	movs	r3, #1
 8008112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008114:	2300      	movs	r3, #0
 8008116:	61bb      	str	r3, [r7, #24]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008118:	f107 0310 	add.w	r3, r7, #16
 800811c:	4619      	mov	r1, r3
 800811e:	4804      	ldr	r0, [pc, #16]	; (8008130 <spi_flash_gpio_init+0xc8>)
 8008120:	f001 fefc 	bl	8009f1c <HAL_GPIO_Init>
}
 8008124:	bf00      	nop
 8008126:	3720      	adds	r7, #32
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	40021000 	.word	0x40021000
 8008130:	40010800 	.word	0x40010800

08008134 <spi_flash_gpio_uninit>:

static void spi_flash_gpio_uninit()
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800813a:	463b      	mov	r3, r7
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	609a      	str	r2, [r3, #8]
 8008144:	60da      	str	r2, [r3, #12]

    __HAL_RCC_SPI1_CLK_DISABLE();
 8008146:	4b18      	ldr	r3, [pc, #96]	; (80081a8 <spi_flash_gpio_uninit+0x74>)
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <spi_flash_gpio_uninit+0x74>)
 800814c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008150:	6193      	str	r3, [r2, #24]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_CS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8008152:	2320      	movs	r3, #32
 8008154:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008156:	2300      	movs	r3, #0
 8008158:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800815a:	2300      	movs	r3, #0
 800815c:	60bb      	str	r3, [r7, #8]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 800815e:	463b      	mov	r3, r7
 8008160:	4619      	mov	r1, r3
 8008162:	4812      	ldr	r0, [pc, #72]	; (80081ac <spi_flash_gpio_uninit+0x78>)
 8008164:	f001 feda 	bl	8009f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8008168:	2380      	movs	r3, #128	; 0x80
 800816a:	603b      	str	r3, [r7, #0]
//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800816c:	2300      	movs	r3, #0
 800816e:	60bb      	str	r3, [r7, #8]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ__MEDIUM;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008170:	463b      	mov	r3, r7
 8008172:	4619      	mov	r1, r3
 8008174:	480d      	ldr	r0, [pc, #52]	; (80081ac <spi_flash_gpio_uninit+0x78>)
 8008176:	f001 fed1 	bl	8009f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 800817a:	2340      	movs	r3, #64	; 0x40
 800817c:	603b      	str	r3, [r7, #0]
//    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800817e:	2300      	movs	r3, #0
 8008180:	60bb      	str	r3, [r7, #8]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_MEDIUM;

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008182:	463b      	mov	r3, r7
 8008184:	4619      	mov	r1, r3
 8008186:	4809      	ldr	r0, [pc, #36]	; (80081ac <spi_flash_gpio_uninit+0x78>)
 8008188:	f001 fec8 	bl	8009f1c <HAL_GPIO_Init>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800818c:	2310      	movs	r3, #16
 800818e:	603b      	str	r3, [r7, #0]
//    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008190:	2300      	movs	r3, #0
 8008192:	60bb      	str	r3, [r7, #8]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008194:	463b      	mov	r3, r7
 8008196:	4619      	mov	r1, r3
 8008198:	4804      	ldr	r0, [pc, #16]	; (80081ac <spi_flash_gpio_uninit+0x78>)
 800819a:	f001 febf 	bl	8009f1c <HAL_GPIO_Init>
}
 800819e:	bf00      	nop
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	40021000 	.word	0x40021000
 80081ac:	40010800 	.word	0x40010800

080081b0 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
//    GPIO_ResetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 80081b4:	2200      	movs	r2, #0
 80081b6:	2110      	movs	r1, #16
 80081b8:	4802      	ldr	r0, [pc, #8]	; (80081c4 <spi_flash_select_chip+0x14>)
 80081ba:	f002 f90f 	bl	800a3dc <HAL_GPIO_WritePin>
}
 80081be:	bf00      	nop
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	40010800 	.word	0x40010800

080081c8 <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
//    GPIO_SetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 80081cc:	2201      	movs	r2, #1
 80081ce:	2110      	movs	r1, #16
 80081d0:	4802      	ldr	r0, [pc, #8]	; (80081dc <spi_flash_deselect_chip+0x14>)
 80081d2:	f002 f903 	bl	800a3dc <HAL_GPIO_WritePin>
}
 80081d6:	bf00      	nop
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	40010800 	.word	0x40010800

080081e0 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 80081e8:	4b1e      	ldr	r3, [pc, #120]	; (8008264 <spi_flash_get_baud_rate_prescaler+0x84>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a1e      	ldr	r2, [pc, #120]	; (8008268 <spi_flash_get_baud_rate_prescaler+0x88>)
 80081ee:	fba2 2303 	umull	r2, r3, r2, r3
 80081f2:	099b      	lsrs	r3, r3, #6
 80081f4:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	085b      	lsrs	r3, r3, #1
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d301      	bcc.n	8008204 <spi_flash_get_baud_rate_prescaler+0x24>
        return SPI_BAUDRATEPRESCALER_2;
 8008200:	2300      	movs	r3, #0
 8008202:	e02a      	b.n	800825a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	089b      	lsrs	r3, r3, #2
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	429a      	cmp	r2, r3
 800820c:	d301      	bcc.n	8008212 <spi_flash_get_baud_rate_prescaler+0x32>
        return SPI_BAUDRATEPRESCALER_4;
 800820e:	2308      	movs	r3, #8
 8008210:	e023      	b.n	800825a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	08db      	lsrs	r3, r3, #3
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	429a      	cmp	r2, r3
 800821a:	d301      	bcc.n	8008220 <spi_flash_get_baud_rate_prescaler+0x40>
        return SPI_BAUDRATEPRESCALER_8;
 800821c:	2310      	movs	r3, #16
 800821e:	e01c      	b.n	800825a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	091b      	lsrs	r3, r3, #4
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d301      	bcc.n	800822e <spi_flash_get_baud_rate_prescaler+0x4e>
        return SPI_BAUDRATEPRESCALER_16;
 800822a:	2318      	movs	r3, #24
 800822c:	e015      	b.n	800825a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	095b      	lsrs	r3, r3, #5
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	429a      	cmp	r2, r3
 8008236:	d301      	bcc.n	800823c <spi_flash_get_baud_rate_prescaler+0x5c>
        return SPI_BAUDRATEPRESCALER_32;
 8008238:	2320      	movs	r3, #32
 800823a:	e00e      	b.n	800825a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	099b      	lsrs	r3, r3, #6
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	429a      	cmp	r2, r3
 8008244:	d301      	bcc.n	800824a <spi_flash_get_baud_rate_prescaler+0x6a>
        return SPI_BAUDRATEPRESCALER_64;
 8008246:	2328      	movs	r3, #40	; 0x28
 8008248:	e007      	b.n	800825a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	09db      	lsrs	r3, r3, #7
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	429a      	cmp	r2, r3
 8008252:	d301      	bcc.n	8008258 <spi_flash_get_baud_rate_prescaler+0x78>
        return SPI_BAUDRATEPRESCALER_128;
 8008254:	2330      	movs	r3, #48	; 0x30
 8008256:	e000      	b.n	800825a <spi_flash_get_baud_rate_prescaler+0x7a>
    else
        return SPI_BAUDRATEPRESCALER_256;
 8008258:	2338      	movs	r3, #56	; 0x38
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	bc80      	pop	{r7}
 8008262:	4770      	bx	lr
 8008264:	20000138 	.word	0x20000138
 8008268:	10624dd3 	.word	0x10624dd3

0800826c <spi_flash_init>:

static int spi_flash_init(void *conf, uint32_t conf_size)
{
 800826c:	b590      	push	{r4, r7, lr}
 800826e:	b08f      	sub	sp, #60	; 0x3c
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef spi_init;

    if (conf_size < sizeof(spi_conf_t))
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b0e      	cmp	r3, #14
 800827a:	d802      	bhi.n	8008282 <spi_flash_init+0x16>
        return -1; 
 800827c:	f04f 33ff 	mov.w	r3, #4294967295
 8008280:	e041      	b.n	8008306 <spi_flash_init+0x9a>
    spi_conf = *(spi_conf_t *)conf;
 8008282:	4b23      	ldr	r3, [pc, #140]	; (8008310 <spi_flash_init+0xa4>)
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	4614      	mov	r4, r2
 8008288:	6820      	ldr	r0, [r4, #0]
 800828a:	6861      	ldr	r1, [r4, #4]
 800828c:	68a2      	ldr	r2, [r4, #8]
 800828e:	c307      	stmia	r3!, {r0, r1, r2}
 8008290:	89a2      	ldrh	r2, [r4, #12]
 8008292:	7ba1      	ldrb	r1, [r4, #14]
 8008294:	801a      	strh	r2, [r3, #0]
 8008296:	460a      	mov	r2, r1
 8008298:	709a      	strb	r2, [r3, #2]

    spi_flash_gpio_init();  // 初始化SPI Flash的GPIO引脚
 800829a:	f7ff fee5 	bl	8008068 <spi_flash_gpio_init>

    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 800829e:	f7ff ff93 	bl	80081c8 <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Init.Direction = SPI_DIRECTION_2LINES; // SPI双线全双工模式
 80082a2:	4b1c      	ldr	r3, [pc, #112]	; (8008314 <spi_flash_init+0xa8>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	609a      	str	r2, [r3, #8]
    hspi1.Init.Mode = SPI_MODE_MASTER;           // 主模式
 80082a8:	4b1a      	ldr	r3, [pc, #104]	; (8008314 <spi_flash_init+0xa8>)
 80082aa:	f44f 7282 	mov.w	r2, #260	; 0x104
 80082ae:	605a      	str	r2, [r3, #4]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;     // 数据大小为8位
 80082b0:	4b18      	ldr	r3, [pc, #96]	; (8008314 <spi_flash_init+0xa8>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // 时钟极性为高电平时有效
 80082b6:	4b17      	ldr	r3, [pc, #92]	; (8008314 <spi_flash_init+0xa8>)
 80082b8:	2202      	movs	r2, #2
 80082ba:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;       // 时钟相位为第2个边沿（上升沿）有效
 80082bc:	4b15      	ldr	r3, [pc, #84]	; (8008314 <spi_flash_init+0xa8>)
 80082be:	2201      	movs	r2, #1
 80082c0:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;               // 使用软件管理片选信号
 80082c2:	4b14      	ldr	r3, [pc, #80]	; (8008314 <spi_flash_init+0xa8>)
 80082c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082c8:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq); // 设置波特率预分频值（假设spi_conf.freq是你的频率设置）
 80082ca:	4b11      	ldr	r3, [pc, #68]	; (8008310 <spi_flash_init+0xa4>)
 80082cc:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff ff85 	bl	80081e0 <spi_flash_get_baud_rate_prescaler>
 80082d6:	4603      	mov	r3, r0
 80082d8:	461a      	mov	r2, r3
 80082da:	4b0e      	ldr	r3, [pc, #56]	; (8008314 <spi_flash_init+0xa8>)
 80082dc:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;      // 数据传输的起始位为最高有效位
 80082de:	4b0d      	ldr	r3, [pc, #52]	; (8008314 <spi_flash_init+0xa8>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	621a      	str	r2, [r3, #32]
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE; // 禁用CRC校验
 80082e4:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <spi_flash_init+0xa8>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;               // CRC校验多项式（不使用CRC时此值无关紧要）
 80082ea:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <spi_flash_init+0xa8>)
 80082ec:	220a      	movs	r2, #10
 80082ee:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80082f0:	4808      	ldr	r0, [pc, #32]	; (8008314 <spi_flash_init+0xa8>)
 80082f2:	f005 f8e6 	bl	800d4c2 <HAL_SPI_Init>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <spi_flash_init+0x94>
    {
      Error_Handler();
 80082fc:	f7fd fb01 	bl	8005902 <Error_Handler>
    }  // 根据以上配置初始化SPI1

    /* 使能SPI */
//    SPI_Cmd(SPI1, ENABLE);
    spi_flash_chip_init();  // 初始化SPI Flash芯片
 8008300:	f000 f958 	bl	80085b4 <spi_flash_chip_init>

    return 0;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	373c      	adds	r7, #60	; 0x3c
 800830a:	46bd      	mov	sp, r7
 800830c:	bd90      	pop	{r4, r7, pc}
 800830e:	bf00      	nop
 8008310:	2000515c 	.word	0x2000515c
 8008314:	20005184 	.word	0x20005184

08008318 <spi_flash_uninit>:

static void spi_flash_uninit()
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit();  // 反初始化SPI Flash的GPIO引脚
 800831c:	f7ff ff0a 	bl	8008134 <spi_flash_gpio_uninit>

    /* 禁用SPI */
//    SPI_Cmd(SPI3, DISABLE);
//    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef* hspi);
    HAL_SPI_DeInit(&hspi1);
 8008320:	4802      	ldr	r0, [pc, #8]	; (800832c <spi_flash_uninit+0x14>)
 8008322:	f005 f952 	bl	800d5ca <HAL_SPI_DeInit>
}
 8008326:	bf00      	nop
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20005184 	.word	0x20005184

08008330 <spi_flash_send_byte>:

static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af02      	add	r7, sp, #8
 8008336:	4603      	mov	r3, r0
 8008338:	71fb      	strb	r3, [r7, #7]
  uint32_t timeout = 0x1000000;
 800833a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800833e:	60fb      	str	r3, [r7, #12]
  uint8_t rx_byte = 0X00;
 8008340:	2300      	movs	r3, #0
 8008342:	72fb      	strb	r3, [r7, #11]

  if(HAL_SPI_TransmitReceive(&hspi1, &byte, &rx_byte, 1, timeout) != HAL_OK)
 8008344:	f107 020b 	add.w	r2, r7, #11
 8008348:	1df9      	adds	r1, r7, #7
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	2301      	movs	r3, #1
 8008350:	4806      	ldr	r0, [pc, #24]	; (800836c <spi_flash_send_byte+0x3c>)
 8008352:	f005 f962 	bl	800d61a <HAL_SPI_TransmitReceive>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <spi_flash_send_byte+0x30>
   {
	   rx_byte = 0XFF;
 800835c:	23ff      	movs	r3, #255	; 0xff
 800835e:	72fb      	strb	r3, [r7, #11]
   }

  return rx_byte;
 8008360:	7afb      	ldrb	r3, [r7, #11]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20005184 	.word	0x20005184

08008370 <spi_flash_read_byte>:

static inline uint8_t spi_flash_read_byte()
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8008374:	20ff      	movs	r0, #255	; 0xff
 8008376:	f7ff ffdb 	bl	8008330 <spi_flash_send_byte>
 800837a:	4603      	mov	r3, r0
}
 800837c:	4618      	mov	r0, r3
 800837e:	bd80      	pop	{r7, pc}

08008380 <spi_flash_set_feature>:

static void spi_flash_set_feature(uint8_t addr, uint8_t data)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	460a      	mov	r2, r1
 800838a:	71fb      	strb	r3, [r7, #7]
 800838c:	4613      	mov	r3, r2
 800838e:	71bb      	strb	r3, [r7, #6]
    spi_flash_select_chip();  // 选中SPI Flash
 8008390:	f7ff ff0e 	bl	80081b0 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_SET_FEATURE);  // 发送设置特征的操作码
 8008394:	201f      	movs	r0, #31
 8008396:	f7ff ffcb 	bl	8008330 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff ffc7 	bl	8008330 <spi_flash_send_byte>
    spi_flash_send_byte(data);  // 发送数据
 80083a2:	79bb      	ldrb	r3, [r7, #6]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff ffc3 	bl	8008330 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 80083aa:	f7ff ff0d 	bl	80081c8 <spi_flash_deselect_chip>
}
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <spi_flash_get_feature>:

static void spi_flash_get_feature(uint8_t addr, uint8_t *data)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b082      	sub	sp, #8
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	4603      	mov	r3, r0
 80083be:	6039      	str	r1, [r7, #0]
 80083c0:	71fb      	strb	r3, [r7, #7]
    spi_flash_select_chip();  // 选中SPI Flash
 80083c2:	f7ff fef5 	bl	80081b0 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_GET_FEATURE);  // 发送获取特征的操作码
 80083c6:	200f      	movs	r0, #15
 80083c8:	f7ff ffb2 	bl	8008330 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff ffae 	bl	8008330 <spi_flash_send_byte>
    *data = spi_flash_read_byte();  // 读取一个字节的数据
 80083d4:	f7ff ffcc 	bl	8008370 <spi_flash_read_byte>
 80083d8:	4603      	mov	r3, r0
 80083da:	461a      	mov	r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	701a      	strb	r2, [r3, #0]
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 80083e0:	f7ff fef2 	bl	80081c8 <spi_flash_deselect_chip>
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
    uint32_t timeout = 0x1000000;  // 超时时间
 80083f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083f6:	607b      	str	r3, [r7, #4]
    uint8_t status;

    do {
        spi_flash_get_feature(_SPI_NAND_ADDR_STATUS, &status);  // 获取状态
 80083f8:	1cfb      	adds	r3, r7, #3
 80083fa:	4619      	mov	r1, r3
 80083fc:	20c0      	movs	r0, #192	; 0xc0
 80083fe:	f7ff ffda 	bl	80083b6 <spi_flash_get_feature>
    } while((status & _SPI_NAND_VAL_OIP) && timeout);
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	d002      	beq.n	8008412 <spi_flash_read_status+0x26>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1f2      	bne.n	80083f8 <spi_flash_read_status+0xc>

    if (!timeout)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <spi_flash_read_status+0x30>
        return FLASH_STATUS_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e02b      	b.n	8008474 <spi_flash_read_status+0x88>

    switch(flash_last_operation){
 800841c:	4b17      	ldr	r3, [pc, #92]	; (800847c <spi_flash_read_status+0x90>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b03      	cmp	r3, #3
 8008422:	d014      	beq.n	800844e <spi_flash_read_status+0x62>
 8008424:	2b03      	cmp	r3, #3
 8008426:	d81d      	bhi.n	8008464 <spi_flash_read_status+0x78>
 8008428:	2b01      	cmp	r3, #1
 800842a:	d002      	beq.n	8008432 <spi_flash_read_status+0x46>
 800842c:	2b02      	cmp	r3, #2
 800842e:	d007      	beq.n	8008440 <spi_flash_read_status+0x54>
                return FLASH_STATUS_ERROR;
            break;
        case FLASH_OP_SPARE:
        case FLASH_OP_EMPTY:
        default:
            break;
 8008430:	e018      	b.n	8008464 <spi_flash_read_status+0x78>
            if(status & _SPI_NAND_VAL_ERASE_FAIL)
 8008432:	78fb      	ldrb	r3, [r7, #3]
 8008434:	f003 0304 	and.w	r3, r3, #4
 8008438:	2b00      	cmp	r3, #0
 800843a:	d015      	beq.n	8008468 <spi_flash_read_status+0x7c>
                return FLASH_STATUS_ERROR;
 800843c:	2302      	movs	r3, #2
 800843e:	e019      	b.n	8008474 <spi_flash_read_status+0x88>
            if(status & _SPI_NAND_VAL_PROGRAM_FAIL)
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	f003 0308 	and.w	r3, r3, #8
 8008446:	2b00      	cmp	r3, #0
 8008448:	d010      	beq.n	800846c <spi_flash_read_status+0x80>
                return FLASH_STATUS_ERROR;
 800844a:	2302      	movs	r3, #2
 800844c:	e012      	b.n	8008474 <spi_flash_read_status+0x88>
            if((status & spi_conf.ecc_err_bits_mask) == spi_conf.ecc_err_bits_state)
 800844e:	4b0c      	ldr	r3, [pc, #48]	; (8008480 <spi_flash_read_status+0x94>)
 8008450:	799a      	ldrb	r2, [r3, #6]
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	4013      	ands	r3, r2
 8008456:	b2da      	uxtb	r2, r3
 8008458:	4b09      	ldr	r3, [pc, #36]	; (8008480 <spi_flash_read_status+0x94>)
 800845a:	79db      	ldrb	r3, [r3, #7]
 800845c:	429a      	cmp	r2, r3
 800845e:	d107      	bne.n	8008470 <spi_flash_read_status+0x84>
                return FLASH_STATUS_ERROR;
 8008460:	2302      	movs	r3, #2
 8008462:	e007      	b.n	8008474 <spi_flash_read_status+0x88>
            break;
 8008464:	bf00      	nop
 8008466:	e004      	b.n	8008472 <spi_flash_read_status+0x86>
            break;
 8008468:	bf00      	nop
 800846a:	e002      	b.n	8008472 <spi_flash_read_status+0x86>
            break;
 800846c:	bf00      	nop
 800846e:	e000      	b.n	8008472 <spi_flash_read_status+0x86>
            break;
 8008470:	bf00      	nop
    }
    return FLASH_STATUS_READY;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	2000516c 	.word	0x2000516c
 8008480:	2000515c 	.word	0x2000515c

08008484 <spi_flash_select_die_cmd>:

// 选择 SPI Flash 的芯片
static void spi_flash_select_die_cmd(uint32_t die)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
    switch(spi_conf.die_select_type) {
 800848c:	4b18      	ldr	r3, [pc, #96]	; (80084f0 <spi_flash_select_die_cmd+0x6c>)
 800848e:	7a9b      	ldrb	r3, [r3, #10]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d002      	beq.n	800849a <spi_flash_select_die_cmd+0x16>
 8008494:	2b02      	cmp	r3, #2
 8008496:	d00d      	beq.n	80084b4 <spi_flash_select_die_cmd+0x30>
        }
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
        break;
    }
    default:
        break;
 8008498:	e026      	b.n	80084e8 <spi_flash_select_die_cmd+0x64>
        spi_flash_select_chip();  // 选择 Flash 芯片
 800849a:	f7ff fe89 	bl	80081b0 <spi_flash_select_chip>
        spi_flash_send_byte(_SPI_NAND_OP_DIE_SELECT);  // 发送选择芯片的指令
 800849e:	20c2      	movs	r0, #194	; 0xc2
 80084a0:	f7ff ff46 	bl	8008330 <spi_flash_send_byte>
        spi_flash_send_byte(die);  // 发送芯片编号
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff ff41 	bl	8008330 <spi_flash_send_byte>
        spi_flash_deselect_chip();  // 取消选择芯片
 80084ae:	f7ff fe8b 	bl	80081c8 <spi_flash_deselect_chip>
        break;
 80084b2:	e019      	b.n	80084e8 <spi_flash_select_die_cmd+0x64>
        spi_flash_get_feature(_SPI_NAND_ADDR_FEATURE_4, &feature);  // 读取 Flash 的特征值
 80084b4:	f107 030f 	add.w	r3, r7, #15
 80084b8:	4619      	mov	r1, r3
 80084ba:	20d0      	movs	r0, #208	; 0xd0
 80084bc:	f7ff ff7b 	bl	80083b6 <spi_flash_get_feature>
        if(die == 0) {
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d105      	bne.n	80084d2 <spi_flash_select_die_cmd+0x4e>
            feature &= ~(0x40);  // 清除特征值中的某位
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
 80084c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	73fb      	strb	r3, [r7, #15]
 80084d0:	e004      	b.n	80084dc <spi_flash_select_die_cmd+0x58>
            feature |= 0x40;  // 设置特征值中的某位
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	73fb      	strb	r3, [r7, #15]
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	4619      	mov	r1, r3
 80084e0:	20d0      	movs	r0, #208	; 0xd0
 80084e2:	f7ff ff4d 	bl	8008380 <spi_flash_set_feature>
        break;
 80084e6:	bf00      	nop
    }
}
 80084e8:	bf00      	nop
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	2000515c 	.word	0x2000515c

080084f4 <spi_flash_select_die>:

// 选择 SPI Flash 的 die（芯片）（用于多芯片的情况）
static void spi_flash_select_die(uint32_t page)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
    uint32_t die = 0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]
    if(spi_conf.die_select_type) {
 8008500:	4b0f      	ldr	r3, [pc, #60]	; (8008540 <spi_flash_select_die+0x4c>)
 8008502:	7a9b      	ldrb	r3, [r3, #10]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d017      	beq.n	8008538 <spi_flash_select_die+0x44>
        if(!spi_conf.plane_select_have)
 8008508:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <spi_flash_select_die+0x4c>)
 800850a:	7a5b      	ldrb	r3, [r3, #9]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d104      	bne.n	800851a <spi_flash_select_die+0x26>
            die = ((page >> 16) & 0xff);  // 计算芯片编号
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	0c1b      	lsrs	r3, r3, #16
 8008514:	b2db      	uxtb	r3, r3
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	e003      	b.n	8008522 <spi_flash_select_die+0x2e>
        else
            die = ((page >> 17) & 0xff);  // 计算芯片编号
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	0c5b      	lsrs	r3, r3, #17
 800851e:	b2db      	uxtb	r3, r3
 8008520:	60fb      	str	r3, [r7, #12]
        if (current_die != die) {
 8008522:	4b08      	ldr	r3, [pc, #32]	; (8008544 <spi_flash_select_die+0x50>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	429a      	cmp	r2, r3
 800852a:	d005      	beq.n	8008538 <spi_flash_select_die+0x44>
            current_die = die;
 800852c:	4a05      	ldr	r2, [pc, #20]	; (8008544 <spi_flash_select_die+0x50>)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6013      	str	r3, [r2, #0]
            spi_flash_select_die_cmd(die);  // 选择芯片
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f7ff ffa6 	bl	8008484 <spi_flash_select_die_cmd>
        }
    }
}
 8008538:	bf00      	nop
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	2000515c 	.word	0x2000515c
 8008544:	20005170 	.word	0x20005170

08008548 <spi_flash_read_id>:

// 读取 SPI Flash 的 ID（厂商ID和设备ID）
static void spi_flash_read_id(chip_id_t *chip_id)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();  // 选择 Flash 芯片
 8008550:	f7ff fe2e 	bl	80081b0 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_READ_ID);  // 发送读取 ID 的指令
 8008554:	209f      	movs	r0, #159	; 0x9f
 8008556:	f7ff feeb 	bl	8008330 <spi_flash_send_byte>
    spi_flash_send_byte(_SPI_NAND_ADDR_MANUFACTURE_ID);  // 发送读取厂商ID的指令
 800855a:	2000      	movs	r0, #0
 800855c:	f7ff fee8 	bl	8008330 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();  // 读取厂商ID
 8008560:	f7ff ff06 	bl	8008370 <spi_flash_read_byte>
 8008564:	4603      	mov	r3, r0
 8008566:	461a      	mov	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();  // 读取设备ID
 800856c:	f7ff ff00 	bl	8008370 <spi_flash_read_byte>
 8008570:	4603      	mov	r3, r0
 8008572:	461a      	mov	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();  // 读取第三个ID
 8008578:	f7ff fefa 	bl	8008370 <spi_flash_read_byte>
 800857c:	4603      	mov	r3, r0
 800857e:	461a      	mov	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();  // 读取第四个ID
 8008584:	f7ff fef4 	bl	8008370 <spi_flash_read_byte>
 8008588:	4603      	mov	r3, r0
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();  // 读取第五个ID
 8008590:	f7ff feee 	bl	8008370 <spi_flash_read_byte>
 8008594:	4603      	mov	r3, r0
 8008596:	461a      	mov	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();  // 读取第六个ID
 800859c:	f7ff fee8 	bl	8008370 <spi_flash_read_byte>
 80085a0:	4603      	mov	r3, r0
 80085a2:	461a      	mov	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();  // 取消选择芯片
 80085a8:	f7ff fe0e 	bl	80081c8 <spi_flash_deselect_chip>
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <spi_flash_chip_init>:

// SPI Flash 初始化
static void spi_flash_chip_init(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
    if(spi_conf.die_select_type) {
 80085b8:	4b19      	ldr	r3, [pc, #100]	; (8008620 <spi_flash_chip_init+0x6c>)
 80085ba:	7a9b      	ldrb	r3, [r3, #10]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d019      	beq.n	80085f4 <spi_flash_chip_init+0x40>
        spi_flash_select_die_cmd(0);  // 选择第一个芯片
 80085c0:	2000      	movs	r0, #0
 80085c2:	f7ff ff5f 	bl	8008484 <spi_flash_select_die_cmd>
        if(spi_conf.mode_data != UNDEFINED_CMD)
 80085c6:	4b16      	ldr	r3, [pc, #88]	; (8008620 <spi_flash_chip_init+0x6c>)
 80085c8:	791b      	ldrb	r3, [r3, #4]
 80085ca:	2bff      	cmp	r3, #255	; 0xff
 80085cc:	d005      	beq.n	80085da <spi_flash_chip_init+0x26>
            spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 80085ce:	4b14      	ldr	r3, [pc, #80]	; (8008620 <spi_flash_chip_init+0x6c>)
 80085d0:	791b      	ldrb	r3, [r3, #4]
 80085d2:	4619      	mov	r1, r3
 80085d4:	20b0      	movs	r0, #176	; 0xb0
 80085d6:	f7ff fed3 	bl	8008380 <spi_flash_set_feature>
        if(spi_conf.unlock_data != UNDEFINED_CMD)
 80085da:	4b11      	ldr	r3, [pc, #68]	; (8008620 <spi_flash_chip_init+0x6c>)
 80085dc:	795b      	ldrb	r3, [r3, #5]
 80085de:	2bff      	cmp	r3, #255	; 0xff
 80085e0:	d005      	beq.n	80085ee <spi_flash_chip_init+0x3a>
            spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 80085e2:	4b0f      	ldr	r3, [pc, #60]	; (8008620 <spi_flash_chip_init+0x6c>)
 80085e4:	795b      	ldrb	r3, [r3, #5]
 80085e6:	4619      	mov	r1, r3
 80085e8:	20a0      	movs	r0, #160	; 0xa0
 80085ea:	f7ff fec9 	bl	8008380 <spi_flash_set_feature>
        spi_flash_select_die_cmd(1);  // 选择第二个芯片
 80085ee:	2001      	movs	r0, #1
 80085f0:	f7ff ff48 	bl	8008484 <spi_flash_select_die_cmd>
    }
    if(spi_conf.mode_data != UNDEFINED_CMD)
 80085f4:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <spi_flash_chip_init+0x6c>)
 80085f6:	791b      	ldrb	r3, [r3, #4]
 80085f8:	2bff      	cmp	r3, #255	; 0xff
 80085fa:	d005      	beq.n	8008608 <spi_flash_chip_init+0x54>
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 80085fc:	4b08      	ldr	r3, [pc, #32]	; (8008620 <spi_flash_chip_init+0x6c>)
 80085fe:	791b      	ldrb	r3, [r3, #4]
 8008600:	4619      	mov	r1, r3
 8008602:	20b0      	movs	r0, #176	; 0xb0
 8008604:	f7ff febc 	bl	8008380 <spi_flash_set_feature>
    if(spi_conf.unlock_data != UNDEFINED_CMD)
 8008608:	4b05      	ldr	r3, [pc, #20]	; (8008620 <spi_flash_chip_init+0x6c>)
 800860a:	795b      	ldrb	r3, [r3, #5]
 800860c:	2bff      	cmp	r3, #255	; 0xff
 800860e:	d005      	beq.n	800861c <spi_flash_chip_init+0x68>
        spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 8008610:	4b03      	ldr	r3, [pc, #12]	; (8008620 <spi_flash_chip_init+0x6c>)
 8008612:	795b      	ldrb	r3, [r3, #5]
 8008614:	4619      	mov	r1, r3
 8008616:	20a0      	movs	r0, #160	; 0xa0
 8008618:	f7ff feb2 	bl	8008380 <spi_flash_set_feature>
}
 800861c:	bf00      	nop
 800861e:	bd80      	pop	{r7, pc}
 8008620:	2000515c 	.word	0x2000515c

08008624 <spi_flash_write_enable>:

// 启用 Flash 的写入使能
static void spi_flash_write_enable()
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
    spi_flash_select_chip();  // 选择 Flash 芯片
 8008628:	f7ff fdc2 	bl	80081b0 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_WRITE_ENABLE);  // 发送写使能指令
 800862c:	2006      	movs	r0, #6
 800862e:	f7ff fe7f 	bl	8008330 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择芯片
 8008632:	f7ff fdc9 	bl	80081c8 <spi_flash_deselect_chip>
}
 8008636:	bf00      	nop
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <spi_flash_program_load>:

// 向 Flash 写入数据
static void spi_flash_program_load(uint8_t *buf, uint32_t page_size, uint32_t page)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t addr = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	613b      	str	r3, [r7, #16]
    spi_flash_select_chip();  // 选择 Flash 芯片
 800864c:	f7ff fdb0 	bl	80081b0 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_LOAD_SINGLE);  // 发送写入数据的指令
 8008650:	2002      	movs	r0, #2
 8008652:	f7ff fe6d 	bl	8008330 <spi_flash_send_byte>

    if(spi_conf.plane_select_have) {
 8008656:	4b1f      	ldr	r3, [pc, #124]	; (80086d4 <spi_flash_program_load+0x98>)
 8008658:	7a5b      	ldrb	r3, [r3, #9]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d018      	beq.n	8008690 <spi_flash_program_load+0x54>
        if((page >> 6)& (0x1))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d009      	beq.n	800867c <spi_flash_program_load+0x40>
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) | (0x10));  // 发送地址的第二个字节
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	0a1b      	lsrs	r3, r3, #8
 800866c:	b2db      	uxtb	r3, r3
 800866e:	f043 0310 	orr.w	r3, r3, #16
 8008672:	b2db      	uxtb	r3, r3
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff fe5b 	bl	8008330 <spi_flash_send_byte>
 800867a:	e00f      	b.n	800869c <spi_flash_program_load+0x60>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) & (0xef));  // 发送地址的第二个字节
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	0a1b      	lsrs	r3, r3, #8
 8008680:	b2db      	uxtb	r3, r3
 8008682:	f023 0310 	bic.w	r3, r3, #16
 8008686:	b2db      	uxtb	r3, r3
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff fe51 	bl	8008330 <spi_flash_send_byte>
 800868e:	e005      	b.n	800869c <spi_flash_program_load+0x60>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(addr));  // 发送地址的第二个字节
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	0a1b      	lsrs	r3, r3, #8
 8008694:	b2db      	uxtb	r3, r3
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff fe4a 	bl	8008330 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(addr));  // 发送地址的第一个字节
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff fe45 	bl	8008330 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
 80086aa:	e009      	b.n	80086c0 <spi_flash_program_load+0x84>
        spi_flash_send_byte(buf[i]);  // 逐字节写入数据
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	4413      	add	r3, r2
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff fe3b 	bl	8008330 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	3301      	adds	r3, #1
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d3f1      	bcc.n	80086ac <spi_flash_program_load+0x70>

    spi_flash_deselect_chip();  // 取消选择芯片
 80086c8:	f7ff fd7e 	bl	80081c8 <spi_flash_deselect_chip>
}
 80086cc:	bf00      	nop
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	2000515c 	.word	0x2000515c

080086d8 <spi_flash_write_page_async>:

// 异步写入页面数据到闪存
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 80086e4:	68b8      	ldr	r0, [r7, #8]
 80086e6:	f7ff ff05 	bl	80084f4 <spi_flash_select_die>

    spi_flash_program_load(buf, page_size, page);  // 加载数据到写入缓冲区
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f7ff ffa4 	bl	800863c <spi_flash_program_load>

    spi_flash_write_enable();  // 使能写入
 80086f4:	f7ff ff96 	bl	8008624 <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 80086f8:	f7ff fd5a 	bl	80081b0 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_EXECUTE);  // 发送写入执行命令
 80086fc:	2010      	movs	r0, #16
 80086fe:	f7ff fe17 	bl	8008330 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_WRITE;  // 记录上一次操作为写入
 8008702:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <spi_flash_write_page_async+0x60>)
 8008704:	2202      	movs	r2, #2
 8008706:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	0c1b      	lsrs	r3, r3, #16
 800870c:	b2db      	uxtb	r3, r3
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff fe0e 	bl	8008330 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	0a1b      	lsrs	r3, r3, #8
 8008718:	b2db      	uxtb	r3, r3
 800871a:	4618      	mov	r0, r3
 800871c:	f7ff fe08 	bl	8008330 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	b2db      	uxtb	r3, r3
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fe03 	bl	8008330 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 800872a:	f7ff fd4d 	bl	80081c8 <spi_flash_deselect_chip>
    // spi_flash_wait_operation_end();  // 等待操作结束

    // spi_flash_write_disable();  // 禁用写入
}
 800872e:	bf00      	nop
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	2000516c 	.word	0x2000516c

0800873c <spi_flash_load_page_into_cache>:

// 将页面数据加载到缓存中
static uint32_t spi_flash_load_page_into_cache(uint32_t page)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff fed5 	bl	80084f4 <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 800874a:	f7ff fd31 	bl	80081b0 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 800874e:	2013      	movs	r0, #19
 8008750:	f7ff fdee 	bl	8008330 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_READ;  // 记录上一次操作为读取
 8008754:	4b0e      	ldr	r3, [pc, #56]	; (8008790 <spi_flash_load_page_into_cache+0x54>)
 8008756:	2203      	movs	r2, #3
 8008758:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	0c1b      	lsrs	r3, r3, #16
 800875e:	b2db      	uxtb	r3, r3
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff fde5 	bl	8008330 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	0a1b      	lsrs	r3, r3, #8
 800876a:	b2db      	uxtb	r3, r3
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff fddf 	bl	8008330 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	b2db      	uxtb	r3, r3
 8008776:	4618      	mov	r0, r3
 8008778:	f7ff fdda 	bl	8008330 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 800877c:	f7ff fd24 	bl	80081c8 <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8008780:	f7ff fe34 	bl	80083ec <spi_flash_read_status>
 8008784:	4603      	mov	r3, r0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	2000516c 	.word	0x2000516c

08008794 <spi_flash_read_page>:

// 读取页面数据
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t data_size)
{
 8008794:	b590      	push	{r4, r7, lr}
 8008796:	b089      	sub	sp, #36	; 0x24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
    uint32_t status = spi_flash_load_page_into_cache(page);  // 将页面数据加载到缓存中
 80087a0:	68b8      	ldr	r0, [r7, #8]
 80087a2:	f7ff ffcb 	bl	800873c <spi_flash_load_page_into_cache>
 80087a6:	61b8      	str	r0, [r7, #24]
    uint32_t data_offset = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	617b      	str	r3, [r7, #20]

    spi_flash_select_chip();  // 选择闪存芯片
 80087ac:	f7ff fd00 	bl	80081b0 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 80087b0:	2003      	movs	r0, #3
 80087b2:	f7ff fdbd 	bl	8008330 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 80087b6:	4b27      	ldr	r3, [pc, #156]	; (8008854 <spi_flash_read_page+0xc0>)
 80087b8:	7a1b      	ldrb	r3, [r3, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <spi_flash_read_page+0x30>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 80087be:	20ff      	movs	r0, #255	; 0xff
 80087c0:	f7ff fdb6 	bl	8008330 <spi_flash_send_byte>

    if (spi_conf.plane_select_have) {
 80087c4:	4b23      	ldr	r3, [pc, #140]	; (8008854 <spi_flash_read_page+0xc0>)
 80087c6:	7a5b      	ldrb	r3, [r3, #9]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d018      	beq.n	80087fe <spi_flash_read_page+0x6a>
        if ((page >> 6) & (0x1))
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d009      	beq.n	80087ea <spi_flash_read_page+0x56>
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) | (0x10));  // 发送地址的第二个周期
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	0a1b      	lsrs	r3, r3, #8
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f043 0310 	orr.w	r3, r3, #16
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff fda4 	bl	8008330 <spi_flash_send_byte>
 80087e8:	e00f      	b.n	800880a <spi_flash_read_page+0x76>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) & (0xef));  // 发送地址的第二个周期
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	0a1b      	lsrs	r3, r3, #8
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	f023 0310 	bic.w	r3, r3, #16
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7ff fd9a 	bl	8008330 <spi_flash_send_byte>
 80087fc:	e005      	b.n	800880a <spi_flash_read_page+0x76>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset));  // 发送地址的第二个周期
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	0a1b      	lsrs	r3, r3, #8
 8008802:	b2db      	uxtb	r3, r3
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff fd93 	bl	8008330 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(data_offset));  // 发送地址的第一个周期
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff fd8e 	bl	8008330 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 8008814:	4b0f      	ldr	r3, [pc, #60]	; (8008854 <spi_flash_read_page+0xc0>)
 8008816:	7a1b      	ldrb	r3, [r3, #8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <spi_flash_read_page+0x8e>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 800881c:	20ff      	movs	r0, #255	; 0xff
 800881e:	f7ff fd87 	bl	8008330 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 8008822:	2300      	movs	r3, #0
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	e009      	b.n	800883c <spi_flash_read_page+0xa8>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	18d4      	adds	r4, r2, r3
 800882e:	f7ff fd9f 	bl	8008370 <spi_flash_read_byte>
 8008832:	4603      	mov	r3, r0
 8008834:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	3301      	adds	r3, #1
 800883a:	61fb      	str	r3, [r7, #28]
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	429a      	cmp	r2, r3
 8008842:	d3f1      	bcc.n	8008828 <spi_flash_read_page+0x94>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8008844:	f7ff fcc0 	bl	80081c8 <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8008848:	69bb      	ldr	r3, [r7, #24]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3724      	adds	r7, #36	; 0x24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd90      	pop	{r4, r7, pc}
 8008852:	bf00      	nop
 8008854:	2000515c 	.word	0x2000515c

08008858 <spi_flash_read_spare_data>:

// 读取备用数据
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 8008858:	b590      	push	{r4, r7, lr}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
    uint32_t status;

    spi_flash_select_die(page);  // 选择闪存芯片
 8008866:	68b8      	ldr	r0, [r7, #8]
 8008868:	f7ff fe44 	bl	80084f4 <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 800886c:	f7ff fca0 	bl	80081b0 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 8008870:	2013      	movs	r0, #19
 8008872:	f7ff fd5d 	bl	8008330 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_SPARE;  // 记录上一次操作为备用
 8008876:	4b38      	ldr	r3, [pc, #224]	; (8008958 <spi_flash_read_spare_data+0x100>)
 8008878:	2204      	movs	r2, #4
 800887a:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	0c1b      	lsrs	r3, r3, #16
 8008880:	b2db      	uxtb	r3, r3
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff fd54 	bl	8008330 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	0a1b      	lsrs	r3, r3, #8
 800888c:	b2db      	uxtb	r3, r3
 800888e:	4618      	mov	r0, r3
 8008890:	f7ff fd4e 	bl	8008330 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	b2db      	uxtb	r3, r3
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff fd49 	bl	8008330 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 800889e:	f7ff fc93 	bl	80081c8 <spi_flash_deselect_chip>
    status = spi_flash_read_status();  // 读取状态寄存器的值
 80088a2:	f7ff fda3 	bl	80083ec <spi_flash_read_status>
 80088a6:	6138      	str	r0, [r7, #16]

    spi_flash_select_chip();  // 选择闪存芯片
 80088a8:	f7ff fc82 	bl	80081b0 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 80088ac:	2003      	movs	r0, #3
 80088ae:	f7ff fd3f 	bl	8008330 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 80088b2:	4b2a      	ldr	r3, [pc, #168]	; (800895c <spi_flash_read_spare_data+0x104>)
 80088b4:	7a1b      	ldrb	r3, [r3, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <spi_flash_read_spare_data+0x68>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 80088ba:	20ff      	movs	r0, #255	; 0xff
 80088bc:	f7ff fd38 	bl	8008330 <spi_flash_send_byte>

    offset += spi_conf.spare_offset;
 80088c0:	4b26      	ldr	r3, [pc, #152]	; (800895c <spi_flash_read_spare_data+0x104>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	4413      	add	r3, r2
 80088c8:	607b      	str	r3, [r7, #4]
    if (spi_conf.plane_select_have) {
 80088ca:	4b24      	ldr	r3, [pc, #144]	; (800895c <spi_flash_read_spare_data+0x104>)
 80088cc:	7a5b      	ldrb	r3, [r3, #9]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d018      	beq.n	8008904 <spi_flash_read_spare_data+0xac>
        if ((page >> 6) & (0x1))
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d009      	beq.n	80088f0 <spi_flash_read_spare_data+0x98>
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) | (0x10));  // 发送地址的第二个周期
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	0a1b      	lsrs	r3, r3, #8
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	f043 0310 	orr.w	r3, r3, #16
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7ff fd21 	bl	8008330 <spi_flash_send_byte>
 80088ee:	e00f      	b.n	8008910 <spi_flash_read_spare_data+0xb8>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) & (0xef));  // 发送地址的第二个周期
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	0a1b      	lsrs	r3, r3, #8
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	f023 0310 	bic.w	r3, r3, #16
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff fd17 	bl	8008330 <spi_flash_send_byte>
 8008902:	e005      	b.n	8008910 <spi_flash_read_spare_data+0xb8>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(offset));  // 发送地址的第二个周期
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	0a1b      	lsrs	r3, r3, #8
 8008908:	b2db      	uxtb	r3, r3
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff fd10 	bl	8008330 <spi_flash_send_byte>
    }
    spi_flash_send_byte(ADDR_1st_CYCLE(offset));  // 发送地址的第一个周期
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff fd0b 	bl	8008330 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 800891a:	4b10      	ldr	r3, [pc, #64]	; (800895c <spi_flash_read_spare_data+0x104>)
 800891c:	7a1b      	ldrb	r3, [r3, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d102      	bne.n	8008928 <spi_flash_read_spare_data+0xd0>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 8008922:	20ff      	movs	r0, #255	; 0xff
 8008924:	f7ff fd04 	bl	8008330 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 8008928:	2300      	movs	r3, #0
 800892a:	617b      	str	r3, [r7, #20]
 800892c:	e009      	b.n	8008942 <spi_flash_read_spare_data+0xea>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	18d4      	adds	r4, r2, r3
 8008934:	f7ff fd1c 	bl	8008370 <spi_flash_read_byte>
 8008938:	4603      	mov	r3, r0
 800893a:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	3301      	adds	r3, #1
 8008940:	617b      	str	r3, [r7, #20]
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	429a      	cmp	r2, r3
 8008948:	d3f1      	bcc.n	800892e <spi_flash_read_spare_data+0xd6>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 800894a:	f7ff fc3d 	bl	80081c8 <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 800894e:	693b      	ldr	r3, [r7, #16]
}
 8008950:	4618      	mov	r0, r3
 8008952:	371c      	adds	r7, #28
 8008954:	46bd      	mov	sp, r7
 8008956:	bd90      	pop	{r4, r7, pc}
 8008958:	2000516c 	.word	0x2000516c
 800895c:	2000515c 	.word	0x2000515c

08008960 <spi_flash_erase_block>:

// 擦除块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff fdc3 	bl	80084f4 <spi_flash_select_die>

    spi_flash_write_enable();  // 使能写入
 800896e:	f7ff fe59 	bl	8008624 <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 8008972:	f7ff fc1d 	bl	80081b0 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_BLOCK_ERASE);  // 发送块擦除命令
 8008976:	20d8      	movs	r0, #216	; 0xd8
 8008978:	f7ff fcda 	bl	8008330 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_ERASE;  // 记录上一次操作为擦除
 800897c:	4b0e      	ldr	r3, [pc, #56]	; (80089b8 <spi_flash_erase_block+0x58>)
 800897e:	2201      	movs	r2, #1
 8008980:	601a      	str	r2, [r3, #0]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	0c1b      	lsrs	r3, r3, #16
 8008986:	b2db      	uxtb	r3, r3
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff fcd1 	bl	8008330 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	0a1b      	lsrs	r3, r3, #8
 8008992:	b2db      	uxtb	r3, r3
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff fccb 	bl	8008330 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff fcc6 	bl	8008330 <spi_flash_send_byte>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 80089a4:	f7ff fc10 	bl	80081c8 <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 80089a8:	f7ff fd20 	bl	80083ec <spi_flash_read_status>
 80089ac:	4603      	mov	r3, r0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	2000516c 	.word	0x2000516c

080089bc <spi_flash_is_bb_supported>:

// 检查是否支持坏块检测
static inline bool spi_flash_is_bb_supported()
{
 80089bc:	b480      	push	{r7}
 80089be:	af00      	add	r7, sp, #0
    return true;
 80089c0:	2301      	movs	r3, #1
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bc80      	pop	{r7}
 80089c8:	4770      	bx	lr
	...

080089cc <spi_flash_gpio_init>:

SPI_HandleTypeDef hspi1; //SPI 句柄

// 初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_init(SPI_HandleTypeDef* spiHandle)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b088      	sub	sp, #32
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d4:	f107 0310 	add.w	r3, r7, #16
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	605a      	str	r2, [r3, #4]
 80089de:	609a      	str	r2, [r3, #8]
 80089e0:	60da      	str	r2, [r3, #12]
	  if(spiHandle->Instance==SPI1)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a1f      	ldr	r2, [pc, #124]	; (8008a64 <spi_flash_gpio_init+0x98>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d137      	bne.n	8008a5c <spi_flash_gpio_init+0x90>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */

	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 80089ec:	4b1e      	ldr	r3, [pc, #120]	; (8008a68 <spi_flash_gpio_init+0x9c>)
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	4a1d      	ldr	r2, [pc, #116]	; (8008a68 <spi_flash_gpio_init+0x9c>)
 80089f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80089f6:	6193      	str	r3, [r2, #24]
 80089f8:	4b1b      	ldr	r3, [pc, #108]	; (8008a68 <spi_flash_gpio_init+0x9c>)
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a04:	4b18      	ldr	r3, [pc, #96]	; (8008a68 <spi_flash_gpio_init+0x9c>)
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	4a17      	ldr	r2, [pc, #92]	; (8008a68 <spi_flash_gpio_init+0x9c>)
 8008a0a:	f043 0304 	orr.w	r3, r3, #4
 8008a0e:	6193      	str	r3, [r2, #24]
 8008a10:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <spi_flash_gpio_init+0x9c>)
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	60bb      	str	r3, [r7, #8]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_CS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8008a1c:	23a0      	movs	r3, #160	; 0xa0
 8008a1e:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a20:	2302      	movs	r3, #2
 8008a22:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008a24:	2303      	movs	r3, #3
 8008a26:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a28:	f107 0310 	add.w	r3, r7, #16
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	480f      	ldr	r0, [pc, #60]	; (8008a6c <spi_flash_gpio_init+0xa0>)
 8008a30:	f001 fa74 	bl	8009f1c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8008a34:	2340      	movs	r3, #64	; 0x40
 8008a36:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8008a40:	f107 0310 	add.w	r3, r7, #16
 8008a44:	4619      	mov	r1, r3
 8008a46:	4809      	ldr	r0, [pc, #36]	; (8008a6c <spi_flash_gpio_init+0xa0>)
 8008a48:	f001 fa68 	bl	8009f1c <HAL_GPIO_Init>

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2100      	movs	r1, #0
 8008a50:	2023      	movs	r0, #35	; 0x23
 8008a52:	f000 fde6 	bl	8009622 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8008a56:	2023      	movs	r0, #35	; 0x23
 8008a58:	f000 fdff 	bl	800965a <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */

	  /* USER CODE END SPI1_MspInit 1 */
	  }
}
 8008a5c:	bf00      	nop
 8008a5e:	3720      	adds	r7, #32
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	40013000 	.word	0x40013000
 8008a68:	40021000 	.word	0x40021000
 8008a6c:	40010800 	.word	0x40010800

08008a70 <spi_flash_gpio_uninit>:

// 取消初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_uninit(SPI_HandleTypeDef* spiHandle)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
	  if(spiHandle->Instance==SPI1)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a09      	ldr	r2, [pc, #36]	; (8008aa4 <spi_flash_gpio_uninit+0x34>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d10c      	bne.n	8008a9c <spi_flash_gpio_uninit+0x2c>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 8008a82:	4b09      	ldr	r3, [pc, #36]	; (8008aa8 <spi_flash_gpio_uninit+0x38>)
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	4a08      	ldr	r2, [pc, #32]	; (8008aa8 <spi_flash_gpio_uninit+0x38>)
 8008a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a8c:	6193      	str	r3, [r2, #24]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8008a8e:	21e0      	movs	r1, #224	; 0xe0
 8008a90:	4806      	ldr	r0, [pc, #24]	; (8008aac <spi_flash_gpio_uninit+0x3c>)
 8008a92:	f001 fbd7 	bl	800a244 <HAL_GPIO_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8008a96:	2023      	movs	r0, #35	; 0x23
 8008a98:	f000 fded 	bl	8009676 <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	40013000 	.word	0x40013000
 8008aa8:	40021000 	.word	0x40021000
 8008aac:	40010800 	.word	0x40010800

08008ab0 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	af00      	add	r7, sp, #0
   	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2110      	movs	r1, #16
 8008ab8:	4802      	ldr	r0, [pc, #8]	; (8008ac4 <spi_flash_select_chip+0x14>)
 8008aba:	f001 fc8f 	bl	800a3dc <HAL_GPIO_WritePin>
}
 8008abe:	bf00      	nop
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	40010800 	.word	0x40010800

08008ac8 <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8008acc:	2201      	movs	r2, #1
 8008ace:	2110      	movs	r1, #16
 8008ad0:	4802      	ldr	r0, [pc, #8]	; (8008adc <spi_flash_deselect_chip+0x14>)
 8008ad2:	f001 fc83 	bl	800a3dc <HAL_GPIO_WritePin>
}
 8008ad6:	bf00      	nop
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	40010800 	.word	0x40010800

08008ae0 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 8008ae8:	4b1e      	ldr	r3, [pc, #120]	; (8008b64 <spi_flash_get_baud_rate_prescaler+0x84>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a1e      	ldr	r2, [pc, #120]	; (8008b68 <spi_flash_get_baud_rate_prescaler+0x88>)
 8008aee:	fba2 2303 	umull	r2, r3, r2, r3
 8008af2:	099b      	lsrs	r3, r3, #6
 8008af4:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	085b      	lsrs	r3, r3, #1
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d301      	bcc.n	8008b04 <spi_flash_get_baud_rate_prescaler+0x24>
         return SPI_BAUDRATEPRESCALER_2;
 8008b00:	2300      	movs	r3, #0
 8008b02:	e02a      	b.n	8008b5a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	089b      	lsrs	r3, r3, #2
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d301      	bcc.n	8008b12 <spi_flash_get_baud_rate_prescaler+0x32>
         return SPI_BAUDRATEPRESCALER_4;
 8008b0e:	2308      	movs	r3, #8
 8008b10:	e023      	b.n	8008b5a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	08db      	lsrs	r3, r3, #3
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d301      	bcc.n	8008b20 <spi_flash_get_baud_rate_prescaler+0x40>
         return SPI_BAUDRATEPRESCALER_8;
 8008b1c:	2310      	movs	r3, #16
 8008b1e:	e01c      	b.n	8008b5a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	091b      	lsrs	r3, r3, #4
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d301      	bcc.n	8008b2e <spi_flash_get_baud_rate_prescaler+0x4e>
         return SPI_BAUDRATEPRESCALER_16;
 8008b2a:	2318      	movs	r3, #24
 8008b2c:	e015      	b.n	8008b5a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d301      	bcc.n	8008b3c <spi_flash_get_baud_rate_prescaler+0x5c>
         return SPI_BAUDRATEPRESCALER_32;
 8008b38:	2320      	movs	r3, #32
 8008b3a:	e00e      	b.n	8008b5a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	099b      	lsrs	r3, r3, #6
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d301      	bcc.n	8008b4a <spi_flash_get_baud_rate_prescaler+0x6a>
          return SPI_BAUDRATEPRESCALER_64;
 8008b46:	2328      	movs	r3, #40	; 0x28
 8008b48:	e007      	b.n	8008b5a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	09db      	lsrs	r3, r3, #7
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d301      	bcc.n	8008b58 <spi_flash_get_baud_rate_prescaler+0x78>
          return SPI_BAUDRATEPRESCALER_128;
 8008b54:	2330      	movs	r3, #48	; 0x30
 8008b56:	e000      	b.n	8008b5a <spi_flash_get_baud_rate_prescaler+0x7a>
    else
          return SPI_BAUDRATEPRESCALER_256;
 8008b58:	2338      	movs	r3, #56	; 0x38
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bc80      	pop	{r7}
 8008b62:	4770      	bx	lr
 8008b64:	20000138 	.word	0x20000138
 8008b68:	10624dd3 	.word	0x10624dd3

08008b6c <spi_flash_init>:

// 初始化SPI Flash
static int spi_flash_init(void *conf, uint32_t conf_size)
{
 8008b6c:	b590      	push	{r4, r7, lr}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(spi_conf_t))
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b0c      	cmp	r3, #12
 8008b7a:	d802      	bhi.n	8008b82 <spi_flash_init+0x16>
        return -1;
 8008b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b80:	e046      	b.n	8008c10 <spi_flash_init+0xa4>

    spi_conf = *(spi_conf_t *)conf;
 8008b82:	4b25      	ldr	r3, [pc, #148]	; (8008c18 <spi_flash_init+0xac>)
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	4614      	mov	r4, r2
 8008b88:	6820      	ldr	r0, [r4, #0]
 8008b8a:	6861      	ldr	r1, [r4, #4]
 8008b8c:	68a2      	ldr	r2, [r4, #8]
 8008b8e:	c307      	stmia	r3!, {r0, r1, r2}
 8008b90:	7b22      	ldrb	r2, [r4, #12]
 8008b92:	701a      	strb	r2, [r3, #0]

    spi_flash_gpio_init(&hspi1);
 8008b94:	4821      	ldr	r0, [pc, #132]	; (8008c1c <spi_flash_init+0xb0>)
 8008b96:	f7ff ff19 	bl	80089cc <spi_flash_gpio_init>

    spi_flash_deselect_chip();
 8008b9a:	f7ff ff95 	bl	8008ac8 <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Instance = SPI1;
 8008b9e:	4b1f      	ldr	r3, [pc, #124]	; (8008c1c <spi_flash_init+0xb0>)
 8008ba0:	4a1f      	ldr	r2, [pc, #124]	; (8008c20 <spi_flash_init+0xb4>)
 8008ba2:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8008ba4:	4b1d      	ldr	r3, [pc, #116]	; (8008c1c <spi_flash_init+0xb0>)
 8008ba6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008baa:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008bac:	4b1b      	ldr	r3, [pc, #108]	; (8008c1c <spi_flash_init+0xb0>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008bb2:	4b1a      	ldr	r3, [pc, #104]	; (8008c1c <spi_flash_init+0xb0>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008bb8:	4b18      	ldr	r3, [pc, #96]	; (8008c1c <spi_flash_init+0xb0>)
 8008bba:	2202      	movs	r2, #2
 8008bbc:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008bbe:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <spi_flash_init+0xb0>)
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8008bc4:	4b15      	ldr	r3, [pc, #84]	; (8008c1c <spi_flash_init+0xb0>)
 8008bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bca:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler =
    	spi_flash_get_baud_rate_prescaler(spi_conf.freq);
 8008bcc:	4b12      	ldr	r3, [pc, #72]	; (8008c18 <spi_flash_init+0xac>)
 8008bce:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff ff84 	bl	8008ae0 <spi_flash_get_baud_rate_prescaler>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	461a      	mov	r2, r3
    hspi1.Init.BaudRatePrescaler =
 8008bdc:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <spi_flash_init+0xb0>)
 8008bde:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008be0:	4b0e      	ldr	r3, [pc, #56]	; (8008c1c <spi_flash_init+0xb0>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008be6:	4b0d      	ldr	r3, [pc, #52]	; (8008c1c <spi_flash_init+0xb0>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bec:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <spi_flash_init+0xb0>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <spi_flash_init+0xb0>)
 8008bf4:	220a      	movs	r2, #10
 8008bf6:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(&hspi1)  ;
 8008bf8:	4808      	ldr	r0, [pc, #32]	; (8008c1c <spi_flash_init+0xb0>)
 8008bfa:	f004 fc62 	bl	800d4c2 <HAL_SPI_Init>

    /* Enable SPI */
    __HAL_SPI_ENABLE(&hspi1);
 8008bfe:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <spi_flash_init+0xb0>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <spi_flash_init+0xb0>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c0c:	601a      	str	r2, [r3, #0]

    return 0;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd90      	pop	{r4, r7, pc}
 8008c18:	20005174 	.word	0x20005174
 8008c1c:	20005184 	.word	0x20005184
 8008c20:	40013000 	.word	0x40013000

08008c24 <spi_flash_uninit>:

// 取消初始化SPI Flash
static void spi_flash_uninit()
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit(&hspi1);
 8008c28:	4806      	ldr	r0, [pc, #24]	; (8008c44 <spi_flash_uninit+0x20>)
 8008c2a:	f7ff ff21 	bl	8008a70 <spi_flash_gpio_uninit>

    /* 禁用SPI */
    __HAL_SPI_DISABLE(&hspi1);
 8008c2e:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <spi_flash_uninit+0x20>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	4b03      	ldr	r3, [pc, #12]	; (8008c44 <spi_flash_uninit+0x20>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c3c:	601a      	str	r2, [r3, #0]
}
 8008c3e:	bf00      	nop
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20005184 	.word	0x20005184

08008c48 <spi_flash_send_byte>:

// 发送一个字节到SPI Flash并返回接收到的字节
static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	71fb      	strb	r3, [r7, #7]
	uint8_t RxData;
 	uint8_t TxData=byte;
 8008c52:	79fb      	ldrb	r3, [r7, #7]
 8008c54:	73bb      	strb	r3, [r7, #14]

    HAL_SPI_TransmitReceive_IT(&hspi1,&TxData,&RxData,1);
 8008c56:	f107 020f 	add.w	r2, r7, #15
 8008c5a:	f107 010e 	add.w	r1, r7, #14
 8008c5e:	2301      	movs	r3, #1
 8008c60:	4803      	ldr	r0, [pc, #12]	; (8008c70 <spi_flash_send_byte+0x28>)
 8008c62:	f004 fe8b 	bl	800d97c <HAL_SPI_TransmitReceive_IT>

 	return RxData;
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20005184 	.word	0x20005184

08008c74 <spi_flash_read_byte>:

// 从SPI Flash中读取一个字节
static inline uint8_t spi_flash_read_byte()
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8008c78:	20a5      	movs	r0, #165	; 0xa5
 8008c7a:	f7ff ffe5 	bl	8008c48 <spi_flash_send_byte>
 8008c7e:	4603      	mov	r3, r0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
    uint8_t status;
    uint32_t flash_status = FLASH_READY;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	607b      	str	r3, [r7, #4]

    spi_flash_select_chip();
 8008c8e:	f7ff ff0f 	bl	8008ab0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.status_cmd);
 8008c92:	4b16      	ldr	r3, [pc, #88]	; (8008cec <spi_flash_read_status+0x68>)
 8008c94:	799b      	ldrb	r3, [r3, #6]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff ffd6 	bl	8008c48 <spi_flash_send_byte>

    status = spi_flash_read_byte();
 8008c9c:	f7ff ffea 	bl	8008c74 <spi_flash_read_byte>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	70fb      	strb	r3, [r7, #3]

    if (spi_conf.busy_state == 1 && (status & (1 << spi_conf.busy_bit)))
 8008ca4:	4b11      	ldr	r3, [pc, #68]	; (8008cec <spi_flash_read_status+0x68>)
 8008ca6:	7a1b      	ldrb	r3, [r3, #8]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d10a      	bne.n	8008cc2 <spi_flash_read_status+0x3e>
 8008cac:	78fb      	ldrb	r3, [r7, #3]
 8008cae:	4a0f      	ldr	r2, [pc, #60]	; (8008cec <spi_flash_read_status+0x68>)
 8008cb0:	79d2      	ldrb	r2, [r2, #7]
 8008cb2:	4113      	asrs	r3, r2
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <spi_flash_read_status+0x3e>
        flash_status = FLASH_BUSY;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	607b      	str	r3, [r7, #4]
 8008cc0:	e00d      	b.n	8008cde <spi_flash_read_status+0x5a>
    else if (spi_conf.busy_state == 0 && !(status & (1 << spi_conf.busy_bit)))
 8008cc2:	4b0a      	ldr	r3, [pc, #40]	; (8008cec <spi_flash_read_status+0x68>)
 8008cc4:	7a1b      	ldrb	r3, [r3, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d109      	bne.n	8008cde <spi_flash_read_status+0x5a>
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	4a07      	ldr	r2, [pc, #28]	; (8008cec <spi_flash_read_status+0x68>)
 8008cce:	79d2      	ldrb	r2, [r2, #7]
 8008cd0:	4113      	asrs	r3, r2
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <spi_flash_read_status+0x5a>
        flash_status = FLASH_BUSY;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	607b      	str	r3, [r7, #4]

    spi_flash_deselect_chip();
 8008cde:	f7ff fef3 	bl	8008ac8 <spi_flash_deselect_chip>

    return flash_status;
 8008ce2:	687b      	ldr	r3, [r7, #4]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20005174 	.word	0x20005174

08008cf0 <spi_flash_get_status>:

static uint32_t spi_flash_get_status()
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8008cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cfa:	603b      	str	r3, [r7, #0]

    status = spi_flash_read_status();
 8008cfc:	f7ff ffc2 	bl	8008c84 <spi_flash_read_status>
 8008d00:	6078      	str	r0, [r7, #4]

    /* Wait for an operation to complete or a TIMEOUT to occur */
    while (status == FLASH_BUSY && timeout)
 8008d02:	e005      	b.n	8008d10 <spi_flash_get_status+0x20>
    {
        status = spi_flash_read_status();
 8008d04:	f7ff ffbe 	bl	8008c84 <spi_flash_read_status>
 8008d08:	6078      	str	r0, [r7, #4]
        timeout --;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	603b      	str	r3, [r7, #0]
    while (status == FLASH_BUSY && timeout)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d102      	bne.n	8008d1c <spi_flash_get_status+0x2c>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1f3      	bne.n	8008d04 <spi_flash_get_status+0x14>
    }

    if (!timeout)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <spi_flash_get_status+0x36>
        status = FLASH_TIMEOUT;
 8008d22:	2302      	movs	r3, #2
 8008d24:	607b      	str	r3, [r7, #4]

    return status;
 8008d26:	687b      	ldr	r3, [r7, #4]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <spi_flash_read_id>:

static void spi_flash_read_id(chip_id_t *chip_id)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();
 8008d38:	f7ff feba 	bl	8008ab0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_id_cmd);
 8008d3c:	4b11      	ldr	r3, [pc, #68]	; (8008d84 <spi_flash_read_id+0x54>)
 8008d3e:	789b      	ldrb	r3, [r3, #2]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff ff81 	bl	8008c48 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();
 8008d46:	f7ff ff95 	bl	8008c74 <spi_flash_read_byte>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();
 8008d52:	f7ff ff8f 	bl	8008c74 <spi_flash_read_byte>
 8008d56:	4603      	mov	r3, r0
 8008d58:	461a      	mov	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();
 8008d5e:	f7ff ff89 	bl	8008c74 <spi_flash_read_byte>
 8008d62:	4603      	mov	r3, r0
 8008d64:	461a      	mov	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();
 8008d6a:	f7ff ff83 	bl	8008c74 <spi_flash_read_byte>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	461a      	mov	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	70da      	strb	r2, [r3, #3]

    spi_flash_deselect_chip();
 8008d76:	f7ff fea7 	bl	8008ac8 <spi_flash_deselect_chip>
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20005174 	.word	0x20005174

08008d88 <spi_flash_write_enable>:

static void spi_flash_write_enable()
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	af00      	add	r7, sp, #0
    if (spi_conf.write_en_cmd == UNDEFINED_CMD)
 8008d8c:	4b07      	ldr	r3, [pc, #28]	; (8008dac <spi_flash_write_enable+0x24>)
 8008d8e:	791b      	ldrb	r3, [r3, #4]
 8008d90:	2bff      	cmp	r3, #255	; 0xff
 8008d92:	d009      	beq.n	8008da8 <spi_flash_write_enable+0x20>
        return;

    spi_flash_select_chip();
 8008d94:	f7ff fe8c 	bl	8008ab0 <spi_flash_select_chip>
    spi_flash_send_byte(spi_conf.write_en_cmd);
 8008d98:	4b04      	ldr	r3, [pc, #16]	; (8008dac <spi_flash_write_enable+0x24>)
 8008d9a:	791b      	ldrb	r3, [r3, #4]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7ff ff53 	bl	8008c48 <spi_flash_send_byte>
    spi_flash_deselect_chip();
 8008da2:	f7ff fe91 	bl	8008ac8 <spi_flash_deselect_chip>
 8008da6:	e000      	b.n	8008daa <spi_flash_write_enable+0x22>
        return;
 8008da8:	bf00      	nop
}
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	20005174 	.word	0x20005174

08008db0 <spi_flash_write_page_async>:

static void spi_flash_write_page_async(uint8_t *buf, uint32_t page,
    uint32_t page_size)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
    uint32_t i;

    spi_flash_write_enable();
 8008dbc:	f7ff ffe4 	bl	8008d88 <spi_flash_write_enable>

    spi_flash_select_chip();
 8008dc0:	f7ff fe76 	bl	8008ab0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.write_cmd);
 8008dc4:	4b19      	ldr	r3, [pc, #100]	; (8008e2c <spi_flash_write_page_async+0x7c>)
 8008dc6:	78db      	ldrb	r3, [r3, #3]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7ff ff3d 	bl	8008c48 <spi_flash_send_byte>

    page = page << spi_conf.page_offset;
 8008dce:	4b17      	ldr	r3, [pc, #92]	; (8008e2c <spi_flash_write_page_async+0x7c>)
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	4093      	lsls	r3, r2
 8008dd8:	60bb      	str	r3, [r7, #8]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	0c1b      	lsrs	r3, r3, #16
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff ff31 	bl	8008c48 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	0a1b      	lsrs	r3, r3, #8
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7ff ff2b 	bl	8008c48 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff ff26 	bl	8008c48 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	e009      	b.n	8008e16 <spi_flash_write_page_async+0x66>
        spi_flash_send_byte(buf[i]);
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	4413      	add	r3, r2
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff ff1c 	bl	8008c48 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	3301      	adds	r3, #1
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d3f1      	bcc.n	8008e02 <spi_flash_write_page_async+0x52>

    spi_flash_deselect_chip();
 8008e1e:	f7ff fe53 	bl	8008ac8 <spi_flash_deselect_chip>
}
 8008e22:	bf00      	nop
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	20005174 	.word	0x20005174

08008e30 <spi_flash_read_data>:

static uint32_t spi_flash_read_data(uint8_t *buf, uint32_t page,
    uint32_t page_offset, uint32_t data_size)
{
 8008e30:	b590      	push	{r4, r7, lr}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
    uint32_t i, addr = (page << spi_conf.page_offset) + page_offset;
 8008e3e:	4b1d      	ldr	r3, [pc, #116]	; (8008eb4 <spi_flash_read_data+0x84>)
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4093      	lsls	r3, r2
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	613b      	str	r3, [r7, #16]

    spi_flash_select_chip();
 8008e4e:	f7ff fe2f 	bl	8008ab0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_cmd);
 8008e52:	4b18      	ldr	r3, [pc, #96]	; (8008eb4 <spi_flash_read_data+0x84>)
 8008e54:	785b      	ldrb	r3, [r3, #1]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7ff fef6 	bl	8008c48 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	0c1b      	lsrs	r3, r3, #16
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7ff fef0 	bl	8008c48 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	0a1b      	lsrs	r3, r3, #8
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff feea 	bl	8008c48 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7ff fee5 	bl	8008c48 <spi_flash_send_byte>

    /* AT45DB requires write of dummy byte after address */
    spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8008e7e:	20a5      	movs	r0, #165	; 0xa5
 8008e80:	f7ff fee2 	bl	8008c48 <spi_flash_send_byte>

    for (i = 0; i < data_size; i++)
 8008e84:	2300      	movs	r3, #0
 8008e86:	617b      	str	r3, [r7, #20]
 8008e88:	e009      	b.n	8008e9e <spi_flash_read_data+0x6e>
    	buf[i] = spi_flash_read_byte();
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	18d4      	adds	r4, r2, r3
 8008e90:	f7ff fef0 	bl	8008c74 <spi_flash_read_byte>
 8008e94:	4603      	mov	r3, r0
 8008e96:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < data_size; i++)
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	617b      	str	r3, [r7, #20]
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d3f1      	bcc.n	8008e8a <spi_flash_read_data+0x5a>

    spi_flash_deselect_chip();
 8008ea6:	f7ff fe0f 	bl	8008ac8 <spi_flash_deselect_chip>

    return FLASH_READY;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	371c      	adds	r7, #28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd90      	pop	{r4, r7, pc}
 8008eb4:	20005174 	.word	0x20005174

08008eb8 <spi_flash_read_page>:

static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page,
    uint32_t page_size)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
    return spi_flash_read_data(buf, page, 0, page_size);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	68b9      	ldr	r1, [r7, #8]
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f7ff ffb0 	bl	8008e30 <spi_flash_read_data>
 8008ed0:	4603      	mov	r3, r0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <spi_flash_read_spare_data>:

static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page,
    uint32_t offset, uint32_t data_size)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	607a      	str	r2, [r7, #4]
 8008ee6:	603b      	str	r3, [r7, #0]
    return FLASH_STATUS_INVALID_CMD;
 8008ee8:	2304      	movs	r3, #4
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr

08008ef4 <spi_flash_erase_block>:

static uint32_t spi_flash_erase_block(uint32_t page)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
    uint32_t addr = page << spi_conf.page_offset;
 8008efc:	4b14      	ldr	r3, [pc, #80]	; (8008f50 <spi_flash_erase_block+0x5c>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4093      	lsls	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]

    spi_flash_write_enable();
 8008f08:	f7ff ff3e 	bl	8008d88 <spi_flash_write_enable>

    spi_flash_select_chip();
 8008f0c:	f7ff fdd0 	bl	8008ab0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.erase_cmd);
 8008f10:	4b0f      	ldr	r3, [pc, #60]	; (8008f50 <spi_flash_erase_block+0x5c>)
 8008f12:	795b      	ldrb	r3, [r3, #5]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7ff fe97 	bl	8008c48 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	0c1b      	lsrs	r3, r3, #16
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7ff fe91 	bl	8008c48 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	0a1b      	lsrs	r3, r3, #8
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff fe8b 	bl	8008c48 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff fe86 	bl	8008c48 <spi_flash_send_byte>

    spi_flash_deselect_chip();
 8008f3c:	f7ff fdc4 	bl	8008ac8 <spi_flash_deselect_chip>

    return spi_flash_get_status();
 8008f40:	f7ff fed6 	bl	8008cf0 <spi_flash_get_status>
 8008f44:	4603      	mov	r3, r0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20005174 	.word	0x20005174

08008f54 <spi_flash_is_bb_supported>:

static inline bool spi_flash_is_bb_supported()
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
    return false;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc80      	pop	{r7}
 8008f60:	4770      	bx	lr
	...

08008f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008f6a:	4b15      	ldr	r3, [pc, #84]	; (8008fc0 <HAL_MspInit+0x5c>)
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	4a14      	ldr	r2, [pc, #80]	; (8008fc0 <HAL_MspInit+0x5c>)
 8008f70:	f043 0301 	orr.w	r3, r3, #1
 8008f74:	6193      	str	r3, [r2, #24]
 8008f76:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <HAL_MspInit+0x5c>)
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	60bb      	str	r3, [r7, #8]
 8008f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f82:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <HAL_MspInit+0x5c>)
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	4a0e      	ldr	r2, [pc, #56]	; (8008fc0 <HAL_MspInit+0x5c>)
 8008f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f8c:	61d3      	str	r3, [r2, #28]
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <HAL_MspInit+0x5c>)
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f96:	607b      	str	r3, [r7, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]

  /* Peripheral interrupt init */

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008f9a:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <HAL_MspInit+0x60>)
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008fa6:	60fb      	str	r3, [r7, #12]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	4a04      	ldr	r2, [pc, #16]	; (8008fc4 <HAL_MspInit+0x60>)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008fb6:	bf00      	nop
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bc80      	pop	{r7}
 8008fbe:	4770      	bx	lr
 8008fc0:	40021000 	.word	0x40021000
 8008fc4:	40010000 	.word	0x40010000

08008fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008fcc:	e7fe      	b.n	8008fcc <NMI_Handler+0x4>

08008fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008fd2:	e7fe      	b.n	8008fd2 <HardFault_Handler+0x4>

08008fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008fd8:	e7fe      	b.n	8008fd8 <MemManage_Handler+0x4>

08008fda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008fde:	e7fe      	b.n	8008fde <BusFault_Handler+0x4>

08008fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008fe4:	e7fe      	b.n	8008fe4 <UsageFault_Handler+0x4>

08008fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008fea:	bf00      	nop
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bc80      	pop	{r7}
 8008ff0:	4770      	bx	lr

08008ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ff6:	bf00      	nop
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bc80      	pop	{r7}
 8008ffc:	4770      	bx	lr

08008ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ffe:	b480      	push	{r7}
 8009000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009002:	bf00      	nop
 8009004:	46bd      	mov	sp, r7
 8009006:	bc80      	pop	{r7}
 8009008:	4770      	bx	lr

0800900a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800900e:	f000 f9c7 	bl	80093a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009012:	bf00      	nop
 8009014:	bd80      	pop	{r7, pc}

08009016 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800901a:	f003 f89d 	bl	800c158 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800901e:	bf00      	nop
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8009028:	4802      	ldr	r0, [pc, #8]	; (8009034 <RTC_IRQHandler+0x10>)
 800902a:	f004 fa01 	bl	800d430 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800902e:	bf00      	nop
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20005148 	.word	0x20005148

08009038 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800903c:	f000 fce8 	bl	8009a10 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8009040:	bf00      	nop
 8009042:	bd80      	pop	{r7, pc}

08009044 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8009048:	bf00      	nop
 800904a:	46bd      	mov	sp, r7
 800904c:	bc80      	pop	{r7}
 800904e:	4770      	bx	lr

08009050 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009054:	4802      	ldr	r0, [pc, #8]	; (8009060 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8009056:	f001 fc29 	bl	800a8ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800905a:	bf00      	nop
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20005f18 	.word	0x20005f18

08009064 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009068:	4802      	ldr	r0, [pc, #8]	; (8009074 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800906a:	f001 fc1f 	bl	800a8ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800906e:	bf00      	nop
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20005f18 	.word	0x20005f18

08009078 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800907c:	4802      	ldr	r0, [pc, #8]	; (8009088 <SPI1_IRQHandler+0x10>)
 800907e:	f004 fd11 	bl	800daa4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8009082:	bf00      	nop
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20005184 	.word	0x20005184

0800908c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009090:	4802      	ldr	r0, [pc, #8]	; (800909c <USART1_IRQHandler+0x10>)
 8009092:	f005 f8c3 	bl	800e21c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009096:	bf00      	nop
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	200051e0 	.word	0x200051e0

080090a0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80090a4:	4802      	ldr	r0, [pc, #8]	; (80090b0 <RTC_Alarm_IRQHandler+0x10>)
 80090a6:	f003 ffe7 	bl	800d078 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80090aa:	bf00      	nop
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20005148 	.word	0x20005148

080090b4 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 80090b8:	4802      	ldr	r0, [pc, #8]	; (80090c4 <FSMC_IRQHandler+0x10>)
 80090ba:	f001 f9f5 	bl	800a4a8 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 80090be:	bf00      	nop
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000c3c 	.word	0x20000c3c

080090c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090d4:	2300      	movs	r3, #0
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	e00a      	b.n	80090f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80090da:	f3af 8000 	nop.w
 80090de:	4601      	mov	r1, r0
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	60ba      	str	r2, [r7, #8]
 80090e6:	b2ca      	uxtb	r2, r1
 80090e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	3301      	adds	r3, #1
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	697a      	ldr	r2, [r7, #20]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	dbf0      	blt.n	80090da <_read+0x12>
  }

  return len;
 80090f8:	687b      	ldr	r3, [r7, #4]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <_close>:
  }
  return len;
}

int _close(int file)
{
 8009102:	b480      	push	{r7}
 8009104:	b083      	sub	sp, #12
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800910a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800910e:	4618      	mov	r0, r3
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009128:	605a      	str	r2, [r3, #4]
  return 0;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	bc80      	pop	{r7}
 8009134:	4770      	bx	lr

08009136 <_isatty>:

int _isatty(int file)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800913e:	2301      	movs	r3, #1
}
 8009140:	4618      	mov	r0, r3
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	bc80      	pop	{r7}
 8009148:	4770      	bx	lr

0800914a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800914a:	b480      	push	{r7}
 800914c:	b085      	sub	sp, #20
 800914e:	af00      	add	r7, sp, #0
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	60b9      	str	r1, [r7, #8]
 8009154:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	bc80      	pop	{r7}
 8009160:	4770      	bx	lr
	...

08009164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800916c:	4a14      	ldr	r2, [pc, #80]	; (80091c0 <_sbrk+0x5c>)
 800916e:	4b15      	ldr	r3, [pc, #84]	; (80091c4 <_sbrk+0x60>)
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009178:	4b13      	ldr	r3, [pc, #76]	; (80091c8 <_sbrk+0x64>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d102      	bne.n	8009186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009180:	4b11      	ldr	r3, [pc, #68]	; (80091c8 <_sbrk+0x64>)
 8009182:	4a12      	ldr	r2, [pc, #72]	; (80091cc <_sbrk+0x68>)
 8009184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009186:	4b10      	ldr	r3, [pc, #64]	; (80091c8 <_sbrk+0x64>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4413      	add	r3, r2
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	429a      	cmp	r2, r3
 8009192:	d207      	bcs.n	80091a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009194:	f00a fc54 	bl	8013a40 <__errno>
 8009198:	4603      	mov	r3, r0
 800919a:	220c      	movs	r2, #12
 800919c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800919e:	f04f 33ff 	mov.w	r3, #4294967295
 80091a2:	e009      	b.n	80091b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80091a4:	4b08      	ldr	r3, [pc, #32]	; (80091c8 <_sbrk+0x64>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80091aa:	4b07      	ldr	r3, [pc, #28]	; (80091c8 <_sbrk+0x64>)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4413      	add	r3, r2
 80091b2:	4a05      	ldr	r2, [pc, #20]	; (80091c8 <_sbrk+0x64>)
 80091b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80091b6:	68fb      	ldr	r3, [r7, #12]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	2000c000 	.word	0x2000c000
 80091c4:	00000800 	.word	0x00000800
 80091c8:	200051dc 	.word	0x200051dc
 80091cc:	20006578 	.word	0x20006578

080091d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80091d4:	bf00      	nop
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bc80      	pop	{r7}
 80091da:	4770      	bx	lr

080091dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80091e0:	4b11      	ldr	r3, [pc, #68]	; (8009228 <MX_USART1_UART_Init+0x4c>)
 80091e2:	4a12      	ldr	r2, [pc, #72]	; (800922c <MX_USART1_UART_Init+0x50>)
 80091e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80091e6:	4b10      	ldr	r3, [pc, #64]	; (8009228 <MX_USART1_UART_Init+0x4c>)
 80091e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80091ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80091ee:	4b0e      	ldr	r3, [pc, #56]	; (8009228 <MX_USART1_UART_Init+0x4c>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80091f4:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <MX_USART1_UART_Init+0x4c>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80091fa:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <MX_USART1_UART_Init+0x4c>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009200:	4b09      	ldr	r3, [pc, #36]	; (8009228 <MX_USART1_UART_Init+0x4c>)
 8009202:	220c      	movs	r2, #12
 8009204:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009206:	4b08      	ldr	r3, [pc, #32]	; (8009228 <MX_USART1_UART_Init+0x4c>)
 8009208:	2200      	movs	r2, #0
 800920a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800920c:	4b06      	ldr	r3, [pc, #24]	; (8009228 <MX_USART1_UART_Init+0x4c>)
 800920e:	2200      	movs	r2, #0
 8009210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009212:	4805      	ldr	r0, [pc, #20]	; (8009228 <MX_USART1_UART_Init+0x4c>)
 8009214:	f004 ff2e 	bl	800e074 <HAL_UART_Init>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800921e:	f7fc fb70 	bl	8005902 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009222:	bf00      	nop
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	200051e0 	.word	0x200051e0
 800922c:	40013800 	.word	0x40013800

08009230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009238:	f107 0310 	add.w	r3, r7, #16
 800923c:	2200      	movs	r2, #0
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	605a      	str	r2, [r3, #4]
 8009242:	609a      	str	r2, [r3, #8]
 8009244:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a1c      	ldr	r2, [pc, #112]	; (80092bc <HAL_UART_MspInit+0x8c>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d131      	bne.n	80092b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009250:	4b1b      	ldr	r3, [pc, #108]	; (80092c0 <HAL_UART_MspInit+0x90>)
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	4a1a      	ldr	r2, [pc, #104]	; (80092c0 <HAL_UART_MspInit+0x90>)
 8009256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800925a:	6193      	str	r3, [r2, #24]
 800925c:	4b18      	ldr	r3, [pc, #96]	; (80092c0 <HAL_UART_MspInit+0x90>)
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009268:	4b15      	ldr	r3, [pc, #84]	; (80092c0 <HAL_UART_MspInit+0x90>)
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	4a14      	ldr	r2, [pc, #80]	; (80092c0 <HAL_UART_MspInit+0x90>)
 800926e:	f043 0304 	orr.w	r3, r3, #4
 8009272:	6193      	str	r3, [r2, #24]
 8009274:	4b12      	ldr	r3, [pc, #72]	; (80092c0 <HAL_UART_MspInit+0x90>)
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	f003 0304 	and.w	r3, r3, #4
 800927c:	60bb      	str	r3, [r7, #8]
 800927e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009284:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009286:	2302      	movs	r3, #2
 8009288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800928a:	2303      	movs	r3, #3
 800928c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800928e:	f107 0310 	add.w	r3, r7, #16
 8009292:	4619      	mov	r1, r3
 8009294:	480b      	ldr	r0, [pc, #44]	; (80092c4 <HAL_UART_MspInit+0x94>)
 8009296:	f000 fe41 	bl	8009f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800929a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092a0:	2300      	movs	r3, #0
 80092a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092a8:	f107 0310 	add.w	r3, r7, #16
 80092ac:	4619      	mov	r1, r3
 80092ae:	4805      	ldr	r0, [pc, #20]	; (80092c4 <HAL_UART_MspInit+0x94>)
 80092b0:	f000 fe34 	bl	8009f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80092b4:	bf00      	nop
 80092b6:	3720      	adds	r7, #32
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	40013800 	.word	0x40013800
 80092c0:	40021000 	.word	0x40021000
 80092c4:	40010800 	.word	0x40010800

080092c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80092c8:	f7ff ff82 	bl	80091d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80092cc:	480b      	ldr	r0, [pc, #44]	; (80092fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80092ce:	490c      	ldr	r1, [pc, #48]	; (8009300 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80092d0:	4a0c      	ldr	r2, [pc, #48]	; (8009304 <LoopFillZerobss+0x16>)
  movs r3, #0
 80092d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80092d4:	e002      	b.n	80092dc <LoopCopyDataInit>

080092d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80092d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80092d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80092da:	3304      	adds	r3, #4

080092dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80092dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80092de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80092e0:	d3f9      	bcc.n	80092d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80092e2:	4a09      	ldr	r2, [pc, #36]	; (8009308 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80092e4:	4c09      	ldr	r4, [pc, #36]	; (800930c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80092e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80092e8:	e001      	b.n	80092ee <LoopFillZerobss>

080092ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80092ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80092ec:	3204      	adds	r2, #4

080092ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80092ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80092f0:	d3fb      	bcc.n	80092ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80092f2:	f00a fbab 	bl	8013a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80092f6:	f7fc f9f5 	bl	80056e4 <main>
  bx lr
 80092fa:	4770      	bx	lr
  ldr r0, =_sdata
 80092fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009300:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8009304:	08015284 	.word	0x08015284
  ldr r2, =_sbss
 8009308:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 800930c:	20006574 	.word	0x20006574

08009310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009310:	e7fe      	b.n	8009310 <ADC1_2_IRQHandler>
	...

08009314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009318:	4b08      	ldr	r3, [pc, #32]	; (800933c <HAL_Init+0x28>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a07      	ldr	r2, [pc, #28]	; (800933c <HAL_Init+0x28>)
 800931e:	f043 0310 	orr.w	r3, r3, #16
 8009322:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009324:	2003      	movs	r0, #3
 8009326:	f000 f971 	bl	800960c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800932a:	200f      	movs	r0, #15
 800932c:	f000 f808 	bl	8009340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009330:	f7ff fe18 	bl	8008f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	40022000 	.word	0x40022000

08009340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009348:	4b12      	ldr	r3, [pc, #72]	; (8009394 <HAL_InitTick+0x54>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	4b12      	ldr	r3, [pc, #72]	; (8009398 <HAL_InitTick+0x58>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	4619      	mov	r1, r3
 8009352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009356:	fbb3 f3f1 	udiv	r3, r3, r1
 800935a:	fbb2 f3f3 	udiv	r3, r2, r3
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f997 	bl	8009692 <HAL_SYSTICK_Config>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e00e      	b.n	800938c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b0f      	cmp	r3, #15
 8009372:	d80a      	bhi.n	800938a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009374:	2200      	movs	r2, #0
 8009376:	6879      	ldr	r1, [r7, #4]
 8009378:	f04f 30ff 	mov.w	r0, #4294967295
 800937c:	f000 f951 	bl	8009622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009380:	4a06      	ldr	r2, [pc, #24]	; (800939c <HAL_InitTick+0x5c>)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	e000      	b.n	800938c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20000138 	.word	0x20000138
 8009398:	20000140 	.word	0x20000140
 800939c:	2000013c 	.word	0x2000013c

080093a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80093a0:	b480      	push	{r7}
 80093a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80093a4:	4b05      	ldr	r3, [pc, #20]	; (80093bc <HAL_IncTick+0x1c>)
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	461a      	mov	r2, r3
 80093aa:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <HAL_IncTick+0x20>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4413      	add	r3, r2
 80093b0:	4a03      	ldr	r2, [pc, #12]	; (80093c0 <HAL_IncTick+0x20>)
 80093b2:	6013      	str	r3, [r2, #0]
}
 80093b4:	bf00      	nop
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bc80      	pop	{r7}
 80093ba:	4770      	bx	lr
 80093bc:	20000140 	.word	0x20000140
 80093c0:	20005228 	.word	0x20005228

080093c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80093c4:	b480      	push	{r7}
 80093c6:	af00      	add	r7, sp, #0
  return uwTick;
 80093c8:	4b02      	ldr	r3, [pc, #8]	; (80093d4 <HAL_GetTick+0x10>)
 80093ca:	681b      	ldr	r3, [r3, #0]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bc80      	pop	{r7}
 80093d2:	4770      	bx	lr
 80093d4:	20005228 	.word	0x20005228

080093d8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80093d8:	b480      	push	{r7}
 80093da:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80093dc:	4b04      	ldr	r3, [pc, #16]	; (80093f0 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4a03      	ldr	r2, [pc, #12]	; (80093f0 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80093e2:	f043 0301 	orr.w	r3, r3, #1
 80093e6:	6053      	str	r3, [r2, #4]
}
 80093e8:	bf00      	nop
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bc80      	pop	{r7}
 80093ee:	4770      	bx	lr
 80093f0:	e0042000 	.word	0xe0042000

080093f4 <HAL_DBGMCU_EnableDBGStopMode>:
  *       interrupt.
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80093f4:	b480      	push	{r7}
 80093f6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80093f8:	4b04      	ldr	r3, [pc, #16]	; (800940c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	4a03      	ldr	r2, [pc, #12]	; (800940c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80093fe:	f043 0302 	orr.w	r3, r3, #2
 8009402:	6053      	str	r3, [r2, #4]
}
 8009404:	bf00      	nop
 8009406:	46bd      	mov	sp, r7
 8009408:	bc80      	pop	{r7}
 800940a:	4770      	bx	lr
 800940c:	e0042000 	.word	0xe0042000

08009410 <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8009410:	b480      	push	{r7}
 8009412:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8009414:	4b04      	ldr	r3, [pc, #16]	; (8009428 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	4a03      	ldr	r2, [pc, #12]	; (8009428 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800941a:	f043 0304 	orr.w	r3, r3, #4
 800941e:	6053      	str	r3, [r2, #4]
}
 8009420:	bf00      	nop
 8009422:	46bd      	mov	sp, r7
 8009424:	bc80      	pop	{r7}
 8009426:	4770      	bx	lr
 8009428:	e0042000 	.word	0xe0042000

0800942c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800943c:	4b0c      	ldr	r3, [pc, #48]	; (8009470 <__NVIC_SetPriorityGrouping+0x44>)
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009448:	4013      	ands	r3, r2
 800944a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800945c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800945e:	4a04      	ldr	r2, [pc, #16]	; (8009470 <__NVIC_SetPriorityGrouping+0x44>)
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	60d3      	str	r3, [r2, #12]
}
 8009464:	bf00      	nop
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	bc80      	pop	{r7}
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	e000ed00 	.word	0xe000ed00

08009474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009474:	b480      	push	{r7}
 8009476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009478:	4b04      	ldr	r3, [pc, #16]	; (800948c <__NVIC_GetPriorityGrouping+0x18>)
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	0a1b      	lsrs	r3, r3, #8
 800947e:	f003 0307 	and.w	r3, r3, #7
}
 8009482:	4618      	mov	r0, r3
 8009484:	46bd      	mov	sp, r7
 8009486:	bc80      	pop	{r7}
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	e000ed00 	.word	0xe000ed00

08009490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800949a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	db0b      	blt.n	80094ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	f003 021f 	and.w	r2, r3, #31
 80094a8:	4906      	ldr	r1, [pc, #24]	; (80094c4 <__NVIC_EnableIRQ+0x34>)
 80094aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094ae:	095b      	lsrs	r3, r3, #5
 80094b0:	2001      	movs	r0, #1
 80094b2:	fa00 f202 	lsl.w	r2, r0, r2
 80094b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80094ba:	bf00      	nop
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	bc80      	pop	{r7}
 80094c2:	4770      	bx	lr
 80094c4:	e000e100 	.word	0xe000e100

080094c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	db12      	blt.n	8009500 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	f003 021f 	and.w	r2, r3, #31
 80094e0:	490a      	ldr	r1, [pc, #40]	; (800950c <__NVIC_DisableIRQ+0x44>)
 80094e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094e6:	095b      	lsrs	r3, r3, #5
 80094e8:	2001      	movs	r0, #1
 80094ea:	fa00 f202 	lsl.w	r2, r0, r2
 80094ee:	3320      	adds	r3, #32
 80094f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80094f4:	f3bf 8f4f 	dsb	sy
}
 80094f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80094fa:	f3bf 8f6f 	isb	sy
}
 80094fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	e000e100 	.word	0xe000e100

08009510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800951c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009520:	2b00      	cmp	r3, #0
 8009522:	db0a      	blt.n	800953a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	b2da      	uxtb	r2, r3
 8009528:	490c      	ldr	r1, [pc, #48]	; (800955c <__NVIC_SetPriority+0x4c>)
 800952a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800952e:	0112      	lsls	r2, r2, #4
 8009530:	b2d2      	uxtb	r2, r2
 8009532:	440b      	add	r3, r1
 8009534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009538:	e00a      	b.n	8009550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	b2da      	uxtb	r2, r3
 800953e:	4908      	ldr	r1, [pc, #32]	; (8009560 <__NVIC_SetPriority+0x50>)
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	f003 030f 	and.w	r3, r3, #15
 8009546:	3b04      	subs	r3, #4
 8009548:	0112      	lsls	r2, r2, #4
 800954a:	b2d2      	uxtb	r2, r2
 800954c:	440b      	add	r3, r1
 800954e:	761a      	strb	r2, [r3, #24]
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	bc80      	pop	{r7}
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	e000e100 	.word	0xe000e100
 8009560:	e000ed00 	.word	0xe000ed00

08009564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009564:	b480      	push	{r7}
 8009566:	b089      	sub	sp, #36	; 0x24
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f003 0307 	and.w	r3, r3, #7
 8009576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	f1c3 0307 	rsb	r3, r3, #7
 800957e:	2b04      	cmp	r3, #4
 8009580:	bf28      	it	cs
 8009582:	2304      	movcs	r3, #4
 8009584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	3304      	adds	r3, #4
 800958a:	2b06      	cmp	r3, #6
 800958c:	d902      	bls.n	8009594 <NVIC_EncodePriority+0x30>
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	3b03      	subs	r3, #3
 8009592:	e000      	b.n	8009596 <NVIC_EncodePriority+0x32>
 8009594:	2300      	movs	r3, #0
 8009596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009598:	f04f 32ff 	mov.w	r2, #4294967295
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	fa02 f303 	lsl.w	r3, r2, r3
 80095a2:	43da      	mvns	r2, r3
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	401a      	ands	r2, r3
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80095ac:	f04f 31ff 	mov.w	r1, #4294967295
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	fa01 f303 	lsl.w	r3, r1, r3
 80095b6:	43d9      	mvns	r1, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095bc:	4313      	orrs	r3, r2
         );
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3724      	adds	r7, #36	; 0x24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bc80      	pop	{r7}
 80095c6:	4770      	bx	lr

080095c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095d8:	d301      	bcc.n	80095de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80095da:	2301      	movs	r3, #1
 80095dc:	e00f      	b.n	80095fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80095de:	4a0a      	ldr	r2, [pc, #40]	; (8009608 <SysTick_Config+0x40>)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80095e6:	210f      	movs	r1, #15
 80095e8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ec:	f7ff ff90 	bl	8009510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80095f0:	4b05      	ldr	r3, [pc, #20]	; (8009608 <SysTick_Config+0x40>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80095f6:	4b04      	ldr	r3, [pc, #16]	; (8009608 <SysTick_Config+0x40>)
 80095f8:	2207      	movs	r2, #7
 80095fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	e000e010 	.word	0xe000e010

0800960c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7ff ff09 	bl	800942c <__NVIC_SetPriorityGrouping>
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009622:	b580      	push	{r7, lr}
 8009624:	b086      	sub	sp, #24
 8009626:	af00      	add	r7, sp, #0
 8009628:	4603      	mov	r3, r0
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	607a      	str	r2, [r7, #4]
 800962e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009630:	2300      	movs	r3, #0
 8009632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009634:	f7ff ff1e 	bl	8009474 <__NVIC_GetPriorityGrouping>
 8009638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	68b9      	ldr	r1, [r7, #8]
 800963e:	6978      	ldr	r0, [r7, #20]
 8009640:	f7ff ff90 	bl	8009564 <NVIC_EncodePriority>
 8009644:	4602      	mov	r2, r0
 8009646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800964a:	4611      	mov	r1, r2
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff ff5f 	bl	8009510 <__NVIC_SetPriority>
}
 8009652:	bf00      	nop
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b082      	sub	sp, #8
 800965e:	af00      	add	r7, sp, #0
 8009660:	4603      	mov	r3, r0
 8009662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009668:	4618      	mov	r0, r3
 800966a:	f7ff ff11 	bl	8009490 <__NVIC_EnableIRQ>
}
 800966e:	bf00      	nop
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b082      	sub	sp, #8
 800967a:	af00      	add	r7, sp, #0
 800967c:	4603      	mov	r3, r0
 800967e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009684:	4618      	mov	r0, r3
 8009686:	f7ff ff1f 	bl	80094c8 <__NVIC_DisableIRQ>
}
 800968a:	bf00      	nop
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b082      	sub	sp, #8
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7ff ff94 	bl	80095c8 <SysTick_Config>
 80096a0:	4603      	mov	r3, r0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b085      	sub	sp, #20
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d008      	beq.n	80096d4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2204      	movs	r2, #4
 80096c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e020      	b.n	8009716 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 020e 	bic.w	r2, r2, #14
 80096e2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f022 0201 	bic.w	r2, r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fc:	2101      	movs	r1, #1
 80096fe:	fa01 f202 	lsl.w	r2, r1, r2
 8009702:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	bc80      	pop	{r7}
 800971e:	4770      	bx	lr

08009720 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b02      	cmp	r3, #2
 8009736:	d005      	beq.n	8009744 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2204      	movs	r2, #4
 800973c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	73fb      	strb	r3, [r7, #15]
 8009742:	e0d6      	b.n	80098f2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 020e 	bic.w	r2, r2, #14
 8009752:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 0201 	bic.w	r2, r2, #1
 8009762:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	461a      	mov	r2, r3
 800976a:	4b64      	ldr	r3, [pc, #400]	; (80098fc <HAL_DMA_Abort_IT+0x1dc>)
 800976c:	429a      	cmp	r2, r3
 800976e:	d958      	bls.n	8009822 <HAL_DMA_Abort_IT+0x102>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a62      	ldr	r2, [pc, #392]	; (8009900 <HAL_DMA_Abort_IT+0x1e0>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d04f      	beq.n	800981a <HAL_DMA_Abort_IT+0xfa>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a61      	ldr	r2, [pc, #388]	; (8009904 <HAL_DMA_Abort_IT+0x1e4>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d048      	beq.n	8009816 <HAL_DMA_Abort_IT+0xf6>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a5f      	ldr	r2, [pc, #380]	; (8009908 <HAL_DMA_Abort_IT+0x1e8>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d040      	beq.n	8009810 <HAL_DMA_Abort_IT+0xf0>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a5e      	ldr	r2, [pc, #376]	; (800990c <HAL_DMA_Abort_IT+0x1ec>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d038      	beq.n	800980a <HAL_DMA_Abort_IT+0xea>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a5c      	ldr	r2, [pc, #368]	; (8009910 <HAL_DMA_Abort_IT+0x1f0>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d030      	beq.n	8009804 <HAL_DMA_Abort_IT+0xe4>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a5b      	ldr	r2, [pc, #364]	; (8009914 <HAL_DMA_Abort_IT+0x1f4>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d028      	beq.n	80097fe <HAL_DMA_Abort_IT+0xde>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a52      	ldr	r2, [pc, #328]	; (80098fc <HAL_DMA_Abort_IT+0x1dc>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d020      	beq.n	80097f8 <HAL_DMA_Abort_IT+0xd8>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a57      	ldr	r2, [pc, #348]	; (8009918 <HAL_DMA_Abort_IT+0x1f8>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d019      	beq.n	80097f4 <HAL_DMA_Abort_IT+0xd4>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a55      	ldr	r2, [pc, #340]	; (800991c <HAL_DMA_Abort_IT+0x1fc>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d012      	beq.n	80097f0 <HAL_DMA_Abort_IT+0xd0>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a54      	ldr	r2, [pc, #336]	; (8009920 <HAL_DMA_Abort_IT+0x200>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d00a      	beq.n	80097ea <HAL_DMA_Abort_IT+0xca>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a52      	ldr	r2, [pc, #328]	; (8009924 <HAL_DMA_Abort_IT+0x204>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d102      	bne.n	80097e4 <HAL_DMA_Abort_IT+0xc4>
 80097de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097e2:	e01b      	b.n	800981c <HAL_DMA_Abort_IT+0xfc>
 80097e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097e8:	e018      	b.n	800981c <HAL_DMA_Abort_IT+0xfc>
 80097ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097ee:	e015      	b.n	800981c <HAL_DMA_Abort_IT+0xfc>
 80097f0:	2310      	movs	r3, #16
 80097f2:	e013      	b.n	800981c <HAL_DMA_Abort_IT+0xfc>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e011      	b.n	800981c <HAL_DMA_Abort_IT+0xfc>
 80097f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097fc:	e00e      	b.n	800981c <HAL_DMA_Abort_IT+0xfc>
 80097fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009802:	e00b      	b.n	800981c <HAL_DMA_Abort_IT+0xfc>
 8009804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009808:	e008      	b.n	800981c <HAL_DMA_Abort_IT+0xfc>
 800980a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800980e:	e005      	b.n	800981c <HAL_DMA_Abort_IT+0xfc>
 8009810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009814:	e002      	b.n	800981c <HAL_DMA_Abort_IT+0xfc>
 8009816:	2310      	movs	r3, #16
 8009818:	e000      	b.n	800981c <HAL_DMA_Abort_IT+0xfc>
 800981a:	2301      	movs	r3, #1
 800981c:	4a42      	ldr	r2, [pc, #264]	; (8009928 <HAL_DMA_Abort_IT+0x208>)
 800981e:	6053      	str	r3, [r2, #4]
 8009820:	e057      	b.n	80098d2 <HAL_DMA_Abort_IT+0x1b2>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a36      	ldr	r2, [pc, #216]	; (8009900 <HAL_DMA_Abort_IT+0x1e0>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d04f      	beq.n	80098cc <HAL_DMA_Abort_IT+0x1ac>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a34      	ldr	r2, [pc, #208]	; (8009904 <HAL_DMA_Abort_IT+0x1e4>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d048      	beq.n	80098c8 <HAL_DMA_Abort_IT+0x1a8>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a33      	ldr	r2, [pc, #204]	; (8009908 <HAL_DMA_Abort_IT+0x1e8>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d040      	beq.n	80098c2 <HAL_DMA_Abort_IT+0x1a2>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a31      	ldr	r2, [pc, #196]	; (800990c <HAL_DMA_Abort_IT+0x1ec>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d038      	beq.n	80098bc <HAL_DMA_Abort_IT+0x19c>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a30      	ldr	r2, [pc, #192]	; (8009910 <HAL_DMA_Abort_IT+0x1f0>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d030      	beq.n	80098b6 <HAL_DMA_Abort_IT+0x196>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a2e      	ldr	r2, [pc, #184]	; (8009914 <HAL_DMA_Abort_IT+0x1f4>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d028      	beq.n	80098b0 <HAL_DMA_Abort_IT+0x190>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a26      	ldr	r2, [pc, #152]	; (80098fc <HAL_DMA_Abort_IT+0x1dc>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d020      	beq.n	80098aa <HAL_DMA_Abort_IT+0x18a>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a2a      	ldr	r2, [pc, #168]	; (8009918 <HAL_DMA_Abort_IT+0x1f8>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d019      	beq.n	80098a6 <HAL_DMA_Abort_IT+0x186>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a29      	ldr	r2, [pc, #164]	; (800991c <HAL_DMA_Abort_IT+0x1fc>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d012      	beq.n	80098a2 <HAL_DMA_Abort_IT+0x182>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a27      	ldr	r2, [pc, #156]	; (8009920 <HAL_DMA_Abort_IT+0x200>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d00a      	beq.n	800989c <HAL_DMA_Abort_IT+0x17c>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a26      	ldr	r2, [pc, #152]	; (8009924 <HAL_DMA_Abort_IT+0x204>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d102      	bne.n	8009896 <HAL_DMA_Abort_IT+0x176>
 8009890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009894:	e01b      	b.n	80098ce <HAL_DMA_Abort_IT+0x1ae>
 8009896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800989a:	e018      	b.n	80098ce <HAL_DMA_Abort_IT+0x1ae>
 800989c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098a0:	e015      	b.n	80098ce <HAL_DMA_Abort_IT+0x1ae>
 80098a2:	2310      	movs	r3, #16
 80098a4:	e013      	b.n	80098ce <HAL_DMA_Abort_IT+0x1ae>
 80098a6:	2301      	movs	r3, #1
 80098a8:	e011      	b.n	80098ce <HAL_DMA_Abort_IT+0x1ae>
 80098aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098ae:	e00e      	b.n	80098ce <HAL_DMA_Abort_IT+0x1ae>
 80098b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80098b4:	e00b      	b.n	80098ce <HAL_DMA_Abort_IT+0x1ae>
 80098b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098ba:	e008      	b.n	80098ce <HAL_DMA_Abort_IT+0x1ae>
 80098bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098c0:	e005      	b.n	80098ce <HAL_DMA_Abort_IT+0x1ae>
 80098c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098c6:	e002      	b.n	80098ce <HAL_DMA_Abort_IT+0x1ae>
 80098c8:	2310      	movs	r3, #16
 80098ca:	e000      	b.n	80098ce <HAL_DMA_Abort_IT+0x1ae>
 80098cc:	2301      	movs	r3, #1
 80098ce:	4a17      	ldr	r2, [pc, #92]	; (800992c <HAL_DMA_Abort_IT+0x20c>)
 80098d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d003      	beq.n	80098f2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	4798      	blx	r3
    } 
  }
  return status;
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	40020080 	.word	0x40020080
 8009900:	40020008 	.word	0x40020008
 8009904:	4002001c 	.word	0x4002001c
 8009908:	40020030 	.word	0x40020030
 800990c:	40020044 	.word	0x40020044
 8009910:	40020058 	.word	0x40020058
 8009914:	4002006c 	.word	0x4002006c
 8009918:	40020408 	.word	0x40020408
 800991c:	4002041c 	.word	0x4002041c
 8009920:	40020430 	.word	0x40020430
 8009924:	40020444 	.word	0x40020444
 8009928:	40020400 	.word	0x40020400
 800992c:	40020000 	.word	0x40020000

08009930 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800994a:	4b2f      	ldr	r3, [pc, #188]	; (8009a08 <HAL_FLASH_Program+0xd8>)
 800994c:	7e1b      	ldrb	r3, [r3, #24]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d101      	bne.n	8009956 <HAL_FLASH_Program+0x26>
 8009952:	2302      	movs	r3, #2
 8009954:	e054      	b.n	8009a00 <HAL_FLASH_Program+0xd0>
 8009956:	4b2c      	ldr	r3, [pc, #176]	; (8009a08 <HAL_FLASH_Program+0xd8>)
 8009958:	2201      	movs	r2, #1
 800995a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800995c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009960:	f000 f99e 	bl	8009ca0 <FLASH_WaitForLastOperation>
 8009964:	4603      	mov	r3, r0
 8009966:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8009968:	7dfb      	ldrb	r3, [r7, #23]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d144      	bne.n	80099f8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d102      	bne.n	800997a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8009974:	2301      	movs	r3, #1
 8009976:	757b      	strb	r3, [r7, #21]
 8009978:	e007      	b.n	800998a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2b02      	cmp	r3, #2
 800997e:	d102      	bne.n	8009986 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8009980:	2302      	movs	r3, #2
 8009982:	757b      	strb	r3, [r7, #21]
 8009984:	e001      	b.n	800998a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8009986:	2304      	movs	r3, #4
 8009988:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800998a:	2300      	movs	r3, #0
 800998c:	75bb      	strb	r3, [r7, #22]
 800998e:	e02d      	b.n	80099ec <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8009990:	7dbb      	ldrb	r3, [r7, #22]
 8009992:	005a      	lsls	r2, r3, #1
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	eb02 0c03 	add.w	ip, r2, r3
 800999a:	7dbb      	ldrb	r3, [r7, #22]
 800999c:	0119      	lsls	r1, r3, #4
 800999e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099a2:	f1c1 0620 	rsb	r6, r1, #32
 80099a6:	f1a1 0020 	sub.w	r0, r1, #32
 80099aa:	fa22 f401 	lsr.w	r4, r2, r1
 80099ae:	fa03 f606 	lsl.w	r6, r3, r6
 80099b2:	4334      	orrs	r4, r6
 80099b4:	fa23 f000 	lsr.w	r0, r3, r0
 80099b8:	4304      	orrs	r4, r0
 80099ba:	fa23 f501 	lsr.w	r5, r3, r1
 80099be:	b2a3      	uxth	r3, r4
 80099c0:	4619      	mov	r1, r3
 80099c2:	4660      	mov	r0, ip
 80099c4:	f000 f950 	bl	8009c68 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80099c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80099cc:	f000 f968 	bl	8009ca0 <FLASH_WaitForLastOperation>
 80099d0:	4603      	mov	r3, r0
 80099d2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80099d4:	4b0d      	ldr	r3, [pc, #52]	; (8009a0c <HAL_FLASH_Program+0xdc>)
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	4a0c      	ldr	r2, [pc, #48]	; (8009a0c <HAL_FLASH_Program+0xdc>)
 80099da:	f023 0301 	bic.w	r3, r3, #1
 80099de:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d107      	bne.n	80099f6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80099e6:	7dbb      	ldrb	r3, [r7, #22]
 80099e8:	3301      	adds	r3, #1
 80099ea:	75bb      	strb	r3, [r7, #22]
 80099ec:	7dba      	ldrb	r2, [r7, #22]
 80099ee:	7d7b      	ldrb	r3, [r7, #21]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d3cd      	bcc.n	8009990 <HAL_FLASH_Program+0x60>
 80099f4:	e000      	b.n	80099f8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80099f6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80099f8:	4b03      	ldr	r3, [pc, #12]	; (8009a08 <HAL_FLASH_Program+0xd8>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	761a      	strb	r2, [r3, #24]

  return status;
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	371c      	adds	r7, #28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a08:	20005230 	.word	0x20005230
 8009a0c:	40022000 	.word	0x40022000

08009a10 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8009a16:	2300      	movs	r3, #0
 8009a18:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8009a1a:	4b6d      	ldr	r3, [pc, #436]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f003 0310 	and.w	r3, r3, #16
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d105      	bne.n	8009a32 <HAL_FLASH_IRQHandler+0x22>
 8009a26:	4b6a      	ldr	r3, [pc, #424]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	f003 0304 	and.w	r3, r3, #4
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00e      	beq.n	8009a50 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8009a32:	4b68      	ldr	r3, [pc, #416]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8009a38:	4b66      	ldr	r3, [pc, #408]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3e:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8009a40:	f000 f974 	bl	8009d2c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f8d0 	bl	8009bea <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009a4a:	4b62      	ldr	r3, [pc, #392]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009a50:	4b5f      	ldr	r3, [pc, #380]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	f003 0320 	and.w	r3, r3, #32
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 80a0 	beq.w	8009b9e <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009a5e:	4b5c      	ldr	r3, [pc, #368]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009a60:	2220      	movs	r2, #32
 8009a62:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8009a64:	4b5b      	ldr	r3, [pc, #364]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f000 8097 	beq.w	8009b9e <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8009a70:	4b58      	ldr	r3, [pc, #352]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d12d      	bne.n	8009ad6 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8009a7a:	4b56      	ldr	r3, [pc, #344]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	4a54      	ldr	r2, [pc, #336]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009a82:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8009a84:	4b53      	ldr	r3, [pc, #332]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d017      	beq.n	8009abc <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8009a8c:	4b51      	ldr	r3, [pc, #324]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f8a0 	bl	8009bd8 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8009a98:	4b4e      	ldr	r3, [pc, #312]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa0:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8009aa2:	4a4c      	ldr	r2, [pc, #304]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009aa8:	4b49      	ldr	r3, [pc, #292]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	4a48      	ldr	r2, [pc, #288]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009aae:	f023 0302 	bic.w	r3, r3, #2
 8009ab2:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fa11 	bl	8009edc <FLASH_PageErase>
 8009aba:	e070      	b.n	8009b9e <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8009abc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac0:	607b      	str	r3, [r7, #4]
 8009ac2:	4a44      	ldr	r2, [pc, #272]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009ac8:	4b42      	ldr	r3, [pc, #264]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f882 	bl	8009bd8 <HAL_FLASH_EndOfOperationCallback>
 8009ad4:	e063      	b.n	8009b9e <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8009ad6:	4b3f      	ldr	r3, [pc, #252]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d10c      	bne.n	8009afa <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8009ae0:	4b3b      	ldr	r3, [pc, #236]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	4a3a      	ldr	r2, [pc, #232]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009ae6:	f023 0304 	bic.w	r3, r3, #4
 8009aea:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8009aec:	2000      	movs	r0, #0
 8009aee:	f000 f873 	bl	8009bd8 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009af2:	4b38      	ldr	r3, [pc, #224]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	701a      	strb	r2, [r3, #0]
 8009af8:	e051      	b.n	8009b9e <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8009afa:	4b36      	ldr	r3, [pc, #216]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	4a34      	ldr	r2, [pc, #208]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b02:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8009b04:	4b33      	ldr	r3, [pc, #204]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d024      	beq.n	8009b56 <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8009b0c:	4b31      	ldr	r3, [pc, #196]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	3302      	adds	r3, #2
 8009b12:	4a30      	ldr	r2, [pc, #192]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b14:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8009b16:	4b2f      	ldr	r3, [pc, #188]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8009b1c:	4b2d      	ldr	r3, [pc, #180]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b1e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009b22:	f04f 0200 	mov.w	r2, #0
 8009b26:	f04f 0300 	mov.w	r3, #0
 8009b2a:	0c02      	lsrs	r2, r0, #16
 8009b2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009b30:	0c0b      	lsrs	r3, r1, #16
 8009b32:	4928      	ldr	r1, [pc, #160]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b34:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009b38:	4b25      	ldr	r3, [pc, #148]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	4a24      	ldr	r2, [pc, #144]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009b3e:	f023 0301 	bic.w	r3, r3, #1
 8009b42:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8009b44:	4b23      	ldr	r3, [pc, #140]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009b4a:	b293      	uxth	r3, r2
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f88a 	bl	8009c68 <FLASH_Program_HalfWord>
 8009b54:	e023      	b.n	8009b9e <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8009b56:	4b1f      	ldr	r3, [pc, #124]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b03      	cmp	r3, #3
 8009b5e:	d105      	bne.n	8009b6c <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8009b60:	4b1c      	ldr	r3, [pc, #112]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 f837 	bl	8009bd8 <HAL_FLASH_EndOfOperationCallback>
 8009b6a:	e011      	b.n	8009b90 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8009b6c:	4b19      	ldr	r3, [pc, #100]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b04      	cmp	r3, #4
 8009b74:	d106      	bne.n	8009b84 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8009b76:	4b17      	ldr	r3, [pc, #92]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	3b02      	subs	r3, #2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 f82b 	bl	8009bd8 <HAL_FLASH_EndOfOperationCallback>
 8009b82:	e005      	b.n	8009b90 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8009b84:	4b13      	ldr	r3, [pc, #76]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	3b06      	subs	r3, #6
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 f824 	bl	8009bd8 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8009b90:	4b10      	ldr	r3, [pc, #64]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b92:	f04f 32ff 	mov.w	r2, #4294967295
 8009b96:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009b98:	4b0e      	ldr	r3, [pc, #56]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8009b9e:	4b0d      	ldr	r3, [pc, #52]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10e      	bne.n	8009bc6 <HAL_FLASH_IRQHandler+0x1b6>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8009ba8:	4b09      	ldr	r3, [pc, #36]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	4a08      	ldr	r2, [pc, #32]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009bae:	f023 0307 	bic.w	r3, r3, #7
 8009bb2:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8009bb4:	4b06      	ldr	r3, [pc, #24]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	4a05      	ldr	r2, [pc, #20]	; (8009bd0 <HAL_FLASH_IRQHandler+0x1c0>)
 8009bba:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8009bbe:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8009bc0:	4b04      	ldr	r3, [pc, #16]	; (8009bd4 <HAL_FLASH_IRQHandler+0x1c4>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	761a      	strb	r2, [r3, #24]
  }
}
 8009bc6:	bf00      	nop
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	40022000 	.word	0x40022000
 8009bd4:	20005230 	.word	0x20005230

08009bd8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bc80      	pop	{r7}
 8009be8:	4770      	bx	lr

08009bea <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b083      	sub	sp, #12
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8009bf2:	bf00      	nop
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bc80      	pop	{r7}
 8009bfa:	4770      	bx	lr

08009bfc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009c06:	4b0d      	ldr	r3, [pc, #52]	; (8009c3c <HAL_FLASH_Unlock+0x40>)
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00d      	beq.n	8009c2e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009c12:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <HAL_FLASH_Unlock+0x40>)
 8009c14:	4a0a      	ldr	r2, [pc, #40]	; (8009c40 <HAL_FLASH_Unlock+0x44>)
 8009c16:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009c18:	4b08      	ldr	r3, [pc, #32]	; (8009c3c <HAL_FLASH_Unlock+0x40>)
 8009c1a:	4a0a      	ldr	r2, [pc, #40]	; (8009c44 <HAL_FLASH_Unlock+0x48>)
 8009c1c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009c1e:	4b07      	ldr	r3, [pc, #28]	; (8009c3c <HAL_FLASH_Unlock+0x40>)
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8009c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	40022000 	.word	0x40022000
 8009c40:	45670123 	.word	0x45670123
 8009c44:	cdef89ab 	.word	0xcdef89ab

08009c48 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <HAL_FLASH_Lock+0x1c>)
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	4a04      	ldr	r2, [pc, #16]	; (8009c64 <HAL_FLASH_Lock+0x1c>)
 8009c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c56:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bc80      	pop	{r7}
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	40022000 	.word	0x40022000

08009c68 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	460b      	mov	r3, r1
 8009c72:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009c74:	4b08      	ldr	r3, [pc, #32]	; (8009c98 <FLASH_Program_HalfWord+0x30>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009c7a:	4b08      	ldr	r3, [pc, #32]	; (8009c9c <FLASH_Program_HalfWord+0x34>)
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	4a07      	ldr	r2, [pc, #28]	; (8009c9c <FLASH_Program_HalfWord+0x34>)
 8009c80:	f043 0301 	orr.w	r3, r3, #1
 8009c84:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	887a      	ldrh	r2, [r7, #2]
 8009c8a:	801a      	strh	r2, [r3, #0]
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bc80      	pop	{r7}
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	20005230 	.word	0x20005230
 8009c9c:	40022000 	.word	0x40022000

08009ca0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8009ca8:	f7ff fb8c 	bl	80093c4 <HAL_GetTick>
 8009cac:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8009cae:	e010      	b.n	8009cd2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb6:	d00c      	beq.n	8009cd2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d007      	beq.n	8009cce <FLASH_WaitForLastOperation+0x2e>
 8009cbe:	f7ff fb81 	bl	80093c4 <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d201      	bcs.n	8009cd2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	e025      	b.n	8009d1e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8009cd2:	4b15      	ldr	r3, [pc, #84]	; (8009d28 <FLASH_WaitForLastOperation+0x88>)
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	f003 0301 	and.w	r3, r3, #1
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1e8      	bne.n	8009cb0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009cde:	4b12      	ldr	r3, [pc, #72]	; (8009d28 <FLASH_WaitForLastOperation+0x88>)
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f003 0320 	and.w	r3, r3, #32
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d002      	beq.n	8009cf0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009cea:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <FLASH_WaitForLastOperation+0x88>)
 8009cec:	2220      	movs	r2, #32
 8009cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8009cf0:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <FLASH_WaitForLastOperation+0x88>)
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	f003 0310 	and.w	r3, r3, #16
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10b      	bne.n	8009d14 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <FLASH_WaitForLastOperation+0x88>)
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d105      	bne.n	8009d14 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8009d08:	4b07      	ldr	r3, [pc, #28]	; (8009d28 <FLASH_WaitForLastOperation+0x88>)
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009d14:	f000 f80a 	bl	8009d2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e000      	b.n	8009d1e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	40022000 	.word	0x40022000

08009d2c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8009d32:	2300      	movs	r3, #0
 8009d34:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8009d36:	4b23      	ldr	r3, [pc, #140]	; (8009dc4 <FLASH_SetErrorCode+0x98>)
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	f003 0310 	and.w	r3, r3, #16
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d009      	beq.n	8009d56 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009d42:	4b21      	ldr	r3, [pc, #132]	; (8009dc8 <FLASH_SetErrorCode+0x9c>)
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	f043 0302 	orr.w	r3, r3, #2
 8009d4a:	4a1f      	ldr	r2, [pc, #124]	; (8009dc8 <FLASH_SetErrorCode+0x9c>)
 8009d4c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f043 0310 	orr.w	r3, r3, #16
 8009d54:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8009d56:	4b1b      	ldr	r3, [pc, #108]	; (8009dc4 <FLASH_SetErrorCode+0x98>)
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f003 0304 	and.w	r3, r3, #4
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d009      	beq.n	8009d76 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8009d62:	4b19      	ldr	r3, [pc, #100]	; (8009dc8 <FLASH_SetErrorCode+0x9c>)
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	f043 0301 	orr.w	r3, r3, #1
 8009d6a:	4a17      	ldr	r2, [pc, #92]	; (8009dc8 <FLASH_SetErrorCode+0x9c>)
 8009d6c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f043 0304 	orr.w	r3, r3, #4
 8009d74:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8009d76:	4b13      	ldr	r3, [pc, #76]	; (8009dc4 <FLASH_SetErrorCode+0x98>)
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	f003 0301 	and.w	r3, r3, #1
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00b      	beq.n	8009d9a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8009d82:	4b11      	ldr	r3, [pc, #68]	; (8009dc8 <FLASH_SetErrorCode+0x9c>)
 8009d84:	69db      	ldr	r3, [r3, #28]
 8009d86:	f043 0304 	orr.w	r3, r3, #4
 8009d8a:	4a0f      	ldr	r2, [pc, #60]	; (8009dc8 <FLASH_SetErrorCode+0x9c>)
 8009d8c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8009d8e:	4b0d      	ldr	r3, [pc, #52]	; (8009dc4 <FLASH_SetErrorCode+0x98>)
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	4a0c      	ldr	r2, [pc, #48]	; (8009dc4 <FLASH_SetErrorCode+0x98>)
 8009d94:	f023 0301 	bic.w	r3, r3, #1
 8009d98:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f240 1201 	movw	r2, #257	; 0x101
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d106      	bne.n	8009db2 <FLASH_SetErrorCode+0x86>
 8009da4:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <FLASH_SetErrorCode+0x98>)
 8009da6:	69db      	ldr	r3, [r3, #28]
 8009da8:	4a06      	ldr	r2, [pc, #24]	; (8009dc4 <FLASH_SetErrorCode+0x98>)
 8009daa:	f023 0301 	bic.w	r3, r3, #1
 8009dae:	61d3      	str	r3, [r2, #28]
}  
 8009db0:	e002      	b.n	8009db8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8009db2:	4a04      	ldr	r2, [pc, #16]	; (8009dc4 <FLASH_SetErrorCode+0x98>)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	60d3      	str	r3, [r2, #12]
}  
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bc80      	pop	{r7}
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	40022000 	.word	0x40022000
 8009dc8:	20005230 	.word	0x20005230

08009dcc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009dde:	4b2f      	ldr	r3, [pc, #188]	; (8009e9c <HAL_FLASHEx_Erase+0xd0>)
 8009de0:	7e1b      	ldrb	r3, [r3, #24]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d101      	bne.n	8009dea <HAL_FLASHEx_Erase+0x1e>
 8009de6:	2302      	movs	r3, #2
 8009de8:	e053      	b.n	8009e92 <HAL_FLASHEx_Erase+0xc6>
 8009dea:	4b2c      	ldr	r3, [pc, #176]	; (8009e9c <HAL_FLASHEx_Erase+0xd0>)
 8009dec:	2201      	movs	r2, #1
 8009dee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d116      	bne.n	8009e26 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8009df8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009dfc:	f7ff ff50 	bl	8009ca0 <FLASH_WaitForLastOperation>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d141      	bne.n	8009e8a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8009e06:	2001      	movs	r0, #1
 8009e08:	f000 f84c 	bl	8009ea4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009e0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e10:	f7ff ff46 	bl	8009ca0 <FLASH_WaitForLastOperation>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8009e18:	4b21      	ldr	r3, [pc, #132]	; (8009ea0 <HAL_FLASHEx_Erase+0xd4>)
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	4a20      	ldr	r2, [pc, #128]	; (8009ea0 <HAL_FLASHEx_Erase+0xd4>)
 8009e1e:	f023 0304 	bic.w	r3, r3, #4
 8009e22:	6113      	str	r3, [r2, #16]
 8009e24:	e031      	b.n	8009e8a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8009e26:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e2a:	f7ff ff39 	bl	8009ca0 <FLASH_WaitForLastOperation>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d12a      	bne.n	8009e8a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	60bb      	str	r3, [r7, #8]
 8009e42:	e019      	b.n	8009e78 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8009e44:	68b8      	ldr	r0, [r7, #8]
 8009e46:	f000 f849 	bl	8009edc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009e4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e4e:	f7ff ff27 	bl	8009ca0 <FLASH_WaitForLastOperation>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009e56:	4b12      	ldr	r3, [pc, #72]	; (8009ea0 <HAL_FLASHEx_Erase+0xd4>)
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	4a11      	ldr	r2, [pc, #68]	; (8009ea0 <HAL_FLASHEx_Erase+0xd4>)
 8009e5c:	f023 0302 	bic.w	r3, r3, #2
 8009e60:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	601a      	str	r2, [r3, #0]
            break;
 8009e6e:	e00c      	b.n	8009e8a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e76:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	02da      	lsls	r2, r3, #11
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	4413      	add	r3, r2
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d3dc      	bcc.n	8009e44 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009e8a:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <HAL_FLASHEx_Erase+0xd0>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	761a      	strb	r2, [r3, #24]

  return status;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	20005230 	.word	0x20005230
 8009ea0:	40022000 	.word	0x40022000

08009ea4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009eac:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <FLASH_MassErase+0x30>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8009eb2:	4b09      	ldr	r3, [pc, #36]	; (8009ed8 <FLASH_MassErase+0x34>)
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	4a08      	ldr	r2, [pc, #32]	; (8009ed8 <FLASH_MassErase+0x34>)
 8009eb8:	f043 0304 	orr.w	r3, r3, #4
 8009ebc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009ebe:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <FLASH_MassErase+0x34>)
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	4a05      	ldr	r2, [pc, #20]	; (8009ed8 <FLASH_MassErase+0x34>)
 8009ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ec8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8009eca:	bf00      	nop
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bc80      	pop	{r7}
 8009ed2:	4770      	bx	lr
 8009ed4:	20005230 	.word	0x20005230
 8009ed8:	40022000 	.word	0x40022000

08009edc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009ee4:	4b0b      	ldr	r3, [pc, #44]	; (8009f14 <FLASH_PageErase+0x38>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009eea:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <FLASH_PageErase+0x3c>)
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	4a0a      	ldr	r2, [pc, #40]	; (8009f18 <FLASH_PageErase+0x3c>)
 8009ef0:	f043 0302 	orr.w	r3, r3, #2
 8009ef4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8009ef6:	4a08      	ldr	r2, [pc, #32]	; (8009f18 <FLASH_PageErase+0x3c>)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009efc:	4b06      	ldr	r3, [pc, #24]	; (8009f18 <FLASH_PageErase+0x3c>)
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	4a05      	ldr	r2, [pc, #20]	; (8009f18 <FLASH_PageErase+0x3c>)
 8009f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f06:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bc80      	pop	{r7}
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20005230 	.word	0x20005230
 8009f18:	40022000 	.word	0x40022000

08009f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b08b      	sub	sp, #44	; 0x2c
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009f26:	2300      	movs	r3, #0
 8009f28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009f2e:	e179      	b.n	800a224 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009f30:	2201      	movs	r2, #1
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	fa02 f303 	lsl.w	r3, r2, r3
 8009f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	69fa      	ldr	r2, [r7, #28]
 8009f40:	4013      	ands	r3, r2
 8009f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009f44:	69ba      	ldr	r2, [r7, #24]
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	f040 8168 	bne.w	800a21e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	4a96      	ldr	r2, [pc, #600]	; (800a1ac <HAL_GPIO_Init+0x290>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d05e      	beq.n	800a016 <HAL_GPIO_Init+0xfa>
 8009f58:	4a94      	ldr	r2, [pc, #592]	; (800a1ac <HAL_GPIO_Init+0x290>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d875      	bhi.n	800a04a <HAL_GPIO_Init+0x12e>
 8009f5e:	4a94      	ldr	r2, [pc, #592]	; (800a1b0 <HAL_GPIO_Init+0x294>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d058      	beq.n	800a016 <HAL_GPIO_Init+0xfa>
 8009f64:	4a92      	ldr	r2, [pc, #584]	; (800a1b0 <HAL_GPIO_Init+0x294>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d86f      	bhi.n	800a04a <HAL_GPIO_Init+0x12e>
 8009f6a:	4a92      	ldr	r2, [pc, #584]	; (800a1b4 <HAL_GPIO_Init+0x298>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d052      	beq.n	800a016 <HAL_GPIO_Init+0xfa>
 8009f70:	4a90      	ldr	r2, [pc, #576]	; (800a1b4 <HAL_GPIO_Init+0x298>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d869      	bhi.n	800a04a <HAL_GPIO_Init+0x12e>
 8009f76:	4a90      	ldr	r2, [pc, #576]	; (800a1b8 <HAL_GPIO_Init+0x29c>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d04c      	beq.n	800a016 <HAL_GPIO_Init+0xfa>
 8009f7c:	4a8e      	ldr	r2, [pc, #568]	; (800a1b8 <HAL_GPIO_Init+0x29c>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d863      	bhi.n	800a04a <HAL_GPIO_Init+0x12e>
 8009f82:	4a8e      	ldr	r2, [pc, #568]	; (800a1bc <HAL_GPIO_Init+0x2a0>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d046      	beq.n	800a016 <HAL_GPIO_Init+0xfa>
 8009f88:	4a8c      	ldr	r2, [pc, #560]	; (800a1bc <HAL_GPIO_Init+0x2a0>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d85d      	bhi.n	800a04a <HAL_GPIO_Init+0x12e>
 8009f8e:	2b12      	cmp	r3, #18
 8009f90:	d82a      	bhi.n	8009fe8 <HAL_GPIO_Init+0xcc>
 8009f92:	2b12      	cmp	r3, #18
 8009f94:	d859      	bhi.n	800a04a <HAL_GPIO_Init+0x12e>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <HAL_GPIO_Init+0x80>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	0800a017 	.word	0x0800a017
 8009fa0:	08009ff1 	.word	0x08009ff1
 8009fa4:	0800a003 	.word	0x0800a003
 8009fa8:	0800a045 	.word	0x0800a045
 8009fac:	0800a04b 	.word	0x0800a04b
 8009fb0:	0800a04b 	.word	0x0800a04b
 8009fb4:	0800a04b 	.word	0x0800a04b
 8009fb8:	0800a04b 	.word	0x0800a04b
 8009fbc:	0800a04b 	.word	0x0800a04b
 8009fc0:	0800a04b 	.word	0x0800a04b
 8009fc4:	0800a04b 	.word	0x0800a04b
 8009fc8:	0800a04b 	.word	0x0800a04b
 8009fcc:	0800a04b 	.word	0x0800a04b
 8009fd0:	0800a04b 	.word	0x0800a04b
 8009fd4:	0800a04b 	.word	0x0800a04b
 8009fd8:	0800a04b 	.word	0x0800a04b
 8009fdc:	0800a04b 	.word	0x0800a04b
 8009fe0:	08009ff9 	.word	0x08009ff9
 8009fe4:	0800a00d 	.word	0x0800a00d
 8009fe8:	4a75      	ldr	r2, [pc, #468]	; (800a1c0 <HAL_GPIO_Init+0x2a4>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d013      	beq.n	800a016 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009fee:	e02c      	b.n	800a04a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	623b      	str	r3, [r7, #32]
          break;
 8009ff6:	e029      	b.n	800a04c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	623b      	str	r3, [r7, #32]
          break;
 800a000:	e024      	b.n	800a04c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	3308      	adds	r3, #8
 800a008:	623b      	str	r3, [r7, #32]
          break;
 800a00a:	e01f      	b.n	800a04c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	330c      	adds	r3, #12
 800a012:	623b      	str	r3, [r7, #32]
          break;
 800a014:	e01a      	b.n	800a04c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d102      	bne.n	800a024 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a01e:	2304      	movs	r3, #4
 800a020:	623b      	str	r3, [r7, #32]
          break;
 800a022:	e013      	b.n	800a04c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d105      	bne.n	800a038 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a02c:	2308      	movs	r3, #8
 800a02e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	69fa      	ldr	r2, [r7, #28]
 800a034:	611a      	str	r2, [r3, #16]
          break;
 800a036:	e009      	b.n	800a04c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a038:	2308      	movs	r3, #8
 800a03a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	69fa      	ldr	r2, [r7, #28]
 800a040:	615a      	str	r2, [r3, #20]
          break;
 800a042:	e003      	b.n	800a04c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a044:	2300      	movs	r3, #0
 800a046:	623b      	str	r3, [r7, #32]
          break;
 800a048:	e000      	b.n	800a04c <HAL_GPIO_Init+0x130>
          break;
 800a04a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	2bff      	cmp	r3, #255	; 0xff
 800a050:	d801      	bhi.n	800a056 <HAL_GPIO_Init+0x13a>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	e001      	b.n	800a05a <HAL_GPIO_Init+0x13e>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3304      	adds	r3, #4
 800a05a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	2bff      	cmp	r3, #255	; 0xff
 800a060:	d802      	bhi.n	800a068 <HAL_GPIO_Init+0x14c>
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	e002      	b.n	800a06e <HAL_GPIO_Init+0x152>
 800a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06a:	3b08      	subs	r3, #8
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	210f      	movs	r1, #15
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	fa01 f303 	lsl.w	r3, r1, r3
 800a07c:	43db      	mvns	r3, r3
 800a07e:	401a      	ands	r2, r3
 800a080:	6a39      	ldr	r1, [r7, #32]
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	fa01 f303 	lsl.w	r3, r1, r3
 800a088:	431a      	orrs	r2, r3
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 80c1 	beq.w	800a21e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a09c:	4b49      	ldr	r3, [pc, #292]	; (800a1c4 <HAL_GPIO_Init+0x2a8>)
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	4a48      	ldr	r2, [pc, #288]	; (800a1c4 <HAL_GPIO_Init+0x2a8>)
 800a0a2:	f043 0301 	orr.w	r3, r3, #1
 800a0a6:	6193      	str	r3, [r2, #24]
 800a0a8:	4b46      	ldr	r3, [pc, #280]	; (800a1c4 <HAL_GPIO_Init+0x2a8>)
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	60bb      	str	r3, [r7, #8]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a0b4:	4a44      	ldr	r2, [pc, #272]	; (800a1c8 <HAL_GPIO_Init+0x2ac>)
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	089b      	lsrs	r3, r3, #2
 800a0ba:	3302      	adds	r3, #2
 800a0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c4:	f003 0303 	and.w	r3, r3, #3
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	220f      	movs	r2, #15
 800a0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d0:	43db      	mvns	r3, r3
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a3c      	ldr	r2, [pc, #240]	; (800a1cc <HAL_GPIO_Init+0x2b0>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d01f      	beq.n	800a120 <HAL_GPIO_Init+0x204>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a3b      	ldr	r2, [pc, #236]	; (800a1d0 <HAL_GPIO_Init+0x2b4>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d019      	beq.n	800a11c <HAL_GPIO_Init+0x200>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a3a      	ldr	r2, [pc, #232]	; (800a1d4 <HAL_GPIO_Init+0x2b8>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d013      	beq.n	800a118 <HAL_GPIO_Init+0x1fc>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a39      	ldr	r2, [pc, #228]	; (800a1d8 <HAL_GPIO_Init+0x2bc>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d00d      	beq.n	800a114 <HAL_GPIO_Init+0x1f8>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a38      	ldr	r2, [pc, #224]	; (800a1dc <HAL_GPIO_Init+0x2c0>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d007      	beq.n	800a110 <HAL_GPIO_Init+0x1f4>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a37      	ldr	r2, [pc, #220]	; (800a1e0 <HAL_GPIO_Init+0x2c4>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d101      	bne.n	800a10c <HAL_GPIO_Init+0x1f0>
 800a108:	2305      	movs	r3, #5
 800a10a:	e00a      	b.n	800a122 <HAL_GPIO_Init+0x206>
 800a10c:	2306      	movs	r3, #6
 800a10e:	e008      	b.n	800a122 <HAL_GPIO_Init+0x206>
 800a110:	2304      	movs	r3, #4
 800a112:	e006      	b.n	800a122 <HAL_GPIO_Init+0x206>
 800a114:	2303      	movs	r3, #3
 800a116:	e004      	b.n	800a122 <HAL_GPIO_Init+0x206>
 800a118:	2302      	movs	r3, #2
 800a11a:	e002      	b.n	800a122 <HAL_GPIO_Init+0x206>
 800a11c:	2301      	movs	r3, #1
 800a11e:	e000      	b.n	800a122 <HAL_GPIO_Init+0x206>
 800a120:	2300      	movs	r3, #0
 800a122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a124:	f002 0203 	and.w	r2, r2, #3
 800a128:	0092      	lsls	r2, r2, #2
 800a12a:	4093      	lsls	r3, r2
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	4313      	orrs	r3, r2
 800a130:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a132:	4925      	ldr	r1, [pc, #148]	; (800a1c8 <HAL_GPIO_Init+0x2ac>)
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	089b      	lsrs	r3, r3, #2
 800a138:	3302      	adds	r3, #2
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d006      	beq.n	800a15a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a14c:	4b25      	ldr	r3, [pc, #148]	; (800a1e4 <HAL_GPIO_Init+0x2c8>)
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	4924      	ldr	r1, [pc, #144]	; (800a1e4 <HAL_GPIO_Init+0x2c8>)
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	4313      	orrs	r3, r2
 800a156:	608b      	str	r3, [r1, #8]
 800a158:	e006      	b.n	800a168 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a15a:	4b22      	ldr	r3, [pc, #136]	; (800a1e4 <HAL_GPIO_Init+0x2c8>)
 800a15c:	689a      	ldr	r2, [r3, #8]
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	43db      	mvns	r3, r3
 800a162:	4920      	ldr	r1, [pc, #128]	; (800a1e4 <HAL_GPIO_Init+0x2c8>)
 800a164:	4013      	ands	r3, r2
 800a166:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d006      	beq.n	800a182 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a174:	4b1b      	ldr	r3, [pc, #108]	; (800a1e4 <HAL_GPIO_Init+0x2c8>)
 800a176:	68da      	ldr	r2, [r3, #12]
 800a178:	491a      	ldr	r1, [pc, #104]	; (800a1e4 <HAL_GPIO_Init+0x2c8>)
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60cb      	str	r3, [r1, #12]
 800a180:	e006      	b.n	800a190 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a182:	4b18      	ldr	r3, [pc, #96]	; (800a1e4 <HAL_GPIO_Init+0x2c8>)
 800a184:	68da      	ldr	r2, [r3, #12]
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	43db      	mvns	r3, r3
 800a18a:	4916      	ldr	r1, [pc, #88]	; (800a1e4 <HAL_GPIO_Init+0x2c8>)
 800a18c:	4013      	ands	r3, r2
 800a18e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d025      	beq.n	800a1e8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a19c:	4b11      	ldr	r3, [pc, #68]	; (800a1e4 <HAL_GPIO_Init+0x2c8>)
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	4910      	ldr	r1, [pc, #64]	; (800a1e4 <HAL_GPIO_Init+0x2c8>)
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	604b      	str	r3, [r1, #4]
 800a1a8:	e025      	b.n	800a1f6 <HAL_GPIO_Init+0x2da>
 800a1aa:	bf00      	nop
 800a1ac:	10320000 	.word	0x10320000
 800a1b0:	10310000 	.word	0x10310000
 800a1b4:	10220000 	.word	0x10220000
 800a1b8:	10210000 	.word	0x10210000
 800a1bc:	10120000 	.word	0x10120000
 800a1c0:	10110000 	.word	0x10110000
 800a1c4:	40021000 	.word	0x40021000
 800a1c8:	40010000 	.word	0x40010000
 800a1cc:	40010800 	.word	0x40010800
 800a1d0:	40010c00 	.word	0x40010c00
 800a1d4:	40011000 	.word	0x40011000
 800a1d8:	40011400 	.word	0x40011400
 800a1dc:	40011800 	.word	0x40011800
 800a1e0:	40011c00 	.word	0x40011c00
 800a1e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a1e8:	4b15      	ldr	r3, [pc, #84]	; (800a240 <HAL_GPIO_Init+0x324>)
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	43db      	mvns	r3, r3
 800a1f0:	4913      	ldr	r1, [pc, #76]	; (800a240 <HAL_GPIO_Init+0x324>)
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d006      	beq.n	800a210 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a202:	4b0f      	ldr	r3, [pc, #60]	; (800a240 <HAL_GPIO_Init+0x324>)
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	490e      	ldr	r1, [pc, #56]	; (800a240 <HAL_GPIO_Init+0x324>)
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	600b      	str	r3, [r1, #0]
 800a20e:	e006      	b.n	800a21e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a210:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <HAL_GPIO_Init+0x324>)
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	43db      	mvns	r3, r3
 800a218:	4909      	ldr	r1, [pc, #36]	; (800a240 <HAL_GPIO_Init+0x324>)
 800a21a:	4013      	ands	r3, r2
 800a21c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	3301      	adds	r3, #1
 800a222:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	fa22 f303 	lsr.w	r3, r2, r3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f47f ae7e 	bne.w	8009f30 <HAL_GPIO_Init+0x14>
  }
}
 800a234:	bf00      	nop
 800a236:	bf00      	nop
 800a238:	372c      	adds	r7, #44	; 0x2c
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bc80      	pop	{r7}
 800a23e:	4770      	bx	lr
 800a240:	40010400 	.word	0x40010400

0800a244 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a244:	b480      	push	{r7}
 800a246:	b089      	sub	sp, #36	; 0x24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a24e:	2300      	movs	r3, #0
 800a250:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a252:	e0a6      	b.n	800a3a2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a254:	2201      	movs	r2, #1
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	fa02 f303 	lsl.w	r3, r2, r3
 800a25c:	683a      	ldr	r2, [r7, #0]
 800a25e:	4013      	ands	r3, r2
 800a260:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 8099 	beq.w	800a39c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a26a:	4a54      	ldr	r2, [pc, #336]	; (800a3bc <HAL_GPIO_DeInit+0x178>)
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	089b      	lsrs	r3, r3, #2
 800a270:	3302      	adds	r3, #2
 800a272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a276:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f003 0303 	and.w	r3, r3, #3
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	220f      	movs	r2, #15
 800a282:	fa02 f303 	lsl.w	r3, r2, r3
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	4013      	ands	r3, r2
 800a28a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a4c      	ldr	r2, [pc, #304]	; (800a3c0 <HAL_GPIO_DeInit+0x17c>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d01f      	beq.n	800a2d4 <HAL_GPIO_DeInit+0x90>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a4b      	ldr	r2, [pc, #300]	; (800a3c4 <HAL_GPIO_DeInit+0x180>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d019      	beq.n	800a2d0 <HAL_GPIO_DeInit+0x8c>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a4a      	ldr	r2, [pc, #296]	; (800a3c8 <HAL_GPIO_DeInit+0x184>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d013      	beq.n	800a2cc <HAL_GPIO_DeInit+0x88>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a49      	ldr	r2, [pc, #292]	; (800a3cc <HAL_GPIO_DeInit+0x188>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d00d      	beq.n	800a2c8 <HAL_GPIO_DeInit+0x84>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a48      	ldr	r2, [pc, #288]	; (800a3d0 <HAL_GPIO_DeInit+0x18c>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d007      	beq.n	800a2c4 <HAL_GPIO_DeInit+0x80>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a47      	ldr	r2, [pc, #284]	; (800a3d4 <HAL_GPIO_DeInit+0x190>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d101      	bne.n	800a2c0 <HAL_GPIO_DeInit+0x7c>
 800a2bc:	2305      	movs	r3, #5
 800a2be:	e00a      	b.n	800a2d6 <HAL_GPIO_DeInit+0x92>
 800a2c0:	2306      	movs	r3, #6
 800a2c2:	e008      	b.n	800a2d6 <HAL_GPIO_DeInit+0x92>
 800a2c4:	2304      	movs	r3, #4
 800a2c6:	e006      	b.n	800a2d6 <HAL_GPIO_DeInit+0x92>
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e004      	b.n	800a2d6 <HAL_GPIO_DeInit+0x92>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e002      	b.n	800a2d6 <HAL_GPIO_DeInit+0x92>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e000      	b.n	800a2d6 <HAL_GPIO_DeInit+0x92>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	69fa      	ldr	r2, [r7, #28]
 800a2d8:	f002 0203 	and.w	r2, r2, #3
 800a2dc:	0092      	lsls	r2, r2, #2
 800a2de:	4093      	lsls	r3, r2
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d132      	bne.n	800a34c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a2e6:	4b3c      	ldr	r3, [pc, #240]	; (800a3d8 <HAL_GPIO_DeInit+0x194>)
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	43db      	mvns	r3, r3
 800a2ee:	493a      	ldr	r1, [pc, #232]	; (800a3d8 <HAL_GPIO_DeInit+0x194>)
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a2f4:	4b38      	ldr	r3, [pc, #224]	; (800a3d8 <HAL_GPIO_DeInit+0x194>)
 800a2f6:	685a      	ldr	r2, [r3, #4]
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	43db      	mvns	r3, r3
 800a2fc:	4936      	ldr	r1, [pc, #216]	; (800a3d8 <HAL_GPIO_DeInit+0x194>)
 800a2fe:	4013      	ands	r3, r2
 800a300:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a302:	4b35      	ldr	r3, [pc, #212]	; (800a3d8 <HAL_GPIO_DeInit+0x194>)
 800a304:	68da      	ldr	r2, [r3, #12]
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	43db      	mvns	r3, r3
 800a30a:	4933      	ldr	r1, [pc, #204]	; (800a3d8 <HAL_GPIO_DeInit+0x194>)
 800a30c:	4013      	ands	r3, r2
 800a30e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a310:	4b31      	ldr	r3, [pc, #196]	; (800a3d8 <HAL_GPIO_DeInit+0x194>)
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	43db      	mvns	r3, r3
 800a318:	492f      	ldr	r1, [pc, #188]	; (800a3d8 <HAL_GPIO_DeInit+0x194>)
 800a31a:	4013      	ands	r3, r2
 800a31c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	f003 0303 	and.w	r3, r3, #3
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	220f      	movs	r2, #15
 800a328:	fa02 f303 	lsl.w	r3, r2, r3
 800a32c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a32e:	4a23      	ldr	r2, [pc, #140]	; (800a3bc <HAL_GPIO_DeInit+0x178>)
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	089b      	lsrs	r3, r3, #2
 800a334:	3302      	adds	r3, #2
 800a336:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	43da      	mvns	r2, r3
 800a33e:	481f      	ldr	r0, [pc, #124]	; (800a3bc <HAL_GPIO_DeInit+0x178>)
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	089b      	lsrs	r3, r3, #2
 800a344:	400a      	ands	r2, r1
 800a346:	3302      	adds	r3, #2
 800a348:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	2bff      	cmp	r3, #255	; 0xff
 800a350:	d801      	bhi.n	800a356 <HAL_GPIO_DeInit+0x112>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	e001      	b.n	800a35a <HAL_GPIO_DeInit+0x116>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	3304      	adds	r3, #4
 800a35a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	2bff      	cmp	r3, #255	; 0xff
 800a360:	d802      	bhi.n	800a368 <HAL_GPIO_DeInit+0x124>
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	e002      	b.n	800a36e <HAL_GPIO_DeInit+0x12a>
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	3b08      	subs	r3, #8
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	210f      	movs	r1, #15
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	fa01 f303 	lsl.w	r3, r1, r3
 800a37c:	43db      	mvns	r3, r3
 800a37e:	401a      	ands	r2, r3
 800a380:	2104      	movs	r1, #4
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	fa01 f303 	lsl.w	r3, r1, r3
 800a388:	431a      	orrs	r2, r3
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68da      	ldr	r2, [r3, #12]
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	43db      	mvns	r3, r3
 800a396:	401a      	ands	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f47f af52 	bne.w	800a254 <HAL_GPIO_DeInit+0x10>
  }
}
 800a3b0:	bf00      	nop
 800a3b2:	bf00      	nop
 800a3b4:	3724      	adds	r7, #36	; 0x24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bc80      	pop	{r7}
 800a3ba:	4770      	bx	lr
 800a3bc:	40010000 	.word	0x40010000
 800a3c0:	40010800 	.word	0x40010800
 800a3c4:	40010c00 	.word	0x40010c00
 800a3c8:	40011000 	.word	0x40011000
 800a3cc:	40011400 	.word	0x40011400
 800a3d0:	40011800 	.word	0x40011800
 800a3d4:	40011c00 	.word	0x40011c00
 800a3d8:	40010400 	.word	0x40010400

0800a3dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	807b      	strh	r3, [r7, #2]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a3ec:	787b      	ldrb	r3, [r7, #1]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a3f2:	887a      	ldrh	r2, [r7, #2]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a3f8:	e003      	b.n	800a402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a3fa:	887b      	ldrh	r3, [r7, #2]
 800a3fc:	041a      	lsls	r2, r3, #16
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	611a      	str	r2, [r3, #16]
}
 800a402:	bf00      	nop
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	bc80      	pop	{r7}
 800a40a:	4770      	bx	lr

0800a40c <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FSMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FSMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e03e      	b.n	800a4a0 <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d106      	bne.n	800a43c <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f7fa fafa 	bl	8004a30 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FSMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	3304      	adds	r3, #4
 800a444:	4619      	mov	r1, r3
 800a446:	4610      	mov	r0, r2
 800a448:	f004 fc38 	bl	800ecbc <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FSMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6818      	ldr	r0, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	461a      	mov	r2, r3
 800a456:	68b9      	ldr	r1, [r7, #8]
 800a458:	f004 fc7a 	bl	800ed50 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FSMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6818      	ldr	r0, [r3, #0]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	461a      	mov	r2, r3
 800a466:	6879      	ldr	r1, [r7, #4]
 800a468:	f004 fca6 	bl	800edb8 <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FSMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	2b10      	cmp	r3, #16
 800a472:	d108      	bne.n	800a486 <HAL_NAND_Init+0x7a>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f042 0204 	orr.w	r2, r2, #4
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	e007      	b.n	800a496 <HAL_NAND_Init+0x8a>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6a1a      	ldr	r2, [r3, #32]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f042 0204 	orr.w	r2, r2, #4
 800a494:	621a      	str	r2, [r3, #32]

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FSMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_RISING_EDGE))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	2b10      	cmp	r3, #16
 800a4b6:	d10a      	bne.n	800a4ce <HAL_NAND_IRQHandler+0x26>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	bf0c      	ite	eq
 800a4c6:	2301      	moveq	r3, #1
 800a4c8:	2300      	movne	r3, #0
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	e009      	b.n	800a4e2 <HAL_NAND_IRQHandler+0x3a>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	bf0c      	ite	eq
 800a4dc:	2301      	moveq	r3, #1
 800a4de:	2300      	movne	r3, #0
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d017      	beq.n	800a516 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f8b2 	bl	800a650 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
    __FSMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_RISING_EDGE);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	2b10      	cmp	r3, #16
 800a4f2:	d108      	bne.n	800a506 <HAL_NAND_IRQHandler+0x5e>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f022 0201 	bic.w	r2, r2, #1
 800a502:	605a      	str	r2, [r3, #4]
 800a504:	e007      	b.n	800a516 <HAL_NAND_IRQHandler+0x6e>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 0201 	bic.w	r2, r2, #1
 800a514:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Level flag */
  if (__FSMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_LEVEL))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	2b10      	cmp	r3, #16
 800a51c:	d10a      	bne.n	800a534 <HAL_NAND_IRQHandler+0x8c>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	f003 0302 	and.w	r3, r3, #2
 800a528:	2b02      	cmp	r3, #2
 800a52a:	bf0c      	ite	eq
 800a52c:	2301      	moveq	r3, #1
 800a52e:	2300      	movne	r3, #0
 800a530:	b2db      	uxtb	r3, r3
 800a532:	e009      	b.n	800a548 <HAL_NAND_IRQHandler+0xa0>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	f003 0302 	and.w	r3, r3, #2
 800a53e:	2b02      	cmp	r3, #2
 800a540:	bf0c      	ite	eq
 800a542:	2301      	moveq	r3, #1
 800a544:	2300      	movne	r3, #0
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d017      	beq.n	800a57c <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f87f 	bl	800a650 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
    __FSMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_LEVEL);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	2b10      	cmp	r3, #16
 800a558:	d108      	bne.n	800a56c <HAL_NAND_IRQHandler+0xc4>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f022 0202 	bic.w	r2, r2, #2
 800a568:	605a      	str	r2, [r3, #4]
 800a56a:	e007      	b.n	800a57c <HAL_NAND_IRQHandler+0xd4>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f022 0202 	bic.w	r2, r2, #2
 800a57a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FSMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_FALLING_EDGE))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	2b10      	cmp	r3, #16
 800a582:	d10a      	bne.n	800a59a <HAL_NAND_IRQHandler+0xf2>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	f003 0304 	and.w	r3, r3, #4
 800a58e:	2b04      	cmp	r3, #4
 800a590:	bf0c      	ite	eq
 800a592:	2301      	moveq	r3, #1
 800a594:	2300      	movne	r3, #0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	e009      	b.n	800a5ae <HAL_NAND_IRQHandler+0x106>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	bf0c      	ite	eq
 800a5a8:	2301      	moveq	r3, #1
 800a5aa:	2300      	movne	r3, #0
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d017      	beq.n	800a5e2 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f84c 	bl	800a650 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
    __FSMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_FALLING_EDGE);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	2b10      	cmp	r3, #16
 800a5be:	d108      	bne.n	800a5d2 <HAL_NAND_IRQHandler+0x12a>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685a      	ldr	r2, [r3, #4]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 0204 	bic.w	r2, r2, #4
 800a5ce:	605a      	str	r2, [r3, #4]
 800a5d0:	e007      	b.n	800a5e2 <HAL_NAND_IRQHandler+0x13a>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0204 	bic.w	r2, r2, #4
 800a5e0:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FSMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_FEMPT))
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	2b10      	cmp	r3, #16
 800a5e8:	d10a      	bne.n	800a600 <HAL_NAND_IRQHandler+0x158>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f4:	2b40      	cmp	r3, #64	; 0x40
 800a5f6:	bf0c      	ite	eq
 800a5f8:	2301      	moveq	r3, #1
 800a5fa:	2300      	movne	r3, #0
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	e009      	b.n	800a614 <HAL_NAND_IRQHandler+0x16c>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a60a:	2b40      	cmp	r3, #64	; 0x40
 800a60c:	bf0c      	ite	eq
 800a60e:	2301      	moveq	r3, #1
 800a610:	2300      	movne	r3, #0
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b00      	cmp	r3, #0
 800a616:	d017      	beq.n	800a648 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f819 	bl	800a650 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
    __FSMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_FEMPT);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	2b10      	cmp	r3, #16
 800a624:	d108      	bne.n	800a638 <HAL_NAND_IRQHandler+0x190>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a634:	605a      	str	r2, [r3, #4]
  }

}
 800a636:	e007      	b.n	800a648 <HAL_NAND_IRQHandler+0x1a0>
    __FSMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_FEMPT);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a646:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a648:	bf00      	nop
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bc80      	pop	{r7}
 800a660:	4770      	bx	lr

0800a662 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a662:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a664:	b08b      	sub	sp, #44	; 0x2c
 800a666:	af06      	add	r7, sp, #24
 800a668:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e0f1      	b.n	800a858 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d106      	bne.n	800a68e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f008 fce1 	bl	8013050 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2203      	movs	r2, #3
 800a692:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f004 fbe6 	bl	800ee6c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	603b      	str	r3, [r7, #0]
 800a6a6:	687e      	ldr	r6, [r7, #4]
 800a6a8:	466d      	mov	r5, sp
 800a6aa:	f106 0410 	add.w	r4, r6, #16
 800a6ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	602b      	str	r3, [r5, #0]
 800a6b6:	1d33      	adds	r3, r6, #4
 800a6b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6ba:	6838      	ldr	r0, [r7, #0]
 800a6bc:	f004 fbb0 	bl	800ee20 <USB_CoreInit>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d005      	beq.n	800a6d2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2202      	movs	r2, #2
 800a6ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e0c2      	b.n	800a858 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f004 fbe1 	bl	800eea0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73fb      	strb	r3, [r7, #15]
 800a6e2:	e040      	b.n	800a766 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
 800a6e6:	6879      	ldr	r1, [r7, #4]
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	440b      	add	r3, r1
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	1c5a      	adds	r2, r3, #1
 800a700:	4613      	mov	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	00db      	lsls	r3, r3, #3
 800a708:	440b      	add	r3, r1
 800a70a:	7bfa      	ldrb	r2, [r7, #15]
 800a70c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
 800a710:	6879      	ldr	r1, [r7, #4]
 800a712:	1c5a      	adds	r2, r3, #1
 800a714:	4613      	mov	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	00db      	lsls	r3, r3, #3
 800a71c:	440b      	add	r3, r1
 800a71e:	3303      	adds	r3, #3
 800a720:	2200      	movs	r2, #0
 800a722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a724:	7bfa      	ldrb	r2, [r7, #15]
 800a726:	6879      	ldr	r1, [r7, #4]
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	440b      	add	r3, r1
 800a732:	3338      	adds	r3, #56	; 0x38
 800a734:	2200      	movs	r2, #0
 800a736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a738:	7bfa      	ldrb	r2, [r7, #15]
 800a73a:	6879      	ldr	r1, [r7, #4]
 800a73c:	4613      	mov	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	00db      	lsls	r3, r3, #3
 800a744:	440b      	add	r3, r1
 800a746:	333c      	adds	r3, #60	; 0x3c
 800a748:	2200      	movs	r2, #0
 800a74a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a74c:	7bfa      	ldrb	r2, [r7, #15]
 800a74e:	6879      	ldr	r1, [r7, #4]
 800a750:	4613      	mov	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	00db      	lsls	r3, r3, #3
 800a758:	440b      	add	r3, r1
 800a75a:	3340      	adds	r3, #64	; 0x40
 800a75c:	2200      	movs	r2, #0
 800a75e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a760:	7bfb      	ldrb	r3, [r7, #15]
 800a762:	3301      	adds	r3, #1
 800a764:	73fb      	strb	r3, [r7, #15]
 800a766:	7bfa      	ldrb	r2, [r7, #15]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d3b9      	bcc.n	800a6e4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a770:	2300      	movs	r3, #0
 800a772:	73fb      	strb	r3, [r7, #15]
 800a774:	e044      	b.n	800a800 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a776:	7bfa      	ldrb	r2, [r7, #15]
 800a778:	6879      	ldr	r1, [r7, #4]
 800a77a:	4613      	mov	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	00db      	lsls	r3, r3, #3
 800a782:	440b      	add	r3, r1
 800a784:	f203 1369 	addw	r3, r3, #361	; 0x169
 800a788:	2200      	movs	r2, #0
 800a78a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a78c:	7bfa      	ldrb	r2, [r7, #15]
 800a78e:	6879      	ldr	r1, [r7, #4]
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	00db      	lsls	r3, r3, #3
 800a798:	440b      	add	r3, r1
 800a79a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a79e:	7bfa      	ldrb	r2, [r7, #15]
 800a7a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a7a2:	7bfa      	ldrb	r2, [r7, #15]
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	00db      	lsls	r3, r3, #3
 800a7ae:	440b      	add	r3, r1
 800a7b0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a7b8:	7bfa      	ldrb	r2, [r7, #15]
 800a7ba:	6879      	ldr	r1, [r7, #4]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	00db      	lsls	r3, r3, #3
 800a7c4:	440b      	add	r3, r1
 800a7c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a7ce:	7bfa      	ldrb	r2, [r7, #15]
 800a7d0:	6879      	ldr	r1, [r7, #4]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	4413      	add	r3, r2
 800a7d8:	00db      	lsls	r3, r3, #3
 800a7da:	440b      	add	r3, r1
 800a7dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a7e4:	7bfa      	ldrb	r2, [r7, #15]
 800a7e6:	6879      	ldr	r1, [r7, #4]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	4413      	add	r3, r2
 800a7ee:	00db      	lsls	r3, r3, #3
 800a7f0:	440b      	add	r3, r1
 800a7f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	73fb      	strb	r3, [r7, #15]
 800a800:	7bfa      	ldrb	r2, [r7, #15]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	429a      	cmp	r2, r3
 800a808:	d3b5      	bcc.n	800a776 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	603b      	str	r3, [r7, #0]
 800a810:	687e      	ldr	r6, [r7, #4]
 800a812:	466d      	mov	r5, sp
 800a814:	f106 0410 	add.w	r4, r6, #16
 800a818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a81a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	602b      	str	r3, [r5, #0]
 800a820:	1d33      	adds	r3, r6, #4
 800a822:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a824:	6838      	ldr	r0, [r7, #0]
 800a826:	f004 fb47 	bl	800eeb8 <USB_DevInit>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d005      	beq.n	800a83c <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2202      	movs	r2, #2
 800a834:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e00d      	b.n	800a858 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4618      	mov	r0, r3
 800a852:	f006 fdc8 	bl	80113e6 <USB_DevDisconnect>

  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a860 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d101      	bne.n	800a876 <HAL_PCD_Start+0x16>
 800a872:	2302      	movs	r3, #2
 800a874:	e016      	b.n	800a8a4 <HAL_PCD_Start+0x44>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4618      	mov	r0, r3
 800a884:	f004 fadc 	bl	800ee40 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800a888:	2101      	movs	r1, #1
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f008 fe4b 	bl	8013526 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4618      	mov	r0, r3
 800a896:	f006 fd9c 	bl	80113d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f006 fd9e 	bl	80113fa <USB_ReadInterrupts>
 800a8be:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d003      	beq.n	800a8d2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fb1b 	bl	800af06 <PCD_EP_ISR_Handler>

    return;
 800a8d0:	e119      	b.n	800ab06 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d013      	beq.n	800a904 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8ee:	b292      	uxth	r2, r2
 800a8f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f008 fc1e 	bl	8013136 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f905 	bl	800ab0c <HAL_PCD_SetAddress>

    return;
 800a902:	e100      	b.n	800ab06 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00c      	beq.n	800a928 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a916:	b29a      	uxth	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a920:	b292      	uxth	r2, r2
 800a922:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a926:	e0ee      	b.n	800ab06 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00c      	beq.n	800a94c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a944:	b292      	uxth	r2, r2
 800a946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a94a:	e0dc      	b.n	800ab06 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a952:	2b00      	cmp	r3, #0
 800a954:	d027      	beq.n	800a9a6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a95e:	b29a      	uxth	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f022 0204 	bic.w	r2, r2, #4
 800a968:	b292      	uxth	r2, r2
 800a96a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a976:	b29a      	uxth	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f022 0208 	bic.w	r2, r2, #8
 800a980:	b292      	uxth	r2, r2
 800a982:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f008 fc0e 	bl	80131a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a994:	b29a      	uxth	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a99e:	b292      	uxth	r2, r2
 800a9a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a9a4:	e0af      	b.n	800ab06 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 8083 	beq.w	800aab8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	77fb      	strb	r3, [r7, #31]
 800a9b6:	e010      	b.n	800a9da <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	7ffb      	ldrb	r3, [r7, #31]
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	441a      	add	r2, r3
 800a9c4:	7ffb      	ldrb	r3, [r7, #31]
 800a9c6:	8812      	ldrh	r2, [r2, #0]
 800a9c8:	b292      	uxth	r2, r2
 800a9ca:	005b      	lsls	r3, r3, #1
 800a9cc:	3320      	adds	r3, #32
 800a9ce:	443b      	add	r3, r7
 800a9d0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800a9d4:	7ffb      	ldrb	r3, [r7, #31]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	77fb      	strb	r3, [r7, #31]
 800a9da:	7ffb      	ldrb	r3, [r7, #31]
 800a9dc:	2b07      	cmp	r3, #7
 800a9de:	d9eb      	bls.n	800a9b8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f042 0201 	orr.w	r2, r2, #1
 800a9f2:	b292      	uxth	r2, r2
 800a9f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f022 0201 	bic.w	r2, r2, #1
 800aa0a:	b292      	uxth	r2, r2
 800aa0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800aa10:	bf00      	nop
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d0f6      	beq.n	800aa12 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa36:	b292      	uxth	r2, r2
 800aa38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	77fb      	strb	r3, [r7, #31]
 800aa40:	e00f      	b.n	800aa62 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800aa42:	7ffb      	ldrb	r3, [r7, #31]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	6812      	ldr	r2, [r2, #0]
 800aa48:	4611      	mov	r1, r2
 800aa4a:	7ffa      	ldrb	r2, [r7, #31]
 800aa4c:	0092      	lsls	r2, r2, #2
 800aa4e:	440a      	add	r2, r1
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	3320      	adds	r3, #32
 800aa54:	443b      	add	r3, r7
 800aa56:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800aa5a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800aa5c:	7ffb      	ldrb	r3, [r7, #31]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	77fb      	strb	r3, [r7, #31]
 800aa62:	7ffb      	ldrb	r3, [r7, #31]
 800aa64:	2b07      	cmp	r3, #7
 800aa66:	d9ec      	bls.n	800aa42 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f042 0208 	orr.w	r2, r2, #8
 800aa7a:	b292      	uxth	r2, r2
 800aa7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa92:	b292      	uxth	r2, r2
 800aa94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f042 0204 	orr.w	r2, r2, #4
 800aaaa:	b292      	uxth	r2, r2
 800aaac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f008 fb5f 	bl	8013174 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800aab6:	e026      	b.n	800ab06 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00f      	beq.n	800aae2 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800aad4:	b292      	uxth	r2, r2
 800aad6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f008 fb1d 	bl	801311a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800aae0:	e011      	b.n	800ab06 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00c      	beq.n	800ab06 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aafe:	b292      	uxth	r2, r2
 800ab00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800ab04:	bf00      	nop
  }
}
 800ab06:	3720      	adds	r7, #32
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d101      	bne.n	800ab26 <HAL_PCD_SetAddress+0x1a>
 800ab22:	2302      	movs	r3, #2
 800ab24:	e013      	b.n	800ab4e <HAL_PCD_SetAddress+0x42>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	78fa      	ldrb	r2, [r7, #3]
 800ab32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	78fa      	ldrb	r2, [r7, #3]
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f006 fc34 	bl	80113ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b084      	sub	sp, #16
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	4608      	mov	r0, r1
 800ab60:	4611      	mov	r1, r2
 800ab62:	461a      	mov	r2, r3
 800ab64:	4603      	mov	r3, r0
 800ab66:	70fb      	strb	r3, [r7, #3]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	803b      	strh	r3, [r7, #0]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ab70:	2300      	movs	r3, #0
 800ab72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ab74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	da0e      	bge.n	800ab9a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab7c:	78fb      	ldrb	r3, [r7, #3]
 800ab7e:	f003 0307 	and.w	r3, r3, #7
 800ab82:	1c5a      	adds	r2, r3, #1
 800ab84:	4613      	mov	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	00db      	lsls	r3, r3, #3
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	4413      	add	r3, r2
 800ab90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2201      	movs	r2, #1
 800ab96:	705a      	strb	r2, [r3, #1]
 800ab98:	e00e      	b.n	800abb8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab9a:	78fb      	ldrb	r3, [r7, #3]
 800ab9c:	f003 0207 	and.w	r2, r3, #7
 800aba0:	4613      	mov	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	4413      	add	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800abb8:	78fb      	ldrb	r3, [r7, #3]
 800abba:	f003 0307 	and.w	r3, r3, #7
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800abc4:	883a      	ldrh	r2, [r7, #0]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	78ba      	ldrb	r2, [r7, #2]
 800abce:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800abd0:	78bb      	ldrb	r3, [r7, #2]
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d102      	bne.n	800abdc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d101      	bne.n	800abea <HAL_PCD_EP_Open+0x94>
 800abe6:	2302      	movs	r3, #2
 800abe8:	e00e      	b.n	800ac08 <HAL_PCD_EP_Open+0xb2>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68f9      	ldr	r1, [r7, #12]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f004 f97d 	bl	800eef8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800ac06:	7afb      	ldrb	r3, [r7, #11]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ac1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	da0e      	bge.n	800ac42 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac24:	78fb      	ldrb	r3, [r7, #3]
 800ac26:	f003 0307 	and.w	r3, r3, #7
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	4413      	add	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	705a      	strb	r2, [r3, #1]
 800ac40:	e00e      	b.n	800ac60 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac42:	78fb      	ldrb	r3, [r7, #3]
 800ac44:	f003 0207 	and.w	r2, r3, #7
 800ac48:	4613      	mov	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	00db      	lsls	r3, r3, #3
 800ac50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	4413      	add	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac60:	78fb      	ldrb	r3, [r7, #3]
 800ac62:	f003 0307 	and.w	r3, r3, #7
 800ac66:	b2da      	uxtb	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d101      	bne.n	800ac7a <HAL_PCD_EP_Close+0x6a>
 800ac76:	2302      	movs	r3, #2
 800ac78:	e00e      	b.n	800ac98 <HAL_PCD_EP_Close+0x88>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68f9      	ldr	r1, [r7, #12]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f004 fcf5 	bl	800f678 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	607a      	str	r2, [r7, #4]
 800acaa:	603b      	str	r3, [r7, #0]
 800acac:	460b      	mov	r3, r1
 800acae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800acb0:	7afb      	ldrb	r3, [r7, #11]
 800acb2:	f003 0207 	and.w	r2, r3, #7
 800acb6:	4613      	mov	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	4413      	add	r3, r2
 800acc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	2200      	movs	r2, #0
 800acd8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2200      	movs	r2, #0
 800acde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ace0:	7afb      	ldrb	r3, [r7, #11]
 800ace2:	f003 0307 	and.w	r3, r3, #7
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6979      	ldr	r1, [r7, #20]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f004 feac 	bl	800fa50 <USB_EPStartXfer>

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3718      	adds	r7, #24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b083      	sub	sp, #12
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ad0e:	78fb      	ldrb	r3, [r7, #3]
 800ad10:	f003 0207 	and.w	r2, r3, #7
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	4613      	mov	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	00db      	lsls	r3, r3, #3
 800ad1e:	440b      	add	r3, r1
 800ad20:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800ad24:	681b      	ldr	r3, [r3, #0]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bc80      	pop	{r7}
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	607a      	str	r2, [r7, #4]
 800ad3a:	603b      	str	r3, [r7, #0]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad40:	7afb      	ldrb	r3, [r7, #11]
 800ad42:	f003 0307 	and.w	r3, r3, #7
 800ad46:	1c5a      	adds	r2, r3, #1
 800ad48:	4613      	mov	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	00db      	lsls	r3, r3, #3
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	4413      	add	r3, r2
 800ad54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2200      	movs	r2, #0
 800ad74:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad7c:	7afb      	ldrb	r3, [r7, #11]
 800ad7e:	f003 0307 	and.w	r3, r3, #7
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6979      	ldr	r1, [r7, #20]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f004 fe5e 	bl	800fa50 <USB_EPStartXfer>

  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b084      	sub	sp, #16
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	460b      	mov	r3, r1
 800ada8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800adaa:	78fb      	ldrb	r3, [r7, #3]
 800adac:	f003 0207 	and.w	r2, r3, #7
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d901      	bls.n	800adbc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	e04c      	b.n	800ae56 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800adbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	da0e      	bge.n	800ade2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800adc4:	78fb      	ldrb	r3, [r7, #3]
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	4613      	mov	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	4413      	add	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2201      	movs	r2, #1
 800adde:	705a      	strb	r2, [r3, #1]
 800ade0:	e00c      	b.n	800adfc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ade2:	78fa      	ldrb	r2, [r7, #3]
 800ade4:	4613      	mov	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	4413      	add	r3, r2
 800adf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2201      	movs	r2, #1
 800ae00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae02:	78fb      	ldrb	r3, [r7, #3]
 800ae04:	f003 0307 	and.w	r3, r3, #7
 800ae08:	b2da      	uxtb	r2, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d101      	bne.n	800ae1c <HAL_PCD_EP_SetStall+0x7e>
 800ae18:	2302      	movs	r3, #2
 800ae1a:	e01c      	b.n	800ae56 <HAL_PCD_EP_SetStall+0xb8>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68f9      	ldr	r1, [r7, #12]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f006 f9c1 	bl	80111b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d108      	bne.n	800ae4c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ae44:	4619      	mov	r1, r3
 800ae46:	4610      	mov	r0, r2
 800ae48:	f006 fae6 	bl	8011418 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b084      	sub	sp, #16
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	460b      	mov	r3, r1
 800ae68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ae6a:	78fb      	ldrb	r3, [r7, #3]
 800ae6c:	f003 020f 	and.w	r2, r3, #15
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d901      	bls.n	800ae7c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e040      	b.n	800aefe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ae7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	da0e      	bge.n	800aea2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae84:	78fb      	ldrb	r3, [r7, #3]
 800ae86:	f003 0307 	and.w	r3, r3, #7
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	00db      	lsls	r3, r3, #3
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	4413      	add	r3, r2
 800ae98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	705a      	strb	r2, [r3, #1]
 800aea0:	e00e      	b.n	800aec0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aea2:	78fb      	ldrb	r3, [r7, #3]
 800aea4:	f003 0207 	and.w	r2, r3, #7
 800aea8:	4613      	mov	r3, r2
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	4413      	add	r3, r2
 800aeae:	00db      	lsls	r3, r3, #3
 800aeb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aec6:	78fb      	ldrb	r3, [r7, #3]
 800aec8:	f003 0307 	and.w	r3, r3, #7
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d101      	bne.n	800aee0 <HAL_PCD_EP_ClrStall+0x82>
 800aedc:	2302      	movs	r3, #2
 800aede:	e00e      	b.n	800aefe <HAL_PCD_EP_ClrStall+0xa0>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68f9      	ldr	r1, [r7, #12]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f006 f9af 	bl	8011252 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b096      	sub	sp, #88	; 0x58
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800af0e:	e3bf      	b.n	800b690 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800af1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af20:	b2db      	uxtb	r3, r3
 800af22:	f003 030f 	and.w	r3, r3, #15
 800af26:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800af2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f040 8179 	bne.w	800b226 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800af34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af38:	f003 0310 	and.w	r3, r3, #16
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d152      	bne.n	800afe6 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	b29b      	uxth	r3, r3
 800af48:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800af4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af50:	81fb      	strh	r3, [r7, #14]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	89fb      	ldrh	r3, [r7, #14]
 800af58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af60:	b29b      	uxth	r3, r3
 800af62:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	3328      	adds	r3, #40	; 0x28
 800af68:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af72:	b29b      	uxth	r3, r3
 800af74:	461a      	mov	r2, r3
 800af76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	00db      	lsls	r3, r3, #3
 800af7c:	4413      	add	r3, r2
 800af7e:	3302      	adds	r3, #2
 800af80:	005b      	lsls	r3, r3, #1
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	6812      	ldr	r2, [r2, #0]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800af92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af94:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800af96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af98:	695a      	ldr	r2, [r3, #20]
 800af9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af9c:	69db      	ldr	r3, [r3, #28]
 800af9e:	441a      	add	r2, r3
 800afa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afa2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800afa4:	2100      	movs	r1, #0
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f008 f89d 	bl	80130e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f000 836b 	beq.w	800b690 <PCD_EP_ISR_Handler+0x78a>
 800afba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afbc:	699b      	ldr	r3, [r3, #24]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f040 8366 	bne.w	800b690 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	b292      	uxth	r2, r2
 800afd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800afe4:	e354      	b.n	800b690 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800afec:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800aff8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800affc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b000:	2b00      	cmp	r3, #0
 800b002:	d034      	beq.n	800b06e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	461a      	mov	r2, r3
 800b010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	00db      	lsls	r3, r3, #3
 800b016:	4413      	add	r3, r2
 800b018:	3306      	adds	r3, #6
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	6812      	ldr	r2, [r2, #0]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b02e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6818      	ldr	r0, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800b03a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b03c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b03e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b040:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b042:	b29b      	uxth	r3, r3
 800b044:	f006 fa38 	bl	80114b8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	b29a      	uxth	r2, r3
 800b050:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b054:	4013      	ands	r3, r2
 800b056:	823b      	strh	r3, [r7, #16]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	8a3a      	ldrh	r2, [r7, #16]
 800b05e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b062:	b292      	uxth	r2, r2
 800b064:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f008 f810 	bl	801308c <HAL_PCD_SetupStageCallback>
 800b06c:	e310      	b.n	800b690 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b06e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800b072:	2b00      	cmp	r3, #0
 800b074:	f280 830c 	bge.w	800b690 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	b29a      	uxth	r2, r3
 800b080:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b084:	4013      	ands	r3, r2
 800b086:	83fb      	strh	r3, [r7, #30]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	8bfa      	ldrh	r2, [r7, #30]
 800b08e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b092:	b292      	uxth	r2, r2
 800b094:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	00db      	lsls	r3, r3, #3
 800b0a8:	4413      	add	r3, r2
 800b0aa:	3306      	adds	r3, #6
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	6812      	ldr	r2, [r2, #0]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b0be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b0c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0c4:	69db      	ldr	r3, [r3, #28]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d019      	beq.n	800b0fe <PCD_EP_ISR_Handler+0x1f8>
 800b0ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d015      	beq.n	800b0fe <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0d8:	6959      	ldr	r1, [r3, #20]
 800b0da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	f006 f9e8 	bl	80114b8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b0e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0ea:	695a      	ldr	r2, [r3, #20]
 800b0ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0ee:	69db      	ldr	r3, [r3, #28]
 800b0f0:	441a      	add	r2, r3
 800b0f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f007 ffd9 	bl	80130b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	881b      	ldrh	r3, [r3, #0]
 800b104:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800b108:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b10c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b110:	2b00      	cmp	r3, #0
 800b112:	f040 82bd 	bne.w	800b690 <PCD_EP_ISR_Handler+0x78a>
 800b116:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b11a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b11e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b122:	f000 82b5 	beq.w	800b690 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	61bb      	str	r3, [r7, #24]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b134:	b29b      	uxth	r3, r3
 800b136:	461a      	mov	r2, r3
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	4413      	add	r3, r2
 800b13c:	61bb      	str	r3, [r7, #24]
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b144:	617b      	str	r3, [r7, #20]
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	881b      	ldrh	r3, [r3, #0]
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b150:	b29a      	uxth	r2, r3
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	801a      	strh	r2, [r3, #0]
 800b156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	2b3e      	cmp	r3, #62	; 0x3e
 800b15c:	d91d      	bls.n	800b19a <PCD_EP_ISR_Handler+0x294>
 800b15e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	095b      	lsrs	r3, r3, #5
 800b164:	647b      	str	r3, [r7, #68]	; 0x44
 800b166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	f003 031f 	and.w	r3, r3, #31
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d102      	bne.n	800b178 <PCD_EP_ISR_Handler+0x272>
 800b172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b174:	3b01      	subs	r3, #1
 800b176:	647b      	str	r3, [r7, #68]	; 0x44
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b180:	b29b      	uxth	r3, r3
 800b182:	029b      	lsls	r3, r3, #10
 800b184:	b29b      	uxth	r3, r3
 800b186:	4313      	orrs	r3, r2
 800b188:	b29b      	uxth	r3, r3
 800b18a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b18e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b192:	b29a      	uxth	r2, r3
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	801a      	strh	r2, [r3, #0]
 800b198:	e026      	b.n	800b1e8 <PCD_EP_ISR_Handler+0x2e2>
 800b19a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10a      	bne.n	800b1b8 <PCD_EP_ISR_Handler+0x2b2>
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	801a      	strh	r2, [r3, #0]
 800b1b6:	e017      	b.n	800b1e8 <PCD_EP_ISR_Handler+0x2e2>
 800b1b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	085b      	lsrs	r3, r3, #1
 800b1be:	647b      	str	r3, [r7, #68]	; 0x44
 800b1c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	f003 0301 	and.w	r3, r3, #1
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <PCD_EP_ISR_Handler+0x2cc>
 800b1cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	647b      	str	r3, [r7, #68]	; 0x44
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	029b      	lsls	r3, r3, #10
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1f8:	827b      	strh	r3, [r7, #18]
 800b1fa:	8a7b      	ldrh	r3, [r7, #18]
 800b1fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b200:	827b      	strh	r3, [r7, #18]
 800b202:	8a7b      	ldrh	r3, [r7, #18]
 800b204:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b208:	827b      	strh	r3, [r7, #18]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	8a7b      	ldrh	r3, [r7, #18]
 800b210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b220:	b29b      	uxth	r3, r3
 800b222:	8013      	strh	r3, [r2, #0]
 800b224:	e234      	b.n	800b690 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	461a      	mov	r2, r3
 800b22c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4413      	add	r3, r2
 800b234:	881b      	ldrh	r3, [r3, #0]
 800b236:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b23a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f280 80fc 	bge.w	800b43c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	461a      	mov	r2, r3
 800b24a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4413      	add	r3, r2
 800b252:	881b      	ldrh	r3, [r3, #0]
 800b254:	b29a      	uxth	r2, r3
 800b256:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b25a:	4013      	ands	r3, r2
 800b25c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	461a      	mov	r2, r3
 800b266:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4413      	add	r3, r2
 800b26e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800b272:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b276:	b292      	uxth	r2, r2
 800b278:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b27a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800b27e:	4613      	mov	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4413      	add	r3, r2
 800b284:	00db      	lsls	r3, r3, #3
 800b286:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	4413      	add	r3, r2
 800b28e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b292:	7b1b      	ldrb	r3, [r3, #12]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d125      	bne.n	800b2e4 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	00db      	lsls	r3, r3, #3
 800b2aa:	4413      	add	r3, r2
 800b2ac:	3306      	adds	r3, #6
 800b2ae:	005b      	lsls	r3, r3, #1
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	6812      	ldr	r2, [r2, #0]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800b2c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f000 8092 	beq.w	800b3f2 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6818      	ldr	r0, [r3, #0]
 800b2d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2d4:	6959      	ldr	r1, [r3, #20]
 800b2d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2d8:	88da      	ldrh	r2, [r3, #6]
 800b2da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b2de:	f006 f8eb 	bl	80114b8 <USB_ReadPMA>
 800b2e2:	e086      	b.n	800b3f2 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b2e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2e6:	78db      	ldrb	r3, [r3, #3]
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d10a      	bne.n	800b302 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b2ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f9d9 	bl	800b6ac <HAL_PCD_EP_DB_Receive>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b300:	e077      	b.n	800b3f2 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	461a      	mov	r2, r3
 800b308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	4413      	add	r3, r2
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	b29b      	uxth	r3, r3
 800b314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b31c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	461a      	mov	r2, r3
 800b326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	441a      	add	r2, r3
 800b32e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b33a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b33e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b342:	b29b      	uxth	r3, r3
 800b344:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	461a      	mov	r2, r3
 800b34c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	881b      	ldrh	r3, [r3, #0]
 800b356:	b29b      	uxth	r3, r3
 800b358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d024      	beq.n	800b3aa <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b368:	b29b      	uxth	r3, r3
 800b36a:	461a      	mov	r2, r3
 800b36c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	00db      	lsls	r3, r3, #3
 800b372:	4413      	add	r3, r2
 800b374:	3302      	adds	r3, #2
 800b376:	005b      	lsls	r3, r3, #1
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	6812      	ldr	r2, [r2, #0]
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b388:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800b38c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b390:	2b00      	cmp	r3, #0
 800b392:	d02e      	beq.n	800b3f2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6818      	ldr	r0, [r3, #0]
 800b398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b39a:	6959      	ldr	r1, [r3, #20]
 800b39c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b39e:	891a      	ldrh	r2, [r3, #8]
 800b3a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b3a4:	f006 f888 	bl	80114b8 <USB_ReadPMA>
 800b3a8:	e023      	b.n	800b3f2 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	4413      	add	r3, r2
 800b3be:	3306      	adds	r3, #6
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	6812      	ldr	r2, [r2, #0]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3cc:	881b      	ldrh	r3, [r3, #0]
 800b3ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800b3d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d009      	beq.n	800b3f2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3e4:	6959      	ldr	r1, [r3, #20]
 800b3e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3e8:	895a      	ldrh	r2, [r3, #10]
 800b3ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b3ee:	f006 f863 	bl	80114b8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800b3f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3f4:	69da      	ldr	r2, [r3, #28]
 800b3f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b3fa:	441a      	add	r2, r3
 800b3fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800b400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b402:	695a      	ldr	r2, [r3, #20]
 800b404:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b408:	441a      	add	r2, r3
 800b40a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b40c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b40e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d005      	beq.n	800b422 <PCD_EP_ISR_Handler+0x51c>
 800b416:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800b41a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d206      	bcs.n	800b430 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f007 fe41 	bl	80130b0 <HAL_PCD_DataOutStageCallback>
 800b42e:	e005      	b.n	800b43c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b436:	4618      	mov	r0, r3
 800b438:	f004 fb0a 	bl	800fa50 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800b43c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b444:	2b00      	cmp	r3, #0
 800b446:	f000 8123 	beq.w	800b690 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800b44a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b44e:	1c5a      	adds	r2, r3, #1
 800b450:	4613      	mov	r3, r2
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	4413      	add	r3, r2
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	4413      	add	r3, r2
 800b45c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	461a      	mov	r2, r3
 800b464:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	b29b      	uxth	r3, r3
 800b470:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b478:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	461a      	mov	r2, r3
 800b482:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	441a      	add	r2, r3
 800b48a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b48e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b496:	b29b      	uxth	r3, r3
 800b498:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800b49a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b49c:	78db      	ldrb	r3, [r3, #3]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	f040 80a2 	bne.w	800b5e8 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800b4a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800b4aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4ac:	7b1b      	ldrb	r3, [r3, #12]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f000 8093 	beq.w	800b5da <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b4b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d046      	beq.n	800b54e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b4c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4c2:	785b      	ldrb	r3, [r3, #1]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d126      	bne.n	800b516 <PCD_EP_ISR_Handler+0x610>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	461a      	mov	r2, r3
 800b4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4dc:	4413      	add	r3, r2
 800b4de:	627b      	str	r3, [r7, #36]	; 0x24
 800b4e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	011a      	lsls	r2, r3, #4
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	4413      	add	r3, r2
 800b4ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b4ee:	623b      	str	r3, [r7, #32]
 800b4f0:	6a3b      	ldr	r3, [r7, #32]
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
 800b4fe:	801a      	strh	r2, [r3, #0]
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	881b      	ldrh	r3, [r3, #0]
 800b504:	b29b      	uxth	r3, r3
 800b506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b50a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b50e:	b29a      	uxth	r2, r3
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	801a      	strh	r2, [r3, #0]
 800b514:	e061      	b.n	800b5da <PCD_EP_ISR_Handler+0x6d4>
 800b516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b518:	785b      	ldrb	r3, [r3, #1]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d15d      	bne.n	800b5da <PCD_EP_ISR_Handler+0x6d4>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	461a      	mov	r2, r3
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b532:	4413      	add	r3, r2
 800b534:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	011a      	lsls	r2, r3, #4
 800b53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53e:	4413      	add	r3, r2
 800b540:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b544:	62bb      	str	r3, [r7, #40]	; 0x28
 800b546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b548:	2200      	movs	r2, #0
 800b54a:	801a      	strh	r2, [r3, #0]
 800b54c:	e045      	b.n	800b5da <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b556:	785b      	ldrb	r3, [r3, #1]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d126      	bne.n	800b5aa <PCD_EP_ISR_Handler+0x6a4>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	637b      	str	r3, [r7, #52]	; 0x34
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	461a      	mov	r2, r3
 800b56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b570:	4413      	add	r3, r2
 800b572:	637b      	str	r3, [r7, #52]	; 0x34
 800b574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	011a      	lsls	r2, r3, #4
 800b57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b57c:	4413      	add	r3, r2
 800b57e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b582:	633b      	str	r3, [r7, #48]	; 0x30
 800b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b586:	881b      	ldrh	r3, [r3, #0]
 800b588:	b29b      	uxth	r3, r3
 800b58a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b58e:	b29a      	uxth	r2, r3
 800b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b592:	801a      	strh	r2, [r3, #0]
 800b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	b29b      	uxth	r3, r3
 800b59a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b59e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a6:	801a      	strh	r2, [r3, #0]
 800b5a8:	e017      	b.n	800b5da <PCD_EP_ISR_Handler+0x6d4>
 800b5aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5ac:	785b      	ldrb	r3, [r3, #1]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d113      	bne.n	800b5da <PCD_EP_ISR_Handler+0x6d4>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	461a      	mov	r2, r3
 800b5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c0:	4413      	add	r3, r2
 800b5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	011a      	lsls	r2, r3, #4
 800b5ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5cc:	4413      	add	r3, r2
 800b5ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b5d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b5da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f007 fd80 	bl	80130e6 <HAL_PCD_DataInStageCallback>
 800b5e6:	e053      	b.n	800b690 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800b5e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b5ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d146      	bne.n	800b682 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	461a      	mov	r2, r3
 800b600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	00db      	lsls	r3, r3, #3
 800b606:	4413      	add	r3, r2
 800b608:	3302      	adds	r3, #2
 800b60a:	005b      	lsls	r3, r3, #1
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	6812      	ldr	r2, [r2, #0]
 800b610:	4413      	add	r3, r2
 800b612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b61c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800b620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b622:	699a      	ldr	r2, [r3, #24]
 800b624:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b628:	429a      	cmp	r2, r3
 800b62a:	d907      	bls.n	800b63c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800b62c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b62e:	699a      	ldr	r2, [r3, #24]
 800b630:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b634:	1ad2      	subs	r2, r2, r3
 800b636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b638:	619a      	str	r2, [r3, #24]
 800b63a:	e002      	b.n	800b642 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800b63c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b63e:	2200      	movs	r2, #0
 800b640:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800b642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d106      	bne.n	800b658 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b64a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	4619      	mov	r1, r3
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f007 fd48 	bl	80130e6 <HAL_PCD_DataInStageCallback>
 800b656:	e01b      	b.n	800b690 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800b658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b65a:	695a      	ldr	r2, [r3, #20]
 800b65c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b660:	441a      	add	r2, r3
 800b662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b664:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800b666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b668:	69da      	ldr	r2, [r3, #28]
 800b66a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b66e:	441a      	add	r2, r3
 800b670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b672:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b67a:	4618      	mov	r0, r3
 800b67c:	f004 f9e8 	bl	800fa50 <USB_EPStartXfer>
 800b680:	e006      	b.n	800b690 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800b682:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b686:	461a      	mov	r2, r3
 800b688:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f91b 	bl	800b8c6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b698:	b29b      	uxth	r3, r3
 800b69a:	b21b      	sxth	r3, r3
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f6ff ac37 	blt.w	800af10 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3758      	adds	r7, #88	; 0x58
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b088      	sub	sp, #32
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b6ba:	88fb      	ldrh	r3, [r7, #6]
 800b6bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d07e      	beq.n	800b7c2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	00db      	lsls	r3, r3, #3
 800b6d6:	4413      	add	r3, r2
 800b6d8:	3302      	adds	r3, #2
 800b6da:	005b      	lsls	r3, r3, #1
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	6812      	ldr	r2, [r2, #0]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6e6:	881b      	ldrh	r3, [r3, #0]
 800b6e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	699a      	ldr	r2, [r3, #24]
 800b6f2:	8b7b      	ldrh	r3, [r7, #26]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d306      	bcc.n	800b706 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	699a      	ldr	r2, [r3, #24]
 800b6fc:	8b7b      	ldrh	r3, [r7, #26]
 800b6fe:	1ad2      	subs	r2, r2, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	619a      	str	r2, [r3, #24]
 800b704:	e002      	b.n	800b70c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	2200      	movs	r2, #0
 800b70a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d123      	bne.n	800b75c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	461a      	mov	r2, r3
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	b29b      	uxth	r3, r3
 800b726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b72a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b72e:	833b      	strh	r3, [r7, #24]
 800b730:	8b3b      	ldrh	r3, [r7, #24]
 800b732:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b736:	833b      	strh	r3, [r7, #24]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	461a      	mov	r2, r3
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	441a      	add	r2, r3
 800b746:	8b3b      	ldrh	r3, [r7, #24]
 800b748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b74c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b758:	b29b      	uxth	r3, r3
 800b75a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b75c:	88fb      	ldrh	r3, [r7, #6]
 800b75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b762:	2b00      	cmp	r3, #0
 800b764:	d01f      	beq.n	800b7a6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	461a      	mov	r2, r3
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	b29b      	uxth	r3, r3
 800b778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b77c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b780:	82fb      	strh	r3, [r7, #22]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	461a      	mov	r2, r3
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	441a      	add	r2, r3
 800b790:	8afb      	ldrh	r3, [r7, #22]
 800b792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b79a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b79e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b7a6:	8b7b      	ldrh	r3, [r7, #26]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 8087 	beq.w	800b8bc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6818      	ldr	r0, [r3, #0]
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	6959      	ldr	r1, [r3, #20]
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	891a      	ldrh	r2, [r3, #8]
 800b7ba:	8b7b      	ldrh	r3, [r7, #26]
 800b7bc:	f005 fe7c 	bl	80114b8 <USB_ReadPMA>
 800b7c0:	e07c      	b.n	800b8bc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	00db      	lsls	r3, r3, #3
 800b7d4:	4413      	add	r3, r2
 800b7d6:	3306      	adds	r3, #6
 800b7d8:	005b      	lsls	r3, r3, #1
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	6812      	ldr	r2, [r2, #0]
 800b7de:	4413      	add	r3, r2
 800b7e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	699a      	ldr	r2, [r3, #24]
 800b7f0:	8b7b      	ldrh	r3, [r7, #26]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d306      	bcc.n	800b804 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	699a      	ldr	r2, [r3, #24]
 800b7fa:	8b7b      	ldrh	r3, [r7, #26]
 800b7fc:	1ad2      	subs	r2, r2, r3
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	619a      	str	r2, [r3, #24]
 800b802:	e002      	b.n	800b80a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	2200      	movs	r2, #0
 800b808:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d123      	bne.n	800b85a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	461a      	mov	r2, r3
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	b29b      	uxth	r3, r3
 800b824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b82c:	83fb      	strh	r3, [r7, #30]
 800b82e:	8bfb      	ldrh	r3, [r7, #30]
 800b830:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b834:	83fb      	strh	r3, [r7, #30]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	461a      	mov	r2, r3
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	441a      	add	r2, r3
 800b844:	8bfb      	ldrh	r3, [r7, #30]
 800b846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b84a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b84e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b856:	b29b      	uxth	r3, r3
 800b858:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b85a:	88fb      	ldrh	r3, [r7, #6]
 800b85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b860:	2b00      	cmp	r3, #0
 800b862:	d11f      	bne.n	800b8a4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	461a      	mov	r2, r3
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	4413      	add	r3, r2
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	b29b      	uxth	r3, r3
 800b876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b87a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b87e:	83bb      	strh	r3, [r7, #28]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	461a      	mov	r2, r3
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	441a      	add	r2, r3
 800b88e:	8bbb      	ldrh	r3, [r7, #28]
 800b890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b89c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b8a4:	8b7b      	ldrh	r3, [r7, #26]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d008      	beq.n	800b8bc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6818      	ldr	r0, [r3, #0]
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	6959      	ldr	r1, [r3, #20]
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	895a      	ldrh	r2, [r3, #10]
 800b8b6:	8b7b      	ldrh	r3, [r7, #26]
 800b8b8:	f005 fdfe 	bl	80114b8 <USB_ReadPMA>
    }
  }

  return count;
 800b8bc:	8b7b      	ldrh	r3, [r7, #26]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3720      	adds	r7, #32
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b0a4      	sub	sp, #144	; 0x90
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	60f8      	str	r0, [r7, #12]
 800b8ce:	60b9      	str	r1, [r7, #8]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b8d4:	88fb      	ldrh	r3, [r7, #6]
 800b8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f000 81dd 	beq.w	800bc9a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	00db      	lsls	r3, r3, #3
 800b8f2:	4413      	add	r3, r2
 800b8f4:	3302      	adds	r3, #2
 800b8f6:	005b      	lsls	r3, r3, #1
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	6812      	ldr	r2, [r2, #0]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b902:	881b      	ldrh	r3, [r3, #0]
 800b904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b908:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	699a      	ldr	r2, [r3, #24]
 800b910:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b914:	429a      	cmp	r2, r3
 800b916:	d907      	bls.n	800b928 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	699a      	ldr	r2, [r3, #24]
 800b91c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b920:	1ad2      	subs	r2, r2, r3
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	619a      	str	r2, [r3, #24]
 800b926:	e002      	b.n	800b92e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	2200      	movs	r2, #0
 800b92c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	699b      	ldr	r3, [r3, #24]
 800b932:	2b00      	cmp	r3, #0
 800b934:	f040 80b9 	bne.w	800baaa <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	785b      	ldrb	r3, [r3, #1]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d126      	bne.n	800b98e <HAL_PCD_EP_DB_Transmit+0xc8>
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b94e:	b29b      	uxth	r3, r3
 800b950:	461a      	mov	r2, r3
 800b952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b954:	4413      	add	r3, r2
 800b956:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	011a      	lsls	r2, r3, #4
 800b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b960:	4413      	add	r3, r2
 800b962:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b966:	62bb      	str	r3, [r7, #40]	; 0x28
 800b968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96a:	881b      	ldrh	r3, [r3, #0]
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b972:	b29a      	uxth	r2, r3
 800b974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b976:	801a      	strh	r2, [r3, #0]
 800b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97a:	881b      	ldrh	r3, [r3, #0]
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b986:	b29a      	uxth	r2, r3
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	801a      	strh	r2, [r3, #0]
 800b98c:	e01a      	b.n	800b9c4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	785b      	ldrb	r3, [r3, #1]
 800b992:	2b01      	cmp	r3, #1
 800b994:	d116      	bne.n	800b9c4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	637b      	str	r3, [r7, #52]	; 0x34
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9aa:	4413      	add	r3, r2
 800b9ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	011a      	lsls	r2, r3, #4
 800b9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b9bc:	633b      	str	r3, [r7, #48]	; 0x30
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	785b      	ldrb	r3, [r3, #1]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d126      	bne.n	800ba20 <HAL_PCD_EP_DB_Transmit+0x15a>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	61fb      	str	r3, [r7, #28]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	61fb      	str	r3, [r7, #28]
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	011a      	lsls	r2, r3, #4
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b9f8:	61bb      	str	r3, [r7, #24]
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	881b      	ldrh	r3, [r3, #0]
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	801a      	strh	r2, [r3, #0]
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	801a      	strh	r2, [r3, #0]
 800ba1e:	e017      	b.n	800ba50 <HAL_PCD_EP_DB_Transmit+0x18a>
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	785b      	ldrb	r3, [r3, #1]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d113      	bne.n	800ba50 <HAL_PCD_EP_DB_Transmit+0x18a>
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	461a      	mov	r2, r3
 800ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba36:	4413      	add	r3, r2
 800ba38:	627b      	str	r3, [r7, #36]	; 0x24
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	011a      	lsls	r2, r3, #4
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	4413      	add	r3, r2
 800ba44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ba48:	623b      	str	r3, [r7, #32]
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	4619      	mov	r1, r3
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f007 fb45 	bl	80130e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ba5c:	88fb      	ldrh	r3, [r7, #6]
 800ba5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 82fc 	beq.w	800c060 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba82:	82fb      	strh	r3, [r7, #22]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	441a      	add	r2, r3
 800ba92:	8afb      	ldrh	r3, [r7, #22]
 800ba94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800baa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	8013      	strh	r3, [r2, #0]
 800baa8:	e2da      	b.n	800c060 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800baaa:	88fb      	ldrh	r3, [r7, #6]
 800baac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d021      	beq.n	800baf8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	461a      	mov	r2, r3
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4413      	add	r3, r2
 800bac2:	881b      	ldrh	r3, [r3, #0]
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bace:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	461a      	mov	r2, r3
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	441a      	add	r2, r3
 800bae0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800baf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	f040 82ae 	bne.w	800c060 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	695a      	ldr	r2, [r3, #20]
 800bb08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bb0c:	441a      	add	r2, r3
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	69da      	ldr	r2, [r3, #28]
 800bb16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bb1a:	441a      	add	r2, r3
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	6a1a      	ldr	r2, [r3, #32]
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d30b      	bcc.n	800bb44 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	6a1a      	ldr	r2, [r3, #32]
 800bb38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb3c:	1ad2      	subs	r2, r2, r3
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	621a      	str	r2, [r3, #32]
 800bb42:	e017      	b.n	800bb74 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	6a1b      	ldr	r3, [r3, #32]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d108      	bne.n	800bb5e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800bb4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bb50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bb5c:	e00a      	b.n	800bb74 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	2200      	movs	r2, #0
 800bb72:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	785b      	ldrb	r3, [r3, #1]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d165      	bne.n	800bc48 <HAL_PCD_EP_DB_Transmit+0x382>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb90:	4413      	add	r3, r2
 800bb92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	011a      	lsls	r2, r3, #4
 800bb9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb9c:	4413      	add	r3, r2
 800bb9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bba2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba6:	881b      	ldrh	r3, [r3, #0]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb2:	801a      	strh	r2, [r3, #0]
 800bbb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbb8:	2b3e      	cmp	r3, #62	; 0x3e
 800bbba:	d91d      	bls.n	800bbf8 <HAL_PCD_EP_DB_Transmit+0x332>
 800bbbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbc0:	095b      	lsrs	r3, r3, #5
 800bbc2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbc8:	f003 031f 	and.w	r3, r3, #31
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d102      	bne.n	800bbd6 <HAL_PCD_EP_DB_Transmit+0x310>
 800bbd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd8:	881b      	ldrh	r3, [r3, #0]
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	029b      	lsls	r3, r3, #10
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf4:	801a      	strh	r2, [r3, #0]
 800bbf6:	e044      	b.n	800bc82 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800bbf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d10a      	bne.n	800bc16 <HAL_PCD_EP_DB_Transmit+0x350>
 800bc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc02:	881b      	ldrh	r3, [r3, #0]
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	801a      	strh	r2, [r3, #0]
 800bc14:	e035      	b.n	800bc82 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800bc16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc1a:	085b      	lsrs	r3, r3, #1
 800bc1c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc22:	f003 0301 	and.w	r3, r3, #1
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d002      	beq.n	800bc30 <HAL_PCD_EP_DB_Transmit+0x36a>
 800bc2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	881b      	ldrh	r3, [r3, #0]
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	029b      	lsls	r3, r3, #10
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc44:	801a      	strh	r2, [r3, #0]
 800bc46:	e01c      	b.n	800bc82 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	785b      	ldrb	r3, [r3, #1]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d118      	bne.n	800bc82 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	647b      	str	r3, [r7, #68]	; 0x44
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	461a      	mov	r2, r3
 800bc62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc64:	4413      	add	r3, r2
 800bc66:	647b      	str	r3, [r7, #68]	; 0x44
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	011a      	lsls	r2, r3, #4
 800bc6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc70:	4413      	add	r3, r2
 800bc72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bc76:	643b      	str	r3, [r7, #64]	; 0x40
 800bc78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc80:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6818      	ldr	r0, [r3, #0]
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	6959      	ldr	r1, [r3, #20]
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	891a      	ldrh	r2, [r3, #8]
 800bc8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	f005 fbcb 	bl	801142e <USB_WritePMA>
 800bc98:	e1e2      	b.n	800c060 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	461a      	mov	r2, r3
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	00db      	lsls	r3, r3, #3
 800bcac:	4413      	add	r3, r2
 800bcae:	3306      	adds	r3, #6
 800bcb0:	005b      	lsls	r3, r3, #1
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	6812      	ldr	r2, [r2, #0]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcbc:	881b      	ldrh	r3, [r3, #0]
 800bcbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcc2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	699a      	ldr	r2, [r3, #24]
 800bcca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d307      	bcc.n	800bce2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	699a      	ldr	r2, [r3, #24]
 800bcd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bcda:	1ad2      	subs	r2, r2, r3
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	619a      	str	r2, [r3, #24]
 800bce0:	e002      	b.n	800bce8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	2200      	movs	r2, #0
 800bce6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f040 80c0 	bne.w	800be72 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	785b      	ldrb	r3, [r3, #1]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d126      	bne.n	800bd48 <HAL_PCD_EP_DB_Transmit+0x482>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd0e:	4413      	add	r3, r2
 800bd10:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	011a      	lsls	r2, r3, #4
 800bd18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd1a:	4413      	add	r3, r2
 800bd1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bd20:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd24:	881b      	ldrh	r3, [r3, #0]
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd30:	801a      	strh	r2, [r3, #0]
 800bd32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd34:	881b      	ldrh	r3, [r3, #0]
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd44:	801a      	strh	r2, [r3, #0]
 800bd46:	e01a      	b.n	800bd7e <HAL_PCD_EP_DB_Transmit+0x4b8>
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	785b      	ldrb	r3, [r3, #1]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d116      	bne.n	800bd7e <HAL_PCD_EP_DB_Transmit+0x4b8>
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	667b      	str	r3, [r7, #100]	; 0x64
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	461a      	mov	r2, r3
 800bd62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd64:	4413      	add	r3, r2
 800bd66:	667b      	str	r3, [r7, #100]	; 0x64
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	011a      	lsls	r2, r3, #4
 800bd6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd70:	4413      	add	r3, r2
 800bd72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bd76:	663b      	str	r3, [r7, #96]	; 0x60
 800bd78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	677b      	str	r3, [r7, #116]	; 0x74
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	785b      	ldrb	r3, [r3, #1]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d12b      	bne.n	800bde4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bda0:	4413      	add	r3, r2
 800bda2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	011a      	lsls	r2, r3, #4
 800bdaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdac:	4413      	add	r3, r2
 800bdae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bdb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bdb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bdba:	881b      	ldrh	r3, [r3, #0]
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bdc8:	801a      	strh	r2, [r3, #0]
 800bdca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bde0:	801a      	strh	r2, [r3, #0]
 800bde2:	e017      	b.n	800be14 <HAL_PCD_EP_DB_Transmit+0x54e>
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	785b      	ldrb	r3, [r3, #1]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d113      	bne.n	800be14 <HAL_PCD_EP_DB_Transmit+0x54e>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdfa:	4413      	add	r3, r2
 800bdfc:	677b      	str	r3, [r7, #116]	; 0x74
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	011a      	lsls	r2, r3, #4
 800be04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be06:	4413      	add	r3, r2
 800be08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800be0c:	673b      	str	r3, [r7, #112]	; 0x70
 800be0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be10:	2200      	movs	r2, #0
 800be12:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	4619      	mov	r1, r3
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f007 f963 	bl	80130e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800be20:	88fb      	ldrh	r3, [r7, #6]
 800be22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be26:	2b00      	cmp	r3, #0
 800be28:	f040 811a 	bne.w	800c060 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	461a      	mov	r2, r3
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4413      	add	r3, r2
 800be3a:	881b      	ldrh	r3, [r3, #0]
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be46:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	461a      	mov	r2, r3
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	441a      	add	r2, r3
 800be58:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800be5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	8013      	strh	r3, [r2, #0]
 800be70:	e0f6      	b.n	800c060 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800be72:	88fb      	ldrh	r3, [r7, #6]
 800be74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d121      	bne.n	800bec0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	461a      	mov	r2, r3
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	881b      	ldrh	r3, [r3, #0]
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	461a      	mov	r2, r3
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	441a      	add	r2, r3
 800bea8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800beac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800beb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800beb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800beb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	f040 80ca 	bne.w	800c060 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	695a      	ldr	r2, [r3, #20]
 800bed0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bed4:	441a      	add	r2, r3
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	69da      	ldr	r2, [r3, #28]
 800bede:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bee2:	441a      	add	r2, r3
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	6a1a      	ldr	r2, [r3, #32]
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d30b      	bcc.n	800bf0c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	6a1a      	ldr	r2, [r3, #32]
 800bf00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf04:	1ad2      	subs	r2, r2, r3
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	621a      	str	r2, [r3, #32]
 800bf0a:	e017      	b.n	800bf3c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	6a1b      	ldr	r3, [r3, #32]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d108      	bne.n	800bf26 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800bf14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bf18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bf24:	e00a      	b.n	800bf3c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	6a1b      	ldr	r3, [r3, #32]
 800bf2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	2200      	movs	r2, #0
 800bf32:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	657b      	str	r3, [r7, #84]	; 0x54
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	785b      	ldrb	r3, [r3, #1]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d165      	bne.n	800c016 <HAL_PCD_EP_DB_Transmit+0x750>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf5e:	4413      	add	r3, r2
 800bf60:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	011a      	lsls	r2, r3, #4
 800bf68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bf70:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf80:	801a      	strh	r2, [r3, #0]
 800bf82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf86:	2b3e      	cmp	r3, #62	; 0x3e
 800bf88:	d91d      	bls.n	800bfc6 <HAL_PCD_EP_DB_Transmit+0x700>
 800bf8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf8e:	095b      	lsrs	r3, r3, #5
 800bf90:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf96:	f003 031f 	and.w	r3, r3, #31
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d102      	bne.n	800bfa4 <HAL_PCD_EP_DB_Transmit+0x6de>
 800bf9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfa6:	881b      	ldrh	r3, [r3, #0]
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	029b      	lsls	r3, r3, #10
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfc2:	801a      	strh	r2, [r3, #0]
 800bfc4:	e041      	b.n	800c04a <HAL_PCD_EP_DB_Transmit+0x784>
 800bfc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10a      	bne.n	800bfe4 <HAL_PCD_EP_DB_Transmit+0x71e>
 800bfce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfe0:	801a      	strh	r2, [r3, #0]
 800bfe2:	e032      	b.n	800c04a <HAL_PCD_EP_DB_Transmit+0x784>
 800bfe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfe8:	085b      	lsrs	r3, r3, #1
 800bfea:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d002      	beq.n	800bffe <HAL_PCD_EP_DB_Transmit+0x738>
 800bff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bffa:	3301      	adds	r3, #1
 800bffc:	66bb      	str	r3, [r7, #104]	; 0x68
 800bffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c000:	881b      	ldrh	r3, [r3, #0]
 800c002:	b29a      	uxth	r2, r3
 800c004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c006:	b29b      	uxth	r3, r3
 800c008:	029b      	lsls	r3, r3, #10
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	4313      	orrs	r3, r2
 800c00e:	b29a      	uxth	r2, r3
 800c010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c012:	801a      	strh	r2, [r3, #0]
 800c014:	e019      	b.n	800c04a <HAL_PCD_EP_DB_Transmit+0x784>
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	785b      	ldrb	r3, [r3, #1]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d115      	bne.n	800c04a <HAL_PCD_EP_DB_Transmit+0x784>
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c026:	b29b      	uxth	r3, r3
 800c028:	461a      	mov	r2, r3
 800c02a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c02c:	4413      	add	r3, r2
 800c02e:	657b      	str	r3, [r7, #84]	; 0x54
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	011a      	lsls	r2, r3, #4
 800c036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c038:	4413      	add	r3, r2
 800c03a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c03e:	653b      	str	r3, [r7, #80]	; 0x50
 800c040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c044:	b29a      	uxth	r2, r3
 800c046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c048:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6818      	ldr	r0, [r3, #0]
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	6959      	ldr	r1, [r3, #20]
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	895a      	ldrh	r2, [r3, #10]
 800c056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	f005 f9e7 	bl	801142e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	461a      	mov	r2, r3
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	4413      	add	r3, r2
 800c06e:	881b      	ldrh	r3, [r3, #0]
 800c070:	b29b      	uxth	r3, r3
 800c072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c07a:	82bb      	strh	r3, [r7, #20]
 800c07c:	8abb      	ldrh	r3, [r7, #20]
 800c07e:	f083 0310 	eor.w	r3, r3, #16
 800c082:	82bb      	strh	r3, [r7, #20]
 800c084:	8abb      	ldrh	r3, [r7, #20]
 800c086:	f083 0320 	eor.w	r3, r3, #32
 800c08a:	82bb      	strh	r3, [r7, #20]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	461a      	mov	r2, r3
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	441a      	add	r2, r3
 800c09a:	8abb      	ldrh	r3, [r7, #20]
 800c09c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3790      	adds	r7, #144	; 0x90
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b087      	sub	sp, #28
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	607b      	str	r3, [r7, #4]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	817b      	strh	r3, [r7, #10]
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c0cc:	897b      	ldrh	r3, [r7, #10]
 800c0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00b      	beq.n	800c0f0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c0d8:	897b      	ldrh	r3, [r7, #10]
 800c0da:	f003 0307 	and.w	r3, r3, #7
 800c0de:	1c5a      	adds	r2, r3, #1
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	4413      	add	r3, r2
 800c0e6:	00db      	lsls	r3, r3, #3
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	617b      	str	r3, [r7, #20]
 800c0ee:	e009      	b.n	800c104 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c0f0:	897a      	ldrh	r2, [r7, #10]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	00db      	lsls	r3, r3, #3
 800c0fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	4413      	add	r3, r2
 800c102:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c104:	893b      	ldrh	r3, [r7, #8]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d107      	bne.n	800c11a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2200      	movs	r2, #0
 800c10e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	b29a      	uxth	r2, r3
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	80da      	strh	r2, [r3, #6]
 800c118:	e00b      	b.n	800c132 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	2201      	movs	r2, #1
 800c11e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	b29a      	uxth	r2, r3
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	0c1b      	lsrs	r3, r3, #16
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	371c      	adds	r7, #28
 800c138:	46bd      	mov	sp, r7
 800c13a:	bc80      	pop	{r7}
 800c13c:	4770      	bx	lr
	...

0800c140 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c140:	b480      	push	{r7}
 800c142:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800c144:	4b03      	ldr	r3, [pc, #12]	; (800c154 <HAL_PWR_EnableBkUpAccess+0x14>)
 800c146:	2201      	movs	r2, #1
 800c148:	601a      	str	r2, [r3, #0]
}
 800c14a:	bf00      	nop
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bc80      	pop	{r7}
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
 800c154:	420e0020 	.word	0x420e0020

0800c158 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800c15c:	4b06      	ldr	r3, [pc, #24]	; (800c178 <HAL_PWR_PVD_IRQHandler+0x20>)
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d005      	beq.n	800c174 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800c168:	f000 f808 	bl	800c17c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800c16c:	4b02      	ldr	r3, [pc, #8]	; (800c178 <HAL_PWR_PVD_IRQHandler+0x20>)
 800c16e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c172:	615a      	str	r2, [r3, #20]
  }
}
 800c174:	bf00      	nop
 800c176:	bd80      	pop	{r7, pc}
 800c178:	40010400 	.word	0x40010400

0800c17c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800c17c:	b480      	push	{r7}
 800c17e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800c180:	bf00      	nop
 800c182:	46bd      	mov	sp, r7
 800c184:	bc80      	pop	{r7}
 800c186:	4770      	bx	lr

0800c188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b086      	sub	sp, #24
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	e272      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 0301 	and.w	r3, r3, #1
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f000 8087 	beq.w	800c2b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c1a8:	4b92      	ldr	r3, [pc, #584]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	f003 030c 	and.w	r3, r3, #12
 800c1b0:	2b04      	cmp	r3, #4
 800c1b2:	d00c      	beq.n	800c1ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c1b4:	4b8f      	ldr	r3, [pc, #572]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	f003 030c 	and.w	r3, r3, #12
 800c1bc:	2b08      	cmp	r3, #8
 800c1be:	d112      	bne.n	800c1e6 <HAL_RCC_OscConfig+0x5e>
 800c1c0:	4b8c      	ldr	r3, [pc, #560]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1cc:	d10b      	bne.n	800c1e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1ce:	4b89      	ldr	r3, [pc, #548]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d06c      	beq.n	800c2b4 <HAL_RCC_OscConfig+0x12c>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d168      	bne.n	800c2b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e24c      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1ee:	d106      	bne.n	800c1fe <HAL_RCC_OscConfig+0x76>
 800c1f0:	4b80      	ldr	r3, [pc, #512]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a7f      	ldr	r2, [pc, #508]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c1f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1fa:	6013      	str	r3, [r2, #0]
 800c1fc:	e02e      	b.n	800c25c <HAL_RCC_OscConfig+0xd4>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d10c      	bne.n	800c220 <HAL_RCC_OscConfig+0x98>
 800c206:	4b7b      	ldr	r3, [pc, #492]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a7a      	ldr	r2, [pc, #488]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c20c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c210:	6013      	str	r3, [r2, #0]
 800c212:	4b78      	ldr	r3, [pc, #480]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a77      	ldr	r2, [pc, #476]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c21c:	6013      	str	r3, [r2, #0]
 800c21e:	e01d      	b.n	800c25c <HAL_RCC_OscConfig+0xd4>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c228:	d10c      	bne.n	800c244 <HAL_RCC_OscConfig+0xbc>
 800c22a:	4b72      	ldr	r3, [pc, #456]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a71      	ldr	r2, [pc, #452]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c234:	6013      	str	r3, [r2, #0]
 800c236:	4b6f      	ldr	r3, [pc, #444]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a6e      	ldr	r2, [pc, #440]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c23c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c240:	6013      	str	r3, [r2, #0]
 800c242:	e00b      	b.n	800c25c <HAL_RCC_OscConfig+0xd4>
 800c244:	4b6b      	ldr	r3, [pc, #428]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a6a      	ldr	r2, [pc, #424]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c24a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c24e:	6013      	str	r3, [r2, #0]
 800c250:	4b68      	ldr	r3, [pc, #416]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a67      	ldr	r2, [pc, #412]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c25a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d013      	beq.n	800c28c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c264:	f7fd f8ae 	bl	80093c4 <HAL_GetTick>
 800c268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c26a:	e008      	b.n	800c27e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c26c:	f7fd f8aa 	bl	80093c4 <HAL_GetTick>
 800c270:	4602      	mov	r2, r0
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	2b64      	cmp	r3, #100	; 0x64
 800c278:	d901      	bls.n	800c27e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c27a:	2303      	movs	r3, #3
 800c27c:	e200      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c27e:	4b5d      	ldr	r3, [pc, #372]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c286:	2b00      	cmp	r3, #0
 800c288:	d0f0      	beq.n	800c26c <HAL_RCC_OscConfig+0xe4>
 800c28a:	e014      	b.n	800c2b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c28c:	f7fd f89a 	bl	80093c4 <HAL_GetTick>
 800c290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c292:	e008      	b.n	800c2a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c294:	f7fd f896 	bl	80093c4 <HAL_GetTick>
 800c298:	4602      	mov	r2, r0
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	1ad3      	subs	r3, r2, r3
 800c29e:	2b64      	cmp	r3, #100	; 0x64
 800c2a0:	d901      	bls.n	800c2a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c2a2:	2303      	movs	r3, #3
 800c2a4:	e1ec      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c2a6:	4b53      	ldr	r3, [pc, #332]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1f0      	bne.n	800c294 <HAL_RCC_OscConfig+0x10c>
 800c2b2:	e000      	b.n	800c2b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f003 0302 	and.w	r3, r3, #2
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d063      	beq.n	800c38a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c2c2:	4b4c      	ldr	r3, [pc, #304]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	f003 030c 	and.w	r3, r3, #12
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00b      	beq.n	800c2e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800c2ce:	4b49      	ldr	r3, [pc, #292]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	f003 030c 	and.w	r3, r3, #12
 800c2d6:	2b08      	cmp	r3, #8
 800c2d8:	d11c      	bne.n	800c314 <HAL_RCC_OscConfig+0x18c>
 800c2da:	4b46      	ldr	r3, [pc, #280]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d116      	bne.n	800c314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c2e6:	4b43      	ldr	r3, [pc, #268]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f003 0302 	and.w	r3, r3, #2
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d005      	beq.n	800c2fe <HAL_RCC_OscConfig+0x176>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d001      	beq.n	800c2fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e1c0      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2fe:	4b3d      	ldr	r3, [pc, #244]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	695b      	ldr	r3, [r3, #20]
 800c30a:	00db      	lsls	r3, r3, #3
 800c30c:	4939      	ldr	r1, [pc, #228]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c30e:	4313      	orrs	r3, r2
 800c310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c312:	e03a      	b.n	800c38a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d020      	beq.n	800c35e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c31c:	4b36      	ldr	r3, [pc, #216]	; (800c3f8 <HAL_RCC_OscConfig+0x270>)
 800c31e:	2201      	movs	r2, #1
 800c320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c322:	f7fd f84f 	bl	80093c4 <HAL_GetTick>
 800c326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c328:	e008      	b.n	800c33c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c32a:	f7fd f84b 	bl	80093c4 <HAL_GetTick>
 800c32e:	4602      	mov	r2, r0
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	2b02      	cmp	r3, #2
 800c336:	d901      	bls.n	800c33c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800c338:	2303      	movs	r3, #3
 800c33a:	e1a1      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c33c:	4b2d      	ldr	r3, [pc, #180]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f003 0302 	and.w	r3, r3, #2
 800c344:	2b00      	cmp	r3, #0
 800c346:	d0f0      	beq.n	800c32a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c348:	4b2a      	ldr	r3, [pc, #168]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	695b      	ldr	r3, [r3, #20]
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	4927      	ldr	r1, [pc, #156]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c358:	4313      	orrs	r3, r2
 800c35a:	600b      	str	r3, [r1, #0]
 800c35c:	e015      	b.n	800c38a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c35e:	4b26      	ldr	r3, [pc, #152]	; (800c3f8 <HAL_RCC_OscConfig+0x270>)
 800c360:	2200      	movs	r2, #0
 800c362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c364:	f7fd f82e 	bl	80093c4 <HAL_GetTick>
 800c368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c36a:	e008      	b.n	800c37e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c36c:	f7fd f82a 	bl	80093c4 <HAL_GetTick>
 800c370:	4602      	mov	r2, r0
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	1ad3      	subs	r3, r2, r3
 800c376:	2b02      	cmp	r3, #2
 800c378:	d901      	bls.n	800c37e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800c37a:	2303      	movs	r3, #3
 800c37c:	e180      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c37e:	4b1d      	ldr	r3, [pc, #116]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f003 0302 	and.w	r3, r3, #2
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1f0      	bne.n	800c36c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f003 0308 	and.w	r3, r3, #8
 800c392:	2b00      	cmp	r3, #0
 800c394:	d03a      	beq.n	800c40c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d019      	beq.n	800c3d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c39e:	4b17      	ldr	r3, [pc, #92]	; (800c3fc <HAL_RCC_OscConfig+0x274>)
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c3a4:	f7fd f80e 	bl	80093c4 <HAL_GetTick>
 800c3a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3aa:	e008      	b.n	800c3be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c3ac:	f7fd f80a 	bl	80093c4 <HAL_GetTick>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d901      	bls.n	800c3be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	e160      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3be:	4b0d      	ldr	r3, [pc, #52]	; (800c3f4 <HAL_RCC_OscConfig+0x26c>)
 800c3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c2:	f003 0302 	and.w	r3, r3, #2
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0f0      	beq.n	800c3ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	f000 face 	bl	800c96c <RCC_Delay>
 800c3d0:	e01c      	b.n	800c40c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c3d2:	4b0a      	ldr	r3, [pc, #40]	; (800c3fc <HAL_RCC_OscConfig+0x274>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c3d8:	f7fc fff4 	bl	80093c4 <HAL_GetTick>
 800c3dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3de:	e00f      	b.n	800c400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c3e0:	f7fc fff0 	bl	80093c4 <HAL_GetTick>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d908      	bls.n	800c400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e146      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
 800c3f2:	bf00      	nop
 800c3f4:	40021000 	.word	0x40021000
 800c3f8:	42420000 	.word	0x42420000
 800c3fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c400:	4b92      	ldr	r3, [pc, #584]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c404:	f003 0302 	and.w	r3, r3, #2
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1e9      	bne.n	800c3e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 0304 	and.w	r3, r3, #4
 800c414:	2b00      	cmp	r3, #0
 800c416:	f000 80a6 	beq.w	800c566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c41a:	2300      	movs	r3, #0
 800c41c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c41e:	4b8b      	ldr	r3, [pc, #556]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c420:	69db      	ldr	r3, [r3, #28]
 800c422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10d      	bne.n	800c446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c42a:	4b88      	ldr	r3, [pc, #544]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c42c:	69db      	ldr	r3, [r3, #28]
 800c42e:	4a87      	ldr	r2, [pc, #540]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c434:	61d3      	str	r3, [r2, #28]
 800c436:	4b85      	ldr	r3, [pc, #532]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c438:	69db      	ldr	r3, [r3, #28]
 800c43a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c43e:	60bb      	str	r3, [r7, #8]
 800c440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c442:	2301      	movs	r3, #1
 800c444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c446:	4b82      	ldr	r3, [pc, #520]	; (800c650 <HAL_RCC_OscConfig+0x4c8>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d118      	bne.n	800c484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c452:	4b7f      	ldr	r3, [pc, #508]	; (800c650 <HAL_RCC_OscConfig+0x4c8>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a7e      	ldr	r2, [pc, #504]	; (800c650 <HAL_RCC_OscConfig+0x4c8>)
 800c458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c45c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c45e:	f7fc ffb1 	bl	80093c4 <HAL_GetTick>
 800c462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c464:	e008      	b.n	800c478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c466:	f7fc ffad 	bl	80093c4 <HAL_GetTick>
 800c46a:	4602      	mov	r2, r0
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	1ad3      	subs	r3, r2, r3
 800c470:	2b64      	cmp	r3, #100	; 0x64
 800c472:	d901      	bls.n	800c478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c474:	2303      	movs	r3, #3
 800c476:	e103      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c478:	4b75      	ldr	r3, [pc, #468]	; (800c650 <HAL_RCC_OscConfig+0x4c8>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c480:	2b00      	cmp	r3, #0
 800c482:	d0f0      	beq.n	800c466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d106      	bne.n	800c49a <HAL_RCC_OscConfig+0x312>
 800c48c:	4b6f      	ldr	r3, [pc, #444]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c48e:	6a1b      	ldr	r3, [r3, #32]
 800c490:	4a6e      	ldr	r2, [pc, #440]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c492:	f043 0301 	orr.w	r3, r3, #1
 800c496:	6213      	str	r3, [r2, #32]
 800c498:	e02d      	b.n	800c4f6 <HAL_RCC_OscConfig+0x36e>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	68db      	ldr	r3, [r3, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10c      	bne.n	800c4bc <HAL_RCC_OscConfig+0x334>
 800c4a2:	4b6a      	ldr	r3, [pc, #424]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	4a69      	ldr	r2, [pc, #420]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c4a8:	f023 0301 	bic.w	r3, r3, #1
 800c4ac:	6213      	str	r3, [r2, #32]
 800c4ae:	4b67      	ldr	r3, [pc, #412]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	4a66      	ldr	r2, [pc, #408]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c4b4:	f023 0304 	bic.w	r3, r3, #4
 800c4b8:	6213      	str	r3, [r2, #32]
 800c4ba:	e01c      	b.n	800c4f6 <HAL_RCC_OscConfig+0x36e>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	2b05      	cmp	r3, #5
 800c4c2:	d10c      	bne.n	800c4de <HAL_RCC_OscConfig+0x356>
 800c4c4:	4b61      	ldr	r3, [pc, #388]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c4c6:	6a1b      	ldr	r3, [r3, #32]
 800c4c8:	4a60      	ldr	r2, [pc, #384]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c4ca:	f043 0304 	orr.w	r3, r3, #4
 800c4ce:	6213      	str	r3, [r2, #32]
 800c4d0:	4b5e      	ldr	r3, [pc, #376]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c4d2:	6a1b      	ldr	r3, [r3, #32]
 800c4d4:	4a5d      	ldr	r2, [pc, #372]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c4d6:	f043 0301 	orr.w	r3, r3, #1
 800c4da:	6213      	str	r3, [r2, #32]
 800c4dc:	e00b      	b.n	800c4f6 <HAL_RCC_OscConfig+0x36e>
 800c4de:	4b5b      	ldr	r3, [pc, #364]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c4e0:	6a1b      	ldr	r3, [r3, #32]
 800c4e2:	4a5a      	ldr	r2, [pc, #360]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c4e4:	f023 0301 	bic.w	r3, r3, #1
 800c4e8:	6213      	str	r3, [r2, #32]
 800c4ea:	4b58      	ldr	r3, [pc, #352]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	4a57      	ldr	r2, [pc, #348]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c4f0:	f023 0304 	bic.w	r3, r3, #4
 800c4f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d015      	beq.n	800c52a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c4fe:	f7fc ff61 	bl	80093c4 <HAL_GetTick>
 800c502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c504:	e00a      	b.n	800c51c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c506:	f7fc ff5d 	bl	80093c4 <HAL_GetTick>
 800c50a:	4602      	mov	r2, r0
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	f241 3288 	movw	r2, #5000	; 0x1388
 800c514:	4293      	cmp	r3, r2
 800c516:	d901      	bls.n	800c51c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c518:	2303      	movs	r3, #3
 800c51a:	e0b1      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c51c:	4b4b      	ldr	r3, [pc, #300]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c51e:	6a1b      	ldr	r3, [r3, #32]
 800c520:	f003 0302 	and.w	r3, r3, #2
 800c524:	2b00      	cmp	r3, #0
 800c526:	d0ee      	beq.n	800c506 <HAL_RCC_OscConfig+0x37e>
 800c528:	e014      	b.n	800c554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c52a:	f7fc ff4b 	bl	80093c4 <HAL_GetTick>
 800c52e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c530:	e00a      	b.n	800c548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c532:	f7fc ff47 	bl	80093c4 <HAL_GetTick>
 800c536:	4602      	mov	r2, r0
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	1ad3      	subs	r3, r2, r3
 800c53c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c540:	4293      	cmp	r3, r2
 800c542:	d901      	bls.n	800c548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c544:	2303      	movs	r3, #3
 800c546:	e09b      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c548:	4b40      	ldr	r3, [pc, #256]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c54a:	6a1b      	ldr	r3, [r3, #32]
 800c54c:	f003 0302 	and.w	r3, r3, #2
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1ee      	bne.n	800c532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c554:	7dfb      	ldrb	r3, [r7, #23]
 800c556:	2b01      	cmp	r3, #1
 800c558:	d105      	bne.n	800c566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c55a:	4b3c      	ldr	r3, [pc, #240]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c55c:	69db      	ldr	r3, [r3, #28]
 800c55e:	4a3b      	ldr	r2, [pc, #236]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	69db      	ldr	r3, [r3, #28]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f000 8087 	beq.w	800c67e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c570:	4b36      	ldr	r3, [pc, #216]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	f003 030c 	and.w	r3, r3, #12
 800c578:	2b08      	cmp	r3, #8
 800c57a:	d061      	beq.n	800c640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	69db      	ldr	r3, [r3, #28]
 800c580:	2b02      	cmp	r3, #2
 800c582:	d146      	bne.n	800c612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c584:	4b33      	ldr	r3, [pc, #204]	; (800c654 <HAL_RCC_OscConfig+0x4cc>)
 800c586:	2200      	movs	r2, #0
 800c588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c58a:	f7fc ff1b 	bl	80093c4 <HAL_GetTick>
 800c58e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c590:	e008      	b.n	800c5a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c592:	f7fc ff17 	bl	80093c4 <HAL_GetTick>
 800c596:	4602      	mov	r2, r0
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	1ad3      	subs	r3, r2, r3
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d901      	bls.n	800c5a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c5a0:	2303      	movs	r3, #3
 800c5a2:	e06d      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c5a4:	4b29      	ldr	r3, [pc, #164]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1f0      	bne.n	800c592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6a1b      	ldr	r3, [r3, #32]
 800c5b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5b8:	d108      	bne.n	800c5cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c5ba:	4b24      	ldr	r3, [pc, #144]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	4921      	ldr	r1, [pc, #132]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c5cc:	4b1f      	ldr	r3, [pc, #124]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a19      	ldr	r1, [r3, #32]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5dc:	430b      	orrs	r3, r1
 800c5de:	491b      	ldr	r1, [pc, #108]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c5e4:	4b1b      	ldr	r3, [pc, #108]	; (800c654 <HAL_RCC_OscConfig+0x4cc>)
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5ea:	f7fc feeb 	bl	80093c4 <HAL_GetTick>
 800c5ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c5f0:	e008      	b.n	800c604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5f2:	f7fc fee7 	bl	80093c4 <HAL_GetTick>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d901      	bls.n	800c604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c600:	2303      	movs	r3, #3
 800c602:	e03d      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c604:	4b11      	ldr	r3, [pc, #68]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0f0      	beq.n	800c5f2 <HAL_RCC_OscConfig+0x46a>
 800c610:	e035      	b.n	800c67e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c612:	4b10      	ldr	r3, [pc, #64]	; (800c654 <HAL_RCC_OscConfig+0x4cc>)
 800c614:	2200      	movs	r2, #0
 800c616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c618:	f7fc fed4 	bl	80093c4 <HAL_GetTick>
 800c61c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c61e:	e008      	b.n	800c632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c620:	f7fc fed0 	bl	80093c4 <HAL_GetTick>
 800c624:	4602      	mov	r2, r0
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d901      	bls.n	800c632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c62e:	2303      	movs	r3, #3
 800c630:	e026      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c632:	4b06      	ldr	r3, [pc, #24]	; (800c64c <HAL_RCC_OscConfig+0x4c4>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1f0      	bne.n	800c620 <HAL_RCC_OscConfig+0x498>
 800c63e:	e01e      	b.n	800c67e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	69db      	ldr	r3, [r3, #28]
 800c644:	2b01      	cmp	r3, #1
 800c646:	d107      	bne.n	800c658 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e019      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
 800c64c:	40021000 	.word	0x40021000
 800c650:	40007000 	.word	0x40007000
 800c654:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c658:	4b0b      	ldr	r3, [pc, #44]	; (800c688 <HAL_RCC_OscConfig+0x500>)
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6a1b      	ldr	r3, [r3, #32]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d106      	bne.n	800c67a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c676:	429a      	cmp	r2, r3
 800c678:	d001      	beq.n	800c67e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	e000      	b.n	800c680 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3718      	adds	r7, #24
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	40021000 	.word	0x40021000

0800c68c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d101      	bne.n	800c6a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c69c:	2301      	movs	r3, #1
 800c69e:	e0d0      	b.n	800c842 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c6a0:	4b6a      	ldr	r3, [pc, #424]	; (800c84c <HAL_RCC_ClockConfig+0x1c0>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0307 	and.w	r3, r3, #7
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d910      	bls.n	800c6d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6ae:	4b67      	ldr	r3, [pc, #412]	; (800c84c <HAL_RCC_ClockConfig+0x1c0>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f023 0207 	bic.w	r2, r3, #7
 800c6b6:	4965      	ldr	r1, [pc, #404]	; (800c84c <HAL_RCC_ClockConfig+0x1c0>)
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6be:	4b63      	ldr	r3, [pc, #396]	; (800c84c <HAL_RCC_ClockConfig+0x1c0>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 0307 	and.w	r3, r3, #7
 800c6c6:	683a      	ldr	r2, [r7, #0]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d001      	beq.n	800c6d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e0b8      	b.n	800c842 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 0302 	and.w	r3, r3, #2
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d020      	beq.n	800c71e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 0304 	and.w	r3, r3, #4
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d005      	beq.n	800c6f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c6e8:	4b59      	ldr	r3, [pc, #356]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	4a58      	ldr	r2, [pc, #352]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c6ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c6f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0308 	and.w	r3, r3, #8
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d005      	beq.n	800c70c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c700:	4b53      	ldr	r3, [pc, #332]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	4a52      	ldr	r2, [pc, #328]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c706:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800c70a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c70c:	4b50      	ldr	r3, [pc, #320]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	494d      	ldr	r1, [pc, #308]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c71a:	4313      	orrs	r3, r2
 800c71c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 0301 	and.w	r3, r3, #1
 800c726:	2b00      	cmp	r3, #0
 800c728:	d040      	beq.n	800c7ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d107      	bne.n	800c742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c732:	4b47      	ldr	r3, [pc, #284]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d115      	bne.n	800c76a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c73e:	2301      	movs	r3, #1
 800c740:	e07f      	b.n	800c842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	2b02      	cmp	r3, #2
 800c748:	d107      	bne.n	800c75a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c74a:	4b41      	ldr	r3, [pc, #260]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d109      	bne.n	800c76a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c756:	2301      	movs	r3, #1
 800c758:	e073      	b.n	800c842 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c75a:	4b3d      	ldr	r3, [pc, #244]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f003 0302 	and.w	r3, r3, #2
 800c762:	2b00      	cmp	r3, #0
 800c764:	d101      	bne.n	800c76a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	e06b      	b.n	800c842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c76a:	4b39      	ldr	r3, [pc, #228]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	f023 0203 	bic.w	r2, r3, #3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	4936      	ldr	r1, [pc, #216]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c778:	4313      	orrs	r3, r2
 800c77a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c77c:	f7fc fe22 	bl	80093c4 <HAL_GetTick>
 800c780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c782:	e00a      	b.n	800c79a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c784:	f7fc fe1e 	bl	80093c4 <HAL_GetTick>
 800c788:	4602      	mov	r2, r0
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	1ad3      	subs	r3, r2, r3
 800c78e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c792:	4293      	cmp	r3, r2
 800c794:	d901      	bls.n	800c79a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c796:	2303      	movs	r3, #3
 800c798:	e053      	b.n	800c842 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c79a:	4b2d      	ldr	r3, [pc, #180]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	f003 020c 	and.w	r2, r3, #12
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d1eb      	bne.n	800c784 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c7ac:	4b27      	ldr	r3, [pc, #156]	; (800c84c <HAL_RCC_ClockConfig+0x1c0>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 0307 	and.w	r3, r3, #7
 800c7b4:	683a      	ldr	r2, [r7, #0]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d210      	bcs.n	800c7dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7ba:	4b24      	ldr	r3, [pc, #144]	; (800c84c <HAL_RCC_ClockConfig+0x1c0>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f023 0207 	bic.w	r2, r3, #7
 800c7c2:	4922      	ldr	r1, [pc, #136]	; (800c84c <HAL_RCC_ClockConfig+0x1c0>)
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c7ca:	4b20      	ldr	r3, [pc, #128]	; (800c84c <HAL_RCC_ClockConfig+0x1c0>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f003 0307 	and.w	r3, r3, #7
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d001      	beq.n	800c7dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e032      	b.n	800c842 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 0304 	and.w	r3, r3, #4
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d008      	beq.n	800c7fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c7e8:	4b19      	ldr	r3, [pc, #100]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	4916      	ldr	r1, [pc, #88]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f003 0308 	and.w	r3, r3, #8
 800c802:	2b00      	cmp	r3, #0
 800c804:	d009      	beq.n	800c81a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c806:	4b12      	ldr	r3, [pc, #72]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	00db      	lsls	r3, r3, #3
 800c814:	490e      	ldr	r1, [pc, #56]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c816:	4313      	orrs	r3, r2
 800c818:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c81a:	f000 f821 	bl	800c860 <HAL_RCC_GetSysClockFreq>
 800c81e:	4602      	mov	r2, r0
 800c820:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <HAL_RCC_ClockConfig+0x1c4>)
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	091b      	lsrs	r3, r3, #4
 800c826:	f003 030f 	and.w	r3, r3, #15
 800c82a:	490a      	ldr	r1, [pc, #40]	; (800c854 <HAL_RCC_ClockConfig+0x1c8>)
 800c82c:	5ccb      	ldrb	r3, [r1, r3]
 800c82e:	fa22 f303 	lsr.w	r3, r2, r3
 800c832:	4a09      	ldr	r2, [pc, #36]	; (800c858 <HAL_RCC_ClockConfig+0x1cc>)
 800c834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c836:	4b09      	ldr	r3, [pc, #36]	; (800c85c <HAL_RCC_ClockConfig+0x1d0>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fc fd80 	bl	8009340 <HAL_InitTick>

  return HAL_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	40022000 	.word	0x40022000
 800c850:	40021000 	.word	0x40021000
 800c854:	08015200 	.word	0x08015200
 800c858:	20000138 	.word	0x20000138
 800c85c:	2000013c 	.word	0x2000013c

0800c860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c860:	b480      	push	{r7}
 800c862:	b087      	sub	sp, #28
 800c864:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c866:	2300      	movs	r3, #0
 800c868:	60fb      	str	r3, [r7, #12]
 800c86a:	2300      	movs	r3, #0
 800c86c:	60bb      	str	r3, [r7, #8]
 800c86e:	2300      	movs	r3, #0
 800c870:	617b      	str	r3, [r7, #20]
 800c872:	2300      	movs	r3, #0
 800c874:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c876:	2300      	movs	r3, #0
 800c878:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c87a:	4b1e      	ldr	r3, [pc, #120]	; (800c8f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f003 030c 	and.w	r3, r3, #12
 800c886:	2b04      	cmp	r3, #4
 800c888:	d002      	beq.n	800c890 <HAL_RCC_GetSysClockFreq+0x30>
 800c88a:	2b08      	cmp	r3, #8
 800c88c:	d003      	beq.n	800c896 <HAL_RCC_GetSysClockFreq+0x36>
 800c88e:	e027      	b.n	800c8e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c890:	4b19      	ldr	r3, [pc, #100]	; (800c8f8 <HAL_RCC_GetSysClockFreq+0x98>)
 800c892:	613b      	str	r3, [r7, #16]
      break;
 800c894:	e027      	b.n	800c8e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	0c9b      	lsrs	r3, r3, #18
 800c89a:	f003 030f 	and.w	r3, r3, #15
 800c89e:	4a17      	ldr	r2, [pc, #92]	; (800c8fc <HAL_RCC_GetSysClockFreq+0x9c>)
 800c8a0:	5cd3      	ldrb	r3, [r2, r3]
 800c8a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d010      	beq.n	800c8d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c8ae:	4b11      	ldr	r3, [pc, #68]	; (800c8f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	0c5b      	lsrs	r3, r3, #17
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	4a11      	ldr	r2, [pc, #68]	; (800c900 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c8ba:	5cd3      	ldrb	r3, [r2, r3]
 800c8bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4a0d      	ldr	r2, [pc, #52]	; (800c8f8 <HAL_RCC_GetSysClockFreq+0x98>)
 800c8c2:	fb03 f202 	mul.w	r2, r3, r2
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8cc:	617b      	str	r3, [r7, #20]
 800c8ce:	e004      	b.n	800c8da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a0c      	ldr	r2, [pc, #48]	; (800c904 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c8d4:	fb02 f303 	mul.w	r3, r2, r3
 800c8d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	613b      	str	r3, [r7, #16]
      break;
 800c8de:	e002      	b.n	800c8e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c8e0:	4b05      	ldr	r3, [pc, #20]	; (800c8f8 <HAL_RCC_GetSysClockFreq+0x98>)
 800c8e2:	613b      	str	r3, [r7, #16]
      break;
 800c8e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c8e6:	693b      	ldr	r3, [r7, #16]
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	371c      	adds	r7, #28
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bc80      	pop	{r7}
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	40021000 	.word	0x40021000
 800c8f8:	007a1200 	.word	0x007a1200
 800c8fc:	08015218 	.word	0x08015218
 800c900:	08015228 	.word	0x08015228
 800c904:	003d0900 	.word	0x003d0900

0800c908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c908:	b480      	push	{r7}
 800c90a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c90c:	4b02      	ldr	r3, [pc, #8]	; (800c918 <HAL_RCC_GetHCLKFreq+0x10>)
 800c90e:	681b      	ldr	r3, [r3, #0]
}
 800c910:	4618      	mov	r0, r3
 800c912:	46bd      	mov	sp, r7
 800c914:	bc80      	pop	{r7}
 800c916:	4770      	bx	lr
 800c918:	20000138 	.word	0x20000138

0800c91c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c920:	f7ff fff2 	bl	800c908 <HAL_RCC_GetHCLKFreq>
 800c924:	4602      	mov	r2, r0
 800c926:	4b05      	ldr	r3, [pc, #20]	; (800c93c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	0a1b      	lsrs	r3, r3, #8
 800c92c:	f003 0307 	and.w	r3, r3, #7
 800c930:	4903      	ldr	r1, [pc, #12]	; (800c940 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c932:	5ccb      	ldrb	r3, [r1, r3]
 800c934:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c938:	4618      	mov	r0, r3
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	40021000 	.word	0x40021000
 800c940:	08015210 	.word	0x08015210

0800c944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c948:	f7ff ffde 	bl	800c908 <HAL_RCC_GetHCLKFreq>
 800c94c:	4602      	mov	r2, r0
 800c94e:	4b05      	ldr	r3, [pc, #20]	; (800c964 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	0adb      	lsrs	r3, r3, #11
 800c954:	f003 0307 	and.w	r3, r3, #7
 800c958:	4903      	ldr	r1, [pc, #12]	; (800c968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c95a:	5ccb      	ldrb	r3, [r1, r3]
 800c95c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c960:	4618      	mov	r0, r3
 800c962:	bd80      	pop	{r7, pc}
 800c964:	40021000 	.word	0x40021000
 800c968:	08015210 	.word	0x08015210

0800c96c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c974:	4b0a      	ldr	r3, [pc, #40]	; (800c9a0 <RCC_Delay+0x34>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a0a      	ldr	r2, [pc, #40]	; (800c9a4 <RCC_Delay+0x38>)
 800c97a:	fba2 2303 	umull	r2, r3, r2, r3
 800c97e:	0a5b      	lsrs	r3, r3, #9
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	fb02 f303 	mul.w	r3, r2, r3
 800c986:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c988:	bf00      	nop
  }
  while (Delay --);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	1e5a      	subs	r2, r3, #1
 800c98e:	60fa      	str	r2, [r7, #12]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1f9      	bne.n	800c988 <RCC_Delay+0x1c>
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop
 800c998:	3714      	adds	r7, #20
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bc80      	pop	{r7}
 800c99e:	4770      	bx	lr
 800c9a0:	20000138 	.word	0x20000138
 800c9a4:	10624dd3 	.word	0x10624dd3

0800c9a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	613b      	str	r3, [r7, #16]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d07d      	beq.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c9c8:	4b4f      	ldr	r3, [pc, #316]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c9ca:	69db      	ldr	r3, [r3, #28]
 800c9cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10d      	bne.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c9d4:	4b4c      	ldr	r3, [pc, #304]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c9d6:	69db      	ldr	r3, [r3, #28]
 800c9d8:	4a4b      	ldr	r2, [pc, #300]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c9da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9de:	61d3      	str	r3, [r2, #28]
 800c9e0:	4b49      	ldr	r3, [pc, #292]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800c9e2:	69db      	ldr	r3, [r3, #28]
 800c9e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9e8:	60bb      	str	r3, [r7, #8]
 800c9ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9f0:	4b46      	ldr	r3, [pc, #280]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d118      	bne.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c9fc:	4b43      	ldr	r3, [pc, #268]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a42      	ldr	r2, [pc, #264]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ca02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca08:	f7fc fcdc 	bl	80093c4 <HAL_GetTick>
 800ca0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca0e:	e008      	b.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca10:	f7fc fcd8 	bl	80093c4 <HAL_GetTick>
 800ca14:	4602      	mov	r2, r0
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	1ad3      	subs	r3, r2, r3
 800ca1a:	2b64      	cmp	r3, #100	; 0x64
 800ca1c:	d901      	bls.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	e06d      	b.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca22:	4b3a      	ldr	r3, [pc, #232]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d0f0      	beq.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ca2e:	4b36      	ldr	r3, [pc, #216]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ca30:	6a1b      	ldr	r3, [r3, #32]
 800ca32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d02e      	beq.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d027      	beq.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ca4c:	4b2e      	ldr	r3, [pc, #184]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ca4e:	6a1b      	ldr	r3, [r3, #32]
 800ca50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ca56:	4b2e      	ldr	r3, [pc, #184]	; (800cb10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ca58:	2201      	movs	r2, #1
 800ca5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ca5c:	4b2c      	ldr	r3, [pc, #176]	; (800cb10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800ca62:	4a29      	ldr	r2, [pc, #164]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f003 0301 	and.w	r3, r3, #1
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d014      	beq.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca72:	f7fc fca7 	bl	80093c4 <HAL_GetTick>
 800ca76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca78:	e00a      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca7a:	f7fc fca3 	bl	80093c4 <HAL_GetTick>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	1ad3      	subs	r3, r2, r3
 800ca84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d901      	bls.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800ca8c:	2303      	movs	r3, #3
 800ca8e:	e036      	b.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca90:	4b1d      	ldr	r3, [pc, #116]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	f003 0302 	and.w	r3, r3, #2
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d0ee      	beq.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ca9c:	4b1a      	ldr	r3, [pc, #104]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ca9e:	6a1b      	ldr	r3, [r3, #32]
 800caa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	4917      	ldr	r1, [pc, #92]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800caaa:	4313      	orrs	r3, r2
 800caac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800caae:	7dfb      	ldrb	r3, [r7, #23]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d105      	bne.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cab4:	4b14      	ldr	r3, [pc, #80]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cab6:	69db      	ldr	r3, [r3, #28]
 800cab8:	4a13      	ldr	r2, [pc, #76]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800caba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cabe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 0302 	and.w	r3, r3, #2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d008      	beq.n	800cade <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cacc:	4b0e      	ldr	r3, [pc, #56]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	490b      	ldr	r1, [pc, #44]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cada:	4313      	orrs	r3, r2
 800cadc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f003 0310 	and.w	r3, r3, #16
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d008      	beq.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800caea:	4b07      	ldr	r3, [pc, #28]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	695b      	ldr	r3, [r3, #20]
 800caf6:	4904      	ldr	r1, [pc, #16]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800caf8:	4313      	orrs	r3, r2
 800cafa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	40021000 	.word	0x40021000
 800cb0c:	40007000 	.word	0x40007000
 800cb10:	42420440 	.word	0x42420440

0800cb14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b088      	sub	sp, #32
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	617b      	str	r3, [r7, #20]
 800cb20:	2300      	movs	r3, #0
 800cb22:	61fb      	str	r3, [r7, #28]
 800cb24:	2300      	movs	r3, #0
 800cb26:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	60fb      	str	r3, [r7, #12]
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	3b01      	subs	r3, #1
 800cb34:	2b0f      	cmp	r3, #15
 800cb36:	f200 80af 	bhi.w	800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800cb3a:	a201      	add	r2, pc, #4	; (adr r2, 800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800cb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb40:	0800cc17 	.word	0x0800cc17
 800cb44:	0800cc7d 	.word	0x0800cc7d
 800cb48:	0800cc99 	.word	0x0800cc99
 800cb4c:	0800cc07 	.word	0x0800cc07
 800cb50:	0800cc99 	.word	0x0800cc99
 800cb54:	0800cc99 	.word	0x0800cc99
 800cb58:	0800cc99 	.word	0x0800cc99
 800cb5c:	0800cc0f 	.word	0x0800cc0f
 800cb60:	0800cc99 	.word	0x0800cc99
 800cb64:	0800cc99 	.word	0x0800cc99
 800cb68:	0800cc99 	.word	0x0800cc99
 800cb6c:	0800cc99 	.word	0x0800cc99
 800cb70:	0800cc99 	.word	0x0800cc99
 800cb74:	0800cc99 	.word	0x0800cc99
 800cb78:	0800cc99 	.word	0x0800cc99
 800cb7c:	0800cb81 	.word	0x0800cb81
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800cb80:	4b4a      	ldr	r3, [pc, #296]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800cb86:	4b49      	ldr	r3, [pc, #292]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	f000 8084 	beq.w	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	0c9b      	lsrs	r3, r3, #18
 800cb98:	f003 030f 	and.w	r3, r3, #15
 800cb9c:	4a44      	ldr	r2, [pc, #272]	; (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800cb9e:	5cd3      	ldrb	r3, [r2, r3]
 800cba0:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d015      	beq.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800cbac:	4b3f      	ldr	r3, [pc, #252]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	0c5b      	lsrs	r3, r3, #17
 800cbb2:	f003 0301 	and.w	r3, r3, #1
 800cbb6:	4a3f      	ldr	r2, [pc, #252]	; (800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800cbb8:	5cd3      	ldrb	r3, [r2, r3]
 800cbba:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00d      	beq.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800cbc6:	4a3c      	ldr	r2, [pc, #240]	; (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	fbb2 f2f3 	udiv	r2, r2, r3
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	fb02 f303 	mul.w	r3, r2, r3
 800cbd4:	61fb      	str	r3, [r7, #28]
 800cbd6:	e004      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	4a38      	ldr	r2, [pc, #224]	; (800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800cbdc:	fb02 f303 	mul.w	r3, r2, r3
 800cbe0:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800cbe2:	4b32      	ldr	r3, [pc, #200]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbee:	d102      	bne.n	800cbf6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800cbf4:	e052      	b.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	005b      	lsls	r3, r3, #1
 800cbfa:	4a31      	ldr	r2, [pc, #196]	; (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800cbfc:	fba2 2303 	umull	r2, r3, r2, r3
 800cc00:	085b      	lsrs	r3, r3, #1
 800cc02:	61bb      	str	r3, [r7, #24]
      break;
 800cc04:	e04a      	b.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800cc06:	f7ff fe2b 	bl	800c860 <HAL_RCC_GetSysClockFreq>
 800cc0a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800cc0c:	e049      	b.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800cc0e:	f7ff fe27 	bl	800c860 <HAL_RCC_GetSysClockFreq>
 800cc12:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800cc14:	e045      	b.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800cc16:	4b25      	ldr	r3, [pc, #148]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc26:	d108      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f003 0302 	and.w	r3, r3, #2
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d003      	beq.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 800cc32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc36:	61bb      	str	r3, [r7, #24]
 800cc38:	e01f      	b.n	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc44:	d109      	bne.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800cc46:	4b19      	ldr	r3, [pc, #100]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800cc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4a:	f003 0302 	and.w	r3, r3, #2
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d003      	beq.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 800cc52:	f649 4340 	movw	r3, #40000	; 0x9c40
 800cc56:	61bb      	str	r3, [r7, #24]
 800cc58:	e00f      	b.n	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc64:	d11c      	bne.n	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800cc66:	4b11      	ldr	r3, [pc, #68]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d016      	beq.n	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800cc72:	f24f 4324 	movw	r3, #62500	; 0xf424
 800cc76:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800cc78:	e012      	b.n	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800cc7a:	e011      	b.n	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800cc7c:	f7ff fe62 	bl	800c944 <HAL_RCC_GetPCLK2Freq>
 800cc80:	4602      	mov	r2, r0
 800cc82:	4b0a      	ldr	r3, [pc, #40]	; (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	0b9b      	lsrs	r3, r3, #14
 800cc88:	f003 0303 	and.w	r3, r3, #3
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	005b      	lsls	r3, r3, #1
 800cc90:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc94:	61bb      	str	r3, [r7, #24]
      break;
 800cc96:	e004      	b.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 800cc98:	bf00      	nop
 800cc9a:	e002      	b.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 800cc9c:	bf00      	nop
 800cc9e:	e000      	b.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 800cca0:	bf00      	nop
    }
  }
  return (frequency);
 800cca2:	69bb      	ldr	r3, [r7, #24]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3720      	adds	r7, #32
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	40021000 	.word	0x40021000
 800ccb0:	0801522c 	.word	0x0801522c
 800ccb4:	0801523c 	.word	0x0801523c
 800ccb8:	007a1200 	.word	0x007a1200
 800ccbc:	003d0900 	.word	0x003d0900
 800ccc0:	aaaaaaab 	.word	0xaaaaaaab

0800ccc4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800cccc:	2300      	movs	r3, #0
 800ccce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d101      	bne.n	800ccda <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e07a      	b.n	800cdd0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	7c5b      	ldrb	r3, [r3, #17]
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d105      	bne.n	800ccf0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7fb f92e 	bl	8007f4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f9f1 	bl	800d0de <HAL_RTC_WaitForSynchro>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d004      	beq.n	800cd0c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2204      	movs	r2, #4
 800cd06:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e061      	b.n	800cdd0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 faaa 	bl	800d266 <RTC_EnterInitMode>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d004      	beq.n	800cd22 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2204      	movs	r2, #4
 800cd1c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e056      	b.n	800cdd0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	685a      	ldr	r2, [r3, #4]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f022 0207 	bic.w	r2, r2, #7
 800cd30:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d005      	beq.n	800cd46 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800cd3a:	4b27      	ldr	r3, [pc, #156]	; (800cdd8 <HAL_RTC_Init+0x114>)
 800cd3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd3e:	4a26      	ldr	r2, [pc, #152]	; (800cdd8 <HAL_RTC_Init+0x114>)
 800cd40:	f023 0301 	bic.w	r3, r3, #1
 800cd44:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800cd46:	4b24      	ldr	r3, [pc, #144]	; (800cdd8 <HAL_RTC_Init+0x114>)
 800cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	4921      	ldr	r1, [pc, #132]	; (800cdd8 <HAL_RTC_Init+0x114>)
 800cd54:	4313      	orrs	r3, r2
 800cd56:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd60:	d003      	beq.n	800cd6a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	60fb      	str	r3, [r7, #12]
 800cd68:	e00e      	b.n	800cd88 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800cd6a:	2001      	movs	r0, #1
 800cd6c:	f7ff fed2 	bl	800cb14 <HAL_RCCEx_GetPeriphCLKFreq>
 800cd70:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d104      	bne.n	800cd82 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2204      	movs	r2, #4
 800cd7c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e026      	b.n	800cdd0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	0c1a      	lsrs	r2, r3, #16
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f002 020f 	and.w	r2, r2, #15
 800cd94:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	b292      	uxth	r2, r2
 800cd9e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fa88 	bl	800d2b6 <RTC_ExitInitMode>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d004      	beq.n	800cdb6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2204      	movs	r2, #4
 800cdb0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e00c      	b.n	800cdd0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800cdce:	2300      	movs	r3, #0
  }
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	40006c00 	.word	0x40006c00

0800cddc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cddc:	b590      	push	{r4, r7, lr}
 800cdde:	b087      	sub	sp, #28
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800cde8:	2300      	movs	r3, #0
 800cdea:	617b      	str	r3, [r7, #20]
 800cdec:	2300      	movs	r3, #0
 800cdee:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d002      	beq.n	800cdfc <HAL_RTC_SetTime+0x20>
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d101      	bne.n	800ce00 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e080      	b.n	800cf02 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	7c1b      	ldrb	r3, [r3, #16]
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d101      	bne.n	800ce0c <HAL_RTC_SetTime+0x30>
 800ce08:	2302      	movs	r3, #2
 800ce0a:	e07a      	b.n	800cf02 <HAL_RTC_SetTime+0x126>
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2202      	movs	r2, #2
 800ce16:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d113      	bne.n	800ce46 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	461a      	mov	r2, r3
 800ce24:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ce28:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	785b      	ldrb	r3, [r3, #1]
 800ce30:	4619      	mov	r1, r3
 800ce32:	460b      	mov	r3, r1
 800ce34:	011b      	lsls	r3, r3, #4
 800ce36:	1a5b      	subs	r3, r3, r1
 800ce38:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800ce3a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800ce40:	4413      	add	r3, r2
 800ce42:	617b      	str	r3, [r7, #20]
 800ce44:	e01e      	b.n	800ce84 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f000 fa5b 	bl	800d306 <RTC_Bcd2ToByte>
 800ce50:	4603      	mov	r3, r0
 800ce52:	461a      	mov	r2, r3
 800ce54:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ce58:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	785b      	ldrb	r3, [r3, #1]
 800ce60:	4618      	mov	r0, r3
 800ce62:	f000 fa50 	bl	800d306 <RTC_Bcd2ToByte>
 800ce66:	4603      	mov	r3, r0
 800ce68:	461a      	mov	r2, r3
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	011b      	lsls	r3, r3, #4
 800ce6e:	1a9b      	subs	r3, r3, r2
 800ce70:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800ce72:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	789b      	ldrb	r3, [r3, #2]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f000 fa44 	bl	800d306 <RTC_Bcd2ToByte>
 800ce7e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800ce80:	4423      	add	r3, r4
 800ce82:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800ce84:	6979      	ldr	r1, [r7, #20]
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f000 f986 	bl	800d198 <RTC_WriteTimeCounter>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d007      	beq.n	800cea2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2204      	movs	r2, #4
 800ce96:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e02f      	b.n	800cf02 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	685a      	ldr	r2, [r3, #4]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f022 0205 	bic.w	r2, r2, #5
 800ceb0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f000 f997 	bl	800d1e6 <RTC_ReadAlarmCounter>
 800ceb8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec0:	d018      	beq.n	800cef4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d214      	bcs.n	800cef4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800ced0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ced4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800ced6:	6939      	ldr	r1, [r7, #16]
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f000 f99d 	bl	800d218 <RTC_WriteAlarmCounter>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d007      	beq.n	800cef4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2204      	movs	r2, #4
 800cee8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2200      	movs	r2, #0
 800ceee:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800cef0:	2301      	movs	r3, #1
 800cef2:	e006      	b.n	800cf02 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2201      	movs	r2, #1
 800cef8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800cf00:	2300      	movs	r3, #0
  }
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	371c      	adds	r7, #28
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd90      	pop	{r4, r7, pc}
	...

0800cf0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b088      	sub	sp, #32
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	61fb      	str	r3, [r7, #28]
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	61bb      	str	r3, [r7, #24]
 800cf20:	2300      	movs	r3, #0
 800cf22:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d002      	beq.n	800cf30 <HAL_RTC_SetDate+0x24>
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e097      	b.n	800d064 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	7c1b      	ldrb	r3, [r3, #16]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d101      	bne.n	800cf40 <HAL_RTC_SetDate+0x34>
 800cf3c:	2302      	movs	r3, #2
 800cf3e:	e091      	b.n	800d064 <HAL_RTC_SetDate+0x158>
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2201      	movs	r2, #1
 800cf44:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2202      	movs	r2, #2
 800cf4a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10c      	bne.n	800cf6c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	78da      	ldrb	r2, [r3, #3]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	785a      	ldrb	r2, [r3, #1]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	789a      	ldrb	r2, [r3, #2]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	739a      	strb	r2, [r3, #14]
 800cf6a:	e01a      	b.n	800cfa2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	78db      	ldrb	r3, [r3, #3]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f000 f9c8 	bl	800d306 <RTC_Bcd2ToByte>
 800cf76:	4603      	mov	r3, r0
 800cf78:	461a      	mov	r2, r3
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	785b      	ldrb	r3, [r3, #1]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 f9bf 	bl	800d306 <RTC_Bcd2ToByte>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	789b      	ldrb	r3, [r3, #2]
 800cf94:	4618      	mov	r0, r3
 800cf96:	f000 f9b6 	bl	800d306 <RTC_Bcd2ToByte>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	7bdb      	ldrb	r3, [r3, #15]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	7b59      	ldrb	r1, [r3, #13]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	7b9b      	ldrb	r3, [r3, #14]
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	f000 f9c5 	bl	800d340 <RTC_WeekDayNum>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	461a      	mov	r2, r3
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	7b1a      	ldrb	r2, [r3, #12]
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f000 f8b6 	bl	800d138 <RTC_ReadTimeCounter>
 800cfcc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	4a26      	ldr	r2, [pc, #152]	; (800d06c <HAL_RTC_SetDate+0x160>)
 800cfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd6:	0adb      	lsrs	r3, r3, #11
 800cfd8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	2b18      	cmp	r3, #24
 800cfde:	d93a      	bls.n	800d056 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	4a23      	ldr	r2, [pc, #140]	; (800d070 <HAL_RTC_SetDate+0x164>)
 800cfe4:	fba2 2303 	umull	r2, r3, r2, r3
 800cfe8:	091b      	lsrs	r3, r3, #4
 800cfea:	4a22      	ldr	r2, [pc, #136]	; (800d074 <HAL_RTC_SetDate+0x168>)
 800cfec:	fb02 f303 	mul.w	r3, r2, r3
 800cff0:	69fa      	ldr	r2, [r7, #28]
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800cff6:	69f9      	ldr	r1, [r7, #28]
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f000 f8cd 	bl	800d198 <RTC_WriteTimeCounter>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d007      	beq.n	800d014 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2204      	movs	r2, #4
 800d008:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	e027      	b.n	800d064 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f000 f8e6 	bl	800d1e6 <RTC_ReadAlarmCounter>
 800d01a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d022:	d018      	beq.n	800d056 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800d024:	69ba      	ldr	r2, [r7, #24]
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d214      	bcs.n	800d056 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800d032:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d036:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800d038:	69b9      	ldr	r1, [r7, #24]
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f000 f8ec 	bl	800d218 <RTC_WriteAlarmCounter>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d007      	beq.n	800d056 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2204      	movs	r2, #4
 800d04a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2200      	movs	r2, #0
 800d050:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800d052:	2301      	movs	r3, #1
 800d054:	e006      	b.n	800d064 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2201      	movs	r2, #1
 800d05a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2200      	movs	r2, #0
 800d060:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800d062:	2300      	movs	r3, #0
}
 800d064:	4618      	mov	r0, r3
 800d066:	3720      	adds	r7, #32
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	91a2b3c5 	.word	0x91a2b3c5
 800d070:	aaaaaaab 	.word	0xaaaaaaab
 800d074:	00015180 	.word	0x00015180

0800d078 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f003 0302 	and.w	r3, r3, #2
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d011      	beq.n	800d0b2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	f003 0302 	and.w	r3, r3, #2
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00a      	beq.n	800d0b2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 f815 	bl	800d0cc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f022 0202 	bic.w	r2, r2, #2
 800d0b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d0b2:	4b05      	ldr	r3, [pc, #20]	; (800d0c8 <HAL_RTC_AlarmIRQHandler+0x50>)
 800d0b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d0b8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	745a      	strb	r2, [r3, #17]
}
 800d0c0:	bf00      	nop
 800d0c2:	3708      	adds	r7, #8
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	40010400 	.word	0x40010400

0800d0cc <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800d0d4:	bf00      	nop
 800d0d6:	370c      	adds	r7, #12
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bc80      	pop	{r7}
 800d0dc:	4770      	bx	lr

0800d0de <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b084      	sub	sp, #16
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d101      	bne.n	800d0f4 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e01d      	b.n	800d130 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f022 0208 	bic.w	r2, r2, #8
 800d102:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800d104:	f7fc f95e 	bl	80093c4 <HAL_GetTick>
 800d108:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800d10a:	e009      	b.n	800d120 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800d10c:	f7fc f95a 	bl	80093c4 <HAL_GetTick>
 800d110:	4602      	mov	r2, r0
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d11a:	d901      	bls.n	800d120 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800d11c:	2303      	movs	r3, #3
 800d11e:	e007      	b.n	800d130 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	f003 0308 	and.w	r3, r3, #8
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d0ee      	beq.n	800d10c <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800d138:	b480      	push	{r7}
 800d13a:	b087      	sub	sp, #28
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800d140:	2300      	movs	r3, #0
 800d142:	827b      	strh	r3, [r7, #18]
 800d144:	2300      	movs	r3, #0
 800d146:	823b      	strh	r3, [r7, #16]
 800d148:	2300      	movs	r3, #0
 800d14a:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800d14c:	2300      	movs	r3, #0
 800d14e:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	699b      	ldr	r3, [r3, #24]
 800d156:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	69db      	ldr	r3, [r3, #28]
 800d15e:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	699b      	ldr	r3, [r3, #24]
 800d166:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800d168:	8a7a      	ldrh	r2, [r7, #18]
 800d16a:	8a3b      	ldrh	r3, [r7, #16]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d008      	beq.n	800d182 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800d170:	8a3b      	ldrh	r3, [r7, #16]
 800d172:	041a      	lsls	r2, r3, #16
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	69db      	ldr	r3, [r3, #28]
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	4313      	orrs	r3, r2
 800d17e:	617b      	str	r3, [r7, #20]
 800d180:	e004      	b.n	800d18c <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800d182:	8a7b      	ldrh	r3, [r7, #18]
 800d184:	041a      	lsls	r2, r3, #16
 800d186:	89fb      	ldrh	r3, [r7, #14]
 800d188:	4313      	orrs	r3, r2
 800d18a:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800d18c:	697b      	ldr	r3, [r7, #20]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	371c      	adds	r7, #28
 800d192:	46bd      	mov	sp, r7
 800d194:	bc80      	pop	{r7}
 800d196:	4770      	bx	lr

0800d198 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 f85d 	bl	800d266 <RTC_EnterInitMode>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	73fb      	strb	r3, [r7, #15]
 800d1b6:	e011      	b.n	800d1dc <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	683a      	ldr	r2, [r7, #0]
 800d1be:	0c12      	lsrs	r2, r2, #16
 800d1c0:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	683a      	ldr	r2, [r7, #0]
 800d1c8:	b292      	uxth	r2, r2
 800d1ca:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 f872 	bl	800d2b6 <RTC_ExitInitMode>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d001      	beq.n	800d1dc <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3710      	adds	r7, #16
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800d1e6:	b480      	push	{r7}
 800d1e8:	b085      	sub	sp, #20
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	81fb      	strh	r3, [r7, #14]
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	6a1b      	ldr	r3, [r3, #32]
 800d1fc:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d204:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800d206:	89fb      	ldrh	r3, [r7, #14]
 800d208:	041a      	lsls	r2, r3, #16
 800d20a:	89bb      	ldrh	r3, [r7, #12]
 800d20c:	4313      	orrs	r3, r2
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3714      	adds	r7, #20
 800d212:	46bd      	mov	sp, r7
 800d214:	bc80      	pop	{r7}
 800d216:	4770      	bx	lr

0800d218 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d222:	2300      	movs	r3, #0
 800d224:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 f81d 	bl	800d266 <RTC_EnterInitMode>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d002      	beq.n	800d238 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800d232:	2301      	movs	r3, #1
 800d234:	73fb      	strb	r3, [r7, #15]
 800d236:	e011      	b.n	800d25c <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	0c12      	lsrs	r2, r2, #16
 800d240:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	b292      	uxth	r2, r2
 800d24a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 f832 	bl	800d2b6 <RTC_ExitInitMode>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d001      	beq.n	800d25c <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800d258:	2301      	movs	r3, #1
 800d25a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b084      	sub	sp, #16
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d26e:	2300      	movs	r3, #0
 800d270:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800d272:	f7fc f8a7 	bl	80093c4 <HAL_GetTick>
 800d276:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800d278:	e009      	b.n	800d28e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800d27a:	f7fc f8a3 	bl	80093c4 <HAL_GetTick>
 800d27e:	4602      	mov	r2, r0
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d288:	d901      	bls.n	800d28e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800d28a:	2303      	movs	r3, #3
 800d28c:	e00f      	b.n	800d2ae <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	f003 0320 	and.w	r3, r3, #32
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d0ee      	beq.n	800d27a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	685a      	ldr	r2, [r3, #4]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f042 0210 	orr.w	r2, r2, #16
 800d2aa:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b084      	sub	sp, #16
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f022 0210 	bic.w	r2, r2, #16
 800d2d0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800d2d2:	f7fc f877 	bl	80093c4 <HAL_GetTick>
 800d2d6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800d2d8:	e009      	b.n	800d2ee <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800d2da:	f7fc f873 	bl	80093c4 <HAL_GetTick>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2e8:	d901      	bls.n	800d2ee <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800d2ea:	2303      	movs	r3, #3
 800d2ec:	e007      	b.n	800d2fe <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	f003 0320 	and.w	r3, r3, #32
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d0ee      	beq.n	800d2da <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d306:	b480      	push	{r7}
 800d308:	b085      	sub	sp, #20
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	4603      	mov	r3, r0
 800d30e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800d310:	2300      	movs	r3, #0
 800d312:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800d314:	79fb      	ldrb	r3, [r7, #7]
 800d316:	091b      	lsrs	r3, r3, #4
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	461a      	mov	r2, r3
 800d31c:	4613      	mov	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4413      	add	r3, r2
 800d322:	005b      	lsls	r3, r3, #1
 800d324:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800d326:	79fb      	ldrb	r3, [r7, #7]
 800d328:	f003 030f 	and.w	r3, r3, #15
 800d32c:	b2da      	uxtb	r2, r3
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	b2db      	uxtb	r3, r3
 800d332:	4413      	add	r3, r2
 800d334:	b2db      	uxtb	r3, r3
}
 800d336:	4618      	mov	r0, r3
 800d338:	3714      	adds	r7, #20
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bc80      	pop	{r7}
 800d33e:	4770      	bx	lr

0800d340 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	460b      	mov	r3, r1
 800d34a:	70fb      	strb	r3, [r7, #3]
 800d34c:	4613      	mov	r3, r2
 800d34e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800d350:	2300      	movs	r3, #0
 800d352:	60bb      	str	r3, [r7, #8]
 800d354:	2300      	movs	r3, #0
 800d356:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800d35e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800d360:	78fb      	ldrb	r3, [r7, #3]
 800d362:	2b02      	cmp	r3, #2
 800d364:	d82d      	bhi.n	800d3c2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800d366:	78fa      	ldrb	r2, [r7, #3]
 800d368:	4613      	mov	r3, r2
 800d36a:	005b      	lsls	r3, r3, #1
 800d36c:	4413      	add	r3, r2
 800d36e:	00db      	lsls	r3, r3, #3
 800d370:	1a9b      	subs	r3, r3, r2
 800d372:	4a2c      	ldr	r2, [pc, #176]	; (800d424 <RTC_WeekDayNum+0xe4>)
 800d374:	fba2 2303 	umull	r2, r3, r2, r3
 800d378:	085a      	lsrs	r2, r3, #1
 800d37a:	78bb      	ldrb	r3, [r7, #2]
 800d37c:	441a      	add	r2, r3
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	441a      	add	r2, r3
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	3b01      	subs	r3, #1
 800d386:	089b      	lsrs	r3, r3, #2
 800d388:	441a      	add	r2, r3
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	3b01      	subs	r3, #1
 800d38e:	4926      	ldr	r1, [pc, #152]	; (800d428 <RTC_WeekDayNum+0xe8>)
 800d390:	fba1 1303 	umull	r1, r3, r1, r3
 800d394:	095b      	lsrs	r3, r3, #5
 800d396:	1ad2      	subs	r2, r2, r3
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	3b01      	subs	r3, #1
 800d39c:	4922      	ldr	r1, [pc, #136]	; (800d428 <RTC_WeekDayNum+0xe8>)
 800d39e:	fba1 1303 	umull	r1, r3, r1, r3
 800d3a2:	09db      	lsrs	r3, r3, #7
 800d3a4:	4413      	add	r3, r2
 800d3a6:	1d1a      	adds	r2, r3, #4
 800d3a8:	4b20      	ldr	r3, [pc, #128]	; (800d42c <RTC_WeekDayNum+0xec>)
 800d3aa:	fba3 1302 	umull	r1, r3, r3, r2
 800d3ae:	1ad1      	subs	r1, r2, r3
 800d3b0:	0849      	lsrs	r1, r1, #1
 800d3b2:	440b      	add	r3, r1
 800d3b4:	0899      	lsrs	r1, r3, #2
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	00db      	lsls	r3, r3, #3
 800d3ba:	1a5b      	subs	r3, r3, r1
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	60fb      	str	r3, [r7, #12]
 800d3c0:	e029      	b.n	800d416 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800d3c2:	78fa      	ldrb	r2, [r7, #3]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	005b      	lsls	r3, r3, #1
 800d3c8:	4413      	add	r3, r2
 800d3ca:	00db      	lsls	r3, r3, #3
 800d3cc:	1a9b      	subs	r3, r3, r2
 800d3ce:	4a15      	ldr	r2, [pc, #84]	; (800d424 <RTC_WeekDayNum+0xe4>)
 800d3d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d4:	085a      	lsrs	r2, r3, #1
 800d3d6:	78bb      	ldrb	r3, [r7, #2]
 800d3d8:	441a      	add	r2, r3
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	441a      	add	r2, r3
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	089b      	lsrs	r3, r3, #2
 800d3e2:	441a      	add	r2, r3
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	4910      	ldr	r1, [pc, #64]	; (800d428 <RTC_WeekDayNum+0xe8>)
 800d3e8:	fba1 1303 	umull	r1, r3, r1, r3
 800d3ec:	095b      	lsrs	r3, r3, #5
 800d3ee:	1ad2      	subs	r2, r2, r3
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	490d      	ldr	r1, [pc, #52]	; (800d428 <RTC_WeekDayNum+0xe8>)
 800d3f4:	fba1 1303 	umull	r1, r3, r1, r3
 800d3f8:	09db      	lsrs	r3, r3, #7
 800d3fa:	4413      	add	r3, r2
 800d3fc:	1c9a      	adds	r2, r3, #2
 800d3fe:	4b0b      	ldr	r3, [pc, #44]	; (800d42c <RTC_WeekDayNum+0xec>)
 800d400:	fba3 1302 	umull	r1, r3, r3, r2
 800d404:	1ad1      	subs	r1, r2, r3
 800d406:	0849      	lsrs	r1, r1, #1
 800d408:	440b      	add	r3, r1
 800d40a:	0899      	lsrs	r1, r3, #2
 800d40c:	460b      	mov	r3, r1
 800d40e:	00db      	lsls	r3, r3, #3
 800d410:	1a5b      	subs	r3, r3, r1
 800d412:	1ad3      	subs	r3, r2, r3
 800d414:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	b2db      	uxtb	r3, r3
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3714      	adds	r7, #20
 800d41e:	46bd      	mov	sp, r7
 800d420:	bc80      	pop	{r7}
 800d422:	4770      	bx	lr
 800d424:	38e38e39 	.word	0x38e38e39
 800d428:	51eb851f 	.word	0x51eb851f
 800d42c:	24924925 	.word	0x24924925

0800d430 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f003 0301 	and.w	r3, r3, #1
 800d442:	2b00      	cmp	r3, #0
 800d444:	d027      	beq.n	800d496 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	f003 0301 	and.w	r3, r3, #1
 800d450:	2b00      	cmp	r3, #0
 800d452:	d020      	beq.n	800d496 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	f003 0304 	and.w	r3, r3, #4
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00b      	beq.n	800d47a <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 f824 	bl	800d4b0 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f06f 0204 	mvn.w	r2, #4
 800d470:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2204      	movs	r2, #4
 800d476:	745a      	strb	r2, [r3, #17]
 800d478:	e005      	b.n	800d486 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 f80f 	bl	800d49e <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	685a      	ldr	r2, [r3, #4]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f022 0201 	bic.w	r2, r2, #1
 800d494:	605a      	str	r2, [r3, #4]
    }
  }
}
 800d496:	bf00      	nop
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d49e:	b480      	push	{r7}
 800d4a0:	b083      	sub	sp, #12
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800d4a6:	bf00      	nop
 800d4a8:	370c      	adds	r7, #12
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bc80      	pop	{r7}
 800d4ae:	4770      	bx	lr

0800d4b0 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 800d4b8:	bf00      	nop
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bc80      	pop	{r7}
 800d4c0:	4770      	bx	lr

0800d4c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d4c2:	b580      	push	{r7, lr}
 800d4c4:	b082      	sub	sp, #8
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d101      	bne.n	800d4d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e076      	b.n	800d5c2 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d108      	bne.n	800d4ee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4e4:	d009      	beq.n	800d4fa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	61da      	str	r2, [r3, #28]
 800d4ec:	e005      	b.n	800d4fa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d506:	b2db      	uxtb	r3, r3
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d106      	bne.n	800d51a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7fa fd3d 	bl	8007f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2202      	movs	r2, #2
 800d51e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d530:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d542:	431a      	orrs	r2, r3
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d54c:	431a      	orrs	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	f003 0302 	and.w	r3, r3, #2
 800d556:	431a      	orrs	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	695b      	ldr	r3, [r3, #20]
 800d55c:	f003 0301 	and.w	r3, r3, #1
 800d560:	431a      	orrs	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	699b      	ldr	r3, [r3, #24]
 800d566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d56a:	431a      	orrs	r2, r3
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	69db      	ldr	r3, [r3, #28]
 800d570:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d574:	431a      	orrs	r2, r3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6a1b      	ldr	r3, [r3, #32]
 800d57a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d57e:	ea42 0103 	orr.w	r1, r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d586:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	430a      	orrs	r2, r1
 800d590:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	699b      	ldr	r3, [r3, #24]
 800d596:	0c1a      	lsrs	r2, r3, #16
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f002 0204 	and.w	r2, r2, #4
 800d5a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	69da      	ldr	r2, [r3, #28]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d5b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d5c0:	2300      	movs	r3, #0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d101      	bne.n	800d5dc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e01a      	b.n	800d612 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2202      	movs	r2, #2
 800d5e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5f2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7fa fd17 	bl	8008028 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b08c      	sub	sp, #48	; 0x30
 800d61e:	af00      	add	r7, sp, #0
 800d620:	60f8      	str	r0, [r7, #12]
 800d622:	60b9      	str	r1, [r7, #8]
 800d624:	607a      	str	r2, [r7, #4]
 800d626:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d628:	2301      	movs	r3, #1
 800d62a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d101      	bne.n	800d640 <HAL_SPI_TransmitReceive+0x26>
 800d63c:	2302      	movs	r3, #2
 800d63e:	e198      	b.n	800d972 <HAL_SPI_TransmitReceive+0x358>
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2201      	movs	r2, #1
 800d644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d648:	f7fb febc 	bl	80093c4 <HAL_GetTick>
 800d64c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d65e:	887b      	ldrh	r3, [r7, #2]
 800d660:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d662:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d666:	2b01      	cmp	r3, #1
 800d668:	d00f      	beq.n	800d68a <HAL_SPI_TransmitReceive+0x70>
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d670:	d107      	bne.n	800d682 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	689b      	ldr	r3, [r3, #8]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d103      	bne.n	800d682 <HAL_SPI_TransmitReceive+0x68>
 800d67a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d67e:	2b04      	cmp	r3, #4
 800d680:	d003      	beq.n	800d68a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d682:	2302      	movs	r3, #2
 800d684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d688:	e16d      	b.n	800d966 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d005      	beq.n	800d69c <HAL_SPI_TransmitReceive+0x82>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d002      	beq.n	800d69c <HAL_SPI_TransmitReceive+0x82>
 800d696:	887b      	ldrh	r3, [r7, #2]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d103      	bne.n	800d6a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d69c:	2301      	movs	r3, #1
 800d69e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d6a2:	e160      	b.n	800d966 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	2b04      	cmp	r3, #4
 800d6ae:	d003      	beq.n	800d6b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2205      	movs	r2, #5
 800d6b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	887a      	ldrh	r2, [r7, #2]
 800d6c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	887a      	ldrh	r2, [r7, #2]
 800d6ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	887a      	ldrh	r2, [r7, #2]
 800d6da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	887a      	ldrh	r2, [r7, #2]
 800d6e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6f8:	2b40      	cmp	r3, #64	; 0x40
 800d6fa:	d007      	beq.n	800d70c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	681a      	ldr	r2, [r3, #0]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d70a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d714:	d17c      	bne.n	800d810 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d002      	beq.n	800d724 <HAL_SPI_TransmitReceive+0x10a>
 800d71e:	8b7b      	ldrh	r3, [r7, #26]
 800d720:	2b01      	cmp	r3, #1
 800d722:	d16a      	bne.n	800d7fa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d728:	881a      	ldrh	r2, [r3, #0]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d734:	1c9a      	adds	r2, r3, #2
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d73e:	b29b      	uxth	r3, r3
 800d740:	3b01      	subs	r3, #1
 800d742:	b29a      	uxth	r2, r3
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d748:	e057      	b.n	800d7fa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	689b      	ldr	r3, [r3, #8]
 800d750:	f003 0302 	and.w	r3, r3, #2
 800d754:	2b02      	cmp	r3, #2
 800d756:	d11b      	bne.n	800d790 <HAL_SPI_TransmitReceive+0x176>
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d016      	beq.n	800d790 <HAL_SPI_TransmitReceive+0x176>
 800d762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d764:	2b01      	cmp	r3, #1
 800d766:	d113      	bne.n	800d790 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d76c:	881a      	ldrh	r2, [r3, #0]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d778:	1c9a      	adds	r2, r3, #2
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d782:	b29b      	uxth	r3, r3
 800d784:	3b01      	subs	r3, #1
 800d786:	b29a      	uxth	r2, r3
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d78c:	2300      	movs	r3, #0
 800d78e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	f003 0301 	and.w	r3, r3, #1
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d119      	bne.n	800d7d2 <HAL_SPI_TransmitReceive+0x1b8>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d014      	beq.n	800d7d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	68da      	ldr	r2, [r3, #12]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b2:	b292      	uxth	r2, r2
 800d7b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ba:	1c9a      	adds	r2, r3, #2
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	3b01      	subs	r3, #1
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d7d2:	f7fb fdf7 	bl	80093c4 <HAL_GetTick>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7da:	1ad3      	subs	r3, r2, r3
 800d7dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d80b      	bhi.n	800d7fa <HAL_SPI_TransmitReceive+0x1e0>
 800d7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e8:	d007      	beq.n	800d7fa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800d7ea:	2303      	movs	r3, #3
 800d7ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800d7f8:	e0b5      	b.n	800d966 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	2b00      	cmp	r3, #0
 800d802:	d1a2      	bne.n	800d74a <HAL_SPI_TransmitReceive+0x130>
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d808:	b29b      	uxth	r3, r3
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d19d      	bne.n	800d74a <HAL_SPI_TransmitReceive+0x130>
 800d80e:	e080      	b.n	800d912 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d002      	beq.n	800d81e <HAL_SPI_TransmitReceive+0x204>
 800d818:	8b7b      	ldrh	r3, [r7, #26]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d16f      	bne.n	800d8fe <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	330c      	adds	r3, #12
 800d828:	7812      	ldrb	r2, [r2, #0]
 800d82a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d830:	1c5a      	adds	r2, r3, #1
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	3b01      	subs	r3, #1
 800d83e:	b29a      	uxth	r2, r3
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d844:	e05b      	b.n	800d8fe <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	689b      	ldr	r3, [r3, #8]
 800d84c:	f003 0302 	and.w	r3, r3, #2
 800d850:	2b02      	cmp	r3, #2
 800d852:	d11c      	bne.n	800d88e <HAL_SPI_TransmitReceive+0x274>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d858:	b29b      	uxth	r3, r3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d017      	beq.n	800d88e <HAL_SPI_TransmitReceive+0x274>
 800d85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d860:	2b01      	cmp	r3, #1
 800d862:	d114      	bne.n	800d88e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	330c      	adds	r3, #12
 800d86e:	7812      	ldrb	r2, [r2, #0]
 800d870:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d876:	1c5a      	adds	r2, r3, #1
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d880:	b29b      	uxth	r3, r3
 800d882:	3b01      	subs	r3, #1
 800d884:	b29a      	uxth	r2, r3
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d88a:	2300      	movs	r3, #0
 800d88c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	f003 0301 	and.w	r3, r3, #1
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d119      	bne.n	800d8d0 <HAL_SPI_TransmitReceive+0x2b6>
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d014      	beq.n	800d8d0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	68da      	ldr	r2, [r3, #12]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b0:	b2d2      	uxtb	r2, r2
 800d8b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b8:	1c5a      	adds	r2, r3, #1
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	b29a      	uxth	r2, r3
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d8d0:	f7fb fd78 	bl	80093c4 <HAL_GetTick>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d8:	1ad3      	subs	r3, r2, r3
 800d8da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d803      	bhi.n	800d8e8 <HAL_SPI_TransmitReceive+0x2ce>
 800d8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e6:	d102      	bne.n	800d8ee <HAL_SPI_TransmitReceive+0x2d4>
 800d8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d107      	bne.n	800d8fe <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800d8ee:	2303      	movs	r3, #3
 800d8f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800d8fc:	e033      	b.n	800d966 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d902:	b29b      	uxth	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d19e      	bne.n	800d846 <HAL_SPI_TransmitReceive+0x22c>
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d199      	bne.n	800d846 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d914:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f000 fb1a 	bl	800df50 <SPI_EndRxTxTransaction>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d006      	beq.n	800d930 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800d922:	2301      	movs	r3, #1
 800d924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2220      	movs	r2, #32
 800d92c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d92e:	e01a      	b.n	800d966 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	689b      	ldr	r3, [r3, #8]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10a      	bne.n	800d94e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d938:	2300      	movs	r3, #0
 800d93a:	617b      	str	r3, [r7, #20]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	617b      	str	r3, [r7, #20]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	617b      	str	r3, [r7, #20]
 800d94c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d952:	2b00      	cmp	r3, #0
 800d954:	d003      	beq.n	800d95e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800d956:	2301      	movs	r3, #1
 800d958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d95c:	e003      	b.n	800d966 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2201      	movs	r2, #1
 800d962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2200      	movs	r2, #0
 800d96a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d96e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d972:	4618      	mov	r0, r3
 800d974:	3730      	adds	r7, #48	; 0x30
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
	...

0800d97c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b087      	sub	sp, #28
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
 800d988:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d98a:	2300      	movs	r3, #0
 800d98c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d994:	2b01      	cmp	r3, #1
 800d996:	d101      	bne.n	800d99c <HAL_SPI_TransmitReceive_IT+0x20>
 800d998:	2302      	movs	r3, #2
 800d99a:	e075      	b.n	800da88 <HAL_SPI_TransmitReceive_IT+0x10c>
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d9aa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d9b2:	7dbb      	ldrb	r3, [r7, #22]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d00d      	beq.n	800d9d4 <HAL_SPI_TransmitReceive_IT+0x58>
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9be:	d106      	bne.n	800d9ce <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d102      	bne.n	800d9ce <HAL_SPI_TransmitReceive_IT+0x52>
 800d9c8:	7dbb      	ldrb	r3, [r7, #22]
 800d9ca:	2b04      	cmp	r3, #4
 800d9cc:	d002      	beq.n	800d9d4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800d9ce:	2302      	movs	r3, #2
 800d9d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d9d2:	e054      	b.n	800da7e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d005      	beq.n	800d9e6 <HAL_SPI_TransmitReceive_IT+0x6a>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d002      	beq.n	800d9e6 <HAL_SPI_TransmitReceive_IT+0x6a>
 800d9e0:	887b      	ldrh	r3, [r7, #2]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d102      	bne.n	800d9ec <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d9ea:	e048      	b.n	800da7e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	2b04      	cmp	r3, #4
 800d9f6:	d003      	beq.n	800da00 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2205      	movs	r2, #5
 800d9fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2200      	movs	r2, #0
 800da04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	887a      	ldrh	r2, [r7, #2]
 800da10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	887a      	ldrh	r2, [r7, #2]
 800da16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	887a      	ldrh	r2, [r7, #2]
 800da22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	887a      	ldrh	r2, [r7, #2]
 800da28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d006      	beq.n	800da40 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	4a17      	ldr	r2, [pc, #92]	; (800da94 <HAL_SPI_TransmitReceive_IT+0x118>)
 800da36:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	4a17      	ldr	r2, [pc, #92]	; (800da98 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800da3c:	645a      	str	r2, [r3, #68]	; 0x44
 800da3e:	e005      	b.n	800da4c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	4a16      	ldr	r2, [pc, #88]	; (800da9c <HAL_SPI_TransmitReceive_IT+0x120>)
 800da44:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	4a15      	ldr	r2, [pc, #84]	; (800daa0 <HAL_SPI_TransmitReceive_IT+0x124>)
 800da4a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	685a      	ldr	r2, [r3, #4]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800da5a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da66:	2b40      	cmp	r3, #64	; 0x40
 800da68:	d008      	beq.n	800da7c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da78:	601a      	str	r2, [r3, #0]
 800da7a:	e000      	b.n	800da7e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800da7c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800da86:	7dfb      	ldrb	r3, [r7, #23]
}
 800da88:	4618      	mov	r0, r3
 800da8a:	371c      	adds	r7, #28
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bc80      	pop	{r7}
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	0800dd83 	.word	0x0800dd83
 800da98:	0800dde3 	.word	0x0800dde3
 800da9c:	0800dcbf 	.word	0x0800dcbf
 800daa0:	0800dd23 	.word	0x0800dd23

0800daa4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b088      	sub	sp, #32
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d10e      	bne.n	800dae4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d009      	beq.n	800dae4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d004      	beq.n	800dae4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	4798      	blx	r3
    return;
 800dae2:	e0b7      	b.n	800dc54 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	f003 0302 	and.w	r3, r3, #2
 800daea:	2b00      	cmp	r3, #0
 800daec:	d009      	beq.n	800db02 <HAL_SPI_IRQHandler+0x5e>
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d004      	beq.n	800db02 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	4798      	blx	r3
    return;
 800db00:	e0a8      	b.n	800dc54 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	f003 0320 	and.w	r3, r3, #32
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d105      	bne.n	800db18 <HAL_SPI_IRQHandler+0x74>
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db12:	2b00      	cmp	r3, #0
 800db14:	f000 809e 	beq.w	800dc54 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	f003 0320 	and.w	r3, r3, #32
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f000 8098 	beq.w	800dc54 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d023      	beq.n	800db76 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db34:	b2db      	uxtb	r3, r3
 800db36:	2b03      	cmp	r3, #3
 800db38:	d011      	beq.n	800db5e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db3e:	f043 0204 	orr.w	r2, r3, #4
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db46:	2300      	movs	r3, #0
 800db48:	617b      	str	r3, [r7, #20]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	617b      	str	r3, [r7, #20]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	689b      	ldr	r3, [r3, #8]
 800db58:	617b      	str	r3, [r7, #20]
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	e00b      	b.n	800db76 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db5e:	2300      	movs	r3, #0
 800db60:	613b      	str	r3, [r7, #16]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	613b      	str	r3, [r7, #16]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	613b      	str	r3, [r7, #16]
 800db72:	693b      	ldr	r3, [r7, #16]
        return;
 800db74:	e06e      	b.n	800dc54 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	f003 0320 	and.w	r3, r3, #32
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d014      	beq.n	800dbaa <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db84:	f043 0201 	orr.w	r2, r3, #1
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800db8c:	2300      	movs	r3, #0
 800db8e:	60fb      	str	r3, [r7, #12]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	60fb      	str	r3, [r7, #12]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	681a      	ldr	r2, [r3, #0]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dba6:	601a      	str	r2, [r3, #0]
 800dba8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d04f      	beq.n	800dc52 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	685a      	ldr	r2, [r3, #4]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dbc0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	f003 0302 	and.w	r3, r3, #2
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d104      	bne.n	800dbde <HAL_SPI_IRQHandler+0x13a>
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	f003 0301 	and.w	r3, r3, #1
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d034      	beq.n	800dc48 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f022 0203 	bic.w	r2, r2, #3
 800dbec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d011      	beq.n	800dc1a <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbfa:	4a18      	ldr	r2, [pc, #96]	; (800dc5c <HAL_SPI_IRQHandler+0x1b8>)
 800dbfc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fb fd8c 	bl	8009720 <HAL_DMA_Abort_IT>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d005      	beq.n	800dc1a <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d016      	beq.n	800dc50 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc26:	4a0d      	ldr	r2, [pc, #52]	; (800dc5c <HAL_SPI_IRQHandler+0x1b8>)
 800dc28:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fb fd76 	bl	8009720 <HAL_DMA_Abort_IT>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00a      	beq.n	800dc50 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800dc46:	e003      	b.n	800dc50 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 f81b 	bl	800dc84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800dc4e:	e000      	b.n	800dc52 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 800dc50:	bf00      	nop
    return;
 800dc52:	bf00      	nop
  }
}
 800dc54:	3720      	adds	r7, #32
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	0800dc97 	.word	0x0800dc97

0800dc60 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800dc68:	bf00      	nop
 800dc6a:	370c      	adds	r7, #12
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bc80      	pop	{r7}
 800dc70:	4770      	bx	lr

0800dc72 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dc72:	b480      	push	{r7}
 800dc74:	b083      	sub	sp, #12
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800dc7a:	bf00      	nop
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bc80      	pop	{r7}
 800dc82:	4770      	bx	lr

0800dc84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800dc8c:	bf00      	nop
 800dc8e:	370c      	adds	r7, #12
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bc80      	pop	{r7}
 800dc94:	4770      	bx	lr

0800dc96 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b084      	sub	sp, #16
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2200      	movs	r2, #0
 800dcae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f7ff ffe7 	bl	800dc84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dcb6:	bf00      	nop
 800dcb8:	3710      	adds	r7, #16
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b082      	sub	sp, #8
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f103 020c 	add.w	r2, r3, #12
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd2:	7812      	ldrb	r2, [r2, #0]
 800dcd4:	b2d2      	uxtb	r2, r2
 800dcd6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcdc:	1c5a      	adds	r2, r3, #1
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	3b01      	subs	r3, #1
 800dcea:	b29a      	uxth	r2, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10f      	bne.n	800dd1a <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	685a      	ldr	r2, [r3, #4]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800dd08:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d102      	bne.n	800dd1a <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 f939 	bl	800df8c <SPI_CloseRxTx_ISR>
    }
  }
}
 800dd1a:	bf00      	nop
 800dd1c:	3708      	adds	r7, #8
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b082      	sub	sp, #8
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	330c      	adds	r3, #12
 800dd34:	7812      	ldrb	r2, [r2, #0]
 800dd36:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd3c:	1c5a      	adds	r2, r3, #1
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	b29a      	uxth	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d10f      	bne.n	800dd7a <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	685a      	ldr	r2, [r3, #4]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd68:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d102      	bne.n	800dd7a <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 f909 	bl	800df8c <SPI_CloseRxTx_ISR>
    }
  }
}
 800dd7a:	bf00      	nop
 800dd7c:	3708      	adds	r7, #8
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b082      	sub	sp, #8
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68da      	ldr	r2, [r3, #12]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd94:	b292      	uxth	r2, r2
 800dd96:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9c:	1c9a      	adds	r2, r3, #2
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	3b01      	subs	r3, #1
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d10f      	bne.n	800ddda <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	685a      	ldr	r2, [r3, #4]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddc8:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d102      	bne.n	800ddda <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f8d9 	bl	800df8c <SPI_CloseRxTx_ISR>
    }
  }
}
 800ddda:	bf00      	nop
 800dddc:	3708      	adds	r7, #8
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b082      	sub	sp, #8
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddee:	881a      	ldrh	r2, [r3, #0]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddfa:	1c9a      	adds	r2, r3, #2
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de04:	b29b      	uxth	r3, r3
 800de06:	3b01      	subs	r3, #1
 800de08:	b29a      	uxth	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de12:	b29b      	uxth	r3, r3
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10f      	bne.n	800de38 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	685a      	ldr	r2, [r3, #4]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de26:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d102      	bne.n	800de38 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 f8aa 	bl	800df8c <SPI_CloseRxTx_ISR>
    }
  }
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b088      	sub	sp, #32
 800de44:	af00      	add	r7, sp, #0
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	603b      	str	r3, [r7, #0]
 800de4c:	4613      	mov	r3, r2
 800de4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800de50:	f7fb fab8 	bl	80093c4 <HAL_GetTick>
 800de54:	4602      	mov	r2, r0
 800de56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de58:	1a9b      	subs	r3, r3, r2
 800de5a:	683a      	ldr	r2, [r7, #0]
 800de5c:	4413      	add	r3, r2
 800de5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800de60:	f7fb fab0 	bl	80093c4 <HAL_GetTick>
 800de64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800de66:	4b39      	ldr	r3, [pc, #228]	; (800df4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	015b      	lsls	r3, r3, #5
 800de6c:	0d1b      	lsrs	r3, r3, #20
 800de6e:	69fa      	ldr	r2, [r7, #28]
 800de70:	fb02 f303 	mul.w	r3, r2, r3
 800de74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de76:	e054      	b.n	800df22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de7e:	d050      	beq.n	800df22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800de80:	f7fb faa0 	bl	80093c4 <HAL_GetTick>
 800de84:	4602      	mov	r2, r0
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	1ad3      	subs	r3, r2, r3
 800de8a:	69fa      	ldr	r2, [r7, #28]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d902      	bls.n	800de96 <SPI_WaitFlagStateUntilTimeout+0x56>
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d13d      	bne.n	800df12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	685a      	ldr	r2, [r3, #4]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800deae:	d111      	bne.n	800ded4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	689b      	ldr	r3, [r3, #8]
 800deb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800deb8:	d004      	beq.n	800dec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dec2:	d107      	bne.n	800ded4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ded2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dedc:	d10f      	bne.n	800defe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800deec:	601a      	str	r2, [r3, #0]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800defc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2201      	movs	r2, #1
 800df02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800df0e:	2303      	movs	r3, #3
 800df10:	e017      	b.n	800df42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d101      	bne.n	800df1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800df18:	2300      	movs	r3, #0
 800df1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	3b01      	subs	r3, #1
 800df20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	689a      	ldr	r2, [r3, #8]
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	4013      	ands	r3, r2
 800df2c:	68ba      	ldr	r2, [r7, #8]
 800df2e:	429a      	cmp	r2, r3
 800df30:	bf0c      	ite	eq
 800df32:	2301      	moveq	r3, #1
 800df34:	2300      	movne	r3, #0
 800df36:	b2db      	uxtb	r3, r3
 800df38:	461a      	mov	r2, r3
 800df3a:	79fb      	ldrb	r3, [r7, #7]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d19b      	bne.n	800de78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	3720      	adds	r7, #32
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	20000138 	.word	0x20000138

0800df50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af02      	add	r7, sp, #8
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	2200      	movs	r2, #0
 800df64:	2180      	movs	r1, #128	; 0x80
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f7ff ff6a 	bl	800de40 <SPI_WaitFlagStateUntilTimeout>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d007      	beq.n	800df82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df76:	f043 0220 	orr.w	r2, r3, #32
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800df7e:	2303      	movs	r3, #3
 800df80:	e000      	b.n	800df84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800df82:	2300      	movs	r3, #0
}
 800df84:	4618      	mov	r0, r3
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b086      	sub	sp, #24
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800df94:	4b35      	ldr	r3, [pc, #212]	; (800e06c <SPI_CloseRxTx_ISR+0xe0>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a35      	ldr	r2, [pc, #212]	; (800e070 <SPI_CloseRxTx_ISR+0xe4>)
 800df9a:	fba2 2303 	umull	r2, r3, r2, r3
 800df9e:	0a5b      	lsrs	r3, r3, #9
 800dfa0:	2264      	movs	r2, #100	; 0x64
 800dfa2:	fb02 f303 	mul.w	r3, r2, r3
 800dfa6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dfa8:	f7fb fa0c 	bl	80093c4 <HAL_GetTick>
 800dfac:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	685a      	ldr	r2, [r3, #4]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f022 0220 	bic.w	r2, r2, #32
 800dfbc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d106      	bne.n	800dfd2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfc8:	f043 0220 	orr.w	r2, r3, #32
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dfd0:	e009      	b.n	800dfe6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	f003 0302 	and.w	r3, r3, #2
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d0eb      	beq.n	800dfbe <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800dfe6:	697a      	ldr	r2, [r7, #20]
 800dfe8:	2164      	movs	r1, #100	; 0x64
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7ff ffb0 	bl	800df50 <SPI_EndRxTxTransaction>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d005      	beq.n	800e002 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dffa:	f043 0220 	orr.w	r2, r3, #32
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d10a      	bne.n	800e020 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e00a:	2300      	movs	r3, #0
 800e00c:	60fb      	str	r3, [r7, #12]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	68db      	ldr	r3, [r3, #12]
 800e014:	60fb      	str	r3, [r7, #12]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	689b      	ldr	r3, [r3, #8]
 800e01c:	60fb      	str	r3, [r7, #12]
 800e01e:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e024:	2b00      	cmp	r3, #0
 800e026:	d115      	bne.n	800e054 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	2b04      	cmp	r3, #4
 800e032:	d107      	bne.n	800e044 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f7ff fe0f 	bl	800dc60 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800e042:	e00e      	b.n	800e062 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2201      	movs	r2, #1
 800e048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7ff fe10 	bl	800dc72 <HAL_SPI_TxRxCpltCallback>
}
 800e052:	e006      	b.n	800e062 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2201      	movs	r2, #1
 800e058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7ff fe11 	bl	800dc84 <HAL_SPI_ErrorCallback>
}
 800e062:	bf00      	nop
 800e064:	3718      	adds	r7, #24
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	20000138 	.word	0x20000138
 800e070:	057619f1 	.word	0x057619f1

0800e074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d101      	bne.n	800e086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e082:	2301      	movs	r3, #1
 800e084:	e042      	b.n	800e10c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d106      	bne.n	800e0a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f7fb f8c8 	bl	8009230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2224      	movs	r2, #36	; 0x24
 800e0a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	68da      	ldr	r2, [r3, #12]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e0b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f000 fd71 	bl	800eba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	691a      	ldr	r2, [r3, #16]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e0cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	695a      	ldr	r2, [r3, #20]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e0dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	68da      	ldr	r2, [r3, #12]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e0ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2220      	movs	r2, #32
 800e0f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2220      	movs	r2, #32
 800e100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e10a:	2300      	movs	r3, #0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08a      	sub	sp, #40	; 0x28
 800e118:	af02      	add	r7, sp, #8
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	603b      	str	r3, [r7, #0]
 800e120:	4613      	mov	r3, r2
 800e122:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e124:	2300      	movs	r3, #0
 800e126:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	2b20      	cmp	r3, #32
 800e132:	d16d      	bne.n	800e210 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d002      	beq.n	800e140 <HAL_UART_Transmit+0x2c>
 800e13a:	88fb      	ldrh	r3, [r7, #6]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d101      	bne.n	800e144 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e140:	2301      	movs	r3, #1
 800e142:	e066      	b.n	800e212 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2200      	movs	r2, #0
 800e148:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2221      	movs	r2, #33	; 0x21
 800e14e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e152:	f7fb f937 	bl	80093c4 <HAL_GetTick>
 800e156:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	88fa      	ldrh	r2, [r7, #6]
 800e15c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	88fa      	ldrh	r2, [r7, #6]
 800e162:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e16c:	d108      	bne.n	800e180 <HAL_UART_Transmit+0x6c>
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	691b      	ldr	r3, [r3, #16]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d104      	bne.n	800e180 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e176:	2300      	movs	r3, #0
 800e178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	61bb      	str	r3, [r7, #24]
 800e17e:	e003      	b.n	800e188 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e184:	2300      	movs	r3, #0
 800e186:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e188:	e02a      	b.n	800e1e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	2200      	movs	r2, #0
 800e192:	2180      	movs	r1, #128	; 0x80
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f000 faf9 	bl	800e78c <UART_WaitOnFlagUntilTimeout>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800e1a0:	2303      	movs	r3, #3
 800e1a2:	e036      	b.n	800e212 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d10b      	bne.n	800e1c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e1aa:	69bb      	ldr	r3, [r7, #24]
 800e1ac:	881b      	ldrh	r3, [r3, #0]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e1b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	3302      	adds	r3, #2
 800e1be:	61bb      	str	r3, [r7, #24]
 800e1c0:	e007      	b.n	800e1d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	781a      	ldrb	r2, [r3, #0]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d1cf      	bne.n	800e18a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	2140      	movs	r1, #64	; 0x40
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f000 fac9 	bl	800e78c <UART_WaitOnFlagUntilTimeout>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d001      	beq.n	800e204 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800e200:	2303      	movs	r3, #3
 800e202:	e006      	b.n	800e212 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2220      	movs	r2, #32
 800e208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800e20c:	2300      	movs	r3, #0
 800e20e:	e000      	b.n	800e212 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800e210:	2302      	movs	r3, #2
  }
}
 800e212:	4618      	mov	r0, r3
 800e214:	3720      	adds	r7, #32
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
	...

0800e21c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b0ba      	sub	sp, #232	; 0xe8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	695b      	ldr	r3, [r3, #20]
 800e23e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800e242:	2300      	movs	r3, #0
 800e244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800e248:	2300      	movs	r3, #0
 800e24a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e252:	f003 030f 	and.w	r3, r3, #15
 800e256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800e25a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d10f      	bne.n	800e282 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e266:	f003 0320 	and.w	r3, r3, #32
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d009      	beq.n	800e282 <HAL_UART_IRQHandler+0x66>
 800e26e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e272:	f003 0320 	and.w	r3, r3, #32
 800e276:	2b00      	cmp	r3, #0
 800e278:	d003      	beq.n	800e282 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fbd1 	bl	800ea22 <UART_Receive_IT>
      return;
 800e280:	e25b      	b.n	800e73a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e286:	2b00      	cmp	r3, #0
 800e288:	f000 80de 	beq.w	800e448 <HAL_UART_IRQHandler+0x22c>
 800e28c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e290:	f003 0301 	and.w	r3, r3, #1
 800e294:	2b00      	cmp	r3, #0
 800e296:	d106      	bne.n	800e2a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e29c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f000 80d1 	beq.w	800e448 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2aa:	f003 0301 	and.w	r3, r3, #1
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00b      	beq.n	800e2ca <HAL_UART_IRQHandler+0xae>
 800e2b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d005      	beq.n	800e2ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2c2:	f043 0201 	orr.w	r2, r3, #1
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ce:	f003 0304 	and.w	r3, r3, #4
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00b      	beq.n	800e2ee <HAL_UART_IRQHandler+0xd2>
 800e2d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2da:	f003 0301 	and.w	r3, r3, #1
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d005      	beq.n	800e2ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2e6:	f043 0202 	orr.w	r2, r3, #2
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2f2:	f003 0302 	and.w	r3, r3, #2
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00b      	beq.n	800e312 <HAL_UART_IRQHandler+0xf6>
 800e2fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2fe:	f003 0301 	and.w	r3, r3, #1
 800e302:	2b00      	cmp	r3, #0
 800e304:	d005      	beq.n	800e312 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e30a:	f043 0204 	orr.w	r2, r3, #4
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e316:	f003 0308 	and.w	r3, r3, #8
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d011      	beq.n	800e342 <HAL_UART_IRQHandler+0x126>
 800e31e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e322:	f003 0320 	and.w	r3, r3, #32
 800e326:	2b00      	cmp	r3, #0
 800e328:	d105      	bne.n	800e336 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e32a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e32e:	f003 0301 	and.w	r3, r3, #1
 800e332:	2b00      	cmp	r3, #0
 800e334:	d005      	beq.n	800e342 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e33a:	f043 0208 	orr.w	r2, r3, #8
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e346:	2b00      	cmp	r3, #0
 800e348:	f000 81f2 	beq.w	800e730 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e34c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e350:	f003 0320 	and.w	r3, r3, #32
 800e354:	2b00      	cmp	r3, #0
 800e356:	d008      	beq.n	800e36a <HAL_UART_IRQHandler+0x14e>
 800e358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e35c:	f003 0320 	and.w	r3, r3, #32
 800e360:	2b00      	cmp	r3, #0
 800e362:	d002      	beq.n	800e36a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 fb5c 	bl	800ea22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	695b      	ldr	r3, [r3, #20]
 800e370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e374:	2b00      	cmp	r3, #0
 800e376:	bf14      	ite	ne
 800e378:	2301      	movne	r3, #1
 800e37a:	2300      	moveq	r3, #0
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e386:	f003 0308 	and.w	r3, r3, #8
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d103      	bne.n	800e396 <HAL_UART_IRQHandler+0x17a>
 800e38e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e392:	2b00      	cmp	r3, #0
 800e394:	d04f      	beq.n	800e436 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 fa66 	bl	800e868 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	695b      	ldr	r3, [r3, #20]
 800e3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d041      	beq.n	800e42e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3314      	adds	r3, #20
 800e3b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e3b8:	e853 3f00 	ldrex	r3, [r3]
 800e3bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e3c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	3314      	adds	r3, #20
 800e3d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e3d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e3da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e3e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e3e6:	e841 2300 	strex	r3, r2, [r1]
 800e3ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e3ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1d9      	bne.n	800e3aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d013      	beq.n	800e426 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e402:	4a7e      	ldr	r2, [pc, #504]	; (800e5fc <HAL_UART_IRQHandler+0x3e0>)
 800e404:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fb f988 	bl	8009720 <HAL_DMA_Abort_IT>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d016      	beq.n	800e444 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e420:	4610      	mov	r0, r2
 800e422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e424:	e00e      	b.n	800e444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 f99c 	bl	800e764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e42c:	e00a      	b.n	800e444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 f998 	bl	800e764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e434:	e006      	b.n	800e444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f994 	bl	800e764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800e442:	e175      	b.n	800e730 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e444:	bf00      	nop
    return;
 800e446:	e173      	b.n	800e730 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	f040 814f 	bne.w	800e6f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e456:	f003 0310 	and.w	r3, r3, #16
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	f000 8148 	beq.w	800e6f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e464:	f003 0310 	and.w	r3, r3, #16
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f000 8141 	beq.w	800e6f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e46e:	2300      	movs	r3, #0
 800e470:	60bb      	str	r3, [r7, #8]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	60bb      	str	r3, [r7, #8]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	60bb      	str	r3, [r7, #8]
 800e482:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	695b      	ldr	r3, [r3, #20]
 800e48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f000 80b6 	beq.w	800e600 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e4a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 8145 	beq.w	800e734 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e4ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	f080 813e 	bcs.w	800e734 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e4be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4c4:	699b      	ldr	r3, [r3, #24]
 800e4c6:	2b20      	cmp	r3, #32
 800e4c8:	f000 8088 	beq.w	800e5dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	330c      	adds	r3, #12
 800e4d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e4da:	e853 3f00 	ldrex	r3, [r3]
 800e4de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e4e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	330c      	adds	r3, #12
 800e4f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e4f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e4fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e500:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e504:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e508:	e841 2300 	strex	r3, r2, [r1]
 800e50c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e514:	2b00      	cmp	r3, #0
 800e516:	d1d9      	bne.n	800e4cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	3314      	adds	r3, #20
 800e51e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e522:	e853 3f00 	ldrex	r3, [r3]
 800e526:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e528:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e52a:	f023 0301 	bic.w	r3, r3, #1
 800e52e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	3314      	adds	r3, #20
 800e538:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e53c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e540:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e542:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e544:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e548:	e841 2300 	strex	r3, r2, [r1]
 800e54c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e54e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e550:	2b00      	cmp	r3, #0
 800e552:	d1e1      	bne.n	800e518 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	3314      	adds	r3, #20
 800e55a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e55e:	e853 3f00 	ldrex	r3, [r3]
 800e562:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e56a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	3314      	adds	r3, #20
 800e574:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e578:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e57a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e57c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e57e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e580:	e841 2300 	strex	r3, r2, [r1]
 800e584:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d1e3      	bne.n	800e554 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2220      	movs	r2, #32
 800e590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2200      	movs	r2, #0
 800e598:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	330c      	adds	r3, #12
 800e5a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5a4:	e853 3f00 	ldrex	r3, [r3]
 800e5a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e5aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5ac:	f023 0310 	bic.w	r3, r3, #16
 800e5b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	330c      	adds	r3, #12
 800e5ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e5be:	65ba      	str	r2, [r7, #88]	; 0x58
 800e5c0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e5c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e5c6:	e841 2300 	strex	r3, r2, [r1]
 800e5ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e5cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1e3      	bne.n	800e59a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fb f867 	bl	80096aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2202      	movs	r2, #2
 800e5e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	1ad3      	subs	r3, r2, r3
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 f8bf 	bl	800e776 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e5f8:	e09c      	b.n	800e734 <HAL_UART_IRQHandler+0x518>
 800e5fa:	bf00      	nop
 800e5fc:	0800e92d 	.word	0x0800e92d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e608:	b29b      	uxth	r3, r3
 800e60a:	1ad3      	subs	r3, r2, r3
 800e60c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e614:	b29b      	uxth	r3, r3
 800e616:	2b00      	cmp	r3, #0
 800e618:	f000 808e 	beq.w	800e738 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800e61c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e620:	2b00      	cmp	r3, #0
 800e622:	f000 8089 	beq.w	800e738 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	330c      	adds	r3, #12
 800e62c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e630:	e853 3f00 	ldrex	r3, [r3]
 800e634:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e63c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	330c      	adds	r3, #12
 800e646:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e64a:	647a      	str	r2, [r7, #68]	; 0x44
 800e64c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e652:	e841 2300 	strex	r3, r2, [r1]
 800e656:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d1e3      	bne.n	800e626 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3314      	adds	r3, #20
 800e664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e668:	e853 3f00 	ldrex	r3, [r3]
 800e66c:	623b      	str	r3, [r7, #32]
   return(result);
 800e66e:	6a3b      	ldr	r3, [r7, #32]
 800e670:	f023 0301 	bic.w	r3, r3, #1
 800e674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3314      	adds	r3, #20
 800e67e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e682:	633a      	str	r2, [r7, #48]	; 0x30
 800e684:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e68a:	e841 2300 	strex	r3, r2, [r1]
 800e68e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e692:	2b00      	cmp	r3, #0
 800e694:	d1e3      	bne.n	800e65e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2220      	movs	r2, #32
 800e69a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	330c      	adds	r3, #12
 800e6aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	e853 3f00 	ldrex	r3, [r3]
 800e6b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f023 0310 	bic.w	r3, r3, #16
 800e6ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	330c      	adds	r3, #12
 800e6c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e6c8:	61fa      	str	r2, [r7, #28]
 800e6ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6cc:	69b9      	ldr	r1, [r7, #24]
 800e6ce:	69fa      	ldr	r2, [r7, #28]
 800e6d0:	e841 2300 	strex	r3, r2, [r1]
 800e6d4:	617b      	str	r3, [r7, #20]
   return(result);
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d1e3      	bne.n	800e6a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2202      	movs	r2, #2
 800e6e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 f844 	bl	800e776 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e6ee:	e023      	b.n	800e738 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d009      	beq.n	800e710 <HAL_UART_IRQHandler+0x4f4>
 800e6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e704:	2b00      	cmp	r3, #0
 800e706:	d003      	beq.n	800e710 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 f923 	bl	800e954 <UART_Transmit_IT>
    return;
 800e70e:	e014      	b.n	800e73a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d00e      	beq.n	800e73a <HAL_UART_IRQHandler+0x51e>
 800e71c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e724:	2b00      	cmp	r3, #0
 800e726:	d008      	beq.n	800e73a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 f962 	bl	800e9f2 <UART_EndTransmit_IT>
    return;
 800e72e:	e004      	b.n	800e73a <HAL_UART_IRQHandler+0x51e>
    return;
 800e730:	bf00      	nop
 800e732:	e002      	b.n	800e73a <HAL_UART_IRQHandler+0x51e>
      return;
 800e734:	bf00      	nop
 800e736:	e000      	b.n	800e73a <HAL_UART_IRQHandler+0x51e>
      return;
 800e738:	bf00      	nop
  }
}
 800e73a:	37e8      	adds	r7, #232	; 0xe8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bc80      	pop	{r7}
 800e750:	4770      	bx	lr

0800e752 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e752:	b480      	push	{r7}
 800e754:	b083      	sub	sp, #12
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e75a:	bf00      	nop
 800e75c:	370c      	adds	r7, #12
 800e75e:	46bd      	mov	sp, r7
 800e760:	bc80      	pop	{r7}
 800e762:	4770      	bx	lr

0800e764 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e76c:	bf00      	nop
 800e76e:	370c      	adds	r7, #12
 800e770:	46bd      	mov	sp, r7
 800e772:	bc80      	pop	{r7}
 800e774:	4770      	bx	lr

0800e776 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e776:	b480      	push	{r7}
 800e778:	b083      	sub	sp, #12
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
 800e77e:	460b      	mov	r3, r1
 800e780:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e782:	bf00      	nop
 800e784:	370c      	adds	r7, #12
 800e786:	46bd      	mov	sp, r7
 800e788:	bc80      	pop	{r7}
 800e78a:	4770      	bx	lr

0800e78c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b090      	sub	sp, #64	; 0x40
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	603b      	str	r3, [r7, #0]
 800e798:	4613      	mov	r3, r2
 800e79a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e79c:	e050      	b.n	800e840 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e79e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7a4:	d04c      	beq.n	800e840 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e7a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d007      	beq.n	800e7bc <UART_WaitOnFlagUntilTimeout+0x30>
 800e7ac:	f7fa fe0a 	bl	80093c4 <HAL_GetTick>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	1ad3      	subs	r3, r2, r3
 800e7b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d241      	bcs.n	800e840 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	330c      	adds	r3, #12
 800e7c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c6:	e853 3f00 	ldrex	r3, [r3]
 800e7ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	330c      	adds	r3, #12
 800e7da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7dc:	637a      	str	r2, [r7, #52]	; 0x34
 800e7de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e7e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7e4:	e841 2300 	strex	r3, r2, [r1]
 800e7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d1e5      	bne.n	800e7bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	3314      	adds	r3, #20
 800e7f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	e853 3f00 	ldrex	r3, [r3]
 800e7fe:	613b      	str	r3, [r7, #16]
   return(result);
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	f023 0301 	bic.w	r3, r3, #1
 800e806:	63bb      	str	r3, [r7, #56]	; 0x38
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	3314      	adds	r3, #20
 800e80e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e810:	623a      	str	r2, [r7, #32]
 800e812:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e814:	69f9      	ldr	r1, [r7, #28]
 800e816:	6a3a      	ldr	r2, [r7, #32]
 800e818:	e841 2300 	strex	r3, r2, [r1]
 800e81c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d1e5      	bne.n	800e7f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2220      	movs	r2, #32
 800e828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2220      	movs	r2, #32
 800e830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2200      	movs	r2, #0
 800e838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800e83c:	2303      	movs	r3, #3
 800e83e:	e00f      	b.n	800e860 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	4013      	ands	r3, r2
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	bf0c      	ite	eq
 800e850:	2301      	moveq	r3, #1
 800e852:	2300      	movne	r3, #0
 800e854:	b2db      	uxtb	r3, r3
 800e856:	461a      	mov	r2, r3
 800e858:	79fb      	ldrb	r3, [r7, #7]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d09f      	beq.n	800e79e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e85e:	2300      	movs	r3, #0
}
 800e860:	4618      	mov	r0, r3
 800e862:	3740      	adds	r7, #64	; 0x40
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e868:	b480      	push	{r7}
 800e86a:	b095      	sub	sp, #84	; 0x54
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	330c      	adds	r3, #12
 800e876:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e87a:	e853 3f00 	ldrex	r3, [r3]
 800e87e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e882:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e886:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	330c      	adds	r3, #12
 800e88e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e890:	643a      	str	r2, [r7, #64]	; 0x40
 800e892:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e894:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e896:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e898:	e841 2300 	strex	r3, r2, [r1]
 800e89c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d1e5      	bne.n	800e870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3314      	adds	r3, #20
 800e8aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ac:	6a3b      	ldr	r3, [r7, #32]
 800e8ae:	e853 3f00 	ldrex	r3, [r3]
 800e8b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	f023 0301 	bic.w	r3, r3, #1
 800e8ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	3314      	adds	r3, #20
 800e8c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e8c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8cc:	e841 2300 	strex	r3, r2, [r1]
 800e8d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d1e5      	bne.n	800e8a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d119      	bne.n	800e914 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	330c      	adds	r3, #12
 800e8e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	e853 3f00 	ldrex	r3, [r3]
 800e8ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	f023 0310 	bic.w	r3, r3, #16
 800e8f6:	647b      	str	r3, [r7, #68]	; 0x44
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	330c      	adds	r3, #12
 800e8fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e900:	61ba      	str	r2, [r7, #24]
 800e902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e904:	6979      	ldr	r1, [r7, #20]
 800e906:	69ba      	ldr	r2, [r7, #24]
 800e908:	e841 2300 	strex	r3, r2, [r1]
 800e90c:	613b      	str	r3, [r7, #16]
   return(result);
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d1e5      	bne.n	800e8e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2220      	movs	r2, #32
 800e918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2200      	movs	r2, #0
 800e920:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e922:	bf00      	nop
 800e924:	3754      	adds	r7, #84	; 0x54
 800e926:	46bd      	mov	sp, r7
 800e928:	bc80      	pop	{r7}
 800e92a:	4770      	bx	lr

0800e92c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e938:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2200      	movs	r2, #0
 800e93e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2200      	movs	r2, #0
 800e944:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e946:	68f8      	ldr	r0, [r7, #12]
 800e948:	f7ff ff0c 	bl	800e764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e94c:	bf00      	nop
 800e94e:	3710      	adds	r7, #16
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e954:	b480      	push	{r7}
 800e956:	b085      	sub	sp, #20
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e962:	b2db      	uxtb	r3, r3
 800e964:	2b21      	cmp	r3, #33	; 0x21
 800e966:	d13e      	bne.n	800e9e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e970:	d114      	bne.n	800e99c <UART_Transmit_IT+0x48>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	691b      	ldr	r3, [r3, #16]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d110      	bne.n	800e99c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a1b      	ldr	r3, [r3, #32]
 800e97e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	881b      	ldrh	r3, [r3, #0]
 800e984:	461a      	mov	r2, r3
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e98e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6a1b      	ldr	r3, [r3, #32]
 800e994:	1c9a      	adds	r2, r3, #2
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	621a      	str	r2, [r3, #32]
 800e99a:	e008      	b.n	800e9ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6a1b      	ldr	r3, [r3, #32]
 800e9a0:	1c59      	adds	r1, r3, #1
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	6211      	str	r1, [r2, #32]
 800e9a6:	781a      	ldrb	r2, [r3, #0]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	687a      	ldr	r2, [r7, #4]
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d10f      	bne.n	800e9e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	68da      	ldr	r2, [r3, #12]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e9d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	68da      	ldr	r2, [r3, #12]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	e000      	b.n	800e9e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e9e6:	2302      	movs	r3, #2
  }
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3714      	adds	r7, #20
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bc80      	pop	{r7}
 800e9f0:	4770      	bx	lr

0800e9f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b082      	sub	sp, #8
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	68da      	ldr	r2, [r3, #12]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2220      	movs	r2, #32
 800ea0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f7ff fe94 	bl	800e740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ea18:	2300      	movs	r3, #0
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}

0800ea22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ea22:	b580      	push	{r7, lr}
 800ea24:	b08c      	sub	sp, #48	; 0x30
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	2b22      	cmp	r3, #34	; 0x22
 800ea34:	f040 80ae 	bne.w	800eb94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	689b      	ldr	r3, [r3, #8]
 800ea3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea40:	d117      	bne.n	800ea72 <UART_Receive_IT+0x50>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	691b      	ldr	r3, [r3, #16]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d113      	bne.n	800ea72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea60:	b29a      	uxth	r2, r3
 800ea62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea6a:	1c9a      	adds	r2, r3, #2
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	629a      	str	r2, [r3, #40]	; 0x28
 800ea70:	e026      	b.n	800eac0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea84:	d007      	beq.n	800ea96 <UART_Receive_IT+0x74>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d10a      	bne.n	800eaa4 <UART_Receive_IT+0x82>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d106      	bne.n	800eaa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	b2da      	uxtb	r2, r3
 800ea9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa0:	701a      	strb	r2, [r3, #0]
 800eaa2:	e008      	b.n	800eab6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eab0:	b2da      	uxtb	r2, r3
 800eab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaba:	1c5a      	adds	r2, r3, #1
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	3b01      	subs	r3, #1
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	4619      	mov	r1, r3
 800eace:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d15d      	bne.n	800eb90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	68da      	ldr	r2, [r3, #12]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f022 0220 	bic.w	r2, r2, #32
 800eae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	68da      	ldr	r2, [r3, #12]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800eaf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	695a      	ldr	r2, [r3, #20]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f022 0201 	bic.w	r2, r2, #1
 800eb02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2220      	movs	r2, #32
 800eb08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d135      	bne.n	800eb86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	330c      	adds	r3, #12
 800eb26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	e853 3f00 	ldrex	r3, [r3]
 800eb2e:	613b      	str	r3, [r7, #16]
   return(result);
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	f023 0310 	bic.w	r3, r3, #16
 800eb36:	627b      	str	r3, [r7, #36]	; 0x24
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	330c      	adds	r3, #12
 800eb3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb40:	623a      	str	r2, [r7, #32]
 800eb42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb44:	69f9      	ldr	r1, [r7, #28]
 800eb46:	6a3a      	ldr	r2, [r7, #32]
 800eb48:	e841 2300 	strex	r3, r2, [r1]
 800eb4c:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d1e5      	bne.n	800eb20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f003 0310 	and.w	r3, r3, #16
 800eb5e:	2b10      	cmp	r3, #16
 800eb60:	d10a      	bne.n	800eb78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800eb62:	2300      	movs	r3, #0
 800eb64:	60fb      	str	r3, [r7, #12]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	60fb      	str	r3, [r7, #12]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	60fb      	str	r3, [r7, #12]
 800eb76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f7ff fdf9 	bl	800e776 <HAL_UARTEx_RxEventCallback>
 800eb84:	e002      	b.n	800eb8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f7ff fde3 	bl	800e752 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	e002      	b.n	800eb96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800eb90:	2300      	movs	r3, #0
 800eb92:	e000      	b.n	800eb96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800eb94:	2302      	movs	r3, #2
  }
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3730      	adds	r7, #48	; 0x30
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
	...

0800eba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	691b      	ldr	r3, [r3, #16]
 800ebae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	68da      	ldr	r2, [r3, #12]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	430a      	orrs	r2, r1
 800ebbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	689a      	ldr	r2, [r3, #8]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	691b      	ldr	r3, [r3, #16]
 800ebc6:	431a      	orrs	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	695b      	ldr	r3, [r3, #20]
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800ebda:	f023 030c 	bic.w	r3, r3, #12
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	6812      	ldr	r2, [r2, #0]
 800ebe2:	68b9      	ldr	r1, [r7, #8]
 800ebe4:	430b      	orrs	r3, r1
 800ebe6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	695b      	ldr	r3, [r3, #20]
 800ebee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	699a      	ldr	r2, [r3, #24]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	430a      	orrs	r2, r1
 800ebfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4a2c      	ldr	r2, [pc, #176]	; (800ecb4 <UART_SetConfig+0x114>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d103      	bne.n	800ec10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ec08:	f7fd fe9c 	bl	800c944 <HAL_RCC_GetPCLK2Freq>
 800ec0c:	60f8      	str	r0, [r7, #12]
 800ec0e:	e002      	b.n	800ec16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ec10:	f7fd fe84 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 800ec14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ec16:	68fa      	ldr	r2, [r7, #12]
 800ec18:	4613      	mov	r3, r2
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	4413      	add	r3, r2
 800ec1e:	009a      	lsls	r2, r3, #2
 800ec20:	441a      	add	r2, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec2c:	4a22      	ldr	r2, [pc, #136]	; (800ecb8 <UART_SetConfig+0x118>)
 800ec2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ec32:	095b      	lsrs	r3, r3, #5
 800ec34:	0119      	lsls	r1, r3, #4
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	4613      	mov	r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	4413      	add	r3, r2
 800ec3e:	009a      	lsls	r2, r3, #2
 800ec40:	441a      	add	r2, r3
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	009b      	lsls	r3, r3, #2
 800ec48:	fbb2 f2f3 	udiv	r2, r2, r3
 800ec4c:	4b1a      	ldr	r3, [pc, #104]	; (800ecb8 <UART_SetConfig+0x118>)
 800ec4e:	fba3 0302 	umull	r0, r3, r3, r2
 800ec52:	095b      	lsrs	r3, r3, #5
 800ec54:	2064      	movs	r0, #100	; 0x64
 800ec56:	fb00 f303 	mul.w	r3, r0, r3
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	011b      	lsls	r3, r3, #4
 800ec5e:	3332      	adds	r3, #50	; 0x32
 800ec60:	4a15      	ldr	r2, [pc, #84]	; (800ecb8 <UART_SetConfig+0x118>)
 800ec62:	fba2 2303 	umull	r2, r3, r2, r3
 800ec66:	095b      	lsrs	r3, r3, #5
 800ec68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec6c:	4419      	add	r1, r3
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	4613      	mov	r3, r2
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	4413      	add	r3, r2
 800ec76:	009a      	lsls	r2, r3, #2
 800ec78:	441a      	add	r2, r3
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	fbb2 f2f3 	udiv	r2, r2, r3
 800ec84:	4b0c      	ldr	r3, [pc, #48]	; (800ecb8 <UART_SetConfig+0x118>)
 800ec86:	fba3 0302 	umull	r0, r3, r3, r2
 800ec8a:	095b      	lsrs	r3, r3, #5
 800ec8c:	2064      	movs	r0, #100	; 0x64
 800ec8e:	fb00 f303 	mul.w	r3, r0, r3
 800ec92:	1ad3      	subs	r3, r2, r3
 800ec94:	011b      	lsls	r3, r3, #4
 800ec96:	3332      	adds	r3, #50	; 0x32
 800ec98:	4a07      	ldr	r2, [pc, #28]	; (800ecb8 <UART_SetConfig+0x118>)
 800ec9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ec9e:	095b      	lsrs	r3, r3, #5
 800eca0:	f003 020f 	and.w	r2, r3, #15
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	440a      	add	r2, r1
 800ecaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ecac:	bf00      	nop
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	40013800 	.word	0x40013800
 800ecb8:	51eb851f 	.word	0x51eb851f

0800ecbc <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b10      	cmp	r3, #16
 800eccc:	d11c      	bne.n	800ed08 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	4b1e      	ldr	r3, [pc, #120]	; (800ed4c <FSMC_NAND_Init+0x90>)
 800ecd4:	4013      	ands	r3, r2
 800ecd6:	683a      	ldr	r2, [r7, #0]
 800ecd8:	6851      	ldr	r1, [r2, #4]
 800ecda:	683a      	ldr	r2, [r7, #0]
 800ecdc:	6892      	ldr	r2, [r2, #8]
 800ecde:	4311      	orrs	r1, r2
 800ece0:	683a      	ldr	r2, [r7, #0]
 800ece2:	68d2      	ldr	r2, [r2, #12]
 800ece4:	4311      	orrs	r1, r2
 800ece6:	683a      	ldr	r2, [r7, #0]
 800ece8:	6912      	ldr	r2, [r2, #16]
 800ecea:	4311      	orrs	r1, r2
 800ecec:	683a      	ldr	r2, [r7, #0]
 800ecee:	6952      	ldr	r2, [r2, #20]
 800ecf0:	0252      	lsls	r2, r2, #9
 800ecf2:	4311      	orrs	r1, r2
 800ecf4:	683a      	ldr	r2, [r7, #0]
 800ecf6:	6992      	ldr	r2, [r2, #24]
 800ecf8:	0352      	lsls	r2, r2, #13
 800ecfa:	430a      	orrs	r2, r1
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	f043 0208 	orr.w	r2, r3, #8
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	601a      	str	r2, [r3, #0]
 800ed06:	e01b      	b.n	800ed40 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCRx_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6a1a      	ldr	r2, [r3, #32]
 800ed0c:	4b0f      	ldr	r3, [pc, #60]	; (800ed4c <FSMC_NAND_Init+0x90>)
 800ed0e:	4013      	ands	r3, r2
 800ed10:	683a      	ldr	r2, [r7, #0]
 800ed12:	6851      	ldr	r1, [r2, #4]
 800ed14:	683a      	ldr	r2, [r7, #0]
 800ed16:	6892      	ldr	r2, [r2, #8]
 800ed18:	4311      	orrs	r1, r2
 800ed1a:	683a      	ldr	r2, [r7, #0]
 800ed1c:	68d2      	ldr	r2, [r2, #12]
 800ed1e:	4311      	orrs	r1, r2
 800ed20:	683a      	ldr	r2, [r7, #0]
 800ed22:	6912      	ldr	r2, [r2, #16]
 800ed24:	4311      	orrs	r1, r2
 800ed26:	683a      	ldr	r2, [r7, #0]
 800ed28:	6952      	ldr	r2, [r2, #20]
 800ed2a:	0252      	lsls	r2, r2, #9
 800ed2c:	4311      	orrs	r1, r2
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	6992      	ldr	r2, [r2, #24]
 800ed32:	0352      	lsls	r2, r2, #13
 800ed34:	430a      	orrs	r2, r1
 800ed36:	4313      	orrs	r3, r2
 800ed38:	f043 0208 	orr.w	r2, r3, #8
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCRx_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCRx_TAR_Pos)));
  }

  return HAL_OK;
 800ed40:	2300      	movs	r3, #0
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	370c      	adds	r7, #12
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bc80      	pop	{r7}
 800ed4a:	4770      	bx	lr
 800ed4c:	fff00181 	.word	0xfff00181

0800ed50 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b085      	sub	sp, #20
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2b10      	cmp	r3, #16
 800ed60:	d112      	bne.n	800ed88 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	021b      	lsls	r3, r3, #8
 800ed70:	431a      	orrs	r2, r3
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	041b      	lsls	r3, r3, #16
 800ed78:	431a      	orrs	r2, r3
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	061b      	lsls	r3, r3, #24
 800ed80:	431a      	orrs	r2, r3
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	609a      	str	r2, [r3, #8]
 800ed86:	e011      	b.n	800edac <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEMx_MEMHIZx_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	021b      	lsls	r3, r3, #8
 800ed96:	431a      	orrs	r2, r3
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	689b      	ldr	r3, [r3, #8]
 800ed9c:	041b      	lsls	r3, r3, #16
 800ed9e:	431a      	orrs	r2, r3
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	061b      	lsls	r3, r3, #24
 800eda6:	431a      	orrs	r2, r3
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEMx_MEMWAITx_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEMx_MEMHOLDx_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEMx_MEMHIZx_Pos)));
  }

  return HAL_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3714      	adds	r7, #20
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bc80      	pop	{r7}
 800edb6:	4770      	bx	lr

0800edb8 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	60f8      	str	r0, [r7, #12]
 800edc0:	60b9      	str	r1, [r7, #8]
 800edc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b10      	cmp	r3, #16
 800edc8:	d112      	bne.n	800edf0 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	021b      	lsls	r3, r3, #8
 800edd8:	431a      	orrs	r2, r3
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	689b      	ldr	r3, [r3, #8]
 800edde:	041b      	lsls	r3, r3, #16
 800ede0:	431a      	orrs	r2, r3
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	061b      	lsls	r3, r3, #24
 800ede8:	431a      	orrs	r2, r3
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	60da      	str	r2, [r3, #12]
 800edee:	e011      	b.n	800ee14 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATTx_ATTHIZx_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	681a      	ldr	r2, [r3, #0]
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	021b      	lsls	r3, r3, #8
 800edfe:	431a      	orrs	r2, r3
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	041b      	lsls	r3, r3, #16
 800ee06:	431a      	orrs	r2, r3
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	061b      	lsls	r3, r3, #24
 800ee0e:	431a      	orrs	r2, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATTx_ATTWAITx_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATTx_ATTHOLDx_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATTx_ATTHIZx_Pos)));
  }

  return HAL_OK;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3714      	adds	r7, #20
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bc80      	pop	{r7}
 800ee1e:	4770      	bx	lr

0800ee20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ee20:	b084      	sub	sp, #16
 800ee22:	b480      	push	{r7}
 800ee24:	b083      	sub	sp, #12
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
 800ee2a:	f107 0014 	add.w	r0, r7, #20
 800ee2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ee32:	2300      	movs	r3, #0
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bc80      	pop	{r7}
 800ee3c:	b004      	add	sp, #16
 800ee3e:	4770      	bx	lr

0800ee40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ee50:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800ee54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	b29a      	uxth	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ee60:	2300      	movs	r3, #0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3714      	adds	r7, #20
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bc80      	pop	{r7}
 800ee6a:	4770      	bx	lr

0800ee6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b085      	sub	sp, #20
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ee74:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800ee78:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	43db      	mvns	r3, r3
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	4013      	ands	r3, r2
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3714      	adds	r7, #20
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bc80      	pop	{r7}
 800ee9e:	4770      	bx	lr

0800eea0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	460b      	mov	r3, r1
 800eeaa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800eeac:	2300      	movs	r3, #0
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	370c      	adds	r7, #12
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bc80      	pop	{r7}
 800eeb6:	4770      	bx	lr

0800eeb8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800eeb8:	b084      	sub	sp, #16
 800eeba:	b480      	push	{r7}
 800eebc:	b083      	sub	sp, #12
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
 800eec2:	f107 0014 	add.w	r0, r7, #20
 800eec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2201      	movs	r2, #1
 800eece:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2200      	movs	r2, #0
 800eed6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800eeea:	2300      	movs	r3, #0
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bc80      	pop	{r7}
 800eef4:	b004      	add	sp, #16
 800eef6:	4770      	bx	lr

0800eef8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b09d      	sub	sp, #116	; 0x74
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ef02:	2300      	movs	r3, #0
 800ef04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	4413      	add	r3, r2
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ef1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef1e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	78db      	ldrb	r3, [r3, #3]
 800ef26:	2b03      	cmp	r3, #3
 800ef28:	d81f      	bhi.n	800ef6a <USB_ActivateEndpoint+0x72>
 800ef2a:	a201      	add	r2, pc, #4	; (adr r2, 800ef30 <USB_ActivateEndpoint+0x38>)
 800ef2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef30:	0800ef41 	.word	0x0800ef41
 800ef34:	0800ef5d 	.word	0x0800ef5d
 800ef38:	0800ef73 	.word	0x0800ef73
 800ef3c:	0800ef4f 	.word	0x0800ef4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ef40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ef44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ef48:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ef4c:	e012      	b.n	800ef74 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ef4e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ef52:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ef56:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ef5a:	e00b      	b.n	800ef74 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ef5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ef60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ef64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ef68:	e004      	b.n	800ef74 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800ef70:	e000      	b.n	800ef74 <USB_ActivateEndpoint+0x7c>
      break;
 800ef72:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	441a      	add	r2, r3
 800ef7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ef82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	4413      	add	r3, r2
 800efa0:	881b      	ldrh	r3, [r3, #0]
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efac:	b29a      	uxth	r2, r3
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	4313      	orrs	r3, r2
 800efb6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	441a      	add	r2, r3
 800efc4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800efc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800efd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efd8:	b29b      	uxth	r3, r3
 800efda:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	7b1b      	ldrb	r3, [r3, #12]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	f040 8178 	bne.w	800f2d6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	785b      	ldrb	r3, [r3, #1]
 800efea:	2b00      	cmp	r3, #0
 800efec:	f000 8084 	beq.w	800f0f8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	61bb      	str	r3, [r7, #24]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800effa:	b29b      	uxth	r3, r3
 800effc:	461a      	mov	r2, r3
 800effe:	69bb      	ldr	r3, [r7, #24]
 800f000:	4413      	add	r3, r2
 800f002:	61bb      	str	r3, [r7, #24]
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	011a      	lsls	r2, r3, #4
 800f00a:	69bb      	ldr	r3, [r7, #24]
 800f00c:	4413      	add	r3, r2
 800f00e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f012:	617b      	str	r3, [r7, #20]
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	88db      	ldrh	r3, [r3, #6]
 800f018:	085b      	lsrs	r3, r3, #1
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	005b      	lsls	r3, r3, #1
 800f01e:	b29a      	uxth	r2, r3
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f024:	687a      	ldr	r2, [r7, #4]
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	4413      	add	r3, r2
 800f02e:	881b      	ldrh	r3, [r3, #0]
 800f030:	827b      	strh	r3, [r7, #18]
 800f032:	8a7b      	ldrh	r3, [r7, #18]
 800f034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d01b      	beq.n	800f074 <USB_ActivateEndpoint+0x17c>
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	4413      	add	r3, r2
 800f046:	881b      	ldrh	r3, [r3, #0]
 800f048:	b29b      	uxth	r3, r3
 800f04a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f04e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f052:	823b      	strh	r3, [r7, #16]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	441a      	add	r2, r3
 800f05e:	8a3b      	ldrh	r3, [r7, #16]
 800f060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f06c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f070:	b29b      	uxth	r3, r3
 800f072:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	78db      	ldrb	r3, [r3, #3]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d020      	beq.n	800f0be <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	4413      	add	r3, r2
 800f086:	881b      	ldrh	r3, [r3, #0]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f08e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f092:	81bb      	strh	r3, [r7, #12]
 800f094:	89bb      	ldrh	r3, [r7, #12]
 800f096:	f083 0320 	eor.w	r3, r3, #32
 800f09a:	81bb      	strh	r3, [r7, #12]
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	441a      	add	r2, r3
 800f0a6:	89bb      	ldrh	r3, [r7, #12]
 800f0a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	8013      	strh	r3, [r2, #0]
 800f0bc:	e2d5      	b.n	800f66a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	009b      	lsls	r3, r3, #2
 800f0c6:	4413      	add	r3, r2
 800f0c8:	881b      	ldrh	r3, [r3, #0]
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0d4:	81fb      	strh	r3, [r7, #14]
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	441a      	add	r2, r3
 800f0e0:	89fb      	ldrh	r3, [r7, #14]
 800f0e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	8013      	strh	r3, [r2, #0]
 800f0f6:	e2b8      	b.n	800f66a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	633b      	str	r3, [r7, #48]	; 0x30
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f102:	b29b      	uxth	r3, r3
 800f104:	461a      	mov	r2, r3
 800f106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f108:	4413      	add	r3, r2
 800f10a:	633b      	str	r3, [r7, #48]	; 0x30
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	011a      	lsls	r2, r3, #4
 800f112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f114:	4413      	add	r3, r2
 800f116:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800f11a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	88db      	ldrh	r3, [r3, #6]
 800f120:	085b      	lsrs	r3, r3, #1
 800f122:	b29b      	uxth	r3, r3
 800f124:	005b      	lsls	r3, r3, #1
 800f126:	b29a      	uxth	r2, r3
 800f128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f136:	b29b      	uxth	r3, r3
 800f138:	461a      	mov	r2, r3
 800f13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13c:	4413      	add	r3, r2
 800f13e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	011a      	lsls	r2, r3, #4
 800f146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f148:	4413      	add	r3, r2
 800f14a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f14e:	627b      	str	r3, [r7, #36]	; 0x24
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	881b      	ldrh	r3, [r3, #0]
 800f154:	b29b      	uxth	r3, r3
 800f156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f15a:	b29a      	uxth	r2, r3
 800f15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15e:	801a      	strh	r2, [r3, #0]
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	691b      	ldr	r3, [r3, #16]
 800f164:	2b3e      	cmp	r3, #62	; 0x3e
 800f166:	d91d      	bls.n	800f1a4 <USB_ActivateEndpoint+0x2ac>
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	691b      	ldr	r3, [r3, #16]
 800f16c:	095b      	lsrs	r3, r3, #5
 800f16e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	691b      	ldr	r3, [r3, #16]
 800f174:	f003 031f 	and.w	r3, r3, #31
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d102      	bne.n	800f182 <USB_ActivateEndpoint+0x28a>
 800f17c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f17e:	3b01      	subs	r3, #1
 800f180:	66bb      	str	r3, [r7, #104]	; 0x68
 800f182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f184:	881b      	ldrh	r3, [r3, #0]
 800f186:	b29a      	uxth	r2, r3
 800f188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	029b      	lsls	r3, r3, #10
 800f18e:	b29b      	uxth	r3, r3
 800f190:	4313      	orrs	r3, r2
 800f192:	b29b      	uxth	r3, r3
 800f194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a0:	801a      	strh	r2, [r3, #0]
 800f1a2:	e026      	b.n	800f1f2 <USB_ActivateEndpoint+0x2fa>
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	691b      	ldr	r3, [r3, #16]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d10a      	bne.n	800f1c2 <USB_ActivateEndpoint+0x2ca>
 800f1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ae:	881b      	ldrh	r3, [r3, #0]
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1be:	801a      	strh	r2, [r3, #0]
 800f1c0:	e017      	b.n	800f1f2 <USB_ActivateEndpoint+0x2fa>
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	691b      	ldr	r3, [r3, #16]
 800f1c6:	085b      	lsrs	r3, r3, #1
 800f1c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	691b      	ldr	r3, [r3, #16]
 800f1ce:	f003 0301 	and.w	r3, r3, #1
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d002      	beq.n	800f1dc <USB_ActivateEndpoint+0x2e4>
 800f1d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1d8:	3301      	adds	r3, #1
 800f1da:	66bb      	str	r3, [r7, #104]	; 0x68
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1de:	881b      	ldrh	r3, [r3, #0]
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	029b      	lsls	r3, r3, #10
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	b29a      	uxth	r2, r3
 800f1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	009b      	lsls	r3, r3, #2
 800f1fa:	4413      	add	r3, r2
 800f1fc:	881b      	ldrh	r3, [r3, #0]
 800f1fe:	847b      	strh	r3, [r7, #34]	; 0x22
 800f200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f206:	2b00      	cmp	r3, #0
 800f208:	d01b      	beq.n	800f242 <USB_ActivateEndpoint+0x34a>
 800f20a:	687a      	ldr	r2, [r7, #4]
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	4413      	add	r3, r2
 800f214:	881b      	ldrh	r3, [r3, #0]
 800f216:	b29b      	uxth	r3, r3
 800f218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f21c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f220:	843b      	strh	r3, [r7, #32]
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	441a      	add	r2, r3
 800f22c:	8c3b      	ldrh	r3, [r7, #32]
 800f22e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f23e:	b29b      	uxth	r3, r3
 800f240:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d124      	bne.n	800f294 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f24a:	687a      	ldr	r2, [r7, #4]
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	009b      	lsls	r3, r3, #2
 800f252:	4413      	add	r3, r2
 800f254:	881b      	ldrh	r3, [r3, #0]
 800f256:	b29b      	uxth	r3, r3
 800f258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f25c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f260:	83bb      	strh	r3, [r7, #28]
 800f262:	8bbb      	ldrh	r3, [r7, #28]
 800f264:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f268:	83bb      	strh	r3, [r7, #28]
 800f26a:	8bbb      	ldrh	r3, [r7, #28]
 800f26c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f270:	83bb      	strh	r3, [r7, #28]
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	009b      	lsls	r3, r3, #2
 800f27a:	441a      	add	r2, r3
 800f27c:	8bbb      	ldrh	r3, [r7, #28]
 800f27e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f28a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f28e:	b29b      	uxth	r3, r3
 800f290:	8013      	strh	r3, [r2, #0]
 800f292:	e1ea      	b.n	800f66a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	4413      	add	r3, r2
 800f29e:	881b      	ldrh	r3, [r3, #0]
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f2a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2aa:	83fb      	strh	r3, [r7, #30]
 800f2ac:	8bfb      	ldrh	r3, [r7, #30]
 800f2ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f2b2:	83fb      	strh	r3, [r7, #30]
 800f2b4:	687a      	ldr	r2, [r7, #4]
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	441a      	add	r2, r3
 800f2be:	8bfb      	ldrh	r3, [r7, #30]
 800f2c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	8013      	strh	r3, [r2, #0]
 800f2d4:	e1c9      	b.n	800f66a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	78db      	ldrb	r3, [r3, #3]
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	d11e      	bne.n	800f31c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	4413      	add	r3, r2
 800f2e8:	881b      	ldrh	r3, [r3, #0]
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2f4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	009b      	lsls	r3, r3, #2
 800f300:	441a      	add	r2, r3
 800f302:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f30a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f30e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f316:	b29b      	uxth	r3, r3
 800f318:	8013      	strh	r3, [r2, #0]
 800f31a:	e01d      	b.n	800f358 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	009b      	lsls	r3, r3, #2
 800f324:	4413      	add	r3, r2
 800f326:	881b      	ldrh	r3, [r3, #0]
 800f328:	b29b      	uxth	r3, r3
 800f32a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f332:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800f336:	687a      	ldr	r2, [r7, #4]
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	009b      	lsls	r3, r3, #2
 800f33e:	441a      	add	r2, r3
 800f340:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800f344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f34c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f354:	b29b      	uxth	r3, r3
 800f356:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f362:	b29b      	uxth	r3, r3
 800f364:	461a      	mov	r2, r3
 800f366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f368:	4413      	add	r3, r2
 800f36a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	011a      	lsls	r2, r3, #4
 800f372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f374:	4413      	add	r3, r2
 800f376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f37a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	891b      	ldrh	r3, [r3, #8]
 800f380:	085b      	lsrs	r3, r3, #1
 800f382:	b29b      	uxth	r3, r3
 800f384:	005b      	lsls	r3, r3, #1
 800f386:	b29a      	uxth	r2, r3
 800f388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f38a:	801a      	strh	r2, [r3, #0]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	657b      	str	r3, [r7, #84]	; 0x54
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f396:	b29b      	uxth	r3, r3
 800f398:	461a      	mov	r2, r3
 800f39a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f39c:	4413      	add	r3, r2
 800f39e:	657b      	str	r3, [r7, #84]	; 0x54
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	011a      	lsls	r2, r3, #4
 800f3a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3a8:	4413      	add	r3, r2
 800f3aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800f3ae:	653b      	str	r3, [r7, #80]	; 0x50
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	895b      	ldrh	r3, [r3, #10]
 800f3b4:	085b      	lsrs	r3, r3, #1
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	005b      	lsls	r3, r3, #1
 800f3ba:	b29a      	uxth	r2, r3
 800f3bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3be:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	785b      	ldrb	r3, [r3, #1]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f040 8093 	bne.w	800f4f0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f3ca:	687a      	ldr	r2, [r7, #4]
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	4413      	add	r3, r2
 800f3d4:	881b      	ldrh	r3, [r3, #0]
 800f3d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f3da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f3de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d01b      	beq.n	800f41e <USB_ActivateEndpoint+0x526>
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	009b      	lsls	r3, r3, #2
 800f3ee:	4413      	add	r3, r2
 800f3f0:	881b      	ldrh	r3, [r3, #0]
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	441a      	add	r2, r3
 800f408:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f40a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f40e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f412:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	4413      	add	r3, r2
 800f428:	881b      	ldrh	r3, [r3, #0]
 800f42a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f42c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f432:	2b00      	cmp	r3, #0
 800f434:	d01b      	beq.n	800f46e <USB_ActivateEndpoint+0x576>
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	4413      	add	r3, r2
 800f440:	881b      	ldrh	r3, [r3, #0]
 800f442:	b29b      	uxth	r3, r3
 800f444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f44c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f44e:	687a      	ldr	r2, [r7, #4]
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	009b      	lsls	r3, r3, #2
 800f456:	441a      	add	r2, r3
 800f458:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f45a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f45e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f466:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	4413      	add	r3, r2
 800f478:	881b      	ldrh	r3, [r3, #0]
 800f47a:	b29b      	uxth	r3, r3
 800f47c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f484:	873b      	strh	r3, [r7, #56]	; 0x38
 800f486:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f488:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f48c:	873b      	strh	r3, [r7, #56]	; 0x38
 800f48e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f490:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f494:	873b      	strh	r3, [r7, #56]	; 0x38
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	009b      	lsls	r3, r3, #2
 800f49e:	441a      	add	r2, r3
 800f4a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f4a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	009b      	lsls	r3, r3, #2
 800f4be:	4413      	add	r3, r2
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	441a      	add	r2, r3
 800f4d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	8013      	strh	r3, [r2, #0]
 800f4ee:	e0bc      	b.n	800f66a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	4413      	add	r3, r2
 800f4fa:	881b      	ldrh	r3, [r3, #0]
 800f4fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f500:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d01d      	beq.n	800f548 <USB_ActivateEndpoint+0x650>
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	4413      	add	r3, r2
 800f516:	881b      	ldrh	r3, [r3, #0]
 800f518:	b29b      	uxth	r3, r3
 800f51a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f51e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f522:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	441a      	add	r2, r3
 800f530:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f53c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f544:	b29b      	uxth	r3, r3
 800f546:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f548:	687a      	ldr	r2, [r7, #4]
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	881b      	ldrh	r3, [r3, #0]
 800f554:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f558:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f55c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f560:	2b00      	cmp	r3, #0
 800f562:	d01d      	beq.n	800f5a0 <USB_ActivateEndpoint+0x6a8>
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	4413      	add	r3, r2
 800f56e:	881b      	ldrh	r3, [r3, #0]
 800f570:	b29b      	uxth	r3, r3
 800f572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f57a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	441a      	add	r2, r3
 800f588:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f58c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f598:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f59c:	b29b      	uxth	r3, r3
 800f59e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	78db      	ldrb	r3, [r3, #3]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d024      	beq.n	800f5f2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	4413      	add	r3, r2
 800f5b2:	881b      	ldrh	r3, [r3, #0]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f5c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f5c6:	f083 0320 	eor.w	r3, r3, #32
 800f5ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	441a      	add	r2, r3
 800f5d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f5dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	8013      	strh	r3, [r2, #0]
 800f5f0:	e01d      	b.n	800f62e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	4413      	add	r3, r2
 800f5fc:	881b      	ldrh	r3, [r3, #0]
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f608:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	009b      	lsls	r3, r3, #2
 800f614:	441a      	add	r2, r3
 800f616:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f61a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f61e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	4413      	add	r3, r2
 800f638:	881b      	ldrh	r3, [r3, #0]
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f644:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f648:	687a      	ldr	r2, [r7, #4]
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	441a      	add	r2, r3
 800f652:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f65a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f65e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f666:	b29b      	uxth	r3, r3
 800f668:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800f66a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3774      	adds	r7, #116	; 0x74
 800f672:	46bd      	mov	sp, r7
 800f674:	bc80      	pop	{r7}
 800f676:	4770      	bx	lr

0800f678 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f678:	b480      	push	{r7}
 800f67a:	b08d      	sub	sp, #52	; 0x34
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	7b1b      	ldrb	r3, [r3, #12]
 800f686:	2b00      	cmp	r3, #0
 800f688:	f040 808e 	bne.w	800f7a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	785b      	ldrb	r3, [r3, #1]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d044      	beq.n	800f71e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	009b      	lsls	r3, r3, #2
 800f69c:	4413      	add	r3, r2
 800f69e:	881b      	ldrh	r3, [r3, #0]
 800f6a0:	81bb      	strh	r3, [r7, #12]
 800f6a2:	89bb      	ldrh	r3, [r7, #12]
 800f6a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d01b      	beq.n	800f6e4 <USB_DeactivateEndpoint+0x6c>
 800f6ac:	687a      	ldr	r2, [r7, #4]
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	009b      	lsls	r3, r3, #2
 800f6b4:	4413      	add	r3, r2
 800f6b6:	881b      	ldrh	r3, [r3, #0]
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6c2:	817b      	strh	r3, [r7, #10]
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	009b      	lsls	r3, r3, #2
 800f6cc:	441a      	add	r2, r3
 800f6ce:	897b      	ldrh	r3, [r7, #10]
 800f6d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f6e4:	687a      	ldr	r2, [r7, #4]
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	009b      	lsls	r3, r3, #2
 800f6ec:	4413      	add	r3, r2
 800f6ee:	881b      	ldrh	r3, [r3, #0]
 800f6f0:	b29b      	uxth	r3, r3
 800f6f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6fa:	813b      	strh	r3, [r7, #8]
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	441a      	add	r2, r3
 800f706:	893b      	ldrh	r3, [r7, #8]
 800f708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f70c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f718:	b29b      	uxth	r3, r3
 800f71a:	8013      	strh	r3, [r2, #0]
 800f71c:	e192      	b.n	800fa44 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f71e:	687a      	ldr	r2, [r7, #4]
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	009b      	lsls	r3, r3, #2
 800f726:	4413      	add	r3, r2
 800f728:	881b      	ldrh	r3, [r3, #0]
 800f72a:	827b      	strh	r3, [r7, #18]
 800f72c:	8a7b      	ldrh	r3, [r7, #18]
 800f72e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f732:	2b00      	cmp	r3, #0
 800f734:	d01b      	beq.n	800f76e <USB_DeactivateEndpoint+0xf6>
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	4413      	add	r3, r2
 800f740:	881b      	ldrh	r3, [r3, #0]
 800f742:	b29b      	uxth	r3, r3
 800f744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f74c:	823b      	strh	r3, [r7, #16]
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	441a      	add	r2, r3
 800f758:	8a3b      	ldrh	r3, [r7, #16]
 800f75a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f75e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	009b      	lsls	r3, r3, #2
 800f776:	4413      	add	r3, r2
 800f778:	881b      	ldrh	r3, [r3, #0]
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f784:	81fb      	strh	r3, [r7, #14]
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	009b      	lsls	r3, r3, #2
 800f78e:	441a      	add	r2, r3
 800f790:	89fb      	ldrh	r3, [r7, #14]
 800f792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f79a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	8013      	strh	r3, [r2, #0]
 800f7a6:	e14d      	b.n	800fa44 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	785b      	ldrb	r3, [r3, #1]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	f040 80a5 	bne.w	800f8fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	4413      	add	r3, r2
 800f7bc:	881b      	ldrh	r3, [r3, #0]
 800f7be:	843b      	strh	r3, [r7, #32]
 800f7c0:	8c3b      	ldrh	r3, [r7, #32]
 800f7c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d01b      	beq.n	800f802 <USB_DeactivateEndpoint+0x18a>
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	009b      	lsls	r3, r3, #2
 800f7d2:	4413      	add	r3, r2
 800f7d4:	881b      	ldrh	r3, [r3, #0]
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7e0:	83fb      	strh	r3, [r7, #30]
 800f7e2:	687a      	ldr	r2, [r7, #4]
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	009b      	lsls	r3, r3, #2
 800f7ea:	441a      	add	r2, r3
 800f7ec:	8bfb      	ldrh	r3, [r7, #30]
 800f7ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f7fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	4413      	add	r3, r2
 800f80c:	881b      	ldrh	r3, [r3, #0]
 800f80e:	83bb      	strh	r3, [r7, #28]
 800f810:	8bbb      	ldrh	r3, [r7, #28]
 800f812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f816:	2b00      	cmp	r3, #0
 800f818:	d01b      	beq.n	800f852 <USB_DeactivateEndpoint+0x1da>
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	4413      	add	r3, r2
 800f824:	881b      	ldrh	r3, [r3, #0]
 800f826:	b29b      	uxth	r3, r3
 800f828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f82c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f830:	837b      	strh	r3, [r7, #26]
 800f832:	687a      	ldr	r2, [r7, #4]
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	441a      	add	r2, r3
 800f83c:	8b7b      	ldrh	r3, [r7, #26]
 800f83e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f84a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f84e:	b29b      	uxth	r3, r3
 800f850:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	4413      	add	r3, r2
 800f85c:	881b      	ldrh	r3, [r3, #0]
 800f85e:	b29b      	uxth	r3, r3
 800f860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f868:	833b      	strh	r3, [r7, #24]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	441a      	add	r2, r3
 800f874:	8b3b      	ldrh	r3, [r7, #24]
 800f876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f87a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f87e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f882:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f886:	b29b      	uxth	r3, r3
 800f888:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	009b      	lsls	r3, r3, #2
 800f892:	4413      	add	r3, r2
 800f894:	881b      	ldrh	r3, [r3, #0]
 800f896:	b29b      	uxth	r3, r3
 800f898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f89c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8a0:	82fb      	strh	r3, [r7, #22]
 800f8a2:	687a      	ldr	r2, [r7, #4]
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	009b      	lsls	r3, r3, #2
 800f8aa:	441a      	add	r2, r3
 800f8ac:	8afb      	ldrh	r3, [r7, #22]
 800f8ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	009b      	lsls	r3, r3, #2
 800f8ca:	4413      	add	r3, r2
 800f8cc:	881b      	ldrh	r3, [r3, #0]
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8d8:	82bb      	strh	r3, [r7, #20]
 800f8da:	687a      	ldr	r2, [r7, #4]
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	441a      	add	r2, r3
 800f8e4:	8abb      	ldrh	r3, [r7, #20]
 800f8e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	8013      	strh	r3, [r2, #0]
 800f8fa:	e0a3      	b.n	800fa44 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	009b      	lsls	r3, r3, #2
 800f904:	4413      	add	r3, r2
 800f906:	881b      	ldrh	r3, [r3, #0]
 800f908:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f90a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f90c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f910:	2b00      	cmp	r3, #0
 800f912:	d01b      	beq.n	800f94c <USB_DeactivateEndpoint+0x2d4>
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	009b      	lsls	r3, r3, #2
 800f91c:	4413      	add	r3, r2
 800f91e:	881b      	ldrh	r3, [r3, #0]
 800f920:	b29b      	uxth	r3, r3
 800f922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f92a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f92c:	687a      	ldr	r2, [r7, #4]
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	009b      	lsls	r3, r3, #2
 800f934:	441a      	add	r2, r3
 800f936:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f93c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f948:	b29b      	uxth	r3, r3
 800f94a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	009b      	lsls	r3, r3, #2
 800f954:	4413      	add	r3, r2
 800f956:	881b      	ldrh	r3, [r3, #0]
 800f958:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f95a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f960:	2b00      	cmp	r3, #0
 800f962:	d01b      	beq.n	800f99c <USB_DeactivateEndpoint+0x324>
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	4413      	add	r3, r2
 800f96e:	881b      	ldrh	r3, [r3, #0]
 800f970:	b29b      	uxth	r3, r3
 800f972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f97a:	853b      	strh	r3, [r7, #40]	; 0x28
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	441a      	add	r2, r3
 800f986:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f98c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f994:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f998:	b29b      	uxth	r3, r3
 800f99a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	4413      	add	r3, r2
 800f9a6:	881b      	ldrh	r3, [r3, #0]
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	009b      	lsls	r3, r3, #2
 800f9bc:	441a      	add	r2, r3
 800f9be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f9c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9d0:	b29b      	uxth	r3, r3
 800f9d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	4413      	add	r3, r2
 800f9de:	881b      	ldrh	r3, [r3, #0]
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f9ec:	687a      	ldr	r2, [r7, #4]
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	009b      	lsls	r3, r3, #2
 800f9f4:	441a      	add	r2, r3
 800f9f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	009b      	lsls	r3, r3, #2
 800fa14:	4413      	add	r3, r2
 800fa16:	881b      	ldrh	r3, [r3, #0]
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa22:	847b      	strh	r3, [r7, #34]	; 0x22
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	009b      	lsls	r3, r3, #2
 800fa2c:	441a      	add	r2, r3
 800fa2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800fa44:	2300      	movs	r3, #0
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3734      	adds	r7, #52	; 0x34
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bc80      	pop	{r7}
 800fa4e:	4770      	bx	lr

0800fa50 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b0c2      	sub	sp, #264	; 0x108
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa5e:	6018      	str	r0, [r3, #0]
 800fa60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa68:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fa6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	785b      	ldrb	r3, [r3, #1]
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	f040 86b7 	bne.w	80107ea <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800fa7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	699a      	ldr	r2, [r3, #24]
 800fa88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	691b      	ldr	r3, [r3, #16]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d908      	bls.n	800faaa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800fa98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	691b      	ldr	r3, [r3, #16]
 800faa4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800faa8:	e007      	b.n	800faba <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800faaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	699b      	ldr	r3, [r3, #24]
 800fab6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800faba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fabe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	7b1b      	ldrb	r3, [r3, #12]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d13a      	bne.n	800fb40 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800faca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800face:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	6959      	ldr	r1, [r3, #20]
 800fad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	88da      	ldrh	r2, [r3, #6]
 800fae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800faec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800faf0:	6800      	ldr	r0, [r0, #0]
 800faf2:	f001 fc9c 	bl	801142e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800faf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fafa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	613b      	str	r3, [r7, #16]
 800fb02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	461a      	mov	r2, r3
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	4413      	add	r3, r2
 800fb18:	613b      	str	r3, [r7, #16]
 800fb1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	011a      	lsls	r2, r3, #4
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fb30:	60fb      	str	r3, [r7, #12]
 800fb32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	801a      	strh	r2, [r3, #0]
 800fb3c:	f000 be1f 	b.w	801077e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800fb40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	78db      	ldrb	r3, [r3, #3]
 800fb4c:	2b02      	cmp	r3, #2
 800fb4e:	f040 8462 	bne.w	8010416 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800fb52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	6a1a      	ldr	r2, [r3, #32]
 800fb5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	691b      	ldr	r3, [r3, #16]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	f240 83df 	bls.w	801032e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800fb70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	4413      	add	r3, r2
 800fb8a:	881b      	ldrh	r3, [r3, #0]
 800fb8c:	b29b      	uxth	r3, r3
 800fb8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb96:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800fb9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fba2:	681a      	ldr	r2, [r3, #0]
 800fba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	441a      	add	r2, r3
 800fbb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fbb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fbbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fbc0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800fbc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800fbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	6a1a      	ldr	r2, [r3, #32]
 800fbd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbdc:	1ad2      	subs	r2, r2, r3
 800fbde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fbea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	009b      	lsls	r3, r3, #2
 800fc02:	4413      	add	r3, r2
 800fc04:	881b      	ldrh	r3, [r3, #0]
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	f000 81c7 	beq.w	800ffa0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fc12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	633b      	str	r3, [r7, #48]	; 0x30
 800fc1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	785b      	ldrb	r3, [r3, #1]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d177      	bne.n	800fd1e <USB_EPStartXfer+0x2ce>
 800fc2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4e:	4413      	add	r3, r2
 800fc50:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	011a      	lsls	r2, r3, #4
 800fc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc62:	4413      	add	r3, r2
 800fc64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fc68:	627b      	str	r3, [r7, #36]	; 0x24
 800fc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6c:	881b      	ldrh	r3, [r3, #0]
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc78:	801a      	strh	r2, [r3, #0]
 800fc7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc7e:	2b3e      	cmp	r3, #62	; 0x3e
 800fc80:	d921      	bls.n	800fcc6 <USB_EPStartXfer+0x276>
 800fc82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc86:	095b      	lsrs	r3, r3, #5
 800fc88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc90:	f003 031f 	and.w	r3, r3, #31
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d104      	bne.n	800fca2 <USB_EPStartXfer+0x252>
 800fc98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	b29a      	uxth	r2, r3
 800fca8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fcac:	b29b      	uxth	r3, r3
 800fcae:	029b      	lsls	r3, r3, #10
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fcba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc2:	801a      	strh	r2, [r3, #0]
 800fcc4:	e050      	b.n	800fd68 <USB_EPStartXfer+0x318>
 800fcc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d10a      	bne.n	800fce4 <USB_EPStartXfer+0x294>
 800fcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd0:	881b      	ldrh	r3, [r3, #0]
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fcd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fcdc:	b29a      	uxth	r2, r3
 800fcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce0:	801a      	strh	r2, [r3, #0]
 800fce2:	e041      	b.n	800fd68 <USB_EPStartXfer+0x318>
 800fce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fce8:	085b      	lsrs	r3, r3, #1
 800fcea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fcee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcf2:	f003 0301 	and.w	r3, r3, #1
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d004      	beq.n	800fd04 <USB_EPStartXfer+0x2b4>
 800fcfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fcfe:	3301      	adds	r3, #1
 800fd00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd06:	881b      	ldrh	r3, [r3, #0]
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	029b      	lsls	r3, r3, #10
 800fd12:	b29b      	uxth	r3, r3
 800fd14:	4313      	orrs	r3, r2
 800fd16:	b29a      	uxth	r2, r3
 800fd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1a:	801a      	strh	r2, [r3, #0]
 800fd1c:	e024      	b.n	800fd68 <USB_EPStartXfer+0x318>
 800fd1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	785b      	ldrb	r3, [r3, #1]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d11c      	bne.n	800fd68 <USB_EPStartXfer+0x318>
 800fd2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	461a      	mov	r2, r3
 800fd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd42:	4413      	add	r3, r2
 800fd44:	633b      	str	r3, [r7, #48]	; 0x30
 800fd46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	011a      	lsls	r2, r3, #4
 800fd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd56:	4413      	add	r3, r2
 800fd58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fd5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd62:	b29a      	uxth	r2, r3
 800fd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fd68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	895b      	ldrh	r3, [r3, #10]
 800fd74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fd78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	6959      	ldr	r1, [r3, #20]
 800fd84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fd8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fd92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fd96:	6800      	ldr	r0, [r0, #0]
 800fd98:	f001 fb49 	bl	801142e <USB_WritePMA>
            ep->xfer_buff += len;
 800fd9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fda0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	695a      	ldr	r2, [r3, #20]
 800fda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdac:	441a      	add	r2, r3
 800fdae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800fdba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	6a1a      	ldr	r2, [r3, #32]
 800fdc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	691b      	ldr	r3, [r3, #16]
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d90f      	bls.n	800fdf6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800fdd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	6a1a      	ldr	r2, [r3, #32]
 800fde2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fde6:	1ad2      	subs	r2, r2, r3
 800fde8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	621a      	str	r2, [r3, #32]
 800fdf4:	e00e      	b.n	800fe14 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800fdf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	6a1b      	ldr	r3, [r3, #32]
 800fe02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800fe06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	2200      	movs	r2, #0
 800fe12:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fe14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	785b      	ldrb	r3, [r3, #1]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d177      	bne.n	800ff14 <USB_EPStartXfer+0x4c4>
 800fe24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	61bb      	str	r3, [r7, #24]
 800fe30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	461a      	mov	r2, r3
 800fe42:	69bb      	ldr	r3, [r7, #24]
 800fe44:	4413      	add	r3, r2
 800fe46:	61bb      	str	r3, [r7, #24]
 800fe48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	011a      	lsls	r2, r3, #4
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	4413      	add	r3, r2
 800fe5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fe5e:	617b      	str	r3, [r7, #20]
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	881b      	ldrh	r3, [r3, #0]
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	801a      	strh	r2, [r3, #0]
 800fe70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe74:	2b3e      	cmp	r3, #62	; 0x3e
 800fe76:	d921      	bls.n	800febc <USB_EPStartXfer+0x46c>
 800fe78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe7c:	095b      	lsrs	r3, r3, #5
 800fe7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fe82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe86:	f003 031f 	and.w	r3, r3, #31
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d104      	bne.n	800fe98 <USB_EPStartXfer+0x448>
 800fe8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fe92:	3b01      	subs	r3, #1
 800fe94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	881b      	ldrh	r3, [r3, #0]
 800fe9c:	b29a      	uxth	r2, r3
 800fe9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	029b      	lsls	r3, r3, #10
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	4313      	orrs	r3, r2
 800feaa:	b29b      	uxth	r3, r3
 800feac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800feb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800feb4:	b29a      	uxth	r2, r3
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	801a      	strh	r2, [r3, #0]
 800feba:	e056      	b.n	800ff6a <USB_EPStartXfer+0x51a>
 800febc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d10a      	bne.n	800feda <USB_EPStartXfer+0x48a>
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	881b      	ldrh	r3, [r3, #0]
 800fec8:	b29b      	uxth	r3, r3
 800feca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fed2:	b29a      	uxth	r2, r3
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	801a      	strh	r2, [r3, #0]
 800fed8:	e047      	b.n	800ff6a <USB_EPStartXfer+0x51a>
 800feda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fede:	085b      	lsrs	r3, r3, #1
 800fee0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fee8:	f003 0301 	and.w	r3, r3, #1
 800feec:	2b00      	cmp	r3, #0
 800feee:	d004      	beq.n	800fefa <USB_EPStartXfer+0x4aa>
 800fef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fef4:	3301      	adds	r3, #1
 800fef6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	881b      	ldrh	r3, [r3, #0]
 800fefe:	b29a      	uxth	r2, r3
 800ff00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	029b      	lsls	r3, r3, #10
 800ff08:	b29b      	uxth	r3, r3
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	b29a      	uxth	r2, r3
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	801a      	strh	r2, [r3, #0]
 800ff12:	e02a      	b.n	800ff6a <USB_EPStartXfer+0x51a>
 800ff14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	785b      	ldrb	r3, [r3, #1]
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d122      	bne.n	800ff6a <USB_EPStartXfer+0x51a>
 800ff24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	623b      	str	r3, [r7, #32]
 800ff30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff3e:	b29b      	uxth	r3, r3
 800ff40:	461a      	mov	r2, r3
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	4413      	add	r3, r2
 800ff46:	623b      	str	r3, [r7, #32]
 800ff48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	011a      	lsls	r2, r3, #4
 800ff56:	6a3b      	ldr	r3, [r7, #32]
 800ff58:	4413      	add	r3, r2
 800ff5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ff5e:	61fb      	str	r3, [r7, #28]
 800ff60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ff6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	891b      	ldrh	r3, [r3, #8]
 800ff76:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ff7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	6959      	ldr	r1, [r3, #20]
 800ff86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ff90:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ff94:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ff98:	6800      	ldr	r0, [r0, #0]
 800ff9a:	f001 fa48 	bl	801142e <USB_WritePMA>
 800ff9e:	e3ee      	b.n	801077e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ffa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	785b      	ldrb	r3, [r3, #1]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d177      	bne.n	80100a0 <USB_EPStartXfer+0x650>
 800ffb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	461a      	mov	r2, r3
 800ffce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffd0:	4413      	add	r3, r2
 800ffd2:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	011a      	lsls	r2, r3, #4
 800ffe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffe4:	4413      	add	r3, r2
 800ffe6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ffea:	647b      	str	r3, [r7, #68]	; 0x44
 800ffec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffee:	881b      	ldrh	r3, [r3, #0]
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fff6:	b29a      	uxth	r2, r3
 800fff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fffa:	801a      	strh	r2, [r3, #0]
 800fffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010000:	2b3e      	cmp	r3, #62	; 0x3e
 8010002:	d921      	bls.n	8010048 <USB_EPStartXfer+0x5f8>
 8010004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010008:	095b      	lsrs	r3, r3, #5
 801000a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801000e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010012:	f003 031f 	and.w	r3, r3, #31
 8010016:	2b00      	cmp	r3, #0
 8010018:	d104      	bne.n	8010024 <USB_EPStartXfer+0x5d4>
 801001a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801001e:	3b01      	subs	r3, #1
 8010020:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010026:	881b      	ldrh	r3, [r3, #0]
 8010028:	b29a      	uxth	r2, r3
 801002a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801002e:	b29b      	uxth	r3, r3
 8010030:	029b      	lsls	r3, r3, #10
 8010032:	b29b      	uxth	r3, r3
 8010034:	4313      	orrs	r3, r2
 8010036:	b29b      	uxth	r3, r3
 8010038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801003c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010040:	b29a      	uxth	r2, r3
 8010042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010044:	801a      	strh	r2, [r3, #0]
 8010046:	e056      	b.n	80100f6 <USB_EPStartXfer+0x6a6>
 8010048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801004c:	2b00      	cmp	r3, #0
 801004e:	d10a      	bne.n	8010066 <USB_EPStartXfer+0x616>
 8010050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010052:	881b      	ldrh	r3, [r3, #0]
 8010054:	b29b      	uxth	r3, r3
 8010056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801005a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801005e:	b29a      	uxth	r2, r3
 8010060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010062:	801a      	strh	r2, [r3, #0]
 8010064:	e047      	b.n	80100f6 <USB_EPStartXfer+0x6a6>
 8010066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801006a:	085b      	lsrs	r3, r3, #1
 801006c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010074:	f003 0301 	and.w	r3, r3, #1
 8010078:	2b00      	cmp	r3, #0
 801007a:	d004      	beq.n	8010086 <USB_EPStartXfer+0x636>
 801007c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010080:	3301      	adds	r3, #1
 8010082:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010088:	881b      	ldrh	r3, [r3, #0]
 801008a:	b29a      	uxth	r2, r3
 801008c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010090:	b29b      	uxth	r3, r3
 8010092:	029b      	lsls	r3, r3, #10
 8010094:	b29b      	uxth	r3, r3
 8010096:	4313      	orrs	r3, r2
 8010098:	b29a      	uxth	r2, r3
 801009a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801009c:	801a      	strh	r2, [r3, #0]
 801009e:	e02a      	b.n	80100f6 <USB_EPStartXfer+0x6a6>
 80100a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	785b      	ldrb	r3, [r3, #1]
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d122      	bne.n	80100f6 <USB_EPStartXfer+0x6a6>
 80100b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	653b      	str	r3, [r7, #80]	; 0x50
 80100bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	461a      	mov	r2, r3
 80100ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100d0:	4413      	add	r3, r2
 80100d2:	653b      	str	r3, [r7, #80]	; 0x50
 80100d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	011a      	lsls	r2, r3, #4
 80100e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100e4:	4413      	add	r3, r2
 80100e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80100ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80100ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80100f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	891b      	ldrh	r3, [r3, #8]
 8010102:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801010a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	6959      	ldr	r1, [r3, #20]
 8010112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010116:	b29b      	uxth	r3, r3
 8010118:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801011c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010120:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010124:	6800      	ldr	r0, [r0, #0]
 8010126:	f001 f982 	bl	801142e <USB_WritePMA>
            ep->xfer_buff += len;
 801012a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801012e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	695a      	ldr	r2, [r3, #20]
 8010136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801013a:	441a      	add	r2, r3
 801013c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801014c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	6a1a      	ldr	r2, [r3, #32]
 8010154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	429a      	cmp	r2, r3
 8010162:	d90f      	bls.n	8010184 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8010164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	6a1a      	ldr	r2, [r3, #32]
 8010170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010174:	1ad2      	subs	r2, r2, r3
 8010176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801017a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	621a      	str	r2, [r3, #32]
 8010182:	e00e      	b.n	80101a2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8010184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	6a1b      	ldr	r3, [r3, #32]
 8010190:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2200      	movs	r2, #0
 80101a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80101a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	643b      	str	r3, [r7, #64]	; 0x40
 80101ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	785b      	ldrb	r3, [r3, #1]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d177      	bne.n	80102ae <USB_EPStartXfer+0x85e>
 80101be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80101ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80101d8:	b29b      	uxth	r3, r3
 80101da:	461a      	mov	r2, r3
 80101dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101de:	4413      	add	r3, r2
 80101e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80101e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	011a      	lsls	r2, r3, #4
 80101f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f2:	4413      	add	r3, r2
 80101f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80101f8:	637b      	str	r3, [r7, #52]	; 0x34
 80101fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	b29b      	uxth	r3, r3
 8010200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010204:	b29a      	uxth	r2, r3
 8010206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010208:	801a      	strh	r2, [r3, #0]
 801020a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801020e:	2b3e      	cmp	r3, #62	; 0x3e
 8010210:	d921      	bls.n	8010256 <USB_EPStartXfer+0x806>
 8010212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010216:	095b      	lsrs	r3, r3, #5
 8010218:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801021c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010220:	f003 031f 	and.w	r3, r3, #31
 8010224:	2b00      	cmp	r3, #0
 8010226:	d104      	bne.n	8010232 <USB_EPStartXfer+0x7e2>
 8010228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801022c:	3b01      	subs	r3, #1
 801022e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010234:	881b      	ldrh	r3, [r3, #0]
 8010236:	b29a      	uxth	r2, r3
 8010238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801023c:	b29b      	uxth	r3, r3
 801023e:	029b      	lsls	r3, r3, #10
 8010240:	b29b      	uxth	r3, r3
 8010242:	4313      	orrs	r3, r2
 8010244:	b29b      	uxth	r3, r3
 8010246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801024a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801024e:	b29a      	uxth	r2, r3
 8010250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010252:	801a      	strh	r2, [r3, #0]
 8010254:	e050      	b.n	80102f8 <USB_EPStartXfer+0x8a8>
 8010256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801025a:	2b00      	cmp	r3, #0
 801025c:	d10a      	bne.n	8010274 <USB_EPStartXfer+0x824>
 801025e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010260:	881b      	ldrh	r3, [r3, #0]
 8010262:	b29b      	uxth	r3, r3
 8010264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801026c:	b29a      	uxth	r2, r3
 801026e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010270:	801a      	strh	r2, [r3, #0]
 8010272:	e041      	b.n	80102f8 <USB_EPStartXfer+0x8a8>
 8010274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010278:	085b      	lsrs	r3, r3, #1
 801027a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801027e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010282:	f003 0301 	and.w	r3, r3, #1
 8010286:	2b00      	cmp	r3, #0
 8010288:	d004      	beq.n	8010294 <USB_EPStartXfer+0x844>
 801028a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801028e:	3301      	adds	r3, #1
 8010290:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	b29a      	uxth	r2, r3
 801029a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801029e:	b29b      	uxth	r3, r3
 80102a0:	029b      	lsls	r3, r3, #10
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	4313      	orrs	r3, r2
 80102a6:	b29a      	uxth	r2, r3
 80102a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102aa:	801a      	strh	r2, [r3, #0]
 80102ac:	e024      	b.n	80102f8 <USB_EPStartXfer+0x8a8>
 80102ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	785b      	ldrb	r3, [r3, #1]
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d11c      	bne.n	80102f8 <USB_EPStartXfer+0x8a8>
 80102be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	461a      	mov	r2, r3
 80102d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102d2:	4413      	add	r3, r2
 80102d4:	643b      	str	r3, [r7, #64]	; 0x40
 80102d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	011a      	lsls	r2, r3, #4
 80102e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102e6:	4413      	add	r3, r2
 80102e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80102ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80102f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	895b      	ldrh	r3, [r3, #10]
 8010304:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801030c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	6959      	ldr	r1, [r3, #20]
 8010314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010318:	b29b      	uxth	r3, r3
 801031a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801031e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010322:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010326:	6800      	ldr	r0, [r0, #0]
 8010328:	f001 f881 	bl	801142e <USB_WritePMA>
 801032c:	e227      	b.n	801077e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801032e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	6a1b      	ldr	r3, [r3, #32]
 801033a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801033e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801034c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	009b      	lsls	r3, r3, #2
 8010356:	4413      	add	r3, r2
 8010358:	881b      	ldrh	r3, [r3, #0]
 801035a:	b29b      	uxth	r3, r3
 801035c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010364:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801036c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010370:	681a      	ldr	r2, [r3, #0]
 8010372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	009b      	lsls	r3, r3, #2
 8010380:	441a      	add	r2, r3
 8010382:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801038a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801038e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010396:	b29b      	uxth	r3, r3
 8010398:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801039a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801039e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	461a      	mov	r2, r3
 80103b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103ba:	4413      	add	r3, r2
 80103bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	011a      	lsls	r2, r3, #4
 80103cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103ce:	4413      	add	r3, r2
 80103d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80103d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80103d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103da:	b29a      	uxth	r2, r3
 80103dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80103e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	891b      	ldrh	r3, [r3, #8]
 80103ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80103f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	6959      	ldr	r1, [r3, #20]
 80103fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010400:	b29b      	uxth	r3, r3
 8010402:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010406:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801040a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801040e:	6800      	ldr	r0, [r0, #0]
 8010410:	f001 f80d 	bl	801142e <USB_WritePMA>
 8010414:	e1b3      	b.n	801077e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8010416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801041a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	6a1a      	ldr	r2, [r3, #32]
 8010422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010426:	1ad2      	subs	r2, r2, r3
 8010428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801042c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801043c:	681a      	ldr	r2, [r3, #0]
 801043e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	009b      	lsls	r3, r3, #2
 801044c:	4413      	add	r3, r2
 801044e:	881b      	ldrh	r3, [r3, #0]
 8010450:	b29b      	uxth	r3, r3
 8010452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010456:	2b00      	cmp	r3, #0
 8010458:	f000 80c6 	beq.w	80105e8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801045c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	673b      	str	r3, [r7, #112]	; 0x70
 8010468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801046c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	785b      	ldrb	r3, [r3, #1]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d177      	bne.n	8010568 <USB_EPStartXfer+0xb18>
 8010478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801047c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	66bb      	str	r3, [r7, #104]	; 0x68
 8010484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010492:	b29b      	uxth	r3, r3
 8010494:	461a      	mov	r2, r3
 8010496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010498:	4413      	add	r3, r2
 801049a:	66bb      	str	r3, [r7, #104]	; 0x68
 801049c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	011a      	lsls	r2, r3, #4
 80104aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104ac:	4413      	add	r3, r2
 80104ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80104b2:	667b      	str	r3, [r7, #100]	; 0x64
 80104b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104b6:	881b      	ldrh	r3, [r3, #0]
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80104be:	b29a      	uxth	r2, r3
 80104c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104c2:	801a      	strh	r2, [r3, #0]
 80104c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104c8:	2b3e      	cmp	r3, #62	; 0x3e
 80104ca:	d921      	bls.n	8010510 <USB_EPStartXfer+0xac0>
 80104cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104d0:	095b      	lsrs	r3, r3, #5
 80104d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80104d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104da:	f003 031f 	and.w	r3, r3, #31
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d104      	bne.n	80104ec <USB_EPStartXfer+0xa9c>
 80104e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80104e6:	3b01      	subs	r3, #1
 80104e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80104ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104ee:	881b      	ldrh	r3, [r3, #0]
 80104f0:	b29a      	uxth	r2, r3
 80104f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	029b      	lsls	r3, r3, #10
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	4313      	orrs	r3, r2
 80104fe:	b29b      	uxth	r3, r3
 8010500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010508:	b29a      	uxth	r2, r3
 801050a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801050c:	801a      	strh	r2, [r3, #0]
 801050e:	e050      	b.n	80105b2 <USB_EPStartXfer+0xb62>
 8010510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010514:	2b00      	cmp	r3, #0
 8010516:	d10a      	bne.n	801052e <USB_EPStartXfer+0xade>
 8010518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801051a:	881b      	ldrh	r3, [r3, #0]
 801051c:	b29b      	uxth	r3, r3
 801051e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010526:	b29a      	uxth	r2, r3
 8010528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801052a:	801a      	strh	r2, [r3, #0]
 801052c:	e041      	b.n	80105b2 <USB_EPStartXfer+0xb62>
 801052e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010532:	085b      	lsrs	r3, r3, #1
 8010534:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801053c:	f003 0301 	and.w	r3, r3, #1
 8010540:	2b00      	cmp	r3, #0
 8010542:	d004      	beq.n	801054e <USB_EPStartXfer+0xafe>
 8010544:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010548:	3301      	adds	r3, #1
 801054a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801054e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010550:	881b      	ldrh	r3, [r3, #0]
 8010552:	b29a      	uxth	r2, r3
 8010554:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010558:	b29b      	uxth	r3, r3
 801055a:	029b      	lsls	r3, r3, #10
 801055c:	b29b      	uxth	r3, r3
 801055e:	4313      	orrs	r3, r2
 8010560:	b29a      	uxth	r2, r3
 8010562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010564:	801a      	strh	r2, [r3, #0]
 8010566:	e024      	b.n	80105b2 <USB_EPStartXfer+0xb62>
 8010568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801056c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	785b      	ldrb	r3, [r3, #1]
 8010574:	2b01      	cmp	r3, #1
 8010576:	d11c      	bne.n	80105b2 <USB_EPStartXfer+0xb62>
 8010578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801057c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010586:	b29b      	uxth	r3, r3
 8010588:	461a      	mov	r2, r3
 801058a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801058c:	4413      	add	r3, r2
 801058e:	673b      	str	r3, [r7, #112]	; 0x70
 8010590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	011a      	lsls	r2, r3, #4
 801059e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105a0:	4413      	add	r3, r2
 80105a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80105a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80105a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105ac:	b29a      	uxth	r2, r3
 80105ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80105b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	895b      	ldrh	r3, [r3, #10]
 80105be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80105c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	6959      	ldr	r1, [r3, #20]
 80105ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80105d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80105dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80105e0:	6800      	ldr	r0, [r0, #0]
 80105e2:	f000 ff24 	bl	801142e <USB_WritePMA>
 80105e6:	e0ca      	b.n	801077e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80105e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	785b      	ldrb	r3, [r3, #1]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d177      	bne.n	80106e8 <USB_EPStartXfer+0xc98>
 80105f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010612:	b29b      	uxth	r3, r3
 8010614:	461a      	mov	r2, r3
 8010616:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010618:	4413      	add	r3, r2
 801061a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801061c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	011a      	lsls	r2, r3, #4
 801062a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801062c:	4413      	add	r3, r2
 801062e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010632:	67bb      	str	r3, [r7, #120]	; 0x78
 8010634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010636:	881b      	ldrh	r3, [r3, #0]
 8010638:	b29b      	uxth	r3, r3
 801063a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801063e:	b29a      	uxth	r2, r3
 8010640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010642:	801a      	strh	r2, [r3, #0]
 8010644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010648:	2b3e      	cmp	r3, #62	; 0x3e
 801064a:	d921      	bls.n	8010690 <USB_EPStartXfer+0xc40>
 801064c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010650:	095b      	lsrs	r3, r3, #5
 8010652:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801065a:	f003 031f 	and.w	r3, r3, #31
 801065e:	2b00      	cmp	r3, #0
 8010660:	d104      	bne.n	801066c <USB_EPStartXfer+0xc1c>
 8010662:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010666:	3b01      	subs	r3, #1
 8010668:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801066c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801066e:	881b      	ldrh	r3, [r3, #0]
 8010670:	b29a      	uxth	r2, r3
 8010672:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010676:	b29b      	uxth	r3, r3
 8010678:	029b      	lsls	r3, r3, #10
 801067a:	b29b      	uxth	r3, r3
 801067c:	4313      	orrs	r3, r2
 801067e:	b29b      	uxth	r3, r3
 8010680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010688:	b29a      	uxth	r2, r3
 801068a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801068c:	801a      	strh	r2, [r3, #0]
 801068e:	e05c      	b.n	801074a <USB_EPStartXfer+0xcfa>
 8010690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010694:	2b00      	cmp	r3, #0
 8010696:	d10a      	bne.n	80106ae <USB_EPStartXfer+0xc5e>
 8010698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801069a:	881b      	ldrh	r3, [r3, #0]
 801069c:	b29b      	uxth	r3, r3
 801069e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80106a6:	b29a      	uxth	r2, r3
 80106a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106aa:	801a      	strh	r2, [r3, #0]
 80106ac:	e04d      	b.n	801074a <USB_EPStartXfer+0xcfa>
 80106ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106b2:	085b      	lsrs	r3, r3, #1
 80106b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80106b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106bc:	f003 0301 	and.w	r3, r3, #1
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d004      	beq.n	80106ce <USB_EPStartXfer+0xc7e>
 80106c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80106c8:	3301      	adds	r3, #1
 80106ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80106ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106d0:	881b      	ldrh	r3, [r3, #0]
 80106d2:	b29a      	uxth	r2, r3
 80106d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80106d8:	b29b      	uxth	r3, r3
 80106da:	029b      	lsls	r3, r3, #10
 80106dc:	b29b      	uxth	r3, r3
 80106de:	4313      	orrs	r3, r2
 80106e0:	b29a      	uxth	r2, r3
 80106e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106e4:	801a      	strh	r2, [r3, #0]
 80106e6:	e030      	b.n	801074a <USB_EPStartXfer+0xcfa>
 80106e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	785b      	ldrb	r3, [r3, #1]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d128      	bne.n	801074a <USB_EPStartXfer+0xcfa>
 80106f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801070a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010714:	b29b      	uxth	r3, r3
 8010716:	461a      	mov	r2, r3
 8010718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801071c:	4413      	add	r3, r2
 801071e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	011a      	lsls	r2, r3, #4
 8010730:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010734:	4413      	add	r3, r2
 8010736:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801073a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801073e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010742:	b29a      	uxth	r2, r3
 8010744:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010748:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801074a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801074e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	891b      	ldrh	r3, [r3, #8]
 8010756:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801075a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801075e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	6959      	ldr	r1, [r3, #20]
 8010766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801076a:	b29b      	uxth	r3, r3
 801076c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010770:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010774:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010778:	6800      	ldr	r0, [r0, #0]
 801077a:	f000 fe58 	bl	801142e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801077e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010786:	681a      	ldr	r2, [r3, #0]
 8010788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801078c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	009b      	lsls	r3, r3, #2
 8010796:	4413      	add	r3, r2
 8010798:	881b      	ldrh	r3, [r3, #0]
 801079a:	b29b      	uxth	r3, r3
 801079c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80107a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107a4:	817b      	strh	r3, [r7, #10]
 80107a6:	897b      	ldrh	r3, [r7, #10]
 80107a8:	f083 0310 	eor.w	r3, r3, #16
 80107ac:	817b      	strh	r3, [r7, #10]
 80107ae:	897b      	ldrh	r3, [r7, #10]
 80107b0:	f083 0320 	eor.w	r3, r3, #32
 80107b4:	817b      	strh	r3, [r7, #10]
 80107b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107be:	681a      	ldr	r2, [r3, #0]
 80107c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	441a      	add	r2, r3
 80107d0:	897b      	ldrh	r3, [r7, #10]
 80107d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	8013      	strh	r3, [r2, #0]
 80107e6:	f000 bcde 	b.w	80111a6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80107ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	7b1b      	ldrb	r3, [r3, #12]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	f040 80bb 	bne.w	8010972 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80107fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	699a      	ldr	r2, [r3, #24]
 8010808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801080c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	691b      	ldr	r3, [r3, #16]
 8010814:	429a      	cmp	r2, r3
 8010816:	d917      	bls.n	8010848 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8010818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801081c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	691b      	ldr	r3, [r3, #16]
 8010824:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8010828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801082c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	699a      	ldr	r2, [r3, #24]
 8010834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010838:	1ad2      	subs	r2, r2, r3
 801083a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801083e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	619a      	str	r2, [r3, #24]
 8010846:	e00e      	b.n	8010866 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8010848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801084c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	699b      	ldr	r3, [r3, #24]
 8010854:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8010858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801085c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	2200      	movs	r2, #0
 8010864:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8010866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801086a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010878:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010882:	b29b      	uxth	r3, r3
 8010884:	461a      	mov	r2, r3
 8010886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801088a:	4413      	add	r3, r2
 801088c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	011a      	lsls	r2, r3, #4
 801089e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108a2:	4413      	add	r3, r2
 80108a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80108a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80108ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108b0:	881b      	ldrh	r3, [r3, #0]
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80108b8:	b29a      	uxth	r2, r3
 80108ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108be:	801a      	strh	r2, [r3, #0]
 80108c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108c4:	2b3e      	cmp	r3, #62	; 0x3e
 80108c6:	d924      	bls.n	8010912 <USB_EPStartXfer+0xec2>
 80108c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108cc:	095b      	lsrs	r3, r3, #5
 80108ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80108d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108d6:	f003 031f 	and.w	r3, r3, #31
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d104      	bne.n	80108e8 <USB_EPStartXfer+0xe98>
 80108de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80108e2:	3b01      	subs	r3, #1
 80108e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80108e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108ec:	881b      	ldrh	r3, [r3, #0]
 80108ee:	b29a      	uxth	r2, r3
 80108f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	029b      	lsls	r3, r3, #10
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	4313      	orrs	r3, r2
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010906:	b29a      	uxth	r2, r3
 8010908:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801090c:	801a      	strh	r2, [r3, #0]
 801090e:	f000 bc10 	b.w	8011132 <USB_EPStartXfer+0x16e2>
 8010912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010916:	2b00      	cmp	r3, #0
 8010918:	d10c      	bne.n	8010934 <USB_EPStartXfer+0xee4>
 801091a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801091e:	881b      	ldrh	r3, [r3, #0]
 8010920:	b29b      	uxth	r3, r3
 8010922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801092a:	b29a      	uxth	r2, r3
 801092c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010930:	801a      	strh	r2, [r3, #0]
 8010932:	e3fe      	b.n	8011132 <USB_EPStartXfer+0x16e2>
 8010934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010938:	085b      	lsrs	r3, r3, #1
 801093a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801093e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010942:	f003 0301 	and.w	r3, r3, #1
 8010946:	2b00      	cmp	r3, #0
 8010948:	d004      	beq.n	8010954 <USB_EPStartXfer+0xf04>
 801094a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801094e:	3301      	adds	r3, #1
 8010950:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010958:	881b      	ldrh	r3, [r3, #0]
 801095a:	b29a      	uxth	r2, r3
 801095c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010960:	b29b      	uxth	r3, r3
 8010962:	029b      	lsls	r3, r3, #10
 8010964:	b29b      	uxth	r3, r3
 8010966:	4313      	orrs	r3, r2
 8010968:	b29a      	uxth	r2, r3
 801096a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801096e:	801a      	strh	r2, [r3, #0]
 8010970:	e3df      	b.n	8011132 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8010972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	78db      	ldrb	r3, [r3, #3]
 801097e:	2b02      	cmp	r3, #2
 8010980:	f040 8218 	bne.w	8010db4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8010984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	785b      	ldrb	r3, [r3, #1]
 8010990:	2b00      	cmp	r3, #0
 8010992:	f040 809d 	bne.w	8010ad0 <USB_EPStartXfer+0x1080>
 8010996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801099a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80109a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	461a      	mov	r2, r3
 80109b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109ba:	4413      	add	r3, r2
 80109bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80109c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	011a      	lsls	r2, r3, #4
 80109ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109d2:	4413      	add	r3, r2
 80109d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80109d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80109dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80109e0:	881b      	ldrh	r3, [r3, #0]
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80109ee:	801a      	strh	r2, [r3, #0]
 80109f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	691b      	ldr	r3, [r3, #16]
 80109fc:	2b3e      	cmp	r3, #62	; 0x3e
 80109fe:	d92b      	bls.n	8010a58 <USB_EPStartXfer+0x1008>
 8010a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	691b      	ldr	r3, [r3, #16]
 8010a0c:	095b      	lsrs	r3, r3, #5
 8010a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	691b      	ldr	r3, [r3, #16]
 8010a1e:	f003 031f 	and.w	r3, r3, #31
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d104      	bne.n	8010a30 <USB_EPStartXfer+0xfe0>
 8010a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a2a:	3b01      	subs	r3, #1
 8010a2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010a34:	881b      	ldrh	r3, [r3, #0]
 8010a36:	b29a      	uxth	r2, r3
 8010a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	029b      	lsls	r3, r3, #10
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	4313      	orrs	r3, r2
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a4e:	b29a      	uxth	r2, r3
 8010a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010a54:	801a      	strh	r2, [r3, #0]
 8010a56:	e070      	b.n	8010b3a <USB_EPStartXfer+0x10ea>
 8010a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	691b      	ldr	r3, [r3, #16]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d10c      	bne.n	8010a82 <USB_EPStartXfer+0x1032>
 8010a68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010a6c:	881b      	ldrh	r3, [r3, #0]
 8010a6e:	b29b      	uxth	r3, r3
 8010a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a78:	b29a      	uxth	r2, r3
 8010a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010a7e:	801a      	strh	r2, [r3, #0]
 8010a80:	e05b      	b.n	8010b3a <USB_EPStartXfer+0x10ea>
 8010a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	691b      	ldr	r3, [r3, #16]
 8010a8e:	085b      	lsrs	r3, r3, #1
 8010a90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	691b      	ldr	r3, [r3, #16]
 8010aa0:	f003 0301 	and.w	r3, r3, #1
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d004      	beq.n	8010ab2 <USB_EPStartXfer+0x1062>
 8010aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010aac:	3301      	adds	r3, #1
 8010aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010ab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010ab6:	881b      	ldrh	r3, [r3, #0]
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010abe:	b29b      	uxth	r3, r3
 8010ac0:	029b      	lsls	r3, r3, #10
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	4313      	orrs	r3, r2
 8010ac6:	b29a      	uxth	r2, r3
 8010ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010acc:	801a      	strh	r2, [r3, #0]
 8010ace:	e034      	b.n	8010b3a <USB_EPStartXfer+0x10ea>
 8010ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	785b      	ldrb	r3, [r3, #1]
 8010adc:	2b01      	cmp	r3, #1
 8010ade:	d12c      	bne.n	8010b3a <USB_EPStartXfer+0x10ea>
 8010ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	461a      	mov	r2, r3
 8010b00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010b04:	4413      	add	r3, r2
 8010b06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	011a      	lsls	r2, r3, #4
 8010b18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010b1c:	4413      	add	r3, r2
 8010b1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	691b      	ldr	r3, [r3, #16]
 8010b32:	b29a      	uxth	r2, r3
 8010b34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010b38:	801a      	strh	r2, [r3, #0]
 8010b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	785b      	ldrb	r3, [r3, #1]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	f040 809d 	bne.w	8010c94 <USB_EPStartXfer+0x1244>
 8010b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	461a      	mov	r2, r3
 8010b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b7e:	4413      	add	r3, r2
 8010b80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	011a      	lsls	r2, r3, #4
 8010b92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b96:	4413      	add	r3, r2
 8010b98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ba4:	881b      	ldrh	r3, [r3, #0]
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010bac:	b29a      	uxth	r2, r3
 8010bae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010bb2:	801a      	strh	r2, [r3, #0]
 8010bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	691b      	ldr	r3, [r3, #16]
 8010bc0:	2b3e      	cmp	r3, #62	; 0x3e
 8010bc2:	d92b      	bls.n	8010c1c <USB_EPStartXfer+0x11cc>
 8010bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	691b      	ldr	r3, [r3, #16]
 8010bd0:	095b      	lsrs	r3, r3, #5
 8010bd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	691b      	ldr	r3, [r3, #16]
 8010be2:	f003 031f 	and.w	r3, r3, #31
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d104      	bne.n	8010bf4 <USB_EPStartXfer+0x11a4>
 8010bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bee:	3b01      	subs	r3, #1
 8010bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010bf8:	881b      	ldrh	r3, [r3, #0]
 8010bfa:	b29a      	uxth	r2, r3
 8010bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	029b      	lsls	r3, r3, #10
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	4313      	orrs	r3, r2
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c18:	801a      	strh	r2, [r3, #0]
 8010c1a:	e069      	b.n	8010cf0 <USB_EPStartXfer+0x12a0>
 8010c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	691b      	ldr	r3, [r3, #16]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d10c      	bne.n	8010c46 <USB_EPStartXfer+0x11f6>
 8010c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c30:	881b      	ldrh	r3, [r3, #0]
 8010c32:	b29b      	uxth	r3, r3
 8010c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c42:	801a      	strh	r2, [r3, #0]
 8010c44:	e054      	b.n	8010cf0 <USB_EPStartXfer+0x12a0>
 8010c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	691b      	ldr	r3, [r3, #16]
 8010c52:	085b      	lsrs	r3, r3, #1
 8010c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	691b      	ldr	r3, [r3, #16]
 8010c64:	f003 0301 	and.w	r3, r3, #1
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d004      	beq.n	8010c76 <USB_EPStartXfer+0x1226>
 8010c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c70:	3301      	adds	r3, #1
 8010c72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010c76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c7a:	881b      	ldrh	r3, [r3, #0]
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	029b      	lsls	r3, r3, #10
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	b29a      	uxth	r2, r3
 8010c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c90:	801a      	strh	r2, [r3, #0]
 8010c92:	e02d      	b.n	8010cf0 <USB_EPStartXfer+0x12a0>
 8010c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	785b      	ldrb	r3, [r3, #1]
 8010ca0:	2b01      	cmp	r3, #1
 8010ca2:	d125      	bne.n	8010cf0 <USB_EPStartXfer+0x12a0>
 8010ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	461a      	mov	r2, r3
 8010cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010cba:	4413      	add	r3, r2
 8010cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	011a      	lsls	r2, r3, #4
 8010cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010cd2:	4413      	add	r3, r2
 8010cd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010cd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	691b      	ldr	r3, [r3, #16]
 8010ce8:	b29a      	uxth	r2, r3
 8010cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010cee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8010cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	69db      	ldr	r3, [r3, #28]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	f000 8218 	beq.w	8011132 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8010d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	009b      	lsls	r3, r3, #2
 8010d1a:	4413      	add	r3, r2
 8010d1c:	881b      	ldrh	r3, [r3, #0]
 8010d1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010d22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d005      	beq.n	8010d3a <USB_EPStartXfer+0x12ea>
 8010d2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d10d      	bne.n	8010d56 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010d3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	f040 81f5 	bne.w	8011132 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010d48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	f040 81ee 	bne.w	8011132 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8010d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d5e:	681a      	ldr	r2, [r3, #0]
 8010d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	009b      	lsls	r3, r3, #2
 8010d6e:	4413      	add	r3, r2
 8010d70:	881b      	ldrh	r3, [r3, #0]
 8010d72:	b29b      	uxth	r3, r3
 8010d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d7c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8010d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	009b      	lsls	r3, r3, #2
 8010d98:	441a      	add	r2, r3
 8010d9a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8010d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010daa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	8013      	strh	r3, [r2, #0]
 8010db2:	e1be      	b.n	8011132 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	78db      	ldrb	r3, [r3, #3]
 8010dc0:	2b01      	cmp	r3, #1
 8010dc2:	f040 81b4 	bne.w	801112e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8010dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	699a      	ldr	r2, [r3, #24]
 8010dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	691b      	ldr	r3, [r3, #16]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d917      	bls.n	8010e12 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8010de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	691b      	ldr	r3, [r3, #16]
 8010dee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8010df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	699a      	ldr	r2, [r3, #24]
 8010dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e02:	1ad2      	subs	r2, r2, r3
 8010e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	619a      	str	r2, [r3, #24]
 8010e10:	e00e      	b.n	8010e30 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8010e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	699b      	ldr	r3, [r3, #24]
 8010e1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8010e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8010e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	785b      	ldrb	r3, [r3, #1]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	f040 8085 	bne.w	8010f4c <USB_EPStartXfer+0x14fc>
 8010e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	461a      	mov	r2, r3
 8010e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010e66:	4413      	add	r3, r2
 8010e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	011a      	lsls	r2, r3, #4
 8010e7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010e7e:	4413      	add	r3, r2
 8010e80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010e84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010e88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e8c:	881b      	ldrh	r3, [r3, #0]
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e94:	b29a      	uxth	r2, r3
 8010e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e9a:	801a      	strh	r2, [r3, #0]
 8010e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8010ea2:	d923      	bls.n	8010eec <USB_EPStartXfer+0x149c>
 8010ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ea8:	095b      	lsrs	r3, r3, #5
 8010eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010eb2:	f003 031f 	and.w	r3, r3, #31
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d104      	bne.n	8010ec4 <USB_EPStartXfer+0x1474>
 8010eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ebe:	3b01      	subs	r3, #1
 8010ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010ec4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ec8:	881b      	ldrh	r3, [r3, #0]
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	029b      	lsls	r3, r3, #10
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	4313      	orrs	r3, r2
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ee8:	801a      	strh	r2, [r3, #0]
 8010eea:	e060      	b.n	8010fae <USB_EPStartXfer+0x155e>
 8010eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d10c      	bne.n	8010f0e <USB_EPStartXfer+0x14be>
 8010ef4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ef8:	881b      	ldrh	r3, [r3, #0]
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f04:	b29a      	uxth	r2, r3
 8010f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f0a:	801a      	strh	r2, [r3, #0]
 8010f0c:	e04f      	b.n	8010fae <USB_EPStartXfer+0x155e>
 8010f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f12:	085b      	lsrs	r3, r3, #1
 8010f14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f1c:	f003 0301 	and.w	r3, r3, #1
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d004      	beq.n	8010f2e <USB_EPStartXfer+0x14de>
 8010f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f28:	3301      	adds	r3, #1
 8010f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f32:	881b      	ldrh	r3, [r3, #0]
 8010f34:	b29a      	uxth	r2, r3
 8010f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	029b      	lsls	r3, r3, #10
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	4313      	orrs	r3, r2
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f48:	801a      	strh	r2, [r3, #0]
 8010f4a:	e030      	b.n	8010fae <USB_EPStartXfer+0x155e>
 8010f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	785b      	ldrb	r3, [r3, #1]
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d128      	bne.n	8010fae <USB_EPStartXfer+0x155e>
 8010f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f80:	4413      	add	r3, r2
 8010f82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	011a      	lsls	r2, r3, #4
 8010f94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f98:	4413      	add	r3, r2
 8010f9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010f9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010fac:	801a      	strh	r2, [r3, #0]
 8010fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	785b      	ldrb	r3, [r3, #1]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	f040 8085 	bne.w	80110d8 <USB_EPStartXfer+0x1688>
 8010fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010fea:	b29b      	uxth	r3, r3
 8010fec:	461a      	mov	r2, r3
 8010fee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010ff2:	4413      	add	r3, r2
 8010ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	011a      	lsls	r2, r3, #4
 8011006:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801100a:	4413      	add	r3, r2
 801100c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011014:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011018:	881b      	ldrh	r3, [r3, #0]
 801101a:	b29b      	uxth	r3, r3
 801101c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011020:	b29a      	uxth	r2, r3
 8011022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011026:	801a      	strh	r2, [r3, #0]
 8011028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801102c:	2b3e      	cmp	r3, #62	; 0x3e
 801102e:	d923      	bls.n	8011078 <USB_EPStartXfer+0x1628>
 8011030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011034:	095b      	lsrs	r3, r3, #5
 8011036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801103a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801103e:	f003 031f 	and.w	r3, r3, #31
 8011042:	2b00      	cmp	r3, #0
 8011044:	d104      	bne.n	8011050 <USB_EPStartXfer+0x1600>
 8011046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801104a:	3b01      	subs	r3, #1
 801104c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011050:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011054:	881b      	ldrh	r3, [r3, #0]
 8011056:	b29a      	uxth	r2, r3
 8011058:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801105c:	b29b      	uxth	r3, r3
 801105e:	029b      	lsls	r3, r3, #10
 8011060:	b29b      	uxth	r3, r3
 8011062:	4313      	orrs	r3, r2
 8011064:	b29b      	uxth	r3, r3
 8011066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801106a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801106e:	b29a      	uxth	r2, r3
 8011070:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011074:	801a      	strh	r2, [r3, #0]
 8011076:	e05c      	b.n	8011132 <USB_EPStartXfer+0x16e2>
 8011078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801107c:	2b00      	cmp	r3, #0
 801107e:	d10c      	bne.n	801109a <USB_EPStartXfer+0x164a>
 8011080:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011084:	881b      	ldrh	r3, [r3, #0]
 8011086:	b29b      	uxth	r3, r3
 8011088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801108c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011090:	b29a      	uxth	r2, r3
 8011092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011096:	801a      	strh	r2, [r3, #0]
 8011098:	e04b      	b.n	8011132 <USB_EPStartXfer+0x16e2>
 801109a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801109e:	085b      	lsrs	r3, r3, #1
 80110a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80110a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110a8:	f003 0301 	and.w	r3, r3, #1
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d004      	beq.n	80110ba <USB_EPStartXfer+0x166a>
 80110b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80110b4:	3301      	adds	r3, #1
 80110b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80110ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80110be:	881b      	ldrh	r3, [r3, #0]
 80110c0:	b29a      	uxth	r2, r3
 80110c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	029b      	lsls	r3, r3, #10
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	4313      	orrs	r3, r2
 80110ce:	b29a      	uxth	r2, r3
 80110d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80110d4:	801a      	strh	r2, [r3, #0]
 80110d6:	e02c      	b.n	8011132 <USB_EPStartXfer+0x16e2>
 80110d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	785b      	ldrb	r3, [r3, #1]
 80110e4:	2b01      	cmp	r3, #1
 80110e6:	d124      	bne.n	8011132 <USB_EPStartXfer+0x16e2>
 80110e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	461a      	mov	r2, r3
 80110fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80110fe:	4413      	add	r3, r2
 8011100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	011a      	lsls	r2, r3, #4
 8011112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011116:	4413      	add	r3, r2
 8011118:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801111c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011124:	b29a      	uxth	r2, r3
 8011126:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801112a:	801a      	strh	r2, [r3, #0]
 801112c:	e001      	b.n	8011132 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 801112e:	2301      	movs	r3, #1
 8011130:	e03a      	b.n	80111a8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801113a:	681a      	ldr	r2, [r3, #0]
 801113c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	781b      	ldrb	r3, [r3, #0]
 8011148:	009b      	lsls	r3, r3, #2
 801114a:	4413      	add	r3, r2
 801114c:	881b      	ldrh	r3, [r3, #0]
 801114e:	b29b      	uxth	r3, r3
 8011150:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011158:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801115c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011160:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011164:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011168:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801116c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011170:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801117c:	681a      	ldr	r2, [r3, #0]
 801117e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	009b      	lsls	r3, r3, #2
 801118c:	441a      	add	r2, r3
 801118e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801119a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801119e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80111a6:	2300      	movs	r3, #0
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80111b2:	b480      	push	{r7}
 80111b4:	b085      	sub	sp, #20
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
 80111ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	785b      	ldrb	r3, [r3, #1]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d020      	beq.n	8011206 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	4413      	add	r3, r2
 80111ce:	881b      	ldrh	r3, [r3, #0]
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111da:	81bb      	strh	r3, [r7, #12]
 80111dc:	89bb      	ldrh	r3, [r7, #12]
 80111de:	f083 0310 	eor.w	r3, r3, #16
 80111e2:	81bb      	strh	r3, [r7, #12]
 80111e4:	687a      	ldr	r2, [r7, #4]
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	009b      	lsls	r3, r3, #2
 80111ec:	441a      	add	r2, r3
 80111ee:	89bb      	ldrh	r3, [r7, #12]
 80111f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011200:	b29b      	uxth	r3, r3
 8011202:	8013      	strh	r3, [r2, #0]
 8011204:	e01f      	b.n	8011246 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011206:	687a      	ldr	r2, [r7, #4]
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	009b      	lsls	r3, r3, #2
 801120e:	4413      	add	r3, r2
 8011210:	881b      	ldrh	r3, [r3, #0]
 8011212:	b29b      	uxth	r3, r3
 8011214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801121c:	81fb      	strh	r3, [r7, #14]
 801121e:	89fb      	ldrh	r3, [r7, #14]
 8011220:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011224:	81fb      	strh	r3, [r7, #14]
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	009b      	lsls	r3, r3, #2
 801122e:	441a      	add	r2, r3
 8011230:	89fb      	ldrh	r3, [r7, #14]
 8011232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801123a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801123e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011242:	b29b      	uxth	r3, r3
 8011244:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011246:	2300      	movs	r3, #0
}
 8011248:	4618      	mov	r0, r3
 801124a:	3714      	adds	r7, #20
 801124c:	46bd      	mov	sp, r7
 801124e:	bc80      	pop	{r7}
 8011250:	4770      	bx	lr

08011252 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011252:	b480      	push	{r7}
 8011254:	b087      	sub	sp, #28
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
 801125a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	7b1b      	ldrb	r3, [r3, #12]
 8011260:	2b00      	cmp	r3, #0
 8011262:	f040 809d 	bne.w	80113a0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	785b      	ldrb	r3, [r3, #1]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d04c      	beq.n	8011308 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801126e:	687a      	ldr	r2, [r7, #4]
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	009b      	lsls	r3, r3, #2
 8011276:	4413      	add	r3, r2
 8011278:	881b      	ldrh	r3, [r3, #0]
 801127a:	823b      	strh	r3, [r7, #16]
 801127c:	8a3b      	ldrh	r3, [r7, #16]
 801127e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011282:	2b00      	cmp	r3, #0
 8011284:	d01b      	beq.n	80112be <USB_EPClearStall+0x6c>
 8011286:	687a      	ldr	r2, [r7, #4]
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	009b      	lsls	r3, r3, #2
 801128e:	4413      	add	r3, r2
 8011290:	881b      	ldrh	r3, [r3, #0]
 8011292:	b29b      	uxth	r3, r3
 8011294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801129c:	81fb      	strh	r3, [r7, #14]
 801129e:	687a      	ldr	r2, [r7, #4]
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	009b      	lsls	r3, r3, #2
 80112a6:	441a      	add	r2, r3
 80112a8:	89fb      	ldrh	r3, [r7, #14]
 80112aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80112ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80112b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	78db      	ldrb	r3, [r3, #3]
 80112c2:	2b01      	cmp	r3, #1
 80112c4:	d06c      	beq.n	80113a0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	4413      	add	r3, r2
 80112d0:	881b      	ldrh	r3, [r3, #0]
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112dc:	81bb      	strh	r3, [r7, #12]
 80112de:	89bb      	ldrh	r3, [r7, #12]
 80112e0:	f083 0320 	eor.w	r3, r3, #32
 80112e4:	81bb      	strh	r3, [r7, #12]
 80112e6:	687a      	ldr	r2, [r7, #4]
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	441a      	add	r2, r3
 80112f0:	89bb      	ldrh	r3, [r7, #12]
 80112f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80112f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80112fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011302:	b29b      	uxth	r3, r3
 8011304:	8013      	strh	r3, [r2, #0]
 8011306:	e04b      	b.n	80113a0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	4413      	add	r3, r2
 8011312:	881b      	ldrh	r3, [r3, #0]
 8011314:	82fb      	strh	r3, [r7, #22]
 8011316:	8afb      	ldrh	r3, [r7, #22]
 8011318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801131c:	2b00      	cmp	r3, #0
 801131e:	d01b      	beq.n	8011358 <USB_EPClearStall+0x106>
 8011320:	687a      	ldr	r2, [r7, #4]
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	781b      	ldrb	r3, [r3, #0]
 8011326:	009b      	lsls	r3, r3, #2
 8011328:	4413      	add	r3, r2
 801132a:	881b      	ldrh	r3, [r3, #0]
 801132c:	b29b      	uxth	r3, r3
 801132e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011336:	82bb      	strh	r3, [r7, #20]
 8011338:	687a      	ldr	r2, [r7, #4]
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	009b      	lsls	r3, r3, #2
 8011340:	441a      	add	r2, r3
 8011342:	8abb      	ldrh	r3, [r7, #20]
 8011344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801134c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011354:	b29b      	uxth	r3, r3
 8011356:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	009b      	lsls	r3, r3, #2
 8011360:	4413      	add	r3, r2
 8011362:	881b      	ldrh	r3, [r3, #0]
 8011364:	b29b      	uxth	r3, r3
 8011366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801136a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801136e:	827b      	strh	r3, [r7, #18]
 8011370:	8a7b      	ldrh	r3, [r7, #18]
 8011372:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011376:	827b      	strh	r3, [r7, #18]
 8011378:	8a7b      	ldrh	r3, [r7, #18]
 801137a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801137e:	827b      	strh	r3, [r7, #18]
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	009b      	lsls	r3, r3, #2
 8011388:	441a      	add	r2, r3
 801138a:	8a7b      	ldrh	r3, [r7, #18]
 801138c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801139c:	b29b      	uxth	r3, r3
 801139e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80113a0:	2300      	movs	r3, #0
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	371c      	adds	r7, #28
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bc80      	pop	{r7}
 80113aa:	4770      	bx	lr

080113ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b083      	sub	sp, #12
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	460b      	mov	r3, r1
 80113b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80113b8:	78fb      	ldrb	r3, [r7, #3]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d103      	bne.n	80113c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2280      	movs	r2, #128	; 0x80
 80113c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80113c6:	2300      	movs	r3, #0
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	370c      	adds	r7, #12
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bc80      	pop	{r7}
 80113d0:	4770      	bx	lr

080113d2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80113d2:	b480      	push	{r7}
 80113d4:	b083      	sub	sp, #12
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80113da:	2300      	movs	r3, #0
}
 80113dc:	4618      	mov	r0, r3
 80113de:	370c      	adds	r7, #12
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bc80      	pop	{r7}
 80113e4:	4770      	bx	lr

080113e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80113e6:	b480      	push	{r7}
 80113e8:	b083      	sub	sp, #12
 80113ea:	af00      	add	r7, sp, #0
 80113ec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80113ee:	2300      	movs	r3, #0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	370c      	adds	r7, #12
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bc80      	pop	{r7}
 80113f8:	4770      	bx	lr

080113fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80113fa:	b480      	push	{r7}
 80113fc:	b085      	sub	sp, #20
 80113fe:	af00      	add	r7, sp, #0
 8011400:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011408:	b29b      	uxth	r3, r3
 801140a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801140c:	68fb      	ldr	r3, [r7, #12]
}
 801140e:	4618      	mov	r0, r3
 8011410:	3714      	adds	r7, #20
 8011412:	46bd      	mov	sp, r7
 8011414:	bc80      	pop	{r7}
 8011416:	4770      	bx	lr

08011418 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8011418:	b480      	push	{r7}
 801141a:	b083      	sub	sp, #12
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8011422:	2300      	movs	r3, #0
}
 8011424:	4618      	mov	r0, r3
 8011426:	370c      	adds	r7, #12
 8011428:	46bd      	mov	sp, r7
 801142a:	bc80      	pop	{r7}
 801142c:	4770      	bx	lr

0801142e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801142e:	b480      	push	{r7}
 8011430:	b08b      	sub	sp, #44	; 0x2c
 8011432:	af00      	add	r7, sp, #0
 8011434:	60f8      	str	r0, [r7, #12]
 8011436:	60b9      	str	r1, [r7, #8]
 8011438:	4611      	mov	r1, r2
 801143a:	461a      	mov	r2, r3
 801143c:	460b      	mov	r3, r1
 801143e:	80fb      	strh	r3, [r7, #6]
 8011440:	4613      	mov	r3, r2
 8011442:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011444:	88bb      	ldrh	r3, [r7, #4]
 8011446:	3301      	adds	r3, #1
 8011448:	085b      	lsrs	r3, r3, #1
 801144a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011454:	88fb      	ldrh	r3, [r7, #6]
 8011456:	005a      	lsls	r2, r3, #1
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	4413      	add	r3, r2
 801145c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011460:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011462:	69bb      	ldr	r3, [r7, #24]
 8011464:	627b      	str	r3, [r7, #36]	; 0x24
 8011466:	e01e      	b.n	80114a6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8011468:	69fb      	ldr	r3, [r7, #28]
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801146e:	69fb      	ldr	r3, [r7, #28]
 8011470:	3301      	adds	r3, #1
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	021b      	lsls	r3, r3, #8
 8011476:	b21a      	sxth	r2, r3
 8011478:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801147c:	4313      	orrs	r3, r2
 801147e:	b21b      	sxth	r3, r3
 8011480:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011482:	6a3b      	ldr	r3, [r7, #32]
 8011484:	8a7a      	ldrh	r2, [r7, #18]
 8011486:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011488:	6a3b      	ldr	r3, [r7, #32]
 801148a:	3302      	adds	r3, #2
 801148c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 801148e:	6a3b      	ldr	r3, [r7, #32]
 8011490:	3302      	adds	r3, #2
 8011492:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	3301      	adds	r3, #1
 8011498:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	3301      	adds	r3, #1
 801149e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80114a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a2:	3b01      	subs	r3, #1
 80114a4:	627b      	str	r3, [r7, #36]	; 0x24
 80114a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d1dd      	bne.n	8011468 <USB_WritePMA+0x3a>
  }
}
 80114ac:	bf00      	nop
 80114ae:	bf00      	nop
 80114b0:	372c      	adds	r7, #44	; 0x2c
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bc80      	pop	{r7}
 80114b6:	4770      	bx	lr

080114b8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b08b      	sub	sp, #44	; 0x2c
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	60b9      	str	r1, [r7, #8]
 80114c2:	4611      	mov	r1, r2
 80114c4:	461a      	mov	r2, r3
 80114c6:	460b      	mov	r3, r1
 80114c8:	80fb      	strh	r3, [r7, #6]
 80114ca:	4613      	mov	r3, r2
 80114cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80114ce:	88bb      	ldrh	r3, [r7, #4]
 80114d0:	085b      	lsrs	r3, r3, #1
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80114de:	88fb      	ldrh	r3, [r7, #6]
 80114e0:	005a      	lsls	r2, r3, #1
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	4413      	add	r3, r2
 80114e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80114ea:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	627b      	str	r3, [r7, #36]	; 0x24
 80114f0:	e01b      	b.n	801152a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80114f2:	6a3b      	ldr	r3, [r7, #32]
 80114f4:	881b      	ldrh	r3, [r3, #0]
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80114fa:	6a3b      	ldr	r3, [r7, #32]
 80114fc:	3302      	adds	r3, #2
 80114fe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	b2da      	uxtb	r2, r3
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011508:	69fb      	ldr	r3, [r7, #28]
 801150a:	3301      	adds	r3, #1
 801150c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	0a1b      	lsrs	r3, r3, #8
 8011512:	b2da      	uxtb	r2, r3
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011518:	69fb      	ldr	r3, [r7, #28]
 801151a:	3301      	adds	r3, #1
 801151c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 801151e:	6a3b      	ldr	r3, [r7, #32]
 8011520:	3302      	adds	r3, #2
 8011522:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8011524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011526:	3b01      	subs	r3, #1
 8011528:	627b      	str	r3, [r7, #36]	; 0x24
 801152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152c:	2b00      	cmp	r3, #0
 801152e:	d1e0      	bne.n	80114f2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8011530:	88bb      	ldrh	r3, [r7, #4]
 8011532:	f003 0301 	and.w	r3, r3, #1
 8011536:	b29b      	uxth	r3, r3
 8011538:	2b00      	cmp	r3, #0
 801153a:	d007      	beq.n	801154c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 801153c:	6a3b      	ldr	r3, [r7, #32]
 801153e:	881b      	ldrh	r3, [r3, #0]
 8011540:	b29b      	uxth	r3, r3
 8011542:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	b2da      	uxtb	r2, r3
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	701a      	strb	r2, [r3, #0]
  }
}
 801154c:	bf00      	nop
 801154e:	372c      	adds	r7, #44	; 0x2c
 8011550:	46bd      	mov	sp, r7
 8011552:	bc80      	pop	{r7}
 8011554:	4770      	bx	lr

08011556 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011556:	b580      	push	{r7, lr}
 8011558:	b084      	sub	sp, #16
 801155a:	af00      	add	r7, sp, #0
 801155c:	6078      	str	r0, [r7, #4]
 801155e:	460b      	mov	r3, r1
 8011560:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011562:	2300      	movs	r3, #0
 8011564:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	7c1b      	ldrb	r3, [r3, #16]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d115      	bne.n	801159a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801156e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011572:	2202      	movs	r2, #2
 8011574:	2181      	movs	r1, #129	; 0x81
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f001 fe99 	bl	80132ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2201      	movs	r2, #1
 8011580:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011586:	2202      	movs	r2, #2
 8011588:	2101      	movs	r1, #1
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f001 fe8f 	bl	80132ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2201      	movs	r2, #1
 8011594:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8011598:	e012      	b.n	80115c0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801159a:	2340      	movs	r3, #64	; 0x40
 801159c:	2202      	movs	r2, #2
 801159e:	2181      	movs	r1, #129	; 0x81
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f001 fe84 	bl	80132ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2201      	movs	r2, #1
 80115aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80115ac:	2340      	movs	r3, #64	; 0x40
 80115ae:	2202      	movs	r2, #2
 80115b0:	2101      	movs	r1, #1
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f001 fe7b 	bl	80132ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2201      	movs	r2, #1
 80115bc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80115c0:	2308      	movs	r3, #8
 80115c2:	2203      	movs	r2, #3
 80115c4:	2182      	movs	r1, #130	; 0x82
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f001 fe71 	bl	80132ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2201      	movs	r2, #1
 80115d0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80115d2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80115d6:	f001 ff91 	bl	80134fc <USBD_static_malloc>
 80115da:	4602      	mov	r2, r0
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d102      	bne.n	80115f2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80115ec:	2301      	movs	r3, #1
 80115ee:	73fb      	strb	r3, [r7, #15]
 80115f0:	e026      	b.n	8011640 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115f8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	2200      	movs	r2, #0
 8011608:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	2200      	movs	r2, #0
 8011610:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	7c1b      	ldrb	r3, [r3, #16]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d109      	bne.n	8011630 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011626:	2101      	movs	r1, #1
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f001 ff31 	bl	8013490 <USBD_LL_PrepareReceive>
 801162e:	e007      	b.n	8011640 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011636:	2340      	movs	r3, #64	; 0x40
 8011638:	2101      	movs	r1, #1
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f001 ff28 	bl	8013490 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8011640:	7bfb      	ldrb	r3, [r7, #15]
}
 8011642:	4618      	mov	r0, r3
 8011644:	3710      	adds	r7, #16
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801164a:	b580      	push	{r7, lr}
 801164c:	b084      	sub	sp, #16
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]
 8011652:	460b      	mov	r3, r1
 8011654:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011656:	2300      	movs	r3, #0
 8011658:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801165a:	2181      	movs	r1, #129	; 0x81
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f001 fe4c 	bl	80132fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2200      	movs	r2, #0
 8011666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011668:	2101      	movs	r1, #1
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f001 fe45 	bl	80132fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2200      	movs	r2, #0
 8011674:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011678:	2182      	movs	r1, #130	; 0x82
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f001 fe3d 	bl	80132fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2200      	movs	r2, #0
 8011684:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801168c:	2b00      	cmp	r3, #0
 801168e:	d00e      	beq.n	80116ae <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116a0:	4618      	mov	r0, r3
 80116a2:	f001 ff37 	bl	8013514 <USBD_static_free>
    pdev->pClassData = NULL;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2200      	movs	r2, #0
 80116aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80116ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3710      	adds	r7, #16
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}

080116b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b086      	sub	sp, #24
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116c8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80116ca:	2300      	movs	r3, #0
 80116cc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80116ce:	2300      	movs	r3, #0
 80116d0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80116d2:	2300      	movs	r3, #0
 80116d4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d039      	beq.n	8011756 <USBD_CDC_Setup+0x9e>
 80116e2:	2b20      	cmp	r3, #32
 80116e4:	d17f      	bne.n	80117e6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	88db      	ldrh	r3, [r3, #6]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d029      	beq.n	8011742 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	b25b      	sxtb	r3, r3
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	da11      	bge.n	801171c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116fe:	689b      	ldr	r3, [r3, #8]
 8011700:	683a      	ldr	r2, [r7, #0]
 8011702:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8011704:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011706:	683a      	ldr	r2, [r7, #0]
 8011708:	88d2      	ldrh	r2, [r2, #6]
 801170a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801170c:	6939      	ldr	r1, [r7, #16]
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	88db      	ldrh	r3, [r3, #6]
 8011712:	461a      	mov	r2, r3
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f001 fa0a 	bl	8012b2e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801171a:	e06b      	b.n	80117f4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	785a      	ldrb	r2, [r3, #1]
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	88db      	ldrh	r3, [r3, #6]
 801172a:	b2da      	uxtb	r2, r3
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8011732:	6939      	ldr	r1, [r7, #16]
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	88db      	ldrh	r3, [r3, #6]
 8011738:	461a      	mov	r2, r3
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f001 fa25 	bl	8012b8a <USBD_CtlPrepareRx>
      break;
 8011740:	e058      	b.n	80117f4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011748:	689b      	ldr	r3, [r3, #8]
 801174a:	683a      	ldr	r2, [r7, #0]
 801174c:	7850      	ldrb	r0, [r2, #1]
 801174e:	2200      	movs	r2, #0
 8011750:	6839      	ldr	r1, [r7, #0]
 8011752:	4798      	blx	r3
      break;
 8011754:	e04e      	b.n	80117f4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	785b      	ldrb	r3, [r3, #1]
 801175a:	2b0b      	cmp	r3, #11
 801175c:	d02e      	beq.n	80117bc <USBD_CDC_Setup+0x104>
 801175e:	2b0b      	cmp	r3, #11
 8011760:	dc38      	bgt.n	80117d4 <USBD_CDC_Setup+0x11c>
 8011762:	2b00      	cmp	r3, #0
 8011764:	d002      	beq.n	801176c <USBD_CDC_Setup+0xb4>
 8011766:	2b0a      	cmp	r3, #10
 8011768:	d014      	beq.n	8011794 <USBD_CDC_Setup+0xdc>
 801176a:	e033      	b.n	80117d4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011772:	2b03      	cmp	r3, #3
 8011774:	d107      	bne.n	8011786 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8011776:	f107 030c 	add.w	r3, r7, #12
 801177a:	2202      	movs	r2, #2
 801177c:	4619      	mov	r1, r3
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f001 f9d5 	bl	8012b2e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011784:	e02e      	b.n	80117e4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8011786:	6839      	ldr	r1, [r7, #0]
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f001 f966 	bl	8012a5a <USBD_CtlError>
            ret = USBD_FAIL;
 801178e:	2302      	movs	r3, #2
 8011790:	75fb      	strb	r3, [r7, #23]
          break;
 8011792:	e027      	b.n	80117e4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801179a:	2b03      	cmp	r3, #3
 801179c:	d107      	bne.n	80117ae <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801179e:	f107 030f 	add.w	r3, r7, #15
 80117a2:	2201      	movs	r2, #1
 80117a4:	4619      	mov	r1, r3
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f001 f9c1 	bl	8012b2e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80117ac:	e01a      	b.n	80117e4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80117ae:	6839      	ldr	r1, [r7, #0]
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f001 f952 	bl	8012a5a <USBD_CtlError>
            ret = USBD_FAIL;
 80117b6:	2302      	movs	r3, #2
 80117b8:	75fb      	strb	r3, [r7, #23]
          break;
 80117ba:	e013      	b.n	80117e4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117c2:	2b03      	cmp	r3, #3
 80117c4:	d00d      	beq.n	80117e2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80117c6:	6839      	ldr	r1, [r7, #0]
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f001 f946 	bl	8012a5a <USBD_CtlError>
            ret = USBD_FAIL;
 80117ce:	2302      	movs	r3, #2
 80117d0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80117d2:	e006      	b.n	80117e2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80117d4:	6839      	ldr	r1, [r7, #0]
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f001 f93f 	bl	8012a5a <USBD_CtlError>
          ret = USBD_FAIL;
 80117dc:	2302      	movs	r3, #2
 80117de:	75fb      	strb	r3, [r7, #23]
          break;
 80117e0:	e000      	b.n	80117e4 <USBD_CDC_Setup+0x12c>
          break;
 80117e2:	bf00      	nop
      }
      break;
 80117e4:	e006      	b.n	80117f4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80117e6:	6839      	ldr	r1, [r7, #0]
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f001 f936 	bl	8012a5a <USBD_CtlError>
      ret = USBD_FAIL;
 80117ee:	2302      	movs	r3, #2
 80117f0:	75fb      	strb	r3, [r7, #23]
      break;
 80117f2:	bf00      	nop
  }

  return ret;
 80117f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3718      	adds	r7, #24
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}

080117fe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80117fe:	b580      	push	{r7, lr}
 8011800:	b084      	sub	sp, #16
 8011802:	af00      	add	r7, sp, #0
 8011804:	6078      	str	r0, [r7, #4]
 8011806:	460b      	mov	r3, r1
 8011808:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011810:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011818:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011820:	2b00      	cmp	r3, #0
 8011822:	d03a      	beq.n	801189a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011824:	78fa      	ldrb	r2, [r7, #3]
 8011826:	6879      	ldr	r1, [r7, #4]
 8011828:	4613      	mov	r3, r2
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	4413      	add	r3, r2
 801182e:	009b      	lsls	r3, r3, #2
 8011830:	440b      	add	r3, r1
 8011832:	331c      	adds	r3, #28
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d029      	beq.n	801188e <USBD_CDC_DataIn+0x90>
 801183a:	78fa      	ldrb	r2, [r7, #3]
 801183c:	6879      	ldr	r1, [r7, #4]
 801183e:	4613      	mov	r3, r2
 8011840:	009b      	lsls	r3, r3, #2
 8011842:	4413      	add	r3, r2
 8011844:	009b      	lsls	r3, r3, #2
 8011846:	440b      	add	r3, r1
 8011848:	331c      	adds	r3, #28
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	78f9      	ldrb	r1, [r7, #3]
 801184e:	68b8      	ldr	r0, [r7, #8]
 8011850:	460b      	mov	r3, r1
 8011852:	009b      	lsls	r3, r3, #2
 8011854:	440b      	add	r3, r1
 8011856:	00db      	lsls	r3, r3, #3
 8011858:	4403      	add	r3, r0
 801185a:	3338      	adds	r3, #56	; 0x38
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	fbb2 f1f3 	udiv	r1, r2, r3
 8011862:	fb01 f303 	mul.w	r3, r1, r3
 8011866:	1ad3      	subs	r3, r2, r3
 8011868:	2b00      	cmp	r3, #0
 801186a:	d110      	bne.n	801188e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801186c:	78fa      	ldrb	r2, [r7, #3]
 801186e:	6879      	ldr	r1, [r7, #4]
 8011870:	4613      	mov	r3, r2
 8011872:	009b      	lsls	r3, r3, #2
 8011874:	4413      	add	r3, r2
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	440b      	add	r3, r1
 801187a:	331c      	adds	r3, #28
 801187c:	2200      	movs	r2, #0
 801187e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011880:	78f9      	ldrb	r1, [r7, #3]
 8011882:	2300      	movs	r3, #0
 8011884:	2200      	movs	r2, #0
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f001 fddf 	bl	801344a <USBD_LL_Transmit>
 801188c:	e003      	b.n	8011896 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2200      	movs	r2, #0
 8011892:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8011896:	2300      	movs	r3, #0
 8011898:	e000      	b.n	801189c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801189a:	2302      	movs	r3, #2
  }
}
 801189c:	4618      	mov	r0, r3
 801189e:	3710      	adds	r7, #16
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b084      	sub	sp, #16
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	460b      	mov	r3, r1
 80118ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118b6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80118b8:	78fb      	ldrb	r3, [r7, #3]
 80118ba:	4619      	mov	r1, r3
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f001 fe0a 	bl	80134d6 <USBD_LL_GetRxDataSize>
 80118c2:	4602      	mov	r2, r0
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d00d      	beq.n	80118f0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118da:	68db      	ldr	r3, [r3, #12]
 80118dc:	68fa      	ldr	r2, [r7, #12]
 80118de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80118e2:	68fa      	ldr	r2, [r7, #12]
 80118e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80118e8:	4611      	mov	r1, r2
 80118ea:	4798      	blx	r3

    return USBD_OK;
 80118ec:	2300      	movs	r3, #0
 80118ee:	e000      	b.n	80118f2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80118f0:	2302      	movs	r3, #2
  }
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3710      	adds	r7, #16
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}

080118fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80118fa:	b580      	push	{r7, lr}
 80118fc:	b084      	sub	sp, #16
 80118fe:	af00      	add	r7, sp, #0
 8011900:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011908:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011910:	2b00      	cmp	r3, #0
 8011912:	d015      	beq.n	8011940 <USBD_CDC_EP0_RxReady+0x46>
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801191a:	2bff      	cmp	r3, #255	; 0xff
 801191c:	d010      	beq.n	8011940 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011924:	689b      	ldr	r3, [r3, #8]
 8011926:	68fa      	ldr	r2, [r7, #12]
 8011928:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 801192c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801192e:	68fa      	ldr	r2, [r7, #12]
 8011930:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011934:	b292      	uxth	r2, r2
 8011936:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	22ff      	movs	r2, #255	; 0xff
 801193c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8011940:	2300      	movs	r3, #0
}
 8011942:	4618      	mov	r0, r3
 8011944:	3710      	adds	r7, #16
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}
	...

0801194c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801194c:	b480      	push	{r7}
 801194e:	b083      	sub	sp, #12
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2243      	movs	r2, #67	; 0x43
 8011958:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801195a:	4b03      	ldr	r3, [pc, #12]	; (8011968 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801195c:	4618      	mov	r0, r3
 801195e:	370c      	adds	r7, #12
 8011960:	46bd      	mov	sp, r7
 8011962:	bc80      	pop	{r7}
 8011964:	4770      	bx	lr
 8011966:	bf00      	nop
 8011968:	200001cc 	.word	0x200001cc

0801196c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2243      	movs	r2, #67	; 0x43
 8011978:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801197a:	4b03      	ldr	r3, [pc, #12]	; (8011988 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801197c:	4618      	mov	r0, r3
 801197e:	370c      	adds	r7, #12
 8011980:	46bd      	mov	sp, r7
 8011982:	bc80      	pop	{r7}
 8011984:	4770      	bx	lr
 8011986:	bf00      	nop
 8011988:	20000188 	.word	0x20000188

0801198c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801198c:	b480      	push	{r7}
 801198e:	b083      	sub	sp, #12
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2243      	movs	r2, #67	; 0x43
 8011998:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801199a:	4b03      	ldr	r3, [pc, #12]	; (80119a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801199c:	4618      	mov	r0, r3
 801199e:	370c      	adds	r7, #12
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bc80      	pop	{r7}
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	20000210 	.word	0x20000210

080119ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80119ac:	b480      	push	{r7}
 80119ae:	b083      	sub	sp, #12
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	220a      	movs	r2, #10
 80119b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80119ba:	4b03      	ldr	r3, [pc, #12]	; (80119c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80119bc:	4618      	mov	r0, r3
 80119be:	370c      	adds	r7, #12
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bc80      	pop	{r7}
 80119c4:	4770      	bx	lr
 80119c6:	bf00      	nop
 80119c8:	20000144 	.word	0x20000144

080119cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80119cc:	b480      	push	{r7}
 80119ce:	b085      	sub	sp, #20
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80119d6:	2302      	movs	r3, #2
 80119d8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d005      	beq.n	80119ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	683a      	ldr	r2, [r7, #0]
 80119e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80119e8:	2300      	movs	r3, #0
 80119ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80119ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3714      	adds	r7, #20
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bc80      	pop	{r7}
 80119f6:	4770      	bx	lr

080119f8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b087      	sub	sp, #28
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	60f8      	str	r0, [r7, #12]
 8011a00:	60b9      	str	r1, [r7, #8]
 8011a02:	4613      	mov	r3, r2
 8011a04:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	68ba      	ldr	r2, [r7, #8]
 8011a12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011a16:	88fa      	ldrh	r2, [r7, #6]
 8011a18:	697b      	ldr	r3, [r7, #20]
 8011a1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8011a1e:	2300      	movs	r3, #0
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	371c      	adds	r7, #28
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bc80      	pop	{r7}
 8011a28:	4770      	bx	lr

08011a2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8011a2a:	b480      	push	{r7}
 8011a2c:	b085      	sub	sp, #20
 8011a2e:	af00      	add	r7, sp, #0
 8011a30:	6078      	str	r0, [r7, #4]
 8011a32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a3a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	683a      	ldr	r2, [r7, #0]
 8011a40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8011a44:	2300      	movs	r3, #0
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3714      	adds	r7, #20
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bc80      	pop	{r7}
 8011a4e:	4770      	bx	lr

08011a50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d01c      	beq.n	8011aa4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d115      	bne.n	8011aa0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	2201      	movs	r2, #1
 8011a78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	2181      	movs	r1, #129	; 0x81
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f001 fcd7 	bl	801344a <USBD_LL_Transmit>

      return USBD_OK;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	e002      	b.n	8011aa6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	e000      	b.n	8011aa6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8011aa4:	2302      	movs	r3, #2
  }
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3710      	adds	r7, #16
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}

08011aae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011aae:	b580      	push	{r7, lr}
 8011ab0:	b084      	sub	sp, #16
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011abc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d017      	beq.n	8011af8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	7c1b      	ldrb	r3, [r3, #16]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d109      	bne.n	8011ae4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ada:	2101      	movs	r1, #1
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f001 fcd7 	bl	8013490 <USBD_LL_PrepareReceive>
 8011ae2:	e007      	b.n	8011af4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011aea:	2340      	movs	r3, #64	; 0x40
 8011aec:	2101      	movs	r1, #1
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f001 fcce 	bl	8013490 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8011af4:	2300      	movs	r3, #0
 8011af6:	e000      	b.n	8011afa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8011af8:	2302      	movs	r3, #2
  }
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3710      	adds	r7, #16
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}

08011b02 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011b02:	b580      	push	{r7, lr}
 8011b04:	b084      	sub	sp, #16
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	60f8      	str	r0, [r7, #12]
 8011b0a:	60b9      	str	r1, [r7, #8]
 8011b0c:	4613      	mov	r3, r2
 8011b0e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d101      	bne.n	8011b1a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011b16:	2302      	movs	r3, #2
 8011b18:	e01a      	b.n	8011b50 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d003      	beq.n	8011b2c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2200      	movs	r2, #0
 8011b28:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d003      	beq.n	8011b3a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	68ba      	ldr	r2, [r7, #8]
 8011b36:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	79fa      	ldrb	r2, [r7, #7]
 8011b46:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8011b48:	68f8      	ldr	r0, [r7, #12]
 8011b4a:	f001 fb3b 	bl	80131c4 <USBD_LL_Init>

  return USBD_OK;
 8011b4e:	2300      	movs	r3, #0
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	3710      	adds	r7, #16
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}

08011b58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b085      	sub	sp, #20
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8011b62:	2300      	movs	r3, #0
 8011b64:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d006      	beq.n	8011b7a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	683a      	ldr	r2, [r7, #0]
 8011b70:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8011b74:	2300      	movs	r3, #0
 8011b76:	73fb      	strb	r3, [r7, #15]
 8011b78:	e001      	b.n	8011b7e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8011b7a:	2302      	movs	r3, #2
 8011b7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3714      	adds	r7, #20
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bc80      	pop	{r7}
 8011b88:	4770      	bx	lr

08011b8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011b8a:	b580      	push	{r7, lr}
 8011b8c:	b082      	sub	sp, #8
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f001 fb70 	bl	8013278 <USBD_LL_Start>

  return USBD_OK;
 8011b98:	2300      	movs	r3, #0
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	3708      	adds	r7, #8
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}

08011ba2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011ba2:	b480      	push	{r7}
 8011ba4:	b083      	sub	sp, #12
 8011ba6:	af00      	add	r7, sp, #0
 8011ba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011baa:	2300      	movs	r3, #0
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	370c      	adds	r7, #12
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bc80      	pop	{r7}
 8011bb4:	4770      	bx	lr

08011bb6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011bb6:	b580      	push	{r7, lr}
 8011bb8:	b084      	sub	sp, #16
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
 8011bbe:	460b      	mov	r3, r1
 8011bc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011bc2:	2302      	movs	r3, #2
 8011bc4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d00c      	beq.n	8011bea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	78fa      	ldrb	r2, [r7, #3]
 8011bda:	4611      	mov	r1, r2
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	4798      	blx	r3
 8011be0:	4603      	mov	r3, r0
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d101      	bne.n	8011bea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8011be6:	2300      	movs	r3, #0
 8011be8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3710      	adds	r7, #16
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	460b      	mov	r3, r1
 8011bfe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c06:	685b      	ldr	r3, [r3, #4]
 8011c08:	78fa      	ldrb	r2, [r7, #3]
 8011c0a:	4611      	mov	r1, r2
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	4798      	blx	r3

  return USBD_OK;
 8011c10:	2300      	movs	r3, #0
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3708      	adds	r7, #8
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}

08011c1a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011c1a:	b580      	push	{r7, lr}
 8011c1c:	b082      	sub	sp, #8
 8011c1e:	af00      	add	r7, sp, #0
 8011c20:	6078      	str	r0, [r7, #4]
 8011c22:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011c2a:	6839      	ldr	r1, [r7, #0]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f000 fed8 	bl	80129e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2201      	movs	r2, #1
 8011c36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011c40:	461a      	mov	r2, r3
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011c4e:	f003 031f 	and.w	r3, r3, #31
 8011c52:	2b02      	cmp	r3, #2
 8011c54:	d016      	beq.n	8011c84 <USBD_LL_SetupStage+0x6a>
 8011c56:	2b02      	cmp	r3, #2
 8011c58:	d81c      	bhi.n	8011c94 <USBD_LL_SetupStage+0x7a>
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d002      	beq.n	8011c64 <USBD_LL_SetupStage+0x4a>
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	d008      	beq.n	8011c74 <USBD_LL_SetupStage+0x5a>
 8011c62:	e017      	b.n	8011c94 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f000 f9cb 	bl	8012008 <USBD_StdDevReq>
      break;
 8011c72:	e01a      	b.n	8011caa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f000 fa2d 	bl	80120dc <USBD_StdItfReq>
      break;
 8011c82:	e012      	b.n	8011caa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f000 fa6d 	bl	801216c <USBD_StdEPReq>
      break;
 8011c92:	e00a      	b.n	8011caa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011c9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f001 fb48 	bl	8013338 <USBD_LL_StallEP>
      break;
 8011ca8:	bf00      	nop
  }

  return USBD_OK;
 8011caa:	2300      	movs	r3, #0
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3708      	adds	r7, #8
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b086      	sub	sp, #24
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	607a      	str	r2, [r7, #4]
 8011cc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011cc2:	7afb      	ldrb	r3, [r7, #11]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d14b      	bne.n	8011d60 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011cce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011cd6:	2b03      	cmp	r3, #3
 8011cd8:	d134      	bne.n	8011d44 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	68da      	ldr	r2, [r3, #12]
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	691b      	ldr	r3, [r3, #16]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d919      	bls.n	8011d1a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	68da      	ldr	r2, [r3, #12]
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	691b      	ldr	r3, [r3, #16]
 8011cee:	1ad2      	subs	r2, r2, r3
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	68da      	ldr	r2, [r3, #12]
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d203      	bcs.n	8011d08 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	e002      	b.n	8011d0e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011d08:	697b      	ldr	r3, [r7, #20]
 8011d0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	461a      	mov	r2, r3
 8011d10:	6879      	ldr	r1, [r7, #4]
 8011d12:	68f8      	ldr	r0, [r7, #12]
 8011d14:	f000 ff57 	bl	8012bc6 <USBD_CtlContinueRx>
 8011d18:	e038      	b.n	8011d8c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d20:	691b      	ldr	r3, [r3, #16]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d00a      	beq.n	8011d3c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011d2c:	2b03      	cmp	r3, #3
 8011d2e:	d105      	bne.n	8011d3c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d36:	691b      	ldr	r3, [r3, #16]
 8011d38:	68f8      	ldr	r0, [r7, #12]
 8011d3a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8011d3c:	68f8      	ldr	r0, [r7, #12]
 8011d3e:	f000 ff54 	bl	8012bea <USBD_CtlSendStatus>
 8011d42:	e023      	b.n	8011d8c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011d4a:	2b05      	cmp	r3, #5
 8011d4c:	d11e      	bne.n	8011d8c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2200      	movs	r2, #0
 8011d52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8011d56:	2100      	movs	r1, #0
 8011d58:	68f8      	ldr	r0, [r7, #12]
 8011d5a:	f001 faed 	bl	8013338 <USBD_LL_StallEP>
 8011d5e:	e015      	b.n	8011d8c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d66:	699b      	ldr	r3, [r3, #24]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d00d      	beq.n	8011d88 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011d72:	2b03      	cmp	r3, #3
 8011d74:	d108      	bne.n	8011d88 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d7c:	699b      	ldr	r3, [r3, #24]
 8011d7e:	7afa      	ldrb	r2, [r7, #11]
 8011d80:	4611      	mov	r1, r2
 8011d82:	68f8      	ldr	r0, [r7, #12]
 8011d84:	4798      	blx	r3
 8011d86:	e001      	b.n	8011d8c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011d88:	2302      	movs	r3, #2
 8011d8a:	e000      	b.n	8011d8e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8011d8c:	2300      	movs	r3, #0
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3718      	adds	r7, #24
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}

08011d96 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b086      	sub	sp, #24
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	60f8      	str	r0, [r7, #12]
 8011d9e:	460b      	mov	r3, r1
 8011da0:	607a      	str	r2, [r7, #4]
 8011da2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011da4:	7afb      	ldrb	r3, [r7, #11]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d17f      	bne.n	8011eaa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	3314      	adds	r3, #20
 8011dae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011db6:	2b02      	cmp	r3, #2
 8011db8:	d15c      	bne.n	8011e74 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	68da      	ldr	r2, [r3, #12]
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	691b      	ldr	r3, [r3, #16]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d915      	bls.n	8011df2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	68da      	ldr	r2, [r3, #12]
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	691b      	ldr	r3, [r3, #16]
 8011dce:	1ad2      	subs	r2, r2, r3
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	68db      	ldr	r3, [r3, #12]
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	461a      	mov	r2, r3
 8011ddc:	6879      	ldr	r1, [r7, #4]
 8011dde:	68f8      	ldr	r0, [r7, #12]
 8011de0:	f000 fec1 	bl	8012b66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011de4:	2300      	movs	r3, #0
 8011de6:	2200      	movs	r2, #0
 8011de8:	2100      	movs	r1, #0
 8011dea:	68f8      	ldr	r0, [r7, #12]
 8011dec:	f001 fb50 	bl	8013490 <USBD_LL_PrepareReceive>
 8011df0:	e04e      	b.n	8011e90 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011df2:	697b      	ldr	r3, [r7, #20]
 8011df4:	689b      	ldr	r3, [r3, #8]
 8011df6:	697a      	ldr	r2, [r7, #20]
 8011df8:	6912      	ldr	r2, [r2, #16]
 8011dfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8011dfe:	fb01 f202 	mul.w	r2, r1, r2
 8011e02:	1a9b      	subs	r3, r3, r2
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d11c      	bne.n	8011e42 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	689a      	ldr	r2, [r3, #8]
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d316      	bcc.n	8011e42 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	689a      	ldr	r2, [r3, #8]
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d20f      	bcs.n	8011e42 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011e22:	2200      	movs	r2, #0
 8011e24:	2100      	movs	r1, #0
 8011e26:	68f8      	ldr	r0, [r7, #12]
 8011e28:	f000 fe9d 	bl	8012b66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e34:	2300      	movs	r3, #0
 8011e36:	2200      	movs	r2, #0
 8011e38:	2100      	movs	r1, #0
 8011e3a:	68f8      	ldr	r0, [r7, #12]
 8011e3c:	f001 fb28 	bl	8013490 <USBD_LL_PrepareReceive>
 8011e40:	e026      	b.n	8011e90 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e48:	68db      	ldr	r3, [r3, #12]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d00a      	beq.n	8011e64 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011e54:	2b03      	cmp	r3, #3
 8011e56:	d105      	bne.n	8011e64 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e5e:	68db      	ldr	r3, [r3, #12]
 8011e60:	68f8      	ldr	r0, [r7, #12]
 8011e62:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8011e64:	2180      	movs	r1, #128	; 0x80
 8011e66:	68f8      	ldr	r0, [r7, #12]
 8011e68:	f001 fa66 	bl	8013338 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8011e6c:	68f8      	ldr	r0, [r7, #12]
 8011e6e:	f000 fecf 	bl	8012c10 <USBD_CtlReceiveStatus>
 8011e72:	e00d      	b.n	8011e90 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011e7a:	2b04      	cmp	r3, #4
 8011e7c:	d004      	beq.n	8011e88 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d103      	bne.n	8011e90 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8011e88:	2180      	movs	r1, #128	; 0x80
 8011e8a:	68f8      	ldr	r0, [r7, #12]
 8011e8c:	f001 fa54 	bl	8013338 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011e96:	2b01      	cmp	r3, #1
 8011e98:	d11d      	bne.n	8011ed6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8011e9a:	68f8      	ldr	r0, [r7, #12]
 8011e9c:	f7ff fe81 	bl	8011ba2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011ea8:	e015      	b.n	8011ed6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011eb0:	695b      	ldr	r3, [r3, #20]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d00d      	beq.n	8011ed2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011ebc:	2b03      	cmp	r3, #3
 8011ebe:	d108      	bne.n	8011ed2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ec6:	695b      	ldr	r3, [r3, #20]
 8011ec8:	7afa      	ldrb	r2, [r7, #11]
 8011eca:	4611      	mov	r1, r2
 8011ecc:	68f8      	ldr	r0, [r7, #12]
 8011ece:	4798      	blx	r3
 8011ed0:	e001      	b.n	8011ed6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011ed2:	2302      	movs	r3, #2
 8011ed4:	e000      	b.n	8011ed8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8011ed6:	2300      	movs	r3, #0
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3718      	adds	r7, #24
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ee8:	2340      	movs	r3, #64	; 0x40
 8011eea:	2200      	movs	r2, #0
 8011eec:	2100      	movs	r1, #0
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f001 f9dd 	bl	80132ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2240      	movs	r2, #64	; 0x40
 8011f00:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f04:	2340      	movs	r3, #64	; 0x40
 8011f06:	2200      	movs	r2, #0
 8011f08:	2180      	movs	r1, #128	; 0x80
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f001 f9cf 	bl	80132ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2201      	movs	r2, #1
 8011f14:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2240      	movs	r2, #64	; 0x40
 8011f1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2201      	movs	r2, #1
 8011f20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2200      	movs	r2, #0
 8011f28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2200      	movs	r2, #0
 8011f30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2200      	movs	r2, #0
 8011f36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d009      	beq.n	8011f58 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	687a      	ldr	r2, [r7, #4]
 8011f4e:	6852      	ldr	r2, [r2, #4]
 8011f50:	b2d2      	uxtb	r2, r2
 8011f52:	4611      	mov	r1, r2
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	4798      	blx	r3
  }

  return USBD_OK;
 8011f58:	2300      	movs	r3, #0
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3708      	adds	r7, #8
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011f62:	b480      	push	{r7}
 8011f64:	b083      	sub	sp, #12
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6078      	str	r0, [r7, #4]
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	78fa      	ldrb	r2, [r7, #3]
 8011f72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011f74:	2300      	movs	r3, #0
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	370c      	adds	r7, #12
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bc80      	pop	{r7}
 8011f7e:	4770      	bx	lr

08011f80 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b083      	sub	sp, #12
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2204      	movs	r2, #4
 8011f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011f9c:	2300      	movs	r3, #0
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	370c      	adds	r7, #12
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bc80      	pop	{r7}
 8011fa6:	4770      	bx	lr

08011fa8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b083      	sub	sp, #12
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fb6:	2b04      	cmp	r3, #4
 8011fb8:	d105      	bne.n	8011fc6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011fc6:	2300      	movs	r3, #0
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	370c      	adds	r7, #12
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bc80      	pop	{r7}
 8011fd0:	4770      	bx	lr

08011fd2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011fd2:	b580      	push	{r7, lr}
 8011fd4:	b082      	sub	sp, #8
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fe0:	2b03      	cmp	r3, #3
 8011fe2:	d10b      	bne.n	8011ffc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fea:	69db      	ldr	r3, [r3, #28]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d005      	beq.n	8011ffc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ff6:	69db      	ldr	r3, [r3, #28]
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011ffc:	2300      	movs	r3, #0
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3708      	adds	r7, #8
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
	...

08012008 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b084      	sub	sp, #16
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012012:	2300      	movs	r3, #0
 8012014:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801201e:	2b40      	cmp	r3, #64	; 0x40
 8012020:	d005      	beq.n	801202e <USBD_StdDevReq+0x26>
 8012022:	2b40      	cmp	r3, #64	; 0x40
 8012024:	d84f      	bhi.n	80120c6 <USBD_StdDevReq+0xbe>
 8012026:	2b00      	cmp	r3, #0
 8012028:	d009      	beq.n	801203e <USBD_StdDevReq+0x36>
 801202a:	2b20      	cmp	r3, #32
 801202c:	d14b      	bne.n	80120c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012034:	689b      	ldr	r3, [r3, #8]
 8012036:	6839      	ldr	r1, [r7, #0]
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	4798      	blx	r3
      break;
 801203c:	e048      	b.n	80120d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	785b      	ldrb	r3, [r3, #1]
 8012042:	2b09      	cmp	r3, #9
 8012044:	d839      	bhi.n	80120ba <USBD_StdDevReq+0xb2>
 8012046:	a201      	add	r2, pc, #4	; (adr r2, 801204c <USBD_StdDevReq+0x44>)
 8012048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801204c:	0801209d 	.word	0x0801209d
 8012050:	080120b1 	.word	0x080120b1
 8012054:	080120bb 	.word	0x080120bb
 8012058:	080120a7 	.word	0x080120a7
 801205c:	080120bb 	.word	0x080120bb
 8012060:	0801207f 	.word	0x0801207f
 8012064:	08012075 	.word	0x08012075
 8012068:	080120bb 	.word	0x080120bb
 801206c:	08012093 	.word	0x08012093
 8012070:	08012089 	.word	0x08012089
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012074:	6839      	ldr	r1, [r7, #0]
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f000 f9dc 	bl	8012434 <USBD_GetDescriptor>
          break;
 801207c:	e022      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801207e:	6839      	ldr	r1, [r7, #0]
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f000 fb3f 	bl	8012704 <USBD_SetAddress>
          break;
 8012086:	e01d      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8012088:	6839      	ldr	r1, [r7, #0]
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f000 fb7e 	bl	801278c <USBD_SetConfig>
          break;
 8012090:	e018      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012092:	6839      	ldr	r1, [r7, #0]
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f000 fc07 	bl	80128a8 <USBD_GetConfig>
          break;
 801209a:	e013      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801209c:	6839      	ldr	r1, [r7, #0]
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f000 fc37 	bl	8012912 <USBD_GetStatus>
          break;
 80120a4:	e00e      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80120a6:	6839      	ldr	r1, [r7, #0]
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f000 fc65 	bl	8012978 <USBD_SetFeature>
          break;
 80120ae:	e009      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80120b0:	6839      	ldr	r1, [r7, #0]
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f000 fc74 	bl	80129a0 <USBD_ClrFeature>
          break;
 80120b8:	e004      	b.n	80120c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80120ba:	6839      	ldr	r1, [r7, #0]
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f000 fccc 	bl	8012a5a <USBD_CtlError>
          break;
 80120c2:	bf00      	nop
      }
      break;
 80120c4:	e004      	b.n	80120d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80120c6:	6839      	ldr	r1, [r7, #0]
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 fcc6 	bl	8012a5a <USBD_CtlError>
      break;
 80120ce:	bf00      	nop
  }

  return ret;
 80120d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3710      	adds	r7, #16
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop

080120dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b084      	sub	sp, #16
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80120e6:	2300      	movs	r3, #0
 80120e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	781b      	ldrb	r3, [r3, #0]
 80120ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80120f2:	2b40      	cmp	r3, #64	; 0x40
 80120f4:	d005      	beq.n	8012102 <USBD_StdItfReq+0x26>
 80120f6:	2b40      	cmp	r3, #64	; 0x40
 80120f8:	d82e      	bhi.n	8012158 <USBD_StdItfReq+0x7c>
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d001      	beq.n	8012102 <USBD_StdItfReq+0x26>
 80120fe:	2b20      	cmp	r3, #32
 8012100:	d12a      	bne.n	8012158 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012108:	3b01      	subs	r3, #1
 801210a:	2b02      	cmp	r3, #2
 801210c:	d81d      	bhi.n	801214a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	889b      	ldrh	r3, [r3, #4]
 8012112:	b2db      	uxtb	r3, r3
 8012114:	2b01      	cmp	r3, #1
 8012116:	d813      	bhi.n	8012140 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801211e:	689b      	ldr	r3, [r3, #8]
 8012120:	6839      	ldr	r1, [r7, #0]
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	4798      	blx	r3
 8012126:	4603      	mov	r3, r0
 8012128:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	88db      	ldrh	r3, [r3, #6]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d110      	bne.n	8012154 <USBD_StdItfReq+0x78>
 8012132:	7bfb      	ldrb	r3, [r7, #15]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d10d      	bne.n	8012154 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f000 fd56 	bl	8012bea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801213e:	e009      	b.n	8012154 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8012140:	6839      	ldr	r1, [r7, #0]
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f000 fc89 	bl	8012a5a <USBD_CtlError>
          break;
 8012148:	e004      	b.n	8012154 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 801214a:	6839      	ldr	r1, [r7, #0]
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f000 fc84 	bl	8012a5a <USBD_CtlError>
          break;
 8012152:	e000      	b.n	8012156 <USBD_StdItfReq+0x7a>
          break;
 8012154:	bf00      	nop
      }
      break;
 8012156:	e004      	b.n	8012162 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8012158:	6839      	ldr	r1, [r7, #0]
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f000 fc7d 	bl	8012a5a <USBD_CtlError>
      break;
 8012160:	bf00      	nop
  }

  return USBD_OK;
 8012162:	2300      	movs	r3, #0
}
 8012164:	4618      	mov	r0, r3
 8012166:	3710      	adds	r7, #16
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012176:	2300      	movs	r3, #0
 8012178:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	889b      	ldrh	r3, [r3, #4]
 801217e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012188:	2b40      	cmp	r3, #64	; 0x40
 801218a:	d007      	beq.n	801219c <USBD_StdEPReq+0x30>
 801218c:	2b40      	cmp	r3, #64	; 0x40
 801218e:	f200 8146 	bhi.w	801241e <USBD_StdEPReq+0x2b2>
 8012192:	2b00      	cmp	r3, #0
 8012194:	d00a      	beq.n	80121ac <USBD_StdEPReq+0x40>
 8012196:	2b20      	cmp	r3, #32
 8012198:	f040 8141 	bne.w	801241e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121a2:	689b      	ldr	r3, [r3, #8]
 80121a4:	6839      	ldr	r1, [r7, #0]
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	4798      	blx	r3
      break;
 80121aa:	e13d      	b.n	8012428 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121b4:	2b20      	cmp	r3, #32
 80121b6:	d10a      	bne.n	80121ce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121be:	689b      	ldr	r3, [r3, #8]
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	4798      	blx	r3
 80121c6:	4603      	mov	r3, r0
 80121c8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80121ca:	7bfb      	ldrb	r3, [r7, #15]
 80121cc:	e12d      	b.n	801242a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	785b      	ldrb	r3, [r3, #1]
 80121d2:	2b03      	cmp	r3, #3
 80121d4:	d007      	beq.n	80121e6 <USBD_StdEPReq+0x7a>
 80121d6:	2b03      	cmp	r3, #3
 80121d8:	f300 811b 	bgt.w	8012412 <USBD_StdEPReq+0x2a6>
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d072      	beq.n	80122c6 <USBD_StdEPReq+0x15a>
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	d03a      	beq.n	801225a <USBD_StdEPReq+0xee>
 80121e4:	e115      	b.n	8012412 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121ec:	2b02      	cmp	r3, #2
 80121ee:	d002      	beq.n	80121f6 <USBD_StdEPReq+0x8a>
 80121f0:	2b03      	cmp	r3, #3
 80121f2:	d015      	beq.n	8012220 <USBD_StdEPReq+0xb4>
 80121f4:	e02b      	b.n	801224e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80121f6:	7bbb      	ldrb	r3, [r7, #14]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d00c      	beq.n	8012216 <USBD_StdEPReq+0xaa>
 80121fc:	7bbb      	ldrb	r3, [r7, #14]
 80121fe:	2b80      	cmp	r3, #128	; 0x80
 8012200:	d009      	beq.n	8012216 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012202:	7bbb      	ldrb	r3, [r7, #14]
 8012204:	4619      	mov	r1, r3
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f001 f896 	bl	8013338 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801220c:	2180      	movs	r1, #128	; 0x80
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f001 f892 	bl	8013338 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012214:	e020      	b.n	8012258 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8012216:	6839      	ldr	r1, [r7, #0]
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 fc1e 	bl	8012a5a <USBD_CtlError>
              break;
 801221e:	e01b      	b.n	8012258 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	885b      	ldrh	r3, [r3, #2]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d10e      	bne.n	8012246 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8012228:	7bbb      	ldrb	r3, [r7, #14]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d00b      	beq.n	8012246 <USBD_StdEPReq+0xda>
 801222e:	7bbb      	ldrb	r3, [r7, #14]
 8012230:	2b80      	cmp	r3, #128	; 0x80
 8012232:	d008      	beq.n	8012246 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	88db      	ldrh	r3, [r3, #6]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d104      	bne.n	8012246 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801223c:	7bbb      	ldrb	r3, [r7, #14]
 801223e:	4619      	mov	r1, r3
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f001 f879 	bl	8013338 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 fccf 	bl	8012bea <USBD_CtlSendStatus>

              break;
 801224c:	e004      	b.n	8012258 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 801224e:	6839      	ldr	r1, [r7, #0]
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 fc02 	bl	8012a5a <USBD_CtlError>
              break;
 8012256:	bf00      	nop
          }
          break;
 8012258:	e0e0      	b.n	801241c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012260:	2b02      	cmp	r3, #2
 8012262:	d002      	beq.n	801226a <USBD_StdEPReq+0xfe>
 8012264:	2b03      	cmp	r3, #3
 8012266:	d015      	beq.n	8012294 <USBD_StdEPReq+0x128>
 8012268:	e026      	b.n	80122b8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801226a:	7bbb      	ldrb	r3, [r7, #14]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d00c      	beq.n	801228a <USBD_StdEPReq+0x11e>
 8012270:	7bbb      	ldrb	r3, [r7, #14]
 8012272:	2b80      	cmp	r3, #128	; 0x80
 8012274:	d009      	beq.n	801228a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012276:	7bbb      	ldrb	r3, [r7, #14]
 8012278:	4619      	mov	r1, r3
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f001 f85c 	bl	8013338 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8012280:	2180      	movs	r1, #128	; 0x80
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f001 f858 	bl	8013338 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012288:	e01c      	b.n	80122c4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 801228a:	6839      	ldr	r1, [r7, #0]
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f000 fbe4 	bl	8012a5a <USBD_CtlError>
              break;
 8012292:	e017      	b.n	80122c4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	885b      	ldrh	r3, [r3, #2]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d112      	bne.n	80122c2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801229c:	7bbb      	ldrb	r3, [r7, #14]
 801229e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d004      	beq.n	80122b0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80122a6:	7bbb      	ldrb	r3, [r7, #14]
 80122a8:	4619      	mov	r1, r3
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f001 f863 	bl	8013376 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 fc9a 	bl	8012bea <USBD_CtlSendStatus>
              }
              break;
 80122b6:	e004      	b.n	80122c2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80122b8:	6839      	ldr	r1, [r7, #0]
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 fbcd 	bl	8012a5a <USBD_CtlError>
              break;
 80122c0:	e000      	b.n	80122c4 <USBD_StdEPReq+0x158>
              break;
 80122c2:	bf00      	nop
          }
          break;
 80122c4:	e0aa      	b.n	801241c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	d002      	beq.n	80122d6 <USBD_StdEPReq+0x16a>
 80122d0:	2b03      	cmp	r3, #3
 80122d2:	d032      	beq.n	801233a <USBD_StdEPReq+0x1ce>
 80122d4:	e097      	b.n	8012406 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80122d6:	7bbb      	ldrb	r3, [r7, #14]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d007      	beq.n	80122ec <USBD_StdEPReq+0x180>
 80122dc:	7bbb      	ldrb	r3, [r7, #14]
 80122de:	2b80      	cmp	r3, #128	; 0x80
 80122e0:	d004      	beq.n	80122ec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80122e2:	6839      	ldr	r1, [r7, #0]
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f000 fbb8 	bl	8012a5a <USBD_CtlError>
                break;
 80122ea:	e091      	b.n	8012410 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80122ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	da0b      	bge.n	801230c <USBD_StdEPReq+0x1a0>
 80122f4:	7bbb      	ldrb	r3, [r7, #14]
 80122f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80122fa:	4613      	mov	r3, r2
 80122fc:	009b      	lsls	r3, r3, #2
 80122fe:	4413      	add	r3, r2
 8012300:	009b      	lsls	r3, r3, #2
 8012302:	3310      	adds	r3, #16
 8012304:	687a      	ldr	r2, [r7, #4]
 8012306:	4413      	add	r3, r2
 8012308:	3304      	adds	r3, #4
 801230a:	e00b      	b.n	8012324 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801230c:	7bbb      	ldrb	r3, [r7, #14]
 801230e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012312:	4613      	mov	r3, r2
 8012314:	009b      	lsls	r3, r3, #2
 8012316:	4413      	add	r3, r2
 8012318:	009b      	lsls	r3, r3, #2
 801231a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	4413      	add	r3, r2
 8012322:	3304      	adds	r3, #4
 8012324:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	2200      	movs	r2, #0
 801232a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	2202      	movs	r2, #2
 8012330:	4619      	mov	r1, r3
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f000 fbfb 	bl	8012b2e <USBD_CtlSendData>
              break;
 8012338:	e06a      	b.n	8012410 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801233a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801233e:	2b00      	cmp	r3, #0
 8012340:	da11      	bge.n	8012366 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012342:	7bbb      	ldrb	r3, [r7, #14]
 8012344:	f003 020f 	and.w	r2, r3, #15
 8012348:	6879      	ldr	r1, [r7, #4]
 801234a:	4613      	mov	r3, r2
 801234c:	009b      	lsls	r3, r3, #2
 801234e:	4413      	add	r3, r2
 8012350:	009b      	lsls	r3, r3, #2
 8012352:	440b      	add	r3, r1
 8012354:	3318      	adds	r3, #24
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d117      	bne.n	801238c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 801235c:	6839      	ldr	r1, [r7, #0]
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f000 fb7b 	bl	8012a5a <USBD_CtlError>
                  break;
 8012364:	e054      	b.n	8012410 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012366:	7bbb      	ldrb	r3, [r7, #14]
 8012368:	f003 020f 	and.w	r2, r3, #15
 801236c:	6879      	ldr	r1, [r7, #4]
 801236e:	4613      	mov	r3, r2
 8012370:	009b      	lsls	r3, r3, #2
 8012372:	4413      	add	r3, r2
 8012374:	009b      	lsls	r3, r3, #2
 8012376:	440b      	add	r3, r1
 8012378:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d104      	bne.n	801238c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8012382:	6839      	ldr	r1, [r7, #0]
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f000 fb68 	bl	8012a5a <USBD_CtlError>
                  break;
 801238a:	e041      	b.n	8012410 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801238c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012390:	2b00      	cmp	r3, #0
 8012392:	da0b      	bge.n	80123ac <USBD_StdEPReq+0x240>
 8012394:	7bbb      	ldrb	r3, [r7, #14]
 8012396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801239a:	4613      	mov	r3, r2
 801239c:	009b      	lsls	r3, r3, #2
 801239e:	4413      	add	r3, r2
 80123a0:	009b      	lsls	r3, r3, #2
 80123a2:	3310      	adds	r3, #16
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	4413      	add	r3, r2
 80123a8:	3304      	adds	r3, #4
 80123aa:	e00b      	b.n	80123c4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80123ac:	7bbb      	ldrb	r3, [r7, #14]
 80123ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80123b2:	4613      	mov	r3, r2
 80123b4:	009b      	lsls	r3, r3, #2
 80123b6:	4413      	add	r3, r2
 80123b8:	009b      	lsls	r3, r3, #2
 80123ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80123be:	687a      	ldr	r2, [r7, #4]
 80123c0:	4413      	add	r3, r2
 80123c2:	3304      	adds	r3, #4
 80123c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80123c6:	7bbb      	ldrb	r3, [r7, #14]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d002      	beq.n	80123d2 <USBD_StdEPReq+0x266>
 80123cc:	7bbb      	ldrb	r3, [r7, #14]
 80123ce:	2b80      	cmp	r3, #128	; 0x80
 80123d0:	d103      	bne.n	80123da <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	2200      	movs	r2, #0
 80123d6:	601a      	str	r2, [r3, #0]
 80123d8:	e00e      	b.n	80123f8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80123da:	7bbb      	ldrb	r3, [r7, #14]
 80123dc:	4619      	mov	r1, r3
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f000 ffe8 	bl	80133b4 <USBD_LL_IsStallEP>
 80123e4:	4603      	mov	r3, r0
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d003      	beq.n	80123f2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	2201      	movs	r2, #1
 80123ee:	601a      	str	r2, [r3, #0]
 80123f0:	e002      	b.n	80123f8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	2200      	movs	r2, #0
 80123f6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	2202      	movs	r2, #2
 80123fc:	4619      	mov	r1, r3
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 fb95 	bl	8012b2e <USBD_CtlSendData>
              break;
 8012404:	e004      	b.n	8012410 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8012406:	6839      	ldr	r1, [r7, #0]
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 fb26 	bl	8012a5a <USBD_CtlError>
              break;
 801240e:	bf00      	nop
          }
          break;
 8012410:	e004      	b.n	801241c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8012412:	6839      	ldr	r1, [r7, #0]
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 fb20 	bl	8012a5a <USBD_CtlError>
          break;
 801241a:	bf00      	nop
      }
      break;
 801241c:	e004      	b.n	8012428 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 801241e:	6839      	ldr	r1, [r7, #0]
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f000 fb1a 	bl	8012a5a <USBD_CtlError>
      break;
 8012426:	bf00      	nop
  }

  return ret;
 8012428:	7bfb      	ldrb	r3, [r7, #15]
}
 801242a:	4618      	mov	r0, r3
 801242c:	3710      	adds	r7, #16
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}
	...

08012434 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801243e:	2300      	movs	r3, #0
 8012440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012442:	2300      	movs	r3, #0
 8012444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012446:	2300      	movs	r3, #0
 8012448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	885b      	ldrh	r3, [r3, #2]
 801244e:	0a1b      	lsrs	r3, r3, #8
 8012450:	b29b      	uxth	r3, r3
 8012452:	3b01      	subs	r3, #1
 8012454:	2b06      	cmp	r3, #6
 8012456:	f200 8128 	bhi.w	80126aa <USBD_GetDescriptor+0x276>
 801245a:	a201      	add	r2, pc, #4	; (adr r2, 8012460 <USBD_GetDescriptor+0x2c>)
 801245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012460:	0801247d 	.word	0x0801247d
 8012464:	08012495 	.word	0x08012495
 8012468:	080124d5 	.word	0x080124d5
 801246c:	080126ab 	.word	0x080126ab
 8012470:	080126ab 	.word	0x080126ab
 8012474:	0801264b 	.word	0x0801264b
 8012478:	08012677 	.word	0x08012677
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	7c12      	ldrb	r2, [r2, #16]
 8012488:	f107 0108 	add.w	r1, r7, #8
 801248c:	4610      	mov	r0, r2
 801248e:	4798      	blx	r3
 8012490:	60f8      	str	r0, [r7, #12]
      break;
 8012492:	e112      	b.n	80126ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	7c1b      	ldrb	r3, [r3, #16]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d10d      	bne.n	80124b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124a4:	f107 0208 	add.w	r2, r7, #8
 80124a8:	4610      	mov	r0, r2
 80124aa:	4798      	blx	r3
 80124ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	3301      	adds	r3, #1
 80124b2:	2202      	movs	r2, #2
 80124b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80124b6:	e100      	b.n	80126ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124c0:	f107 0208 	add.w	r2, r7, #8
 80124c4:	4610      	mov	r0, r2
 80124c6:	4798      	blx	r3
 80124c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	3301      	adds	r3, #1
 80124ce:	2202      	movs	r2, #2
 80124d0:	701a      	strb	r2, [r3, #0]
      break;
 80124d2:	e0f2      	b.n	80126ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	885b      	ldrh	r3, [r3, #2]
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	2b05      	cmp	r3, #5
 80124dc:	f200 80ac 	bhi.w	8012638 <USBD_GetDescriptor+0x204>
 80124e0:	a201      	add	r2, pc, #4	; (adr r2, 80124e8 <USBD_GetDescriptor+0xb4>)
 80124e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124e6:	bf00      	nop
 80124e8:	08012501 	.word	0x08012501
 80124ec:	08012535 	.word	0x08012535
 80124f0:	08012569 	.word	0x08012569
 80124f4:	0801259d 	.word	0x0801259d
 80124f8:	080125d1 	.word	0x080125d1
 80124fc:	08012605 	.word	0x08012605
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d00b      	beq.n	8012524 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012512:	685b      	ldr	r3, [r3, #4]
 8012514:	687a      	ldr	r2, [r7, #4]
 8012516:	7c12      	ldrb	r2, [r2, #16]
 8012518:	f107 0108 	add.w	r1, r7, #8
 801251c:	4610      	mov	r0, r2
 801251e:	4798      	blx	r3
 8012520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012522:	e091      	b.n	8012648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012524:	6839      	ldr	r1, [r7, #0]
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f000 fa97 	bl	8012a5a <USBD_CtlError>
            err++;
 801252c:	7afb      	ldrb	r3, [r7, #11]
 801252e:	3301      	adds	r3, #1
 8012530:	72fb      	strb	r3, [r7, #11]
          break;
 8012532:	e089      	b.n	8012648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801253a:	689b      	ldr	r3, [r3, #8]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d00b      	beq.n	8012558 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012546:	689b      	ldr	r3, [r3, #8]
 8012548:	687a      	ldr	r2, [r7, #4]
 801254a:	7c12      	ldrb	r2, [r2, #16]
 801254c:	f107 0108 	add.w	r1, r7, #8
 8012550:	4610      	mov	r0, r2
 8012552:	4798      	blx	r3
 8012554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012556:	e077      	b.n	8012648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012558:	6839      	ldr	r1, [r7, #0]
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f000 fa7d 	bl	8012a5a <USBD_CtlError>
            err++;
 8012560:	7afb      	ldrb	r3, [r7, #11]
 8012562:	3301      	adds	r3, #1
 8012564:	72fb      	strb	r3, [r7, #11]
          break;
 8012566:	e06f      	b.n	8012648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d00b      	beq.n	801258c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801257a:	68db      	ldr	r3, [r3, #12]
 801257c:	687a      	ldr	r2, [r7, #4]
 801257e:	7c12      	ldrb	r2, [r2, #16]
 8012580:	f107 0108 	add.w	r1, r7, #8
 8012584:	4610      	mov	r0, r2
 8012586:	4798      	blx	r3
 8012588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801258a:	e05d      	b.n	8012648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801258c:	6839      	ldr	r1, [r7, #0]
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 fa63 	bl	8012a5a <USBD_CtlError>
            err++;
 8012594:	7afb      	ldrb	r3, [r7, #11]
 8012596:	3301      	adds	r3, #1
 8012598:	72fb      	strb	r3, [r7, #11]
          break;
 801259a:	e055      	b.n	8012648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80125a2:	691b      	ldr	r3, [r3, #16]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00b      	beq.n	80125c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80125ae:	691b      	ldr	r3, [r3, #16]
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	7c12      	ldrb	r2, [r2, #16]
 80125b4:	f107 0108 	add.w	r1, r7, #8
 80125b8:	4610      	mov	r0, r2
 80125ba:	4798      	blx	r3
 80125bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80125be:	e043      	b.n	8012648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80125c0:	6839      	ldr	r1, [r7, #0]
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f000 fa49 	bl	8012a5a <USBD_CtlError>
            err++;
 80125c8:	7afb      	ldrb	r3, [r7, #11]
 80125ca:	3301      	adds	r3, #1
 80125cc:	72fb      	strb	r3, [r7, #11]
          break;
 80125ce:	e03b      	b.n	8012648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80125d6:	695b      	ldr	r3, [r3, #20]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d00b      	beq.n	80125f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80125e2:	695b      	ldr	r3, [r3, #20]
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	7c12      	ldrb	r2, [r2, #16]
 80125e8:	f107 0108 	add.w	r1, r7, #8
 80125ec:	4610      	mov	r0, r2
 80125ee:	4798      	blx	r3
 80125f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80125f2:	e029      	b.n	8012648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80125f4:	6839      	ldr	r1, [r7, #0]
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f000 fa2f 	bl	8012a5a <USBD_CtlError>
            err++;
 80125fc:	7afb      	ldrb	r3, [r7, #11]
 80125fe:	3301      	adds	r3, #1
 8012600:	72fb      	strb	r3, [r7, #11]
          break;
 8012602:	e021      	b.n	8012648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801260a:	699b      	ldr	r3, [r3, #24]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d00b      	beq.n	8012628 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012616:	699b      	ldr	r3, [r3, #24]
 8012618:	687a      	ldr	r2, [r7, #4]
 801261a:	7c12      	ldrb	r2, [r2, #16]
 801261c:	f107 0108 	add.w	r1, r7, #8
 8012620:	4610      	mov	r0, r2
 8012622:	4798      	blx	r3
 8012624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012626:	e00f      	b.n	8012648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012628:	6839      	ldr	r1, [r7, #0]
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 fa15 	bl	8012a5a <USBD_CtlError>
            err++;
 8012630:	7afb      	ldrb	r3, [r7, #11]
 8012632:	3301      	adds	r3, #1
 8012634:	72fb      	strb	r3, [r7, #11]
          break;
 8012636:	e007      	b.n	8012648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8012638:	6839      	ldr	r1, [r7, #0]
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f000 fa0d 	bl	8012a5a <USBD_CtlError>
          err++;
 8012640:	7afb      	ldrb	r3, [r7, #11]
 8012642:	3301      	adds	r3, #1
 8012644:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8012646:	e038      	b.n	80126ba <USBD_GetDescriptor+0x286>
 8012648:	e037      	b.n	80126ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	7c1b      	ldrb	r3, [r3, #16]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d109      	bne.n	8012666 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801265a:	f107 0208 	add.w	r2, r7, #8
 801265e:	4610      	mov	r0, r2
 8012660:	4798      	blx	r3
 8012662:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012664:	e029      	b.n	80126ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012666:	6839      	ldr	r1, [r7, #0]
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f000 f9f6 	bl	8012a5a <USBD_CtlError>
        err++;
 801266e:	7afb      	ldrb	r3, [r7, #11]
 8012670:	3301      	adds	r3, #1
 8012672:	72fb      	strb	r3, [r7, #11]
      break;
 8012674:	e021      	b.n	80126ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	7c1b      	ldrb	r3, [r3, #16]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d10d      	bne.n	801269a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012686:	f107 0208 	add.w	r2, r7, #8
 801268a:	4610      	mov	r0, r2
 801268c:	4798      	blx	r3
 801268e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	3301      	adds	r3, #1
 8012694:	2207      	movs	r2, #7
 8012696:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012698:	e00f      	b.n	80126ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801269a:	6839      	ldr	r1, [r7, #0]
 801269c:	6878      	ldr	r0, [r7, #4]
 801269e:	f000 f9dc 	bl	8012a5a <USBD_CtlError>
        err++;
 80126a2:	7afb      	ldrb	r3, [r7, #11]
 80126a4:	3301      	adds	r3, #1
 80126a6:	72fb      	strb	r3, [r7, #11]
      break;
 80126a8:	e007      	b.n	80126ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80126aa:	6839      	ldr	r1, [r7, #0]
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f000 f9d4 	bl	8012a5a <USBD_CtlError>
      err++;
 80126b2:	7afb      	ldrb	r3, [r7, #11]
 80126b4:	3301      	adds	r3, #1
 80126b6:	72fb      	strb	r3, [r7, #11]
      break;
 80126b8:	bf00      	nop
  }

  if (err != 0U)
 80126ba:	7afb      	ldrb	r3, [r7, #11]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d11c      	bne.n	80126fa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80126c0:	893b      	ldrh	r3, [r7, #8]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d011      	beq.n	80126ea <USBD_GetDescriptor+0x2b6>
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	88db      	ldrh	r3, [r3, #6]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d00d      	beq.n	80126ea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	88da      	ldrh	r2, [r3, #6]
 80126d2:	893b      	ldrh	r3, [r7, #8]
 80126d4:	4293      	cmp	r3, r2
 80126d6:	bf28      	it	cs
 80126d8:	4613      	movcs	r3, r2
 80126da:	b29b      	uxth	r3, r3
 80126dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80126de:	893b      	ldrh	r3, [r7, #8]
 80126e0:	461a      	mov	r2, r3
 80126e2:	68f9      	ldr	r1, [r7, #12]
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f000 fa22 	bl	8012b2e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	88db      	ldrh	r3, [r3, #6]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d104      	bne.n	80126fc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 fa79 	bl	8012bea <USBD_CtlSendStatus>
 80126f8:	e000      	b.n	80126fc <USBD_GetDescriptor+0x2c8>
    return;
 80126fa:	bf00      	nop
    }
  }
}
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop

08012704 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	889b      	ldrh	r3, [r3, #4]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d130      	bne.n	8012778 <USBD_SetAddress+0x74>
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	88db      	ldrh	r3, [r3, #6]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d12c      	bne.n	8012778 <USBD_SetAddress+0x74>
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	885b      	ldrh	r3, [r3, #2]
 8012722:	2b7f      	cmp	r3, #127	; 0x7f
 8012724:	d828      	bhi.n	8012778 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	885b      	ldrh	r3, [r3, #2]
 801272a:	b2db      	uxtb	r3, r3
 801272c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012730:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012738:	2b03      	cmp	r3, #3
 801273a:	d104      	bne.n	8012746 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801273c:	6839      	ldr	r1, [r7, #0]
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f000 f98b 	bl	8012a5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012744:	e01d      	b.n	8012782 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	7bfa      	ldrb	r2, [r7, #15]
 801274a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801274e:	7bfb      	ldrb	r3, [r7, #15]
 8012750:	4619      	mov	r1, r3
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f000 fe5a 	bl	801340c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f000 fa46 	bl	8012bea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801275e:	7bfb      	ldrb	r3, [r7, #15]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d004      	beq.n	801276e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2202      	movs	r2, #2
 8012768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801276c:	e009      	b.n	8012782 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2201      	movs	r2, #1
 8012772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012776:	e004      	b.n	8012782 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012778:	6839      	ldr	r1, [r7, #0]
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f000 f96d 	bl	8012a5a <USBD_CtlError>
  }
}
 8012780:	bf00      	nop
 8012782:	bf00      	nop
 8012784:	3710      	adds	r7, #16
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}
	...

0801278c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b082      	sub	sp, #8
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	885b      	ldrh	r3, [r3, #2]
 801279a:	b2da      	uxtb	r2, r3
 801279c:	4b41      	ldr	r3, [pc, #260]	; (80128a4 <USBD_SetConfig+0x118>)
 801279e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80127a0:	4b40      	ldr	r3, [pc, #256]	; (80128a4 <USBD_SetConfig+0x118>)
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d904      	bls.n	80127b2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80127a8:	6839      	ldr	r1, [r7, #0]
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f000 f955 	bl	8012a5a <USBD_CtlError>
 80127b0:	e075      	b.n	801289e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127b8:	2b02      	cmp	r3, #2
 80127ba:	d002      	beq.n	80127c2 <USBD_SetConfig+0x36>
 80127bc:	2b03      	cmp	r3, #3
 80127be:	d023      	beq.n	8012808 <USBD_SetConfig+0x7c>
 80127c0:	e062      	b.n	8012888 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80127c2:	4b38      	ldr	r3, [pc, #224]	; (80128a4 <USBD_SetConfig+0x118>)
 80127c4:	781b      	ldrb	r3, [r3, #0]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d01a      	beq.n	8012800 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80127ca:	4b36      	ldr	r3, [pc, #216]	; (80128a4 <USBD_SetConfig+0x118>)
 80127cc:	781b      	ldrb	r3, [r3, #0]
 80127ce:	461a      	mov	r2, r3
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2203      	movs	r2, #3
 80127d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80127dc:	4b31      	ldr	r3, [pc, #196]	; (80128a4 <USBD_SetConfig+0x118>)
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	4619      	mov	r1, r3
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f7ff f9e7 	bl	8011bb6 <USBD_SetClassConfig>
 80127e8:	4603      	mov	r3, r0
 80127ea:	2b02      	cmp	r3, #2
 80127ec:	d104      	bne.n	80127f8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80127ee:	6839      	ldr	r1, [r7, #0]
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f000 f932 	bl	8012a5a <USBD_CtlError>
            return;
 80127f6:	e052      	b.n	801289e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f000 f9f6 	bl	8012bea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80127fe:	e04e      	b.n	801289e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f000 f9f2 	bl	8012bea <USBD_CtlSendStatus>
        break;
 8012806:	e04a      	b.n	801289e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8012808:	4b26      	ldr	r3, [pc, #152]	; (80128a4 <USBD_SetConfig+0x118>)
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d112      	bne.n	8012836 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2202      	movs	r2, #2
 8012814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8012818:	4b22      	ldr	r3, [pc, #136]	; (80128a4 <USBD_SetConfig+0x118>)
 801281a:	781b      	ldrb	r3, [r3, #0]
 801281c:	461a      	mov	r2, r3
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8012822:	4b20      	ldr	r3, [pc, #128]	; (80128a4 <USBD_SetConfig+0x118>)
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	4619      	mov	r1, r3
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f7ff f9e3 	bl	8011bf4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f000 f9db 	bl	8012bea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8012834:	e033      	b.n	801289e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8012836:	4b1b      	ldr	r3, [pc, #108]	; (80128a4 <USBD_SetConfig+0x118>)
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	461a      	mov	r2, r3
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	685b      	ldr	r3, [r3, #4]
 8012840:	429a      	cmp	r2, r3
 8012842:	d01d      	beq.n	8012880 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	685b      	ldr	r3, [r3, #4]
 8012848:	b2db      	uxtb	r3, r3
 801284a:	4619      	mov	r1, r3
 801284c:	6878      	ldr	r0, [r7, #4]
 801284e:	f7ff f9d1 	bl	8011bf4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8012852:	4b14      	ldr	r3, [pc, #80]	; (80128a4 <USBD_SetConfig+0x118>)
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	461a      	mov	r2, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801285c:	4b11      	ldr	r3, [pc, #68]	; (80128a4 <USBD_SetConfig+0x118>)
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	4619      	mov	r1, r3
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ff f9a7 	bl	8011bb6 <USBD_SetClassConfig>
 8012868:	4603      	mov	r3, r0
 801286a:	2b02      	cmp	r3, #2
 801286c:	d104      	bne.n	8012878 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801286e:	6839      	ldr	r1, [r7, #0]
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f000 f8f2 	bl	8012a5a <USBD_CtlError>
            return;
 8012876:	e012      	b.n	801289e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f000 f9b6 	bl	8012bea <USBD_CtlSendStatus>
        break;
 801287e:	e00e      	b.n	801289e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f000 f9b2 	bl	8012bea <USBD_CtlSendStatus>
        break;
 8012886:	e00a      	b.n	801289e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8012888:	6839      	ldr	r1, [r7, #0]
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f000 f8e5 	bl	8012a5a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8012890:	4b04      	ldr	r3, [pc, #16]	; (80128a4 <USBD_SetConfig+0x118>)
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	4619      	mov	r1, r3
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f7ff f9ac 	bl	8011bf4 <USBD_ClrClassConfig>
        break;
 801289c:	bf00      	nop
    }
  }
}
 801289e:	3708      	adds	r7, #8
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	20005250 	.word	0x20005250

080128a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	88db      	ldrh	r3, [r3, #6]
 80128b6:	2b01      	cmp	r3, #1
 80128b8:	d004      	beq.n	80128c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80128ba:	6839      	ldr	r1, [r7, #0]
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f000 f8cc 	bl	8012a5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80128c2:	e022      	b.n	801290a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128ca:	2b02      	cmp	r3, #2
 80128cc:	dc02      	bgt.n	80128d4 <USBD_GetConfig+0x2c>
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	dc03      	bgt.n	80128da <USBD_GetConfig+0x32>
 80128d2:	e015      	b.n	8012900 <USBD_GetConfig+0x58>
 80128d4:	2b03      	cmp	r3, #3
 80128d6:	d00b      	beq.n	80128f0 <USBD_GetConfig+0x48>
 80128d8:	e012      	b.n	8012900 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	3308      	adds	r3, #8
 80128e4:	2201      	movs	r2, #1
 80128e6:	4619      	mov	r1, r3
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f000 f920 	bl	8012b2e <USBD_CtlSendData>
        break;
 80128ee:	e00c      	b.n	801290a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	3304      	adds	r3, #4
 80128f4:	2201      	movs	r2, #1
 80128f6:	4619      	mov	r1, r3
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f000 f918 	bl	8012b2e <USBD_CtlSendData>
        break;
 80128fe:	e004      	b.n	801290a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8012900:	6839      	ldr	r1, [r7, #0]
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f000 f8a9 	bl	8012a5a <USBD_CtlError>
        break;
 8012908:	bf00      	nop
}
 801290a:	bf00      	nop
 801290c:	3708      	adds	r7, #8
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}

08012912 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012912:	b580      	push	{r7, lr}
 8012914:	b082      	sub	sp, #8
 8012916:	af00      	add	r7, sp, #0
 8012918:	6078      	str	r0, [r7, #4]
 801291a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012922:	3b01      	subs	r3, #1
 8012924:	2b02      	cmp	r3, #2
 8012926:	d81e      	bhi.n	8012966 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	88db      	ldrh	r3, [r3, #6]
 801292c:	2b02      	cmp	r3, #2
 801292e:	d004      	beq.n	801293a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8012930:	6839      	ldr	r1, [r7, #0]
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f000 f891 	bl	8012a5a <USBD_CtlError>
        break;
 8012938:	e01a      	b.n	8012970 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2201      	movs	r2, #1
 801293e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012946:	2b00      	cmp	r3, #0
 8012948:	d005      	beq.n	8012956 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	68db      	ldr	r3, [r3, #12]
 801294e:	f043 0202 	orr.w	r2, r3, #2
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	330c      	adds	r3, #12
 801295a:	2202      	movs	r2, #2
 801295c:	4619      	mov	r1, r3
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f000 f8e5 	bl	8012b2e <USBD_CtlSendData>
      break;
 8012964:	e004      	b.n	8012970 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8012966:	6839      	ldr	r1, [r7, #0]
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f000 f876 	bl	8012a5a <USBD_CtlError>
      break;
 801296e:	bf00      	nop
  }
}
 8012970:	bf00      	nop
 8012972:	3708      	adds	r7, #8
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	885b      	ldrh	r3, [r3, #2]
 8012986:	2b01      	cmp	r3, #1
 8012988:	d106      	bne.n	8012998 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2201      	movs	r2, #1
 801298e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f000 f929 	bl	8012bea <USBD_CtlSendStatus>
  }
}
 8012998:	bf00      	nop
 801299a:	3708      	adds	r7, #8
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}

080129a0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b082      	sub	sp, #8
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
 80129a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129b0:	3b01      	subs	r3, #1
 80129b2:	2b02      	cmp	r3, #2
 80129b4:	d80b      	bhi.n	80129ce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	885b      	ldrh	r3, [r3, #2]
 80129ba:	2b01      	cmp	r3, #1
 80129bc:	d10c      	bne.n	80129d8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2200      	movs	r2, #0
 80129c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f000 f90f 	bl	8012bea <USBD_CtlSendStatus>
      }
      break;
 80129cc:	e004      	b.n	80129d8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80129ce:	6839      	ldr	r1, [r7, #0]
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f000 f842 	bl	8012a5a <USBD_CtlError>
      break;
 80129d6:	e000      	b.n	80129da <USBD_ClrFeature+0x3a>
      break;
 80129d8:	bf00      	nop
  }
}
 80129da:	bf00      	nop
 80129dc:	3708      	adds	r7, #8
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}

080129e2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80129e2:	b480      	push	{r7}
 80129e4:	b083      	sub	sp, #12
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
 80129ea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	781a      	ldrb	r2, [r3, #0]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	785a      	ldrb	r2, [r3, #1]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	3302      	adds	r3, #2
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	b29a      	uxth	r2, r3
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	3303      	adds	r3, #3
 8012a08:	781b      	ldrb	r3, [r3, #0]
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	021b      	lsls	r3, r3, #8
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	4413      	add	r3, r2
 8012a12:	b29a      	uxth	r2, r3
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	3304      	adds	r3, #4
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	b29a      	uxth	r2, r3
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	3305      	adds	r3, #5
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	021b      	lsls	r3, r3, #8
 8012a2a:	b29b      	uxth	r3, r3
 8012a2c:	4413      	add	r3, r2
 8012a2e:	b29a      	uxth	r2, r3
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	3306      	adds	r3, #6
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	3307      	adds	r3, #7
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	b29b      	uxth	r3, r3
 8012a44:	021b      	lsls	r3, r3, #8
 8012a46:	b29b      	uxth	r3, r3
 8012a48:	4413      	add	r3, r2
 8012a4a:	b29a      	uxth	r2, r3
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	80da      	strh	r2, [r3, #6]

}
 8012a50:	bf00      	nop
 8012a52:	370c      	adds	r7, #12
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bc80      	pop	{r7}
 8012a58:	4770      	bx	lr

08012a5a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8012a5a:	b580      	push	{r7, lr}
 8012a5c:	b082      	sub	sp, #8
 8012a5e:	af00      	add	r7, sp, #0
 8012a60:	6078      	str	r0, [r7, #4]
 8012a62:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8012a64:	2180      	movs	r1, #128	; 0x80
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f000 fc66 	bl	8013338 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8012a6c:	2100      	movs	r1, #0
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f000 fc62 	bl	8013338 <USBD_LL_StallEP>
}
 8012a74:	bf00      	nop
 8012a76:	3708      	adds	r7, #8
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd80      	pop	{r7, pc}

08012a7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b086      	sub	sp, #24
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	60f8      	str	r0, [r7, #12]
 8012a84:	60b9      	str	r1, [r7, #8]
 8012a86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d032      	beq.n	8012af8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8012a92:	68f8      	ldr	r0, [r7, #12]
 8012a94:	f000 f834 	bl	8012b00 <USBD_GetLen>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	b29b      	uxth	r3, r3
 8012a9e:	005b      	lsls	r3, r3, #1
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8012aa6:	7dfb      	ldrb	r3, [r7, #23]
 8012aa8:	1c5a      	adds	r2, r3, #1
 8012aaa:	75fa      	strb	r2, [r7, #23]
 8012aac:	461a      	mov	r2, r3
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	4413      	add	r3, r2
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	7812      	ldrb	r2, [r2, #0]
 8012ab6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8012ab8:	7dfb      	ldrb	r3, [r7, #23]
 8012aba:	1c5a      	adds	r2, r3, #1
 8012abc:	75fa      	strb	r2, [r7, #23]
 8012abe:	461a      	mov	r2, r3
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	4413      	add	r3, r2
 8012ac4:	2203      	movs	r2, #3
 8012ac6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8012ac8:	e012      	b.n	8012af0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	1c5a      	adds	r2, r3, #1
 8012ace:	60fa      	str	r2, [r7, #12]
 8012ad0:	7dfa      	ldrb	r2, [r7, #23]
 8012ad2:	1c51      	adds	r1, r2, #1
 8012ad4:	75f9      	strb	r1, [r7, #23]
 8012ad6:	4611      	mov	r1, r2
 8012ad8:	68ba      	ldr	r2, [r7, #8]
 8012ada:	440a      	add	r2, r1
 8012adc:	781b      	ldrb	r3, [r3, #0]
 8012ade:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8012ae0:	7dfb      	ldrb	r3, [r7, #23]
 8012ae2:	1c5a      	adds	r2, r3, #1
 8012ae4:	75fa      	strb	r2, [r7, #23]
 8012ae6:	461a      	mov	r2, r3
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	4413      	add	r3, r2
 8012aec:	2200      	movs	r2, #0
 8012aee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d1e8      	bne.n	8012aca <USBD_GetString+0x4e>
    }
  }
}
 8012af8:	bf00      	nop
 8012afa:	3718      	adds	r7, #24
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}

08012b00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012b00:	b480      	push	{r7}
 8012b02:	b085      	sub	sp, #20
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8012b0c:	e005      	b.n	8012b1a <USBD_GetLen+0x1a>
  {
    len++;
 8012b0e:	7bfb      	ldrb	r3, [r7, #15]
 8012b10:	3301      	adds	r3, #1
 8012b12:	73fb      	strb	r3, [r7, #15]
    buf++;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	3301      	adds	r3, #1
 8012b18:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d1f5      	bne.n	8012b0e <USBD_GetLen+0xe>
  }

  return len;
 8012b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3714      	adds	r7, #20
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bc80      	pop	{r7}
 8012b2c:	4770      	bx	lr

08012b2e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8012b2e:	b580      	push	{r7, lr}
 8012b30:	b084      	sub	sp, #16
 8012b32:	af00      	add	r7, sp, #0
 8012b34:	60f8      	str	r0, [r7, #12]
 8012b36:	60b9      	str	r1, [r7, #8]
 8012b38:	4613      	mov	r3, r2
 8012b3a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	2202      	movs	r2, #2
 8012b40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012b44:	88fa      	ldrh	r2, [r7, #6]
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8012b4a:	88fa      	ldrh	r2, [r7, #6]
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012b50:	88fb      	ldrh	r3, [r7, #6]
 8012b52:	68ba      	ldr	r2, [r7, #8]
 8012b54:	2100      	movs	r1, #0
 8012b56:	68f8      	ldr	r0, [r7, #12]
 8012b58:	f000 fc77 	bl	801344a <USBD_LL_Transmit>

  return USBD_OK;
 8012b5c:	2300      	movs	r3, #0
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3710      	adds	r7, #16
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}

08012b66 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8012b66:	b580      	push	{r7, lr}
 8012b68:	b084      	sub	sp, #16
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	60f8      	str	r0, [r7, #12]
 8012b6e:	60b9      	str	r1, [r7, #8]
 8012b70:	4613      	mov	r3, r2
 8012b72:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012b74:	88fb      	ldrh	r3, [r7, #6]
 8012b76:	68ba      	ldr	r2, [r7, #8]
 8012b78:	2100      	movs	r1, #0
 8012b7a:	68f8      	ldr	r0, [r7, #12]
 8012b7c:	f000 fc65 	bl	801344a <USBD_LL_Transmit>

  return USBD_OK;
 8012b80:	2300      	movs	r3, #0
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3710      	adds	r7, #16
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8012b8a:	b580      	push	{r7, lr}
 8012b8c:	b084      	sub	sp, #16
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	60f8      	str	r0, [r7, #12]
 8012b92:	60b9      	str	r1, [r7, #8]
 8012b94:	4613      	mov	r3, r2
 8012b96:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2203      	movs	r2, #3
 8012b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012ba0:	88fa      	ldrh	r2, [r7, #6]
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8012ba8:	88fa      	ldrh	r2, [r7, #6]
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012bb0:	88fb      	ldrh	r3, [r7, #6]
 8012bb2:	68ba      	ldr	r2, [r7, #8]
 8012bb4:	2100      	movs	r1, #0
 8012bb6:	68f8      	ldr	r0, [r7, #12]
 8012bb8:	f000 fc6a 	bl	8013490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012bbc:	2300      	movs	r3, #0
}
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	3710      	adds	r7, #16
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	bd80      	pop	{r7, pc}

08012bc6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8012bc6:	b580      	push	{r7, lr}
 8012bc8:	b084      	sub	sp, #16
 8012bca:	af00      	add	r7, sp, #0
 8012bcc:	60f8      	str	r0, [r7, #12]
 8012bce:	60b9      	str	r1, [r7, #8]
 8012bd0:	4613      	mov	r3, r2
 8012bd2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012bd4:	88fb      	ldrh	r3, [r7, #6]
 8012bd6:	68ba      	ldr	r2, [r7, #8]
 8012bd8:	2100      	movs	r1, #0
 8012bda:	68f8      	ldr	r0, [r7, #12]
 8012bdc:	f000 fc58 	bl	8013490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012be0:	2300      	movs	r3, #0
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3710      	adds	r7, #16
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}

08012bea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012bea:	b580      	push	{r7, lr}
 8012bec:	b082      	sub	sp, #8
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2204      	movs	r2, #4
 8012bf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	2100      	movs	r1, #0
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f000 fc22 	bl	801344a <USBD_LL_Transmit>

  return USBD_OK;
 8012c06:	2300      	movs	r3, #0
}
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3708      	adds	r7, #8
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}

08012c10 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b082      	sub	sp, #8
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2205      	movs	r2, #5
 8012c1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c20:	2300      	movs	r3, #0
 8012c22:	2200      	movs	r2, #0
 8012c24:	2100      	movs	r1, #0
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f000 fc32 	bl	8013490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c2c:	2300      	movs	r3, #0
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3708      	adds	r7, #8
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}

08012c36 <USBD_GetRxCount>:
* @param  pdev: device instance
* @param  ep_addr: endpoint address
* @retval Rx Data blength
*/
uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c36:	b580      	push	{r7, lr}
 8012c38:	b082      	sub	sp, #8
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	6078      	str	r0, [r7, #4]
 8012c3e:	460b      	mov	r3, r1
 8012c40:	70fb      	strb	r3, [r7, #3]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 8012c42:	78fb      	ldrb	r3, [r7, #3]
 8012c44:	4619      	mov	r1, r3
 8012c46:	6878      	ldr	r0, [r7, #4]
 8012c48:	f000 fc45 	bl	80134d6 <USBD_LL_GetRxDataSize>
 8012c4c:	4603      	mov	r3, r0
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3708      	adds	r7, #8
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
	...

08012c58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	4912      	ldr	r1, [pc, #72]	; (8012ca8 <MX_USB_DEVICE_Init+0x50>)
 8012c60:	4812      	ldr	r0, [pc, #72]	; (8012cac <MX_USB_DEVICE_Init+0x54>)
 8012c62:	f7fe ff4e 	bl	8011b02 <USBD_Init>
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d001      	beq.n	8012c70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012c6c:	f7f2 fe49 	bl	8005902 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012c70:	490f      	ldr	r1, [pc, #60]	; (8012cb0 <MX_USB_DEVICE_Init+0x58>)
 8012c72:	480e      	ldr	r0, [pc, #56]	; (8012cac <MX_USB_DEVICE_Init+0x54>)
 8012c74:	f7fe ff70 	bl	8011b58 <USBD_RegisterClass>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d001      	beq.n	8012c82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012c7e:	f7f2 fe40 	bl	8005902 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012c82:	490c      	ldr	r1, [pc, #48]	; (8012cb4 <MX_USB_DEVICE_Init+0x5c>)
 8012c84:	4809      	ldr	r0, [pc, #36]	; (8012cac <MX_USB_DEVICE_Init+0x54>)
 8012c86:	f7fe fea1 	bl	80119cc <USBD_CDC_RegisterInterface>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d001      	beq.n	8012c94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012c90:	f7f2 fe37 	bl	8005902 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012c94:	4805      	ldr	r0, [pc, #20]	; (8012cac <MX_USB_DEVICE_Init+0x54>)
 8012c96:	f7fe ff78 	bl	8011b8a <USBD_Start>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d001      	beq.n	8012ca4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012ca0:	f7f2 fe2f 	bl	8005902 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012ca4:	bf00      	nop
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	20000264 	.word	0x20000264
 8012cac:	20005254 	.word	0x20005254
 8012cb0:	20000150 	.word	0x20000150
 8012cb4:	20000254 	.word	0x20000254

08012cb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	4905      	ldr	r1, [pc, #20]	; (8012cd4 <CDC_Init_FS+0x1c>)
 8012cc0:	4805      	ldr	r0, [pc, #20]	; (8012cd8 <CDC_Init_FS+0x20>)
 8012cc2:	f7fe fe99 	bl	80119f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012cc6:	4905      	ldr	r1, [pc, #20]	; (8012cdc <CDC_Init_FS+0x24>)
 8012cc8:	4803      	ldr	r0, [pc, #12]	; (8012cd8 <CDC_Init_FS+0x20>)
 8012cca:	f7fe feae 	bl	8011a2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012cce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	bd80      	pop	{r7, pc}
 8012cd4:	20005918 	.word	0x20005918
 8012cd8:	20005254 	.word	0x20005254
 8012cdc:	20005518 	.word	0x20005518

08012ce0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012ce4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bc80      	pop	{r7}
 8012cec:	4770      	bx	lr
	...

08012cf0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012cf0:	b480      	push	{r7}
 8012cf2:	b083      	sub	sp, #12
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	6039      	str	r1, [r7, #0]
 8012cfa:	71fb      	strb	r3, [r7, #7]
 8012cfc:	4613      	mov	r3, r2
 8012cfe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012d00:	79fb      	ldrb	r3, [r7, #7]
 8012d02:	2b23      	cmp	r3, #35	; 0x23
 8012d04:	d84a      	bhi.n	8012d9c <CDC_Control_FS+0xac>
 8012d06:	a201      	add	r2, pc, #4	; (adr r2, 8012d0c <CDC_Control_FS+0x1c>)
 8012d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d0c:	08012d9d 	.word	0x08012d9d
 8012d10:	08012d9d 	.word	0x08012d9d
 8012d14:	08012d9d 	.word	0x08012d9d
 8012d18:	08012d9d 	.word	0x08012d9d
 8012d1c:	08012d9d 	.word	0x08012d9d
 8012d20:	08012d9d 	.word	0x08012d9d
 8012d24:	08012d9d 	.word	0x08012d9d
 8012d28:	08012d9d 	.word	0x08012d9d
 8012d2c:	08012d9d 	.word	0x08012d9d
 8012d30:	08012d9d 	.word	0x08012d9d
 8012d34:	08012d9d 	.word	0x08012d9d
 8012d38:	08012d9d 	.word	0x08012d9d
 8012d3c:	08012d9d 	.word	0x08012d9d
 8012d40:	08012d9d 	.word	0x08012d9d
 8012d44:	08012d9d 	.word	0x08012d9d
 8012d48:	08012d9d 	.word	0x08012d9d
 8012d4c:	08012d9d 	.word	0x08012d9d
 8012d50:	08012d9d 	.word	0x08012d9d
 8012d54:	08012d9d 	.word	0x08012d9d
 8012d58:	08012d9d 	.word	0x08012d9d
 8012d5c:	08012d9d 	.word	0x08012d9d
 8012d60:	08012d9d 	.word	0x08012d9d
 8012d64:	08012d9d 	.word	0x08012d9d
 8012d68:	08012d9d 	.word	0x08012d9d
 8012d6c:	08012d9d 	.word	0x08012d9d
 8012d70:	08012d9d 	.word	0x08012d9d
 8012d74:	08012d9d 	.word	0x08012d9d
 8012d78:	08012d9d 	.word	0x08012d9d
 8012d7c:	08012d9d 	.word	0x08012d9d
 8012d80:	08012d9d 	.word	0x08012d9d
 8012d84:	08012d9d 	.word	0x08012d9d
 8012d88:	08012d9d 	.word	0x08012d9d
 8012d8c:	08012d9d 	.word	0x08012d9d
 8012d90:	08012d9d 	.word	0x08012d9d
 8012d94:	08012d9d 	.word	0x08012d9d
 8012d98:	08012d9d 	.word	0x08012d9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012d9c:	bf00      	nop
  }

  return (USBD_OK);
 8012d9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	370c      	adds	r7, #12
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bc80      	pop	{r7}
 8012da8:	4770      	bx	lr
 8012daa:	bf00      	nop

08012dac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  EP3_OUT_Callback(Buf, *Len);
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4619      	mov	r1, r3
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f7f1 fcc1 	bl	8004744 <EP3_OUT_Callback>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012dc2:	6879      	ldr	r1, [r7, #4]
 8012dc4:	4805      	ldr	r0, [pc, #20]	; (8012ddc <CDC_Receive_FS+0x30>)
 8012dc6:	f7fe fe30 	bl	8011a2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012dca:	4804      	ldr	r0, [pc, #16]	; (8012ddc <CDC_Receive_FS+0x30>)
 8012dcc:	f7fe fe6f 	bl	8011aae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012dd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3708      	adds	r7, #8
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
 8012dda:	bf00      	nop
 8012ddc:	20005254 	.word	0x20005254

08012de0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	460b      	mov	r3, r1
 8012dea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012dec:	2300      	movs	r3, #0
 8012dee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  EP1_IN_Callback ();
 8012df0:	f7f1 fc04 	bl	80045fc <EP1_IN_Callback>

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012df4:	4b0e      	ldr	r3, [pc, #56]	; (8012e30 <CDC_Transmit_FS+0x50>)
 8012df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012dfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d001      	beq.n	8012e0a <CDC_Transmit_FS+0x2a>
    return USBD_BUSY;
 8012e06:	2301      	movs	r3, #1
 8012e08:	e00d      	b.n	8012e26 <CDC_Transmit_FS+0x46>

  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012e0a:	887b      	ldrh	r3, [r7, #2]
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	6879      	ldr	r1, [r7, #4]
 8012e10:	4807      	ldr	r0, [pc, #28]	; (8012e30 <CDC_Transmit_FS+0x50>)
 8012e12:	f7fe fdf1 	bl	80119f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012e16:	4806      	ldr	r0, [pc, #24]	; (8012e30 <CDC_Transmit_FS+0x50>)
 8012e18:	f7fe fe1a 	bl	8011a50 <USBD_CDC_TransmitPacket>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	73fb      	strb	r3, [r7, #15]
//  HAL_Delay(1000);
  EP1_IN_Callback ();
 8012e20:	f7f1 fbec 	bl	80045fc <EP1_IN_Callback>
  /* USER CODE END 7 */
  return result;
 8012e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3710      	adds	r7, #16
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	20005254 	.word	0x20005254

08012e34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e34:	b480      	push	{r7}
 8012e36:	b083      	sub	sp, #12
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	6039      	str	r1, [r7, #0]
 8012e3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	2212      	movs	r2, #18
 8012e44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012e46:	4b03      	ldr	r3, [pc, #12]	; (8012e54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	370c      	adds	r7, #12
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bc80      	pop	{r7}
 8012e50:	4770      	bx	lr
 8012e52:	bf00      	nop
 8012e54:	20000280 	.word	0x20000280

08012e58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e58:	b480      	push	{r7}
 8012e5a:	b083      	sub	sp, #12
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	4603      	mov	r3, r0
 8012e60:	6039      	str	r1, [r7, #0]
 8012e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	2204      	movs	r2, #4
 8012e68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012e6a:	4b03      	ldr	r3, [pc, #12]	; (8012e78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	370c      	adds	r7, #12
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bc80      	pop	{r7}
 8012e74:	4770      	bx	lr
 8012e76:	bf00      	nop
 8012e78:	20000294 	.word	0x20000294

08012e7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	4603      	mov	r3, r0
 8012e84:	6039      	str	r1, [r7, #0]
 8012e86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012e88:	79fb      	ldrb	r3, [r7, #7]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d105      	bne.n	8012e9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012e8e:	683a      	ldr	r2, [r7, #0]
 8012e90:	4907      	ldr	r1, [pc, #28]	; (8012eb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8012e92:	4808      	ldr	r0, [pc, #32]	; (8012eb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8012e94:	f7ff fdf2 	bl	8012a7c <USBD_GetString>
 8012e98:	e004      	b.n	8012ea4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012e9a:	683a      	ldr	r2, [r7, #0]
 8012e9c:	4904      	ldr	r1, [pc, #16]	; (8012eb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8012e9e:	4805      	ldr	r0, [pc, #20]	; (8012eb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8012ea0:	f7ff fdec 	bl	8012a7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ea4:	4b02      	ldr	r3, [pc, #8]	; (8012eb0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3708      	adds	r7, #8
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}
 8012eae:	bf00      	nop
 8012eb0:	20005d18 	.word	0x20005d18
 8012eb4:	080151b8 	.word	0x080151b8

08012eb8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b082      	sub	sp, #8
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	6039      	str	r1, [r7, #0]
 8012ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012ec4:	683a      	ldr	r2, [r7, #0]
 8012ec6:	4904      	ldr	r1, [pc, #16]	; (8012ed8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012ec8:	4804      	ldr	r0, [pc, #16]	; (8012edc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012eca:	f7ff fdd7 	bl	8012a7c <USBD_GetString>
  return USBD_StrDesc;
 8012ece:	4b02      	ldr	r3, [pc, #8]	; (8012ed8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3708      	adds	r7, #8
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	20005d18 	.word	0x20005d18
 8012edc:	080151d0 	.word	0x080151d0

08012ee0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b082      	sub	sp, #8
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	6039      	str	r1, [r7, #0]
 8012eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	221a      	movs	r2, #26
 8012ef0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012ef2:	f000 f843 	bl	8012f7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012ef6:	4b02      	ldr	r3, [pc, #8]	; (8012f00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3708      	adds	r7, #8
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	20000298 	.word	0x20000298

08012f04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b082      	sub	sp, #8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	6039      	str	r1, [r7, #0]
 8012f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012f10:	79fb      	ldrb	r3, [r7, #7]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d105      	bne.n	8012f22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012f16:	683a      	ldr	r2, [r7, #0]
 8012f18:	4907      	ldr	r1, [pc, #28]	; (8012f38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012f1a:	4808      	ldr	r0, [pc, #32]	; (8012f3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8012f1c:	f7ff fdae 	bl	8012a7c <USBD_GetString>
 8012f20:	e004      	b.n	8012f2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012f22:	683a      	ldr	r2, [r7, #0]
 8012f24:	4904      	ldr	r1, [pc, #16]	; (8012f38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012f26:	4805      	ldr	r0, [pc, #20]	; (8012f3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8012f28:	f7ff fda8 	bl	8012a7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012f2c:	4b02      	ldr	r3, [pc, #8]	; (8012f38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3708      	adds	r7, #8
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}
 8012f36:	bf00      	nop
 8012f38:	20005d18 	.word	0x20005d18
 8012f3c:	080151e4 	.word	0x080151e4

08012f40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	4603      	mov	r3, r0
 8012f48:	6039      	str	r1, [r7, #0]
 8012f4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012f4c:	79fb      	ldrb	r3, [r7, #7]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d105      	bne.n	8012f5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012f52:	683a      	ldr	r2, [r7, #0]
 8012f54:	4907      	ldr	r1, [pc, #28]	; (8012f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012f56:	4808      	ldr	r0, [pc, #32]	; (8012f78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012f58:	f7ff fd90 	bl	8012a7c <USBD_GetString>
 8012f5c:	e004      	b.n	8012f68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012f5e:	683a      	ldr	r2, [r7, #0]
 8012f60:	4904      	ldr	r1, [pc, #16]	; (8012f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012f62:	4805      	ldr	r0, [pc, #20]	; (8012f78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012f64:	f7ff fd8a 	bl	8012a7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012f68:	4b02      	ldr	r3, [pc, #8]	; (8012f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3708      	adds	r7, #8
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}
 8012f72:	bf00      	nop
 8012f74:	20005d18 	.word	0x20005d18
 8012f78:	080151f0 	.word	0x080151f0

08012f7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b084      	sub	sp, #16
 8012f80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012f82:	4b0f      	ldr	r3, [pc, #60]	; (8012fc0 <Get_SerialNum+0x44>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012f88:	4b0e      	ldr	r3, [pc, #56]	; (8012fc4 <Get_SerialNum+0x48>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012f8e:	4b0e      	ldr	r3, [pc, #56]	; (8012fc8 <Get_SerialNum+0x4c>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012f94:	68fa      	ldr	r2, [r7, #12]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	4413      	add	r3, r2
 8012f9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d009      	beq.n	8012fb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012fa2:	2208      	movs	r2, #8
 8012fa4:	4909      	ldr	r1, [pc, #36]	; (8012fcc <Get_SerialNum+0x50>)
 8012fa6:	68f8      	ldr	r0, [r7, #12]
 8012fa8:	f000 f814 	bl	8012fd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012fac:	2204      	movs	r2, #4
 8012fae:	4908      	ldr	r1, [pc, #32]	; (8012fd0 <Get_SerialNum+0x54>)
 8012fb0:	68b8      	ldr	r0, [r7, #8]
 8012fb2:	f000 f80f 	bl	8012fd4 <IntToUnicode>
  }
}
 8012fb6:	bf00      	nop
 8012fb8:	3710      	adds	r7, #16
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
 8012fbe:	bf00      	nop
 8012fc0:	1ffff7e8 	.word	0x1ffff7e8
 8012fc4:	1ffff7ec 	.word	0x1ffff7ec
 8012fc8:	1ffff7f0 	.word	0x1ffff7f0
 8012fcc:	2000029a 	.word	0x2000029a
 8012fd0:	200002aa 	.word	0x200002aa

08012fd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b087      	sub	sp, #28
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	60b9      	str	r1, [r7, #8]
 8012fde:	4613      	mov	r3, r2
 8012fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	75fb      	strb	r3, [r7, #23]
 8012fea:	e027      	b.n	801303c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	0f1b      	lsrs	r3, r3, #28
 8012ff0:	2b09      	cmp	r3, #9
 8012ff2:	d80b      	bhi.n	801300c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	0f1b      	lsrs	r3, r3, #28
 8012ff8:	b2da      	uxtb	r2, r3
 8012ffa:	7dfb      	ldrb	r3, [r7, #23]
 8012ffc:	005b      	lsls	r3, r3, #1
 8012ffe:	4619      	mov	r1, r3
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	440b      	add	r3, r1
 8013004:	3230      	adds	r2, #48	; 0x30
 8013006:	b2d2      	uxtb	r2, r2
 8013008:	701a      	strb	r2, [r3, #0]
 801300a:	e00a      	b.n	8013022 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	0f1b      	lsrs	r3, r3, #28
 8013010:	b2da      	uxtb	r2, r3
 8013012:	7dfb      	ldrb	r3, [r7, #23]
 8013014:	005b      	lsls	r3, r3, #1
 8013016:	4619      	mov	r1, r3
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	440b      	add	r3, r1
 801301c:	3237      	adds	r2, #55	; 0x37
 801301e:	b2d2      	uxtb	r2, r2
 8013020:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	011b      	lsls	r3, r3, #4
 8013026:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013028:	7dfb      	ldrb	r3, [r7, #23]
 801302a:	005b      	lsls	r3, r3, #1
 801302c:	3301      	adds	r3, #1
 801302e:	68ba      	ldr	r2, [r7, #8]
 8013030:	4413      	add	r3, r2
 8013032:	2200      	movs	r2, #0
 8013034:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013036:	7dfb      	ldrb	r3, [r7, #23]
 8013038:	3301      	adds	r3, #1
 801303a:	75fb      	strb	r3, [r7, #23]
 801303c:	7dfa      	ldrb	r2, [r7, #23]
 801303e:	79fb      	ldrb	r3, [r7, #7]
 8013040:	429a      	cmp	r2, r3
 8013042:	d3d3      	bcc.n	8012fec <IntToUnicode+0x18>
  }
}
 8013044:	bf00      	nop
 8013046:	bf00      	nop
 8013048:	371c      	adds	r7, #28
 801304a:	46bd      	mov	sp, r7
 801304c:	bc80      	pop	{r7}
 801304e:	4770      	bx	lr

08013050 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013050:	b480      	push	{r7}
 8013052:	b085      	sub	sp, #20
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	4a09      	ldr	r2, [pc, #36]	; (8013084 <HAL_PCD_MspInit+0x34>)
 801305e:	4293      	cmp	r3, r2
 8013060:	d10b      	bne.n	801307a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013062:	4b09      	ldr	r3, [pc, #36]	; (8013088 <HAL_PCD_MspInit+0x38>)
 8013064:	69db      	ldr	r3, [r3, #28]
 8013066:	4a08      	ldr	r2, [pc, #32]	; (8013088 <HAL_PCD_MspInit+0x38>)
 8013068:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801306c:	61d3      	str	r3, [r2, #28]
 801306e:	4b06      	ldr	r3, [pc, #24]	; (8013088 <HAL_PCD_MspInit+0x38>)
 8013070:	69db      	ldr	r3, [r3, #28]
 8013072:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013076:	60fb      	str	r3, [r7, #12]
 8013078:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801307a:	bf00      	nop
 801307c:	3714      	adds	r7, #20
 801307e:	46bd      	mov	sp, r7
 8013080:	bc80      	pop	{r7}
 8013082:	4770      	bx	lr
 8013084:	40005c00 	.word	0x40005c00
 8013088:	40021000 	.word	0x40021000

0801308c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80130a0:	4619      	mov	r1, r3
 80130a2:	4610      	mov	r0, r2
 80130a4:	f7fe fdb9 	bl	8011c1a <USBD_LL_SetupStage>
}
 80130a8:	bf00      	nop
 80130aa:	3708      	adds	r7, #8
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}

080130b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	460b      	mov	r3, r1
 80130ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80130c2:	78fa      	ldrb	r2, [r7, #3]
 80130c4:	6879      	ldr	r1, [r7, #4]
 80130c6:	4613      	mov	r3, r2
 80130c8:	009b      	lsls	r3, r3, #2
 80130ca:	4413      	add	r3, r2
 80130cc:	00db      	lsls	r3, r3, #3
 80130ce:	440b      	add	r3, r1
 80130d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80130d4:	681a      	ldr	r2, [r3, #0]
 80130d6:	78fb      	ldrb	r3, [r7, #3]
 80130d8:	4619      	mov	r1, r3
 80130da:	f7fe fdeb 	bl	8011cb4 <USBD_LL_DataOutStage>
}
 80130de:	bf00      	nop
 80130e0:	3708      	adds	r7, #8
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}

080130e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130e6:	b580      	push	{r7, lr}
 80130e8:	b082      	sub	sp, #8
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]
 80130ee:	460b      	mov	r3, r1
 80130f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80130f8:	78fa      	ldrb	r2, [r7, #3]
 80130fa:	6879      	ldr	r1, [r7, #4]
 80130fc:	4613      	mov	r3, r2
 80130fe:	009b      	lsls	r3, r3, #2
 8013100:	4413      	add	r3, r2
 8013102:	00db      	lsls	r3, r3, #3
 8013104:	440b      	add	r3, r1
 8013106:	333c      	adds	r3, #60	; 0x3c
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	78fb      	ldrb	r3, [r7, #3]
 801310c:	4619      	mov	r1, r3
 801310e:	f7fe fe42 	bl	8011d96 <USBD_LL_DataInStage>
}
 8013112:	bf00      	nop
 8013114:	3708      	adds	r7, #8
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}

0801311a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801311a:	b580      	push	{r7, lr}
 801311c:	b082      	sub	sp, #8
 801311e:	af00      	add	r7, sp, #0
 8013120:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8013128:	4618      	mov	r0, r3
 801312a:	f7fe ff52 	bl	8011fd2 <USBD_LL_SOF>
}
 801312e:	bf00      	nop
 8013130:	3708      	adds	r7, #8
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}

08013136 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013136:	b580      	push	{r7, lr}
 8013138:	b084      	sub	sp, #16
 801313a:	af00      	add	r7, sp, #0
 801313c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801313e:	2301      	movs	r3, #1
 8013140:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	689b      	ldr	r3, [r3, #8]
 8013146:	2b02      	cmp	r3, #2
 8013148:	d001      	beq.n	801314e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801314a:	f7f2 fbda 	bl	8005902 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8013154:	7bfa      	ldrb	r2, [r7, #15]
 8013156:	4611      	mov	r1, r2
 8013158:	4618      	mov	r0, r3
 801315a:	f7fe ff02 	bl	8011f62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8013164:	4618      	mov	r0, r3
 8013166:	f7fe febb 	bl	8011ee0 <USBD_LL_Reset>
}
 801316a:	bf00      	nop
 801316c:	3710      	adds	r7, #16
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}
	...

08013174 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8013182:	4618      	mov	r0, r3
 8013184:	f7fe fefc 	bl	8011f80 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	699b      	ldr	r3, [r3, #24]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d005      	beq.n	801319c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013190:	4b04      	ldr	r3, [pc, #16]	; (80131a4 <HAL_PCD_SuspendCallback+0x30>)
 8013192:	691b      	ldr	r3, [r3, #16]
 8013194:	4a03      	ldr	r2, [pc, #12]	; (80131a4 <HAL_PCD_SuspendCallback+0x30>)
 8013196:	f043 0306 	orr.w	r3, r3, #6
 801319a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801319c:	bf00      	nop
 801319e:	3708      	adds	r7, #8
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	e000ed00 	.word	0xe000ed00

080131a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80131b6:	4618      	mov	r0, r3
 80131b8:	f7fe fef6 	bl	8011fa8 <USBD_LL_Resume>
}
 80131bc:	bf00      	nop
 80131be:	3708      	adds	r7, #8
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}

080131c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b082      	sub	sp, #8
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80131cc:	4a28      	ldr	r2, [pc, #160]	; (8013270 <USBD_LL_Init+0xac>)
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	4a26      	ldr	r2, [pc, #152]	; (8013270 <USBD_LL_Init+0xac>)
 80131d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80131dc:	4b24      	ldr	r3, [pc, #144]	; (8013270 <USBD_LL_Init+0xac>)
 80131de:	4a25      	ldr	r2, [pc, #148]	; (8013274 <USBD_LL_Init+0xb0>)
 80131e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80131e2:	4b23      	ldr	r3, [pc, #140]	; (8013270 <USBD_LL_Init+0xac>)
 80131e4:	2208      	movs	r2, #8
 80131e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80131e8:	4b21      	ldr	r3, [pc, #132]	; (8013270 <USBD_LL_Init+0xac>)
 80131ea:	2202      	movs	r2, #2
 80131ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80131ee:	4b20      	ldr	r3, [pc, #128]	; (8013270 <USBD_LL_Init+0xac>)
 80131f0:	2200      	movs	r2, #0
 80131f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80131f4:	4b1e      	ldr	r3, [pc, #120]	; (8013270 <USBD_LL_Init+0xac>)
 80131f6:	2200      	movs	r2, #0
 80131f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80131fa:	4b1d      	ldr	r3, [pc, #116]	; (8013270 <USBD_LL_Init+0xac>)
 80131fc:	2200      	movs	r2, #0
 80131fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013200:	481b      	ldr	r0, [pc, #108]	; (8013270 <USBD_LL_Init+0xac>)
 8013202:	f7f7 fa2e 	bl	800a662 <HAL_PCD_Init>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d001      	beq.n	8013210 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 801320c:	f7f2 fb79 	bl	8005902 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013216:	2318      	movs	r3, #24
 8013218:	2200      	movs	r2, #0
 801321a:	2100      	movs	r1, #0
 801321c:	f7f8 ff4d 	bl	800c0ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013226:	2358      	movs	r3, #88	; 0x58
 8013228:	2200      	movs	r2, #0
 801322a:	2180      	movs	r1, #128	; 0x80
 801322c:	f7f8 ff45 	bl	800c0ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013236:	23c0      	movs	r3, #192	; 0xc0
 8013238:	2200      	movs	r2, #0
 801323a:	2181      	movs	r1, #129	; 0x81
 801323c:	f7f8 ff3d 	bl	800c0ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013246:	f44f 7388 	mov.w	r3, #272	; 0x110
 801324a:	2200      	movs	r2, #0
 801324c:	2101      	movs	r1, #1
 801324e:	f7f8 ff34 	bl	800c0ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013258:	f44f 7380 	mov.w	r3, #256	; 0x100
 801325c:	2200      	movs	r2, #0
 801325e:	2182      	movs	r1, #130	; 0x82
 8013260:	f7f8 ff2b 	bl	800c0ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8013264:	2300      	movs	r3, #0
}
 8013266:	4618      	mov	r0, r3
 8013268:	3708      	adds	r7, #8
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}
 801326e:	bf00      	nop
 8013270:	20005f18 	.word	0x20005f18
 8013274:	40005c00 	.word	0x40005c00

08013278 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b084      	sub	sp, #16
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013280:	2300      	movs	r3, #0
 8013282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013284:	2300      	movs	r3, #0
 8013286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801328e:	4618      	mov	r0, r3
 8013290:	f7f7 fae6 	bl	800a860 <HAL_PCD_Start>
 8013294:	4603      	mov	r3, r0
 8013296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013298:	7bfb      	ldrb	r3, [r7, #15]
 801329a:	4618      	mov	r0, r3
 801329c:	f000 f94e 	bl	801353c <USBD_Get_USB_Status>
 80132a0:	4603      	mov	r3, r0
 80132a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	3710      	adds	r7, #16
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}

080132ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80132ae:	b580      	push	{r7, lr}
 80132b0:	b084      	sub	sp, #16
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
 80132b6:	4608      	mov	r0, r1
 80132b8:	4611      	mov	r1, r2
 80132ba:	461a      	mov	r2, r3
 80132bc:	4603      	mov	r3, r0
 80132be:	70fb      	strb	r3, [r7, #3]
 80132c0:	460b      	mov	r3, r1
 80132c2:	70bb      	strb	r3, [r7, #2]
 80132c4:	4613      	mov	r3, r2
 80132c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132c8:	2300      	movs	r3, #0
 80132ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132cc:	2300      	movs	r3, #0
 80132ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80132d6:	78bb      	ldrb	r3, [r7, #2]
 80132d8:	883a      	ldrh	r2, [r7, #0]
 80132da:	78f9      	ldrb	r1, [r7, #3]
 80132dc:	f7f7 fc3b 	bl	800ab56 <HAL_PCD_EP_Open>
 80132e0:	4603      	mov	r3, r0
 80132e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132e4:	7bfb      	ldrb	r3, [r7, #15]
 80132e6:	4618      	mov	r0, r3
 80132e8:	f000 f928 	bl	801353c <USBD_Get_USB_Status>
 80132ec:	4603      	mov	r3, r0
 80132ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	3710      	adds	r7, #16
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}

080132fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132fa:	b580      	push	{r7, lr}
 80132fc:	b084      	sub	sp, #16
 80132fe:	af00      	add	r7, sp, #0
 8013300:	6078      	str	r0, [r7, #4]
 8013302:	460b      	mov	r3, r1
 8013304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013306:	2300      	movs	r3, #0
 8013308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801330a:	2300      	movs	r3, #0
 801330c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013314:	78fa      	ldrb	r2, [r7, #3]
 8013316:	4611      	mov	r1, r2
 8013318:	4618      	mov	r0, r3
 801331a:	f7f7 fc79 	bl	800ac10 <HAL_PCD_EP_Close>
 801331e:	4603      	mov	r3, r0
 8013320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013322:	7bfb      	ldrb	r3, [r7, #15]
 8013324:	4618      	mov	r0, r3
 8013326:	f000 f909 	bl	801353c <USBD_Get_USB_Status>
 801332a:	4603      	mov	r3, r0
 801332c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801332e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013330:	4618      	mov	r0, r3
 8013332:	3710      	adds	r7, #16
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	460b      	mov	r3, r1
 8013342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013344:	2300      	movs	r3, #0
 8013346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013348:	2300      	movs	r3, #0
 801334a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013352:	78fa      	ldrb	r2, [r7, #3]
 8013354:	4611      	mov	r1, r2
 8013356:	4618      	mov	r0, r3
 8013358:	f7f7 fd21 	bl	800ad9e <HAL_PCD_EP_SetStall>
 801335c:	4603      	mov	r3, r0
 801335e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013360:	7bfb      	ldrb	r3, [r7, #15]
 8013362:	4618      	mov	r0, r3
 8013364:	f000 f8ea 	bl	801353c <USBD_Get_USB_Status>
 8013368:	4603      	mov	r3, r0
 801336a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801336c:	7bbb      	ldrb	r3, [r7, #14]
}
 801336e:	4618      	mov	r0, r3
 8013370:	3710      	adds	r7, #16
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}

08013376 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013376:	b580      	push	{r7, lr}
 8013378:	b084      	sub	sp, #16
 801337a:	af00      	add	r7, sp, #0
 801337c:	6078      	str	r0, [r7, #4]
 801337e:	460b      	mov	r3, r1
 8013380:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013382:	2300      	movs	r3, #0
 8013384:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013386:	2300      	movs	r3, #0
 8013388:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013390:	78fa      	ldrb	r2, [r7, #3]
 8013392:	4611      	mov	r1, r2
 8013394:	4618      	mov	r0, r3
 8013396:	f7f7 fd62 	bl	800ae5e <HAL_PCD_EP_ClrStall>
 801339a:	4603      	mov	r3, r0
 801339c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801339e:	7bfb      	ldrb	r3, [r7, #15]
 80133a0:	4618      	mov	r0, r3
 80133a2:	f000 f8cb 	bl	801353c <USBD_Get_USB_Status>
 80133a6:	4603      	mov	r3, r0
 80133a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3710      	adds	r7, #16
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}

080133b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133b4:	b480      	push	{r7}
 80133b6:	b085      	sub	sp, #20
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	460b      	mov	r3, r1
 80133be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80133c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80133c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	da0c      	bge.n	80133ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80133d0:	78fb      	ldrb	r3, [r7, #3]
 80133d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133d6:	68f9      	ldr	r1, [r7, #12]
 80133d8:	1c5a      	adds	r2, r3, #1
 80133da:	4613      	mov	r3, r2
 80133dc:	009b      	lsls	r3, r3, #2
 80133de:	4413      	add	r3, r2
 80133e0:	00db      	lsls	r3, r3, #3
 80133e2:	440b      	add	r3, r1
 80133e4:	3302      	adds	r3, #2
 80133e6:	781b      	ldrb	r3, [r3, #0]
 80133e8:	e00b      	b.n	8013402 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80133ea:	78fb      	ldrb	r3, [r7, #3]
 80133ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80133f0:	68f9      	ldr	r1, [r7, #12]
 80133f2:	4613      	mov	r3, r2
 80133f4:	009b      	lsls	r3, r3, #2
 80133f6:	4413      	add	r3, r2
 80133f8:	00db      	lsls	r3, r3, #3
 80133fa:	440b      	add	r3, r1
 80133fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8013400:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013402:	4618      	mov	r0, r3
 8013404:	3714      	adds	r7, #20
 8013406:	46bd      	mov	sp, r7
 8013408:	bc80      	pop	{r7}
 801340a:	4770      	bx	lr

0801340c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b084      	sub	sp, #16
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
 8013414:	460b      	mov	r3, r1
 8013416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013418:	2300      	movs	r3, #0
 801341a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801341c:	2300      	movs	r3, #0
 801341e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013426:	78fa      	ldrb	r2, [r7, #3]
 8013428:	4611      	mov	r1, r2
 801342a:	4618      	mov	r0, r3
 801342c:	f7f7 fb6e 	bl	800ab0c <HAL_PCD_SetAddress>
 8013430:	4603      	mov	r3, r0
 8013432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013434:	7bfb      	ldrb	r3, [r7, #15]
 8013436:	4618      	mov	r0, r3
 8013438:	f000 f880 	bl	801353c <USBD_Get_USB_Status>
 801343c:	4603      	mov	r3, r0
 801343e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013440:	7bbb      	ldrb	r3, [r7, #14]
}
 8013442:	4618      	mov	r0, r3
 8013444:	3710      	adds	r7, #16
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}

0801344a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801344a:	b580      	push	{r7, lr}
 801344c:	b086      	sub	sp, #24
 801344e:	af00      	add	r7, sp, #0
 8013450:	60f8      	str	r0, [r7, #12]
 8013452:	607a      	str	r2, [r7, #4]
 8013454:	461a      	mov	r2, r3
 8013456:	460b      	mov	r3, r1
 8013458:	72fb      	strb	r3, [r7, #11]
 801345a:	4613      	mov	r3, r2
 801345c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801345e:	2300      	movs	r3, #0
 8013460:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013462:	2300      	movs	r3, #0
 8013464:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801346c:	893b      	ldrh	r3, [r7, #8]
 801346e:	7af9      	ldrb	r1, [r7, #11]
 8013470:	687a      	ldr	r2, [r7, #4]
 8013472:	f7f7 fc5d 	bl	800ad30 <HAL_PCD_EP_Transmit>
 8013476:	4603      	mov	r3, r0
 8013478:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801347a:	7dfb      	ldrb	r3, [r7, #23]
 801347c:	4618      	mov	r0, r3
 801347e:	f000 f85d 	bl	801353c <USBD_Get_USB_Status>
 8013482:	4603      	mov	r3, r0
 8013484:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013486:	7dbb      	ldrb	r3, [r7, #22]
}
 8013488:	4618      	mov	r0, r3
 801348a:	3718      	adds	r7, #24
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b086      	sub	sp, #24
 8013494:	af00      	add	r7, sp, #0
 8013496:	60f8      	str	r0, [r7, #12]
 8013498:	607a      	str	r2, [r7, #4]
 801349a:	461a      	mov	r2, r3
 801349c:	460b      	mov	r3, r1
 801349e:	72fb      	strb	r3, [r7, #11]
 80134a0:	4613      	mov	r3, r2
 80134a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134a4:	2300      	movs	r3, #0
 80134a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134a8:	2300      	movs	r3, #0
 80134aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80134b2:	893b      	ldrh	r3, [r7, #8]
 80134b4:	7af9      	ldrb	r1, [r7, #11]
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	f7f7 fbf2 	bl	800aca0 <HAL_PCD_EP_Receive>
 80134bc:	4603      	mov	r3, r0
 80134be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134c0:	7dfb      	ldrb	r3, [r7, #23]
 80134c2:	4618      	mov	r0, r3
 80134c4:	f000 f83a 	bl	801353c <USBD_Get_USB_Status>
 80134c8:	4603      	mov	r3, r0
 80134ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80134cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3718      	adds	r7, #24
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}

080134d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134d6:	b580      	push	{r7, lr}
 80134d8:	b082      	sub	sp, #8
 80134da:	af00      	add	r7, sp, #0
 80134dc:	6078      	str	r0, [r7, #4]
 80134de:	460b      	mov	r3, r1
 80134e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80134e8:	78fa      	ldrb	r2, [r7, #3]
 80134ea:	4611      	mov	r1, r2
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7f7 fc08 	bl	800ad02 <HAL_PCD_EP_GetRxCount>
 80134f2:	4603      	mov	r3, r0
}
 80134f4:	4618      	mov	r0, r3
 80134f6:	3708      	adds	r7, #8
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd80      	pop	{r7, pc}

080134fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b083      	sub	sp, #12
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013504:	4b02      	ldr	r3, [pc, #8]	; (8013510 <USBD_static_malloc+0x14>)
}
 8013506:	4618      	mov	r0, r3
 8013508:	370c      	adds	r7, #12
 801350a:	46bd      	mov	sp, r7
 801350c:	bc80      	pop	{r7}
 801350e:	4770      	bx	lr
 8013510:	20006208 	.word	0x20006208

08013514 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013514:	b480      	push	{r7}
 8013516:	b083      	sub	sp, #12
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]

}
 801351c:	bf00      	nop
 801351e:	370c      	adds	r7, #12
 8013520:	46bd      	mov	sp, r7
 8013522:	bc80      	pop	{r7}
 8013524:	4770      	bx	lr

08013526 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013526:	b480      	push	{r7}
 8013528:	b083      	sub	sp, #12
 801352a:	af00      	add	r7, sp, #0
 801352c:	6078      	str	r0, [r7, #4]
 801352e:	460b      	mov	r3, r1
 8013530:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8013532:	bf00      	nop
 8013534:	370c      	adds	r7, #12
 8013536:	46bd      	mov	sp, r7
 8013538:	bc80      	pop	{r7}
 801353a:	4770      	bx	lr

0801353c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801353c:	b480      	push	{r7}
 801353e:	b085      	sub	sp, #20
 8013540:	af00      	add	r7, sp, #0
 8013542:	4603      	mov	r3, r0
 8013544:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013546:	2300      	movs	r3, #0
 8013548:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801354a:	79fb      	ldrb	r3, [r7, #7]
 801354c:	2b03      	cmp	r3, #3
 801354e:	d817      	bhi.n	8013580 <USBD_Get_USB_Status+0x44>
 8013550:	a201      	add	r2, pc, #4	; (adr r2, 8013558 <USBD_Get_USB_Status+0x1c>)
 8013552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013556:	bf00      	nop
 8013558:	08013569 	.word	0x08013569
 801355c:	0801356f 	.word	0x0801356f
 8013560:	08013575 	.word	0x08013575
 8013564:	0801357b 	.word	0x0801357b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013568:	2300      	movs	r3, #0
 801356a:	73fb      	strb	r3, [r7, #15]
    break;
 801356c:	e00b      	b.n	8013586 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801356e:	2302      	movs	r3, #2
 8013570:	73fb      	strb	r3, [r7, #15]
    break;
 8013572:	e008      	b.n	8013586 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013574:	2301      	movs	r3, #1
 8013576:	73fb      	strb	r3, [r7, #15]
    break;
 8013578:	e005      	b.n	8013586 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801357a:	2302      	movs	r3, #2
 801357c:	73fb      	strb	r3, [r7, #15]
    break;
 801357e:	e002      	b.n	8013586 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013580:	2302      	movs	r3, #2
 8013582:	73fb      	strb	r3, [r7, #15]
    break;
 8013584:	bf00      	nop
  }
  return usb_status;
 8013586:	7bfb      	ldrb	r3, [r7, #15]
}
 8013588:	4618      	mov	r0, r3
 801358a:	3714      	adds	r7, #20
 801358c:	46bd      	mov	sp, r7
 801358e:	bc80      	pop	{r7}
 8013590:	4770      	bx	lr
 8013592:	bf00      	nop

08013594 <std>:
 8013594:	2300      	movs	r3, #0
 8013596:	b510      	push	{r4, lr}
 8013598:	4604      	mov	r4, r0
 801359a:	e9c0 3300 	strd	r3, r3, [r0]
 801359e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135a2:	6083      	str	r3, [r0, #8]
 80135a4:	8181      	strh	r1, [r0, #12]
 80135a6:	6643      	str	r3, [r0, #100]	; 0x64
 80135a8:	81c2      	strh	r2, [r0, #14]
 80135aa:	6183      	str	r3, [r0, #24]
 80135ac:	4619      	mov	r1, r3
 80135ae:	2208      	movs	r2, #8
 80135b0:	305c      	adds	r0, #92	; 0x5c
 80135b2:	f000 f9f7 	bl	80139a4 <memset>
 80135b6:	4b0d      	ldr	r3, [pc, #52]	; (80135ec <std+0x58>)
 80135b8:	6224      	str	r4, [r4, #32]
 80135ba:	6263      	str	r3, [r4, #36]	; 0x24
 80135bc:	4b0c      	ldr	r3, [pc, #48]	; (80135f0 <std+0x5c>)
 80135be:	62a3      	str	r3, [r4, #40]	; 0x28
 80135c0:	4b0c      	ldr	r3, [pc, #48]	; (80135f4 <std+0x60>)
 80135c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80135c4:	4b0c      	ldr	r3, [pc, #48]	; (80135f8 <std+0x64>)
 80135c6:	6323      	str	r3, [r4, #48]	; 0x30
 80135c8:	4b0c      	ldr	r3, [pc, #48]	; (80135fc <std+0x68>)
 80135ca:	429c      	cmp	r4, r3
 80135cc:	d006      	beq.n	80135dc <std+0x48>
 80135ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80135d2:	4294      	cmp	r4, r2
 80135d4:	d002      	beq.n	80135dc <std+0x48>
 80135d6:	33d0      	adds	r3, #208	; 0xd0
 80135d8:	429c      	cmp	r4, r3
 80135da:	d105      	bne.n	80135e8 <std+0x54>
 80135dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80135e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135e4:	f000 ba56 	b.w	8013a94 <__retarget_lock_init_recursive>
 80135e8:	bd10      	pop	{r4, pc}
 80135ea:	bf00      	nop
 80135ec:	080137f5 	.word	0x080137f5
 80135f0:	08013817 	.word	0x08013817
 80135f4:	0801384f 	.word	0x0801384f
 80135f8:	08013873 	.word	0x08013873
 80135fc:	20006428 	.word	0x20006428

08013600 <stdio_exit_handler>:
 8013600:	4a02      	ldr	r2, [pc, #8]	; (801360c <stdio_exit_handler+0xc>)
 8013602:	4903      	ldr	r1, [pc, #12]	; (8013610 <stdio_exit_handler+0x10>)
 8013604:	4803      	ldr	r0, [pc, #12]	; (8013614 <stdio_exit_handler+0x14>)
 8013606:	f000 b869 	b.w	80136dc <_fwalk_sglue>
 801360a:	bf00      	nop
 801360c:	200002b4 	.word	0x200002b4
 8013610:	08014351 	.word	0x08014351
 8013614:	200002c0 	.word	0x200002c0

08013618 <cleanup_stdio>:
 8013618:	6841      	ldr	r1, [r0, #4]
 801361a:	4b0c      	ldr	r3, [pc, #48]	; (801364c <cleanup_stdio+0x34>)
 801361c:	b510      	push	{r4, lr}
 801361e:	4299      	cmp	r1, r3
 8013620:	4604      	mov	r4, r0
 8013622:	d001      	beq.n	8013628 <cleanup_stdio+0x10>
 8013624:	f000 fe94 	bl	8014350 <_fflush_r>
 8013628:	68a1      	ldr	r1, [r4, #8]
 801362a:	4b09      	ldr	r3, [pc, #36]	; (8013650 <cleanup_stdio+0x38>)
 801362c:	4299      	cmp	r1, r3
 801362e:	d002      	beq.n	8013636 <cleanup_stdio+0x1e>
 8013630:	4620      	mov	r0, r4
 8013632:	f000 fe8d 	bl	8014350 <_fflush_r>
 8013636:	68e1      	ldr	r1, [r4, #12]
 8013638:	4b06      	ldr	r3, [pc, #24]	; (8013654 <cleanup_stdio+0x3c>)
 801363a:	4299      	cmp	r1, r3
 801363c:	d004      	beq.n	8013648 <cleanup_stdio+0x30>
 801363e:	4620      	mov	r0, r4
 8013640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013644:	f000 be84 	b.w	8014350 <_fflush_r>
 8013648:	bd10      	pop	{r4, pc}
 801364a:	bf00      	nop
 801364c:	20006428 	.word	0x20006428
 8013650:	20006490 	.word	0x20006490
 8013654:	200064f8 	.word	0x200064f8

08013658 <global_stdio_init.part.0>:
 8013658:	b510      	push	{r4, lr}
 801365a:	4b0b      	ldr	r3, [pc, #44]	; (8013688 <global_stdio_init.part.0+0x30>)
 801365c:	4c0b      	ldr	r4, [pc, #44]	; (801368c <global_stdio_init.part.0+0x34>)
 801365e:	4a0c      	ldr	r2, [pc, #48]	; (8013690 <global_stdio_init.part.0+0x38>)
 8013660:	4620      	mov	r0, r4
 8013662:	601a      	str	r2, [r3, #0]
 8013664:	2104      	movs	r1, #4
 8013666:	2200      	movs	r2, #0
 8013668:	f7ff ff94 	bl	8013594 <std>
 801366c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013670:	2201      	movs	r2, #1
 8013672:	2109      	movs	r1, #9
 8013674:	f7ff ff8e 	bl	8013594 <std>
 8013678:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801367c:	2202      	movs	r2, #2
 801367e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013682:	2112      	movs	r1, #18
 8013684:	f7ff bf86 	b.w	8013594 <std>
 8013688:	20006560 	.word	0x20006560
 801368c:	20006428 	.word	0x20006428
 8013690:	08013601 	.word	0x08013601

08013694 <__sfp_lock_acquire>:
 8013694:	4801      	ldr	r0, [pc, #4]	; (801369c <__sfp_lock_acquire+0x8>)
 8013696:	f000 b9fe 	b.w	8013a96 <__retarget_lock_acquire_recursive>
 801369a:	bf00      	nop
 801369c:	20006569 	.word	0x20006569

080136a0 <__sfp_lock_release>:
 80136a0:	4801      	ldr	r0, [pc, #4]	; (80136a8 <__sfp_lock_release+0x8>)
 80136a2:	f000 b9f9 	b.w	8013a98 <__retarget_lock_release_recursive>
 80136a6:	bf00      	nop
 80136a8:	20006569 	.word	0x20006569

080136ac <__sinit>:
 80136ac:	b510      	push	{r4, lr}
 80136ae:	4604      	mov	r4, r0
 80136b0:	f7ff fff0 	bl	8013694 <__sfp_lock_acquire>
 80136b4:	6a23      	ldr	r3, [r4, #32]
 80136b6:	b11b      	cbz	r3, 80136c0 <__sinit+0x14>
 80136b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136bc:	f7ff bff0 	b.w	80136a0 <__sfp_lock_release>
 80136c0:	4b04      	ldr	r3, [pc, #16]	; (80136d4 <__sinit+0x28>)
 80136c2:	6223      	str	r3, [r4, #32]
 80136c4:	4b04      	ldr	r3, [pc, #16]	; (80136d8 <__sinit+0x2c>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d1f5      	bne.n	80136b8 <__sinit+0xc>
 80136cc:	f7ff ffc4 	bl	8013658 <global_stdio_init.part.0>
 80136d0:	e7f2      	b.n	80136b8 <__sinit+0xc>
 80136d2:	bf00      	nop
 80136d4:	08013619 	.word	0x08013619
 80136d8:	20006560 	.word	0x20006560

080136dc <_fwalk_sglue>:
 80136dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136e0:	4607      	mov	r7, r0
 80136e2:	4688      	mov	r8, r1
 80136e4:	4614      	mov	r4, r2
 80136e6:	2600      	movs	r6, #0
 80136e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136ec:	f1b9 0901 	subs.w	r9, r9, #1
 80136f0:	d505      	bpl.n	80136fe <_fwalk_sglue+0x22>
 80136f2:	6824      	ldr	r4, [r4, #0]
 80136f4:	2c00      	cmp	r4, #0
 80136f6:	d1f7      	bne.n	80136e8 <_fwalk_sglue+0xc>
 80136f8:	4630      	mov	r0, r6
 80136fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136fe:	89ab      	ldrh	r3, [r5, #12]
 8013700:	2b01      	cmp	r3, #1
 8013702:	d907      	bls.n	8013714 <_fwalk_sglue+0x38>
 8013704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013708:	3301      	adds	r3, #1
 801370a:	d003      	beq.n	8013714 <_fwalk_sglue+0x38>
 801370c:	4629      	mov	r1, r5
 801370e:	4638      	mov	r0, r7
 8013710:	47c0      	blx	r8
 8013712:	4306      	orrs	r6, r0
 8013714:	3568      	adds	r5, #104	; 0x68
 8013716:	e7e9      	b.n	80136ec <_fwalk_sglue+0x10>

08013718 <iprintf>:
 8013718:	b40f      	push	{r0, r1, r2, r3}
 801371a:	b507      	push	{r0, r1, r2, lr}
 801371c:	4906      	ldr	r1, [pc, #24]	; (8013738 <iprintf+0x20>)
 801371e:	ab04      	add	r3, sp, #16
 8013720:	6808      	ldr	r0, [r1, #0]
 8013722:	f853 2b04 	ldr.w	r2, [r3], #4
 8013726:	6881      	ldr	r1, [r0, #8]
 8013728:	9301      	str	r3, [sp, #4]
 801372a:	f000 fae1 	bl	8013cf0 <_vfiprintf_r>
 801372e:	b003      	add	sp, #12
 8013730:	f85d eb04 	ldr.w	lr, [sp], #4
 8013734:	b004      	add	sp, #16
 8013736:	4770      	bx	lr
 8013738:	2000030c 	.word	0x2000030c

0801373c <_puts_r>:
 801373c:	6a03      	ldr	r3, [r0, #32]
 801373e:	b570      	push	{r4, r5, r6, lr}
 8013740:	4605      	mov	r5, r0
 8013742:	460e      	mov	r6, r1
 8013744:	6884      	ldr	r4, [r0, #8]
 8013746:	b90b      	cbnz	r3, 801374c <_puts_r+0x10>
 8013748:	f7ff ffb0 	bl	80136ac <__sinit>
 801374c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801374e:	07db      	lsls	r3, r3, #31
 8013750:	d405      	bmi.n	801375e <_puts_r+0x22>
 8013752:	89a3      	ldrh	r3, [r4, #12]
 8013754:	0598      	lsls	r0, r3, #22
 8013756:	d402      	bmi.n	801375e <_puts_r+0x22>
 8013758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801375a:	f000 f99c 	bl	8013a96 <__retarget_lock_acquire_recursive>
 801375e:	89a3      	ldrh	r3, [r4, #12]
 8013760:	0719      	lsls	r1, r3, #28
 8013762:	d513      	bpl.n	801378c <_puts_r+0x50>
 8013764:	6923      	ldr	r3, [r4, #16]
 8013766:	b18b      	cbz	r3, 801378c <_puts_r+0x50>
 8013768:	3e01      	subs	r6, #1
 801376a:	68a3      	ldr	r3, [r4, #8]
 801376c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013770:	3b01      	subs	r3, #1
 8013772:	60a3      	str	r3, [r4, #8]
 8013774:	b9e9      	cbnz	r1, 80137b2 <_puts_r+0x76>
 8013776:	2b00      	cmp	r3, #0
 8013778:	da2e      	bge.n	80137d8 <_puts_r+0x9c>
 801377a:	4622      	mov	r2, r4
 801377c:	210a      	movs	r1, #10
 801377e:	4628      	mov	r0, r5
 8013780:	f000 f87b 	bl	801387a <__swbuf_r>
 8013784:	3001      	adds	r0, #1
 8013786:	d007      	beq.n	8013798 <_puts_r+0x5c>
 8013788:	250a      	movs	r5, #10
 801378a:	e007      	b.n	801379c <_puts_r+0x60>
 801378c:	4621      	mov	r1, r4
 801378e:	4628      	mov	r0, r5
 8013790:	f000 f8b0 	bl	80138f4 <__swsetup_r>
 8013794:	2800      	cmp	r0, #0
 8013796:	d0e7      	beq.n	8013768 <_puts_r+0x2c>
 8013798:	f04f 35ff 	mov.w	r5, #4294967295
 801379c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801379e:	07da      	lsls	r2, r3, #31
 80137a0:	d405      	bmi.n	80137ae <_puts_r+0x72>
 80137a2:	89a3      	ldrh	r3, [r4, #12]
 80137a4:	059b      	lsls	r3, r3, #22
 80137a6:	d402      	bmi.n	80137ae <_puts_r+0x72>
 80137a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80137aa:	f000 f975 	bl	8013a98 <__retarget_lock_release_recursive>
 80137ae:	4628      	mov	r0, r5
 80137b0:	bd70      	pop	{r4, r5, r6, pc}
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	da04      	bge.n	80137c0 <_puts_r+0x84>
 80137b6:	69a2      	ldr	r2, [r4, #24]
 80137b8:	429a      	cmp	r2, r3
 80137ba:	dc06      	bgt.n	80137ca <_puts_r+0x8e>
 80137bc:	290a      	cmp	r1, #10
 80137be:	d004      	beq.n	80137ca <_puts_r+0x8e>
 80137c0:	6823      	ldr	r3, [r4, #0]
 80137c2:	1c5a      	adds	r2, r3, #1
 80137c4:	6022      	str	r2, [r4, #0]
 80137c6:	7019      	strb	r1, [r3, #0]
 80137c8:	e7cf      	b.n	801376a <_puts_r+0x2e>
 80137ca:	4622      	mov	r2, r4
 80137cc:	4628      	mov	r0, r5
 80137ce:	f000 f854 	bl	801387a <__swbuf_r>
 80137d2:	3001      	adds	r0, #1
 80137d4:	d1c9      	bne.n	801376a <_puts_r+0x2e>
 80137d6:	e7df      	b.n	8013798 <_puts_r+0x5c>
 80137d8:	250a      	movs	r5, #10
 80137da:	6823      	ldr	r3, [r4, #0]
 80137dc:	1c5a      	adds	r2, r3, #1
 80137de:	6022      	str	r2, [r4, #0]
 80137e0:	701d      	strb	r5, [r3, #0]
 80137e2:	e7db      	b.n	801379c <_puts_r+0x60>

080137e4 <puts>:
 80137e4:	4b02      	ldr	r3, [pc, #8]	; (80137f0 <puts+0xc>)
 80137e6:	4601      	mov	r1, r0
 80137e8:	6818      	ldr	r0, [r3, #0]
 80137ea:	f7ff bfa7 	b.w	801373c <_puts_r>
 80137ee:	bf00      	nop
 80137f0:	2000030c 	.word	0x2000030c

080137f4 <__sread>:
 80137f4:	b510      	push	{r4, lr}
 80137f6:	460c      	mov	r4, r1
 80137f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137fc:	f000 f8fc 	bl	80139f8 <_read_r>
 8013800:	2800      	cmp	r0, #0
 8013802:	bfab      	itete	ge
 8013804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013806:	89a3      	ldrhlt	r3, [r4, #12]
 8013808:	181b      	addge	r3, r3, r0
 801380a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801380e:	bfac      	ite	ge
 8013810:	6563      	strge	r3, [r4, #84]	; 0x54
 8013812:	81a3      	strhlt	r3, [r4, #12]
 8013814:	bd10      	pop	{r4, pc}

08013816 <__swrite>:
 8013816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801381a:	461f      	mov	r7, r3
 801381c:	898b      	ldrh	r3, [r1, #12]
 801381e:	4605      	mov	r5, r0
 8013820:	05db      	lsls	r3, r3, #23
 8013822:	460c      	mov	r4, r1
 8013824:	4616      	mov	r6, r2
 8013826:	d505      	bpl.n	8013834 <__swrite+0x1e>
 8013828:	2302      	movs	r3, #2
 801382a:	2200      	movs	r2, #0
 801382c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013830:	f000 f8d0 	bl	80139d4 <_lseek_r>
 8013834:	89a3      	ldrh	r3, [r4, #12]
 8013836:	4632      	mov	r2, r6
 8013838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801383c:	81a3      	strh	r3, [r4, #12]
 801383e:	4628      	mov	r0, r5
 8013840:	463b      	mov	r3, r7
 8013842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801384a:	f000 b8e7 	b.w	8013a1c <_write_r>

0801384e <__sseek>:
 801384e:	b510      	push	{r4, lr}
 8013850:	460c      	mov	r4, r1
 8013852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013856:	f000 f8bd 	bl	80139d4 <_lseek_r>
 801385a:	1c43      	adds	r3, r0, #1
 801385c:	89a3      	ldrh	r3, [r4, #12]
 801385e:	bf15      	itete	ne
 8013860:	6560      	strne	r0, [r4, #84]	; 0x54
 8013862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801386a:	81a3      	strheq	r3, [r4, #12]
 801386c:	bf18      	it	ne
 801386e:	81a3      	strhne	r3, [r4, #12]
 8013870:	bd10      	pop	{r4, pc}

08013872 <__sclose>:
 8013872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013876:	f000 b89d 	b.w	80139b4 <_close_r>

0801387a <__swbuf_r>:
 801387a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801387c:	460e      	mov	r6, r1
 801387e:	4614      	mov	r4, r2
 8013880:	4605      	mov	r5, r0
 8013882:	b118      	cbz	r0, 801388c <__swbuf_r+0x12>
 8013884:	6a03      	ldr	r3, [r0, #32]
 8013886:	b90b      	cbnz	r3, 801388c <__swbuf_r+0x12>
 8013888:	f7ff ff10 	bl	80136ac <__sinit>
 801388c:	69a3      	ldr	r3, [r4, #24]
 801388e:	60a3      	str	r3, [r4, #8]
 8013890:	89a3      	ldrh	r3, [r4, #12]
 8013892:	071a      	lsls	r2, r3, #28
 8013894:	d525      	bpl.n	80138e2 <__swbuf_r+0x68>
 8013896:	6923      	ldr	r3, [r4, #16]
 8013898:	b31b      	cbz	r3, 80138e2 <__swbuf_r+0x68>
 801389a:	6823      	ldr	r3, [r4, #0]
 801389c:	6922      	ldr	r2, [r4, #16]
 801389e:	b2f6      	uxtb	r6, r6
 80138a0:	1a98      	subs	r0, r3, r2
 80138a2:	6963      	ldr	r3, [r4, #20]
 80138a4:	4637      	mov	r7, r6
 80138a6:	4283      	cmp	r3, r0
 80138a8:	dc04      	bgt.n	80138b4 <__swbuf_r+0x3a>
 80138aa:	4621      	mov	r1, r4
 80138ac:	4628      	mov	r0, r5
 80138ae:	f000 fd4f 	bl	8014350 <_fflush_r>
 80138b2:	b9e0      	cbnz	r0, 80138ee <__swbuf_r+0x74>
 80138b4:	68a3      	ldr	r3, [r4, #8]
 80138b6:	3b01      	subs	r3, #1
 80138b8:	60a3      	str	r3, [r4, #8]
 80138ba:	6823      	ldr	r3, [r4, #0]
 80138bc:	1c5a      	adds	r2, r3, #1
 80138be:	6022      	str	r2, [r4, #0]
 80138c0:	701e      	strb	r6, [r3, #0]
 80138c2:	6962      	ldr	r2, [r4, #20]
 80138c4:	1c43      	adds	r3, r0, #1
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d004      	beq.n	80138d4 <__swbuf_r+0x5a>
 80138ca:	89a3      	ldrh	r3, [r4, #12]
 80138cc:	07db      	lsls	r3, r3, #31
 80138ce:	d506      	bpl.n	80138de <__swbuf_r+0x64>
 80138d0:	2e0a      	cmp	r6, #10
 80138d2:	d104      	bne.n	80138de <__swbuf_r+0x64>
 80138d4:	4621      	mov	r1, r4
 80138d6:	4628      	mov	r0, r5
 80138d8:	f000 fd3a 	bl	8014350 <_fflush_r>
 80138dc:	b938      	cbnz	r0, 80138ee <__swbuf_r+0x74>
 80138de:	4638      	mov	r0, r7
 80138e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138e2:	4621      	mov	r1, r4
 80138e4:	4628      	mov	r0, r5
 80138e6:	f000 f805 	bl	80138f4 <__swsetup_r>
 80138ea:	2800      	cmp	r0, #0
 80138ec:	d0d5      	beq.n	801389a <__swbuf_r+0x20>
 80138ee:	f04f 37ff 	mov.w	r7, #4294967295
 80138f2:	e7f4      	b.n	80138de <__swbuf_r+0x64>

080138f4 <__swsetup_r>:
 80138f4:	b538      	push	{r3, r4, r5, lr}
 80138f6:	4b2a      	ldr	r3, [pc, #168]	; (80139a0 <__swsetup_r+0xac>)
 80138f8:	4605      	mov	r5, r0
 80138fa:	6818      	ldr	r0, [r3, #0]
 80138fc:	460c      	mov	r4, r1
 80138fe:	b118      	cbz	r0, 8013908 <__swsetup_r+0x14>
 8013900:	6a03      	ldr	r3, [r0, #32]
 8013902:	b90b      	cbnz	r3, 8013908 <__swsetup_r+0x14>
 8013904:	f7ff fed2 	bl	80136ac <__sinit>
 8013908:	89a3      	ldrh	r3, [r4, #12]
 801390a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801390e:	0718      	lsls	r0, r3, #28
 8013910:	d422      	bmi.n	8013958 <__swsetup_r+0x64>
 8013912:	06d9      	lsls	r1, r3, #27
 8013914:	d407      	bmi.n	8013926 <__swsetup_r+0x32>
 8013916:	2309      	movs	r3, #9
 8013918:	602b      	str	r3, [r5, #0]
 801391a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801391e:	f04f 30ff 	mov.w	r0, #4294967295
 8013922:	81a3      	strh	r3, [r4, #12]
 8013924:	e034      	b.n	8013990 <__swsetup_r+0x9c>
 8013926:	0758      	lsls	r0, r3, #29
 8013928:	d512      	bpl.n	8013950 <__swsetup_r+0x5c>
 801392a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801392c:	b141      	cbz	r1, 8013940 <__swsetup_r+0x4c>
 801392e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013932:	4299      	cmp	r1, r3
 8013934:	d002      	beq.n	801393c <__swsetup_r+0x48>
 8013936:	4628      	mov	r0, r5
 8013938:	f000 f8be 	bl	8013ab8 <_free_r>
 801393c:	2300      	movs	r3, #0
 801393e:	6363      	str	r3, [r4, #52]	; 0x34
 8013940:	89a3      	ldrh	r3, [r4, #12]
 8013942:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013946:	81a3      	strh	r3, [r4, #12]
 8013948:	2300      	movs	r3, #0
 801394a:	6063      	str	r3, [r4, #4]
 801394c:	6923      	ldr	r3, [r4, #16]
 801394e:	6023      	str	r3, [r4, #0]
 8013950:	89a3      	ldrh	r3, [r4, #12]
 8013952:	f043 0308 	orr.w	r3, r3, #8
 8013956:	81a3      	strh	r3, [r4, #12]
 8013958:	6923      	ldr	r3, [r4, #16]
 801395a:	b94b      	cbnz	r3, 8013970 <__swsetup_r+0x7c>
 801395c:	89a3      	ldrh	r3, [r4, #12]
 801395e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013966:	d003      	beq.n	8013970 <__swsetup_r+0x7c>
 8013968:	4621      	mov	r1, r4
 801396a:	4628      	mov	r0, r5
 801396c:	f000 fd3d 	bl	80143ea <__smakebuf_r>
 8013970:	89a0      	ldrh	r0, [r4, #12]
 8013972:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013976:	f010 0301 	ands.w	r3, r0, #1
 801397a:	d00a      	beq.n	8013992 <__swsetup_r+0x9e>
 801397c:	2300      	movs	r3, #0
 801397e:	60a3      	str	r3, [r4, #8]
 8013980:	6963      	ldr	r3, [r4, #20]
 8013982:	425b      	negs	r3, r3
 8013984:	61a3      	str	r3, [r4, #24]
 8013986:	6923      	ldr	r3, [r4, #16]
 8013988:	b943      	cbnz	r3, 801399c <__swsetup_r+0xa8>
 801398a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801398e:	d1c4      	bne.n	801391a <__swsetup_r+0x26>
 8013990:	bd38      	pop	{r3, r4, r5, pc}
 8013992:	0781      	lsls	r1, r0, #30
 8013994:	bf58      	it	pl
 8013996:	6963      	ldrpl	r3, [r4, #20]
 8013998:	60a3      	str	r3, [r4, #8]
 801399a:	e7f4      	b.n	8013986 <__swsetup_r+0x92>
 801399c:	2000      	movs	r0, #0
 801399e:	e7f7      	b.n	8013990 <__swsetup_r+0x9c>
 80139a0:	2000030c 	.word	0x2000030c

080139a4 <memset>:
 80139a4:	4603      	mov	r3, r0
 80139a6:	4402      	add	r2, r0
 80139a8:	4293      	cmp	r3, r2
 80139aa:	d100      	bne.n	80139ae <memset+0xa>
 80139ac:	4770      	bx	lr
 80139ae:	f803 1b01 	strb.w	r1, [r3], #1
 80139b2:	e7f9      	b.n	80139a8 <memset+0x4>

080139b4 <_close_r>:
 80139b4:	b538      	push	{r3, r4, r5, lr}
 80139b6:	2300      	movs	r3, #0
 80139b8:	4d05      	ldr	r5, [pc, #20]	; (80139d0 <_close_r+0x1c>)
 80139ba:	4604      	mov	r4, r0
 80139bc:	4608      	mov	r0, r1
 80139be:	602b      	str	r3, [r5, #0]
 80139c0:	f7f5 fb9f 	bl	8009102 <_close>
 80139c4:	1c43      	adds	r3, r0, #1
 80139c6:	d102      	bne.n	80139ce <_close_r+0x1a>
 80139c8:	682b      	ldr	r3, [r5, #0]
 80139ca:	b103      	cbz	r3, 80139ce <_close_r+0x1a>
 80139cc:	6023      	str	r3, [r4, #0]
 80139ce:	bd38      	pop	{r3, r4, r5, pc}
 80139d0:	20006564 	.word	0x20006564

080139d4 <_lseek_r>:
 80139d4:	b538      	push	{r3, r4, r5, lr}
 80139d6:	4604      	mov	r4, r0
 80139d8:	4608      	mov	r0, r1
 80139da:	4611      	mov	r1, r2
 80139dc:	2200      	movs	r2, #0
 80139de:	4d05      	ldr	r5, [pc, #20]	; (80139f4 <_lseek_r+0x20>)
 80139e0:	602a      	str	r2, [r5, #0]
 80139e2:	461a      	mov	r2, r3
 80139e4:	f7f5 fbb1 	bl	800914a <_lseek>
 80139e8:	1c43      	adds	r3, r0, #1
 80139ea:	d102      	bne.n	80139f2 <_lseek_r+0x1e>
 80139ec:	682b      	ldr	r3, [r5, #0]
 80139ee:	b103      	cbz	r3, 80139f2 <_lseek_r+0x1e>
 80139f0:	6023      	str	r3, [r4, #0]
 80139f2:	bd38      	pop	{r3, r4, r5, pc}
 80139f4:	20006564 	.word	0x20006564

080139f8 <_read_r>:
 80139f8:	b538      	push	{r3, r4, r5, lr}
 80139fa:	4604      	mov	r4, r0
 80139fc:	4608      	mov	r0, r1
 80139fe:	4611      	mov	r1, r2
 8013a00:	2200      	movs	r2, #0
 8013a02:	4d05      	ldr	r5, [pc, #20]	; (8013a18 <_read_r+0x20>)
 8013a04:	602a      	str	r2, [r5, #0]
 8013a06:	461a      	mov	r2, r3
 8013a08:	f7f5 fb5e 	bl	80090c8 <_read>
 8013a0c:	1c43      	adds	r3, r0, #1
 8013a0e:	d102      	bne.n	8013a16 <_read_r+0x1e>
 8013a10:	682b      	ldr	r3, [r5, #0]
 8013a12:	b103      	cbz	r3, 8013a16 <_read_r+0x1e>
 8013a14:	6023      	str	r3, [r4, #0]
 8013a16:	bd38      	pop	{r3, r4, r5, pc}
 8013a18:	20006564 	.word	0x20006564

08013a1c <_write_r>:
 8013a1c:	b538      	push	{r3, r4, r5, lr}
 8013a1e:	4604      	mov	r4, r0
 8013a20:	4608      	mov	r0, r1
 8013a22:	4611      	mov	r1, r2
 8013a24:	2200      	movs	r2, #0
 8013a26:	4d05      	ldr	r5, [pc, #20]	; (8013a3c <_write_r+0x20>)
 8013a28:	602a      	str	r2, [r5, #0]
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	f7f1 fe44 	bl	80056b8 <_write>
 8013a30:	1c43      	adds	r3, r0, #1
 8013a32:	d102      	bne.n	8013a3a <_write_r+0x1e>
 8013a34:	682b      	ldr	r3, [r5, #0]
 8013a36:	b103      	cbz	r3, 8013a3a <_write_r+0x1e>
 8013a38:	6023      	str	r3, [r4, #0]
 8013a3a:	bd38      	pop	{r3, r4, r5, pc}
 8013a3c:	20006564 	.word	0x20006564

08013a40 <__errno>:
 8013a40:	4b01      	ldr	r3, [pc, #4]	; (8013a48 <__errno+0x8>)
 8013a42:	6818      	ldr	r0, [r3, #0]
 8013a44:	4770      	bx	lr
 8013a46:	bf00      	nop
 8013a48:	2000030c 	.word	0x2000030c

08013a4c <__libc_init_array>:
 8013a4c:	b570      	push	{r4, r5, r6, lr}
 8013a4e:	2600      	movs	r6, #0
 8013a50:	4d0c      	ldr	r5, [pc, #48]	; (8013a84 <__libc_init_array+0x38>)
 8013a52:	4c0d      	ldr	r4, [pc, #52]	; (8013a88 <__libc_init_array+0x3c>)
 8013a54:	1b64      	subs	r4, r4, r5
 8013a56:	10a4      	asrs	r4, r4, #2
 8013a58:	42a6      	cmp	r6, r4
 8013a5a:	d109      	bne.n	8013a70 <__libc_init_array+0x24>
 8013a5c:	f000 fd42 	bl	80144e4 <_init>
 8013a60:	2600      	movs	r6, #0
 8013a62:	4d0a      	ldr	r5, [pc, #40]	; (8013a8c <__libc_init_array+0x40>)
 8013a64:	4c0a      	ldr	r4, [pc, #40]	; (8013a90 <__libc_init_array+0x44>)
 8013a66:	1b64      	subs	r4, r4, r5
 8013a68:	10a4      	asrs	r4, r4, #2
 8013a6a:	42a6      	cmp	r6, r4
 8013a6c:	d105      	bne.n	8013a7a <__libc_init_array+0x2e>
 8013a6e:	bd70      	pop	{r4, r5, r6, pc}
 8013a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a74:	4798      	blx	r3
 8013a76:	3601      	adds	r6, #1
 8013a78:	e7ee      	b.n	8013a58 <__libc_init_array+0xc>
 8013a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a7e:	4798      	blx	r3
 8013a80:	3601      	adds	r6, #1
 8013a82:	e7f2      	b.n	8013a6a <__libc_init_array+0x1e>
 8013a84:	0801527c 	.word	0x0801527c
 8013a88:	0801527c 	.word	0x0801527c
 8013a8c:	0801527c 	.word	0x0801527c
 8013a90:	08015280 	.word	0x08015280

08013a94 <__retarget_lock_init_recursive>:
 8013a94:	4770      	bx	lr

08013a96 <__retarget_lock_acquire_recursive>:
 8013a96:	4770      	bx	lr

08013a98 <__retarget_lock_release_recursive>:
 8013a98:	4770      	bx	lr

08013a9a <memcpy>:
 8013a9a:	440a      	add	r2, r1
 8013a9c:	4291      	cmp	r1, r2
 8013a9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013aa2:	d100      	bne.n	8013aa6 <memcpy+0xc>
 8013aa4:	4770      	bx	lr
 8013aa6:	b510      	push	{r4, lr}
 8013aa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013aac:	4291      	cmp	r1, r2
 8013aae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ab2:	d1f9      	bne.n	8013aa8 <memcpy+0xe>
 8013ab4:	bd10      	pop	{r4, pc}
	...

08013ab8 <_free_r>:
 8013ab8:	b538      	push	{r3, r4, r5, lr}
 8013aba:	4605      	mov	r5, r0
 8013abc:	2900      	cmp	r1, #0
 8013abe:	d040      	beq.n	8013b42 <_free_r+0x8a>
 8013ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ac4:	1f0c      	subs	r4, r1, #4
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	bfb8      	it	lt
 8013aca:	18e4      	addlt	r4, r4, r3
 8013acc:	f000 f8dc 	bl	8013c88 <__malloc_lock>
 8013ad0:	4a1c      	ldr	r2, [pc, #112]	; (8013b44 <_free_r+0x8c>)
 8013ad2:	6813      	ldr	r3, [r2, #0]
 8013ad4:	b933      	cbnz	r3, 8013ae4 <_free_r+0x2c>
 8013ad6:	6063      	str	r3, [r4, #4]
 8013ad8:	6014      	str	r4, [r2, #0]
 8013ada:	4628      	mov	r0, r5
 8013adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ae0:	f000 b8d8 	b.w	8013c94 <__malloc_unlock>
 8013ae4:	42a3      	cmp	r3, r4
 8013ae6:	d908      	bls.n	8013afa <_free_r+0x42>
 8013ae8:	6820      	ldr	r0, [r4, #0]
 8013aea:	1821      	adds	r1, r4, r0
 8013aec:	428b      	cmp	r3, r1
 8013aee:	bf01      	itttt	eq
 8013af0:	6819      	ldreq	r1, [r3, #0]
 8013af2:	685b      	ldreq	r3, [r3, #4]
 8013af4:	1809      	addeq	r1, r1, r0
 8013af6:	6021      	streq	r1, [r4, #0]
 8013af8:	e7ed      	b.n	8013ad6 <_free_r+0x1e>
 8013afa:	461a      	mov	r2, r3
 8013afc:	685b      	ldr	r3, [r3, #4]
 8013afe:	b10b      	cbz	r3, 8013b04 <_free_r+0x4c>
 8013b00:	42a3      	cmp	r3, r4
 8013b02:	d9fa      	bls.n	8013afa <_free_r+0x42>
 8013b04:	6811      	ldr	r1, [r2, #0]
 8013b06:	1850      	adds	r0, r2, r1
 8013b08:	42a0      	cmp	r0, r4
 8013b0a:	d10b      	bne.n	8013b24 <_free_r+0x6c>
 8013b0c:	6820      	ldr	r0, [r4, #0]
 8013b0e:	4401      	add	r1, r0
 8013b10:	1850      	adds	r0, r2, r1
 8013b12:	4283      	cmp	r3, r0
 8013b14:	6011      	str	r1, [r2, #0]
 8013b16:	d1e0      	bne.n	8013ada <_free_r+0x22>
 8013b18:	6818      	ldr	r0, [r3, #0]
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	4408      	add	r0, r1
 8013b1e:	6010      	str	r0, [r2, #0]
 8013b20:	6053      	str	r3, [r2, #4]
 8013b22:	e7da      	b.n	8013ada <_free_r+0x22>
 8013b24:	d902      	bls.n	8013b2c <_free_r+0x74>
 8013b26:	230c      	movs	r3, #12
 8013b28:	602b      	str	r3, [r5, #0]
 8013b2a:	e7d6      	b.n	8013ada <_free_r+0x22>
 8013b2c:	6820      	ldr	r0, [r4, #0]
 8013b2e:	1821      	adds	r1, r4, r0
 8013b30:	428b      	cmp	r3, r1
 8013b32:	bf01      	itttt	eq
 8013b34:	6819      	ldreq	r1, [r3, #0]
 8013b36:	685b      	ldreq	r3, [r3, #4]
 8013b38:	1809      	addeq	r1, r1, r0
 8013b3a:	6021      	streq	r1, [r4, #0]
 8013b3c:	6063      	str	r3, [r4, #4]
 8013b3e:	6054      	str	r4, [r2, #4]
 8013b40:	e7cb      	b.n	8013ada <_free_r+0x22>
 8013b42:	bd38      	pop	{r3, r4, r5, pc}
 8013b44:	2000656c 	.word	0x2000656c

08013b48 <sbrk_aligned>:
 8013b48:	b570      	push	{r4, r5, r6, lr}
 8013b4a:	4e0e      	ldr	r6, [pc, #56]	; (8013b84 <sbrk_aligned+0x3c>)
 8013b4c:	460c      	mov	r4, r1
 8013b4e:	6831      	ldr	r1, [r6, #0]
 8013b50:	4605      	mov	r5, r0
 8013b52:	b911      	cbnz	r1, 8013b5a <sbrk_aligned+0x12>
 8013b54:	f000 fca8 	bl	80144a8 <_sbrk_r>
 8013b58:	6030      	str	r0, [r6, #0]
 8013b5a:	4621      	mov	r1, r4
 8013b5c:	4628      	mov	r0, r5
 8013b5e:	f000 fca3 	bl	80144a8 <_sbrk_r>
 8013b62:	1c43      	adds	r3, r0, #1
 8013b64:	d00a      	beq.n	8013b7c <sbrk_aligned+0x34>
 8013b66:	1cc4      	adds	r4, r0, #3
 8013b68:	f024 0403 	bic.w	r4, r4, #3
 8013b6c:	42a0      	cmp	r0, r4
 8013b6e:	d007      	beq.n	8013b80 <sbrk_aligned+0x38>
 8013b70:	1a21      	subs	r1, r4, r0
 8013b72:	4628      	mov	r0, r5
 8013b74:	f000 fc98 	bl	80144a8 <_sbrk_r>
 8013b78:	3001      	adds	r0, #1
 8013b7a:	d101      	bne.n	8013b80 <sbrk_aligned+0x38>
 8013b7c:	f04f 34ff 	mov.w	r4, #4294967295
 8013b80:	4620      	mov	r0, r4
 8013b82:	bd70      	pop	{r4, r5, r6, pc}
 8013b84:	20006570 	.word	0x20006570

08013b88 <_malloc_r>:
 8013b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b8c:	1ccd      	adds	r5, r1, #3
 8013b8e:	f025 0503 	bic.w	r5, r5, #3
 8013b92:	3508      	adds	r5, #8
 8013b94:	2d0c      	cmp	r5, #12
 8013b96:	bf38      	it	cc
 8013b98:	250c      	movcc	r5, #12
 8013b9a:	2d00      	cmp	r5, #0
 8013b9c:	4607      	mov	r7, r0
 8013b9e:	db01      	blt.n	8013ba4 <_malloc_r+0x1c>
 8013ba0:	42a9      	cmp	r1, r5
 8013ba2:	d905      	bls.n	8013bb0 <_malloc_r+0x28>
 8013ba4:	230c      	movs	r3, #12
 8013ba6:	2600      	movs	r6, #0
 8013ba8:	603b      	str	r3, [r7, #0]
 8013baa:	4630      	mov	r0, r6
 8013bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013bb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013c84 <_malloc_r+0xfc>
 8013bb4:	f000 f868 	bl	8013c88 <__malloc_lock>
 8013bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8013bbc:	461c      	mov	r4, r3
 8013bbe:	bb5c      	cbnz	r4, 8013c18 <_malloc_r+0x90>
 8013bc0:	4629      	mov	r1, r5
 8013bc2:	4638      	mov	r0, r7
 8013bc4:	f7ff ffc0 	bl	8013b48 <sbrk_aligned>
 8013bc8:	1c43      	adds	r3, r0, #1
 8013bca:	4604      	mov	r4, r0
 8013bcc:	d155      	bne.n	8013c7a <_malloc_r+0xf2>
 8013bce:	f8d8 4000 	ldr.w	r4, [r8]
 8013bd2:	4626      	mov	r6, r4
 8013bd4:	2e00      	cmp	r6, #0
 8013bd6:	d145      	bne.n	8013c64 <_malloc_r+0xdc>
 8013bd8:	2c00      	cmp	r4, #0
 8013bda:	d048      	beq.n	8013c6e <_malloc_r+0xe6>
 8013bdc:	6823      	ldr	r3, [r4, #0]
 8013bde:	4631      	mov	r1, r6
 8013be0:	4638      	mov	r0, r7
 8013be2:	eb04 0903 	add.w	r9, r4, r3
 8013be6:	f000 fc5f 	bl	80144a8 <_sbrk_r>
 8013bea:	4581      	cmp	r9, r0
 8013bec:	d13f      	bne.n	8013c6e <_malloc_r+0xe6>
 8013bee:	6821      	ldr	r1, [r4, #0]
 8013bf0:	4638      	mov	r0, r7
 8013bf2:	1a6d      	subs	r5, r5, r1
 8013bf4:	4629      	mov	r1, r5
 8013bf6:	f7ff ffa7 	bl	8013b48 <sbrk_aligned>
 8013bfa:	3001      	adds	r0, #1
 8013bfc:	d037      	beq.n	8013c6e <_malloc_r+0xe6>
 8013bfe:	6823      	ldr	r3, [r4, #0]
 8013c00:	442b      	add	r3, r5
 8013c02:	6023      	str	r3, [r4, #0]
 8013c04:	f8d8 3000 	ldr.w	r3, [r8]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d038      	beq.n	8013c7e <_malloc_r+0xf6>
 8013c0c:	685a      	ldr	r2, [r3, #4]
 8013c0e:	42a2      	cmp	r2, r4
 8013c10:	d12b      	bne.n	8013c6a <_malloc_r+0xe2>
 8013c12:	2200      	movs	r2, #0
 8013c14:	605a      	str	r2, [r3, #4]
 8013c16:	e00f      	b.n	8013c38 <_malloc_r+0xb0>
 8013c18:	6822      	ldr	r2, [r4, #0]
 8013c1a:	1b52      	subs	r2, r2, r5
 8013c1c:	d41f      	bmi.n	8013c5e <_malloc_r+0xd6>
 8013c1e:	2a0b      	cmp	r2, #11
 8013c20:	d917      	bls.n	8013c52 <_malloc_r+0xca>
 8013c22:	1961      	adds	r1, r4, r5
 8013c24:	42a3      	cmp	r3, r4
 8013c26:	6025      	str	r5, [r4, #0]
 8013c28:	bf18      	it	ne
 8013c2a:	6059      	strne	r1, [r3, #4]
 8013c2c:	6863      	ldr	r3, [r4, #4]
 8013c2e:	bf08      	it	eq
 8013c30:	f8c8 1000 	streq.w	r1, [r8]
 8013c34:	5162      	str	r2, [r4, r5]
 8013c36:	604b      	str	r3, [r1, #4]
 8013c38:	4638      	mov	r0, r7
 8013c3a:	f104 060b 	add.w	r6, r4, #11
 8013c3e:	f000 f829 	bl	8013c94 <__malloc_unlock>
 8013c42:	f026 0607 	bic.w	r6, r6, #7
 8013c46:	1d23      	adds	r3, r4, #4
 8013c48:	1af2      	subs	r2, r6, r3
 8013c4a:	d0ae      	beq.n	8013baa <_malloc_r+0x22>
 8013c4c:	1b9b      	subs	r3, r3, r6
 8013c4e:	50a3      	str	r3, [r4, r2]
 8013c50:	e7ab      	b.n	8013baa <_malloc_r+0x22>
 8013c52:	42a3      	cmp	r3, r4
 8013c54:	6862      	ldr	r2, [r4, #4]
 8013c56:	d1dd      	bne.n	8013c14 <_malloc_r+0x8c>
 8013c58:	f8c8 2000 	str.w	r2, [r8]
 8013c5c:	e7ec      	b.n	8013c38 <_malloc_r+0xb0>
 8013c5e:	4623      	mov	r3, r4
 8013c60:	6864      	ldr	r4, [r4, #4]
 8013c62:	e7ac      	b.n	8013bbe <_malloc_r+0x36>
 8013c64:	4634      	mov	r4, r6
 8013c66:	6876      	ldr	r6, [r6, #4]
 8013c68:	e7b4      	b.n	8013bd4 <_malloc_r+0x4c>
 8013c6a:	4613      	mov	r3, r2
 8013c6c:	e7cc      	b.n	8013c08 <_malloc_r+0x80>
 8013c6e:	230c      	movs	r3, #12
 8013c70:	4638      	mov	r0, r7
 8013c72:	603b      	str	r3, [r7, #0]
 8013c74:	f000 f80e 	bl	8013c94 <__malloc_unlock>
 8013c78:	e797      	b.n	8013baa <_malloc_r+0x22>
 8013c7a:	6025      	str	r5, [r4, #0]
 8013c7c:	e7dc      	b.n	8013c38 <_malloc_r+0xb0>
 8013c7e:	605b      	str	r3, [r3, #4]
 8013c80:	deff      	udf	#255	; 0xff
 8013c82:	bf00      	nop
 8013c84:	2000656c 	.word	0x2000656c

08013c88 <__malloc_lock>:
 8013c88:	4801      	ldr	r0, [pc, #4]	; (8013c90 <__malloc_lock+0x8>)
 8013c8a:	f7ff bf04 	b.w	8013a96 <__retarget_lock_acquire_recursive>
 8013c8e:	bf00      	nop
 8013c90:	20006568 	.word	0x20006568

08013c94 <__malloc_unlock>:
 8013c94:	4801      	ldr	r0, [pc, #4]	; (8013c9c <__malloc_unlock+0x8>)
 8013c96:	f7ff beff 	b.w	8013a98 <__retarget_lock_release_recursive>
 8013c9a:	bf00      	nop
 8013c9c:	20006568 	.word	0x20006568

08013ca0 <__sfputc_r>:
 8013ca0:	6893      	ldr	r3, [r2, #8]
 8013ca2:	b410      	push	{r4}
 8013ca4:	3b01      	subs	r3, #1
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	6093      	str	r3, [r2, #8]
 8013caa:	da07      	bge.n	8013cbc <__sfputc_r+0x1c>
 8013cac:	6994      	ldr	r4, [r2, #24]
 8013cae:	42a3      	cmp	r3, r4
 8013cb0:	db01      	blt.n	8013cb6 <__sfputc_r+0x16>
 8013cb2:	290a      	cmp	r1, #10
 8013cb4:	d102      	bne.n	8013cbc <__sfputc_r+0x1c>
 8013cb6:	bc10      	pop	{r4}
 8013cb8:	f7ff bddf 	b.w	801387a <__swbuf_r>
 8013cbc:	6813      	ldr	r3, [r2, #0]
 8013cbe:	1c58      	adds	r0, r3, #1
 8013cc0:	6010      	str	r0, [r2, #0]
 8013cc2:	7019      	strb	r1, [r3, #0]
 8013cc4:	4608      	mov	r0, r1
 8013cc6:	bc10      	pop	{r4}
 8013cc8:	4770      	bx	lr

08013cca <__sfputs_r>:
 8013cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ccc:	4606      	mov	r6, r0
 8013cce:	460f      	mov	r7, r1
 8013cd0:	4614      	mov	r4, r2
 8013cd2:	18d5      	adds	r5, r2, r3
 8013cd4:	42ac      	cmp	r4, r5
 8013cd6:	d101      	bne.n	8013cdc <__sfputs_r+0x12>
 8013cd8:	2000      	movs	r0, #0
 8013cda:	e007      	b.n	8013cec <__sfputs_r+0x22>
 8013cdc:	463a      	mov	r2, r7
 8013cde:	4630      	mov	r0, r6
 8013ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ce4:	f7ff ffdc 	bl	8013ca0 <__sfputc_r>
 8013ce8:	1c43      	adds	r3, r0, #1
 8013cea:	d1f3      	bne.n	8013cd4 <__sfputs_r+0xa>
 8013cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013cf0 <_vfiprintf_r>:
 8013cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cf4:	460d      	mov	r5, r1
 8013cf6:	4614      	mov	r4, r2
 8013cf8:	4698      	mov	r8, r3
 8013cfa:	4606      	mov	r6, r0
 8013cfc:	b09d      	sub	sp, #116	; 0x74
 8013cfe:	b118      	cbz	r0, 8013d08 <_vfiprintf_r+0x18>
 8013d00:	6a03      	ldr	r3, [r0, #32]
 8013d02:	b90b      	cbnz	r3, 8013d08 <_vfiprintf_r+0x18>
 8013d04:	f7ff fcd2 	bl	80136ac <__sinit>
 8013d08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d0a:	07d9      	lsls	r1, r3, #31
 8013d0c:	d405      	bmi.n	8013d1a <_vfiprintf_r+0x2a>
 8013d0e:	89ab      	ldrh	r3, [r5, #12]
 8013d10:	059a      	lsls	r2, r3, #22
 8013d12:	d402      	bmi.n	8013d1a <_vfiprintf_r+0x2a>
 8013d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d16:	f7ff febe 	bl	8013a96 <__retarget_lock_acquire_recursive>
 8013d1a:	89ab      	ldrh	r3, [r5, #12]
 8013d1c:	071b      	lsls	r3, r3, #28
 8013d1e:	d501      	bpl.n	8013d24 <_vfiprintf_r+0x34>
 8013d20:	692b      	ldr	r3, [r5, #16]
 8013d22:	b99b      	cbnz	r3, 8013d4c <_vfiprintf_r+0x5c>
 8013d24:	4629      	mov	r1, r5
 8013d26:	4630      	mov	r0, r6
 8013d28:	f7ff fde4 	bl	80138f4 <__swsetup_r>
 8013d2c:	b170      	cbz	r0, 8013d4c <_vfiprintf_r+0x5c>
 8013d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d30:	07dc      	lsls	r4, r3, #31
 8013d32:	d504      	bpl.n	8013d3e <_vfiprintf_r+0x4e>
 8013d34:	f04f 30ff 	mov.w	r0, #4294967295
 8013d38:	b01d      	add	sp, #116	; 0x74
 8013d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d3e:	89ab      	ldrh	r3, [r5, #12]
 8013d40:	0598      	lsls	r0, r3, #22
 8013d42:	d4f7      	bmi.n	8013d34 <_vfiprintf_r+0x44>
 8013d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d46:	f7ff fea7 	bl	8013a98 <__retarget_lock_release_recursive>
 8013d4a:	e7f3      	b.n	8013d34 <_vfiprintf_r+0x44>
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8013d50:	2320      	movs	r3, #32
 8013d52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d56:	2330      	movs	r3, #48	; 0x30
 8013d58:	f04f 0901 	mov.w	r9, #1
 8013d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d60:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8013f10 <_vfiprintf_r+0x220>
 8013d64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d68:	4623      	mov	r3, r4
 8013d6a:	469a      	mov	sl, r3
 8013d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d70:	b10a      	cbz	r2, 8013d76 <_vfiprintf_r+0x86>
 8013d72:	2a25      	cmp	r2, #37	; 0x25
 8013d74:	d1f9      	bne.n	8013d6a <_vfiprintf_r+0x7a>
 8013d76:	ebba 0b04 	subs.w	fp, sl, r4
 8013d7a:	d00b      	beq.n	8013d94 <_vfiprintf_r+0xa4>
 8013d7c:	465b      	mov	r3, fp
 8013d7e:	4622      	mov	r2, r4
 8013d80:	4629      	mov	r1, r5
 8013d82:	4630      	mov	r0, r6
 8013d84:	f7ff ffa1 	bl	8013cca <__sfputs_r>
 8013d88:	3001      	adds	r0, #1
 8013d8a:	f000 80a9 	beq.w	8013ee0 <_vfiprintf_r+0x1f0>
 8013d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d90:	445a      	add	r2, fp
 8013d92:	9209      	str	r2, [sp, #36]	; 0x24
 8013d94:	f89a 3000 	ldrb.w	r3, [sl]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	f000 80a1 	beq.w	8013ee0 <_vfiprintf_r+0x1f0>
 8013d9e:	2300      	movs	r3, #0
 8013da0:	f04f 32ff 	mov.w	r2, #4294967295
 8013da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013da8:	f10a 0a01 	add.w	sl, sl, #1
 8013dac:	9304      	str	r3, [sp, #16]
 8013dae:	9307      	str	r3, [sp, #28]
 8013db0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013db4:	931a      	str	r3, [sp, #104]	; 0x68
 8013db6:	4654      	mov	r4, sl
 8013db8:	2205      	movs	r2, #5
 8013dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dbe:	4854      	ldr	r0, [pc, #336]	; (8013f10 <_vfiprintf_r+0x220>)
 8013dc0:	f000 fb82 	bl	80144c8 <memchr>
 8013dc4:	9a04      	ldr	r2, [sp, #16]
 8013dc6:	b9d8      	cbnz	r0, 8013e00 <_vfiprintf_r+0x110>
 8013dc8:	06d1      	lsls	r1, r2, #27
 8013dca:	bf44      	itt	mi
 8013dcc:	2320      	movmi	r3, #32
 8013dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013dd2:	0713      	lsls	r3, r2, #28
 8013dd4:	bf44      	itt	mi
 8013dd6:	232b      	movmi	r3, #43	; 0x2b
 8013dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8013de0:	2b2a      	cmp	r3, #42	; 0x2a
 8013de2:	d015      	beq.n	8013e10 <_vfiprintf_r+0x120>
 8013de4:	4654      	mov	r4, sl
 8013de6:	2000      	movs	r0, #0
 8013de8:	f04f 0c0a 	mov.w	ip, #10
 8013dec:	9a07      	ldr	r2, [sp, #28]
 8013dee:	4621      	mov	r1, r4
 8013df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013df4:	3b30      	subs	r3, #48	; 0x30
 8013df6:	2b09      	cmp	r3, #9
 8013df8:	d94d      	bls.n	8013e96 <_vfiprintf_r+0x1a6>
 8013dfa:	b1b0      	cbz	r0, 8013e2a <_vfiprintf_r+0x13a>
 8013dfc:	9207      	str	r2, [sp, #28]
 8013dfe:	e014      	b.n	8013e2a <_vfiprintf_r+0x13a>
 8013e00:	eba0 0308 	sub.w	r3, r0, r8
 8013e04:	fa09 f303 	lsl.w	r3, r9, r3
 8013e08:	4313      	orrs	r3, r2
 8013e0a:	46a2      	mov	sl, r4
 8013e0c:	9304      	str	r3, [sp, #16]
 8013e0e:	e7d2      	b.n	8013db6 <_vfiprintf_r+0xc6>
 8013e10:	9b03      	ldr	r3, [sp, #12]
 8013e12:	1d19      	adds	r1, r3, #4
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	9103      	str	r1, [sp, #12]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	bfbb      	ittet	lt
 8013e1c:	425b      	neglt	r3, r3
 8013e1e:	f042 0202 	orrlt.w	r2, r2, #2
 8013e22:	9307      	strge	r3, [sp, #28]
 8013e24:	9307      	strlt	r3, [sp, #28]
 8013e26:	bfb8      	it	lt
 8013e28:	9204      	strlt	r2, [sp, #16]
 8013e2a:	7823      	ldrb	r3, [r4, #0]
 8013e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8013e2e:	d10c      	bne.n	8013e4a <_vfiprintf_r+0x15a>
 8013e30:	7863      	ldrb	r3, [r4, #1]
 8013e32:	2b2a      	cmp	r3, #42	; 0x2a
 8013e34:	d134      	bne.n	8013ea0 <_vfiprintf_r+0x1b0>
 8013e36:	9b03      	ldr	r3, [sp, #12]
 8013e38:	3402      	adds	r4, #2
 8013e3a:	1d1a      	adds	r2, r3, #4
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	9203      	str	r2, [sp, #12]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	bfb8      	it	lt
 8013e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e48:	9305      	str	r3, [sp, #20]
 8013e4a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013f14 <_vfiprintf_r+0x224>
 8013e4e:	2203      	movs	r2, #3
 8013e50:	4650      	mov	r0, sl
 8013e52:	7821      	ldrb	r1, [r4, #0]
 8013e54:	f000 fb38 	bl	80144c8 <memchr>
 8013e58:	b138      	cbz	r0, 8013e6a <_vfiprintf_r+0x17a>
 8013e5a:	2240      	movs	r2, #64	; 0x40
 8013e5c:	9b04      	ldr	r3, [sp, #16]
 8013e5e:	eba0 000a 	sub.w	r0, r0, sl
 8013e62:	4082      	lsls	r2, r0
 8013e64:	4313      	orrs	r3, r2
 8013e66:	3401      	adds	r4, #1
 8013e68:	9304      	str	r3, [sp, #16]
 8013e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e6e:	2206      	movs	r2, #6
 8013e70:	4829      	ldr	r0, [pc, #164]	; (8013f18 <_vfiprintf_r+0x228>)
 8013e72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e76:	f000 fb27 	bl	80144c8 <memchr>
 8013e7a:	2800      	cmp	r0, #0
 8013e7c:	d03f      	beq.n	8013efe <_vfiprintf_r+0x20e>
 8013e7e:	4b27      	ldr	r3, [pc, #156]	; (8013f1c <_vfiprintf_r+0x22c>)
 8013e80:	bb1b      	cbnz	r3, 8013eca <_vfiprintf_r+0x1da>
 8013e82:	9b03      	ldr	r3, [sp, #12]
 8013e84:	3307      	adds	r3, #7
 8013e86:	f023 0307 	bic.w	r3, r3, #7
 8013e8a:	3308      	adds	r3, #8
 8013e8c:	9303      	str	r3, [sp, #12]
 8013e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e90:	443b      	add	r3, r7
 8013e92:	9309      	str	r3, [sp, #36]	; 0x24
 8013e94:	e768      	b.n	8013d68 <_vfiprintf_r+0x78>
 8013e96:	460c      	mov	r4, r1
 8013e98:	2001      	movs	r0, #1
 8013e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e9e:	e7a6      	b.n	8013dee <_vfiprintf_r+0xfe>
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	f04f 0c0a 	mov.w	ip, #10
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	3401      	adds	r4, #1
 8013eaa:	9305      	str	r3, [sp, #20]
 8013eac:	4620      	mov	r0, r4
 8013eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013eb2:	3a30      	subs	r2, #48	; 0x30
 8013eb4:	2a09      	cmp	r2, #9
 8013eb6:	d903      	bls.n	8013ec0 <_vfiprintf_r+0x1d0>
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d0c6      	beq.n	8013e4a <_vfiprintf_r+0x15a>
 8013ebc:	9105      	str	r1, [sp, #20]
 8013ebe:	e7c4      	b.n	8013e4a <_vfiprintf_r+0x15a>
 8013ec0:	4604      	mov	r4, r0
 8013ec2:	2301      	movs	r3, #1
 8013ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ec8:	e7f0      	b.n	8013eac <_vfiprintf_r+0x1bc>
 8013eca:	ab03      	add	r3, sp, #12
 8013ecc:	9300      	str	r3, [sp, #0]
 8013ece:	462a      	mov	r2, r5
 8013ed0:	4630      	mov	r0, r6
 8013ed2:	4b13      	ldr	r3, [pc, #76]	; (8013f20 <_vfiprintf_r+0x230>)
 8013ed4:	a904      	add	r1, sp, #16
 8013ed6:	f3af 8000 	nop.w
 8013eda:	4607      	mov	r7, r0
 8013edc:	1c78      	adds	r0, r7, #1
 8013ede:	d1d6      	bne.n	8013e8e <_vfiprintf_r+0x19e>
 8013ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ee2:	07d9      	lsls	r1, r3, #31
 8013ee4:	d405      	bmi.n	8013ef2 <_vfiprintf_r+0x202>
 8013ee6:	89ab      	ldrh	r3, [r5, #12]
 8013ee8:	059a      	lsls	r2, r3, #22
 8013eea:	d402      	bmi.n	8013ef2 <_vfiprintf_r+0x202>
 8013eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013eee:	f7ff fdd3 	bl	8013a98 <__retarget_lock_release_recursive>
 8013ef2:	89ab      	ldrh	r3, [r5, #12]
 8013ef4:	065b      	lsls	r3, r3, #25
 8013ef6:	f53f af1d 	bmi.w	8013d34 <_vfiprintf_r+0x44>
 8013efa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013efc:	e71c      	b.n	8013d38 <_vfiprintf_r+0x48>
 8013efe:	ab03      	add	r3, sp, #12
 8013f00:	9300      	str	r3, [sp, #0]
 8013f02:	462a      	mov	r2, r5
 8013f04:	4630      	mov	r0, r6
 8013f06:	4b06      	ldr	r3, [pc, #24]	; (8013f20 <_vfiprintf_r+0x230>)
 8013f08:	a904      	add	r1, sp, #16
 8013f0a:	f000 f87d 	bl	8014008 <_printf_i>
 8013f0e:	e7e4      	b.n	8013eda <_vfiprintf_r+0x1ea>
 8013f10:	0801523e 	.word	0x0801523e
 8013f14:	08015244 	.word	0x08015244
 8013f18:	08015248 	.word	0x08015248
 8013f1c:	00000000 	.word	0x00000000
 8013f20:	08013ccb 	.word	0x08013ccb

08013f24 <_printf_common>:
 8013f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f28:	4616      	mov	r6, r2
 8013f2a:	4699      	mov	r9, r3
 8013f2c:	688a      	ldr	r2, [r1, #8]
 8013f2e:	690b      	ldr	r3, [r1, #16]
 8013f30:	4607      	mov	r7, r0
 8013f32:	4293      	cmp	r3, r2
 8013f34:	bfb8      	it	lt
 8013f36:	4613      	movlt	r3, r2
 8013f38:	6033      	str	r3, [r6, #0]
 8013f3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f3e:	460c      	mov	r4, r1
 8013f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f44:	b10a      	cbz	r2, 8013f4a <_printf_common+0x26>
 8013f46:	3301      	adds	r3, #1
 8013f48:	6033      	str	r3, [r6, #0]
 8013f4a:	6823      	ldr	r3, [r4, #0]
 8013f4c:	0699      	lsls	r1, r3, #26
 8013f4e:	bf42      	ittt	mi
 8013f50:	6833      	ldrmi	r3, [r6, #0]
 8013f52:	3302      	addmi	r3, #2
 8013f54:	6033      	strmi	r3, [r6, #0]
 8013f56:	6825      	ldr	r5, [r4, #0]
 8013f58:	f015 0506 	ands.w	r5, r5, #6
 8013f5c:	d106      	bne.n	8013f6c <_printf_common+0x48>
 8013f5e:	f104 0a19 	add.w	sl, r4, #25
 8013f62:	68e3      	ldr	r3, [r4, #12]
 8013f64:	6832      	ldr	r2, [r6, #0]
 8013f66:	1a9b      	subs	r3, r3, r2
 8013f68:	42ab      	cmp	r3, r5
 8013f6a:	dc2b      	bgt.n	8013fc4 <_printf_common+0xa0>
 8013f6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013f70:	1e13      	subs	r3, r2, #0
 8013f72:	6822      	ldr	r2, [r4, #0]
 8013f74:	bf18      	it	ne
 8013f76:	2301      	movne	r3, #1
 8013f78:	0692      	lsls	r2, r2, #26
 8013f7a:	d430      	bmi.n	8013fde <_printf_common+0xba>
 8013f7c:	4649      	mov	r1, r9
 8013f7e:	4638      	mov	r0, r7
 8013f80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013f84:	47c0      	blx	r8
 8013f86:	3001      	adds	r0, #1
 8013f88:	d023      	beq.n	8013fd2 <_printf_common+0xae>
 8013f8a:	6823      	ldr	r3, [r4, #0]
 8013f8c:	6922      	ldr	r2, [r4, #16]
 8013f8e:	f003 0306 	and.w	r3, r3, #6
 8013f92:	2b04      	cmp	r3, #4
 8013f94:	bf14      	ite	ne
 8013f96:	2500      	movne	r5, #0
 8013f98:	6833      	ldreq	r3, [r6, #0]
 8013f9a:	f04f 0600 	mov.w	r6, #0
 8013f9e:	bf08      	it	eq
 8013fa0:	68e5      	ldreq	r5, [r4, #12]
 8013fa2:	f104 041a 	add.w	r4, r4, #26
 8013fa6:	bf08      	it	eq
 8013fa8:	1aed      	subeq	r5, r5, r3
 8013faa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8013fae:	bf08      	it	eq
 8013fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013fb4:	4293      	cmp	r3, r2
 8013fb6:	bfc4      	itt	gt
 8013fb8:	1a9b      	subgt	r3, r3, r2
 8013fba:	18ed      	addgt	r5, r5, r3
 8013fbc:	42b5      	cmp	r5, r6
 8013fbe:	d11a      	bne.n	8013ff6 <_printf_common+0xd2>
 8013fc0:	2000      	movs	r0, #0
 8013fc2:	e008      	b.n	8013fd6 <_printf_common+0xb2>
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	4652      	mov	r2, sl
 8013fc8:	4649      	mov	r1, r9
 8013fca:	4638      	mov	r0, r7
 8013fcc:	47c0      	blx	r8
 8013fce:	3001      	adds	r0, #1
 8013fd0:	d103      	bne.n	8013fda <_printf_common+0xb6>
 8013fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8013fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fda:	3501      	adds	r5, #1
 8013fdc:	e7c1      	b.n	8013f62 <_printf_common+0x3e>
 8013fde:	2030      	movs	r0, #48	; 0x30
 8013fe0:	18e1      	adds	r1, r4, r3
 8013fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013fe6:	1c5a      	adds	r2, r3, #1
 8013fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013fec:	4422      	add	r2, r4
 8013fee:	3302      	adds	r3, #2
 8013ff0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ff4:	e7c2      	b.n	8013f7c <_printf_common+0x58>
 8013ff6:	2301      	movs	r3, #1
 8013ff8:	4622      	mov	r2, r4
 8013ffa:	4649      	mov	r1, r9
 8013ffc:	4638      	mov	r0, r7
 8013ffe:	47c0      	blx	r8
 8014000:	3001      	adds	r0, #1
 8014002:	d0e6      	beq.n	8013fd2 <_printf_common+0xae>
 8014004:	3601      	adds	r6, #1
 8014006:	e7d9      	b.n	8013fbc <_printf_common+0x98>

08014008 <_printf_i>:
 8014008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801400c:	7e0f      	ldrb	r7, [r1, #24]
 801400e:	4691      	mov	r9, r2
 8014010:	2f78      	cmp	r7, #120	; 0x78
 8014012:	4680      	mov	r8, r0
 8014014:	460c      	mov	r4, r1
 8014016:	469a      	mov	sl, r3
 8014018:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801401a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801401e:	d807      	bhi.n	8014030 <_printf_i+0x28>
 8014020:	2f62      	cmp	r7, #98	; 0x62
 8014022:	d80a      	bhi.n	801403a <_printf_i+0x32>
 8014024:	2f00      	cmp	r7, #0
 8014026:	f000 80d5 	beq.w	80141d4 <_printf_i+0x1cc>
 801402a:	2f58      	cmp	r7, #88	; 0x58
 801402c:	f000 80c1 	beq.w	80141b2 <_printf_i+0x1aa>
 8014030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014038:	e03a      	b.n	80140b0 <_printf_i+0xa8>
 801403a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801403e:	2b15      	cmp	r3, #21
 8014040:	d8f6      	bhi.n	8014030 <_printf_i+0x28>
 8014042:	a101      	add	r1, pc, #4	; (adr r1, 8014048 <_printf_i+0x40>)
 8014044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014048:	080140a1 	.word	0x080140a1
 801404c:	080140b5 	.word	0x080140b5
 8014050:	08014031 	.word	0x08014031
 8014054:	08014031 	.word	0x08014031
 8014058:	08014031 	.word	0x08014031
 801405c:	08014031 	.word	0x08014031
 8014060:	080140b5 	.word	0x080140b5
 8014064:	08014031 	.word	0x08014031
 8014068:	08014031 	.word	0x08014031
 801406c:	08014031 	.word	0x08014031
 8014070:	08014031 	.word	0x08014031
 8014074:	080141bb 	.word	0x080141bb
 8014078:	080140e1 	.word	0x080140e1
 801407c:	08014175 	.word	0x08014175
 8014080:	08014031 	.word	0x08014031
 8014084:	08014031 	.word	0x08014031
 8014088:	080141dd 	.word	0x080141dd
 801408c:	08014031 	.word	0x08014031
 8014090:	080140e1 	.word	0x080140e1
 8014094:	08014031 	.word	0x08014031
 8014098:	08014031 	.word	0x08014031
 801409c:	0801417d 	.word	0x0801417d
 80140a0:	682b      	ldr	r3, [r5, #0]
 80140a2:	1d1a      	adds	r2, r3, #4
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	602a      	str	r2, [r5, #0]
 80140a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80140b0:	2301      	movs	r3, #1
 80140b2:	e0a0      	b.n	80141f6 <_printf_i+0x1ee>
 80140b4:	6820      	ldr	r0, [r4, #0]
 80140b6:	682b      	ldr	r3, [r5, #0]
 80140b8:	0607      	lsls	r7, r0, #24
 80140ba:	f103 0104 	add.w	r1, r3, #4
 80140be:	6029      	str	r1, [r5, #0]
 80140c0:	d501      	bpl.n	80140c6 <_printf_i+0xbe>
 80140c2:	681e      	ldr	r6, [r3, #0]
 80140c4:	e003      	b.n	80140ce <_printf_i+0xc6>
 80140c6:	0646      	lsls	r6, r0, #25
 80140c8:	d5fb      	bpl.n	80140c2 <_printf_i+0xba>
 80140ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80140ce:	2e00      	cmp	r6, #0
 80140d0:	da03      	bge.n	80140da <_printf_i+0xd2>
 80140d2:	232d      	movs	r3, #45	; 0x2d
 80140d4:	4276      	negs	r6, r6
 80140d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140da:	230a      	movs	r3, #10
 80140dc:	4859      	ldr	r0, [pc, #356]	; (8014244 <_printf_i+0x23c>)
 80140de:	e012      	b.n	8014106 <_printf_i+0xfe>
 80140e0:	682b      	ldr	r3, [r5, #0]
 80140e2:	6820      	ldr	r0, [r4, #0]
 80140e4:	1d19      	adds	r1, r3, #4
 80140e6:	6029      	str	r1, [r5, #0]
 80140e8:	0605      	lsls	r5, r0, #24
 80140ea:	d501      	bpl.n	80140f0 <_printf_i+0xe8>
 80140ec:	681e      	ldr	r6, [r3, #0]
 80140ee:	e002      	b.n	80140f6 <_printf_i+0xee>
 80140f0:	0641      	lsls	r1, r0, #25
 80140f2:	d5fb      	bpl.n	80140ec <_printf_i+0xe4>
 80140f4:	881e      	ldrh	r6, [r3, #0]
 80140f6:	2f6f      	cmp	r7, #111	; 0x6f
 80140f8:	bf0c      	ite	eq
 80140fa:	2308      	moveq	r3, #8
 80140fc:	230a      	movne	r3, #10
 80140fe:	4851      	ldr	r0, [pc, #324]	; (8014244 <_printf_i+0x23c>)
 8014100:	2100      	movs	r1, #0
 8014102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014106:	6865      	ldr	r5, [r4, #4]
 8014108:	2d00      	cmp	r5, #0
 801410a:	bfa8      	it	ge
 801410c:	6821      	ldrge	r1, [r4, #0]
 801410e:	60a5      	str	r5, [r4, #8]
 8014110:	bfa4      	itt	ge
 8014112:	f021 0104 	bicge.w	r1, r1, #4
 8014116:	6021      	strge	r1, [r4, #0]
 8014118:	b90e      	cbnz	r6, 801411e <_printf_i+0x116>
 801411a:	2d00      	cmp	r5, #0
 801411c:	d04b      	beq.n	80141b6 <_printf_i+0x1ae>
 801411e:	4615      	mov	r5, r2
 8014120:	fbb6 f1f3 	udiv	r1, r6, r3
 8014124:	fb03 6711 	mls	r7, r3, r1, r6
 8014128:	5dc7      	ldrb	r7, [r0, r7]
 801412a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801412e:	4637      	mov	r7, r6
 8014130:	42bb      	cmp	r3, r7
 8014132:	460e      	mov	r6, r1
 8014134:	d9f4      	bls.n	8014120 <_printf_i+0x118>
 8014136:	2b08      	cmp	r3, #8
 8014138:	d10b      	bne.n	8014152 <_printf_i+0x14a>
 801413a:	6823      	ldr	r3, [r4, #0]
 801413c:	07de      	lsls	r6, r3, #31
 801413e:	d508      	bpl.n	8014152 <_printf_i+0x14a>
 8014140:	6923      	ldr	r3, [r4, #16]
 8014142:	6861      	ldr	r1, [r4, #4]
 8014144:	4299      	cmp	r1, r3
 8014146:	bfde      	ittt	le
 8014148:	2330      	movle	r3, #48	; 0x30
 801414a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801414e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014152:	1b52      	subs	r2, r2, r5
 8014154:	6122      	str	r2, [r4, #16]
 8014156:	464b      	mov	r3, r9
 8014158:	4621      	mov	r1, r4
 801415a:	4640      	mov	r0, r8
 801415c:	f8cd a000 	str.w	sl, [sp]
 8014160:	aa03      	add	r2, sp, #12
 8014162:	f7ff fedf 	bl	8013f24 <_printf_common>
 8014166:	3001      	adds	r0, #1
 8014168:	d14a      	bne.n	8014200 <_printf_i+0x1f8>
 801416a:	f04f 30ff 	mov.w	r0, #4294967295
 801416e:	b004      	add	sp, #16
 8014170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014174:	6823      	ldr	r3, [r4, #0]
 8014176:	f043 0320 	orr.w	r3, r3, #32
 801417a:	6023      	str	r3, [r4, #0]
 801417c:	2778      	movs	r7, #120	; 0x78
 801417e:	4832      	ldr	r0, [pc, #200]	; (8014248 <_printf_i+0x240>)
 8014180:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014184:	6823      	ldr	r3, [r4, #0]
 8014186:	6829      	ldr	r1, [r5, #0]
 8014188:	061f      	lsls	r7, r3, #24
 801418a:	f851 6b04 	ldr.w	r6, [r1], #4
 801418e:	d402      	bmi.n	8014196 <_printf_i+0x18e>
 8014190:	065f      	lsls	r7, r3, #25
 8014192:	bf48      	it	mi
 8014194:	b2b6      	uxthmi	r6, r6
 8014196:	07df      	lsls	r7, r3, #31
 8014198:	bf48      	it	mi
 801419a:	f043 0320 	orrmi.w	r3, r3, #32
 801419e:	6029      	str	r1, [r5, #0]
 80141a0:	bf48      	it	mi
 80141a2:	6023      	strmi	r3, [r4, #0]
 80141a4:	b91e      	cbnz	r6, 80141ae <_printf_i+0x1a6>
 80141a6:	6823      	ldr	r3, [r4, #0]
 80141a8:	f023 0320 	bic.w	r3, r3, #32
 80141ac:	6023      	str	r3, [r4, #0]
 80141ae:	2310      	movs	r3, #16
 80141b0:	e7a6      	b.n	8014100 <_printf_i+0xf8>
 80141b2:	4824      	ldr	r0, [pc, #144]	; (8014244 <_printf_i+0x23c>)
 80141b4:	e7e4      	b.n	8014180 <_printf_i+0x178>
 80141b6:	4615      	mov	r5, r2
 80141b8:	e7bd      	b.n	8014136 <_printf_i+0x12e>
 80141ba:	682b      	ldr	r3, [r5, #0]
 80141bc:	6826      	ldr	r6, [r4, #0]
 80141be:	1d18      	adds	r0, r3, #4
 80141c0:	6961      	ldr	r1, [r4, #20]
 80141c2:	6028      	str	r0, [r5, #0]
 80141c4:	0635      	lsls	r5, r6, #24
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	d501      	bpl.n	80141ce <_printf_i+0x1c6>
 80141ca:	6019      	str	r1, [r3, #0]
 80141cc:	e002      	b.n	80141d4 <_printf_i+0x1cc>
 80141ce:	0670      	lsls	r0, r6, #25
 80141d0:	d5fb      	bpl.n	80141ca <_printf_i+0x1c2>
 80141d2:	8019      	strh	r1, [r3, #0]
 80141d4:	2300      	movs	r3, #0
 80141d6:	4615      	mov	r5, r2
 80141d8:	6123      	str	r3, [r4, #16]
 80141da:	e7bc      	b.n	8014156 <_printf_i+0x14e>
 80141dc:	682b      	ldr	r3, [r5, #0]
 80141de:	2100      	movs	r1, #0
 80141e0:	1d1a      	adds	r2, r3, #4
 80141e2:	602a      	str	r2, [r5, #0]
 80141e4:	681d      	ldr	r5, [r3, #0]
 80141e6:	6862      	ldr	r2, [r4, #4]
 80141e8:	4628      	mov	r0, r5
 80141ea:	f000 f96d 	bl	80144c8 <memchr>
 80141ee:	b108      	cbz	r0, 80141f4 <_printf_i+0x1ec>
 80141f0:	1b40      	subs	r0, r0, r5
 80141f2:	6060      	str	r0, [r4, #4]
 80141f4:	6863      	ldr	r3, [r4, #4]
 80141f6:	6123      	str	r3, [r4, #16]
 80141f8:	2300      	movs	r3, #0
 80141fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141fe:	e7aa      	b.n	8014156 <_printf_i+0x14e>
 8014200:	462a      	mov	r2, r5
 8014202:	4649      	mov	r1, r9
 8014204:	4640      	mov	r0, r8
 8014206:	6923      	ldr	r3, [r4, #16]
 8014208:	47d0      	blx	sl
 801420a:	3001      	adds	r0, #1
 801420c:	d0ad      	beq.n	801416a <_printf_i+0x162>
 801420e:	6823      	ldr	r3, [r4, #0]
 8014210:	079b      	lsls	r3, r3, #30
 8014212:	d413      	bmi.n	801423c <_printf_i+0x234>
 8014214:	68e0      	ldr	r0, [r4, #12]
 8014216:	9b03      	ldr	r3, [sp, #12]
 8014218:	4298      	cmp	r0, r3
 801421a:	bfb8      	it	lt
 801421c:	4618      	movlt	r0, r3
 801421e:	e7a6      	b.n	801416e <_printf_i+0x166>
 8014220:	2301      	movs	r3, #1
 8014222:	4632      	mov	r2, r6
 8014224:	4649      	mov	r1, r9
 8014226:	4640      	mov	r0, r8
 8014228:	47d0      	blx	sl
 801422a:	3001      	adds	r0, #1
 801422c:	d09d      	beq.n	801416a <_printf_i+0x162>
 801422e:	3501      	adds	r5, #1
 8014230:	68e3      	ldr	r3, [r4, #12]
 8014232:	9903      	ldr	r1, [sp, #12]
 8014234:	1a5b      	subs	r3, r3, r1
 8014236:	42ab      	cmp	r3, r5
 8014238:	dcf2      	bgt.n	8014220 <_printf_i+0x218>
 801423a:	e7eb      	b.n	8014214 <_printf_i+0x20c>
 801423c:	2500      	movs	r5, #0
 801423e:	f104 0619 	add.w	r6, r4, #25
 8014242:	e7f5      	b.n	8014230 <_printf_i+0x228>
 8014244:	0801524f 	.word	0x0801524f
 8014248:	08015260 	.word	0x08015260

0801424c <__sflush_r>:
 801424c:	898a      	ldrh	r2, [r1, #12]
 801424e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014250:	4605      	mov	r5, r0
 8014252:	0710      	lsls	r0, r2, #28
 8014254:	460c      	mov	r4, r1
 8014256:	d457      	bmi.n	8014308 <__sflush_r+0xbc>
 8014258:	684b      	ldr	r3, [r1, #4]
 801425a:	2b00      	cmp	r3, #0
 801425c:	dc04      	bgt.n	8014268 <__sflush_r+0x1c>
 801425e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014260:	2b00      	cmp	r3, #0
 8014262:	dc01      	bgt.n	8014268 <__sflush_r+0x1c>
 8014264:	2000      	movs	r0, #0
 8014266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801426a:	2e00      	cmp	r6, #0
 801426c:	d0fa      	beq.n	8014264 <__sflush_r+0x18>
 801426e:	2300      	movs	r3, #0
 8014270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014274:	682f      	ldr	r7, [r5, #0]
 8014276:	6a21      	ldr	r1, [r4, #32]
 8014278:	602b      	str	r3, [r5, #0]
 801427a:	d032      	beq.n	80142e2 <__sflush_r+0x96>
 801427c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801427e:	89a3      	ldrh	r3, [r4, #12]
 8014280:	075a      	lsls	r2, r3, #29
 8014282:	d505      	bpl.n	8014290 <__sflush_r+0x44>
 8014284:	6863      	ldr	r3, [r4, #4]
 8014286:	1ac0      	subs	r0, r0, r3
 8014288:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801428a:	b10b      	cbz	r3, 8014290 <__sflush_r+0x44>
 801428c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801428e:	1ac0      	subs	r0, r0, r3
 8014290:	2300      	movs	r3, #0
 8014292:	4602      	mov	r2, r0
 8014294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014296:	4628      	mov	r0, r5
 8014298:	6a21      	ldr	r1, [r4, #32]
 801429a:	47b0      	blx	r6
 801429c:	1c43      	adds	r3, r0, #1
 801429e:	89a3      	ldrh	r3, [r4, #12]
 80142a0:	d106      	bne.n	80142b0 <__sflush_r+0x64>
 80142a2:	6829      	ldr	r1, [r5, #0]
 80142a4:	291d      	cmp	r1, #29
 80142a6:	d82b      	bhi.n	8014300 <__sflush_r+0xb4>
 80142a8:	4a28      	ldr	r2, [pc, #160]	; (801434c <__sflush_r+0x100>)
 80142aa:	410a      	asrs	r2, r1
 80142ac:	07d6      	lsls	r6, r2, #31
 80142ae:	d427      	bmi.n	8014300 <__sflush_r+0xb4>
 80142b0:	2200      	movs	r2, #0
 80142b2:	6062      	str	r2, [r4, #4]
 80142b4:	6922      	ldr	r2, [r4, #16]
 80142b6:	04d9      	lsls	r1, r3, #19
 80142b8:	6022      	str	r2, [r4, #0]
 80142ba:	d504      	bpl.n	80142c6 <__sflush_r+0x7a>
 80142bc:	1c42      	adds	r2, r0, #1
 80142be:	d101      	bne.n	80142c4 <__sflush_r+0x78>
 80142c0:	682b      	ldr	r3, [r5, #0]
 80142c2:	b903      	cbnz	r3, 80142c6 <__sflush_r+0x7a>
 80142c4:	6560      	str	r0, [r4, #84]	; 0x54
 80142c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80142c8:	602f      	str	r7, [r5, #0]
 80142ca:	2900      	cmp	r1, #0
 80142cc:	d0ca      	beq.n	8014264 <__sflush_r+0x18>
 80142ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80142d2:	4299      	cmp	r1, r3
 80142d4:	d002      	beq.n	80142dc <__sflush_r+0x90>
 80142d6:	4628      	mov	r0, r5
 80142d8:	f7ff fbee 	bl	8013ab8 <_free_r>
 80142dc:	2000      	movs	r0, #0
 80142de:	6360      	str	r0, [r4, #52]	; 0x34
 80142e0:	e7c1      	b.n	8014266 <__sflush_r+0x1a>
 80142e2:	2301      	movs	r3, #1
 80142e4:	4628      	mov	r0, r5
 80142e6:	47b0      	blx	r6
 80142e8:	1c41      	adds	r1, r0, #1
 80142ea:	d1c8      	bne.n	801427e <__sflush_r+0x32>
 80142ec:	682b      	ldr	r3, [r5, #0]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d0c5      	beq.n	801427e <__sflush_r+0x32>
 80142f2:	2b1d      	cmp	r3, #29
 80142f4:	d001      	beq.n	80142fa <__sflush_r+0xae>
 80142f6:	2b16      	cmp	r3, #22
 80142f8:	d101      	bne.n	80142fe <__sflush_r+0xb2>
 80142fa:	602f      	str	r7, [r5, #0]
 80142fc:	e7b2      	b.n	8014264 <__sflush_r+0x18>
 80142fe:	89a3      	ldrh	r3, [r4, #12]
 8014300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014304:	81a3      	strh	r3, [r4, #12]
 8014306:	e7ae      	b.n	8014266 <__sflush_r+0x1a>
 8014308:	690f      	ldr	r7, [r1, #16]
 801430a:	2f00      	cmp	r7, #0
 801430c:	d0aa      	beq.n	8014264 <__sflush_r+0x18>
 801430e:	0793      	lsls	r3, r2, #30
 8014310:	bf18      	it	ne
 8014312:	2300      	movne	r3, #0
 8014314:	680e      	ldr	r6, [r1, #0]
 8014316:	bf08      	it	eq
 8014318:	694b      	ldreq	r3, [r1, #20]
 801431a:	1bf6      	subs	r6, r6, r7
 801431c:	600f      	str	r7, [r1, #0]
 801431e:	608b      	str	r3, [r1, #8]
 8014320:	2e00      	cmp	r6, #0
 8014322:	dd9f      	ble.n	8014264 <__sflush_r+0x18>
 8014324:	4633      	mov	r3, r6
 8014326:	463a      	mov	r2, r7
 8014328:	4628      	mov	r0, r5
 801432a:	6a21      	ldr	r1, [r4, #32]
 801432c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8014330:	47e0      	blx	ip
 8014332:	2800      	cmp	r0, #0
 8014334:	dc06      	bgt.n	8014344 <__sflush_r+0xf8>
 8014336:	89a3      	ldrh	r3, [r4, #12]
 8014338:	f04f 30ff 	mov.w	r0, #4294967295
 801433c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014340:	81a3      	strh	r3, [r4, #12]
 8014342:	e790      	b.n	8014266 <__sflush_r+0x1a>
 8014344:	4407      	add	r7, r0
 8014346:	1a36      	subs	r6, r6, r0
 8014348:	e7ea      	b.n	8014320 <__sflush_r+0xd4>
 801434a:	bf00      	nop
 801434c:	dfbffffe 	.word	0xdfbffffe

08014350 <_fflush_r>:
 8014350:	b538      	push	{r3, r4, r5, lr}
 8014352:	690b      	ldr	r3, [r1, #16]
 8014354:	4605      	mov	r5, r0
 8014356:	460c      	mov	r4, r1
 8014358:	b913      	cbnz	r3, 8014360 <_fflush_r+0x10>
 801435a:	2500      	movs	r5, #0
 801435c:	4628      	mov	r0, r5
 801435e:	bd38      	pop	{r3, r4, r5, pc}
 8014360:	b118      	cbz	r0, 801436a <_fflush_r+0x1a>
 8014362:	6a03      	ldr	r3, [r0, #32]
 8014364:	b90b      	cbnz	r3, 801436a <_fflush_r+0x1a>
 8014366:	f7ff f9a1 	bl	80136ac <__sinit>
 801436a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d0f3      	beq.n	801435a <_fflush_r+0xa>
 8014372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014374:	07d0      	lsls	r0, r2, #31
 8014376:	d404      	bmi.n	8014382 <_fflush_r+0x32>
 8014378:	0599      	lsls	r1, r3, #22
 801437a:	d402      	bmi.n	8014382 <_fflush_r+0x32>
 801437c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801437e:	f7ff fb8a 	bl	8013a96 <__retarget_lock_acquire_recursive>
 8014382:	4628      	mov	r0, r5
 8014384:	4621      	mov	r1, r4
 8014386:	f7ff ff61 	bl	801424c <__sflush_r>
 801438a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801438c:	4605      	mov	r5, r0
 801438e:	07da      	lsls	r2, r3, #31
 8014390:	d4e4      	bmi.n	801435c <_fflush_r+0xc>
 8014392:	89a3      	ldrh	r3, [r4, #12]
 8014394:	059b      	lsls	r3, r3, #22
 8014396:	d4e1      	bmi.n	801435c <_fflush_r+0xc>
 8014398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801439a:	f7ff fb7d 	bl	8013a98 <__retarget_lock_release_recursive>
 801439e:	e7dd      	b.n	801435c <_fflush_r+0xc>

080143a0 <__swhatbuf_r>:
 80143a0:	b570      	push	{r4, r5, r6, lr}
 80143a2:	460c      	mov	r4, r1
 80143a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143a8:	4615      	mov	r5, r2
 80143aa:	2900      	cmp	r1, #0
 80143ac:	461e      	mov	r6, r3
 80143ae:	b096      	sub	sp, #88	; 0x58
 80143b0:	da0c      	bge.n	80143cc <__swhatbuf_r+0x2c>
 80143b2:	89a3      	ldrh	r3, [r4, #12]
 80143b4:	2100      	movs	r1, #0
 80143b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80143ba:	bf0c      	ite	eq
 80143bc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80143c0:	2340      	movne	r3, #64	; 0x40
 80143c2:	2000      	movs	r0, #0
 80143c4:	6031      	str	r1, [r6, #0]
 80143c6:	602b      	str	r3, [r5, #0]
 80143c8:	b016      	add	sp, #88	; 0x58
 80143ca:	bd70      	pop	{r4, r5, r6, pc}
 80143cc:	466a      	mov	r2, sp
 80143ce:	f000 f849 	bl	8014464 <_fstat_r>
 80143d2:	2800      	cmp	r0, #0
 80143d4:	dbed      	blt.n	80143b2 <__swhatbuf_r+0x12>
 80143d6:	9901      	ldr	r1, [sp, #4]
 80143d8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80143dc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80143e0:	4259      	negs	r1, r3
 80143e2:	4159      	adcs	r1, r3
 80143e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143e8:	e7eb      	b.n	80143c2 <__swhatbuf_r+0x22>

080143ea <__smakebuf_r>:
 80143ea:	898b      	ldrh	r3, [r1, #12]
 80143ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80143ee:	079d      	lsls	r5, r3, #30
 80143f0:	4606      	mov	r6, r0
 80143f2:	460c      	mov	r4, r1
 80143f4:	d507      	bpl.n	8014406 <__smakebuf_r+0x1c>
 80143f6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80143fa:	6023      	str	r3, [r4, #0]
 80143fc:	6123      	str	r3, [r4, #16]
 80143fe:	2301      	movs	r3, #1
 8014400:	6163      	str	r3, [r4, #20]
 8014402:	b002      	add	sp, #8
 8014404:	bd70      	pop	{r4, r5, r6, pc}
 8014406:	466a      	mov	r2, sp
 8014408:	ab01      	add	r3, sp, #4
 801440a:	f7ff ffc9 	bl	80143a0 <__swhatbuf_r>
 801440e:	9900      	ldr	r1, [sp, #0]
 8014410:	4605      	mov	r5, r0
 8014412:	4630      	mov	r0, r6
 8014414:	f7ff fbb8 	bl	8013b88 <_malloc_r>
 8014418:	b948      	cbnz	r0, 801442e <__smakebuf_r+0x44>
 801441a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801441e:	059a      	lsls	r2, r3, #22
 8014420:	d4ef      	bmi.n	8014402 <__smakebuf_r+0x18>
 8014422:	f023 0303 	bic.w	r3, r3, #3
 8014426:	f043 0302 	orr.w	r3, r3, #2
 801442a:	81a3      	strh	r3, [r4, #12]
 801442c:	e7e3      	b.n	80143f6 <__smakebuf_r+0xc>
 801442e:	89a3      	ldrh	r3, [r4, #12]
 8014430:	6020      	str	r0, [r4, #0]
 8014432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014436:	81a3      	strh	r3, [r4, #12]
 8014438:	9b00      	ldr	r3, [sp, #0]
 801443a:	6120      	str	r0, [r4, #16]
 801443c:	6163      	str	r3, [r4, #20]
 801443e:	9b01      	ldr	r3, [sp, #4]
 8014440:	b15b      	cbz	r3, 801445a <__smakebuf_r+0x70>
 8014442:	4630      	mov	r0, r6
 8014444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014448:	f000 f81e 	bl	8014488 <_isatty_r>
 801444c:	b128      	cbz	r0, 801445a <__smakebuf_r+0x70>
 801444e:	89a3      	ldrh	r3, [r4, #12]
 8014450:	f023 0303 	bic.w	r3, r3, #3
 8014454:	f043 0301 	orr.w	r3, r3, #1
 8014458:	81a3      	strh	r3, [r4, #12]
 801445a:	89a3      	ldrh	r3, [r4, #12]
 801445c:	431d      	orrs	r5, r3
 801445e:	81a5      	strh	r5, [r4, #12]
 8014460:	e7cf      	b.n	8014402 <__smakebuf_r+0x18>
	...

08014464 <_fstat_r>:
 8014464:	b538      	push	{r3, r4, r5, lr}
 8014466:	2300      	movs	r3, #0
 8014468:	4d06      	ldr	r5, [pc, #24]	; (8014484 <_fstat_r+0x20>)
 801446a:	4604      	mov	r4, r0
 801446c:	4608      	mov	r0, r1
 801446e:	4611      	mov	r1, r2
 8014470:	602b      	str	r3, [r5, #0]
 8014472:	f7f4 fe51 	bl	8009118 <_fstat>
 8014476:	1c43      	adds	r3, r0, #1
 8014478:	d102      	bne.n	8014480 <_fstat_r+0x1c>
 801447a:	682b      	ldr	r3, [r5, #0]
 801447c:	b103      	cbz	r3, 8014480 <_fstat_r+0x1c>
 801447e:	6023      	str	r3, [r4, #0]
 8014480:	bd38      	pop	{r3, r4, r5, pc}
 8014482:	bf00      	nop
 8014484:	20006564 	.word	0x20006564

08014488 <_isatty_r>:
 8014488:	b538      	push	{r3, r4, r5, lr}
 801448a:	2300      	movs	r3, #0
 801448c:	4d05      	ldr	r5, [pc, #20]	; (80144a4 <_isatty_r+0x1c>)
 801448e:	4604      	mov	r4, r0
 8014490:	4608      	mov	r0, r1
 8014492:	602b      	str	r3, [r5, #0]
 8014494:	f7f4 fe4f 	bl	8009136 <_isatty>
 8014498:	1c43      	adds	r3, r0, #1
 801449a:	d102      	bne.n	80144a2 <_isatty_r+0x1a>
 801449c:	682b      	ldr	r3, [r5, #0]
 801449e:	b103      	cbz	r3, 80144a2 <_isatty_r+0x1a>
 80144a0:	6023      	str	r3, [r4, #0]
 80144a2:	bd38      	pop	{r3, r4, r5, pc}
 80144a4:	20006564 	.word	0x20006564

080144a8 <_sbrk_r>:
 80144a8:	b538      	push	{r3, r4, r5, lr}
 80144aa:	2300      	movs	r3, #0
 80144ac:	4d05      	ldr	r5, [pc, #20]	; (80144c4 <_sbrk_r+0x1c>)
 80144ae:	4604      	mov	r4, r0
 80144b0:	4608      	mov	r0, r1
 80144b2:	602b      	str	r3, [r5, #0]
 80144b4:	f7f4 fe56 	bl	8009164 <_sbrk>
 80144b8:	1c43      	adds	r3, r0, #1
 80144ba:	d102      	bne.n	80144c2 <_sbrk_r+0x1a>
 80144bc:	682b      	ldr	r3, [r5, #0]
 80144be:	b103      	cbz	r3, 80144c2 <_sbrk_r+0x1a>
 80144c0:	6023      	str	r3, [r4, #0]
 80144c2:	bd38      	pop	{r3, r4, r5, pc}
 80144c4:	20006564 	.word	0x20006564

080144c8 <memchr>:
 80144c8:	4603      	mov	r3, r0
 80144ca:	b510      	push	{r4, lr}
 80144cc:	b2c9      	uxtb	r1, r1
 80144ce:	4402      	add	r2, r0
 80144d0:	4293      	cmp	r3, r2
 80144d2:	4618      	mov	r0, r3
 80144d4:	d101      	bne.n	80144da <memchr+0x12>
 80144d6:	2000      	movs	r0, #0
 80144d8:	e003      	b.n	80144e2 <memchr+0x1a>
 80144da:	7804      	ldrb	r4, [r0, #0]
 80144dc:	3301      	adds	r3, #1
 80144de:	428c      	cmp	r4, r1
 80144e0:	d1f6      	bne.n	80144d0 <memchr+0x8>
 80144e2:	bd10      	pop	{r4, pc}

080144e4 <_init>:
 80144e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144e6:	bf00      	nop
 80144e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144ea:	bc08      	pop	{r3}
 80144ec:	469e      	mov	lr, r3
 80144ee:	4770      	bx	lr

080144f0 <_fini>:
 80144f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144f2:	bf00      	nop
 80144f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144f6:	bc08      	pop	{r3}
 80144f8:	469e      	mov	lr, r3
 80144fa:	4770      	bx	lr
