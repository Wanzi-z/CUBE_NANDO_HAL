
programmer0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb5c  08004190  08004190  00004190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  08013cec  08013cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014bf0  08014bf0  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  08014bf0  08014bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014bf8  08014bf8  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014bf8  08014bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014bfc  08014bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08014c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d4  2**0
                  CONTENTS
 10 .bss          00008484  200002d8  200002d8  000202d8  2**3
                  ALLOC
 11 ._user_heap_stack 00001804  2000875c  2000875c  000202d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002174e  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000064b3  00000000  00000000  00041a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bc8  00000000  00000000  00047f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014d9  00000000  00000000  00049b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002982e  00000000  00000000  0004afe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028742  00000000  00000000  00074817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8068  00000000  00000000  0009cf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000075e4  00000000  00000000  00174fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0017c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	200002d8 	.word	0x200002d8
 80041ac:	00000000 	.word	0x00000000
 80041b0:	08013cd4 	.word	0x08013cd4

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	; (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	200002dc 	.word	0x200002dc
 80041cc:	08013cd4 	.word	0x08013cd4

080041d0 <memchr>:
 80041d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041d4:	2a10      	cmp	r2, #16
 80041d6:	db2b      	blt.n	8004230 <memchr+0x60>
 80041d8:	f010 0f07 	tst.w	r0, #7
 80041dc:	d008      	beq.n	80041f0 <memchr+0x20>
 80041de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041e2:	3a01      	subs	r2, #1
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d02d      	beq.n	8004244 <memchr+0x74>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	b342      	cbz	r2, 8004240 <memchr+0x70>
 80041ee:	d1f6      	bne.n	80041de <memchr+0xe>
 80041f0:	b4f0      	push	{r4, r5, r6, r7}
 80041f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80041f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80041fa:	f022 0407 	bic.w	r4, r2, #7
 80041fe:	f07f 0700 	mvns.w	r7, #0
 8004202:	2300      	movs	r3, #0
 8004204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004208:	3c08      	subs	r4, #8
 800420a:	ea85 0501 	eor.w	r5, r5, r1
 800420e:	ea86 0601 	eor.w	r6, r6, r1
 8004212:	fa85 f547 	uadd8	r5, r5, r7
 8004216:	faa3 f587 	sel	r5, r3, r7
 800421a:	fa86 f647 	uadd8	r6, r6, r7
 800421e:	faa5 f687 	sel	r6, r5, r7
 8004222:	b98e      	cbnz	r6, 8004248 <memchr+0x78>
 8004224:	d1ee      	bne.n	8004204 <memchr+0x34>
 8004226:	bcf0      	pop	{r4, r5, r6, r7}
 8004228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800422c:	f002 0207 	and.w	r2, r2, #7
 8004230:	b132      	cbz	r2, 8004240 <memchr+0x70>
 8004232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004236:	3a01      	subs	r2, #1
 8004238:	ea83 0301 	eor.w	r3, r3, r1
 800423c:	b113      	cbz	r3, 8004244 <memchr+0x74>
 800423e:	d1f8      	bne.n	8004232 <memchr+0x62>
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr
 8004244:	3801      	subs	r0, #1
 8004246:	4770      	bx	lr
 8004248:	2d00      	cmp	r5, #0
 800424a:	bf06      	itte	eq
 800424c:	4635      	moveq	r5, r6
 800424e:	3803      	subeq	r0, #3
 8004250:	3807      	subne	r0, #7
 8004252:	f015 0f01 	tst.w	r5, #1
 8004256:	d107      	bne.n	8004268 <memchr+0x98>
 8004258:	3001      	adds	r0, #1
 800425a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800425e:	bf02      	ittt	eq
 8004260:	3001      	addeq	r0, #1
 8004262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004266:	3001      	addeq	r0, #1
 8004268:	bcf0      	pop	{r4, r5, r6, r7}
 800426a:	3801      	subs	r0, #1
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <__aeabi_uldivmod>:
 8004270:	b953      	cbnz	r3, 8004288 <__aeabi_uldivmod+0x18>
 8004272:	b94a      	cbnz	r2, 8004288 <__aeabi_uldivmod+0x18>
 8004274:	2900      	cmp	r1, #0
 8004276:	bf08      	it	eq
 8004278:	2800      	cmpeq	r0, #0
 800427a:	bf1c      	itt	ne
 800427c:	f04f 31ff 	movne.w	r1, #4294967295
 8004280:	f04f 30ff 	movne.w	r0, #4294967295
 8004284:	f000 b970 	b.w	8004568 <__aeabi_idiv0>
 8004288:	f1ad 0c08 	sub.w	ip, sp, #8
 800428c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004290:	f000 f806 	bl	80042a0 <__udivmoddi4>
 8004294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800429c:	b004      	add	sp, #16
 800429e:	4770      	bx	lr

080042a0 <__udivmoddi4>:
 80042a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a4:	9e08      	ldr	r6, [sp, #32]
 80042a6:	460d      	mov	r5, r1
 80042a8:	4604      	mov	r4, r0
 80042aa:	460f      	mov	r7, r1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d14a      	bne.n	8004346 <__udivmoddi4+0xa6>
 80042b0:	428a      	cmp	r2, r1
 80042b2:	4694      	mov	ip, r2
 80042b4:	d965      	bls.n	8004382 <__udivmoddi4+0xe2>
 80042b6:	fab2 f382 	clz	r3, r2
 80042ba:	b143      	cbz	r3, 80042ce <__udivmoddi4+0x2e>
 80042bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80042c0:	f1c3 0220 	rsb	r2, r3, #32
 80042c4:	409f      	lsls	r7, r3
 80042c6:	fa20 f202 	lsr.w	r2, r0, r2
 80042ca:	4317      	orrs	r7, r2
 80042cc:	409c      	lsls	r4, r3
 80042ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80042d2:	fa1f f58c 	uxth.w	r5, ip
 80042d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80042da:	0c22      	lsrs	r2, r4, #16
 80042dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80042e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80042e4:	fb01 f005 	mul.w	r0, r1, r5
 80042e8:	4290      	cmp	r0, r2
 80042ea:	d90a      	bls.n	8004302 <__udivmoddi4+0x62>
 80042ec:	eb1c 0202 	adds.w	r2, ip, r2
 80042f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80042f4:	f080 811c 	bcs.w	8004530 <__udivmoddi4+0x290>
 80042f8:	4290      	cmp	r0, r2
 80042fa:	f240 8119 	bls.w	8004530 <__udivmoddi4+0x290>
 80042fe:	3902      	subs	r1, #2
 8004300:	4462      	add	r2, ip
 8004302:	1a12      	subs	r2, r2, r0
 8004304:	b2a4      	uxth	r4, r4
 8004306:	fbb2 f0fe 	udiv	r0, r2, lr
 800430a:	fb0e 2210 	mls	r2, lr, r0, r2
 800430e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004312:	fb00 f505 	mul.w	r5, r0, r5
 8004316:	42a5      	cmp	r5, r4
 8004318:	d90a      	bls.n	8004330 <__udivmoddi4+0x90>
 800431a:	eb1c 0404 	adds.w	r4, ip, r4
 800431e:	f100 32ff 	add.w	r2, r0, #4294967295
 8004322:	f080 8107 	bcs.w	8004534 <__udivmoddi4+0x294>
 8004326:	42a5      	cmp	r5, r4
 8004328:	f240 8104 	bls.w	8004534 <__udivmoddi4+0x294>
 800432c:	4464      	add	r4, ip
 800432e:	3802      	subs	r0, #2
 8004330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004334:	1b64      	subs	r4, r4, r5
 8004336:	2100      	movs	r1, #0
 8004338:	b11e      	cbz	r6, 8004342 <__udivmoddi4+0xa2>
 800433a:	40dc      	lsrs	r4, r3
 800433c:	2300      	movs	r3, #0
 800433e:	e9c6 4300 	strd	r4, r3, [r6]
 8004342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004346:	428b      	cmp	r3, r1
 8004348:	d908      	bls.n	800435c <__udivmoddi4+0xbc>
 800434a:	2e00      	cmp	r6, #0
 800434c:	f000 80ed 	beq.w	800452a <__udivmoddi4+0x28a>
 8004350:	2100      	movs	r1, #0
 8004352:	e9c6 0500 	strd	r0, r5, [r6]
 8004356:	4608      	mov	r0, r1
 8004358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800435c:	fab3 f183 	clz	r1, r3
 8004360:	2900      	cmp	r1, #0
 8004362:	d149      	bne.n	80043f8 <__udivmoddi4+0x158>
 8004364:	42ab      	cmp	r3, r5
 8004366:	d302      	bcc.n	800436e <__udivmoddi4+0xce>
 8004368:	4282      	cmp	r2, r0
 800436a:	f200 80f8 	bhi.w	800455e <__udivmoddi4+0x2be>
 800436e:	1a84      	subs	r4, r0, r2
 8004370:	eb65 0203 	sbc.w	r2, r5, r3
 8004374:	2001      	movs	r0, #1
 8004376:	4617      	mov	r7, r2
 8004378:	2e00      	cmp	r6, #0
 800437a:	d0e2      	beq.n	8004342 <__udivmoddi4+0xa2>
 800437c:	e9c6 4700 	strd	r4, r7, [r6]
 8004380:	e7df      	b.n	8004342 <__udivmoddi4+0xa2>
 8004382:	b902      	cbnz	r2, 8004386 <__udivmoddi4+0xe6>
 8004384:	deff      	udf	#255	; 0xff
 8004386:	fab2 f382 	clz	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 8090 	bne.w	80044b0 <__udivmoddi4+0x210>
 8004390:	1a8a      	subs	r2, r1, r2
 8004392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004396:	fa1f fe8c 	uxth.w	lr, ip
 800439a:	2101      	movs	r1, #1
 800439c:	fbb2 f5f7 	udiv	r5, r2, r7
 80043a0:	fb07 2015 	mls	r0, r7, r5, r2
 80043a4:	0c22      	lsrs	r2, r4, #16
 80043a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80043aa:	fb0e f005 	mul.w	r0, lr, r5
 80043ae:	4290      	cmp	r0, r2
 80043b0:	d908      	bls.n	80043c4 <__udivmoddi4+0x124>
 80043b2:	eb1c 0202 	adds.w	r2, ip, r2
 80043b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80043ba:	d202      	bcs.n	80043c2 <__udivmoddi4+0x122>
 80043bc:	4290      	cmp	r0, r2
 80043be:	f200 80cb 	bhi.w	8004558 <__udivmoddi4+0x2b8>
 80043c2:	4645      	mov	r5, r8
 80043c4:	1a12      	subs	r2, r2, r0
 80043c6:	b2a4      	uxth	r4, r4
 80043c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80043cc:	fb07 2210 	mls	r2, r7, r0, r2
 80043d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80043d4:	fb0e fe00 	mul.w	lr, lr, r0
 80043d8:	45a6      	cmp	lr, r4
 80043da:	d908      	bls.n	80043ee <__udivmoddi4+0x14e>
 80043dc:	eb1c 0404 	adds.w	r4, ip, r4
 80043e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80043e4:	d202      	bcs.n	80043ec <__udivmoddi4+0x14c>
 80043e6:	45a6      	cmp	lr, r4
 80043e8:	f200 80bb 	bhi.w	8004562 <__udivmoddi4+0x2c2>
 80043ec:	4610      	mov	r0, r2
 80043ee:	eba4 040e 	sub.w	r4, r4, lr
 80043f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80043f6:	e79f      	b.n	8004338 <__udivmoddi4+0x98>
 80043f8:	f1c1 0720 	rsb	r7, r1, #32
 80043fc:	408b      	lsls	r3, r1
 80043fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8004402:	ea4c 0c03 	orr.w	ip, ip, r3
 8004406:	fa05 f401 	lsl.w	r4, r5, r1
 800440a:	fa20 f307 	lsr.w	r3, r0, r7
 800440e:	40fd      	lsrs	r5, r7
 8004410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004414:	4323      	orrs	r3, r4
 8004416:	fbb5 f8f9 	udiv	r8, r5, r9
 800441a:	fa1f fe8c 	uxth.w	lr, ip
 800441e:	fb09 5518 	mls	r5, r9, r8, r5
 8004422:	0c1c      	lsrs	r4, r3, #16
 8004424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8004428:	fb08 f50e 	mul.w	r5, r8, lr
 800442c:	42a5      	cmp	r5, r4
 800442e:	fa02 f201 	lsl.w	r2, r2, r1
 8004432:	fa00 f001 	lsl.w	r0, r0, r1
 8004436:	d90b      	bls.n	8004450 <__udivmoddi4+0x1b0>
 8004438:	eb1c 0404 	adds.w	r4, ip, r4
 800443c:	f108 3aff 	add.w	sl, r8, #4294967295
 8004440:	f080 8088 	bcs.w	8004554 <__udivmoddi4+0x2b4>
 8004444:	42a5      	cmp	r5, r4
 8004446:	f240 8085 	bls.w	8004554 <__udivmoddi4+0x2b4>
 800444a:	f1a8 0802 	sub.w	r8, r8, #2
 800444e:	4464      	add	r4, ip
 8004450:	1b64      	subs	r4, r4, r5
 8004452:	b29d      	uxth	r5, r3
 8004454:	fbb4 f3f9 	udiv	r3, r4, r9
 8004458:	fb09 4413 	mls	r4, r9, r3, r4
 800445c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8004460:	fb03 fe0e 	mul.w	lr, r3, lr
 8004464:	45a6      	cmp	lr, r4
 8004466:	d908      	bls.n	800447a <__udivmoddi4+0x1da>
 8004468:	eb1c 0404 	adds.w	r4, ip, r4
 800446c:	f103 35ff 	add.w	r5, r3, #4294967295
 8004470:	d26c      	bcs.n	800454c <__udivmoddi4+0x2ac>
 8004472:	45a6      	cmp	lr, r4
 8004474:	d96a      	bls.n	800454c <__udivmoddi4+0x2ac>
 8004476:	3b02      	subs	r3, #2
 8004478:	4464      	add	r4, ip
 800447a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800447e:	fba3 9502 	umull	r9, r5, r3, r2
 8004482:	eba4 040e 	sub.w	r4, r4, lr
 8004486:	42ac      	cmp	r4, r5
 8004488:	46c8      	mov	r8, r9
 800448a:	46ae      	mov	lr, r5
 800448c:	d356      	bcc.n	800453c <__udivmoddi4+0x29c>
 800448e:	d053      	beq.n	8004538 <__udivmoddi4+0x298>
 8004490:	b156      	cbz	r6, 80044a8 <__udivmoddi4+0x208>
 8004492:	ebb0 0208 	subs.w	r2, r0, r8
 8004496:	eb64 040e 	sbc.w	r4, r4, lr
 800449a:	fa04 f707 	lsl.w	r7, r4, r7
 800449e:	40ca      	lsrs	r2, r1
 80044a0:	40cc      	lsrs	r4, r1
 80044a2:	4317      	orrs	r7, r2
 80044a4:	e9c6 7400 	strd	r7, r4, [r6]
 80044a8:	4618      	mov	r0, r3
 80044aa:	2100      	movs	r1, #0
 80044ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b0:	f1c3 0120 	rsb	r1, r3, #32
 80044b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80044b8:	fa20 f201 	lsr.w	r2, r0, r1
 80044bc:	fa25 f101 	lsr.w	r1, r5, r1
 80044c0:	409d      	lsls	r5, r3
 80044c2:	432a      	orrs	r2, r5
 80044c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80044c8:	fa1f fe8c 	uxth.w	lr, ip
 80044cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80044d0:	fb07 1510 	mls	r5, r7, r0, r1
 80044d4:	0c11      	lsrs	r1, r2, #16
 80044d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80044da:	fb00 f50e 	mul.w	r5, r0, lr
 80044de:	428d      	cmp	r5, r1
 80044e0:	fa04 f403 	lsl.w	r4, r4, r3
 80044e4:	d908      	bls.n	80044f8 <__udivmoddi4+0x258>
 80044e6:	eb1c 0101 	adds.w	r1, ip, r1
 80044ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80044ee:	d22f      	bcs.n	8004550 <__udivmoddi4+0x2b0>
 80044f0:	428d      	cmp	r5, r1
 80044f2:	d92d      	bls.n	8004550 <__udivmoddi4+0x2b0>
 80044f4:	3802      	subs	r0, #2
 80044f6:	4461      	add	r1, ip
 80044f8:	1b49      	subs	r1, r1, r5
 80044fa:	b292      	uxth	r2, r2
 80044fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8004500:	fb07 1115 	mls	r1, r7, r5, r1
 8004504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004508:	fb05 f10e 	mul.w	r1, r5, lr
 800450c:	4291      	cmp	r1, r2
 800450e:	d908      	bls.n	8004522 <__udivmoddi4+0x282>
 8004510:	eb1c 0202 	adds.w	r2, ip, r2
 8004514:	f105 38ff 	add.w	r8, r5, #4294967295
 8004518:	d216      	bcs.n	8004548 <__udivmoddi4+0x2a8>
 800451a:	4291      	cmp	r1, r2
 800451c:	d914      	bls.n	8004548 <__udivmoddi4+0x2a8>
 800451e:	3d02      	subs	r5, #2
 8004520:	4462      	add	r2, ip
 8004522:	1a52      	subs	r2, r2, r1
 8004524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8004528:	e738      	b.n	800439c <__udivmoddi4+0xfc>
 800452a:	4631      	mov	r1, r6
 800452c:	4630      	mov	r0, r6
 800452e:	e708      	b.n	8004342 <__udivmoddi4+0xa2>
 8004530:	4639      	mov	r1, r7
 8004532:	e6e6      	b.n	8004302 <__udivmoddi4+0x62>
 8004534:	4610      	mov	r0, r2
 8004536:	e6fb      	b.n	8004330 <__udivmoddi4+0x90>
 8004538:	4548      	cmp	r0, r9
 800453a:	d2a9      	bcs.n	8004490 <__udivmoddi4+0x1f0>
 800453c:	ebb9 0802 	subs.w	r8, r9, r2
 8004540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8004544:	3b01      	subs	r3, #1
 8004546:	e7a3      	b.n	8004490 <__udivmoddi4+0x1f0>
 8004548:	4645      	mov	r5, r8
 800454a:	e7ea      	b.n	8004522 <__udivmoddi4+0x282>
 800454c:	462b      	mov	r3, r5
 800454e:	e794      	b.n	800447a <__udivmoddi4+0x1da>
 8004550:	4640      	mov	r0, r8
 8004552:	e7d1      	b.n	80044f8 <__udivmoddi4+0x258>
 8004554:	46d0      	mov	r8, sl
 8004556:	e77b      	b.n	8004450 <__udivmoddi4+0x1b0>
 8004558:	3d02      	subs	r5, #2
 800455a:	4462      	add	r2, ip
 800455c:	e732      	b.n	80043c4 <__udivmoddi4+0x124>
 800455e:	4608      	mov	r0, r1
 8004560:	e70a      	b.n	8004378 <__udivmoddi4+0xd8>
 8004562:	4464      	add	r4, ip
 8004564:	3802      	subs	r0, #2
 8004566:	e742      	b.n	80043ee <__udivmoddi4+0x14e>

08004568 <__aeabi_idiv0>:
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop

0800456c <cdc_send>:
#include "cdc_endp.h"

#define SEND_TIMEOUT 0x1000000          // 发送超时时间

static int cdc_send(uint8_t *data, uint32_t len)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
    uint32_t timeout = SEND_TIMEOUT;
 8004576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800457a:	60fb      	str	r3, [r7, #12]

    if (!CDC_IsPacketSent())              // 如果之前的CDC发送未完成
 800457c:	f000 f98e 	bl	800489c <CDC_IsPacketSent>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d117      	bne.n	80045b6 <cdc_send+0x4a>
    {
        DEBUG_PRINT("Wait for previous CDC TX\r\n");  // 打印调试信息，等待上一次CDC发送完成
 8004586:	4816      	ldr	r0, [pc, #88]	; (80045e0 <cdc_send+0x74>)
 8004588:	f00e fd2c 	bl	8012fe4 <puts>
        while (!CDC_IsPacketSent() && --timeout);    // 等待CDC发送完成，或者超时
 800458c:	bf00      	nop
 800458e:	f000 f985 	bl	800489c <CDC_IsPacketSent>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <cdc_send+0x38>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3b01      	subs	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f4      	bne.n	800458e <cdc_send+0x22>
        if (!timeout)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d105      	bne.n	80045b6 <cdc_send+0x4a>
        {
            ERROR_PRINT("Failed to send data, CDC is busy\r\n");   // 打印错误信息，发送超时，CDC忙碌
 80045aa:	480e      	ldr	r0, [pc, #56]	; (80045e4 <cdc_send+0x78>)
 80045ac:	f00e fd1a 	bl	8012fe4 <puts>
            return -1;                                          // 返回错误代码
 80045b0:	f04f 33ff 	mov.w	r3, #4294967295
 80045b4:	e00f      	b.n	80045d6 <cdc_send+0x6a>
        }
    }

    if (!CDC_Send_DATA(data, len))                              // 发送数据
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f947 	bl	8004850 <CDC_Send_DATA>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <cdc_send+0x68>
    {
        ERROR_PRINT("Failed to send data\r\n");                  // 打印错误信息，发送数据失败
 80045c8:	4807      	ldr	r0, [pc, #28]	; (80045e8 <cdc_send+0x7c>)
 80045ca:	f00e fd0b 	bl	8012fe4 <puts>
        return -1;                                              // 返回错误代码
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295
 80045d2:	e000      	b.n	80045d6 <cdc_send+0x6a>
    }

    return 0;                                                   // 返回成功代码
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	08013cec 	.word	0x08013cec
 80045e4:	08013d08 	.word	0x08013d08
 80045e8:	08013d34 	.word	0x08013d34

080045ec <cdc_send_ready>:

static int cdc_send_ready()
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
    return CDC_IsPacketSent();                                  // 返回CDC是否可发送数据的状态
 80045f0:	f000 f954 	bl	800489c <CDC_IsPacketSent>
 80045f4:	4603      	mov	r3, r0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	bd80      	pop	{r7, pc}

080045fa <cdc_peek>:

static uint32_t cdc_peek(uint8_t **data)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
    return USB_Data_Peek(data);                                 // 查看USB数据
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f82a 	bl	800465c <USB_Data_Peek>
 8004608:	4603      	mov	r3, r0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <cdc_consume>:

static void cdc_consume()
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
    uint8_t *data;

    USB_Data_Get(&data);                                        // 获取USB数据
 8004618:	1d3b      	adds	r3, r7, #4
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f84e 	bl	80046bc <USB_Data_Get>
    USB_DataRx_Sched();                                         // 调度USB数据接收
 8004620:	f000 f8ac 	bl	800477c <USB_DataRx_Sched>
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <cdc_init>:
    .peek = cdc_peek,
    .consume = cdc_consume,
};

void cdc_init()
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
    np_comm_register(&cdc_comm_cb);                             // 注册CDC通信回调函数
 8004630:	4803      	ldr	r0, [pc, #12]	; (8004640 <cdc_init+0x14>)
 8004632:	f003 fc7d 	bl	8007f30 <np_comm_register>

    /* Enable receive of data */
    CDC_Receive_DATA();                                         // 启用数据接收
 8004636:	f000 f927 	bl	8004888 <CDC_Receive_DATA>
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000000 	.word	0x20000000

08004644 <EP1_IN_Callback>:
* Output         : None.
* Return         : None.
*******************************************************************************/

void EP1_IN_Callback ()
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  packet_sent = 1;
 8004648:	4b03      	ldr	r3, [pc, #12]	; (8004658 <EP1_IN_Callback+0x14>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]
}
 800464e:	bf00      	nop
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	20000014 	.word	0x20000014

0800465c <USB_Data_Peek>:

static packet_t circ_buf[CIRC_BUF_SIZE];
static volatile uint8_t head, size, tail = CIRC_BUF_SIZE - 1;

uint32_t USB_Data_Peek(uint8_t **data)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  if (!size)
 8004664:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <USB_Data_Peek+0x54>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <USB_Data_Peek+0x16>
    return 0;
 800466e:	2300      	movs	r3, #0
 8004670:	e017      	b.n	80046a2 <USB_Data_Peek+0x46>

  *data = circ_buf[head].pbuf;
 8004672:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <USB_Data_Peek+0x58>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	4613      	mov	r3, r2
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4a0d      	ldr	r2, [pc, #52]	; (80046b8 <USB_Data_Peek+0x5c>)
 8004684:	441a      	add	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]

  return circ_buf[head].len;
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <USB_Data_Peek+0x58>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	4619      	mov	r1, r3
 8004692:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <USB_Data_Peek+0x5c>)
 8004694:	460b      	mov	r3, r1
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	440b      	add	r3, r1
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	3340      	adds	r3, #64	; 0x40
 80046a0:	681b      	ldr	r3, [r3, #0]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	20000c01 	.word	0x20000c01
 80046b4:	20000c00 	.word	0x20000c00
 80046b8:	200002f8 	.word	0x200002f8

080046bc <USB_Data_Get>:

uint32_t USB_Data_Get(uint8_t **data)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t len;

  if (!size)
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <USB_Data_Get+0x90>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <USB_Data_Get+0x16>
    return 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e036      	b.n	8004740 <USB_Data_Get+0x84>

  *data = circ_buf[head].pbuf;
 80046d2:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <USB_Data_Get+0x94>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	4613      	mov	r3, r2
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <USB_Data_Get+0x98>)
 80046e4:	441a      	add	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	601a      	str	r2, [r3, #0]
  len = circ_buf[head].len;
 80046ea:	4b19      	ldr	r3, [pc, #100]	; (8004750 <USB_Data_Get+0x94>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	4619      	mov	r1, r3
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <USB_Data_Get+0x98>)
 80046f4:	460b      	mov	r3, r1
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	440b      	add	r3, r1
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	3340      	adds	r3, #64	; 0x40
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
  head = (head + 1) % CIRC_BUF_SIZE;
 8004704:	4b12      	ldr	r3, [pc, #72]	; (8004750 <USB_Data_Get+0x94>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	4b12      	ldr	r3, [pc, #72]	; (8004758 <USB_Data_Get+0x9c>)
 800470e:	fb83 1302 	smull	r1, r3, r3, r2
 8004712:	1119      	asrs	r1, r3, #4
 8004714:	17d3      	asrs	r3, r2, #31
 8004716:	1ac9      	subs	r1, r1, r3
 8004718:	460b      	mov	r3, r1
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	440b      	add	r3, r1
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	1ad1      	subs	r1, r2, r3
 8004722:	b2ca      	uxtb	r2, r1
 8004724:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <USB_Data_Get+0x94>)
 8004726:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004728:	b672      	cpsid	i
}
 800472a:	bf00      	nop
  __disable_irq();
  size--;
 800472c:	4b07      	ldr	r3, [pc, #28]	; (800474c <USB_Data_Get+0x90>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <USB_Data_Get+0x90>)
 8004738:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800473a:	b662      	cpsie	i
}
 800473c:	bf00      	nop
  __enable_irq();

  return len;
 800473e:	68fb      	ldr	r3, [r7, #12]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	20000c01 	.word	0x20000c01
 8004750:	20000c00 	.word	0x20000c00
 8004754:	200002f8 	.word	0x200002f8
 8004758:	78787879 	.word	0x78787879

0800475c <USB_DataRx_Sched_Internal>:

static inline void USB_DataRx_Sched_Internal(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  if (size < CIRC_BUF_SIZE)
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <USB_DataRx_Sched_Internal+0x18>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b21      	cmp	r3, #33	; 0x21
 8004768:	d802      	bhi.n	8004770 <USB_DataRx_Sched_Internal+0x14>
//    SetEPRxValid(ENDP3);
	  USBD_CtlReceiveStatus(&hUsbDeviceHS);
 800476a:	4803      	ldr	r0, [pc, #12]	; (8004778 <USB_DataRx_Sched_Internal+0x1c>)
 800476c:	f00d fb7f 	bl	8011e6e <USBD_CtlReceiveStatus>
}
 8004770:	bf00      	nop
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000c01 	.word	0x20000c01
 8004778:	20005220 	.word	0x20005220

0800477c <USB_DataRx_Sched>:

void USB_DataRx_Sched(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004780:	b672      	cpsid	i
}
 8004782:	bf00      	nop
  __disable_irq();
  USB_DataRx_Sched_Internal();
 8004784:	f7ff ffea 	bl	800475c <USB_DataRx_Sched_Internal>
  __ASM volatile ("cpsie i" : : : "memory");
 8004788:	b662      	cpsie	i
}
 800478a:	bf00      	nop
  __enable_irq();
}
 800478c:	bf00      	nop
 800478e:	bd80      	pop	{r7, pc}

08004790 <EP3_OUT_Callback>:

// CDC接收数据回调函数
/*void EP3_OUT_Callback(void)*/
void EP3_OUT_Callback(uint8_t **Buf, uint32_t *Len)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
	Receive_length = USBD_GetRxCount(&hUsbDeviceHS, CDC_OUT_EP);
 800479a:	2101      	movs	r1, #1
 800479c:	4825      	ldr	r0, [pc, #148]	; (8004834 <EP3_OUT_Callback+0xa4>)
 800479e:	f00d fb79 	bl	8011e94 <USBD_GetRxCount>
 80047a2:	4603      	mov	r3, r0
 80047a4:	4a24      	ldr	r2, [pc, #144]	; (8004838 <EP3_OUT_Callback+0xa8>)
 80047a6:	6013      	str	r3, [r2, #0]
    if (size < CIRC_BUF_SIZE)
 80047a8:	4b24      	ldr	r3, [pc, #144]	; (800483c <EP3_OUT_Callback+0xac>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b21      	cmp	r3, #33	; 0x21
 80047b0:	d83b      	bhi.n	800482a <EP3_OUT_Callback+0x9a>
    {
    	printf("E3_OUT run \r\n");
 80047b2:	4823      	ldr	r0, [pc, #140]	; (8004840 <EP3_OUT_Callback+0xb0>)
 80047b4:	f00e fc16 	bl	8012fe4 <puts>
        // 循环缓冲区索引移动
        tail = (tail + 1) % CIRC_BUF_SIZE;
 80047b8:	4b22      	ldr	r3, [pc, #136]	; (8004844 <EP3_OUT_Callback+0xb4>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	4b21      	ldr	r3, [pc, #132]	; (8004848 <EP3_OUT_Callback+0xb8>)
 80047c2:	fb83 1302 	smull	r1, r3, r3, r2
 80047c6:	1119      	asrs	r1, r3, #4
 80047c8:	17d3      	asrs	r3, r2, #31
 80047ca:	1ac9      	subs	r1, r1, r3
 80047cc:	460b      	mov	r3, r1
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	440b      	add	r3, r1
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	1ad1      	subs	r1, r2, r3
 80047d6:	b2ca      	uxtb	r2, r1
 80047d8:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <EP3_OUT_Callback+0xb4>)
 80047da:	701a      	strb	r2, [r3, #0]
        // 将接收到的数据复制到循环缓冲区
        // 将数据从 Buf 复制到 circ_buf[tail].pbuf
        memcpy(circ_buf[tail].pbuf, Buf, Receive_length);
 80047dc:	4b19      	ldr	r3, [pc, #100]	; (8004844 <EP3_OUT_Callback+0xb4>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4a17      	ldr	r2, [pc, #92]	; (800484c <EP3_OUT_Callback+0xbc>)
 80047ee:	4413      	add	r3, r2
 80047f0:	4a11      	ldr	r2, [pc, #68]	; (8004838 <EP3_OUT_Callback+0xa8>)
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f00e fd4f 	bl	801329a <memcpy>
        circ_buf[tail].len = Receive_length;
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <EP3_OUT_Callback+0xb4>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	4618      	mov	r0, r3
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <EP3_OUT_Callback+0xa8>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	4910      	ldr	r1, [pc, #64]	; (800484c <EP3_OUT_Callback+0xbc>)
 800480a:	4603      	mov	r3, r0
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	4403      	add	r3, r0
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	3340      	adds	r3, #64	; 0x40
 8004816:	601a      	str	r2, [r3, #0]
        size++;
 8004818:	4b08      	ldr	r3, [pc, #32]	; (800483c <EP3_OUT_Callback+0xac>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	3301      	adds	r3, #1
 8004820:	b2da      	uxtb	r2, r3
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <EP3_OUT_Callback+0xac>)
 8004824:	701a      	strb	r2, [r3, #0]
        USB_DataRx_Sched_Internal();
 8004826:	f7ff ff99 	bl	800475c <USB_DataRx_Sched_Internal>
    // 发送数据到USART1
//    HAL_UART_Transmit(&huart1, circ_buf[tail].pbuf, Receive_length, HAL_MAX_DELAY);

    // 发送数据回USB HS
//    CDC_Transmit_HS(circ_buf[tail].pbuf, Receive_length); // 假设存在一个名为USBD_CDC_Transmit_HS的函数
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20005220 	.word	0x20005220
 8004838:	200002f4 	.word	0x200002f4
 800483c:	20000c01 	.word	0x20000c01
 8004840:	08013d50 	.word	0x08013d50
 8004844:	20000010 	.word	0x20000010
 8004848:	78787879 	.word	0x78787879
 800484c:	200002f8 	.word	0x200002f8

08004850 <CDC_Send_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Send_DATA (uint8_t *ptrBuffer, uint8_t Send_length)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	70fb      	strb	r3, [r7, #3]
  /*if max buffer is Not reached*/
  if(Send_length <= VIRTUAL_COM_PORT_DATA_SIZE)
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d80a      	bhi.n	8004878 <CDC_Send_DATA+0x28>
/*packet_sent = 0;
  memcpy(CDC_IN_EP, (unsigned char*)ptrBuffer, Send_length);
  CDC_Transmit_HS((unsigned char*)ptrBuffer, Send_length);
单次发送
 */
	  packet_sent = 0;
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <CDC_Send_DATA+0x34>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
//      memcpy(CDC_IN_EP, (unsigned char*)ptrBuffer, Send_length);
      CDC_Transmit_HS((unsigned char*)ptrBuffer, Send_length);
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	b29b      	uxth	r3, r3
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f00d fcae 	bl	80121d0 <CDC_Transmit_HS>
  }
  else
  {
    return 0;
  }
  return 1;
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <CDC_Send_DATA+0x2a>
    return 0;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000014 	.word	0x20000014

08004888 <CDC_Receive_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Receive_DATA(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  USBD_CtlReceiveStatus(&hUsbDeviceHS);
 800488c:	4802      	ldr	r0, [pc, #8]	; (8004898 <CDC_Receive_DATA+0x10>)
 800488e:	f00d faee 	bl	8011e6e <USBD_CtlReceiveStatus>
  return 1 ;
 8004892:	2301      	movs	r3, #1
}
 8004894:	4618      	mov	r0, r3
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20005220 	.word	0x20005220

0800489c <CDC_IsPacketSent>:
* Input          : None.
* Output         : None.
* Return         : 1/0.
*******************************************************************************/
int CDC_IsPacketSent(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return packet_sent;
 80048a0:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <CDC_IsPacketSent+0x14>)
 80048a2:	681b      	ldr	r3, [r3, #0]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20000014 	.word	0x20000014

080048b4 <is_external_clock_avail>:
 */

#include "clock.h"
#include <stm32f4xx.h>

bool is_external_clock_avail() {
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
	return (RCC->CR & RCC_CR_HSERDY) != RESET;
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <is_external_clock_avail+0x20>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	40023800 	.word	0x40023800

080048d8 <flash_page_erase>:
#include "stm32f4xx_hal.h"
#include <string.h>

// 擦除指定页的Flash存储器
int flash_page_erase(uint32_t page_addr)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef erase_init;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 80048e0:	f005 f962 	bl	8009ba8 <HAL_FLASH_Unlock>

    // 配置擦除初始化结构体
    erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60bb      	str	r3, [r7, #8]
    erase_init.Sector = FLASH_SECTOR_0; // 选择要擦除的扇区，可以根据您的需求更改
 80048e8:	2300      	movs	r3, #0
 80048ea:	613b      	str	r3, [r7, #16]
    erase_init.NbSectors = 1; // 要擦除的扇区数量
 80048ec:	2301      	movs	r3, #1
 80048ee:	617b      	str	r3, [r7, #20]
    erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3; // 选择电压范围，可以根据您的需求更改
 80048f0:	2302      	movs	r3, #2
 80048f2:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&erase_init, NULL); // 擦除指定页
 80048f4:	f107 0308 	add.w	r3, r7, #8
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f005 fab6 	bl	8009e6c <HAL_FLASHEx_Erase>
 8004900:	4603      	mov	r3, r0
 8004902:	77fb      	strb	r3, [r7, #31]

    // 锁定Flash存储器
    HAL_FLASH_Lock();
 8004904:	f005 f972 	bl	8009bec <HAL_FLASH_Lock>

    return status != HAL_OK ? -1 : 0;
 8004908:	7ffb      	ldrb	r3, [r7, #31]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <flash_page_erase+0x3c>
 800490e:	f04f 33ff 	mov.w	r3, #4294967295
 8004912:	e000      	b.n	8004916 <flash_page_erase+0x3e>
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <flash_write>:

// 向Flash存储器写入数据
int flash_write(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 800491e:	b5b0      	push	{r4, r5, r7, lr}
 8004920:	b088      	sub	sp, #32
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
    int ret = -1;
 800492a:	f04f 33ff 	mov.w	r3, #4294967295
 800492e:	61fb      	str	r3, [r7, #28]
    uint32_t data_word;
    uint32_t i;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 8004930:	f005 f93a 	bl	8009ba8 <HAL_FLASH_Unlock>

    for (i = 0; i < data_len; i += 4)
 8004934:	2300      	movs	r3, #0
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	e017      	b.n	800496a <flash_write+0x4c>
    {
        // 从数据缓冲区中读取32位字
        memcpy(&data_word, &data[i], 4);
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	4413      	add	r3, r2
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	617b      	str	r3, [r7, #20]

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data_word) != HAL_OK)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2200      	movs	r2, #0
 8004948:	461c      	mov	r4, r3
 800494a:	4615      	mov	r5, r2
 800494c:	4622      	mov	r2, r4
 800494e:	462b      	mov	r3, r5
 8004950:	68f9      	ldr	r1, [r7, #12]
 8004952:	2002      	movs	r0, #2
 8004954:	f005 f820 	bl	8009998 <HAL_FLASH_Program>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10c      	bne.n	8004978 <flash_write+0x5a>
            goto Exit;

        addr += 4; // 更新地址，指向下一个32位字
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3304      	adds	r3, #4
 8004962:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < data_len; i += 4)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	3304      	adds	r3, #4
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	429a      	cmp	r2, r3
 8004970:	d3e3      	bcc.n	800493a <flash_write+0x1c>
    }

    ret = data_len;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	e000      	b.n	800497a <flash_write+0x5c>
            goto Exit;
 8004978:	bf00      	nop
Exit:
    // 锁定Flash存储器
    HAL_FLASH_Lock();
 800497a:	f005 f937 	bl	8009bec <HAL_FLASH_Lock>

    return ret;
 800497e:	69fb      	ldr	r3, [r7, #28]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bdb0      	pop	{r4, r5, r7, pc}

08004988 <flash_read>:

// 从Flash存储器读取数据
int flash_read(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for (i = 0; i < data_len; i++)
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	e00c      	b.n	80049b4 <flash_read+0x2c>
    {
        data[i] = *(__IO uint8_t *)(addr + i); // 从Flash存储器中读取字节数据
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4413      	add	r3, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	4413      	add	r3, r2
 80049a8:	780a      	ldrb	r2, [r1, #0]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_len; i++)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	3301      	adds	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d3ee      	bcc.n	800499a <flash_read+0x12>
    }

    return i;
 80049bc:	697b      	ldr	r3, [r7, #20]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <HAL_FSMC_MspInit>:
  /* USER CODE END FSMC_Init 2 */
}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d2:	1d3b      	adds	r3, r7, #4
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	60da      	str	r2, [r3, #12]
 80049de:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80049e0:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <HAL_FSMC_MspInit+0x98>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d139      	bne.n	8004a5c <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 80049e8:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <HAL_FSMC_MspInit+0x98>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	603b      	str	r3, [r7, #0]
 80049f2:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_FSMC_MspInit+0x9c>)
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <HAL_FSMC_MspInit+0x9c>)
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	6393      	str	r3, [r2, #56]	; 0x38
 80049fe:	4b1a      	ldr	r3, [pc, #104]	; (8004a68 <HAL_FSMC_MspInit+0x9c>)
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004a0a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004a0e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a10:	2302      	movs	r3, #2
 8004a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004a1c:	230c      	movs	r3, #12
 8004a1e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a20:	1d3b      	adds	r3, r7, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	4811      	ldr	r0, [pc, #68]	; (8004a6c <HAL_FSMC_MspInit+0xa0>)
 8004a26:	f005 fb43 	bl	800a0b0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004a2a:	f64d 73f3 	movw	r3, #57331	; 0xdff3
 8004a2e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a30:	2302      	movs	r3, #2
 8004a32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004a3c:	230c      	movs	r3, #12
 8004a3e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	4619      	mov	r1, r3
 8004a44:	480a      	ldr	r0, [pc, #40]	; (8004a70 <HAL_FSMC_MspInit+0xa4>)
 8004a46:	f005 fb33 	bl	800a0b0 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	2030      	movs	r0, #48	; 0x30
 8004a50:	f004 fecb 	bl	80097ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004a54:	2030      	movs	r0, #48	; 0x30
 8004a56:	f004 fee4 	bl	8009822 <HAL_NVIC_EnableIRQ>
 8004a5a:	e000      	b.n	8004a5e <HAL_FSMC_MspInit+0x92>
    return;
 8004a5c:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000c44 	.word	0x20000c44
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	40020c00 	.word	0x40020c00

08004a74 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8004a7c:	f7ff ffa6 	bl	80049cc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <nand_gpio_init>:
static fsmc_conf_t fsmc_conf;   // FSMC NAND Flash的配置结构体

static uint32_t FSMC_Initialized = 0;

static void nand_gpio_init(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a8e:	1d3b      	adds	r3, r7, #4
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	60da      	str	r2, [r3, #12]
 8004a9a:	611a      	str	r2, [r3, #16]
	  if (FSMC_Initialized) {
 8004a9c:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <nand_gpio_init+0x98>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d139      	bne.n	8004b18 <nand_gpio_init+0x90>
	    return;
	  }
	  FSMC_Initialized = 1;
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <nand_gpio_init+0x98>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

	  /* Peripheral clock enable */
	  __HAL_RCC_FSMC_CLK_ENABLE();
 8004aaa:	2300      	movs	r3, #0
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <nand_gpio_init+0x9c>)
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <nand_gpio_init+0x9c>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	6393      	str	r3, [r2, #56]	; 0x38
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <nand_gpio_init+0x9c>)
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
	  PD5   ------> FSMC_NWE
	  PD6   ------> FSMC_NWAIT
	  PD7   ------> FSMC_NCE2
	  */
	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004ac6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004aca:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004acc:	2302      	movs	r3, #2
 8004ace:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004ad8:	230c      	movs	r3, #12
 8004ada:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4811      	ldr	r0, [pc, #68]	; (8004b28 <nand_gpio_init+0xa0>)
 8004ae2:	f005 fae5 	bl	800a0b0 <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004ae6:	f64d 73f3 	movw	r3, #57331	; 0xdff3
 8004aea:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
	                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                          |GPIO_PIN_7;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aec:	2302      	movs	r3, #2
 8004aee:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af4:	2303      	movs	r3, #3
 8004af6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004af8:	230c      	movs	r3, #12
 8004afa:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004afc:	1d3b      	adds	r3, r7, #4
 8004afe:	4619      	mov	r1, r3
 8004b00:	480a      	ldr	r0, [pc, #40]	; (8004b2c <nand_gpio_init+0xa4>)
 8004b02:	f005 fad5 	bl	800a0b0 <HAL_GPIO_Init>

	  /* Peripheral interrupt init */
	  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8004b06:	2200      	movs	r2, #0
 8004b08:	2100      	movs	r1, #0
 8004b0a:	2030      	movs	r0, #48	; 0x30
 8004b0c:	f004 fe6d 	bl	80097ea <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004b10:	2030      	movs	r0, #48	; 0x30
 8004b12:	f004 fe86 	bl	8009822 <HAL_NVIC_EnableIRQ>
 8004b16:	e000      	b.n	8004b1a <nand_gpio_init+0x92>
	    return;
 8004b18:	bf00      	nop
	  /* USER CODE BEGIN FSMC_MspInit 1 */

	  /* USER CODE END FSMC_MspInit 1 */
}
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000c60 	.word	0x20000c60
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40020c00 	.word	0x40020c00

08004b30 <nand_fsmc_init>:


static void nand_fsmc_init()
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af00      	add	r7, sp, #0
//    FSMC_NAND_InitTypeDef fsmc_init;

//    FSMC_NAND_PCC_TimingTypeDef timing_init;
    FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8004b36:	f107 0318 	add.w	r3, r7, #24
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	605a      	str	r2, [r3, #4]
 8004b40:	609a      	str	r2, [r3, #8]
 8004b42:	60da      	str	r2, [r3, #12]
    FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8004b44:	f107 0308 	add.w	r3, r7, #8
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	60da      	str	r2, [r3, #12]

//    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
//    __HAL_RCC_FSMC_CLK_ENABLE();

    hnand1.Instance = FSMC_NAND_DEVICE;
 8004b52:	4b29      	ldr	r3, [pc, #164]	; (8004bf8 <nand_fsmc_init+0xc8>)
 8004b54:	4a29      	ldr	r2, [pc, #164]	; (8004bfc <nand_fsmc_init+0xcc>)
 8004b56:	601a      	str	r2, [r3, #0]
//    fsmc_init.FSMC_Bank = FSMC_Bank2_NAND;  // 设置FSMC NAND Flash的相关参数
    hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8004b58:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <nand_fsmc_init+0xc8>)
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	605a      	str	r2, [r3, #4]
//    fsmc_init.FSMC_Waitfeature = FSMC_Waitfeature_Enable;
    hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8004b5e:	4b26      	ldr	r3, [pc, #152]	; (8004bf8 <nand_fsmc_init+0xc8>)
 8004b60:	2202      	movs	r2, #2
 8004b62:	609a      	str	r2, [r3, #8]
//    fsmc_init.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
    hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8004b64:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <nand_fsmc_init+0xc8>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	60da      	str	r2, [r3, #12]
//    fsmc_init.FSMC_ECC = FSMC_ECC_Enable;
    hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8004b6a:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <nand_fsmc_init+0xc8>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	611a      	str	r2, [r3, #16]
//    fsmc_init.FSMC_ECCPageSize = FSMC_ECCPageSize_2048Bytes;
    hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8004b70:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <nand_fsmc_init+0xc8>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	615a      	str	r2, [r3, #20]
//    fsmc_init.FSMC_TCLRSetupTime = fsmc_conf.clr_setup_time;
    hnand1.Init.TCLRSetupTime = fsmc_conf.clr_setup_time;
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <nand_fsmc_init+0xd0>)
 8004b78:	791b      	ldrb	r3, [r3, #4]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	4b1e      	ldr	r3, [pc, #120]	; (8004bf8 <nand_fsmc_init+0xc8>)
 8004b7e:	619a      	str	r2, [r3, #24]
//    fsmc_init.FSMC_TARSetupTime = fsmc_conf.ar_setup_time;
    hnand1.Init.TARSetupTime = fsmc_conf.ar_setup_time;
 8004b80:	4b1f      	ldr	r3, [pc, #124]	; (8004c00 <nand_fsmc_init+0xd0>)
 8004b82:	795b      	ldrb	r3, [r3, #5]
 8004b84:	461a      	mov	r2, r3
 8004b86:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <nand_fsmc_init+0xc8>)
 8004b88:	61da      	str	r2, [r3, #28]
    /* ComSpaceTiming */
//    timing_init.FSMC_SetupTime = fsmc_conf.setup_time;  // 设置时序参数
    ComSpaceTiming.SetupTime = fsmc_conf.setup_time;  // 设置时序参数
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <nand_fsmc_init+0xd0>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	61bb      	str	r3, [r7, #24]
//    timing_init.FSMC_WaitSetupTime = fsmc_conf.wait_setup_time;
    ComSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 8004b90:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <nand_fsmc_init+0xd0>)
 8004b92:	785b      	ldrb	r3, [r3, #1]
 8004b94:	61fb      	str	r3, [r7, #28]
//    timing_init.FSMC_HoldSetupTime = fsmc_conf.hold_setup_time;
    ComSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 8004b96:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <nand_fsmc_init+0xd0>)
 8004b98:	789b      	ldrb	r3, [r3, #2]
 8004b9a:	623b      	str	r3, [r7, #32]
//    timing_init.FSMC_HiZSetupTime = fsmc_conf.hi_z_setup_time;
    ComSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 8004b9c:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <nand_fsmc_init+0xd0>)
 8004b9e:	78db      	ldrb	r3, [r3, #3]
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
    /* AttSpaceTiming */
    AttSpaceTiming.SetupTime = fsmc_conf.setup_time;
 8004ba2:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <nand_fsmc_init+0xd0>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	60bb      	str	r3, [r7, #8]
    AttSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 8004ba8:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <nand_fsmc_init+0xd0>)
 8004baa:	785b      	ldrb	r3, [r3, #1]
 8004bac:	60fb      	str	r3, [r7, #12]
    AttSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 8004bae:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <nand_fsmc_init+0xd0>)
 8004bb0:	789b      	ldrb	r3, [r3, #2]
 8004bb2:	613b      	str	r3, [r7, #16]
    AttSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <nand_fsmc_init+0xd0>)
 8004bb6:	78db      	ldrb	r3, [r3, #3]
 8004bb8:	617b      	str	r3, [r7, #20]

    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8004bba:	f107 0208 	add.w	r2, r7, #8
 8004bbe:	f107 0318 	add.w	r3, r7, #24
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	480c      	ldr	r0, [pc, #48]	; (8004bf8 <nand_fsmc_init+0xc8>)
 8004bc6:	f005 fd24 	bl	800a612 <HAL_NAND_Init>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <nand_fsmc_init+0xa4>
    {
      Error_Handler( );
 8004bd0:	f000 fed6 	bl	8005980 <Error_Handler>
    }  // 初始化FSMC NAND Flash

//    FSMC_NANDCmd(FSMC_Bank_NAND, ENABLE);  // 使能FSMC NAND Flash
    __HAL_RCC_FSMC_CLK_ENABLE();
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	607b      	str	r3, [r7, #4]
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <nand_fsmc_init+0xd4>)
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <nand_fsmc_init+0xd4>)
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6393      	str	r3, [r2, #56]	; 0x38
 8004be4:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <nand_fsmc_init+0xd4>)
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
}
 8004bf0:	bf00      	nop
 8004bf2:	3728      	adds	r7, #40	; 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20000c04 	.word	0x20000c04
 8004bfc:	a0000060 	.word	0xa0000060
 8004c00:	20000c48 	.word	0x20000c48
 8004c04:	40023800 	.word	0x40023800

08004c08 <nand_print_fsmc_info>:

static void nand_print_fsmc_info()
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
    DEBUG_PRINT("Setup time: %d\r\n", fsmc_conf.setup_time);
 8004c0c:	4b42      	ldr	r3, [pc, #264]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	4619      	mov	r1, r3
 8004c12:	4842      	ldr	r0, [pc, #264]	; (8004d1c <nand_print_fsmc_info+0x114>)
 8004c14:	f00e f980 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Wait setup time: %d\r\n", fsmc_conf.wait_setup_time);
 8004c18:	4b3f      	ldr	r3, [pc, #252]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4840      	ldr	r0, [pc, #256]	; (8004d20 <nand_print_fsmc_info+0x118>)
 8004c20:	f00e f97a 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Hold setup time: %d\r\n", fsmc_conf.hold_setup_time);
 8004c24:	4b3c      	ldr	r3, [pc, #240]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c26:	789b      	ldrb	r3, [r3, #2]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	483e      	ldr	r0, [pc, #248]	; (8004d24 <nand_print_fsmc_info+0x11c>)
 8004c2c:	f00e f974 	bl	8012f18 <iprintf>
    DEBUG_PRINT("HiZ setup time: %d\r\n", fsmc_conf.hi_z_setup_time);
 8004c30:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c32:	78db      	ldrb	r3, [r3, #3]
 8004c34:	4619      	mov	r1, r3
 8004c36:	483c      	ldr	r0, [pc, #240]	; (8004d28 <nand_print_fsmc_info+0x120>)
 8004c38:	f00e f96e 	bl	8012f18 <iprintf>
    DEBUG_PRINT("CLR setup time: %d\r\n", fsmc_conf.clr_setup_time);
 8004c3c:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c3e:	791b      	ldrb	r3, [r3, #4]
 8004c40:	4619      	mov	r1, r3
 8004c42:	483a      	ldr	r0, [pc, #232]	; (8004d2c <nand_print_fsmc_info+0x124>)
 8004c44:	f00e f968 	bl	8012f18 <iprintf>
    DEBUG_PRINT("AR setup time: %d\r\n", fsmc_conf.ar_setup_time);
 8004c48:	4b33      	ldr	r3, [pc, #204]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c4a:	795b      	ldrb	r3, [r3, #5]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4838      	ldr	r0, [pc, #224]	; (8004d30 <nand_print_fsmc_info+0x128>)
 8004c50:	f00e f962 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Row cycles: %d\r\n", fsmc_conf.row_cycles);
 8004c54:	4b30      	ldr	r3, [pc, #192]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c56:	799b      	ldrb	r3, [r3, #6]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4836      	ldr	r0, [pc, #216]	; (8004d34 <nand_print_fsmc_info+0x12c>)
 8004c5c:	f00e f95c 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Col. cycles: %d\r\n", fsmc_conf.col_cycles);
 8004c60:	4b2d      	ldr	r3, [pc, #180]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c62:	79db      	ldrb	r3, [r3, #7]
 8004c64:	4619      	mov	r1, r3
 8004c66:	4834      	ldr	r0, [pc, #208]	; (8004d38 <nand_print_fsmc_info+0x130>)
 8004c68:	f00e f956 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Read command 1: %d\r\n", fsmc_conf.read1_cmd);
 8004c6c:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c6e:	7a1b      	ldrb	r3, [r3, #8]
 8004c70:	4619      	mov	r1, r3
 8004c72:	4832      	ldr	r0, [pc, #200]	; (8004d3c <nand_print_fsmc_info+0x134>)
 8004c74:	f00e f950 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Read command 2: %d\r\n", fsmc_conf.read2_cmd);
 8004c78:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c7a:	7a5b      	ldrb	r3, [r3, #9]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4830      	ldr	r0, [pc, #192]	; (8004d40 <nand_print_fsmc_info+0x138>)
 8004c80:	f00e f94a 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Read spare command: %d\r\n", fsmc_conf.read_spare_cmd);    
 8004c84:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c86:	7a9b      	ldrb	r3, [r3, #10]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	482e      	ldr	r0, [pc, #184]	; (8004d44 <nand_print_fsmc_info+0x13c>)
 8004c8c:	f00e f944 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Read ID command: %d\r\n", fsmc_conf.read_id_cmd);
 8004c90:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c92:	7adb      	ldrb	r3, [r3, #11]
 8004c94:	4619      	mov	r1, r3
 8004c96:	482c      	ldr	r0, [pc, #176]	; (8004d48 <nand_print_fsmc_info+0x140>)
 8004c98:	f00e f93e 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Reset command: %d\r\n", fsmc_conf.reset_cmd);
 8004c9c:	4b1e      	ldr	r3, [pc, #120]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004c9e:	7b1b      	ldrb	r3, [r3, #12]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	482a      	ldr	r0, [pc, #168]	; (8004d4c <nand_print_fsmc_info+0x144>)
 8004ca4:	f00e f938 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Write 1 command: %d\r\n", fsmc_conf.write1_cmd);
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004caa:	7b5b      	ldrb	r3, [r3, #13]
 8004cac:	4619      	mov	r1, r3
 8004cae:	4828      	ldr	r0, [pc, #160]	; (8004d50 <nand_print_fsmc_info+0x148>)
 8004cb0:	f00e f932 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Write 2 command: %d\r\n", fsmc_conf.write2_cmd);
 8004cb4:	4b18      	ldr	r3, [pc, #96]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004cb6:	7b9b      	ldrb	r3, [r3, #14]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4826      	ldr	r0, [pc, #152]	; (8004d54 <nand_print_fsmc_info+0x14c>)
 8004cbc:	f00e f92c 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Erase 1 command: %d\r\n", fsmc_conf.erase1_cmd);
 8004cc0:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004cc2:	7bdb      	ldrb	r3, [r3, #15]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4824      	ldr	r0, [pc, #144]	; (8004d58 <nand_print_fsmc_info+0x150>)
 8004cc8:	f00e f926 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Erase 2 command: %d\r\n", fsmc_conf.erase2_cmd);
 8004ccc:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004cce:	7c1b      	ldrb	r3, [r3, #16]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4822      	ldr	r0, [pc, #136]	; (8004d5c <nand_print_fsmc_info+0x154>)
 8004cd4:	f00e f920 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Status command: %d\r\n", fsmc_conf.status_cmd);
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004cda:	7c5b      	ldrb	r3, [r3, #17]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4820      	ldr	r0, [pc, #128]	; (8004d60 <nand_print_fsmc_info+0x158>)
 8004ce0:	f00e f91a 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Set feature command: %d\r\n", fsmc_conf.set_features_cmd);
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004ce6:	7c9b      	ldrb	r3, [r3, #18]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	481e      	ldr	r0, [pc, #120]	; (8004d64 <nand_print_fsmc_info+0x15c>)
 8004cec:	f00e f914 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Enable ECC address: %d\r\n", fsmc_conf.enable_ecc_addr);
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004cf2:	7cdb      	ldrb	r3, [r3, #19]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	481c      	ldr	r0, [pc, #112]	; (8004d68 <nand_print_fsmc_info+0x160>)
 8004cf8:	f00e f90e 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Enable ECC value: %d\r\n", fsmc_conf.enable_ecc_value);
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004cfe:	7d1b      	ldrb	r3, [r3, #20]
 8004d00:	4619      	mov	r1, r3
 8004d02:	481a      	ldr	r0, [pc, #104]	; (8004d6c <nand_print_fsmc_info+0x164>)
 8004d04:	f00e f908 	bl	8012f18 <iprintf>
    DEBUG_PRINT("Disable ECC value: %d\r\n", fsmc_conf.disable_ecc_value);
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <nand_print_fsmc_info+0x110>)
 8004d0a:	7d5b      	ldrb	r3, [r3, #21]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4818      	ldr	r0, [pc, #96]	; (8004d70 <nand_print_fsmc_info+0x168>)
 8004d10:	f00e f902 	bl	8012f18 <iprintf>
}
 8004d14:	bf00      	nop
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000c48 	.word	0x20000c48
 8004d1c:	08013d60 	.word	0x08013d60
 8004d20:	08013d74 	.word	0x08013d74
 8004d24:	08013d8c 	.word	0x08013d8c
 8004d28:	08013da4 	.word	0x08013da4
 8004d2c:	08013dbc 	.word	0x08013dbc
 8004d30:	08013dd4 	.word	0x08013dd4
 8004d34:	08013de8 	.word	0x08013de8
 8004d38:	08013dfc 	.word	0x08013dfc
 8004d3c:	08013e10 	.word	0x08013e10
 8004d40:	08013e28 	.word	0x08013e28
 8004d44:	08013e40 	.word	0x08013e40
 8004d48:	08013e5c 	.word	0x08013e5c
 8004d4c:	08013e74 	.word	0x08013e74
 8004d50:	08013e88 	.word	0x08013e88
 8004d54:	08013ea0 	.word	0x08013ea0
 8004d58:	08013eb8 	.word	0x08013eb8
 8004d5c:	08013ed0 	.word	0x08013ed0
 8004d60:	08013ee8 	.word	0x08013ee8
 8004d64:	08013f00 	.word	0x08013f00
 8004d68:	08013f1c 	.word	0x08013f1c
 8004d6c:	08013f38 	.word	0x08013f38
 8004d70:	08013f50 	.word	0x08013f50

08004d74 <nand_reset>:

static void nand_reset()
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.reset_cmd;  // 发送复位命令给NAND Flash
 8004d78:	4b04      	ldr	r3, [pc, #16]	; (8004d8c <nand_reset+0x18>)
 8004d7a:	4a05      	ldr	r2, [pc, #20]	; (8004d90 <nand_reset+0x1c>)
 8004d7c:	7b12      	ldrb	r2, [r2, #12]
 8004d7e:	701a      	strb	r2, [r3, #0]
}
 8004d80:	bf00      	nop
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	70010000 	.word	0x70010000
 8004d90:	20000c48 	.word	0x20000c48

08004d94 <nand_init>:

static int nand_init(void *conf, uint32_t conf_size)
{
 8004d94:	b5b0      	push	{r4, r5, r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(fsmc_conf_t))
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b15      	cmp	r3, #21
 8004da2:	d802      	bhi.n	8004daa <nand_init+0x16>
        return -1;
 8004da4:	f04f 33ff 	mov.w	r3, #4294967295
 8004da8:	e015      	b.n	8004dd6 <nand_init+0x42>
   
    fsmc_conf = *(fsmc_conf_t *)conf;  // 从传入的配置结构体中获取配置参数
 8004daa:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <nand_init+0x4c>)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4614      	mov	r4, r2
 8004db0:	461d      	mov	r5, r3
 8004db2:	6828      	ldr	r0, [r5, #0]
 8004db4:	6869      	ldr	r1, [r5, #4]
 8004db6:	68aa      	ldr	r2, [r5, #8]
 8004db8:	68eb      	ldr	r3, [r5, #12]
 8004dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dbc:	6928      	ldr	r0, [r5, #16]
 8004dbe:	6020      	str	r0, [r4, #0]
 8004dc0:	8aab      	ldrh	r3, [r5, #20]
 8004dc2:	80a3      	strh	r3, [r4, #4]

    nand_gpio_init();  // 初始化GPIO引脚
 8004dc4:	f7ff fe60 	bl	8004a88 <nand_gpio_init>
    nand_fsmc_init();  // 初始化FSMC NAND Flash
 8004dc8:	f7ff feb2 	bl	8004b30 <nand_fsmc_init>
    nand_print_fsmc_info();  // 打印FSMC的配置信息
 8004dcc:	f7ff ff1c 	bl	8004c08 <nand_print_fsmc_info>
    nand_reset();  // 复位NAND Flash
 8004dd0:	f7ff ffd0 	bl	8004d74 <nand_reset>

    return 0;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000c48 	.word	0x20000c48

08004de4 <nand_uninit>:

static void nand_uninit()
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
    //TODO
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <nand_read_status>:

static uint32_t nand_read_status()
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
    uint32_t data, status;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.status_cmd;  // 发送状态命令给NAND Flash
 8004dfa:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <nand_read_status+0x4c>)
 8004dfc:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <nand_read_status+0x50>)
 8004dfe:	7c52      	ldrb	r2, [r2, #17]
 8004e00:	701a      	strb	r2, [r3, #0]
    data = *(__IO uint8_t *)(Bank_NAND_ADDR);
 8004e02:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	603b      	str	r3, [r7, #0]

    if ((data & NAND_ERROR) == NAND_ERROR)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <nand_read_status+0x28>
        status = FLASH_STATUS_ERROR;
 8004e16:	2302      	movs	r3, #2
 8004e18:	607b      	str	r3, [r7, #4]
 8004e1a:	e009      	b.n	8004e30 <nand_read_status+0x3c>
    else if ((data & NAND_READY) == NAND_READY)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <nand_read_status+0x38>
        status = FLASH_STATUS_READY;
 8004e26:	2300      	movs	r3, #0
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	e001      	b.n	8004e30 <nand_read_status+0x3c>
    else
        status = FLASH_STATUS_BUSY;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的状态
 8004e30:	687b      	ldr	r3, [r7, #4]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	70010000 	.word	0x70010000
 8004e44:	20000c48 	.word	0x20000c48

08004e48 <nand_get_status>:

static uint32_t nand_get_status()
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8004e4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e52:	603b      	str	r3, [r7, #0]

    status = nand_read_status();
 8004e54:	f7ff ffce 	bl	8004df4 <nand_read_status>
 8004e58:	6078      	str	r0, [r7, #4]

    /* 等待NAND操作完成或超时发生 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8004e5a:	e005      	b.n	8004e68 <nand_get_status+0x20>
    {
        status = nand_read_status();
 8004e5c:	f7ff ffca 	bl	8004df4 <nand_read_status>
 8004e60:	6078      	str	r0, [r7, #4]
        timeout --;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d102      	bne.n	8004e74 <nand_get_status+0x2c>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f3      	bne.n	8004e5c <nand_get_status+0x14>
    }

    if (!timeout)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <nand_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的最终状态
 8004e7e:	687b      	ldr	r3, [r7, #4]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <nand_read_id>:

// 从NAND Flash读取ID
static void nand_read_id(chip_id_t *nand_id)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
    uint32_t data = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_id_cmd;  // 发送读取ID的命令给NAND Flash
 8004e94:	4b17      	ldr	r3, [pc, #92]	; (8004ef4 <nand_read_id+0x6c>)
 8004e96:	4a18      	ldr	r2, [pc, #96]	; (8004ef8 <nand_read_id+0x70>)
 8004e98:	7ad2      	ldrb	r2, [r2, #11]
 8004e9a:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004e9c:	4b17      	ldr	r3, [pc, #92]	; (8004efc <nand_read_id+0x74>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	701a      	strb	r2, [r3, #0]

    /* 从NAND Flash读取ID的序列 */
    data = *(__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA);
 8004ea2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
    nand_id->maker_id   = ADDR_1st_CYCLE(data);  // 读取制造商ID
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	701a      	strb	r2, [r3, #0]
    nand_id->device_id  = ADDR_2nd_CYCLE(data);  // 读取设备ID
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	0a1b      	lsrs	r3, r3, #8
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	705a      	strb	r2, [r3, #1]
    nand_id->third_id   = ADDR_3rd_CYCLE(data);  // 读取第三个ID
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	0c1b      	lsrs	r3, r3, #16
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	709a      	strb	r2, [r3, #2]
    nand_id->fourth_id  = ADDR_4th_CYCLE(data);  // 读取第四个ID
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	0e1b      	lsrs	r3, r3, #24
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	70da      	strb	r2, [r3, #3]

    data = *((__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA) + 1);
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <nand_read_id+0x78>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60fb      	str	r3, [r7, #12]
    nand_id->fifth_id   = ADDR_1st_CYCLE(data);  // 读取第五个ID
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	711a      	strb	r2, [r3, #4]
    nand_id->sixth_id   = ADDR_2nd_CYCLE(data);  // 读取第六个ID
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	0a1b      	lsrs	r3, r3, #8
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	715a      	strb	r2, [r3, #5]
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	70010000 	.word	0x70010000
 8004ef8:	20000c48 	.word	0x20000c48
 8004efc:	70020000 	.word	0x70020000
 8004f00:	70000004 	.word	0x70000004

08004f04 <nand_write_page_async>:

// 异步方式写入NAND Flash的页数据
static void nand_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write1_cmd;  // 发送写入命令给NAND Flash
 8004f10:	4b4c      	ldr	r3, [pc, #304]	; (8005044 <nand_write_page_async+0x140>)
 8004f12:	4a4d      	ldr	r2, [pc, #308]	; (8005048 <nand_write_page_async+0x144>)
 8004f14:	7b52      	ldrb	r2, [r2, #13]
 8004f16:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8004f18:	4b4b      	ldr	r3, [pc, #300]	; (8005048 <nand_write_page_async+0x144>)
 8004f1a:	79db      	ldrb	r3, [r3, #7]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d82c      	bhi.n	8004f7c <nand_write_page_async+0x78>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <nand_write_page_async+0x24>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004f41 	.word	0x08004f41
 8004f30:	08004f4f 	.word	0x08004f4f
 8004f34:	08004f63 	.word	0x08004f63
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f38:	4b44      	ldr	r3, [pc, #272]	; (800504c <nand_write_page_async+0x148>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
        break;
 8004f3e:	e01e      	b.n	8004f7e <nand_write_page_async+0x7a>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f40:	4b42      	ldr	r3, [pc, #264]	; (800504c <nand_write_page_async+0x148>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f46:	4b41      	ldr	r3, [pc, #260]	; (800504c <nand_write_page_async+0x148>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]
        break;
 8004f4c:	e017      	b.n	8004f7e <nand_write_page_async+0x7a>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f4e:	4b3f      	ldr	r3, [pc, #252]	; (800504c <nand_write_page_async+0x148>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f54:	4b3d      	ldr	r3, [pc, #244]	; (800504c <nand_write_page_async+0x148>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f5a:	4b3c      	ldr	r3, [pc, #240]	; (800504c <nand_write_page_async+0x148>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
        break;
 8004f60:	e00d      	b.n	8004f7e <nand_write_page_async+0x7a>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f62:	4b3a      	ldr	r3, [pc, #232]	; (800504c <nand_write_page_async+0x148>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f68:	4b38      	ldr	r3, [pc, #224]	; (800504c <nand_write_page_async+0x148>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f6e:	4b37      	ldr	r3, [pc, #220]	; (800504c <nand_write_page_async+0x148>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f74:	4b35      	ldr	r3, [pc, #212]	; (800504c <nand_write_page_async+0x148>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
        break;
 8004f7a:	e000      	b.n	8004f7e <nand_write_page_async+0x7a>
    default:
        break;
 8004f7c:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8004f7e:	4b32      	ldr	r3, [pc, #200]	; (8005048 <nand_write_page_async+0x144>)
 8004f80:	799b      	ldrb	r3, [r3, #6]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d83d      	bhi.n	8005004 <nand_write_page_async+0x100>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <nand_write_page_async+0x8c>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08004fa1 	.word	0x08004fa1
 8004f94:	08004fab 	.word	0x08004fab
 8004f98:	08004fbf 	.word	0x08004fbf
 8004f9c:	08004fdd 	.word	0x08004fdd
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8004fa0:	4b2a      	ldr	r3, [pc, #168]	; (800504c <nand_write_page_async+0x148>)
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	701a      	strb	r2, [r3, #0]
        break;
 8004fa8:	e02d      	b.n	8005006 <nand_write_page_async+0x102>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8004faa:	4b28      	ldr	r3, [pc, #160]	; (800504c <nand_write_page_async+0x148>)
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	0a1a      	lsrs	r2, r3, #8
 8004fb6:	4b25      	ldr	r3, [pc, #148]	; (800504c <nand_write_page_async+0x148>)
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]
        break;
 8004fbc:	e023      	b.n	8005006 <nand_write_page_async+0x102>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8004fbe:	4b23      	ldr	r3, [pc, #140]	; (800504c <nand_write_page_async+0x148>)
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	0a1a      	lsrs	r2, r3, #8
 8004fca:	4b20      	ldr	r3, [pc, #128]	; (800504c <nand_write_page_async+0x148>)
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	0c1a      	lsrs	r2, r3, #16
 8004fd4:	4b1d      	ldr	r3, [pc, #116]	; (800504c <nand_write_page_async+0x148>)
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]
        break;
 8004fda:	e014      	b.n	8005006 <nand_write_page_async+0x102>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8004fdc:	4b1b      	ldr	r3, [pc, #108]	; (800504c <nand_write_page_async+0x148>)
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	0a1a      	lsrs	r2, r3, #8
 8004fe8:	4b18      	ldr	r3, [pc, #96]	; (800504c <nand_write_page_async+0x148>)
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	0c1a      	lsrs	r2, r3, #16
 8004ff2:	4b16      	ldr	r3, [pc, #88]	; (800504c <nand_write_page_async+0x148>)
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	0e1a      	lsrs	r2, r3, #24
 8004ffc:	4b13      	ldr	r3, [pc, #76]	; (800504c <nand_write_page_async+0x148>)
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
        break;
 8005002:	e000      	b.n	8005006 <nand_write_page_async+0x102>
    default:
        break;
 8005004:	bf00      	nop
    }

    for(i = 0; i < page_size; i++)
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	e009      	b.n	8005020 <nand_write_page_async+0x11c>
        *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = buf[i];  // 逐字节写入数据到NAND Flash的数据区
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	4413      	add	r3, r2
 8005012:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	7013      	strb	r3, [r2, #0]
    for(i = 0; i < page_size; i++)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	3301      	adds	r3, #1
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d3f1      	bcc.n	800500c <nand_write_page_async+0x108>

    if (fsmc_conf.write2_cmd != UNDEFINED_CMD)
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <nand_write_page_async+0x144>)
 800502a:	7b9b      	ldrb	r3, [r3, #14]
 800502c:	2bff      	cmp	r3, #255	; 0xff
 800502e:	d003      	beq.n	8005038 <nand_write_page_async+0x134>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write2_cmd;  // 发送写入命令2给NAND Flash
 8005030:	4b04      	ldr	r3, [pc, #16]	; (8005044 <nand_write_page_async+0x140>)
 8005032:	4a05      	ldr	r2, [pc, #20]	; (8005048 <nand_write_page_async+0x144>)
 8005034:	7b92      	ldrb	r2, [r2, #14]
 8005036:	701a      	strb	r2, [r3, #0]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	70010000 	.word	0x70010000
 8005048:	20000c48 	.word	0x20000c48
 800504c:	70020000 	.word	0x70020000

08005050 <nand_read_data>:

// 从NAND Flash读取数据
static uint32_t nand_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read1_cmd;  // 发送读取命令给NAND Flash
 800505e:	4b55      	ldr	r3, [pc, #340]	; (80051b4 <nand_read_data+0x164>)
 8005060:	4a55      	ldr	r2, [pc, #340]	; (80051b8 <nand_read_data+0x168>)
 8005062:	7a12      	ldrb	r2, [r2, #8]
 8005064:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8005066:	4b54      	ldr	r3, [pc, #336]	; (80051b8 <nand_read_data+0x168>)
 8005068:	79db      	ldrb	r3, [r3, #7]
 800506a:	3b01      	subs	r3, #1
 800506c:	2b03      	cmp	r3, #3
 800506e:	d83c      	bhi.n	80050ea <nand_read_data+0x9a>
 8005070:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <nand_read_data+0x28>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	08005089 	.word	0x08005089
 800507c:	08005093 	.word	0x08005093
 8005080:	080050a7 	.word	0x080050a7
 8005084:	080050c5 	.word	0x080050c5
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8005088:	4b4c      	ldr	r3, [pc, #304]	; (80051bc <nand_read_data+0x16c>)
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
        break;
 8005090:	e02c      	b.n	80050ec <nand_read_data+0x9c>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8005092:	4b4a      	ldr	r3, [pc, #296]	; (80051bc <nand_read_data+0x16c>)
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	0a1a      	lsrs	r2, r3, #8
 800509e:	4b47      	ldr	r3, [pc, #284]	; (80051bc <nand_read_data+0x16c>)
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]
        break;
 80050a4:	e022      	b.n	80050ec <nand_read_data+0x9c>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 80050a6:	4b45      	ldr	r3, [pc, #276]	; (80051bc <nand_read_data+0x16c>)
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	0a1a      	lsrs	r2, r3, #8
 80050b2:	4b42      	ldr	r3, [pc, #264]	; (80051bc <nand_read_data+0x16c>)
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	0c1a      	lsrs	r2, r3, #16
 80050bc:	4b3f      	ldr	r3, [pc, #252]	; (80051bc <nand_read_data+0x16c>)
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]
        break;
 80050c2:	e013      	b.n	80050ec <nand_read_data+0x9c>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 80050c4:	4b3d      	ldr	r3, [pc, #244]	; (80051bc <nand_read_data+0x16c>)
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	0a1a      	lsrs	r2, r3, #8
 80050d0:	4b3a      	ldr	r3, [pc, #232]	; (80051bc <nand_read_data+0x16c>)
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0c1a      	lsrs	r2, r3, #16
 80050da:	4b38      	ldr	r3, [pc, #224]	; (80051bc <nand_read_data+0x16c>)
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page_offset);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	0e1a      	lsrs	r2, r3, #24
 80050e4:	4b35      	ldr	r3, [pc, #212]	; (80051bc <nand_read_data+0x16c>)
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
    default:
        break;
 80050ea:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 80050ec:	4b32      	ldr	r3, [pc, #200]	; (80051b8 <nand_read_data+0x168>)
 80050ee:	799b      	ldrb	r3, [r3, #6]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d83c      	bhi.n	8005170 <nand_read_data+0x120>
 80050f6:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <nand_read_data+0xac>)
 80050f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fc:	0800510d 	.word	0x0800510d
 8005100:	08005117 	.word	0x08005117
 8005104:	0800512b 	.word	0x0800512b
 8005108:	08005149 	.word	0x08005149
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 800510c:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <nand_read_data+0x16c>)
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]
        break;
 8005114:	e02d      	b.n	8005172 <nand_read_data+0x122>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8005116:	4b29      	ldr	r3, [pc, #164]	; (80051bc <nand_read_data+0x16c>)
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	0a1a      	lsrs	r2, r3, #8
 8005122:	4b26      	ldr	r3, [pc, #152]	; (80051bc <nand_read_data+0x16c>)
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]
        break;
 8005128:	e023      	b.n	8005172 <nand_read_data+0x122>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <nand_read_data+0x16c>)
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	0a1a      	lsrs	r2, r3, #8
 8005136:	4b21      	ldr	r3, [pc, #132]	; (80051bc <nand_read_data+0x16c>)
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	0c1a      	lsrs	r2, r3, #16
 8005140:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <nand_read_data+0x16c>)
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]
        break;
 8005146:	e014      	b.n	8005172 <nand_read_data+0x122>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8005148:	4b1c      	ldr	r3, [pc, #112]	; (80051bc <nand_read_data+0x16c>)
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	0a1a      	lsrs	r2, r3, #8
 8005154:	4b19      	ldr	r3, [pc, #100]	; (80051bc <nand_read_data+0x16c>)
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	0c1a      	lsrs	r2, r3, #16
 800515e:	4b17      	ldr	r3, [pc, #92]	; (80051bc <nand_read_data+0x16c>)
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	0e1a      	lsrs	r2, r3, #24
 8005168:	4b14      	ldr	r3, [pc, #80]	; (80051bc <nand_read_data+0x16c>)
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
        break;
 800516e:	e000      	b.n	8005172 <nand_read_data+0x122>
    default:
        break;
 8005170:	bf00      	nop
    }

    if (fsmc_conf.read2_cmd != UNDEFINED_CMD)
 8005172:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <nand_read_data+0x168>)
 8005174:	7a5b      	ldrb	r3, [r3, #9]
 8005176:	2bff      	cmp	r3, #255	; 0xff
 8005178:	d003      	beq.n	8005182 <nand_read_data+0x132>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read2_cmd;  // 发送读取命令2给NAND Flash
 800517a:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <nand_read_data+0x164>)
 800517c:	4a0e      	ldr	r2, [pc, #56]	; (80051b8 <nand_read_data+0x168>)
 800517e:	7a52      	ldrb	r2, [r2, #9]
 8005180:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < data_size; i++)
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e00a      	b.n	800519e <nand_read_data+0x14e>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 8005188:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	4413      	add	r3, r2
 8005192:	780a      	ldrb	r2, [r1, #0]
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	3301      	adds	r3, #1
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d3f0      	bcc.n	8005188 <nand_read_data+0x138>

    return nand_get_status();  // 获取NAND Flash的状态
 80051a6:	f7ff fe4f 	bl	8004e48 <nand_get_status>
 80051aa:	4603      	mov	r3, r0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	70010000 	.word	0x70010000
 80051b8:	20000c48 	.word	0x20000c48
 80051bc:	70020000 	.word	0x70020000

080051c0 <nand_read_page>:

// 从NAND Flash读取数据页
static uint32_t nand_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
    return nand_read_data(buf, page, 0, page_size);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff ff3c 	bl	8005050 <nand_read_data>
 80051d8:	4603      	mov	r3, r0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <nand_read_spare_data>:

// 从NAND Flash读取备用数据
static uint32_t nand_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
    uint32_t i;

    if (fsmc_conf.read_spare_cmd == UNDEFINED_CMD)
 80051f2:	4b54      	ldr	r3, [pc, #336]	; (8005344 <nand_read_spare_data+0x160>)
 80051f4:	7a9b      	ldrb	r3, [r3, #10]
 80051f6:	2bff      	cmp	r3, #255	; 0xff
 80051f8:	d101      	bne.n	80051fe <nand_read_spare_data+0x1a>
        return FLASH_STATUS_INVALID_CMD;
 80051fa:	2304      	movs	r3, #4
 80051fc:	e09e      	b.n	800533c <nand_read_spare_data+0x158>

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_spare_cmd;  // 发送读取备用数据命令给NAND Flash
 80051fe:	4b52      	ldr	r3, [pc, #328]	; (8005348 <nand_read_spare_data+0x164>)
 8005200:	4a50      	ldr	r2, [pc, #320]	; (8005344 <nand_read_spare_data+0x160>)
 8005202:	7a92      	ldrb	r2, [r2, #10]
 8005204:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8005206:	4b4f      	ldr	r3, [pc, #316]	; (8005344 <nand_read_spare_data+0x160>)
 8005208:	79db      	ldrb	r3, [r3, #7]
 800520a:	3b01      	subs	r3, #1
 800520c:	2b03      	cmp	r3, #3
 800520e:	d83c      	bhi.n	800528a <nand_read_spare_data+0xa6>
 8005210:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <nand_read_spare_data+0x34>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	08005229 	.word	0x08005229
 800521c:	08005233 	.word	0x08005233
 8005220:	08005247 	.word	0x08005247
 8005224:	08005265 	.word	0x08005265
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8005228:	4b48      	ldr	r3, [pc, #288]	; (800534c <nand_read_spare_data+0x168>)
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]
        break;
 8005230:	e02c      	b.n	800528c <nand_read_spare_data+0xa8>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8005232:	4b46      	ldr	r3, [pc, #280]	; (800534c <nand_read_spare_data+0x168>)
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	0a1a      	lsrs	r2, r3, #8
 800523e:	4b43      	ldr	r3, [pc, #268]	; (800534c <nand_read_spare_data+0x168>)
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]
        break;
 8005244:	e022      	b.n	800528c <nand_read_spare_data+0xa8>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8005246:	4b41      	ldr	r3, [pc, #260]	; (800534c <nand_read_spare_data+0x168>)
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	0a1a      	lsrs	r2, r3, #8
 8005252:	4b3e      	ldr	r3, [pc, #248]	; (800534c <nand_read_spare_data+0x168>)
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	0c1a      	lsrs	r2, r3, #16
 800525c:	4b3b      	ldr	r3, [pc, #236]	; (800534c <nand_read_spare_data+0x168>)
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]
        break;
 8005262:	e013      	b.n	800528c <nand_read_spare_data+0xa8>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8005264:	4b39      	ldr	r3, [pc, #228]	; (800534c <nand_read_spare_data+0x168>)
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	0a1a      	lsrs	r2, r3, #8
 8005270:	4b36      	ldr	r3, [pc, #216]	; (800534c <nand_read_spare_data+0x168>)
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	0c1a      	lsrs	r2, r3, #16
 800527a:	4b34      	ldr	r3, [pc, #208]	; (800534c <nand_read_spare_data+0x168>)
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(offset);  // 发送列地址的第4个周期
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	0e1a      	lsrs	r2, r3, #24
 8005284:	4b31      	ldr	r3, [pc, #196]	; (800534c <nand_read_spare_data+0x168>)
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
    default:
        break;
 800528a:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 800528c:	4b2d      	ldr	r3, [pc, #180]	; (8005344 <nand_read_spare_data+0x160>)
 800528e:	799b      	ldrb	r3, [r3, #6]
 8005290:	3b01      	subs	r3, #1
 8005292:	2b03      	cmp	r3, #3
 8005294:	d83c      	bhi.n	8005310 <nand_read_spare_data+0x12c>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <nand_read_spare_data+0xb8>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052ad 	.word	0x080052ad
 80052a0:	080052b7 	.word	0x080052b7
 80052a4:	080052cb 	.word	0x080052cb
 80052a8:	080052e9 	.word	0x080052e9
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80052ac:	4b27      	ldr	r3, [pc, #156]	; (800534c <nand_read_spare_data+0x168>)
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]
        break;
 80052b4:	e02d      	b.n	8005312 <nand_read_spare_data+0x12e>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80052b6:	4b25      	ldr	r3, [pc, #148]	; (800534c <nand_read_spare_data+0x168>)
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	0a1a      	lsrs	r2, r3, #8
 80052c2:	4b22      	ldr	r3, [pc, #136]	; (800534c <nand_read_spare_data+0x168>)
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
        break;
 80052c8:	e023      	b.n	8005312 <nand_read_spare_data+0x12e>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <nand_read_spare_data+0x168>)
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	0a1a      	lsrs	r2, r3, #8
 80052d6:	4b1d      	ldr	r3, [pc, #116]	; (800534c <nand_read_spare_data+0x168>)
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	0c1a      	lsrs	r2, r3, #16
 80052e0:	4b1a      	ldr	r3, [pc, #104]	; (800534c <nand_read_spare_data+0x168>)
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
        break;
 80052e6:	e014      	b.n	8005312 <nand_read_spare_data+0x12e>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80052e8:	4b18      	ldr	r3, [pc, #96]	; (800534c <nand_read_spare_data+0x168>)
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	0a1a      	lsrs	r2, r3, #8
 80052f4:	4b15      	ldr	r3, [pc, #84]	; (800534c <nand_read_spare_data+0x168>)
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	0c1a      	lsrs	r2, r3, #16
 80052fe:	4b13      	ldr	r3, [pc, #76]	; (800534c <nand_read_spare_data+0x168>)
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	0e1a      	lsrs	r2, r3, #24
 8005308:	4b10      	ldr	r3, [pc, #64]	; (800534c <nand_read_spare_data+0x168>)
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
        break;
 800530e:	e000      	b.n	8005312 <nand_read_spare_data+0x12e>
    default:
        break;
 8005310:	bf00      	nop
    }

    for (i = 0; i < data_size; i++)
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e00a      	b.n	800532e <nand_read_spare_data+0x14a>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 8005318:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	4413      	add	r3, r2
 8005322:	780a      	ldrb	r2, [r1, #0]
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	3301      	adds	r3, #1
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d3f0      	bcc.n	8005318 <nand_read_spare_data+0x134>

    return nand_get_status();  // 获取NAND Flash的状态
 8005336:	f7ff fd87 	bl	8004e48 <nand_get_status>
 800533a:	4603      	mov	r3, r0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20000c48 	.word	0x20000c48
 8005348:	70010000 	.word	0x70010000
 800534c:	70020000 	.word	0x70020000

08005350 <nand_erase_block>:

// 擦除NAND Flash的块
static uint32_t nand_erase_block(uint32_t page)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase1_cmd;  // 发送擦除命令1给NAND Flash
 8005358:	4b2a      	ldr	r3, [pc, #168]	; (8005404 <nand_erase_block+0xb4>)
 800535a:	4a2b      	ldr	r2, [pc, #172]	; (8005408 <nand_erase_block+0xb8>)
 800535c:	7bd2      	ldrb	r2, [r2, #15]
 800535e:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.row_cycles)
 8005360:	4b29      	ldr	r3, [pc, #164]	; (8005408 <nand_erase_block+0xb8>)
 8005362:	799b      	ldrb	r3, [r3, #6]
 8005364:	3b01      	subs	r3, #1
 8005366:	2b03      	cmp	r3, #3
 8005368:	d83c      	bhi.n	80053e4 <nand_erase_block+0x94>
 800536a:	a201      	add	r2, pc, #4	; (adr r2, 8005370 <nand_erase_block+0x20>)
 800536c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005370:	08005381 	.word	0x08005381
 8005374:	0800538b 	.word	0x0800538b
 8005378:	0800539f 	.word	0x0800539f
 800537c:	080053bd 	.word	0x080053bd
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8005380:	4b22      	ldr	r3, [pc, #136]	; (800540c <nand_erase_block+0xbc>)
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	701a      	strb	r2, [r3, #0]
        break;
 8005388:	e02d      	b.n	80053e6 <nand_erase_block+0x96>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800538a:	4b20      	ldr	r3, [pc, #128]	; (800540c <nand_erase_block+0xbc>)
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	0a1a      	lsrs	r2, r3, #8
 8005396:	4b1d      	ldr	r3, [pc, #116]	; (800540c <nand_erase_block+0xbc>)
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
        break;
 800539c:	e023      	b.n	80053e6 <nand_erase_block+0x96>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800539e:	4b1b      	ldr	r3, [pc, #108]	; (800540c <nand_erase_block+0xbc>)
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	0a1a      	lsrs	r2, r3, #8
 80053aa:	4b18      	ldr	r3, [pc, #96]	; (800540c <nand_erase_block+0xbc>)
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	0c1a      	lsrs	r2, r3, #16
 80053b4:	4b15      	ldr	r3, [pc, #84]	; (800540c <nand_erase_block+0xbc>)
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]
        break;
 80053ba:	e014      	b.n	80053e6 <nand_erase_block+0x96>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <nand_erase_block+0xbc>)
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	0a1a      	lsrs	r2, r3, #8
 80053c8:	4b10      	ldr	r3, [pc, #64]	; (800540c <nand_erase_block+0xbc>)
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	0c1a      	lsrs	r2, r3, #16
 80053d2:	4b0e      	ldr	r3, [pc, #56]	; (800540c <nand_erase_block+0xbc>)
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	0e1a      	lsrs	r2, r3, #24
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <nand_erase_block+0xbc>)
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]
        break;
 80053e2:	e000      	b.n	80053e6 <nand_erase_block+0x96>
    default:
        break;
 80053e4:	bf00      	nop
    }

    if (fsmc_conf.erase2_cmd != UNDEFINED_CMD)
 80053e6:	4b08      	ldr	r3, [pc, #32]	; (8005408 <nand_erase_block+0xb8>)
 80053e8:	7c1b      	ldrb	r3, [r3, #16]
 80053ea:	2bff      	cmp	r3, #255	; 0xff
 80053ec:	d003      	beq.n	80053f6 <nand_erase_block+0xa6>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase2_cmd;  // 发送擦除命令2给NAND Flash
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <nand_erase_block+0xb4>)
 80053f0:	4a05      	ldr	r2, [pc, #20]	; (8005408 <nand_erase_block+0xb8>)
 80053f2:	7c12      	ldrb	r2, [r2, #16]
 80053f4:	701a      	strb	r2, [r3, #0]

    return nand_get_status();  // 获取NAND Flash的状态
 80053f6:	f7ff fd27 	bl	8004e48 <nand_get_status>
 80053fa:	4603      	mov	r3, r0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	70010000 	.word	0x70010000
 8005408:	20000c48 	.word	0x20000c48
 800540c:	70020000 	.word	0x70020000

08005410 <nand_is_bb_supported>:

// 检查是否支持坏块
static inline bool nand_is_bb_supported()
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
    return true;
 8005414:	2301      	movs	r3, #1
}
 8005416:	4618      	mov	r0, r3
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <nand_enable_hw_ecc>:

// 启用或禁用硬件ECC
static uint32_t nand_enable_hw_ecc(bool enable)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	71fb      	strb	r3, [r7, #7]
    uint8_t enable_ecc;

    if (fsmc_conf.set_features_cmd == UNDEFINED_CMD)
 800542a:	4b17      	ldr	r3, [pc, #92]	; (8005488 <nand_enable_hw_ecc+0x68>)
 800542c:	7c9b      	ldrb	r3, [r3, #18]
 800542e:	2bff      	cmp	r3, #255	; 0xff
 8005430:	d101      	bne.n	8005436 <nand_enable_hw_ecc+0x16>
        return FLASH_STATUS_INVALID_CMD;
 8005432:	2304      	movs	r3, #4
 8005434:	e021      	b.n	800547a <nand_enable_hw_ecc+0x5a>

    enable_ecc = enable ? fsmc_conf.enable_ecc_value : fsmc_conf.disable_ecc_value;
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <nand_enable_hw_ecc+0x22>
 800543c:	4b12      	ldr	r3, [pc, #72]	; (8005488 <nand_enable_hw_ecc+0x68>)
 800543e:	7d1b      	ldrb	r3, [r3, #20]
 8005440:	e001      	b.n	8005446 <nand_enable_hw_ecc+0x26>
 8005442:	4b11      	ldr	r3, [pc, #68]	; (8005488 <nand_enable_hw_ecc+0x68>)
 8005444:	7d5b      	ldrb	r3, [r3, #21]
 8005446:	73fb      	strb	r3, [r7, #15]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.set_features_cmd;  // 发送设置特性命令给NAND Flash
 8005448:	4b10      	ldr	r3, [pc, #64]	; (800548c <nand_enable_hw_ecc+0x6c>)
 800544a:	4a0f      	ldr	r2, [pc, #60]	; (8005488 <nand_enable_hw_ecc+0x68>)
 800544c:	7c92      	ldrb	r2, [r2, #18]
 800544e:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = fsmc_conf.enable_ecc_addr;  // 发送使能ECC地址
 8005450:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <nand_enable_hw_ecc+0x70>)
 8005452:	4a0d      	ldr	r2, [pc, #52]	; (8005488 <nand_enable_hw_ecc+0x68>)
 8005454:	7cd2      	ldrb	r2, [r2, #19]
 8005456:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = enable_ecc;  // 发送使能ECC的值
 8005458:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8005460:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8005468:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800546c:	2200      	movs	r2, #0
 800546e:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8005470:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]

    return 0;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20000c48 	.word	0x20000c48
 800548c:	70010000 	.word	0x70010000
 8005490:	70020000 	.word	0x70020000

08005494 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08c      	sub	sp, #48	; 0x30
 8005498:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549a:	f107 031c 	add.w	r3, r7, #28
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	609a      	str	r2, [r3, #8]
 80054a6:	60da      	str	r2, [r3, #12]
 80054a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80054aa:	2300      	movs	r3, #0
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	4b6b      	ldr	r3, [pc, #428]	; (800565c <MX_GPIO_Init+0x1c8>)
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	4a6a      	ldr	r2, [pc, #424]	; (800565c <MX_GPIO_Init+0x1c8>)
 80054b4:	f043 0310 	orr.w	r3, r3, #16
 80054b8:	6313      	str	r3, [r2, #48]	; 0x30
 80054ba:	4b68      	ldr	r3, [pc, #416]	; (800565c <MX_GPIO_Init+0x1c8>)
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	4b64      	ldr	r3, [pc, #400]	; (800565c <MX_GPIO_Init+0x1c8>)
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	4a63      	ldr	r2, [pc, #396]	; (800565c <MX_GPIO_Init+0x1c8>)
 80054d0:	f043 0304 	orr.w	r3, r3, #4
 80054d4:	6313      	str	r3, [r2, #48]	; 0x30
 80054d6:	4b61      	ldr	r3, [pc, #388]	; (800565c <MX_GPIO_Init+0x1c8>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80054e2:	2300      	movs	r3, #0
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	4b5d      	ldr	r3, [pc, #372]	; (800565c <MX_GPIO_Init+0x1c8>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	4a5c      	ldr	r2, [pc, #368]	; (800565c <MX_GPIO_Init+0x1c8>)
 80054ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f0:	6313      	str	r3, [r2, #48]	; 0x30
 80054f2:	4b5a      	ldr	r3, [pc, #360]	; (800565c <MX_GPIO_Init+0x1c8>)
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	4b56      	ldr	r3, [pc, #344]	; (800565c <MX_GPIO_Init+0x1c8>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	4a55      	ldr	r2, [pc, #340]	; (800565c <MX_GPIO_Init+0x1c8>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	6313      	str	r3, [r2, #48]	; 0x30
 800550e:	4b53      	ldr	r3, [pc, #332]	; (800565c <MX_GPIO_Init+0x1c8>)
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800551a:	2300      	movs	r3, #0
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	4b4f      	ldr	r3, [pc, #316]	; (800565c <MX_GPIO_Init+0x1c8>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	4a4e      	ldr	r2, [pc, #312]	; (800565c <MX_GPIO_Init+0x1c8>)
 8005524:	f043 0302 	orr.w	r3, r3, #2
 8005528:	6313      	str	r3, [r2, #48]	; 0x30
 800552a:	4b4c      	ldr	r3, [pc, #304]	; (800565c <MX_GPIO_Init+0x1c8>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	607b      	str	r3, [r7, #4]
 800553a:	4b48      	ldr	r3, [pc, #288]	; (800565c <MX_GPIO_Init+0x1c8>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	4a47      	ldr	r2, [pc, #284]	; (800565c <MX_GPIO_Init+0x1c8>)
 8005540:	f043 0308 	orr.w	r3, r3, #8
 8005544:	6313      	str	r3, [r2, #48]	; 0x30
 8005546:	4b45      	ldr	r3, [pc, #276]	; (800565c <MX_GPIO_Init+0x1c8>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8005552:	2201      	movs	r2, #1
 8005554:	2140      	movs	r1, #64	; 0x40
 8005556:	4842      	ldr	r0, [pc, #264]	; (8005660 <MX_GPIO_Init+0x1cc>)
 8005558:	f005 f842 	bl	800a5e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800555c:	2200      	movs	r2, #0
 800555e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8005562:	4840      	ldr	r0, [pc, #256]	; (8005664 <MX_GPIO_Init+0x1d0>)
 8005564:	f005 f83c 	bl	800a5e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8005568:	2201      	movs	r2, #1
 800556a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800556e:	483d      	ldr	r0, [pc, #244]	; (8005664 <MX_GPIO_Init+0x1d0>)
 8005570:	f005 f836 	bl	800a5e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8005574:	2200      	movs	r2, #0
 8005576:	2110      	movs	r1, #16
 8005578:	483b      	ldr	r0, [pc, #236]	; (8005668 <MX_GPIO_Init+0x1d4>)
 800557a:	f005 f831 	bl	800a5e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800557e:	233f      	movs	r3, #63	; 0x3f
 8005580:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005582:	2303      	movs	r3, #3
 8005584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005586:	2300      	movs	r3, #0
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800558a:	f107 031c 	add.w	r3, r7, #28
 800558e:	4619      	mov	r1, r3
 8005590:	4833      	ldr	r0, [pc, #204]	; (8005660 <MX_GPIO_Init+0x1cc>)
 8005592:	f004 fd8d 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8005596:	2340      	movs	r3, #64	; 0x40
 8005598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800559a:	2301      	movs	r3, #1
 800559c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800559e:	2301      	movs	r3, #1
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a2:	2300      	movs	r3, #0
 80055a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80055a6:	f107 031c 	add.w	r3, r7, #28
 80055aa:	4619      	mov	r1, r3
 80055ac:	482c      	ldr	r0, [pc, #176]	; (8005660 <MX_GPIO_Init+0x1cc>)
 80055ae:	f004 fd7f 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80055b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80055b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055b8:	2301      	movs	r3, #1
 80055ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055bc:	2301      	movs	r3, #1
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c0:	2300      	movs	r3, #0
 80055c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055c4:	f107 031c 	add.w	r3, r7, #28
 80055c8:	4619      	mov	r1, r3
 80055ca:	4826      	ldr	r0, [pc, #152]	; (8005664 <MX_GPIO_Init+0x1d0>)
 80055cc:	f004 fd70 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80055d0:	f641 73f2 	movw	r3, #8178	; 0x1ff2
 80055d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055d6:	2303      	movs	r3, #3
 80055d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055de:	f107 031c 	add.w	r3, r7, #28
 80055e2:	4619      	mov	r1, r3
 80055e4:	481f      	ldr	r0, [pc, #124]	; (8005664 <MX_GPIO_Init+0x1d0>)
 80055e6:	f004 fd63 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8
 80055ea:	f248 1307 	movw	r3, #33031	; 0x8107
 80055ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055f0:	2303      	movs	r3, #3
 80055f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f8:	f107 031c 	add.w	r3, r7, #28
 80055fc:	4619      	mov	r1, r3
 80055fe:	481a      	ldr	r0, [pc, #104]	; (8005668 <MX_GPIO_Init+0x1d4>)
 8005600:	f004 fd56 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8005604:	2310      	movs	r3, #16
 8005606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005608:	2301      	movs	r3, #1
 800560a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560c:	2300      	movs	r3, #0
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005610:	2303      	movs	r3, #3
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8005614:	f107 031c 	add.w	r3, r7, #28
 8005618:	4619      	mov	r1, r3
 800561a:	4813      	ldr	r0, [pc, #76]	; (8005668 <MX_GPIO_Init+0x1d4>)
 800561c:	f004 fd48 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB15 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8005620:	f24c 33d4 	movw	r3, #50132	; 0xc3d4
 8005624:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005626:	2303      	movs	r3, #3
 8005628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562a:	2300      	movs	r3, #0
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800562e:	f107 031c 	add.w	r3, r7, #28
 8005632:	4619      	mov	r1, r3
 8005634:	480d      	ldr	r0, [pc, #52]	; (800566c <MX_GPIO_Init+0x1d8>)
 8005636:	f004 fd3b 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800563a:	f242 030c 	movw	r3, #8204	; 0x200c
 800563e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005640:	2303      	movs	r3, #3
 8005642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005644:	2300      	movs	r3, #0
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005648:	f107 031c 	add.w	r3, r7, #28
 800564c:	4619      	mov	r1, r3
 800564e:	4808      	ldr	r0, [pc, #32]	; (8005670 <MX_GPIO_Init+0x1dc>)
 8005650:	f004 fd2e 	bl	800a0b0 <HAL_GPIO_Init>

}
 8005654:	bf00      	nop
 8005656:	3730      	adds	r7, #48	; 0x30
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40023800 	.word	0x40023800
 8005660:	40021000 	.word	0x40021000
 8005664:	40020800 	.word	0x40020800
 8005668:	40020000 	.word	0x40020000
 800566c:	40020400 	.word	0x40020400
 8005670:	40020c00 	.word	0x40020c00

08005674 <jtag_init>:
 */

#include <stm32f4xx.h>

void jtag_init()
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
    /* Enable JTAG in low power mode */
    HAL_DBGMCU_EnableDBGSleepMode();
 8005678:	f003 ff88 	bl	800958c <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 800567c:	f003 ffa6 	bl	80095cc <HAL_DBGMCU_EnableDBGStandbyMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8005680:	f003 ff94 	bl	80095ac <HAL_DBGMCU_EnableDBGStopMode>
}
 8005684:	bf00      	nop
 8005686:	bd80      	pop	{r7, pc}

08005688 <led_init>:

#include "led.h"
#include "gpio.h"

void led_init()
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800568e:	f107 030c 	add.w	r3, r7, #12
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	605a      	str	r2, [r3, #4]
 8005698:	609a      	str	r2, [r3, #8]
 800569a:	60da      	str	r2, [r3, #12]
 800569c:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE(); // 初始化GPIOE时钟
 800569e:	2300      	movs	r3, #0
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	4b26      	ldr	r3, [pc, #152]	; (800573c <led_init+0xb4>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	4a25      	ldr	r2, [pc, #148]	; (800573c <led_init+0xb4>)
 80056a8:	f043 0310 	orr.w	r3, r3, #16
 80056ac:	6313      	str	r3, [r2, #48]	; 0x30
 80056ae:	4b23      	ldr	r3, [pc, #140]	; (800573c <led_init+0xb4>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	60bb      	str	r3, [r7, #8]
 80056b8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE(); // 初始化GPIOC时钟
 80056ba:	2300      	movs	r3, #0
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	4b1f      	ldr	r3, [pc, #124]	; (800573c <led_init+0xb4>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	4a1e      	ldr	r2, [pc, #120]	; (800573c <led_init+0xb4>)
 80056c4:	f043 0304 	orr.w	r3, r3, #4
 80056c8:	6313      	str	r3, [r2, #48]	; 0x30
 80056ca:	4b1c      	ldr	r3, [pc, #112]	; (800573c <led_init+0xb4>)
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	607b      	str	r3, [r7, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80056d6:	2201      	movs	r2, #1
 80056d8:	2140      	movs	r1, #64	; 0x40
 80056da:	4819      	ldr	r0, [pc, #100]	; (8005740 <led_init+0xb8>)
 80056dc:	f004 ff80 	bl	800a5e0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 80056e0:	2201      	movs	r2, #1
 80056e2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80056e6:	4817      	ldr	r0, [pc, #92]	; (8005744 <led_init+0xbc>)
 80056e8:	f004 ff7a 	bl	800a5e0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = LED4_Pin;
 80056ec:	2340      	movs	r3, #64	; 0x40
 80056ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056f0:	2301      	movs	r3, #1
 80056f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056f4:	2301      	movs	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056f8:	2300      	movs	r3, #0
 80056fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80056fc:	f107 030c 	add.w	r3, r7, #12
 8005700:	4619      	mov	r1, r3
 8005702:	480f      	ldr	r0, [pc, #60]	; (8005740 <led_init+0xb8>)
 8005704:	f004 fcd4 	bl	800a0b0 <HAL_GPIO_Init>

    /*Configure GPIO pins : PCPin PCPin PCPin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8005708:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800570c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800570e:	2301      	movs	r3, #1
 8005710:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005712:	2301      	movs	r3, #1
 8005714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800571a:	f107 030c 	add.w	r3, r7, #12
 800571e:	4619      	mov	r1, r3
 8005720:	4808      	ldr	r0, [pc, #32]	; (8005744 <led_init+0xbc>)
 8005722:	f004 fcc5 	bl	800a0b0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, LED1_Pin | LED2_Pin, GPIO_PIN_RESET); // 将引脚0和引脚1的状态置为低电平
 8005726:	2200      	movs	r2, #0
 8005728:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800572c:	4805      	ldr	r0, [pc, #20]	; (8005744 <led_init+0xbc>)
 800572e:	f004 ff57 	bl	800a5e0 <HAL_GPIO_WritePin>
}
 8005732:	bf00      	nop
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	40023800 	.word	0x40023800
 8005740:	40021000 	.word	0x40021000
 8005744:	40020800 	.word	0x40020800

08005748 <led_set>:

static void led_set(GPIO_TypeDef *gpiox, uint16_t pin, bool on)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	807b      	strh	r3, [r7, #2]
 8005754:	4613      	mov	r3, r2
 8005756:	707b      	strb	r3, [r7, #1]
    if (on)
 8005758:	787b      	ldrb	r3, [r7, #1]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d006      	beq.n	800576c <led_set+0x24>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_SET); // 设置引脚为高电平
 800575e:	887b      	ldrh	r3, [r7, #2]
 8005760:	2201      	movs	r2, #1
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f004 ff3b 	bl	800a5e0 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
}
 800576a:	e005      	b.n	8005778 <led_set+0x30>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
 800576c:	887b      	ldrh	r3, [r7, #2]
 800576e:	2200      	movs	r2, #0
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f004 ff34 	bl	800a5e0 <HAL_GPIO_WritePin>
}
 8005778:	bf00      	nop
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <led_wr_set>:

void led_wr_set(bool on)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED1_Pin, on); // 设置引脚LED1的状态
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	461a      	mov	r2, r3
 800578e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005792:	4803      	ldr	r0, [pc, #12]	; (80057a0 <led_wr_set+0x20>)
 8005794:	f7ff ffd8 	bl	8005748 <led_set>
}
 8005798:	bf00      	nop
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40020800 	.word	0x40020800

080057a4 <led_rd_set>:

void led_rd_set(bool on)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED2_Pin, on); // 设置引脚LED2的状态
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	461a      	mov	r2, r3
 80057b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057b6:	4803      	ldr	r0, [pc, #12]	; (80057c4 <led_rd_set+0x20>)
 80057b8:	f7ff ffc6 	bl	8005748 <led_set>
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40020800 	.word	0x40020800

080057c8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	f04f 33ff 	mov.w	r3, #4294967295
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	4804      	ldr	r0, [pc, #16]	; (80057f0 <_write+0x28>)
 80057e0:	f007 fec5 	bl	800d56e <HAL_UART_Transmit>
    return len;
 80057e4:	687b      	ldr	r3, [r7, #4]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200051b4 	.word	0x200051b4

080057f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80057f8:	b662      	cpsie	i
}
 80057fa:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057fc:	f003 fe30 	bl	8009460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005800:	f000 f852 	bl	80058a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005804:	f7ff fe46 	bl	8005494 <MX_GPIO_Init>
//  MX_FSMC_Init();
  MX_RTC_Init();
 8005808:	f002 fba2 	bl	8007f50 <MX_RTC_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 800580c:	f003 fd84 	bl	8009318 <MX_USART1_UART_Init>
//  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  printf("\r\nNAND programmer ver: %d.%d.%d\r\n", SW_VERSION_MAJOR,
 8005810:	2300      	movs	r3, #0
 8005812:	2205      	movs	r2, #5
 8005814:	2103      	movs	r1, #3
 8005816:	481c      	ldr	r0, [pc, #112]	; (8005888 <main+0x94>)
 8005818:	f00d fb7e 	bl	8012f18 <iprintf>
      SW_VERSION_MINOR, SW_VERSION_BUILD);

  if (!is_external_clock_avail())
 800581c:	f7ff f84a 	bl	80048b4 <is_external_clock_avail>
 8005820:	4603      	mov	r3, r0
 8005822:	f083 0301 	eor.w	r3, r3, #1
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <main+0x3e>
      printf("External clock not detected. Fallback to internal clock.\r\n");
 800582c:	4817      	ldr	r0, [pc, #92]	; (800588c <main+0x98>)
 800582e:	f00d fbd9 	bl	8012fe4 <puts>

  printf("JTAG init...");
 8005832:	4817      	ldr	r0, [pc, #92]	; (8005890 <main+0x9c>)
 8005834:	f00d fb70 	bl	8012f18 <iprintf>
  jtag_init();
 8005838:	f7ff ff1c 	bl	8005674 <jtag_init>
  printf("done.\r\n");
 800583c:	4815      	ldr	r0, [pc, #84]	; (8005894 <main+0xa0>)
 800583e:	f00d fbd1 	bl	8012fe4 <puts>

  printf("LED init...");
 8005842:	4815      	ldr	r0, [pc, #84]	; (8005898 <main+0xa4>)
 8005844:	f00d fb68 	bl	8012f18 <iprintf>
  led_init();
 8005848:	f7ff ff1e 	bl	8005688 <led_init>
  printf("done.\r\n");
 800584c:	4811      	ldr	r0, [pc, #68]	; (8005894 <main+0xa0>)
 800584e:	f00d fbc9 	bl	8012fe4 <puts>

  printf("USB init...");
 8005852:	4812      	ldr	r0, [pc, #72]	; (800589c <main+0xa8>)
 8005854:	f00d fb60 	bl	8012f18 <iprintf>
  MX_USB_DEVICE_Init();
 8005858:	f00c fb2c 	bl	8011eb4 <MX_USB_DEVICE_Init>
  printf("done.\r\n");
 800585c:	480d      	ldr	r0, [pc, #52]	; (8005894 <main+0xa0>)
 800585e:	f00d fbc1 	bl	8012fe4 <puts>

  printf("CDC init...");
 8005862:	480f      	ldr	r0, [pc, #60]	; (80058a0 <main+0xac>)
 8005864:	f00d fb58 	bl	8012f18 <iprintf>
  cdc_init();
 8005868:	f7fe fee0 	bl	800462c <cdc_init>
  printf("done.\r\n");
 800586c:	4809      	ldr	r0, [pc, #36]	; (8005894 <main+0xa0>)
 800586e:	f00d fbb9 	bl	8012fe4 <puts>

  printf("Programmer init...");
 8005872:	480c      	ldr	r0, [pc, #48]	; (80058a4 <main+0xb0>)
 8005874:	f00d fb50 	bl	8012f18 <iprintf>
  np_init();
 8005878:	f002 fb3e 	bl	8007ef8 <np_init>
  printf("done.\r\n");
 800587c:	4805      	ldr	r0, [pc, #20]	; (8005894 <main+0xa0>)
 800587e:	f00d fbb1 	bl	8012fe4 <puts>
	else
		printf(" W25Q256JV QuadSPI Test False\r\n");
*/

  while (1)
      np_handler();
 8005882:	f002 fb49 	bl	8007f18 <np_handler>
 8005886:	e7fc      	b.n	8005882 <main+0x8e>
 8005888:	08013f68 	.word	0x08013f68
 800588c:	08013f8c 	.word	0x08013f8c
 8005890:	08013fc8 	.word	0x08013fc8
 8005894:	08013fd8 	.word	0x08013fd8
 8005898:	08013fe0 	.word	0x08013fe0
 800589c:	08013fec 	.word	0x08013fec
 80058a0:	08013ff8 	.word	0x08013ff8
 80058a4:	08014004 	.word	0x08014004

080058a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b094      	sub	sp, #80	; 0x50
 80058ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058ae:	f107 0320 	add.w	r3, r7, #32
 80058b2:	2230      	movs	r2, #48	; 0x30
 80058b4:	2100      	movs	r1, #0
 80058b6:	4618      	mov	r0, r3
 80058b8:	f00d fc74 	bl	80131a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058bc:	f107 030c 	add.w	r3, r7, #12
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	605a      	str	r2, [r3, #4]
 80058c6:	609a      	str	r2, [r3, #8]
 80058c8:	60da      	str	r2, [r3, #12]
 80058ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80058cc:	2300      	movs	r3, #0
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	4b29      	ldr	r3, [pc, #164]	; (8005978 <SystemClock_Config+0xd0>)
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	4a28      	ldr	r2, [pc, #160]	; (8005978 <SystemClock_Config+0xd0>)
 80058d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058da:	6413      	str	r3, [r2, #64]	; 0x40
 80058dc:	4b26      	ldr	r3, [pc, #152]	; (8005978 <SystemClock_Config+0xd0>)
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058e8:	2300      	movs	r3, #0
 80058ea:	607b      	str	r3, [r7, #4]
 80058ec:	4b23      	ldr	r3, [pc, #140]	; (800597c <SystemClock_Config+0xd4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a22      	ldr	r2, [pc, #136]	; (800597c <SystemClock_Config+0xd4>)
 80058f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	4b20      	ldr	r3, [pc, #128]	; (800597c <SystemClock_Config+0xd4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005900:	607b      	str	r3, [r7, #4]
 8005902:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8005904:	2309      	movs	r3, #9
 8005906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800590e:	2301      	movs	r3, #1
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005912:	2302      	movs	r3, #2
 8005914:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005916:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800591c:	2305      	movs	r3, #5
 800591e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005920:	23a8      	movs	r3, #168	; 0xa8
 8005922:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005924:	2302      	movs	r3, #2
 8005926:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005928:	2307      	movs	r3, #7
 800592a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800592c:	f107 0320 	add.w	r3, r7, #32
 8005930:	4618      	mov	r0, r3
 8005932:	f006 fa31 	bl	800bd98 <HAL_RCC_OscConfig>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800593c:	f000 f820 	bl	8005980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005940:	230f      	movs	r3, #15
 8005942:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005944:	2302      	movs	r3, #2
 8005946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800594c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005950:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005956:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005958:	f107 030c 	add.w	r3, r7, #12
 800595c:	2105      	movs	r1, #5
 800595e:	4618      	mov	r0, r3
 8005960:	f006 fc92 	bl	800c288 <HAL_RCC_ClockConfig>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800596a:	f000 f809 	bl	8005980 <Error_Handler>
  }
}
 800596e:	bf00      	nop
 8005970:	3750      	adds	r7, #80	; 0x50
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800
 800597c:	40007000 	.word	0x40007000

08005980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005984:	b672      	cpsid	i
}
 8005986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005988:	e7fe      	b.n	8005988 <Error_Handler+0x8>
	...

0800598c <nand_bad_block_table_init>:

static uint32_t nand_bad_block_table_count; // NAND 坏块表中的块计数
static uint32_t nand_bad_block_table[NAND_BAD_BLOCK_TABLE_SIZE]; // NAND 坏块表

void nand_bad_block_table_init()
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
    memset(nand_bad_block_table, 0, sizeof(nand_bad_block_table)); // 初始化 NAND 坏块表为 0
 8005990:	2250      	movs	r2, #80	; 0x50
 8005992:	2100      	movs	r1, #0
 8005994:	4803      	ldr	r0, [pc, #12]	; (80059a4 <nand_bad_block_table_init+0x18>)
 8005996:	f00d fc05 	bl	80131a4 <memset>
    nand_bad_block_table_count = 0; // 初始化 NAND 坏块计数为 0
 800599a:	4b03      	ldr	r3, [pc, #12]	; (80059a8 <nand_bad_block_table_init+0x1c>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
}
 80059a0:	bf00      	nop
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	20000c68 	.word	0x20000c68
 80059a8:	20000c64 	.word	0x20000c64

080059ac <nand_bad_block_table_add>:

int nand_bad_block_table_add(uint32_t page)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
    if (nand_bad_block_table_count == NAND_BAD_BLOCK_TABLE_SIZE)
 80059b4:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <nand_bad_block_table_add+0x38>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b14      	cmp	r3, #20
 80059ba:	d102      	bne.n	80059c2 <nand_bad_block_table_add+0x16>
        return -1; // 坏块表已满，无法添加
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295
 80059c0:	e009      	b.n	80059d6 <nand_bad_block_table_add+0x2a>

    nand_bad_block_table[nand_bad_block_table_count++] = page; // 在坏块表末尾添加新的块
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <nand_bad_block_table_add+0x38>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	4906      	ldr	r1, [pc, #24]	; (80059e4 <nand_bad_block_table_add+0x38>)
 80059ca:	600a      	str	r2, [r1, #0]
 80059cc:	4906      	ldr	r1, [pc, #24]	; (80059e8 <nand_bad_block_table_add+0x3c>)
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0; // 添加成功
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20000c64 	.word	0x20000c64
 80059e8:	20000c68 	.word	0x20000c68

080059ec <nand_bad_block_table_lookup>:

bool nand_bad_block_table_lookup(uint32_t page)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
    uint32_t i;

    for (i = 0; i < nand_bad_block_table_count; i++)
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e00b      	b.n	8005a12 <nand_bad_block_table_lookup+0x26>
    {
        if (nand_bad_block_table[i] == page)
 80059fa:	4a0c      	ldr	r2, [pc, #48]	; (8005a2c <nand_bad_block_table_lookup+0x40>)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d101      	bne.n	8005a0c <nand_bad_block_table_lookup+0x20>
            return true; // 在坏块表中找到了对应的块
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e008      	b.n	8005a1e <nand_bad_block_table_lookup+0x32>
    for (i = 0; i < nand_bad_block_table_count; i++)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <nand_bad_block_table_lookup+0x44>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d3ee      	bcc.n	80059fa <nand_bad_block_table_lookup+0xe>
    }

    return false; // 在坏块表中未找到对应的块
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	20000c68 	.word	0x20000c68
 8005a30:	20000c64 	.word	0x20000c64

08005a34 <nand_bad_block_table_iter_alloc>:

void *nand_bad_block_table_iter_alloc(uint32_t *page)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
    if (!nand_bad_block_table_count)
 8005a3c:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <nand_bad_block_table_iter_alloc+0x2c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <nand_bad_block_table_iter_alloc+0x14>
        return NULL; // 坏块表为空，无法进行迭代
 8005a44:	2300      	movs	r3, #0
 8005a46:	e004      	b.n	8005a52 <nand_bad_block_table_iter_alloc+0x1e>

    *page = nand_bad_block_table[0]; // 将坏块表的第一个块赋值给 page
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <nand_bad_block_table_iter_alloc+0x30>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]

    return &nand_bad_block_table[0]; // 返回坏块表的第一个块的地址作为迭代器
 8005a50:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <nand_bad_block_table_iter_alloc+0x30>)
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20000c64 	.word	0x20000c64
 8005a64:	20000c68 	.word	0x20000c68

08005a68 <nand_bad_block_table_iter_next>:

void *nand_bad_block_table_iter_next(void *iter, uint32_t *page)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
    uint32_t *bbt_iter = iter;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60fb      	str	r3, [r7, #12]

    if (!bbt_iter)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <nand_bad_block_table_iter_next+0x18>
       return NULL; // 无效的迭代器，无法进行下一次迭代
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e012      	b.n	8005aa6 <nand_bad_block_table_iter_next+0x3e>

    bbt_iter++; // 迭代器指向下一个块
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3304      	adds	r3, #4
 8005a84:	60fb      	str	r3, [r7, #12]

    if (bbt_iter - &nand_bad_block_table[0] >= nand_bad_block_table_count)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4a0a      	ldr	r2, [pc, #40]	; (8005ab4 <nand_bad_block_table_iter_next+0x4c>)
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	109b      	asrs	r3, r3, #2
 8005a8e:	461a      	mov	r2, r3
 8005a90:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <nand_bad_block_table_iter_next+0x50>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d301      	bcc.n	8005a9c <nand_bad_block_table_iter_next+0x34>
        return NULL; // 已达到坏块表的末尾，无法进行下一次迭代
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e004      	b.n	8005aa6 <nand_bad_block_table_iter_next+0x3e>

    *page = *bbt_iter; // 将当前迭代的块赋值给 page
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	601a      	str	r2, [r3, #0]

    return bbt_iter; // 返回下一次迭代的迭代器
 8005aa4:	68fb      	ldr	r3, [r7, #12]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000c68 	.word	0x20000c68
 8005ab8:	20000c64 	.word	0x20000c64

08005abc <np_send_ok_status>:
static flash_hal_t *hal[] = { &hal_fsmc, &hal_spi_nor, &hal_spi_nand };  // HAL 驱动数组

uint8_t np_packet_send_buf[NP_PACKET_BUF_SIZE];    // 发送数据包缓冲区

static int np_send_ok_status()
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_OK };       // 正常状态响应
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	703b      	strb	r3, [r7, #0]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	707b      	strb	r3, [r7, #1]
    size_t len = sizeof(status);
 8005aca:	2302      	movs	r3, #2
 8005acc:	607b      	str	r3, [r7, #4]

    if (np_comm_cb)
 8005ace:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <np_send_ok_status+0x34>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d006      	beq.n	8005ae4 <np_send_ok_status+0x28>
        np_comm_cb->send((uint8_t *)&status, len);             // 发送响应数据
 8005ad6:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <np_send_ok_status+0x34>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	463a      	mov	r2, r7
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4798      	blx	r3

    return 0;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000cb8 	.word	0x20000cb8

08005af4 <np_send_error>:

static int np_send_error(uint8_t err_code)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	71fb      	strb	r3, [r7, #7]
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_ERROR };    // 错误状态响应
 8005afe:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <np_send_error+0x40>)
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	823b      	strh	r3, [r7, #16]
    np_resp_err_t err_status = { status, err_code };           // 错误状态信息
 8005b04:	8a3b      	ldrh	r3, [r7, #16]
 8005b06:	81bb      	strh	r3, [r7, #12]
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	73bb      	strb	r3, [r7, #14]
    size_t len = sizeof(err_status);
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	617b      	str	r3, [r7, #20]

    if (np_comm_cb)
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <np_send_error+0x44>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <np_send_error+0x34>
        np_comm_cb->send((uint8_t *)&err_status, len);         // 发送错误响应数据
 8005b18:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <np_send_error+0x44>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f107 020c 	add.w	r2, r7, #12
 8005b22:	6979      	ldr	r1, [r7, #20]
 8005b24:	4610      	mov	r0, r2
 8005b26:	4798      	blx	r3

    return 0;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	08014018 	.word	0x08014018
 8005b38:	20000cb8 	.word	0x20000cb8

08005b3c <np_send_bad_block_info>:

// 发送坏块信息函数，参数为块地址、大小和是否跳过标志
static int np_send_bad_block_info(uint64_t addr, uint32_t size, bool is_skipped)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	70fb      	strb	r3, [r7, #3]
    // 根据是否跳过标志确定info的值
    uint8_t info = is_skipped ? NP_STATUS_BB_SKIP : NP_STATUS_BB;
 8005b4a:	78fb      	ldrb	r3, [r7, #3]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <np_send_bad_block_info+0x18>
 8005b50:	2304      	movs	r3, #4
 8005b52:	e000      	b.n	8005b56 <np_send_bad_block_info+0x1a>
 8005b54:	2302      	movs	r3, #2
 8005b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, info };
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8005b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    // 构造坏块信息
    np_resp_bad_block_t bad_block = { resp_header, addr, size };
 8005b68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b6a:	82bb      	strh	r3, [r7, #20]
 8005b6c:	f107 0318 	add.w	r3, r7, #24
 8005b70:	3b02      	subs	r3, #2
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	605a      	str	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8c7 301e 	str.w	r3, [r7, #30]

    // 调用回调函数发送坏块信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&bad_block, sizeof(bad_block)))
 8005b80:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <np_send_bad_block_info+0x6c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f107 0214 	add.w	r2, r7, #20
 8005b8a:	210e      	movs	r1, #14
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4798      	blx	r3
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <np_send_bad_block_info+0x60>
        return -1;
 8005b96:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9a:	e000      	b.n	8005b9e <np_send_bad_block_info+0x62>

    return 0;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3728      	adds	r7, #40	; 0x28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000cb8 	.word	0x20000cb8

08005bac <np_send_progress>:

// 发送进度信息函数，参数为进度值
static int np_send_progress(uint64_t progress)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	e9c7 0100 	strd	r0, r1, [r7]
    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_PROGRESS };
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <np_send_progress+0x48>)
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	82bb      	strh	r3, [r7, #20]

    // 构造进度信息
    np_resp_progress_t resp_progress = { resp_header, progress };
 8005bbc:	8abb      	ldrh	r3, [r7, #20]
 8005bbe:	813b      	strh	r3, [r7, #8]
 8005bc0:	f107 0308 	add.w	r3, r7, #8
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	605a      	str	r2, [r3, #4]

    // 调用回调函数发送进度信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&resp_progress, sizeof(resp_progress)))
 8005bce:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <np_send_progress+0x4c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f107 0208 	add.w	r2, r7, #8
 8005bd8:	210a      	movs	r1, #10
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4798      	blx	r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <np_send_progress+0x3e>
        return -1;
 8005be4:	f04f 33ff 	mov.w	r3, #4294967295
 8005be8:	e000      	b.n	8005bec <np_send_progress+0x40>

    return 0;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	0801401c 	.word	0x0801401c
 8005bf8:	20000cb8 	.word	0x20000cb8

08005bfc <_np_cmd_nand_read_id>:

// 内部函数，用于执行NAND读取ID的命令
static int _np_cmd_nand_read_id(np_prog_t *prog)
{
 8005bfc:	b5b0      	push	{r4, r5, r7, lr}
 8005bfe:	b08a      	sub	sp, #40	; 0x28
 8005c00:	af04      	add	r7, sp, #16
 8005c02:	6078      	str	r0, [r7, #4]
    np_resp_id_t resp;
    size_t resp_len = sizeof(resp);
 8005c04:	2308      	movs	r3, #8
 8005c06:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read ID command\r\n");
 8005c08:	481d      	ldr	r0, [pc, #116]	; (8005c80 <_np_cmd_nand_read_id+0x84>)
 8005c0a:	f00d f9eb 	bl	8012fe4 <puts>

    // 设置响应头部的code和info字段
    resp.header.code = NP_RESP_DATA;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	3b02      	subs	r3, #2
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	737b      	strb	r3, [r7, #13]

    // 调用硬件抽象层的读取ID函数
    hal[prog->hal]->read_id(&resp.nand_id);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c22:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005c26:	461a      	mov	r2, r3
 8005c28:	4b16      	ldr	r3, [pc, #88]	; (8005c84 <_np_cmd_nand_read_id+0x88>)
 8005c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f107 020c 	add.w	r2, r7, #12
 8005c34:	3202      	adds	r2, #2
 8005c36:	4610      	mov	r0, r2
 8005c38:	4798      	blx	r3

    // 如果设置了通信回调函数，则发送响应数据
    if (np_comm_cb)
 8005c3a:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <_np_cmd_nand_read_id+0x8c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <_np_cmd_nand_read_id+0x56>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8005c42:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <_np_cmd_nand_read_id+0x8c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f107 020c 	add.w	r2, r7, #12
 8005c4c:	6979      	ldr	r1, [r7, #20]
 8005c4e:	4610      	mov	r0, r2
 8005c50:	4798      	blx	r3

    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8005c52:	7bbb      	ldrb	r3, [r7, #14]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8005c54:	4618      	mov	r0, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8005c58:	461c      	mov	r4, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8005c5a:	7c3b      	ldrb	r3, [r7, #16]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8005c5c:	461d      	mov	r5, r3
        resp.nand_id.fourth_id, resp.nand_id.fifth_id, resp.nand_id.sixth_id);
 8005c5e:	7c7b      	ldrb	r3, [r7, #17]
 8005c60:	7cba      	ldrb	r2, [r7, #18]
 8005c62:	7cf9      	ldrb	r1, [r7, #19]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8005c64:	9102      	str	r1, [sp, #8]
 8005c66:	9201      	str	r2, [sp, #4]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	462b      	mov	r3, r5
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	4601      	mov	r1, r0
 8005c70:	4806      	ldr	r0, [pc, #24]	; (8005c8c <_np_cmd_nand_read_id+0x90>)
 8005c72:	f00d f951 	bl	8012f18 <iprintf>

    return 0;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c80:	08014020 	.word	0x08014020
 8005c84:	20000040 	.word	0x20000040
 8005c88:	20000cb8 	.word	0x20000cb8
 8005c8c:	08014034 	.word	0x08014034

08005c90 <np_cmd_nand_read_id>:

// 执行NAND读取ID的命令
static int np_cmd_nand_read_id(np_prog_t *prog)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 8005c98:	2001      	movs	r0, #1
 8005c9a:	f7ff fd83 	bl	80057a4 <led_rd_set>
    ret = _np_cmd_nand_read_id(prog);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff ffac 	bl	8005bfc <_np_cmd_nand_read_id>
 8005ca4:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f7ff fd7c 	bl	80057a4 <led_rd_set>

    return ret;
 8005cac:	68fb      	ldr	r3, [r7, #12]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <np_read_bad_block_info_from_page>:

// 从页中读取坏块信息，参数为编程器、块号、页号和坏块标志指针
static int np_read_bad_block_info_from_page(np_prog_t *prog, uint32_t block,
    uint32_t page, bool *is_bad)
{
 8005cb8:	b5b0      	push	{r4, r5, r7, lr}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
    uint32_t status;
    uint64_t addr = block * prog->chip_info.block_size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ccc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	461c      	mov	r4, r3
 8005cda:	4615      	mov	r5, r2
 8005cdc:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ce6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off];
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005cf0:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3338      	adds	r3, #56	; 0x38
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	617b      	str	r3, [r7, #20]

    // 从页的备用区域读取坏块标志
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d06:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4b35      	ldr	r3, [pc, #212]	; (8005de4 <np_read_bad_block_info_from_page+0x12c>)
 8005d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d12:	695c      	ldr	r4, [r3, #20]
        prog->chip_info.bb_mark_off, 1);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d1a:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2301      	movs	r3, #1
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	6978      	ldr	r0, [r7, #20]
 8005d26:	47a0      	blx	r4
 8005d28:	6278      	str	r0, [r7, #36]	; 0x24

    // 如果读取命令无效，则尝试读取整个页的数据
    if (status == FLASH_STATUS_INVALID_CMD)
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d11a      	bne.n	8005d66 <np_read_bad_block_info_from_page+0xae>
    {
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d36:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4b29      	ldr	r3, [pc, #164]	; (8005de4 <np_read_bad_block_info_from_page+0x12c>)
 8005d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	f102 003c 	add.w	r0, r2, #60	; 0x3c
            prog->chip_info.page_size + prog->chip_info.spare_size);
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005d50:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005d5a:	f8d2 2238 	ldr.w	r2, [r2, #568]	; 0x238
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8005d5e:	440a      	add	r2, r1
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	4798      	blx	r3
 8005d64:	6278      	str	r0, [r7, #36]	; 0x24
    }

    switch (status)
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d010      	beq.n	8005d8e <np_read_bad_block_info_from_page+0xd6>
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d815      	bhi.n	8005d9e <np_read_bad_block_info_from_page+0xe6>
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d018      	beq.n	8005daa <np_read_bad_block_info_from_page+0xf2>
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d10f      	bne.n	8005d9e <np_read_bad_block_info_from_page+0xe6>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        ERROR_PRINT("NAND read bad block info error at 0x%" PRIx64 "\r\n",
 8005d7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d82:	4819      	ldr	r0, [pc, #100]	; (8005de8 <np_read_bad_block_info_from_page+0x130>)
 8005d84:	f00d f8c8 	bl	8012f18 <iprintf>
            addr);
        return NP_ERR_NAND_RD;
 8005d88:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8005d8c:	e025      	b.n	8005dda <np_read_bad_block_info_from_page+0x122>
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND read timeout at 0x%" PRIx64 "\r\n", addr);
 8005d8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d92:	4816      	ldr	r0, [pc, #88]	; (8005dec <np_read_bad_block_info_from_page+0x134>)
 8005d94:	f00d f8c0 	bl	8012f18 <iprintf>
        return NP_ERR_NAND_RD;
 8005d98:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8005d9c:	e01d      	b.n	8005dda <np_read_bad_block_info_from_page+0x122>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8005d9e:	4814      	ldr	r0, [pc, #80]	; (8005df0 <np_read_bad_block_info_from_page+0x138>)
 8005da0:	f00d f920 	bl	8012fe4 <puts>
        return NP_ERR_NAND_RD;
 8005da4:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8005da8:	e017      	b.n	8005dda <np_read_bad_block_info_from_page+0x122>
        break;
 8005daa:	bf00      	nop
    }

    // 判断坏块标志是否为NP_NAND_GOOD_BLOCK_MARK
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005db2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005dbc:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8005dc0:	4413      	add	r3, r2
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8005dca:	2bff      	cmp	r3, #255	; 0xff
 8005dcc:	bf14      	ite	ne
 8005dce:	2301      	movne	r3, #1
 8005dd0:	2300      	moveq	r3, #0
 8005dd2:	b2da      	uxtb	r2, r3
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	701a      	strb	r2, [r3, #0]

    return 0;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3728      	adds	r7, #40	; 0x28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bdb0      	pop	{r4, r5, r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000040 	.word	0x20000040
 8005de8:	08014060 	.word	0x08014060
 8005dec:	08014094 	.word	0x08014094
 8005df0:	080140bc 	.word	0x080140bc

08005df4 <_np_cmd_read_bad_blocks>:

// 内部函数，执行读取坏块命令，并可选择发送进度信息
static int _np_cmd_read_bad_blocks(np_prog_t *prog, bool send_progress)
{
 8005df4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005df8:	b088      	sub	sp, #32
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	70fb      	strb	r3, [r7, #3]
    int ret;
    bool is_bad;
    uint32_t block, block_num, page_num, page;

    // 检查是否支持坏块检测
    if (!hal[prog->hal]->is_bb_supported())
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e08:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4b40      	ldr	r3, [pc, #256]	; (8005f10 <_np_cmd_read_bad_blocks+0x11c>)
 8005e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	4798      	blx	r3
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f083 0301 	eor.w	r3, r3, #1
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d16a      	bne.n	8005efa <_np_cmd_read_bad_blocks+0x106>
        goto Exit;

    block_num = prog->chip_info.total_size / prog->chip_info.block_size;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8005e2a:	3330      	adds	r3, #48	; 0x30
 8005e2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e36:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	4698      	mov	r8, r3
 8005e3e:	4691      	mov	r9, r2
 8005e40:	4642      	mov	r2, r8
 8005e42:	464b      	mov	r3, r9
 8005e44:	f7fe fa14 	bl	8004270 <__aeabi_uldivmod>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
    page_num = prog->chip_info.block_size / prog->chip_info.page_size;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e56:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e60:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e68:	617b      	str	r3, [r7, #20]
    /* Bad block - not 0xFF value in the first or second page in the block at
     * some offset in the page spare area
     */

    // 遍历所有块
    for (block = 0; block < block_num; block++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
 8005e6e:	e03f      	b.n	8005ef0 <_np_cmd_read_bad_blocks+0xfc>
    {
        page = block * page_num;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	fb02 f303 	mul.w	r3, r2, r3
 8005e78:	613b      	str	r3, [r7, #16]

        // 如果需要发送进度信息，则调用np_send_progress函数发送
        if (send_progress)
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <_np_cmd_read_bad_blocks+0x9c>
            np_send_progress(page);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2200      	movs	r2, #0
 8005e84:	461c      	mov	r4, r3
 8005e86:	4615      	mov	r5, r2
 8005e88:	4620      	mov	r0, r4
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	f7ff fe8e 	bl	8005bac <np_send_progress>

        // 从第一个页和第二个页读取坏块信息
        if ((ret = np_read_bad_block_info_from_page(prog, block, page,
 8005e90:	f107 030b 	add.w	r3, r7, #11
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	69f9      	ldr	r1, [r7, #28]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff ff0d 	bl	8005cb8 <np_read_bad_block_info_from_page>
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <_np_cmd_read_bad_blocks+0xb6>
            &is_bad)))
        {
            return ret;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	e02c      	b.n	8005f04 <_np_cmd_read_bad_blocks+0x110>
        }

        if (!is_bad && (ret = np_read_bad_block_info_from_page(prog, block,
 8005eaa:	7afb      	ldrb	r3, [r7, #11]
 8005eac:	f083 0301 	eor.w	r3, r3, #1
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00d      	beq.n	8005ed2 <_np_cmd_read_bad_blocks+0xde>
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	f107 030b 	add.w	r3, r7, #11
 8005ebe:	69f9      	ldr	r1, [r7, #28]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7ff fef9 	bl	8005cb8 <np_read_bad_block_info_from_page>
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <_np_cmd_read_bad_blocks+0xde>
            page + 1, &is_bad)))
        {
            return ret;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	e018      	b.n	8005f04 <_np_cmd_read_bad_blocks+0x110>
        }

        // 如果是坏块，则将该页添加到坏块表中
        if (is_bad && nand_bad_block_table_add(page))
 8005ed2:	7afb      	ldrb	r3, [r7, #11]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d008      	beq.n	8005eea <_np_cmd_read_bad_blocks+0xf6>
 8005ed8:	6938      	ldr	r0, [r7, #16]
 8005eda:	f7ff fd67 	bl	80059ac <nand_bad_block_table_add>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <_np_cmd_read_bad_blocks+0xf6>
            return NP_ERR_BBT_OVERFLOW;
 8005ee4:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8005ee8:	e00c      	b.n	8005f04 <_np_cmd_read_bad_blocks+0x110>
    for (block = 0; block < block_num; block++)
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	3301      	adds	r3, #1
 8005eee:	61fb      	str	r3, [r7, #28]
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d3bb      	bcc.n	8005e70 <_np_cmd_read_bad_blocks+0x7c>
    }

Exit:
 8005ef8:	e000      	b.n	8005efc <_np_cmd_read_bad_blocks+0x108>
        goto Exit;
 8005efa:	bf00      	nop
    prog->bb_is_read = 1;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	635a      	str	r2, [r3, #52]	; 0x34

    return 0;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3720      	adds	r7, #32
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000040 	.word	0x20000040

08005f14 <np_nand_erase>:

// NAND擦除函数
static int np_nand_erase(np_prog_t *prog, uint32_t page)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
    uint32_t status;
    uint64_t addr = page * prog->chip_info.page_size;
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8005f24:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 8005f28:	6838      	ldr	r0, [r7, #0]
 8005f2a:	fb00 f101 	mul.w	r1, r0, r1
 8005f2e:	2000      	movs	r0, #0
 8005f30:	460a      	mov	r2, r1
 8005f32:	4603      	mov	r3, r0
 8005f34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    DEBUG_PRINT("NAND擦除地址：0x%" PRIx64 "\r\n", addr);
 8005f38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f3c:	481f      	ldr	r0, [pc, #124]	; (8005fbc <np_nand_erase+0xa8>)
 8005f3e:	f00c ffeb 	bl	8012f18 <iprintf>

    // 调用硬件抽象层的块擦除函数
    status = hal[prog->hal]->erase_block(page);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005f48:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4b1c      	ldr	r3, [pc, #112]	; (8005fc0 <np_nand_erase+0xac>)
 8005f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	6838      	ldr	r0, [r7, #0]
 8005f58:	4798      	blx	r3
 8005f5a:	60f8      	str	r0, [r7, #12]
    switch (status)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d018      	beq.n	8005f94 <np_nand_erase+0x80>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d81b      	bhi.n	8005fa0 <np_nand_erase+0x8c>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01e      	beq.n	8005fac <np_nand_erase+0x98>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d115      	bne.n	8005fa0 <np_nand_erase+0x8c>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果擦除命令失败，发送坏块信息
        if (np_send_bad_block_info(addr, prog->chip_info.block_size, false))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005f7a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005f84:	f7ff fdda 	bl	8005b3c <np_send_bad_block_info>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d010      	beq.n	8005fb0 <np_nand_erase+0x9c>
            return -1;
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f92:	e00f      	b.n	8005fb4 <np_nand_erase+0xa0>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND擦除超时，地址：0x%" PRIx64 "\r\n", addr);
 8005f94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f98:	480a      	ldr	r0, [pc, #40]	; (8005fc4 <np_nand_erase+0xb0>)
 8005f9a:	f00c ffbd 	bl	8012f18 <iprintf>
        break;
 8005f9e:	e008      	b.n	8005fb2 <np_nand_erase+0x9e>
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 8005fa0:	4809      	ldr	r0, [pc, #36]	; (8005fc8 <np_nand_erase+0xb4>)
 8005fa2:	f00d f81f 	bl	8012fe4 <puts>
        return -1;
 8005fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8005faa:	e003      	b.n	8005fb4 <np_nand_erase+0xa0>
        break;
 8005fac:	bf00      	nop
 8005fae:	e000      	b.n	8005fb2 <np_nand_erase+0x9e>
        break;
 8005fb0:	bf00      	nop
    }

    return 0;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	080140d8 	.word	0x080140d8
 8005fc0:	20000040 	.word	0x20000040
 8005fc4:	080140f4 	.word	0x080140f4
 8005fc8:	08014120 	.word	0x08014120

08005fcc <_np_cmd_nand_erase>:

// 执行NAND擦除命令的内部函数
static int _np_cmd_nand_erase(np_prog_t *prog)
{
 8005fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd0:	b0ac      	sub	sp, #176	; 0xb0
 8005fd2:	af04      	add	r7, sp, #16
 8005fd4:	6578      	str	r0, [r7, #84]	; 0x54
    int ret;
    uint64_t addr, len, total_size, total_len;
    uint32_t page, pages, pages_in_block, page_size, block_size;
    np_erase_cmd_t *erase_cmd;
    bool skip_bb, inc_spare, is_bad = false;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_erase_cmd_t))
 8005fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b11      	cmp	r3, #17
 8005fe2:	d808      	bhi.n	8005ff6 <_np_cmd_nand_erase+0x2a>
    {
        ERROR_PRINT("擦除命令的缓冲区长度错误：%lu\r\n",
 8005fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	48b0      	ldr	r0, [pc, #704]	; (80062ac <_np_cmd_nand_erase+0x2e0>)
 8005fec:	f00c ff94 	bl	8012f18 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8005ff0:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8005ff4:	e1c0      	b.n	8006378 <_np_cmd_nand_erase+0x3ac>
    }
    erase_cmd = (np_erase_cmd_t *)prog->rx_buf;
 8005ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	677b      	str	r3, [r7, #116]	; 0x74
    total_len = len = erase_cmd->len;
 8005ffc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005ffe:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8006002:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8006006:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800600a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800600e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    addr = erase_cmd->addr;
 8006012:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006014:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8006018:	f8d1 3005 	ldr.w	r3, [r1, #5]
 800601c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    skip_bb = erase_cmd->flags.skip_bb;
 8006020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006022:	7c5b      	ldrb	r3, [r3, #17]
 8006024:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	bf14      	ite	ne
 800602e:	2301      	movne	r3, #1
 8006030:	2300      	moveq	r3, #0
 8006032:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    inc_spare = erase_cmd->flags.inc_spare;
 8006036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006038:	7c5b      	ldrb	r3, [r3, #17]
 800603a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	bf14      	ite	ne
 8006044:	2301      	movne	r3, #1
 8006046:	2300      	moveq	r3, #0
 8006048:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    DEBUG_PRINT("擦除地址：0x%" PRIx64 "，长度：0x%" PRIx64 "字节\r\n", addr,
 800604c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006050:	e9cd 2300 	strd	r2, r3, [sp]
 8006054:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006058:	4895      	ldr	r0, [pc, #596]	; (80062b0 <_np_cmd_nand_erase+0x2e4>)
 800605a:	f00c ff5d 	bl	8012f18 <iprintf>
        len);

    pages_in_block = prog->chip_info.block_size / prog->chip_info.page_size;
 800605e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006060:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006064:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800606a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800606e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006072:	fbb2 f3f3 	udiv	r3, r2, r3
 8006076:	663b      	str	r3, [r7, #96]	; 0x60

    if (inc_spare)
 8006078:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800607c:	2b00      	cmp	r3, #0
 800607e:	d03f      	beq.n	8006100 <_np_cmd_nand_erase+0x134>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8006080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006082:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006086:	3330      	adds	r3, #48	; 0x30
 8006088:	e9d3 0100 	ldrd	r0, r1, [r3]
 800608c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800608e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006092:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006096:	2200      	movs	r2, #0
 8006098:	64bb      	str	r3, [r7, #72]	; 0x48
 800609a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800609c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060a0:	f7fe f8e6 	bl	8004270 <__aeabi_uldivmod>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4613      	mov	r3, r2
 80060aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 80060ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80060b2:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 80060b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80060bc:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80060c0:	4413      	add	r3, r2
 80060c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = pages_in_block * page_size;
 80060c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060cc:	fb02 f303 	mul.w	r3, r2, r3
 80060d0:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = (uint64_t)pages * page_size;
 80060d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060d4:	2200      	movs	r2, #0
 80060d6:	469a      	mov	sl, r3
 80060d8:	4693      	mov	fp, r2
 80060da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060de:	2200      	movs	r2, #0
 80060e0:	4698      	mov	r8, r3
 80060e2:	4691      	mov	r9, r2
 80060e4:	fb08 f20b 	mul.w	r2, r8, fp
 80060e8:	fb0a f309 	mul.w	r3, sl, r9
 80060ec:	4413      	add	r3, r2
 80060ee:	fbaa 4508 	umull	r4, r5, sl, r8
 80060f2:	442b      	add	r3, r5
 80060f4:	461d      	mov	r5, r3
 80060f6:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 80060fa:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 80060fe:	e014      	b.n	800612a <_np_cmd_nand_erase+0x15e>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8006100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006102:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006106:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800610a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = prog->chip_info.block_size;
 800610e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006110:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006114:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006118:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = prog->chip_info.total_size;
 800611a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006120:	3330      	adds	r3, #48	; 0x30
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    }

    // 如果设置了跳过坏块标志，并且坏块表未读取，则调用_np_cmd_read_bad_blocks函数进行坏块表读取
    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog, false)))
 800612a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00d      	beq.n	800614e <_np_cmd_nand_erase+0x182>
 8006132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <_np_cmd_nand_erase+0x182>
 800613a:	2100      	movs	r1, #0
 800613c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800613e:	f7ff fe59 	bl	8005df4 <_np_cmd_read_bad_blocks>
 8006142:	65b8      	str	r0, [r7, #88]	; 0x58
 8006144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <_np_cmd_nand_erase+0x182>
    {
        return ret;
 800614a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800614c:	e114      	b.n	8006378 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查地址是否对齐到块大小
    if (addr % block_size)
 800614e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006150:	2200      	movs	r2, #0
 8006152:	643b      	str	r3, [r7, #64]	; 0x40
 8006154:	647a      	str	r2, [r7, #68]	; 0x44
 8006156:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800615a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800615e:	f7fe f887 	bl	8004270 <__aeabi_uldivmod>
 8006162:	4313      	orrs	r3, r2
 8006164:	d009      	beq.n	800617a <_np_cmd_nand_erase+0x1ae>
    {
        ERROR_PRINT("地址0x%" PRIx64 "未对齐到块大小0x%lx\r\n", addr, block_size);
 8006166:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800616e:	4851      	ldr	r0, [pc, #324]	; (80062b4 <_np_cmd_nand_erase+0x2e8>)
 8006170:	f00c fed2 	bl	8012f18 <iprintf>
        return NP_ERR_ADDR_NOT_ALIGN;
 8006174:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006178:	e0fe      	b.n	8006378 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查长度是否为零
    if (!len)
 800617a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800617e:	4313      	orrs	r3, r2
 8006180:	d105      	bne.n	800618e <_np_cmd_nand_erase+0x1c2>
    {
        ERROR_PRINT("长度为零\r\n");
 8006182:	484d      	ldr	r0, [pc, #308]	; (80062b8 <_np_cmd_nand_erase+0x2ec>)
 8006184:	f00c ff2e 	bl	8012fe4 <puts>
        return NP_ERR_LEN_INVALID;
 8006188:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800618c:	e0f4      	b.n	8006378 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查长度是否对齐到块大小
    if (len % block_size)
 800618e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006190:	2200      	movs	r2, #0
 8006192:	63bb      	str	r3, [r7, #56]	; 0x38
 8006194:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006196:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800619a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800619e:	f7fe f867 	bl	8004270 <__aeabi_uldivmod>
 80061a2:	4313      	orrs	r3, r2
 80061a4:	d009      	beq.n	80061ba <_np_cmd_nand_erase+0x1ee>
    {
        ERROR_PRINT("长度0x%" PRIx64 "未对齐到块大小0x%lx\r\n", len, block_size);
 80061a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80061ae:	4843      	ldr	r0, [pc, #268]	; (80062bc <_np_cmd_nand_erase+0x2f0>)
 80061b0:	f00c feb2 	bl	8012f18 <iprintf>
        return NP_ERR_LEN_NOT_ALIGN;
 80061b4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80061b8:	e0de      	b.n	8006378 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查擦除地址是否超出芯片大小
    if (addr + len > total_size)
 80061ba:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061be:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80061c2:	1884      	adds	r4, r0, r2
 80061c4:	633c      	str	r4, [r7, #48]	; 0x30
 80061c6:	eb41 0303 	adc.w	r3, r1, r3
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34
 80061cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80061d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061d4:	4621      	mov	r1, r4
 80061d6:	428a      	cmp	r2, r1
 80061d8:	4629      	mov	r1, r5
 80061da:	418b      	sbcs	r3, r1
 80061dc:	d20f      	bcs.n	80061fe <_np_cmd_nand_erase+0x232>
    {
        ERROR_PRINT("擦除地址超出范围：0x%" PRIx64 "+0x%" PRIx64 "大于芯片大小0x%" PRIx64 "\r\n", addr, len, total_size);
 80061de:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80061e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061e6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80061ea:	e9cd 2300 	strd	r2, r3, [sp]
 80061ee:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80061f2:	4833      	ldr	r0, [pc, #204]	; (80062c0 <_np_cmd_nand_erase+0x2f4>)
 80061f4:	f00c fe90 	bl	8012f18 <iprintf>
        return NP_ERR_ADDR_EXCEEDED;
 80061f8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80061fc:	e0bc      	b.n	8006378 <_np_cmd_nand_erase+0x3ac>
    }

    page = addr / page_size;
 80061fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006202:	2200      	movs	r2, #0
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28
 8006206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006208:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800620c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006210:	f7fe f82e 	bl	8004270 <__aeabi_uldivmod>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4613      	mov	r3, r2
 800621a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    while (len)
 800621e:	e0a3      	b.n	8006368 <_np_cmd_nand_erase+0x39c>
    {
        if (addr >= total_size)
 8006220:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006224:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006228:	4290      	cmp	r0, r2
 800622a:	eb71 0303 	sbcs.w	r3, r1, r3
 800622e:	d30b      	bcc.n	8006248 <_np_cmd_nand_erase+0x27c>
        {
            ERROR_PRINT("擦除地址0x%" PRIx64 "超出范围：0x%" PRIx64 "\r\n", addr, total_size);
 8006230:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006234:	e9cd 2300 	strd	r2, r3, [sp]
 8006238:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800623c:	4821      	ldr	r0, [pc, #132]	; (80062c4 <_np_cmd_nand_erase+0x2f8>)
 800623e:	f00c fe6b 	bl	8012f18 <iprintf>
            return NP_ERR_ADDR_EXCEEDED;
 8006242:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006246:	e097      	b.n	8006378 <_np_cmd_nand_erase+0x3ac>
        }

        // 如果设置了跳过坏块标志，并且当前块为坏块，则跳过当前块，并发送坏块信息
        if (skip_bb && (is_bad = nand_bad_block_table_lookup(page)))
 8006248:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800624c:	2b00      	cmp	r3, #0
 800624e:	d01b      	beq.n	8006288 <_np_cmd_nand_erase+0x2bc>
 8006250:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8006254:	f7ff fbca 	bl	80059ec <nand_bad_block_table_lookup>
 8006258:	4603      	mov	r3, r0
 800625a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800625e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006262:	2b00      	cmp	r3, #0
 8006264:	d010      	beq.n	8006288 <_np_cmd_nand_erase+0x2bc>
        {
            DEBUG_PRINT("跳过坏块，地址：0x%" PRIx64 "\r\n", addr);
 8006266:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800626a:	4817      	ldr	r0, [pc, #92]	; (80062c8 <_np_cmd_nand_erase+0x2fc>)
 800626c:	f00c fe54 	bl	8012f18 <iprintf>
            if (np_send_bad_block_info(addr, block_size, true))
 8006270:	2301      	movs	r3, #1
 8006272:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006274:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006278:	f7ff fc60 	bl	8005b3c <np_send_bad_block_info>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <_np_cmd_nand_erase+0x2bc>
                return -1;
 8006282:	f04f 33ff 	mov.w	r3, #4294967295
 8006286:	e077      	b.n	8006378 <_np_cmd_nand_erase+0x3ac>
        }

        // 如果不是坏块，则执行擦除操作
        if (!is_bad && np_nand_erase(prog, page))
 8006288:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800628c:	f083 0301 	eor.w	r3, r3, #1
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d01a      	beq.n	80062cc <_np_cmd_nand_erase+0x300>
 8006296:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800629a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800629c:	f7ff fe3a 	bl	8005f14 <np_nand_erase>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d012      	beq.n	80062cc <_np_cmd_nand_erase+0x300>
            return NP_ERR_NAND_ERASE;
 80062a6:	f06f 0368 	mvn.w	r3, #104	; 0x68
 80062aa:	e065      	b.n	8006378 <_np_cmd_nand_erase+0x3ac>
 80062ac:	0801413c 	.word	0x0801413c
 80062b0:	08014170 	.word	0x08014170
 80062b4:	080141a0 	.word	0x080141a0
 80062b8:	080141d0 	.word	0x080141d0
 80062bc:	080141e8 	.word	0x080141e8
 80062c0:	08014218 	.word	0x08014218
 80062c4:	08014264 	.word	0x08014264
 80062c8:	08014298 	.word	0x08014298

        addr += block_size;
 80062cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062ce:	2200      	movs	r2, #0
 80062d0:	623b      	str	r3, [r7, #32]
 80062d2:	627a      	str	r2, [r7, #36]	; 0x24
 80062d4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80062d8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80062dc:	4621      	mov	r1, r4
 80062de:	1851      	adds	r1, r2, r1
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	4629      	mov	r1, r5
 80062e4:	414b      	adcs	r3, r1
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80062ec:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
        page += pages_in_block;
 80062f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80062f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062f6:	4413      	add	r3, r2
 80062f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        /* 在部分擦除时不计算坏块 */
        if (!is_bad || (is_bad && erase_cmd->len == total_size))
 80062fc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006300:	f083 0301 	eor.w	r3, r3, #1
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10e      	bne.n	8006328 <_np_cmd_nand_erase+0x35c>
 800630a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01d      	beq.n	800634e <_np_cmd_nand_erase+0x382>
 8006312:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006314:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8006318:	f8d1 300d 	ldr.w	r3, [r1, #13]
 800631c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006320:	4299      	cmp	r1, r3
 8006322:	bf08      	it	eq
 8006324:	4290      	cmpeq	r0, r2
 8006326:	d112      	bne.n	800634e <_np_cmd_nand_erase+0x382>
            len -= block_size;
 8006328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800632a:	2200      	movs	r2, #0
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	61fa      	str	r2, [r7, #28]
 8006330:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006334:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8006338:	4621      	mov	r1, r4
 800633a:	1a51      	subs	r1, r2, r1
 800633c:	6039      	str	r1, [r7, #0]
 800633e:	4629      	mov	r1, r5
 8006340:	eb63 0301 	sbc.w	r3, r3, r1
 8006344:	607b      	str	r3, [r7, #4]
 8006346:	e9d7 3400 	ldrd	r3, r4, [r7]
 800634a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

        // 发送进度信息
        np_send_progress(total_len - len);
 800634e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006352:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006356:	1a84      	subs	r4, r0, r2
 8006358:	613c      	str	r4, [r7, #16]
 800635a:	eb61 0303 	sbc.w	r3, r1, r3
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006364:	f7ff fc22 	bl	8005bac <np_send_progress>
    while (len)
 8006368:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800636c:	4313      	orrs	r3, r2
 800636e:	f47f af57 	bne.w	8006220 <_np_cmd_nand_erase+0x254>
    }

    return np_send_ok_status();
 8006372:	f7ff fba3 	bl	8005abc <np_send_ok_status>
 8006376:	4603      	mov	r3, r0
}
 8006378:	4618      	mov	r0, r3
 800637a:	37a0      	adds	r7, #160	; 0xa0
 800637c:	46bd      	mov	sp, r7
 800637e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006382:	bf00      	nop

08006384 <np_cmd_nand_erase>:

// 执行NAND擦除命令的函数
static int np_cmd_nand_erase(np_prog_t *prog)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
    int ret;

    // 设置写入指示灯
    led_wr_set(true);
 800638c:	2001      	movs	r0, #1
 800638e:	f7ff f9f7 	bl	8005780 <led_wr_set>
    // 调用内部的_np_cmd_nand_erase函数执行擦除命令
    ret = _np_cmd_nand_erase(prog);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fe1a 	bl	8005fcc <_np_cmd_nand_erase>
 8006398:	60f8      	str	r0, [r7, #12]
    // 关闭写入指示灯
    led_wr_set(false);
 800639a:	2000      	movs	r0, #0
 800639c:	f7ff f9f0 	bl	8005780 <led_wr_set>

    return ret;
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <np_send_write_ack>:

// 发送写入确认的函数
static int np_send_write_ack(uint64_t bytes_ack)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	e9c7 0100 	strd	r0, r1, [r7]
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_WRITE_ACK };
 80063b6:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <np_send_write_ack+0x48>)
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	82bb      	strh	r3, [r7, #20]
    np_resp_write_ack_t write_ack = { resp_header, bytes_ack };
 80063bc:	8abb      	ldrh	r3, [r7, #20]
 80063be:	813b      	strh	r3, [r7, #8]
 80063c0:	f107 0308 	add.w	r3, r7, #8
 80063c4:	3302      	adds	r3, #2
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	605a      	str	r2, [r3, #4]

    // 发送写入确认响应
    if (np_comm_cb->send((uint8_t *)&write_ack, sizeof(write_ack)))
 80063ce:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <np_send_write_ack+0x4c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f107 0208 	add.w	r2, r7, #8
 80063d8:	210a      	movs	r1, #10
 80063da:	4610      	mov	r0, r2
 80063dc:	4798      	blx	r3
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <np_send_write_ack+0x3e>
        return -1;
 80063e4:	f04f 33ff 	mov.w	r3, #4294967295
 80063e8:	e000      	b.n	80063ec <np_send_write_ack+0x40>

    return 0;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	080142bc 	.word	0x080142bc
 80063f8:	20000cb8 	.word	0x20000cb8

080063fc <np_cmd_nand_write_start>:

// 执行NAND写入开始命令的函数
static int np_cmd_nand_write_start(np_prog_t *prog)
{
 80063fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006400:	b09a      	sub	sp, #104	; 0x68
 8006402:	af04      	add	r7, sp, #16
 8006404:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint64_t addr, len;
    uint32_t pages, pages_in_block;
    np_write_start_cmd_t *write_start_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b11      	cmp	r3, #17
 800640c:	d808      	bhi.n	8006420 <np_cmd_nand_write_start+0x24>
    {
        ERROR_PRINT("写入开始命令的缓冲区长度错误：%lu\r\n",
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	4619      	mov	r1, r3
 8006414:	489d      	ldr	r0, [pc, #628]	; (800668c <np_cmd_nand_write_start+0x290>)
 8006416:	f00c fd7f 	bl	8012f18 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 800641a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800641e:	e184      	b.n	800672a <np_cmd_nand_write_start+0x32e>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	657b      	str	r3, [r7, #84]	; 0x54

    // 如果硬件支持硬件ECC，启用硬件ECC
    if (hal[prog->hal]->enable_hw_ecc)
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800642c:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8006430:	461a      	mov	r2, r3
 8006432:	4b97      	ldr	r3, [pc, #604]	; (8006690 <np_cmd_nand_write_start+0x294>)
 8006434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	2b00      	cmp	r3, #0
 800643c:	d015      	beq.n	800646a <np_cmd_nand_write_start+0x6e>
        hal[prog->hal]->enable_hw_ecc(write_start_cmd->flags.enable_hw_ecc);
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006444:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8006448:	461a      	mov	r2, r3
 800644a:	4b91      	ldr	r3, [pc, #580]	; (8006690 <np_cmd_nand_write_start+0x294>)
 800644c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006454:	7c5b      	ldrb	r3, [r3, #17]
 8006456:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	bf14      	ite	ne
 8006460:	2301      	movne	r3, #1
 8006462:	2300      	moveq	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	4618      	mov	r0, r3
 8006468:	4790      	blx	r2

    addr = write_start_cmd->addr;
 800646a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800646c:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8006470:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8006474:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    len = write_start_cmd->len;
 8006478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800647a:	f8d1 2009 	ldr.w	r2, [r1, #9]
 800647e:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8006482:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    DEBUG_PRINT("写入地址：0x%" PRIx64 "，长度：0x%" PRIx64 "字节\r\n",
 8006486:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800648a:	e9cd 2300 	strd	r2, r3, [sp]
 800648e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006492:	4880      	ldr	r0, [pc, #512]	; (8006694 <np_cmd_nand_write_start+0x298>)
 8006494:	f00c fd40 	bl	8012f18 <iprintf>
        addr, len);

    if (write_start_cmd->flags.inc_spare)
 8006498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800649a:	7c5b      	ldrb	r3, [r3, #17]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d051      	beq.n	800654a <np_cmd_nand_write_start+0x14e>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80064ac:	3330      	adds	r3, #48	; 0x30
 80064ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064b8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80064bc:	2200      	movs	r2, #0
 80064be:	623b      	str	r3, [r7, #32]
 80064c0:	627a      	str	r2, [r7, #36]	; 0x24
 80064c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064c6:	f7fd fed3 	bl	8004270 <__aeabi_uldivmod>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4613      	mov	r3, r2
 80064d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        pages_in_block = prog->chip_info.block_size /
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064d8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064e2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 80064e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ea:	63bb      	str	r3, [r7, #56]	; 0x38
        prog->page_size = prog->chip_info.page_size +
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064f2:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
            prog->chip_info.spare_size;
 80064f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064fc:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
        prog->page_size = prog->chip_info.page_size +
 8006500:	441a      	add	r2, r3
 8006502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006504:	621a      	str	r2, [r3, #32]
        prog->block_size = pages_in_block * prog->page_size;
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	6a1a      	ldr	r2, [r3, #32]
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	fb03 f202 	mul.w	r2, r3, r2
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = (uint64_t)pages * prog->page_size;
 8006514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006516:	2200      	movs	r2, #0
 8006518:	469a      	mov	sl, r3
 800651a:	4693      	mov	fp, r2
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	2200      	movs	r2, #0
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	61fa      	str	r2, [r7, #28]
 8006526:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800652a:	4603      	mov	r3, r0
 800652c:	fb03 f20b 	mul.w	r2, r3, fp
 8006530:	460b      	mov	r3, r1
 8006532:	fb0a f303 	mul.w	r3, sl, r3
 8006536:	4413      	add	r3, r2
 8006538:	4602      	mov	r2, r0
 800653a:	fbaa 4502 	umull	r4, r5, sl, r2
 800653e:	442b      	add	r3, r5
 8006540:	461d      	mov	r5, r3
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 8006548:	e016      	b.n	8006578 <np_cmd_nand_write_start+0x17c>
    }
    else
    {
        prog->page_size = prog->chip_info.page_size;
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006550:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	621a      	str	r2, [r3, #32]
        prog->block_size = prog->chip_info.block_size;
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800655e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = prog->chip_info.total_size;
 8006566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006568:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800656c:	3330      	adds	r3, #48	; 0x30
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006574:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }

    // 检查写入地址是否超出芯片大小
    if (addr + len > prog->total_size)
 8006578:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800657c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006580:	eb10 0802 	adds.w	r8, r0, r2
 8006584:	eb41 0903 	adc.w	r9, r1, r3
 8006588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800658e:	4542      	cmp	r2, r8
 8006590:	eb73 0309 	sbcs.w	r3, r3, r9
 8006594:	d210      	bcs.n	80065b8 <np_cmd_nand_write_start+0x1bc>
    {
        ERROR_PRINT("写入地址0x%" PRIx64 "+0x%" PRIx64
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006598:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800659c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065a4:	e9cd 2300 	strd	r2, r3, [sp]
 80065a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065ac:	483a      	ldr	r0, [pc, #232]	; (8006698 <np_cmd_nand_write_start+0x29c>)
 80065ae:	f00c fcb3 	bl	8012f18 <iprintf>
            "超出芯片大小0x%" PRIx64 "\r\n", addr, len,
            prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 80065b2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80065b6:	e0b8      	b.n	800672a <np_cmd_nand_write_start+0x32e>
    }

    // 检查地址是否对齐到页大小
    if (addr % prog->page_size)
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	2200      	movs	r2, #0
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	617a      	str	r2, [r7, #20]
 80065c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80065c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80065ca:	f7fd fe51 	bl	8004270 <__aeabi_uldivmod>
 80065ce:	4313      	orrs	r3, r2
 80065d0:	d00a      	beq.n	80065e8 <np_cmd_nand_write_start+0x1ec>
    {
        ERROR_PRINT("地址0x%" PRIx64 "未对齐到页大小0x%lx\r\n", addr, prog->page_size);
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065dc:	482f      	ldr	r0, [pc, #188]	; (800669c <np_cmd_nand_write_start+0x2a0>)
 80065de:	f00c fc9b 	bl	8012f18 <iprintf>
        return NP_ERR_ADDR_NOT_ALIGN;
 80065e2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80065e6:	e0a0      	b.n	800672a <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否为零
    if (!len)
 80065e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065ec:	4313      	orrs	r3, r2
 80065ee:	d105      	bne.n	80065fc <np_cmd_nand_write_start+0x200>
    {
        ERROR_PRINT("长度为零\r\n");
 80065f0:	482b      	ldr	r0, [pc, #172]	; (80066a0 <np_cmd_nand_write_start+0x2a4>)
 80065f2:	f00c fcf7 	bl	8012fe4 <puts>
        return NP_ERR_LEN_INVALID;
 80065f6:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80065fa:	e096      	b.n	800672a <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否对齐到页大小
    if (len % prog->page_size)
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	2200      	movs	r2, #0
 8006602:	60bb      	str	r3, [r7, #8]
 8006604:	60fa      	str	r2, [r7, #12]
 8006606:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800660a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800660e:	f7fd fe2f 	bl	8004270 <__aeabi_uldivmod>
 8006612:	4313      	orrs	r3, r2
 8006614:	d00a      	beq.n	800662c <np_cmd_nand_write_start+0x230>
    {
        ERROR_PRINT("长度0x%" PRIx64 "未对齐到页大小0x%lx\r\n", len, prog->page_size);
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006620:	4820      	ldr	r0, [pc, #128]	; (80066a4 <np_cmd_nand_write_start+0x2a8>)
 8006622:	f00c fc79 	bl	8012f18 <iprintf>
        return NP_ERR_LEN_NOT_ALIGN;
 8006626:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800662a:	e07e      	b.n	800672a <np_cmd_nand_write_start+0x32e>
    }

    // 设置跳过坏块标志，并且读取坏块信息
    prog->skip_bb = write_start_cmd->flags.skip_bb;
 800662c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800662e:	7c5b      	ldrb	r3, [r3, #17]
 8006630:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006634:	b2db      	uxtb	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800663e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    if (prog->skip_bb && !prog->bb_is_read &&
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006648:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00d      	beq.n	800666c <np_cmd_nand_write_start+0x270>
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006654:	2b00      	cmp	r3, #0
 8006656:	d109      	bne.n	800666c <np_cmd_nand_write_start+0x270>
        (ret = _np_cmd_read_bad_blocks(prog, false)))
 8006658:	2100      	movs	r1, #0
 800665a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800665c:	f7ff fbca 	bl	8005df4 <_np_cmd_read_bad_blocks>
 8006660:	6378      	str	r0, [r7, #52]	; 0x34
    if (prog->skip_bb && !prog->bb_is_read &&
 8006662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <np_cmd_nand_write_start+0x270>
    {
        return ret;
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666a:	e05e      	b.n	800672a <np_cmd_nand_write_start+0x32e>
    }

    // 检查页大小是否超过缓冲区大小
    if (prog->page_size > sizeof(prog->page.buf))
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 8006674:	d91a      	bls.n	80066ac <np_cmd_nand_write_start+0x2b0>
    {
        ERROR_PRINT("页大小0x%lx超过缓冲区大小0x%x\r\n", prog->page_size, sizeof(prog->page.buf));
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	f44f 5207 	mov.w	r2, #8640	; 0x21c0
 800667e:	4619      	mov	r1, r3
 8006680:	4809      	ldr	r0, [pc, #36]	; (80066a8 <np_cmd_nand_write_start+0x2ac>)
 8006682:	f00c fc49 	bl	8012f18 <iprintf>
        return NP_ERR_BUF_OVERFLOW;
 8006686:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 800668a:	e04e      	b.n	800672a <np_cmd_nand_write_start+0x32e>
 800668c:	080142c0 	.word	0x080142c0
 8006690:	20000040 	.word	0x20000040
 8006694:	080142fc 	.word	0x080142fc
 8006698:	0801432c 	.word	0x0801432c
 800669c:	08014368 	.word	0x08014368
 80066a0:	080141d0 	.word	0x080141d0
 80066a4:	08014398 	.word	0x08014398
 80066a8:	080143c8 	.word	0x080143c8
    }

    // 设置写入相关的参数
    prog->addr = addr;
 80066ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 80066b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c2:	2201      	movs	r2, #1
 80066c4:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	2200      	movs	r2, #0
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066d4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80066d8:	f7fd fdca 	bl	8004270 <__aeabi_uldivmod>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80066e6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80066f0:	461a      	mov	r2, r3
 80066f2:	2300      	movs	r3, #0
 80066f4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80066fe:	3310      	adds	r3, #16
 8006700:	4619      	mov	r1, r3
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006714:	3310      	adds	r3, #16
 8006716:	4619      	mov	r1, r3
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	e9c1 2300 	strd	r2, r3, [r1]

    // 发送OK状态响应
    return np_send_ok_status();
 8006724:	f7ff f9ca 	bl	8005abc <np_send_ok_status>
 8006728:	4603      	mov	r3, r0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3758      	adds	r7, #88	; 0x58
 800672e:	46bd      	mov	sp, r7
 8006730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006734 <np_nand_handle_status>:

// 处理NAND状态的函数
static int np_nand_handle_status(np_prog_t *prog)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
    switch (hal[prog->hal]->read_status())
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006742:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8006746:	461a      	mov	r2, r3
 8006748:	4b37      	ldr	r3, [pc, #220]	; (8006828 <np_nand_handle_status+0xf4>)
 800674a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	4798      	blx	r3
 8006752:	4603      	mov	r3, r0
 8006754:	2b02      	cmp	r3, #2
 8006756:	d006      	beq.n	8006766 <np_nand_handle_status+0x32>
 8006758:	2b02      	cmp	r3, #2
 800675a:	d84b      	bhi.n	80067f4 <np_nand_handle_status+0xc0>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d010      	beq.n	8006782 <np_nand_handle_status+0x4e>
 8006760:	2b01      	cmp	r3, #1
 8006762:	d01d      	beq.n	80067a0 <np_nand_handle_status+0x6c>
 8006764:	e046      	b.n	80067f4 <np_nand_handle_status+0xc0>
    {
    case FLASH_STATUS_ERROR:
        // 如果状态为错误，发送坏块信息
        if (np_send_bad_block_info(prog->addr, prog->block_size, false))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006770:	2300      	movs	r3, #0
 8006772:	f7ff f9e3 	bl	8005b3c <np_send_bad_block_info>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <np_nand_handle_status+0x4e>
            return -1;
 800677c:	f04f 33ff 	mov.w	r3, #4294967295
 8006780:	e04e      	b.n	8006820 <np_nand_handle_status+0xec>
        /* 继续执行下面的代码 */
    case FLASH_STATUS_READY:
        // 如果状态为就绪，表示操作完成，将标志位和超时计数器重置
        prog->nand_wr_in_progress = 0;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006788:	461a      	mov	r2, r3
 800678a:	2300      	movs	r3, #0
 800678c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006796:	461a      	mov	r2, r3
 8006798:	2300      	movs	r3, #0
 800679a:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        break;
 800679e:	e03e      	b.n	800681e <np_nand_handle_status+0xea>
    case FLASH_STATUS_BUSY:
        // 如果状态为繁忙，增加超时计数器，并检查是否超时
        if (++prog->nand_timeout == NP_NAND_TIMEOUT)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80067a6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80067aa:	3301      	adds	r3, #1
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80067b2:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80067bc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80067c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067c4:	d12a      	bne.n	800681c <np_nand_handle_status+0xe8>
        {
            ERROR_PRINT("NAND写入超时，地址：0x%" PRIx64 "\r\n", prog->addr);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80067cc:	4817      	ldr	r0, [pc, #92]	; (800682c <np_nand_handle_status+0xf8>)
 80067ce:	f00c fba3 	bl	8012f18 <iprintf>
            prog->nand_wr_in_progress = 0;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80067d8:	461a      	mov	r2, r3
 80067da:	2300      	movs	r3, #0
 80067dc:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
            prog->nand_timeout = 0;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80067e6:	461a      	mov	r2, r3
 80067e8:	2300      	movs	r3, #0
 80067ea:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
            return -1;
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295
 80067f2:	e015      	b.n	8006820 <np_nand_handle_status+0xec>
        }
        break;
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 80067f4:	480e      	ldr	r0, [pc, #56]	; (8006830 <np_nand_handle_status+0xfc>)
 80067f6:	f00c fbf5 	bl	8012fe4 <puts>
        prog->nand_wr_in_progress = 0;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006800:	461a      	mov	r2, r3
 8006802:	2300      	movs	r3, #0
 8006804:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800680e:	461a      	mov	r2, r3
 8006810:	2300      	movs	r3, #0
 8006812:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        return -1;
 8006816:	f04f 33ff 	mov.w	r3, #4294967295
 800681a:	e001      	b.n	8006820 <np_nand_handle_status+0xec>
        break;
 800681c:	bf00      	nop
    }

    return 0;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20000040 	.word	0x20000040
 800682c:	080143fc 	.word	0x080143fc
 8006830:	08014120 	.word	0x08014120

08006834 <np_nand_write>:

// 执行NAND写入的函数
static int np_nand_write(np_prog_t *prog)
{   
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af02      	add	r7, sp, #8
 800683a:	6078      	str	r0, [r7, #4]
    // 如果上一次的NAND写入还在进行中，等待其完成
    if (prog->nand_wr_in_progress)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006842:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006846:	2b00      	cmp	r3, #0
 8006848:	d012      	beq.n	8006870 <np_nand_write+0x3c>
    {
        DEBUG_PRINT("等待上一次NAND写入完成\r\n");
 800684a:	481e      	ldr	r0, [pc, #120]	; (80068c4 <np_nand_write+0x90>)
 800684c:	f00c fbca 	bl	8012fe4 <puts>
        do
        {
            if (np_nand_handle_status(prog))
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7ff ff6f 	bl	8006734 <np_nand_handle_status>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <np_nand_write+0x2e>
                return -1;
 800685c:	f04f 33ff 	mov.w	r3, #4294967295
 8006860:	e02c      	b.n	80068bc <np_nand_write+0x88>
        }
        while (prog->nand_wr_in_progress);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006868:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1ef      	bne.n	8006850 <np_nand_write+0x1c>
    }

    DEBUG_PRINT("NAND写入，地址：0x%" PRIx64 "，长度：%lu字节\r\n", prog->addr,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	6a09      	ldr	r1, [r1, #32]
 800687a:	9100      	str	r1, [sp, #0]
 800687c:	4812      	ldr	r0, [pc, #72]	; (80068c8 <np_nand_write+0x94>)
 800687e:	f00c fb4b 	bl	8012f18 <iprintf>
        prog->page_size);

    // 调用硬件抽象层函数执行异步写入操作
    hal[prog->hal]->write_page_async(prog->page.buf, prog->page.page,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006888:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 800688c:	461a      	mov	r2, r3
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <np_nand_write+0x98>)
 8006890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	f102 003c 	add.w	r0, r2, #60	; 0x3c
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80068a2:	f8d2 11fc 	ldr.w	r1, [r2, #508]	; 0x1fc
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6a12      	ldr	r2, [r2, #32]
 80068aa:	4798      	blx	r3
        prog->page_size);

    prog->nand_wr_in_progress = 1;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068b2:	461a      	mov	r2, r3
 80068b4:	2301      	movs	r3, #1
 80068b6:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

    return 0;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	08014428 	.word	0x08014428
 80068c8:	0801444c 	.word	0x0801444c
 80068cc:	20000040 	.word	0x20000040

080068d0 <np_cmd_nand_write_data>:

// 执行NAND写入数据命令的函数
static int np_cmd_nand_write_data(np_prog_t *prog)
{
 80068d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068d4:	b092      	sub	sp, #72	; 0x48
 80068d6:	af02      	add	r7, sp, #8
 80068d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint32_t write_len, bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d808      	bhi.n	80068f4 <np_cmd_nand_write_data+0x24>
    {
        ERROR_PRINT("写入数据命令的缓冲区长度错误：%lu\r\n",
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	4619      	mov	r1, r3
 80068e8:	486e      	ldr	r0, [pc, #440]	; (8006aa4 <np_cmd_nand_write_data+0x1d4>)
 80068ea:	f00c fb15 	bl	8012f18 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80068ee:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80068f2:	e1a1      	b.n	8006c38 <np_cmd_nand_write_data+0x368>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	63bb      	str	r3, [r7, #56]	; 0x38
    len = write_data_cmd->len;
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	785b      	ldrb	r3, [r3, #1]
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 8006900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006902:	3302      	adds	r3, #2
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d906      	bls.n	8006916 <np_cmd_nand_write_data+0x46>
    {
        ERROR_PRINT("数据大小错误：0x%lx\r\n", len);
 8006908:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800690a:	4867      	ldr	r0, [pc, #412]	; (8006aa8 <np_cmd_nand_write_data+0x1d8>)
 800690c:	f00c fb04 	bl	8012f18 <iprintf>
        return NP_ERR_CMD_DATA_SIZE;
 8006910:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8006914:	e190      	b.n	8006c38 <np_cmd_nand_write_data+0x368>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	1c9a      	adds	r2, r3, #2
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	429a      	cmp	r2, r3
 8006920:	d00a      	beq.n	8006938 <np_cmd_nand_write_data+0x68>
    {
        ERROR_PRINT("缓冲区长度0x%lx大于命令长度0x%lx\r\n",
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	6859      	ldr	r1, [r3, #4]
 8006926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006928:	3302      	adds	r3, #2
 800692a:	461a      	mov	r2, r3
 800692c:	485f      	ldr	r0, [pc, #380]	; (8006aac <np_cmd_nand_write_data+0x1dc>)
 800692e:	f00c faf3 	bl	8012f18 <iprintf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 8006932:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8006936:	e17f      	b.n	8006c38 <np_cmd_nand_write_data+0x368>
    }

    // 检查写入地址是否已设置
    if (!prog->addr_is_set)
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693c:	2b00      	cmp	r3, #0
 800693e:	d105      	bne.n	800694c <np_cmd_nand_write_data+0x7c>
    {
        ERROR_PRINT("写入地址未设置\r\n");
 8006940:	485b      	ldr	r0, [pc, #364]	; (8006ab0 <np_cmd_nand_write_data+0x1e0>)
 8006942:	f00c fb4f 	bl	8012fe4 <puts>
        return NP_ERR_ADDR_INVALID;
 8006946:	f06f 0364 	mvn.w	r3, #100	; 0x64
 800694a:	e175      	b.n	8006c38 <np_cmd_nand_write_data+0x368>
    }

    // 计算本次写入的长度
    if (prog->page.offset + len > prog->page_size)
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006952:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006958:	441a      	add	r2, r3
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	429a      	cmp	r2, r3
 8006960:	d909      	bls.n	8006976 <np_cmd_nand_write_data+0xa6>
        write_len = prog->page_size - prog->page.offset;
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	6a1a      	ldr	r2, [r3, #32]
 8006966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006968:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800696c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006974:	e001      	b.n	800697a <np_cmd_nand_write_data+0xaa>
    else
        write_len = len;
 8006976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006978:	63fb      	str	r3, [r7, #60]	; 0x3c

    // 将数据拷贝到页缓冲区
    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006986:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800698a:	18d0      	adds	r0, r2, r3
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	3302      	adds	r3, #2
 8006990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006992:	4619      	mov	r1, r3
 8006994:	f00c fc81 	bl	801329a <memcpy>
    prog->page.offset += write_len;
 8006998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800699e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80069a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a4:	441a      	add	r2, r3
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    // 如果页缓冲区已满，进行页写入操作
    if (prog->page.offset == prog->page_size)
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	429a      	cmp	r2, r3
 80069c0:	f040 80a2 	bne.w	8006b08 <np_cmd_nand_write_data+0x238>
    {
        // 如果启用了跳过坏块，并且当前页是坏块，跳过该坏块
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 80069c4:	e038      	b.n	8006a38 <np_cmd_nand_write_data+0x168>
        {
            DEBUG_PRINT("跳过坏块，地址：0x%" PRIx64 "\r\n", prog->addr);
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80069cc:	4839      	ldr	r0, [pc, #228]	; (8006ab4 <np_cmd_nand_write_data+0x1e4>)
 80069ce:	f00c faa3 	bl	8012f18 <iprintf>
            if (np_send_bad_block_info(prog->addr, prog->block_size, true))
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069dc:	2301      	movs	r3, #1
 80069de:	f7ff f8ad 	bl	8005b3c <np_send_bad_block_info>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <np_cmd_nand_write_data+0x11e>
                return -1;
 80069e8:	f04f 33ff 	mov.w	r3, #4294967295
 80069ec:	e124      	b.n	8006c38 <np_cmd_nand_write_data+0x368>

            prog->addr += prog->block_size;
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80069f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	2200      	movs	r2, #0
 80069fa:	623b      	str	r3, [r7, #32]
 80069fc:	627a      	str	r2, [r7, #36]	; 0x24
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	18c3      	adds	r3, r0, r3
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	eb41 0303 	adc.w	r3, r1, r3
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a12:	e9c3 1202 	strd	r1, r2, [r3, #8]
            prog->page.page += prog->block_size / prog->page_size;
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a1c:	f8d3 11fc 	ldr.w	r1, [r3, #508]	; 0x1fc
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2c:	18ca      	adds	r2, r1, r3
 8006a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a34:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <np_cmd_nand_write_data+0x18c>
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a4c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fe ffcb 	bl	80059ec <nand_bad_block_table_lookup>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1b4      	bne.n	80069c6 <np_cmd_nand_write_data+0xf6>
        }

        // 检查写入地址是否超过芯片大小
        if (prog->addr >= prog->total_size)
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006a68:	4290      	cmp	r0, r2
 8006a6a:	eb71 0303 	sbcs.w	r3, r1, r3
 8006a6e:	d30f      	bcc.n	8006a90 <np_cmd_nand_write_data+0x1c0>
        {
            ERROR_PRINT("写入地址0x%" PRIx64 "超过芯片大小0x%" PRIx64 "\r\n", prog->addr,
 8006a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a72:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006a7c:	e9cd 2300 	strd	r2, r3, [sp]
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	480c      	ldr	r0, [pc, #48]	; (8006ab8 <np_cmd_nand_write_data+0x1e8>)
 8006a86:	f00c fa47 	bl	8012f18 <iprintf>
                prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8006a8a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006a8e:	e0d3      	b.n	8006c38 <np_cmd_nand_write_data+0x368>
        }

        // 执行NAND写入操作
        if (np_nand_write(prog))
 8006a90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a92:	f7ff fecf 	bl	8006834 <np_nand_write>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00f      	beq.n	8006abc <np_cmd_nand_write_data+0x1ec>
            return NP_ERR_NAND_WR;
 8006a9c:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8006aa0:	e0ca      	b.n	8006c38 <np_cmd_nand_write_data+0x368>
 8006aa2:	bf00      	nop
 8006aa4:	08014480 	.word	0x08014480
 8006aa8:	080144bc 	.word	0x080144bc
 8006aac:	080144e0 	.word	0x080144e0
 8006ab0:	08014518 	.word	0x08014518
 8006ab4:	08014298 	.word	0x08014298
 8006ab8:	08014538 	.word	0x08014538

        // 更新地址和页偏移
        prog->addr += prog->page_size;
 8006abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	61bb      	str	r3, [r7, #24]
 8006aca:	61fa      	str	r2, [r7, #28]
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	18c3      	adds	r3, r0, r3
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	eb41 0303 	adc.w	r3, r1, r3
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006adc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ae0:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006aea:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8006aee:	3301      	adds	r3, #1
 8006af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006af6:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8006afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b00:	461a      	mov	r2, r3
 8006b02:	2300      	movs	r3, #0
 8006b04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    // 处理剩余的数据
    bytes_left = len - write_len;
 8006b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	633b      	str	r3, [r7, #48]	; 0x30
    if (bytes_left)
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d016      	beq.n	8006b44 <np_cmd_nand_write_data+0x274>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	1c9a      	adds	r2, r3, #2
 8006b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b22:	4413      	add	r3, r2
 8006b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b26:	4619      	mov	r1, r3
 8006b28:	f00c fbb7 	bl	801329a <memcpy>
        prog->page.offset += bytes_left;
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b32:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	4413      	add	r3, r2
 8006b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b3c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006b40:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    // 更新已写入和已确认的字节数
    prog->bytes_written += len;
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006b4a:	3310      	adds	r3, #16
 8006b4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b52:	2000      	movs	r0, #0
 8006b54:	468a      	mov	sl, r1
 8006b56:	4683      	mov	fp, r0
 8006b58:	eb12 010a 	adds.w	r1, r2, sl
 8006b5c:	6039      	str	r1, [r7, #0]
 8006b5e:	eb43 030b 	adc.w	r3, r3, fp
 8006b62:	607b      	str	r3, [r7, #4]
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006b6a:	3310      	adds	r3, #16
 8006b6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b70:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006b7a:	3310      	adds	r3, #16
 8006b7c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b82:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006b86:	3310      	adds	r3, #16
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	1a84      	subs	r4, r0, r2
 8006b8e:	eb61 0503 	sbc.w	r5, r1, r3
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	2200      	movs	r2, #0
 8006b98:	4698      	mov	r8, r3
 8006b9a:	4691      	mov	r9, r2
 8006b9c:	4544      	cmp	r4, r8
 8006b9e:	eb75 0309 	sbcs.w	r3, r5, r9
 8006ba2:	d20c      	bcs.n	8006bbe <np_cmd_nand_write_data+0x2ee>
        prog->bytes_written == prog->len)
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006baa:	3310      	adds	r3, #16
 8006bac:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8006bb6:	4299      	cmp	r1, r3
 8006bb8:	bf08      	it	eq
 8006bba:	4290      	cmpeq	r0, r2
 8006bbc:	d11b      	bne.n	8006bf6 <np_cmd_nand_write_data+0x326>
    {
        // 发送写入确认响应
        if (np_send_write_ack(prog->bytes_written))
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006bc4:	3310      	adds	r3, #16
 8006bc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bca:	4610      	mov	r0, r2
 8006bcc:	4619      	mov	r1, r3
 8006bce:	f7ff fbed 	bl	80063ac <np_send_write_ack>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <np_cmd_nand_write_data+0x30e>
            return -1;
 8006bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bdc:	e02c      	b.n	8006c38 <np_cmd_nand_write_data+0x368>
        prog->bytes_ack = prog->bytes_written;
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006be4:	3310      	adds	r3, #16
 8006be6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006bf0:	3310      	adds	r3, #16
 8006bf2:	e9c3 0100 	strd	r0, r1, [r3]
    }

    // 检查实际写入的数据长度是否超过指定的长度
    if (prog->bytes_written > prog->len)
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006bfc:	3310      	adds	r3, #16
 8006bfe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c04:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8006c08:	4290      	cmp	r0, r2
 8006c0a:	eb71 0303 	sbcs.w	r3, r1, r3
 8006c0e:	d212      	bcs.n	8006c36 <np_cmd_nand_write_data+0x366>
    {
        ERROR_PRINT("实际写入数据长度0x%" PRIx64 "超过0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
 8006c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c12:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006c16:	3310      	adds	r3, #16
 8006c18:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006c22:	e9cd 2300 	strd	r2, r3, [sp]
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4806      	ldr	r0, [pc, #24]	; (8006c44 <np_cmd_nand_write_data+0x374>)
 8006c2c:	f00c f974 	bl	8012f18 <iprintf>
        return NP_ERR_LEN_EXCEEDED;
 8006c30:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8006c34:	e000      	b.n	8006c38 <np_cmd_nand_write_data+0x368>
    }

    return 0;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3740      	adds	r7, #64	; 0x40
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c42:	bf00      	nop
 8006c44:	0801456c 	.word	0x0801456c

08006c48 <np_cmd_nand_write_end>:

// 结束NAND写入命令的函数
static int np_cmd_nand_write_end(np_prog_t *prog)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
    // 清除地址已设置的标志位
    prog->addr_is_set = 0;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	631a      	str	r2, [r3, #48]	; 0x30

    // 检查是否有未写入的数据
    if (prog->page.offset)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006c5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00b      	beq.n	8006c7c <np_cmd_nand_write_end+0x34>
    {
        ERROR_PRINT("未写入长度为0x%lx的数据\r\n",
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006c6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4806      	ldr	r0, [pc, #24]	; (8006c8c <np_cmd_nand_write_end+0x44>)
 8006c72:	f00c f951 	bl	8012f18 <iprintf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8006c76:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8006c7a:	e002      	b.n	8006c82 <np_cmd_nand_write_end+0x3a>
    }

    // 发送操作完成的响应
    return np_send_ok_status();
 8006c7c:	f7fe ff1e 	bl	8005abc <np_send_ok_status>
 8006c80:	4603      	mov	r3, r0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	080145a0 	.word	0x080145a0

08006c90 <np_cmd_nand_write>:

// 执行NAND写入命令的函数
static int np_cmd_nand_write(np_prog_t *prog)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60fb      	str	r3, [r7, #12]

    // 根据命令类型执行相应的操作
    switch (cmd->code)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b05      	cmp	r3, #5
 8006ca8:	d013      	beq.n	8006cd2 <np_cmd_nand_write+0x42>
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	dc19      	bgt.n	8006ce2 <np_cmd_nand_write+0x52>
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d002      	beq.n	8006cb8 <np_cmd_nand_write+0x28>
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d008      	beq.n	8006cc8 <np_cmd_nand_write+0x38>
    case NP_CMD_NAND_WRITE_E:
        ret = np_cmd_nand_write_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8006cb6:	e014      	b.n	8006ce2 <np_cmd_nand_write+0x52>
        led_wr_set(true);
 8006cb8:	2001      	movs	r0, #1
 8006cba:	f7fe fd61 	bl	8005780 <led_wr_set>
        ret = np_cmd_nand_write_start(prog);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fb9c 	bl	80063fc <np_cmd_nand_write_start>
 8006cc4:	60f8      	str	r0, [r7, #12]
        break;
 8006cc6:	e00d      	b.n	8006ce4 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_data(prog);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff fe01 	bl	80068d0 <np_cmd_nand_write_data>
 8006cce:	60f8      	str	r0, [r7, #12]
        break;
 8006cd0:	e008      	b.n	8006ce4 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_end(prog);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff ffb8 	bl	8006c48 <np_cmd_nand_write_end>
 8006cd8:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8006cda:	2000      	movs	r0, #0
 8006cdc:	f7fe fd50 	bl	8005780 <led_wr_set>
        break;
 8006ce0:	e000      	b.n	8006ce4 <np_cmd_nand_write+0x54>
        break;
 8006ce2:	bf00      	nop
    }

    // 如果操作失败，关闭写入指示灯
    if (ret < 0)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	da02      	bge.n	8006cf0 <np_cmd_nand_write+0x60>
        led_wr_set(false);
 8006cea:	2000      	movs	r0, #0
 8006cec:	f7fe fd48 	bl	8005780 <led_wr_set>

    return ret;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <np_nand_read>:

// 执行NAND读取操作的函数
static int np_nand_read(uint64_t addr, np_page_t *page, uint32_t page_size,
    uint32_t block_size, np_prog_t *prog)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]
    uint32_t status;

    // 调用硬件抽象层函数执行页面读取操作
    status = hal[prog->hal]->read_page(page->buf, page->page, page_size);
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d10:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8006d14:	461a      	mov	r2, r3
 8006d16:	4b1c      	ldr	r3, [pc, #112]	; (8006d88 <np_nand_read+0x8c>)
 8006d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006d26:	f8d2 11c0 	ldr.w	r1, [r2, #448]	; 0x1c0
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	4798      	blx	r3
 8006d2e:	6178      	str	r0, [r7, #20]
    switch (status)
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d014      	beq.n	8006d60 <np_nand_read+0x64>
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d817      	bhi.n	8006d6c <np_nand_read+0x70>
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01a      	beq.n	8006d78 <np_nand_read+0x7c>
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d111      	bne.n	8006d6c <np_nand_read+0x70>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果读取状态为错误，发送坏块信息
        if (np_send_bad_block_info(addr, block_size, false))
 8006d48:	2300      	movs	r3, #0
 8006d4a:	6a3a      	ldr	r2, [r7, #32]
 8006d4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d50:	f7fe fef4 	bl	8005b3c <np_send_bad_block_info>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d010      	beq.n	8006d7c <np_nand_read+0x80>
            return -1;
 8006d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5e:	e00f      	b.n	8006d80 <np_nand_read+0x84>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND读取超时，地址：0x%" PRIx64 "\r\n", addr);
 8006d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d64:	4809      	ldr	r0, [pc, #36]	; (8006d8c <np_nand_read+0x90>)
 8006d66:	f00c f8d7 	bl	8012f18 <iprintf>
        break;
 8006d6a:	e008      	b.n	8006d7e <np_nand_read+0x82>
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 8006d6c:	4808      	ldr	r0, [pc, #32]	; (8006d90 <np_nand_read+0x94>)
 8006d6e:	f00c f939 	bl	8012fe4 <puts>
        return -1;
 8006d72:	f04f 33ff 	mov.w	r3, #4294967295
 8006d76:	e003      	b.n	8006d80 <np_nand_read+0x84>
        break;
 8006d78:	bf00      	nop
 8006d7a:	e000      	b.n	8006d7e <np_nand_read+0x82>
        break;
 8006d7c:	bf00      	nop
    }

    return 0;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20000040 	.word	0x20000040
 8006d8c:	080145cc 	.word	0x080145cc
 8006d90:	08014120 	.word	0x08014120

08006d94 <_np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int _np_cmd_nand_read(np_prog_t *prog)
{
 8006d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d98:	b0b4      	sub	sp, #208	; 0xd0
 8006d9a:	af04      	add	r7, sp, #16
 8006d9c:	6778      	str	r0, [r7, #116]	; 0x74
    np_read_cmd_t *read_cmd;
    bool skip_bb, inc_spare;
    uint64_t addr, len, total_size;
    uint32_t send_len, block_size, page_size, pages,
        pages_in_block;
    uint32_t resp_header_size = offsetof(np_resp_t, data);
 8006d9e:	2302      	movs	r3, #2
 8006da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t tx_data_len = sizeof(np_packet_send_buf) - resp_header_size;
 8006da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006da8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006dac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    np_resp_t *resp = (np_resp_t *)np_packet_send_buf;
 8006db0:	4bb9      	ldr	r3, [pc, #740]	; (8007098 <_np_cmd_nand_read+0x304>)
 8006db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_read_cmd_t))
 8006db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b11      	cmp	r3, #17
 8006dbc:	d808      	bhi.n	8006dd0 <_np_cmd_nand_read+0x3c>
    {
        ERROR_PRINT("读取命令缓冲区长度错误 %lu\r\n",
 8006dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	48b5      	ldr	r0, [pc, #724]	; (800709c <_np_cmd_nand_read+0x308>)
 8006dc6:	f00c f8a7 	bl	8012f18 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8006dca:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8006dce:	e283      	b.n	80072d8 <_np_cmd_nand_read+0x544>
    }

    read_cmd = (np_read_cmd_t *)prog->rx_buf;
 8006dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    addr = read_cmd->addr;
 8006dd8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006ddc:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8006de0:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8006de4:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
    len = read_cmd->len;
 8006de8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006dec:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8006df0:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8006df4:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    skip_bb = read_cmd->flags.skip_bb;
 8006df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dfc:	7c5b      	ldrb	r3, [r3, #17]
 8006dfe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	bf14      	ite	ne
 8006e08:	2301      	movne	r3, #1
 8006e0a:	2300      	moveq	r3, #0
 8006e0c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    inc_spare = read_cmd->flags.inc_spare;
 8006e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e14:	7c5b      	ldrb	r3, [r3, #17]
 8006e16:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bf14      	ite	ne
 8006e20:	2301      	movne	r3, #1
 8006e22:	2300      	moveq	r3, #0
 8006e24:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    DEBUG_PRINT("读取地址 0x%" PRIx64 " 长度为 0x%" PRIx64 " 的数据命令\r\n", addr,
 8006e28:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006e2c:	e9cd 2300 	strd	r2, r3, [sp]
 8006e30:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006e34:	489a      	ldr	r0, [pc, #616]	; (80070a0 <_np_cmd_nand_read+0x30c>)
 8006e36:	f00c f86f 	bl	8012f18 <iprintf>
        len);

    if (inc_spare)
 8006e3a:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d056      	beq.n	8006ef0 <_np_cmd_nand_read+0x15c>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8006e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e44:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006e48:	3330      	adds	r3, #48	; 0x30
 8006e4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e54:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006e58:	2200      	movs	r2, #0
 8006e5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e5e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006e62:	f7fd fa05 	bl	8004270 <__aeabi_uldivmod>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        pages_in_block = prog->chip_info.block_size /
 8006e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e76:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 8006e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e7c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e80:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 8006e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8006e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e92:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8006e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e9c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = pages_in_block * page_size;
 8006ea6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006eaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006eae:	fb02 f303 	mul.w	r3, r2, r3
 8006eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = (uint64_t)pages * page_size;
 8006eb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006eba:	2200      	movs	r2, #0
 8006ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ebe:	667a      	str	r2, [r7, #100]	; 0x64
 8006ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	4698      	mov	r8, r3
 8006ec8:	4691      	mov	r9, r2
 8006eca:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006ece:	460b      	mov	r3, r1
 8006ed0:	fb08 f203 	mul.w	r2, r8, r3
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	fb03 f309 	mul.w	r3, r3, r9
 8006eda:	4413      	add	r3, r2
 8006edc:	4602      	mov	r2, r0
 8006ede:	fba2 4508 	umull	r4, r5, r2, r8
 8006ee2:	442b      	add	r3, r5
 8006ee4:	461d      	mov	r5, r3
 8006ee6:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 8006eea:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 8006eee:	e015      	b.n	8006f1c <_np_cmd_nand_read+0x188>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8006ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ef2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006ef6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = prog->chip_info.block_size;
 8006efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f04:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006f08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = prog->chip_info.total_size;
 8006f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f0e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006f12:	3330      	adds	r3, #48	; 0x30
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
    }

    if (addr + len > total_size)
 8006f1c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006f20:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006f24:	eb10 0a02 	adds.w	sl, r0, r2
 8006f28:	eb41 0b03 	adc.w	fp, r1, r3
 8006f2c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006f30:	4552      	cmp	r2, sl
 8006f32:	eb73 030b 	sbcs.w	r3, r3, fp
 8006f36:	d20f      	bcs.n	8006f58 <_np_cmd_nand_read+0x1c4>
    {
        ERROR_PRINT("读取地址 0x%" PRIx64 "+0x%" PRIx64
 8006f38:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f40:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006f44:	e9cd 2300 	strd	r2, r3, [sp]
 8006f48:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f4c:	4855      	ldr	r0, [pc, #340]	; (80070a4 <_np_cmd_nand_read+0x310>)
 8006f4e:	f00b ffe3 	bl	8012f18 <iprintf>
            " 超出芯片大小 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8006f52:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006f56:	e1bf      	b.n	80072d8 <_np_cmd_nand_read+0x544>
    }

    if (addr % page_size)
 8006f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f60:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006f62:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f6a:	f7fd f981 	bl	8004270 <__aeabi_uldivmod>
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	d00a      	beq.n	8006f88 <_np_cmd_nand_read+0x1f4>
    {
        ERROR_PRINT("读取地址 0x%" PRIx64
 8006f72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f7c:	484a      	ldr	r0, [pc, #296]	; (80070a8 <_np_cmd_nand_read+0x314>)
 8006f7e:	f00b ffcb 	bl	8012f18 <iprintf>
            " 不对齐于页面大小 0x%lx\r\n", addr, page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8006f82:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006f86:	e1a7      	b.n	80072d8 <_np_cmd_nand_read+0x544>
    }

    if (!len)
 8006f88:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	d105      	bne.n	8006f9c <_np_cmd_nand_read+0x208>
    {
        ERROR_PRINT("长度为0\r\n");
 8006f90:	4846      	ldr	r0, [pc, #280]	; (80070ac <_np_cmd_nand_read+0x318>)
 8006f92:	f00c f827 	bl	8012fe4 <puts>
        return NP_ERR_LEN_INVALID;
 8006f96:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8006f9a:	e19d      	b.n	80072d8 <_np_cmd_nand_read+0x544>
    }

    if (len % page_size)
 8006f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8006fa4:	657a      	str	r2, [r7, #84]	; 0x54
 8006fa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006faa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006fae:	f7fd f95f 	bl	8004270 <__aeabi_uldivmod>
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	d00a      	beq.n	8006fcc <_np_cmd_nand_read+0x238>
    {
        ERROR_PRINT("读取长度 0x%" PRIx64
 8006fb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006fc0:	483b      	ldr	r0, [pc, #236]	; (80070b0 <_np_cmd_nand_read+0x31c>)
 8006fc2:	f00b ffa9 	bl	8012f18 <iprintf>
            " 不对齐于页面大小 0x%lx\r\n", len, page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8006fc6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8006fca:	e185      	b.n	80072d8 <_np_cmd_nand_read+0x544>
    }

    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 8006fcc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00d      	beq.n	8006ff0 <_np_cmd_nand_read+0x25c>
 8006fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d109      	bne.n	8006ff0 <_np_cmd_nand_read+0x25c>
 8006fdc:	2100      	movs	r1, #0
 8006fde:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006fe0:	f7fe ff08 	bl	8005df4 <_np_cmd_read_bad_blocks>
 8006fe4:	67f8      	str	r0, [r7, #124]	; 0x7c
 8006fe6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <_np_cmd_nand_read+0x25c>
        false)))
    {
        return ret;
 8006fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fee:	e173      	b.n	80072d8 <_np_cmd_nand_read+0x544>
    }

    page.page = addr / page_size;
 8006ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ff8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006ffa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ffe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007002:	f7fd f935 	bl	8004270 <__aeabi_uldivmod>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4b2a      	ldr	r3, [pc, #168]	; (80070b4 <_np_cmd_nand_read+0x320>)
 800700c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007010:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    page.offset = 0;
 8007014:	4b27      	ldr	r3, [pc, #156]	; (80070b4 <_np_cmd_nand_read+0x320>)
 8007016:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800701a:	461a      	mov	r2, r3
 800701c:	2300      	movs	r3, #0
 800701e:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4

    resp->code = NP_RESP_DATA;
 8007022:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007026:	2300      	movs	r3, #0
 8007028:	7013      	strb	r3, [r2, #0]

    while (len)
 800702a:	e14f      	b.n	80072cc <_np_cmd_nand_read+0x538>
    {
        if (addr >= total_size)
 800702c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007030:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007034:	4290      	cmp	r0, r2
 8007036:	eb71 0303 	sbcs.w	r3, r1, r3
 800703a:	d30b      	bcc.n	8007054 <_np_cmd_nand_read+0x2c0>
        {
            ERROR_PRINT("读取地址 0x%" PRIx64
 800703c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007040:	e9cd 2300 	strd	r2, r3, [sp]
 8007044:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007048:	481b      	ldr	r0, [pc, #108]	; (80070b8 <_np_cmd_nand_read+0x324>)
 800704a:	f00b ff65 	bl	8012f18 <iprintf>
                " 超出芯片大小 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 800704e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007052:	e141      	b.n	80072d8 <_np_cmd_nand_read+0x544>
        }

        if (skip_bb && nand_bad_block_table_lookup(page.page))
 8007054:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8007058:	2b00      	cmp	r3, #0
 800705a:	d076      	beq.n	800714a <_np_cmd_nand_read+0x3b6>
 800705c:	4b15      	ldr	r3, [pc, #84]	; (80070b4 <_np_cmd_nand_read+0x320>)
 800705e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007062:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fcc0 	bl	80059ec <nand_bad_block_table_lookup>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d06b      	beq.n	800714a <_np_cmd_nand_read+0x3b6>
        {
            DEBUG_PRINT("跳过坏块地址 0x%" PRIx64 "\r\n", addr);
 8007072:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007076:	4811      	ldr	r0, [pc, #68]	; (80070bc <_np_cmd_nand_read+0x328>)
 8007078:	f00b ff4e 	bl	8012f18 <iprintf>
            if (np_send_bad_block_info(addr, block_size, true))
 800707c:	2301      	movs	r3, #1
 800707e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007082:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007086:	f7fe fd59 	bl	8005b3c <np_send_bad_block_info>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d017      	beq.n	80070c0 <_np_cmd_nand_read+0x32c>
                return -1;
 8007090:	f04f 33ff 	mov.w	r3, #4294967295
 8007094:	e120      	b.n	80072d8 <_np_cmd_nand_read+0x544>
 8007096:	bf00      	nop
 8007098:	20002f08 	.word	0x20002f08
 800709c:	080145f8 	.word	0x080145f8
 80070a0:	08014628 	.word	0x08014628
 80070a4:	08014660 	.word	0x08014660
 80070a8:	080146a0 	.word	0x080146a0
 80070ac:	080146dc 	.word	0x080146dc
 80070b0:	080146f0 	.word	0x080146f0
 80070b4:	20002f48 	.word	0x20002f48
 80070b8:	0801472c 	.word	0x0801472c
 80070bc:	08014764 	.word	0x08014764

            /* 在部分读取时不计算坏块 */
            if (read_cmd->len == total_size)
 80070c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070c4:	f8d3 0009 	ldr.w	r0, [r3, #9]
 80070c8:	f8d3 100d 	ldr.w	r1, [r3, #13]
 80070cc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80070d0:	428b      	cmp	r3, r1
 80070d2:	bf08      	it	eq
 80070d4:	4282      	cmpeq	r2, r0
 80070d6:	d113      	bne.n	8007100 <_np_cmd_nand_read+0x36c>
                len -= block_size;
 80070d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070dc:	2200      	movs	r2, #0
 80070de:	643b      	str	r3, [r7, #64]	; 0x40
 80070e0:	647a      	str	r2, [r7, #68]	; 0x44
 80070e2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80070e6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80070ea:	4621      	mov	r1, r4
 80070ec:	1a51      	subs	r1, r2, r1
 80070ee:	61b9      	str	r1, [r7, #24]
 80070f0:	4629      	mov	r1, r5
 80070f2:	eb63 0301 	sbc.w	r3, r3, r1
 80070f6:	61fb      	str	r3, [r7, #28]
 80070f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80070fc:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
            addr += block_size;
 8007100:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007104:	2200      	movs	r2, #0
 8007106:	63bb      	str	r3, [r7, #56]	; 0x38
 8007108:	63fa      	str	r2, [r7, #60]	; 0x3c
 800710a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800710e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007112:	4621      	mov	r1, r4
 8007114:	1851      	adds	r1, r2, r1
 8007116:	6139      	str	r1, [r7, #16]
 8007118:	4629      	mov	r1, r5
 800711a:	414b      	adcs	r3, r1
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007122:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
            page.page += block_size / page_size;
 8007126:	4b6f      	ldr	r3, [pc, #444]	; (80072e4 <_np_cmd_nand_read+0x550>)
 8007128:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800712c:	f8d3 11c0 	ldr.w	r1, [r3, #448]	; 0x1c0
 8007130:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007138:	fbb2 f3f3 	udiv	r3, r2, r3
 800713c:	18ca      	adds	r2, r1, r3
 800713e:	4b69      	ldr	r3, [pc, #420]	; (80072e4 <_np_cmd_nand_read+0x550>)
 8007140:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007144:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
            continue;
 8007148:	e0c0      	b.n	80072cc <_np_cmd_nand_read+0x538>
        }

        if (np_nand_read(addr, &page, page_size, block_size, prog))
 800714a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007158:	4a62      	ldr	r2, [pc, #392]	; (80072e4 <_np_cmd_nand_read+0x550>)
 800715a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800715e:	f7ff fdcd 	bl	8006cfc <np_nand_read>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d07e      	beq.n	8007266 <_np_cmd_nand_read+0x4d2>
            return NP_ERR_NAND_RD;
 8007168:	f06f 0367 	mvn.w	r3, #103	; 0x67
 800716c:	e0b4      	b.n	80072d8 <_np_cmd_nand_read+0x544>

        while (page.offset < page_size && len)
        {
            if (page_size - page.offset >= tx_data_len)
 800716e:	4b5d      	ldr	r3, [pc, #372]	; (80072e4 <_np_cmd_nand_read+0x550>)
 8007170:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007174:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8007178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800717c:	1a9a      	subs	r2, r3, r2
 800717e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007182:	4293      	cmp	r3, r2
 8007184:	d804      	bhi.n	8007190 <_np_cmd_nand_read+0x3fc>
                send_len = tx_data_len;
 8007186:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800718a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800718e:	e009      	b.n	80071a4 <_np_cmd_nand_read+0x410>
            else
                send_len = page_size - page.offset;
 8007190:	4b54      	ldr	r3, [pc, #336]	; (80072e4 <_np_cmd_nand_read+0x550>)
 8007192:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007196:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 800719a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            if (send_len > len)
 80071a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071a8:	2200      	movs	r2, #0
 80071aa:	633b      	str	r3, [r7, #48]	; 0x30
 80071ac:	637a      	str	r2, [r7, #52]	; 0x34
 80071ae:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80071b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80071b6:	4621      	mov	r1, r4
 80071b8:	428a      	cmp	r2, r1
 80071ba:	4629      	mov	r1, r5
 80071bc:	418b      	sbcs	r3, r1
 80071be:	d203      	bcs.n	80071c8 <_np_cmd_nand_read+0x434>
                send_len = len;
 80071c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            memcpy(resp->data, page.buf + page.offset, send_len);
 80071c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071cc:	1c98      	adds	r0, r3, #2
 80071ce:	4b45      	ldr	r3, [pc, #276]	; (80072e4 <_np_cmd_nand_read+0x550>)
 80071d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071d4:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80071d8:	4b42      	ldr	r3, [pc, #264]	; (80072e4 <_np_cmd_nand_read+0x550>)
 80071da:	4413      	add	r3, r2
 80071dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80071e0:	4619      	mov	r1, r3
 80071e2:	f00c f85a 	bl	801329a <memcpy>

            while (!np_comm_cb->send_ready());
 80071e6:	bf00      	nop
 80071e8:	4b3f      	ldr	r3, [pc, #252]	; (80072e8 <_np_cmd_nand_read+0x554>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	4798      	blx	r3
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0f8      	beq.n	80071e8 <_np_cmd_nand_read+0x454>

            resp->info = send_len;
 80071f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007200:	7053      	strb	r3, [r2, #1]
            if (np_comm_cb->send(np_packet_send_buf,
 8007202:	4b39      	ldr	r3, [pc, #228]	; (80072e8 <_np_cmd_nand_read+0x554>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681c      	ldr	r4, [r3, #0]
 8007208:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800720c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007210:	4413      	add	r3, r2
 8007212:	4619      	mov	r1, r3
 8007214:	4835      	ldr	r0, [pc, #212]	; (80072ec <_np_cmd_nand_read+0x558>)
 8007216:	47a0      	blx	r4
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <_np_cmd_nand_read+0x490>
                resp_header_size + send_len))
            {
                return -1;
 800721e:	f04f 33ff 	mov.w	r3, #4294967295
 8007222:	e059      	b.n	80072d8 <_np_cmd_nand_read+0x544>
            }

            page.offset += send_len;
 8007224:	4b2f      	ldr	r3, [pc, #188]	; (80072e4 <_np_cmd_nand_read+0x550>)
 8007226:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800722a:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 800722e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007232:	441a      	add	r2, r3
 8007234:	4b2b      	ldr	r3, [pc, #172]	; (80072e4 <_np_cmd_nand_read+0x550>)
 8007236:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800723a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            len -= send_len;
 800723e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007242:	2200      	movs	r2, #0
 8007244:	62bb      	str	r3, [r7, #40]	; 0x28
 8007246:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007248:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800724c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8007250:	4621      	mov	r1, r4
 8007252:	1a51      	subs	r1, r2, r1
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4629      	mov	r1, r5
 8007258:	eb63 0301 	sbc.w	r3, r3, r1
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007262:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
        while (page.offset < page_size && len)
 8007266:	4b1f      	ldr	r3, [pc, #124]	; (80072e4 <_np_cmd_nand_read+0x550>)
 8007268:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800726c:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8007270:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007274:	4293      	cmp	r3, r2
 8007276:	d904      	bls.n	8007282 <_np_cmd_nand_read+0x4ee>
 8007278:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800727c:	4313      	orrs	r3, r2
 800727e:	f47f af76 	bne.w	800716e <_np_cmd_nand_read+0x3da>
        }

        addr += page_size;
 8007282:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007286:	2200      	movs	r2, #0
 8007288:	623b      	str	r3, [r7, #32]
 800728a:	627a      	str	r2, [r7, #36]	; 0x24
 800728c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007290:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007294:	4621      	mov	r1, r4
 8007296:	1851      	adds	r1, r2, r1
 8007298:	6039      	str	r1, [r7, #0]
 800729a:	4629      	mov	r1, r5
 800729c:	414b      	adcs	r3, r1
 800729e:	607b      	str	r3, [r7, #4]
 80072a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80072a4:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
        page.offset = 0;
 80072a8:	4b0e      	ldr	r3, [pc, #56]	; (80072e4 <_np_cmd_nand_read+0x550>)
 80072aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072ae:	461a      	mov	r2, r3
 80072b0:	2300      	movs	r3, #0
 80072b2:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
        page.page++;
 80072b6:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <_np_cmd_nand_read+0x550>)
 80072b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072bc:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <_np_cmd_nand_read+0x550>)
 80072c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072c8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    while (len)
 80072cc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80072d0:	4313      	orrs	r3, r2
 80072d2:	f47f aeab 	bne.w	800702c <_np_cmd_nand_read+0x298>
    }

    return 0;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	37c0      	adds	r7, #192	; 0xc0
 80072dc:	46bd      	mov	sp, r7
 80072de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072e2:	bf00      	nop
 80072e4:	20002f48 	.word	0x20002f48
 80072e8:	20000cb8 	.word	0x20000cb8
 80072ec:	20002f08 	.word	0x20002f08

080072f0 <np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int np_cmd_nand_read(np_prog_t *prog)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 80072f8:	2001      	movs	r0, #1
 80072fa:	f7fe fa53 	bl	80057a4 <led_rd_set>
    ret = _np_cmd_nand_read(prog); // 执行NAND读取命令
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff fd48 	bl	8006d94 <_np_cmd_nand_read>
 8007304:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 8007306:	2000      	movs	r0, #0
 8007308:	f7fe fa4c 	bl	80057a4 <led_rd_set>

    return ret;
 800730c:	68fb      	ldr	r3, [r7, #12]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <np_fill_chip_info>:

// 填充芯片信息
static void np_fill_chip_info(np_conf_cmd_t *conf_cmd, np_prog_t *prog)
{
 8007316:	b480      	push	{r7}
 8007318:	b083      	sub	sp, #12
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
    prog->chip_info.page_size = conf_cmd->page_size;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800732c:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
    prog->chip_info.block_size = conf_cmd->block_size;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800733c:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
    prog->chip_info.total_size = conf_cmd->total_size;
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	f8d1 200a 	ldr.w	r2, [r1, #10]
 8007346:	f8d1 300e 	ldr.w	r3, [r1, #14]
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	f501 5108 	add.w	r1, r1, #8704	; 0x2200
 8007350:	3130      	adds	r1, #48	; 0x30
 8007352:	e9c1 2300 	strd	r2, r3, [r1]
    prog->chip_info.spare_size = conf_cmd->spare_size;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 3012 	ldr.w	r3, [r3, #18]
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007362:	f8c2 3238 	str.w	r3, [r2, #568]	; 0x238
    prog->chip_info.bb_mark_off = conf_cmd->bb_mark_off;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	7d9a      	ldrb	r2, [r3, #22]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007370:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
    prog->chip_is_conf = 1;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2201      	movs	r2, #1
 8007378:	639a      	str	r2, [r3, #56]	; 0x38
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
	...

08007388 <np_print_chip_info>:

// 打印芯片信息
static void np_print_chip_info(np_prog_t *prog)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
    DEBUG_PRINT("页面大小: %lu\r\n", prog->chip_info.page_size);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007396:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800739a:	4619      	mov	r1, r3
 800739c:	4815      	ldr	r0, [pc, #84]	; (80073f4 <np_print_chip_info+0x6c>)
 800739e:	f00b fdbb 	bl	8012f18 <iprintf>
    DEBUG_PRINT("块大小: %lu\r\n", prog->chip_info.block_size);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073a8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80073ac:	4619      	mov	r1, r3
 80073ae:	4812      	ldr	r0, [pc, #72]	; (80073f8 <np_print_chip_info+0x70>)
 80073b0:	f00b fdb2 	bl	8012f18 <iprintf>
    DEBUG_PRINT("总大小: 0x%" PRIx64 "\r\n", prog->chip_info.total_size);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80073ba:	3330      	adds	r3, #48	; 0x30
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	480e      	ldr	r0, [pc, #56]	; (80073fc <np_print_chip_info+0x74>)
 80073c2:	f00b fda9 	bl	8012f18 <iprintf>
    DEBUG_PRINT("备用区大小: %lu\r\n", prog->chip_info.spare_size);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073cc:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80073d0:	4619      	mov	r1, r3
 80073d2:	480b      	ldr	r0, [pc, #44]	; (8007400 <np_print_chip_info+0x78>)
 80073d4:	f00b fda0 	bl	8012f18 <iprintf>
    DEBUG_PRINT("坏块标记偏移量: %d\r\n", prog->chip_info.bb_mark_off);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073de:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 80073e2:	4619      	mov	r1, r3
 80073e4:	4807      	ldr	r0, [pc, #28]	; (8007404 <np_print_chip_info+0x7c>)
 80073e6:	f00b fd97 	bl	8012f18 <iprintf>
}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	08014780 	.word	0x08014780
 80073f8:	08014794 	.word	0x08014794
 80073fc:	080147a8 	.word	0x080147a8
 8007400:	080147bc 	.word	0x080147bc
 8007404:	080147d4 	.word	0x080147d4

08007408 <np_cmd_nand_conf>:

// 执行NAND配置命令
static int np_cmd_nand_conf(np_prog_t *prog)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
    np_conf_cmd_t *conf_cmd;

    DEBUG_PRINT("芯片配置命令\r\n");
 8007410:	4825      	ldr	r0, [pc, #148]	; (80074a8 <np_cmd_nand_conf+0xa0>)
 8007412:	f00b fde7 	bl	8012fe4 <puts>

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_conf_cmd_t))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b16      	cmp	r3, #22
 800741c:	d808      	bhi.n	8007430 <np_cmd_nand_conf+0x28>
    {
        ERROR_PRINT("配置命令缓冲区长度错误 %lu\r\n",
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	4619      	mov	r1, r3
 8007424:	4821      	ldr	r0, [pc, #132]	; (80074ac <np_cmd_nand_conf+0xa4>)
 8007426:	f00b fd77 	bl	8012f18 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 800742a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800742e:	e036      	b.n	800749e <np_cmd_nand_conf+0x96>
    }

    conf_cmd = (np_conf_cmd_t *)prog->rx_buf;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	60fb      	str	r3, [r7, #12]

    np_fill_chip_info(conf_cmd, prog); // 填充芯片信息
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff ff6c 	bl	8007316 <np_fill_chip_info>
    np_print_chip_info(prog); // 打印芯片信息
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff ffa2 	bl	8007388 <np_print_chip_info>

    prog->hal = conf_cmd->hal;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	785a      	ldrb	r2, [r3, #1]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800744e:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007458:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 800745c:	461a      	mov	r2, r3
 800745e:	4b14      	ldr	r3, [pc, #80]	; (80074b0 <np_cmd_nand_conf+0xa8>)
 8007460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	f102 0017 	add.w	r0, r2, #23
        prog->rx_buf_len - sizeof(np_conf_cmd_t)))
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6852      	ldr	r2, [r2, #4]
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8007470:	3a17      	subs	r2, #23
 8007472:	4611      	mov	r1, r2
 8007474:	4798      	blx	r3
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d008      	beq.n	800748e <np_cmd_nand_conf+0x86>
    {
        ERROR_PRINT("HAL配置命令缓冲区长度错误 %lu\r\n",
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	4619      	mov	r1, r3
 8007482:	480c      	ldr	r0, [pc, #48]	; (80074b4 <np_cmd_nand_conf+0xac>)
 8007484:	f00b fd48 	bl	8012f18 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8007488:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800748c:	e007      	b.n	800749e <np_cmd_nand_conf+0x96>
    }

    nand_bad_block_table_init(); // 初始化坏块表
 800748e:	f7fe fa7d 	bl	800598c <nand_bad_block_table_init>
    prog->bb_is_read = 0;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	635a      	str	r2, [r3, #52]	; 0x34

    return np_send_ok_status();
 8007498:	f7fe fb10 	bl	8005abc <np_send_ok_status>
 800749c:	4603      	mov	r3, r0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	080147f0 	.word	0x080147f0
 80074ac:	08014804 	.word	0x08014804
 80074b0:	20000040 	.word	0x20000040
 80074b4:	08014834 	.word	0x08014834

080074b8 <np_send_bad_blocks>:

// 发送坏块信息
static int np_send_bad_blocks(np_prog_t *prog)
{
 80074b8:	b5b0      	push	{r4, r5, r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
    uint32_t page;
    void *bb_iter;

    // 遍历坏块表，并发送坏块信息
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 80074c0:	f107 0308 	add.w	r3, r7, #8
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe fab5 	bl	8005a34 <nand_bad_block_table_iter_alloc>
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	e021      	b.n	8007512 <np_send_bad_blocks+0x5a>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
    {
        if (np_send_bad_block_info(page * prog->chip_info.page_size,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074d4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	fb02 f303 	mul.w	r3, r2, r3
 80074de:	2200      	movs	r2, #0
 80074e0:	461c      	mov	r4, r3
 80074e2:	4615      	mov	r5, r2
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074ea:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80074ee:	2300      	movs	r3, #0
 80074f0:	4620      	mov	r0, r4
 80074f2:	4629      	mov	r1, r5
 80074f4:	f7fe fb22 	bl	8005b3c <np_send_bad_block_info>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <np_send_bad_blocks+0x4c>
            prog->chip_info.block_size, false))
        {
            return -1;
 80074fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007502:	e00a      	b.n	800751a <np_send_bad_blocks+0x62>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
 8007504:	f107 0308 	add.w	r3, r7, #8
 8007508:	4619      	mov	r1, r3
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f7fe faac 	bl	8005a68 <nand_bad_block_table_iter_next>
 8007510:	60f8      	str	r0, [r7, #12]
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1da      	bne.n	80074ce <np_send_bad_blocks+0x16>
        }
    }

    return 0;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bdb0      	pop	{r4, r5, r7, pc}

08007522 <np_cmd_read_bad_blocks>:

// 执行读取坏块命令
int np_cmd_read_bad_blocks(np_prog_t *prog)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 800752a:	2001      	movs	r0, #1
 800752c:	f7fe f93a 	bl	80057a4 <led_rd_set>
    nand_bad_block_table_init(); // 初始化坏块表
 8007530:	f7fe fa2c 	bl	800598c <nand_bad_block_table_init>
    ret = _np_cmd_read_bad_blocks(prog, true); // 执行读取坏块命令
 8007534:	2101      	movs	r1, #1
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fe fc5c 	bl	8005df4 <_np_cmd_read_bad_blocks>
 800753c:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 800753e:	2000      	movs	r0, #0
 8007540:	f7fe f930 	bl	80057a4 <led_rd_set>

    if (ret || (ret = np_send_bad_blocks(prog))) // 发送坏块信息
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <np_cmd_read_bad_blocks+0x36>
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff ffb4 	bl	80074b8 <np_send_bad_blocks>
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <np_cmd_read_bad_blocks+0x3a>
        return ret;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	e002      	b.n	8007562 <np_cmd_read_bad_blocks+0x40>

    return np_send_ok_status(); // 发送成功状态
 800755c:	f7fe faae 	bl	8005abc <np_send_ok_status>
 8007560:	4603      	mov	r3, r0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <np_cmd_version_get>:

// 获取版本号命令
int np_cmd_version_get(np_prog_t *prog)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
    np_resp_version_t resp;
    size_t resp_len = sizeof(resp);
 8007574:	2306      	movs	r3, #6
 8007576:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("读取版本号命令\r\n");
 8007578:	4810      	ldr	r0, [pc, #64]	; (80075bc <np_cmd_version_get+0x50>)
 800757a:	f00b fd33 	bl	8012fe4 <puts>

    resp.header.code = NP_RESP_DATA;
 800757e:	2300      	movs	r3, #0
 8007580:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	3b02      	subs	r3, #2
 8007588:	b2db      	uxtb	r3, r3
 800758a:	737b      	strb	r3, [r7, #13]
    resp.version.major = SW_VERSION_MAJOR;
 800758c:	2303      	movs	r3, #3
 800758e:	73bb      	strb	r3, [r7, #14]
    resp.version.minor = SW_VERSION_MINOR;
 8007590:	2305      	movs	r3, #5
 8007592:	73fb      	strb	r3, [r7, #15]
    resp.version.build = SW_VERSION_BUILD;
 8007594:	2300      	movs	r3, #0
 8007596:	823b      	strh	r3, [r7, #16]

    if (np_comm_cb)
 8007598:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <np_cmd_version_get+0x54>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <np_cmd_version_get+0x44>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <np_cmd_version_get+0x54>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f107 020c 	add.w	r2, r7, #12
 80075aa:	6979      	ldr	r1, [r7, #20]
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3

    return 0;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	08014868 	.word	0x08014868
 80075c0:	20000cb8 	.word	0x20000cb8

080075c4 <np_boot_config_read>:

// 读取引导配置
static int np_boot_config_read(boot_config_t *config)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
    if (flash_read(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 80075cc:	2201      	movs	r2, #1
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	4806      	ldr	r0, [pc, #24]	; (80075ec <np_boot_config_read+0x28>)
 80075d2:	f7fd f9d9 	bl	8004988 <flash_read>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	da02      	bge.n	80075e2 <np_boot_config_read+0x1e>
        < 0)
    {
        return -1;
 80075dc:	f04f 33ff 	mov.w	r3, #4294967295
 80075e0:	e000      	b.n	80075e4 <np_boot_config_read+0x20>
    }
    
    return 0;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	08003800 	.word	0x08003800

080075f0 <np_boot_config_write>:

// 写入引导配置
static int np_boot_config_write(boot_config_t *config)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
    if (flash_page_erase(BOOT_CONFIG_ADDR) < 0)
 80075f8:	480c      	ldr	r0, [pc, #48]	; (800762c <np_boot_config_write+0x3c>)
 80075fa:	f7fd f96d 	bl	80048d8 <flash_page_erase>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	da02      	bge.n	800760a <np_boot_config_write+0x1a>
        return -1;
 8007604:	f04f 33ff 	mov.w	r3, #4294967295
 8007608:	e00b      	b.n	8007622 <np_boot_config_write+0x32>

    if (flash_write(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 800760a:	2201      	movs	r2, #1
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	4807      	ldr	r0, [pc, #28]	; (800762c <np_boot_config_write+0x3c>)
 8007610:	f7fd f985 	bl	800491e <flash_write>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	da02      	bge.n	8007620 <np_boot_config_write+0x30>
        < 0)
    {
        return -1;
 800761a:	f04f 33ff 	mov.w	r3, #4294967295
 800761e:	e000      	b.n	8007622 <np_boot_config_write+0x32>
    }

    return 0;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	08003800 	.word	0x08003800

08007630 <np_cmd_active_image_get>:

// 获取活动镜像命令
static int np_cmd_active_image_get(np_prog_t *prog)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;
    np_resp_active_image_t resp;
    size_t resp_len = sizeof(resp);
 8007638:	2303      	movs	r3, #3
 800763a:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("获取活动镜像命令\r\n");
 800763c:	481c      	ldr	r0, [pc, #112]	; (80076b0 <np_cmd_active_image_get+0x80>)
 800763e:	f00b fcd1 	bl	8012fe4 <puts>

    if (prog->active_image == 0xff)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007648:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 800764c:	2bff      	cmp	r3, #255	; 0xff
 800764e:	d110      	bne.n	8007672 <np_cmd_active_image_get+0x42>
    {
        if (np_boot_config_read(&boot_config))
 8007650:	f107 0310 	add.w	r3, r7, #16
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff ffb5 	bl	80075c4 <np_boot_config_read>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <np_cmd_active_image_get+0x36>
            return NP_ERR_INTERNAL;
 8007660:	f04f 33ff 	mov.w	r3, #4294967295
 8007664:	e01f      	b.n	80076a6 <np_cmd_active_image_get+0x76>
        prog->active_image = boot_config.active_image;
 8007666:	7c3a      	ldrb	r2, [r7, #16]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800766e:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    }

    resp.header.code = NP_RESP_DATA;
 8007672:	2300      	movs	r3, #0
 8007674:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	3b02      	subs	r3, #2
 800767c:	b2db      	uxtb	r3, r3
 800767e:	737b      	strb	r3, [r7, #13]
    resp.active_image = prog->active_image;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007686:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 800768a:	73bb      	strb	r3, [r7, #14]

    if (np_comm_cb)
 800768c:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <np_cmd_active_image_get+0x84>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d007      	beq.n	80076a4 <np_cmd_active_image_get+0x74>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8007694:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <np_cmd_active_image_get+0x84>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f107 020c 	add.w	r2, r7, #12
 800769e:	6979      	ldr	r1, [r7, #20]
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3

    return 0;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	08014880 	.word	0x08014880
 80076b4:	20000cb8 	.word	0x20000cb8

080076b8 <np_cmd_fw_update_start>:

// 开始固件更新命令
static int np_cmd_fw_update_start(np_prog_t *prog)
{
 80076b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076bc:	b092      	sub	sp, #72	; 0x48
 80076be:	af04      	add	r7, sp, #16
 80076c0:	61f8      	str	r0, [r7, #28]
    uint64_t addr, len;
    np_write_start_cmd_t *write_start_cmd;

    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	2b11      	cmp	r3, #17
 80076c8:	d808      	bhi.n	80076dc <np_cmd_fw_update_start+0x24>
    {
        ERROR_PRINT("写入开始命令的缓冲区长度错误 %lu\r\n",
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	4619      	mov	r1, r3
 80076d0:	4870      	ldr	r0, [pc, #448]	; (8007894 <np_cmd_fw_update_start+0x1dc>)
 80076d2:	f00b fc21 	bl	8012f18 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80076d6:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80076da:	e0d5      	b.n	8007888 <np_cmd_fw_update_start+0x1d0>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	637b      	str	r3, [r7, #52]	; 0x34
    addr = write_start_cmd->addr;
 80076e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076e4:	f8d1 2001 	ldr.w	r2, [r1, #1]
 80076e8:	f8d1 3005 	ldr.w	r3, [r1, #5]
 80076ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    len = write_start_cmd->len;
 80076f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076f2:	f8d1 2009 	ldr.w	r2, [r1, #9]
 80076f6:	f8d1 300d 	ldr.w	r3, [r1, #13]
 80076fa:	e9c7 2308 	strd	r2, r3, [r7, #32]

    DEBUG_PRINT("写入命令 0x%" PRIx64 " 地址 0x%" PRIx64 " 字节\r\n", addr,
 80076fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007702:	e9cd 2300 	strd	r2, r3, [sp]
 8007706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800770a:	4863      	ldr	r0, [pc, #396]	; (8007898 <np_cmd_fw_update_start+0x1e0>)
 800770c:	f00b fc04 	bl	8012f18 <iprintf>
        len);

    prog->base_addr = FLASH_START_ADDR;
 8007710:	69f9      	ldr	r1, [r7, #28]
 8007712:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007716:	f04f 0300 	mov.w	r3, #0
 800771a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    prog->page_size = FLASH_PAGE_SIZE;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007724:	621a      	str	r2, [r3, #32]
    prog->block_size = FLASH_BLOCK_SIZE;
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800772c:	625a      	str	r2, [r3, #36]	; 0x24
    prog->total_size = FLASH_SIZE;
 800772e:	69f9      	ldr	r1, [r7, #28]
 8007730:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007734:	f04f 0300 	mov.w	r3, #0
 8007738:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    if (addr + len > prog->base_addr + prog->total_size)
 800773c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007740:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007744:	1884      	adds	r4, r0, r2
 8007746:	eb41 0503 	adc.w	r5, r1, r3
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007756:	eb10 0802 	adds.w	r8, r0, r2
 800775a:	eb41 0903 	adc.w	r9, r1, r3
 800775e:	45a0      	cmp	r8, r4
 8007760:	eb79 0305 	sbcs.w	r3, r9, r5
 8007764:	d217      	bcs.n	8007796 <np_cmd_fw_update_start+0xde>
    {
        ERROR_PRINT("写入地址 0x%" PRIx64 "+0x%" PRIx64
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007772:	eb10 0a02 	adds.w	sl, r0, r2
 8007776:	eb41 0b03 	adc.w	fp, r1, r3
 800777a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800777e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007782:	e9cd 2300 	strd	r2, r3, [sp]
 8007786:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800778a:	4844      	ldr	r0, [pc, #272]	; (800789c <np_cmd_fw_update_start+0x1e4>)
 800778c:	f00b fbc4 	bl	8012f18 <iprintf>
            " 超过闪存大小 0x%" PRIx64 "\r\n", addr, len,
            prog->base_addr + prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8007790:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007794:	e078      	b.n	8007888 <np_cmd_fw_update_start+0x1d0>
    }

    if (addr % prog->page_size)
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	2200      	movs	r2, #0
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	617a      	str	r2, [r7, #20]
 80077a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80077a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077a8:	f7fc fd62 	bl	8004270 <__aeabi_uldivmod>
 80077ac:	4313      	orrs	r3, r2
 80077ae:	d00a      	beq.n	80077c6 <np_cmd_fw_update_start+0x10e>
    {
        ERROR_PRINT("地址 0x%" PRIx64
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077ba:	4839      	ldr	r0, [pc, #228]	; (80078a0 <np_cmd_fw_update_start+0x1e8>)
 80077bc:	f00b fbac 	bl	8012f18 <iprintf>
            " 未对齐到页大小 0x%lx\r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 80077c0:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80077c4:	e060      	b.n	8007888 <np_cmd_fw_update_start+0x1d0>
    }

    if (!len)
 80077c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	d105      	bne.n	80077da <np_cmd_fw_update_start+0x122>
    {
        ERROR_PRINT("长度为0\r\n");
 80077ce:	4835      	ldr	r0, [pc, #212]	; (80078a4 <np_cmd_fw_update_start+0x1ec>)
 80077d0:	f00b fc08 	bl	8012fe4 <puts>
        return NP_ERR_LEN_INVALID;
 80077d4:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80077d8:	e056      	b.n	8007888 <np_cmd_fw_update_start+0x1d0>
    }

    if (len % prog->page_size)
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	2200      	movs	r2, #0
 80077e0:	60bb      	str	r3, [r7, #8]
 80077e2:	60fa      	str	r2, [r7, #12]
 80077e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80077e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077ec:	f7fc fd40 	bl	8004270 <__aeabi_uldivmod>
 80077f0:	4313      	orrs	r3, r2
 80077f2:	d00a      	beq.n	800780a <np_cmd_fw_update_start+0x152>
    {
        ERROR_PRINT("长度 0x%" PRIx64
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077fe:	482a      	ldr	r0, [pc, #168]	; (80078a8 <np_cmd_fw_update_start+0x1f0>)
 8007800:	f00b fb8a 	bl	8012f18 <iprintf>
            " 未对齐到页大小 0x%lx\r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8007804:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007808:	e03e      	b.n	8007888 <np_cmd_fw_update_start+0x1d0>
    }

    prog->addr = addr;
 800780a:	69f9      	ldr	r1, [r7, #28]
 800780c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007810:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 8007814:	69f9      	ldr	r1, [r7, #28]
 8007816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800781a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	2201      	movs	r2, #1
 8007822:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	2200      	movs	r2, #0
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	607a      	str	r2, [r7, #4]
 800782e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007832:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007836:	f7fc fd1b 	bl	8004270 <__aeabi_uldivmod>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007844:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800784e:	461a      	mov	r2, r3
 8007850:	2300      	movs	r3, #0
 8007852:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800785c:	3310      	adds	r3, #16
 800785e:	4619      	mov	r1, r3
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007872:	3310      	adds	r3, #16
 8007874:	4619      	mov	r1, r3
 8007876:	f04f 0200 	mov.w	r2, #0
 800787a:	f04f 0300 	mov.w	r3, #0
 800787e:	e9c1 2300 	strd	r2, r3, [r1]

    return np_send_ok_status();
 8007882:	f7fe f91b 	bl	8005abc <np_send_ok_status>
 8007886:	4603      	mov	r3, r0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3738      	adds	r7, #56	; 0x38
 800788c:	46bd      	mov	sp, r7
 800788e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007892:	bf00      	nop
 8007894:	0801489c 	.word	0x0801489c
 8007898:	080148d4 	.word	0x080148d4
 800789c:	08014900 	.word	0x08014900
 80078a0:	08014940 	.word	0x08014940
 80078a4:	080146dc 	.word	0x080146dc
 80078a8:	08014974 	.word	0x08014974

080078ac <np_cmd_fw_update_data>:

// 写入固件数据命令
static int np_cmd_fw_update_data(np_prog_t *prog)
{
 80078ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	b0a7      	sub	sp, #156	; 0x9c
 80078b2:	af02      	add	r7, sp, #8
 80078b4:	6778      	str	r0, [r7, #116]	; 0x74
    uint32_t write_len;
    uint64_t bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 80078b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d808      	bhi.n	80078d0 <np_cmd_fw_update_data+0x24>
    {
        ERROR_PRINT("写入数据命令的缓冲区长度错误 %lu\r\n",
 80078be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	4619      	mov	r1, r3
 80078c4:	487c      	ldr	r0, [pc, #496]	; (8007ab8 <np_cmd_fw_update_data+0x20c>)
 80078c6:	f00b fb27 	bl	8012f18 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80078ca:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80078ce:	e1d6      	b.n	8007c7e <np_cmd_fw_update_data+0x3d2>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 80078d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    len = write_data_cmd->len;
 80078d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2200      	movs	r2, #0
 80078e2:	60bb      	str	r3, [r7, #8]
 80078e4:	60fa      	str	r2, [r7, #12]
 80078e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078ea:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 80078ee:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80078f2:	1c94      	adds	r4, r2, #2
 80078f4:	f143 0500 	adc.w	r5, r3, #0
 80078f8:	2c41      	cmp	r4, #65	; 0x41
 80078fa:	f175 0300 	sbcs.w	r3, r5, #0
 80078fe:	d307      	bcc.n	8007910 <np_cmd_fw_update_data+0x64>
    {
        ERROR_PRINT("数据大小错误 0x%" PRIx64 "\r\n", len);
 8007900:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007904:	486d      	ldr	r0, [pc, #436]	; (8007abc <np_cmd_fw_update_data+0x210>)
 8007906:	f00b fb07 	bl	8012f18 <iprintf>
        return NP_ERR_CMD_DATA_SIZE;
 800790a:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 800790e:	e1b6      	b.n	8007c7e <np_cmd_fw_update_data+0x3d2>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 8007910:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007914:	f112 0802 	adds.w	r8, r2, #2
 8007918:	f143 0900 	adc.w	r9, r3, #0
 800791c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	469a      	mov	sl, r3
 8007924:	4693      	mov	fp, r2
 8007926:	45d9      	cmp	r9, fp
 8007928:	bf08      	it	eq
 800792a:	45d0      	cmpeq	r8, sl
 800792c:	d010      	beq.n	8007950 <np_cmd_fw_update_data+0xa4>
    {
        ERROR_PRINT("缓冲区长度 0x%lx 大于命令长度 0x%" PRIx64 "\r\n",
 800792e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007930:	6859      	ldr	r1, [r3, #4]
 8007932:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007936:	1c90      	adds	r0, r2, #2
 8007938:	66b8      	str	r0, [r7, #104]	; 0x68
 800793a:	f143 0300 	adc.w	r3, r3, #0
 800793e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007940:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007944:	485e      	ldr	r0, [pc, #376]	; (8007ac0 <np_cmd_fw_update_data+0x214>)
 8007946:	f00b fae7 	bl	8012f18 <iprintf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 800794a:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 800794e:	e196      	b.n	8007c7e <np_cmd_fw_update_data+0x3d2>
    }

    if (!prog->addr_is_set)
 8007950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007954:	2b00      	cmp	r3, #0
 8007956:	d105      	bne.n	8007964 <np_cmd_fw_update_data+0xb8>
    {
        ERROR_PRINT("写入地址未设置\r\n");
 8007958:	485a      	ldr	r0, [pc, #360]	; (8007ac4 <np_cmd_fw_update_data+0x218>)
 800795a:	f00b fb43 	bl	8012fe4 <puts>
        return NP_ERR_ADDR_INVALID;
 800795e:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8007962:	e18c      	b.n	8007c7e <np_cmd_fw_update_data+0x3d2>
    }

    if (prog->page.offset + len > prog->page_size)
 8007964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007966:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800796a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800796e:	2200      	movs	r2, #0
 8007970:	663b      	str	r3, [r7, #96]	; 0x60
 8007972:	667a      	str	r2, [r7, #100]	; 0x64
 8007974:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007978:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800797c:	4621      	mov	r1, r4
 800797e:	1889      	adds	r1, r1, r2
 8007980:	65b9      	str	r1, [r7, #88]	; 0x58
 8007982:	4629      	mov	r1, r5
 8007984:	eb43 0101 	adc.w	r1, r3, r1
 8007988:	65f9      	str	r1, [r7, #92]	; 0x5c
 800798a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	2200      	movs	r2, #0
 8007990:	653b      	str	r3, [r7, #80]	; 0x50
 8007992:	657a      	str	r2, [r7, #84]	; 0x54
 8007994:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8007998:	4623      	mov	r3, r4
 800799a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800799e:	4602      	mov	r2, r0
 80079a0:	4293      	cmp	r3, r2
 80079a2:	462b      	mov	r3, r5
 80079a4:	460a      	mov	r2, r1
 80079a6:	4193      	sbcs	r3, r2
 80079a8:	d20a      	bcs.n	80079c0 <np_cmd_fw_update_data+0x114>
        write_len = prog->page_size - prog->page.offset;
 80079aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ac:	6a1a      	ldr	r2, [r3, #32]
 80079ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80079b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80079be:	e003      	b.n	80079c8 <np_cmd_fw_update_data+0x11c>
    else
        write_len = len;
 80079c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 80079c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ca:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80079ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80079d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079d8:	18d0      	adds	r0, r2, r3
 80079da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079de:	3302      	adds	r3, #2
 80079e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80079e4:	4619      	mov	r1, r3
 80079e6:	f00b fc58 	bl	801329a <memcpy>
    prog->page.offset += write_len;
 80079ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80079f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80079f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079f8:	441a      	add	r2, r3
 80079fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007a00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    if (prog->page.offset == prog->page_size)
 8007a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a06:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007a0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	f040 8082 	bne.w	8007b1c <np_cmd_fw_update_data+0x270>
    {
        if (prog->addr >= prog->base_addr + prog->total_size)
 8007a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a1a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a20:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a26:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007a2a:	1886      	adds	r6, r0, r2
 8007a2c:	64be      	str	r6, [r7, #72]	; 0x48
 8007a2e:	eb41 0303 	adc.w	r3, r1, r3
 8007a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a34:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007a38:	460b      	mov	r3, r1
 8007a3a:	429c      	cmp	r4, r3
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	eb75 0303 	sbcs.w	r3, r5, r3
 8007a42:	d319      	bcc.n	8007a78 <np_cmd_fw_update_data+0x1cc>
        {
            ERROR_PRINT("写入地址 0x%" PRIx64
 8007a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a46:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a52:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007a56:	1886      	adds	r6, r0, r2
 8007a58:	643e      	str	r6, [r7, #64]	; 0x40
 8007a5a:	eb41 0303 	adc.w	r3, r1, r3
 8007a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a64:	e9cd 2300 	strd	r2, r3, [sp]
 8007a68:	4622      	mov	r2, r4
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	4816      	ldr	r0, [pc, #88]	; (8007ac8 <np_cmd_fw_update_data+0x21c>)
 8007a6e:	f00b fa53 	bl	8012f18 <iprintf>
                " 超过闪存大小 0x%" PRIx64 "\r\n",
                prog->addr, prog->base_addr + prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8007a72:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007a76:	e102      	b.n	8007c7e <np_cmd_fw_update_data+0x3d2>
        }

        if (flash_page_erase((uint32_t)prog->addr) < 0)
 8007a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fc ff29 	bl	80048d8 <flash_page_erase>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	da02      	bge.n	8007a92 <np_cmd_fw_update_data+0x1e6>
            return NP_ERR_INTERNAL;
 8007a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a90:	e0f5      	b.n	8007c7e <np_cmd_fw_update_data+0x3d2>

        if (flash_write((uint32_t)prog->addr, prog->page.buf,
 8007a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007a98:	4610      	mov	r0, r2
 8007a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a9c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	f7fc ff3a 	bl	800491e <flash_write>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	da0d      	bge.n	8007acc <np_cmd_fw_update_data+0x220>
            prog->page_size) < 0)
        {
            return NP_ERR_INTERNAL;
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab4:	e0e3      	b.n	8007c7e <np_cmd_fw_update_data+0x3d2>
 8007ab6:	bf00      	nop
 8007ab8:	080149a8 	.word	0x080149a8
 8007abc:	080149e0 	.word	0x080149e0
 8007ac0:	08014a04 	.word	0x08014a04
 8007ac4:	08014518 	.word	0x08014518
 8007ac8:	08014a40 	.word	0x08014a40
        }

        prog->addr += prog->page_size;
 8007acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ace:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ada:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007adc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007ae0:	4623      	mov	r3, r4
 8007ae2:	18c3      	adds	r3, r0, r3
 8007ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ae6:	462b      	mov	r3, r5
 8007ae8:	eb41 0303 	adc.w	r3, r1, r3
 8007aec:	637b      	str	r3, [r7, #52]	; 0x34
 8007aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007af0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007af4:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8007af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007afa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007afe:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8007b02:	3301      	adds	r3, #1
 8007b04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007b06:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007b0a:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8007b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007b14:	461a      	mov	r2, r3
 8007b16:	2300      	movs	r3, #0
 8007b18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    bytes_left = len - write_len;
 8007b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b20:	2200      	movs	r2, #0
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b26:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007b2a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8007b2e:	4621      	mov	r1, r4
 8007b30:	1a51      	subs	r1, r2, r1
 8007b32:	6039      	str	r1, [r7, #0]
 8007b34:	4629      	mov	r1, r5
 8007b36:	eb63 0301 	sbc.w	r3, r3, r1
 8007b3a:	607b      	str	r3, [r7, #4]
 8007b3c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007b40:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (bytes_left)
 8007b44:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	d018      	beq.n	8007b7e <np_cmd_fw_update_data+0x2d2>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8007b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b4e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8007b52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b56:	1c9a      	adds	r2, r3, #2
 8007b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b5c:	4413      	add	r3, r2
 8007b5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b60:	4619      	mov	r1, r3
 8007b62:	f00b fb9a 	bl	801329a <memcpy>
        prog->page.offset += bytes_left;
 8007b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007b6c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b72:	4413      	add	r3, r2
 8007b74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007b76:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007b7a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    prog->bytes_written += len;
 8007b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b80:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007b84:	3310      	adds	r3, #16
 8007b86:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007b8a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007b8e:	1884      	adds	r4, r0, r2
 8007b90:	623c      	str	r4, [r7, #32]
 8007b92:	eb41 0303 	adc.w	r3, r1, r3
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
 8007b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b9a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007b9e:	3310      	adds	r3, #16
 8007ba0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ba4:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8007ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007baa:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007bae:	3310      	adds	r3, #16
 8007bb0:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bb6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007bba:	3310      	adds	r3, #16
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	1a84      	subs	r4, r0, r2
 8007bc2:	61bc      	str	r4, [r7, #24]
 8007bc4:	eb61 0303 	sbc.w	r3, r1, r3
 8007bc8:	61fb      	str	r3, [r7, #28]
 8007bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	613b      	str	r3, [r7, #16]
 8007bd2:	617a      	str	r2, [r7, #20]
 8007bd4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8007bd8:	4623      	mov	r3, r4
 8007bda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007bde:	4602      	mov	r2, r0
 8007be0:	4293      	cmp	r3, r2
 8007be2:	462b      	mov	r3, r5
 8007be4:	460a      	mov	r2, r1
 8007be6:	4193      	sbcs	r3, r2
 8007be8:	d20c      	bcs.n	8007c04 <np_cmd_fw_update_data+0x358>
        prog->bytes_written == prog->len)
 8007bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bec:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007bf0:	3310      	adds	r3, #16
 8007bf2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bf8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8007bfc:	4299      	cmp	r1, r3
 8007bfe:	bf08      	it	eq
 8007c00:	4290      	cmpeq	r0, r2
 8007c02:	d11b      	bne.n	8007c3c <np_cmd_fw_update_data+0x390>
    {
        if (np_send_write_ack(prog->bytes_written))
 8007c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c06:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007c0a:	3310      	adds	r3, #16
 8007c0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c10:	4610      	mov	r0, r2
 8007c12:	4619      	mov	r1, r3
 8007c14:	f7fe fbca 	bl	80063ac <np_send_write_ack>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <np_cmd_fw_update_data+0x378>
            return -1;
 8007c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c22:	e02c      	b.n	8007c7e <np_cmd_fw_update_data+0x3d2>
        prog->bytes_ack = prog->bytes_written;
 8007c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c26:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007c2a:	3310      	adds	r3, #16
 8007c2c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c32:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007c36:	3310      	adds	r3, #16
 8007c38:	e9c3 0100 	strd	r0, r1, [r3]
    }

    if (prog->bytes_written > prog->len)
 8007c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c3e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007c42:	3310      	adds	r3, #16
 8007c44:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c48:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007c4a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8007c4e:	4290      	cmp	r0, r2
 8007c50:	eb71 0303 	sbcs.w	r3, r1, r3
 8007c54:	d212      	bcs.n	8007c7c <np_cmd_fw_update_data+0x3d0>
    {
        ERROR_PRINT("实际写入数据长度 0x%" PRIx64
 8007c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c58:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007c5c:	3310      	adds	r3, #16
 8007c5e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007c68:	e9cd 2300 	strd	r2, r3, [sp]
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4805      	ldr	r0, [pc, #20]	; (8007c88 <np_cmd_fw_update_data+0x3dc>)
 8007c72:	f00b f951 	bl	8012f18 <iprintf>
            " 超过 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 8007c76:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8007c7a:	e000      	b.n	8007c7e <np_cmd_fw_update_data+0x3d2>
    }

    return 0;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3794      	adds	r7, #148	; 0x94
 8007c82:	46bd      	mov	sp, r7
 8007c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c88:	08014a78 	.word	0x08014a78

08007c8c <np_cmd_fw_update_end>:


// 固件更新结束命令
static int np_cmd_fw_update_end(np_prog_t *prog)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;

    prog->addr_is_set = 0;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	631a      	str	r2, [r3, #48]	; 0x30

    if (prog->page.offset)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007ca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <np_cmd_fw_update_end+0x34>
    {
        ERROR_PRINT("未写入长度为 0x%lx 的数据\r\n",
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007cae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	481d      	ldr	r0, [pc, #116]	; (8007d2c <np_cmd_fw_update_end+0xa0>)
 8007cb6:	f00b f92f 	bl	8012f18 <iprintf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8007cba:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8007cbe:	e030      	b.n	8007d22 <np_cmd_fw_update_end+0x96>
    }

    if (np_boot_config_read(&boot_config))
 8007cc0:	f107 030c 	add.w	r3, r7, #12
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7ff fc7d 	bl	80075c4 <np_boot_config_read>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <np_cmd_fw_update_end+0x4a>
        return NP_ERR_INTERNAL;
 8007cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd4:	e025      	b.n	8007d22 <np_cmd_fw_update_end+0x96>

    if (prog->active_image == 0xff)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007cdc:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8007ce0:	2bff      	cmp	r3, #255	; 0xff
 8007ce2:	d105      	bne.n	8007cf0 <np_cmd_fw_update_end+0x64>
        prog->active_image = boot_config.active_image;
 8007ce4:	7b3a      	ldrb	r2, [r7, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007cec:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    boot_config.active_image = prog->active_image ? 0 : 1;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007cf6:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	bf0c      	ite	eq
 8007cfe:	2301      	moveq	r3, #1
 8007d00:	2300      	movne	r3, #0
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	733b      	strb	r3, [r7, #12]
    if (np_boot_config_write(&boot_config))
 8007d06:	f107 030c 	add.w	r3, r7, #12
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff fc70 	bl	80075f0 <np_boot_config_write>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <np_cmd_fw_update_end+0x90>
        return NP_ERR_INTERNAL;
 8007d16:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1a:	e002      	b.n	8007d22 <np_cmd_fw_update_end+0x96>

    return np_send_ok_status();
 8007d1c:	f7fd fece 	bl	8005abc <np_send_ok_status>
 8007d20:	4603      	mov	r3, r0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	08014ab0 	.word	0x08014ab0

08007d30 <np_cmd_fw_update>:

// 固件更新命令
static int np_cmd_fw_update(np_prog_t *prog)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60fb      	str	r3, [r7, #12]

    switch (cmd->code)
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b0c      	cmp	r3, #12
 8007d48:	d013      	beq.n	8007d72 <np_cmd_fw_update+0x42>
 8007d4a:	2b0c      	cmp	r3, #12
 8007d4c:	dc19      	bgt.n	8007d82 <np_cmd_fw_update+0x52>
 8007d4e:	2b0a      	cmp	r3, #10
 8007d50:	d002      	beq.n	8007d58 <np_cmd_fw_update+0x28>
 8007d52:	2b0b      	cmp	r3, #11
 8007d54:	d008      	beq.n	8007d68 <np_cmd_fw_update+0x38>
    case NP_CMD_FW_UPDATE_E:
        ret = np_cmd_fw_update_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8007d56:	e014      	b.n	8007d82 <np_cmd_fw_update+0x52>
        led_wr_set(true);
 8007d58:	2001      	movs	r0, #1
 8007d5a:	f7fd fd11 	bl	8005780 <led_wr_set>
        ret = np_cmd_fw_update_start(prog);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff fcaa 	bl	80076b8 <np_cmd_fw_update_start>
 8007d64:	60f8      	str	r0, [r7, #12]
        break;
 8007d66:	e00d      	b.n	8007d84 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_data(prog);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7ff fd9f 	bl	80078ac <np_cmd_fw_update_data>
 8007d6e:	60f8      	str	r0, [r7, #12]
        break;
 8007d70:	e008      	b.n	8007d84 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_end(prog);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff ff8a 	bl	8007c8c <np_cmd_fw_update_end>
 8007d78:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	f7fd fd00 	bl	8005780 <led_wr_set>
        break;
 8007d80:	e000      	b.n	8007d84 <np_cmd_fw_update+0x54>
        break;
 8007d82:	bf00      	nop
    }

    if (ret < 0)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	da02      	bge.n	8007d90 <np_cmd_fw_update+0x60>
        led_wr_set(false);
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	f7fd fcf8 	bl	8005780 <led_wr_set>

    return ret;
 8007d90:	68fb      	ldr	r3, [r7, #12]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <np_cmd_is_valid>:
    { NP_CMD_FW_UPDATE_E, 0, np_cmd_fw_update },                 // 固件更新结束命令
};

// 检查命令是否有效
static bool np_cmd_is_valid(np_cmd_code_t code)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	4603      	mov	r3, r0
 8007da2:	71fb      	strb	r3, [r7, #7]
    return code >= 0 && code < NP_CMD_NAND_LAST;
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	2b0c      	cmp	r3, #12
 8007da8:	bf94      	ite	ls
 8007daa:	2301      	movls	r3, #1
 8007dac:	2300      	movhi	r3, #0
 8007dae:	b2db      	uxtb	r3, r3
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <np_cmd_handler>:

// 命令处理函数
static int np_cmd_handler(np_prog_t *prog)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd;

    if (prog->rx_buf_len < sizeof(np_cmd_t))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d108      	bne.n	8007dde <np_cmd_handler+0x22>
    {
        ERROR_PRINT("命令长度错误：%lu\r\n",
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	4823      	ldr	r0, [pc, #140]	; (8007e60 <np_cmd_handler+0xa4>)
 8007dd4:	f00b f8a0 	bl	8012f18 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8007dd8:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8007ddc:	e03b      	b.n	8007e56 <np_cmd_handler+0x9a>
    }
    cmd = (np_cmd_t *)prog->rx_buf;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	60fb      	str	r3, [r7, #12]

    if (!np_cmd_is_valid(cmd->code))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff ffd6 	bl	8007d9a <np_cmd_is_valid>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f083 0301 	eor.w	r3, r3, #1
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d008      	beq.n	8007e0c <np_cmd_handler+0x50>
    {
        ERROR_PRINT("无效的命令码：%d\r\n", cmd->code);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4818      	ldr	r0, [pc, #96]	; (8007e64 <np_cmd_handler+0xa8>)
 8007e02:	f00b f889 	bl	8012f18 <iprintf>
        return NP_ERR_CMD_INVALID;
 8007e06:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 8007e0a:	e024      	b.n	8007e56 <np_cmd_handler+0x9a>
    }

    if (!prog->chip_is_conf && cmd_handler[cmd->code].is_chip_cmd)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d112      	bne.n	8007e3a <np_cmd_handler+0x7e>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4a13      	ldr	r2, [pc, #76]	; (8007e68 <np_cmd_handler+0xac>)
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	440b      	add	r3, r1
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	3304      	adds	r3, #4
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <np_cmd_handler+0x7e>
    {
        ERROR_PRINT("芯片未配置\r\n");
 8007e2e:	480f      	ldr	r0, [pc, #60]	; (8007e6c <np_cmd_handler+0xb0>)
 8007e30:	f00b f8d8 	bl	8012fe4 <puts>
        return NP_ERR_CHIP_NOT_CONF;
 8007e34:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8007e38:	e00d      	b.n	8007e56 <np_cmd_handler+0x9a>
    }

    return cmd_handler[cmd->code].exec(prog);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4a09      	ldr	r2, [pc, #36]	; (8007e68 <np_cmd_handler+0xac>)
 8007e42:	460b      	mov	r3, r1
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	440b      	add	r3, r1
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	4798      	blx	r3
 8007e54:	4603      	mov	r3, r0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	08014adc 	.word	0x08014adc
 8007e64:	08014b00 	.word	0x08014b00
 8007e68:	2000004c 	.word	0x2000004c
 8007e6c:	08014b24 	.word	0x08014b24

08007e70 <np_packet_handler>:

// 数据包处理函数
static void np_packet_handler(np_prog_t *prog)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
    int ret;

    do
    {
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8007e78:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <np_packet_handler+0x54>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
 8007e84:	4602      	mov	r2, r0
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	605a      	str	r2, [r3, #4]
        if (!prog->rx_buf_len)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d012      	beq.n	8007eb8 <np_packet_handler+0x48>
            break;

        ret = np_cmd_handler(prog);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7ff ff92 	bl	8007dbc <np_cmd_handler>
 8007e98:	60f8      	str	r0, [r7, #12]

        np_comm_cb->consume();
 8007e9a:	4b0a      	ldr	r3, [pc, #40]	; (8007ec4 <np_packet_handler+0x54>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	4798      	blx	r3

        if (ret < 0)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	dae7      	bge.n	8007e78 <np_packet_handler+0x8>
            np_send_error(-ret);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	425b      	negs	r3, r3
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fd fe1f 	bl	8005af4 <np_send_error>
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8007eb6:	e7df      	b.n	8007e78 <np_packet_handler+0x8>
            break;
 8007eb8:	bf00      	nop
    }
    while (1);
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000cb8 	.word	0x20000cb8

08007ec8 <np_nand_handler>:

// NAND 处理函数
static void np_nand_handler(np_prog_t *prog)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
    if (prog->nand_wr_in_progress)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007ed6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d008      	beq.n	8007ef0 <np_nand_handler+0x28>
    {
        if (np_nand_handle_status(prog))
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7fe fc28 	bl	8006734 <np_nand_handle_status>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <np_nand_handler+0x28>
            np_send_error(NP_ERR_NAND_WR);
 8007eea:	2099      	movs	r0, #153	; 0x99
 8007eec:	f7fd fe02 	bl	8005af4 <np_send_error>
    }
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <np_init>:

// NP 初始化函数
void np_init()
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
    prog.active_image = 0xff;
 8007efc:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <np_init+0x1c>)
 8007efe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007f02:	22ff      	movs	r2, #255	; 0xff
 8007f04:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
}
 8007f08:	bf00      	nop
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000cc0 	.word	0x20000cc0

08007f18 <np_handler>:

// NP 处理函数
void np_handler()
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
    np_packet_handler(&prog);
 8007f1c:	4803      	ldr	r0, [pc, #12]	; (8007f2c <np_handler+0x14>)
 8007f1e:	f7ff ffa7 	bl	8007e70 <np_packet_handler>
    np_nand_handler(&prog);
 8007f22:	4802      	ldr	r0, [pc, #8]	; (8007f2c <np_handler+0x14>)
 8007f24:	f7ff ffd0 	bl	8007ec8 <np_nand_handler>
}
 8007f28:	bf00      	nop
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000cc0 	.word	0x20000cc0

08007f30 <np_comm_register>:

// 注册 NP 通信回调函数
int np_comm_register(np_comm_cb_t *cb)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
    np_comm_cb = cb;
 8007f38:	4a04      	ldr	r2, [pc, #16]	; (8007f4c <np_comm_register+0x1c>)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6013      	str	r3, [r2, #0]

    return 0;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	20000cb8 	.word	0x20000cb8

08007f50 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8007f56:	1d3b      	adds	r3, r7, #4
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	605a      	str	r2, [r3, #4]
 8007f5e:	609a      	str	r2, [r3, #8]
 8007f60:	60da      	str	r2, [r3, #12]
 8007f62:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8007f64:	2300      	movs	r3, #0
 8007f66:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007f68:	4b24      	ldr	r3, [pc, #144]	; (8007ffc <MX_RTC_Init+0xac>)
 8007f6a:	4a25      	ldr	r2, [pc, #148]	; (8008000 <MX_RTC_Init+0xb0>)
 8007f6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007f6e:	4b23      	ldr	r3, [pc, #140]	; (8007ffc <MX_RTC_Init+0xac>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007f74:	4b21      	ldr	r3, [pc, #132]	; (8007ffc <MX_RTC_Init+0xac>)
 8007f76:	227f      	movs	r2, #127	; 0x7f
 8007f78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007f7a:	4b20      	ldr	r3, [pc, #128]	; (8007ffc <MX_RTC_Init+0xac>)
 8007f7c:	22ff      	movs	r2, #255	; 0xff
 8007f7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007f80:	4b1e      	ldr	r3, [pc, #120]	; (8007ffc <MX_RTC_Init+0xac>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007f86:	4b1d      	ldr	r3, [pc, #116]	; (8007ffc <MX_RTC_Init+0xac>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007f8c:	4b1b      	ldr	r3, [pc, #108]	; (8007ffc <MX_RTC_Init+0xac>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007f92:	481a      	ldr	r0, [pc, #104]	; (8007ffc <MX_RTC_Init+0xac>)
 8007f94:	f004 fc3a 	bl	800c80c <HAL_RTC_Init>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8007f9e:	f7fd fcef 	bl	8005980 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007fb6:	1d3b      	adds	r3, r7, #4
 8007fb8:	2201      	movs	r2, #1
 8007fba:	4619      	mov	r1, r3
 8007fbc:	480f      	ldr	r0, [pc, #60]	; (8007ffc <MX_RTC_Init+0xac>)
 8007fbe:	f004 fc9b 	bl	800c8f8 <HAL_RTC_SetTime>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8007fc8:	f7fd fcda 	bl	8005980 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007fdc:	463b      	mov	r3, r7
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4806      	ldr	r0, [pc, #24]	; (8007ffc <MX_RTC_Init+0xac>)
 8007fe4:	f004 fd22 	bl	800ca2c <HAL_RTC_SetDate>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8007fee:	f7fd fcc7 	bl	8005980 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007ff2:	bf00      	nop
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20005110 	.word	0x20005110
 8008000:	40002800 	.word	0x40002800

08008004 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800800c:	f107 0308 	add.w	r3, r7, #8
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	605a      	str	r2, [r3, #4]
 8008016:	609a      	str	r2, [r3, #8]
 8008018:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a0c      	ldr	r2, [pc, #48]	; (8008050 <HAL_RTC_MspInit+0x4c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d111      	bne.n	8008048 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008024:	2302      	movs	r3, #2
 8008026:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800802c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800802e:	f107 0308 	add.w	r3, r7, #8
 8008032:	4618      	mov	r0, r3
 8008034:	f004 fb08 	bl	800c648 <HAL_RCCEx_PeriphCLKConfig>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800803e:	f7fd fc9f 	bl	8005980 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008042:	4b04      	ldr	r3, [pc, #16]	; (8008054 <HAL_RTC_MspInit+0x50>)
 8008044:	2201      	movs	r2, #1
 8008046:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008048:	bf00      	nop
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	40002800 	.word	0x40002800
 8008054:	42470e3c 	.word	0x42470e3c

08008058 <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08a      	sub	sp, #40	; 0x28
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008060:	f107 0314 	add.w	r3, r7, #20
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	605a      	str	r2, [r3, #4]
 800806a:	609a      	str	r2, [r3, #8]
 800806c:	60da      	str	r2, [r3, #12]
 800806e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a2c      	ldr	r2, [pc, #176]	; (8008128 <HAL_SPI_MspInit+0xd0>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d151      	bne.n	800811e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800807a:	2300      	movs	r3, #0
 800807c:	613b      	str	r3, [r7, #16]
 800807e:	4b2b      	ldr	r3, [pc, #172]	; (800812c <HAL_SPI_MspInit+0xd4>)
 8008080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008082:	4a2a      	ldr	r2, [pc, #168]	; (800812c <HAL_SPI_MspInit+0xd4>)
 8008084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008088:	6453      	str	r3, [r2, #68]	; 0x44
 800808a:	4b28      	ldr	r3, [pc, #160]	; (800812c <HAL_SPI_MspInit+0xd4>)
 800808c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	4b24      	ldr	r3, [pc, #144]	; (800812c <HAL_SPI_MspInit+0xd4>)
 800809c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809e:	4a23      	ldr	r2, [pc, #140]	; (800812c <HAL_SPI_MspInit+0xd4>)
 80080a0:	f043 0301 	orr.w	r3, r3, #1
 80080a4:	6313      	str	r3, [r2, #48]	; 0x30
 80080a6:	4b21      	ldr	r3, [pc, #132]	; (800812c <HAL_SPI_MspInit+0xd4>)
 80080a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080b2:	2300      	movs	r3, #0
 80080b4:	60bb      	str	r3, [r7, #8]
 80080b6:	4b1d      	ldr	r3, [pc, #116]	; (800812c <HAL_SPI_MspInit+0xd4>)
 80080b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ba:	4a1c      	ldr	r2, [pc, #112]	; (800812c <HAL_SPI_MspInit+0xd4>)
 80080bc:	f043 0302 	orr.w	r3, r3, #2
 80080c0:	6313      	str	r3, [r2, #48]	; 0x30
 80080c2:	4b1a      	ldr	r3, [pc, #104]	; (800812c <HAL_SPI_MspInit+0xd4>)
 80080c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	60bb      	str	r3, [r7, #8]
 80080cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80080ce:	23c0      	movs	r3, #192	; 0xc0
 80080d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080d2:	2302      	movs	r3, #2
 80080d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080da:	2303      	movs	r3, #3
 80080dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80080de:	2305      	movs	r3, #5
 80080e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080e2:	f107 0314 	add.w	r3, r7, #20
 80080e6:	4619      	mov	r1, r3
 80080e8:	4811      	ldr	r0, [pc, #68]	; (8008130 <HAL_SPI_MspInit+0xd8>)
 80080ea:	f001 ffe1 	bl	800a0b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80080ee:	2308      	movs	r3, #8
 80080f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f2:	2302      	movs	r3, #2
 80080f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080fa:	2303      	movs	r3, #3
 80080fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80080fe:	2305      	movs	r3, #5
 8008100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8008102:	f107 0314 	add.w	r3, r7, #20
 8008106:	4619      	mov	r1, r3
 8008108:	480a      	ldr	r0, [pc, #40]	; (8008134 <HAL_SPI_MspInit+0xdc>)
 800810a:	f001 ffd1 	bl	800a0b0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800810e:	2200      	movs	r2, #0
 8008110:	2100      	movs	r1, #0
 8008112:	2023      	movs	r0, #35	; 0x23
 8008114:	f001 fb69 	bl	80097ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8008118:	2023      	movs	r0, #35	; 0x23
 800811a:	f001 fb82 	bl	8009822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800811e:	bf00      	nop
 8008120:	3728      	adds	r7, #40	; 0x28
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	40013000 	.word	0x40013000
 800812c:	40023800 	.word	0x40023800
 8008130:	40020000 	.word	0x40020000
 8008134:	40020400 	.word	0x40020400

08008138 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a0b      	ldr	r2, [pc, #44]	; (8008174 <HAL_SPI_MspDeInit+0x3c>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d110      	bne.n	800816c <HAL_SPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800814a:	4b0b      	ldr	r3, [pc, #44]	; (8008178 <HAL_SPI_MspDeInit+0x40>)
 800814c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814e:	4a0a      	ldr	r2, [pc, #40]	; (8008178 <HAL_SPI_MspDeInit+0x40>)
 8008150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008154:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8008156:	21c0      	movs	r1, #192	; 0xc0
 8008158:	4808      	ldr	r0, [pc, #32]	; (800817c <HAL_SPI_MspDeInit+0x44>)
 800815a:	f002 f945 	bl	800a3e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin);
 800815e:	2108      	movs	r1, #8
 8008160:	4807      	ldr	r0, [pc, #28]	; (8008180 <HAL_SPI_MspDeInit+0x48>)
 8008162:	f002 f941 	bl	800a3e8 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8008166:	2023      	movs	r0, #35	; 0x23
 8008168:	f001 fb69 	bl	800983e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40013000 	.word	0x40013000
 8008178:	40023800 	.word	0x40023800
 800817c:	40020000 	.word	0x40020000
 8008180:	40020400 	.word	0x40020400

08008184 <spi_flash_gpio_init>:

static uint32_t flash_last_operation = FLASH_OP_EMPTY;
static uint32_t current_die = 0;

static void spi_flash_gpio_init()
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800818a:	f107 030c 	add.w	r3, r7, #12
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	605a      	str	r2, [r3, #4]
 8008194:	609a      	str	r2, [r3, #8]
 8008196:	60da      	str	r2, [r3, #12]
 8008198:	611a      	str	r2, [r3, #16]

    __HAL_RCC_SPI1_CLK_ENABLE();
 800819a:	2300      	movs	r3, #0
 800819c:	60bb      	str	r3, [r7, #8]
 800819e:	4b33      	ldr	r3, [pc, #204]	; (800826c <spi_flash_gpio_init+0xe8>)
 80081a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a2:	4a32      	ldr	r2, [pc, #200]	; (800826c <spi_flash_gpio_init+0xe8>)
 80081a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081a8:	6453      	str	r3, [r2, #68]	; 0x44
 80081aa:	4b30      	ldr	r3, [pc, #192]	; (800826c <spi_flash_gpio_init+0xe8>)
 80081ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081b2:	60bb      	str	r3, [r7, #8]
 80081b4:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081b6:	2300      	movs	r3, #0
 80081b8:	607b      	str	r3, [r7, #4]
 80081ba:	4b2c      	ldr	r3, [pc, #176]	; (800826c <spi_flash_gpio_init+0xe8>)
 80081bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081be:	4a2b      	ldr	r2, [pc, #172]	; (800826c <spi_flash_gpio_init+0xe8>)
 80081c0:	f043 0301 	orr.w	r3, r3, #1
 80081c4:	6313      	str	r3, [r2, #48]	; 0x30
 80081c6:	4b29      	ldr	r3, [pc, #164]	; (800826c <spi_flash_gpio_init+0xe8>)
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	607b      	str	r3, [r7, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081d2:	2300      	movs	r3, #0
 80081d4:	603b      	str	r3, [r7, #0]
 80081d6:	4b25      	ldr	r3, [pc, #148]	; (800826c <spi_flash_gpio_init+0xe8>)
 80081d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081da:	4a24      	ldr	r2, [pc, #144]	; (800826c <spi_flash_gpio_init+0xe8>)
 80081dc:	f043 0302 	orr.w	r3, r3, #2
 80081e0:	6313      	str	r3, [r2, #48]	; 0x30
 80081e2:	4b22      	ldr	r3, [pc, #136]	; (800826c <spi_flash_gpio_init+0xe8>)
 80081e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	683b      	ldr	r3, [r7, #0]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_CS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80081ee:	2308      	movs	r3, #8
 80081f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081f2:	2302      	movs	r3, #2
 80081f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80081fa:	2301      	movs	r3, #1
 80081fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80081fe:	2305      	movs	r3, #5
 8008200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8008202:	f107 030c 	add.w	r3, r7, #12
 8008206:	4619      	mov	r1, r3
 8008208:	4819      	ldr	r0, [pc, #100]	; (8008270 <spi_flash_gpio_init+0xec>)
 800820a:	f001 ff51 	bl	800a0b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 800820e:	2380      	movs	r3, #128	; 0x80
 8008210:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008212:	2302      	movs	r3, #2
 8008214:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ__MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800821a:	2305      	movs	r3, #5
 800821c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800821e:	f107 030c 	add.w	r3, r7, #12
 8008222:	4619      	mov	r1, r3
 8008224:	4813      	ldr	r0, [pc, #76]	; (8008274 <spi_flash_gpio_init+0xf0>)
 8008226:	f001 ff43 	bl	800a0b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 800822a:	2340      	movs	r3, #64	; 0x40
 800822c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800822e:	2300      	movs	r3, #0
 8008230:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008232:	2300      	movs	r3, #0
 8008234:	617b      	str	r3, [r7, #20]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008236:	2305      	movs	r3, #5
 8008238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800823a:	f107 030c 	add.w	r3, r7, #12
 800823e:	4619      	mov	r1, r3
 8008240:	480c      	ldr	r0, [pc, #48]	; (8008274 <spi_flash_gpio_init+0xf0>)
 8008242:	f001 ff35 	bl	800a0b0 <HAL_GPIO_Init>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8008246:	2310      	movs	r3, #16
 8008248:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800824a:	2301      	movs	r3, #1
 800824c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800824e:	2300      	movs	r3, #0
 8008250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008252:	2301      	movs	r3, #1
 8008254:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008256:	f107 030c 	add.w	r3, r7, #12
 800825a:	4619      	mov	r1, r3
 800825c:	4805      	ldr	r0, [pc, #20]	; (8008274 <spi_flash_gpio_init+0xf0>)
 800825e:	f001 ff27 	bl	800a0b0 <HAL_GPIO_Init>
}
 8008262:	bf00      	nop
 8008264:	3720      	adds	r7, #32
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	40023800 	.word	0x40023800
 8008270:	40020400 	.word	0x40020400
 8008274:	40020000 	.word	0x40020000

08008278 <spi_flash_gpio_uninit>:

static void spi_flash_gpio_uninit()
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800827e:	1d3b      	adds	r3, r7, #4
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	605a      	str	r2, [r3, #4]
 8008286:	609a      	str	r2, [r3, #8]
 8008288:	60da      	str	r2, [r3, #12]
 800828a:	611a      	str	r2, [r3, #16]

    __HAL_RCC_SPI1_CLK_DISABLE();
 800828c:	4b1a      	ldr	r3, [pc, #104]	; (80082f8 <spi_flash_gpio_uninit+0x80>)
 800828e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008290:	4a19      	ldr	r2, [pc, #100]	; (80082f8 <spi_flash_gpio_uninit+0x80>)
 8008292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008296:	6453      	str	r3, [r2, #68]	; 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_CS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8008298:	2308      	movs	r3, #8
 800829a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800829c:	2300      	movs	r3, #0
 800829e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80082a4:	2305      	movs	r3, #5
 80082a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80082a8:	1d3b      	adds	r3, r7, #4
 80082aa:	4619      	mov	r1, r3
 80082ac:	4813      	ldr	r0, [pc, #76]	; (80082fc <spi_flash_gpio_uninit+0x84>)
 80082ae:	f001 feff 	bl	800a0b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 80082b2:	2380      	movs	r3, #128	; 0x80
 80082b4:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	60fb      	str	r3, [r7, #12]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ__MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80082ba:	2305      	movs	r3, #5
 80082bc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082be:	1d3b      	adds	r3, r7, #4
 80082c0:	4619      	mov	r1, r3
 80082c2:	480f      	ldr	r0, [pc, #60]	; (8008300 <spi_flash_gpio_uninit+0x88>)
 80082c4:	f001 fef4 	bl	800a0b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80082c8:	2340      	movs	r3, #64	; 0x40
 80082ca:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80082d0:	2305      	movs	r3, #5
 80082d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082d4:	1d3b      	adds	r3, r7, #4
 80082d6:	4619      	mov	r1, r3
 80082d8:	4809      	ldr	r0, [pc, #36]	; (8008300 <spi_flash_gpio_uninit+0x88>)
 80082da:	f001 fee9 	bl	800a0b0 <HAL_GPIO_Init>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80082de:	2310      	movs	r3, #16
 80082e0:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80082e6:	1d3b      	adds	r3, r7, #4
 80082e8:	4619      	mov	r1, r3
 80082ea:	4805      	ldr	r0, [pc, #20]	; (8008300 <spi_flash_gpio_uninit+0x88>)
 80082ec:	f001 fee0 	bl	800a0b0 <HAL_GPIO_Init>
}
 80082f0:	bf00      	nop
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	40023800 	.word	0x40023800
 80082fc:	40020400 	.word	0x40020400
 8008300:	40020000 	.word	0x40020000

08008304 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
//    GPIO_ResetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8008308:	2200      	movs	r2, #0
 800830a:	2110      	movs	r1, #16
 800830c:	4802      	ldr	r0, [pc, #8]	; (8008318 <spi_flash_select_chip+0x14>)
 800830e:	f002 f967 	bl	800a5e0 <HAL_GPIO_WritePin>
}
 8008312:	bf00      	nop
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	40020000 	.word	0x40020000

0800831c <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
//    GPIO_SetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8008320:	2201      	movs	r2, #1
 8008322:	2110      	movs	r1, #16
 8008324:	4802      	ldr	r0, [pc, #8]	; (8008330 <spi_flash_deselect_chip+0x14>)
 8008326:	f002 f95b 	bl	800a5e0 <HAL_GPIO_WritePin>
}
 800832a:	bf00      	nop
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	40020000 	.word	0x40020000

08008334 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 800833c:	4b1f      	ldr	r3, [pc, #124]	; (80083bc <spi_flash_get_baud_rate_prescaler+0x88>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a1f      	ldr	r2, [pc, #124]	; (80083c0 <spi_flash_get_baud_rate_prescaler+0x8c>)
 8008342:	fba2 2303 	umull	r2, r3, r2, r3
 8008346:	099b      	lsrs	r3, r3, #6
 8008348:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	085b      	lsrs	r3, r3, #1
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	429a      	cmp	r2, r3
 8008352:	d301      	bcc.n	8008358 <spi_flash_get_baud_rate_prescaler+0x24>
        return SPI_BAUDRATEPRESCALER_2;
 8008354:	2300      	movs	r3, #0
 8008356:	e02a      	b.n	80083ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	089b      	lsrs	r3, r3, #2
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	429a      	cmp	r2, r3
 8008360:	d301      	bcc.n	8008366 <spi_flash_get_baud_rate_prescaler+0x32>
        return SPI_BAUDRATEPRESCALER_4;
 8008362:	2308      	movs	r3, #8
 8008364:	e023      	b.n	80083ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	08db      	lsrs	r3, r3, #3
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	429a      	cmp	r2, r3
 800836e:	d301      	bcc.n	8008374 <spi_flash_get_baud_rate_prescaler+0x40>
        return SPI_BAUDRATEPRESCALER_8;
 8008370:	2310      	movs	r3, #16
 8008372:	e01c      	b.n	80083ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	091b      	lsrs	r3, r3, #4
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	429a      	cmp	r2, r3
 800837c:	d301      	bcc.n	8008382 <spi_flash_get_baud_rate_prescaler+0x4e>
        return SPI_BAUDRATEPRESCALER_16;
 800837e:	2318      	movs	r3, #24
 8008380:	e015      	b.n	80083ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	429a      	cmp	r2, r3
 800838a:	d301      	bcc.n	8008390 <spi_flash_get_baud_rate_prescaler+0x5c>
        return SPI_BAUDRATEPRESCALER_32;
 800838c:	2320      	movs	r3, #32
 800838e:	e00e      	b.n	80083ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	099b      	lsrs	r3, r3, #6
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	429a      	cmp	r2, r3
 8008398:	d301      	bcc.n	800839e <spi_flash_get_baud_rate_prescaler+0x6a>
        return SPI_BAUDRATEPRESCALER_64;
 800839a:	2328      	movs	r3, #40	; 0x28
 800839c:	e007      	b.n	80083ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	09db      	lsrs	r3, r3, #7
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d301      	bcc.n	80083ac <spi_flash_get_baud_rate_prescaler+0x78>
        return SPI_BAUDRATEPRESCALER_128;
 80083a8:	2330      	movs	r3, #48	; 0x30
 80083aa:	e000      	b.n	80083ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else
        return SPI_BAUDRATEPRESCALER_256;
 80083ac:	2338      	movs	r3, #56	; 0x38
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	20000138 	.word	0x20000138
 80083c0:	10624dd3 	.word	0x10624dd3

080083c4 <spi_flash_init>:

static int spi_flash_init(void *conf, uint32_t conf_size)
{
 80083c4:	b590      	push	{r4, r7, lr}
 80083c6:	b08f      	sub	sp, #60	; 0x3c
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef spi_init;

    if (conf_size < sizeof(spi_conf_t))
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b0e      	cmp	r3, #14
 80083d2:	d802      	bhi.n	80083da <spi_flash_init+0x16>
        return -1; 
 80083d4:	f04f 33ff 	mov.w	r3, #4294967295
 80083d8:	e041      	b.n	800845e <spi_flash_init+0x9a>
    spi_conf = *(spi_conf_t *)conf;
 80083da:	4b23      	ldr	r3, [pc, #140]	; (8008468 <spi_flash_init+0xa4>)
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	4614      	mov	r4, r2
 80083e0:	6820      	ldr	r0, [r4, #0]
 80083e2:	6861      	ldr	r1, [r4, #4]
 80083e4:	68a2      	ldr	r2, [r4, #8]
 80083e6:	c307      	stmia	r3!, {r0, r1, r2}
 80083e8:	89a2      	ldrh	r2, [r4, #12]
 80083ea:	7ba1      	ldrb	r1, [r4, #14]
 80083ec:	801a      	strh	r2, [r3, #0]
 80083ee:	460a      	mov	r2, r1
 80083f0:	709a      	strb	r2, [r3, #2]

    spi_flash_gpio_init();  // 初始化SPI Flash的GPIO引脚
 80083f2:	f7ff fec7 	bl	8008184 <spi_flash_gpio_init>

    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 80083f6:	f7ff ff91 	bl	800831c <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Init.Direction = SPI_DIRECTION_2LINES; // SPI双线全双工模式
 80083fa:	4b1c      	ldr	r3, [pc, #112]	; (800846c <spi_flash_init+0xa8>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	609a      	str	r2, [r3, #8]
    hspi1.Init.Mode = SPI_MODE_MASTER;           // 主模式
 8008400:	4b1a      	ldr	r3, [pc, #104]	; (800846c <spi_flash_init+0xa8>)
 8008402:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008406:	605a      	str	r2, [r3, #4]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;     // 数据大小为8位
 8008408:	4b18      	ldr	r3, [pc, #96]	; (800846c <spi_flash_init+0xa8>)
 800840a:	2200      	movs	r2, #0
 800840c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // 时钟极性为高电平时有效
 800840e:	4b17      	ldr	r3, [pc, #92]	; (800846c <spi_flash_init+0xa8>)
 8008410:	2202      	movs	r2, #2
 8008412:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;       // 时钟相位为第2个边沿（上升沿）有效
 8008414:	4b15      	ldr	r3, [pc, #84]	; (800846c <spi_flash_init+0xa8>)
 8008416:	2201      	movs	r2, #1
 8008418:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;               // 使用软件管理片选信号
 800841a:	4b14      	ldr	r3, [pc, #80]	; (800846c <spi_flash_init+0xa8>)
 800841c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008420:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq); // 设置波特率预分频值（假设spi_conf.freq是你的频率设置）
 8008422:	4b11      	ldr	r3, [pc, #68]	; (8008468 <spi_flash_init+0xa4>)
 8008424:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8008428:	4618      	mov	r0, r3
 800842a:	f7ff ff83 	bl	8008334 <spi_flash_get_baud_rate_prescaler>
 800842e:	4603      	mov	r3, r0
 8008430:	461a      	mov	r2, r3
 8008432:	4b0e      	ldr	r3, [pc, #56]	; (800846c <spi_flash_init+0xa8>)
 8008434:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;      // 数据传输的起始位为最高有效位
 8008436:	4b0d      	ldr	r3, [pc, #52]	; (800846c <spi_flash_init+0xa8>)
 8008438:	2200      	movs	r2, #0
 800843a:	621a      	str	r2, [r3, #32]
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE; // 禁用CRC校验
 800843c:	4b0b      	ldr	r3, [pc, #44]	; (800846c <spi_flash_init+0xa8>)
 800843e:	2200      	movs	r2, #0
 8008440:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;               // CRC校验多项式（不使用CRC时此值无关紧要）
 8008442:	4b0a      	ldr	r3, [pc, #40]	; (800846c <spi_flash_init+0xa8>)
 8008444:	220a      	movs	r2, #10
 8008446:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008448:	4808      	ldr	r0, [pc, #32]	; (800846c <spi_flash_init+0xa8>)
 800844a:	f004 fc14 	bl	800cc76 <HAL_SPI_Init>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <spi_flash_init+0x94>
    {
      Error_Handler();
 8008454:	f7fd fa94 	bl	8005980 <Error_Handler>
    }  // 根据以上配置初始化SPI1

    /* 使能SPI */
//    SPI_Cmd(SPI1, ENABLE);
    spi_flash_chip_init();  // 初始化SPI Flash芯片
 8008458:	f000 f958 	bl	800870c <spi_flash_chip_init>

    return 0;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	373c      	adds	r7, #60	; 0x3c
 8008462:	46bd      	mov	sp, r7
 8008464:	bd90      	pop	{r4, r7, pc}
 8008466:	bf00      	nop
 8008468:	20005188 	.word	0x20005188
 800846c:	20005130 	.word	0x20005130

08008470 <spi_flash_uninit>:

static void spi_flash_uninit()
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit();  // 反初始化SPI Flash的GPIO引脚
 8008474:	f7ff ff00 	bl	8008278 <spi_flash_gpio_uninit>

    /* 禁用SPI */
//    SPI_Cmd(SPI3, DISABLE);
//    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef* hspi);
    HAL_SPI_DeInit(&hspi1);
 8008478:	4802      	ldr	r0, [pc, #8]	; (8008484 <spi_flash_uninit+0x14>)
 800847a:	f004 fc85 	bl	800cd88 <HAL_SPI_DeInit>
}
 800847e:	bf00      	nop
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20005130 	.word	0x20005130

08008488 <spi_flash_send_byte>:

static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af02      	add	r7, sp, #8
 800848e:	4603      	mov	r3, r0
 8008490:	71fb      	strb	r3, [r7, #7]
  uint32_t timeout = 0x1000000;
 8008492:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008496:	60fb      	str	r3, [r7, #12]
  uint8_t rx_byte = 0X00;
 8008498:	2300      	movs	r3, #0
 800849a:	72fb      	strb	r3, [r7, #11]

  if(HAL_SPI_TransmitReceive(&hspi1, &byte, &rx_byte, 1, timeout) != HAL_OK)
 800849c:	f107 020b 	add.w	r2, r7, #11
 80084a0:	1df9      	adds	r1, r7, #7
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	2301      	movs	r3, #1
 80084a8:	4806      	ldr	r0, [pc, #24]	; (80084c4 <spi_flash_send_byte+0x3c>)
 80084aa:	f004 fc95 	bl	800cdd8 <HAL_SPI_TransmitReceive>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <spi_flash_send_byte+0x30>
   {
	   rx_byte = 0XFF;
 80084b4:	23ff      	movs	r3, #255	; 0xff
 80084b6:	72fb      	strb	r3, [r7, #11]
   }

  return rx_byte;
 80084b8:	7afb      	ldrb	r3, [r7, #11]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20005130 	.word	0x20005130

080084c8 <spi_flash_read_byte>:

static inline uint8_t spi_flash_read_byte()
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 80084cc:	20ff      	movs	r0, #255	; 0xff
 80084ce:	f7ff ffdb 	bl	8008488 <spi_flash_send_byte>
 80084d2:	4603      	mov	r3, r0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <spi_flash_set_feature>:

static void spi_flash_set_feature(uint8_t addr, uint8_t data)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	4603      	mov	r3, r0
 80084e0:	460a      	mov	r2, r1
 80084e2:	71fb      	strb	r3, [r7, #7]
 80084e4:	4613      	mov	r3, r2
 80084e6:	71bb      	strb	r3, [r7, #6]
    spi_flash_select_chip();  // 选中SPI Flash
 80084e8:	f7ff ff0c 	bl	8008304 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_SET_FEATURE);  // 发送设置特征的操作码
 80084ec:	201f      	movs	r0, #31
 80084ee:	f7ff ffcb 	bl	8008488 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7ff ffc7 	bl	8008488 <spi_flash_send_byte>
    spi_flash_send_byte(data);  // 发送数据
 80084fa:	79bb      	ldrb	r3, [r7, #6]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7ff ffc3 	bl	8008488 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8008502:	f7ff ff0b 	bl	800831c <spi_flash_deselect_chip>
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <spi_flash_get_feature>:

static void spi_flash_get_feature(uint8_t addr, uint8_t *data)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	4603      	mov	r3, r0
 8008516:	6039      	str	r1, [r7, #0]
 8008518:	71fb      	strb	r3, [r7, #7]
    spi_flash_select_chip();  // 选中SPI Flash
 800851a:	f7ff fef3 	bl	8008304 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_GET_FEATURE);  // 发送获取特征的操作码
 800851e:	200f      	movs	r0, #15
 8008520:	f7ff ffb2 	bl	8008488 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	4618      	mov	r0, r3
 8008528:	f7ff ffae 	bl	8008488 <spi_flash_send_byte>
    *data = spi_flash_read_byte();  // 读取一个字节的数据
 800852c:	f7ff ffcc 	bl	80084c8 <spi_flash_read_byte>
 8008530:	4603      	mov	r3, r0
 8008532:	461a      	mov	r2, r3
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	701a      	strb	r2, [r3, #0]
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8008538:	f7ff fef0 	bl	800831c <spi_flash_deselect_chip>
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
    uint32_t timeout = 0x1000000;  // 超时时间
 800854a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800854e:	607b      	str	r3, [r7, #4]
    uint8_t status;

    do {
        spi_flash_get_feature(_SPI_NAND_ADDR_STATUS, &status);  // 获取状态
 8008550:	1cfb      	adds	r3, r7, #3
 8008552:	4619      	mov	r1, r3
 8008554:	20c0      	movs	r0, #192	; 0xc0
 8008556:	f7ff ffda 	bl	800850e <spi_flash_get_feature>
    } while((status & _SPI_NAND_VAL_OIP) && timeout);
 800855a:	78fb      	ldrb	r3, [r7, #3]
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <spi_flash_read_status+0x26>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f2      	bne.n	8008550 <spi_flash_read_status+0xc>

    if (!timeout)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <spi_flash_read_status+0x30>
        return FLASH_STATUS_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e02b      	b.n	80085cc <spi_flash_read_status+0x88>

    switch(flash_last_operation){
 8008574:	4b17      	ldr	r3, [pc, #92]	; (80085d4 <spi_flash_read_status+0x90>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b03      	cmp	r3, #3
 800857a:	d014      	beq.n	80085a6 <spi_flash_read_status+0x62>
 800857c:	2b03      	cmp	r3, #3
 800857e:	d81d      	bhi.n	80085bc <spi_flash_read_status+0x78>
 8008580:	2b01      	cmp	r3, #1
 8008582:	d002      	beq.n	800858a <spi_flash_read_status+0x46>
 8008584:	2b02      	cmp	r3, #2
 8008586:	d007      	beq.n	8008598 <spi_flash_read_status+0x54>
                return FLASH_STATUS_ERROR;
            break;
        case FLASH_OP_SPARE:
        case FLASH_OP_EMPTY:
        default:
            break;
 8008588:	e018      	b.n	80085bc <spi_flash_read_status+0x78>
            if(status & _SPI_NAND_VAL_ERASE_FAIL)
 800858a:	78fb      	ldrb	r3, [r7, #3]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b00      	cmp	r3, #0
 8008592:	d015      	beq.n	80085c0 <spi_flash_read_status+0x7c>
                return FLASH_STATUS_ERROR;
 8008594:	2302      	movs	r3, #2
 8008596:	e019      	b.n	80085cc <spi_flash_read_status+0x88>
            if(status & _SPI_NAND_VAL_PROGRAM_FAIL)
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	f003 0308 	and.w	r3, r3, #8
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d010      	beq.n	80085c4 <spi_flash_read_status+0x80>
                return FLASH_STATUS_ERROR;
 80085a2:	2302      	movs	r3, #2
 80085a4:	e012      	b.n	80085cc <spi_flash_read_status+0x88>
            if((status & spi_conf.ecc_err_bits_mask) == spi_conf.ecc_err_bits_state)
 80085a6:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <spi_flash_read_status+0x94>)
 80085a8:	799a      	ldrb	r2, [r3, #6]
 80085aa:	78fb      	ldrb	r3, [r7, #3]
 80085ac:	4013      	ands	r3, r2
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <spi_flash_read_status+0x94>)
 80085b2:	79db      	ldrb	r3, [r3, #7]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d107      	bne.n	80085c8 <spi_flash_read_status+0x84>
                return FLASH_STATUS_ERROR;
 80085b8:	2302      	movs	r3, #2
 80085ba:	e007      	b.n	80085cc <spi_flash_read_status+0x88>
            break;
 80085bc:	bf00      	nop
 80085be:	e004      	b.n	80085ca <spi_flash_read_status+0x86>
            break;
 80085c0:	bf00      	nop
 80085c2:	e002      	b.n	80085ca <spi_flash_read_status+0x86>
            break;
 80085c4:	bf00      	nop
 80085c6:	e000      	b.n	80085ca <spi_flash_read_status+0x86>
            break;
 80085c8:	bf00      	nop
    }
    return FLASH_STATUS_READY;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20005198 	.word	0x20005198
 80085d8:	20005188 	.word	0x20005188

080085dc <spi_flash_select_die_cmd>:

// 选择 SPI Flash 的芯片
static void spi_flash_select_die_cmd(uint32_t die)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
    switch(spi_conf.die_select_type) {
 80085e4:	4b18      	ldr	r3, [pc, #96]	; (8008648 <spi_flash_select_die_cmd+0x6c>)
 80085e6:	7a9b      	ldrb	r3, [r3, #10]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d002      	beq.n	80085f2 <spi_flash_select_die_cmd+0x16>
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d00d      	beq.n	800860c <spi_flash_select_die_cmd+0x30>
        }
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
        break;
    }
    default:
        break;
 80085f0:	e026      	b.n	8008640 <spi_flash_select_die_cmd+0x64>
        spi_flash_select_chip();  // 选择 Flash 芯片
 80085f2:	f7ff fe87 	bl	8008304 <spi_flash_select_chip>
        spi_flash_send_byte(_SPI_NAND_OP_DIE_SELECT);  // 发送选择芯片的指令
 80085f6:	20c2      	movs	r0, #194	; 0xc2
 80085f8:	f7ff ff46 	bl	8008488 <spi_flash_send_byte>
        spi_flash_send_byte(die);  // 发送芯片编号
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff ff41 	bl	8008488 <spi_flash_send_byte>
        spi_flash_deselect_chip();  // 取消选择芯片
 8008606:	f7ff fe89 	bl	800831c <spi_flash_deselect_chip>
        break;
 800860a:	e019      	b.n	8008640 <spi_flash_select_die_cmd+0x64>
        spi_flash_get_feature(_SPI_NAND_ADDR_FEATURE_4, &feature);  // 读取 Flash 的特征值
 800860c:	f107 030f 	add.w	r3, r7, #15
 8008610:	4619      	mov	r1, r3
 8008612:	20d0      	movs	r0, #208	; 0xd0
 8008614:	f7ff ff7b 	bl	800850e <spi_flash_get_feature>
        if(die == 0) {
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d105      	bne.n	800862a <spi_flash_select_die_cmd+0x4e>
            feature &= ~(0x40);  // 清除特征值中的某位
 800861e:	7bfb      	ldrb	r3, [r7, #15]
 8008620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008624:	b2db      	uxtb	r3, r3
 8008626:	73fb      	strb	r3, [r7, #15]
 8008628:	e004      	b.n	8008634 <spi_flash_select_die_cmd+0x58>
            feature |= 0x40;  // 设置特征值中的某位
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008630:	b2db      	uxtb	r3, r3
 8008632:	73fb      	strb	r3, [r7, #15]
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	4619      	mov	r1, r3
 8008638:	20d0      	movs	r0, #208	; 0xd0
 800863a:	f7ff ff4d 	bl	80084d8 <spi_flash_set_feature>
        break;
 800863e:	bf00      	nop
    }
}
 8008640:	bf00      	nop
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	20005188 	.word	0x20005188

0800864c <spi_flash_select_die>:

// 选择 SPI Flash 的 die（芯片）（用于多芯片的情况）
static void spi_flash_select_die(uint32_t page)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
    uint32_t die = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]
    if(spi_conf.die_select_type) {
 8008658:	4b0f      	ldr	r3, [pc, #60]	; (8008698 <spi_flash_select_die+0x4c>)
 800865a:	7a9b      	ldrb	r3, [r3, #10]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d017      	beq.n	8008690 <spi_flash_select_die+0x44>
        if(!spi_conf.plane_select_have)
 8008660:	4b0d      	ldr	r3, [pc, #52]	; (8008698 <spi_flash_select_die+0x4c>)
 8008662:	7a5b      	ldrb	r3, [r3, #9]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d104      	bne.n	8008672 <spi_flash_select_die+0x26>
            die = ((page >> 16) & 0xff);  // 计算芯片编号
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	0c1b      	lsrs	r3, r3, #16
 800866c:	b2db      	uxtb	r3, r3
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	e003      	b.n	800867a <spi_flash_select_die+0x2e>
        else
            die = ((page >> 17) & 0xff);  // 计算芯片编号
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	0c5b      	lsrs	r3, r3, #17
 8008676:	b2db      	uxtb	r3, r3
 8008678:	60fb      	str	r3, [r7, #12]
        if (current_die != die) {
 800867a:	4b08      	ldr	r3, [pc, #32]	; (800869c <spi_flash_select_die+0x50>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	429a      	cmp	r2, r3
 8008682:	d005      	beq.n	8008690 <spi_flash_select_die+0x44>
            current_die = die;
 8008684:	4a05      	ldr	r2, [pc, #20]	; (800869c <spi_flash_select_die+0x50>)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6013      	str	r3, [r2, #0]
            spi_flash_select_die_cmd(die);  // 选择芯片
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f7ff ffa6 	bl	80085dc <spi_flash_select_die_cmd>
        }
    }
}
 8008690:	bf00      	nop
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	20005188 	.word	0x20005188
 800869c:	2000519c 	.word	0x2000519c

080086a0 <spi_flash_read_id>:

// 读取 SPI Flash 的 ID（厂商ID和设备ID）
static void spi_flash_read_id(chip_id_t *chip_id)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();  // 选择 Flash 芯片
 80086a8:	f7ff fe2c 	bl	8008304 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_READ_ID);  // 发送读取 ID 的指令
 80086ac:	209f      	movs	r0, #159	; 0x9f
 80086ae:	f7ff feeb 	bl	8008488 <spi_flash_send_byte>
    spi_flash_send_byte(_SPI_NAND_ADDR_MANUFACTURE_ID);  // 发送读取厂商ID的指令
 80086b2:	2000      	movs	r0, #0
 80086b4:	f7ff fee8 	bl	8008488 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();  // 读取厂商ID
 80086b8:	f7ff ff06 	bl	80084c8 <spi_flash_read_byte>
 80086bc:	4603      	mov	r3, r0
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();  // 读取设备ID
 80086c4:	f7ff ff00 	bl	80084c8 <spi_flash_read_byte>
 80086c8:	4603      	mov	r3, r0
 80086ca:	461a      	mov	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();  // 读取第三个ID
 80086d0:	f7ff fefa 	bl	80084c8 <spi_flash_read_byte>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();  // 读取第四个ID
 80086dc:	f7ff fef4 	bl	80084c8 <spi_flash_read_byte>
 80086e0:	4603      	mov	r3, r0
 80086e2:	461a      	mov	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();  // 读取第五个ID
 80086e8:	f7ff feee 	bl	80084c8 <spi_flash_read_byte>
 80086ec:	4603      	mov	r3, r0
 80086ee:	461a      	mov	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();  // 读取第六个ID
 80086f4:	f7ff fee8 	bl	80084c8 <spi_flash_read_byte>
 80086f8:	4603      	mov	r3, r0
 80086fa:	461a      	mov	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();  // 取消选择芯片
 8008700:	f7ff fe0c 	bl	800831c <spi_flash_deselect_chip>
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <spi_flash_chip_init>:

// SPI Flash 初始化
static void spi_flash_chip_init(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	af00      	add	r7, sp, #0
    if(spi_conf.die_select_type) {
 8008710:	4b19      	ldr	r3, [pc, #100]	; (8008778 <spi_flash_chip_init+0x6c>)
 8008712:	7a9b      	ldrb	r3, [r3, #10]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d019      	beq.n	800874c <spi_flash_chip_init+0x40>
        spi_flash_select_die_cmd(0);  // 选择第一个芯片
 8008718:	2000      	movs	r0, #0
 800871a:	f7ff ff5f 	bl	80085dc <spi_flash_select_die_cmd>
        if(spi_conf.mode_data != UNDEFINED_CMD)
 800871e:	4b16      	ldr	r3, [pc, #88]	; (8008778 <spi_flash_chip_init+0x6c>)
 8008720:	791b      	ldrb	r3, [r3, #4]
 8008722:	2bff      	cmp	r3, #255	; 0xff
 8008724:	d005      	beq.n	8008732 <spi_flash_chip_init+0x26>
            spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 8008726:	4b14      	ldr	r3, [pc, #80]	; (8008778 <spi_flash_chip_init+0x6c>)
 8008728:	791b      	ldrb	r3, [r3, #4]
 800872a:	4619      	mov	r1, r3
 800872c:	20b0      	movs	r0, #176	; 0xb0
 800872e:	f7ff fed3 	bl	80084d8 <spi_flash_set_feature>
        if(spi_conf.unlock_data != UNDEFINED_CMD)
 8008732:	4b11      	ldr	r3, [pc, #68]	; (8008778 <spi_flash_chip_init+0x6c>)
 8008734:	795b      	ldrb	r3, [r3, #5]
 8008736:	2bff      	cmp	r3, #255	; 0xff
 8008738:	d005      	beq.n	8008746 <spi_flash_chip_init+0x3a>
            spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 800873a:	4b0f      	ldr	r3, [pc, #60]	; (8008778 <spi_flash_chip_init+0x6c>)
 800873c:	795b      	ldrb	r3, [r3, #5]
 800873e:	4619      	mov	r1, r3
 8008740:	20a0      	movs	r0, #160	; 0xa0
 8008742:	f7ff fec9 	bl	80084d8 <spi_flash_set_feature>
        spi_flash_select_die_cmd(1);  // 选择第二个芯片
 8008746:	2001      	movs	r0, #1
 8008748:	f7ff ff48 	bl	80085dc <spi_flash_select_die_cmd>
    }
    if(spi_conf.mode_data != UNDEFINED_CMD)
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <spi_flash_chip_init+0x6c>)
 800874e:	791b      	ldrb	r3, [r3, #4]
 8008750:	2bff      	cmp	r3, #255	; 0xff
 8008752:	d005      	beq.n	8008760 <spi_flash_chip_init+0x54>
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 8008754:	4b08      	ldr	r3, [pc, #32]	; (8008778 <spi_flash_chip_init+0x6c>)
 8008756:	791b      	ldrb	r3, [r3, #4]
 8008758:	4619      	mov	r1, r3
 800875a:	20b0      	movs	r0, #176	; 0xb0
 800875c:	f7ff febc 	bl	80084d8 <spi_flash_set_feature>
    if(spi_conf.unlock_data != UNDEFINED_CMD)
 8008760:	4b05      	ldr	r3, [pc, #20]	; (8008778 <spi_flash_chip_init+0x6c>)
 8008762:	795b      	ldrb	r3, [r3, #5]
 8008764:	2bff      	cmp	r3, #255	; 0xff
 8008766:	d005      	beq.n	8008774 <spi_flash_chip_init+0x68>
        spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 8008768:	4b03      	ldr	r3, [pc, #12]	; (8008778 <spi_flash_chip_init+0x6c>)
 800876a:	795b      	ldrb	r3, [r3, #5]
 800876c:	4619      	mov	r1, r3
 800876e:	20a0      	movs	r0, #160	; 0xa0
 8008770:	f7ff feb2 	bl	80084d8 <spi_flash_set_feature>
}
 8008774:	bf00      	nop
 8008776:	bd80      	pop	{r7, pc}
 8008778:	20005188 	.word	0x20005188

0800877c <spi_flash_write_enable>:

// 启用 Flash 的写入使能
static void spi_flash_write_enable()
{
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
    spi_flash_select_chip();  // 选择 Flash 芯片
 8008780:	f7ff fdc0 	bl	8008304 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_WRITE_ENABLE);  // 发送写使能指令
 8008784:	2006      	movs	r0, #6
 8008786:	f7ff fe7f 	bl	8008488 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择芯片
 800878a:	f7ff fdc7 	bl	800831c <spi_flash_deselect_chip>
}
 800878e:	bf00      	nop
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <spi_flash_program_load>:

// 向 Flash 写入数据
static void spi_flash_program_load(uint8_t *buf, uint32_t page_size, uint32_t page)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t addr = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	613b      	str	r3, [r7, #16]
    spi_flash_select_chip();  // 选择 Flash 芯片
 80087a4:	f7ff fdae 	bl	8008304 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_LOAD_SINGLE);  // 发送写入数据的指令
 80087a8:	2002      	movs	r0, #2
 80087aa:	f7ff fe6d 	bl	8008488 <spi_flash_send_byte>

    if(spi_conf.plane_select_have) {
 80087ae:	4b1f      	ldr	r3, [pc, #124]	; (800882c <spi_flash_program_load+0x98>)
 80087b0:	7a5b      	ldrb	r3, [r3, #9]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d018      	beq.n	80087e8 <spi_flash_program_load+0x54>
        if((page >> 6)& (0x1))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d009      	beq.n	80087d4 <spi_flash_program_load+0x40>
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) | (0x10));  // 发送地址的第二个字节
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	0a1b      	lsrs	r3, r3, #8
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	f043 0310 	orr.w	r3, r3, #16
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff fe5b 	bl	8008488 <spi_flash_send_byte>
 80087d2:	e00f      	b.n	80087f4 <spi_flash_program_load+0x60>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) & (0xef));  // 发送地址的第二个字节
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	0a1b      	lsrs	r3, r3, #8
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f023 0310 	bic.w	r3, r3, #16
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff fe51 	bl	8008488 <spi_flash_send_byte>
 80087e6:	e005      	b.n	80087f4 <spi_flash_program_load+0x60>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(addr));  // 发送地址的第二个字节
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	0a1b      	lsrs	r3, r3, #8
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fe4a 	bl	8008488 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(addr));  // 发送地址的第一个字节
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7ff fe45 	bl	8008488 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	e009      	b.n	8008818 <spi_flash_program_load+0x84>
        spi_flash_send_byte(buf[i]);  // 逐字节写入数据
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	4413      	add	r3, r2
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	4618      	mov	r0, r3
 800880e:	f7ff fe3b 	bl	8008488 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	3301      	adds	r3, #1
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	429a      	cmp	r2, r3
 800881e:	d3f1      	bcc.n	8008804 <spi_flash_program_load+0x70>

    spi_flash_deselect_chip();  // 取消选择芯片
 8008820:	f7ff fd7c 	bl	800831c <spi_flash_deselect_chip>
}
 8008824:	bf00      	nop
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	20005188 	.word	0x20005188

08008830 <spi_flash_write_page_async>:

// 异步写入页面数据到闪存
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 800883c:	68b8      	ldr	r0, [r7, #8]
 800883e:	f7ff ff05 	bl	800864c <spi_flash_select_die>

    spi_flash_program_load(buf, page_size, page);  // 加载数据到写入缓冲区
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	6879      	ldr	r1, [r7, #4]
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7ff ffa4 	bl	8008794 <spi_flash_program_load>

    spi_flash_write_enable();  // 使能写入
 800884c:	f7ff ff96 	bl	800877c <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 8008850:	f7ff fd58 	bl	8008304 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_EXECUTE);  // 发送写入执行命令
 8008854:	2010      	movs	r0, #16
 8008856:	f7ff fe17 	bl	8008488 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_WRITE;  // 记录上一次操作为写入
 800885a:	4b0d      	ldr	r3, [pc, #52]	; (8008890 <spi_flash_write_page_async+0x60>)
 800885c:	2202      	movs	r2, #2
 800885e:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	0c1b      	lsrs	r3, r3, #16
 8008864:	b2db      	uxtb	r3, r3
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff fe0e 	bl	8008488 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	0a1b      	lsrs	r3, r3, #8
 8008870:	b2db      	uxtb	r3, r3
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff fe08 	bl	8008488 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	b2db      	uxtb	r3, r3
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff fe03 	bl	8008488 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8008882:	f7ff fd4b 	bl	800831c <spi_flash_deselect_chip>
    // spi_flash_wait_operation_end();  // 等待操作结束

    // spi_flash_write_disable();  // 禁用写入
}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	20005198 	.word	0x20005198

08008894 <spi_flash_load_page_into_cache>:

// 将页面数据加载到缓存中
static uint32_t spi_flash_load_page_into_cache(uint32_t page)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff fed5 	bl	800864c <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 80088a2:	f7ff fd2f 	bl	8008304 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 80088a6:	2013      	movs	r0, #19
 80088a8:	f7ff fdee 	bl	8008488 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_READ;  // 记录上一次操作为读取
 80088ac:	4b0e      	ldr	r3, [pc, #56]	; (80088e8 <spi_flash_load_page_into_cache+0x54>)
 80088ae:	2203      	movs	r2, #3
 80088b0:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	0c1b      	lsrs	r3, r3, #16
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff fde5 	bl	8008488 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	0a1b      	lsrs	r3, r3, #8
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff fddf 	bl	8008488 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7ff fdda 	bl	8008488 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 80088d4:	f7ff fd22 	bl	800831c <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 80088d8:	f7ff fe34 	bl	8008544 <spi_flash_read_status>
 80088dc:	4603      	mov	r3, r0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20005198 	.word	0x20005198

080088ec <spi_flash_read_page>:

// 读取页面数据
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t data_size)
{
 80088ec:	b590      	push	{r4, r7, lr}
 80088ee:	b089      	sub	sp, #36	; 0x24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
    uint32_t status = spi_flash_load_page_into_cache(page);  // 将页面数据加载到缓存中
 80088f8:	68b8      	ldr	r0, [r7, #8]
 80088fa:	f7ff ffcb 	bl	8008894 <spi_flash_load_page_into_cache>
 80088fe:	61b8      	str	r0, [r7, #24]
    uint32_t data_offset = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]

    spi_flash_select_chip();  // 选择闪存芯片
 8008904:	f7ff fcfe 	bl	8008304 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8008908:	2003      	movs	r0, #3
 800890a:	f7ff fdbd 	bl	8008488 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 800890e:	4b27      	ldr	r3, [pc, #156]	; (80089ac <spi_flash_read_page+0xc0>)
 8008910:	7a1b      	ldrb	r3, [r3, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <spi_flash_read_page+0x30>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8008916:	20ff      	movs	r0, #255	; 0xff
 8008918:	f7ff fdb6 	bl	8008488 <spi_flash_send_byte>

    if (spi_conf.plane_select_have) {
 800891c:	4b23      	ldr	r3, [pc, #140]	; (80089ac <spi_flash_read_page+0xc0>)
 800891e:	7a5b      	ldrb	r3, [r3, #9]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d018      	beq.n	8008956 <spi_flash_read_page+0x6a>
        if ((page >> 6) & (0x1))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800892a:	2b00      	cmp	r3, #0
 800892c:	d009      	beq.n	8008942 <spi_flash_read_page+0x56>
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) | (0x10));  // 发送地址的第二个周期
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	0a1b      	lsrs	r3, r3, #8
 8008932:	b2db      	uxtb	r3, r3
 8008934:	f043 0310 	orr.w	r3, r3, #16
 8008938:	b2db      	uxtb	r3, r3
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff fda4 	bl	8008488 <spi_flash_send_byte>
 8008940:	e00f      	b.n	8008962 <spi_flash_read_page+0x76>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) & (0xef));  // 发送地址的第二个周期
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	0a1b      	lsrs	r3, r3, #8
 8008946:	b2db      	uxtb	r3, r3
 8008948:	f023 0310 	bic.w	r3, r3, #16
 800894c:	b2db      	uxtb	r3, r3
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff fd9a 	bl	8008488 <spi_flash_send_byte>
 8008954:	e005      	b.n	8008962 <spi_flash_read_page+0x76>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset));  // 发送地址的第二个周期
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	0a1b      	lsrs	r3, r3, #8
 800895a:	b2db      	uxtb	r3, r3
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff fd93 	bl	8008488 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(data_offset));  // 发送地址的第一个周期
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	b2db      	uxtb	r3, r3
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff fd8e 	bl	8008488 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 800896c:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <spi_flash_read_page+0xc0>)
 800896e:	7a1b      	ldrb	r3, [r3, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d102      	bne.n	800897a <spi_flash_read_page+0x8e>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 8008974:	20ff      	movs	r0, #255	; 0xff
 8008976:	f7ff fd87 	bl	8008488 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
 800897e:	e009      	b.n	8008994 <spi_flash_read_page+0xa8>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	18d4      	adds	r4, r2, r3
 8008986:	f7ff fd9f 	bl	80084c8 <spi_flash_read_byte>
 800898a:	4603      	mov	r3, r0
 800898c:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	3301      	adds	r3, #1
 8008992:	61fb      	str	r3, [r7, #28]
 8008994:	69fa      	ldr	r2, [r7, #28]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	429a      	cmp	r2, r3
 800899a:	d3f1      	bcc.n	8008980 <spi_flash_read_page+0x94>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 800899c:	f7ff fcbe 	bl	800831c <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 80089a0:	69bb      	ldr	r3, [r7, #24]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3724      	adds	r7, #36	; 0x24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd90      	pop	{r4, r7, pc}
 80089aa:	bf00      	nop
 80089ac:	20005188 	.word	0x20005188

080089b0 <spi_flash_read_spare_data>:

// 读取备用数据
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 80089b0:	b590      	push	{r4, r7, lr}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	603b      	str	r3, [r7, #0]
    uint32_t status;

    spi_flash_select_die(page);  // 选择闪存芯片
 80089be:	68b8      	ldr	r0, [r7, #8]
 80089c0:	f7ff fe44 	bl	800864c <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 80089c4:	f7ff fc9e 	bl	8008304 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 80089c8:	2013      	movs	r0, #19
 80089ca:	f7ff fd5d 	bl	8008488 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_SPARE;  // 记录上一次操作为备用
 80089ce:	4b38      	ldr	r3, [pc, #224]	; (8008ab0 <spi_flash_read_spare_data+0x100>)
 80089d0:	2204      	movs	r2, #4
 80089d2:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	0c1b      	lsrs	r3, r3, #16
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff fd54 	bl	8008488 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	0a1b      	lsrs	r3, r3, #8
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff fd4e 	bl	8008488 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff fd49 	bl	8008488 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 80089f6:	f7ff fc91 	bl	800831c <spi_flash_deselect_chip>
    status = spi_flash_read_status();  // 读取状态寄存器的值
 80089fa:	f7ff fda3 	bl	8008544 <spi_flash_read_status>
 80089fe:	6138      	str	r0, [r7, #16]

    spi_flash_select_chip();  // 选择闪存芯片
 8008a00:	f7ff fc80 	bl	8008304 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8008a04:	2003      	movs	r0, #3
 8008a06:	f7ff fd3f 	bl	8008488 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 8008a0a:	4b2a      	ldr	r3, [pc, #168]	; (8008ab4 <spi_flash_read_spare_data+0x104>)
 8008a0c:	7a1b      	ldrb	r3, [r3, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <spi_flash_read_spare_data+0x68>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8008a12:	20ff      	movs	r0, #255	; 0xff
 8008a14:	f7ff fd38 	bl	8008488 <spi_flash_send_byte>

    offset += spi_conf.spare_offset;
 8008a18:	4b26      	ldr	r3, [pc, #152]	; (8008ab4 <spi_flash_read_spare_data+0x104>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	4413      	add	r3, r2
 8008a20:	607b      	str	r3, [r7, #4]
    if (spi_conf.plane_select_have) {
 8008a22:	4b24      	ldr	r3, [pc, #144]	; (8008ab4 <spi_flash_read_spare_data+0x104>)
 8008a24:	7a5b      	ldrb	r3, [r3, #9]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d018      	beq.n	8008a5c <spi_flash_read_spare_data+0xac>
        if ((page >> 6) & (0x1))
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d009      	beq.n	8008a48 <spi_flash_read_spare_data+0x98>
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) | (0x10));  // 发送地址的第二个周期
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	0a1b      	lsrs	r3, r3, #8
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	f043 0310 	orr.w	r3, r3, #16
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7ff fd21 	bl	8008488 <spi_flash_send_byte>
 8008a46:	e00f      	b.n	8008a68 <spi_flash_read_spare_data+0xb8>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) & (0xef));  // 发送地址的第二个周期
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	0a1b      	lsrs	r3, r3, #8
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f023 0310 	bic.w	r3, r3, #16
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7ff fd17 	bl	8008488 <spi_flash_send_byte>
 8008a5a:	e005      	b.n	8008a68 <spi_flash_read_spare_data+0xb8>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(offset));  // 发送地址的第二个周期
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	0a1b      	lsrs	r3, r3, #8
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff fd10 	bl	8008488 <spi_flash_send_byte>
    }
    spi_flash_send_byte(ADDR_1st_CYCLE(offset));  // 发送地址的第一个周期
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7ff fd0b 	bl	8008488 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 8008a72:	4b10      	ldr	r3, [pc, #64]	; (8008ab4 <spi_flash_read_spare_data+0x104>)
 8008a74:	7a1b      	ldrb	r3, [r3, #8]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d102      	bne.n	8008a80 <spi_flash_read_spare_data+0xd0>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 8008a7a:	20ff      	movs	r0, #255	; 0xff
 8008a7c:	f7ff fd04 	bl	8008488 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 8008a80:	2300      	movs	r3, #0
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	e009      	b.n	8008a9a <spi_flash_read_spare_data+0xea>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	18d4      	adds	r4, r2, r3
 8008a8c:	f7ff fd1c 	bl	80084c8 <spi_flash_read_byte>
 8008a90:	4603      	mov	r3, r0
 8008a92:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	3301      	adds	r3, #1
 8008a98:	617b      	str	r3, [r7, #20]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d3f1      	bcc.n	8008a86 <spi_flash_read_spare_data+0xd6>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8008aa2:	f7ff fc3b 	bl	800831c <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8008aa6:	693b      	ldr	r3, [r7, #16]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	371c      	adds	r7, #28
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd90      	pop	{r4, r7, pc}
 8008ab0:	20005198 	.word	0x20005198
 8008ab4:	20005188 	.word	0x20005188

08008ab8 <spi_flash_erase_block>:

// 擦除块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff fdc3 	bl	800864c <spi_flash_select_die>

    spi_flash_write_enable();  // 使能写入
 8008ac6:	f7ff fe59 	bl	800877c <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 8008aca:	f7ff fc1b 	bl	8008304 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_BLOCK_ERASE);  // 发送块擦除命令
 8008ace:	20d8      	movs	r0, #216	; 0xd8
 8008ad0:	f7ff fcda 	bl	8008488 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_ERASE;  // 记录上一次操作为擦除
 8008ad4:	4b0e      	ldr	r3, [pc, #56]	; (8008b10 <spi_flash_erase_block+0x58>)
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	0c1b      	lsrs	r3, r3, #16
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fcd1 	bl	8008488 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	0a1b      	lsrs	r3, r3, #8
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7ff fccb 	bl	8008488 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff fcc6 	bl	8008488 <spi_flash_send_byte>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8008afc:	f7ff fc0e 	bl	800831c <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8008b00:	f7ff fd20 	bl	8008544 <spi_flash_read_status>
 8008b04:	4603      	mov	r3, r0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20005198 	.word	0x20005198

08008b14 <spi_flash_is_bb_supported>:

// 检查是否支持坏块检测
static inline bool spi_flash_is_bb_supported()
{
 8008b14:	b480      	push	{r7}
 8008b16:	af00      	add	r7, sp, #0
    return true;
 8008b18:	2301      	movs	r3, #1
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <spi_flash_gpio_init>:

static spi_conf_t spi_conf;

// 初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_init()
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
	HAL_SPI_MspInit(&hspi1);
 8008b28:	4802      	ldr	r0, [pc, #8]	; (8008b34 <spi_flash_gpio_init+0x10>)
 8008b2a:	f7ff fa95 	bl	8008058 <HAL_SPI_MspInit>
}
 8008b2e:	bf00      	nop
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20005130 	.word	0x20005130

08008b38 <spi_flash_gpio_uninit>:

// 取消初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_uninit()
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
	HAL_SPI_MspDeInit(&hspi1);
 8008b3c:	4802      	ldr	r0, [pc, #8]	; (8008b48 <spi_flash_gpio_uninit+0x10>)
 8008b3e:	f7ff fafb 	bl	8008138 <HAL_SPI_MspDeInit>
}
 8008b42:	bf00      	nop
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20005130 	.word	0x20005130

08008b4c <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
//    GPIO_ResetBits(GPIOA, SPI_FLASH_CS_PIN);
   	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8008b50:	2200      	movs	r2, #0
 8008b52:	2110      	movs	r1, #16
 8008b54:	4802      	ldr	r0, [pc, #8]	; (8008b60 <spi_flash_select_chip+0x14>)
 8008b56:	f001 fd43 	bl	800a5e0 <HAL_GPIO_WritePin>
}
 8008b5a:	bf00      	nop
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	40020000 	.word	0x40020000

08008b64 <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
//    GPIO_SetBits(GPIOA, SPI_FLASH_CS_PIN);
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8008b68:	2201      	movs	r2, #1
 8008b6a:	2110      	movs	r1, #16
 8008b6c:	4802      	ldr	r0, [pc, #8]	; (8008b78 <spi_flash_deselect_chip+0x14>)
 8008b6e:	f001 fd37 	bl	800a5e0 <HAL_GPIO_WritePin>
}
 8008b72:	bf00      	nop
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	40020000 	.word	0x40020000

08008b7c <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 8008b84:	4b1f      	ldr	r3, [pc, #124]	; (8008c04 <spi_flash_get_baud_rate_prescaler+0x88>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a1f      	ldr	r2, [pc, #124]	; (8008c08 <spi_flash_get_baud_rate_prescaler+0x8c>)
 8008b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8e:	099b      	lsrs	r3, r3, #6
 8008b90:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	085b      	lsrs	r3, r3, #1
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d301      	bcc.n	8008ba0 <spi_flash_get_baud_rate_prescaler+0x24>
         return SPI_BAUDRATEPRESCALER_2;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e02a      	b.n	8008bf6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	089b      	lsrs	r3, r3, #2
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d301      	bcc.n	8008bae <spi_flash_get_baud_rate_prescaler+0x32>
         return SPI_BAUDRATEPRESCALER_4;
 8008baa:	2308      	movs	r3, #8
 8008bac:	e023      	b.n	8008bf6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	08db      	lsrs	r3, r3, #3
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d301      	bcc.n	8008bbc <spi_flash_get_baud_rate_prescaler+0x40>
         return SPI_BAUDRATEPRESCALER_8;
 8008bb8:	2310      	movs	r3, #16
 8008bba:	e01c      	b.n	8008bf6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	091b      	lsrs	r3, r3, #4
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d301      	bcc.n	8008bca <spi_flash_get_baud_rate_prescaler+0x4e>
         return SPI_BAUDRATEPRESCALER_16;
 8008bc6:	2318      	movs	r3, #24
 8008bc8:	e015      	b.n	8008bf6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	095b      	lsrs	r3, r3, #5
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d301      	bcc.n	8008bd8 <spi_flash_get_baud_rate_prescaler+0x5c>
         return SPI_BAUDRATEPRESCALER_32;
 8008bd4:	2320      	movs	r3, #32
 8008bd6:	e00e      	b.n	8008bf6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	099b      	lsrs	r3, r3, #6
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d301      	bcc.n	8008be6 <spi_flash_get_baud_rate_prescaler+0x6a>
          return SPI_BAUDRATEPRESCALER_64;
 8008be2:	2328      	movs	r3, #40	; 0x28
 8008be4:	e007      	b.n	8008bf6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	09db      	lsrs	r3, r3, #7
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d301      	bcc.n	8008bf4 <spi_flash_get_baud_rate_prescaler+0x78>
          return SPI_BAUDRATEPRESCALER_128;
 8008bf0:	2330      	movs	r3, #48	; 0x30
 8008bf2:	e000      	b.n	8008bf6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else
          return SPI_BAUDRATEPRESCALER_256;
 8008bf4:	2338      	movs	r3, #56	; 0x38
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20000138 	.word	0x20000138
 8008c08:	10624dd3 	.word	0x10624dd3

08008c0c <spi_flash_init>:

// 初始化SPI Flash
static int spi_flash_init(void *conf, uint32_t conf_size)
{
 8008c0c:	b590      	push	{r4, r7, lr}
 8008c0e:	b08f      	sub	sp, #60	; 0x3c
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef spi_init;

    if (conf_size < sizeof(spi_conf_t))
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b0c      	cmp	r3, #12
 8008c1a:	d802      	bhi.n	8008c22 <spi_flash_init+0x16>
        return -1; 
 8008c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c20:	e04a      	b.n	8008cb8 <spi_flash_init+0xac>

    spi_conf = *(spi_conf_t *)conf;
 8008c22:	4b27      	ldr	r3, [pc, #156]	; (8008cc0 <spi_flash_init+0xb4>)
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	4614      	mov	r4, r2
 8008c28:	6820      	ldr	r0, [r4, #0]
 8008c2a:	6861      	ldr	r1, [r4, #4]
 8008c2c:	68a2      	ldr	r2, [r4, #8]
 8008c2e:	c307      	stmia	r3!, {r0, r1, r2}
 8008c30:	7b22      	ldrb	r2, [r4, #12]
 8008c32:	701a      	strb	r2, [r3, #0]

    spi_flash_gpio_init();
 8008c34:	f7ff ff76 	bl	8008b24 <spi_flash_gpio_init>

    spi_flash_deselect_chip();
 8008c38:	f7ff ff94 	bl	8008b64 <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Instance = SPI1;
 8008c3c:	4b21      	ldr	r3, [pc, #132]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c3e:	4a22      	ldr	r2, [pc, #136]	; (8008cc8 <spi_flash_init+0xbc>)
 8008c40:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8008c42:	4b20      	ldr	r3, [pc, #128]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008c48:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008c4a:	4b1e      	ldr	r3, [pc, #120]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008c50:	4b1c      	ldr	r3, [pc, #112]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008c56:	4b1b      	ldr	r3, [pc, #108]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c58:	2202      	movs	r2, #2
 8008c5a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008c5c:	4b19      	ldr	r3, [pc, #100]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8008c62:	4b18      	ldr	r3, [pc, #96]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c68:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq);
 8008c6a:	4b15      	ldr	r3, [pc, #84]	; (8008cc0 <spi_flash_init+0xb4>)
 8008c6c:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7ff ff83 	bl	8008b7c <spi_flash_get_baud_rate_prescaler>
 8008c76:	4603      	mov	r3, r0
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c7c:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008c7e:	4b11      	ldr	r3, [pc, #68]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008c84:	4b0f      	ldr	r3, [pc, #60]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c8a:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8008c90:	4b0c      	ldr	r3, [pc, #48]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c92:	2207      	movs	r2, #7
 8008c94:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008c96:	480b      	ldr	r0, [pc, #44]	; (8008cc4 <spi_flash_init+0xb8>)
 8008c98:	f003 ffed 	bl	800cc76 <HAL_SPI_Init>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <spi_flash_init+0x9a>
    {
      Error_Handler();
 8008ca2:	f7fc fe6d 	bl	8005980 <Error_Handler>
    }  // 根据以上配置初始化SPI1

    /* 使能SPI */
//    SPI_Cmd(SPI1, ENABLE);
    __HAL_SPI_ENABLE(&hspi1); // 初始化SPI Flash芯片
 8008ca6:	4b07      	ldr	r3, [pc, #28]	; (8008cc4 <spi_flash_init+0xb8>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <spi_flash_init+0xb8>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cb4:	601a      	str	r2, [r3, #0]

    return 0;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	373c      	adds	r7, #60	; 0x3c
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd90      	pop	{r4, r7, pc}
 8008cc0:	200051a0 	.word	0x200051a0
 8008cc4:	20005130 	.word	0x20005130
 8008cc8:	40013000 	.word	0x40013000

08008ccc <spi_flash_uninit>:

// 取消初始化SPI Flash
static void spi_flash_uninit()
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit();
 8008cd0:	f7ff ff32 	bl	8008b38 <spi_flash_gpio_uninit>
    /* 禁用SPI */
    __HAL_SPI_DISABLE(&hspi1);
 8008cd4:	4b04      	ldr	r3, [pc, #16]	; (8008ce8 <spi_flash_uninit+0x1c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <spi_flash_uninit+0x1c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ce2:	601a      	str	r2, [r3, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20005130 	.word	0x20005130

08008cec <spi_flash_send_byte>:

// 发送一个字节到SPI Flash并返回接收到的字节
static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af02      	add	r7, sp, #8
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	71fb      	strb	r3, [r7, #7]
  uint32_t timeout = 0x1000000;
 8008cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cfa:	60fb      	str	r3, [r7, #12]
  uint8_t rx_byte = 0X00;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	72fb      	strb	r3, [r7, #11]

  if(HAL_SPI_TransmitReceive(&hspi1, &byte, &rx_byte, 1, timeout) != HAL_OK)
 8008d00:	f107 020b 	add.w	r2, r7, #11
 8008d04:	1df9      	adds	r1, r7, #7
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4806      	ldr	r0, [pc, #24]	; (8008d28 <spi_flash_send_byte+0x3c>)
 8008d0e:	f004 f863 	bl	800cdd8 <HAL_SPI_TransmitReceive>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <spi_flash_send_byte+0x30>
   {
	   rx_byte = 0XFF;
 8008d18:	23ff      	movs	r3, #255	; 0xff
 8008d1a:	72fb      	strb	r3, [r7, #11]
   }

  return rx_byte;
 8008d1c:	7afb      	ldrb	r3, [r7, #11]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	20005130 	.word	0x20005130

08008d2c <spi_flash_read_byte>:

// 从SPI Flash中读取一个字节
static inline uint8_t spi_flash_read_byte()
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8008d30:	20a5      	movs	r0, #165	; 0xa5
 8008d32:	f7ff ffdb 	bl	8008cec <spi_flash_send_byte>
 8008d36:	4603      	mov	r3, r0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <spi_flash_read_status>:

// 读取SPI Flash的状态寄存器值
static uint32_t spi_flash_read_status()
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
    uint8_t status;
    uint32_t flash_status = FLASH_STATUS_READY;
 8008d42:	2300      	movs	r3, #0
 8008d44:	607b      	str	r3, [r7, #4]

    spi_flash_select_chip();
 8008d46:	f7ff ff01 	bl	8008b4c <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.status_cmd);
 8008d4a:	4b16      	ldr	r3, [pc, #88]	; (8008da4 <spi_flash_read_status+0x68>)
 8008d4c:	799b      	ldrb	r3, [r3, #6]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff ffcc 	bl	8008cec <spi_flash_send_byte>

    status = spi_flash_read_byte();
 8008d54:	f7ff ffea 	bl	8008d2c <spi_flash_read_byte>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	70fb      	strb	r3, [r7, #3]

    if (spi_conf.busy_state == 1 && (status & (1 << spi_conf.busy_bit)))
 8008d5c:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <spi_flash_read_status+0x68>)
 8008d5e:	7a1b      	ldrb	r3, [r3, #8]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d10a      	bne.n	8008d7a <spi_flash_read_status+0x3e>
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	4a0f      	ldr	r2, [pc, #60]	; (8008da4 <spi_flash_read_status+0x68>)
 8008d68:	79d2      	ldrb	r2, [r2, #7]
 8008d6a:	4113      	asrs	r3, r2
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d002      	beq.n	8008d7a <spi_flash_read_status+0x3e>
        flash_status = FLASH_STATUS_BUSY;
 8008d74:	2301      	movs	r3, #1
 8008d76:	607b      	str	r3, [r7, #4]
 8008d78:	e00d      	b.n	8008d96 <spi_flash_read_status+0x5a>
    else if (spi_conf.busy_state == 0 && !(status & (1 << spi_conf.busy_bit)))
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <spi_flash_read_status+0x68>)
 8008d7c:	7a1b      	ldrb	r3, [r3, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d109      	bne.n	8008d96 <spi_flash_read_status+0x5a>
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	4a07      	ldr	r2, [pc, #28]	; (8008da4 <spi_flash_read_status+0x68>)
 8008d86:	79d2      	ldrb	r2, [r2, #7]
 8008d88:	4113      	asrs	r3, r2
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <spi_flash_read_status+0x5a>
        flash_status = FLASH_STATUS_BUSY;
 8008d92:	2301      	movs	r3, #1
 8008d94:	607b      	str	r3, [r7, #4]

    spi_flash_deselect_chip();
 8008d96:	f7ff fee5 	bl	8008b64 <spi_flash_deselect_chip>

    return flash_status;
 8008d9a:	687b      	ldr	r3, [r7, #4]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	200051a0 	.word	0x200051a0

08008da8 <spi_flash_get_status>:

// 获取SPI Flash的状态，等待操作完成或超时
static uint32_t spi_flash_get_status()
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8008dae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008db2:	603b      	str	r3, [r7, #0]

    status = spi_flash_read_status();
 8008db4:	f7ff ffc2 	bl	8008d3c <spi_flash_read_status>
 8008db8:	6078      	str	r0, [r7, #4]

    /* 等待操作完成或超时 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8008dba:	e005      	b.n	8008dc8 <spi_flash_get_status+0x20>
    {
        status = spi_flash_read_status();
 8008dbc:	f7ff ffbe 	bl	8008d3c <spi_flash_read_status>
 8008dc0:	6078      	str	r0, [r7, #4]
        timeout --;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d102      	bne.n	8008dd4 <spi_flash_get_status+0x2c>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1f3      	bne.n	8008dbc <spi_flash_get_status+0x14>
    }

    if (!timeout)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <spi_flash_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	607b      	str	r3, [r7, #4]

    return status;
 8008dde:	687b      	ldr	r3, [r7, #4]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <spi_flash_read_id>:

// 读取SPI Flash的ID
static void spi_flash_read_id(chip_id_t *chip_id)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();
 8008df0:	f7ff feac 	bl	8008b4c <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_id_cmd);
 8008df4:	4b18      	ldr	r3, [pc, #96]	; (8008e58 <spi_flash_read_id+0x70>)
 8008df6:	789b      	ldrb	r3, [r3, #2]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7ff ff77 	bl	8008cec <spi_flash_send_byte>
    spi_flash_send_byte(0x00);  // 发送读取厂商ID的指令
 8008dfe:	2000      	movs	r0, #0
 8008e00:	f7ff ff74 	bl	8008cec <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();
 8008e04:	f7ff ff92 	bl	8008d2c <spi_flash_read_byte>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();
 8008e10:	f7ff ff8c 	bl	8008d2c <spi_flash_read_byte>
 8008e14:	4603      	mov	r3, r0
 8008e16:	461a      	mov	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();
 8008e1c:	f7ff ff86 	bl	8008d2c <spi_flash_read_byte>
 8008e20:	4603      	mov	r3, r0
 8008e22:	461a      	mov	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();
 8008e28:	f7ff ff80 	bl	8008d2c <spi_flash_read_byte>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	461a      	mov	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();
 8008e34:	f7ff ff7a 	bl	8008d2c <spi_flash_read_byte>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();
 8008e40:	f7ff ff74 	bl	8008d2c <spi_flash_read_byte>
 8008e44:	4603      	mov	r3, r0
 8008e46:	461a      	mov	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();
 8008e4c:	f7ff fe8a 	bl	8008b64 <spi_flash_deselect_chip>
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	200051a0 	.word	0x200051a0

08008e5c <spi_flash_write_enable>:

// 启用SPI Flash的写使能
static void spi_flash_write_enable()
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
    if (spi_conf.write_en_cmd == UNDEFINED_CMD)
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <spi_flash_write_enable+0x24>)
 8008e62:	791b      	ldrb	r3, [r3, #4]
 8008e64:	2bff      	cmp	r3, #255	; 0xff
 8008e66:	d009      	beq.n	8008e7c <spi_flash_write_enable+0x20>
        return;

    spi_flash_select_chip();
 8008e68:	f7ff fe70 	bl	8008b4c <spi_flash_select_chip>
    spi_flash_send_byte(spi_conf.write_en_cmd);
 8008e6c:	4b04      	ldr	r3, [pc, #16]	; (8008e80 <spi_flash_write_enable+0x24>)
 8008e6e:	791b      	ldrb	r3, [r3, #4]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7ff ff3b 	bl	8008cec <spi_flash_send_byte>
    spi_flash_deselect_chip();
 8008e76:	f7ff fe75 	bl	8008b64 <spi_flash_deselect_chip>
 8008e7a:	e000      	b.n	8008e7e <spi_flash_write_enable+0x22>
        return;
 8008e7c:	bf00      	nop
}
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	200051a0 	.word	0x200051a0

08008e84 <spi_flash_write_page_async>:

// 异步写入SPI Flash的一页数据
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
    uint32_t i;

    spi_flash_write_enable();
 8008e90:	f7ff ffe4 	bl	8008e5c <spi_flash_write_enable>

    spi_flash_select_chip();
 8008e94:	f7ff fe5a 	bl	8008b4c <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.write_cmd);
 8008e98:	4b19      	ldr	r3, [pc, #100]	; (8008f00 <spi_flash_write_page_async+0x7c>)
 8008e9a:	78db      	ldrb	r3, [r3, #3]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7ff ff25 	bl	8008cec <spi_flash_send_byte>

    page = page << spi_conf.page_offset;
 8008ea2:	4b17      	ldr	r3, [pc, #92]	; (8008f00 <spi_flash_write_page_async+0x7c>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	4093      	lsls	r3, r2
 8008eac:	60bb      	str	r3, [r7, #8]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	0c1b      	lsrs	r3, r3, #16
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7ff ff19 	bl	8008cec <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	0a1b      	lsrs	r3, r3, #8
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7ff ff13 	bl	8008cec <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7ff ff0e 	bl	8008cec <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	617b      	str	r3, [r7, #20]
 8008ed4:	e009      	b.n	8008eea <spi_flash_write_page_async+0x66>
        spi_flash_send_byte(buf[i]);
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	4413      	add	r3, r2
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7ff ff04 	bl	8008cec <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d3f1      	bcc.n	8008ed6 <spi_flash_write_page_async+0x52>

    spi_flash_deselect_chip();
 8008ef2:	f7ff fe37 	bl	8008b64 <spi_flash_deselect_chip>
}
 8008ef6:	bf00      	nop
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	200051a0 	.word	0x200051a0

08008f04 <spi_flash_read_data>:

// 从指定地址读取数据到缓冲区
static uint32_t spi_flash_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 8008f04:	b590      	push	{r4, r7, lr}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
 8008f10:	603b      	str	r3, [r7, #0]
    uint32_t i, addr = (page << spi_conf.page_offset) + page_offset;
 8008f12:	4b1d      	ldr	r3, [pc, #116]	; (8008f88 <spi_flash_read_data+0x84>)
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	461a      	mov	r2, r3
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	4093      	lsls	r3, r2
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	4413      	add	r3, r2
 8008f20:	613b      	str	r3, [r7, #16]

    spi_flash_select_chip();
 8008f22:	f7ff fe13 	bl	8008b4c <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_cmd);
 8008f26:	4b18      	ldr	r3, [pc, #96]	; (8008f88 <spi_flash_read_data+0x84>)
 8008f28:	785b      	ldrb	r3, [r3, #1]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7ff fede 	bl	8008cec <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	0c1b      	lsrs	r3, r3, #16
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff fed8 	bl	8008cec <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	0a1b      	lsrs	r3, r3, #8
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff fed2 	bl	8008cec <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7ff fecd 	bl	8008cec <spi_flash_send_byte>

    /* AT45DB要求在地址后写入虚拟字节 */
    spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8008f52:	20a5      	movs	r0, #165	; 0xa5
 8008f54:	f7ff feca 	bl	8008cec <spi_flash_send_byte>

    for (i = 0; i < data_size; i++)
 8008f58:	2300      	movs	r3, #0
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e009      	b.n	8008f72 <spi_flash_read_data+0x6e>
        buf[i] = spi_flash_read_byte();
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	18d4      	adds	r4, r2, r3
 8008f64:	f7ff fee2 	bl	8008d2c <spi_flash_read_byte>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < data_size; i++)
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d3f1      	bcc.n	8008f5e <spi_flash_read_data+0x5a>

    spi_flash_deselect_chip();
 8008f7a:	f7ff fdf3 	bl	8008b64 <spi_flash_deselect_chip>

    return FLASH_STATUS_READY;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	371c      	adds	r7, #28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd90      	pop	{r4, r7, pc}
 8008f88:	200051a0 	.word	0x200051a0

08008f8c <spi_flash_read_page>:

// 从指定页读取数据到缓冲区
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
    return spi_flash_read_data(buf, page, 0, page_size);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f7ff ffb0 	bl	8008f04 <spi_flash_read_data>
 8008fa4:	4603      	mov	r3, r0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <spi_flash_read_spare_data>:

// 从指定页的偏移量读取备用数据到缓冲区
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b085      	sub	sp, #20
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
 8008fba:	603b      	str	r3, [r7, #0]
    return FLASH_STATUS_INVALID_CMD;
 8008fbc:	2304      	movs	r3, #4
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
	...

08008fcc <spi_flash_erase_block>:

// 擦除指定块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
    uint32_t addr = page << spi_conf.page_offset;
 8008fd4:	4b14      	ldr	r3, [pc, #80]	; (8009028 <spi_flash_erase_block+0x5c>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4093      	lsls	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]

    spi_flash_write_enable();
 8008fe0:	f7ff ff3c 	bl	8008e5c <spi_flash_write_enable>

    spi_flash_select_chip();
 8008fe4:	f7ff fdb2 	bl	8008b4c <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.erase_cmd);
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <spi_flash_erase_block+0x5c>)
 8008fea:	795b      	ldrb	r3, [r3, #5]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff fe7d 	bl	8008cec <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	0c1b      	lsrs	r3, r3, #16
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fe77 	bl	8008cec <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	0a1b      	lsrs	r3, r3, #8
 8009002:	b2db      	uxtb	r3, r3
 8009004:	4618      	mov	r0, r3
 8009006:	f7ff fe71 	bl	8008cec <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	b2db      	uxtb	r3, r3
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff fe6c 	bl	8008cec <spi_flash_send_byte>

    spi_flash_deselect_chip();
 8009014:	f7ff fda6 	bl	8008b64 <spi_flash_deselect_chip>

    return spi_flash_get_status();
 8009018:	f7ff fec6 	bl	8008da8 <spi_flash_get_status>
 800901c:	4603      	mov	r3, r0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	200051a0 	.word	0x200051a0

0800902c <spi_flash_is_bb_supported>:

// 检查是否支持坏块管理
static inline bool spi_flash_is_bb_supported()
{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0
    return false;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009042:	2300      	movs	r3, #0
 8009044:	607b      	str	r3, [r7, #4]
 8009046:	4b1f      	ldr	r3, [pc, #124]	; (80090c4 <HAL_MspInit+0x88>)
 8009048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800904a:	4a1e      	ldr	r2, [pc, #120]	; (80090c4 <HAL_MspInit+0x88>)
 800904c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009050:	6453      	str	r3, [r2, #68]	; 0x44
 8009052:	4b1c      	ldr	r3, [pc, #112]	; (80090c4 <HAL_MspInit+0x88>)
 8009054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800905a:	607b      	str	r3, [r7, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800905e:	2300      	movs	r3, #0
 8009060:	603b      	str	r3, [r7, #0]
 8009062:	4b18      	ldr	r3, [pc, #96]	; (80090c4 <HAL_MspInit+0x88>)
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	4a17      	ldr	r2, [pc, #92]	; (80090c4 <HAL_MspInit+0x88>)
 8009068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800906c:	6413      	str	r3, [r2, #64]	; 0x40
 800906e:	4b15      	ldr	r3, [pc, #84]	; (80090c4 <HAL_MspInit+0x88>)
 8009070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800907a:	2200      	movs	r2, #0
 800907c:	2100      	movs	r1, #0
 800907e:	2001      	movs	r0, #1
 8009080:	f000 fbb3 	bl	80097ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8009084:	2001      	movs	r0, #1
 8009086:	f000 fbcc 	bl	8009822 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800908a:	2200      	movs	r2, #0
 800908c:	2100      	movs	r1, #0
 800908e:	2004      	movs	r0, #4
 8009090:	f000 fbab 	bl	80097ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8009094:	2004      	movs	r0, #4
 8009096:	f000 fbc4 	bl	8009822 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800909a:	2200      	movs	r2, #0
 800909c:	2100      	movs	r1, #0
 800909e:	2005      	movs	r0, #5
 80090a0:	f000 fba3 	bl	80097ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80090a4:	2005      	movs	r0, #5
 80090a6:	f000 fbbc 	bl	8009822 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80090aa:	2200      	movs	r2, #0
 80090ac:	2100      	movs	r1, #0
 80090ae:	2051      	movs	r0, #81	; 0x51
 80090b0:	f000 fb9b 	bl	80097ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80090b4:	2051      	movs	r0, #81	; 0x51
 80090b6:	f000 fbb4 	bl	8009822 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80090ba:	bf00      	nop
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	40023800 	.word	0x40023800

080090c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80090c8:	b480      	push	{r7}
 80090ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80090cc:	e7fe      	b.n	80090cc <NMI_Handler+0x4>

080090ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80090ce:	b480      	push	{r7}
 80090d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80090d2:	e7fe      	b.n	80090d2 <HardFault_Handler+0x4>

080090d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80090d4:	b480      	push	{r7}
 80090d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80090d8:	e7fe      	b.n	80090d8 <MemManage_Handler+0x4>

080090da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80090da:	b480      	push	{r7}
 80090dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80090de:	e7fe      	b.n	80090de <BusFault_Handler+0x4>

080090e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80090e0:	b480      	push	{r7}
 80090e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80090e4:	e7fe      	b.n	80090e4 <UsageFault_Handler+0x4>

080090e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80090e6:	b480      	push	{r7}
 80090e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80090ea:	bf00      	nop
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80090f4:	b480      	push	{r7}
 80090f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80090f8:	bf00      	nop
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009102:	b480      	push	{r7}
 8009104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009106:	bf00      	nop
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009114:	f000 f9f6 	bl	8009504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009118:	bf00      	nop
 800911a:	bd80      	pop	{r7, pc}

0800911c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8009120:	f002 fe20 	bl	800bd64 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8009124:	bf00      	nop
 8009126:	bd80      	pop	{r7, pc}

08009128 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800912c:	f000 fc88 	bl	8009a40 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8009130:	bf00      	nop
 8009132:	bd80      	pop	{r7, pc}

08009134 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8009134:	b480      	push	{r7}
 8009136:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8009138:	bf00      	nop
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
	...

08009144 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8009148:	4802      	ldr	r0, [pc, #8]	; (8009154 <SPI1_IRQHandler+0x10>)
 800914a:	f003 ffe7 	bl	800d11c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800914e:	bf00      	nop
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20005130 	.word	0x20005130

08009158 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800915c:	4802      	ldr	r0, [pc, #8]	; (8009168 <USART1_IRQHandler+0x10>)
 800915e:	f004 fa99 	bl	800d694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009162:	bf00      	nop
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	200051b4 	.word	0x200051b4

0800916c <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8009170:	4802      	ldr	r0, [pc, #8]	; (800917c <FSMC_IRQHandler+0x10>)
 8009172:	f001 fa9c 	bl	800a6ae <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8009176:	bf00      	nop
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20000c04 	.word	0x20000c04

08009180 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8009184:	4802      	ldr	r0, [pc, #8]	; (8009190 <OTG_FS_IRQHandler+0x10>)
 8009186:	f001 fcc0 	bl	800ab0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800918a:	bf00      	nop
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	200079d8 	.word	0x200079d8

08009194 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8009198:	4802      	ldr	r0, [pc, #8]	; (80091a4 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 800919a:	f001 fcb6 	bl	800ab0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 800919e:	bf00      	nop
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20007ee4 	.word	0x20007ee4

080091a8 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80091ac:	4802      	ldr	r0, [pc, #8]	; (80091b8 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 80091ae:	f001 fcac 	bl	800ab0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 80091b2:	bf00      	nop
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20007ee4 	.word	0x20007ee4

080091bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80091c0:	4802      	ldr	r0, [pc, #8]	; (80091cc <OTG_HS_IRQHandler+0x10>)
 80091c2:	f001 fca2 	bl	800ab0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80091c6:	bf00      	nop
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	20007ee4 	.word	0x20007ee4

080091d0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80091d4:	bf00      	nop
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b086      	sub	sp, #24
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80091ea:	2300      	movs	r3, #0
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	e00a      	b.n	8009206 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80091f0:	f3af 8000 	nop.w
 80091f4:	4601      	mov	r1, r0
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	60ba      	str	r2, [r7, #8]
 80091fc:	b2ca      	uxtb	r2, r1
 80091fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	3301      	adds	r3, #1
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	429a      	cmp	r2, r3
 800920c:	dbf0      	blt.n	80091f0 <_read+0x12>
  }

  return len;
 800920e:	687b      	ldr	r3, [r7, #4]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <_close>:
  }
  return len;
}

int _close(int file)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009224:	4618      	mov	r0, r3
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009240:	605a      	str	r2, [r3, #4]
  return 0;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <_isatty>:

int _isatty(int file)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009258:	2301      	movs	r3, #1
}
 800925a:	4618      	mov	r0, r3
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009266:	b480      	push	{r7}
 8009268:	b085      	sub	sp, #20
 800926a:	af00      	add	r7, sp, #0
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009288:	4a14      	ldr	r2, [pc, #80]	; (80092dc <_sbrk+0x5c>)
 800928a:	4b15      	ldr	r3, [pc, #84]	; (80092e0 <_sbrk+0x60>)
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009294:	4b13      	ldr	r3, [pc, #76]	; (80092e4 <_sbrk+0x64>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d102      	bne.n	80092a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800929c:	4b11      	ldr	r3, [pc, #68]	; (80092e4 <_sbrk+0x64>)
 800929e:	4a12      	ldr	r2, [pc, #72]	; (80092e8 <_sbrk+0x68>)
 80092a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80092a2:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <_sbrk+0x64>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4413      	add	r3, r2
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d207      	bcs.n	80092c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80092b0:	f009 ffc6 	bl	8013240 <__errno>
 80092b4:	4603      	mov	r3, r0
 80092b6:	220c      	movs	r2, #12
 80092b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80092ba:	f04f 33ff 	mov.w	r3, #4294967295
 80092be:	e009      	b.n	80092d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80092c0:	4b08      	ldr	r3, [pc, #32]	; (80092e4 <_sbrk+0x64>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80092c6:	4b07      	ldr	r3, [pc, #28]	; (80092e4 <_sbrk+0x64>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4413      	add	r3, r2
 80092ce:	4a05      	ldr	r2, [pc, #20]	; (80092e4 <_sbrk+0x64>)
 80092d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80092d2:	68fb      	ldr	r3, [r7, #12]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	2000c000 	.word	0x2000c000
 80092e0:	00001000 	.word	0x00001000
 80092e4:	200051b0 	.word	0x200051b0
 80092e8:	20008760 	.word	0x20008760

080092ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80092f0:	4b07      	ldr	r3, [pc, #28]	; (8009310 <SystemInit+0x24>)
 80092f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092f6:	4a06      	ldr	r2, [pc, #24]	; (8009310 <SystemInit+0x24>)
 80092f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8009300:	4b03      	ldr	r3, [pc, #12]	; (8009310 <SystemInit+0x24>)
 8009302:	4a04      	ldr	r2, [pc, #16]	; (8009314 <SystemInit+0x28>)
 8009304:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009306:	bf00      	nop
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	e000ed00 	.word	0xe000ed00
 8009314:	08004000 	.word	0x08004000

08009318 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800931c:	4b11      	ldr	r3, [pc, #68]	; (8009364 <MX_USART1_UART_Init+0x4c>)
 800931e:	4a12      	ldr	r2, [pc, #72]	; (8009368 <MX_USART1_UART_Init+0x50>)
 8009320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009322:	4b10      	ldr	r3, [pc, #64]	; (8009364 <MX_USART1_UART_Init+0x4c>)
 8009324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800932a:	4b0e      	ldr	r3, [pc, #56]	; (8009364 <MX_USART1_UART_Init+0x4c>)
 800932c:	2200      	movs	r2, #0
 800932e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009330:	4b0c      	ldr	r3, [pc, #48]	; (8009364 <MX_USART1_UART_Init+0x4c>)
 8009332:	2200      	movs	r2, #0
 8009334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009336:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <MX_USART1_UART_Init+0x4c>)
 8009338:	2200      	movs	r2, #0
 800933a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800933c:	4b09      	ldr	r3, [pc, #36]	; (8009364 <MX_USART1_UART_Init+0x4c>)
 800933e:	220c      	movs	r2, #12
 8009340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009342:	4b08      	ldr	r3, [pc, #32]	; (8009364 <MX_USART1_UART_Init+0x4c>)
 8009344:	2200      	movs	r2, #0
 8009346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009348:	4b06      	ldr	r3, [pc, #24]	; (8009364 <MX_USART1_UART_Init+0x4c>)
 800934a:	2200      	movs	r2, #0
 800934c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800934e:	4805      	ldr	r0, [pc, #20]	; (8009364 <MX_USART1_UART_Init+0x4c>)
 8009350:	f004 f8c0 	bl	800d4d4 <HAL_UART_Init>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800935a:	f7fc fb11 	bl	8005980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800935e:	bf00      	nop
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	200051b4 	.word	0x200051b4
 8009368:	40011000 	.word	0x40011000

0800936c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08a      	sub	sp, #40	; 0x28
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009374:	f107 0314 	add.w	r3, r7, #20
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	605a      	str	r2, [r3, #4]
 800937e:	609a      	str	r2, [r3, #8]
 8009380:	60da      	str	r2, [r3, #12]
 8009382:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a1d      	ldr	r2, [pc, #116]	; (8009400 <HAL_UART_MspInit+0x94>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d134      	bne.n	80093f8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800938e:	2300      	movs	r3, #0
 8009390:	613b      	str	r3, [r7, #16]
 8009392:	4b1c      	ldr	r3, [pc, #112]	; (8009404 <HAL_UART_MspInit+0x98>)
 8009394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009396:	4a1b      	ldr	r2, [pc, #108]	; (8009404 <HAL_UART_MspInit+0x98>)
 8009398:	f043 0310 	orr.w	r3, r3, #16
 800939c:	6453      	str	r3, [r2, #68]	; 0x44
 800939e:	4b19      	ldr	r3, [pc, #100]	; (8009404 <HAL_UART_MspInit+0x98>)
 80093a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a2:	f003 0310 	and.w	r3, r3, #16
 80093a6:	613b      	str	r3, [r7, #16]
 80093a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093aa:	2300      	movs	r3, #0
 80093ac:	60fb      	str	r3, [r7, #12]
 80093ae:	4b15      	ldr	r3, [pc, #84]	; (8009404 <HAL_UART_MspInit+0x98>)
 80093b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b2:	4a14      	ldr	r2, [pc, #80]	; (8009404 <HAL_UART_MspInit+0x98>)
 80093b4:	f043 0301 	orr.w	r3, r3, #1
 80093b8:	6313      	str	r3, [r2, #48]	; 0x30
 80093ba:	4b12      	ldr	r3, [pc, #72]	; (8009404 <HAL_UART_MspInit+0x98>)
 80093bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	60fb      	str	r3, [r7, #12]
 80093c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80093c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80093ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093cc:	2302      	movs	r3, #2
 80093ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093d4:	2303      	movs	r3, #3
 80093d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80093d8:	2307      	movs	r3, #7
 80093da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093dc:	f107 0314 	add.w	r3, r7, #20
 80093e0:	4619      	mov	r1, r3
 80093e2:	4809      	ldr	r0, [pc, #36]	; (8009408 <HAL_UART_MspInit+0x9c>)
 80093e4:	f000 fe64 	bl	800a0b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80093e8:	2200      	movs	r2, #0
 80093ea:	2100      	movs	r1, #0
 80093ec:	2025      	movs	r0, #37	; 0x25
 80093ee:	f000 f9fc 	bl	80097ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80093f2:	2025      	movs	r0, #37	; 0x25
 80093f4:	f000 fa15 	bl	8009822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80093f8:	bf00      	nop
 80093fa:	3728      	adds	r7, #40	; 0x28
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	40011000 	.word	0x40011000
 8009404:	40023800 	.word	0x40023800
 8009408:	40020000 	.word	0x40020000

0800940c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800940c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009444 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009410:	480d      	ldr	r0, [pc, #52]	; (8009448 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009412:	490e      	ldr	r1, [pc, #56]	; (800944c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009414:	4a0e      	ldr	r2, [pc, #56]	; (8009450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009418:	e002      	b.n	8009420 <LoopCopyDataInit>

0800941a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800941a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800941c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800941e:	3304      	adds	r3, #4

08009420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009424:	d3f9      	bcc.n	800941a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009426:	4a0b      	ldr	r2, [pc, #44]	; (8009454 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009428:	4c0b      	ldr	r4, [pc, #44]	; (8009458 <LoopFillZerobss+0x26>)
  movs r3, #0
 800942a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800942c:	e001      	b.n	8009432 <LoopFillZerobss>

0800942e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800942e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009430:	3204      	adds	r2, #4

08009432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009434:	d3fb      	bcc.n	800942e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009436:	f7ff ff59 	bl	80092ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800943a:	f009 ff07 	bl	801324c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800943e:	f7fc f9d9 	bl	80057f4 <main>
  bx  lr    
 8009442:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009444:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8009448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800944c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8009450:	08014c00 	.word	0x08014c00
  ldr r2, =_sbss
 8009454:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8009458:	2000875c 	.word	0x2000875c

0800945c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800945c:	e7fe      	b.n	800945c <ADC_IRQHandler>
	...

08009460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009464:	4b0e      	ldr	r3, [pc, #56]	; (80094a0 <HAL_Init+0x40>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a0d      	ldr	r2, [pc, #52]	; (80094a0 <HAL_Init+0x40>)
 800946a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800946e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <HAL_Init+0x40>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a0a      	ldr	r2, [pc, #40]	; (80094a0 <HAL_Init+0x40>)
 8009476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800947a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800947c:	4b08      	ldr	r3, [pc, #32]	; (80094a0 <HAL_Init+0x40>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a07      	ldr	r2, [pc, #28]	; (80094a0 <HAL_Init+0x40>)
 8009482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009488:	2003      	movs	r0, #3
 800948a:	f000 f9a3 	bl	80097d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800948e:	200f      	movs	r0, #15
 8009490:	f000 f808 	bl	80094a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009494:	f7ff fdd2 	bl	800903c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	40023c00 	.word	0x40023c00

080094a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80094ac:	4b12      	ldr	r3, [pc, #72]	; (80094f8 <HAL_InitTick+0x54>)
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	4b12      	ldr	r3, [pc, #72]	; (80094fc <HAL_InitTick+0x58>)
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	4619      	mov	r1, r3
 80094b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80094ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80094be:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 f9c9 	bl	800985a <HAL_SYSTICK_Config>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e00e      	b.n	80094f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b0f      	cmp	r3, #15
 80094d6:	d80a      	bhi.n	80094ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80094d8:	2200      	movs	r2, #0
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	f04f 30ff 	mov.w	r0, #4294967295
 80094e0:	f000 f983 	bl	80097ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80094e4:	4a06      	ldr	r2, [pc, #24]	; (8009500 <HAL_InitTick+0x5c>)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e000      	b.n	80094f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	20000138 	.word	0x20000138
 80094fc:	20000140 	.word	0x20000140
 8009500:	2000013c 	.word	0x2000013c

08009504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009508:	4b06      	ldr	r3, [pc, #24]	; (8009524 <HAL_IncTick+0x20>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	461a      	mov	r2, r3
 800950e:	4b06      	ldr	r3, [pc, #24]	; (8009528 <HAL_IncTick+0x24>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4413      	add	r3, r2
 8009514:	4a04      	ldr	r2, [pc, #16]	; (8009528 <HAL_IncTick+0x24>)
 8009516:	6013      	str	r3, [r2, #0]
}
 8009518:	bf00      	nop
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20000140 	.word	0x20000140
 8009528:	200051f8 	.word	0x200051f8

0800952c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0
  return uwTick;
 8009530:	4b03      	ldr	r3, [pc, #12]	; (8009540 <HAL_GetTick+0x14>)
 8009532:	681b      	ldr	r3, [r3, #0]
}
 8009534:	4618      	mov	r0, r3
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	200051f8 	.word	0x200051f8

08009544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800954c:	f7ff ffee 	bl	800952c <HAL_GetTick>
 8009550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955c:	d005      	beq.n	800956a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800955e:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <HAL_Delay+0x44>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4413      	add	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800956a:	bf00      	nop
 800956c:	f7ff ffde 	bl	800952c <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	429a      	cmp	r2, r3
 800957a:	d8f7      	bhi.n	800956c <HAL_Delay+0x28>
  {
  }
}
 800957c:	bf00      	nop
 800957e:	bf00      	nop
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000140 	.word	0x20000140

0800958c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8009590:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	4a04      	ldr	r2, [pc, #16]	; (80095a8 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8009596:	f043 0301 	orr.w	r3, r3, #1
 800959a:	6053      	str	r3, [r2, #4]
}
 800959c:	bf00      	nop
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	e0042000 	.word	0xe0042000

080095ac <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80095b0:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	4a04      	ldr	r2, [pc, #16]	; (80095c8 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80095b6:	f043 0302 	orr.w	r3, r3, #2
 80095ba:	6053      	str	r3, [r2, #4]
}
 80095bc:	bf00      	nop
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	e0042000 	.word	0xe0042000

080095cc <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80095d0:	4b05      	ldr	r3, [pc, #20]	; (80095e8 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	4a04      	ldr	r2, [pc, #16]	; (80095e8 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80095d6:	f043 0304 	orr.w	r3, r3, #4
 80095da:	6053      	str	r3, [r2, #4]
}
 80095dc:	bf00      	nop
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	e0042000 	.word	0xe0042000

080095ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f003 0307 	and.w	r3, r3, #7
 80095fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80095fc:	4b0c      	ldr	r3, [pc, #48]	; (8009630 <__NVIC_SetPriorityGrouping+0x44>)
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009608:	4013      	ands	r3, r2
 800960a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800961c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800961e:	4a04      	ldr	r2, [pc, #16]	; (8009630 <__NVIC_SetPriorityGrouping+0x44>)
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	60d3      	str	r3, [r2, #12]
}
 8009624:	bf00      	nop
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	e000ed00 	.word	0xe000ed00

08009634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009638:	4b04      	ldr	r3, [pc, #16]	; (800964c <__NVIC_GetPriorityGrouping+0x18>)
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	0a1b      	lsrs	r3, r3, #8
 800963e:	f003 0307 	and.w	r3, r3, #7
}
 8009642:	4618      	mov	r0, r3
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	e000ed00 	.word	0xe000ed00

08009650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800965a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800965e:	2b00      	cmp	r3, #0
 8009660:	db0b      	blt.n	800967a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009662:	79fb      	ldrb	r3, [r7, #7]
 8009664:	f003 021f 	and.w	r2, r3, #31
 8009668:	4907      	ldr	r1, [pc, #28]	; (8009688 <__NVIC_EnableIRQ+0x38>)
 800966a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800966e:	095b      	lsrs	r3, r3, #5
 8009670:	2001      	movs	r0, #1
 8009672:	fa00 f202 	lsl.w	r2, r0, r2
 8009676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800967a:	bf00      	nop
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	e000e100 	.word	0xe000e100

0800968c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800969a:	2b00      	cmp	r3, #0
 800969c:	db12      	blt.n	80096c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	f003 021f 	and.w	r2, r3, #31
 80096a4:	490a      	ldr	r1, [pc, #40]	; (80096d0 <__NVIC_DisableIRQ+0x44>)
 80096a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096aa:	095b      	lsrs	r3, r3, #5
 80096ac:	2001      	movs	r0, #1
 80096ae:	fa00 f202 	lsl.w	r2, r0, r2
 80096b2:	3320      	adds	r3, #32
 80096b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80096b8:	f3bf 8f4f 	dsb	sy
}
 80096bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80096be:	f3bf 8f6f 	isb	sy
}
 80096c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	e000e100 	.word	0xe000e100

080096d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	6039      	str	r1, [r7, #0]
 80096de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	db0a      	blt.n	80096fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	490c      	ldr	r1, [pc, #48]	; (8009720 <__NVIC_SetPriority+0x4c>)
 80096ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096f2:	0112      	lsls	r2, r2, #4
 80096f4:	b2d2      	uxtb	r2, r2
 80096f6:	440b      	add	r3, r1
 80096f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80096fc:	e00a      	b.n	8009714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	b2da      	uxtb	r2, r3
 8009702:	4908      	ldr	r1, [pc, #32]	; (8009724 <__NVIC_SetPriority+0x50>)
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	f003 030f 	and.w	r3, r3, #15
 800970a:	3b04      	subs	r3, #4
 800970c:	0112      	lsls	r2, r2, #4
 800970e:	b2d2      	uxtb	r2, r2
 8009710:	440b      	add	r3, r1
 8009712:	761a      	strb	r2, [r3, #24]
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	e000e100 	.word	0xe000e100
 8009724:	e000ed00 	.word	0xe000ed00

08009728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009728:	b480      	push	{r7}
 800972a:	b089      	sub	sp, #36	; 0x24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f003 0307 	and.w	r3, r3, #7
 800973a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	f1c3 0307 	rsb	r3, r3, #7
 8009742:	2b04      	cmp	r3, #4
 8009744:	bf28      	it	cs
 8009746:	2304      	movcs	r3, #4
 8009748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	3304      	adds	r3, #4
 800974e:	2b06      	cmp	r3, #6
 8009750:	d902      	bls.n	8009758 <NVIC_EncodePriority+0x30>
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	3b03      	subs	r3, #3
 8009756:	e000      	b.n	800975a <NVIC_EncodePriority+0x32>
 8009758:	2300      	movs	r3, #0
 800975a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800975c:	f04f 32ff 	mov.w	r2, #4294967295
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	fa02 f303 	lsl.w	r3, r2, r3
 8009766:	43da      	mvns	r2, r3
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	401a      	ands	r2, r3
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009770:	f04f 31ff 	mov.w	r1, #4294967295
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	fa01 f303 	lsl.w	r3, r1, r3
 800977a:	43d9      	mvns	r1, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009780:	4313      	orrs	r3, r2
         );
}
 8009782:	4618      	mov	r0, r3
 8009784:	3724      	adds	r7, #36	; 0x24
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
	...

08009790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3b01      	subs	r3, #1
 800979c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80097a0:	d301      	bcc.n	80097a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80097a2:	2301      	movs	r3, #1
 80097a4:	e00f      	b.n	80097c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80097a6:	4a0a      	ldr	r2, [pc, #40]	; (80097d0 <SysTick_Config+0x40>)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80097ae:	210f      	movs	r1, #15
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295
 80097b4:	f7ff ff8e 	bl	80096d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80097b8:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <SysTick_Config+0x40>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80097be:	4b04      	ldr	r3, [pc, #16]	; (80097d0 <SysTick_Config+0x40>)
 80097c0:	2207      	movs	r2, #7
 80097c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	e000e010 	.word	0xe000e010

080097d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7ff ff05 	bl	80095ec <__NVIC_SetPriorityGrouping>
}
 80097e2:	bf00      	nop
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b086      	sub	sp, #24
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	4603      	mov	r3, r0
 80097f2:	60b9      	str	r1, [r7, #8]
 80097f4:	607a      	str	r2, [r7, #4]
 80097f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80097fc:	f7ff ff1a 	bl	8009634 <__NVIC_GetPriorityGrouping>
 8009800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	68b9      	ldr	r1, [r7, #8]
 8009806:	6978      	ldr	r0, [r7, #20]
 8009808:	f7ff ff8e 	bl	8009728 <NVIC_EncodePriority>
 800980c:	4602      	mov	r2, r0
 800980e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009812:	4611      	mov	r1, r2
 8009814:	4618      	mov	r0, r3
 8009816:	f7ff ff5d 	bl	80096d4 <__NVIC_SetPriority>
}
 800981a:	bf00      	nop
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	4603      	mov	r3, r0
 800982a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800982c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff ff0d 	bl	8009650 <__NVIC_EnableIRQ>
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	4603      	mov	r3, r0
 8009846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800984c:	4618      	mov	r0, r3
 800984e:	f7ff ff1d 	bl	800968c <__NVIC_DisableIRQ>
}
 8009852:	bf00      	nop
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b082      	sub	sp, #8
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff ff94 	bl	8009790 <SysTick_Config>
 8009868:	4603      	mov	r3, r0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800987e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009880:	f7ff fe54 	bl	800952c <HAL_GetTick>
 8009884:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b02      	cmp	r3, #2
 8009890:	d008      	beq.n	80098a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2280      	movs	r2, #128	; 0x80
 8009896:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e052      	b.n	800994a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f022 0216 	bic.w	r2, r2, #22
 80098b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	695a      	ldr	r2, [r3, #20]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d103      	bne.n	80098d4 <HAL_DMA_Abort+0x62>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d007      	beq.n	80098e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f022 0208 	bic.w	r2, r2, #8
 80098e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f022 0201 	bic.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80098f4:	e013      	b.n	800991e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80098f6:	f7ff fe19 	bl	800952c <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	2b05      	cmp	r3, #5
 8009902:	d90c      	bls.n	800991e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2220      	movs	r2, #32
 8009908:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2203      	movs	r2, #3
 800990e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e015      	b.n	800994a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0301 	and.w	r3, r3, #1
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1e4      	bne.n	80098f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009930:	223f      	movs	r2, #63	; 0x3f
 8009932:	409a      	lsls	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009952:	b480      	push	{r7}
 8009954:	b083      	sub	sp, #12
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b02      	cmp	r3, #2
 8009964:	d004      	beq.n	8009970 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2280      	movs	r2, #128	; 0x80
 800996a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e00c      	b.n	800998a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2205      	movs	r2, #5
 8009974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f022 0201 	bic.w	r2, r2, #1
 8009986:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
	...

08009998 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80099aa:	4b23      	ldr	r3, [pc, #140]	; (8009a38 <HAL_FLASH_Program+0xa0>)
 80099ac:	7e1b      	ldrb	r3, [r3, #24]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d101      	bne.n	80099b6 <HAL_FLASH_Program+0x1e>
 80099b2:	2302      	movs	r3, #2
 80099b4:	e03b      	b.n	8009a2e <HAL_FLASH_Program+0x96>
 80099b6:	4b20      	ldr	r3, [pc, #128]	; (8009a38 <HAL_FLASH_Program+0xa0>)
 80099b8:	2201      	movs	r2, #1
 80099ba:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80099bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80099c0:	f000 f924 	bl	8009c0c <FLASH_WaitForLastOperation>
 80099c4:	4603      	mov	r3, r0
 80099c6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d12b      	bne.n	8009a26 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d105      	bne.n	80099e0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80099d4:	783b      	ldrb	r3, [r7, #0]
 80099d6:	4619      	mov	r1, r3
 80099d8:	68b8      	ldr	r0, [r7, #8]
 80099da:	f000 f9cf 	bl	8009d7c <FLASH_Program_Byte>
 80099de:	e016      	b.n	8009a0e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d105      	bne.n	80099f2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80099e6:	883b      	ldrh	r3, [r7, #0]
 80099e8:	4619      	mov	r1, r3
 80099ea:	68b8      	ldr	r0, [r7, #8]
 80099ec:	f000 f9a2 	bl	8009d34 <FLASH_Program_HalfWord>
 80099f0:	e00d      	b.n	8009a0e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d105      	bne.n	8009a04 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	4619      	mov	r1, r3
 80099fc:	68b8      	ldr	r0, [r7, #8]
 80099fe:	f000 f977 	bl	8009cf0 <FLASH_Program_Word>
 8009a02:	e004      	b.n	8009a0e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a08:	68b8      	ldr	r0, [r7, #8]
 8009a0a:	f000 f93f 	bl	8009c8c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009a0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009a12:	f000 f8fb 	bl	8009c0c <FLASH_WaitForLastOperation>
 8009a16:	4603      	mov	r3, r0
 8009a18:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009a1a:	4b08      	ldr	r3, [pc, #32]	; (8009a3c <HAL_FLASH_Program+0xa4>)
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	4a07      	ldr	r2, [pc, #28]	; (8009a3c <HAL_FLASH_Program+0xa4>)
 8009a20:	f023 0301 	bic.w	r3, r3, #1
 8009a24:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009a26:	4b04      	ldr	r3, [pc, #16]	; (8009a38 <HAL_FLASH_Program+0xa0>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	200051fc 	.word	0x200051fc
 8009a3c:	40023c00 	.word	0x40023c00

08009a40 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009a4a:	4b4b      	ldr	r3, [pc, #300]	; (8009b78 <HAL_FLASH_IRQHandler+0x138>)
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d020      	beq.n	8009a98 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8009a56:	4b49      	ldr	r3, [pc, #292]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d107      	bne.n	8009a70 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8009a60:	4b46      	ldr	r3, [pc, #280]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8009a66:	4b45      	ldr	r3, [pc, #276]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009a68:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6c:	60da      	str	r2, [r3, #12]
 8009a6e:	e00b      	b.n	8009a88 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8009a70:	4b42      	ldr	r3, [pc, #264]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d103      	bne.n	8009a82 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8009a7a:	4b40      	ldr	r3, [pc, #256]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	607b      	str	r3, [r7, #4]
 8009a80:	e002      	b.n	8009a88 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8009a82:	4b3e      	ldr	r3, [pc, #248]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8009a88:	f000 f99a 	bl	8009dc0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f881 	bl	8009b94 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009a92:	4b3a      	ldr	r3, [pc, #232]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009a98:	4b37      	ldr	r3, [pc, #220]	; (8009b78 <HAL_FLASH_IRQHandler+0x138>)
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d04a      	beq.n	8009b3a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009aa4:	4b34      	ldr	r3, [pc, #208]	; (8009b78 <HAL_FLASH_IRQHandler+0x138>)
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8009aaa:	4b34      	ldr	r3, [pc, #208]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d12d      	bne.n	8009b10 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8009ab4:	4b31      	ldr	r3, [pc, #196]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	4a30      	ldr	r2, [pc, #192]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009abc:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8009abe:	4b2f      	ldr	r3, [pc, #188]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d015      	beq.n	8009af2 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8009ac6:	4b2d      	ldr	r3, [pc, #180]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f857 	bl	8009b80 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8009ad2:	4b2a      	ldr	r3, [pc, #168]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	4a28      	ldr	r2, [pc, #160]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009ada:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8009adc:	4b27      	ldr	r3, [pc, #156]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8009ae2:	4b26      	ldr	r3, [pc, #152]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009ae4:	7a1b      	ldrb	r3, [r3, #8]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fa52 	bl	8009f94 <FLASH_Erase_Sector>
 8009af0:	e023      	b.n	8009b3a <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8009af2:	f04f 33ff 	mov.w	r3, #4294967295
 8009af6:	607b      	str	r3, [r7, #4]
 8009af8:	4a20      	ldr	r2, [pc, #128]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009afe:	4b1f      	ldr	r3, [pc, #124]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8009b04:	f000 fa8e 	bl	800a024 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f839 	bl	8009b80 <HAL_FLASH_EndOfOperationCallback>
 8009b0e:	e014      	b.n	8009b3a <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8009b10:	4b1a      	ldr	r3, [pc, #104]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d107      	bne.n	8009b2a <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8009b1a:	f000 fa83 	bl	800a024 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8009b1e:	4b17      	ldr	r3, [pc, #92]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 f82c 	bl	8009b80 <HAL_FLASH_EndOfOperationCallback>
 8009b28:	e004      	b.n	8009b34 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8009b2a:	4b14      	ldr	r3, [pc, #80]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 f826 	bl	8009b80 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009b34:	4b11      	ldr	r3, [pc, #68]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8009b3a:	4b10      	ldr	r3, [pc, #64]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d114      	bne.n	8009b6e <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8009b44:	4b0c      	ldr	r3, [pc, #48]	; (8009b78 <HAL_FLASH_IRQHandler+0x138>)
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	4a0b      	ldr	r2, [pc, #44]	; (8009b78 <HAL_FLASH_IRQHandler+0x138>)
 8009b4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009b4e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8009b50:	4b09      	ldr	r3, [pc, #36]	; (8009b78 <HAL_FLASH_IRQHandler+0x138>)
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	4a08      	ldr	r2, [pc, #32]	; (8009b78 <HAL_FLASH_IRQHandler+0x138>)
 8009b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b5a:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8009b5c:	4b06      	ldr	r3, [pc, #24]	; (8009b78 <HAL_FLASH_IRQHandler+0x138>)
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	4a05      	ldr	r2, [pc, #20]	; (8009b78 <HAL_FLASH_IRQHandler+0x138>)
 8009b62:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009b66:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8009b68:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <HAL_FLASH_IRQHandler+0x13c>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	761a      	strb	r2, [r3, #24]
  }
}
 8009b6e:	bf00      	nop
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	40023c00 	.word	0x40023c00
 8009b7c:	200051fc 	.word	0x200051fc

08009b80 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009bb2:	4b0b      	ldr	r3, [pc, #44]	; (8009be0 <HAL_FLASH_Unlock+0x38>)
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	da0b      	bge.n	8009bd2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009bba:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <HAL_FLASH_Unlock+0x38>)
 8009bbc:	4a09      	ldr	r2, [pc, #36]	; (8009be4 <HAL_FLASH_Unlock+0x3c>)
 8009bbe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009bc0:	4b07      	ldr	r3, [pc, #28]	; (8009be0 <HAL_FLASH_Unlock+0x38>)
 8009bc2:	4a09      	ldr	r2, [pc, #36]	; (8009be8 <HAL_FLASH_Unlock+0x40>)
 8009bc4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009bc6:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <HAL_FLASH_Unlock+0x38>)
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	da01      	bge.n	8009bd2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009bd2:	79fb      	ldrb	r3, [r7, #7]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	40023c00 	.word	0x40023c00
 8009be4:	45670123 	.word	0x45670123
 8009be8:	cdef89ab 	.word	0xcdef89ab

08009bec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009bec:	b480      	push	{r7}
 8009bee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8009bf0:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <HAL_FLASH_Lock+0x1c>)
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	4a04      	ldr	r2, [pc, #16]	; (8009c08 <HAL_FLASH_Lock+0x1c>)
 8009bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bfa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	40023c00 	.word	0x40023c00

08009c0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009c18:	4b1a      	ldr	r3, [pc, #104]	; (8009c84 <FLASH_WaitForLastOperation+0x78>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8009c1e:	f7ff fc85 	bl	800952c <HAL_GetTick>
 8009c22:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009c24:	e010      	b.n	8009c48 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2c:	d00c      	beq.n	8009c48 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d007      	beq.n	8009c44 <FLASH_WaitForLastOperation+0x38>
 8009c34:	f7ff fc7a 	bl	800952c <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d201      	bcs.n	8009c48 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	e019      	b.n	8009c7c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009c48:	4b0f      	ldr	r3, [pc, #60]	; (8009c88 <FLASH_WaitForLastOperation+0x7c>)
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1e8      	bne.n	8009c26 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009c54:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <FLASH_WaitForLastOperation+0x7c>)
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f003 0301 	and.w	r3, r3, #1
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009c60:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <FLASH_WaitForLastOperation+0x7c>)
 8009c62:	2201      	movs	r2, #1
 8009c64:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009c66:	4b08      	ldr	r3, [pc, #32]	; (8009c88 <FLASH_WaitForLastOperation+0x7c>)
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009c72:	f000 f8a5 	bl	8009dc0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e000      	b.n	8009c7c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
  
}  
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	200051fc 	.word	0x200051fc
 8009c88:	40023c00 	.word	0x40023c00

08009c8c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009c98:	4b14      	ldr	r3, [pc, #80]	; (8009cec <FLASH_Program_DoubleWord+0x60>)
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	4a13      	ldr	r2, [pc, #76]	; (8009cec <FLASH_Program_DoubleWord+0x60>)
 8009c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ca2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009ca4:	4b11      	ldr	r3, [pc, #68]	; (8009cec <FLASH_Program_DoubleWord+0x60>)
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	4a10      	ldr	r2, [pc, #64]	; (8009cec <FLASH_Program_DoubleWord+0x60>)
 8009caa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009cae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009cb0:	4b0e      	ldr	r3, [pc, #56]	; (8009cec <FLASH_Program_DoubleWord+0x60>)
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	4a0d      	ldr	r2, [pc, #52]	; (8009cec <FLASH_Program_DoubleWord+0x60>)
 8009cb6:	f043 0301 	orr.w	r3, r3, #1
 8009cba:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009cc2:	f3bf 8f6f 	isb	sy
}
 8009cc6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8009cc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ccc:	f04f 0200 	mov.w	r2, #0
 8009cd0:	f04f 0300 	mov.w	r3, #0
 8009cd4:	000a      	movs	r2, r1
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	68f9      	ldr	r1, [r7, #12]
 8009cda:	3104      	adds	r1, #4
 8009cdc:	4613      	mov	r3, r2
 8009cde:	600b      	str	r3, [r1, #0]
}
 8009ce0:	bf00      	nop
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	40023c00 	.word	0x40023c00

08009cf0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009cfa:	4b0d      	ldr	r3, [pc, #52]	; (8009d30 <FLASH_Program_Word+0x40>)
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	4a0c      	ldr	r2, [pc, #48]	; (8009d30 <FLASH_Program_Word+0x40>)
 8009d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8009d06:	4b0a      	ldr	r3, [pc, #40]	; (8009d30 <FLASH_Program_Word+0x40>)
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	4a09      	ldr	r2, [pc, #36]	; (8009d30 <FLASH_Program_Word+0x40>)
 8009d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009d12:	4b07      	ldr	r3, [pc, #28]	; (8009d30 <FLASH_Program_Word+0x40>)
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	4a06      	ldr	r2, [pc, #24]	; (8009d30 <FLASH_Program_Word+0x40>)
 8009d18:	f043 0301 	orr.w	r3, r3, #1
 8009d1c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	601a      	str	r2, [r3, #0]
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	40023c00 	.word	0x40023c00

08009d34 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009d40:	4b0d      	ldr	r3, [pc, #52]	; (8009d78 <FLASH_Program_HalfWord+0x44>)
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	4a0c      	ldr	r2, [pc, #48]	; (8009d78 <FLASH_Program_HalfWord+0x44>)
 8009d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8009d4c:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <FLASH_Program_HalfWord+0x44>)
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	4a09      	ldr	r2, [pc, #36]	; (8009d78 <FLASH_Program_HalfWord+0x44>)
 8009d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009d58:	4b07      	ldr	r3, [pc, #28]	; (8009d78 <FLASH_Program_HalfWord+0x44>)
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	4a06      	ldr	r2, [pc, #24]	; (8009d78 <FLASH_Program_HalfWord+0x44>)
 8009d5e:	f043 0301 	orr.w	r3, r3, #1
 8009d62:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	887a      	ldrh	r2, [r7, #2]
 8009d68:	801a      	strh	r2, [r3, #0]
}
 8009d6a:	bf00      	nop
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	40023c00 	.word	0x40023c00

08009d7c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	460b      	mov	r3, r1
 8009d86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009d88:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <FLASH_Program_Byte+0x40>)
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	4a0b      	ldr	r2, [pc, #44]	; (8009dbc <FLASH_Program_Byte+0x40>)
 8009d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009d94:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <FLASH_Program_Byte+0x40>)
 8009d96:	4a09      	ldr	r2, [pc, #36]	; (8009dbc <FLASH_Program_Byte+0x40>)
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009d9c:	4b07      	ldr	r3, [pc, #28]	; (8009dbc <FLASH_Program_Byte+0x40>)
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	4a06      	ldr	r2, [pc, #24]	; (8009dbc <FLASH_Program_Byte+0x40>)
 8009da2:	f043 0301 	orr.w	r3, r3, #1
 8009da6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	78fa      	ldrb	r2, [r7, #3]
 8009dac:	701a      	strb	r2, [r3, #0]
}
 8009dae:	bf00      	nop
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	40023c00 	.word	0x40023c00

08009dc0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8009dc0:	b480      	push	{r7}
 8009dc2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009dc4:	4b27      	ldr	r3, [pc, #156]	; (8009e64 <FLASH_SetErrorCode+0xa4>)
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	f003 0310 	and.w	r3, r3, #16
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d008      	beq.n	8009de2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009dd0:	4b25      	ldr	r3, [pc, #148]	; (8009e68 <FLASH_SetErrorCode+0xa8>)
 8009dd2:	69db      	ldr	r3, [r3, #28]
 8009dd4:	f043 0310 	orr.w	r3, r3, #16
 8009dd8:	4a23      	ldr	r2, [pc, #140]	; (8009e68 <FLASH_SetErrorCode+0xa8>)
 8009dda:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009ddc:	4b21      	ldr	r3, [pc, #132]	; (8009e64 <FLASH_SetErrorCode+0xa4>)
 8009dde:	2210      	movs	r2, #16
 8009de0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009de2:	4b20      	ldr	r3, [pc, #128]	; (8009e64 <FLASH_SetErrorCode+0xa4>)
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	f003 0320 	and.w	r3, r3, #32
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d008      	beq.n	8009e00 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009dee:	4b1e      	ldr	r3, [pc, #120]	; (8009e68 <FLASH_SetErrorCode+0xa8>)
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	f043 0308 	orr.w	r3, r3, #8
 8009df6:	4a1c      	ldr	r2, [pc, #112]	; (8009e68 <FLASH_SetErrorCode+0xa8>)
 8009df8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8009dfa:	4b1a      	ldr	r3, [pc, #104]	; (8009e64 <FLASH_SetErrorCode+0xa4>)
 8009dfc:	2220      	movs	r2, #32
 8009dfe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009e00:	4b18      	ldr	r3, [pc, #96]	; (8009e64 <FLASH_SetErrorCode+0xa4>)
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d008      	beq.n	8009e1e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009e0c:	4b16      	ldr	r3, [pc, #88]	; (8009e68 <FLASH_SetErrorCode+0xa8>)
 8009e0e:	69db      	ldr	r3, [r3, #28]
 8009e10:	f043 0304 	orr.w	r3, r3, #4
 8009e14:	4a14      	ldr	r2, [pc, #80]	; (8009e68 <FLASH_SetErrorCode+0xa8>)
 8009e16:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009e18:	4b12      	ldr	r3, [pc, #72]	; (8009e64 <FLASH_SetErrorCode+0xa4>)
 8009e1a:	2240      	movs	r2, #64	; 0x40
 8009e1c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009e1e:	4b11      	ldr	r3, [pc, #68]	; (8009e64 <FLASH_SetErrorCode+0xa4>)
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d008      	beq.n	8009e3c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009e2a:	4b0f      	ldr	r3, [pc, #60]	; (8009e68 <FLASH_SetErrorCode+0xa8>)
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	f043 0302 	orr.w	r3, r3, #2
 8009e32:	4a0d      	ldr	r2, [pc, #52]	; (8009e68 <FLASH_SetErrorCode+0xa8>)
 8009e34:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009e36:	4b0b      	ldr	r3, [pc, #44]	; (8009e64 <FLASH_SetErrorCode+0xa4>)
 8009e38:	2280      	movs	r2, #128	; 0x80
 8009e3a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009e3c:	4b09      	ldr	r3, [pc, #36]	; (8009e64 <FLASH_SetErrorCode+0xa4>)
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	f003 0302 	and.w	r3, r3, #2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d008      	beq.n	8009e5a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009e48:	4b07      	ldr	r3, [pc, #28]	; (8009e68 <FLASH_SetErrorCode+0xa8>)
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	f043 0320 	orr.w	r3, r3, #32
 8009e50:	4a05      	ldr	r2, [pc, #20]	; (8009e68 <FLASH_SetErrorCode+0xa8>)
 8009e52:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009e54:	4b03      	ldr	r3, [pc, #12]	; (8009e64 <FLASH_SetErrorCode+0xa4>)
 8009e56:	2202      	movs	r2, #2
 8009e58:	60da      	str	r2, [r3, #12]
  }
}
 8009e5a:	bf00      	nop
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	40023c00 	.word	0x40023c00
 8009e68:	200051fc 	.word	0x200051fc

08009e6c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009e7e:	4b31      	ldr	r3, [pc, #196]	; (8009f44 <HAL_FLASHEx_Erase+0xd8>)
 8009e80:	7e1b      	ldrb	r3, [r3, #24]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d101      	bne.n	8009e8a <HAL_FLASHEx_Erase+0x1e>
 8009e86:	2302      	movs	r3, #2
 8009e88:	e058      	b.n	8009f3c <HAL_FLASHEx_Erase+0xd0>
 8009e8a:	4b2e      	ldr	r3, [pc, #184]	; (8009f44 <HAL_FLASHEx_Erase+0xd8>)
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009e90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e94:	f7ff feba 	bl	8009c0c <FLASH_WaitForLastOperation>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d148      	bne.n	8009f34 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d115      	bne.n	8009ede <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	f000 f844 	bl	8009f4c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009ec4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009ec8:	f7ff fea0 	bl	8009c0c <FLASH_WaitForLastOperation>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8009ed0:	4b1d      	ldr	r3, [pc, #116]	; (8009f48 <HAL_FLASHEx_Erase+0xdc>)
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	4a1c      	ldr	r2, [pc, #112]	; (8009f48 <HAL_FLASHEx_Erase+0xdc>)
 8009ed6:	f023 0304 	bic.w	r3, r3, #4
 8009eda:	6113      	str	r3, [r2, #16]
 8009edc:	e028      	b.n	8009f30 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	60bb      	str	r3, [r7, #8]
 8009ee4:	e01c      	b.n	8009f20 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	4619      	mov	r1, r3
 8009eee:	68b8      	ldr	r0, [r7, #8]
 8009ef0:	f000 f850 	bl	8009f94 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009ef4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009ef8:	f7ff fe88 	bl	8009c0c <FLASH_WaitForLastOperation>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8009f00:	4b11      	ldr	r3, [pc, #68]	; (8009f48 <HAL_FLASHEx_Erase+0xdc>)
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	4a10      	ldr	r2, [pc, #64]	; (8009f48 <HAL_FLASHEx_Erase+0xdc>)
 8009f06:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8009f0a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	601a      	str	r2, [r3, #0]
          break;
 8009f18:	e00a      	b.n	8009f30 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	60bb      	str	r3, [r7, #8]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68da      	ldr	r2, [r3, #12]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	4413      	add	r3, r2
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d3da      	bcc.n	8009ee6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009f30:	f000 f878 	bl	800a024 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009f34:	4b03      	ldr	r3, [pc, #12]	; (8009f44 <HAL_FLASHEx_Erase+0xd8>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	761a      	strb	r2, [r3, #24]

  return status;
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	200051fc 	.word	0x200051fc
 8009f48:	40023c00 	.word	0x40023c00

08009f4c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	4603      	mov	r3, r0
 8009f54:	6039      	str	r1, [r7, #0]
 8009f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009f58:	4b0d      	ldr	r3, [pc, #52]	; (8009f90 <FLASH_MassErase+0x44>)
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	4a0c      	ldr	r2, [pc, #48]	; (8009f90 <FLASH_MassErase+0x44>)
 8009f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8009f64:	4b0a      	ldr	r3, [pc, #40]	; (8009f90 <FLASH_MassErase+0x44>)
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	4a09      	ldr	r2, [pc, #36]	; (8009f90 <FLASH_MassErase+0x44>)
 8009f6a:	f043 0304 	orr.w	r3, r3, #4
 8009f6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <FLASH_MassErase+0x44>)
 8009f72:	691a      	ldr	r2, [r3, #16]
 8009f74:	79fb      	ldrb	r3, [r7, #7]
 8009f76:	021b      	lsls	r3, r3, #8
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	4a05      	ldr	r2, [pc, #20]	; (8009f90 <FLASH_MassErase+0x44>)
 8009f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f80:	6113      	str	r3, [r2, #16]
}
 8009f82:	bf00      	nop
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	40023c00 	.word	0x40023c00

08009f94 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009fa4:	78fb      	ldrb	r3, [r7, #3]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d102      	bne.n	8009fb0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	e010      	b.n	8009fd2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d103      	bne.n	8009fbe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	e009      	b.n	8009fd2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d103      	bne.n	8009fcc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fc8:	60fb      	str	r3, [r7, #12]
 8009fca:	e002      	b.n	8009fd2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009fcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009fd0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009fd2:	4b13      	ldr	r3, [pc, #76]	; (800a020 <FLASH_Erase_Sector+0x8c>)
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	4a12      	ldr	r2, [pc, #72]	; (800a020 <FLASH_Erase_Sector+0x8c>)
 8009fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8009fde:	4b10      	ldr	r3, [pc, #64]	; (800a020 <FLASH_Erase_Sector+0x8c>)
 8009fe0:	691a      	ldr	r2, [r3, #16]
 8009fe2:	490f      	ldr	r1, [pc, #60]	; (800a020 <FLASH_Erase_Sector+0x8c>)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009fea:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <FLASH_Erase_Sector+0x8c>)
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	4a0c      	ldr	r2, [pc, #48]	; (800a020 <FLASH_Erase_Sector+0x8c>)
 8009ff0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009ff4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8009ff6:	4b0a      	ldr	r3, [pc, #40]	; (800a020 <FLASH_Erase_Sector+0x8c>)
 8009ff8:	691a      	ldr	r2, [r3, #16]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	4313      	orrs	r3, r2
 800a000:	4a07      	ldr	r2, [pc, #28]	; (800a020 <FLASH_Erase_Sector+0x8c>)
 800a002:	f043 0302 	orr.w	r3, r3, #2
 800a006:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a008:	4b05      	ldr	r3, [pc, #20]	; (800a020 <FLASH_Erase_Sector+0x8c>)
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	4a04      	ldr	r2, [pc, #16]	; (800a020 <FLASH_Erase_Sector+0x8c>)
 800a00e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a012:	6113      	str	r3, [r2, #16]
}
 800a014:	bf00      	nop
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	40023c00 	.word	0x40023c00

0800a024 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a024:	b480      	push	{r7}
 800a026:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800a028:	4b20      	ldr	r3, [pc, #128]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a030:	2b00      	cmp	r3, #0
 800a032:	d017      	beq.n	800a064 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a034:	4b1d      	ldr	r3, [pc, #116]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a1c      	ldr	r2, [pc, #112]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a03a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a03e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a040:	4b1a      	ldr	r3, [pc, #104]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a19      	ldr	r2, [pc, #100]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a046:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a04a:	6013      	str	r3, [r2, #0]
 800a04c:	4b17      	ldr	r3, [pc, #92]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a16      	ldr	r2, [pc, #88]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a052:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a056:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a058:	4b14      	ldr	r3, [pc, #80]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a13      	ldr	r2, [pc, #76]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a05e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a062:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800a064:	4b11      	ldr	r3, [pc, #68]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d017      	beq.n	800a0a0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800a070:	4b0e      	ldr	r3, [pc, #56]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a0d      	ldr	r2, [pc, #52]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a07a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a07c:	4b0b      	ldr	r3, [pc, #44]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	4b08      	ldr	r3, [pc, #32]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a07      	ldr	r2, [pc, #28]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a08e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a092:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a094:	4b05      	ldr	r3, [pc, #20]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a04      	ldr	r2, [pc, #16]	; (800a0ac <FLASH_FlushCaches+0x88>)
 800a09a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a09e:	6013      	str	r3, [r2, #0]
  }
}
 800a0a0:	bf00      	nop
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	40023c00 	.word	0x40023c00

0800a0b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b089      	sub	sp, #36	; 0x24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	61fb      	str	r3, [r7, #28]
 800a0ca:	e16b      	b.n	800a3a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	4013      	ands	r3, r2
 800a0de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	f040 815a 	bne.w	800a39e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	f003 0303 	and.w	r3, r3, #3
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d005      	beq.n	800a102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d130      	bne.n	800a164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	2203      	movs	r2, #3
 800a10e:	fa02 f303 	lsl.w	r3, r2, r3
 800a112:	43db      	mvns	r3, r3
 800a114:	69ba      	ldr	r2, [r7, #24]
 800a116:	4013      	ands	r3, r2
 800a118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	68da      	ldr	r2, [r3, #12]
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	fa02 f303 	lsl.w	r3, r2, r3
 800a126:	69ba      	ldr	r2, [r7, #24]
 800a128:	4313      	orrs	r3, r2
 800a12a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	69ba      	ldr	r2, [r7, #24]
 800a130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a138:	2201      	movs	r2, #1
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	fa02 f303 	lsl.w	r3, r2, r3
 800a140:	43db      	mvns	r3, r3
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	4013      	ands	r3, r2
 800a146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	091b      	lsrs	r3, r3, #4
 800a14e:	f003 0201 	and.w	r2, r3, #1
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	fa02 f303 	lsl.w	r3, r2, r3
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	69ba      	ldr	r2, [r7, #24]
 800a162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	f003 0303 	and.w	r3, r3, #3
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d017      	beq.n	800a1a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	2203      	movs	r2, #3
 800a17c:	fa02 f303 	lsl.w	r3, r2, r3
 800a180:	43db      	mvns	r3, r3
 800a182:	69ba      	ldr	r2, [r7, #24]
 800a184:	4013      	ands	r3, r2
 800a186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	689a      	ldr	r2, [r3, #8]
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	fa02 f303 	lsl.w	r3, r2, r3
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	4313      	orrs	r3, r2
 800a198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	69ba      	ldr	r2, [r7, #24]
 800a19e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f003 0303 	and.w	r3, r3, #3
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d123      	bne.n	800a1f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	08da      	lsrs	r2, r3, #3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3208      	adds	r2, #8
 800a1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	f003 0307 	and.w	r3, r3, #7
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	220f      	movs	r2, #15
 800a1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c8:	43db      	mvns	r3, r3
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	691a      	ldr	r2, [r3, #16]
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e0:	69ba      	ldr	r2, [r7, #24]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	08da      	lsrs	r2, r3, #3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3208      	adds	r2, #8
 800a1ee:	69b9      	ldr	r1, [r7, #24]
 800a1f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	005b      	lsls	r3, r3, #1
 800a1fe:	2203      	movs	r2, #3
 800a200:	fa02 f303 	lsl.w	r3, r2, r3
 800a204:	43db      	mvns	r3, r3
 800a206:	69ba      	ldr	r2, [r7, #24]
 800a208:	4013      	ands	r3, r2
 800a20a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	f003 0203 	and.w	r2, r3, #3
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	fa02 f303 	lsl.w	r3, r2, r3
 800a21c:	69ba      	ldr	r2, [r7, #24]
 800a21e:	4313      	orrs	r3, r2
 800a220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	69ba      	ldr	r2, [r7, #24]
 800a226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 80b4 	beq.w	800a39e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a236:	2300      	movs	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]
 800a23a:	4b60      	ldr	r3, [pc, #384]	; (800a3bc <HAL_GPIO_Init+0x30c>)
 800a23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a23e:	4a5f      	ldr	r2, [pc, #380]	; (800a3bc <HAL_GPIO_Init+0x30c>)
 800a240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a244:	6453      	str	r3, [r2, #68]	; 0x44
 800a246:	4b5d      	ldr	r3, [pc, #372]	; (800a3bc <HAL_GPIO_Init+0x30c>)
 800a248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a24a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a252:	4a5b      	ldr	r2, [pc, #364]	; (800a3c0 <HAL_GPIO_Init+0x310>)
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	089b      	lsrs	r3, r3, #2
 800a258:	3302      	adds	r3, #2
 800a25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a25e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	f003 0303 	and.w	r3, r3, #3
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	220f      	movs	r2, #15
 800a26a:	fa02 f303 	lsl.w	r3, r2, r3
 800a26e:	43db      	mvns	r3, r3
 800a270:	69ba      	ldr	r2, [r7, #24]
 800a272:	4013      	ands	r3, r2
 800a274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a52      	ldr	r2, [pc, #328]	; (800a3c4 <HAL_GPIO_Init+0x314>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d02b      	beq.n	800a2d6 <HAL_GPIO_Init+0x226>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a51      	ldr	r2, [pc, #324]	; (800a3c8 <HAL_GPIO_Init+0x318>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d025      	beq.n	800a2d2 <HAL_GPIO_Init+0x222>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a50      	ldr	r2, [pc, #320]	; (800a3cc <HAL_GPIO_Init+0x31c>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d01f      	beq.n	800a2ce <HAL_GPIO_Init+0x21e>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a4f      	ldr	r2, [pc, #316]	; (800a3d0 <HAL_GPIO_Init+0x320>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d019      	beq.n	800a2ca <HAL_GPIO_Init+0x21a>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a4e      	ldr	r2, [pc, #312]	; (800a3d4 <HAL_GPIO_Init+0x324>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d013      	beq.n	800a2c6 <HAL_GPIO_Init+0x216>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a4d      	ldr	r2, [pc, #308]	; (800a3d8 <HAL_GPIO_Init+0x328>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d00d      	beq.n	800a2c2 <HAL_GPIO_Init+0x212>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a4c      	ldr	r2, [pc, #304]	; (800a3dc <HAL_GPIO_Init+0x32c>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d007      	beq.n	800a2be <HAL_GPIO_Init+0x20e>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a4b      	ldr	r2, [pc, #300]	; (800a3e0 <HAL_GPIO_Init+0x330>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d101      	bne.n	800a2ba <HAL_GPIO_Init+0x20a>
 800a2b6:	2307      	movs	r3, #7
 800a2b8:	e00e      	b.n	800a2d8 <HAL_GPIO_Init+0x228>
 800a2ba:	2308      	movs	r3, #8
 800a2bc:	e00c      	b.n	800a2d8 <HAL_GPIO_Init+0x228>
 800a2be:	2306      	movs	r3, #6
 800a2c0:	e00a      	b.n	800a2d8 <HAL_GPIO_Init+0x228>
 800a2c2:	2305      	movs	r3, #5
 800a2c4:	e008      	b.n	800a2d8 <HAL_GPIO_Init+0x228>
 800a2c6:	2304      	movs	r3, #4
 800a2c8:	e006      	b.n	800a2d8 <HAL_GPIO_Init+0x228>
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	e004      	b.n	800a2d8 <HAL_GPIO_Init+0x228>
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e002      	b.n	800a2d8 <HAL_GPIO_Init+0x228>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e000      	b.n	800a2d8 <HAL_GPIO_Init+0x228>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	69fa      	ldr	r2, [r7, #28]
 800a2da:	f002 0203 	and.w	r2, r2, #3
 800a2de:	0092      	lsls	r2, r2, #2
 800a2e0:	4093      	lsls	r3, r2
 800a2e2:	69ba      	ldr	r2, [r7, #24]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a2e8:	4935      	ldr	r1, [pc, #212]	; (800a3c0 <HAL_GPIO_Init+0x310>)
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	089b      	lsrs	r3, r3, #2
 800a2ee:	3302      	adds	r3, #2
 800a2f0:	69ba      	ldr	r2, [r7, #24]
 800a2f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a2f6:	4b3b      	ldr	r3, [pc, #236]	; (800a3e4 <HAL_GPIO_Init+0x334>)
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	43db      	mvns	r3, r3
 800a300:	69ba      	ldr	r2, [r7, #24]
 800a302:	4013      	ands	r3, r2
 800a304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a312:	69ba      	ldr	r2, [r7, #24]
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	4313      	orrs	r3, r2
 800a318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a31a:	4a32      	ldr	r2, [pc, #200]	; (800a3e4 <HAL_GPIO_Init+0x334>)
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a320:	4b30      	ldr	r3, [pc, #192]	; (800a3e4 <HAL_GPIO_Init+0x334>)
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	43db      	mvns	r3, r3
 800a32a:	69ba      	ldr	r2, [r7, #24]
 800a32c:	4013      	ands	r3, r2
 800a32e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d003      	beq.n	800a344 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a33c:	69ba      	ldr	r2, [r7, #24]
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	4313      	orrs	r3, r2
 800a342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a344:	4a27      	ldr	r2, [pc, #156]	; (800a3e4 <HAL_GPIO_Init+0x334>)
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a34a:	4b26      	ldr	r3, [pc, #152]	; (800a3e4 <HAL_GPIO_Init+0x334>)
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	43db      	mvns	r3, r3
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	4013      	ands	r3, r2
 800a358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a36e:	4a1d      	ldr	r2, [pc, #116]	; (800a3e4 <HAL_GPIO_Init+0x334>)
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a374:	4b1b      	ldr	r3, [pc, #108]	; (800a3e4 <HAL_GPIO_Init+0x334>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	43db      	mvns	r3, r3
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	4013      	ands	r3, r2
 800a382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d003      	beq.n	800a398 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	4313      	orrs	r3, r2
 800a396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a398:	4a12      	ldr	r2, [pc, #72]	; (800a3e4 <HAL_GPIO_Init+0x334>)
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	61fb      	str	r3, [r7, #28]
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	2b0f      	cmp	r3, #15
 800a3a8:	f67f ae90 	bls.w	800a0cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a3ac:	bf00      	nop
 800a3ae:	bf00      	nop
 800a3b0:	3724      	adds	r7, #36	; 0x24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	40023800 	.word	0x40023800
 800a3c0:	40013800 	.word	0x40013800
 800a3c4:	40020000 	.word	0x40020000
 800a3c8:	40020400 	.word	0x40020400
 800a3cc:	40020800 	.word	0x40020800
 800a3d0:	40020c00 	.word	0x40020c00
 800a3d4:	40021000 	.word	0x40021000
 800a3d8:	40021400 	.word	0x40021400
 800a3dc:	40021800 	.word	0x40021800
 800a3e0:	40021c00 	.word	0x40021c00
 800a3e4:	40013c00 	.word	0x40013c00

0800a3e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]
 800a402:	e0cd      	b.n	800a5a0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a404:	2201      	movs	r2, #1
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	fa02 f303 	lsl.w	r3, r2, r3
 800a40c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	4013      	ands	r3, r2
 800a414:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	f040 80bd 	bne.w	800a59a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a420:	4a65      	ldr	r2, [pc, #404]	; (800a5b8 <HAL_GPIO_DeInit+0x1d0>)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	089b      	lsrs	r3, r3, #2
 800a426:	3302      	adds	r3, #2
 800a428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a42c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f003 0303 	and.w	r3, r3, #3
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	220f      	movs	r2, #15
 800a438:	fa02 f303 	lsl.w	r3, r2, r3
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	4013      	ands	r3, r2
 800a440:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a5d      	ldr	r2, [pc, #372]	; (800a5bc <HAL_GPIO_DeInit+0x1d4>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d02b      	beq.n	800a4a2 <HAL_GPIO_DeInit+0xba>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a5c      	ldr	r2, [pc, #368]	; (800a5c0 <HAL_GPIO_DeInit+0x1d8>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d025      	beq.n	800a49e <HAL_GPIO_DeInit+0xb6>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a5b      	ldr	r2, [pc, #364]	; (800a5c4 <HAL_GPIO_DeInit+0x1dc>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d01f      	beq.n	800a49a <HAL_GPIO_DeInit+0xb2>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a5a      	ldr	r2, [pc, #360]	; (800a5c8 <HAL_GPIO_DeInit+0x1e0>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d019      	beq.n	800a496 <HAL_GPIO_DeInit+0xae>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a59      	ldr	r2, [pc, #356]	; (800a5cc <HAL_GPIO_DeInit+0x1e4>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d013      	beq.n	800a492 <HAL_GPIO_DeInit+0xaa>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a58      	ldr	r2, [pc, #352]	; (800a5d0 <HAL_GPIO_DeInit+0x1e8>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d00d      	beq.n	800a48e <HAL_GPIO_DeInit+0xa6>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a57      	ldr	r2, [pc, #348]	; (800a5d4 <HAL_GPIO_DeInit+0x1ec>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d007      	beq.n	800a48a <HAL_GPIO_DeInit+0xa2>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a56      	ldr	r2, [pc, #344]	; (800a5d8 <HAL_GPIO_DeInit+0x1f0>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d101      	bne.n	800a486 <HAL_GPIO_DeInit+0x9e>
 800a482:	2307      	movs	r3, #7
 800a484:	e00e      	b.n	800a4a4 <HAL_GPIO_DeInit+0xbc>
 800a486:	2308      	movs	r3, #8
 800a488:	e00c      	b.n	800a4a4 <HAL_GPIO_DeInit+0xbc>
 800a48a:	2306      	movs	r3, #6
 800a48c:	e00a      	b.n	800a4a4 <HAL_GPIO_DeInit+0xbc>
 800a48e:	2305      	movs	r3, #5
 800a490:	e008      	b.n	800a4a4 <HAL_GPIO_DeInit+0xbc>
 800a492:	2304      	movs	r3, #4
 800a494:	e006      	b.n	800a4a4 <HAL_GPIO_DeInit+0xbc>
 800a496:	2303      	movs	r3, #3
 800a498:	e004      	b.n	800a4a4 <HAL_GPIO_DeInit+0xbc>
 800a49a:	2302      	movs	r3, #2
 800a49c:	e002      	b.n	800a4a4 <HAL_GPIO_DeInit+0xbc>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <HAL_GPIO_DeInit+0xbc>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	f002 0203 	and.w	r2, r2, #3
 800a4aa:	0092      	lsls	r2, r2, #2
 800a4ac:	4093      	lsls	r3, r2
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d132      	bne.n	800a51a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a4b4:	4b49      	ldr	r3, [pc, #292]	; (800a5dc <HAL_GPIO_DeInit+0x1f4>)
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	43db      	mvns	r3, r3
 800a4bc:	4947      	ldr	r1, [pc, #284]	; (800a5dc <HAL_GPIO_DeInit+0x1f4>)
 800a4be:	4013      	ands	r3, r2
 800a4c0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a4c2:	4b46      	ldr	r3, [pc, #280]	; (800a5dc <HAL_GPIO_DeInit+0x1f4>)
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	43db      	mvns	r3, r3
 800a4ca:	4944      	ldr	r1, [pc, #272]	; (800a5dc <HAL_GPIO_DeInit+0x1f4>)
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a4d0:	4b42      	ldr	r3, [pc, #264]	; (800a5dc <HAL_GPIO_DeInit+0x1f4>)
 800a4d2:	68da      	ldr	r2, [r3, #12]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	43db      	mvns	r3, r3
 800a4d8:	4940      	ldr	r1, [pc, #256]	; (800a5dc <HAL_GPIO_DeInit+0x1f4>)
 800a4da:	4013      	ands	r3, r2
 800a4dc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a4de:	4b3f      	ldr	r3, [pc, #252]	; (800a5dc <HAL_GPIO_DeInit+0x1f4>)
 800a4e0:	689a      	ldr	r2, [r3, #8]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	43db      	mvns	r3, r3
 800a4e6:	493d      	ldr	r1, [pc, #244]	; (800a5dc <HAL_GPIO_DeInit+0x1f4>)
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	220f      	movs	r2, #15
 800a4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a4fc:	4a2e      	ldr	r2, [pc, #184]	; (800a5b8 <HAL_GPIO_DeInit+0x1d0>)
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	089b      	lsrs	r3, r3, #2
 800a502:	3302      	adds	r3, #2
 800a504:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	43da      	mvns	r2, r3
 800a50c:	482a      	ldr	r0, [pc, #168]	; (800a5b8 <HAL_GPIO_DeInit+0x1d0>)
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	089b      	lsrs	r3, r3, #2
 800a512:	400a      	ands	r2, r1
 800a514:	3302      	adds	r3, #2
 800a516:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	005b      	lsls	r3, r3, #1
 800a522:	2103      	movs	r1, #3
 800a524:	fa01 f303 	lsl.w	r3, r1, r3
 800a528:	43db      	mvns	r3, r3
 800a52a:	401a      	ands	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	08da      	lsrs	r2, r3, #3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3208      	adds	r2, #8
 800a538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f003 0307 	and.w	r3, r3, #7
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	220f      	movs	r2, #15
 800a546:	fa02 f303 	lsl.w	r3, r2, r3
 800a54a:	43db      	mvns	r3, r3
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	08d2      	lsrs	r2, r2, #3
 800a550:	4019      	ands	r1, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3208      	adds	r2, #8
 800a556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68da      	ldr	r2, [r3, #12]
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	005b      	lsls	r3, r3, #1
 800a562:	2103      	movs	r1, #3
 800a564:	fa01 f303 	lsl.w	r3, r1, r3
 800a568:	43db      	mvns	r3, r3
 800a56a:	401a      	ands	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	2101      	movs	r1, #1
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	fa01 f303 	lsl.w	r3, r1, r3
 800a57c:	43db      	mvns	r3, r3
 800a57e:	401a      	ands	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	689a      	ldr	r2, [r3, #8]
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	005b      	lsls	r3, r3, #1
 800a58c:	2103      	movs	r1, #3
 800a58e:	fa01 f303 	lsl.w	r3, r1, r3
 800a592:	43db      	mvns	r3, r3
 800a594:	401a      	ands	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	3301      	adds	r3, #1
 800a59e:	617b      	str	r3, [r7, #20]
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	2b0f      	cmp	r3, #15
 800a5a4:	f67f af2e 	bls.w	800a404 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a5a8:	bf00      	nop
 800a5aa:	bf00      	nop
 800a5ac:	371c      	adds	r7, #28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	40013800 	.word	0x40013800
 800a5bc:	40020000 	.word	0x40020000
 800a5c0:	40020400 	.word	0x40020400
 800a5c4:	40020800 	.word	0x40020800
 800a5c8:	40020c00 	.word	0x40020c00
 800a5cc:	40021000 	.word	0x40021000
 800a5d0:	40021400 	.word	0x40021400
 800a5d4:	40021800 	.word	0x40021800
 800a5d8:	40021c00 	.word	0x40021c00
 800a5dc:	40013c00 	.word	0x40013c00

0800a5e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	807b      	strh	r3, [r7, #2]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a5f0:	787b      	ldrb	r3, [r7, #1]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a5f6:	887a      	ldrh	r2, [r7, #2]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a5fc:	e003      	b.n	800a606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a5fe:	887b      	ldrh	r3, [r7, #2]
 800a600:	041a      	lsls	r2, r3, #16
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	619a      	str	r2, [r3, #24]
}
 800a606:	bf00      	nop
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	60b9      	str	r1, [r7, #8]
 800a61c:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e03e      	b.n	800a6a6 <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	d106      	bne.n	800a642 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f7fa fa19 	bl	8004a74 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	3304      	adds	r3, #4
 800a64a:	4619      	mov	r1, r3
 800a64c:	4610      	mov	r0, r2
 800a64e:	f003 ff55 	bl	800e4fc <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6818      	ldr	r0, [r3, #0]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	461a      	mov	r2, r3
 800a65c:	68b9      	ldr	r1, [r7, #8]
 800a65e:	f003 ff99 	bl	800e594 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6818      	ldr	r0, [r3, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	461a      	mov	r2, r3
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	f003 ffc6 	bl	800e5fe <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	2b10      	cmp	r3, #16
 800a678:	d108      	bne.n	800a68c <HAL_NAND_Init+0x7a>
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f042 0204 	orr.w	r2, r2, #4
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	e007      	b.n	800a69c <HAL_NAND_Init+0x8a>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6a1a      	ldr	r2, [r3, #32]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f042 0204 	orr.w	r2, r2, #4
 800a69a:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2b10      	cmp	r3, #16
 800a6bc:	d10a      	bne.n	800a6d4 <HAL_NAND_IRQHandler+0x26>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	f003 0301 	and.w	r3, r3, #1
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	bf0c      	ite	eq
 800a6cc:	2301      	moveq	r3, #1
 800a6ce:	2300      	movne	r3, #0
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	e009      	b.n	800a6e8 <HAL_NAND_IRQHandler+0x3a>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6da:	f003 0301 	and.w	r3, r3, #1
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	bf0c      	ite	eq
 800a6e2:	2301      	moveq	r3, #1
 800a6e4:	2300      	movne	r3, #0
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d017      	beq.n	800a71c <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f8b2 	bl	800a856 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	2b10      	cmp	r3, #16
 800a6f8:	d108      	bne.n	800a70c <HAL_NAND_IRQHandler+0x5e>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	685a      	ldr	r2, [r3, #4]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f022 0201 	bic.w	r2, r2, #1
 800a708:	605a      	str	r2, [r3, #4]
 800a70a:	e007      	b.n	800a71c <HAL_NAND_IRQHandler+0x6e>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f022 0201 	bic.w	r2, r2, #1
 800a71a:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	2b10      	cmp	r3, #16
 800a722:	d10a      	bne.n	800a73a <HAL_NAND_IRQHandler+0x8c>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	f003 0302 	and.w	r3, r3, #2
 800a72e:	2b02      	cmp	r3, #2
 800a730:	bf0c      	ite	eq
 800a732:	2301      	moveq	r3, #1
 800a734:	2300      	movne	r3, #0
 800a736:	b2db      	uxtb	r3, r3
 800a738:	e009      	b.n	800a74e <HAL_NAND_IRQHandler+0xa0>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a740:	f003 0302 	and.w	r3, r3, #2
 800a744:	2b02      	cmp	r3, #2
 800a746:	bf0c      	ite	eq
 800a748:	2301      	moveq	r3, #1
 800a74a:	2300      	movne	r3, #0
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d017      	beq.n	800a782 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f87f 	bl	800a856 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	2b10      	cmp	r3, #16
 800a75e:	d108      	bne.n	800a772 <HAL_NAND_IRQHandler+0xc4>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	685a      	ldr	r2, [r3, #4]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f022 0202 	bic.w	r2, r2, #2
 800a76e:	605a      	str	r2, [r3, #4]
 800a770:	e007      	b.n	800a782 <HAL_NAND_IRQHandler+0xd4>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f022 0202 	bic.w	r2, r2, #2
 800a780:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	2b10      	cmp	r3, #16
 800a788:	d10a      	bne.n	800a7a0 <HAL_NAND_IRQHandler+0xf2>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	f003 0304 	and.w	r3, r3, #4
 800a794:	2b04      	cmp	r3, #4
 800a796:	bf0c      	ite	eq
 800a798:	2301      	moveq	r3, #1
 800a79a:	2300      	movne	r3, #0
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	e009      	b.n	800a7b4 <HAL_NAND_IRQHandler+0x106>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	f003 0304 	and.w	r3, r3, #4
 800a7aa:	2b04      	cmp	r3, #4
 800a7ac:	bf0c      	ite	eq
 800a7ae:	2301      	moveq	r3, #1
 800a7b0:	2300      	movne	r3, #0
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d017      	beq.n	800a7e8 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f84c 	bl	800a856 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	2b10      	cmp	r3, #16
 800a7c4:	d108      	bne.n	800a7d8 <HAL_NAND_IRQHandler+0x12a>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f022 0204 	bic.w	r2, r2, #4
 800a7d4:	605a      	str	r2, [r3, #4]
 800a7d6:	e007      	b.n	800a7e8 <HAL_NAND_IRQHandler+0x13a>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f022 0204 	bic.w	r2, r2, #4
 800a7e6:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	2b10      	cmp	r3, #16
 800a7ee:	d10a      	bne.n	800a806 <HAL_NAND_IRQHandler+0x158>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7fa:	2b40      	cmp	r3, #64	; 0x40
 800a7fc:	bf0c      	ite	eq
 800a7fe:	2301      	moveq	r3, #1
 800a800:	2300      	movne	r3, #0
 800a802:	b2db      	uxtb	r3, r3
 800a804:	e009      	b.n	800a81a <HAL_NAND_IRQHandler+0x16c>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a810:	2b40      	cmp	r3, #64	; 0x40
 800a812:	bf0c      	ite	eq
 800a814:	2301      	moveq	r3, #1
 800a816:	2300      	movne	r3, #0
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d017      	beq.n	800a84e <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f819 	bl	800a856 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	2b10      	cmp	r3, #16
 800a82a:	d108      	bne.n	800a83e <HAL_NAND_IRQHandler+0x190>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a83a:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 800a83c:	e007      	b.n	800a84e <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a84c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a84e:	bf00      	nop
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 800a85e:	bf00      	nop
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a86a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a86c:	b08f      	sub	sp, #60	; 0x3c
 800a86e:	af0a      	add	r7, sp, #40	; 0x28
 800a870:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e10f      	b.n	800aa9c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d106      	bne.n	800a89c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f007 fe82 	bl	80125a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2203      	movs	r2, #3
 800a8a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d102      	bne.n	800a8b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f003 ffe9 	bl	800e892 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	603b      	str	r3, [r7, #0]
 800a8c6:	687e      	ldr	r6, [r7, #4]
 800a8c8:	466d      	mov	r5, sp
 800a8ca:	f106 0410 	add.w	r4, r6, #16
 800a8ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a8d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a8d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a8da:	e885 0003 	stmia.w	r5, {r0, r1}
 800a8de:	1d33      	adds	r3, r6, #4
 800a8e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a8e2:	6838      	ldr	r0, [r7, #0]
 800a8e4:	f003 fec0 	bl	800e668 <USB_CoreInit>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d005      	beq.n	800a8fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2202      	movs	r2, #2
 800a8f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e0d0      	b.n	800aa9c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2100      	movs	r1, #0
 800a900:	4618      	mov	r0, r3
 800a902:	f003 ffd7 	bl	800e8b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a906:	2300      	movs	r3, #0
 800a908:	73fb      	strb	r3, [r7, #15]
 800a90a:	e04a      	b.n	800a9a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a90c:	7bfa      	ldrb	r2, [r7, #15]
 800a90e:	6879      	ldr	r1, [r7, #4]
 800a910:	4613      	mov	r3, r2
 800a912:	00db      	lsls	r3, r3, #3
 800a914:	4413      	add	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	440b      	add	r3, r1
 800a91a:	333d      	adds	r3, #61	; 0x3d
 800a91c:	2201      	movs	r2, #1
 800a91e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a920:	7bfa      	ldrb	r2, [r7, #15]
 800a922:	6879      	ldr	r1, [r7, #4]
 800a924:	4613      	mov	r3, r2
 800a926:	00db      	lsls	r3, r3, #3
 800a928:	4413      	add	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	440b      	add	r3, r1
 800a92e:	333c      	adds	r3, #60	; 0x3c
 800a930:	7bfa      	ldrb	r2, [r7, #15]
 800a932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a934:	7bfa      	ldrb	r2, [r7, #15]
 800a936:	7bfb      	ldrb	r3, [r7, #15]
 800a938:	b298      	uxth	r0, r3
 800a93a:	6879      	ldr	r1, [r7, #4]
 800a93c:	4613      	mov	r3, r2
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	4413      	add	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	440b      	add	r3, r1
 800a946:	3344      	adds	r3, #68	; 0x44
 800a948:	4602      	mov	r2, r0
 800a94a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a94c:	7bfa      	ldrb	r2, [r7, #15]
 800a94e:	6879      	ldr	r1, [r7, #4]
 800a950:	4613      	mov	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	4413      	add	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	440b      	add	r3, r1
 800a95a:	3340      	adds	r3, #64	; 0x40
 800a95c:	2200      	movs	r2, #0
 800a95e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a960:	7bfa      	ldrb	r2, [r7, #15]
 800a962:	6879      	ldr	r1, [r7, #4]
 800a964:	4613      	mov	r3, r2
 800a966:	00db      	lsls	r3, r3, #3
 800a968:	4413      	add	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	440b      	add	r3, r1
 800a96e:	3348      	adds	r3, #72	; 0x48
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a974:	7bfa      	ldrb	r2, [r7, #15]
 800a976:	6879      	ldr	r1, [r7, #4]
 800a978:	4613      	mov	r3, r2
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	4413      	add	r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	440b      	add	r3, r1
 800a982:	334c      	adds	r3, #76	; 0x4c
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a988:	7bfa      	ldrb	r2, [r7, #15]
 800a98a:	6879      	ldr	r1, [r7, #4]
 800a98c:	4613      	mov	r3, r2
 800a98e:	00db      	lsls	r3, r3, #3
 800a990:	4413      	add	r3, r2
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	440b      	add	r3, r1
 800a996:	3354      	adds	r3, #84	; 0x54
 800a998:	2200      	movs	r2, #0
 800a99a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	73fb      	strb	r3, [r7, #15]
 800a9a2:	7bfa      	ldrb	r2, [r7, #15]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d3af      	bcc.n	800a90c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	73fb      	strb	r3, [r7, #15]
 800a9b0:	e044      	b.n	800aa3c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a9b2:	7bfa      	ldrb	r2, [r7, #15]
 800a9b4:	6879      	ldr	r1, [r7, #4]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	00db      	lsls	r3, r3, #3
 800a9ba:	4413      	add	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	440b      	add	r3, r1
 800a9c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a9c8:	7bfa      	ldrb	r2, [r7, #15]
 800a9ca:	6879      	ldr	r1, [r7, #4]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	00db      	lsls	r3, r3, #3
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	440b      	add	r3, r1
 800a9d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a9da:	7bfa      	ldrb	r2, [r7, #15]
 800a9dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a9de:	7bfa      	ldrb	r2, [r7, #15]
 800a9e0:	6879      	ldr	r1, [r7, #4]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	00db      	lsls	r3, r3, #3
 800a9e6:	4413      	add	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	440b      	add	r3, r1
 800a9ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a9f4:	7bfa      	ldrb	r2, [r7, #15]
 800a9f6:	6879      	ldr	r1, [r7, #4]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	4413      	add	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	440b      	add	r3, r1
 800aa02:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800aa06:	2200      	movs	r2, #0
 800aa08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800aa0a:	7bfa      	ldrb	r2, [r7, #15]
 800aa0c:	6879      	ldr	r1, [r7, #4]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	00db      	lsls	r3, r3, #3
 800aa12:	4413      	add	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	440b      	add	r3, r1
 800aa18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800aa20:	7bfa      	ldrb	r2, [r7, #15]
 800aa22:	6879      	ldr	r1, [r7, #4]
 800aa24:	4613      	mov	r3, r2
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	4413      	add	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	440b      	add	r3, r1
 800aa2e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	73fb      	strb	r3, [r7, #15]
 800aa3c:	7bfa      	ldrb	r2, [r7, #15]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d3b5      	bcc.n	800a9b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	603b      	str	r3, [r7, #0]
 800aa4c:	687e      	ldr	r6, [r7, #4]
 800aa4e:	466d      	mov	r5, sp
 800aa50:	f106 0410 	add.w	r4, r6, #16
 800aa54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aa60:	e885 0003 	stmia.w	r5, {r0, r1}
 800aa64:	1d33      	adds	r3, r6, #4
 800aa66:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa68:	6838      	ldr	r0, [r7, #0]
 800aa6a:	f003 ff6f 	bl	800e94c <USB_DevInit>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d005      	beq.n	800aa80 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2202      	movs	r2, #2
 800aa78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e00d      	b.n	800aa9c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f005 f8be 	bl	800fc16 <USB_DevDisconnect>

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aaa4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d101      	bne.n	800aac0 <HAL_PCD_Start+0x1c>
 800aabc:	2302      	movs	r3, #2
 800aabe:	e020      	b.n	800ab02 <HAL_PCD_Start+0x5e>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d109      	bne.n	800aae4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d005      	beq.n	800aae4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aadc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f003 fec1 	bl	800e870 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f005 f86e 	bl	800fbd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ab0a:	b590      	push	{r4, r7, lr}
 800ab0c:	b08d      	sub	sp, #52	; 0x34
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab18:	6a3b      	ldr	r3, [r7, #32]
 800ab1a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f005 f92c 	bl	800fd7e <USB_GetMode>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f040 848a 	bne.w	800b442 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f005 f890 	bl	800fc58 <USB_ReadInterrupts>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f000 8480 	beq.w	800b440 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	0a1b      	lsrs	r3, r3, #8
 800ab4a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f005 f87d 	bl	800fc58 <USB_ReadInterrupts>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	f003 0302 	and.w	r3, r3, #2
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d107      	bne.n	800ab78 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	695a      	ldr	r2, [r3, #20]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f002 0202 	and.w	r2, r2, #2
 800ab76:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f005 f86b 	bl	800fc58 <USB_ReadInterrupts>
 800ab82:	4603      	mov	r3, r0
 800ab84:	f003 0310 	and.w	r3, r3, #16
 800ab88:	2b10      	cmp	r3, #16
 800ab8a:	d161      	bne.n	800ac50 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	699a      	ldr	r2, [r3, #24]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f022 0210 	bic.w	r2, r2, #16
 800ab9a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800ab9c:	6a3b      	ldr	r3, [r7, #32]
 800ab9e:	6a1b      	ldr	r3, [r3, #32]
 800aba0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	f003 020f 	and.w	r2, r3, #15
 800aba8:	4613      	mov	r3, r2
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	4413      	add	r3, r2
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	4413      	add	r3, r2
 800abb8:	3304      	adds	r3, #4
 800abba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	0c5b      	lsrs	r3, r3, #17
 800abc0:	f003 030f 	and.w	r3, r3, #15
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d124      	bne.n	800ac12 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800abc8:	69ba      	ldr	r2, [r7, #24]
 800abca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800abce:	4013      	ands	r3, r2
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d035      	beq.n	800ac40 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	091b      	lsrs	r3, r3, #4
 800abdc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800abde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	461a      	mov	r2, r3
 800abe6:	6a38      	ldr	r0, [r7, #32]
 800abe8:	f004 fea2 	bl	800f930 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	691a      	ldr	r2, [r3, #16]
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	091b      	lsrs	r3, r3, #4
 800abf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abf8:	441a      	add	r2, r3
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	6a1a      	ldr	r2, [r3, #32]
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	091b      	lsrs	r3, r3, #4
 800ac06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac0a:	441a      	add	r2, r3
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	621a      	str	r2, [r3, #32]
 800ac10:	e016      	b.n	800ac40 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	0c5b      	lsrs	r3, r3, #17
 800ac16:	f003 030f 	and.w	r3, r3, #15
 800ac1a:	2b06      	cmp	r3, #6
 800ac1c:	d110      	bne.n	800ac40 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ac24:	2208      	movs	r2, #8
 800ac26:	4619      	mov	r1, r3
 800ac28:	6a38      	ldr	r0, [r7, #32]
 800ac2a:	f004 fe81 	bl	800f930 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	6a1a      	ldr	r2, [r3, #32]
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	091b      	lsrs	r3, r3, #4
 800ac36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac3a:	441a      	add	r2, r3
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	699a      	ldr	r2, [r3, #24]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f042 0210 	orr.w	r2, r2, #16
 800ac4e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f004 ffff 	bl	800fc58 <USB_ReadInterrupts>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ac64:	f040 80a7 	bne.w	800adb6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f005 f804 	bl	800fc7e <USB_ReadDevAllOutEpInterrupt>
 800ac76:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800ac78:	e099      	b.n	800adae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800ac7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7c:	f003 0301 	and.w	r3, r3, #1
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f000 808e 	beq.w	800ada2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac8c:	b2d2      	uxtb	r2, r2
 800ac8e:	4611      	mov	r1, r2
 800ac90:	4618      	mov	r0, r3
 800ac92:	f005 f828 	bl	800fce6 <USB_ReadDevOutEPInterrupt>
 800ac96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00c      	beq.n	800acbc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800aca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca4:	015a      	lsls	r2, r3, #5
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	4413      	add	r3, r2
 800acaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acae:	461a      	mov	r2, r3
 800acb0:	2301      	movs	r3, #1
 800acb2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800acb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fec2 	bl	800ba40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	f003 0308 	and.w	r3, r3, #8
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00c      	beq.n	800ace0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd2:	461a      	mov	r2, r3
 800acd4:	2308      	movs	r3, #8
 800acd6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800acd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 ff98 	bl	800bc10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	f003 0310 	and.w	r3, r3, #16
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d008      	beq.n	800acfc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acec:	015a      	lsls	r2, r3, #5
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	4413      	add	r3, r2
 800acf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acf6:	461a      	mov	r2, r3
 800acf8:	2310      	movs	r3, #16
 800acfa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	f003 0302 	and.w	r3, r3, #2
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d030      	beq.n	800ad68 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad0e:	2b80      	cmp	r3, #128	; 0x80
 800ad10:	d109      	bne.n	800ad26 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	69fa      	ldr	r2, [r7, #28]
 800ad1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad24:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800ad26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad28:	4613      	mov	r3, r2
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	4413      	add	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	4413      	add	r3, r2
 800ad38:	3304      	adds	r3, #4
 800ad3a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	78db      	ldrb	r3, [r3, #3]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d108      	bne.n	800ad56 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	2200      	movs	r2, #0
 800ad48:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ad4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f007 fdc7 	bl	80128e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800ad56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad58:	015a      	lsls	r2, r3, #5
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad62:	461a      	mov	r2, r3
 800ad64:	2302      	movs	r3, #2
 800ad66:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	f003 0320 	and.w	r3, r3, #32
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d008      	beq.n	800ad84 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad7e:	461a      	mov	r2, r3
 800ad80:	2320      	movs	r3, #32
 800ad82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d009      	beq.n	800ada2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad90:	015a      	lsls	r2, r3, #5
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	4413      	add	r3, r2
 800ad96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ada0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	3301      	adds	r3, #1
 800ada6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	085b      	lsrs	r3, r3, #1
 800adac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800adae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f47f af62 	bne.w	800ac7a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4618      	mov	r0, r3
 800adbc:	f004 ff4c 	bl	800fc58 <USB_ReadInterrupts>
 800adc0:	4603      	mov	r3, r0
 800adc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800adca:	f040 80db 	bne.w	800af84 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4618      	mov	r0, r3
 800add4:	f004 ff6d 	bl	800fcb2 <USB_ReadDevAllInEpInterrupt>
 800add8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800adde:	e0cd      	b.n	800af7c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f000 80c2 	beq.w	800af70 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adf2:	b2d2      	uxtb	r2, r2
 800adf4:	4611      	mov	r1, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f004 ff93 	bl	800fd22 <USB_ReadDevInEPInterrupt>
 800adfc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d057      	beq.n	800aeb8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0a:	f003 030f 	and.w	r3, r3, #15
 800ae0e:	2201      	movs	r2, #1
 800ae10:	fa02 f303 	lsl.w	r3, r2, r3
 800ae14:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	43db      	mvns	r3, r3
 800ae22:	69f9      	ldr	r1, [r7, #28]
 800ae24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae28:	4013      	ands	r3, r2
 800ae2a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2e:	015a      	lsls	r2, r3, #5
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	4413      	add	r3, r2
 800ae34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae38:	461a      	mov	r2, r3
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d132      	bne.n	800aeac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800ae46:	6879      	ldr	r1, [r7, #4]
 800ae48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	4413      	add	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	440b      	add	r3, r1
 800ae54:	334c      	adds	r3, #76	; 0x4c
 800ae56:	6819      	ldr	r1, [r3, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	00db      	lsls	r3, r3, #3
 800ae60:	4413      	add	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4403      	add	r3, r0
 800ae66:	3348      	adds	r3, #72	; 0x48
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4419      	add	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae70:	4613      	mov	r3, r2
 800ae72:	00db      	lsls	r3, r3, #3
 800ae74:	4413      	add	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4403      	add	r3, r0
 800ae7a:	334c      	adds	r3, #76	; 0x4c
 800ae7c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d113      	bne.n	800aeac <HAL_PCD_IRQHandler+0x3a2>
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae88:	4613      	mov	r3, r2
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	4413      	add	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	440b      	add	r3, r1
 800ae92:	3354      	adds	r3, #84	; 0x54
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d108      	bne.n	800aeac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6818      	ldr	r0, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aea4:	461a      	mov	r2, r3
 800aea6:	2101      	movs	r1, #1
 800aea8:	f004 ff9a 	bl	800fde0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800aeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f007 fc91 	bl	80127da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	f003 0308 	and.w	r3, r3, #8
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d008      	beq.n	800aed4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	015a      	lsls	r2, r3, #5
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	4413      	add	r3, r2
 800aeca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aece:	461a      	mov	r2, r3
 800aed0:	2308      	movs	r3, #8
 800aed2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f003 0310 	and.w	r3, r3, #16
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d008      	beq.n	800aef0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeea:	461a      	mov	r2, r3
 800aeec:	2310      	movs	r3, #16
 800aeee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d008      	beq.n	800af0c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800aefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefc:	015a      	lsls	r2, r3, #5
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	4413      	add	r3, r2
 800af02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af06:	461a      	mov	r2, r3
 800af08:	2340      	movs	r3, #64	; 0x40
 800af0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f003 0302 	and.w	r3, r3, #2
 800af12:	2b00      	cmp	r3, #0
 800af14:	d023      	beq.n	800af5e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800af16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af18:	6a38      	ldr	r0, [r7, #32]
 800af1a:	f003 fe7b 	bl	800ec14 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800af1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af20:	4613      	mov	r3, r2
 800af22:	00db      	lsls	r3, r3, #3
 800af24:	4413      	add	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	3338      	adds	r3, #56	; 0x38
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	4413      	add	r3, r2
 800af2e:	3304      	adds	r3, #4
 800af30:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	78db      	ldrb	r3, [r3, #3]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d108      	bne.n	800af4c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2200      	movs	r2, #0
 800af3e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af42:	b2db      	uxtb	r3, r3
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f007 fcde 	bl	8012908 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	015a      	lsls	r2, r3, #5
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	4413      	add	r3, r2
 800af54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af58:	461a      	mov	r2, r3
 800af5a:	2302      	movs	r3, #2
 800af5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af64:	2b00      	cmp	r3, #0
 800af66:	d003      	beq.n	800af70 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800af68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fcdb 	bl	800b926 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800af70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af72:	3301      	adds	r3, #1
 800af74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800af76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af78:	085b      	lsrs	r3, r3, #1
 800af7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800af7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f47f af2e 	bne.w	800ade0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4618      	mov	r0, r3
 800af8a:	f004 fe65 	bl	800fc58 <USB_ReadInterrupts>
 800af8e:	4603      	mov	r3, r0
 800af90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af98:	d122      	bne.n	800afe0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	69fa      	ldr	r2, [r7, #28]
 800afa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afa8:	f023 0301 	bic.w	r3, r3, #1
 800afac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d108      	bne.n	800afca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800afc0:	2100      	movs	r1, #0
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fec2 	bl	800bd4c <HAL_PCDEx_LPM_Callback>
 800afc8:	e002      	b.n	800afd0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f007 fc7c 	bl	80128c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	695a      	ldr	r2, [r3, #20]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800afde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f004 fe37 	bl	800fc58 <USB_ReadInterrupts>
 800afea:	4603      	mov	r3, r0
 800afec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aff4:	d112      	bne.n	800b01c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	2b01      	cmp	r3, #1
 800b004:	d102      	bne.n	800b00c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f007 fc38 	bl	801287c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	695a      	ldr	r2, [r3, #20]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b01a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4618      	mov	r0, r3
 800b022:	f004 fe19 	bl	800fc58 <USB_ReadInterrupts>
 800b026:	4603      	mov	r3, r0
 800b028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b02c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b030:	f040 80b7 	bne.w	800b1a2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	69fa      	ldr	r2, [r7, #28]
 800b03e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b042:	f023 0301 	bic.w	r3, r3, #1
 800b046:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2110      	movs	r1, #16
 800b04e:	4618      	mov	r0, r3
 800b050:	f003 fde0 	bl	800ec14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b054:	2300      	movs	r3, #0
 800b056:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b058:	e046      	b.n	800b0e8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05c:	015a      	lsls	r2, r3, #5
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	4413      	add	r3, r2
 800b062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b066:	461a      	mov	r2, r3
 800b068:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b06c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b070:	015a      	lsls	r2, r3, #5
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	4413      	add	r3, r2
 800b076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b07e:	0151      	lsls	r1, r2, #5
 800b080:	69fa      	ldr	r2, [r7, #28]
 800b082:	440a      	add	r2, r1
 800b084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b088:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b08c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	015a      	lsls	r2, r3, #5
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	4413      	add	r3, r2
 800b096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b09a:	461a      	mov	r2, r3
 800b09c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b0a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a4:	015a      	lsls	r2, r3, #5
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0b2:	0151      	lsls	r1, r2, #5
 800b0b4:	69fa      	ldr	r2, [r7, #28]
 800b0b6:	440a      	add	r2, r1
 800b0b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b0c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c4:	015a      	lsls	r2, r3, #5
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0d2:	0151      	lsls	r1, r2, #5
 800b0d4:	69fa      	ldr	r2, [r7, #28]
 800b0d6:	440a      	add	r2, r1
 800b0d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b0e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d3b3      	bcc.n	800b05a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0f8:	69db      	ldr	r3, [r3, #28]
 800b0fa:	69fa      	ldr	r2, [r7, #28]
 800b0fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b100:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b104:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d016      	beq.n	800b13c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b118:	69fa      	ldr	r2, [r7, #28]
 800b11a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b11e:	f043 030b 	orr.w	r3, r3, #11
 800b122:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b12e:	69fa      	ldr	r2, [r7, #28]
 800b130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b134:	f043 030b 	orr.w	r3, r3, #11
 800b138:	6453      	str	r3, [r2, #68]	; 0x44
 800b13a:	e015      	b.n	800b168 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b142:	695b      	ldr	r3, [r3, #20]
 800b144:	69fa      	ldr	r2, [r7, #28]
 800b146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b14a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b14e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b152:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	69fa      	ldr	r2, [r7, #28]
 800b15e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b162:	f043 030b 	orr.w	r3, r3, #11
 800b166:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	69fa      	ldr	r2, [r7, #28]
 800b172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b176:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b17a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6818      	ldr	r0, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b18c:	461a      	mov	r2, r3
 800b18e:	f004 fe27 	bl	800fde0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	695a      	ldr	r2, [r3, #20]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b1a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f004 fd56 	bl	800fc58 <USB_ReadInterrupts>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1b6:	d124      	bne.n	800b202 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f004 fdec 	bl	800fd9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f003 fda1 	bl	800ed0e <USB_GetDevSpeed>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681c      	ldr	r4, [r3, #0]
 800b1d8:	f001 fa02 	bl	800c5e0 <HAL_RCC_GetHCLKFreq>
 800b1dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f003 faa0 	bl	800e72c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f007 fb1c 	bl	801282a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	695a      	ldr	r2, [r3, #20]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b200:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4618      	mov	r0, r3
 800b208:	f004 fd26 	bl	800fc58 <USB_ReadInterrupts>
 800b20c:	4603      	mov	r3, r0
 800b20e:	f003 0308 	and.w	r3, r3, #8
 800b212:	2b08      	cmp	r3, #8
 800b214:	d10a      	bne.n	800b22c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f007 faf9 	bl	801280e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	695a      	ldr	r2, [r3, #20]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f002 0208 	and.w	r2, r2, #8
 800b22a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4618      	mov	r0, r3
 800b232:	f004 fd11 	bl	800fc58 <USB_ReadInterrupts>
 800b236:	4603      	mov	r3, r0
 800b238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b23c:	2b80      	cmp	r3, #128	; 0x80
 800b23e:	d122      	bne.n	800b286 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b24c:	2301      	movs	r3, #1
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24
 800b250:	e014      	b.n	800b27c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b256:	4613      	mov	r3, r2
 800b258:	00db      	lsls	r3, r3, #3
 800b25a:	4413      	add	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	440b      	add	r3, r1
 800b260:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d105      	bne.n	800b276 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fb27 	bl	800b8c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	3301      	adds	r3, #1
 800b27a:	627b      	str	r3, [r7, #36]	; 0x24
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b282:	429a      	cmp	r2, r3
 800b284:	d3e5      	bcc.n	800b252 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f004 fce4 	bl	800fc58 <USB_ReadInterrupts>
 800b290:	4603      	mov	r3, r0
 800b292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b29a:	d13b      	bne.n	800b314 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b29c:	2301      	movs	r3, #1
 800b29e:	627b      	str	r3, [r7, #36]	; 0x24
 800b2a0:	e02b      	b.n	800b2fa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a4:	015a      	lsls	r2, r3, #5
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b2b2:	6879      	ldr	r1, [r7, #4]
 800b2b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	00db      	lsls	r3, r3, #3
 800b2ba:	4413      	add	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	440b      	add	r3, r1
 800b2c0:	3340      	adds	r3, #64	; 0x40
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d115      	bne.n	800b2f4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b2c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	da12      	bge.n	800b2f4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b2ce:	6879      	ldr	r1, [r7, #4]
 800b2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	00db      	lsls	r3, r3, #3
 800b2d6:	4413      	add	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	440b      	add	r3, r1
 800b2dc:	333f      	adds	r3, #63	; 0x3f
 800b2de:	2201      	movs	r2, #1
 800b2e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fae8 	bl	800b8c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b300:	429a      	cmp	r2, r3
 800b302:	d3ce      	bcc.n	800b2a2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	695a      	ldr	r2, [r3, #20]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4618      	mov	r0, r3
 800b31a:	f004 fc9d 	bl	800fc58 <USB_ReadInterrupts>
 800b31e:	4603      	mov	r3, r0
 800b320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b324:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b328:	d155      	bne.n	800b3d6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b32a:	2301      	movs	r3, #1
 800b32c:	627b      	str	r3, [r7, #36]	; 0x24
 800b32e:	e045      	b.n	800b3bc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	015a      	lsls	r2, r3, #5
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	4413      	add	r3, r2
 800b338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b340:	6879      	ldr	r1, [r7, #4]
 800b342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b344:	4613      	mov	r3, r2
 800b346:	00db      	lsls	r3, r3, #3
 800b348:	4413      	add	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	440b      	add	r3, r1
 800b34e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d12e      	bne.n	800b3b6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b358:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	da2b      	bge.n	800b3b6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800b36a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b36e:	429a      	cmp	r2, r3
 800b370:	d121      	bne.n	800b3b6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b372:	6879      	ldr	r1, [r7, #4]
 800b374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b376:	4613      	mov	r3, r2
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	4413      	add	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	440b      	add	r3, r1
 800b380:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b384:	2201      	movs	r2, #1
 800b386:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b390:	6a3b      	ldr	r3, [r7, #32]
 800b392:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b394:	6a3b      	ldr	r3, [r7, #32]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10a      	bne.n	800b3b6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	69fa      	ldr	r2, [r7, #28]
 800b3aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b3b2:	6053      	str	r3, [r2, #4]
            break;
 800b3b4:	e007      	b.n	800b3c6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	627b      	str	r3, [r7, #36]	; 0x24
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d3b4      	bcc.n	800b330 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	695a      	ldr	r2, [r3, #20]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b3d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f004 fc3c 	bl	800fc58 <USB_ReadInterrupts>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b3e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ea:	d10a      	bne.n	800b402 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f007 fa9d 	bl	801292c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	695a      	ldr	r2, [r3, #20]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b400:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4618      	mov	r0, r3
 800b408:	f004 fc26 	bl	800fc58 <USB_ReadInterrupts>
 800b40c:	4603      	mov	r3, r0
 800b40e:	f003 0304 	and.w	r3, r3, #4
 800b412:	2b04      	cmp	r3, #4
 800b414:	d115      	bne.n	800b442 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	f003 0304 	and.w	r3, r3, #4
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f007 fa8d 	bl	8012948 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	6859      	ldr	r1, [r3, #4]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	69ba      	ldr	r2, [r7, #24]
 800b43a:	430a      	orrs	r2, r1
 800b43c:	605a      	str	r2, [r3, #4]
 800b43e:	e000      	b.n	800b442 <HAL_PCD_IRQHandler+0x938>
      return;
 800b440:	bf00      	nop
    }
  }
}
 800b442:	3734      	adds	r7, #52	; 0x34
 800b444:	46bd      	mov	sp, r7
 800b446:	bd90      	pop	{r4, r7, pc}

0800b448 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	460b      	mov	r3, r1
 800b452:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d101      	bne.n	800b462 <HAL_PCD_SetAddress+0x1a>
 800b45e:	2302      	movs	r3, #2
 800b460:	e013      	b.n	800b48a <HAL_PCD_SetAddress+0x42>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2201      	movs	r2, #1
 800b466:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	78fa      	ldrb	r2, [r7, #3]
 800b46e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	78fa      	ldrb	r2, [r7, #3]
 800b478:	4611      	mov	r1, r2
 800b47a:	4618      	mov	r0, r3
 800b47c:	f004 fb84 	bl	800fb88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b084      	sub	sp, #16
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	4608      	mov	r0, r1
 800b49c:	4611      	mov	r1, r2
 800b49e:	461a      	mov	r2, r3
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	70fb      	strb	r3, [r7, #3]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	803b      	strh	r3, [r7, #0]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b4b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	da0f      	bge.n	800b4d8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b4b8:	78fb      	ldrb	r3, [r7, #3]
 800b4ba:	f003 020f 	and.w	r2, r3, #15
 800b4be:	4613      	mov	r3, r2
 800b4c0:	00db      	lsls	r3, r3, #3
 800b4c2:	4413      	add	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	3338      	adds	r3, #56	; 0x38
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	705a      	strb	r2, [r3, #1]
 800b4d6:	e00f      	b.n	800b4f8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b4d8:	78fb      	ldrb	r3, [r7, #3]
 800b4da:	f003 020f 	and.w	r2, r3, #15
 800b4de:	4613      	mov	r3, r2
 800b4e0:	00db      	lsls	r3, r3, #3
 800b4e2:	4413      	add	r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	3304      	adds	r3, #4
 800b4f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b4f8:	78fb      	ldrb	r3, [r7, #3]
 800b4fa:	f003 030f 	and.w	r3, r3, #15
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b504:	883a      	ldrh	r2, [r7, #0]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	78ba      	ldrb	r2, [r7, #2]
 800b50e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	785b      	ldrb	r3, [r3, #1]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d004      	beq.n	800b522 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b522:	78bb      	ldrb	r3, [r7, #2]
 800b524:	2b02      	cmp	r3, #2
 800b526:	d102      	bne.n	800b52e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b534:	2b01      	cmp	r3, #1
 800b536:	d101      	bne.n	800b53c <HAL_PCD_EP_Open+0xaa>
 800b538:	2302      	movs	r3, #2
 800b53a:	e00e      	b.n	800b55a <HAL_PCD_EP_Open+0xc8>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68f9      	ldr	r1, [r7, #12]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f003 fc04 	bl	800ed58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800b558:	7afb      	ldrb	r3, [r7, #11]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b084      	sub	sp, #16
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	460b      	mov	r3, r1
 800b56c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b56e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b572:	2b00      	cmp	r3, #0
 800b574:	da0f      	bge.n	800b596 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b576:	78fb      	ldrb	r3, [r7, #3]
 800b578:	f003 020f 	and.w	r2, r3, #15
 800b57c:	4613      	mov	r3, r2
 800b57e:	00db      	lsls	r3, r3, #3
 800b580:	4413      	add	r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	3338      	adds	r3, #56	; 0x38
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	4413      	add	r3, r2
 800b58a:	3304      	adds	r3, #4
 800b58c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2201      	movs	r2, #1
 800b592:	705a      	strb	r2, [r3, #1]
 800b594:	e00f      	b.n	800b5b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b596:	78fb      	ldrb	r3, [r7, #3]
 800b598:	f003 020f 	and.w	r2, r3, #15
 800b59c:	4613      	mov	r3, r2
 800b59e:	00db      	lsls	r3, r3, #3
 800b5a0:	4413      	add	r3, r2
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b5b6:	78fb      	ldrb	r3, [r7, #3]
 800b5b8:	f003 030f 	and.w	r3, r3, #15
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d101      	bne.n	800b5d0 <HAL_PCD_EP_Close+0x6e>
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	e00e      	b.n	800b5ee <HAL_PCD_EP_Close+0x8c>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68f9      	ldr	r1, [r7, #12]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f003 fc42 	bl	800ee68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b086      	sub	sp, #24
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	60f8      	str	r0, [r7, #12]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	603b      	str	r3, [r7, #0]
 800b602:	460b      	mov	r3, r1
 800b604:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b606:	7afb      	ldrb	r3, [r7, #11]
 800b608:	f003 020f 	and.w	r2, r3, #15
 800b60c:	4613      	mov	r3, r2
 800b60e:	00db      	lsls	r3, r3, #3
 800b610:	4413      	add	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	4413      	add	r3, r2
 800b61c:	3304      	adds	r3, #4
 800b61e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	2200      	movs	r2, #0
 800b630:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2200      	movs	r2, #0
 800b636:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b638:	7afb      	ldrb	r3, [r7, #11]
 800b63a:	f003 030f 	and.w	r3, r3, #15
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d102      	bne.n	800b652 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b652:	7afb      	ldrb	r3, [r7, #11]
 800b654:	f003 030f 	and.w	r3, r3, #15
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d109      	bne.n	800b670 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6818      	ldr	r0, [r3, #0]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	b2db      	uxtb	r3, r3
 800b666:	461a      	mov	r2, r3
 800b668:	6979      	ldr	r1, [r7, #20]
 800b66a:	f003 ff21 	bl	800f4b0 <USB_EP0StartXfer>
 800b66e:	e008      	b.n	800b682 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6818      	ldr	r0, [r3, #0]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	461a      	mov	r2, r3
 800b67c:	6979      	ldr	r1, [r7, #20]
 800b67e:	f003 fccf 	bl	800f020 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	460b      	mov	r3, r1
 800b696:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b698:	78fb      	ldrb	r3, [r7, #3]
 800b69a:	f003 020f 	and.w	r2, r3, #15
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	00db      	lsls	r3, r3, #3
 800b6a4:	4413      	add	r3, r2
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	440b      	add	r3, r1
 800b6aa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800b6ae:	681b      	ldr	r3, [r3, #0]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	607a      	str	r2, [r7, #4]
 800b6c6:	603b      	str	r3, [r7, #0]
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b6cc:	7afb      	ldrb	r3, [r7, #11]
 800b6ce:	f003 020f 	and.w	r2, r3, #15
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	00db      	lsls	r3, r3, #3
 800b6d6:	4413      	add	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	3338      	adds	r3, #56	; 0x38
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	4413      	add	r3, r2
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b6fc:	7afb      	ldrb	r3, [r7, #11]
 800b6fe:	f003 030f 	and.w	r3, r3, #15
 800b702:	b2da      	uxtb	r2, r3
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d102      	bne.n	800b716 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b716:	7afb      	ldrb	r3, [r7, #11]
 800b718:	f003 030f 	and.w	r3, r3, #15
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d109      	bne.n	800b734 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6818      	ldr	r0, [r3, #0]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	461a      	mov	r2, r3
 800b72c:	6979      	ldr	r1, [r7, #20]
 800b72e:	f003 febf 	bl	800f4b0 <USB_EP0StartXfer>
 800b732:	e008      	b.n	800b746 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6818      	ldr	r0, [r3, #0]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	461a      	mov	r2, r3
 800b740:	6979      	ldr	r1, [r7, #20]
 800b742:	f003 fc6d 	bl	800f020 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b746:	2300      	movs	r3, #0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3718      	adds	r7, #24
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	460b      	mov	r3, r1
 800b75a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b75c:	78fb      	ldrb	r3, [r7, #3]
 800b75e:	f003 020f 	and.w	r2, r3, #15
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	429a      	cmp	r2, r3
 800b768:	d901      	bls.n	800b76e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e050      	b.n	800b810 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b76e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b772:	2b00      	cmp	r3, #0
 800b774:	da0f      	bge.n	800b796 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b776:	78fb      	ldrb	r3, [r7, #3]
 800b778:	f003 020f 	and.w	r2, r3, #15
 800b77c:	4613      	mov	r3, r2
 800b77e:	00db      	lsls	r3, r3, #3
 800b780:	4413      	add	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	3338      	adds	r3, #56	; 0x38
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	4413      	add	r3, r2
 800b78a:	3304      	adds	r3, #4
 800b78c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2201      	movs	r2, #1
 800b792:	705a      	strb	r2, [r3, #1]
 800b794:	e00d      	b.n	800b7b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b796:	78fa      	ldrb	r2, [r7, #3]
 800b798:	4613      	mov	r3, r2
 800b79a:	00db      	lsls	r3, r3, #3
 800b79c:	4413      	add	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b7b8:	78fb      	ldrb	r3, [r7, #3]
 800b7ba:	f003 030f 	and.w	r3, r3, #15
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d101      	bne.n	800b7d2 <HAL_PCD_EP_SetStall+0x82>
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	e01e      	b.n	800b810 <HAL_PCD_EP_SetStall+0xc0>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68f9      	ldr	r1, [r7, #12]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f004 f8fd 	bl	800f9e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b7e6:	78fb      	ldrb	r3, [r7, #3]
 800b7e8:	f003 030f 	and.w	r3, r3, #15
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10a      	bne.n	800b806 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6818      	ldr	r0, [r3, #0]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	b2d9      	uxtb	r1, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b800:	461a      	mov	r2, r3
 800b802:	f004 faed 	bl	800fde0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	460b      	mov	r3, r1
 800b822:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b824:	78fb      	ldrb	r3, [r7, #3]
 800b826:	f003 020f 	and.w	r2, r3, #15
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d901      	bls.n	800b836 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	e042      	b.n	800b8bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	da0f      	bge.n	800b85e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b83e:	78fb      	ldrb	r3, [r7, #3]
 800b840:	f003 020f 	and.w	r2, r3, #15
 800b844:	4613      	mov	r3, r2
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	4413      	add	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	3338      	adds	r3, #56	; 0x38
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	4413      	add	r3, r2
 800b852:	3304      	adds	r3, #4
 800b854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	705a      	strb	r2, [r3, #1]
 800b85c:	e00f      	b.n	800b87e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b85e:	78fb      	ldrb	r3, [r7, #3]
 800b860:	f003 020f 	and.w	r2, r3, #15
 800b864:	4613      	mov	r3, r2
 800b866:	00db      	lsls	r3, r3, #3
 800b868:	4413      	add	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	4413      	add	r3, r2
 800b874:	3304      	adds	r3, #4
 800b876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2200      	movs	r2, #0
 800b882:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b884:	78fb      	ldrb	r3, [r7, #3]
 800b886:	f003 030f 	and.w	r3, r3, #15
 800b88a:	b2da      	uxtb	r2, r3
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b896:	2b01      	cmp	r3, #1
 800b898:	d101      	bne.n	800b89e <HAL_PCD_EP_ClrStall+0x86>
 800b89a:	2302      	movs	r3, #2
 800b89c:	e00e      	b.n	800b8bc <HAL_PCD_EP_ClrStall+0xa4>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68f9      	ldr	r1, [r7, #12]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f004 f905 	bl	800fabc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b8d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	da0c      	bge.n	800b8f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8d8:	78fb      	ldrb	r3, [r7, #3]
 800b8da:	f003 020f 	and.w	r2, r3, #15
 800b8de:	4613      	mov	r3, r2
 800b8e0:	00db      	lsls	r3, r3, #3
 800b8e2:	4413      	add	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	3338      	adds	r3, #56	; 0x38
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	3304      	adds	r3, #4
 800b8ee:	60fb      	str	r3, [r7, #12]
 800b8f0:	e00c      	b.n	800b90c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8f2:	78fb      	ldrb	r3, [r7, #3]
 800b8f4:	f003 020f 	and.w	r2, r3, #15
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	00db      	lsls	r3, r3, #3
 800b8fc:	4413      	add	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	4413      	add	r3, r2
 800b908:	3304      	adds	r3, #4
 800b90a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68f9      	ldr	r1, [r7, #12]
 800b912:	4618      	mov	r0, r3
 800b914:	f003 ff24 	bl	800f760 <USB_EPStopXfer>
 800b918:	4603      	mov	r3, r0
 800b91a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b91c:	7afb      	ldrb	r3, [r7, #11]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b08a      	sub	sp, #40	; 0x28
 800b92a:	af02      	add	r7, sp, #8
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b93a:	683a      	ldr	r2, [r7, #0]
 800b93c:	4613      	mov	r3, r2
 800b93e:	00db      	lsls	r3, r3, #3
 800b940:	4413      	add	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	3338      	adds	r3, #56	; 0x38
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	4413      	add	r3, r2
 800b94a:	3304      	adds	r3, #4
 800b94c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6a1a      	ldr	r2, [r3, #32]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	429a      	cmp	r2, r3
 800b958:	d901      	bls.n	800b95e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e06c      	b.n	800ba38 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	699a      	ldr	r2, [r3, #24]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	69fa      	ldr	r2, [r7, #28]
 800b970:	429a      	cmp	r2, r3
 800b972:	d902      	bls.n	800b97a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	3303      	adds	r3, #3
 800b97e:	089b      	lsrs	r3, r3, #2
 800b980:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b982:	e02b      	b.n	800b9dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	699a      	ldr	r2, [r3, #24]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6a1b      	ldr	r3, [r3, #32]
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	69fa      	ldr	r2, [r7, #28]
 800b996:	429a      	cmp	r2, r3
 800b998:	d902      	bls.n	800b9a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	3303      	adds	r3, #3
 800b9a4:	089b      	lsrs	r3, r3, #2
 800b9a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6919      	ldr	r1, [r3, #16]
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	4603      	mov	r3, r0
 800b9be:	6978      	ldr	r0, [r7, #20]
 800b9c0:	f003 ff78 	bl	800f8b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	691a      	ldr	r2, [r3, #16]
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	441a      	add	r2, r3
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6a1a      	ldr	r2, [r3, #32]
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	441a      	add	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	015a      	lsls	r2, r3, #5
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e8:	699b      	ldr	r3, [r3, #24]
 800b9ea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b9ec:	69ba      	ldr	r2, [r7, #24]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d809      	bhi.n	800ba06 <PCD_WriteEmptyTxFifo+0xe0>
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6a1a      	ldr	r2, [r3, #32]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d203      	bcs.n	800ba06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1be      	bne.n	800b984 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	699a      	ldr	r2, [r3, #24]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6a1b      	ldr	r3, [r3, #32]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d811      	bhi.n	800ba36 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	f003 030f 	and.w	r3, r3, #15
 800ba18:	2201      	movs	r2, #1
 800ba1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	43db      	mvns	r3, r3
 800ba2c:	6939      	ldr	r1, [r7, #16]
 800ba2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba32:	4013      	ands	r3, r2
 800ba34:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3720      	adds	r7, #32
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b088      	sub	sp, #32
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	333c      	adds	r3, #60	; 0x3c
 800ba58:	3304      	adds	r3, #4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	015a      	lsls	r2, r3, #5
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	4413      	add	r3, r2
 800ba66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d17b      	bne.n	800bb6e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	f003 0308 	and.w	r3, r3, #8
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d015      	beq.n	800baac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	4a61      	ldr	r2, [pc, #388]	; (800bc08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	f240 80b9 	bls.w	800bbfc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 80b3 	beq.w	800bbfc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	015a      	lsls	r2, r3, #5
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa2:	461a      	mov	r2, r3
 800baa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baa8:	6093      	str	r3, [r2, #8]
 800baaa:	e0a7      	b.n	800bbfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	f003 0320 	and.w	r3, r3, #32
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d009      	beq.n	800baca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	015a      	lsls	r2, r3, #5
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	4413      	add	r3, r2
 800babe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bac2:	461a      	mov	r2, r3
 800bac4:	2320      	movs	r3, #32
 800bac6:	6093      	str	r3, [r2, #8]
 800bac8:	e098      	b.n	800bbfc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f040 8093 	bne.w	800bbfc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	4a4b      	ldr	r2, [pc, #300]	; (800bc08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d90f      	bls.n	800bafe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00a      	beq.n	800bafe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	015a      	lsls	r2, r3, #5
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	4413      	add	r3, r2
 800baf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf4:	461a      	mov	r2, r3
 800baf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bafa:	6093      	str	r3, [r2, #8]
 800bafc:	e07e      	b.n	800bbfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800bafe:	683a      	ldr	r2, [r7, #0]
 800bb00:	4613      	mov	r3, r2
 800bb02:	00db      	lsls	r3, r3, #3
 800bb04:	4413      	add	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	4413      	add	r3, r2
 800bb10:	3304      	adds	r3, #4
 800bb12:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	69da      	ldr	r2, [r3, #28]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	0159      	lsls	r1, r3, #5
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	440b      	add	r3, r1
 800bb20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb2a:	1ad2      	subs	r2, r2, r3
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d114      	bne.n	800bb60 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	699b      	ldr	r3, [r3, #24]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d109      	bne.n	800bb52 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bb48:	461a      	mov	r2, r3
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	f004 f948 	bl	800fde0 <USB_EP0_OutStart>
 800bb50:	e006      	b.n	800bb60 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	691a      	ldr	r2, [r3, #16]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	441a      	add	r2, r3
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	4619      	mov	r1, r3
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f006 fe1c 	bl	80127a4 <HAL_PCD_DataOutStageCallback>
 800bb6c:	e046      	b.n	800bbfc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	4a26      	ldr	r2, [pc, #152]	; (800bc0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d124      	bne.n	800bbc0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00a      	beq.n	800bb96 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb92:	6093      	str	r3, [r2, #8]
 800bb94:	e032      	b.n	800bbfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	f003 0320 	and.w	r3, r3, #32
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d008      	beq.n	800bbb2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	015a      	lsls	r2, r3, #5
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	4413      	add	r3, r2
 800bba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbac:	461a      	mov	r2, r3
 800bbae:	2320      	movs	r3, #32
 800bbb0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f006 fdf3 	bl	80127a4 <HAL_PCD_DataOutStageCallback>
 800bbbe:	e01d      	b.n	800bbfc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d114      	bne.n	800bbf0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800bbc6:	6879      	ldr	r1, [r7, #4]
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	00db      	lsls	r3, r3, #3
 800bbce:	4413      	add	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	440b      	add	r3, r1
 800bbd4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d108      	bne.n	800bbf0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6818      	ldr	r0, [r3, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bbe8:	461a      	mov	r2, r3
 800bbea:	2100      	movs	r1, #0
 800bbec:	f004 f8f8 	bl	800fde0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f006 fdd4 	bl	80127a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3720      	adds	r7, #32
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	4f54300a 	.word	0x4f54300a
 800bc0c:	4f54310a 	.word	0x4f54310a

0800bc10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	333c      	adds	r3, #60	; 0x3c
 800bc28:	3304      	adds	r3, #4
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	015a      	lsls	r2, r3, #5
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	4413      	add	r3, r2
 800bc36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	4a15      	ldr	r2, [pc, #84]	; (800bc98 <PCD_EP_OutSetupPacket_int+0x88>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d90e      	bls.n	800bc64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d009      	beq.n	800bc64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	015a      	lsls	r2, r3, #5
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	4413      	add	r3, r2
 800bc58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f006 fd8b 	bl	8012780 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	4a0a      	ldr	r2, [pc, #40]	; (800bc98 <PCD_EP_OutSetupPacket_int+0x88>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d90c      	bls.n	800bc8c <PCD_EP_OutSetupPacket_int+0x7c>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d108      	bne.n	800bc8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6818      	ldr	r0, [r3, #0]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bc84:	461a      	mov	r2, r3
 800bc86:	2101      	movs	r1, #1
 800bc88:	f004 f8aa 	bl	800fde0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	4f54300a 	.word	0x4f54300a

0800bc9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	460b      	mov	r3, r1
 800bca6:	70fb      	strb	r3, [r7, #3]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bcb4:	78fb      	ldrb	r3, [r7, #3]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d107      	bne.n	800bcca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bcba:	883b      	ldrh	r3, [r7, #0]
 800bcbc:	0419      	lsls	r1, r3, #16
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	430a      	orrs	r2, r1
 800bcc6:	629a      	str	r2, [r3, #40]	; 0x28
 800bcc8:	e028      	b.n	800bd1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd0:	0c1b      	lsrs	r3, r3, #16
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bcd8:	2300      	movs	r3, #0
 800bcda:	73fb      	strb	r3, [r7, #15]
 800bcdc:	e00d      	b.n	800bcfa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	7bfb      	ldrb	r3, [r7, #15]
 800bce4:	3340      	adds	r3, #64	; 0x40
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	0c1b      	lsrs	r3, r3, #16
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	73fb      	strb	r3, [r7, #15]
 800bcfa:	7bfa      	ldrb	r2, [r7, #15]
 800bcfc:	78fb      	ldrb	r3, [r7, #3]
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d3ec      	bcc.n	800bcde <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bd04:	883b      	ldrh	r3, [r7, #0]
 800bd06:	0418      	lsls	r0, r3, #16
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6819      	ldr	r1, [r3, #0]
 800bd0c:	78fb      	ldrb	r3, [r7, #3]
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	4302      	orrs	r2, r0
 800bd14:	3340      	adds	r3, #64	; 0x40
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	440b      	add	r3, r1
 800bd1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3714      	adds	r7, #20
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b083      	sub	sp, #12
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	460b      	mov	r3, r1
 800bd34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	887a      	ldrh	r2, [r7, #2]
 800bd3c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800bd58:	bf00      	nop
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800bd68:	4b06      	ldr	r3, [pc, #24]	; (800bd84 <HAL_PWR_PVD_IRQHandler+0x20>)
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d005      	beq.n	800bd80 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800bd74:	f000 f808 	bl	800bd88 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800bd78:	4b02      	ldr	r3, [pc, #8]	; (800bd84 <HAL_PWR_PVD_IRQHandler+0x20>)
 800bd7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bd7e:	615a      	str	r2, [r3, #20]
  }
}
 800bd80:	bf00      	nop
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	40013c00 	.word	0x40013c00

0800bd88 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800bd8c:	bf00      	nop
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
	...

0800bd98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d101      	bne.n	800bdaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	e267      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d075      	beq.n	800bea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bdb6:	4b88      	ldr	r3, [pc, #544]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	f003 030c 	and.w	r3, r3, #12
 800bdbe:	2b04      	cmp	r3, #4
 800bdc0:	d00c      	beq.n	800bddc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bdc2:	4b85      	ldr	r3, [pc, #532]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bdca:	2b08      	cmp	r3, #8
 800bdcc:	d112      	bne.n	800bdf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bdce:	4b82      	ldr	r3, [pc, #520]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bdd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdda:	d10b      	bne.n	800bdf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bddc:	4b7e      	ldr	r3, [pc, #504]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d05b      	beq.n	800bea0 <HAL_RCC_OscConfig+0x108>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d157      	bne.n	800bea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e242      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdfc:	d106      	bne.n	800be0c <HAL_RCC_OscConfig+0x74>
 800bdfe:	4b76      	ldr	r3, [pc, #472]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a75      	ldr	r2, [pc, #468]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800be04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	e01d      	b.n	800be48 <HAL_RCC_OscConfig+0xb0>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be14:	d10c      	bne.n	800be30 <HAL_RCC_OscConfig+0x98>
 800be16:	4b70      	ldr	r3, [pc, #448]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a6f      	ldr	r2, [pc, #444]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800be1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800be20:	6013      	str	r3, [r2, #0]
 800be22:	4b6d      	ldr	r3, [pc, #436]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a6c      	ldr	r2, [pc, #432]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800be28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be2c:	6013      	str	r3, [r2, #0]
 800be2e:	e00b      	b.n	800be48 <HAL_RCC_OscConfig+0xb0>
 800be30:	4b69      	ldr	r3, [pc, #420]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a68      	ldr	r2, [pc, #416]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800be36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be3a:	6013      	str	r3, [r2, #0]
 800be3c:	4b66      	ldr	r3, [pc, #408]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a65      	ldr	r2, [pc, #404]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800be42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d013      	beq.n	800be78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be50:	f7fd fb6c 	bl	800952c <HAL_GetTick>
 800be54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be56:	e008      	b.n	800be6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800be58:	f7fd fb68 	bl	800952c <HAL_GetTick>
 800be5c:	4602      	mov	r2, r0
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	2b64      	cmp	r3, #100	; 0x64
 800be64:	d901      	bls.n	800be6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800be66:	2303      	movs	r3, #3
 800be68:	e207      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be6a:	4b5b      	ldr	r3, [pc, #364]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be72:	2b00      	cmp	r3, #0
 800be74:	d0f0      	beq.n	800be58 <HAL_RCC_OscConfig+0xc0>
 800be76:	e014      	b.n	800bea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be78:	f7fd fb58 	bl	800952c <HAL_GetTick>
 800be7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be7e:	e008      	b.n	800be92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800be80:	f7fd fb54 	bl	800952c <HAL_GetTick>
 800be84:	4602      	mov	r2, r0
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	2b64      	cmp	r3, #100	; 0x64
 800be8c:	d901      	bls.n	800be92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e1f3      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be92:	4b51      	ldr	r3, [pc, #324]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1f0      	bne.n	800be80 <HAL_RCC_OscConfig+0xe8>
 800be9e:	e000      	b.n	800bea2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f003 0302 	and.w	r3, r3, #2
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d063      	beq.n	800bf76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800beae:	4b4a      	ldr	r3, [pc, #296]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	f003 030c 	and.w	r3, r3, #12
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00b      	beq.n	800bed2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800beba:	4b47      	ldr	r3, [pc, #284]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bec2:	2b08      	cmp	r3, #8
 800bec4:	d11c      	bne.n	800bf00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bec6:	4b44      	ldr	r3, [pc, #272]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d116      	bne.n	800bf00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bed2:	4b41      	ldr	r3, [pc, #260]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f003 0302 	and.w	r3, r3, #2
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d005      	beq.n	800beea <HAL_RCC_OscConfig+0x152>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d001      	beq.n	800beea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	e1c7      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800beea:	4b3b      	ldr	r3, [pc, #236]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	00db      	lsls	r3, r3, #3
 800bef8:	4937      	ldr	r1, [pc, #220]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800befa:	4313      	orrs	r3, r2
 800befc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800befe:	e03a      	b.n	800bf76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d020      	beq.n	800bf4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf08:	4b34      	ldr	r3, [pc, #208]	; (800bfdc <HAL_RCC_OscConfig+0x244>)
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf0e:	f7fd fb0d 	bl	800952c <HAL_GetTick>
 800bf12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf14:	e008      	b.n	800bf28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bf16:	f7fd fb09 	bl	800952c <HAL_GetTick>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d901      	bls.n	800bf28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bf24:	2303      	movs	r3, #3
 800bf26:	e1a8      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf28:	4b2b      	ldr	r3, [pc, #172]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f003 0302 	and.w	r3, r3, #2
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d0f0      	beq.n	800bf16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf34:	4b28      	ldr	r3, [pc, #160]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	4925      	ldr	r1, [pc, #148]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800bf44:	4313      	orrs	r3, r2
 800bf46:	600b      	str	r3, [r1, #0]
 800bf48:	e015      	b.n	800bf76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf4a:	4b24      	ldr	r3, [pc, #144]	; (800bfdc <HAL_RCC_OscConfig+0x244>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf50:	f7fd faec 	bl	800952c <HAL_GetTick>
 800bf54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf56:	e008      	b.n	800bf6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bf58:	f7fd fae8 	bl	800952c <HAL_GetTick>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d901      	bls.n	800bf6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bf66:	2303      	movs	r3, #3
 800bf68:	e187      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf6a:	4b1b      	ldr	r3, [pc, #108]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f003 0302 	and.w	r3, r3, #2
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1f0      	bne.n	800bf58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 0308 	and.w	r3, r3, #8
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d036      	beq.n	800bff0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	695b      	ldr	r3, [r3, #20]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d016      	beq.n	800bfb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf8a:	4b15      	ldr	r3, [pc, #84]	; (800bfe0 <HAL_RCC_OscConfig+0x248>)
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf90:	f7fd facc 	bl	800952c <HAL_GetTick>
 800bf94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bf96:	e008      	b.n	800bfaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bf98:	f7fd fac8 	bl	800952c <HAL_GetTick>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	d901      	bls.n	800bfaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	e167      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bfaa:	4b0b      	ldr	r3, [pc, #44]	; (800bfd8 <HAL_RCC_OscConfig+0x240>)
 800bfac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfae:	f003 0302 	and.w	r3, r3, #2
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d0f0      	beq.n	800bf98 <HAL_RCC_OscConfig+0x200>
 800bfb6:	e01b      	b.n	800bff0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bfb8:	4b09      	ldr	r3, [pc, #36]	; (800bfe0 <HAL_RCC_OscConfig+0x248>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bfbe:	f7fd fab5 	bl	800952c <HAL_GetTick>
 800bfc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bfc4:	e00e      	b.n	800bfe4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bfc6:	f7fd fab1 	bl	800952c <HAL_GetTick>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d907      	bls.n	800bfe4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	e150      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
 800bfd8:	40023800 	.word	0x40023800
 800bfdc:	42470000 	.word	0x42470000
 800bfe0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bfe4:	4b88      	ldr	r3, [pc, #544]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800bfe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfe8:	f003 0302 	and.w	r3, r3, #2
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1ea      	bne.n	800bfc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f003 0304 	and.w	r3, r3, #4
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f000 8097 	beq.w	800c12c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bffe:	2300      	movs	r3, #0
 800c000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c002:	4b81      	ldr	r3, [pc, #516]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10f      	bne.n	800c02e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c00e:	2300      	movs	r3, #0
 800c010:	60bb      	str	r3, [r7, #8]
 800c012:	4b7d      	ldr	r3, [pc, #500]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c016:	4a7c      	ldr	r2, [pc, #496]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c01c:	6413      	str	r3, [r2, #64]	; 0x40
 800c01e:	4b7a      	ldr	r3, [pc, #488]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c026:	60bb      	str	r3, [r7, #8]
 800c028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c02a:	2301      	movs	r3, #1
 800c02c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c02e:	4b77      	ldr	r3, [pc, #476]	; (800c20c <HAL_RCC_OscConfig+0x474>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c036:	2b00      	cmp	r3, #0
 800c038:	d118      	bne.n	800c06c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c03a:	4b74      	ldr	r3, [pc, #464]	; (800c20c <HAL_RCC_OscConfig+0x474>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a73      	ldr	r2, [pc, #460]	; (800c20c <HAL_RCC_OscConfig+0x474>)
 800c040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c046:	f7fd fa71 	bl	800952c <HAL_GetTick>
 800c04a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c04c:	e008      	b.n	800c060 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c04e:	f7fd fa6d 	bl	800952c <HAL_GetTick>
 800c052:	4602      	mov	r2, r0
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d901      	bls.n	800c060 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e10c      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c060:	4b6a      	ldr	r3, [pc, #424]	; (800c20c <HAL_RCC_OscConfig+0x474>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d0f0      	beq.n	800c04e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d106      	bne.n	800c082 <HAL_RCC_OscConfig+0x2ea>
 800c074:	4b64      	ldr	r3, [pc, #400]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c078:	4a63      	ldr	r2, [pc, #396]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c07a:	f043 0301 	orr.w	r3, r3, #1
 800c07e:	6713      	str	r3, [r2, #112]	; 0x70
 800c080:	e01c      	b.n	800c0bc <HAL_RCC_OscConfig+0x324>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	2b05      	cmp	r3, #5
 800c088:	d10c      	bne.n	800c0a4 <HAL_RCC_OscConfig+0x30c>
 800c08a:	4b5f      	ldr	r3, [pc, #380]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c08e:	4a5e      	ldr	r2, [pc, #376]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c090:	f043 0304 	orr.w	r3, r3, #4
 800c094:	6713      	str	r3, [r2, #112]	; 0x70
 800c096:	4b5c      	ldr	r3, [pc, #368]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c09a:	4a5b      	ldr	r2, [pc, #364]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c09c:	f043 0301 	orr.w	r3, r3, #1
 800c0a0:	6713      	str	r3, [r2, #112]	; 0x70
 800c0a2:	e00b      	b.n	800c0bc <HAL_RCC_OscConfig+0x324>
 800c0a4:	4b58      	ldr	r3, [pc, #352]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0a8:	4a57      	ldr	r2, [pc, #348]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c0aa:	f023 0301 	bic.w	r3, r3, #1
 800c0ae:	6713      	str	r3, [r2, #112]	; 0x70
 800c0b0:	4b55      	ldr	r3, [pc, #340]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c0b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0b4:	4a54      	ldr	r2, [pc, #336]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c0b6:	f023 0304 	bic.w	r3, r3, #4
 800c0ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d015      	beq.n	800c0f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0c4:	f7fd fa32 	bl	800952c <HAL_GetTick>
 800c0c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0ca:	e00a      	b.n	800c0e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c0cc:	f7fd fa2e 	bl	800952c <HAL_GetTick>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d901      	bls.n	800c0e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	e0cb      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0e2:	4b49      	ldr	r3, [pc, #292]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0e6:	f003 0302 	and.w	r3, r3, #2
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d0ee      	beq.n	800c0cc <HAL_RCC_OscConfig+0x334>
 800c0ee:	e014      	b.n	800c11a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c0f0:	f7fd fa1c 	bl	800952c <HAL_GetTick>
 800c0f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c0f6:	e00a      	b.n	800c10e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c0f8:	f7fd fa18 	bl	800952c <HAL_GetTick>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	f241 3288 	movw	r2, #5000	; 0x1388
 800c106:	4293      	cmp	r3, r2
 800c108:	d901      	bls.n	800c10e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c10a:	2303      	movs	r3, #3
 800c10c:	e0b5      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c10e:	4b3e      	ldr	r3, [pc, #248]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c112:	f003 0302 	and.w	r3, r3, #2
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1ee      	bne.n	800c0f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c11a:	7dfb      	ldrb	r3, [r7, #23]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d105      	bne.n	800c12c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c120:	4b39      	ldr	r3, [pc, #228]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c124:	4a38      	ldr	r2, [pc, #224]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c12a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	699b      	ldr	r3, [r3, #24]
 800c130:	2b00      	cmp	r3, #0
 800c132:	f000 80a1 	beq.w	800c278 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c136:	4b34      	ldr	r3, [pc, #208]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	f003 030c 	and.w	r3, r3, #12
 800c13e:	2b08      	cmp	r3, #8
 800c140:	d05c      	beq.n	800c1fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	2b02      	cmp	r3, #2
 800c148:	d141      	bne.n	800c1ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c14a:	4b31      	ldr	r3, [pc, #196]	; (800c210 <HAL_RCC_OscConfig+0x478>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c150:	f7fd f9ec 	bl	800952c <HAL_GetTick>
 800c154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c156:	e008      	b.n	800c16a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c158:	f7fd f9e8 	bl	800952c <HAL_GetTick>
 800c15c:	4602      	mov	r2, r0
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	2b02      	cmp	r3, #2
 800c164:	d901      	bls.n	800c16a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c166:	2303      	movs	r3, #3
 800c168:	e087      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c16a:	4b27      	ldr	r3, [pc, #156]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1f0      	bne.n	800c158 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	69da      	ldr	r2, [r3, #28]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a1b      	ldr	r3, [r3, #32]
 800c17e:	431a      	orrs	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c184:	019b      	lsls	r3, r3, #6
 800c186:	431a      	orrs	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18c:	085b      	lsrs	r3, r3, #1
 800c18e:	3b01      	subs	r3, #1
 800c190:	041b      	lsls	r3, r3, #16
 800c192:	431a      	orrs	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c198:	061b      	lsls	r3, r3, #24
 800c19a:	491b      	ldr	r1, [pc, #108]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c19c:	4313      	orrs	r3, r2
 800c19e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c1a0:	4b1b      	ldr	r3, [pc, #108]	; (800c210 <HAL_RCC_OscConfig+0x478>)
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1a6:	f7fd f9c1 	bl	800952c <HAL_GetTick>
 800c1aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c1ac:	e008      	b.n	800c1c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c1ae:	f7fd f9bd 	bl	800952c <HAL_GetTick>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d901      	bls.n	800c1c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	e05c      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c1c0:	4b11      	ldr	r3, [pc, #68]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d0f0      	beq.n	800c1ae <HAL_RCC_OscConfig+0x416>
 800c1cc:	e054      	b.n	800c278 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1ce:	4b10      	ldr	r3, [pc, #64]	; (800c210 <HAL_RCC_OscConfig+0x478>)
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1d4:	f7fd f9aa 	bl	800952c <HAL_GetTick>
 800c1d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c1da:	e008      	b.n	800c1ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c1dc:	f7fd f9a6 	bl	800952c <HAL_GetTick>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	1ad3      	subs	r3, r2, r3
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	d901      	bls.n	800c1ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c1ea:	2303      	movs	r3, #3
 800c1ec:	e045      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c1ee:	4b06      	ldr	r3, [pc, #24]	; (800c208 <HAL_RCC_OscConfig+0x470>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1f0      	bne.n	800c1dc <HAL_RCC_OscConfig+0x444>
 800c1fa:	e03d      	b.n	800c278 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	699b      	ldr	r3, [r3, #24]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d107      	bne.n	800c214 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c204:	2301      	movs	r3, #1
 800c206:	e038      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
 800c208:	40023800 	.word	0x40023800
 800c20c:	40007000 	.word	0x40007000
 800c210:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c214:	4b1b      	ldr	r3, [pc, #108]	; (800c284 <HAL_RCC_OscConfig+0x4ec>)
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d028      	beq.n	800c274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d121      	bne.n	800c274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d11a      	bne.n	800c274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c244:	4013      	ands	r3, r2
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c24a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d111      	bne.n	800c274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c25a:	085b      	lsrs	r3, r3, #1
 800c25c:	3b01      	subs	r3, #1
 800c25e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c260:	429a      	cmp	r2, r3
 800c262:	d107      	bne.n	800c274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c270:	429a      	cmp	r2, r3
 800c272:	d001      	beq.n	800c278 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	e000      	b.n	800c27a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3718      	adds	r7, #24
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	40023800 	.word	0x40023800

0800c288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	e0cc      	b.n	800c436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c29c:	4b68      	ldr	r3, [pc, #416]	; (800c440 <HAL_RCC_ClockConfig+0x1b8>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 0307 	and.w	r3, r3, #7
 800c2a4:	683a      	ldr	r2, [r7, #0]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d90c      	bls.n	800c2c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2aa:	4b65      	ldr	r3, [pc, #404]	; (800c440 <HAL_RCC_ClockConfig+0x1b8>)
 800c2ac:	683a      	ldr	r2, [r7, #0]
 800c2ae:	b2d2      	uxtb	r2, r2
 800c2b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2b2:	4b63      	ldr	r3, [pc, #396]	; (800c440 <HAL_RCC_ClockConfig+0x1b8>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0307 	and.w	r3, r3, #7
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d001      	beq.n	800c2c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e0b8      	b.n	800c436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 0302 	and.w	r3, r3, #2
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d020      	beq.n	800c312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f003 0304 	and.w	r3, r3, #4
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d005      	beq.n	800c2e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c2dc:	4b59      	ldr	r3, [pc, #356]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	4a58      	ldr	r2, [pc, #352]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c2e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c2e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f003 0308 	and.w	r3, r3, #8
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d005      	beq.n	800c300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c2f4:	4b53      	ldr	r3, [pc, #332]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	4a52      	ldr	r2, [pc, #328]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c2fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c2fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c300:	4b50      	ldr	r3, [pc, #320]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	494d      	ldr	r1, [pc, #308]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c30e:	4313      	orrs	r3, r2
 800c310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 0301 	and.w	r3, r3, #1
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d044      	beq.n	800c3a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d107      	bne.n	800c336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c326:	4b47      	ldr	r3, [pc, #284]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d119      	bne.n	800c366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e07f      	b.n	800c436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d003      	beq.n	800c346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c342:	2b03      	cmp	r3, #3
 800c344:	d107      	bne.n	800c356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c346:	4b3f      	ldr	r3, [pc, #252]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d109      	bne.n	800c366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c352:	2301      	movs	r3, #1
 800c354:	e06f      	b.n	800c436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c356:	4b3b      	ldr	r3, [pc, #236]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f003 0302 	and.w	r3, r3, #2
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	e067      	b.n	800c436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c366:	4b37      	ldr	r3, [pc, #220]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	f023 0203 	bic.w	r2, r3, #3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	4934      	ldr	r1, [pc, #208]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c374:	4313      	orrs	r3, r2
 800c376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c378:	f7fd f8d8 	bl	800952c <HAL_GetTick>
 800c37c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c37e:	e00a      	b.n	800c396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c380:	f7fd f8d4 	bl	800952c <HAL_GetTick>
 800c384:	4602      	mov	r2, r0
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c38e:	4293      	cmp	r3, r2
 800c390:	d901      	bls.n	800c396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c392:	2303      	movs	r3, #3
 800c394:	e04f      	b.n	800c436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c396:	4b2b      	ldr	r3, [pc, #172]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	f003 020c 	and.w	r2, r3, #12
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d1eb      	bne.n	800c380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c3a8:	4b25      	ldr	r3, [pc, #148]	; (800c440 <HAL_RCC_ClockConfig+0x1b8>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f003 0307 	and.w	r3, r3, #7
 800c3b0:	683a      	ldr	r2, [r7, #0]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d20c      	bcs.n	800c3d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3b6:	4b22      	ldr	r3, [pc, #136]	; (800c440 <HAL_RCC_ClockConfig+0x1b8>)
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	b2d2      	uxtb	r2, r2
 800c3bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3be:	4b20      	ldr	r3, [pc, #128]	; (800c440 <HAL_RCC_ClockConfig+0x1b8>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f003 0307 	and.w	r3, r3, #7
 800c3c6:	683a      	ldr	r2, [r7, #0]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d001      	beq.n	800c3d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e032      	b.n	800c436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d008      	beq.n	800c3ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3dc:	4b19      	ldr	r3, [pc, #100]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	4916      	ldr	r1, [pc, #88]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f003 0308 	and.w	r3, r3, #8
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d009      	beq.n	800c40e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c3fa:	4b12      	ldr	r3, [pc, #72]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	00db      	lsls	r3, r3, #3
 800c408:	490e      	ldr	r1, [pc, #56]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c40a:	4313      	orrs	r3, r2
 800c40c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c40e:	f000 f821 	bl	800c454 <HAL_RCC_GetSysClockFreq>
 800c412:	4602      	mov	r2, r0
 800c414:	4b0b      	ldr	r3, [pc, #44]	; (800c444 <HAL_RCC_ClockConfig+0x1bc>)
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	091b      	lsrs	r3, r3, #4
 800c41a:	f003 030f 	and.w	r3, r3, #15
 800c41e:	490a      	ldr	r1, [pc, #40]	; (800c448 <HAL_RCC_ClockConfig+0x1c0>)
 800c420:	5ccb      	ldrb	r3, [r1, r3]
 800c422:	fa22 f303 	lsr.w	r3, r2, r3
 800c426:	4a09      	ldr	r2, [pc, #36]	; (800c44c <HAL_RCC_ClockConfig+0x1c4>)
 800c428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c42a:	4b09      	ldr	r3, [pc, #36]	; (800c450 <HAL_RCC_ClockConfig+0x1c8>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fd f838 	bl	80094a4 <HAL_InitTick>

  return HAL_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	40023c00 	.word	0x40023c00
 800c444:	40023800 	.word	0x40023800
 800c448:	08014ba4 	.word	0x08014ba4
 800c44c:	20000138 	.word	0x20000138
 800c450:	2000013c 	.word	0x2000013c

0800c454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c458:	b090      	sub	sp, #64	; 0x40
 800c45a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c45c:	2300      	movs	r3, #0
 800c45e:	637b      	str	r3, [r7, #52]	; 0x34
 800c460:	2300      	movs	r3, #0
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c464:	2300      	movs	r3, #0
 800c466:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800c468:	2300      	movs	r3, #0
 800c46a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c46c:	4b59      	ldr	r3, [pc, #356]	; (800c5d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	f003 030c 	and.w	r3, r3, #12
 800c474:	2b08      	cmp	r3, #8
 800c476:	d00d      	beq.n	800c494 <HAL_RCC_GetSysClockFreq+0x40>
 800c478:	2b08      	cmp	r3, #8
 800c47a:	f200 80a1 	bhi.w	800c5c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d002      	beq.n	800c488 <HAL_RCC_GetSysClockFreq+0x34>
 800c482:	2b04      	cmp	r3, #4
 800c484:	d003      	beq.n	800c48e <HAL_RCC_GetSysClockFreq+0x3a>
 800c486:	e09b      	b.n	800c5c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c488:	4b53      	ldr	r3, [pc, #332]	; (800c5d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800c48a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800c48c:	e09b      	b.n	800c5c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c48e:	4b53      	ldr	r3, [pc, #332]	; (800c5dc <HAL_RCC_GetSysClockFreq+0x188>)
 800c490:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c492:	e098      	b.n	800c5c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c494:	4b4f      	ldr	r3, [pc, #316]	; (800c5d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c49c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c49e:	4b4d      	ldr	r3, [pc, #308]	; (800c5d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d028      	beq.n	800c4fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c4aa:	4b4a      	ldr	r3, [pc, #296]	; (800c5d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	099b      	lsrs	r3, r3, #6
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	623b      	str	r3, [r7, #32]
 800c4b4:	627a      	str	r2, [r7, #36]	; 0x24
 800c4b6:	6a3b      	ldr	r3, [r7, #32]
 800c4b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c4bc:	2100      	movs	r1, #0
 800c4be:	4b47      	ldr	r3, [pc, #284]	; (800c5dc <HAL_RCC_GetSysClockFreq+0x188>)
 800c4c0:	fb03 f201 	mul.w	r2, r3, r1
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	fb00 f303 	mul.w	r3, r0, r3
 800c4ca:	4413      	add	r3, r2
 800c4cc:	4a43      	ldr	r2, [pc, #268]	; (800c5dc <HAL_RCC_GetSysClockFreq+0x188>)
 800c4ce:	fba0 1202 	umull	r1, r2, r0, r2
 800c4d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c4d4:	460a      	mov	r2, r1
 800c4d6:	62ba      	str	r2, [r7, #40]	; 0x28
 800c4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4da:	4413      	add	r3, r2
 800c4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	61bb      	str	r3, [r7, #24]
 800c4e4:	61fa      	str	r2, [r7, #28]
 800c4e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c4ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c4ee:	f7f7 febf 	bl	8004270 <__aeabi_uldivmod>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4fa:	e053      	b.n	800c5a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c4fc:	4b35      	ldr	r3, [pc, #212]	; (800c5d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	099b      	lsrs	r3, r3, #6
 800c502:	2200      	movs	r2, #0
 800c504:	613b      	str	r3, [r7, #16]
 800c506:	617a      	str	r2, [r7, #20]
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c50e:	f04f 0b00 	mov.w	fp, #0
 800c512:	4652      	mov	r2, sl
 800c514:	465b      	mov	r3, fp
 800c516:	f04f 0000 	mov.w	r0, #0
 800c51a:	f04f 0100 	mov.w	r1, #0
 800c51e:	0159      	lsls	r1, r3, #5
 800c520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c524:	0150      	lsls	r0, r2, #5
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	ebb2 080a 	subs.w	r8, r2, sl
 800c52e:	eb63 090b 	sbc.w	r9, r3, fp
 800c532:	f04f 0200 	mov.w	r2, #0
 800c536:	f04f 0300 	mov.w	r3, #0
 800c53a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c53e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c542:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c546:	ebb2 0408 	subs.w	r4, r2, r8
 800c54a:	eb63 0509 	sbc.w	r5, r3, r9
 800c54e:	f04f 0200 	mov.w	r2, #0
 800c552:	f04f 0300 	mov.w	r3, #0
 800c556:	00eb      	lsls	r3, r5, #3
 800c558:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c55c:	00e2      	lsls	r2, r4, #3
 800c55e:	4614      	mov	r4, r2
 800c560:	461d      	mov	r5, r3
 800c562:	eb14 030a 	adds.w	r3, r4, sl
 800c566:	603b      	str	r3, [r7, #0]
 800c568:	eb45 030b 	adc.w	r3, r5, fp
 800c56c:	607b      	str	r3, [r7, #4]
 800c56e:	f04f 0200 	mov.w	r2, #0
 800c572:	f04f 0300 	mov.w	r3, #0
 800c576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c57a:	4629      	mov	r1, r5
 800c57c:	028b      	lsls	r3, r1, #10
 800c57e:	4621      	mov	r1, r4
 800c580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c584:	4621      	mov	r1, r4
 800c586:	028a      	lsls	r2, r1, #10
 800c588:	4610      	mov	r0, r2
 800c58a:	4619      	mov	r1, r3
 800c58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c58e:	2200      	movs	r2, #0
 800c590:	60bb      	str	r3, [r7, #8]
 800c592:	60fa      	str	r2, [r7, #12]
 800c594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c598:	f7f7 fe6a 	bl	8004270 <__aeabi_uldivmod>
 800c59c:	4602      	mov	r2, r0
 800c59e:	460b      	mov	r3, r1
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c5a4:	4b0b      	ldr	r3, [pc, #44]	; (800c5d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	0c1b      	lsrs	r3, r3, #16
 800c5aa:	f003 0303 	and.w	r3, r3, #3
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	005b      	lsls	r3, r3, #1
 800c5b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800c5b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c5be:	e002      	b.n	800c5c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c5c0:	4b05      	ldr	r3, [pc, #20]	; (800c5d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800c5c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c5c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3740      	adds	r7, #64	; 0x40
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5d2:	bf00      	nop
 800c5d4:	40023800 	.word	0x40023800
 800c5d8:	00f42400 	.word	0x00f42400
 800c5dc:	00989680 	.word	0x00989680

0800c5e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c5e4:	4b03      	ldr	r3, [pc, #12]	; (800c5f4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	20000138 	.word	0x20000138

0800c5f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c5fc:	f7ff fff0 	bl	800c5e0 <HAL_RCC_GetHCLKFreq>
 800c600:	4602      	mov	r2, r0
 800c602:	4b05      	ldr	r3, [pc, #20]	; (800c618 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	0a9b      	lsrs	r3, r3, #10
 800c608:	f003 0307 	and.w	r3, r3, #7
 800c60c:	4903      	ldr	r1, [pc, #12]	; (800c61c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c60e:	5ccb      	ldrb	r3, [r1, r3]
 800c610:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c614:	4618      	mov	r0, r3
 800c616:	bd80      	pop	{r7, pc}
 800c618:	40023800 	.word	0x40023800
 800c61c:	08014bb4 	.word	0x08014bb4

0800c620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c624:	f7ff ffdc 	bl	800c5e0 <HAL_RCC_GetHCLKFreq>
 800c628:	4602      	mov	r2, r0
 800c62a:	4b05      	ldr	r3, [pc, #20]	; (800c640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	0b5b      	lsrs	r3, r3, #13
 800c630:	f003 0307 	and.w	r3, r3, #7
 800c634:	4903      	ldr	r1, [pc, #12]	; (800c644 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c636:	5ccb      	ldrb	r3, [r1, r3]
 800c638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	40023800 	.word	0x40023800
 800c644:	08014bb4 	.word	0x08014bb4

0800c648 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c650:	2300      	movs	r3, #0
 800c652:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c654:	2300      	movs	r3, #0
 800c656:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	2b00      	cmp	r3, #0
 800c662:	d105      	bne.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d035      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c670:	4b62      	ldr	r3, [pc, #392]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c672:	2200      	movs	r2, #0
 800c674:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c676:	f7fc ff59 	bl	800952c <HAL_GetTick>
 800c67a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c67c:	e008      	b.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c67e:	f7fc ff55 	bl	800952c <HAL_GetTick>
 800c682:	4602      	mov	r2, r0
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d901      	bls.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e0b0      	b.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c690:	4b5b      	ldr	r3, [pc, #364]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1f0      	bne.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	019a      	lsls	r2, r3, #6
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	071b      	lsls	r3, r3, #28
 800c6a8:	4955      	ldr	r1, [pc, #340]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c6b0:	4b52      	ldr	r3, [pc, #328]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c6b6:	f7fc ff39 	bl	800952c <HAL_GetTick>
 800c6ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c6bc:	e008      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c6be:	f7fc ff35 	bl	800952c <HAL_GetTick>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	1ad3      	subs	r3, r2, r3
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	d901      	bls.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c6cc:	2303      	movs	r3, #3
 800c6ce:	e090      	b.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c6d0:	4b4b      	ldr	r3, [pc, #300]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d0f0      	beq.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 0302 	and.w	r3, r3, #2
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f000 8083 	beq.w	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	60fb      	str	r3, [r7, #12]
 800c6ee:	4b44      	ldr	r3, [pc, #272]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f2:	4a43      	ldr	r2, [pc, #268]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c6f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6f8:	6413      	str	r3, [r2, #64]	; 0x40
 800c6fa:	4b41      	ldr	r3, [pc, #260]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c702:	60fb      	str	r3, [r7, #12]
 800c704:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c706:	4b3f      	ldr	r3, [pc, #252]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a3e      	ldr	r2, [pc, #248]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c70c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c710:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c712:	f7fc ff0b 	bl	800952c <HAL_GetTick>
 800c716:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c718:	e008      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c71a:	f7fc ff07 	bl	800952c <HAL_GetTick>
 800c71e:	4602      	mov	r2, r0
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	1ad3      	subs	r3, r2, r3
 800c724:	2b02      	cmp	r3, #2
 800c726:	d901      	bls.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c728:	2303      	movs	r3, #3
 800c72a:	e062      	b.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c72c:	4b35      	ldr	r3, [pc, #212]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c734:	2b00      	cmp	r3, #0
 800c736:	d0f0      	beq.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c738:	4b31      	ldr	r3, [pc, #196]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c73a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c740:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d02f      	beq.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	429a      	cmp	r2, r3
 800c754:	d028      	beq.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c756:	4b2a      	ldr	r3, [pc, #168]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c75a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c75e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c760:	4b29      	ldr	r3, [pc, #164]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c762:	2201      	movs	r2, #1
 800c764:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c766:	4b28      	ldr	r3, [pc, #160]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c768:	2200      	movs	r2, #0
 800c76a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c76c:	4a24      	ldr	r2, [pc, #144]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c772:	4b23      	ldr	r3, [pc, #140]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c776:	f003 0301 	and.w	r3, r3, #1
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d114      	bne.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c77e:	f7fc fed5 	bl	800952c <HAL_GetTick>
 800c782:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c784:	e00a      	b.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c786:	f7fc fed1 	bl	800952c <HAL_GetTick>
 800c78a:	4602      	mov	r2, r0
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	f241 3288 	movw	r2, #5000	; 0x1388
 800c794:	4293      	cmp	r3, r2
 800c796:	d901      	bls.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800c798:	2303      	movs	r3, #3
 800c79a:	e02a      	b.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c79c:	4b18      	ldr	r3, [pc, #96]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7a0:	f003 0302 	and.w	r3, r3, #2
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d0ee      	beq.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7b4:	d10d      	bne.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800c7b6:	4b12      	ldr	r3, [pc, #72]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c7c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7ca:	490d      	ldr	r1, [pc, #52]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	608b      	str	r3, [r1, #8]
 800c7d0:	e005      	b.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c7d2:	4b0b      	ldr	r3, [pc, #44]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	4a0a      	ldr	r2, [pc, #40]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c7dc:	6093      	str	r3, [r2, #8]
 800c7de:	4b08      	ldr	r3, [pc, #32]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7ea:	4905      	ldr	r1, [pc, #20]	; (800c800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3718      	adds	r7, #24
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	42470068 	.word	0x42470068
 800c800:	40023800 	.word	0x40023800
 800c804:	40007000 	.word	0x40007000
 800c808:	42470e40 	.word	0x42470e40

0800c80c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c814:	2301      	movs	r3, #1
 800c816:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d101      	bne.n	800c822 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	e066      	b.n	800c8f0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	7f5b      	ldrb	r3, [r3, #29]
 800c826:	b2db      	uxtb	r3, r3
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d105      	bne.n	800c838 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f7fb fbe6 	bl	8008004 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2202      	movs	r2, #2
 800c83c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	22ca      	movs	r2, #202	; 0xca
 800c844:	625a      	str	r2, [r3, #36]	; 0x24
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2253      	movs	r2, #83	; 0x53
 800c84c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f998 	bl	800cb84 <RTC_EnterInitMode>
 800c854:	4603      	mov	r3, r0
 800c856:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800c858:	7bfb      	ldrb	r3, [r7, #15]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d12c      	bne.n	800c8b8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	6812      	ldr	r2, [r2, #0]
 800c868:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c86c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c870:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	6899      	ldr	r1, [r3, #8]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	431a      	orrs	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	431a      	orrs	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	430a      	orrs	r2, r1
 800c88e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	68d2      	ldr	r2, [r2, #12]
 800c898:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6919      	ldr	r1, [r3, #16]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	041a      	lsls	r2, r3, #16
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	430a      	orrs	r2, r1
 800c8ac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f99f 	bl	800cbf2 <RTC_ExitInitMode>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d113      	bne.n	800c8e6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c8cc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	699a      	ldr	r2, [r3, #24]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	430a      	orrs	r2, r1
 800c8de:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	22ff      	movs	r2, #255	; 0xff
 800c8ec:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c8f8:	b590      	push	{r4, r7, lr}
 800c8fa:	b087      	sub	sp, #28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c904:	2300      	movs	r3, #0
 800c906:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	7f1b      	ldrb	r3, [r3, #28]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d101      	bne.n	800c914 <HAL_RTC_SetTime+0x1c>
 800c910:	2302      	movs	r3, #2
 800c912:	e087      	b.n	800ca24 <HAL_RTC_SetTime+0x12c>
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2201      	movs	r2, #1
 800c918:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2202      	movs	r2, #2
 800c91e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d126      	bne.n	800c974 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c930:	2b00      	cmp	r3, #0
 800c932:	d102      	bne.n	800c93a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	2200      	movs	r2, #0
 800c938:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 f97c 	bl	800cc3c <RTC_ByteToBcd2>
 800c944:	4603      	mov	r3, r0
 800c946:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	785b      	ldrb	r3, [r3, #1]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f000 f975 	bl	800cc3c <RTC_ByteToBcd2>
 800c952:	4603      	mov	r3, r0
 800c954:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c956:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	789b      	ldrb	r3, [r3, #2]
 800c95c:	4618      	mov	r0, r3
 800c95e:	f000 f96d 	bl	800cc3c <RTC_ByteToBcd2>
 800c962:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c964:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	78db      	ldrb	r3, [r3, #3]
 800c96c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c96e:	4313      	orrs	r3, r2
 800c970:	617b      	str	r3, [r7, #20]
 800c972:	e018      	b.n	800c9a6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d102      	bne.n	800c988 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	2200      	movs	r2, #0
 800c986:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	785b      	ldrb	r3, [r3, #1]
 800c992:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c994:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800c996:	68ba      	ldr	r2, [r7, #8]
 800c998:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c99a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	78db      	ldrb	r3, [r3, #3]
 800c9a0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	22ca      	movs	r2, #202	; 0xca
 800c9ac:	625a      	str	r2, [r3, #36]	; 0x24
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2253      	movs	r2, #83	; 0x53
 800c9b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	f000 f8e4 	bl	800cb84 <RTC_EnterInitMode>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c9c0:	7cfb      	ldrb	r3, [r7, #19]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d120      	bne.n	800ca08 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c9d0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c9d4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	689a      	ldr	r2, [r3, #8]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c9e4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	6899      	ldr	r1, [r3, #8]
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	68da      	ldr	r2, [r3, #12]
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	431a      	orrs	r2, r3
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	430a      	orrs	r2, r1
 800c9fc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f000 f8f7 	bl	800cbf2 <RTC_ExitInitMode>
 800ca04:	4603      	mov	r3, r0
 800ca06:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ca08:	7cfb      	ldrb	r3, [r7, #19]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d102      	bne.n	800ca14 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2201      	movs	r2, #1
 800ca12:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	22ff      	movs	r2, #255	; 0xff
 800ca1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	771a      	strb	r2, [r3, #28]

  return status;
 800ca22:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	371c      	adds	r7, #28
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd90      	pop	{r4, r7, pc}

0800ca2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca2c:	b590      	push	{r4, r7, lr}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	7f1b      	ldrb	r3, [r3, #28]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d101      	bne.n	800ca48 <HAL_RTC_SetDate+0x1c>
 800ca44:	2302      	movs	r3, #2
 800ca46:	e071      	b.n	800cb2c <HAL_RTC_SetDate+0x100>
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2202      	movs	r2, #2
 800ca52:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d10e      	bne.n	800ca78 <HAL_RTC_SetDate+0x4c>
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	785b      	ldrb	r3, [r3, #1]
 800ca5e:	f003 0310 	and.w	r3, r3, #16
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d008      	beq.n	800ca78 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	785b      	ldrb	r3, [r3, #1]
 800ca6a:	f023 0310 	bic.w	r3, r3, #16
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	330a      	adds	r3, #10
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d11c      	bne.n	800cab8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	78db      	ldrb	r3, [r3, #3]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f000 f8da 	bl	800cc3c <RTC_ByteToBcd2>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	785b      	ldrb	r3, [r3, #1]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f000 f8d3 	bl	800cc3c <RTC_ByteToBcd2>
 800ca96:	4603      	mov	r3, r0
 800ca98:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ca9a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	789b      	ldrb	r3, [r3, #2]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 f8cb 	bl	800cc3c <RTC_ByteToBcd2>
 800caa6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800caa8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cab2:	4313      	orrs	r3, r2
 800cab4:	617b      	str	r3, [r7, #20]
 800cab6:	e00e      	b.n	800cad6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	78db      	ldrb	r3, [r3, #3]
 800cabc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	785b      	ldrb	r3, [r3, #1]
 800cac2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cac4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800caca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cad2:	4313      	orrs	r3, r2
 800cad4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	22ca      	movs	r2, #202	; 0xca
 800cadc:	625a      	str	r2, [r3, #36]	; 0x24
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2253      	movs	r2, #83	; 0x53
 800cae4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f000 f84c 	bl	800cb84 <RTC_EnterInitMode>
 800caec:	4603      	mov	r3, r0
 800caee:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800caf0:	7cfb      	ldrb	r3, [r7, #19]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10c      	bne.n	800cb10 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cb00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cb04:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f000 f873 	bl	800cbf2 <RTC_ExitInitMode>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cb10:	7cfb      	ldrb	r3, [r7, #19]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d102      	bne.n	800cb1c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	22ff      	movs	r2, #255	; 0xff
 800cb22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	771a      	strb	r2, [r3, #28]

  return status;
 800cb2a:	7cfb      	ldrb	r3, [r7, #19]
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	371c      	adds	r7, #28
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd90      	pop	{r4, r7, pc}

0800cb34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	68da      	ldr	r2, [r3, #12]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cb4e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cb50:	f7fc fcec 	bl	800952c <HAL_GetTick>
 800cb54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb56:	e009      	b.n	800cb6c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb58:	f7fc fce8 	bl	800952c <HAL_GetTick>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb66:	d901      	bls.n	800cb6c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cb68:	2303      	movs	r3, #3
 800cb6a:	e007      	b.n	800cb7c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	f003 0320 	and.w	r3, r3, #32
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d0ee      	beq.n	800cb58 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d122      	bne.n	800cbe8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	68da      	ldr	r2, [r3, #12]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cbb0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cbb2:	f7fc fcbb 	bl	800952c <HAL_GetTick>
 800cbb6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cbb8:	e00c      	b.n	800cbd4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cbba:	f7fc fcb7 	bl	800952c <HAL_GetTick>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbc8:	d904      	bls.n	800cbd4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2204      	movs	r2, #4
 800cbce:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d102      	bne.n	800cbe8 <RTC_EnterInitMode+0x64>
 800cbe2:	7bfb      	ldrb	r3, [r7, #15]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d1e8      	bne.n	800cbba <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	68da      	ldr	r2, [r3, #12]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc0c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	689b      	ldr	r3, [r3, #8]
 800cc14:	f003 0320 	and.w	r3, r3, #32
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d10a      	bne.n	800cc32 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f7ff ff89 	bl	800cb34 <HAL_RTC_WaitForSynchro>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d004      	beq.n	800cc32 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2204      	movs	r2, #4
 800cc2c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800cc46:	2300      	movs	r3, #0
 800cc48:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800cc4a:	e005      	b.n	800cc58 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cc4c:	7bfb      	ldrb	r3, [r7, #15]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800cc52:	79fb      	ldrb	r3, [r7, #7]
 800cc54:	3b0a      	subs	r3, #10
 800cc56:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800cc58:	79fb      	ldrb	r3, [r7, #7]
 800cc5a:	2b09      	cmp	r3, #9
 800cc5c:	d8f6      	bhi.n	800cc4c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
 800cc60:	011b      	lsls	r3, r3, #4
 800cc62:	b2da      	uxtb	r2, r3
 800cc64:	79fb      	ldrb	r3, [r7, #7]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	b2db      	uxtb	r3, r3
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b082      	sub	sp, #8
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d101      	bne.n	800cc88 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	e07b      	b.n	800cd80 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d108      	bne.n	800cca2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc98:	d009      	beq.n	800ccae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	61da      	str	r2, [r3, #28]
 800cca0:	e005      	b.n	800ccae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d106      	bne.n	800ccce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f7fb f9c5 	bl	8008058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cce4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd00:	431a      	orrs	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	f003 0302 	and.w	r3, r3, #2
 800cd0a:	431a      	orrs	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	695b      	ldr	r3, [r3, #20]
 800cd10:	f003 0301 	and.w	r3, r3, #1
 800cd14:	431a      	orrs	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	699b      	ldr	r3, [r3, #24]
 800cd1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd1e:	431a      	orrs	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	69db      	ldr	r3, [r3, #28]
 800cd24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd28:	431a      	orrs	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6a1b      	ldr	r3, [r3, #32]
 800cd2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd32:	ea42 0103 	orr.w	r1, r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	430a      	orrs	r2, r1
 800cd44:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	699b      	ldr	r3, [r3, #24]
 800cd4a:	0c1b      	lsrs	r3, r3, #16
 800cd4c:	f003 0104 	and.w	r1, r3, #4
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd54:	f003 0210 	and.w	r2, r3, #16
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	430a      	orrs	r2, r1
 800cd5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	69da      	ldr	r2, [r3, #28]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d101      	bne.n	800cd9a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e01a      	b.n	800cdd0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdb0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f7fb f9c0 	bl	8008138 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800cdce:	2300      	movs	r3, #0
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3708      	adds	r7, #8
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b08c      	sub	sp, #48	; 0x30
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
 800cde4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cde6:	2301      	movs	r3, #1
 800cde8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cdea:	2300      	movs	r3, #0
 800cdec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d101      	bne.n	800cdfe <HAL_SPI_TransmitReceive+0x26>
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	e18a      	b.n	800d114 <HAL_SPI_TransmitReceive+0x33c>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2201      	movs	r2, #1
 800ce02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce06:	f7fc fb91 	bl	800952c <HAL_GetTick>
 800ce0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ce1c:	887b      	ldrh	r3, [r7, #2]
 800ce1e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ce20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d00f      	beq.n	800ce48 <HAL_SPI_TransmitReceive+0x70>
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce2e:	d107      	bne.n	800ce40 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d103      	bne.n	800ce40 <HAL_SPI_TransmitReceive+0x68>
 800ce38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce3c:	2b04      	cmp	r3, #4
 800ce3e:	d003      	beq.n	800ce48 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ce40:	2302      	movs	r3, #2
 800ce42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ce46:	e15b      	b.n	800d100 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d005      	beq.n	800ce5a <HAL_SPI_TransmitReceive+0x82>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d002      	beq.n	800ce5a <HAL_SPI_TransmitReceive+0x82>
 800ce54:	887b      	ldrh	r3, [r7, #2]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d103      	bne.n	800ce62 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ce60:	e14e      	b.n	800d100 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	2b04      	cmp	r3, #4
 800ce6c:	d003      	beq.n	800ce76 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2205      	movs	r2, #5
 800ce72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	887a      	ldrh	r2, [r7, #2]
 800ce86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	887a      	ldrh	r2, [r7, #2]
 800ce8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	887a      	ldrh	r2, [r7, #2]
 800ce98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	887a      	ldrh	r2, [r7, #2]
 800ce9e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2200      	movs	r2, #0
 800cea4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceb6:	2b40      	cmp	r3, #64	; 0x40
 800ceb8:	d007      	beq.n	800ceca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cec8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ced2:	d178      	bne.n	800cfc6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d002      	beq.n	800cee2 <HAL_SPI_TransmitReceive+0x10a>
 800cedc:	8b7b      	ldrh	r3, [r7, #26]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d166      	bne.n	800cfb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cee6:	881a      	ldrh	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef2:	1c9a      	adds	r2, r3, #2
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	3b01      	subs	r3, #1
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cf06:	e053      	b.n	800cfb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	f003 0302 	and.w	r3, r3, #2
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	d11b      	bne.n	800cf4e <HAL_SPI_TransmitReceive+0x176>
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d016      	beq.n	800cf4e <HAL_SPI_TransmitReceive+0x176>
 800cf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d113      	bne.n	800cf4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf2a:	881a      	ldrh	r2, [r3, #0]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf36:	1c9a      	adds	r2, r3, #2
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	3b01      	subs	r3, #1
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	f003 0301 	and.w	r3, r3, #1
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d119      	bne.n	800cf90 <HAL_SPI_TransmitReceive+0x1b8>
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d014      	beq.n	800cf90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	68da      	ldr	r2, [r3, #12]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf70:	b292      	uxth	r2, r2
 800cf72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf78:	1c9a      	adds	r2, r3, #2
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	3b01      	subs	r3, #1
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cf90:	f7fc facc 	bl	800952c <HAL_GetTick>
 800cf94:	4602      	mov	r2, r0
 800cf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf98:	1ad3      	subs	r3, r2, r3
 800cf9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d807      	bhi.n	800cfb0 <HAL_SPI_TransmitReceive+0x1d8>
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa6:	d003      	beq.n	800cfb0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800cfa8:	2303      	movs	r3, #3
 800cfaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800cfae:	e0a7      	b.n	800d100 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1a6      	bne.n	800cf08 <HAL_SPI_TransmitReceive+0x130>
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1a1      	bne.n	800cf08 <HAL_SPI_TransmitReceive+0x130>
 800cfc4:	e07c      	b.n	800d0c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <HAL_SPI_TransmitReceive+0x1fc>
 800cfce:	8b7b      	ldrh	r3, [r7, #26]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d16b      	bne.n	800d0ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	330c      	adds	r3, #12
 800cfde:	7812      	ldrb	r2, [r2, #0]
 800cfe0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe6:	1c5a      	adds	r2, r3, #1
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	3b01      	subs	r3, #1
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cffa:	e057      	b.n	800d0ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	689b      	ldr	r3, [r3, #8]
 800d002:	f003 0302 	and.w	r3, r3, #2
 800d006:	2b02      	cmp	r3, #2
 800d008:	d11c      	bne.n	800d044 <HAL_SPI_TransmitReceive+0x26c>
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d00e:	b29b      	uxth	r3, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	d017      	beq.n	800d044 <HAL_SPI_TransmitReceive+0x26c>
 800d014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d016:	2b01      	cmp	r3, #1
 800d018:	d114      	bne.n	800d044 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	330c      	adds	r3, #12
 800d024:	7812      	ldrb	r2, [r2, #0]
 800d026:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d02c:	1c5a      	adds	r2, r3, #1
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d036:	b29b      	uxth	r3, r3
 800d038:	3b01      	subs	r3, #1
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d040:	2300      	movs	r3, #0
 800d042:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	f003 0301 	and.w	r3, r3, #1
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d119      	bne.n	800d086 <HAL_SPI_TransmitReceive+0x2ae>
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d056:	b29b      	uxth	r3, r3
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d014      	beq.n	800d086 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	68da      	ldr	r2, [r3, #12]
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d066:	b2d2      	uxtb	r2, r2
 800d068:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06e:	1c5a      	adds	r2, r3, #1
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d078:	b29b      	uxth	r3, r3
 800d07a:	3b01      	subs	r3, #1
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d082:	2301      	movs	r3, #1
 800d084:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d086:	f7fc fa51 	bl	800952c <HAL_GetTick>
 800d08a:	4602      	mov	r2, r0
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d092:	429a      	cmp	r2, r3
 800d094:	d803      	bhi.n	800d09e <HAL_SPI_TransmitReceive+0x2c6>
 800d096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d09c:	d102      	bne.n	800d0a4 <HAL_SPI_TransmitReceive+0x2cc>
 800d09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d103      	bne.n	800d0ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d0a4:	2303      	movs	r3, #3
 800d0a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d0aa:	e029      	b.n	800d100 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1a2      	bne.n	800cffc <HAL_SPI_TransmitReceive+0x224>
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d19d      	bne.n	800cffc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f000 f9c3 	bl	800d450 <SPI_EndRxTxTransaction>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d006      	beq.n	800d0de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2220      	movs	r2, #32
 800d0da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d0dc:	e010      	b.n	800d100 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10b      	bne.n	800d0fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	617b      	str	r3, [r7, #20]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	617b      	str	r3, [r7, #20]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	617b      	str	r3, [r7, #20]
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	e000      	b.n	800d100 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d0fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2200      	movs	r2, #0
 800d10c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d110:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d114:	4618      	mov	r0, r3
 800d116:	3730      	adds	r7, #48	; 0x30
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b088      	sub	sp, #32
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10e      	bne.n	800d15c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d13e:	69bb      	ldr	r3, [r7, #24]
 800d140:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d144:	2b00      	cmp	r3, #0
 800d146:	d009      	beq.n	800d15c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d004      	beq.n	800d15c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	4798      	blx	r3
    return;
 800d15a:	e0ce      	b.n	800d2fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	f003 0302 	and.w	r3, r3, #2
 800d162:	2b00      	cmp	r3, #0
 800d164:	d009      	beq.n	800d17a <HAL_SPI_IRQHandler+0x5e>
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d004      	beq.n	800d17a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	4798      	blx	r3
    return;
 800d178:	e0bf      	b.n	800d2fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	f003 0320 	and.w	r3, r3, #32
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10a      	bne.n	800d19a <HAL_SPI_IRQHandler+0x7e>
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d105      	bne.n	800d19a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 80b0 	beq.w	800d2fa <HAL_SPI_IRQHandler+0x1de>
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	f003 0320 	and.w	r3, r3, #32
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 80aa 	beq.w	800d2fa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d023      	beq.n	800d1f8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	d011      	beq.n	800d1e0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1c0:	f043 0204 	orr.w	r2, r3, #4
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	617b      	str	r3, [r7, #20]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	617b      	str	r3, [r7, #20]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	689b      	ldr	r3, [r3, #8]
 800d1da:	617b      	str	r3, [r7, #20]
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	e00b      	b.n	800d1f8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	613b      	str	r3, [r7, #16]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	613b      	str	r3, [r7, #16]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	613b      	str	r3, [r7, #16]
 800d1f4:	693b      	ldr	r3, [r7, #16]
        return;
 800d1f6:	e080      	b.n	800d2fa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	f003 0320 	and.w	r3, r3, #32
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d014      	beq.n	800d22c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d206:	f043 0201 	orr.w	r2, r3, #1
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d20e:	2300      	movs	r3, #0
 800d210:	60fb      	str	r3, [r7, #12]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	60fb      	str	r3, [r7, #12]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d228:	601a      	str	r2, [r3, #0]
 800d22a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00c      	beq.n	800d250 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d23a:	f043 0208 	orr.w	r2, r3, #8
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d242:	2300      	movs	r3, #0
 800d244:	60bb      	str	r3, [r7, #8]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	60bb      	str	r3, [r7, #8]
 800d24e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d254:	2b00      	cmp	r3, #0
 800d256:	d04f      	beq.n	800d2f8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	685a      	ldr	r2, [r3, #4]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d266:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	f003 0302 	and.w	r3, r3, #2
 800d276:	2b00      	cmp	r3, #0
 800d278:	d104      	bne.n	800d284 <HAL_SPI_IRQHandler+0x168>
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	f003 0301 	and.w	r3, r3, #1
 800d280:	2b00      	cmp	r3, #0
 800d282:	d034      	beq.n	800d2ee <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	685a      	ldr	r2, [r3, #4]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f022 0203 	bic.w	r2, r2, #3
 800d292:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d011      	beq.n	800d2c0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2a0:	4a17      	ldr	r2, [pc, #92]	; (800d300 <HAL_SPI_IRQHandler+0x1e4>)
 800d2a2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7fc fb52 	bl	8009952 <HAL_DMA_Abort_IT>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d005      	beq.n	800d2c0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d016      	beq.n	800d2f6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2cc:	4a0c      	ldr	r2, [pc, #48]	; (800d300 <HAL_SPI_IRQHandler+0x1e4>)
 800d2ce:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7fc fb3c 	bl	8009952 <HAL_DMA_Abort_IT>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00a      	beq.n	800d2f6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800d2ec:	e003      	b.n	800d2f6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f808 	bl	800d304 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d2f4:	e000      	b.n	800d2f8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800d2f6:	bf00      	nop
    return;
 800d2f8:	bf00      	nop
  }
}
 800d2fa:	3720      	adds	r7, #32
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	0800d319 	.word	0x0800d319

0800d304 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d30c:	bf00      	nop
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d324:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2200      	movs	r2, #0
 800d32a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2200      	movs	r2, #0
 800d330:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d332:	68f8      	ldr	r0, [r7, #12]
 800d334:	f7ff ffe6 	bl	800d304 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d338:	bf00      	nop
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b088      	sub	sp, #32
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	603b      	str	r3, [r7, #0]
 800d34c:	4613      	mov	r3, r2
 800d34e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d350:	f7fc f8ec 	bl	800952c <HAL_GetTick>
 800d354:	4602      	mov	r2, r0
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	1a9b      	subs	r3, r3, r2
 800d35a:	683a      	ldr	r2, [r7, #0]
 800d35c:	4413      	add	r3, r2
 800d35e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d360:	f7fc f8e4 	bl	800952c <HAL_GetTick>
 800d364:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d366:	4b39      	ldr	r3, [pc, #228]	; (800d44c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	015b      	lsls	r3, r3, #5
 800d36c:	0d1b      	lsrs	r3, r3, #20
 800d36e:	69fa      	ldr	r2, [r7, #28]
 800d370:	fb02 f303 	mul.w	r3, r2, r3
 800d374:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d376:	e054      	b.n	800d422 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37e:	d050      	beq.n	800d422 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d380:	f7fc f8d4 	bl	800952c <HAL_GetTick>
 800d384:	4602      	mov	r2, r0
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	1ad3      	subs	r3, r2, r3
 800d38a:	69fa      	ldr	r2, [r7, #28]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d902      	bls.n	800d396 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d13d      	bne.n	800d412 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	685a      	ldr	r2, [r3, #4]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d3a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d3ae:	d111      	bne.n	800d3d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3b8:	d004      	beq.n	800d3c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3c2:	d107      	bne.n	800d3d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3dc:	d10f      	bne.n	800d3fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d3ec:	601a      	str	r2, [r3, #0]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2201      	movs	r2, #1
 800d402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d40e:	2303      	movs	r3, #3
 800d410:	e017      	b.n	800d442 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d418:	2300      	movs	r3, #0
 800d41a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	3b01      	subs	r3, #1
 800d420:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	689a      	ldr	r2, [r3, #8]
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	4013      	ands	r3, r2
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	429a      	cmp	r2, r3
 800d430:	bf0c      	ite	eq
 800d432:	2301      	moveq	r3, #1
 800d434:	2300      	movne	r3, #0
 800d436:	b2db      	uxtb	r3, r3
 800d438:	461a      	mov	r2, r3
 800d43a:	79fb      	ldrb	r3, [r7, #7]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d19b      	bne.n	800d378 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3720      	adds	r7, #32
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	20000138 	.word	0x20000138

0800d450 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b088      	sub	sp, #32
 800d454:	af02      	add	r7, sp, #8
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d45c:	4b1b      	ldr	r3, [pc, #108]	; (800d4cc <SPI_EndRxTxTransaction+0x7c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a1b      	ldr	r2, [pc, #108]	; (800d4d0 <SPI_EndRxTxTransaction+0x80>)
 800d462:	fba2 2303 	umull	r2, r3, r2, r3
 800d466:	0d5b      	lsrs	r3, r3, #21
 800d468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d46c:	fb02 f303 	mul.w	r3, r2, r3
 800d470:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d47a:	d112      	bne.n	800d4a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	2200      	movs	r2, #0
 800d484:	2180      	movs	r1, #128	; 0x80
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f7ff ff5a 	bl	800d340 <SPI_WaitFlagStateUntilTimeout>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d016      	beq.n	800d4c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d496:	f043 0220 	orr.w	r2, r3, #32
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d49e:	2303      	movs	r3, #3
 800d4a0:	e00f      	b.n	800d4c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00a      	beq.n	800d4be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4b8:	2b80      	cmp	r3, #128	; 0x80
 800d4ba:	d0f2      	beq.n	800d4a2 <SPI_EndRxTxTransaction+0x52>
 800d4bc:	e000      	b.n	800d4c0 <SPI_EndRxTxTransaction+0x70>
        break;
 800d4be:	bf00      	nop
  }

  return HAL_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3718      	adds	r7, #24
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	20000138 	.word	0x20000138
 800d4d0:	165e9f81 	.word	0x165e9f81

0800d4d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e03f      	b.n	800d566 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d106      	bne.n	800d500 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f7fb ff36 	bl	800936c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2224      	movs	r2, #36	; 0x24
 800d504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	68da      	ldr	r2, [r3, #12]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d516:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 fd7b 	bl	800e014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	691a      	ldr	r2, [r3, #16]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d52c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	695a      	ldr	r2, [r3, #20]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d53c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	68da      	ldr	r2, [r3, #12]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d54c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2200      	movs	r2, #0
 800d552:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2220      	movs	r2, #32
 800d558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2220      	movs	r2, #32
 800d560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d56e:	b580      	push	{r7, lr}
 800d570:	b08a      	sub	sp, #40	; 0x28
 800d572:	af02      	add	r7, sp, #8
 800d574:	60f8      	str	r0, [r7, #12]
 800d576:	60b9      	str	r1, [r7, #8]
 800d578:	603b      	str	r3, [r7, #0]
 800d57a:	4613      	mov	r3, r2
 800d57c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d57e:	2300      	movs	r3, #0
 800d580:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	2b20      	cmp	r3, #32
 800d58c:	d17c      	bne.n	800d688 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d002      	beq.n	800d59a <HAL_UART_Transmit+0x2c>
 800d594:	88fb      	ldrh	r3, [r7, #6]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d101      	bne.n	800d59e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d59a:	2301      	movs	r3, #1
 800d59c:	e075      	b.n	800d68a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d101      	bne.n	800d5ac <HAL_UART_Transmit+0x3e>
 800d5a8:	2302      	movs	r3, #2
 800d5aa:	e06e      	b.n	800d68a <HAL_UART_Transmit+0x11c>
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2221      	movs	r2, #33	; 0x21
 800d5be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5c2:	f7fb ffb3 	bl	800952c <HAL_GetTick>
 800d5c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	88fa      	ldrh	r2, [r7, #6]
 800d5cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	88fa      	ldrh	r2, [r7, #6]
 800d5d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5dc:	d108      	bne.n	800d5f0 <HAL_UART_Transmit+0x82>
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d104      	bne.n	800d5f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	61bb      	str	r3, [r7, #24]
 800d5ee:	e003      	b.n	800d5f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800d600:	e02a      	b.n	800d658 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	2200      	movs	r2, #0
 800d60a:	2180      	movs	r1, #128	; 0x80
 800d60c:	68f8      	ldr	r0, [r7, #12]
 800d60e:	f000 faf9 	bl	800dc04 <UART_WaitOnFlagUntilTimeout>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d001      	beq.n	800d61c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d618:	2303      	movs	r3, #3
 800d61a:	e036      	b.n	800d68a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10b      	bne.n	800d63a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	881b      	ldrh	r3, [r3, #0]
 800d626:	461a      	mov	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d630:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	3302      	adds	r3, #2
 800d636:	61bb      	str	r3, [r7, #24]
 800d638:	e007      	b.n	800d64a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	781a      	ldrb	r2, [r3, #0]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	3301      	adds	r3, #1
 800d648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d64e:	b29b      	uxth	r3, r3
 800d650:	3b01      	subs	r3, #1
 800d652:	b29a      	uxth	r2, r3
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1cf      	bne.n	800d602 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	9300      	str	r3, [sp, #0]
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	2200      	movs	r2, #0
 800d66a:	2140      	movs	r1, #64	; 0x40
 800d66c:	68f8      	ldr	r0, [r7, #12]
 800d66e:	f000 fac9 	bl	800dc04 <UART_WaitOnFlagUntilTimeout>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d001      	beq.n	800d67c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d678:	2303      	movs	r3, #3
 800d67a:	e006      	b.n	800d68a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2220      	movs	r2, #32
 800d680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d684:	2300      	movs	r3, #0
 800d686:	e000      	b.n	800d68a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d688:	2302      	movs	r3, #2
  }
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3720      	adds	r7, #32
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
	...

0800d694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b0ba      	sub	sp, #232	; 0xe8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	695b      	ldr	r3, [r3, #20]
 800d6b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6ca:	f003 030f 	and.w	r3, r3, #15
 800d6ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d6d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d10f      	bne.n	800d6fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6de:	f003 0320 	and.w	r3, r3, #32
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d009      	beq.n	800d6fa <HAL_UART_IRQHandler+0x66>
 800d6e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6ea:	f003 0320 	and.w	r3, r3, #32
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d003      	beq.n	800d6fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fbd3 	bl	800de9e <UART_Receive_IT>
      return;
 800d6f8:	e256      	b.n	800dba8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d6fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f000 80de 	beq.w	800d8c0 <HAL_UART_IRQHandler+0x22c>
 800d704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d708:	f003 0301 	and.w	r3, r3, #1
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d106      	bne.n	800d71e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d714:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d718:	2b00      	cmp	r3, #0
 800d71a:	f000 80d1 	beq.w	800d8c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d722:	f003 0301 	and.w	r3, r3, #1
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00b      	beq.n	800d742 <HAL_UART_IRQHandler+0xae>
 800d72a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d72e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d732:	2b00      	cmp	r3, #0
 800d734:	d005      	beq.n	800d742 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d73a:	f043 0201 	orr.w	r2, r3, #1
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d746:	f003 0304 	and.w	r3, r3, #4
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00b      	beq.n	800d766 <HAL_UART_IRQHandler+0xd2>
 800d74e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d752:	f003 0301 	and.w	r3, r3, #1
 800d756:	2b00      	cmp	r3, #0
 800d758:	d005      	beq.n	800d766 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75e:	f043 0202 	orr.w	r2, r3, #2
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d76a:	f003 0302 	and.w	r3, r3, #2
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00b      	beq.n	800d78a <HAL_UART_IRQHandler+0xf6>
 800d772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d005      	beq.n	800d78a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d782:	f043 0204 	orr.w	r2, r3, #4
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d78e:	f003 0308 	and.w	r3, r3, #8
 800d792:	2b00      	cmp	r3, #0
 800d794:	d011      	beq.n	800d7ba <HAL_UART_IRQHandler+0x126>
 800d796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d79a:	f003 0320 	and.w	r3, r3, #32
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d105      	bne.n	800d7ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d7a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7a6:	f003 0301 	and.w	r3, r3, #1
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d005      	beq.n	800d7ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b2:	f043 0208 	orr.w	r2, r3, #8
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f000 81ed 	beq.w	800db9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7c8:	f003 0320 	and.w	r3, r3, #32
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d008      	beq.n	800d7e2 <HAL_UART_IRQHandler+0x14e>
 800d7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7d4:	f003 0320 	and.w	r3, r3, #32
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 fb5e 	bl	800de9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	695b      	ldr	r3, [r3, #20]
 800d7e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ec:	2b40      	cmp	r3, #64	; 0x40
 800d7ee:	bf0c      	ite	eq
 800d7f0:	2301      	moveq	r3, #1
 800d7f2:	2300      	movne	r3, #0
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fe:	f003 0308 	and.w	r3, r3, #8
 800d802:	2b00      	cmp	r3, #0
 800d804:	d103      	bne.n	800d80e <HAL_UART_IRQHandler+0x17a>
 800d806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d04f      	beq.n	800d8ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fa66 	bl	800dce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d81e:	2b40      	cmp	r3, #64	; 0x40
 800d820:	d141      	bne.n	800d8a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3314      	adds	r3, #20
 800d828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d82c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d830:	e853 3f00 	ldrex	r3, [r3]
 800d834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d83c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	3314      	adds	r3, #20
 800d84a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d84e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d85a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d85e:	e841 2300 	strex	r3, r2, [r1]
 800d862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1d9      	bne.n	800d822 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d872:	2b00      	cmp	r3, #0
 800d874:	d013      	beq.n	800d89e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87a:	4a7d      	ldr	r2, [pc, #500]	; (800da70 <HAL_UART_IRQHandler+0x3dc>)
 800d87c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d882:	4618      	mov	r0, r3
 800d884:	f7fc f865 	bl	8009952 <HAL_DMA_Abort_IT>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d016      	beq.n	800d8bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d894:	687a      	ldr	r2, [r7, #4]
 800d896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d898:	4610      	mov	r0, r2
 800d89a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d89c:	e00e      	b.n	800d8bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f99a 	bl	800dbd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8a4:	e00a      	b.n	800d8bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 f996 	bl	800dbd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8ac:	e006      	b.n	800d8bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 f992 	bl	800dbd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d8ba:	e170      	b.n	800db9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8bc:	bf00      	nop
    return;
 800d8be:	e16e      	b.n	800db9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	f040 814a 	bne.w	800db5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8ce:	f003 0310 	and.w	r3, r3, #16
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 8143 	beq.w	800db5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d8d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8dc:	f003 0310 	and.w	r3, r3, #16
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f000 813c 	beq.w	800db5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	60bb      	str	r3, [r7, #8]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	60bb      	str	r3, [r7, #8]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	60bb      	str	r3, [r7, #8]
 800d8fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	695b      	ldr	r3, [r3, #20]
 800d902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d906:	2b40      	cmp	r3, #64	; 0x40
 800d908:	f040 80b4 	bne.w	800da74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f000 8140 	beq.w	800dba2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d92a:	429a      	cmp	r2, r3
 800d92c:	f080 8139 	bcs.w	800dba2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d936:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93c:	69db      	ldr	r3, [r3, #28]
 800d93e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d942:	f000 8088 	beq.w	800da56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	330c      	adds	r3, #12
 800d94c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d954:	e853 3f00 	ldrex	r3, [r3]
 800d958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d95c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	330c      	adds	r3, #12
 800d96e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d97a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d97e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d982:	e841 2300 	strex	r3, r2, [r1]
 800d986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d98a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d1d9      	bne.n	800d946 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	3314      	adds	r3, #20
 800d998:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d99a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d99c:	e853 3f00 	ldrex	r3, [r3]
 800d9a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d9a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9a4:	f023 0301 	bic.w	r3, r3, #1
 800d9a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	3314      	adds	r3, #20
 800d9b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d9b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d9ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d9be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d9c2:	e841 2300 	strex	r3, r2, [r1]
 800d9c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d9c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d1e1      	bne.n	800d992 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	3314      	adds	r3, #20
 800d9d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9d8:	e853 3f00 	ldrex	r3, [r3]
 800d9dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d9de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	3314      	adds	r3, #20
 800d9ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d9f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d9f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d9f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d9fa:	e841 2300 	strex	r3, r2, [r1]
 800d9fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800da00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1e3      	bne.n	800d9ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2220      	movs	r2, #32
 800da0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	330c      	adds	r3, #12
 800da1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da1e:	e853 3f00 	ldrex	r3, [r3]
 800da22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da26:	f023 0310 	bic.w	r3, r3, #16
 800da2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	330c      	adds	r3, #12
 800da34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800da38:	65ba      	str	r2, [r7, #88]	; 0x58
 800da3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da40:	e841 2300 	strex	r3, r2, [r1]
 800da44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1e3      	bne.n	800da14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da50:	4618      	mov	r0, r3
 800da52:	f7fb ff0e 	bl	8009872 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800da5e:	b29b      	uxth	r3, r3
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	b29b      	uxth	r3, r3
 800da64:	4619      	mov	r1, r3
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 f8c0 	bl	800dbec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800da6c:	e099      	b.n	800dba2 <HAL_UART_IRQHandler+0x50e>
 800da6e:	bf00      	nop
 800da70:	0800dda7 	.word	0x0800dda7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	1ad3      	subs	r3, r2, r3
 800da80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800da88:	b29b      	uxth	r3, r3
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 808b 	beq.w	800dba6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800da90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800da94:	2b00      	cmp	r3, #0
 800da96:	f000 8086 	beq.w	800dba6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	330c      	adds	r3, #12
 800daa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa4:	e853 3f00 	ldrex	r3, [r3]
 800daa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800daaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	330c      	adds	r3, #12
 800daba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800dabe:	647a      	str	r2, [r7, #68]	; 0x44
 800dac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dac6:	e841 2300 	strex	r3, r2, [r1]
 800daca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dacc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1e3      	bne.n	800da9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	3314      	adds	r3, #20
 800dad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dadc:	e853 3f00 	ldrex	r3, [r3]
 800dae0:	623b      	str	r3, [r7, #32]
   return(result);
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	f023 0301 	bic.w	r3, r3, #1
 800dae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	3314      	adds	r3, #20
 800daf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800daf6:	633a      	str	r2, [r7, #48]	; 0x30
 800daf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dafe:	e841 2300 	strex	r3, r2, [r1]
 800db02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1e3      	bne.n	800dad2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2220      	movs	r2, #32
 800db0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	330c      	adds	r3, #12
 800db1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	e853 3f00 	ldrex	r3, [r3]
 800db26:	60fb      	str	r3, [r7, #12]
   return(result);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f023 0310 	bic.w	r3, r3, #16
 800db2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	330c      	adds	r3, #12
 800db38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800db3c:	61fa      	str	r2, [r7, #28]
 800db3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db40:	69b9      	ldr	r1, [r7, #24]
 800db42:	69fa      	ldr	r2, [r7, #28]
 800db44:	e841 2300 	strex	r3, r2, [r1]
 800db48:	617b      	str	r3, [r7, #20]
   return(result);
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d1e3      	bne.n	800db18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800db50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800db54:	4619      	mov	r1, r3
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 f848 	bl	800dbec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800db5c:	e023      	b.n	800dba6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800db5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db66:	2b00      	cmp	r3, #0
 800db68:	d009      	beq.n	800db7e <HAL_UART_IRQHandler+0x4ea>
 800db6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db72:	2b00      	cmp	r3, #0
 800db74:	d003      	beq.n	800db7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 f929 	bl	800ddce <UART_Transmit_IT>
    return;
 800db7c:	e014      	b.n	800dba8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800db7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00e      	beq.n	800dba8 <HAL_UART_IRQHandler+0x514>
 800db8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db92:	2b00      	cmp	r3, #0
 800db94:	d008      	beq.n	800dba8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 f969 	bl	800de6e <UART_EndTransmit_IT>
    return;
 800db9c:	e004      	b.n	800dba8 <HAL_UART_IRQHandler+0x514>
    return;
 800db9e:	bf00      	nop
 800dba0:	e002      	b.n	800dba8 <HAL_UART_IRQHandler+0x514>
      return;
 800dba2:	bf00      	nop
 800dba4:	e000      	b.n	800dba8 <HAL_UART_IRQHandler+0x514>
      return;
 800dba6:	bf00      	nop
  }
}
 800dba8:	37e8      	adds	r7, #232	; 0xe8
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop

0800dbb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800dbcc:	bf00      	nop
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dbe0:	bf00      	nop
 800dbe2:	370c      	adds	r7, #12
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dbf8:	bf00      	nop
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b090      	sub	sp, #64	; 0x40
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	603b      	str	r3, [r7, #0]
 800dc10:	4613      	mov	r3, r2
 800dc12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc14:	e050      	b.n	800dcb8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc1c:	d04c      	beq.n	800dcb8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800dc1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d007      	beq.n	800dc34 <UART_WaitOnFlagUntilTimeout+0x30>
 800dc24:	f7fb fc82 	bl	800952c <HAL_GetTick>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d241      	bcs.n	800dcb8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	330c      	adds	r3, #12
 800dc3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3e:	e853 3f00 	ldrex	r3, [r3]
 800dc42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	330c      	adds	r3, #12
 800dc52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc54:	637a      	str	r2, [r7, #52]	; 0x34
 800dc56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc5c:	e841 2300 	strex	r3, r2, [r1]
 800dc60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1e5      	bne.n	800dc34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	3314      	adds	r3, #20
 800dc6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	e853 3f00 	ldrex	r3, [r3]
 800dc76:	613b      	str	r3, [r7, #16]
   return(result);
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	f023 0301 	bic.w	r3, r3, #1
 800dc7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	3314      	adds	r3, #20
 800dc86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc88:	623a      	str	r2, [r7, #32]
 800dc8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc8c:	69f9      	ldr	r1, [r7, #28]
 800dc8e:	6a3a      	ldr	r2, [r7, #32]
 800dc90:	e841 2300 	strex	r3, r2, [r1]
 800dc94:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1e5      	bne.n	800dc68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2220      	movs	r2, #32
 800dca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2220      	movs	r2, #32
 800dca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	e00f      	b.n	800dcd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	4013      	ands	r3, r2
 800dcc2:	68ba      	ldr	r2, [r7, #8]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	bf0c      	ite	eq
 800dcc8:	2301      	moveq	r3, #1
 800dcca:	2300      	movne	r3, #0
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	461a      	mov	r2, r3
 800dcd0:	79fb      	ldrb	r3, [r7, #7]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d09f      	beq.n	800dc16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dcd6:	2300      	movs	r3, #0
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3740      	adds	r7, #64	; 0x40
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b095      	sub	sp, #84	; 0x54
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	330c      	adds	r3, #12
 800dcee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf2:	e853 3f00 	ldrex	r3, [r3]
 800dcf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dcfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	330c      	adds	r3, #12
 800dd06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd08:	643a      	str	r2, [r7, #64]	; 0x40
 800dd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dd0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd10:	e841 2300 	strex	r3, r2, [r1]
 800dd14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d1e5      	bne.n	800dce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	3314      	adds	r3, #20
 800dd22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd24:	6a3b      	ldr	r3, [r7, #32]
 800dd26:	e853 3f00 	ldrex	r3, [r3]
 800dd2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	f023 0301 	bic.w	r3, r3, #1
 800dd32:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	3314      	adds	r3, #20
 800dd3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd44:	e841 2300 	strex	r3, r2, [r1]
 800dd48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1e5      	bne.n	800dd1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d119      	bne.n	800dd8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	330c      	adds	r3, #12
 800dd5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	e853 3f00 	ldrex	r3, [r3]
 800dd66:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	f023 0310 	bic.w	r3, r3, #16
 800dd6e:	647b      	str	r3, [r7, #68]	; 0x44
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	330c      	adds	r3, #12
 800dd76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd78:	61ba      	str	r2, [r7, #24]
 800dd7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd7c:	6979      	ldr	r1, [r7, #20]
 800dd7e:	69ba      	ldr	r2, [r7, #24]
 800dd80:	e841 2300 	strex	r3, r2, [r1]
 800dd84:	613b      	str	r3, [r7, #16]
   return(result);
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d1e5      	bne.n	800dd58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2220      	movs	r2, #32
 800dd90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	631a      	str	r2, [r3, #48]	; 0x30
}
 800dd9a:	bf00      	nop
 800dd9c:	3754      	adds	r7, #84	; 0x54
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b084      	sub	sp, #16
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f7ff ff09 	bl	800dbd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ddc6:	bf00      	nop
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ddce:	b480      	push	{r7}
 800ddd0:	b085      	sub	sp, #20
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	2b21      	cmp	r3, #33	; 0x21
 800dde0:	d13e      	bne.n	800de60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddea:	d114      	bne.n	800de16 <UART_Transmit_IT+0x48>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	691b      	ldr	r3, [r3, #16]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d110      	bne.n	800de16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6a1b      	ldr	r3, [r3, #32]
 800ddf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	461a      	mov	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6a1b      	ldr	r3, [r3, #32]
 800de0e:	1c9a      	adds	r2, r3, #2
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	621a      	str	r2, [r3, #32]
 800de14:	e008      	b.n	800de28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	1c59      	adds	r1, r3, #1
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	6211      	str	r1, [r2, #32]
 800de20:	781a      	ldrb	r2, [r3, #0]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	3b01      	subs	r3, #1
 800de30:	b29b      	uxth	r3, r3
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	4619      	mov	r1, r3
 800de36:	84d1      	strh	r1, [r2, #38]	; 0x26
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d10f      	bne.n	800de5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	68da      	ldr	r2, [r3, #12]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	68da      	ldr	r2, [r3, #12]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800de5c:	2300      	movs	r3, #0
 800de5e:	e000      	b.n	800de62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800de60:	2302      	movs	r3, #2
  }
}
 800de62:	4618      	mov	r0, r3
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800de6e:	b580      	push	{r7, lr}
 800de70:	b082      	sub	sp, #8
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	68da      	ldr	r2, [r3, #12]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2220      	movs	r2, #32
 800de8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f7ff fe8e 	bl	800dbb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800de94:	2300      	movs	r3, #0
}
 800de96:	4618      	mov	r0, r3
 800de98:	3708      	adds	r7, #8
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b08c      	sub	sp, #48	; 0x30
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800deac:	b2db      	uxtb	r3, r3
 800deae:	2b22      	cmp	r3, #34	; 0x22
 800deb0:	f040 80ab 	bne.w	800e00a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800debc:	d117      	bne.n	800deee <UART_Receive_IT+0x50>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	691b      	ldr	r3, [r3, #16]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d113      	bne.n	800deee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800dec6:	2300      	movs	r3, #0
 800dec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dece:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dedc:	b29a      	uxth	r2, r3
 800dede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee6:	1c9a      	adds	r2, r3, #2
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	629a      	str	r2, [r3, #40]	; 0x28
 800deec:	e026      	b.n	800df3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800def2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800def4:	2300      	movs	r3, #0
 800def6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df00:	d007      	beq.n	800df12 <UART_Receive_IT+0x74>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	689b      	ldr	r3, [r3, #8]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10a      	bne.n	800df20 <UART_Receive_IT+0x82>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	691b      	ldr	r3, [r3, #16]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d106      	bne.n	800df20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1c:	701a      	strb	r2, [r3, #0]
 800df1e:	e008      	b.n	800df32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	b2db      	uxtb	r3, r3
 800df28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df2c:	b2da      	uxtb	r2, r3
 800df2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df36:	1c5a      	adds	r2, r3, #1
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800df40:	b29b      	uxth	r3, r3
 800df42:	3b01      	subs	r3, #1
 800df44:	b29b      	uxth	r3, r3
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	4619      	mov	r1, r3
 800df4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d15a      	bne.n	800e006 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	68da      	ldr	r2, [r3, #12]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f022 0220 	bic.w	r2, r2, #32
 800df5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68da      	ldr	r2, [r3, #12]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800df6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	695a      	ldr	r2, [r3, #20]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f022 0201 	bic.w	r2, r2, #1
 800df7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2220      	movs	r2, #32
 800df84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d135      	bne.n	800dffc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	330c      	adds	r3, #12
 800df9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	e853 3f00 	ldrex	r3, [r3]
 800dfa4:	613b      	str	r3, [r7, #16]
   return(result);
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	f023 0310 	bic.w	r3, r3, #16
 800dfac:	627b      	str	r3, [r7, #36]	; 0x24
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	330c      	adds	r3, #12
 800dfb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfb6:	623a      	str	r2, [r7, #32]
 800dfb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfba:	69f9      	ldr	r1, [r7, #28]
 800dfbc:	6a3a      	ldr	r2, [r7, #32]
 800dfbe:	e841 2300 	strex	r3, r2, [r1]
 800dfc2:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d1e5      	bne.n	800df96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f003 0310 	and.w	r3, r3, #16
 800dfd4:	2b10      	cmp	r3, #16
 800dfd6:	d10a      	bne.n	800dfee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dfd8:	2300      	movs	r3, #0
 800dfda:	60fb      	str	r3, [r7, #12]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	60fb      	str	r3, [r7, #12]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	60fb      	str	r3, [r7, #12]
 800dfec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dff2:	4619      	mov	r1, r3
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f7ff fdf9 	bl	800dbec <HAL_UARTEx_RxEventCallback>
 800dffa:	e002      	b.n	800e002 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7ff fde1 	bl	800dbc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e002:	2300      	movs	r3, #0
 800e004:	e002      	b.n	800e00c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800e006:	2300      	movs	r3, #0
 800e008:	e000      	b.n	800e00c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800e00a:	2302      	movs	r3, #2
  }
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3730      	adds	r7, #48	; 0x30
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e018:	b0c0      	sub	sp, #256	; 0x100
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	691b      	ldr	r3, [r3, #16]
 800e028:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e02c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e030:	68d9      	ldr	r1, [r3, #12]
 800e032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	ea40 0301 	orr.w	r3, r0, r1
 800e03c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e042:	689a      	ldr	r2, [r3, #8]
 800e044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	431a      	orrs	r2, r3
 800e04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e050:	695b      	ldr	r3, [r3, #20]
 800e052:	431a      	orrs	r2, r3
 800e054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e058:	69db      	ldr	r3, [r3, #28]
 800e05a:	4313      	orrs	r3, r2
 800e05c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e06c:	f021 010c 	bic.w	r1, r1, #12
 800e070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e07a:	430b      	orrs	r3, r1
 800e07c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e07e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	695b      	ldr	r3, [r3, #20]
 800e086:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e08a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e08e:	6999      	ldr	r1, [r3, #24]
 800e090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	ea40 0301 	orr.w	r3, r0, r1
 800e09a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e09c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	4b8f      	ldr	r3, [pc, #572]	; (800e2e0 <UART_SetConfig+0x2cc>)
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d005      	beq.n	800e0b4 <UART_SetConfig+0xa0>
 800e0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	4b8d      	ldr	r3, [pc, #564]	; (800e2e4 <UART_SetConfig+0x2d0>)
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d104      	bne.n	800e0be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e0b4:	f7fe fab4 	bl	800c620 <HAL_RCC_GetPCLK2Freq>
 800e0b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e0bc:	e003      	b.n	800e0c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e0be:	f7fe fa9b 	bl	800c5f8 <HAL_RCC_GetPCLK1Freq>
 800e0c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e0c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0ca:	69db      	ldr	r3, [r3, #28]
 800e0cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0d0:	f040 810c 	bne.w	800e2ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e0d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e0de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e0e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e0e6:	4622      	mov	r2, r4
 800e0e8:	462b      	mov	r3, r5
 800e0ea:	1891      	adds	r1, r2, r2
 800e0ec:	65b9      	str	r1, [r7, #88]	; 0x58
 800e0ee:	415b      	adcs	r3, r3
 800e0f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e0f6:	4621      	mov	r1, r4
 800e0f8:	eb12 0801 	adds.w	r8, r2, r1
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	eb43 0901 	adc.w	r9, r3, r1
 800e102:	f04f 0200 	mov.w	r2, #0
 800e106:	f04f 0300 	mov.w	r3, #0
 800e10a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e10e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e116:	4690      	mov	r8, r2
 800e118:	4699      	mov	r9, r3
 800e11a:	4623      	mov	r3, r4
 800e11c:	eb18 0303 	adds.w	r3, r8, r3
 800e120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e124:	462b      	mov	r3, r5
 800e126:	eb49 0303 	adc.w	r3, r9, r3
 800e12a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	2200      	movs	r2, #0
 800e136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e13a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e13e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e142:	460b      	mov	r3, r1
 800e144:	18db      	adds	r3, r3, r3
 800e146:	653b      	str	r3, [r7, #80]	; 0x50
 800e148:	4613      	mov	r3, r2
 800e14a:	eb42 0303 	adc.w	r3, r2, r3
 800e14e:	657b      	str	r3, [r7, #84]	; 0x54
 800e150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e158:	f7f6 f88a 	bl	8004270 <__aeabi_uldivmod>
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	4b61      	ldr	r3, [pc, #388]	; (800e2e8 <UART_SetConfig+0x2d4>)
 800e162:	fba3 2302 	umull	r2, r3, r3, r2
 800e166:	095b      	lsrs	r3, r3, #5
 800e168:	011c      	lsls	r4, r3, #4
 800e16a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e16e:	2200      	movs	r2, #0
 800e170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e174:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e17c:	4642      	mov	r2, r8
 800e17e:	464b      	mov	r3, r9
 800e180:	1891      	adds	r1, r2, r2
 800e182:	64b9      	str	r1, [r7, #72]	; 0x48
 800e184:	415b      	adcs	r3, r3
 800e186:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e18c:	4641      	mov	r1, r8
 800e18e:	eb12 0a01 	adds.w	sl, r2, r1
 800e192:	4649      	mov	r1, r9
 800e194:	eb43 0b01 	adc.w	fp, r3, r1
 800e198:	f04f 0200 	mov.w	r2, #0
 800e19c:	f04f 0300 	mov.w	r3, #0
 800e1a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e1a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e1a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e1ac:	4692      	mov	sl, r2
 800e1ae:	469b      	mov	fp, r3
 800e1b0:	4643      	mov	r3, r8
 800e1b2:	eb1a 0303 	adds.w	r3, sl, r3
 800e1b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e1ba:	464b      	mov	r3, r9
 800e1bc:	eb4b 0303 	adc.w	r3, fp, r3
 800e1c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e1d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e1d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e1d8:	460b      	mov	r3, r1
 800e1da:	18db      	adds	r3, r3, r3
 800e1dc:	643b      	str	r3, [r7, #64]	; 0x40
 800e1de:	4613      	mov	r3, r2
 800e1e0:	eb42 0303 	adc.w	r3, r2, r3
 800e1e4:	647b      	str	r3, [r7, #68]	; 0x44
 800e1e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e1ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e1ee:	f7f6 f83f 	bl	8004270 <__aeabi_uldivmod>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	4b3b      	ldr	r3, [pc, #236]	; (800e2e8 <UART_SetConfig+0x2d4>)
 800e1fa:	fba3 2301 	umull	r2, r3, r3, r1
 800e1fe:	095b      	lsrs	r3, r3, #5
 800e200:	2264      	movs	r2, #100	; 0x64
 800e202:	fb02 f303 	mul.w	r3, r2, r3
 800e206:	1acb      	subs	r3, r1, r3
 800e208:	00db      	lsls	r3, r3, #3
 800e20a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e20e:	4b36      	ldr	r3, [pc, #216]	; (800e2e8 <UART_SetConfig+0x2d4>)
 800e210:	fba3 2302 	umull	r2, r3, r3, r2
 800e214:	095b      	lsrs	r3, r3, #5
 800e216:	005b      	lsls	r3, r3, #1
 800e218:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e21c:	441c      	add	r4, r3
 800e21e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e222:	2200      	movs	r2, #0
 800e224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e228:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e22c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e230:	4642      	mov	r2, r8
 800e232:	464b      	mov	r3, r9
 800e234:	1891      	adds	r1, r2, r2
 800e236:	63b9      	str	r1, [r7, #56]	; 0x38
 800e238:	415b      	adcs	r3, r3
 800e23a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e23c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e240:	4641      	mov	r1, r8
 800e242:	1851      	adds	r1, r2, r1
 800e244:	6339      	str	r1, [r7, #48]	; 0x30
 800e246:	4649      	mov	r1, r9
 800e248:	414b      	adcs	r3, r1
 800e24a:	637b      	str	r3, [r7, #52]	; 0x34
 800e24c:	f04f 0200 	mov.w	r2, #0
 800e250:	f04f 0300 	mov.w	r3, #0
 800e254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e258:	4659      	mov	r1, fp
 800e25a:	00cb      	lsls	r3, r1, #3
 800e25c:	4651      	mov	r1, sl
 800e25e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e262:	4651      	mov	r1, sl
 800e264:	00ca      	lsls	r2, r1, #3
 800e266:	4610      	mov	r0, r2
 800e268:	4619      	mov	r1, r3
 800e26a:	4603      	mov	r3, r0
 800e26c:	4642      	mov	r2, r8
 800e26e:	189b      	adds	r3, r3, r2
 800e270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e274:	464b      	mov	r3, r9
 800e276:	460a      	mov	r2, r1
 800e278:	eb42 0303 	adc.w	r3, r2, r3
 800e27c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	2200      	movs	r2, #0
 800e288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e28c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e294:	460b      	mov	r3, r1
 800e296:	18db      	adds	r3, r3, r3
 800e298:	62bb      	str	r3, [r7, #40]	; 0x28
 800e29a:	4613      	mov	r3, r2
 800e29c:	eb42 0303 	adc.w	r3, r2, r3
 800e2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e2a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e2aa:	f7f5 ffe1 	bl	8004270 <__aeabi_uldivmod>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4b0d      	ldr	r3, [pc, #52]	; (800e2e8 <UART_SetConfig+0x2d4>)
 800e2b4:	fba3 1302 	umull	r1, r3, r3, r2
 800e2b8:	095b      	lsrs	r3, r3, #5
 800e2ba:	2164      	movs	r1, #100	; 0x64
 800e2bc:	fb01 f303 	mul.w	r3, r1, r3
 800e2c0:	1ad3      	subs	r3, r2, r3
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	3332      	adds	r3, #50	; 0x32
 800e2c6:	4a08      	ldr	r2, [pc, #32]	; (800e2e8 <UART_SetConfig+0x2d4>)
 800e2c8:	fba2 2303 	umull	r2, r3, r2, r3
 800e2cc:	095b      	lsrs	r3, r3, #5
 800e2ce:	f003 0207 	and.w	r2, r3, #7
 800e2d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4422      	add	r2, r4
 800e2da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e2dc:	e106      	b.n	800e4ec <UART_SetConfig+0x4d8>
 800e2de:	bf00      	nop
 800e2e0:	40011000 	.word	0x40011000
 800e2e4:	40011400 	.word	0x40011400
 800e2e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e2ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e2f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e2fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e2fe:	4642      	mov	r2, r8
 800e300:	464b      	mov	r3, r9
 800e302:	1891      	adds	r1, r2, r2
 800e304:	6239      	str	r1, [r7, #32]
 800e306:	415b      	adcs	r3, r3
 800e308:	627b      	str	r3, [r7, #36]	; 0x24
 800e30a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e30e:	4641      	mov	r1, r8
 800e310:	1854      	adds	r4, r2, r1
 800e312:	4649      	mov	r1, r9
 800e314:	eb43 0501 	adc.w	r5, r3, r1
 800e318:	f04f 0200 	mov.w	r2, #0
 800e31c:	f04f 0300 	mov.w	r3, #0
 800e320:	00eb      	lsls	r3, r5, #3
 800e322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e326:	00e2      	lsls	r2, r4, #3
 800e328:	4614      	mov	r4, r2
 800e32a:	461d      	mov	r5, r3
 800e32c:	4643      	mov	r3, r8
 800e32e:	18e3      	adds	r3, r4, r3
 800e330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e334:	464b      	mov	r3, r9
 800e336:	eb45 0303 	adc.w	r3, r5, r3
 800e33a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e33e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e34a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e34e:	f04f 0200 	mov.w	r2, #0
 800e352:	f04f 0300 	mov.w	r3, #0
 800e356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e35a:	4629      	mov	r1, r5
 800e35c:	008b      	lsls	r3, r1, #2
 800e35e:	4621      	mov	r1, r4
 800e360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e364:	4621      	mov	r1, r4
 800e366:	008a      	lsls	r2, r1, #2
 800e368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e36c:	f7f5 ff80 	bl	8004270 <__aeabi_uldivmod>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	4b60      	ldr	r3, [pc, #384]	; (800e4f8 <UART_SetConfig+0x4e4>)
 800e376:	fba3 2302 	umull	r2, r3, r3, r2
 800e37a:	095b      	lsrs	r3, r3, #5
 800e37c:	011c      	lsls	r4, r3, #4
 800e37e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e382:	2200      	movs	r2, #0
 800e384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e388:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e38c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e390:	4642      	mov	r2, r8
 800e392:	464b      	mov	r3, r9
 800e394:	1891      	adds	r1, r2, r2
 800e396:	61b9      	str	r1, [r7, #24]
 800e398:	415b      	adcs	r3, r3
 800e39a:	61fb      	str	r3, [r7, #28]
 800e39c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e3a0:	4641      	mov	r1, r8
 800e3a2:	1851      	adds	r1, r2, r1
 800e3a4:	6139      	str	r1, [r7, #16]
 800e3a6:	4649      	mov	r1, r9
 800e3a8:	414b      	adcs	r3, r1
 800e3aa:	617b      	str	r3, [r7, #20]
 800e3ac:	f04f 0200 	mov.w	r2, #0
 800e3b0:	f04f 0300 	mov.w	r3, #0
 800e3b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e3b8:	4659      	mov	r1, fp
 800e3ba:	00cb      	lsls	r3, r1, #3
 800e3bc:	4651      	mov	r1, sl
 800e3be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e3c2:	4651      	mov	r1, sl
 800e3c4:	00ca      	lsls	r2, r1, #3
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	4642      	mov	r2, r8
 800e3ce:	189b      	adds	r3, r3, r2
 800e3d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e3d4:	464b      	mov	r3, r9
 800e3d6:	460a      	mov	r2, r1
 800e3d8:	eb42 0303 	adc.w	r3, r2, r3
 800e3dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	67bb      	str	r3, [r7, #120]	; 0x78
 800e3ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e3ec:	f04f 0200 	mov.w	r2, #0
 800e3f0:	f04f 0300 	mov.w	r3, #0
 800e3f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e3f8:	4649      	mov	r1, r9
 800e3fa:	008b      	lsls	r3, r1, #2
 800e3fc:	4641      	mov	r1, r8
 800e3fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e402:	4641      	mov	r1, r8
 800e404:	008a      	lsls	r2, r1, #2
 800e406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e40a:	f7f5 ff31 	bl	8004270 <__aeabi_uldivmod>
 800e40e:	4602      	mov	r2, r0
 800e410:	460b      	mov	r3, r1
 800e412:	4611      	mov	r1, r2
 800e414:	4b38      	ldr	r3, [pc, #224]	; (800e4f8 <UART_SetConfig+0x4e4>)
 800e416:	fba3 2301 	umull	r2, r3, r3, r1
 800e41a:	095b      	lsrs	r3, r3, #5
 800e41c:	2264      	movs	r2, #100	; 0x64
 800e41e:	fb02 f303 	mul.w	r3, r2, r3
 800e422:	1acb      	subs	r3, r1, r3
 800e424:	011b      	lsls	r3, r3, #4
 800e426:	3332      	adds	r3, #50	; 0x32
 800e428:	4a33      	ldr	r2, [pc, #204]	; (800e4f8 <UART_SetConfig+0x4e4>)
 800e42a:	fba2 2303 	umull	r2, r3, r2, r3
 800e42e:	095b      	lsrs	r3, r3, #5
 800e430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e434:	441c      	add	r4, r3
 800e436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e43a:	2200      	movs	r2, #0
 800e43c:	673b      	str	r3, [r7, #112]	; 0x70
 800e43e:	677a      	str	r2, [r7, #116]	; 0x74
 800e440:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e444:	4642      	mov	r2, r8
 800e446:	464b      	mov	r3, r9
 800e448:	1891      	adds	r1, r2, r2
 800e44a:	60b9      	str	r1, [r7, #8]
 800e44c:	415b      	adcs	r3, r3
 800e44e:	60fb      	str	r3, [r7, #12]
 800e450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e454:	4641      	mov	r1, r8
 800e456:	1851      	adds	r1, r2, r1
 800e458:	6039      	str	r1, [r7, #0]
 800e45a:	4649      	mov	r1, r9
 800e45c:	414b      	adcs	r3, r1
 800e45e:	607b      	str	r3, [r7, #4]
 800e460:	f04f 0200 	mov.w	r2, #0
 800e464:	f04f 0300 	mov.w	r3, #0
 800e468:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e46c:	4659      	mov	r1, fp
 800e46e:	00cb      	lsls	r3, r1, #3
 800e470:	4651      	mov	r1, sl
 800e472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e476:	4651      	mov	r1, sl
 800e478:	00ca      	lsls	r2, r1, #3
 800e47a:	4610      	mov	r0, r2
 800e47c:	4619      	mov	r1, r3
 800e47e:	4603      	mov	r3, r0
 800e480:	4642      	mov	r2, r8
 800e482:	189b      	adds	r3, r3, r2
 800e484:	66bb      	str	r3, [r7, #104]	; 0x68
 800e486:	464b      	mov	r3, r9
 800e488:	460a      	mov	r2, r1
 800e48a:	eb42 0303 	adc.w	r3, r2, r3
 800e48e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	663b      	str	r3, [r7, #96]	; 0x60
 800e49a:	667a      	str	r2, [r7, #100]	; 0x64
 800e49c:	f04f 0200 	mov.w	r2, #0
 800e4a0:	f04f 0300 	mov.w	r3, #0
 800e4a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e4a8:	4649      	mov	r1, r9
 800e4aa:	008b      	lsls	r3, r1, #2
 800e4ac:	4641      	mov	r1, r8
 800e4ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e4b2:	4641      	mov	r1, r8
 800e4b4:	008a      	lsls	r2, r1, #2
 800e4b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e4ba:	f7f5 fed9 	bl	8004270 <__aeabi_uldivmod>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4b0d      	ldr	r3, [pc, #52]	; (800e4f8 <UART_SetConfig+0x4e4>)
 800e4c4:	fba3 1302 	umull	r1, r3, r3, r2
 800e4c8:	095b      	lsrs	r3, r3, #5
 800e4ca:	2164      	movs	r1, #100	; 0x64
 800e4cc:	fb01 f303 	mul.w	r3, r1, r3
 800e4d0:	1ad3      	subs	r3, r2, r3
 800e4d2:	011b      	lsls	r3, r3, #4
 800e4d4:	3332      	adds	r3, #50	; 0x32
 800e4d6:	4a08      	ldr	r2, [pc, #32]	; (800e4f8 <UART_SetConfig+0x4e4>)
 800e4d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e4dc:	095b      	lsrs	r3, r3, #5
 800e4de:	f003 020f 	and.w	r2, r3, #15
 800e4e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4422      	add	r2, r4
 800e4ea:	609a      	str	r2, [r3, #8]
}
 800e4ec:	bf00      	nop
 800e4ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4f8:	51eb851f 	.word	0x51eb851f

0800e4fc <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b10      	cmp	r3, #16
 800e50c:	d11c      	bne.n	800e548 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	4b1f      	ldr	r3, [pc, #124]	; (800e590 <FSMC_NAND_Init+0x94>)
 800e514:	4013      	ands	r3, r2
 800e516:	683a      	ldr	r2, [r7, #0]
 800e518:	6851      	ldr	r1, [r2, #4]
 800e51a:	683a      	ldr	r2, [r7, #0]
 800e51c:	6892      	ldr	r2, [r2, #8]
 800e51e:	4311      	orrs	r1, r2
 800e520:	683a      	ldr	r2, [r7, #0]
 800e522:	68d2      	ldr	r2, [r2, #12]
 800e524:	4311      	orrs	r1, r2
 800e526:	683a      	ldr	r2, [r7, #0]
 800e528:	6912      	ldr	r2, [r2, #16]
 800e52a:	4311      	orrs	r1, r2
 800e52c:	683a      	ldr	r2, [r7, #0]
 800e52e:	6952      	ldr	r2, [r2, #20]
 800e530:	0252      	lsls	r2, r2, #9
 800e532:	4311      	orrs	r1, r2
 800e534:	683a      	ldr	r2, [r7, #0]
 800e536:	6992      	ldr	r2, [r2, #24]
 800e538:	0352      	lsls	r2, r2, #13
 800e53a:	430a      	orrs	r2, r1
 800e53c:	4313      	orrs	r3, r2
 800e53e:	f043 0208 	orr.w	r2, r3, #8
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	601a      	str	r2, [r3, #0]
 800e546:	e01b      	b.n	800e580 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6a1a      	ldr	r2, [r3, #32]
 800e54c:	4b10      	ldr	r3, [pc, #64]	; (800e590 <FSMC_NAND_Init+0x94>)
 800e54e:	4013      	ands	r3, r2
 800e550:	683a      	ldr	r2, [r7, #0]
 800e552:	6851      	ldr	r1, [r2, #4]
 800e554:	683a      	ldr	r2, [r7, #0]
 800e556:	6892      	ldr	r2, [r2, #8]
 800e558:	4311      	orrs	r1, r2
 800e55a:	683a      	ldr	r2, [r7, #0]
 800e55c:	68d2      	ldr	r2, [r2, #12]
 800e55e:	4311      	orrs	r1, r2
 800e560:	683a      	ldr	r2, [r7, #0]
 800e562:	6912      	ldr	r2, [r2, #16]
 800e564:	4311      	orrs	r1, r2
 800e566:	683a      	ldr	r2, [r7, #0]
 800e568:	6952      	ldr	r2, [r2, #20]
 800e56a:	0252      	lsls	r2, r2, #9
 800e56c:	4311      	orrs	r1, r2
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	6992      	ldr	r2, [r2, #24]
 800e572:	0352      	lsls	r2, r2, #13
 800e574:	430a      	orrs	r2, r1
 800e576:	4313      	orrs	r3, r2
 800e578:	f043 0208 	orr.w	r2, r3, #8
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 800e580:	2300      	movs	r3, #0
}
 800e582:	4618      	mov	r0, r3
 800e584:	370c      	adds	r7, #12
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr
 800e58e:	bf00      	nop
 800e590:	fff00181 	.word	0xfff00181

0800e594 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800e594:	b480      	push	{r7}
 800e596:	b085      	sub	sp, #20
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2b10      	cmp	r3, #16
 800e5a4:	d112      	bne.n	800e5cc <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	689b      	ldr	r3, [r3, #8]
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	021b      	lsls	r3, r3, #8
 800e5b4:	431a      	orrs	r2, r3
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	041b      	lsls	r3, r3, #16
 800e5bc:	431a      	orrs	r2, r3
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	061b      	lsls	r3, r3, #24
 800e5c4:	431a      	orrs	r2, r3
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	609a      	str	r2, [r3, #8]
 800e5ca:	e011      	b.n	800e5f0 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	021b      	lsls	r3, r3, #8
 800e5da:	431a      	orrs	r2, r3
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	689b      	ldr	r3, [r3, #8]
 800e5e0:	041b      	lsls	r3, r3, #16
 800e5e2:	431a      	orrs	r2, r3
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	061b      	lsls	r3, r3, #24
 800e5ea:	431a      	orrs	r2, r3
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3714      	adds	r7, #20
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800e5fe:	b480      	push	{r7}
 800e600:	b085      	sub	sp, #20
 800e602:	af00      	add	r7, sp, #0
 800e604:	60f8      	str	r0, [r7, #12]
 800e606:	60b9      	str	r1, [r7, #8]
 800e608:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2b10      	cmp	r3, #16
 800e60e:	d112      	bne.n	800e636 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	021b      	lsls	r3, r3, #8
 800e61e:	431a      	orrs	r2, r3
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	041b      	lsls	r3, r3, #16
 800e626:	431a      	orrs	r2, r3
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	061b      	lsls	r3, r3, #24
 800e62e:	431a      	orrs	r2, r3
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	60da      	str	r2, [r3, #12]
 800e634:	e011      	b.n	800e65a <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	021b      	lsls	r3, r3, #8
 800e644:	431a      	orrs	r2, r3
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	041b      	lsls	r3, r3, #16
 800e64c:	431a      	orrs	r2, r3
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	061b      	lsls	r3, r3, #24
 800e654:	431a      	orrs	r2, r3
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 800e65a:	2300      	movs	r3, #0
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3714      	adds	r7, #20
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e668:	b084      	sub	sp, #16
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b084      	sub	sp, #16
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
 800e672:	f107 001c 	add.w	r0, r7, #28
 800e676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d122      	bne.n	800e6c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e684:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e698:	687a      	ldr	r2, [r7, #4]
 800e69a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e6a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d105      	bne.n	800e6ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	68db      	ldr	r3, [r3, #12]
 800e6b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f001 fbee 	bl	800fe9c <USB_CoreReset>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	73fb      	strb	r3, [r7, #15]
 800e6c4:	e01a      	b.n	800e6fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f001 fbe2 	bl	800fe9c <USB_CoreReset>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e6dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d106      	bne.n	800e6f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	639a      	str	r2, [r3, #56]	; 0x38
 800e6ee:	e005      	b.n	800e6fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d10b      	bne.n	800e71a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	f043 0206 	orr.w	r2, r3, #6
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	689b      	ldr	r3, [r3, #8]
 800e712:	f043 0220 	orr.w	r2, r3, #32
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e726:	b004      	add	sp, #16
 800e728:	4770      	bx	lr
	...

0800e72c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b087      	sub	sp, #28
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	4613      	mov	r3, r2
 800e738:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	2b02      	cmp	r3, #2
 800e73e:	d165      	bne.n	800e80c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	4a41      	ldr	r2, [pc, #260]	; (800e848 <USB_SetTurnaroundTime+0x11c>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d906      	bls.n	800e756 <USB_SetTurnaroundTime+0x2a>
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	4a40      	ldr	r2, [pc, #256]	; (800e84c <USB_SetTurnaroundTime+0x120>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d202      	bcs.n	800e756 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e750:	230f      	movs	r3, #15
 800e752:	617b      	str	r3, [r7, #20]
 800e754:	e062      	b.n	800e81c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	4a3c      	ldr	r2, [pc, #240]	; (800e84c <USB_SetTurnaroundTime+0x120>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d306      	bcc.n	800e76c <USB_SetTurnaroundTime+0x40>
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	4a3b      	ldr	r2, [pc, #236]	; (800e850 <USB_SetTurnaroundTime+0x124>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d202      	bcs.n	800e76c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e766:	230e      	movs	r3, #14
 800e768:	617b      	str	r3, [r7, #20]
 800e76a:	e057      	b.n	800e81c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	4a38      	ldr	r2, [pc, #224]	; (800e850 <USB_SetTurnaroundTime+0x124>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d306      	bcc.n	800e782 <USB_SetTurnaroundTime+0x56>
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	4a37      	ldr	r2, [pc, #220]	; (800e854 <USB_SetTurnaroundTime+0x128>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d202      	bcs.n	800e782 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e77c:	230d      	movs	r3, #13
 800e77e:	617b      	str	r3, [r7, #20]
 800e780:	e04c      	b.n	800e81c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	4a33      	ldr	r2, [pc, #204]	; (800e854 <USB_SetTurnaroundTime+0x128>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d306      	bcc.n	800e798 <USB_SetTurnaroundTime+0x6c>
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	4a32      	ldr	r2, [pc, #200]	; (800e858 <USB_SetTurnaroundTime+0x12c>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d802      	bhi.n	800e798 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e792:	230c      	movs	r3, #12
 800e794:	617b      	str	r3, [r7, #20]
 800e796:	e041      	b.n	800e81c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	4a2f      	ldr	r2, [pc, #188]	; (800e858 <USB_SetTurnaroundTime+0x12c>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d906      	bls.n	800e7ae <USB_SetTurnaroundTime+0x82>
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	4a2e      	ldr	r2, [pc, #184]	; (800e85c <USB_SetTurnaroundTime+0x130>)
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d802      	bhi.n	800e7ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e7a8:	230b      	movs	r3, #11
 800e7aa:	617b      	str	r3, [r7, #20]
 800e7ac:	e036      	b.n	800e81c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	4a2a      	ldr	r2, [pc, #168]	; (800e85c <USB_SetTurnaroundTime+0x130>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d906      	bls.n	800e7c4 <USB_SetTurnaroundTime+0x98>
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	4a29      	ldr	r2, [pc, #164]	; (800e860 <USB_SetTurnaroundTime+0x134>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d802      	bhi.n	800e7c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e7be:	230a      	movs	r3, #10
 800e7c0:	617b      	str	r3, [r7, #20]
 800e7c2:	e02b      	b.n	800e81c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	4a26      	ldr	r2, [pc, #152]	; (800e860 <USB_SetTurnaroundTime+0x134>)
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d906      	bls.n	800e7da <USB_SetTurnaroundTime+0xae>
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	4a25      	ldr	r2, [pc, #148]	; (800e864 <USB_SetTurnaroundTime+0x138>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d202      	bcs.n	800e7da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e7d4:	2309      	movs	r3, #9
 800e7d6:	617b      	str	r3, [r7, #20]
 800e7d8:	e020      	b.n	800e81c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	4a21      	ldr	r2, [pc, #132]	; (800e864 <USB_SetTurnaroundTime+0x138>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d306      	bcc.n	800e7f0 <USB_SetTurnaroundTime+0xc4>
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	4a20      	ldr	r2, [pc, #128]	; (800e868 <USB_SetTurnaroundTime+0x13c>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d802      	bhi.n	800e7f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e7ea:	2308      	movs	r3, #8
 800e7ec:	617b      	str	r3, [r7, #20]
 800e7ee:	e015      	b.n	800e81c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	4a1d      	ldr	r2, [pc, #116]	; (800e868 <USB_SetTurnaroundTime+0x13c>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d906      	bls.n	800e806 <USB_SetTurnaroundTime+0xda>
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	4a1c      	ldr	r2, [pc, #112]	; (800e86c <USB_SetTurnaroundTime+0x140>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d202      	bcs.n	800e806 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e800:	2307      	movs	r3, #7
 800e802:	617b      	str	r3, [r7, #20]
 800e804:	e00a      	b.n	800e81c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e806:	2306      	movs	r3, #6
 800e808:	617b      	str	r3, [r7, #20]
 800e80a:	e007      	b.n	800e81c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e80c:	79fb      	ldrb	r3, [r7, #7]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d102      	bne.n	800e818 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e812:	2309      	movs	r3, #9
 800e814:	617b      	str	r3, [r7, #20]
 800e816:	e001      	b.n	800e81c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e818:	2309      	movs	r3, #9
 800e81a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	68da      	ldr	r2, [r3, #12]
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	029b      	lsls	r3, r3, #10
 800e830:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e834:	431a      	orrs	r2, r3
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e83a:	2300      	movs	r3, #0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	371c      	adds	r7, #28
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr
 800e848:	00d8acbf 	.word	0x00d8acbf
 800e84c:	00e4e1c0 	.word	0x00e4e1c0
 800e850:	00f42400 	.word	0x00f42400
 800e854:	01067380 	.word	0x01067380
 800e858:	011a499f 	.word	0x011a499f
 800e85c:	01312cff 	.word	0x01312cff
 800e860:	014ca43f 	.word	0x014ca43f
 800e864:	016e3600 	.word	0x016e3600
 800e868:	01a6ab1f 	.word	0x01a6ab1f
 800e86c:	01e84800 	.word	0x01e84800

0800e870 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	689b      	ldr	r3, [r3, #8]
 800e87c:	f043 0201 	orr.w	r2, r3, #1
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e884:	2300      	movs	r3, #0
}
 800e886:	4618      	mov	r0, r3
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e892:	b480      	push	{r7}
 800e894:	b083      	sub	sp, #12
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	f023 0201 	bic.w	r2, r3, #1
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e8a6:	2300      	movs	r3, #0
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e8d0:	78fb      	ldrb	r3, [r7, #3]
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d115      	bne.n	800e902 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	68db      	ldr	r3, [r3, #12]
 800e8da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e8e2:	2001      	movs	r0, #1
 800e8e4:	f7fa fe2e 	bl	8009544 <HAL_Delay>
      ms++;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f001 fa45 	bl	800fd7e <USB_GetMode>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b01      	cmp	r3, #1
 800e8f8:	d01e      	beq.n	800e938 <USB_SetCurrentMode+0x84>
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2b31      	cmp	r3, #49	; 0x31
 800e8fe:	d9f0      	bls.n	800e8e2 <USB_SetCurrentMode+0x2e>
 800e900:	e01a      	b.n	800e938 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e902:	78fb      	ldrb	r3, [r7, #3]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d115      	bne.n	800e934 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e914:	2001      	movs	r0, #1
 800e916:	f7fa fe15 	bl	8009544 <HAL_Delay>
      ms++;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	3301      	adds	r3, #1
 800e91e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f001 fa2c 	bl	800fd7e <USB_GetMode>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d005      	beq.n	800e938 <USB_SetCurrentMode+0x84>
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2b31      	cmp	r3, #49	; 0x31
 800e930:	d9f0      	bls.n	800e914 <USB_SetCurrentMode+0x60>
 800e932:	e001      	b.n	800e938 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e934:	2301      	movs	r3, #1
 800e936:	e005      	b.n	800e944 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2b32      	cmp	r3, #50	; 0x32
 800e93c:	d101      	bne.n	800e942 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e93e:	2301      	movs	r3, #1
 800e940:	e000      	b.n	800e944 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e94c:	b084      	sub	sp, #16
 800e94e:	b580      	push	{r7, lr}
 800e950:	b086      	sub	sp, #24
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
 800e956:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e95a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e95e:	2300      	movs	r3, #0
 800e960:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e966:	2300      	movs	r3, #0
 800e968:	613b      	str	r3, [r7, #16]
 800e96a:	e009      	b.n	800e980 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	3340      	adds	r3, #64	; 0x40
 800e972:	009b      	lsls	r3, r3, #2
 800e974:	4413      	add	r3, r2
 800e976:	2200      	movs	r2, #0
 800e978:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	3301      	adds	r3, #1
 800e97e:	613b      	str	r3, [r7, #16]
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	2b0e      	cmp	r3, #14
 800e984:	d9f2      	bls.n	800e96c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d11c      	bne.n	800e9c6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e99a:	f043 0302 	orr.w	r3, r3, #2
 800e99e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	639a      	str	r2, [r3, #56]	; 0x38
 800e9c4:	e00b      	b.n	800e9de <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	680b      	ldr	r3, [r1, #0]
 800e9fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d10c      	bne.n	800ea1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ea04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d104      	bne.n	800ea14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ea0a:	2100      	movs	r1, #0
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 f965 	bl	800ecdc <USB_SetDevSpeed>
 800ea12:	e008      	b.n	800ea26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ea14:	2101      	movs	r1, #1
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 f960 	bl	800ecdc <USB_SetDevSpeed>
 800ea1c:	e003      	b.n	800ea26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ea1e:	2103      	movs	r1, #3
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f95b 	bl	800ecdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ea26:	2110      	movs	r1, #16
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f000 f8f3 	bl	800ec14 <USB_FlushTxFifo>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d001      	beq.n	800ea38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800ea34:	2301      	movs	r3, #1
 800ea36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f000 f91f 	bl	800ec7c <USB_FlushRxFifo>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d001      	beq.n	800ea48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ea44:	2301      	movs	r3, #1
 800ea46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea4e:	461a      	mov	r2, r3
 800ea50:	2300      	movs	r3, #0
 800ea52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea66:	461a      	mov	r2, r3
 800ea68:	2300      	movs	r3, #0
 800ea6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	613b      	str	r3, [r7, #16]
 800ea70:	e043      	b.n	800eafa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	015a      	lsls	r2, r3, #5
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	4413      	add	r3, r2
 800ea7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea88:	d118      	bne.n	800eabc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d10a      	bne.n	800eaa6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	015a      	lsls	r2, r3, #5
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	4413      	add	r3, r2
 800ea98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eaa2:	6013      	str	r3, [r2, #0]
 800eaa4:	e013      	b.n	800eace <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	015a      	lsls	r2, r3, #5
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	4413      	add	r3, r2
 800eaae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eab2:	461a      	mov	r2, r3
 800eab4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800eab8:	6013      	str	r3, [r2, #0]
 800eaba:	e008      	b.n	800eace <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	015a      	lsls	r2, r3, #5
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	4413      	add	r3, r2
 800eac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eac8:	461a      	mov	r2, r3
 800eaca:	2300      	movs	r3, #0
 800eacc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	015a      	lsls	r2, r3, #5
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	4413      	add	r3, r2
 800ead6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eada:	461a      	mov	r2, r3
 800eadc:	2300      	movs	r3, #0
 800eade:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	015a      	lsls	r2, r3, #5
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	4413      	add	r3, r2
 800eae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaec:	461a      	mov	r2, r3
 800eaee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eaf2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	613b      	str	r3, [r7, #16]
 800eafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafc:	693a      	ldr	r2, [r7, #16]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d3b7      	bcc.n	800ea72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb02:	2300      	movs	r3, #0
 800eb04:	613b      	str	r3, [r7, #16]
 800eb06:	e043      	b.n	800eb90 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	015a      	lsls	r2, r3, #5
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	4413      	add	r3, r2
 800eb10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb1e:	d118      	bne.n	800eb52 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d10a      	bne.n	800eb3c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	015a      	lsls	r2, r3, #5
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb32:	461a      	mov	r2, r3
 800eb34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eb38:	6013      	str	r3, [r2, #0]
 800eb3a:	e013      	b.n	800eb64 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	015a      	lsls	r2, r3, #5
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	4413      	add	r3, r2
 800eb44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb48:	461a      	mov	r2, r3
 800eb4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800eb4e:	6013      	str	r3, [r2, #0]
 800eb50:	e008      	b.n	800eb64 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	015a      	lsls	r2, r3, #5
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	4413      	add	r3, r2
 800eb5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb5e:	461a      	mov	r2, r3
 800eb60:	2300      	movs	r3, #0
 800eb62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	015a      	lsls	r2, r3, #5
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	4413      	add	r3, r2
 800eb6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb70:	461a      	mov	r2, r3
 800eb72:	2300      	movs	r3, #0
 800eb74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	015a      	lsls	r2, r3, #5
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb82:	461a      	mov	r2, r3
 800eb84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eb88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	613b      	str	r3, [r7, #16]
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	693a      	ldr	r2, [r7, #16]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d3b7      	bcc.n	800eb08 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb9e:	691b      	ldr	r3, [r3, #16]
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ebaa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ebb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ebba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d105      	bne.n	800ebcc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	f043 0210 	orr.w	r2, r3, #16
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	699a      	ldr	r2, [r3, #24]
 800ebd0:	4b0f      	ldr	r3, [pc, #60]	; (800ec10 <USB_DevInit+0x2c4>)
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ebd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d005      	beq.n	800ebea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	699b      	ldr	r3, [r3, #24]
 800ebe2:	f043 0208 	orr.w	r2, r3, #8
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ebea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d107      	bne.n	800ec00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	699b      	ldr	r3, [r3, #24]
 800ebf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ebf8:	f043 0304 	orr.w	r3, r3, #4
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ec00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3718      	adds	r7, #24
 800ec06:	46bd      	mov	sp, r7
 800ec08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ec0c:	b004      	add	sp, #16
 800ec0e:	4770      	bx	lr
 800ec10:	803c3800 	.word	0x803c3800

0800ec14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b085      	sub	sp, #20
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	3301      	adds	r3, #1
 800ec26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	4a13      	ldr	r2, [pc, #76]	; (800ec78 <USB_FlushTxFifo+0x64>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d901      	bls.n	800ec34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ec30:	2303      	movs	r3, #3
 800ec32:	e01b      	b.n	800ec6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	691b      	ldr	r3, [r3, #16]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	daf2      	bge.n	800ec22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	019b      	lsls	r3, r3, #6
 800ec44:	f043 0220 	orr.w	r2, r3, #32
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	4a08      	ldr	r2, [pc, #32]	; (800ec78 <USB_FlushTxFifo+0x64>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d901      	bls.n	800ec5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ec5a:	2303      	movs	r3, #3
 800ec5c:	e006      	b.n	800ec6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	691b      	ldr	r3, [r3, #16]
 800ec62:	f003 0320 	and.w	r3, r3, #32
 800ec66:	2b20      	cmp	r3, #32
 800ec68:	d0f0      	beq.n	800ec4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ec6a:	2300      	movs	r3, #0
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3714      	adds	r7, #20
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr
 800ec78:	00030d40 	.word	0x00030d40

0800ec7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b085      	sub	sp, #20
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ec84:	2300      	movs	r3, #0
 800ec86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	4a11      	ldr	r2, [pc, #68]	; (800ecd8 <USB_FlushRxFifo+0x5c>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d901      	bls.n	800ec9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ec96:	2303      	movs	r3, #3
 800ec98:	e018      	b.n	800eccc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	691b      	ldr	r3, [r3, #16]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	daf2      	bge.n	800ec88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800eca2:	2300      	movs	r3, #0
 800eca4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2210      	movs	r2, #16
 800ecaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	4a08      	ldr	r2, [pc, #32]	; (800ecd8 <USB_FlushRxFifo+0x5c>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d901      	bls.n	800ecbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ecba:	2303      	movs	r3, #3
 800ecbc:	e006      	b.n	800eccc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	691b      	ldr	r3, [r3, #16]
 800ecc2:	f003 0310 	and.w	r3, r3, #16
 800ecc6:	2b10      	cmp	r3, #16
 800ecc8:	d0f0      	beq.n	800ecac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ecca:	2300      	movs	r3, #0
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3714      	adds	r7, #20
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr
 800ecd8:	00030d40 	.word	0x00030d40

0800ecdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b085      	sub	sp, #20
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	460b      	mov	r3, r1
 800ece6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	78fb      	ldrb	r3, [r7, #3]
 800ecf6:	68f9      	ldr	r1, [r7, #12]
 800ecf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ed00:	2300      	movs	r3, #0
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3714      	adds	r7, #20
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr

0800ed0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ed0e:	b480      	push	{r7}
 800ed10:	b087      	sub	sp, #28
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	f003 0306 	and.w	r3, r3, #6
 800ed26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d102      	bne.n	800ed34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	75fb      	strb	r3, [r7, #23]
 800ed32:	e00a      	b.n	800ed4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2b02      	cmp	r3, #2
 800ed38:	d002      	beq.n	800ed40 <USB_GetDevSpeed+0x32>
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2b06      	cmp	r3, #6
 800ed3e:	d102      	bne.n	800ed46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ed40:	2302      	movs	r3, #2
 800ed42:	75fb      	strb	r3, [r7, #23]
 800ed44:	e001      	b.n	800ed4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ed46:	230f      	movs	r3, #15
 800ed48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ed4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	371c      	adds	r7, #28
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b085      	sub	sp, #20
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	785b      	ldrb	r3, [r3, #1]
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d13a      	bne.n	800edea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed7a:	69da      	ldr	r2, [r3, #28]
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	f003 030f 	and.w	r3, r3, #15
 800ed84:	2101      	movs	r1, #1
 800ed86:	fa01 f303 	lsl.w	r3, r1, r3
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	68f9      	ldr	r1, [r7, #12]
 800ed8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed92:	4313      	orrs	r3, r2
 800ed94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	015a      	lsls	r2, r3, #5
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d155      	bne.n	800ee58 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	015a      	lsls	r2, r3, #5
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	4413      	add	r3, r2
 800edb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	791b      	ldrb	r3, [r3, #4]
 800edc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800edc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	059b      	lsls	r3, r3, #22
 800edce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800edd0:	4313      	orrs	r3, r2
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	0151      	lsls	r1, r2, #5
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	440a      	add	r2, r1
 800edda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ede2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ede6:	6013      	str	r3, [r2, #0]
 800ede8:	e036      	b.n	800ee58 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edf0:	69da      	ldr	r2, [r3, #28]
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	f003 030f 	and.w	r3, r3, #15
 800edfa:	2101      	movs	r1, #1
 800edfc:	fa01 f303 	lsl.w	r3, r1, r3
 800ee00:	041b      	lsls	r3, r3, #16
 800ee02:	68f9      	ldr	r1, [r7, #12]
 800ee04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	015a      	lsls	r2, r3, #5
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	4413      	add	r3, r2
 800ee14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d11a      	bne.n	800ee58 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	015a      	lsls	r2, r3, #5
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	4413      	add	r3, r2
 800ee2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	791b      	ldrb	r3, [r3, #4]
 800ee3c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ee3e:	430b      	orrs	r3, r1
 800ee40:	4313      	orrs	r3, r2
 800ee42:	68ba      	ldr	r2, [r7, #8]
 800ee44:	0151      	lsls	r1, r2, #5
 800ee46:	68fa      	ldr	r2, [r7, #12]
 800ee48:	440a      	add	r2, r1
 800ee4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee56:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ee58:	2300      	movs	r3, #0
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3714      	adds	r7, #20
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee64:	4770      	bx	lr
	...

0800ee68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b085      	sub	sp, #20
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	785b      	ldrb	r3, [r3, #1]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d161      	bne.n	800ef48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	015a      	lsls	r2, r3, #5
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ee96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee9a:	d11f      	bne.n	800eedc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	015a      	lsls	r2, r3, #5
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	4413      	add	r3, r2
 800eea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	68ba      	ldr	r2, [r7, #8]
 800eeac:	0151      	lsls	r1, r2, #5
 800eeae:	68fa      	ldr	r2, [r7, #12]
 800eeb0:	440a      	add	r2, r1
 800eeb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eeb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eeba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	015a      	lsls	r2, r3, #5
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	4413      	add	r3, r2
 800eec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	68ba      	ldr	r2, [r7, #8]
 800eecc:	0151      	lsls	r1, r2, #5
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	440a      	add	r2, r1
 800eed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eed6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eeda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	f003 030f 	and.w	r3, r3, #15
 800eeec:	2101      	movs	r1, #1
 800eeee:	fa01 f303 	lsl.w	r3, r1, r3
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	43db      	mvns	r3, r3
 800eef6:	68f9      	ldr	r1, [r7, #12]
 800eef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eefc:	4013      	ands	r3, r2
 800eefe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef06:	69da      	ldr	r2, [r3, #28]
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	f003 030f 	and.w	r3, r3, #15
 800ef10:	2101      	movs	r1, #1
 800ef12:	fa01 f303 	lsl.w	r3, r1, r3
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	43db      	mvns	r3, r3
 800ef1a:	68f9      	ldr	r1, [r7, #12]
 800ef1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef20:	4013      	ands	r3, r2
 800ef22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	015a      	lsls	r2, r3, #5
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	4413      	add	r3, r2
 800ef2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef30:	681a      	ldr	r2, [r3, #0]
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	0159      	lsls	r1, r3, #5
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	440b      	add	r3, r1
 800ef3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef3e:	4619      	mov	r1, r3
 800ef40:	4b35      	ldr	r3, [pc, #212]	; (800f018 <USB_DeactivateEndpoint+0x1b0>)
 800ef42:	4013      	ands	r3, r2
 800ef44:	600b      	str	r3, [r1, #0]
 800ef46:	e060      	b.n	800f00a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	015a      	lsls	r2, r3, #5
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	4413      	add	r3, r2
 800ef50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef5e:	d11f      	bne.n	800efa0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	015a      	lsls	r2, r3, #5
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	4413      	add	r3, r2
 800ef68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68ba      	ldr	r2, [r7, #8]
 800ef70:	0151      	lsls	r1, r2, #5
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	440a      	add	r2, r1
 800ef76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ef7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	015a      	lsls	r2, r3, #5
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	4413      	add	r3, r2
 800ef88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	0151      	lsls	r1, r2, #5
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	440a      	add	r2, r1
 800ef96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	f003 030f 	and.w	r3, r3, #15
 800efb0:	2101      	movs	r1, #1
 800efb2:	fa01 f303 	lsl.w	r3, r1, r3
 800efb6:	041b      	lsls	r3, r3, #16
 800efb8:	43db      	mvns	r3, r3
 800efba:	68f9      	ldr	r1, [r7, #12]
 800efbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efc0:	4013      	ands	r3, r2
 800efc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efca:	69da      	ldr	r2, [r3, #28]
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	f003 030f 	and.w	r3, r3, #15
 800efd4:	2101      	movs	r1, #1
 800efd6:	fa01 f303 	lsl.w	r3, r1, r3
 800efda:	041b      	lsls	r3, r3, #16
 800efdc:	43db      	mvns	r3, r3
 800efde:	68f9      	ldr	r1, [r7, #12]
 800efe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efe4:	4013      	ands	r3, r2
 800efe6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	015a      	lsls	r2, r3, #5
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	4413      	add	r3, r2
 800eff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	0159      	lsls	r1, r3, #5
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	440b      	add	r3, r1
 800effe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f002:	4619      	mov	r1, r3
 800f004:	4b05      	ldr	r3, [pc, #20]	; (800f01c <USB_DeactivateEndpoint+0x1b4>)
 800f006:	4013      	ands	r3, r2
 800f008:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f00a:	2300      	movs	r3, #0
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3714      	adds	r7, #20
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr
 800f018:	ec337800 	.word	0xec337800
 800f01c:	eff37800 	.word	0xeff37800

0800f020 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b08a      	sub	sp, #40	; 0x28
 800f024:	af02      	add	r7, sp, #8
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	4613      	mov	r3, r2
 800f02c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	785b      	ldrb	r3, [r3, #1]
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	f040 815c 	bne.w	800f2fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	699b      	ldr	r3, [r3, #24]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d132      	bne.n	800f0b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	015a      	lsls	r2, r3, #5
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	4413      	add	r3, r2
 800f052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f056:	691b      	ldr	r3, [r3, #16]
 800f058:	69ba      	ldr	r2, [r7, #24]
 800f05a:	0151      	lsls	r1, r2, #5
 800f05c:	69fa      	ldr	r2, [r7, #28]
 800f05e:	440a      	add	r2, r1
 800f060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f064:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f068:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f06c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	015a      	lsls	r2, r3, #5
 800f072:	69fb      	ldr	r3, [r7, #28]
 800f074:	4413      	add	r3, r2
 800f076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f07a:	691b      	ldr	r3, [r3, #16]
 800f07c:	69ba      	ldr	r2, [r7, #24]
 800f07e:	0151      	lsls	r1, r2, #5
 800f080:	69fa      	ldr	r2, [r7, #28]
 800f082:	440a      	add	r2, r1
 800f084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f08c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	015a      	lsls	r2, r3, #5
 800f092:	69fb      	ldr	r3, [r7, #28]
 800f094:	4413      	add	r3, r2
 800f096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f09a:	691b      	ldr	r3, [r3, #16]
 800f09c:	69ba      	ldr	r2, [r7, #24]
 800f09e:	0151      	lsls	r1, r2, #5
 800f0a0:	69fa      	ldr	r2, [r7, #28]
 800f0a2:	440a      	add	r2, r1
 800f0a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0a8:	0cdb      	lsrs	r3, r3, #19
 800f0aa:	04db      	lsls	r3, r3, #19
 800f0ac:	6113      	str	r3, [r2, #16]
 800f0ae:	e074      	b.n	800f19a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f0b0:	69bb      	ldr	r3, [r7, #24]
 800f0b2:	015a      	lsls	r2, r3, #5
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0bc:	691b      	ldr	r3, [r3, #16]
 800f0be:	69ba      	ldr	r2, [r7, #24]
 800f0c0:	0151      	lsls	r1, r2, #5
 800f0c2:	69fa      	ldr	r2, [r7, #28]
 800f0c4:	440a      	add	r2, r1
 800f0c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0ca:	0cdb      	lsrs	r3, r3, #19
 800f0cc:	04db      	lsls	r3, r3, #19
 800f0ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	015a      	lsls	r2, r3, #5
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	4413      	add	r3, r2
 800f0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0dc:	691b      	ldr	r3, [r3, #16]
 800f0de:	69ba      	ldr	r2, [r7, #24]
 800f0e0:	0151      	lsls	r1, r2, #5
 800f0e2:	69fa      	ldr	r2, [r7, #28]
 800f0e4:	440a      	add	r2, r1
 800f0e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f0ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f0f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f0f4:	69bb      	ldr	r3, [r7, #24]
 800f0f6:	015a      	lsls	r2, r3, #5
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	4413      	add	r3, r2
 800f0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f100:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	6999      	ldr	r1, [r3, #24]
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	440b      	add	r3, r1
 800f10c:	1e59      	subs	r1, r3, #1
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	68db      	ldr	r3, [r3, #12]
 800f112:	fbb1 f3f3 	udiv	r3, r1, r3
 800f116:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f118:	4b9d      	ldr	r3, [pc, #628]	; (800f390 <USB_EPStartXfer+0x370>)
 800f11a:	400b      	ands	r3, r1
 800f11c:	69b9      	ldr	r1, [r7, #24]
 800f11e:	0148      	lsls	r0, r1, #5
 800f120:	69f9      	ldr	r1, [r7, #28]
 800f122:	4401      	add	r1, r0
 800f124:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f128:	4313      	orrs	r3, r2
 800f12a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	015a      	lsls	r2, r3, #5
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	4413      	add	r3, r2
 800f134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f138:	691a      	ldr	r2, [r3, #16]
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	699b      	ldr	r3, [r3, #24]
 800f13e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f142:	69b9      	ldr	r1, [r7, #24]
 800f144:	0148      	lsls	r0, r1, #5
 800f146:	69f9      	ldr	r1, [r7, #28]
 800f148:	4401      	add	r1, r0
 800f14a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f14e:	4313      	orrs	r3, r2
 800f150:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	791b      	ldrb	r3, [r3, #4]
 800f156:	2b01      	cmp	r3, #1
 800f158:	d11f      	bne.n	800f19a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f15a:	69bb      	ldr	r3, [r7, #24]
 800f15c:	015a      	lsls	r2, r3, #5
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	4413      	add	r3, r2
 800f162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f166:	691b      	ldr	r3, [r3, #16]
 800f168:	69ba      	ldr	r2, [r7, #24]
 800f16a:	0151      	lsls	r1, r2, #5
 800f16c:	69fa      	ldr	r2, [r7, #28]
 800f16e:	440a      	add	r2, r1
 800f170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f174:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f178:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	015a      	lsls	r2, r3, #5
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	4413      	add	r3, r2
 800f182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f186:	691b      	ldr	r3, [r3, #16]
 800f188:	69ba      	ldr	r2, [r7, #24]
 800f18a:	0151      	lsls	r1, r2, #5
 800f18c:	69fa      	ldr	r2, [r7, #28]
 800f18e:	440a      	add	r2, r1
 800f190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f194:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f198:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f19a:	79fb      	ldrb	r3, [r7, #7]
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d14b      	bne.n	800f238 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	695b      	ldr	r3, [r3, #20]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d009      	beq.n	800f1bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f1a8:	69bb      	ldr	r3, [r7, #24]
 800f1aa:	015a      	lsls	r2, r3, #5
 800f1ac:	69fb      	ldr	r3, [r7, #28]
 800f1ae:	4413      	add	r3, r2
 800f1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	695b      	ldr	r3, [r3, #20]
 800f1ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	791b      	ldrb	r3, [r3, #4]
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d128      	bne.n	800f216 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1ca:	689b      	ldr	r3, [r3, #8]
 800f1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d110      	bne.n	800f1f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	015a      	lsls	r2, r3, #5
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	4413      	add	r3, r2
 800f1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	69ba      	ldr	r2, [r7, #24]
 800f1e4:	0151      	lsls	r1, r2, #5
 800f1e6:	69fa      	ldr	r2, [r7, #28]
 800f1e8:	440a      	add	r2, r1
 800f1ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f1f2:	6013      	str	r3, [r2, #0]
 800f1f4:	e00f      	b.n	800f216 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f1f6:	69bb      	ldr	r3, [r7, #24]
 800f1f8:	015a      	lsls	r2, r3, #5
 800f1fa:	69fb      	ldr	r3, [r7, #28]
 800f1fc:	4413      	add	r3, r2
 800f1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	69ba      	ldr	r2, [r7, #24]
 800f206:	0151      	lsls	r1, r2, #5
 800f208:	69fa      	ldr	r2, [r7, #28]
 800f20a:	440a      	add	r2, r1
 800f20c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f214:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	015a      	lsls	r2, r3, #5
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	4413      	add	r3, r2
 800f21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	69ba      	ldr	r2, [r7, #24]
 800f226:	0151      	lsls	r1, r2, #5
 800f228:	69fa      	ldr	r2, [r7, #28]
 800f22a:	440a      	add	r2, r1
 800f22c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f230:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f234:	6013      	str	r3, [r2, #0]
 800f236:	e133      	b.n	800f4a0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	015a      	lsls	r2, r3, #5
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	4413      	add	r3, r2
 800f240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	69ba      	ldr	r2, [r7, #24]
 800f248:	0151      	lsls	r1, r2, #5
 800f24a:	69fa      	ldr	r2, [r7, #28]
 800f24c:	440a      	add	r2, r1
 800f24e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f252:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f256:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	791b      	ldrb	r3, [r3, #4]
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d015      	beq.n	800f28c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	2b00      	cmp	r3, #0
 800f266:	f000 811b 	beq.w	800f4a0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	f003 030f 	and.w	r3, r3, #15
 800f27a:	2101      	movs	r1, #1
 800f27c:	fa01 f303 	lsl.w	r3, r1, r3
 800f280:	69f9      	ldr	r1, [r7, #28]
 800f282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f286:	4313      	orrs	r3, r2
 800f288:	634b      	str	r3, [r1, #52]	; 0x34
 800f28a:	e109      	b.n	800f4a0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f292:	689b      	ldr	r3, [r3, #8]
 800f294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d110      	bne.n	800f2be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	015a      	lsls	r2, r3, #5
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	69ba      	ldr	r2, [r7, #24]
 800f2ac:	0151      	lsls	r1, r2, #5
 800f2ae:	69fa      	ldr	r2, [r7, #28]
 800f2b0:	440a      	add	r2, r1
 800f2b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f2ba:	6013      	str	r3, [r2, #0]
 800f2bc:	e00f      	b.n	800f2de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	015a      	lsls	r2, r3, #5
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	69ba      	ldr	r2, [r7, #24]
 800f2ce:	0151      	lsls	r1, r2, #5
 800f2d0:	69fa      	ldr	r2, [r7, #28]
 800f2d2:	440a      	add	r2, r1
 800f2d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	6919      	ldr	r1, [r3, #16]
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	781a      	ldrb	r2, [r3, #0]
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	699b      	ldr	r3, [r3, #24]
 800f2ea:	b298      	uxth	r0, r3
 800f2ec:	79fb      	ldrb	r3, [r7, #7]
 800f2ee:	9300      	str	r3, [sp, #0]
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	68f8      	ldr	r0, [r7, #12]
 800f2f4:	f000 fade 	bl	800f8b4 <USB_WritePacket>
 800f2f8:	e0d2      	b.n	800f4a0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	015a      	lsls	r2, r3, #5
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	4413      	add	r3, r2
 800f302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f306:	691b      	ldr	r3, [r3, #16]
 800f308:	69ba      	ldr	r2, [r7, #24]
 800f30a:	0151      	lsls	r1, r2, #5
 800f30c:	69fa      	ldr	r2, [r7, #28]
 800f30e:	440a      	add	r2, r1
 800f310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f314:	0cdb      	lsrs	r3, r3, #19
 800f316:	04db      	lsls	r3, r3, #19
 800f318:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	015a      	lsls	r2, r3, #5
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	4413      	add	r3, r2
 800f322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f326:	691b      	ldr	r3, [r3, #16]
 800f328:	69ba      	ldr	r2, [r7, #24]
 800f32a:	0151      	lsls	r1, r2, #5
 800f32c:	69fa      	ldr	r2, [r7, #28]
 800f32e:	440a      	add	r2, r1
 800f330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f334:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f338:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f33c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	699b      	ldr	r3, [r3, #24]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d126      	bne.n	800f394 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	015a      	lsls	r2, r3, #5
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	4413      	add	r3, r2
 800f34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f352:	691a      	ldr	r2, [r3, #16]
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f35c:	69b9      	ldr	r1, [r7, #24]
 800f35e:	0148      	lsls	r0, r1, #5
 800f360:	69f9      	ldr	r1, [r7, #28]
 800f362:	4401      	add	r1, r0
 800f364:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f368:	4313      	orrs	r3, r2
 800f36a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	015a      	lsls	r2, r3, #5
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	4413      	add	r3, r2
 800f374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f378:	691b      	ldr	r3, [r3, #16]
 800f37a:	69ba      	ldr	r2, [r7, #24]
 800f37c:	0151      	lsls	r1, r2, #5
 800f37e:	69fa      	ldr	r2, [r7, #28]
 800f380:	440a      	add	r2, r1
 800f382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f386:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f38a:	6113      	str	r3, [r2, #16]
 800f38c:	e03a      	b.n	800f404 <USB_EPStartXfer+0x3e4>
 800f38e:	bf00      	nop
 800f390:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	699a      	ldr	r2, [r3, #24]
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	4413      	add	r3, r2
 800f39e:	1e5a      	subs	r2, r3, #1
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	68db      	ldr	r3, [r3, #12]
 800f3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3a8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	8afa      	ldrh	r2, [r7, #22]
 800f3b0:	fb03 f202 	mul.w	r2, r3, r2
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	015a      	lsls	r2, r3, #5
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	4413      	add	r3, r2
 800f3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3c4:	691a      	ldr	r2, [r3, #16]
 800f3c6:	8afb      	ldrh	r3, [r7, #22]
 800f3c8:	04d9      	lsls	r1, r3, #19
 800f3ca:	4b38      	ldr	r3, [pc, #224]	; (800f4ac <USB_EPStartXfer+0x48c>)
 800f3cc:	400b      	ands	r3, r1
 800f3ce:	69b9      	ldr	r1, [r7, #24]
 800f3d0:	0148      	lsls	r0, r1, #5
 800f3d2:	69f9      	ldr	r1, [r7, #28]
 800f3d4:	4401      	add	r1, r0
 800f3d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f3da:	4313      	orrs	r3, r2
 800f3dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f3de:	69bb      	ldr	r3, [r7, #24]
 800f3e0:	015a      	lsls	r2, r3, #5
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ea:	691a      	ldr	r2, [r3, #16]
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	69db      	ldr	r3, [r3, #28]
 800f3f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f3f4:	69b9      	ldr	r1, [r7, #24]
 800f3f6:	0148      	lsls	r0, r1, #5
 800f3f8:	69f9      	ldr	r1, [r7, #28]
 800f3fa:	4401      	add	r1, r0
 800f3fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f400:	4313      	orrs	r3, r2
 800f402:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f404:	79fb      	ldrb	r3, [r7, #7]
 800f406:	2b01      	cmp	r3, #1
 800f408:	d10d      	bne.n	800f426 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	691b      	ldr	r3, [r3, #16]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d009      	beq.n	800f426 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	6919      	ldr	r1, [r3, #16]
 800f416:	69bb      	ldr	r3, [r7, #24]
 800f418:	015a      	lsls	r2, r3, #5
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	4413      	add	r3, r2
 800f41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f422:	460a      	mov	r2, r1
 800f424:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	791b      	ldrb	r3, [r3, #4]
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	d128      	bne.n	800f480 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f434:	689b      	ldr	r3, [r3, #8]
 800f436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d110      	bne.n	800f460 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	015a      	lsls	r2, r3, #5
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	4413      	add	r3, r2
 800f446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	69ba      	ldr	r2, [r7, #24]
 800f44e:	0151      	lsls	r1, r2, #5
 800f450:	69fa      	ldr	r2, [r7, #28]
 800f452:	440a      	add	r2, r1
 800f454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f458:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f45c:	6013      	str	r3, [r2, #0]
 800f45e:	e00f      	b.n	800f480 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f460:	69bb      	ldr	r3, [r7, #24]
 800f462:	015a      	lsls	r2, r3, #5
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	4413      	add	r3, r2
 800f468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	69ba      	ldr	r2, [r7, #24]
 800f470:	0151      	lsls	r1, r2, #5
 800f472:	69fa      	ldr	r2, [r7, #28]
 800f474:	440a      	add	r2, r1
 800f476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f47a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f47e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	015a      	lsls	r2, r3, #5
 800f484:	69fb      	ldr	r3, [r7, #28]
 800f486:	4413      	add	r3, r2
 800f488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	69ba      	ldr	r2, [r7, #24]
 800f490:	0151      	lsls	r1, r2, #5
 800f492:	69fa      	ldr	r2, [r7, #28]
 800f494:	440a      	add	r2, r1
 800f496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f49a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f49e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f4a0:	2300      	movs	r3, #0
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3720      	adds	r7, #32
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	1ff80000 	.word	0x1ff80000

0800f4b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b087      	sub	sp, #28
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	4613      	mov	r3, r2
 800f4bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	785b      	ldrb	r3, [r3, #1]
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	f040 80ce 	bne.w	800f66e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	699b      	ldr	r3, [r3, #24]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d132      	bne.n	800f540 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	015a      	lsls	r2, r3, #5
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4e6:	691b      	ldr	r3, [r3, #16]
 800f4e8:	693a      	ldr	r2, [r7, #16]
 800f4ea:	0151      	lsls	r1, r2, #5
 800f4ec:	697a      	ldr	r2, [r7, #20]
 800f4ee:	440a      	add	r2, r1
 800f4f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f4f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f4fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	015a      	lsls	r2, r3, #5
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	4413      	add	r3, r2
 800f506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f50a:	691b      	ldr	r3, [r3, #16]
 800f50c:	693a      	ldr	r2, [r7, #16]
 800f50e:	0151      	lsls	r1, r2, #5
 800f510:	697a      	ldr	r2, [r7, #20]
 800f512:	440a      	add	r2, r1
 800f514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f51c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	015a      	lsls	r2, r3, #5
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	4413      	add	r3, r2
 800f526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	693a      	ldr	r2, [r7, #16]
 800f52e:	0151      	lsls	r1, r2, #5
 800f530:	697a      	ldr	r2, [r7, #20]
 800f532:	440a      	add	r2, r1
 800f534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f538:	0cdb      	lsrs	r3, r3, #19
 800f53a:	04db      	lsls	r3, r3, #19
 800f53c:	6113      	str	r3, [r2, #16]
 800f53e:	e04e      	b.n	800f5de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	015a      	lsls	r2, r3, #5
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	4413      	add	r3, r2
 800f548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f54c:	691b      	ldr	r3, [r3, #16]
 800f54e:	693a      	ldr	r2, [r7, #16]
 800f550:	0151      	lsls	r1, r2, #5
 800f552:	697a      	ldr	r2, [r7, #20]
 800f554:	440a      	add	r2, r1
 800f556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f55a:	0cdb      	lsrs	r3, r3, #19
 800f55c:	04db      	lsls	r3, r3, #19
 800f55e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	015a      	lsls	r2, r3, #5
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	4413      	add	r3, r2
 800f568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f56c:	691b      	ldr	r3, [r3, #16]
 800f56e:	693a      	ldr	r2, [r7, #16]
 800f570:	0151      	lsls	r1, r2, #5
 800f572:	697a      	ldr	r2, [r7, #20]
 800f574:	440a      	add	r2, r1
 800f576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f57a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f57e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f582:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	699a      	ldr	r2, [r3, #24]
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d903      	bls.n	800f598 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	68da      	ldr	r2, [r3, #12]
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	015a      	lsls	r2, r3, #5
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	4413      	add	r3, r2
 800f5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5a4:	691b      	ldr	r3, [r3, #16]
 800f5a6:	693a      	ldr	r2, [r7, #16]
 800f5a8:	0151      	lsls	r1, r2, #5
 800f5aa:	697a      	ldr	r2, [r7, #20]
 800f5ac:	440a      	add	r2, r1
 800f5ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f5b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	015a      	lsls	r2, r3, #5
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	4413      	add	r3, r2
 800f5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5c4:	691a      	ldr	r2, [r3, #16]
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	699b      	ldr	r3, [r3, #24]
 800f5ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f5ce:	6939      	ldr	r1, [r7, #16]
 800f5d0:	0148      	lsls	r0, r1, #5
 800f5d2:	6979      	ldr	r1, [r7, #20]
 800f5d4:	4401      	add	r1, r0
 800f5d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f5de:	79fb      	ldrb	r3, [r7, #7]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d11e      	bne.n	800f622 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	695b      	ldr	r3, [r3, #20]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d009      	beq.n	800f600 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	015a      	lsls	r2, r3, #5
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	4413      	add	r3, r2
 800f5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	695b      	ldr	r3, [r3, #20]
 800f5fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	015a      	lsls	r2, r3, #5
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	4413      	add	r3, r2
 800f608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	693a      	ldr	r2, [r7, #16]
 800f610:	0151      	lsls	r1, r2, #5
 800f612:	697a      	ldr	r2, [r7, #20]
 800f614:	440a      	add	r2, r1
 800f616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f61a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f61e:	6013      	str	r3, [r2, #0]
 800f620:	e097      	b.n	800f752 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	015a      	lsls	r2, r3, #5
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	4413      	add	r3, r2
 800f62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	693a      	ldr	r2, [r7, #16]
 800f632:	0151      	lsls	r1, r2, #5
 800f634:	697a      	ldr	r2, [r7, #20]
 800f636:	440a      	add	r2, r1
 800f638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f63c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f640:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	699b      	ldr	r3, [r3, #24]
 800f646:	2b00      	cmp	r3, #0
 800f648:	f000 8083 	beq.w	800f752 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	f003 030f 	and.w	r3, r3, #15
 800f65c:	2101      	movs	r1, #1
 800f65e:	fa01 f303 	lsl.w	r3, r1, r3
 800f662:	6979      	ldr	r1, [r7, #20]
 800f664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f668:	4313      	orrs	r3, r2
 800f66a:	634b      	str	r3, [r1, #52]	; 0x34
 800f66c:	e071      	b.n	800f752 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	015a      	lsls	r2, r3, #5
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	4413      	add	r3, r2
 800f676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f67a:	691b      	ldr	r3, [r3, #16]
 800f67c:	693a      	ldr	r2, [r7, #16]
 800f67e:	0151      	lsls	r1, r2, #5
 800f680:	697a      	ldr	r2, [r7, #20]
 800f682:	440a      	add	r2, r1
 800f684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f688:	0cdb      	lsrs	r3, r3, #19
 800f68a:	04db      	lsls	r3, r3, #19
 800f68c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	015a      	lsls	r2, r3, #5
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	4413      	add	r3, r2
 800f696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f69a:	691b      	ldr	r3, [r3, #16]
 800f69c:	693a      	ldr	r2, [r7, #16]
 800f69e:	0151      	lsls	r1, r2, #5
 800f6a0:	697a      	ldr	r2, [r7, #20]
 800f6a2:	440a      	add	r2, r1
 800f6a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f6ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f6b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	699b      	ldr	r3, [r3, #24]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d003      	beq.n	800f6c2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	68da      	ldr	r2, [r3, #12]
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	68da      	ldr	r2, [r3, #12]
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	015a      	lsls	r2, r3, #5
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6d6:	691b      	ldr	r3, [r3, #16]
 800f6d8:	693a      	ldr	r2, [r7, #16]
 800f6da:	0151      	lsls	r1, r2, #5
 800f6dc:	697a      	ldr	r2, [r7, #20]
 800f6de:	440a      	add	r2, r1
 800f6e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f6e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	015a      	lsls	r2, r3, #5
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6f6:	691a      	ldr	r2, [r3, #16]
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	69db      	ldr	r3, [r3, #28]
 800f6fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f700:	6939      	ldr	r1, [r7, #16]
 800f702:	0148      	lsls	r0, r1, #5
 800f704:	6979      	ldr	r1, [r7, #20]
 800f706:	4401      	add	r1, r0
 800f708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f70c:	4313      	orrs	r3, r2
 800f70e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f710:	79fb      	ldrb	r3, [r7, #7]
 800f712:	2b01      	cmp	r3, #1
 800f714:	d10d      	bne.n	800f732 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	691b      	ldr	r3, [r3, #16]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d009      	beq.n	800f732 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	6919      	ldr	r1, [r3, #16]
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	015a      	lsls	r2, r3, #5
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	4413      	add	r3, r2
 800f72a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f72e:	460a      	mov	r2, r1
 800f730:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	015a      	lsls	r2, r3, #5
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	4413      	add	r3, r2
 800f73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	693a      	ldr	r2, [r7, #16]
 800f742:	0151      	lsls	r1, r2, #5
 800f744:	697a      	ldr	r2, [r7, #20]
 800f746:	440a      	add	r2, r1
 800f748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f74c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f750:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f752:	2300      	movs	r3, #0
}
 800f754:	4618      	mov	r0, r3
 800f756:	371c      	adds	r7, #28
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr

0800f760 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f760:	b480      	push	{r7}
 800f762:	b087      	sub	sp, #28
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f76a:	2300      	movs	r3, #0
 800f76c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f76e:	2300      	movs	r3, #0
 800f770:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	785b      	ldrb	r3, [r3, #1]
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	d14a      	bne.n	800f814 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	015a      	lsls	r2, r3, #5
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	4413      	add	r3, r2
 800f788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f796:	f040 8086 	bne.w	800f8a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	015a      	lsls	r2, r3, #5
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	683a      	ldr	r2, [r7, #0]
 800f7ac:	7812      	ldrb	r2, [r2, #0]
 800f7ae:	0151      	lsls	r1, r2, #5
 800f7b0:	693a      	ldr	r2, [r7, #16]
 800f7b2:	440a      	add	r2, r1
 800f7b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f7bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	015a      	lsls	r2, r3, #5
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	683a      	ldr	r2, [r7, #0]
 800f7d0:	7812      	ldrb	r2, [r2, #0]
 800f7d2:	0151      	lsls	r1, r2, #5
 800f7d4:	693a      	ldr	r2, [r7, #16]
 800f7d6:	440a      	add	r2, r1
 800f7d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f7e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f242 7210 	movw	r2, #10000	; 0x2710
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d902      	bls.n	800f7f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	75fb      	strb	r3, [r7, #23]
          break;
 800f7f6:	e056      	b.n	800f8a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	015a      	lsls	r2, r3, #5
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	4413      	add	r3, r2
 800f802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f80c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f810:	d0e7      	beq.n	800f7e2 <USB_EPStopXfer+0x82>
 800f812:	e048      	b.n	800f8a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	015a      	lsls	r2, r3, #5
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	4413      	add	r3, r2
 800f81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f82c:	d13b      	bne.n	800f8a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	015a      	lsls	r2, r3, #5
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	4413      	add	r3, r2
 800f838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	683a      	ldr	r2, [r7, #0]
 800f840:	7812      	ldrb	r2, [r2, #0]
 800f842:	0151      	lsls	r1, r2, #5
 800f844:	693a      	ldr	r2, [r7, #16]
 800f846:	440a      	add	r2, r1
 800f848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f84c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f850:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	015a      	lsls	r2, r3, #5
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	4413      	add	r3, r2
 800f85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	7812      	ldrb	r2, [r2, #0]
 800f866:	0151      	lsls	r1, r2, #5
 800f868:	693a      	ldr	r2, [r7, #16]
 800f86a:	440a      	add	r2, r1
 800f86c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f874:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	3301      	adds	r3, #1
 800f87a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f242 7210 	movw	r2, #10000	; 0x2710
 800f882:	4293      	cmp	r3, r2
 800f884:	d902      	bls.n	800f88c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f886:	2301      	movs	r3, #1
 800f888:	75fb      	strb	r3, [r7, #23]
          break;
 800f88a:	e00c      	b.n	800f8a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	015a      	lsls	r2, r3, #5
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	4413      	add	r3, r2
 800f896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f8a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f8a4:	d0e7      	beq.n	800f876 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f8a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	371c      	adds	r7, #28
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b2:	4770      	bx	lr

0800f8b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b089      	sub	sp, #36	; 0x24
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	60f8      	str	r0, [r7, #12]
 800f8bc:	60b9      	str	r1, [r7, #8]
 800f8be:	4611      	mov	r1, r2
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	460b      	mov	r3, r1
 800f8c4:	71fb      	strb	r3, [r7, #7]
 800f8c6:	4613      	mov	r3, r2
 800f8c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f8d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d123      	bne.n	800f922 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f8da:	88bb      	ldrh	r3, [r7, #4]
 800f8dc:	3303      	adds	r3, #3
 800f8de:	089b      	lsrs	r3, r3, #2
 800f8e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	61bb      	str	r3, [r7, #24]
 800f8e6:	e018      	b.n	800f91a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f8e8:	79fb      	ldrb	r3, [r7, #7]
 800f8ea:	031a      	lsls	r2, r3, #12
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	3301      	adds	r3, #1
 800f900:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	3301      	adds	r3, #1
 800f906:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f908:	69fb      	ldr	r3, [r7, #28]
 800f90a:	3301      	adds	r3, #1
 800f90c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	3301      	adds	r3, #1
 800f912:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f914:	69bb      	ldr	r3, [r7, #24]
 800f916:	3301      	adds	r3, #1
 800f918:	61bb      	str	r3, [r7, #24]
 800f91a:	69ba      	ldr	r2, [r7, #24]
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d3e2      	bcc.n	800f8e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f922:	2300      	movs	r3, #0
}
 800f924:	4618      	mov	r0, r3
 800f926:	3724      	adds	r7, #36	; 0x24
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr

0800f930 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f930:	b480      	push	{r7}
 800f932:	b08b      	sub	sp, #44	; 0x2c
 800f934:	af00      	add	r7, sp, #0
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	4613      	mov	r3, r2
 800f93c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f946:	88fb      	ldrh	r3, [r7, #6]
 800f948:	089b      	lsrs	r3, r3, #2
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f94e:	88fb      	ldrh	r3, [r7, #6]
 800f950:	f003 0303 	and.w	r3, r3, #3
 800f954:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f956:	2300      	movs	r3, #0
 800f958:	623b      	str	r3, [r7, #32]
 800f95a:	e014      	b.n	800f986 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f95c:	69bb      	ldr	r3, [r7, #24]
 800f95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f966:	601a      	str	r2, [r3, #0]
    pDest++;
 800f968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96a:	3301      	adds	r3, #1
 800f96c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f970:	3301      	adds	r3, #1
 800f972:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f976:	3301      	adds	r3, #1
 800f978:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97c:	3301      	adds	r3, #1
 800f97e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f980:	6a3b      	ldr	r3, [r7, #32]
 800f982:	3301      	adds	r3, #1
 800f984:	623b      	str	r3, [r7, #32]
 800f986:	6a3a      	ldr	r2, [r7, #32]
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d3e6      	bcc.n	800f95c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f98e:	8bfb      	ldrh	r3, [r7, #30]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d01e      	beq.n	800f9d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f994:	2300      	movs	r3, #0
 800f996:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f998:	69bb      	ldr	r3, [r7, #24]
 800f99a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f99e:	461a      	mov	r2, r3
 800f9a0:	f107 0310 	add.w	r3, r7, #16
 800f9a4:	6812      	ldr	r2, [r2, #0]
 800f9a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f9a8:	693a      	ldr	r2, [r7, #16]
 800f9aa:	6a3b      	ldr	r3, [r7, #32]
 800f9ac:	b2db      	uxtb	r3, r3
 800f9ae:	00db      	lsls	r3, r3, #3
 800f9b0:	fa22 f303 	lsr.w	r3, r2, r3
 800f9b4:	b2da      	uxtb	r2, r3
 800f9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b8:	701a      	strb	r2, [r3, #0]
      i++;
 800f9ba:	6a3b      	ldr	r3, [r7, #32]
 800f9bc:	3301      	adds	r3, #1
 800f9be:	623b      	str	r3, [r7, #32]
      pDest++;
 800f9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f9c6:	8bfb      	ldrh	r3, [r7, #30]
 800f9c8:	3b01      	subs	r3, #1
 800f9ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f9cc:	8bfb      	ldrh	r3, [r7, #30]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1ea      	bne.n	800f9a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	372c      	adds	r7, #44	; 0x2c
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr

0800f9e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b085      	sub	sp, #20
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	785b      	ldrb	r3, [r3, #1]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d12c      	bne.n	800fa56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	015a      	lsls	r2, r3, #5
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	4413      	add	r3, r2
 800fa04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	db12      	blt.n	800fa34 <USB_EPSetStall+0x54>
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d00f      	beq.n	800fa34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	015a      	lsls	r2, r3, #5
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	4413      	add	r3, r2
 800fa1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	68ba      	ldr	r2, [r7, #8]
 800fa24:	0151      	lsls	r1, r2, #5
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	440a      	add	r2, r1
 800fa2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fa32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	015a      	lsls	r2, r3, #5
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	68ba      	ldr	r2, [r7, #8]
 800fa44:	0151      	lsls	r1, r2, #5
 800fa46:	68fa      	ldr	r2, [r7, #12]
 800fa48:	440a      	add	r2, r1
 800fa4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fa52:	6013      	str	r3, [r2, #0]
 800fa54:	e02b      	b.n	800faae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	015a      	lsls	r2, r3, #5
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	4413      	add	r3, r2
 800fa5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	db12      	blt.n	800fa8e <USB_EPSetStall+0xae>
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d00f      	beq.n	800fa8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	015a      	lsls	r2, r3, #5
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	4413      	add	r3, r2
 800fa76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	0151      	lsls	r1, r2, #5
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	440a      	add	r2, r1
 800fa84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fa8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	015a      	lsls	r2, r3, #5
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	4413      	add	r3, r2
 800fa96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	68ba      	ldr	r2, [r7, #8]
 800fa9e:	0151      	lsls	r1, r2, #5
 800faa0:	68fa      	ldr	r2, [r7, #12]
 800faa2:	440a      	add	r2, r1
 800faa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800faa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800faac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800faae:	2300      	movs	r3, #0
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3714      	adds	r7, #20
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr

0800fabc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b085      	sub	sp, #20
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	785b      	ldrb	r3, [r3, #1]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d128      	bne.n	800fb2a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	015a      	lsls	r2, r3, #5
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	4413      	add	r3, r2
 800fae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	68ba      	ldr	r2, [r7, #8]
 800fae8:	0151      	lsls	r1, r2, #5
 800faea:	68fa      	ldr	r2, [r7, #12]
 800faec:	440a      	add	r2, r1
 800faee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800faf6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	791b      	ldrb	r3, [r3, #4]
 800fafc:	2b03      	cmp	r3, #3
 800fafe:	d003      	beq.n	800fb08 <USB_EPClearStall+0x4c>
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	791b      	ldrb	r3, [r3, #4]
 800fb04:	2b02      	cmp	r3, #2
 800fb06:	d138      	bne.n	800fb7a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	015a      	lsls	r2, r3, #5
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	4413      	add	r3, r2
 800fb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	68ba      	ldr	r2, [r7, #8]
 800fb18:	0151      	lsls	r1, r2, #5
 800fb1a:	68fa      	ldr	r2, [r7, #12]
 800fb1c:	440a      	add	r2, r1
 800fb1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb26:	6013      	str	r3, [r2, #0]
 800fb28:	e027      	b.n	800fb7a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	015a      	lsls	r2, r3, #5
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	4413      	add	r3, r2
 800fb32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68ba      	ldr	r2, [r7, #8]
 800fb3a:	0151      	lsls	r1, r2, #5
 800fb3c:	68fa      	ldr	r2, [r7, #12]
 800fb3e:	440a      	add	r2, r1
 800fb40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	791b      	ldrb	r3, [r3, #4]
 800fb4e:	2b03      	cmp	r3, #3
 800fb50:	d003      	beq.n	800fb5a <USB_EPClearStall+0x9e>
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	791b      	ldrb	r3, [r3, #4]
 800fb56:	2b02      	cmp	r3, #2
 800fb58:	d10f      	bne.n	800fb7a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	015a      	lsls	r2, r3, #5
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	4413      	add	r3, r2
 800fb62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	68ba      	ldr	r2, [r7, #8]
 800fb6a:	0151      	lsls	r1, r2, #5
 800fb6c:	68fa      	ldr	r2, [r7, #12]
 800fb6e:	440a      	add	r2, r1
 800fb70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb78:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fb7a:	2300      	movs	r3, #0
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3714      	adds	r7, #20
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	460b      	mov	r3, r1
 800fb92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fba6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fbaa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	78fb      	ldrb	r3, [r7, #3]
 800fbb6:	011b      	lsls	r3, r3, #4
 800fbb8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fbbc:	68f9      	ldr	r1, [r7, #12]
 800fbbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fbc6:	2300      	movs	r3, #0
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3714      	adds	r7, #20
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr

0800fbd4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b085      	sub	sp, #20
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	68fa      	ldr	r2, [r7, #12]
 800fbea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fbee:	f023 0303 	bic.w	r3, r3, #3
 800fbf2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	68fa      	ldr	r2, [r7, #12]
 800fbfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc02:	f023 0302 	bic.w	r3, r3, #2
 800fc06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fc08:	2300      	movs	r3, #0
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3714      	adds	r7, #20
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr

0800fc16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fc16:	b480      	push	{r7}
 800fc18:	b085      	sub	sp, #20
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	68fa      	ldr	r2, [r7, #12]
 800fc2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fc30:	f023 0303 	bic.w	r3, r3, #3
 800fc34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc44:	f043 0302 	orr.w	r3, r3, #2
 800fc48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fc4a:	2300      	movs	r3, #0
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3714      	adds	r7, #20
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr

0800fc58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b085      	sub	sp, #20
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	695b      	ldr	r3, [r3, #20]
 800fc64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	699b      	ldr	r3, [r3, #24]
 800fc6a:	68fa      	ldr	r2, [r7, #12]
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fc70:	68fb      	ldr	r3, [r7, #12]
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	3714      	adds	r7, #20
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr

0800fc7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fc7e:	b480      	push	{r7}
 800fc80:	b085      	sub	sp, #20
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc90:	699b      	ldr	r3, [r3, #24]
 800fc92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc9a:	69db      	ldr	r3, [r3, #28]
 800fc9c:	68ba      	ldr	r2, [r7, #8]
 800fc9e:	4013      	ands	r3, r2
 800fca0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	0c1b      	lsrs	r3, r3, #16
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3714      	adds	r7, #20
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr

0800fcb2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fcb2:	b480      	push	{r7}
 800fcb4:	b085      	sub	sp, #20
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcc4:	699b      	ldr	r3, [r3, #24]
 800fcc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcce:	69db      	ldr	r3, [r3, #28]
 800fcd0:	68ba      	ldr	r2, [r7, #8]
 800fcd2:	4013      	ands	r3, r2
 800fcd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	b29b      	uxth	r3, r3
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3714      	adds	r7, #20
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr

0800fce6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fce6:	b480      	push	{r7}
 800fce8:	b085      	sub	sp, #20
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
 800fcee:	460b      	mov	r3, r1
 800fcf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fcf6:	78fb      	ldrb	r3, [r7, #3]
 800fcf8:	015a      	lsls	r2, r3, #5
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd0c:	695b      	ldr	r3, [r3, #20]
 800fd0e:	68ba      	ldr	r2, [r7, #8]
 800fd10:	4013      	ands	r3, r2
 800fd12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fd14:	68bb      	ldr	r3, [r7, #8]
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3714      	adds	r7, #20
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr

0800fd22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fd22:	b480      	push	{r7}
 800fd24:	b087      	sub	sp, #28
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
 800fd2a:	460b      	mov	r3, r1
 800fd2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd38:	691b      	ldr	r3, [r3, #16]
 800fd3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fd46:	78fb      	ldrb	r3, [r7, #3]
 800fd48:	f003 030f 	and.w	r3, r3, #15
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	fa22 f303 	lsr.w	r3, r2, r3
 800fd52:	01db      	lsls	r3, r3, #7
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	693a      	ldr	r2, [r7, #16]
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fd5c:	78fb      	ldrb	r3, [r7, #3]
 800fd5e:	015a      	lsls	r2, r3, #5
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	4413      	add	r3, r2
 800fd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd68:	689b      	ldr	r3, [r3, #8]
 800fd6a:	693a      	ldr	r2, [r7, #16]
 800fd6c:	4013      	ands	r3, r2
 800fd6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fd70:	68bb      	ldr	r3, [r7, #8]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	371c      	adds	r7, #28
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr

0800fd7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fd7e:	b480      	push	{r7}
 800fd80:	b083      	sub	sp, #12
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	695b      	ldr	r3, [r3, #20]
 800fd8a:	f003 0301 	and.w	r3, r3, #1
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	370c      	adds	r7, #12
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr

0800fd9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fd9a:	b480      	push	{r7}
 800fd9c:	b085      	sub	sp, #20
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	68fa      	ldr	r2, [r7, #12]
 800fdb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdb4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fdb8:	f023 0307 	bic.w	r3, r3, #7
 800fdbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	68fa      	ldr	r2, [r7, #12]
 800fdc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fdcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fdd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fdd2:	2300      	movs	r3, #0
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3714      	adds	r7, #20
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b087      	sub	sp, #28
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	460b      	mov	r3, r1
 800fdea:	607a      	str	r2, [r7, #4]
 800fdec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	333c      	adds	r3, #60	; 0x3c
 800fdf6:	3304      	adds	r3, #4
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	4a26      	ldr	r2, [pc, #152]	; (800fe98 <USB_EP0_OutStart+0xb8>)
 800fe00:	4293      	cmp	r3, r2
 800fe02:	d90a      	bls.n	800fe1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe14:	d101      	bne.n	800fe1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fe16:	2300      	movs	r3, #0
 800fe18:	e037      	b.n	800fe8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe20:	461a      	mov	r2, r3
 800fe22:	2300      	movs	r3, #0
 800fe24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe2c:	691b      	ldr	r3, [r3, #16]
 800fe2e:	697a      	ldr	r2, [r7, #20]
 800fe30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe40:	691b      	ldr	r3, [r3, #16]
 800fe42:	697a      	ldr	r2, [r7, #20]
 800fe44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe48:	f043 0318 	orr.w	r3, r3, #24
 800fe4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe54:	691b      	ldr	r3, [r3, #16]
 800fe56:	697a      	ldr	r2, [r7, #20]
 800fe58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fe60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fe62:	7afb      	ldrb	r3, [r7, #11]
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d10f      	bne.n	800fe88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe6e:	461a      	mov	r2, r3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	697a      	ldr	r2, [r7, #20]
 800fe7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fe86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fe88:	2300      	movs	r3, #0
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	371c      	adds	r7, #28
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr
 800fe96:	bf00      	nop
 800fe98:	4f54300a 	.word	0x4f54300a

0800fe9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b085      	sub	sp, #20
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fea4:	2300      	movs	r3, #0
 800fea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	3301      	adds	r3, #1
 800feac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	4a13      	ldr	r2, [pc, #76]	; (800ff00 <USB_CoreReset+0x64>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d901      	bls.n	800feba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800feb6:	2303      	movs	r3, #3
 800feb8:	e01b      	b.n	800fef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	691b      	ldr	r3, [r3, #16]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	daf2      	bge.n	800fea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fec2:	2300      	movs	r3, #0
 800fec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	691b      	ldr	r3, [r3, #16]
 800feca:	f043 0201 	orr.w	r2, r3, #1
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	3301      	adds	r3, #1
 800fed6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	4a09      	ldr	r2, [pc, #36]	; (800ff00 <USB_CoreReset+0x64>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d901      	bls.n	800fee4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fee0:	2303      	movs	r3, #3
 800fee2:	e006      	b.n	800fef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	691b      	ldr	r3, [r3, #16]
 800fee8:	f003 0301 	and.w	r3, r3, #1
 800feec:	2b01      	cmp	r3, #1
 800feee:	d0f0      	beq.n	800fed2 <USB_CoreReset+0x36>

  return HAL_OK;
 800fef0:	2300      	movs	r3, #0
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3714      	adds	r7, #20
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop
 800ff00:	00030d40 	.word	0x00030d40

0800ff04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ff10:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ff14:	f002 fefa 	bl	8012d0c <USBD_static_malloc>
 800ff18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d109      	bne.n	800ff34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	32b0      	adds	r2, #176	; 0xb0
 800ff2a:	2100      	movs	r1, #0
 800ff2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ff30:	2302      	movs	r3, #2
 800ff32:	e0d4      	b.n	80100de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ff34:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ff38:	2100      	movs	r1, #0
 800ff3a:	68f8      	ldr	r0, [r7, #12]
 800ff3c:	f003 f932 	bl	80131a4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	32b0      	adds	r2, #176	; 0xb0
 800ff4a:	68f9      	ldr	r1, [r7, #12]
 800ff4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	32b0      	adds	r2, #176	; 0xb0
 800ff5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	7c1b      	ldrb	r3, [r3, #16]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d138      	bne.n	800ffde <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ff6c:	4b5e      	ldr	r3, [pc, #376]	; (80100e8 <USBD_CDC_Init+0x1e4>)
 800ff6e:	7819      	ldrb	r1, [r3, #0]
 800ff70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff74:	2202      	movs	r2, #2
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f002 fda5 	bl	8012ac6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ff7c:	4b5a      	ldr	r3, [pc, #360]	; (80100e8 <USBD_CDC_Init+0x1e4>)
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	f003 020f 	and.w	r2, r3, #15
 800ff84:	6879      	ldr	r1, [r7, #4]
 800ff86:	4613      	mov	r3, r2
 800ff88:	009b      	lsls	r3, r3, #2
 800ff8a:	4413      	add	r3, r2
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	440b      	add	r3, r1
 800ff90:	3324      	adds	r3, #36	; 0x24
 800ff92:	2201      	movs	r2, #1
 800ff94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ff96:	4b55      	ldr	r3, [pc, #340]	; (80100ec <USBD_CDC_Init+0x1e8>)
 800ff98:	7819      	ldrb	r1, [r3, #0]
 800ff9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff9e:	2202      	movs	r2, #2
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f002 fd90 	bl	8012ac6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ffa6:	4b51      	ldr	r3, [pc, #324]	; (80100ec <USBD_CDC_Init+0x1e8>)
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	f003 020f 	and.w	r2, r3, #15
 800ffae:	6879      	ldr	r1, [r7, #4]
 800ffb0:	4613      	mov	r3, r2
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	4413      	add	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	440b      	add	r3, r1
 800ffba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ffc2:	4b4b      	ldr	r3, [pc, #300]	; (80100f0 <USBD_CDC_Init+0x1ec>)
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	f003 020f 	and.w	r2, r3, #15
 800ffca:	6879      	ldr	r1, [r7, #4]
 800ffcc:	4613      	mov	r3, r2
 800ffce:	009b      	lsls	r3, r3, #2
 800ffd0:	4413      	add	r3, r2
 800ffd2:	009b      	lsls	r3, r3, #2
 800ffd4:	440b      	add	r3, r1
 800ffd6:	3326      	adds	r3, #38	; 0x26
 800ffd8:	2210      	movs	r2, #16
 800ffda:	801a      	strh	r2, [r3, #0]
 800ffdc:	e035      	b.n	801004a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ffde:	4b42      	ldr	r3, [pc, #264]	; (80100e8 <USBD_CDC_Init+0x1e4>)
 800ffe0:	7819      	ldrb	r1, [r3, #0]
 800ffe2:	2340      	movs	r3, #64	; 0x40
 800ffe4:	2202      	movs	r2, #2
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f002 fd6d 	bl	8012ac6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ffec:	4b3e      	ldr	r3, [pc, #248]	; (80100e8 <USBD_CDC_Init+0x1e4>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	f003 020f 	and.w	r2, r3, #15
 800fff4:	6879      	ldr	r1, [r7, #4]
 800fff6:	4613      	mov	r3, r2
 800fff8:	009b      	lsls	r3, r3, #2
 800fffa:	4413      	add	r3, r2
 800fffc:	009b      	lsls	r3, r3, #2
 800fffe:	440b      	add	r3, r1
 8010000:	3324      	adds	r3, #36	; 0x24
 8010002:	2201      	movs	r2, #1
 8010004:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010006:	4b39      	ldr	r3, [pc, #228]	; (80100ec <USBD_CDC_Init+0x1e8>)
 8010008:	7819      	ldrb	r1, [r3, #0]
 801000a:	2340      	movs	r3, #64	; 0x40
 801000c:	2202      	movs	r2, #2
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f002 fd59 	bl	8012ac6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010014:	4b35      	ldr	r3, [pc, #212]	; (80100ec <USBD_CDC_Init+0x1e8>)
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	f003 020f 	and.w	r2, r3, #15
 801001c:	6879      	ldr	r1, [r7, #4]
 801001e:	4613      	mov	r3, r2
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	4413      	add	r3, r2
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	440b      	add	r3, r1
 8010028:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801002c:	2201      	movs	r2, #1
 801002e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010030:	4b2f      	ldr	r3, [pc, #188]	; (80100f0 <USBD_CDC_Init+0x1ec>)
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	f003 020f 	and.w	r2, r3, #15
 8010038:	6879      	ldr	r1, [r7, #4]
 801003a:	4613      	mov	r3, r2
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	4413      	add	r3, r2
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	440b      	add	r3, r1
 8010044:	3326      	adds	r3, #38	; 0x26
 8010046:	2210      	movs	r2, #16
 8010048:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801004a:	4b29      	ldr	r3, [pc, #164]	; (80100f0 <USBD_CDC_Init+0x1ec>)
 801004c:	7819      	ldrb	r1, [r3, #0]
 801004e:	2308      	movs	r3, #8
 8010050:	2203      	movs	r2, #3
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f002 fd37 	bl	8012ac6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010058:	4b25      	ldr	r3, [pc, #148]	; (80100f0 <USBD_CDC_Init+0x1ec>)
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	f003 020f 	and.w	r2, r3, #15
 8010060:	6879      	ldr	r1, [r7, #4]
 8010062:	4613      	mov	r3, r2
 8010064:	009b      	lsls	r3, r3, #2
 8010066:	4413      	add	r3, r2
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	440b      	add	r3, r1
 801006c:	3324      	adds	r3, #36	; 0x24
 801006e:	2201      	movs	r2, #1
 8010070:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2200      	movs	r2, #0
 8010076:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	33b0      	adds	r3, #176	; 0xb0
 8010084:	009b      	lsls	r3, r3, #2
 8010086:	4413      	add	r3, r2
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2200      	movs	r2, #0
 8010092:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2200      	movs	r2, #0
 801009a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d101      	bne.n	80100ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80100a8:	2302      	movs	r3, #2
 80100aa:	e018      	b.n	80100de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	7c1b      	ldrb	r3, [r3, #16]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d10a      	bne.n	80100ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80100b4:	4b0d      	ldr	r3, [pc, #52]	; (80100ec <USBD_CDC_Init+0x1e8>)
 80100b6:	7819      	ldrb	r1, [r3, #0]
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80100be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f002 fdee 	bl	8012ca4 <USBD_LL_PrepareReceive>
 80100c8:	e008      	b.n	80100dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80100ca:	4b08      	ldr	r3, [pc, #32]	; (80100ec <USBD_CDC_Init+0x1e8>)
 80100cc:	7819      	ldrb	r1, [r3, #0]
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80100d4:	2340      	movs	r3, #64	; 0x40
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f002 fde4 	bl	8012ca4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80100dc:	2300      	movs	r3, #0
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3710      	adds	r7, #16
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	200001cb 	.word	0x200001cb
 80100ec:	200001cc 	.word	0x200001cc
 80100f0:	200001cd 	.word	0x200001cd

080100f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	460b      	mov	r3, r1
 80100fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010100:	4b3a      	ldr	r3, [pc, #232]	; (80101ec <USBD_CDC_DeInit+0xf8>)
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	4619      	mov	r1, r3
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f002 fd03 	bl	8012b12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801010c:	4b37      	ldr	r3, [pc, #220]	; (80101ec <USBD_CDC_DeInit+0xf8>)
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	f003 020f 	and.w	r2, r3, #15
 8010114:	6879      	ldr	r1, [r7, #4]
 8010116:	4613      	mov	r3, r2
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	4413      	add	r3, r2
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	440b      	add	r3, r1
 8010120:	3324      	adds	r3, #36	; 0x24
 8010122:	2200      	movs	r2, #0
 8010124:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010126:	4b32      	ldr	r3, [pc, #200]	; (80101f0 <USBD_CDC_DeInit+0xfc>)
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	4619      	mov	r1, r3
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f002 fcf0 	bl	8012b12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010132:	4b2f      	ldr	r3, [pc, #188]	; (80101f0 <USBD_CDC_DeInit+0xfc>)
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	f003 020f 	and.w	r2, r3, #15
 801013a:	6879      	ldr	r1, [r7, #4]
 801013c:	4613      	mov	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	4413      	add	r3, r2
 8010142:	009b      	lsls	r3, r3, #2
 8010144:	440b      	add	r3, r1
 8010146:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801014a:	2200      	movs	r2, #0
 801014c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801014e:	4b29      	ldr	r3, [pc, #164]	; (80101f4 <USBD_CDC_DeInit+0x100>)
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	4619      	mov	r1, r3
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f002 fcdc 	bl	8012b12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801015a:	4b26      	ldr	r3, [pc, #152]	; (80101f4 <USBD_CDC_DeInit+0x100>)
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	f003 020f 	and.w	r2, r3, #15
 8010162:	6879      	ldr	r1, [r7, #4]
 8010164:	4613      	mov	r3, r2
 8010166:	009b      	lsls	r3, r3, #2
 8010168:	4413      	add	r3, r2
 801016a:	009b      	lsls	r3, r3, #2
 801016c:	440b      	add	r3, r1
 801016e:	3324      	adds	r3, #36	; 0x24
 8010170:	2200      	movs	r2, #0
 8010172:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010174:	4b1f      	ldr	r3, [pc, #124]	; (80101f4 <USBD_CDC_DeInit+0x100>)
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	f003 020f 	and.w	r2, r3, #15
 801017c:	6879      	ldr	r1, [r7, #4]
 801017e:	4613      	mov	r3, r2
 8010180:	009b      	lsls	r3, r3, #2
 8010182:	4413      	add	r3, r2
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	440b      	add	r3, r1
 8010188:	3326      	adds	r3, #38	; 0x26
 801018a:	2200      	movs	r2, #0
 801018c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	32b0      	adds	r2, #176	; 0xb0
 8010198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d01f      	beq.n	80101e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	33b0      	adds	r3, #176	; 0xb0
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	4413      	add	r3, r2
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	32b0      	adds	r2, #176	; 0xb0
 80101be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101c2:	4618      	mov	r0, r3
 80101c4:	f002 fdb0 	bl	8012d28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	32b0      	adds	r2, #176	; 0xb0
 80101d2:	2100      	movs	r1, #0
 80101d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2200      	movs	r2, #0
 80101dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80101e0:	2300      	movs	r3, #0
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3708      	adds	r7, #8
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	200001cb 	.word	0x200001cb
 80101f0:	200001cc 	.word	0x200001cc
 80101f4:	200001cd 	.word	0x200001cd

080101f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b086      	sub	sp, #24
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	32b0      	adds	r2, #176	; 0xb0
 801020c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010210:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010212:	2300      	movs	r3, #0
 8010214:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010216:	2300      	movs	r3, #0
 8010218:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801021a:	2300      	movs	r3, #0
 801021c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d101      	bne.n	8010228 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010224:	2303      	movs	r3, #3
 8010226:	e0bf      	b.n	80103a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010230:	2b00      	cmp	r3, #0
 8010232:	d050      	beq.n	80102d6 <USBD_CDC_Setup+0xde>
 8010234:	2b20      	cmp	r3, #32
 8010236:	f040 80af 	bne.w	8010398 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	88db      	ldrh	r3, [r3, #6]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d03a      	beq.n	80102b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	b25b      	sxtb	r3, r3
 8010248:	2b00      	cmp	r3, #0
 801024a:	da1b      	bge.n	8010284 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	33b0      	adds	r3, #176	; 0xb0
 8010256:	009b      	lsls	r3, r3, #2
 8010258:	4413      	add	r3, r2
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	689b      	ldr	r3, [r3, #8]
 801025e:	683a      	ldr	r2, [r7, #0]
 8010260:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010262:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010264:	683a      	ldr	r2, [r7, #0]
 8010266:	88d2      	ldrh	r2, [r2, #6]
 8010268:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	88db      	ldrh	r3, [r3, #6]
 801026e:	2b07      	cmp	r3, #7
 8010270:	bf28      	it	cs
 8010272:	2307      	movcs	r3, #7
 8010274:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	89fa      	ldrh	r2, [r7, #14]
 801027a:	4619      	mov	r1, r3
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f001 fd89 	bl	8011d94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010282:	e090      	b.n	80103a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	785a      	ldrb	r2, [r3, #1]
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	88db      	ldrh	r3, [r3, #6]
 8010292:	2b3f      	cmp	r3, #63	; 0x3f
 8010294:	d803      	bhi.n	801029e <USBD_CDC_Setup+0xa6>
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	88db      	ldrh	r3, [r3, #6]
 801029a:	b2da      	uxtb	r2, r3
 801029c:	e000      	b.n	80102a0 <USBD_CDC_Setup+0xa8>
 801029e:	2240      	movs	r2, #64	; 0x40
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80102a6:	6939      	ldr	r1, [r7, #16]
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80102ae:	461a      	mov	r2, r3
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f001 fd9b 	bl	8011dec <USBD_CtlPrepareRx>
      break;
 80102b6:	e076      	b.n	80103a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	33b0      	adds	r3, #176	; 0xb0
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4413      	add	r3, r2
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	689b      	ldr	r3, [r3, #8]
 80102ca:	683a      	ldr	r2, [r7, #0]
 80102cc:	7850      	ldrb	r0, [r2, #1]
 80102ce:	2200      	movs	r2, #0
 80102d0:	6839      	ldr	r1, [r7, #0]
 80102d2:	4798      	blx	r3
      break;
 80102d4:	e067      	b.n	80103a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	785b      	ldrb	r3, [r3, #1]
 80102da:	2b0b      	cmp	r3, #11
 80102dc:	d851      	bhi.n	8010382 <USBD_CDC_Setup+0x18a>
 80102de:	a201      	add	r2, pc, #4	; (adr r2, 80102e4 <USBD_CDC_Setup+0xec>)
 80102e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102e4:	08010315 	.word	0x08010315
 80102e8:	08010391 	.word	0x08010391
 80102ec:	08010383 	.word	0x08010383
 80102f0:	08010383 	.word	0x08010383
 80102f4:	08010383 	.word	0x08010383
 80102f8:	08010383 	.word	0x08010383
 80102fc:	08010383 	.word	0x08010383
 8010300:	08010383 	.word	0x08010383
 8010304:	08010383 	.word	0x08010383
 8010308:	08010383 	.word	0x08010383
 801030c:	0801033f 	.word	0x0801033f
 8010310:	08010369 	.word	0x08010369
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801031a:	b2db      	uxtb	r3, r3
 801031c:	2b03      	cmp	r3, #3
 801031e:	d107      	bne.n	8010330 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010320:	f107 030a 	add.w	r3, r7, #10
 8010324:	2202      	movs	r2, #2
 8010326:	4619      	mov	r1, r3
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f001 fd33 	bl	8011d94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801032e:	e032      	b.n	8010396 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010330:	6839      	ldr	r1, [r7, #0]
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f001 fcbd 	bl	8011cb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8010338:	2303      	movs	r3, #3
 801033a:	75fb      	strb	r3, [r7, #23]
          break;
 801033c:	e02b      	b.n	8010396 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010344:	b2db      	uxtb	r3, r3
 8010346:	2b03      	cmp	r3, #3
 8010348:	d107      	bne.n	801035a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801034a:	f107 030d 	add.w	r3, r7, #13
 801034e:	2201      	movs	r2, #1
 8010350:	4619      	mov	r1, r3
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f001 fd1e 	bl	8011d94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010358:	e01d      	b.n	8010396 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801035a:	6839      	ldr	r1, [r7, #0]
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f001 fca8 	bl	8011cb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8010362:	2303      	movs	r3, #3
 8010364:	75fb      	strb	r3, [r7, #23]
          break;
 8010366:	e016      	b.n	8010396 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801036e:	b2db      	uxtb	r3, r3
 8010370:	2b03      	cmp	r3, #3
 8010372:	d00f      	beq.n	8010394 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010374:	6839      	ldr	r1, [r7, #0]
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f001 fc9b 	bl	8011cb2 <USBD_CtlError>
            ret = USBD_FAIL;
 801037c:	2303      	movs	r3, #3
 801037e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010380:	e008      	b.n	8010394 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010382:	6839      	ldr	r1, [r7, #0]
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f001 fc94 	bl	8011cb2 <USBD_CtlError>
          ret = USBD_FAIL;
 801038a:	2303      	movs	r3, #3
 801038c:	75fb      	strb	r3, [r7, #23]
          break;
 801038e:	e002      	b.n	8010396 <USBD_CDC_Setup+0x19e>
          break;
 8010390:	bf00      	nop
 8010392:	e008      	b.n	80103a6 <USBD_CDC_Setup+0x1ae>
          break;
 8010394:	bf00      	nop
      }
      break;
 8010396:	e006      	b.n	80103a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010398:	6839      	ldr	r1, [r7, #0]
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f001 fc89 	bl	8011cb2 <USBD_CtlError>
      ret = USBD_FAIL;
 80103a0:	2303      	movs	r3, #3
 80103a2:	75fb      	strb	r3, [r7, #23]
      break;
 80103a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80103a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3718      	adds	r7, #24
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}

080103b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b084      	sub	sp, #16
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	460b      	mov	r3, r1
 80103ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80103c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	32b0      	adds	r2, #176	; 0xb0
 80103ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d101      	bne.n	80103da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80103d6:	2303      	movs	r3, #3
 80103d8:	e065      	b.n	80104a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	32b0      	adds	r2, #176	; 0xb0
 80103e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80103ea:	78fb      	ldrb	r3, [r7, #3]
 80103ec:	f003 020f 	and.w	r2, r3, #15
 80103f0:	6879      	ldr	r1, [r7, #4]
 80103f2:	4613      	mov	r3, r2
 80103f4:	009b      	lsls	r3, r3, #2
 80103f6:	4413      	add	r3, r2
 80103f8:	009b      	lsls	r3, r3, #2
 80103fa:	440b      	add	r3, r1
 80103fc:	3318      	adds	r3, #24
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d02f      	beq.n	8010464 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010404:	78fb      	ldrb	r3, [r7, #3]
 8010406:	f003 020f 	and.w	r2, r3, #15
 801040a:	6879      	ldr	r1, [r7, #4]
 801040c:	4613      	mov	r3, r2
 801040e:	009b      	lsls	r3, r3, #2
 8010410:	4413      	add	r3, r2
 8010412:	009b      	lsls	r3, r3, #2
 8010414:	440b      	add	r3, r1
 8010416:	3318      	adds	r3, #24
 8010418:	681a      	ldr	r2, [r3, #0]
 801041a:	78fb      	ldrb	r3, [r7, #3]
 801041c:	f003 010f 	and.w	r1, r3, #15
 8010420:	68f8      	ldr	r0, [r7, #12]
 8010422:	460b      	mov	r3, r1
 8010424:	00db      	lsls	r3, r3, #3
 8010426:	440b      	add	r3, r1
 8010428:	009b      	lsls	r3, r3, #2
 801042a:	4403      	add	r3, r0
 801042c:	3348      	adds	r3, #72	; 0x48
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	fbb2 f1f3 	udiv	r1, r2, r3
 8010434:	fb01 f303 	mul.w	r3, r1, r3
 8010438:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801043a:	2b00      	cmp	r3, #0
 801043c:	d112      	bne.n	8010464 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801043e:	78fb      	ldrb	r3, [r7, #3]
 8010440:	f003 020f 	and.w	r2, r3, #15
 8010444:	6879      	ldr	r1, [r7, #4]
 8010446:	4613      	mov	r3, r2
 8010448:	009b      	lsls	r3, r3, #2
 801044a:	4413      	add	r3, r2
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	440b      	add	r3, r1
 8010450:	3318      	adds	r3, #24
 8010452:	2200      	movs	r2, #0
 8010454:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010456:	78f9      	ldrb	r1, [r7, #3]
 8010458:	2300      	movs	r3, #0
 801045a:	2200      	movs	r2, #0
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f002 fc00 	bl	8012c62 <USBD_LL_Transmit>
 8010462:	e01f      	b.n	80104a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	2200      	movs	r2, #0
 8010468:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	33b0      	adds	r3, #176	; 0xb0
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	4413      	add	r3, r2
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	691b      	ldr	r3, [r3, #16]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d010      	beq.n	80104a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	33b0      	adds	r3, #176	; 0xb0
 801048c:	009b      	lsls	r3, r3, #2
 801048e:	4413      	add	r3, r2
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	691b      	ldr	r3, [r3, #16]
 8010494:	68ba      	ldr	r2, [r7, #8]
 8010496:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801049a:	68ba      	ldr	r2, [r7, #8]
 801049c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80104a0:	78fa      	ldrb	r2, [r7, #3]
 80104a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80104a4:	2300      	movs	r3, #0
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3710      	adds	r7, #16
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80104ae:	b580      	push	{r7, lr}
 80104b0:	b084      	sub	sp, #16
 80104b2:	af00      	add	r7, sp, #0
 80104b4:	6078      	str	r0, [r7, #4]
 80104b6:	460b      	mov	r3, r1
 80104b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	32b0      	adds	r2, #176	; 0xb0
 80104c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	32b0      	adds	r2, #176	; 0xb0
 80104d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d101      	bne.n	80104e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80104dc:	2303      	movs	r3, #3
 80104de:	e01a      	b.n	8010516 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80104e0:	78fb      	ldrb	r3, [r7, #3]
 80104e2:	4619      	mov	r1, r3
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f002 fbfe 	bl	8012ce6 <USBD_LL_GetRxDataSize>
 80104ea:	4602      	mov	r2, r0
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	33b0      	adds	r3, #176	; 0xb0
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	4413      	add	r3, r2
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	68fa      	ldr	r2, [r7, #12]
 8010506:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801050a:	68fa      	ldr	r2, [r7, #12]
 801050c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010510:	4611      	mov	r1, r2
 8010512:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010514:	2300      	movs	r3, #0
}
 8010516:	4618      	mov	r0, r3
 8010518:	3710      	adds	r7, #16
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}

0801051e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801051e:	b580      	push	{r7, lr}
 8010520:	b084      	sub	sp, #16
 8010522:	af00      	add	r7, sp, #0
 8010524:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	32b0      	adds	r2, #176	; 0xb0
 8010530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010534:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d101      	bne.n	8010540 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801053c:	2303      	movs	r3, #3
 801053e:	e025      	b.n	801058c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	33b0      	adds	r3, #176	; 0xb0
 801054a:	009b      	lsls	r3, r3, #2
 801054c:	4413      	add	r3, r2
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d01a      	beq.n	801058a <USBD_CDC_EP0_RxReady+0x6c>
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801055a:	2bff      	cmp	r3, #255	; 0xff
 801055c:	d015      	beq.n	801058a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	33b0      	adds	r3, #176	; 0xb0
 8010568:	009b      	lsls	r3, r3, #2
 801056a:	4413      	add	r3, r2
 801056c:	685b      	ldr	r3, [r3, #4]
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	68fa      	ldr	r2, [r7, #12]
 8010572:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8010576:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010578:	68fa      	ldr	r2, [r7, #12]
 801057a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801057e:	b292      	uxth	r2, r2
 8010580:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	22ff      	movs	r2, #255	; 0xff
 8010586:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801058a:	2300      	movs	r3, #0
}
 801058c:	4618      	mov	r0, r3
 801058e:	3710      	adds	r7, #16
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b086      	sub	sp, #24
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801059c:	2182      	movs	r1, #130	; 0x82
 801059e:	4818      	ldr	r0, [pc, #96]	; (8010600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80105a0:	f000 fd4f 	bl	8011042 <USBD_GetEpDesc>
 80105a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80105a6:	2101      	movs	r1, #1
 80105a8:	4815      	ldr	r0, [pc, #84]	; (8010600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80105aa:	f000 fd4a 	bl	8011042 <USBD_GetEpDesc>
 80105ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80105b0:	2181      	movs	r1, #129	; 0x81
 80105b2:	4813      	ldr	r0, [pc, #76]	; (8010600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80105b4:	f000 fd45 	bl	8011042 <USBD_GetEpDesc>
 80105b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d002      	beq.n	80105c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	2210      	movs	r2, #16
 80105c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d006      	beq.n	80105da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	2200      	movs	r2, #0
 80105d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80105d4:	711a      	strb	r2, [r3, #4]
 80105d6:	2200      	movs	r2, #0
 80105d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d006      	beq.n	80105ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2200      	movs	r2, #0
 80105e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80105e8:	711a      	strb	r2, [r3, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2243      	movs	r2, #67	; 0x43
 80105f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80105f4:	4b02      	ldr	r3, [pc, #8]	; (8010600 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3718      	adds	r7, #24
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	20000188 	.word	0x20000188

08010604 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b086      	sub	sp, #24
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801060c:	2182      	movs	r1, #130	; 0x82
 801060e:	4818      	ldr	r0, [pc, #96]	; (8010670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010610:	f000 fd17 	bl	8011042 <USBD_GetEpDesc>
 8010614:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010616:	2101      	movs	r1, #1
 8010618:	4815      	ldr	r0, [pc, #84]	; (8010670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801061a:	f000 fd12 	bl	8011042 <USBD_GetEpDesc>
 801061e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010620:	2181      	movs	r1, #129	; 0x81
 8010622:	4813      	ldr	r0, [pc, #76]	; (8010670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010624:	f000 fd0d 	bl	8011042 <USBD_GetEpDesc>
 8010628:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d002      	beq.n	8010636 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	2210      	movs	r2, #16
 8010634:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d006      	beq.n	801064a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	2200      	movs	r2, #0
 8010640:	711a      	strb	r2, [r3, #4]
 8010642:	2200      	movs	r2, #0
 8010644:	f042 0202 	orr.w	r2, r2, #2
 8010648:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d006      	beq.n	801065e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2200      	movs	r2, #0
 8010654:	711a      	strb	r2, [r3, #4]
 8010656:	2200      	movs	r2, #0
 8010658:	f042 0202 	orr.w	r2, r2, #2
 801065c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2243      	movs	r2, #67	; 0x43
 8010662:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010664:	4b02      	ldr	r3, [pc, #8]	; (8010670 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010666:	4618      	mov	r0, r3
 8010668:	3718      	adds	r7, #24
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	20000188 	.word	0x20000188

08010674 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b086      	sub	sp, #24
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801067c:	2182      	movs	r1, #130	; 0x82
 801067e:	4818      	ldr	r0, [pc, #96]	; (80106e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010680:	f000 fcdf 	bl	8011042 <USBD_GetEpDesc>
 8010684:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010686:	2101      	movs	r1, #1
 8010688:	4815      	ldr	r0, [pc, #84]	; (80106e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801068a:	f000 fcda 	bl	8011042 <USBD_GetEpDesc>
 801068e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010690:	2181      	movs	r1, #129	; 0x81
 8010692:	4813      	ldr	r0, [pc, #76]	; (80106e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010694:	f000 fcd5 	bl	8011042 <USBD_GetEpDesc>
 8010698:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d002      	beq.n	80106a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	2210      	movs	r2, #16
 80106a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d006      	beq.n	80106ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	2200      	movs	r2, #0
 80106b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80106b4:	711a      	strb	r2, [r3, #4]
 80106b6:	2200      	movs	r2, #0
 80106b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d006      	beq.n	80106ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	2200      	movs	r2, #0
 80106c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80106c8:	711a      	strb	r2, [r3, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2243      	movs	r2, #67	; 0x43
 80106d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80106d4:	4b02      	ldr	r3, [pc, #8]	; (80106e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3718      	adds	r7, #24
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	20000188 	.word	0x20000188

080106e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	220a      	movs	r2, #10
 80106f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80106f2:	4b03      	ldr	r3, [pc, #12]	; (8010700 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr
 8010700:	20000144 	.word	0x20000144

08010704 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d101      	bne.n	8010718 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010714:	2303      	movs	r3, #3
 8010716:	e009      	b.n	801072c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	33b0      	adds	r3, #176	; 0xb0
 8010722:	009b      	lsls	r3, r3, #2
 8010724:	4413      	add	r3, r2
 8010726:	683a      	ldr	r2, [r7, #0]
 8010728:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801072a:	2300      	movs	r3, #0
}
 801072c:	4618      	mov	r0, r3
 801072e:	370c      	adds	r7, #12
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr

08010738 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010738:	b480      	push	{r7}
 801073a:	b087      	sub	sp, #28
 801073c:	af00      	add	r7, sp, #0
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	32b0      	adds	r2, #176	; 0xb0
 801074e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010752:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d101      	bne.n	801075e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801075a:	2303      	movs	r3, #3
 801075c:	e008      	b.n	8010770 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	68ba      	ldr	r2, [r7, #8]
 8010762:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801076e:	2300      	movs	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	371c      	adds	r7, #28
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr

0801077c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801077c:	b480      	push	{r7}
 801077e:	b085      	sub	sp, #20
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	32b0      	adds	r2, #176	; 0xb0
 8010790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010794:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d101      	bne.n	80107a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801079c:	2303      	movs	r3, #3
 801079e:	e004      	b.n	80107aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	683a      	ldr	r2, [r7, #0]
 80107a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80107a8:	2300      	movs	r3, #0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3714      	adds	r7, #20
 80107ae:	46bd      	mov	sp, r7
 80107b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b4:	4770      	bx	lr
	...

080107b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b084      	sub	sp, #16
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	32b0      	adds	r2, #176	; 0xb0
 80107ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80107d0:	2301      	movs	r3, #1
 80107d2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	32b0      	adds	r2, #176	; 0xb0
 80107de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d101      	bne.n	80107ea <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80107e6:	2303      	movs	r3, #3
 80107e8:	e025      	b.n	8010836 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d11f      	bne.n	8010834 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	2201      	movs	r2, #1
 80107f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80107fc:	4b10      	ldr	r3, [pc, #64]	; (8010840 <USBD_CDC_TransmitPacket+0x88>)
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	f003 020f 	and.w	r2, r3, #15
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	4613      	mov	r3, r2
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	4413      	add	r3, r2
 8010812:	009b      	lsls	r3, r3, #2
 8010814:	4403      	add	r3, r0
 8010816:	3318      	adds	r3, #24
 8010818:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801081a:	4b09      	ldr	r3, [pc, #36]	; (8010840 <USBD_CDC_TransmitPacket+0x88>)
 801081c:	7819      	ldrb	r1, [r3, #0]
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f002 fa19 	bl	8012c62 <USBD_LL_Transmit>

    ret = USBD_OK;
 8010830:	2300      	movs	r3, #0
 8010832:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010834:	7bfb      	ldrb	r3, [r7, #15]
}
 8010836:	4618      	mov	r0, r3
 8010838:	3710      	adds	r7, #16
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	200001cb 	.word	0x200001cb

08010844 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b084      	sub	sp, #16
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	32b0      	adds	r2, #176	; 0xb0
 8010856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801085a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	32b0      	adds	r2, #176	; 0xb0
 8010866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d101      	bne.n	8010872 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801086e:	2303      	movs	r3, #3
 8010870:	e018      	b.n	80108a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	7c1b      	ldrb	r3, [r3, #16]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d10a      	bne.n	8010890 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801087a:	4b0c      	ldr	r3, [pc, #48]	; (80108ac <USBD_CDC_ReceivePacket+0x68>)
 801087c:	7819      	ldrb	r1, [r3, #0]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f002 fa0b 	bl	8012ca4 <USBD_LL_PrepareReceive>
 801088e:	e008      	b.n	80108a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010890:	4b06      	ldr	r3, [pc, #24]	; (80108ac <USBD_CDC_ReceivePacket+0x68>)
 8010892:	7819      	ldrb	r1, [r3, #0]
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801089a:	2340      	movs	r3, #64	; 0x40
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f002 fa01 	bl	8012ca4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80108a2:	2300      	movs	r3, #0
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3710      	adds	r7, #16
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	200001cc 	.word	0x200001cc

080108b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b086      	sub	sp, #24
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	60b9      	str	r1, [r7, #8]
 80108ba:	4613      	mov	r3, r2
 80108bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d101      	bne.n	80108c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80108c4:	2303      	movs	r3, #3
 80108c6:	e01f      	b.n	8010908 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2200      	movs	r2, #0
 80108cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2200      	movs	r2, #0
 80108d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	2200      	movs	r2, #0
 80108dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d003      	beq.n	80108ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	68ba      	ldr	r2, [r7, #8]
 80108ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2201      	movs	r2, #1
 80108f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	79fa      	ldrb	r2, [r7, #7]
 80108fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80108fc:	68f8      	ldr	r0, [r7, #12]
 80108fe:	f002 f831 	bl	8012964 <USBD_LL_Init>
 8010902:	4603      	mov	r3, r0
 8010904:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010906:	7dfb      	ldrb	r3, [r7, #23]
}
 8010908:	4618      	mov	r0, r3
 801090a:	3718      	adds	r7, #24
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}

08010910 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b084      	sub	sp, #16
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801091a:	2300      	movs	r3, #0
 801091c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d101      	bne.n	8010928 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010924:	2303      	movs	r3, #3
 8010926:	e025      	b.n	8010974 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	683a      	ldr	r2, [r7, #0]
 801092c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	32ae      	adds	r2, #174	; 0xae
 801093a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801093e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010940:	2b00      	cmp	r3, #0
 8010942:	d00f      	beq.n	8010964 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	32ae      	adds	r2, #174	; 0xae
 801094e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010954:	f107 020e 	add.w	r2, r7, #14
 8010958:	4610      	mov	r0, r2
 801095a:	4798      	blx	r3
 801095c:	4602      	mov	r2, r0
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801096a:	1c5a      	adds	r2, r3, #1
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	3710      	adds	r7, #16
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b082      	sub	sp, #8
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f002 f883 	bl	8012a90 <USBD_LL_Start>
 801098a:	4603      	mov	r3, r0
}
 801098c:	4618      	mov	r0, r3
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}

08010994 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010994:	b480      	push	{r7}
 8010996:	b083      	sub	sp, #12
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801099c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801099e:	4618      	mov	r0, r3
 80109a0:	370c      	adds	r7, #12
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr

080109aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b084      	sub	sp, #16
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	6078      	str	r0, [r7, #4]
 80109b2:	460b      	mov	r3, r1
 80109b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80109b6:	2300      	movs	r3, #0
 80109b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d009      	beq.n	80109d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	78fa      	ldrb	r2, [r7, #3]
 80109ce:	4611      	mov	r1, r2
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	4798      	blx	r3
 80109d4:	4603      	mov	r3, r0
 80109d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80109d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}

080109e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b084      	sub	sp, #16
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
 80109ea:	460b      	mov	r3, r1
 80109ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80109ee:	2300      	movs	r3, #0
 80109f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	78fa      	ldrb	r2, [r7, #3]
 80109fc:	4611      	mov	r1, r2
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	4798      	blx	r3
 8010a02:	4603      	mov	r3, r0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d001      	beq.n	8010a0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010a08:	2303      	movs	r3, #3
 8010a0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3710      	adds	r7, #16
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}

08010a16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010a16:	b580      	push	{r7, lr}
 8010a18:	b084      	sub	sp, #16
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	6078      	str	r0, [r7, #4]
 8010a1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010a26:	6839      	ldr	r1, [r7, #0]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f001 f908 	bl	8011c3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2201      	movs	r2, #1
 8010a32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010a4a:	f003 031f 	and.w	r3, r3, #31
 8010a4e:	2b02      	cmp	r3, #2
 8010a50:	d01a      	beq.n	8010a88 <USBD_LL_SetupStage+0x72>
 8010a52:	2b02      	cmp	r3, #2
 8010a54:	d822      	bhi.n	8010a9c <USBD_LL_SetupStage+0x86>
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d002      	beq.n	8010a60 <USBD_LL_SetupStage+0x4a>
 8010a5a:	2b01      	cmp	r3, #1
 8010a5c:	d00a      	beq.n	8010a74 <USBD_LL_SetupStage+0x5e>
 8010a5e:	e01d      	b.n	8010a9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010a66:	4619      	mov	r1, r3
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f000 fb5f 	bl	801112c <USBD_StdDevReq>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	73fb      	strb	r3, [r7, #15]
      break;
 8010a72:	e020      	b.n	8010ab6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 fbc7 	bl	8011210 <USBD_StdItfReq>
 8010a82:	4603      	mov	r3, r0
 8010a84:	73fb      	strb	r3, [r7, #15]
      break;
 8010a86:	e016      	b.n	8010ab6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010a8e:	4619      	mov	r1, r3
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f000 fc29 	bl	80112e8 <USBD_StdEPReq>
 8010a96:	4603      	mov	r3, r0
 8010a98:	73fb      	strb	r3, [r7, #15]
      break;
 8010a9a:	e00c      	b.n	8010ab6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010aa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f002 f850 	bl	8012b50 <USBD_LL_StallEP>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8010ab4:	bf00      	nop
  }

  return ret;
 8010ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3710      	adds	r7, #16
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}

08010ac0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b086      	sub	sp, #24
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	60f8      	str	r0, [r7, #12]
 8010ac8:	460b      	mov	r3, r1
 8010aca:	607a      	str	r2, [r7, #4]
 8010acc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010ad2:	7afb      	ldrb	r3, [r7, #11]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d16e      	bne.n	8010bb6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010ade:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010ae6:	2b03      	cmp	r3, #3
 8010ae8:	f040 8098 	bne.w	8010c1c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	689a      	ldr	r2, [r3, #8]
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d913      	bls.n	8010b20 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	689a      	ldr	r2, [r3, #8]
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	68db      	ldr	r3, [r3, #12]
 8010b00:	1ad2      	subs	r2, r2, r3
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	68da      	ldr	r2, [r3, #12]
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	689b      	ldr	r3, [r3, #8]
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	bf28      	it	cs
 8010b12:	4613      	movcs	r3, r2
 8010b14:	461a      	mov	r2, r3
 8010b16:	6879      	ldr	r1, [r7, #4]
 8010b18:	68f8      	ldr	r0, [r7, #12]
 8010b1a:	f001 f984 	bl	8011e26 <USBD_CtlContinueRx>
 8010b1e:	e07d      	b.n	8010c1c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010b26:	f003 031f 	and.w	r3, r3, #31
 8010b2a:	2b02      	cmp	r3, #2
 8010b2c:	d014      	beq.n	8010b58 <USBD_LL_DataOutStage+0x98>
 8010b2e:	2b02      	cmp	r3, #2
 8010b30:	d81d      	bhi.n	8010b6e <USBD_LL_DataOutStage+0xae>
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d002      	beq.n	8010b3c <USBD_LL_DataOutStage+0x7c>
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d003      	beq.n	8010b42 <USBD_LL_DataOutStage+0x82>
 8010b3a:	e018      	b.n	8010b6e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	75bb      	strb	r3, [r7, #22]
            break;
 8010b40:	e018      	b.n	8010b74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8010b48:	b2db      	uxtb	r3, r3
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	68f8      	ldr	r0, [r7, #12]
 8010b4e:	f000 fa5e 	bl	801100e <USBD_CoreFindIF>
 8010b52:	4603      	mov	r3, r0
 8010b54:	75bb      	strb	r3, [r7, #22]
            break;
 8010b56:	e00d      	b.n	8010b74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	4619      	mov	r1, r3
 8010b62:	68f8      	ldr	r0, [r7, #12]
 8010b64:	f000 fa60 	bl	8011028 <USBD_CoreFindEP>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	75bb      	strb	r3, [r7, #22]
            break;
 8010b6c:	e002      	b.n	8010b74 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	75bb      	strb	r3, [r7, #22]
            break;
 8010b72:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010b74:	7dbb      	ldrb	r3, [r7, #22]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d119      	bne.n	8010bae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b80:	b2db      	uxtb	r3, r3
 8010b82:	2b03      	cmp	r3, #3
 8010b84:	d113      	bne.n	8010bae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010b86:	7dba      	ldrb	r2, [r7, #22]
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	32ae      	adds	r2, #174	; 0xae
 8010b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b90:	691b      	ldr	r3, [r3, #16]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d00b      	beq.n	8010bae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010b96:	7dba      	ldrb	r2, [r7, #22]
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010b9e:	7dba      	ldrb	r2, [r7, #22]
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	32ae      	adds	r2, #174	; 0xae
 8010ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ba8:	691b      	ldr	r3, [r3, #16]
 8010baa:	68f8      	ldr	r0, [r7, #12]
 8010bac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010bae:	68f8      	ldr	r0, [r7, #12]
 8010bb0:	f001 f94a 	bl	8011e48 <USBD_CtlSendStatus>
 8010bb4:	e032      	b.n	8010c1c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010bb6:	7afb      	ldrb	r3, [r7, #11]
 8010bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	68f8      	ldr	r0, [r7, #12]
 8010bc2:	f000 fa31 	bl	8011028 <USBD_CoreFindEP>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010bca:	7dbb      	ldrb	r3, [r7, #22]
 8010bcc:	2bff      	cmp	r3, #255	; 0xff
 8010bce:	d025      	beq.n	8010c1c <USBD_LL_DataOutStage+0x15c>
 8010bd0:	7dbb      	ldrb	r3, [r7, #22]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d122      	bne.n	8010c1c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	2b03      	cmp	r3, #3
 8010be0:	d117      	bne.n	8010c12 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010be2:	7dba      	ldrb	r2, [r7, #22]
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	32ae      	adds	r2, #174	; 0xae
 8010be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bec:	699b      	ldr	r3, [r3, #24]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d00f      	beq.n	8010c12 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010bf2:	7dba      	ldrb	r2, [r7, #22]
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010bfa:	7dba      	ldrb	r2, [r7, #22]
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	32ae      	adds	r2, #174	; 0xae
 8010c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c04:	699b      	ldr	r3, [r3, #24]
 8010c06:	7afa      	ldrb	r2, [r7, #11]
 8010c08:	4611      	mov	r1, r2
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	4798      	blx	r3
 8010c0e:	4603      	mov	r3, r0
 8010c10:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010c12:	7dfb      	ldrb	r3, [r7, #23]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d001      	beq.n	8010c1c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010c18:	7dfb      	ldrb	r3, [r7, #23]
 8010c1a:	e000      	b.n	8010c1e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010c1c:	2300      	movs	r3, #0
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3718      	adds	r7, #24
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}

08010c26 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b086      	sub	sp, #24
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	60f8      	str	r0, [r7, #12]
 8010c2e:	460b      	mov	r3, r1
 8010c30:	607a      	str	r2, [r7, #4]
 8010c32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010c34:	7afb      	ldrb	r3, [r7, #11]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d16f      	bne.n	8010d1a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	3314      	adds	r3, #20
 8010c3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010c46:	2b02      	cmp	r3, #2
 8010c48:	d15a      	bne.n	8010d00 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	689a      	ldr	r2, [r3, #8]
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d914      	bls.n	8010c80 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	689a      	ldr	r2, [r3, #8]
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	1ad2      	subs	r2, r2, r3
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	689b      	ldr	r3, [r3, #8]
 8010c68:	461a      	mov	r2, r3
 8010c6a:	6879      	ldr	r1, [r7, #4]
 8010c6c:	68f8      	ldr	r0, [r7, #12]
 8010c6e:	f001 f8ac 	bl	8011dca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010c72:	2300      	movs	r3, #0
 8010c74:	2200      	movs	r2, #0
 8010c76:	2100      	movs	r1, #0
 8010c78:	68f8      	ldr	r0, [r7, #12]
 8010c7a:	f002 f813 	bl	8012ca4 <USBD_LL_PrepareReceive>
 8010c7e:	e03f      	b.n	8010d00 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	68da      	ldr	r2, [r3, #12]
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	689b      	ldr	r3, [r3, #8]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d11c      	bne.n	8010cc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	685a      	ldr	r2, [r3, #4]
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d316      	bcc.n	8010cc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	685a      	ldr	r2, [r3, #4]
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d20f      	bcs.n	8010cc6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	2100      	movs	r1, #0
 8010caa:	68f8      	ldr	r0, [r7, #12]
 8010cac:	f001 f88d 	bl	8011dca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010cb8:	2300      	movs	r3, #0
 8010cba:	2200      	movs	r2, #0
 8010cbc:	2100      	movs	r1, #0
 8010cbe:	68f8      	ldr	r0, [r7, #12]
 8010cc0:	f001 fff0 	bl	8012ca4 <USBD_LL_PrepareReceive>
 8010cc4:	e01c      	b.n	8010d00 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ccc:	b2db      	uxtb	r3, r3
 8010cce:	2b03      	cmp	r3, #3
 8010cd0:	d10f      	bne.n	8010cf2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d009      	beq.n	8010cf2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cec:	68db      	ldr	r3, [r3, #12]
 8010cee:	68f8      	ldr	r0, [r7, #12]
 8010cf0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010cf2:	2180      	movs	r1, #128	; 0x80
 8010cf4:	68f8      	ldr	r0, [r7, #12]
 8010cf6:	f001 ff2b 	bl	8012b50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010cfa:	68f8      	ldr	r0, [r7, #12]
 8010cfc:	f001 f8b7 	bl	8011e6e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d03a      	beq.n	8010d80 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010d0a:	68f8      	ldr	r0, [r7, #12]
 8010d0c:	f7ff fe42 	bl	8010994 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	2200      	movs	r2, #0
 8010d14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010d18:	e032      	b.n	8010d80 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010d1a:	7afb      	ldrb	r3, [r7, #11]
 8010d1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	4619      	mov	r1, r3
 8010d24:	68f8      	ldr	r0, [r7, #12]
 8010d26:	f000 f97f 	bl	8011028 <USBD_CoreFindEP>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010d2e:	7dfb      	ldrb	r3, [r7, #23]
 8010d30:	2bff      	cmp	r3, #255	; 0xff
 8010d32:	d025      	beq.n	8010d80 <USBD_LL_DataInStage+0x15a>
 8010d34:	7dfb      	ldrb	r3, [r7, #23]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d122      	bne.n	8010d80 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d40:	b2db      	uxtb	r3, r3
 8010d42:	2b03      	cmp	r3, #3
 8010d44:	d11c      	bne.n	8010d80 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010d46:	7dfa      	ldrb	r2, [r7, #23]
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	32ae      	adds	r2, #174	; 0xae
 8010d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d50:	695b      	ldr	r3, [r3, #20]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d014      	beq.n	8010d80 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010d56:	7dfa      	ldrb	r2, [r7, #23]
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010d5e:	7dfa      	ldrb	r2, [r7, #23]
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	32ae      	adds	r2, #174	; 0xae
 8010d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d68:	695b      	ldr	r3, [r3, #20]
 8010d6a:	7afa      	ldrb	r2, [r7, #11]
 8010d6c:	4611      	mov	r1, r2
 8010d6e:	68f8      	ldr	r0, [r7, #12]
 8010d70:	4798      	blx	r3
 8010d72:	4603      	mov	r3, r0
 8010d74:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010d76:	7dbb      	ldrb	r3, [r7, #22]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d001      	beq.n	8010d80 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010d7c:	7dbb      	ldrb	r3, [r7, #22]
 8010d7e:	e000      	b.n	8010d82 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3718      	adds	r7, #24
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b084      	sub	sp, #16
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d92:	2300      	movs	r3, #0
 8010d94:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2201      	movs	r2, #1
 8010d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2200      	movs	r2, #0
 8010da2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2200      	movs	r2, #0
 8010daa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2200      	movs	r2, #0
 8010db0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2200      	movs	r2, #0
 8010db8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d014      	beq.n	8010df0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d00e      	beq.n	8010df0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	6852      	ldr	r2, [r2, #4]
 8010dde:	b2d2      	uxtb	r2, r2
 8010de0:	4611      	mov	r1, r2
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	4798      	blx	r3
 8010de6:	4603      	mov	r3, r0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d001      	beq.n	8010df0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010dec:	2303      	movs	r3, #3
 8010dee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010df0:	2340      	movs	r3, #64	; 0x40
 8010df2:	2200      	movs	r2, #0
 8010df4:	2100      	movs	r1, #0
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f001 fe65 	bl	8012ac6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2201      	movs	r2, #1
 8010e00:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2240      	movs	r2, #64	; 0x40
 8010e08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010e0c:	2340      	movs	r3, #64	; 0x40
 8010e0e:	2200      	movs	r2, #0
 8010e10:	2180      	movs	r1, #128	; 0x80
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f001 fe57 	bl	8012ac6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2240      	movs	r2, #64	; 0x40
 8010e22:	621a      	str	r2, [r3, #32]

  return ret;
 8010e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3710      	adds	r7, #16
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}

08010e2e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010e2e:	b480      	push	{r7}
 8010e30:	b083      	sub	sp, #12
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	6078      	str	r0, [r7, #4]
 8010e36:	460b      	mov	r3, r1
 8010e38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	78fa      	ldrb	r2, [r7, #3]
 8010e3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010e40:	2300      	movs	r3, #0
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	370c      	adds	r7, #12
 8010e46:	46bd      	mov	sp, r7
 8010e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4c:	4770      	bx	lr

08010e4e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010e4e:	b480      	push	{r7}
 8010e50:	b083      	sub	sp, #12
 8010e52:	af00      	add	r7, sp, #0
 8010e54:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e5c:	b2da      	uxtb	r2, r3
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2204      	movs	r2, #4
 8010e68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010e6c:	2300      	movs	r3, #0
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	370c      	adds	r7, #12
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr

08010e7a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010e7a:	b480      	push	{r7}
 8010e7c:	b083      	sub	sp, #12
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e88:	b2db      	uxtb	r3, r3
 8010e8a:	2b04      	cmp	r3, #4
 8010e8c:	d106      	bne.n	8010e9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010e94:	b2da      	uxtb	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010e9c:	2300      	movs	r3, #0
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	370c      	adds	r7, #12
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea8:	4770      	bx	lr

08010eaa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010eaa:	b580      	push	{r7, lr}
 8010eac:	b082      	sub	sp, #8
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	2b03      	cmp	r3, #3
 8010ebc:	d110      	bne.n	8010ee0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d00b      	beq.n	8010ee0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ece:	69db      	ldr	r3, [r3, #28]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d005      	beq.n	8010ee0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eda:	69db      	ldr	r3, [r3, #28]
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010ee0:	2300      	movs	r3, #0
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3708      	adds	r7, #8
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}

08010eea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010eea:	b580      	push	{r7, lr}
 8010eec:	b082      	sub	sp, #8
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	32ae      	adds	r2, #174	; 0xae
 8010f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d101      	bne.n	8010f0c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010f08:	2303      	movs	r3, #3
 8010f0a:	e01c      	b.n	8010f46 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	2b03      	cmp	r3, #3
 8010f16:	d115      	bne.n	8010f44 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	32ae      	adds	r2, #174	; 0xae
 8010f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f26:	6a1b      	ldr	r3, [r3, #32]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d00b      	beq.n	8010f44 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	32ae      	adds	r2, #174	; 0xae
 8010f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f3a:	6a1b      	ldr	r3, [r3, #32]
 8010f3c:	78fa      	ldrb	r2, [r7, #3]
 8010f3e:	4611      	mov	r1, r2
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3708      	adds	r7, #8
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010f4e:	b580      	push	{r7, lr}
 8010f50:	b082      	sub	sp, #8
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
 8010f56:	460b      	mov	r3, r1
 8010f58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	32ae      	adds	r2, #174	; 0xae
 8010f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d101      	bne.n	8010f70 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010f6c:	2303      	movs	r3, #3
 8010f6e:	e01c      	b.n	8010faa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	2b03      	cmp	r3, #3
 8010f7a:	d115      	bne.n	8010fa8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	32ae      	adds	r2, #174	; 0xae
 8010f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d00b      	beq.n	8010fa8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	32ae      	adds	r2, #174	; 0xae
 8010f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa0:	78fa      	ldrb	r2, [r7, #3]
 8010fa2:	4611      	mov	r1, r2
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010fa8:	2300      	movs	r3, #0
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3708      	adds	r7, #8
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}

08010fb2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010fb2:	b480      	push	{r7}
 8010fb4:	b083      	sub	sp, #12
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010fba:	2300      	movs	r3, #0
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	370c      	adds	r7, #12
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr

08010fc8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b084      	sub	sp, #16
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d00e      	beq.n	8011004 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	6852      	ldr	r2, [r2, #4]
 8010ff2:	b2d2      	uxtb	r2, r2
 8010ff4:	4611      	mov	r1, r2
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	4798      	blx	r3
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d001      	beq.n	8011004 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011000:	2303      	movs	r3, #3
 8011002:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011004:	7bfb      	ldrb	r3, [r7, #15]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3710      	adds	r7, #16
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}

0801100e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801100e:	b480      	push	{r7}
 8011010:	b083      	sub	sp, #12
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
 8011016:	460b      	mov	r3, r1
 8011018:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801101a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801101c:	4618      	mov	r0, r3
 801101e:	370c      	adds	r7, #12
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr

08011028 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011028:	b480      	push	{r7}
 801102a:	b083      	sub	sp, #12
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	460b      	mov	r3, r1
 8011032:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011034:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011036:	4618      	mov	r0, r3
 8011038:	370c      	adds	r7, #12
 801103a:	46bd      	mov	sp, r7
 801103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011040:	4770      	bx	lr

08011042 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011042:	b580      	push	{r7, lr}
 8011044:	b086      	sub	sp, #24
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
 801104a:	460b      	mov	r3, r1
 801104c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011056:	2300      	movs	r3, #0
 8011058:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	885b      	ldrh	r3, [r3, #2]
 801105e:	b29a      	uxth	r2, r3
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	b29b      	uxth	r3, r3
 8011066:	429a      	cmp	r2, r3
 8011068:	d920      	bls.n	80110ac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	781b      	ldrb	r3, [r3, #0]
 801106e:	b29b      	uxth	r3, r3
 8011070:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011072:	e013      	b.n	801109c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011074:	f107 030a 	add.w	r3, r7, #10
 8011078:	4619      	mov	r1, r3
 801107a:	6978      	ldr	r0, [r7, #20]
 801107c:	f000 f81b 	bl	80110b6 <USBD_GetNextDesc>
 8011080:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	785b      	ldrb	r3, [r3, #1]
 8011086:	2b05      	cmp	r3, #5
 8011088:	d108      	bne.n	801109c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801108a:	697b      	ldr	r3, [r7, #20]
 801108c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	789b      	ldrb	r3, [r3, #2]
 8011092:	78fa      	ldrb	r2, [r7, #3]
 8011094:	429a      	cmp	r2, r3
 8011096:	d008      	beq.n	80110aa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011098:	2300      	movs	r3, #0
 801109a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	885b      	ldrh	r3, [r3, #2]
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	897b      	ldrh	r3, [r7, #10]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d8e5      	bhi.n	8011074 <USBD_GetEpDesc+0x32>
 80110a8:	e000      	b.n	80110ac <USBD_GetEpDesc+0x6a>
          break;
 80110aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80110ac:	693b      	ldr	r3, [r7, #16]
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3718      	adds	r7, #24
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}

080110b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80110b6:	b480      	push	{r7}
 80110b8:	b085      	sub	sp, #20
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
 80110be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	881a      	ldrh	r2, [r3, #0]
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	4413      	add	r3, r2
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	461a      	mov	r2, r3
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	4413      	add	r3, r2
 80110e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80110e2:	68fb      	ldr	r3, [r7, #12]
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr

080110f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b087      	sub	sp, #28
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	3301      	adds	r3, #1
 8011106:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801110e:	8a3b      	ldrh	r3, [r7, #16]
 8011110:	021b      	lsls	r3, r3, #8
 8011112:	b21a      	sxth	r2, r3
 8011114:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011118:	4313      	orrs	r3, r2
 801111a:	b21b      	sxth	r3, r3
 801111c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801111e:	89fb      	ldrh	r3, [r7, #14]
}
 8011120:	4618      	mov	r0, r3
 8011122:	371c      	adds	r7, #28
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr

0801112c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b084      	sub	sp, #16
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011136:	2300      	movs	r3, #0
 8011138:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011142:	2b40      	cmp	r3, #64	; 0x40
 8011144:	d005      	beq.n	8011152 <USBD_StdDevReq+0x26>
 8011146:	2b40      	cmp	r3, #64	; 0x40
 8011148:	d857      	bhi.n	80111fa <USBD_StdDevReq+0xce>
 801114a:	2b00      	cmp	r3, #0
 801114c:	d00f      	beq.n	801116e <USBD_StdDevReq+0x42>
 801114e:	2b20      	cmp	r3, #32
 8011150:	d153      	bne.n	80111fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	32ae      	adds	r2, #174	; 0xae
 801115c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011160:	689b      	ldr	r3, [r3, #8]
 8011162:	6839      	ldr	r1, [r7, #0]
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	4798      	blx	r3
 8011168:	4603      	mov	r3, r0
 801116a:	73fb      	strb	r3, [r7, #15]
      break;
 801116c:	e04a      	b.n	8011204 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	785b      	ldrb	r3, [r3, #1]
 8011172:	2b09      	cmp	r3, #9
 8011174:	d83b      	bhi.n	80111ee <USBD_StdDevReq+0xc2>
 8011176:	a201      	add	r2, pc, #4	; (adr r2, 801117c <USBD_StdDevReq+0x50>)
 8011178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801117c:	080111d1 	.word	0x080111d1
 8011180:	080111e5 	.word	0x080111e5
 8011184:	080111ef 	.word	0x080111ef
 8011188:	080111db 	.word	0x080111db
 801118c:	080111ef 	.word	0x080111ef
 8011190:	080111af 	.word	0x080111af
 8011194:	080111a5 	.word	0x080111a5
 8011198:	080111ef 	.word	0x080111ef
 801119c:	080111c7 	.word	0x080111c7
 80111a0:	080111b9 	.word	0x080111b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80111a4:	6839      	ldr	r1, [r7, #0]
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 fa3c 	bl	8011624 <USBD_GetDescriptor>
          break;
 80111ac:	e024      	b.n	80111f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80111ae:	6839      	ldr	r1, [r7, #0]
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f000 fba1 	bl	80118f8 <USBD_SetAddress>
          break;
 80111b6:	e01f      	b.n	80111f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80111b8:	6839      	ldr	r1, [r7, #0]
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f000 fbe0 	bl	8011980 <USBD_SetConfig>
 80111c0:	4603      	mov	r3, r0
 80111c2:	73fb      	strb	r3, [r7, #15]
          break;
 80111c4:	e018      	b.n	80111f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80111c6:	6839      	ldr	r1, [r7, #0]
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f000 fc83 	bl	8011ad4 <USBD_GetConfig>
          break;
 80111ce:	e013      	b.n	80111f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80111d0:	6839      	ldr	r1, [r7, #0]
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f000 fcb4 	bl	8011b40 <USBD_GetStatus>
          break;
 80111d8:	e00e      	b.n	80111f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80111da:	6839      	ldr	r1, [r7, #0]
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f000 fce3 	bl	8011ba8 <USBD_SetFeature>
          break;
 80111e2:	e009      	b.n	80111f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80111e4:	6839      	ldr	r1, [r7, #0]
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 fd07 	bl	8011bfa <USBD_ClrFeature>
          break;
 80111ec:	e004      	b.n	80111f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80111ee:	6839      	ldr	r1, [r7, #0]
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f000 fd5e 	bl	8011cb2 <USBD_CtlError>
          break;
 80111f6:	bf00      	nop
      }
      break;
 80111f8:	e004      	b.n	8011204 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80111fa:	6839      	ldr	r1, [r7, #0]
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f000 fd58 	bl	8011cb2 <USBD_CtlError>
      break;
 8011202:	bf00      	nop
  }

  return ret;
 8011204:	7bfb      	ldrb	r3, [r7, #15]
}
 8011206:	4618      	mov	r0, r3
 8011208:	3710      	adds	r7, #16
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
 801120e:	bf00      	nop

08011210 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b084      	sub	sp, #16
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801121a:	2300      	movs	r3, #0
 801121c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011226:	2b40      	cmp	r3, #64	; 0x40
 8011228:	d005      	beq.n	8011236 <USBD_StdItfReq+0x26>
 801122a:	2b40      	cmp	r3, #64	; 0x40
 801122c:	d852      	bhi.n	80112d4 <USBD_StdItfReq+0xc4>
 801122e:	2b00      	cmp	r3, #0
 8011230:	d001      	beq.n	8011236 <USBD_StdItfReq+0x26>
 8011232:	2b20      	cmp	r3, #32
 8011234:	d14e      	bne.n	80112d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801123c:	b2db      	uxtb	r3, r3
 801123e:	3b01      	subs	r3, #1
 8011240:	2b02      	cmp	r3, #2
 8011242:	d840      	bhi.n	80112c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	889b      	ldrh	r3, [r3, #4]
 8011248:	b2db      	uxtb	r3, r3
 801124a:	2b01      	cmp	r3, #1
 801124c:	d836      	bhi.n	80112bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	889b      	ldrh	r3, [r3, #4]
 8011252:	b2db      	uxtb	r3, r3
 8011254:	4619      	mov	r1, r3
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f7ff fed9 	bl	801100e <USBD_CoreFindIF>
 801125c:	4603      	mov	r3, r0
 801125e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011260:	7bbb      	ldrb	r3, [r7, #14]
 8011262:	2bff      	cmp	r3, #255	; 0xff
 8011264:	d01d      	beq.n	80112a2 <USBD_StdItfReq+0x92>
 8011266:	7bbb      	ldrb	r3, [r7, #14]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d11a      	bne.n	80112a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801126c:	7bba      	ldrb	r2, [r7, #14]
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	32ae      	adds	r2, #174	; 0xae
 8011272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011276:	689b      	ldr	r3, [r3, #8]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d00f      	beq.n	801129c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801127c:	7bba      	ldrb	r2, [r7, #14]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011284:	7bba      	ldrb	r2, [r7, #14]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	32ae      	adds	r2, #174	; 0xae
 801128a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801128e:	689b      	ldr	r3, [r3, #8]
 8011290:	6839      	ldr	r1, [r7, #0]
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	4798      	blx	r3
 8011296:	4603      	mov	r3, r0
 8011298:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801129a:	e004      	b.n	80112a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801129c:	2303      	movs	r3, #3
 801129e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80112a0:	e001      	b.n	80112a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80112a2:	2303      	movs	r3, #3
 80112a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	88db      	ldrh	r3, [r3, #6]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d110      	bne.n	80112d0 <USBD_StdItfReq+0xc0>
 80112ae:	7bfb      	ldrb	r3, [r7, #15]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d10d      	bne.n	80112d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f000 fdc7 	bl	8011e48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80112ba:	e009      	b.n	80112d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80112bc:	6839      	ldr	r1, [r7, #0]
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f000 fcf7 	bl	8011cb2 <USBD_CtlError>
          break;
 80112c4:	e004      	b.n	80112d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80112c6:	6839      	ldr	r1, [r7, #0]
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f000 fcf2 	bl	8011cb2 <USBD_CtlError>
          break;
 80112ce:	e000      	b.n	80112d2 <USBD_StdItfReq+0xc2>
          break;
 80112d0:	bf00      	nop
      }
      break;
 80112d2:	e004      	b.n	80112de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80112d4:	6839      	ldr	r1, [r7, #0]
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f000 fceb 	bl	8011cb2 <USBD_CtlError>
      break;
 80112dc:	bf00      	nop
  }

  return ret;
 80112de:	7bfb      	ldrb	r3, [r7, #15]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3710      	adds	r7, #16
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}

080112e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b084      	sub	sp, #16
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80112f2:	2300      	movs	r3, #0
 80112f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	889b      	ldrh	r3, [r3, #4]
 80112fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011304:	2b40      	cmp	r3, #64	; 0x40
 8011306:	d007      	beq.n	8011318 <USBD_StdEPReq+0x30>
 8011308:	2b40      	cmp	r3, #64	; 0x40
 801130a:	f200 817f 	bhi.w	801160c <USBD_StdEPReq+0x324>
 801130e:	2b00      	cmp	r3, #0
 8011310:	d02a      	beq.n	8011368 <USBD_StdEPReq+0x80>
 8011312:	2b20      	cmp	r3, #32
 8011314:	f040 817a 	bne.w	801160c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011318:	7bbb      	ldrb	r3, [r7, #14]
 801131a:	4619      	mov	r1, r3
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f7ff fe83 	bl	8011028 <USBD_CoreFindEP>
 8011322:	4603      	mov	r3, r0
 8011324:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011326:	7b7b      	ldrb	r3, [r7, #13]
 8011328:	2bff      	cmp	r3, #255	; 0xff
 801132a:	f000 8174 	beq.w	8011616 <USBD_StdEPReq+0x32e>
 801132e:	7b7b      	ldrb	r3, [r7, #13]
 8011330:	2b00      	cmp	r3, #0
 8011332:	f040 8170 	bne.w	8011616 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011336:	7b7a      	ldrb	r2, [r7, #13]
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801133e:	7b7a      	ldrb	r2, [r7, #13]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	32ae      	adds	r2, #174	; 0xae
 8011344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011348:	689b      	ldr	r3, [r3, #8]
 801134a:	2b00      	cmp	r3, #0
 801134c:	f000 8163 	beq.w	8011616 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011350:	7b7a      	ldrb	r2, [r7, #13]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	32ae      	adds	r2, #174	; 0xae
 8011356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801135a:	689b      	ldr	r3, [r3, #8]
 801135c:	6839      	ldr	r1, [r7, #0]
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	4798      	blx	r3
 8011362:	4603      	mov	r3, r0
 8011364:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011366:	e156      	b.n	8011616 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	785b      	ldrb	r3, [r3, #1]
 801136c:	2b03      	cmp	r3, #3
 801136e:	d008      	beq.n	8011382 <USBD_StdEPReq+0x9a>
 8011370:	2b03      	cmp	r3, #3
 8011372:	f300 8145 	bgt.w	8011600 <USBD_StdEPReq+0x318>
 8011376:	2b00      	cmp	r3, #0
 8011378:	f000 809b 	beq.w	80114b2 <USBD_StdEPReq+0x1ca>
 801137c:	2b01      	cmp	r3, #1
 801137e:	d03c      	beq.n	80113fa <USBD_StdEPReq+0x112>
 8011380:	e13e      	b.n	8011600 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011388:	b2db      	uxtb	r3, r3
 801138a:	2b02      	cmp	r3, #2
 801138c:	d002      	beq.n	8011394 <USBD_StdEPReq+0xac>
 801138e:	2b03      	cmp	r3, #3
 8011390:	d016      	beq.n	80113c0 <USBD_StdEPReq+0xd8>
 8011392:	e02c      	b.n	80113ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011394:	7bbb      	ldrb	r3, [r7, #14]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00d      	beq.n	80113b6 <USBD_StdEPReq+0xce>
 801139a:	7bbb      	ldrb	r3, [r7, #14]
 801139c:	2b80      	cmp	r3, #128	; 0x80
 801139e:	d00a      	beq.n	80113b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80113a0:	7bbb      	ldrb	r3, [r7, #14]
 80113a2:	4619      	mov	r1, r3
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f001 fbd3 	bl	8012b50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80113aa:	2180      	movs	r1, #128	; 0x80
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f001 fbcf 	bl	8012b50 <USBD_LL_StallEP>
 80113b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80113b4:	e020      	b.n	80113f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80113b6:	6839      	ldr	r1, [r7, #0]
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f000 fc7a 	bl	8011cb2 <USBD_CtlError>
              break;
 80113be:	e01b      	b.n	80113f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	885b      	ldrh	r3, [r3, #2]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d10e      	bne.n	80113e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80113c8:	7bbb      	ldrb	r3, [r7, #14]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00b      	beq.n	80113e6 <USBD_StdEPReq+0xfe>
 80113ce:	7bbb      	ldrb	r3, [r7, #14]
 80113d0:	2b80      	cmp	r3, #128	; 0x80
 80113d2:	d008      	beq.n	80113e6 <USBD_StdEPReq+0xfe>
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	88db      	ldrh	r3, [r3, #6]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d104      	bne.n	80113e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80113dc:	7bbb      	ldrb	r3, [r7, #14]
 80113de:	4619      	mov	r1, r3
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f001 fbb5 	bl	8012b50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f000 fd2e 	bl	8011e48 <USBD_CtlSendStatus>

              break;
 80113ec:	e004      	b.n	80113f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80113ee:	6839      	ldr	r1, [r7, #0]
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f000 fc5e 	bl	8011cb2 <USBD_CtlError>
              break;
 80113f6:	bf00      	nop
          }
          break;
 80113f8:	e107      	b.n	801160a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011400:	b2db      	uxtb	r3, r3
 8011402:	2b02      	cmp	r3, #2
 8011404:	d002      	beq.n	801140c <USBD_StdEPReq+0x124>
 8011406:	2b03      	cmp	r3, #3
 8011408:	d016      	beq.n	8011438 <USBD_StdEPReq+0x150>
 801140a:	e04b      	b.n	80114a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801140c:	7bbb      	ldrb	r3, [r7, #14]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d00d      	beq.n	801142e <USBD_StdEPReq+0x146>
 8011412:	7bbb      	ldrb	r3, [r7, #14]
 8011414:	2b80      	cmp	r3, #128	; 0x80
 8011416:	d00a      	beq.n	801142e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011418:	7bbb      	ldrb	r3, [r7, #14]
 801141a:	4619      	mov	r1, r3
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f001 fb97 	bl	8012b50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011422:	2180      	movs	r1, #128	; 0x80
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f001 fb93 	bl	8012b50 <USBD_LL_StallEP>
 801142a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801142c:	e040      	b.n	80114b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801142e:	6839      	ldr	r1, [r7, #0]
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f000 fc3e 	bl	8011cb2 <USBD_CtlError>
              break;
 8011436:	e03b      	b.n	80114b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	885b      	ldrh	r3, [r3, #2]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d136      	bne.n	80114ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011440:	7bbb      	ldrb	r3, [r7, #14]
 8011442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011446:	2b00      	cmp	r3, #0
 8011448:	d004      	beq.n	8011454 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801144a:	7bbb      	ldrb	r3, [r7, #14]
 801144c:	4619      	mov	r1, r3
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f001 fb9d 	bl	8012b8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f000 fcf7 	bl	8011e48 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801145a:	7bbb      	ldrb	r3, [r7, #14]
 801145c:	4619      	mov	r1, r3
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f7ff fde2 	bl	8011028 <USBD_CoreFindEP>
 8011464:	4603      	mov	r3, r0
 8011466:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011468:	7b7b      	ldrb	r3, [r7, #13]
 801146a:	2bff      	cmp	r3, #255	; 0xff
 801146c:	d01f      	beq.n	80114ae <USBD_StdEPReq+0x1c6>
 801146e:	7b7b      	ldrb	r3, [r7, #13]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d11c      	bne.n	80114ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011474:	7b7a      	ldrb	r2, [r7, #13]
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801147c:	7b7a      	ldrb	r2, [r7, #13]
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	32ae      	adds	r2, #174	; 0xae
 8011482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011486:	689b      	ldr	r3, [r3, #8]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d010      	beq.n	80114ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801148c:	7b7a      	ldrb	r2, [r7, #13]
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	32ae      	adds	r2, #174	; 0xae
 8011492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011496:	689b      	ldr	r3, [r3, #8]
 8011498:	6839      	ldr	r1, [r7, #0]
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	4798      	blx	r3
 801149e:	4603      	mov	r3, r0
 80114a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80114a2:	e004      	b.n	80114ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80114a4:	6839      	ldr	r1, [r7, #0]
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f000 fc03 	bl	8011cb2 <USBD_CtlError>
              break;
 80114ac:	e000      	b.n	80114b0 <USBD_StdEPReq+0x1c8>
              break;
 80114ae:	bf00      	nop
          }
          break;
 80114b0:	e0ab      	b.n	801160a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114b8:	b2db      	uxtb	r3, r3
 80114ba:	2b02      	cmp	r3, #2
 80114bc:	d002      	beq.n	80114c4 <USBD_StdEPReq+0x1dc>
 80114be:	2b03      	cmp	r3, #3
 80114c0:	d032      	beq.n	8011528 <USBD_StdEPReq+0x240>
 80114c2:	e097      	b.n	80115f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80114c4:	7bbb      	ldrb	r3, [r7, #14]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d007      	beq.n	80114da <USBD_StdEPReq+0x1f2>
 80114ca:	7bbb      	ldrb	r3, [r7, #14]
 80114cc:	2b80      	cmp	r3, #128	; 0x80
 80114ce:	d004      	beq.n	80114da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80114d0:	6839      	ldr	r1, [r7, #0]
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f000 fbed 	bl	8011cb2 <USBD_CtlError>
                break;
 80114d8:	e091      	b.n	80115fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80114da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	da0b      	bge.n	80114fa <USBD_StdEPReq+0x212>
 80114e2:	7bbb      	ldrb	r3, [r7, #14]
 80114e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80114e8:	4613      	mov	r3, r2
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	4413      	add	r3, r2
 80114ee:	009b      	lsls	r3, r3, #2
 80114f0:	3310      	adds	r3, #16
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	4413      	add	r3, r2
 80114f6:	3304      	adds	r3, #4
 80114f8:	e00b      	b.n	8011512 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80114fa:	7bbb      	ldrb	r3, [r7, #14]
 80114fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011500:	4613      	mov	r3, r2
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	4413      	add	r3, r2
 8011506:	009b      	lsls	r3, r3, #2
 8011508:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	4413      	add	r3, r2
 8011510:	3304      	adds	r3, #4
 8011512:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	2200      	movs	r2, #0
 8011518:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	2202      	movs	r2, #2
 801151e:	4619      	mov	r1, r3
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f000 fc37 	bl	8011d94 <USBD_CtlSendData>
              break;
 8011526:	e06a      	b.n	80115fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801152c:	2b00      	cmp	r3, #0
 801152e:	da11      	bge.n	8011554 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011530:	7bbb      	ldrb	r3, [r7, #14]
 8011532:	f003 020f 	and.w	r2, r3, #15
 8011536:	6879      	ldr	r1, [r7, #4]
 8011538:	4613      	mov	r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	4413      	add	r3, r2
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	440b      	add	r3, r1
 8011542:	3324      	adds	r3, #36	; 0x24
 8011544:	881b      	ldrh	r3, [r3, #0]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d117      	bne.n	801157a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801154a:	6839      	ldr	r1, [r7, #0]
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f000 fbb0 	bl	8011cb2 <USBD_CtlError>
                  break;
 8011552:	e054      	b.n	80115fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011554:	7bbb      	ldrb	r3, [r7, #14]
 8011556:	f003 020f 	and.w	r2, r3, #15
 801155a:	6879      	ldr	r1, [r7, #4]
 801155c:	4613      	mov	r3, r2
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	4413      	add	r3, r2
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	440b      	add	r3, r1
 8011566:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801156a:	881b      	ldrh	r3, [r3, #0]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d104      	bne.n	801157a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011570:	6839      	ldr	r1, [r7, #0]
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f000 fb9d 	bl	8011cb2 <USBD_CtlError>
                  break;
 8011578:	e041      	b.n	80115fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801157a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801157e:	2b00      	cmp	r3, #0
 8011580:	da0b      	bge.n	801159a <USBD_StdEPReq+0x2b2>
 8011582:	7bbb      	ldrb	r3, [r7, #14]
 8011584:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011588:	4613      	mov	r3, r2
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	4413      	add	r3, r2
 801158e:	009b      	lsls	r3, r3, #2
 8011590:	3310      	adds	r3, #16
 8011592:	687a      	ldr	r2, [r7, #4]
 8011594:	4413      	add	r3, r2
 8011596:	3304      	adds	r3, #4
 8011598:	e00b      	b.n	80115b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801159a:	7bbb      	ldrb	r3, [r7, #14]
 801159c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80115a0:	4613      	mov	r3, r2
 80115a2:	009b      	lsls	r3, r3, #2
 80115a4:	4413      	add	r3, r2
 80115a6:	009b      	lsls	r3, r3, #2
 80115a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80115ac:	687a      	ldr	r2, [r7, #4]
 80115ae:	4413      	add	r3, r2
 80115b0:	3304      	adds	r3, #4
 80115b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80115b4:	7bbb      	ldrb	r3, [r7, #14]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d002      	beq.n	80115c0 <USBD_StdEPReq+0x2d8>
 80115ba:	7bbb      	ldrb	r3, [r7, #14]
 80115bc:	2b80      	cmp	r3, #128	; 0x80
 80115be:	d103      	bne.n	80115c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	2200      	movs	r2, #0
 80115c4:	601a      	str	r2, [r3, #0]
 80115c6:	e00e      	b.n	80115e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80115c8:	7bbb      	ldrb	r3, [r7, #14]
 80115ca:	4619      	mov	r1, r3
 80115cc:	6878      	ldr	r0, [r7, #4]
 80115ce:	f001 fafd 	bl	8012bcc <USBD_LL_IsStallEP>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d003      	beq.n	80115e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	2201      	movs	r2, #1
 80115dc:	601a      	str	r2, [r3, #0]
 80115de:	e002      	b.n	80115e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	2200      	movs	r2, #0
 80115e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	2202      	movs	r2, #2
 80115ea:	4619      	mov	r1, r3
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f000 fbd1 	bl	8011d94 <USBD_CtlSendData>
              break;
 80115f2:	e004      	b.n	80115fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80115f4:	6839      	ldr	r1, [r7, #0]
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f000 fb5b 	bl	8011cb2 <USBD_CtlError>
              break;
 80115fc:	bf00      	nop
          }
          break;
 80115fe:	e004      	b.n	801160a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011600:	6839      	ldr	r1, [r7, #0]
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 fb55 	bl	8011cb2 <USBD_CtlError>
          break;
 8011608:	bf00      	nop
      }
      break;
 801160a:	e005      	b.n	8011618 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801160c:	6839      	ldr	r1, [r7, #0]
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	f000 fb4f 	bl	8011cb2 <USBD_CtlError>
      break;
 8011614:	e000      	b.n	8011618 <USBD_StdEPReq+0x330>
      break;
 8011616:	bf00      	nop
  }

  return ret;
 8011618:	7bfb      	ldrb	r3, [r7, #15]
}
 801161a:	4618      	mov	r0, r3
 801161c:	3710      	adds	r7, #16
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
	...

08011624 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801162e:	2300      	movs	r3, #0
 8011630:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011632:	2300      	movs	r3, #0
 8011634:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011636:	2300      	movs	r3, #0
 8011638:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	885b      	ldrh	r3, [r3, #2]
 801163e:	0a1b      	lsrs	r3, r3, #8
 8011640:	b29b      	uxth	r3, r3
 8011642:	3b01      	subs	r3, #1
 8011644:	2b06      	cmp	r3, #6
 8011646:	f200 8128 	bhi.w	801189a <USBD_GetDescriptor+0x276>
 801164a:	a201      	add	r2, pc, #4	; (adr r2, 8011650 <USBD_GetDescriptor+0x2c>)
 801164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011650:	0801166d 	.word	0x0801166d
 8011654:	08011685 	.word	0x08011685
 8011658:	080116c5 	.word	0x080116c5
 801165c:	0801189b 	.word	0x0801189b
 8011660:	0801189b 	.word	0x0801189b
 8011664:	0801183b 	.word	0x0801183b
 8011668:	08011867 	.word	0x08011867
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	7c12      	ldrb	r2, [r2, #16]
 8011678:	f107 0108 	add.w	r1, r7, #8
 801167c:	4610      	mov	r0, r2
 801167e:	4798      	blx	r3
 8011680:	60f8      	str	r0, [r7, #12]
      break;
 8011682:	e112      	b.n	80118aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	7c1b      	ldrb	r3, [r3, #16]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d10d      	bne.n	80116a8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011694:	f107 0208 	add.w	r2, r7, #8
 8011698:	4610      	mov	r0, r2
 801169a:	4798      	blx	r3
 801169c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	3301      	adds	r3, #1
 80116a2:	2202      	movs	r2, #2
 80116a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80116a6:	e100      	b.n	80118aa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116b0:	f107 0208 	add.w	r2, r7, #8
 80116b4:	4610      	mov	r0, r2
 80116b6:	4798      	blx	r3
 80116b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	3301      	adds	r3, #1
 80116be:	2202      	movs	r2, #2
 80116c0:	701a      	strb	r2, [r3, #0]
      break;
 80116c2:	e0f2      	b.n	80118aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	885b      	ldrh	r3, [r3, #2]
 80116c8:	b2db      	uxtb	r3, r3
 80116ca:	2b05      	cmp	r3, #5
 80116cc:	f200 80ac 	bhi.w	8011828 <USBD_GetDescriptor+0x204>
 80116d0:	a201      	add	r2, pc, #4	; (adr r2, 80116d8 <USBD_GetDescriptor+0xb4>)
 80116d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116d6:	bf00      	nop
 80116d8:	080116f1 	.word	0x080116f1
 80116dc:	08011725 	.word	0x08011725
 80116e0:	08011759 	.word	0x08011759
 80116e4:	0801178d 	.word	0x0801178d
 80116e8:	080117c1 	.word	0x080117c1
 80116ec:	080117f5 	.word	0x080117f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d00b      	beq.n	8011714 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	7c12      	ldrb	r2, [r2, #16]
 8011708:	f107 0108 	add.w	r1, r7, #8
 801170c:	4610      	mov	r0, r2
 801170e:	4798      	blx	r3
 8011710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011712:	e091      	b.n	8011838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011714:	6839      	ldr	r1, [r7, #0]
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f000 facb 	bl	8011cb2 <USBD_CtlError>
            err++;
 801171c:	7afb      	ldrb	r3, [r7, #11]
 801171e:	3301      	adds	r3, #1
 8011720:	72fb      	strb	r3, [r7, #11]
          break;
 8011722:	e089      	b.n	8011838 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801172a:	689b      	ldr	r3, [r3, #8]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d00b      	beq.n	8011748 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011736:	689b      	ldr	r3, [r3, #8]
 8011738:	687a      	ldr	r2, [r7, #4]
 801173a:	7c12      	ldrb	r2, [r2, #16]
 801173c:	f107 0108 	add.w	r1, r7, #8
 8011740:	4610      	mov	r0, r2
 8011742:	4798      	blx	r3
 8011744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011746:	e077      	b.n	8011838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011748:	6839      	ldr	r1, [r7, #0]
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f000 fab1 	bl	8011cb2 <USBD_CtlError>
            err++;
 8011750:	7afb      	ldrb	r3, [r7, #11]
 8011752:	3301      	adds	r3, #1
 8011754:	72fb      	strb	r3, [r7, #11]
          break;
 8011756:	e06f      	b.n	8011838 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d00b      	beq.n	801177c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801176a:	68db      	ldr	r3, [r3, #12]
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	7c12      	ldrb	r2, [r2, #16]
 8011770:	f107 0108 	add.w	r1, r7, #8
 8011774:	4610      	mov	r0, r2
 8011776:	4798      	blx	r3
 8011778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801177a:	e05d      	b.n	8011838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801177c:	6839      	ldr	r1, [r7, #0]
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f000 fa97 	bl	8011cb2 <USBD_CtlError>
            err++;
 8011784:	7afb      	ldrb	r3, [r7, #11]
 8011786:	3301      	adds	r3, #1
 8011788:	72fb      	strb	r3, [r7, #11]
          break;
 801178a:	e055      	b.n	8011838 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011792:	691b      	ldr	r3, [r3, #16]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d00b      	beq.n	80117b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801179e:	691b      	ldr	r3, [r3, #16]
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	7c12      	ldrb	r2, [r2, #16]
 80117a4:	f107 0108 	add.w	r1, r7, #8
 80117a8:	4610      	mov	r0, r2
 80117aa:	4798      	blx	r3
 80117ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80117ae:	e043      	b.n	8011838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80117b0:	6839      	ldr	r1, [r7, #0]
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f000 fa7d 	bl	8011cb2 <USBD_CtlError>
            err++;
 80117b8:	7afb      	ldrb	r3, [r7, #11]
 80117ba:	3301      	adds	r3, #1
 80117bc:	72fb      	strb	r3, [r7, #11]
          break;
 80117be:	e03b      	b.n	8011838 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117c6:	695b      	ldr	r3, [r3, #20]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d00b      	beq.n	80117e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117d2:	695b      	ldr	r3, [r3, #20]
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	7c12      	ldrb	r2, [r2, #16]
 80117d8:	f107 0108 	add.w	r1, r7, #8
 80117dc:	4610      	mov	r0, r2
 80117de:	4798      	blx	r3
 80117e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80117e2:	e029      	b.n	8011838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80117e4:	6839      	ldr	r1, [r7, #0]
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f000 fa63 	bl	8011cb2 <USBD_CtlError>
            err++;
 80117ec:	7afb      	ldrb	r3, [r7, #11]
 80117ee:	3301      	adds	r3, #1
 80117f0:	72fb      	strb	r3, [r7, #11]
          break;
 80117f2:	e021      	b.n	8011838 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117fa:	699b      	ldr	r3, [r3, #24]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d00b      	beq.n	8011818 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011806:	699b      	ldr	r3, [r3, #24]
 8011808:	687a      	ldr	r2, [r7, #4]
 801180a:	7c12      	ldrb	r2, [r2, #16]
 801180c:	f107 0108 	add.w	r1, r7, #8
 8011810:	4610      	mov	r0, r2
 8011812:	4798      	blx	r3
 8011814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011816:	e00f      	b.n	8011838 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011818:	6839      	ldr	r1, [r7, #0]
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f000 fa49 	bl	8011cb2 <USBD_CtlError>
            err++;
 8011820:	7afb      	ldrb	r3, [r7, #11]
 8011822:	3301      	adds	r3, #1
 8011824:	72fb      	strb	r3, [r7, #11]
          break;
 8011826:	e007      	b.n	8011838 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011828:	6839      	ldr	r1, [r7, #0]
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f000 fa41 	bl	8011cb2 <USBD_CtlError>
          err++;
 8011830:	7afb      	ldrb	r3, [r7, #11]
 8011832:	3301      	adds	r3, #1
 8011834:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011836:	bf00      	nop
      }
      break;
 8011838:	e037      	b.n	80118aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	7c1b      	ldrb	r3, [r3, #16]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d109      	bne.n	8011856 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801184a:	f107 0208 	add.w	r2, r7, #8
 801184e:	4610      	mov	r0, r2
 8011850:	4798      	blx	r3
 8011852:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011854:	e029      	b.n	80118aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011856:	6839      	ldr	r1, [r7, #0]
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f000 fa2a 	bl	8011cb2 <USBD_CtlError>
        err++;
 801185e:	7afb      	ldrb	r3, [r7, #11]
 8011860:	3301      	adds	r3, #1
 8011862:	72fb      	strb	r3, [r7, #11]
      break;
 8011864:	e021      	b.n	80118aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	7c1b      	ldrb	r3, [r3, #16]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d10d      	bne.n	801188a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011876:	f107 0208 	add.w	r2, r7, #8
 801187a:	4610      	mov	r0, r2
 801187c:	4798      	blx	r3
 801187e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	3301      	adds	r3, #1
 8011884:	2207      	movs	r2, #7
 8011886:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011888:	e00f      	b.n	80118aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801188a:	6839      	ldr	r1, [r7, #0]
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f000 fa10 	bl	8011cb2 <USBD_CtlError>
        err++;
 8011892:	7afb      	ldrb	r3, [r7, #11]
 8011894:	3301      	adds	r3, #1
 8011896:	72fb      	strb	r3, [r7, #11]
      break;
 8011898:	e007      	b.n	80118aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801189a:	6839      	ldr	r1, [r7, #0]
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f000 fa08 	bl	8011cb2 <USBD_CtlError>
      err++;
 80118a2:	7afb      	ldrb	r3, [r7, #11]
 80118a4:	3301      	adds	r3, #1
 80118a6:	72fb      	strb	r3, [r7, #11]
      break;
 80118a8:	bf00      	nop
  }

  if (err != 0U)
 80118aa:	7afb      	ldrb	r3, [r7, #11]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d11e      	bne.n	80118ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	88db      	ldrh	r3, [r3, #6]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d016      	beq.n	80118e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80118b8:	893b      	ldrh	r3, [r7, #8]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00e      	beq.n	80118dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	88da      	ldrh	r2, [r3, #6]
 80118c2:	893b      	ldrh	r3, [r7, #8]
 80118c4:	4293      	cmp	r3, r2
 80118c6:	bf28      	it	cs
 80118c8:	4613      	movcs	r3, r2
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80118ce:	893b      	ldrh	r3, [r7, #8]
 80118d0:	461a      	mov	r2, r3
 80118d2:	68f9      	ldr	r1, [r7, #12]
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f000 fa5d 	bl	8011d94 <USBD_CtlSendData>
 80118da:	e009      	b.n	80118f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80118dc:	6839      	ldr	r1, [r7, #0]
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f000 f9e7 	bl	8011cb2 <USBD_CtlError>
 80118e4:	e004      	b.n	80118f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f000 faae 	bl	8011e48 <USBD_CtlSendStatus>
 80118ec:	e000      	b.n	80118f0 <USBD_GetDescriptor+0x2cc>
    return;
 80118ee:	bf00      	nop
  }
}
 80118f0:	3710      	adds	r7, #16
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}
 80118f6:	bf00      	nop

080118f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b084      	sub	sp, #16
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	889b      	ldrh	r3, [r3, #4]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d131      	bne.n	801196e <USBD_SetAddress+0x76>
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	88db      	ldrh	r3, [r3, #6]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d12d      	bne.n	801196e <USBD_SetAddress+0x76>
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	885b      	ldrh	r3, [r3, #2]
 8011916:	2b7f      	cmp	r3, #127	; 0x7f
 8011918:	d829      	bhi.n	801196e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	885b      	ldrh	r3, [r3, #2]
 801191e:	b2db      	uxtb	r3, r3
 8011920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011924:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801192c:	b2db      	uxtb	r3, r3
 801192e:	2b03      	cmp	r3, #3
 8011930:	d104      	bne.n	801193c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011932:	6839      	ldr	r1, [r7, #0]
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f000 f9bc 	bl	8011cb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801193a:	e01d      	b.n	8011978 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	7bfa      	ldrb	r2, [r7, #15]
 8011940:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011944:	7bfb      	ldrb	r3, [r7, #15]
 8011946:	4619      	mov	r1, r3
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f001 f96b 	bl	8012c24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f000 fa7a 	bl	8011e48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011954:	7bfb      	ldrb	r3, [r7, #15]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d004      	beq.n	8011964 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2202      	movs	r2, #2
 801195e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011962:	e009      	b.n	8011978 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2201      	movs	r2, #1
 8011968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801196c:	e004      	b.n	8011978 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801196e:	6839      	ldr	r1, [r7, #0]
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f000 f99e 	bl	8011cb2 <USBD_CtlError>
  }
}
 8011976:	bf00      	nop
 8011978:	bf00      	nop
 801197a:	3710      	adds	r7, #16
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}

08011980 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801198a:	2300      	movs	r3, #0
 801198c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	885b      	ldrh	r3, [r3, #2]
 8011992:	b2da      	uxtb	r2, r3
 8011994:	4b4e      	ldr	r3, [pc, #312]	; (8011ad0 <USBD_SetConfig+0x150>)
 8011996:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011998:	4b4d      	ldr	r3, [pc, #308]	; (8011ad0 <USBD_SetConfig+0x150>)
 801199a:	781b      	ldrb	r3, [r3, #0]
 801199c:	2b01      	cmp	r3, #1
 801199e:	d905      	bls.n	80119ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80119a0:	6839      	ldr	r1, [r7, #0]
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 f985 	bl	8011cb2 <USBD_CtlError>
    return USBD_FAIL;
 80119a8:	2303      	movs	r3, #3
 80119aa:	e08c      	b.n	8011ac6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	2b02      	cmp	r3, #2
 80119b6:	d002      	beq.n	80119be <USBD_SetConfig+0x3e>
 80119b8:	2b03      	cmp	r3, #3
 80119ba:	d029      	beq.n	8011a10 <USBD_SetConfig+0x90>
 80119bc:	e075      	b.n	8011aaa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80119be:	4b44      	ldr	r3, [pc, #272]	; (8011ad0 <USBD_SetConfig+0x150>)
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d020      	beq.n	8011a08 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80119c6:	4b42      	ldr	r3, [pc, #264]	; (8011ad0 <USBD_SetConfig+0x150>)
 80119c8:	781b      	ldrb	r3, [r3, #0]
 80119ca:	461a      	mov	r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80119d0:	4b3f      	ldr	r3, [pc, #252]	; (8011ad0 <USBD_SetConfig+0x150>)
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	4619      	mov	r1, r3
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f7fe ffe7 	bl	80109aa <USBD_SetClassConfig>
 80119dc:	4603      	mov	r3, r0
 80119de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80119e0:	7bfb      	ldrb	r3, [r7, #15]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d008      	beq.n	80119f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80119e6:	6839      	ldr	r1, [r7, #0]
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f000 f962 	bl	8011cb2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2202      	movs	r2, #2
 80119f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80119f6:	e065      	b.n	8011ac4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f000 fa25 	bl	8011e48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2203      	movs	r2, #3
 8011a02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011a06:	e05d      	b.n	8011ac4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f000 fa1d 	bl	8011e48 <USBD_CtlSendStatus>
      break;
 8011a0e:	e059      	b.n	8011ac4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011a10:	4b2f      	ldr	r3, [pc, #188]	; (8011ad0 <USBD_SetConfig+0x150>)
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d112      	bne.n	8011a3e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2202      	movs	r2, #2
 8011a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011a20:	4b2b      	ldr	r3, [pc, #172]	; (8011ad0 <USBD_SetConfig+0x150>)
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	461a      	mov	r2, r3
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011a2a:	4b29      	ldr	r3, [pc, #164]	; (8011ad0 <USBD_SetConfig+0x150>)
 8011a2c:	781b      	ldrb	r3, [r3, #0]
 8011a2e:	4619      	mov	r1, r3
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f7fe ffd6 	bl	80109e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f000 fa06 	bl	8011e48 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011a3c:	e042      	b.n	8011ac4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011a3e:	4b24      	ldr	r3, [pc, #144]	; (8011ad0 <USBD_SetConfig+0x150>)
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	461a      	mov	r2, r3
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d02a      	beq.n	8011aa2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	b2db      	uxtb	r3, r3
 8011a52:	4619      	mov	r1, r3
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f7fe ffc4 	bl	80109e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011a5a:	4b1d      	ldr	r3, [pc, #116]	; (8011ad0 <USBD_SetConfig+0x150>)
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	461a      	mov	r2, r3
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011a64:	4b1a      	ldr	r3, [pc, #104]	; (8011ad0 <USBD_SetConfig+0x150>)
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	4619      	mov	r1, r3
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f7fe ff9d 	bl	80109aa <USBD_SetClassConfig>
 8011a70:	4603      	mov	r3, r0
 8011a72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011a74:	7bfb      	ldrb	r3, [r7, #15]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d00f      	beq.n	8011a9a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011a7a:	6839      	ldr	r1, [r7, #0]
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f000 f918 	bl	8011cb2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	685b      	ldr	r3, [r3, #4]
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	4619      	mov	r1, r3
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f7fe ffa9 	bl	80109e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2202      	movs	r2, #2
 8011a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011a98:	e014      	b.n	8011ac4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f000 f9d4 	bl	8011e48 <USBD_CtlSendStatus>
      break;
 8011aa0:	e010      	b.n	8011ac4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f000 f9d0 	bl	8011e48 <USBD_CtlSendStatus>
      break;
 8011aa8:	e00c      	b.n	8011ac4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011aaa:	6839      	ldr	r1, [r7, #0]
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f000 f900 	bl	8011cb2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011ab2:	4b07      	ldr	r3, [pc, #28]	; (8011ad0 <USBD_SetConfig+0x150>)
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f7fe ff92 	bl	80109e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011abe:	2303      	movs	r3, #3
 8011ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8011ac2:	bf00      	nop
  }

  return ret;
 8011ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3710      	adds	r7, #16
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	2000521c 	.word	0x2000521c

08011ad4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	88db      	ldrh	r3, [r3, #6]
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d004      	beq.n	8011af0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011ae6:	6839      	ldr	r1, [r7, #0]
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f000 f8e2 	bl	8011cb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011aee:	e023      	b.n	8011b38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	2b02      	cmp	r3, #2
 8011afa:	dc02      	bgt.n	8011b02 <USBD_GetConfig+0x2e>
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	dc03      	bgt.n	8011b08 <USBD_GetConfig+0x34>
 8011b00:	e015      	b.n	8011b2e <USBD_GetConfig+0x5a>
 8011b02:	2b03      	cmp	r3, #3
 8011b04:	d00b      	beq.n	8011b1e <USBD_GetConfig+0x4a>
 8011b06:	e012      	b.n	8011b2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	3308      	adds	r3, #8
 8011b12:	2201      	movs	r2, #1
 8011b14:	4619      	mov	r1, r3
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f000 f93c 	bl	8011d94 <USBD_CtlSendData>
        break;
 8011b1c:	e00c      	b.n	8011b38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	3304      	adds	r3, #4
 8011b22:	2201      	movs	r2, #1
 8011b24:	4619      	mov	r1, r3
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	f000 f934 	bl	8011d94 <USBD_CtlSendData>
        break;
 8011b2c:	e004      	b.n	8011b38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011b2e:	6839      	ldr	r1, [r7, #0]
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f000 f8be 	bl	8011cb2 <USBD_CtlError>
        break;
 8011b36:	bf00      	nop
}
 8011b38:	bf00      	nop
 8011b3a:	3708      	adds	r7, #8
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	3b01      	subs	r3, #1
 8011b54:	2b02      	cmp	r3, #2
 8011b56:	d81e      	bhi.n	8011b96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	88db      	ldrh	r3, [r3, #6]
 8011b5c:	2b02      	cmp	r3, #2
 8011b5e:	d004      	beq.n	8011b6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011b60:	6839      	ldr	r1, [r7, #0]
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 f8a5 	bl	8011cb2 <USBD_CtlError>
        break;
 8011b68:	e01a      	b.n	8011ba0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2201      	movs	r2, #1
 8011b6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d005      	beq.n	8011b86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	68db      	ldr	r3, [r3, #12]
 8011b7e:	f043 0202 	orr.w	r2, r3, #2
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	330c      	adds	r3, #12
 8011b8a:	2202      	movs	r2, #2
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f000 f900 	bl	8011d94 <USBD_CtlSendData>
      break;
 8011b94:	e004      	b.n	8011ba0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011b96:	6839      	ldr	r1, [r7, #0]
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f000 f88a 	bl	8011cb2 <USBD_CtlError>
      break;
 8011b9e:	bf00      	nop
  }
}
 8011ba0:	bf00      	nop
 8011ba2:	3708      	adds	r7, #8
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}

08011ba8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	885b      	ldrh	r3, [r3, #2]
 8011bb6:	2b01      	cmp	r3, #1
 8011bb8:	d107      	bne.n	8011bca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f000 f940 	bl	8011e48 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011bc8:	e013      	b.n	8011bf2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	885b      	ldrh	r3, [r3, #2]
 8011bce:	2b02      	cmp	r3, #2
 8011bd0:	d10b      	bne.n	8011bea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	889b      	ldrh	r3, [r3, #4]
 8011bd6:	0a1b      	lsrs	r3, r3, #8
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	b2da      	uxtb	r2, r3
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f000 f930 	bl	8011e48 <USBD_CtlSendStatus>
}
 8011be8:	e003      	b.n	8011bf2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011bea:	6839      	ldr	r1, [r7, #0]
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f000 f860 	bl	8011cb2 <USBD_CtlError>
}
 8011bf2:	bf00      	nop
 8011bf4:	3708      	adds	r7, #8
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}

08011bfa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bfa:	b580      	push	{r7, lr}
 8011bfc:	b082      	sub	sp, #8
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
 8011c02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c0a:	b2db      	uxtb	r3, r3
 8011c0c:	3b01      	subs	r3, #1
 8011c0e:	2b02      	cmp	r3, #2
 8011c10:	d80b      	bhi.n	8011c2a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	885b      	ldrh	r3, [r3, #2]
 8011c16:	2b01      	cmp	r3, #1
 8011c18:	d10c      	bne.n	8011c34 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f000 f910 	bl	8011e48 <USBD_CtlSendStatus>
      }
      break;
 8011c28:	e004      	b.n	8011c34 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011c2a:	6839      	ldr	r1, [r7, #0]
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f000 f840 	bl	8011cb2 <USBD_CtlError>
      break;
 8011c32:	e000      	b.n	8011c36 <USBD_ClrFeature+0x3c>
      break;
 8011c34:	bf00      	nop
  }
}
 8011c36:	bf00      	nop
 8011c38:	3708      	adds	r7, #8
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b084      	sub	sp, #16
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
 8011c46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	781a      	ldrb	r2, [r3, #0]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	3301      	adds	r3, #1
 8011c58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	781a      	ldrb	r2, [r3, #0]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	3301      	adds	r3, #1
 8011c66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011c68:	68f8      	ldr	r0, [r7, #12]
 8011c6a:	f7ff fa41 	bl	80110f0 <SWAPBYTE>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	461a      	mov	r2, r3
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	3301      	adds	r3, #1
 8011c7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	3301      	adds	r3, #1
 8011c80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011c82:	68f8      	ldr	r0, [r7, #12]
 8011c84:	f7ff fa34 	bl	80110f0 <SWAPBYTE>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	3301      	adds	r3, #1
 8011c94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	3301      	adds	r3, #1
 8011c9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011c9c:	68f8      	ldr	r0, [r7, #12]
 8011c9e:	f7ff fa27 	bl	80110f0 <SWAPBYTE>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	80da      	strh	r2, [r3, #6]
}
 8011caa:	bf00      	nop
 8011cac:	3710      	adds	r7, #16
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}

08011cb2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cb2:	b580      	push	{r7, lr}
 8011cb4:	b082      	sub	sp, #8
 8011cb6:	af00      	add	r7, sp, #0
 8011cb8:	6078      	str	r0, [r7, #4]
 8011cba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011cbc:	2180      	movs	r1, #128	; 0x80
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f000 ff46 	bl	8012b50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011cc4:	2100      	movs	r1, #0
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f000 ff42 	bl	8012b50 <USBD_LL_StallEP>
}
 8011ccc:	bf00      	nop
 8011cce:	3708      	adds	r7, #8
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}

08011cd4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b086      	sub	sp, #24
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d036      	beq.n	8011d58 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011cee:	6938      	ldr	r0, [r7, #16]
 8011cf0:	f000 f836 	bl	8011d60 <USBD_GetLen>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	b29b      	uxth	r3, r3
 8011cfa:	005b      	lsls	r3, r3, #1
 8011cfc:	b29a      	uxth	r2, r3
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011d02:	7dfb      	ldrb	r3, [r7, #23]
 8011d04:	68ba      	ldr	r2, [r7, #8]
 8011d06:	4413      	add	r3, r2
 8011d08:	687a      	ldr	r2, [r7, #4]
 8011d0a:	7812      	ldrb	r2, [r2, #0]
 8011d0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8011d0e:	7dfb      	ldrb	r3, [r7, #23]
 8011d10:	3301      	adds	r3, #1
 8011d12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011d14:	7dfb      	ldrb	r3, [r7, #23]
 8011d16:	68ba      	ldr	r2, [r7, #8]
 8011d18:	4413      	add	r3, r2
 8011d1a:	2203      	movs	r2, #3
 8011d1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8011d1e:	7dfb      	ldrb	r3, [r7, #23]
 8011d20:	3301      	adds	r3, #1
 8011d22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011d24:	e013      	b.n	8011d4e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011d26:	7dfb      	ldrb	r3, [r7, #23]
 8011d28:	68ba      	ldr	r2, [r7, #8]
 8011d2a:	4413      	add	r3, r2
 8011d2c:	693a      	ldr	r2, [r7, #16]
 8011d2e:	7812      	ldrb	r2, [r2, #0]
 8011d30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	3301      	adds	r3, #1
 8011d36:	613b      	str	r3, [r7, #16]
    idx++;
 8011d38:	7dfb      	ldrb	r3, [r7, #23]
 8011d3a:	3301      	adds	r3, #1
 8011d3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011d3e:	7dfb      	ldrb	r3, [r7, #23]
 8011d40:	68ba      	ldr	r2, [r7, #8]
 8011d42:	4413      	add	r3, r2
 8011d44:	2200      	movs	r2, #0
 8011d46:	701a      	strb	r2, [r3, #0]
    idx++;
 8011d48:	7dfb      	ldrb	r3, [r7, #23]
 8011d4a:	3301      	adds	r3, #1
 8011d4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d1e7      	bne.n	8011d26 <USBD_GetString+0x52>
 8011d56:	e000      	b.n	8011d5a <USBD_GetString+0x86>
    return;
 8011d58:	bf00      	nop
  }
}
 8011d5a:	3718      	adds	r7, #24
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}

08011d60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b085      	sub	sp, #20
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011d70:	e005      	b.n	8011d7e <USBD_GetLen+0x1e>
  {
    len++;
 8011d72:	7bfb      	ldrb	r3, [r7, #15]
 8011d74:	3301      	adds	r3, #1
 8011d76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d1f5      	bne.n	8011d72 <USBD_GetLen+0x12>
  }

  return len;
 8011d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3714      	adds	r7, #20
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr

08011d94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b084      	sub	sp, #16
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	60f8      	str	r0, [r7, #12]
 8011d9c:	60b9      	str	r1, [r7, #8]
 8011d9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	2202      	movs	r2, #2
 8011da4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	687a      	ldr	r2, [r7, #4]
 8011dac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	68ba      	ldr	r2, [r7, #8]
 8011db8:	2100      	movs	r1, #0
 8011dba:	68f8      	ldr	r0, [r7, #12]
 8011dbc:	f000 ff51 	bl	8012c62 <USBD_LL_Transmit>

  return USBD_OK;
 8011dc0:	2300      	movs	r3, #0
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}

08011dca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011dca:	b580      	push	{r7, lr}
 8011dcc:	b084      	sub	sp, #16
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	60f8      	str	r0, [r7, #12]
 8011dd2:	60b9      	str	r1, [r7, #8]
 8011dd4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	68ba      	ldr	r2, [r7, #8]
 8011dda:	2100      	movs	r1, #0
 8011ddc:	68f8      	ldr	r0, [r7, #12]
 8011dde:	f000 ff40 	bl	8012c62 <USBD_LL_Transmit>

  return USBD_OK;
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3710      	adds	r7, #16
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2203      	movs	r2, #3
 8011dfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	68ba      	ldr	r2, [r7, #8]
 8011e14:	2100      	movs	r1, #0
 8011e16:	68f8      	ldr	r0, [r7, #12]
 8011e18:	f000 ff44 	bl	8012ca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e1c:	2300      	movs	r3, #0
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	3710      	adds	r7, #16
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}

08011e26 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011e26:	b580      	push	{r7, lr}
 8011e28:	b084      	sub	sp, #16
 8011e2a:	af00      	add	r7, sp, #0
 8011e2c:	60f8      	str	r0, [r7, #12]
 8011e2e:	60b9      	str	r1, [r7, #8]
 8011e30:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	68ba      	ldr	r2, [r7, #8]
 8011e36:	2100      	movs	r1, #0
 8011e38:	68f8      	ldr	r0, [r7, #12]
 8011e3a:	f000 ff33 	bl	8012ca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e3e:	2300      	movs	r3, #0
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3710      	adds	r7, #16
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2204      	movs	r2, #4
 8011e54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011e58:	2300      	movs	r3, #0
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	2100      	movs	r1, #0
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 feff 	bl	8012c62 <USBD_LL_Transmit>

  return USBD_OK;
 8011e64:	2300      	movs	r3, #0
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3708      	adds	r7, #8
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}

08011e6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011e6e:	b580      	push	{r7, lr}
 8011e70:	b082      	sub	sp, #8
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2205      	movs	r2, #5
 8011e7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e7e:	2300      	movs	r3, #0
 8011e80:	2200      	movs	r2, #0
 8011e82:	2100      	movs	r1, #0
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f000 ff0d 	bl	8012ca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e8a:	2300      	movs	r3, #0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3708      	adds	r7, #8
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}

08011e94 <USBD_GetRxCount>:
  * @param  pdev: device instance
  * @param  ep_addr: endpoint address
  * @retval Rx Data blength
  */
uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b082      	sub	sp, #8
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	460b      	mov	r3, r1
 8011e9e:	70fb      	strb	r3, [r7, #3]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 8011ea0:	78fb      	ldrb	r3, [r7, #3]
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f000 ff1e 	bl	8012ce6 <USBD_LL_GetRxDataSize>
 8011eaa:	4603      	mov	r3, r0
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3708      	adds	r7, #8
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8011eb8:	2201      	movs	r2, #1
 8011eba:	4924      	ldr	r1, [pc, #144]	; (8011f4c <MX_USB_DEVICE_Init+0x98>)
 8011ebc:	4824      	ldr	r0, [pc, #144]	; (8011f50 <MX_USB_DEVICE_Init+0x9c>)
 8011ebe:	f7fe fcf7 	bl	80108b0 <USBD_Init>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d001      	beq.n	8011ecc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011ec8:	f7f3 fd5a 	bl	8005980 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8011ecc:	4921      	ldr	r1, [pc, #132]	; (8011f54 <MX_USB_DEVICE_Init+0xa0>)
 8011ece:	4820      	ldr	r0, [pc, #128]	; (8011f50 <MX_USB_DEVICE_Init+0x9c>)
 8011ed0:	f7fe fd1e 	bl	8010910 <USBD_RegisterClass>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d001      	beq.n	8011ede <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011eda:	f7f3 fd51 	bl	8005980 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8011ede:	491e      	ldr	r1, [pc, #120]	; (8011f58 <MX_USB_DEVICE_Init+0xa4>)
 8011ee0:	481b      	ldr	r0, [pc, #108]	; (8011f50 <MX_USB_DEVICE_Init+0x9c>)
 8011ee2:	f7fe fc0f 	bl	8010704 <USBD_CDC_RegisterInterface>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d001      	beq.n	8011ef0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011eec:	f7f3 fd48 	bl	8005980 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8011ef0:	4817      	ldr	r0, [pc, #92]	; (8011f50 <MX_USB_DEVICE_Init+0x9c>)
 8011ef2:	f7fe fd43 	bl	801097c <USBD_Start>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d001      	beq.n	8011f00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011efc:	f7f3 fd40 	bl	8005980 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011f00:	2200      	movs	r2, #0
 8011f02:	4916      	ldr	r1, [pc, #88]	; (8011f5c <MX_USB_DEVICE_Init+0xa8>)
 8011f04:	4816      	ldr	r0, [pc, #88]	; (8011f60 <MX_USB_DEVICE_Init+0xac>)
 8011f06:	f7fe fcd3 	bl	80108b0 <USBD_Init>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d001      	beq.n	8011f14 <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 8011f10:	f7f3 fd36 	bl	8005980 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011f14:	490f      	ldr	r1, [pc, #60]	; (8011f54 <MX_USB_DEVICE_Init+0xa0>)
 8011f16:	4812      	ldr	r0, [pc, #72]	; (8011f60 <MX_USB_DEVICE_Init+0xac>)
 8011f18:	f7fe fcfa 	bl	8010910 <USBD_RegisterClass>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d001      	beq.n	8011f26 <MX_USB_DEVICE_Init+0x72>
  {
    Error_Handler();
 8011f22:	f7f3 fd2d 	bl	8005980 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011f26:	490f      	ldr	r1, [pc, #60]	; (8011f64 <MX_USB_DEVICE_Init+0xb0>)
 8011f28:	480d      	ldr	r0, [pc, #52]	; (8011f60 <MX_USB_DEVICE_Init+0xac>)
 8011f2a:	f7fe fbeb 	bl	8010704 <USBD_CDC_RegisterInterface>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d001      	beq.n	8011f38 <MX_USB_DEVICE_Init+0x84>
  {
    Error_Handler();
 8011f34:	f7f3 fd24 	bl	8005980 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011f38:	4809      	ldr	r0, [pc, #36]	; (8011f60 <MX_USB_DEVICE_Init+0xac>)
 8011f3a:	f7fe fd1f 	bl	801097c <USBD_Start>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d001      	beq.n	8011f48 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 8011f44:	f7f3 fd1c 	bl	8005980 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011f48:	bf00      	nop
 8011f4a:	bd80      	pop	{r7, pc}
 8011f4c:	20000228 	.word	0x20000228
 8011f50:	20005220 	.word	0x20005220
 8011f54:	20000150 	.word	0x20000150
 8011f58:	200001e4 	.word	0x200001e4
 8011f5c:	200001f8 	.word	0x200001f8
 8011f60:	200054fc 	.word	0x200054fc
 8011f64:	200001d0 	.word	0x200001d0

08011f68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	4905      	ldr	r1, [pc, #20]	; (8011f84 <CDC_Init_FS+0x1c>)
 8011f70:	4805      	ldr	r0, [pc, #20]	; (8011f88 <CDC_Init_FS+0x20>)
 8011f72:	f7fe fbe1 	bl	8010738 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011f76:	4905      	ldr	r1, [pc, #20]	; (8011f8c <CDC_Init_FS+0x24>)
 8011f78:	4803      	ldr	r0, [pc, #12]	; (8011f88 <CDC_Init_FS+0x20>)
 8011f7a:	f7fe fbff 	bl	801077c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011f7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	20005fd8 	.word	0x20005fd8
 8011f88:	200054fc 	.word	0x200054fc
 8011f8c:	200057d8 	.word	0x200057d8

08011f90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011f90:	b480      	push	{r7}
 8011f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011f94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr

08011fa0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b083      	sub	sp, #12
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	6039      	str	r1, [r7, #0]
 8011faa:	71fb      	strb	r3, [r7, #7]
 8011fac:	4613      	mov	r3, r2
 8011fae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011fb0:	79fb      	ldrb	r3, [r7, #7]
 8011fb2:	2b23      	cmp	r3, #35	; 0x23
 8011fb4:	d84a      	bhi.n	801204c <CDC_Control_FS+0xac>
 8011fb6:	a201      	add	r2, pc, #4	; (adr r2, 8011fbc <CDC_Control_FS+0x1c>)
 8011fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fbc:	0801204d 	.word	0x0801204d
 8011fc0:	0801204d 	.word	0x0801204d
 8011fc4:	0801204d 	.word	0x0801204d
 8011fc8:	0801204d 	.word	0x0801204d
 8011fcc:	0801204d 	.word	0x0801204d
 8011fd0:	0801204d 	.word	0x0801204d
 8011fd4:	0801204d 	.word	0x0801204d
 8011fd8:	0801204d 	.word	0x0801204d
 8011fdc:	0801204d 	.word	0x0801204d
 8011fe0:	0801204d 	.word	0x0801204d
 8011fe4:	0801204d 	.word	0x0801204d
 8011fe8:	0801204d 	.word	0x0801204d
 8011fec:	0801204d 	.word	0x0801204d
 8011ff0:	0801204d 	.word	0x0801204d
 8011ff4:	0801204d 	.word	0x0801204d
 8011ff8:	0801204d 	.word	0x0801204d
 8011ffc:	0801204d 	.word	0x0801204d
 8012000:	0801204d 	.word	0x0801204d
 8012004:	0801204d 	.word	0x0801204d
 8012008:	0801204d 	.word	0x0801204d
 801200c:	0801204d 	.word	0x0801204d
 8012010:	0801204d 	.word	0x0801204d
 8012014:	0801204d 	.word	0x0801204d
 8012018:	0801204d 	.word	0x0801204d
 801201c:	0801204d 	.word	0x0801204d
 8012020:	0801204d 	.word	0x0801204d
 8012024:	0801204d 	.word	0x0801204d
 8012028:	0801204d 	.word	0x0801204d
 801202c:	0801204d 	.word	0x0801204d
 8012030:	0801204d 	.word	0x0801204d
 8012034:	0801204d 	.word	0x0801204d
 8012038:	0801204d 	.word	0x0801204d
 801203c:	0801204d 	.word	0x0801204d
 8012040:	0801204d 	.word	0x0801204d
 8012044:	0801204d 	.word	0x0801204d
 8012048:	0801204d 	.word	0x0801204d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801204c:	bf00      	nop
  }

  return (USBD_OK);
 801204e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012050:	4618      	mov	r0, r3
 8012052:	370c      	adds	r7, #12
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr

0801205c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012066:	6879      	ldr	r1, [r7, #4]
 8012068:	4805      	ldr	r0, [pc, #20]	; (8012080 <CDC_Receive_FS+0x24>)
 801206a:	f7fe fb87 	bl	801077c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801206e:	4804      	ldr	r0, [pc, #16]	; (8012080 <CDC_Receive_FS+0x24>)
 8012070:	f7fe fbe8 	bl	8010844 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012074:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012076:	4618      	mov	r0, r3
 8012078:	3708      	adds	r7, #8
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	200054fc 	.word	0x200054fc

08012084 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012084:	b480      	push	{r7}
 8012086:	b087      	sub	sp, #28
 8012088:	af00      	add	r7, sp, #0
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	60b9      	str	r1, [r7, #8]
 801208e:	4613      	mov	r3, r2
 8012090:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012092:	2300      	movs	r3, #0
 8012094:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012096:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801209a:	4618      	mov	r0, r3
 801209c:	371c      	adds	r7, #28
 801209e:	46bd      	mov	sp, r7
 80120a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a4:	4770      	bx	lr
	...

080120a8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80120ac:	2200      	movs	r2, #0
 80120ae:	4905      	ldr	r1, [pc, #20]	; (80120c4 <CDC_Init_HS+0x1c>)
 80120b0:	4805      	ldr	r0, [pc, #20]	; (80120c8 <CDC_Init_HS+0x20>)
 80120b2:	f7fe fb41 	bl	8010738 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80120b6:	4905      	ldr	r1, [pc, #20]	; (80120cc <CDC_Init_HS+0x24>)
 80120b8:	4803      	ldr	r0, [pc, #12]	; (80120c8 <CDC_Init_HS+0x20>)
 80120ba:	f7fe fb5f 	bl	801077c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80120be:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	bd80      	pop	{r7, pc}
 80120c4:	20006fd8 	.word	0x20006fd8
 80120c8:	20005220 	.word	0x20005220
 80120cc:	200067d8 	.word	0x200067d8

080120d0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80120d0:	b480      	push	{r7}
 80120d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80120d4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr

080120e0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80120e0:	b480      	push	{r7}
 80120e2:	b083      	sub	sp, #12
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	4603      	mov	r3, r0
 80120e8:	6039      	str	r1, [r7, #0]
 80120ea:	71fb      	strb	r3, [r7, #7]
 80120ec:	4613      	mov	r3, r2
 80120ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80120f0:	79fb      	ldrb	r3, [r7, #7]
 80120f2:	2b23      	cmp	r3, #35	; 0x23
 80120f4:	d84a      	bhi.n	801218c <CDC_Control_HS+0xac>
 80120f6:	a201      	add	r2, pc, #4	; (adr r2, 80120fc <CDC_Control_HS+0x1c>)
 80120f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120fc:	0801218d 	.word	0x0801218d
 8012100:	0801218d 	.word	0x0801218d
 8012104:	0801218d 	.word	0x0801218d
 8012108:	0801218d 	.word	0x0801218d
 801210c:	0801218d 	.word	0x0801218d
 8012110:	0801218d 	.word	0x0801218d
 8012114:	0801218d 	.word	0x0801218d
 8012118:	0801218d 	.word	0x0801218d
 801211c:	0801218d 	.word	0x0801218d
 8012120:	0801218d 	.word	0x0801218d
 8012124:	0801218d 	.word	0x0801218d
 8012128:	0801218d 	.word	0x0801218d
 801212c:	0801218d 	.word	0x0801218d
 8012130:	0801218d 	.word	0x0801218d
 8012134:	0801218d 	.word	0x0801218d
 8012138:	0801218d 	.word	0x0801218d
 801213c:	0801218d 	.word	0x0801218d
 8012140:	0801218d 	.word	0x0801218d
 8012144:	0801218d 	.word	0x0801218d
 8012148:	0801218d 	.word	0x0801218d
 801214c:	0801218d 	.word	0x0801218d
 8012150:	0801218d 	.word	0x0801218d
 8012154:	0801218d 	.word	0x0801218d
 8012158:	0801218d 	.word	0x0801218d
 801215c:	0801218d 	.word	0x0801218d
 8012160:	0801218d 	.word	0x0801218d
 8012164:	0801218d 	.word	0x0801218d
 8012168:	0801218d 	.word	0x0801218d
 801216c:	0801218d 	.word	0x0801218d
 8012170:	0801218d 	.word	0x0801218d
 8012174:	0801218d 	.word	0x0801218d
 8012178:	0801218d 	.word	0x0801218d
 801217c:	0801218d 	.word	0x0801218d
 8012180:	0801218d 	.word	0x0801218d
 8012184:	0801218d 	.word	0x0801218d
 8012188:	0801218d 	.word	0x0801218d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801218c:	bf00      	nop
  }

  return (USBD_OK);
 801218e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8012190:	4618      	mov	r0, r3
 8012192:	370c      	adds	r7, #12
 8012194:	46bd      	mov	sp, r7
 8012196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219a:	4770      	bx	lr

0801219c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b082      	sub	sp, #8
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  EP3_OUT_Callback(Buf, *Len);
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4619      	mov	r1, r3
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f7f2 faef 	bl	8004790 <EP3_OUT_Callback>

  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80121b2:	6879      	ldr	r1, [r7, #4]
 80121b4:	4805      	ldr	r0, [pc, #20]	; (80121cc <CDC_Receive_HS+0x30>)
 80121b6:	f7fe fae1 	bl	801077c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80121ba:	4804      	ldr	r0, [pc, #16]	; (80121cc <CDC_Receive_HS+0x30>)
 80121bc:	f7fe fb42 	bl	8010844 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80121c0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	3708      	adds	r7, #8
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop
 80121cc:	20005220 	.word	0x20005220

080121d0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b084      	sub	sp, #16
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	460b      	mov	r3, r1
 80121da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80121dc:	2300      	movs	r3, #0
 80121de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80121e0:	4b10      	ldr	r3, [pc, #64]	; (8012224 <CDC_Transmit_HS+0x54>)
 80121e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80121e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d001      	beq.n	80121f6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80121f2:	2301      	movs	r3, #1
 80121f4:	e012      	b.n	801221c <CDC_Transmit_HS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80121f6:	887b      	ldrh	r3, [r7, #2]
 80121f8:	461a      	mov	r2, r3
 80121fa:	6879      	ldr	r1, [r7, #4]
 80121fc:	4809      	ldr	r0, [pc, #36]	; (8012224 <CDC_Transmit_HS+0x54>)
 80121fe:	f7fe fa9b 	bl	8010738 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8012202:	4808      	ldr	r0, [pc, #32]	; (8012224 <CDC_Transmit_HS+0x54>)
 8012204:	f7fe fad8 	bl	80107b8 <USBD_CDC_TransmitPacket>
 8012208:	4603      	mov	r3, r0
 801220a:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(500);
 801220c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012210:	f7f7 f998 	bl	8009544 <HAL_Delay>
  printf("CDC_Transmit_HS \r\n");
 8012214:	4804      	ldr	r0, [pc, #16]	; (8012228 <CDC_Transmit_HS+0x58>)
 8012216:	f000 fee5 	bl	8012fe4 <puts>
  /* USER CODE END 12 */
  return result;
 801221a:	7bfb      	ldrb	r3, [r7, #15]
}
 801221c:	4618      	mov	r0, r3
 801221e:	3710      	adds	r7, #16
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	20005220 	.word	0x20005220
 8012228:	08014b3c 	.word	0x08014b3c

0801222c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b086      	sub	sp, #24
 8012230:	af00      	add	r7, sp, #0
 8012232:	60f8      	str	r0, [r7, #12]
 8012234:	60b9      	str	r1, [r7, #8]
 8012236:	4613      	mov	r3, r2
 8012238:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801223a:	2300      	movs	r3, #0
 801223c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  EP1_IN_Callback();
 801223e:	f7f2 fa01 	bl	8004644 <EP1_IN_Callback>
  printf("EP1_IN \r\n");
 8012242:	4804      	ldr	r0, [pc, #16]	; (8012254 <CDC_TransmitCplt_HS+0x28>)
 8012244:	f000 fece 	bl	8012fe4 <puts>
  /* USER CODE END 14 */
  return result;
 8012248:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801224c:	4618      	mov	r0, r3
 801224e:	3718      	adds	r7, #24
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}
 8012254:	08014b50 	.word	0x08014b50

08012258 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012258:	b480      	push	{r7}
 801225a:	b083      	sub	sp, #12
 801225c:	af00      	add	r7, sp, #0
 801225e:	4603      	mov	r3, r0
 8012260:	6039      	str	r1, [r7, #0]
 8012262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	2212      	movs	r2, #18
 8012268:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801226a:	4b03      	ldr	r3, [pc, #12]	; (8012278 <USBD_HS_DeviceDescriptor+0x20>)
}
 801226c:	4618      	mov	r0, r3
 801226e:	370c      	adds	r7, #12
 8012270:	46bd      	mov	sp, r7
 8012272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012276:	4770      	bx	lr
 8012278:	20000244 	.word	0x20000244

0801227c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801227c:	b480      	push	{r7}
 801227e:	b083      	sub	sp, #12
 8012280:	af00      	add	r7, sp, #0
 8012282:	4603      	mov	r3, r0
 8012284:	6039      	str	r1, [r7, #0]
 8012286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	2204      	movs	r2, #4
 801228c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801228e:	4b03      	ldr	r3, [pc, #12]	; (801229c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8012290:	4618      	mov	r0, r3
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr
 801229c:	20000258 	.word	0x20000258

080122a0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	4603      	mov	r3, r0
 80122a8:	6039      	str	r1, [r7, #0]
 80122aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80122ac:	79fb      	ldrb	r3, [r7, #7]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d105      	bne.n	80122be <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80122b2:	683a      	ldr	r2, [r7, #0]
 80122b4:	4907      	ldr	r1, [pc, #28]	; (80122d4 <USBD_HS_ProductStrDescriptor+0x34>)
 80122b6:	4808      	ldr	r0, [pc, #32]	; (80122d8 <USBD_HS_ProductStrDescriptor+0x38>)
 80122b8:	f7ff fd0c 	bl	8011cd4 <USBD_GetString>
 80122bc:	e004      	b.n	80122c8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80122be:	683a      	ldr	r2, [r7, #0]
 80122c0:	4904      	ldr	r1, [pc, #16]	; (80122d4 <USBD_HS_ProductStrDescriptor+0x34>)
 80122c2:	4805      	ldr	r0, [pc, #20]	; (80122d8 <USBD_HS_ProductStrDescriptor+0x38>)
 80122c4:	f7ff fd06 	bl	8011cd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80122c8:	4b02      	ldr	r3, [pc, #8]	; (80122d4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	3708      	adds	r7, #8
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}
 80122d2:	bf00      	nop
 80122d4:	200077d8 	.word	0x200077d8
 80122d8:	08014b5c 	.word	0x08014b5c

080122dc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	4603      	mov	r3, r0
 80122e4:	6039      	str	r1, [r7, #0]
 80122e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80122e8:	683a      	ldr	r2, [r7, #0]
 80122ea:	4904      	ldr	r1, [pc, #16]	; (80122fc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80122ec:	4804      	ldr	r0, [pc, #16]	; (8012300 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80122ee:	f7ff fcf1 	bl	8011cd4 <USBD_GetString>
  return USBD_StrDesc;
 80122f2:	4b02      	ldr	r3, [pc, #8]	; (80122fc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3708      	adds	r7, #8
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}
 80122fc:	200077d8 	.word	0x200077d8
 8012300:	08014b74 	.word	0x08014b74

08012304 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b082      	sub	sp, #8
 8012308:	af00      	add	r7, sp, #0
 801230a:	4603      	mov	r3, r0
 801230c:	6039      	str	r1, [r7, #0]
 801230e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	221a      	movs	r2, #26
 8012314:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012316:	f000 f8e7 	bl	80124e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801231a:	4b02      	ldr	r3, [pc, #8]	; (8012324 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801231c:	4618      	mov	r0, r3
 801231e:	3708      	adds	r7, #8
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}
 8012324:	2000025c 	.word	0x2000025c

08012328 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b082      	sub	sp, #8
 801232c:	af00      	add	r7, sp, #0
 801232e:	4603      	mov	r3, r0
 8012330:	6039      	str	r1, [r7, #0]
 8012332:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012334:	79fb      	ldrb	r3, [r7, #7]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d105      	bne.n	8012346 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801233a:	683a      	ldr	r2, [r7, #0]
 801233c:	4907      	ldr	r1, [pc, #28]	; (801235c <USBD_HS_ConfigStrDescriptor+0x34>)
 801233e:	4808      	ldr	r0, [pc, #32]	; (8012360 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012340:	f7ff fcc8 	bl	8011cd4 <USBD_GetString>
 8012344:	e004      	b.n	8012350 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012346:	683a      	ldr	r2, [r7, #0]
 8012348:	4904      	ldr	r1, [pc, #16]	; (801235c <USBD_HS_ConfigStrDescriptor+0x34>)
 801234a:	4805      	ldr	r0, [pc, #20]	; (8012360 <USBD_HS_ConfigStrDescriptor+0x38>)
 801234c:	f7ff fcc2 	bl	8011cd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012350:	4b02      	ldr	r3, [pc, #8]	; (801235c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8012352:	4618      	mov	r0, r3
 8012354:	3708      	adds	r7, #8
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	200077d8 	.word	0x200077d8
 8012360:	08014b88 	.word	0x08014b88

08012364 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b082      	sub	sp, #8
 8012368:	af00      	add	r7, sp, #0
 801236a:	4603      	mov	r3, r0
 801236c:	6039      	str	r1, [r7, #0]
 801236e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012370:	79fb      	ldrb	r3, [r7, #7]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d105      	bne.n	8012382 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012376:	683a      	ldr	r2, [r7, #0]
 8012378:	4907      	ldr	r1, [pc, #28]	; (8012398 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801237a:	4808      	ldr	r0, [pc, #32]	; (801239c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801237c:	f7ff fcaa 	bl	8011cd4 <USBD_GetString>
 8012380:	e004      	b.n	801238c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012382:	683a      	ldr	r2, [r7, #0]
 8012384:	4904      	ldr	r1, [pc, #16]	; (8012398 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012386:	4805      	ldr	r0, [pc, #20]	; (801239c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012388:	f7ff fca4 	bl	8011cd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801238c:	4b02      	ldr	r3, [pc, #8]	; (8012398 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801238e:	4618      	mov	r0, r3
 8012390:	3708      	adds	r7, #8
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
 8012396:	bf00      	nop
 8012398:	200077d8 	.word	0x200077d8
 801239c:	08014b94 	.word	0x08014b94

080123a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123a0:	b480      	push	{r7}
 80123a2:	b083      	sub	sp, #12
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	4603      	mov	r3, r0
 80123a8:	6039      	str	r1, [r7, #0]
 80123aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	2212      	movs	r2, #18
 80123b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80123b2:	4b03      	ldr	r3, [pc, #12]	; (80123c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	370c      	adds	r7, #12
 80123b8:	46bd      	mov	sp, r7
 80123ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123be:	4770      	bx	lr
 80123c0:	20000214 	.word	0x20000214

080123c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123c4:	b480      	push	{r7}
 80123c6:	b083      	sub	sp, #12
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	4603      	mov	r3, r0
 80123cc:	6039      	str	r1, [r7, #0]
 80123ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	2204      	movs	r2, #4
 80123d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80123d6:	4b03      	ldr	r3, [pc, #12]	; (80123e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80123d8:	4618      	mov	r0, r3
 80123da:	370c      	adds	r7, #12
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr
 80123e4:	20000258 	.word	0x20000258

080123e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	4603      	mov	r3, r0
 80123f0:	6039      	str	r1, [r7, #0]
 80123f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80123f4:	79fb      	ldrb	r3, [r7, #7]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d105      	bne.n	8012406 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80123fa:	683a      	ldr	r2, [r7, #0]
 80123fc:	4907      	ldr	r1, [pc, #28]	; (801241c <USBD_FS_ProductStrDescriptor+0x34>)
 80123fe:	4808      	ldr	r0, [pc, #32]	; (8012420 <USBD_FS_ProductStrDescriptor+0x38>)
 8012400:	f7ff fc68 	bl	8011cd4 <USBD_GetString>
 8012404:	e004      	b.n	8012410 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012406:	683a      	ldr	r2, [r7, #0]
 8012408:	4904      	ldr	r1, [pc, #16]	; (801241c <USBD_FS_ProductStrDescriptor+0x34>)
 801240a:	4805      	ldr	r0, [pc, #20]	; (8012420 <USBD_FS_ProductStrDescriptor+0x38>)
 801240c:	f7ff fc62 	bl	8011cd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012410:	4b02      	ldr	r3, [pc, #8]	; (801241c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012412:	4618      	mov	r0, r3
 8012414:	3708      	adds	r7, #8
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	200077d8 	.word	0x200077d8
 8012420:	08014b5c 	.word	0x08014b5c

08012424 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0
 801242a:	4603      	mov	r3, r0
 801242c:	6039      	str	r1, [r7, #0]
 801242e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012430:	683a      	ldr	r2, [r7, #0]
 8012432:	4904      	ldr	r1, [pc, #16]	; (8012444 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012434:	4804      	ldr	r0, [pc, #16]	; (8012448 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012436:	f7ff fc4d 	bl	8011cd4 <USBD_GetString>
  return USBD_StrDesc;
 801243a:	4b02      	ldr	r3, [pc, #8]	; (8012444 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801243c:	4618      	mov	r0, r3
 801243e:	3708      	adds	r7, #8
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}
 8012444:	200077d8 	.word	0x200077d8
 8012448:	08014b74 	.word	0x08014b74

0801244c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
 8012452:	4603      	mov	r3, r0
 8012454:	6039      	str	r1, [r7, #0]
 8012456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	221a      	movs	r2, #26
 801245c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801245e:	f000 f843 	bl	80124e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012462:	4b02      	ldr	r3, [pc, #8]	; (801246c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012464:	4618      	mov	r0, r3
 8012466:	3708      	adds	r7, #8
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}
 801246c:	2000025c 	.word	0x2000025c

08012470 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b082      	sub	sp, #8
 8012474:	af00      	add	r7, sp, #0
 8012476:	4603      	mov	r3, r0
 8012478:	6039      	str	r1, [r7, #0]
 801247a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801247c:	79fb      	ldrb	r3, [r7, #7]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d105      	bne.n	801248e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012482:	683a      	ldr	r2, [r7, #0]
 8012484:	4907      	ldr	r1, [pc, #28]	; (80124a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012486:	4808      	ldr	r0, [pc, #32]	; (80124a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012488:	f7ff fc24 	bl	8011cd4 <USBD_GetString>
 801248c:	e004      	b.n	8012498 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801248e:	683a      	ldr	r2, [r7, #0]
 8012490:	4904      	ldr	r1, [pc, #16]	; (80124a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012492:	4805      	ldr	r0, [pc, #20]	; (80124a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012494:	f7ff fc1e 	bl	8011cd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012498:	4b02      	ldr	r3, [pc, #8]	; (80124a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801249a:	4618      	mov	r0, r3
 801249c:	3708      	adds	r7, #8
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	200077d8 	.word	0x200077d8
 80124a8:	08014b88 	.word	0x08014b88

080124ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	4603      	mov	r3, r0
 80124b4:	6039      	str	r1, [r7, #0]
 80124b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80124b8:	79fb      	ldrb	r3, [r7, #7]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d105      	bne.n	80124ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80124be:	683a      	ldr	r2, [r7, #0]
 80124c0:	4907      	ldr	r1, [pc, #28]	; (80124e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80124c2:	4808      	ldr	r0, [pc, #32]	; (80124e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80124c4:	f7ff fc06 	bl	8011cd4 <USBD_GetString>
 80124c8:	e004      	b.n	80124d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80124ca:	683a      	ldr	r2, [r7, #0]
 80124cc:	4904      	ldr	r1, [pc, #16]	; (80124e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80124ce:	4805      	ldr	r0, [pc, #20]	; (80124e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80124d0:	f7ff fc00 	bl	8011cd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80124d4:	4b02      	ldr	r3, [pc, #8]	; (80124e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3708      	adds	r7, #8
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	200077d8 	.word	0x200077d8
 80124e4:	08014b94 	.word	0x08014b94

080124e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b084      	sub	sp, #16
 80124ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80124ee:	68fa      	ldr	r2, [r7, #12]
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	4413      	add	r3, r2
 80124f4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d009      	beq.n	8012510 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80124fc:	2208      	movs	r2, #8
 80124fe:	4906      	ldr	r1, [pc, #24]	; (8012518 <Get_SerialNum+0x30>)
 8012500:	68f8      	ldr	r0, [r7, #12]
 8012502:	f000 f80d 	bl	8012520 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012506:	2204      	movs	r2, #4
 8012508:	4904      	ldr	r1, [pc, #16]	; (801251c <Get_SerialNum+0x34>)
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f000 f808 	bl	8012520 <IntToUnicode>
  }
}
 8012510:	bf00      	nop
 8012512:	3710      	adds	r7, #16
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}
 8012518:	2000025e 	.word	0x2000025e
 801251c:	2000026e 	.word	0x2000026e

08012520 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012520:	b480      	push	{r7}
 8012522:	b087      	sub	sp, #28
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	4613      	mov	r3, r2
 801252c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801252e:	2300      	movs	r3, #0
 8012530:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012532:	2300      	movs	r3, #0
 8012534:	75fb      	strb	r3, [r7, #23]
 8012536:	e027      	b.n	8012588 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	0f1b      	lsrs	r3, r3, #28
 801253c:	2b09      	cmp	r3, #9
 801253e:	d80b      	bhi.n	8012558 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	0f1b      	lsrs	r3, r3, #28
 8012544:	b2da      	uxtb	r2, r3
 8012546:	7dfb      	ldrb	r3, [r7, #23]
 8012548:	005b      	lsls	r3, r3, #1
 801254a:	4619      	mov	r1, r3
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	440b      	add	r3, r1
 8012550:	3230      	adds	r2, #48	; 0x30
 8012552:	b2d2      	uxtb	r2, r2
 8012554:	701a      	strb	r2, [r3, #0]
 8012556:	e00a      	b.n	801256e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	0f1b      	lsrs	r3, r3, #28
 801255c:	b2da      	uxtb	r2, r3
 801255e:	7dfb      	ldrb	r3, [r7, #23]
 8012560:	005b      	lsls	r3, r3, #1
 8012562:	4619      	mov	r1, r3
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	440b      	add	r3, r1
 8012568:	3237      	adds	r2, #55	; 0x37
 801256a:	b2d2      	uxtb	r2, r2
 801256c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	011b      	lsls	r3, r3, #4
 8012572:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012574:	7dfb      	ldrb	r3, [r7, #23]
 8012576:	005b      	lsls	r3, r3, #1
 8012578:	3301      	adds	r3, #1
 801257a:	68ba      	ldr	r2, [r7, #8]
 801257c:	4413      	add	r3, r2
 801257e:	2200      	movs	r2, #0
 8012580:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012582:	7dfb      	ldrb	r3, [r7, #23]
 8012584:	3301      	adds	r3, #1
 8012586:	75fb      	strb	r3, [r7, #23]
 8012588:	7dfa      	ldrb	r2, [r7, #23]
 801258a:	79fb      	ldrb	r3, [r7, #7]
 801258c:	429a      	cmp	r2, r3
 801258e:	d3d3      	bcc.n	8012538 <IntToUnicode+0x18>
  }
}
 8012590:	bf00      	nop
 8012592:	bf00      	nop
 8012594:	371c      	adds	r7, #28
 8012596:	46bd      	mov	sp, r7
 8012598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259c:	4770      	bx	lr
	...

080125a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b08e      	sub	sp, #56	; 0x38
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80125a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125ac:	2200      	movs	r2, #0
 80125ae:	601a      	str	r2, [r3, #0]
 80125b0:	605a      	str	r2, [r3, #4]
 80125b2:	609a      	str	r2, [r3, #8]
 80125b4:	60da      	str	r2, [r3, #12]
 80125b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80125c0:	d13b      	bne.n	801263a <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80125c2:	2300      	movs	r3, #0
 80125c4:	623b      	str	r3, [r7, #32]
 80125c6:	4b69      	ldr	r3, [pc, #420]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 80125c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125ca:	4a68      	ldr	r2, [pc, #416]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 80125cc:	f043 0301 	orr.w	r3, r3, #1
 80125d0:	6313      	str	r3, [r2, #48]	; 0x30
 80125d2:	4b66      	ldr	r3, [pc, #408]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 80125d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125d6:	f003 0301 	and.w	r3, r3, #1
 80125da:	623b      	str	r3, [r7, #32]
 80125dc:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80125de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80125e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80125e4:	2302      	movs	r3, #2
 80125e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125e8:	2300      	movs	r3, #0
 80125ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80125ec:	2303      	movs	r3, #3
 80125ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80125f0:	230a      	movs	r3, #10
 80125f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80125f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125f8:	4619      	mov	r1, r3
 80125fa:	485d      	ldr	r0, [pc, #372]	; (8012770 <HAL_PCD_MspInit+0x1d0>)
 80125fc:	f7f7 fd58 	bl	800a0b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012600:	4b5a      	ldr	r3, [pc, #360]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012604:	4a59      	ldr	r2, [pc, #356]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801260a:	6353      	str	r3, [r2, #52]	; 0x34
 801260c:	2300      	movs	r3, #0
 801260e:	61fb      	str	r3, [r7, #28]
 8012610:	4b56      	ldr	r3, [pc, #344]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012614:	4a55      	ldr	r2, [pc, #340]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801261a:	6453      	str	r3, [r2, #68]	; 0x44
 801261c:	4b53      	ldr	r3, [pc, #332]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 801261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012624:	61fb      	str	r3, [r7, #28]
 8012626:	69fb      	ldr	r3, [r7, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012628:	2200      	movs	r2, #0
 801262a:	2100      	movs	r1, #0
 801262c:	2043      	movs	r0, #67	; 0x43
 801262e:	f7f7 f8dc 	bl	80097ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012632:	2043      	movs	r0, #67	; 0x43
 8012634:	f7f7 f8f5 	bl	8009822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8012638:	e094      	b.n	8012764 <HAL_PCD_MspInit+0x1c4>
  else if(pcdHandle->Instance==USB_OTG_HS)
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	4a4d      	ldr	r2, [pc, #308]	; (8012774 <HAL_PCD_MspInit+0x1d4>)
 8012640:	4293      	cmp	r3, r2
 8012642:	f040 808f 	bne.w	8012764 <HAL_PCD_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012646:	2300      	movs	r3, #0
 8012648:	61bb      	str	r3, [r7, #24]
 801264a:	4b48      	ldr	r3, [pc, #288]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 801264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801264e:	4a47      	ldr	r2, [pc, #284]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012650:	f043 0304 	orr.w	r3, r3, #4
 8012654:	6313      	str	r3, [r2, #48]	; 0x30
 8012656:	4b45      	ldr	r3, [pc, #276]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801265a:	f003 0304 	and.w	r3, r3, #4
 801265e:	61bb      	str	r3, [r7, #24]
 8012660:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012662:	2300      	movs	r3, #0
 8012664:	617b      	str	r3, [r7, #20]
 8012666:	4b41      	ldr	r3, [pc, #260]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801266a:	4a40      	ldr	r2, [pc, #256]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 801266c:	f043 0301 	orr.w	r3, r3, #1
 8012670:	6313      	str	r3, [r2, #48]	; 0x30
 8012672:	4b3e      	ldr	r3, [pc, #248]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012676:	f003 0301 	and.w	r3, r3, #1
 801267a:	617b      	str	r3, [r7, #20]
 801267c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801267e:	2300      	movs	r3, #0
 8012680:	613b      	str	r3, [r7, #16]
 8012682:	4b3a      	ldr	r3, [pc, #232]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012686:	4a39      	ldr	r2, [pc, #228]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012688:	f043 0302 	orr.w	r3, r3, #2
 801268c:	6313      	str	r3, [r2, #48]	; 0x30
 801268e:	4b37      	ldr	r3, [pc, #220]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012692:	f003 0302 	and.w	r3, r3, #2
 8012696:	613b      	str	r3, [r7, #16]
 8012698:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 801269a:	230d      	movs	r3, #13
 801269c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801269e:	2302      	movs	r3, #2
 80126a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126a2:	2300      	movs	r3, #0
 80126a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80126a6:	2303      	movs	r3, #3
 80126a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80126aa:	230a      	movs	r3, #10
 80126ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80126ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80126b2:	4619      	mov	r1, r3
 80126b4:	4830      	ldr	r0, [pc, #192]	; (8012778 <HAL_PCD_MspInit+0x1d8>)
 80126b6:	f7f7 fcfb 	bl	800a0b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80126ba:	2328      	movs	r3, #40	; 0x28
 80126bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80126be:	2302      	movs	r3, #2
 80126c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126c2:	2300      	movs	r3, #0
 80126c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80126c6:	2303      	movs	r3, #3
 80126c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80126ca:	230a      	movs	r3, #10
 80126cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80126ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80126d2:	4619      	mov	r1, r3
 80126d4:	4826      	ldr	r0, [pc, #152]	; (8012770 <HAL_PCD_MspInit+0x1d0>)
 80126d6:	f7f7 fceb 	bl	800a0b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80126da:	f643 4323 	movw	r3, #15395	; 0x3c23
 80126de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80126e0:	2302      	movs	r3, #2
 80126e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126e4:	2300      	movs	r3, #0
 80126e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80126e8:	2303      	movs	r3, #3
 80126ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80126ec:	230a      	movs	r3, #10
 80126ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80126f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80126f4:	4619      	mov	r1, r3
 80126f6:	4821      	ldr	r0, [pc, #132]	; (801277c <HAL_PCD_MspInit+0x1dc>)
 80126f8:	f7f7 fcda 	bl	800a0b0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80126fc:	2300      	movs	r3, #0
 80126fe:	60fb      	str	r3, [r7, #12]
 8012700:	4b1a      	ldr	r3, [pc, #104]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012704:	4a19      	ldr	r2, [pc, #100]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801270a:	6313      	str	r3, [r2, #48]	; 0x30
 801270c:	4b17      	ldr	r3, [pc, #92]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 801270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012714:	60fb      	str	r3, [r7, #12]
 8012716:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8012718:	2300      	movs	r3, #0
 801271a:	60bb      	str	r3, [r7, #8]
 801271c:	4b13      	ldr	r3, [pc, #76]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 801271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012720:	4a12      	ldr	r2, [pc, #72]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 8012722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012726:	6313      	str	r3, [r2, #48]	; 0x30
 8012728:	4b10      	ldr	r3, [pc, #64]	; (801276c <HAL_PCD_MspInit+0x1cc>)
 801272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801272c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012730:	60bb      	str	r3, [r7, #8]
 8012732:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 8012734:	2200      	movs	r2, #0
 8012736:	2100      	movs	r1, #0
 8012738:	204a      	movs	r0, #74	; 0x4a
 801273a:	f7f7 f856 	bl	80097ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 801273e:	204a      	movs	r0, #74	; 0x4a
 8012740:	f7f7 f86f 	bl	8009822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8012744:	2200      	movs	r2, #0
 8012746:	2100      	movs	r1, #0
 8012748:	204b      	movs	r0, #75	; 0x4b
 801274a:	f7f7 f84e 	bl	80097ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 801274e:	204b      	movs	r0, #75	; 0x4b
 8012750:	f7f7 f867 	bl	8009822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8012754:	2200      	movs	r2, #0
 8012756:	2100      	movs	r1, #0
 8012758:	204d      	movs	r0, #77	; 0x4d
 801275a:	f7f7 f846 	bl	80097ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801275e:	204d      	movs	r0, #77	; 0x4d
 8012760:	f7f7 f85f 	bl	8009822 <HAL_NVIC_EnableIRQ>
}
 8012764:	bf00      	nop
 8012766:	3738      	adds	r7, #56	; 0x38
 8012768:	46bd      	mov	sp, r7
 801276a:	bd80      	pop	{r7, pc}
 801276c:	40023800 	.word	0x40023800
 8012770:	40020000 	.word	0x40020000
 8012774:	40040000 	.word	0x40040000
 8012778:	40020800 	.word	0x40020800
 801277c:	40020400 	.word	0x40020400

08012780 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b082      	sub	sp, #8
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012794:	4619      	mov	r1, r3
 8012796:	4610      	mov	r0, r2
 8012798:	f7fe f93d 	bl	8010a16 <USBD_LL_SetupStage>
}
 801279c:	bf00      	nop
 801279e:	3708      	adds	r7, #8
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}

080127a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	460b      	mov	r3, r1
 80127ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80127b6:	78fa      	ldrb	r2, [r7, #3]
 80127b8:	6879      	ldr	r1, [r7, #4]
 80127ba:	4613      	mov	r3, r2
 80127bc:	00db      	lsls	r3, r3, #3
 80127be:	4413      	add	r3, r2
 80127c0:	009b      	lsls	r3, r3, #2
 80127c2:	440b      	add	r3, r1
 80127c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80127c8:	681a      	ldr	r2, [r3, #0]
 80127ca:	78fb      	ldrb	r3, [r7, #3]
 80127cc:	4619      	mov	r1, r3
 80127ce:	f7fe f977 	bl	8010ac0 <USBD_LL_DataOutStage>
}
 80127d2:	bf00      	nop
 80127d4:	3708      	adds	r7, #8
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}

080127da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127da:	b580      	push	{r7, lr}
 80127dc:	b082      	sub	sp, #8
 80127de:	af00      	add	r7, sp, #0
 80127e0:	6078      	str	r0, [r7, #4]
 80127e2:	460b      	mov	r3, r1
 80127e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80127ec:	78fa      	ldrb	r2, [r7, #3]
 80127ee:	6879      	ldr	r1, [r7, #4]
 80127f0:	4613      	mov	r3, r2
 80127f2:	00db      	lsls	r3, r3, #3
 80127f4:	4413      	add	r3, r2
 80127f6:	009b      	lsls	r3, r3, #2
 80127f8:	440b      	add	r3, r1
 80127fa:	334c      	adds	r3, #76	; 0x4c
 80127fc:	681a      	ldr	r2, [r3, #0]
 80127fe:	78fb      	ldrb	r3, [r7, #3]
 8012800:	4619      	mov	r1, r3
 8012802:	f7fe fa10 	bl	8010c26 <USBD_LL_DataInStage>
}
 8012806:	bf00      	nop
 8012808:	3708      	adds	r7, #8
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}

0801280e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801280e:	b580      	push	{r7, lr}
 8012810:	b082      	sub	sp, #8
 8012812:	af00      	add	r7, sp, #0
 8012814:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801281c:	4618      	mov	r0, r3
 801281e:	f7fe fb44 	bl	8010eaa <USBD_LL_SOF>
}
 8012822:	bf00      	nop
 8012824:	3708      	adds	r7, #8
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801282a:	b580      	push	{r7, lr}
 801282c:	b084      	sub	sp, #16
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012832:	2301      	movs	r3, #1
 8012834:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	68db      	ldr	r3, [r3, #12]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d102      	bne.n	8012844 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801283e:	2300      	movs	r3, #0
 8012840:	73fb      	strb	r3, [r7, #15]
 8012842:	e008      	b.n	8012856 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	68db      	ldr	r3, [r3, #12]
 8012848:	2b02      	cmp	r3, #2
 801284a:	d102      	bne.n	8012852 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801284c:	2301      	movs	r3, #1
 801284e:	73fb      	strb	r3, [r7, #15]
 8012850:	e001      	b.n	8012856 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012852:	f7f3 f895 	bl	8005980 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801285c:	7bfa      	ldrb	r2, [r7, #15]
 801285e:	4611      	mov	r1, r2
 8012860:	4618      	mov	r0, r3
 8012862:	f7fe fae4 	bl	8010e2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801286c:	4618      	mov	r0, r3
 801286e:	f7fe fa8c 	bl	8010d8a <USBD_LL_Reset>
}
 8012872:	bf00      	nop
 8012874:	3710      	adds	r7, #16
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
	...

0801287c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801288a:	4618      	mov	r0, r3
 801288c:	f7fe fadf 	bl	8010e4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	687a      	ldr	r2, [r7, #4]
 801289c:	6812      	ldr	r2, [r2, #0]
 801289e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80128a2:	f043 0301 	orr.w	r3, r3, #1
 80128a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6a1b      	ldr	r3, [r3, #32]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d005      	beq.n	80128bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80128b0:	4b04      	ldr	r3, [pc, #16]	; (80128c4 <HAL_PCD_SuspendCallback+0x48>)
 80128b2:	691b      	ldr	r3, [r3, #16]
 80128b4:	4a03      	ldr	r2, [pc, #12]	; (80128c4 <HAL_PCD_SuspendCallback+0x48>)
 80128b6:	f043 0306 	orr.w	r3, r3, #6
 80128ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80128bc:	bf00      	nop
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	e000ed00 	.word	0xe000ed00

080128c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7fe facf 	bl	8010e7a <USBD_LL_Resume>
}
 80128dc:	bf00      	nop
 80128de:	3708      	adds	r7, #8
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}

080128e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	460b      	mov	r3, r1
 80128ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80128f6:	78fa      	ldrb	r2, [r7, #3]
 80128f8:	4611      	mov	r1, r2
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fe fb27 	bl	8010f4e <USBD_LL_IsoOUTIncomplete>
}
 8012900:	bf00      	nop
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	460b      	mov	r3, r1
 8012912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801291a:	78fa      	ldrb	r2, [r7, #3]
 801291c:	4611      	mov	r1, r2
 801291e:	4618      	mov	r0, r3
 8012920:	f7fe fae3 	bl	8010eea <USBD_LL_IsoINIncomplete>
}
 8012924:	bf00      	nop
 8012926:	3708      	adds	r7, #8
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801293a:	4618      	mov	r0, r3
 801293c:	f7fe fb39 	bl	8010fb2 <USBD_LL_DevConnected>
}
 8012940:	bf00      	nop
 8012942:	3708      	adds	r7, #8
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012956:	4618      	mov	r0, r3
 8012958:	f7fe fb36 	bl	8010fc8 <USBD_LL_DevDisconnected>
}
 801295c:	bf00      	nop
 801295e:	3708      	adds	r7, #8
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}

08012964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d13c      	bne.n	80129ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012974:	4a43      	ldr	r2, [pc, #268]	; (8012a84 <USBD_LL_Init+0x120>)
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	4a41      	ldr	r2, [pc, #260]	; (8012a84 <USBD_LL_Init+0x120>)
 8012980:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012984:	4b3f      	ldr	r3, [pc, #252]	; (8012a84 <USBD_LL_Init+0x120>)
 8012986:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801298a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801298c:	4b3d      	ldr	r3, [pc, #244]	; (8012a84 <USBD_LL_Init+0x120>)
 801298e:	2204      	movs	r2, #4
 8012990:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012992:	4b3c      	ldr	r3, [pc, #240]	; (8012a84 <USBD_LL_Init+0x120>)
 8012994:	2202      	movs	r2, #2
 8012996:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012998:	4b3a      	ldr	r3, [pc, #232]	; (8012a84 <USBD_LL_Init+0x120>)
 801299a:	2200      	movs	r2, #0
 801299c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801299e:	4b39      	ldr	r3, [pc, #228]	; (8012a84 <USBD_LL_Init+0x120>)
 80129a0:	2202      	movs	r2, #2
 80129a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80129a4:	4b37      	ldr	r3, [pc, #220]	; (8012a84 <USBD_LL_Init+0x120>)
 80129a6:	2200      	movs	r2, #0
 80129a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80129aa:	4b36      	ldr	r3, [pc, #216]	; (8012a84 <USBD_LL_Init+0x120>)
 80129ac:	2200      	movs	r2, #0
 80129ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80129b0:	4b34      	ldr	r3, [pc, #208]	; (8012a84 <USBD_LL_Init+0x120>)
 80129b2:	2200      	movs	r2, #0
 80129b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80129b6:	4b33      	ldr	r3, [pc, #204]	; (8012a84 <USBD_LL_Init+0x120>)
 80129b8:	2200      	movs	r2, #0
 80129ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80129bc:	4b31      	ldr	r3, [pc, #196]	; (8012a84 <USBD_LL_Init+0x120>)
 80129be:	2200      	movs	r2, #0
 80129c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80129c2:	4830      	ldr	r0, [pc, #192]	; (8012a84 <USBD_LL_Init+0x120>)
 80129c4:	f7f7 ff51 	bl	800a86a <HAL_PCD_Init>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d001      	beq.n	80129d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80129ce:	f7f2 ffd7 	bl	8005980 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80129d2:	2180      	movs	r1, #128	; 0x80
 80129d4:	482b      	ldr	r0, [pc, #172]	; (8012a84 <USBD_LL_Init+0x120>)
 80129d6:	f7f9 f9a8 	bl	800bd2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80129da:	2240      	movs	r2, #64	; 0x40
 80129dc:	2100      	movs	r1, #0
 80129de:	4829      	ldr	r0, [pc, #164]	; (8012a84 <USBD_LL_Init+0x120>)
 80129e0:	f7f9 f95c 	bl	800bc9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80129e4:	2280      	movs	r2, #128	; 0x80
 80129e6:	2101      	movs	r1, #1
 80129e8:	4826      	ldr	r0, [pc, #152]	; (8012a84 <USBD_LL_Init+0x120>)
 80129ea:	f7f9 f957 	bl	800bc9c <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	2b01      	cmp	r3, #1
 80129f4:	d140      	bne.n	8012a78 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80129f6:	4a24      	ldr	r2, [pc, #144]	; (8012a88 <USBD_LL_Init+0x124>)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	4a21      	ldr	r2, [pc, #132]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a02:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8012a06:	4b20      	ldr	r3, [pc, #128]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a08:	4a20      	ldr	r2, [pc, #128]	; (8012a8c <USBD_LL_Init+0x128>)
 8012a0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8012a0c:	4b1e      	ldr	r3, [pc, #120]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a0e:	2206      	movs	r2, #6
 8012a10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8012a12:	4b1d      	ldr	r3, [pc, #116]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a14:	2200      	movs	r2, #0
 8012a16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8012a18:	4b1b      	ldr	r3, [pc, #108]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8012a1e:	4b1a      	ldr	r3, [pc, #104]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a20:	2201      	movs	r2, #1
 8012a22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8012a24:	4b18      	ldr	r3, [pc, #96]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a26:	2200      	movs	r2, #0
 8012a28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8012a2a:	4b17      	ldr	r3, [pc, #92]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8012a30:	4b15      	ldr	r3, [pc, #84]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a32:	2200      	movs	r2, #0
 8012a34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8012a36:	4b14      	ldr	r3, [pc, #80]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a38:	2200      	movs	r2, #0
 8012a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8012a3c:	4b12      	ldr	r3, [pc, #72]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a3e:	2200      	movs	r2, #0
 8012a40:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8012a42:	4b11      	ldr	r3, [pc, #68]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a44:	2200      	movs	r2, #0
 8012a46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8012a48:	480f      	ldr	r0, [pc, #60]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a4a:	f7f7 ff0e 	bl	800a86a <HAL_PCD_Init>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d001      	beq.n	8012a58 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 8012a54:	f7f2 ff94 	bl	8005980 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8012a58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012a5c:	480a      	ldr	r0, [pc, #40]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a5e:	f7f9 f964 	bl	800bd2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8012a62:	2280      	movs	r2, #128	; 0x80
 8012a64:	2100      	movs	r1, #0
 8012a66:	4808      	ldr	r0, [pc, #32]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a68:	f7f9 f918 	bl	800bc9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8012a6c:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8012a70:	2101      	movs	r1, #1
 8012a72:	4805      	ldr	r0, [pc, #20]	; (8012a88 <USBD_LL_Init+0x124>)
 8012a74:	f7f9 f912 	bl	800bc9c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012a78:	2300      	movs	r3, #0
}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	3708      	adds	r7, #8
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}
 8012a82:	bf00      	nop
 8012a84:	200079d8 	.word	0x200079d8
 8012a88:	20007ee4 	.word	0x20007ee4
 8012a8c:	40040000 	.word	0x40040000

08012a90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b084      	sub	sp, #16
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7f7 fffc 	bl	800aaa4 <HAL_PCD_Start>
 8012aac:	4603      	mov	r3, r0
 8012aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ab0:	7bfb      	ldrb	r3, [r7, #15]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f000 f942 	bl	8012d3c <USBD_Get_USB_Status>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3710      	adds	r7, #16
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	b084      	sub	sp, #16
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
 8012ace:	4608      	mov	r0, r1
 8012ad0:	4611      	mov	r1, r2
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	70fb      	strb	r3, [r7, #3]
 8012ad8:	460b      	mov	r3, r1
 8012ada:	70bb      	strb	r3, [r7, #2]
 8012adc:	4613      	mov	r3, r2
 8012ade:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012aee:	78bb      	ldrb	r3, [r7, #2]
 8012af0:	883a      	ldrh	r2, [r7, #0]
 8012af2:	78f9      	ldrb	r1, [r7, #3]
 8012af4:	f7f8 fccd 	bl	800b492 <HAL_PCD_EP_Open>
 8012af8:	4603      	mov	r3, r0
 8012afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012afc:	7bfb      	ldrb	r3, [r7, #15]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f000 f91c 	bl	8012d3c <USBD_Get_USB_Status>
 8012b04:	4603      	mov	r3, r0
 8012b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3710      	adds	r7, #16
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}

08012b12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b12:	b580      	push	{r7, lr}
 8012b14:	b084      	sub	sp, #16
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	6078      	str	r0, [r7, #4]
 8012b1a:	460b      	mov	r3, r1
 8012b1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b22:	2300      	movs	r3, #0
 8012b24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012b2c:	78fa      	ldrb	r2, [r7, #3]
 8012b2e:	4611      	mov	r1, r2
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7f8 fd16 	bl	800b562 <HAL_PCD_EP_Close>
 8012b36:	4603      	mov	r3, r0
 8012b38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b3a:	7bfb      	ldrb	r3, [r7, #15]
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f000 f8fd 	bl	8012d3c <USBD_Get_USB_Status>
 8012b42:	4603      	mov	r3, r0
 8012b44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b46:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3710      	adds	r7, #16
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	460b      	mov	r3, r1
 8012b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b60:	2300      	movs	r3, #0
 8012b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012b6a:	78fa      	ldrb	r2, [r7, #3]
 8012b6c:	4611      	mov	r1, r2
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7f8 fdee 	bl	800b750 <HAL_PCD_EP_SetStall>
 8012b74:	4603      	mov	r3, r0
 8012b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b78:	7bfb      	ldrb	r3, [r7, #15]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f000 f8de 	bl	8012d3c <USBD_Get_USB_Status>
 8012b80:	4603      	mov	r3, r0
 8012b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	3710      	adds	r7, #16
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}

08012b8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b8e:	b580      	push	{r7, lr}
 8012b90:	b084      	sub	sp, #16
 8012b92:	af00      	add	r7, sp, #0
 8012b94:	6078      	str	r0, [r7, #4]
 8012b96:	460b      	mov	r3, r1
 8012b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012ba8:	78fa      	ldrb	r2, [r7, #3]
 8012baa:	4611      	mov	r1, r2
 8012bac:	4618      	mov	r0, r3
 8012bae:	f7f8 fe33 	bl	800b818 <HAL_PCD_EP_ClrStall>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012bb6:	7bfb      	ldrb	r3, [r7, #15]
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f000 f8bf 	bl	8012d3c <USBD_Get_USB_Status>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3710      	adds	r7, #16
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b085      	sub	sp, #20
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
 8012bd4:	460b      	mov	r3, r1
 8012bd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012bde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	da0b      	bge.n	8012c00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012be8:	78fb      	ldrb	r3, [r7, #3]
 8012bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012bee:	68f9      	ldr	r1, [r7, #12]
 8012bf0:	4613      	mov	r3, r2
 8012bf2:	00db      	lsls	r3, r3, #3
 8012bf4:	4413      	add	r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	440b      	add	r3, r1
 8012bfa:	333e      	adds	r3, #62	; 0x3e
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	e00b      	b.n	8012c18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012c00:	78fb      	ldrb	r3, [r7, #3]
 8012c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012c06:	68f9      	ldr	r1, [r7, #12]
 8012c08:	4613      	mov	r3, r2
 8012c0a:	00db      	lsls	r3, r3, #3
 8012c0c:	4413      	add	r3, r2
 8012c0e:	009b      	lsls	r3, r3, #2
 8012c10:	440b      	add	r3, r1
 8012c12:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012c16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3714      	adds	r7, #20
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c22:	4770      	bx	lr

08012c24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b084      	sub	sp, #16
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
 8012c2c:	460b      	mov	r3, r1
 8012c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c30:	2300      	movs	r3, #0
 8012c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c34:	2300      	movs	r3, #0
 8012c36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012c3e:	78fa      	ldrb	r2, [r7, #3]
 8012c40:	4611      	mov	r1, r2
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7f8 fc00 	bl	800b448 <HAL_PCD_SetAddress>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c4c:	7bfb      	ldrb	r3, [r7, #15]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f000 f874 	bl	8012d3c <USBD_Get_USB_Status>
 8012c54:	4603      	mov	r3, r0
 8012c56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3710      	adds	r7, #16
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012c62:	b580      	push	{r7, lr}
 8012c64:	b086      	sub	sp, #24
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	60f8      	str	r0, [r7, #12]
 8012c6a:	607a      	str	r2, [r7, #4]
 8012c6c:	603b      	str	r3, [r7, #0]
 8012c6e:	460b      	mov	r3, r1
 8012c70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c72:	2300      	movs	r3, #0
 8012c74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c76:	2300      	movs	r3, #0
 8012c78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012c80:	7af9      	ldrb	r1, [r7, #11]
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	f7f8 fd19 	bl	800b6bc <HAL_PCD_EP_Transmit>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c8e:	7dfb      	ldrb	r3, [r7, #23]
 8012c90:	4618      	mov	r0, r3
 8012c92:	f000 f853 	bl	8012d3c <USBD_Get_USB_Status>
 8012c96:	4603      	mov	r3, r0
 8012c98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012c9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3718      	adds	r7, #24
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}

08012ca4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b086      	sub	sp, #24
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	607a      	str	r2, [r7, #4]
 8012cae:	603b      	str	r3, [r7, #0]
 8012cb0:	460b      	mov	r3, r1
 8012cb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012cc2:	7af9      	ldrb	r1, [r7, #11]
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	687a      	ldr	r2, [r7, #4]
 8012cc8:	f7f8 fc95 	bl	800b5f6 <HAL_PCD_EP_Receive>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012cd0:	7dfb      	ldrb	r3, [r7, #23]
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f000 f832 	bl	8012d3c <USBD_Get_USB_Status>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012cdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3718      	adds	r7, #24
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}

08012ce6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ce6:	b580      	push	{r7, lr}
 8012ce8:	b082      	sub	sp, #8
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
 8012cee:	460b      	mov	r3, r1
 8012cf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012cf8:	78fa      	ldrb	r2, [r7, #3]
 8012cfa:	4611      	mov	r1, r2
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7f8 fcc5 	bl	800b68c <HAL_PCD_EP_GetRxCount>
 8012d02:	4603      	mov	r3, r0
}
 8012d04:	4618      	mov	r0, r3
 8012d06:	3708      	adds	r7, #8
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}

08012d0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012d14:	4b03      	ldr	r3, [pc, #12]	; (8012d24 <USBD_static_malloc+0x18>)
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	370c      	adds	r7, #12
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d20:	4770      	bx	lr
 8012d22:	bf00      	nop
 8012d24:	200083f0 	.word	0x200083f0

08012d28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012d28:	b480      	push	{r7}
 8012d2a:	b083      	sub	sp, #12
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]

}
 8012d30:	bf00      	nop
 8012d32:	370c      	adds	r7, #12
 8012d34:	46bd      	mov	sp, r7
 8012d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3a:	4770      	bx	lr

08012d3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b085      	sub	sp, #20
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	4603      	mov	r3, r0
 8012d44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d46:	2300      	movs	r3, #0
 8012d48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012d4a:	79fb      	ldrb	r3, [r7, #7]
 8012d4c:	2b03      	cmp	r3, #3
 8012d4e:	d817      	bhi.n	8012d80 <USBD_Get_USB_Status+0x44>
 8012d50:	a201      	add	r2, pc, #4	; (adr r2, 8012d58 <USBD_Get_USB_Status+0x1c>)
 8012d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d56:	bf00      	nop
 8012d58:	08012d69 	.word	0x08012d69
 8012d5c:	08012d6f 	.word	0x08012d6f
 8012d60:	08012d75 	.word	0x08012d75
 8012d64:	08012d7b 	.word	0x08012d7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012d68:	2300      	movs	r3, #0
 8012d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8012d6c:	e00b      	b.n	8012d86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012d6e:	2303      	movs	r3, #3
 8012d70:	73fb      	strb	r3, [r7, #15]
    break;
 8012d72:	e008      	b.n	8012d86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012d74:	2301      	movs	r3, #1
 8012d76:	73fb      	strb	r3, [r7, #15]
    break;
 8012d78:	e005      	b.n	8012d86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012d7a:	2303      	movs	r3, #3
 8012d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8012d7e:	e002      	b.n	8012d86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012d80:	2303      	movs	r3, #3
 8012d82:	73fb      	strb	r3, [r7, #15]
    break;
 8012d84:	bf00      	nop
  }
  return usb_status;
 8012d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3714      	adds	r7, #20
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d92:	4770      	bx	lr

08012d94 <std>:
 8012d94:	2300      	movs	r3, #0
 8012d96:	b510      	push	{r4, lr}
 8012d98:	4604      	mov	r4, r0
 8012d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8012d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012da2:	6083      	str	r3, [r0, #8]
 8012da4:	8181      	strh	r1, [r0, #12]
 8012da6:	6643      	str	r3, [r0, #100]	; 0x64
 8012da8:	81c2      	strh	r2, [r0, #14]
 8012daa:	6183      	str	r3, [r0, #24]
 8012dac:	4619      	mov	r1, r3
 8012dae:	2208      	movs	r2, #8
 8012db0:	305c      	adds	r0, #92	; 0x5c
 8012db2:	f000 f9f7 	bl	80131a4 <memset>
 8012db6:	4b0d      	ldr	r3, [pc, #52]	; (8012dec <std+0x58>)
 8012db8:	6263      	str	r3, [r4, #36]	; 0x24
 8012dba:	4b0d      	ldr	r3, [pc, #52]	; (8012df0 <std+0x5c>)
 8012dbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8012dbe:	4b0d      	ldr	r3, [pc, #52]	; (8012df4 <std+0x60>)
 8012dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012dc2:	4b0d      	ldr	r3, [pc, #52]	; (8012df8 <std+0x64>)
 8012dc4:	6323      	str	r3, [r4, #48]	; 0x30
 8012dc6:	4b0d      	ldr	r3, [pc, #52]	; (8012dfc <std+0x68>)
 8012dc8:	6224      	str	r4, [r4, #32]
 8012dca:	429c      	cmp	r4, r3
 8012dcc:	d006      	beq.n	8012ddc <std+0x48>
 8012dce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012dd2:	4294      	cmp	r4, r2
 8012dd4:	d002      	beq.n	8012ddc <std+0x48>
 8012dd6:	33d0      	adds	r3, #208	; 0xd0
 8012dd8:	429c      	cmp	r4, r3
 8012dda:	d105      	bne.n	8012de8 <std+0x54>
 8012ddc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012de4:	f000 ba56 	b.w	8013294 <__retarget_lock_init_recursive>
 8012de8:	bd10      	pop	{r4, pc}
 8012dea:	bf00      	nop
 8012dec:	08012ff5 	.word	0x08012ff5
 8012df0:	08013017 	.word	0x08013017
 8012df4:	0801304f 	.word	0x0801304f
 8012df8:	08013073 	.word	0x08013073
 8012dfc:	20008610 	.word	0x20008610

08012e00 <stdio_exit_handler>:
 8012e00:	4a02      	ldr	r2, [pc, #8]	; (8012e0c <stdio_exit_handler+0xc>)
 8012e02:	4903      	ldr	r1, [pc, #12]	; (8012e10 <stdio_exit_handler+0x10>)
 8012e04:	4803      	ldr	r0, [pc, #12]	; (8012e14 <stdio_exit_handler+0x14>)
 8012e06:	f000 b869 	b.w	8012edc <_fwalk_sglue>
 8012e0a:	bf00      	nop
 8012e0c:	20000278 	.word	0x20000278
 8012e10:	08013b5d 	.word	0x08013b5d
 8012e14:	20000284 	.word	0x20000284

08012e18 <cleanup_stdio>:
 8012e18:	6841      	ldr	r1, [r0, #4]
 8012e1a:	4b0c      	ldr	r3, [pc, #48]	; (8012e4c <cleanup_stdio+0x34>)
 8012e1c:	4299      	cmp	r1, r3
 8012e1e:	b510      	push	{r4, lr}
 8012e20:	4604      	mov	r4, r0
 8012e22:	d001      	beq.n	8012e28 <cleanup_stdio+0x10>
 8012e24:	f000 fe9a 	bl	8013b5c <_fflush_r>
 8012e28:	68a1      	ldr	r1, [r4, #8]
 8012e2a:	4b09      	ldr	r3, [pc, #36]	; (8012e50 <cleanup_stdio+0x38>)
 8012e2c:	4299      	cmp	r1, r3
 8012e2e:	d002      	beq.n	8012e36 <cleanup_stdio+0x1e>
 8012e30:	4620      	mov	r0, r4
 8012e32:	f000 fe93 	bl	8013b5c <_fflush_r>
 8012e36:	68e1      	ldr	r1, [r4, #12]
 8012e38:	4b06      	ldr	r3, [pc, #24]	; (8012e54 <cleanup_stdio+0x3c>)
 8012e3a:	4299      	cmp	r1, r3
 8012e3c:	d004      	beq.n	8012e48 <cleanup_stdio+0x30>
 8012e3e:	4620      	mov	r0, r4
 8012e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e44:	f000 be8a 	b.w	8013b5c <_fflush_r>
 8012e48:	bd10      	pop	{r4, pc}
 8012e4a:	bf00      	nop
 8012e4c:	20008610 	.word	0x20008610
 8012e50:	20008678 	.word	0x20008678
 8012e54:	200086e0 	.word	0x200086e0

08012e58 <global_stdio_init.part.0>:
 8012e58:	b510      	push	{r4, lr}
 8012e5a:	4b0b      	ldr	r3, [pc, #44]	; (8012e88 <global_stdio_init.part.0+0x30>)
 8012e5c:	4c0b      	ldr	r4, [pc, #44]	; (8012e8c <global_stdio_init.part.0+0x34>)
 8012e5e:	4a0c      	ldr	r2, [pc, #48]	; (8012e90 <global_stdio_init.part.0+0x38>)
 8012e60:	601a      	str	r2, [r3, #0]
 8012e62:	4620      	mov	r0, r4
 8012e64:	2200      	movs	r2, #0
 8012e66:	2104      	movs	r1, #4
 8012e68:	f7ff ff94 	bl	8012d94 <std>
 8012e6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012e70:	2201      	movs	r2, #1
 8012e72:	2109      	movs	r1, #9
 8012e74:	f7ff ff8e 	bl	8012d94 <std>
 8012e78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012e7c:	2202      	movs	r2, #2
 8012e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e82:	2112      	movs	r1, #18
 8012e84:	f7ff bf86 	b.w	8012d94 <std>
 8012e88:	20008748 	.word	0x20008748
 8012e8c:	20008610 	.word	0x20008610
 8012e90:	08012e01 	.word	0x08012e01

08012e94 <__sfp_lock_acquire>:
 8012e94:	4801      	ldr	r0, [pc, #4]	; (8012e9c <__sfp_lock_acquire+0x8>)
 8012e96:	f000 b9fe 	b.w	8013296 <__retarget_lock_acquire_recursive>
 8012e9a:	bf00      	nop
 8012e9c:	20008751 	.word	0x20008751

08012ea0 <__sfp_lock_release>:
 8012ea0:	4801      	ldr	r0, [pc, #4]	; (8012ea8 <__sfp_lock_release+0x8>)
 8012ea2:	f000 b9f9 	b.w	8013298 <__retarget_lock_release_recursive>
 8012ea6:	bf00      	nop
 8012ea8:	20008751 	.word	0x20008751

08012eac <__sinit>:
 8012eac:	b510      	push	{r4, lr}
 8012eae:	4604      	mov	r4, r0
 8012eb0:	f7ff fff0 	bl	8012e94 <__sfp_lock_acquire>
 8012eb4:	6a23      	ldr	r3, [r4, #32]
 8012eb6:	b11b      	cbz	r3, 8012ec0 <__sinit+0x14>
 8012eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ebc:	f7ff bff0 	b.w	8012ea0 <__sfp_lock_release>
 8012ec0:	4b04      	ldr	r3, [pc, #16]	; (8012ed4 <__sinit+0x28>)
 8012ec2:	6223      	str	r3, [r4, #32]
 8012ec4:	4b04      	ldr	r3, [pc, #16]	; (8012ed8 <__sinit+0x2c>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d1f5      	bne.n	8012eb8 <__sinit+0xc>
 8012ecc:	f7ff ffc4 	bl	8012e58 <global_stdio_init.part.0>
 8012ed0:	e7f2      	b.n	8012eb8 <__sinit+0xc>
 8012ed2:	bf00      	nop
 8012ed4:	08012e19 	.word	0x08012e19
 8012ed8:	20008748 	.word	0x20008748

08012edc <_fwalk_sglue>:
 8012edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ee0:	4607      	mov	r7, r0
 8012ee2:	4688      	mov	r8, r1
 8012ee4:	4614      	mov	r4, r2
 8012ee6:	2600      	movs	r6, #0
 8012ee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012eec:	f1b9 0901 	subs.w	r9, r9, #1
 8012ef0:	d505      	bpl.n	8012efe <_fwalk_sglue+0x22>
 8012ef2:	6824      	ldr	r4, [r4, #0]
 8012ef4:	2c00      	cmp	r4, #0
 8012ef6:	d1f7      	bne.n	8012ee8 <_fwalk_sglue+0xc>
 8012ef8:	4630      	mov	r0, r6
 8012efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012efe:	89ab      	ldrh	r3, [r5, #12]
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d907      	bls.n	8012f14 <_fwalk_sglue+0x38>
 8012f04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f08:	3301      	adds	r3, #1
 8012f0a:	d003      	beq.n	8012f14 <_fwalk_sglue+0x38>
 8012f0c:	4629      	mov	r1, r5
 8012f0e:	4638      	mov	r0, r7
 8012f10:	47c0      	blx	r8
 8012f12:	4306      	orrs	r6, r0
 8012f14:	3568      	adds	r5, #104	; 0x68
 8012f16:	e7e9      	b.n	8012eec <_fwalk_sglue+0x10>

08012f18 <iprintf>:
 8012f18:	b40f      	push	{r0, r1, r2, r3}
 8012f1a:	b507      	push	{r0, r1, r2, lr}
 8012f1c:	4906      	ldr	r1, [pc, #24]	; (8012f38 <iprintf+0x20>)
 8012f1e:	ab04      	add	r3, sp, #16
 8012f20:	6808      	ldr	r0, [r1, #0]
 8012f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f26:	6881      	ldr	r1, [r0, #8]
 8012f28:	9301      	str	r3, [sp, #4]
 8012f2a:	f000 fae7 	bl	80134fc <_vfiprintf_r>
 8012f2e:	b003      	add	sp, #12
 8012f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f34:	b004      	add	sp, #16
 8012f36:	4770      	bx	lr
 8012f38:	200002d0 	.word	0x200002d0

08012f3c <_puts_r>:
 8012f3c:	6a03      	ldr	r3, [r0, #32]
 8012f3e:	b570      	push	{r4, r5, r6, lr}
 8012f40:	6884      	ldr	r4, [r0, #8]
 8012f42:	4605      	mov	r5, r0
 8012f44:	460e      	mov	r6, r1
 8012f46:	b90b      	cbnz	r3, 8012f4c <_puts_r+0x10>
 8012f48:	f7ff ffb0 	bl	8012eac <__sinit>
 8012f4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f4e:	07db      	lsls	r3, r3, #31
 8012f50:	d405      	bmi.n	8012f5e <_puts_r+0x22>
 8012f52:	89a3      	ldrh	r3, [r4, #12]
 8012f54:	0598      	lsls	r0, r3, #22
 8012f56:	d402      	bmi.n	8012f5e <_puts_r+0x22>
 8012f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f5a:	f000 f99c 	bl	8013296 <__retarget_lock_acquire_recursive>
 8012f5e:	89a3      	ldrh	r3, [r4, #12]
 8012f60:	0719      	lsls	r1, r3, #28
 8012f62:	d513      	bpl.n	8012f8c <_puts_r+0x50>
 8012f64:	6923      	ldr	r3, [r4, #16]
 8012f66:	b18b      	cbz	r3, 8012f8c <_puts_r+0x50>
 8012f68:	3e01      	subs	r6, #1
 8012f6a:	68a3      	ldr	r3, [r4, #8]
 8012f6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012f70:	3b01      	subs	r3, #1
 8012f72:	60a3      	str	r3, [r4, #8]
 8012f74:	b9e9      	cbnz	r1, 8012fb2 <_puts_r+0x76>
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	da2e      	bge.n	8012fd8 <_puts_r+0x9c>
 8012f7a:	4622      	mov	r2, r4
 8012f7c:	210a      	movs	r1, #10
 8012f7e:	4628      	mov	r0, r5
 8012f80:	f000 f87b 	bl	801307a <__swbuf_r>
 8012f84:	3001      	adds	r0, #1
 8012f86:	d007      	beq.n	8012f98 <_puts_r+0x5c>
 8012f88:	250a      	movs	r5, #10
 8012f8a:	e007      	b.n	8012f9c <_puts_r+0x60>
 8012f8c:	4621      	mov	r1, r4
 8012f8e:	4628      	mov	r0, r5
 8012f90:	f000 f8b0 	bl	80130f4 <__swsetup_r>
 8012f94:	2800      	cmp	r0, #0
 8012f96:	d0e7      	beq.n	8012f68 <_puts_r+0x2c>
 8012f98:	f04f 35ff 	mov.w	r5, #4294967295
 8012f9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f9e:	07da      	lsls	r2, r3, #31
 8012fa0:	d405      	bmi.n	8012fae <_puts_r+0x72>
 8012fa2:	89a3      	ldrh	r3, [r4, #12]
 8012fa4:	059b      	lsls	r3, r3, #22
 8012fa6:	d402      	bmi.n	8012fae <_puts_r+0x72>
 8012fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012faa:	f000 f975 	bl	8013298 <__retarget_lock_release_recursive>
 8012fae:	4628      	mov	r0, r5
 8012fb0:	bd70      	pop	{r4, r5, r6, pc}
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	da04      	bge.n	8012fc0 <_puts_r+0x84>
 8012fb6:	69a2      	ldr	r2, [r4, #24]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	dc06      	bgt.n	8012fca <_puts_r+0x8e>
 8012fbc:	290a      	cmp	r1, #10
 8012fbe:	d004      	beq.n	8012fca <_puts_r+0x8e>
 8012fc0:	6823      	ldr	r3, [r4, #0]
 8012fc2:	1c5a      	adds	r2, r3, #1
 8012fc4:	6022      	str	r2, [r4, #0]
 8012fc6:	7019      	strb	r1, [r3, #0]
 8012fc8:	e7cf      	b.n	8012f6a <_puts_r+0x2e>
 8012fca:	4622      	mov	r2, r4
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f000 f854 	bl	801307a <__swbuf_r>
 8012fd2:	3001      	adds	r0, #1
 8012fd4:	d1c9      	bne.n	8012f6a <_puts_r+0x2e>
 8012fd6:	e7df      	b.n	8012f98 <_puts_r+0x5c>
 8012fd8:	6823      	ldr	r3, [r4, #0]
 8012fda:	250a      	movs	r5, #10
 8012fdc:	1c5a      	adds	r2, r3, #1
 8012fde:	6022      	str	r2, [r4, #0]
 8012fe0:	701d      	strb	r5, [r3, #0]
 8012fe2:	e7db      	b.n	8012f9c <_puts_r+0x60>

08012fe4 <puts>:
 8012fe4:	4b02      	ldr	r3, [pc, #8]	; (8012ff0 <puts+0xc>)
 8012fe6:	4601      	mov	r1, r0
 8012fe8:	6818      	ldr	r0, [r3, #0]
 8012fea:	f7ff bfa7 	b.w	8012f3c <_puts_r>
 8012fee:	bf00      	nop
 8012ff0:	200002d0 	.word	0x200002d0

08012ff4 <__sread>:
 8012ff4:	b510      	push	{r4, lr}
 8012ff6:	460c      	mov	r4, r1
 8012ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ffc:	f000 f8fc 	bl	80131f8 <_read_r>
 8013000:	2800      	cmp	r0, #0
 8013002:	bfab      	itete	ge
 8013004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013006:	89a3      	ldrhlt	r3, [r4, #12]
 8013008:	181b      	addge	r3, r3, r0
 801300a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801300e:	bfac      	ite	ge
 8013010:	6563      	strge	r3, [r4, #84]	; 0x54
 8013012:	81a3      	strhlt	r3, [r4, #12]
 8013014:	bd10      	pop	{r4, pc}

08013016 <__swrite>:
 8013016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801301a:	461f      	mov	r7, r3
 801301c:	898b      	ldrh	r3, [r1, #12]
 801301e:	05db      	lsls	r3, r3, #23
 8013020:	4605      	mov	r5, r0
 8013022:	460c      	mov	r4, r1
 8013024:	4616      	mov	r6, r2
 8013026:	d505      	bpl.n	8013034 <__swrite+0x1e>
 8013028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801302c:	2302      	movs	r3, #2
 801302e:	2200      	movs	r2, #0
 8013030:	f000 f8d0 	bl	80131d4 <_lseek_r>
 8013034:	89a3      	ldrh	r3, [r4, #12]
 8013036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801303a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801303e:	81a3      	strh	r3, [r4, #12]
 8013040:	4632      	mov	r2, r6
 8013042:	463b      	mov	r3, r7
 8013044:	4628      	mov	r0, r5
 8013046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801304a:	f000 b8e7 	b.w	801321c <_write_r>

0801304e <__sseek>:
 801304e:	b510      	push	{r4, lr}
 8013050:	460c      	mov	r4, r1
 8013052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013056:	f000 f8bd 	bl	80131d4 <_lseek_r>
 801305a:	1c43      	adds	r3, r0, #1
 801305c:	89a3      	ldrh	r3, [r4, #12]
 801305e:	bf15      	itete	ne
 8013060:	6560      	strne	r0, [r4, #84]	; 0x54
 8013062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801306a:	81a3      	strheq	r3, [r4, #12]
 801306c:	bf18      	it	ne
 801306e:	81a3      	strhne	r3, [r4, #12]
 8013070:	bd10      	pop	{r4, pc}

08013072 <__sclose>:
 8013072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013076:	f000 b89d 	b.w	80131b4 <_close_r>

0801307a <__swbuf_r>:
 801307a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801307c:	460e      	mov	r6, r1
 801307e:	4614      	mov	r4, r2
 8013080:	4605      	mov	r5, r0
 8013082:	b118      	cbz	r0, 801308c <__swbuf_r+0x12>
 8013084:	6a03      	ldr	r3, [r0, #32]
 8013086:	b90b      	cbnz	r3, 801308c <__swbuf_r+0x12>
 8013088:	f7ff ff10 	bl	8012eac <__sinit>
 801308c:	69a3      	ldr	r3, [r4, #24]
 801308e:	60a3      	str	r3, [r4, #8]
 8013090:	89a3      	ldrh	r3, [r4, #12]
 8013092:	071a      	lsls	r2, r3, #28
 8013094:	d525      	bpl.n	80130e2 <__swbuf_r+0x68>
 8013096:	6923      	ldr	r3, [r4, #16]
 8013098:	b31b      	cbz	r3, 80130e2 <__swbuf_r+0x68>
 801309a:	6823      	ldr	r3, [r4, #0]
 801309c:	6922      	ldr	r2, [r4, #16]
 801309e:	1a98      	subs	r0, r3, r2
 80130a0:	6963      	ldr	r3, [r4, #20]
 80130a2:	b2f6      	uxtb	r6, r6
 80130a4:	4283      	cmp	r3, r0
 80130a6:	4637      	mov	r7, r6
 80130a8:	dc04      	bgt.n	80130b4 <__swbuf_r+0x3a>
 80130aa:	4621      	mov	r1, r4
 80130ac:	4628      	mov	r0, r5
 80130ae:	f000 fd55 	bl	8013b5c <_fflush_r>
 80130b2:	b9e0      	cbnz	r0, 80130ee <__swbuf_r+0x74>
 80130b4:	68a3      	ldr	r3, [r4, #8]
 80130b6:	3b01      	subs	r3, #1
 80130b8:	60a3      	str	r3, [r4, #8]
 80130ba:	6823      	ldr	r3, [r4, #0]
 80130bc:	1c5a      	adds	r2, r3, #1
 80130be:	6022      	str	r2, [r4, #0]
 80130c0:	701e      	strb	r6, [r3, #0]
 80130c2:	6962      	ldr	r2, [r4, #20]
 80130c4:	1c43      	adds	r3, r0, #1
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d004      	beq.n	80130d4 <__swbuf_r+0x5a>
 80130ca:	89a3      	ldrh	r3, [r4, #12]
 80130cc:	07db      	lsls	r3, r3, #31
 80130ce:	d506      	bpl.n	80130de <__swbuf_r+0x64>
 80130d0:	2e0a      	cmp	r6, #10
 80130d2:	d104      	bne.n	80130de <__swbuf_r+0x64>
 80130d4:	4621      	mov	r1, r4
 80130d6:	4628      	mov	r0, r5
 80130d8:	f000 fd40 	bl	8013b5c <_fflush_r>
 80130dc:	b938      	cbnz	r0, 80130ee <__swbuf_r+0x74>
 80130de:	4638      	mov	r0, r7
 80130e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130e2:	4621      	mov	r1, r4
 80130e4:	4628      	mov	r0, r5
 80130e6:	f000 f805 	bl	80130f4 <__swsetup_r>
 80130ea:	2800      	cmp	r0, #0
 80130ec:	d0d5      	beq.n	801309a <__swbuf_r+0x20>
 80130ee:	f04f 37ff 	mov.w	r7, #4294967295
 80130f2:	e7f4      	b.n	80130de <__swbuf_r+0x64>

080130f4 <__swsetup_r>:
 80130f4:	b538      	push	{r3, r4, r5, lr}
 80130f6:	4b2a      	ldr	r3, [pc, #168]	; (80131a0 <__swsetup_r+0xac>)
 80130f8:	4605      	mov	r5, r0
 80130fa:	6818      	ldr	r0, [r3, #0]
 80130fc:	460c      	mov	r4, r1
 80130fe:	b118      	cbz	r0, 8013108 <__swsetup_r+0x14>
 8013100:	6a03      	ldr	r3, [r0, #32]
 8013102:	b90b      	cbnz	r3, 8013108 <__swsetup_r+0x14>
 8013104:	f7ff fed2 	bl	8012eac <__sinit>
 8013108:	89a3      	ldrh	r3, [r4, #12]
 801310a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801310e:	0718      	lsls	r0, r3, #28
 8013110:	d422      	bmi.n	8013158 <__swsetup_r+0x64>
 8013112:	06d9      	lsls	r1, r3, #27
 8013114:	d407      	bmi.n	8013126 <__swsetup_r+0x32>
 8013116:	2309      	movs	r3, #9
 8013118:	602b      	str	r3, [r5, #0]
 801311a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801311e:	81a3      	strh	r3, [r4, #12]
 8013120:	f04f 30ff 	mov.w	r0, #4294967295
 8013124:	e034      	b.n	8013190 <__swsetup_r+0x9c>
 8013126:	0758      	lsls	r0, r3, #29
 8013128:	d512      	bpl.n	8013150 <__swsetup_r+0x5c>
 801312a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801312c:	b141      	cbz	r1, 8013140 <__swsetup_r+0x4c>
 801312e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013132:	4299      	cmp	r1, r3
 8013134:	d002      	beq.n	801313c <__swsetup_r+0x48>
 8013136:	4628      	mov	r0, r5
 8013138:	f000 f8be 	bl	80132b8 <_free_r>
 801313c:	2300      	movs	r3, #0
 801313e:	6363      	str	r3, [r4, #52]	; 0x34
 8013140:	89a3      	ldrh	r3, [r4, #12]
 8013142:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013146:	81a3      	strh	r3, [r4, #12]
 8013148:	2300      	movs	r3, #0
 801314a:	6063      	str	r3, [r4, #4]
 801314c:	6923      	ldr	r3, [r4, #16]
 801314e:	6023      	str	r3, [r4, #0]
 8013150:	89a3      	ldrh	r3, [r4, #12]
 8013152:	f043 0308 	orr.w	r3, r3, #8
 8013156:	81a3      	strh	r3, [r4, #12]
 8013158:	6923      	ldr	r3, [r4, #16]
 801315a:	b94b      	cbnz	r3, 8013170 <__swsetup_r+0x7c>
 801315c:	89a3      	ldrh	r3, [r4, #12]
 801315e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013166:	d003      	beq.n	8013170 <__swsetup_r+0x7c>
 8013168:	4621      	mov	r1, r4
 801316a:	4628      	mov	r0, r5
 801316c:	f000 fd44 	bl	8013bf8 <__smakebuf_r>
 8013170:	89a0      	ldrh	r0, [r4, #12]
 8013172:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013176:	f010 0301 	ands.w	r3, r0, #1
 801317a:	d00a      	beq.n	8013192 <__swsetup_r+0x9e>
 801317c:	2300      	movs	r3, #0
 801317e:	60a3      	str	r3, [r4, #8]
 8013180:	6963      	ldr	r3, [r4, #20]
 8013182:	425b      	negs	r3, r3
 8013184:	61a3      	str	r3, [r4, #24]
 8013186:	6923      	ldr	r3, [r4, #16]
 8013188:	b943      	cbnz	r3, 801319c <__swsetup_r+0xa8>
 801318a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801318e:	d1c4      	bne.n	801311a <__swsetup_r+0x26>
 8013190:	bd38      	pop	{r3, r4, r5, pc}
 8013192:	0781      	lsls	r1, r0, #30
 8013194:	bf58      	it	pl
 8013196:	6963      	ldrpl	r3, [r4, #20]
 8013198:	60a3      	str	r3, [r4, #8]
 801319a:	e7f4      	b.n	8013186 <__swsetup_r+0x92>
 801319c:	2000      	movs	r0, #0
 801319e:	e7f7      	b.n	8013190 <__swsetup_r+0x9c>
 80131a0:	200002d0 	.word	0x200002d0

080131a4 <memset>:
 80131a4:	4402      	add	r2, r0
 80131a6:	4603      	mov	r3, r0
 80131a8:	4293      	cmp	r3, r2
 80131aa:	d100      	bne.n	80131ae <memset+0xa>
 80131ac:	4770      	bx	lr
 80131ae:	f803 1b01 	strb.w	r1, [r3], #1
 80131b2:	e7f9      	b.n	80131a8 <memset+0x4>

080131b4 <_close_r>:
 80131b4:	b538      	push	{r3, r4, r5, lr}
 80131b6:	4d06      	ldr	r5, [pc, #24]	; (80131d0 <_close_r+0x1c>)
 80131b8:	2300      	movs	r3, #0
 80131ba:	4604      	mov	r4, r0
 80131bc:	4608      	mov	r0, r1
 80131be:	602b      	str	r3, [r5, #0]
 80131c0:	f7f6 f82a 	bl	8009218 <_close>
 80131c4:	1c43      	adds	r3, r0, #1
 80131c6:	d102      	bne.n	80131ce <_close_r+0x1a>
 80131c8:	682b      	ldr	r3, [r5, #0]
 80131ca:	b103      	cbz	r3, 80131ce <_close_r+0x1a>
 80131cc:	6023      	str	r3, [r4, #0]
 80131ce:	bd38      	pop	{r3, r4, r5, pc}
 80131d0:	2000874c 	.word	0x2000874c

080131d4 <_lseek_r>:
 80131d4:	b538      	push	{r3, r4, r5, lr}
 80131d6:	4d07      	ldr	r5, [pc, #28]	; (80131f4 <_lseek_r+0x20>)
 80131d8:	4604      	mov	r4, r0
 80131da:	4608      	mov	r0, r1
 80131dc:	4611      	mov	r1, r2
 80131de:	2200      	movs	r2, #0
 80131e0:	602a      	str	r2, [r5, #0]
 80131e2:	461a      	mov	r2, r3
 80131e4:	f7f6 f83f 	bl	8009266 <_lseek>
 80131e8:	1c43      	adds	r3, r0, #1
 80131ea:	d102      	bne.n	80131f2 <_lseek_r+0x1e>
 80131ec:	682b      	ldr	r3, [r5, #0]
 80131ee:	b103      	cbz	r3, 80131f2 <_lseek_r+0x1e>
 80131f0:	6023      	str	r3, [r4, #0]
 80131f2:	bd38      	pop	{r3, r4, r5, pc}
 80131f4:	2000874c 	.word	0x2000874c

080131f8 <_read_r>:
 80131f8:	b538      	push	{r3, r4, r5, lr}
 80131fa:	4d07      	ldr	r5, [pc, #28]	; (8013218 <_read_r+0x20>)
 80131fc:	4604      	mov	r4, r0
 80131fe:	4608      	mov	r0, r1
 8013200:	4611      	mov	r1, r2
 8013202:	2200      	movs	r2, #0
 8013204:	602a      	str	r2, [r5, #0]
 8013206:	461a      	mov	r2, r3
 8013208:	f7f5 ffe9 	bl	80091de <_read>
 801320c:	1c43      	adds	r3, r0, #1
 801320e:	d102      	bne.n	8013216 <_read_r+0x1e>
 8013210:	682b      	ldr	r3, [r5, #0]
 8013212:	b103      	cbz	r3, 8013216 <_read_r+0x1e>
 8013214:	6023      	str	r3, [r4, #0]
 8013216:	bd38      	pop	{r3, r4, r5, pc}
 8013218:	2000874c 	.word	0x2000874c

0801321c <_write_r>:
 801321c:	b538      	push	{r3, r4, r5, lr}
 801321e:	4d07      	ldr	r5, [pc, #28]	; (801323c <_write_r+0x20>)
 8013220:	4604      	mov	r4, r0
 8013222:	4608      	mov	r0, r1
 8013224:	4611      	mov	r1, r2
 8013226:	2200      	movs	r2, #0
 8013228:	602a      	str	r2, [r5, #0]
 801322a:	461a      	mov	r2, r3
 801322c:	f7f2 facc 	bl	80057c8 <_write>
 8013230:	1c43      	adds	r3, r0, #1
 8013232:	d102      	bne.n	801323a <_write_r+0x1e>
 8013234:	682b      	ldr	r3, [r5, #0]
 8013236:	b103      	cbz	r3, 801323a <_write_r+0x1e>
 8013238:	6023      	str	r3, [r4, #0]
 801323a:	bd38      	pop	{r3, r4, r5, pc}
 801323c:	2000874c 	.word	0x2000874c

08013240 <__errno>:
 8013240:	4b01      	ldr	r3, [pc, #4]	; (8013248 <__errno+0x8>)
 8013242:	6818      	ldr	r0, [r3, #0]
 8013244:	4770      	bx	lr
 8013246:	bf00      	nop
 8013248:	200002d0 	.word	0x200002d0

0801324c <__libc_init_array>:
 801324c:	b570      	push	{r4, r5, r6, lr}
 801324e:	4d0d      	ldr	r5, [pc, #52]	; (8013284 <__libc_init_array+0x38>)
 8013250:	4c0d      	ldr	r4, [pc, #52]	; (8013288 <__libc_init_array+0x3c>)
 8013252:	1b64      	subs	r4, r4, r5
 8013254:	10a4      	asrs	r4, r4, #2
 8013256:	2600      	movs	r6, #0
 8013258:	42a6      	cmp	r6, r4
 801325a:	d109      	bne.n	8013270 <__libc_init_array+0x24>
 801325c:	4d0b      	ldr	r5, [pc, #44]	; (801328c <__libc_init_array+0x40>)
 801325e:	4c0c      	ldr	r4, [pc, #48]	; (8013290 <__libc_init_array+0x44>)
 8013260:	f000 fd38 	bl	8013cd4 <_init>
 8013264:	1b64      	subs	r4, r4, r5
 8013266:	10a4      	asrs	r4, r4, #2
 8013268:	2600      	movs	r6, #0
 801326a:	42a6      	cmp	r6, r4
 801326c:	d105      	bne.n	801327a <__libc_init_array+0x2e>
 801326e:	bd70      	pop	{r4, r5, r6, pc}
 8013270:	f855 3b04 	ldr.w	r3, [r5], #4
 8013274:	4798      	blx	r3
 8013276:	3601      	adds	r6, #1
 8013278:	e7ee      	b.n	8013258 <__libc_init_array+0xc>
 801327a:	f855 3b04 	ldr.w	r3, [r5], #4
 801327e:	4798      	blx	r3
 8013280:	3601      	adds	r6, #1
 8013282:	e7f2      	b.n	801326a <__libc_init_array+0x1e>
 8013284:	08014bf8 	.word	0x08014bf8
 8013288:	08014bf8 	.word	0x08014bf8
 801328c:	08014bf8 	.word	0x08014bf8
 8013290:	08014bfc 	.word	0x08014bfc

08013294 <__retarget_lock_init_recursive>:
 8013294:	4770      	bx	lr

08013296 <__retarget_lock_acquire_recursive>:
 8013296:	4770      	bx	lr

08013298 <__retarget_lock_release_recursive>:
 8013298:	4770      	bx	lr

0801329a <memcpy>:
 801329a:	440a      	add	r2, r1
 801329c:	4291      	cmp	r1, r2
 801329e:	f100 33ff 	add.w	r3, r0, #4294967295
 80132a2:	d100      	bne.n	80132a6 <memcpy+0xc>
 80132a4:	4770      	bx	lr
 80132a6:	b510      	push	{r4, lr}
 80132a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80132b0:	4291      	cmp	r1, r2
 80132b2:	d1f9      	bne.n	80132a8 <memcpy+0xe>
 80132b4:	bd10      	pop	{r4, pc}
	...

080132b8 <_free_r>:
 80132b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80132ba:	2900      	cmp	r1, #0
 80132bc:	d044      	beq.n	8013348 <_free_r+0x90>
 80132be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132c2:	9001      	str	r0, [sp, #4]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	f1a1 0404 	sub.w	r4, r1, #4
 80132ca:	bfb8      	it	lt
 80132cc:	18e4      	addlt	r4, r4, r3
 80132ce:	f000 f8df 	bl	8013490 <__malloc_lock>
 80132d2:	4a1e      	ldr	r2, [pc, #120]	; (801334c <_free_r+0x94>)
 80132d4:	9801      	ldr	r0, [sp, #4]
 80132d6:	6813      	ldr	r3, [r2, #0]
 80132d8:	b933      	cbnz	r3, 80132e8 <_free_r+0x30>
 80132da:	6063      	str	r3, [r4, #4]
 80132dc:	6014      	str	r4, [r2, #0]
 80132de:	b003      	add	sp, #12
 80132e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132e4:	f000 b8da 	b.w	801349c <__malloc_unlock>
 80132e8:	42a3      	cmp	r3, r4
 80132ea:	d908      	bls.n	80132fe <_free_r+0x46>
 80132ec:	6825      	ldr	r5, [r4, #0]
 80132ee:	1961      	adds	r1, r4, r5
 80132f0:	428b      	cmp	r3, r1
 80132f2:	bf01      	itttt	eq
 80132f4:	6819      	ldreq	r1, [r3, #0]
 80132f6:	685b      	ldreq	r3, [r3, #4]
 80132f8:	1949      	addeq	r1, r1, r5
 80132fa:	6021      	streq	r1, [r4, #0]
 80132fc:	e7ed      	b.n	80132da <_free_r+0x22>
 80132fe:	461a      	mov	r2, r3
 8013300:	685b      	ldr	r3, [r3, #4]
 8013302:	b10b      	cbz	r3, 8013308 <_free_r+0x50>
 8013304:	42a3      	cmp	r3, r4
 8013306:	d9fa      	bls.n	80132fe <_free_r+0x46>
 8013308:	6811      	ldr	r1, [r2, #0]
 801330a:	1855      	adds	r5, r2, r1
 801330c:	42a5      	cmp	r5, r4
 801330e:	d10b      	bne.n	8013328 <_free_r+0x70>
 8013310:	6824      	ldr	r4, [r4, #0]
 8013312:	4421      	add	r1, r4
 8013314:	1854      	adds	r4, r2, r1
 8013316:	42a3      	cmp	r3, r4
 8013318:	6011      	str	r1, [r2, #0]
 801331a:	d1e0      	bne.n	80132de <_free_r+0x26>
 801331c:	681c      	ldr	r4, [r3, #0]
 801331e:	685b      	ldr	r3, [r3, #4]
 8013320:	6053      	str	r3, [r2, #4]
 8013322:	440c      	add	r4, r1
 8013324:	6014      	str	r4, [r2, #0]
 8013326:	e7da      	b.n	80132de <_free_r+0x26>
 8013328:	d902      	bls.n	8013330 <_free_r+0x78>
 801332a:	230c      	movs	r3, #12
 801332c:	6003      	str	r3, [r0, #0]
 801332e:	e7d6      	b.n	80132de <_free_r+0x26>
 8013330:	6825      	ldr	r5, [r4, #0]
 8013332:	1961      	adds	r1, r4, r5
 8013334:	428b      	cmp	r3, r1
 8013336:	bf04      	itt	eq
 8013338:	6819      	ldreq	r1, [r3, #0]
 801333a:	685b      	ldreq	r3, [r3, #4]
 801333c:	6063      	str	r3, [r4, #4]
 801333e:	bf04      	itt	eq
 8013340:	1949      	addeq	r1, r1, r5
 8013342:	6021      	streq	r1, [r4, #0]
 8013344:	6054      	str	r4, [r2, #4]
 8013346:	e7ca      	b.n	80132de <_free_r+0x26>
 8013348:	b003      	add	sp, #12
 801334a:	bd30      	pop	{r4, r5, pc}
 801334c:	20008754 	.word	0x20008754

08013350 <sbrk_aligned>:
 8013350:	b570      	push	{r4, r5, r6, lr}
 8013352:	4e0e      	ldr	r6, [pc, #56]	; (801338c <sbrk_aligned+0x3c>)
 8013354:	460c      	mov	r4, r1
 8013356:	6831      	ldr	r1, [r6, #0]
 8013358:	4605      	mov	r5, r0
 801335a:	b911      	cbnz	r1, 8013362 <sbrk_aligned+0x12>
 801335c:	f000 fcaa 	bl	8013cb4 <_sbrk_r>
 8013360:	6030      	str	r0, [r6, #0]
 8013362:	4621      	mov	r1, r4
 8013364:	4628      	mov	r0, r5
 8013366:	f000 fca5 	bl	8013cb4 <_sbrk_r>
 801336a:	1c43      	adds	r3, r0, #1
 801336c:	d00a      	beq.n	8013384 <sbrk_aligned+0x34>
 801336e:	1cc4      	adds	r4, r0, #3
 8013370:	f024 0403 	bic.w	r4, r4, #3
 8013374:	42a0      	cmp	r0, r4
 8013376:	d007      	beq.n	8013388 <sbrk_aligned+0x38>
 8013378:	1a21      	subs	r1, r4, r0
 801337a:	4628      	mov	r0, r5
 801337c:	f000 fc9a 	bl	8013cb4 <_sbrk_r>
 8013380:	3001      	adds	r0, #1
 8013382:	d101      	bne.n	8013388 <sbrk_aligned+0x38>
 8013384:	f04f 34ff 	mov.w	r4, #4294967295
 8013388:	4620      	mov	r0, r4
 801338a:	bd70      	pop	{r4, r5, r6, pc}
 801338c:	20008758 	.word	0x20008758

08013390 <_malloc_r>:
 8013390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013394:	1ccd      	adds	r5, r1, #3
 8013396:	f025 0503 	bic.w	r5, r5, #3
 801339a:	3508      	adds	r5, #8
 801339c:	2d0c      	cmp	r5, #12
 801339e:	bf38      	it	cc
 80133a0:	250c      	movcc	r5, #12
 80133a2:	2d00      	cmp	r5, #0
 80133a4:	4607      	mov	r7, r0
 80133a6:	db01      	blt.n	80133ac <_malloc_r+0x1c>
 80133a8:	42a9      	cmp	r1, r5
 80133aa:	d905      	bls.n	80133b8 <_malloc_r+0x28>
 80133ac:	230c      	movs	r3, #12
 80133ae:	603b      	str	r3, [r7, #0]
 80133b0:	2600      	movs	r6, #0
 80133b2:	4630      	mov	r0, r6
 80133b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801348c <_malloc_r+0xfc>
 80133bc:	f000 f868 	bl	8013490 <__malloc_lock>
 80133c0:	f8d8 3000 	ldr.w	r3, [r8]
 80133c4:	461c      	mov	r4, r3
 80133c6:	bb5c      	cbnz	r4, 8013420 <_malloc_r+0x90>
 80133c8:	4629      	mov	r1, r5
 80133ca:	4638      	mov	r0, r7
 80133cc:	f7ff ffc0 	bl	8013350 <sbrk_aligned>
 80133d0:	1c43      	adds	r3, r0, #1
 80133d2:	4604      	mov	r4, r0
 80133d4:	d155      	bne.n	8013482 <_malloc_r+0xf2>
 80133d6:	f8d8 4000 	ldr.w	r4, [r8]
 80133da:	4626      	mov	r6, r4
 80133dc:	2e00      	cmp	r6, #0
 80133de:	d145      	bne.n	801346c <_malloc_r+0xdc>
 80133e0:	2c00      	cmp	r4, #0
 80133e2:	d048      	beq.n	8013476 <_malloc_r+0xe6>
 80133e4:	6823      	ldr	r3, [r4, #0]
 80133e6:	4631      	mov	r1, r6
 80133e8:	4638      	mov	r0, r7
 80133ea:	eb04 0903 	add.w	r9, r4, r3
 80133ee:	f000 fc61 	bl	8013cb4 <_sbrk_r>
 80133f2:	4581      	cmp	r9, r0
 80133f4:	d13f      	bne.n	8013476 <_malloc_r+0xe6>
 80133f6:	6821      	ldr	r1, [r4, #0]
 80133f8:	1a6d      	subs	r5, r5, r1
 80133fa:	4629      	mov	r1, r5
 80133fc:	4638      	mov	r0, r7
 80133fe:	f7ff ffa7 	bl	8013350 <sbrk_aligned>
 8013402:	3001      	adds	r0, #1
 8013404:	d037      	beq.n	8013476 <_malloc_r+0xe6>
 8013406:	6823      	ldr	r3, [r4, #0]
 8013408:	442b      	add	r3, r5
 801340a:	6023      	str	r3, [r4, #0]
 801340c:	f8d8 3000 	ldr.w	r3, [r8]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d038      	beq.n	8013486 <_malloc_r+0xf6>
 8013414:	685a      	ldr	r2, [r3, #4]
 8013416:	42a2      	cmp	r2, r4
 8013418:	d12b      	bne.n	8013472 <_malloc_r+0xe2>
 801341a:	2200      	movs	r2, #0
 801341c:	605a      	str	r2, [r3, #4]
 801341e:	e00f      	b.n	8013440 <_malloc_r+0xb0>
 8013420:	6822      	ldr	r2, [r4, #0]
 8013422:	1b52      	subs	r2, r2, r5
 8013424:	d41f      	bmi.n	8013466 <_malloc_r+0xd6>
 8013426:	2a0b      	cmp	r2, #11
 8013428:	d917      	bls.n	801345a <_malloc_r+0xca>
 801342a:	1961      	adds	r1, r4, r5
 801342c:	42a3      	cmp	r3, r4
 801342e:	6025      	str	r5, [r4, #0]
 8013430:	bf18      	it	ne
 8013432:	6059      	strne	r1, [r3, #4]
 8013434:	6863      	ldr	r3, [r4, #4]
 8013436:	bf08      	it	eq
 8013438:	f8c8 1000 	streq.w	r1, [r8]
 801343c:	5162      	str	r2, [r4, r5]
 801343e:	604b      	str	r3, [r1, #4]
 8013440:	4638      	mov	r0, r7
 8013442:	f104 060b 	add.w	r6, r4, #11
 8013446:	f000 f829 	bl	801349c <__malloc_unlock>
 801344a:	f026 0607 	bic.w	r6, r6, #7
 801344e:	1d23      	adds	r3, r4, #4
 8013450:	1af2      	subs	r2, r6, r3
 8013452:	d0ae      	beq.n	80133b2 <_malloc_r+0x22>
 8013454:	1b9b      	subs	r3, r3, r6
 8013456:	50a3      	str	r3, [r4, r2]
 8013458:	e7ab      	b.n	80133b2 <_malloc_r+0x22>
 801345a:	42a3      	cmp	r3, r4
 801345c:	6862      	ldr	r2, [r4, #4]
 801345e:	d1dd      	bne.n	801341c <_malloc_r+0x8c>
 8013460:	f8c8 2000 	str.w	r2, [r8]
 8013464:	e7ec      	b.n	8013440 <_malloc_r+0xb0>
 8013466:	4623      	mov	r3, r4
 8013468:	6864      	ldr	r4, [r4, #4]
 801346a:	e7ac      	b.n	80133c6 <_malloc_r+0x36>
 801346c:	4634      	mov	r4, r6
 801346e:	6876      	ldr	r6, [r6, #4]
 8013470:	e7b4      	b.n	80133dc <_malloc_r+0x4c>
 8013472:	4613      	mov	r3, r2
 8013474:	e7cc      	b.n	8013410 <_malloc_r+0x80>
 8013476:	230c      	movs	r3, #12
 8013478:	603b      	str	r3, [r7, #0]
 801347a:	4638      	mov	r0, r7
 801347c:	f000 f80e 	bl	801349c <__malloc_unlock>
 8013480:	e797      	b.n	80133b2 <_malloc_r+0x22>
 8013482:	6025      	str	r5, [r4, #0]
 8013484:	e7dc      	b.n	8013440 <_malloc_r+0xb0>
 8013486:	605b      	str	r3, [r3, #4]
 8013488:	deff      	udf	#255	; 0xff
 801348a:	bf00      	nop
 801348c:	20008754 	.word	0x20008754

08013490 <__malloc_lock>:
 8013490:	4801      	ldr	r0, [pc, #4]	; (8013498 <__malloc_lock+0x8>)
 8013492:	f7ff bf00 	b.w	8013296 <__retarget_lock_acquire_recursive>
 8013496:	bf00      	nop
 8013498:	20008750 	.word	0x20008750

0801349c <__malloc_unlock>:
 801349c:	4801      	ldr	r0, [pc, #4]	; (80134a4 <__malloc_unlock+0x8>)
 801349e:	f7ff befb 	b.w	8013298 <__retarget_lock_release_recursive>
 80134a2:	bf00      	nop
 80134a4:	20008750 	.word	0x20008750

080134a8 <__sfputc_r>:
 80134a8:	6893      	ldr	r3, [r2, #8]
 80134aa:	3b01      	subs	r3, #1
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	b410      	push	{r4}
 80134b0:	6093      	str	r3, [r2, #8]
 80134b2:	da08      	bge.n	80134c6 <__sfputc_r+0x1e>
 80134b4:	6994      	ldr	r4, [r2, #24]
 80134b6:	42a3      	cmp	r3, r4
 80134b8:	db01      	blt.n	80134be <__sfputc_r+0x16>
 80134ba:	290a      	cmp	r1, #10
 80134bc:	d103      	bne.n	80134c6 <__sfputc_r+0x1e>
 80134be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134c2:	f7ff bdda 	b.w	801307a <__swbuf_r>
 80134c6:	6813      	ldr	r3, [r2, #0]
 80134c8:	1c58      	adds	r0, r3, #1
 80134ca:	6010      	str	r0, [r2, #0]
 80134cc:	7019      	strb	r1, [r3, #0]
 80134ce:	4608      	mov	r0, r1
 80134d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134d4:	4770      	bx	lr

080134d6 <__sfputs_r>:
 80134d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134d8:	4606      	mov	r6, r0
 80134da:	460f      	mov	r7, r1
 80134dc:	4614      	mov	r4, r2
 80134de:	18d5      	adds	r5, r2, r3
 80134e0:	42ac      	cmp	r4, r5
 80134e2:	d101      	bne.n	80134e8 <__sfputs_r+0x12>
 80134e4:	2000      	movs	r0, #0
 80134e6:	e007      	b.n	80134f8 <__sfputs_r+0x22>
 80134e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134ec:	463a      	mov	r2, r7
 80134ee:	4630      	mov	r0, r6
 80134f0:	f7ff ffda 	bl	80134a8 <__sfputc_r>
 80134f4:	1c43      	adds	r3, r0, #1
 80134f6:	d1f3      	bne.n	80134e0 <__sfputs_r+0xa>
 80134f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080134fc <_vfiprintf_r>:
 80134fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013500:	460d      	mov	r5, r1
 8013502:	b09d      	sub	sp, #116	; 0x74
 8013504:	4614      	mov	r4, r2
 8013506:	4698      	mov	r8, r3
 8013508:	4606      	mov	r6, r0
 801350a:	b118      	cbz	r0, 8013514 <_vfiprintf_r+0x18>
 801350c:	6a03      	ldr	r3, [r0, #32]
 801350e:	b90b      	cbnz	r3, 8013514 <_vfiprintf_r+0x18>
 8013510:	f7ff fccc 	bl	8012eac <__sinit>
 8013514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013516:	07d9      	lsls	r1, r3, #31
 8013518:	d405      	bmi.n	8013526 <_vfiprintf_r+0x2a>
 801351a:	89ab      	ldrh	r3, [r5, #12]
 801351c:	059a      	lsls	r2, r3, #22
 801351e:	d402      	bmi.n	8013526 <_vfiprintf_r+0x2a>
 8013520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013522:	f7ff feb8 	bl	8013296 <__retarget_lock_acquire_recursive>
 8013526:	89ab      	ldrh	r3, [r5, #12]
 8013528:	071b      	lsls	r3, r3, #28
 801352a:	d501      	bpl.n	8013530 <_vfiprintf_r+0x34>
 801352c:	692b      	ldr	r3, [r5, #16]
 801352e:	b99b      	cbnz	r3, 8013558 <_vfiprintf_r+0x5c>
 8013530:	4629      	mov	r1, r5
 8013532:	4630      	mov	r0, r6
 8013534:	f7ff fdde 	bl	80130f4 <__swsetup_r>
 8013538:	b170      	cbz	r0, 8013558 <_vfiprintf_r+0x5c>
 801353a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801353c:	07dc      	lsls	r4, r3, #31
 801353e:	d504      	bpl.n	801354a <_vfiprintf_r+0x4e>
 8013540:	f04f 30ff 	mov.w	r0, #4294967295
 8013544:	b01d      	add	sp, #116	; 0x74
 8013546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801354a:	89ab      	ldrh	r3, [r5, #12]
 801354c:	0598      	lsls	r0, r3, #22
 801354e:	d4f7      	bmi.n	8013540 <_vfiprintf_r+0x44>
 8013550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013552:	f7ff fea1 	bl	8013298 <__retarget_lock_release_recursive>
 8013556:	e7f3      	b.n	8013540 <_vfiprintf_r+0x44>
 8013558:	2300      	movs	r3, #0
 801355a:	9309      	str	r3, [sp, #36]	; 0x24
 801355c:	2320      	movs	r3, #32
 801355e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013562:	f8cd 800c 	str.w	r8, [sp, #12]
 8013566:	2330      	movs	r3, #48	; 0x30
 8013568:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801371c <_vfiprintf_r+0x220>
 801356c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013570:	f04f 0901 	mov.w	r9, #1
 8013574:	4623      	mov	r3, r4
 8013576:	469a      	mov	sl, r3
 8013578:	f813 2b01 	ldrb.w	r2, [r3], #1
 801357c:	b10a      	cbz	r2, 8013582 <_vfiprintf_r+0x86>
 801357e:	2a25      	cmp	r2, #37	; 0x25
 8013580:	d1f9      	bne.n	8013576 <_vfiprintf_r+0x7a>
 8013582:	ebba 0b04 	subs.w	fp, sl, r4
 8013586:	d00b      	beq.n	80135a0 <_vfiprintf_r+0xa4>
 8013588:	465b      	mov	r3, fp
 801358a:	4622      	mov	r2, r4
 801358c:	4629      	mov	r1, r5
 801358e:	4630      	mov	r0, r6
 8013590:	f7ff ffa1 	bl	80134d6 <__sfputs_r>
 8013594:	3001      	adds	r0, #1
 8013596:	f000 80a9 	beq.w	80136ec <_vfiprintf_r+0x1f0>
 801359a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801359c:	445a      	add	r2, fp
 801359e:	9209      	str	r2, [sp, #36]	; 0x24
 80135a0:	f89a 3000 	ldrb.w	r3, [sl]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	f000 80a1 	beq.w	80136ec <_vfiprintf_r+0x1f0>
 80135aa:	2300      	movs	r3, #0
 80135ac:	f04f 32ff 	mov.w	r2, #4294967295
 80135b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80135b4:	f10a 0a01 	add.w	sl, sl, #1
 80135b8:	9304      	str	r3, [sp, #16]
 80135ba:	9307      	str	r3, [sp, #28]
 80135bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80135c0:	931a      	str	r3, [sp, #104]	; 0x68
 80135c2:	4654      	mov	r4, sl
 80135c4:	2205      	movs	r2, #5
 80135c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135ca:	4854      	ldr	r0, [pc, #336]	; (801371c <_vfiprintf_r+0x220>)
 80135cc:	f7f0 fe00 	bl	80041d0 <memchr>
 80135d0:	9a04      	ldr	r2, [sp, #16]
 80135d2:	b9d8      	cbnz	r0, 801360c <_vfiprintf_r+0x110>
 80135d4:	06d1      	lsls	r1, r2, #27
 80135d6:	bf44      	itt	mi
 80135d8:	2320      	movmi	r3, #32
 80135da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135de:	0713      	lsls	r3, r2, #28
 80135e0:	bf44      	itt	mi
 80135e2:	232b      	movmi	r3, #43	; 0x2b
 80135e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135e8:	f89a 3000 	ldrb.w	r3, [sl]
 80135ec:	2b2a      	cmp	r3, #42	; 0x2a
 80135ee:	d015      	beq.n	801361c <_vfiprintf_r+0x120>
 80135f0:	9a07      	ldr	r2, [sp, #28]
 80135f2:	4654      	mov	r4, sl
 80135f4:	2000      	movs	r0, #0
 80135f6:	f04f 0c0a 	mov.w	ip, #10
 80135fa:	4621      	mov	r1, r4
 80135fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013600:	3b30      	subs	r3, #48	; 0x30
 8013602:	2b09      	cmp	r3, #9
 8013604:	d94d      	bls.n	80136a2 <_vfiprintf_r+0x1a6>
 8013606:	b1b0      	cbz	r0, 8013636 <_vfiprintf_r+0x13a>
 8013608:	9207      	str	r2, [sp, #28]
 801360a:	e014      	b.n	8013636 <_vfiprintf_r+0x13a>
 801360c:	eba0 0308 	sub.w	r3, r0, r8
 8013610:	fa09 f303 	lsl.w	r3, r9, r3
 8013614:	4313      	orrs	r3, r2
 8013616:	9304      	str	r3, [sp, #16]
 8013618:	46a2      	mov	sl, r4
 801361a:	e7d2      	b.n	80135c2 <_vfiprintf_r+0xc6>
 801361c:	9b03      	ldr	r3, [sp, #12]
 801361e:	1d19      	adds	r1, r3, #4
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	9103      	str	r1, [sp, #12]
 8013624:	2b00      	cmp	r3, #0
 8013626:	bfbb      	ittet	lt
 8013628:	425b      	neglt	r3, r3
 801362a:	f042 0202 	orrlt.w	r2, r2, #2
 801362e:	9307      	strge	r3, [sp, #28]
 8013630:	9307      	strlt	r3, [sp, #28]
 8013632:	bfb8      	it	lt
 8013634:	9204      	strlt	r2, [sp, #16]
 8013636:	7823      	ldrb	r3, [r4, #0]
 8013638:	2b2e      	cmp	r3, #46	; 0x2e
 801363a:	d10c      	bne.n	8013656 <_vfiprintf_r+0x15a>
 801363c:	7863      	ldrb	r3, [r4, #1]
 801363e:	2b2a      	cmp	r3, #42	; 0x2a
 8013640:	d134      	bne.n	80136ac <_vfiprintf_r+0x1b0>
 8013642:	9b03      	ldr	r3, [sp, #12]
 8013644:	1d1a      	adds	r2, r3, #4
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	9203      	str	r2, [sp, #12]
 801364a:	2b00      	cmp	r3, #0
 801364c:	bfb8      	it	lt
 801364e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013652:	3402      	adds	r4, #2
 8013654:	9305      	str	r3, [sp, #20]
 8013656:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801372c <_vfiprintf_r+0x230>
 801365a:	7821      	ldrb	r1, [r4, #0]
 801365c:	2203      	movs	r2, #3
 801365e:	4650      	mov	r0, sl
 8013660:	f7f0 fdb6 	bl	80041d0 <memchr>
 8013664:	b138      	cbz	r0, 8013676 <_vfiprintf_r+0x17a>
 8013666:	9b04      	ldr	r3, [sp, #16]
 8013668:	eba0 000a 	sub.w	r0, r0, sl
 801366c:	2240      	movs	r2, #64	; 0x40
 801366e:	4082      	lsls	r2, r0
 8013670:	4313      	orrs	r3, r2
 8013672:	3401      	adds	r4, #1
 8013674:	9304      	str	r3, [sp, #16]
 8013676:	f814 1b01 	ldrb.w	r1, [r4], #1
 801367a:	4829      	ldr	r0, [pc, #164]	; (8013720 <_vfiprintf_r+0x224>)
 801367c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013680:	2206      	movs	r2, #6
 8013682:	f7f0 fda5 	bl	80041d0 <memchr>
 8013686:	2800      	cmp	r0, #0
 8013688:	d03f      	beq.n	801370a <_vfiprintf_r+0x20e>
 801368a:	4b26      	ldr	r3, [pc, #152]	; (8013724 <_vfiprintf_r+0x228>)
 801368c:	bb1b      	cbnz	r3, 80136d6 <_vfiprintf_r+0x1da>
 801368e:	9b03      	ldr	r3, [sp, #12]
 8013690:	3307      	adds	r3, #7
 8013692:	f023 0307 	bic.w	r3, r3, #7
 8013696:	3308      	adds	r3, #8
 8013698:	9303      	str	r3, [sp, #12]
 801369a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801369c:	443b      	add	r3, r7
 801369e:	9309      	str	r3, [sp, #36]	; 0x24
 80136a0:	e768      	b.n	8013574 <_vfiprintf_r+0x78>
 80136a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80136a6:	460c      	mov	r4, r1
 80136a8:	2001      	movs	r0, #1
 80136aa:	e7a6      	b.n	80135fa <_vfiprintf_r+0xfe>
 80136ac:	2300      	movs	r3, #0
 80136ae:	3401      	adds	r4, #1
 80136b0:	9305      	str	r3, [sp, #20]
 80136b2:	4619      	mov	r1, r3
 80136b4:	f04f 0c0a 	mov.w	ip, #10
 80136b8:	4620      	mov	r0, r4
 80136ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80136be:	3a30      	subs	r2, #48	; 0x30
 80136c0:	2a09      	cmp	r2, #9
 80136c2:	d903      	bls.n	80136cc <_vfiprintf_r+0x1d0>
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d0c6      	beq.n	8013656 <_vfiprintf_r+0x15a>
 80136c8:	9105      	str	r1, [sp, #20]
 80136ca:	e7c4      	b.n	8013656 <_vfiprintf_r+0x15a>
 80136cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80136d0:	4604      	mov	r4, r0
 80136d2:	2301      	movs	r3, #1
 80136d4:	e7f0      	b.n	80136b8 <_vfiprintf_r+0x1bc>
 80136d6:	ab03      	add	r3, sp, #12
 80136d8:	9300      	str	r3, [sp, #0]
 80136da:	462a      	mov	r2, r5
 80136dc:	4b12      	ldr	r3, [pc, #72]	; (8013728 <_vfiprintf_r+0x22c>)
 80136de:	a904      	add	r1, sp, #16
 80136e0:	4630      	mov	r0, r6
 80136e2:	f3af 8000 	nop.w
 80136e6:	4607      	mov	r7, r0
 80136e8:	1c78      	adds	r0, r7, #1
 80136ea:	d1d6      	bne.n	801369a <_vfiprintf_r+0x19e>
 80136ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80136ee:	07d9      	lsls	r1, r3, #31
 80136f0:	d405      	bmi.n	80136fe <_vfiprintf_r+0x202>
 80136f2:	89ab      	ldrh	r3, [r5, #12]
 80136f4:	059a      	lsls	r2, r3, #22
 80136f6:	d402      	bmi.n	80136fe <_vfiprintf_r+0x202>
 80136f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136fa:	f7ff fdcd 	bl	8013298 <__retarget_lock_release_recursive>
 80136fe:	89ab      	ldrh	r3, [r5, #12]
 8013700:	065b      	lsls	r3, r3, #25
 8013702:	f53f af1d 	bmi.w	8013540 <_vfiprintf_r+0x44>
 8013706:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013708:	e71c      	b.n	8013544 <_vfiprintf_r+0x48>
 801370a:	ab03      	add	r3, sp, #12
 801370c:	9300      	str	r3, [sp, #0]
 801370e:	462a      	mov	r2, r5
 8013710:	4b05      	ldr	r3, [pc, #20]	; (8013728 <_vfiprintf_r+0x22c>)
 8013712:	a904      	add	r1, sp, #16
 8013714:	4630      	mov	r0, r6
 8013716:	f000 f879 	bl	801380c <_printf_i>
 801371a:	e7e4      	b.n	80136e6 <_vfiprintf_r+0x1ea>
 801371c:	08014bbc 	.word	0x08014bbc
 8013720:	08014bc6 	.word	0x08014bc6
 8013724:	00000000 	.word	0x00000000
 8013728:	080134d7 	.word	0x080134d7
 801372c:	08014bc2 	.word	0x08014bc2

08013730 <_printf_common>:
 8013730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013734:	4616      	mov	r6, r2
 8013736:	4699      	mov	r9, r3
 8013738:	688a      	ldr	r2, [r1, #8]
 801373a:	690b      	ldr	r3, [r1, #16]
 801373c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013740:	4293      	cmp	r3, r2
 8013742:	bfb8      	it	lt
 8013744:	4613      	movlt	r3, r2
 8013746:	6033      	str	r3, [r6, #0]
 8013748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801374c:	4607      	mov	r7, r0
 801374e:	460c      	mov	r4, r1
 8013750:	b10a      	cbz	r2, 8013756 <_printf_common+0x26>
 8013752:	3301      	adds	r3, #1
 8013754:	6033      	str	r3, [r6, #0]
 8013756:	6823      	ldr	r3, [r4, #0]
 8013758:	0699      	lsls	r1, r3, #26
 801375a:	bf42      	ittt	mi
 801375c:	6833      	ldrmi	r3, [r6, #0]
 801375e:	3302      	addmi	r3, #2
 8013760:	6033      	strmi	r3, [r6, #0]
 8013762:	6825      	ldr	r5, [r4, #0]
 8013764:	f015 0506 	ands.w	r5, r5, #6
 8013768:	d106      	bne.n	8013778 <_printf_common+0x48>
 801376a:	f104 0a19 	add.w	sl, r4, #25
 801376e:	68e3      	ldr	r3, [r4, #12]
 8013770:	6832      	ldr	r2, [r6, #0]
 8013772:	1a9b      	subs	r3, r3, r2
 8013774:	42ab      	cmp	r3, r5
 8013776:	dc26      	bgt.n	80137c6 <_printf_common+0x96>
 8013778:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801377c:	1e13      	subs	r3, r2, #0
 801377e:	6822      	ldr	r2, [r4, #0]
 8013780:	bf18      	it	ne
 8013782:	2301      	movne	r3, #1
 8013784:	0692      	lsls	r2, r2, #26
 8013786:	d42b      	bmi.n	80137e0 <_printf_common+0xb0>
 8013788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801378c:	4649      	mov	r1, r9
 801378e:	4638      	mov	r0, r7
 8013790:	47c0      	blx	r8
 8013792:	3001      	adds	r0, #1
 8013794:	d01e      	beq.n	80137d4 <_printf_common+0xa4>
 8013796:	6823      	ldr	r3, [r4, #0]
 8013798:	6922      	ldr	r2, [r4, #16]
 801379a:	f003 0306 	and.w	r3, r3, #6
 801379e:	2b04      	cmp	r3, #4
 80137a0:	bf02      	ittt	eq
 80137a2:	68e5      	ldreq	r5, [r4, #12]
 80137a4:	6833      	ldreq	r3, [r6, #0]
 80137a6:	1aed      	subeq	r5, r5, r3
 80137a8:	68a3      	ldr	r3, [r4, #8]
 80137aa:	bf0c      	ite	eq
 80137ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80137b0:	2500      	movne	r5, #0
 80137b2:	4293      	cmp	r3, r2
 80137b4:	bfc4      	itt	gt
 80137b6:	1a9b      	subgt	r3, r3, r2
 80137b8:	18ed      	addgt	r5, r5, r3
 80137ba:	2600      	movs	r6, #0
 80137bc:	341a      	adds	r4, #26
 80137be:	42b5      	cmp	r5, r6
 80137c0:	d11a      	bne.n	80137f8 <_printf_common+0xc8>
 80137c2:	2000      	movs	r0, #0
 80137c4:	e008      	b.n	80137d8 <_printf_common+0xa8>
 80137c6:	2301      	movs	r3, #1
 80137c8:	4652      	mov	r2, sl
 80137ca:	4649      	mov	r1, r9
 80137cc:	4638      	mov	r0, r7
 80137ce:	47c0      	blx	r8
 80137d0:	3001      	adds	r0, #1
 80137d2:	d103      	bne.n	80137dc <_printf_common+0xac>
 80137d4:	f04f 30ff 	mov.w	r0, #4294967295
 80137d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137dc:	3501      	adds	r5, #1
 80137de:	e7c6      	b.n	801376e <_printf_common+0x3e>
 80137e0:	18e1      	adds	r1, r4, r3
 80137e2:	1c5a      	adds	r2, r3, #1
 80137e4:	2030      	movs	r0, #48	; 0x30
 80137e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80137ea:	4422      	add	r2, r4
 80137ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80137f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80137f4:	3302      	adds	r3, #2
 80137f6:	e7c7      	b.n	8013788 <_printf_common+0x58>
 80137f8:	2301      	movs	r3, #1
 80137fa:	4622      	mov	r2, r4
 80137fc:	4649      	mov	r1, r9
 80137fe:	4638      	mov	r0, r7
 8013800:	47c0      	blx	r8
 8013802:	3001      	adds	r0, #1
 8013804:	d0e6      	beq.n	80137d4 <_printf_common+0xa4>
 8013806:	3601      	adds	r6, #1
 8013808:	e7d9      	b.n	80137be <_printf_common+0x8e>
	...

0801380c <_printf_i>:
 801380c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013810:	7e0f      	ldrb	r7, [r1, #24]
 8013812:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013814:	2f78      	cmp	r7, #120	; 0x78
 8013816:	4691      	mov	r9, r2
 8013818:	4680      	mov	r8, r0
 801381a:	460c      	mov	r4, r1
 801381c:	469a      	mov	sl, r3
 801381e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013822:	d807      	bhi.n	8013834 <_printf_i+0x28>
 8013824:	2f62      	cmp	r7, #98	; 0x62
 8013826:	d80a      	bhi.n	801383e <_printf_i+0x32>
 8013828:	2f00      	cmp	r7, #0
 801382a:	f000 80d4 	beq.w	80139d6 <_printf_i+0x1ca>
 801382e:	2f58      	cmp	r7, #88	; 0x58
 8013830:	f000 80c0 	beq.w	80139b4 <_printf_i+0x1a8>
 8013834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801383c:	e03a      	b.n	80138b4 <_printf_i+0xa8>
 801383e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013842:	2b15      	cmp	r3, #21
 8013844:	d8f6      	bhi.n	8013834 <_printf_i+0x28>
 8013846:	a101      	add	r1, pc, #4	; (adr r1, 801384c <_printf_i+0x40>)
 8013848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801384c:	080138a5 	.word	0x080138a5
 8013850:	080138b9 	.word	0x080138b9
 8013854:	08013835 	.word	0x08013835
 8013858:	08013835 	.word	0x08013835
 801385c:	08013835 	.word	0x08013835
 8013860:	08013835 	.word	0x08013835
 8013864:	080138b9 	.word	0x080138b9
 8013868:	08013835 	.word	0x08013835
 801386c:	08013835 	.word	0x08013835
 8013870:	08013835 	.word	0x08013835
 8013874:	08013835 	.word	0x08013835
 8013878:	080139bd 	.word	0x080139bd
 801387c:	080138e5 	.word	0x080138e5
 8013880:	08013977 	.word	0x08013977
 8013884:	08013835 	.word	0x08013835
 8013888:	08013835 	.word	0x08013835
 801388c:	080139df 	.word	0x080139df
 8013890:	08013835 	.word	0x08013835
 8013894:	080138e5 	.word	0x080138e5
 8013898:	08013835 	.word	0x08013835
 801389c:	08013835 	.word	0x08013835
 80138a0:	0801397f 	.word	0x0801397f
 80138a4:	682b      	ldr	r3, [r5, #0]
 80138a6:	1d1a      	adds	r2, r3, #4
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	602a      	str	r2, [r5, #0]
 80138ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80138b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80138b4:	2301      	movs	r3, #1
 80138b6:	e09f      	b.n	80139f8 <_printf_i+0x1ec>
 80138b8:	6820      	ldr	r0, [r4, #0]
 80138ba:	682b      	ldr	r3, [r5, #0]
 80138bc:	0607      	lsls	r7, r0, #24
 80138be:	f103 0104 	add.w	r1, r3, #4
 80138c2:	6029      	str	r1, [r5, #0]
 80138c4:	d501      	bpl.n	80138ca <_printf_i+0xbe>
 80138c6:	681e      	ldr	r6, [r3, #0]
 80138c8:	e003      	b.n	80138d2 <_printf_i+0xc6>
 80138ca:	0646      	lsls	r6, r0, #25
 80138cc:	d5fb      	bpl.n	80138c6 <_printf_i+0xba>
 80138ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80138d2:	2e00      	cmp	r6, #0
 80138d4:	da03      	bge.n	80138de <_printf_i+0xd2>
 80138d6:	232d      	movs	r3, #45	; 0x2d
 80138d8:	4276      	negs	r6, r6
 80138da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138de:	485a      	ldr	r0, [pc, #360]	; (8013a48 <_printf_i+0x23c>)
 80138e0:	230a      	movs	r3, #10
 80138e2:	e012      	b.n	801390a <_printf_i+0xfe>
 80138e4:	682b      	ldr	r3, [r5, #0]
 80138e6:	6820      	ldr	r0, [r4, #0]
 80138e8:	1d19      	adds	r1, r3, #4
 80138ea:	6029      	str	r1, [r5, #0]
 80138ec:	0605      	lsls	r5, r0, #24
 80138ee:	d501      	bpl.n	80138f4 <_printf_i+0xe8>
 80138f0:	681e      	ldr	r6, [r3, #0]
 80138f2:	e002      	b.n	80138fa <_printf_i+0xee>
 80138f4:	0641      	lsls	r1, r0, #25
 80138f6:	d5fb      	bpl.n	80138f0 <_printf_i+0xe4>
 80138f8:	881e      	ldrh	r6, [r3, #0]
 80138fa:	4853      	ldr	r0, [pc, #332]	; (8013a48 <_printf_i+0x23c>)
 80138fc:	2f6f      	cmp	r7, #111	; 0x6f
 80138fe:	bf0c      	ite	eq
 8013900:	2308      	moveq	r3, #8
 8013902:	230a      	movne	r3, #10
 8013904:	2100      	movs	r1, #0
 8013906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801390a:	6865      	ldr	r5, [r4, #4]
 801390c:	60a5      	str	r5, [r4, #8]
 801390e:	2d00      	cmp	r5, #0
 8013910:	bfa2      	ittt	ge
 8013912:	6821      	ldrge	r1, [r4, #0]
 8013914:	f021 0104 	bicge.w	r1, r1, #4
 8013918:	6021      	strge	r1, [r4, #0]
 801391a:	b90e      	cbnz	r6, 8013920 <_printf_i+0x114>
 801391c:	2d00      	cmp	r5, #0
 801391e:	d04b      	beq.n	80139b8 <_printf_i+0x1ac>
 8013920:	4615      	mov	r5, r2
 8013922:	fbb6 f1f3 	udiv	r1, r6, r3
 8013926:	fb03 6711 	mls	r7, r3, r1, r6
 801392a:	5dc7      	ldrb	r7, [r0, r7]
 801392c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013930:	4637      	mov	r7, r6
 8013932:	42bb      	cmp	r3, r7
 8013934:	460e      	mov	r6, r1
 8013936:	d9f4      	bls.n	8013922 <_printf_i+0x116>
 8013938:	2b08      	cmp	r3, #8
 801393a:	d10b      	bne.n	8013954 <_printf_i+0x148>
 801393c:	6823      	ldr	r3, [r4, #0]
 801393e:	07de      	lsls	r6, r3, #31
 8013940:	d508      	bpl.n	8013954 <_printf_i+0x148>
 8013942:	6923      	ldr	r3, [r4, #16]
 8013944:	6861      	ldr	r1, [r4, #4]
 8013946:	4299      	cmp	r1, r3
 8013948:	bfde      	ittt	le
 801394a:	2330      	movle	r3, #48	; 0x30
 801394c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013950:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013954:	1b52      	subs	r2, r2, r5
 8013956:	6122      	str	r2, [r4, #16]
 8013958:	f8cd a000 	str.w	sl, [sp]
 801395c:	464b      	mov	r3, r9
 801395e:	aa03      	add	r2, sp, #12
 8013960:	4621      	mov	r1, r4
 8013962:	4640      	mov	r0, r8
 8013964:	f7ff fee4 	bl	8013730 <_printf_common>
 8013968:	3001      	adds	r0, #1
 801396a:	d14a      	bne.n	8013a02 <_printf_i+0x1f6>
 801396c:	f04f 30ff 	mov.w	r0, #4294967295
 8013970:	b004      	add	sp, #16
 8013972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013976:	6823      	ldr	r3, [r4, #0]
 8013978:	f043 0320 	orr.w	r3, r3, #32
 801397c:	6023      	str	r3, [r4, #0]
 801397e:	4833      	ldr	r0, [pc, #204]	; (8013a4c <_printf_i+0x240>)
 8013980:	2778      	movs	r7, #120	; 0x78
 8013982:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013986:	6823      	ldr	r3, [r4, #0]
 8013988:	6829      	ldr	r1, [r5, #0]
 801398a:	061f      	lsls	r7, r3, #24
 801398c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013990:	d402      	bmi.n	8013998 <_printf_i+0x18c>
 8013992:	065f      	lsls	r7, r3, #25
 8013994:	bf48      	it	mi
 8013996:	b2b6      	uxthmi	r6, r6
 8013998:	07df      	lsls	r7, r3, #31
 801399a:	bf48      	it	mi
 801399c:	f043 0320 	orrmi.w	r3, r3, #32
 80139a0:	6029      	str	r1, [r5, #0]
 80139a2:	bf48      	it	mi
 80139a4:	6023      	strmi	r3, [r4, #0]
 80139a6:	b91e      	cbnz	r6, 80139b0 <_printf_i+0x1a4>
 80139a8:	6823      	ldr	r3, [r4, #0]
 80139aa:	f023 0320 	bic.w	r3, r3, #32
 80139ae:	6023      	str	r3, [r4, #0]
 80139b0:	2310      	movs	r3, #16
 80139b2:	e7a7      	b.n	8013904 <_printf_i+0xf8>
 80139b4:	4824      	ldr	r0, [pc, #144]	; (8013a48 <_printf_i+0x23c>)
 80139b6:	e7e4      	b.n	8013982 <_printf_i+0x176>
 80139b8:	4615      	mov	r5, r2
 80139ba:	e7bd      	b.n	8013938 <_printf_i+0x12c>
 80139bc:	682b      	ldr	r3, [r5, #0]
 80139be:	6826      	ldr	r6, [r4, #0]
 80139c0:	6961      	ldr	r1, [r4, #20]
 80139c2:	1d18      	adds	r0, r3, #4
 80139c4:	6028      	str	r0, [r5, #0]
 80139c6:	0635      	lsls	r5, r6, #24
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	d501      	bpl.n	80139d0 <_printf_i+0x1c4>
 80139cc:	6019      	str	r1, [r3, #0]
 80139ce:	e002      	b.n	80139d6 <_printf_i+0x1ca>
 80139d0:	0670      	lsls	r0, r6, #25
 80139d2:	d5fb      	bpl.n	80139cc <_printf_i+0x1c0>
 80139d4:	8019      	strh	r1, [r3, #0]
 80139d6:	2300      	movs	r3, #0
 80139d8:	6123      	str	r3, [r4, #16]
 80139da:	4615      	mov	r5, r2
 80139dc:	e7bc      	b.n	8013958 <_printf_i+0x14c>
 80139de:	682b      	ldr	r3, [r5, #0]
 80139e0:	1d1a      	adds	r2, r3, #4
 80139e2:	602a      	str	r2, [r5, #0]
 80139e4:	681d      	ldr	r5, [r3, #0]
 80139e6:	6862      	ldr	r2, [r4, #4]
 80139e8:	2100      	movs	r1, #0
 80139ea:	4628      	mov	r0, r5
 80139ec:	f7f0 fbf0 	bl	80041d0 <memchr>
 80139f0:	b108      	cbz	r0, 80139f6 <_printf_i+0x1ea>
 80139f2:	1b40      	subs	r0, r0, r5
 80139f4:	6060      	str	r0, [r4, #4]
 80139f6:	6863      	ldr	r3, [r4, #4]
 80139f8:	6123      	str	r3, [r4, #16]
 80139fa:	2300      	movs	r3, #0
 80139fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a00:	e7aa      	b.n	8013958 <_printf_i+0x14c>
 8013a02:	6923      	ldr	r3, [r4, #16]
 8013a04:	462a      	mov	r2, r5
 8013a06:	4649      	mov	r1, r9
 8013a08:	4640      	mov	r0, r8
 8013a0a:	47d0      	blx	sl
 8013a0c:	3001      	adds	r0, #1
 8013a0e:	d0ad      	beq.n	801396c <_printf_i+0x160>
 8013a10:	6823      	ldr	r3, [r4, #0]
 8013a12:	079b      	lsls	r3, r3, #30
 8013a14:	d413      	bmi.n	8013a3e <_printf_i+0x232>
 8013a16:	68e0      	ldr	r0, [r4, #12]
 8013a18:	9b03      	ldr	r3, [sp, #12]
 8013a1a:	4298      	cmp	r0, r3
 8013a1c:	bfb8      	it	lt
 8013a1e:	4618      	movlt	r0, r3
 8013a20:	e7a6      	b.n	8013970 <_printf_i+0x164>
 8013a22:	2301      	movs	r3, #1
 8013a24:	4632      	mov	r2, r6
 8013a26:	4649      	mov	r1, r9
 8013a28:	4640      	mov	r0, r8
 8013a2a:	47d0      	blx	sl
 8013a2c:	3001      	adds	r0, #1
 8013a2e:	d09d      	beq.n	801396c <_printf_i+0x160>
 8013a30:	3501      	adds	r5, #1
 8013a32:	68e3      	ldr	r3, [r4, #12]
 8013a34:	9903      	ldr	r1, [sp, #12]
 8013a36:	1a5b      	subs	r3, r3, r1
 8013a38:	42ab      	cmp	r3, r5
 8013a3a:	dcf2      	bgt.n	8013a22 <_printf_i+0x216>
 8013a3c:	e7eb      	b.n	8013a16 <_printf_i+0x20a>
 8013a3e:	2500      	movs	r5, #0
 8013a40:	f104 0619 	add.w	r6, r4, #25
 8013a44:	e7f5      	b.n	8013a32 <_printf_i+0x226>
 8013a46:	bf00      	nop
 8013a48:	08014bcd 	.word	0x08014bcd
 8013a4c:	08014bde 	.word	0x08014bde

08013a50 <__sflush_r>:
 8013a50:	898a      	ldrh	r2, [r1, #12]
 8013a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a56:	4605      	mov	r5, r0
 8013a58:	0710      	lsls	r0, r2, #28
 8013a5a:	460c      	mov	r4, r1
 8013a5c:	d458      	bmi.n	8013b10 <__sflush_r+0xc0>
 8013a5e:	684b      	ldr	r3, [r1, #4]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	dc05      	bgt.n	8013a70 <__sflush_r+0x20>
 8013a64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	dc02      	bgt.n	8013a70 <__sflush_r+0x20>
 8013a6a:	2000      	movs	r0, #0
 8013a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a72:	2e00      	cmp	r6, #0
 8013a74:	d0f9      	beq.n	8013a6a <__sflush_r+0x1a>
 8013a76:	2300      	movs	r3, #0
 8013a78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013a7c:	682f      	ldr	r7, [r5, #0]
 8013a7e:	6a21      	ldr	r1, [r4, #32]
 8013a80:	602b      	str	r3, [r5, #0]
 8013a82:	d032      	beq.n	8013aea <__sflush_r+0x9a>
 8013a84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a86:	89a3      	ldrh	r3, [r4, #12]
 8013a88:	075a      	lsls	r2, r3, #29
 8013a8a:	d505      	bpl.n	8013a98 <__sflush_r+0x48>
 8013a8c:	6863      	ldr	r3, [r4, #4]
 8013a8e:	1ac0      	subs	r0, r0, r3
 8013a90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a92:	b10b      	cbz	r3, 8013a98 <__sflush_r+0x48>
 8013a94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013a96:	1ac0      	subs	r0, r0, r3
 8013a98:	2300      	movs	r3, #0
 8013a9a:	4602      	mov	r2, r0
 8013a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a9e:	6a21      	ldr	r1, [r4, #32]
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	47b0      	blx	r6
 8013aa4:	1c43      	adds	r3, r0, #1
 8013aa6:	89a3      	ldrh	r3, [r4, #12]
 8013aa8:	d106      	bne.n	8013ab8 <__sflush_r+0x68>
 8013aaa:	6829      	ldr	r1, [r5, #0]
 8013aac:	291d      	cmp	r1, #29
 8013aae:	d82b      	bhi.n	8013b08 <__sflush_r+0xb8>
 8013ab0:	4a29      	ldr	r2, [pc, #164]	; (8013b58 <__sflush_r+0x108>)
 8013ab2:	410a      	asrs	r2, r1
 8013ab4:	07d6      	lsls	r6, r2, #31
 8013ab6:	d427      	bmi.n	8013b08 <__sflush_r+0xb8>
 8013ab8:	2200      	movs	r2, #0
 8013aba:	6062      	str	r2, [r4, #4]
 8013abc:	04d9      	lsls	r1, r3, #19
 8013abe:	6922      	ldr	r2, [r4, #16]
 8013ac0:	6022      	str	r2, [r4, #0]
 8013ac2:	d504      	bpl.n	8013ace <__sflush_r+0x7e>
 8013ac4:	1c42      	adds	r2, r0, #1
 8013ac6:	d101      	bne.n	8013acc <__sflush_r+0x7c>
 8013ac8:	682b      	ldr	r3, [r5, #0]
 8013aca:	b903      	cbnz	r3, 8013ace <__sflush_r+0x7e>
 8013acc:	6560      	str	r0, [r4, #84]	; 0x54
 8013ace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ad0:	602f      	str	r7, [r5, #0]
 8013ad2:	2900      	cmp	r1, #0
 8013ad4:	d0c9      	beq.n	8013a6a <__sflush_r+0x1a>
 8013ad6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ada:	4299      	cmp	r1, r3
 8013adc:	d002      	beq.n	8013ae4 <__sflush_r+0x94>
 8013ade:	4628      	mov	r0, r5
 8013ae0:	f7ff fbea 	bl	80132b8 <_free_r>
 8013ae4:	2000      	movs	r0, #0
 8013ae6:	6360      	str	r0, [r4, #52]	; 0x34
 8013ae8:	e7c0      	b.n	8013a6c <__sflush_r+0x1c>
 8013aea:	2301      	movs	r3, #1
 8013aec:	4628      	mov	r0, r5
 8013aee:	47b0      	blx	r6
 8013af0:	1c41      	adds	r1, r0, #1
 8013af2:	d1c8      	bne.n	8013a86 <__sflush_r+0x36>
 8013af4:	682b      	ldr	r3, [r5, #0]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d0c5      	beq.n	8013a86 <__sflush_r+0x36>
 8013afa:	2b1d      	cmp	r3, #29
 8013afc:	d001      	beq.n	8013b02 <__sflush_r+0xb2>
 8013afe:	2b16      	cmp	r3, #22
 8013b00:	d101      	bne.n	8013b06 <__sflush_r+0xb6>
 8013b02:	602f      	str	r7, [r5, #0]
 8013b04:	e7b1      	b.n	8013a6a <__sflush_r+0x1a>
 8013b06:	89a3      	ldrh	r3, [r4, #12]
 8013b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b0c:	81a3      	strh	r3, [r4, #12]
 8013b0e:	e7ad      	b.n	8013a6c <__sflush_r+0x1c>
 8013b10:	690f      	ldr	r7, [r1, #16]
 8013b12:	2f00      	cmp	r7, #0
 8013b14:	d0a9      	beq.n	8013a6a <__sflush_r+0x1a>
 8013b16:	0793      	lsls	r3, r2, #30
 8013b18:	680e      	ldr	r6, [r1, #0]
 8013b1a:	bf08      	it	eq
 8013b1c:	694b      	ldreq	r3, [r1, #20]
 8013b1e:	600f      	str	r7, [r1, #0]
 8013b20:	bf18      	it	ne
 8013b22:	2300      	movne	r3, #0
 8013b24:	eba6 0807 	sub.w	r8, r6, r7
 8013b28:	608b      	str	r3, [r1, #8]
 8013b2a:	f1b8 0f00 	cmp.w	r8, #0
 8013b2e:	dd9c      	ble.n	8013a6a <__sflush_r+0x1a>
 8013b30:	6a21      	ldr	r1, [r4, #32]
 8013b32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013b34:	4643      	mov	r3, r8
 8013b36:	463a      	mov	r2, r7
 8013b38:	4628      	mov	r0, r5
 8013b3a:	47b0      	blx	r6
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	dc06      	bgt.n	8013b4e <__sflush_r+0xfe>
 8013b40:	89a3      	ldrh	r3, [r4, #12]
 8013b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b46:	81a3      	strh	r3, [r4, #12]
 8013b48:	f04f 30ff 	mov.w	r0, #4294967295
 8013b4c:	e78e      	b.n	8013a6c <__sflush_r+0x1c>
 8013b4e:	4407      	add	r7, r0
 8013b50:	eba8 0800 	sub.w	r8, r8, r0
 8013b54:	e7e9      	b.n	8013b2a <__sflush_r+0xda>
 8013b56:	bf00      	nop
 8013b58:	dfbffffe 	.word	0xdfbffffe

08013b5c <_fflush_r>:
 8013b5c:	b538      	push	{r3, r4, r5, lr}
 8013b5e:	690b      	ldr	r3, [r1, #16]
 8013b60:	4605      	mov	r5, r0
 8013b62:	460c      	mov	r4, r1
 8013b64:	b913      	cbnz	r3, 8013b6c <_fflush_r+0x10>
 8013b66:	2500      	movs	r5, #0
 8013b68:	4628      	mov	r0, r5
 8013b6a:	bd38      	pop	{r3, r4, r5, pc}
 8013b6c:	b118      	cbz	r0, 8013b76 <_fflush_r+0x1a>
 8013b6e:	6a03      	ldr	r3, [r0, #32]
 8013b70:	b90b      	cbnz	r3, 8013b76 <_fflush_r+0x1a>
 8013b72:	f7ff f99b 	bl	8012eac <__sinit>
 8013b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d0f3      	beq.n	8013b66 <_fflush_r+0xa>
 8013b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013b80:	07d0      	lsls	r0, r2, #31
 8013b82:	d404      	bmi.n	8013b8e <_fflush_r+0x32>
 8013b84:	0599      	lsls	r1, r3, #22
 8013b86:	d402      	bmi.n	8013b8e <_fflush_r+0x32>
 8013b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b8a:	f7ff fb84 	bl	8013296 <__retarget_lock_acquire_recursive>
 8013b8e:	4628      	mov	r0, r5
 8013b90:	4621      	mov	r1, r4
 8013b92:	f7ff ff5d 	bl	8013a50 <__sflush_r>
 8013b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b98:	07da      	lsls	r2, r3, #31
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	d4e4      	bmi.n	8013b68 <_fflush_r+0xc>
 8013b9e:	89a3      	ldrh	r3, [r4, #12]
 8013ba0:	059b      	lsls	r3, r3, #22
 8013ba2:	d4e1      	bmi.n	8013b68 <_fflush_r+0xc>
 8013ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ba6:	f7ff fb77 	bl	8013298 <__retarget_lock_release_recursive>
 8013baa:	e7dd      	b.n	8013b68 <_fflush_r+0xc>

08013bac <__swhatbuf_r>:
 8013bac:	b570      	push	{r4, r5, r6, lr}
 8013bae:	460c      	mov	r4, r1
 8013bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bb4:	2900      	cmp	r1, #0
 8013bb6:	b096      	sub	sp, #88	; 0x58
 8013bb8:	4615      	mov	r5, r2
 8013bba:	461e      	mov	r6, r3
 8013bbc:	da0d      	bge.n	8013bda <__swhatbuf_r+0x2e>
 8013bbe:	89a3      	ldrh	r3, [r4, #12]
 8013bc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013bc4:	f04f 0100 	mov.w	r1, #0
 8013bc8:	bf0c      	ite	eq
 8013bca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013bce:	2340      	movne	r3, #64	; 0x40
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	6031      	str	r1, [r6, #0]
 8013bd4:	602b      	str	r3, [r5, #0]
 8013bd6:	b016      	add	sp, #88	; 0x58
 8013bd8:	bd70      	pop	{r4, r5, r6, pc}
 8013bda:	466a      	mov	r2, sp
 8013bdc:	f000 f848 	bl	8013c70 <_fstat_r>
 8013be0:	2800      	cmp	r0, #0
 8013be2:	dbec      	blt.n	8013bbe <__swhatbuf_r+0x12>
 8013be4:	9901      	ldr	r1, [sp, #4]
 8013be6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013bea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013bee:	4259      	negs	r1, r3
 8013bf0:	4159      	adcs	r1, r3
 8013bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013bf6:	e7eb      	b.n	8013bd0 <__swhatbuf_r+0x24>

08013bf8 <__smakebuf_r>:
 8013bf8:	898b      	ldrh	r3, [r1, #12]
 8013bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013bfc:	079d      	lsls	r5, r3, #30
 8013bfe:	4606      	mov	r6, r0
 8013c00:	460c      	mov	r4, r1
 8013c02:	d507      	bpl.n	8013c14 <__smakebuf_r+0x1c>
 8013c04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013c08:	6023      	str	r3, [r4, #0]
 8013c0a:	6123      	str	r3, [r4, #16]
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	6163      	str	r3, [r4, #20]
 8013c10:	b002      	add	sp, #8
 8013c12:	bd70      	pop	{r4, r5, r6, pc}
 8013c14:	ab01      	add	r3, sp, #4
 8013c16:	466a      	mov	r2, sp
 8013c18:	f7ff ffc8 	bl	8013bac <__swhatbuf_r>
 8013c1c:	9900      	ldr	r1, [sp, #0]
 8013c1e:	4605      	mov	r5, r0
 8013c20:	4630      	mov	r0, r6
 8013c22:	f7ff fbb5 	bl	8013390 <_malloc_r>
 8013c26:	b948      	cbnz	r0, 8013c3c <__smakebuf_r+0x44>
 8013c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c2c:	059a      	lsls	r2, r3, #22
 8013c2e:	d4ef      	bmi.n	8013c10 <__smakebuf_r+0x18>
 8013c30:	f023 0303 	bic.w	r3, r3, #3
 8013c34:	f043 0302 	orr.w	r3, r3, #2
 8013c38:	81a3      	strh	r3, [r4, #12]
 8013c3a:	e7e3      	b.n	8013c04 <__smakebuf_r+0xc>
 8013c3c:	89a3      	ldrh	r3, [r4, #12]
 8013c3e:	6020      	str	r0, [r4, #0]
 8013c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c44:	81a3      	strh	r3, [r4, #12]
 8013c46:	9b00      	ldr	r3, [sp, #0]
 8013c48:	6163      	str	r3, [r4, #20]
 8013c4a:	9b01      	ldr	r3, [sp, #4]
 8013c4c:	6120      	str	r0, [r4, #16]
 8013c4e:	b15b      	cbz	r3, 8013c68 <__smakebuf_r+0x70>
 8013c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c54:	4630      	mov	r0, r6
 8013c56:	f000 f81d 	bl	8013c94 <_isatty_r>
 8013c5a:	b128      	cbz	r0, 8013c68 <__smakebuf_r+0x70>
 8013c5c:	89a3      	ldrh	r3, [r4, #12]
 8013c5e:	f023 0303 	bic.w	r3, r3, #3
 8013c62:	f043 0301 	orr.w	r3, r3, #1
 8013c66:	81a3      	strh	r3, [r4, #12]
 8013c68:	89a3      	ldrh	r3, [r4, #12]
 8013c6a:	431d      	orrs	r5, r3
 8013c6c:	81a5      	strh	r5, [r4, #12]
 8013c6e:	e7cf      	b.n	8013c10 <__smakebuf_r+0x18>

08013c70 <_fstat_r>:
 8013c70:	b538      	push	{r3, r4, r5, lr}
 8013c72:	4d07      	ldr	r5, [pc, #28]	; (8013c90 <_fstat_r+0x20>)
 8013c74:	2300      	movs	r3, #0
 8013c76:	4604      	mov	r4, r0
 8013c78:	4608      	mov	r0, r1
 8013c7a:	4611      	mov	r1, r2
 8013c7c:	602b      	str	r3, [r5, #0]
 8013c7e:	f7f5 fad7 	bl	8009230 <_fstat>
 8013c82:	1c43      	adds	r3, r0, #1
 8013c84:	d102      	bne.n	8013c8c <_fstat_r+0x1c>
 8013c86:	682b      	ldr	r3, [r5, #0]
 8013c88:	b103      	cbz	r3, 8013c8c <_fstat_r+0x1c>
 8013c8a:	6023      	str	r3, [r4, #0]
 8013c8c:	bd38      	pop	{r3, r4, r5, pc}
 8013c8e:	bf00      	nop
 8013c90:	2000874c 	.word	0x2000874c

08013c94 <_isatty_r>:
 8013c94:	b538      	push	{r3, r4, r5, lr}
 8013c96:	4d06      	ldr	r5, [pc, #24]	; (8013cb0 <_isatty_r+0x1c>)
 8013c98:	2300      	movs	r3, #0
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	4608      	mov	r0, r1
 8013c9e:	602b      	str	r3, [r5, #0]
 8013ca0:	f7f5 fad6 	bl	8009250 <_isatty>
 8013ca4:	1c43      	adds	r3, r0, #1
 8013ca6:	d102      	bne.n	8013cae <_isatty_r+0x1a>
 8013ca8:	682b      	ldr	r3, [r5, #0]
 8013caa:	b103      	cbz	r3, 8013cae <_isatty_r+0x1a>
 8013cac:	6023      	str	r3, [r4, #0]
 8013cae:	bd38      	pop	{r3, r4, r5, pc}
 8013cb0:	2000874c 	.word	0x2000874c

08013cb4 <_sbrk_r>:
 8013cb4:	b538      	push	{r3, r4, r5, lr}
 8013cb6:	4d06      	ldr	r5, [pc, #24]	; (8013cd0 <_sbrk_r+0x1c>)
 8013cb8:	2300      	movs	r3, #0
 8013cba:	4604      	mov	r4, r0
 8013cbc:	4608      	mov	r0, r1
 8013cbe:	602b      	str	r3, [r5, #0]
 8013cc0:	f7f5 fade 	bl	8009280 <_sbrk>
 8013cc4:	1c43      	adds	r3, r0, #1
 8013cc6:	d102      	bne.n	8013cce <_sbrk_r+0x1a>
 8013cc8:	682b      	ldr	r3, [r5, #0]
 8013cca:	b103      	cbz	r3, 8013cce <_sbrk_r+0x1a>
 8013ccc:	6023      	str	r3, [r4, #0]
 8013cce:	bd38      	pop	{r3, r4, r5, pc}
 8013cd0:	2000874c 	.word	0x2000874c

08013cd4 <_init>:
 8013cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cd6:	bf00      	nop
 8013cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cda:	bc08      	pop	{r3}
 8013cdc:	469e      	mov	lr, r3
 8013cde:	4770      	bx	lr

08013ce0 <_fini>:
 8013ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ce2:	bf00      	nop
 8013ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ce6:	bc08      	pop	{r3}
 8013ce8:	469e      	mov	lr, r3
 8013cea:	4770      	bx	lr
