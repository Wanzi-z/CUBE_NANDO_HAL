
programmer0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001036c  08004190  08004190  00004190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed4  080144fc  080144fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080153d0  080153d0  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  080153d0  080153d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080153d8  080153d8  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080153d8  080153d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080153dc  080153dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  080153e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d4  2**0
                  CONTENTS
 10 .bss          0000848c  200002d8  200002d8  000202d8  2**3
                  ALLOC
 11 ._user_heap_stack 00001804  20008764  20008764  000202d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 14 .debug_info   000220d0  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006774  00000000  00000000  00042417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c30  00000000  00000000  00048b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001520  00000000  00000000  0004a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029f28  00000000  00000000  0004bce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00029e5b  00000000  00000000  00075c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8161  00000000  00000000  0009fa63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007708  00000000  00000000  00177bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0017f2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	200002d8 	.word	0x200002d8
 80041ac:	00000000 	.word	0x00000000
 80041b0:	080144e4 	.word	0x080144e4

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	; (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	200002dc 	.word	0x200002dc
 80041cc:	080144e4 	.word	0x080144e4

080041d0 <memchr>:
 80041d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041d4:	2a10      	cmp	r2, #16
 80041d6:	db2b      	blt.n	8004230 <memchr+0x60>
 80041d8:	f010 0f07 	tst.w	r0, #7
 80041dc:	d008      	beq.n	80041f0 <memchr+0x20>
 80041de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041e2:	3a01      	subs	r2, #1
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d02d      	beq.n	8004244 <memchr+0x74>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	b342      	cbz	r2, 8004240 <memchr+0x70>
 80041ee:	d1f6      	bne.n	80041de <memchr+0xe>
 80041f0:	b4f0      	push	{r4, r5, r6, r7}
 80041f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80041f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80041fa:	f022 0407 	bic.w	r4, r2, #7
 80041fe:	f07f 0700 	mvns.w	r7, #0
 8004202:	2300      	movs	r3, #0
 8004204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004208:	3c08      	subs	r4, #8
 800420a:	ea85 0501 	eor.w	r5, r5, r1
 800420e:	ea86 0601 	eor.w	r6, r6, r1
 8004212:	fa85 f547 	uadd8	r5, r5, r7
 8004216:	faa3 f587 	sel	r5, r3, r7
 800421a:	fa86 f647 	uadd8	r6, r6, r7
 800421e:	faa5 f687 	sel	r6, r5, r7
 8004222:	b98e      	cbnz	r6, 8004248 <memchr+0x78>
 8004224:	d1ee      	bne.n	8004204 <memchr+0x34>
 8004226:	bcf0      	pop	{r4, r5, r6, r7}
 8004228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800422c:	f002 0207 	and.w	r2, r2, #7
 8004230:	b132      	cbz	r2, 8004240 <memchr+0x70>
 8004232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004236:	3a01      	subs	r2, #1
 8004238:	ea83 0301 	eor.w	r3, r3, r1
 800423c:	b113      	cbz	r3, 8004244 <memchr+0x74>
 800423e:	d1f8      	bne.n	8004232 <memchr+0x62>
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr
 8004244:	3801      	subs	r0, #1
 8004246:	4770      	bx	lr
 8004248:	2d00      	cmp	r5, #0
 800424a:	bf06      	itte	eq
 800424c:	4635      	moveq	r5, r6
 800424e:	3803      	subeq	r0, #3
 8004250:	3807      	subne	r0, #7
 8004252:	f015 0f01 	tst.w	r5, #1
 8004256:	d107      	bne.n	8004268 <memchr+0x98>
 8004258:	3001      	adds	r0, #1
 800425a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800425e:	bf02      	ittt	eq
 8004260:	3001      	addeq	r0, #1
 8004262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004266:	3001      	addeq	r0, #1
 8004268:	bcf0      	pop	{r4, r5, r6, r7}
 800426a:	3801      	subs	r0, #1
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <__aeabi_uldivmod>:
 8004270:	b953      	cbnz	r3, 8004288 <__aeabi_uldivmod+0x18>
 8004272:	b94a      	cbnz	r2, 8004288 <__aeabi_uldivmod+0x18>
 8004274:	2900      	cmp	r1, #0
 8004276:	bf08      	it	eq
 8004278:	2800      	cmpeq	r0, #0
 800427a:	bf1c      	itt	ne
 800427c:	f04f 31ff 	movne.w	r1, #4294967295
 8004280:	f04f 30ff 	movne.w	r0, #4294967295
 8004284:	f000 b970 	b.w	8004568 <__aeabi_idiv0>
 8004288:	f1ad 0c08 	sub.w	ip, sp, #8
 800428c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004290:	f000 f806 	bl	80042a0 <__udivmoddi4>
 8004294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800429c:	b004      	add	sp, #16
 800429e:	4770      	bx	lr

080042a0 <__udivmoddi4>:
 80042a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a4:	9e08      	ldr	r6, [sp, #32]
 80042a6:	460d      	mov	r5, r1
 80042a8:	4604      	mov	r4, r0
 80042aa:	460f      	mov	r7, r1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d14a      	bne.n	8004346 <__udivmoddi4+0xa6>
 80042b0:	428a      	cmp	r2, r1
 80042b2:	4694      	mov	ip, r2
 80042b4:	d965      	bls.n	8004382 <__udivmoddi4+0xe2>
 80042b6:	fab2 f382 	clz	r3, r2
 80042ba:	b143      	cbz	r3, 80042ce <__udivmoddi4+0x2e>
 80042bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80042c0:	f1c3 0220 	rsb	r2, r3, #32
 80042c4:	409f      	lsls	r7, r3
 80042c6:	fa20 f202 	lsr.w	r2, r0, r2
 80042ca:	4317      	orrs	r7, r2
 80042cc:	409c      	lsls	r4, r3
 80042ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80042d2:	fa1f f58c 	uxth.w	r5, ip
 80042d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80042da:	0c22      	lsrs	r2, r4, #16
 80042dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80042e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80042e4:	fb01 f005 	mul.w	r0, r1, r5
 80042e8:	4290      	cmp	r0, r2
 80042ea:	d90a      	bls.n	8004302 <__udivmoddi4+0x62>
 80042ec:	eb1c 0202 	adds.w	r2, ip, r2
 80042f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80042f4:	f080 811c 	bcs.w	8004530 <__udivmoddi4+0x290>
 80042f8:	4290      	cmp	r0, r2
 80042fa:	f240 8119 	bls.w	8004530 <__udivmoddi4+0x290>
 80042fe:	3902      	subs	r1, #2
 8004300:	4462      	add	r2, ip
 8004302:	1a12      	subs	r2, r2, r0
 8004304:	b2a4      	uxth	r4, r4
 8004306:	fbb2 f0fe 	udiv	r0, r2, lr
 800430a:	fb0e 2210 	mls	r2, lr, r0, r2
 800430e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004312:	fb00 f505 	mul.w	r5, r0, r5
 8004316:	42a5      	cmp	r5, r4
 8004318:	d90a      	bls.n	8004330 <__udivmoddi4+0x90>
 800431a:	eb1c 0404 	adds.w	r4, ip, r4
 800431e:	f100 32ff 	add.w	r2, r0, #4294967295
 8004322:	f080 8107 	bcs.w	8004534 <__udivmoddi4+0x294>
 8004326:	42a5      	cmp	r5, r4
 8004328:	f240 8104 	bls.w	8004534 <__udivmoddi4+0x294>
 800432c:	4464      	add	r4, ip
 800432e:	3802      	subs	r0, #2
 8004330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004334:	1b64      	subs	r4, r4, r5
 8004336:	2100      	movs	r1, #0
 8004338:	b11e      	cbz	r6, 8004342 <__udivmoddi4+0xa2>
 800433a:	40dc      	lsrs	r4, r3
 800433c:	2300      	movs	r3, #0
 800433e:	e9c6 4300 	strd	r4, r3, [r6]
 8004342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004346:	428b      	cmp	r3, r1
 8004348:	d908      	bls.n	800435c <__udivmoddi4+0xbc>
 800434a:	2e00      	cmp	r6, #0
 800434c:	f000 80ed 	beq.w	800452a <__udivmoddi4+0x28a>
 8004350:	2100      	movs	r1, #0
 8004352:	e9c6 0500 	strd	r0, r5, [r6]
 8004356:	4608      	mov	r0, r1
 8004358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800435c:	fab3 f183 	clz	r1, r3
 8004360:	2900      	cmp	r1, #0
 8004362:	d149      	bne.n	80043f8 <__udivmoddi4+0x158>
 8004364:	42ab      	cmp	r3, r5
 8004366:	d302      	bcc.n	800436e <__udivmoddi4+0xce>
 8004368:	4282      	cmp	r2, r0
 800436a:	f200 80f8 	bhi.w	800455e <__udivmoddi4+0x2be>
 800436e:	1a84      	subs	r4, r0, r2
 8004370:	eb65 0203 	sbc.w	r2, r5, r3
 8004374:	2001      	movs	r0, #1
 8004376:	4617      	mov	r7, r2
 8004378:	2e00      	cmp	r6, #0
 800437a:	d0e2      	beq.n	8004342 <__udivmoddi4+0xa2>
 800437c:	e9c6 4700 	strd	r4, r7, [r6]
 8004380:	e7df      	b.n	8004342 <__udivmoddi4+0xa2>
 8004382:	b902      	cbnz	r2, 8004386 <__udivmoddi4+0xe6>
 8004384:	deff      	udf	#255	; 0xff
 8004386:	fab2 f382 	clz	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 8090 	bne.w	80044b0 <__udivmoddi4+0x210>
 8004390:	1a8a      	subs	r2, r1, r2
 8004392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004396:	fa1f fe8c 	uxth.w	lr, ip
 800439a:	2101      	movs	r1, #1
 800439c:	fbb2 f5f7 	udiv	r5, r2, r7
 80043a0:	fb07 2015 	mls	r0, r7, r5, r2
 80043a4:	0c22      	lsrs	r2, r4, #16
 80043a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80043aa:	fb0e f005 	mul.w	r0, lr, r5
 80043ae:	4290      	cmp	r0, r2
 80043b0:	d908      	bls.n	80043c4 <__udivmoddi4+0x124>
 80043b2:	eb1c 0202 	adds.w	r2, ip, r2
 80043b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80043ba:	d202      	bcs.n	80043c2 <__udivmoddi4+0x122>
 80043bc:	4290      	cmp	r0, r2
 80043be:	f200 80cb 	bhi.w	8004558 <__udivmoddi4+0x2b8>
 80043c2:	4645      	mov	r5, r8
 80043c4:	1a12      	subs	r2, r2, r0
 80043c6:	b2a4      	uxth	r4, r4
 80043c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80043cc:	fb07 2210 	mls	r2, r7, r0, r2
 80043d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80043d4:	fb0e fe00 	mul.w	lr, lr, r0
 80043d8:	45a6      	cmp	lr, r4
 80043da:	d908      	bls.n	80043ee <__udivmoddi4+0x14e>
 80043dc:	eb1c 0404 	adds.w	r4, ip, r4
 80043e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80043e4:	d202      	bcs.n	80043ec <__udivmoddi4+0x14c>
 80043e6:	45a6      	cmp	lr, r4
 80043e8:	f200 80bb 	bhi.w	8004562 <__udivmoddi4+0x2c2>
 80043ec:	4610      	mov	r0, r2
 80043ee:	eba4 040e 	sub.w	r4, r4, lr
 80043f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80043f6:	e79f      	b.n	8004338 <__udivmoddi4+0x98>
 80043f8:	f1c1 0720 	rsb	r7, r1, #32
 80043fc:	408b      	lsls	r3, r1
 80043fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8004402:	ea4c 0c03 	orr.w	ip, ip, r3
 8004406:	fa05 f401 	lsl.w	r4, r5, r1
 800440a:	fa20 f307 	lsr.w	r3, r0, r7
 800440e:	40fd      	lsrs	r5, r7
 8004410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004414:	4323      	orrs	r3, r4
 8004416:	fbb5 f8f9 	udiv	r8, r5, r9
 800441a:	fa1f fe8c 	uxth.w	lr, ip
 800441e:	fb09 5518 	mls	r5, r9, r8, r5
 8004422:	0c1c      	lsrs	r4, r3, #16
 8004424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8004428:	fb08 f50e 	mul.w	r5, r8, lr
 800442c:	42a5      	cmp	r5, r4
 800442e:	fa02 f201 	lsl.w	r2, r2, r1
 8004432:	fa00 f001 	lsl.w	r0, r0, r1
 8004436:	d90b      	bls.n	8004450 <__udivmoddi4+0x1b0>
 8004438:	eb1c 0404 	adds.w	r4, ip, r4
 800443c:	f108 3aff 	add.w	sl, r8, #4294967295
 8004440:	f080 8088 	bcs.w	8004554 <__udivmoddi4+0x2b4>
 8004444:	42a5      	cmp	r5, r4
 8004446:	f240 8085 	bls.w	8004554 <__udivmoddi4+0x2b4>
 800444a:	f1a8 0802 	sub.w	r8, r8, #2
 800444e:	4464      	add	r4, ip
 8004450:	1b64      	subs	r4, r4, r5
 8004452:	b29d      	uxth	r5, r3
 8004454:	fbb4 f3f9 	udiv	r3, r4, r9
 8004458:	fb09 4413 	mls	r4, r9, r3, r4
 800445c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8004460:	fb03 fe0e 	mul.w	lr, r3, lr
 8004464:	45a6      	cmp	lr, r4
 8004466:	d908      	bls.n	800447a <__udivmoddi4+0x1da>
 8004468:	eb1c 0404 	adds.w	r4, ip, r4
 800446c:	f103 35ff 	add.w	r5, r3, #4294967295
 8004470:	d26c      	bcs.n	800454c <__udivmoddi4+0x2ac>
 8004472:	45a6      	cmp	lr, r4
 8004474:	d96a      	bls.n	800454c <__udivmoddi4+0x2ac>
 8004476:	3b02      	subs	r3, #2
 8004478:	4464      	add	r4, ip
 800447a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800447e:	fba3 9502 	umull	r9, r5, r3, r2
 8004482:	eba4 040e 	sub.w	r4, r4, lr
 8004486:	42ac      	cmp	r4, r5
 8004488:	46c8      	mov	r8, r9
 800448a:	46ae      	mov	lr, r5
 800448c:	d356      	bcc.n	800453c <__udivmoddi4+0x29c>
 800448e:	d053      	beq.n	8004538 <__udivmoddi4+0x298>
 8004490:	b156      	cbz	r6, 80044a8 <__udivmoddi4+0x208>
 8004492:	ebb0 0208 	subs.w	r2, r0, r8
 8004496:	eb64 040e 	sbc.w	r4, r4, lr
 800449a:	fa04 f707 	lsl.w	r7, r4, r7
 800449e:	40ca      	lsrs	r2, r1
 80044a0:	40cc      	lsrs	r4, r1
 80044a2:	4317      	orrs	r7, r2
 80044a4:	e9c6 7400 	strd	r7, r4, [r6]
 80044a8:	4618      	mov	r0, r3
 80044aa:	2100      	movs	r1, #0
 80044ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b0:	f1c3 0120 	rsb	r1, r3, #32
 80044b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80044b8:	fa20 f201 	lsr.w	r2, r0, r1
 80044bc:	fa25 f101 	lsr.w	r1, r5, r1
 80044c0:	409d      	lsls	r5, r3
 80044c2:	432a      	orrs	r2, r5
 80044c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80044c8:	fa1f fe8c 	uxth.w	lr, ip
 80044cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80044d0:	fb07 1510 	mls	r5, r7, r0, r1
 80044d4:	0c11      	lsrs	r1, r2, #16
 80044d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80044da:	fb00 f50e 	mul.w	r5, r0, lr
 80044de:	428d      	cmp	r5, r1
 80044e0:	fa04 f403 	lsl.w	r4, r4, r3
 80044e4:	d908      	bls.n	80044f8 <__udivmoddi4+0x258>
 80044e6:	eb1c 0101 	adds.w	r1, ip, r1
 80044ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80044ee:	d22f      	bcs.n	8004550 <__udivmoddi4+0x2b0>
 80044f0:	428d      	cmp	r5, r1
 80044f2:	d92d      	bls.n	8004550 <__udivmoddi4+0x2b0>
 80044f4:	3802      	subs	r0, #2
 80044f6:	4461      	add	r1, ip
 80044f8:	1b49      	subs	r1, r1, r5
 80044fa:	b292      	uxth	r2, r2
 80044fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8004500:	fb07 1115 	mls	r1, r7, r5, r1
 8004504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004508:	fb05 f10e 	mul.w	r1, r5, lr
 800450c:	4291      	cmp	r1, r2
 800450e:	d908      	bls.n	8004522 <__udivmoddi4+0x282>
 8004510:	eb1c 0202 	adds.w	r2, ip, r2
 8004514:	f105 38ff 	add.w	r8, r5, #4294967295
 8004518:	d216      	bcs.n	8004548 <__udivmoddi4+0x2a8>
 800451a:	4291      	cmp	r1, r2
 800451c:	d914      	bls.n	8004548 <__udivmoddi4+0x2a8>
 800451e:	3d02      	subs	r5, #2
 8004520:	4462      	add	r2, ip
 8004522:	1a52      	subs	r2, r2, r1
 8004524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8004528:	e738      	b.n	800439c <__udivmoddi4+0xfc>
 800452a:	4631      	mov	r1, r6
 800452c:	4630      	mov	r0, r6
 800452e:	e708      	b.n	8004342 <__udivmoddi4+0xa2>
 8004530:	4639      	mov	r1, r7
 8004532:	e6e6      	b.n	8004302 <__udivmoddi4+0x62>
 8004534:	4610      	mov	r0, r2
 8004536:	e6fb      	b.n	8004330 <__udivmoddi4+0x90>
 8004538:	4548      	cmp	r0, r9
 800453a:	d2a9      	bcs.n	8004490 <__udivmoddi4+0x1f0>
 800453c:	ebb9 0802 	subs.w	r8, r9, r2
 8004540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8004544:	3b01      	subs	r3, #1
 8004546:	e7a3      	b.n	8004490 <__udivmoddi4+0x1f0>
 8004548:	4645      	mov	r5, r8
 800454a:	e7ea      	b.n	8004522 <__udivmoddi4+0x282>
 800454c:	462b      	mov	r3, r5
 800454e:	e794      	b.n	800447a <__udivmoddi4+0x1da>
 8004550:	4640      	mov	r0, r8
 8004552:	e7d1      	b.n	80044f8 <__udivmoddi4+0x258>
 8004554:	46d0      	mov	r8, sl
 8004556:	e77b      	b.n	8004450 <__udivmoddi4+0x1b0>
 8004558:	3d02      	subs	r5, #2
 800455a:	4462      	add	r2, ip
 800455c:	e732      	b.n	80043c4 <__udivmoddi4+0x124>
 800455e:	4608      	mov	r0, r1
 8004560:	e70a      	b.n	8004378 <__udivmoddi4+0xd8>
 8004562:	4464      	add	r4, ip
 8004564:	3802      	subs	r0, #2
 8004566:	e742      	b.n	80043ee <__udivmoddi4+0x14e>

08004568 <__aeabi_idiv0>:
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop

0800456c <cdc_send>:
#include "cdc_endp.h"

#define SEND_TIMEOUT 0x1000000          // 发送超时时间

static int cdc_send(uint8_t *data, uint32_t len)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
    uint32_t timeout = SEND_TIMEOUT;
 8004576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800457a:	60fb      	str	r3, [r7, #12]

    if (!CDC_IsPacketSent())              // 如果之前的CDC发送未完成
 800457c:	f000 f97c 	bl	8004878 <CDC_IsPacketSent>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d117      	bne.n	80045b6 <cdc_send+0x4a>
    {
        DEBUG_PRINT("Wait for previous CDC TX\r\n");  // 打印调试信息，等待上一次CDC发送完成
 8004586:	4816      	ldr	r0, [pc, #88]	; (80045e0 <cdc_send+0x74>)
 8004588:	f00f f934 	bl	80137f4 <puts>
        while (!CDC_IsPacketSent() && --timeout);    // 等待CDC发送完成，或者超时
 800458c:	bf00      	nop
 800458e:	f000 f973 	bl	8004878 <CDC_IsPacketSent>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <cdc_send+0x38>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3b01      	subs	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f4      	bne.n	800458e <cdc_send+0x22>
        if (!timeout)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d105      	bne.n	80045b6 <cdc_send+0x4a>
        {
            ERROR_PRINT("Failed to send data, CDC is busy\r\n");   // 打印错误信息，发送超时，CDC忙碌
 80045aa:	480e      	ldr	r0, [pc, #56]	; (80045e4 <cdc_send+0x78>)
 80045ac:	f00f f922 	bl	80137f4 <puts>
            return -1;                                          // 返回错误代码
 80045b0:	f04f 33ff 	mov.w	r3, #4294967295
 80045b4:	e00f      	b.n	80045d6 <cdc_send+0x6a>
        }
    }

    if (!CDC_Send_DATA(data, len))                              // 发送数据
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f935 	bl	800482c <CDC_Send_DATA>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <cdc_send+0x68>
    {
        ERROR_PRINT("Failed to send data\r\n");                  // 打印错误信息，发送数据失败
 80045c8:	4807      	ldr	r0, [pc, #28]	; (80045e8 <cdc_send+0x7c>)
 80045ca:	f00f f913 	bl	80137f4 <puts>
        return -1;                                              // 返回错误代码
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295
 80045d2:	e000      	b.n	80045d6 <cdc_send+0x6a>
    }

    return 0;                                                   // 返回成功代码
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	080144fc 	.word	0x080144fc
 80045e4:	08014518 	.word	0x08014518
 80045e8:	08014544 	.word	0x08014544

080045ec <cdc_send_ready>:

static int cdc_send_ready()
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
    return CDC_IsPacketSent();                                  // 返回CDC是否可发送数据的状态
 80045f0:	f000 f942 	bl	8004878 <CDC_IsPacketSent>
 80045f4:	4603      	mov	r3, r0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	bd80      	pop	{r7, pc}

080045fa <cdc_peek>:

static uint32_t cdc_peek(uint8_t **data)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
    return USB_Data_Peek(data);                                 // 查看USB数据
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f81e 	bl	8004644 <USB_Data_Peek>
 8004608:	4603      	mov	r3, r0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <cdc_consume>:

static void cdc_consume()
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
    uint8_t *data;

    USB_Data_Get(&data);                                        // 获取USB数据
 8004618:	1d3b      	adds	r3, r7, #4
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f842 	bl	80046a4 <USB_Data_Get>
    USB_DataRx_Sched();                                         // 调度USB数据接收
 8004620:	f000 f8a0 	bl	8004764 <USB_DataRx_Sched>
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <cdc_init>:
    .peek = cdc_peek,
    .consume = cdc_consume,
};

void cdc_init()
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
    np_comm_register(&cdc_comm_cb);                             // 注册CDC通信回调函数
 8004630:	4803      	ldr	r0, [pc, #12]	; (8004640 <cdc_init+0x14>)
 8004632:	f003 fd05 	bl	8008040 <np_comm_register>

    /* Enable receive of data */
    CDC_Receive_DATA();                                         // 启用数据接收
 8004636:	f000 f915 	bl	8004864 <CDC_Receive_DATA>
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000000 	.word	0x20000000

08004644 <USB_Data_Peek>:

static packet_t circ_buf[CIRC_BUF_SIZE];
static volatile uint8_t head, size, tail = CIRC_BUF_SIZE - 1;

uint32_t USB_Data_Peek(uint8_t **data)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  if (!size)
 800464c:	4b12      	ldr	r3, [pc, #72]	; (8004698 <USB_Data_Peek+0x54>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <USB_Data_Peek+0x16>
    return 0;
 8004656:	2300      	movs	r3, #0
 8004658:	e017      	b.n	800468a <USB_Data_Peek+0x46>

  *data = circ_buf[head].pbuf;
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <USB_Data_Peek+0x58>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	4613      	mov	r3, r2
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <USB_Data_Peek+0x5c>)
 800466c:	441a      	add	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]

  return circ_buf[head].len;
 8004672:	4b0a      	ldr	r3, [pc, #40]	; (800469c <USB_Data_Peek+0x58>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	4619      	mov	r1, r3
 800467a:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <USB_Data_Peek+0x5c>)
 800467c:	460b      	mov	r3, r1
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	440b      	add	r3, r1
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	3340      	adds	r3, #64	; 0x40
 8004688:	681b      	ldr	r3, [r3, #0]
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000c01 	.word	0x20000c01
 800469c:	20000c00 	.word	0x20000c00
 80046a0:	200002f8 	.word	0x200002f8

080046a4 <USB_Data_Get>:

uint32_t USB_Data_Get(uint8_t **data)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t len;

  if (!size)
 80046ac:	4b21      	ldr	r3, [pc, #132]	; (8004734 <USB_Data_Get+0x90>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <USB_Data_Get+0x16>
    return 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e036      	b.n	8004728 <USB_Data_Get+0x84>

  *data = circ_buf[head].pbuf;
 80046ba:	4b1f      	ldr	r3, [pc, #124]	; (8004738 <USB_Data_Get+0x94>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	4613      	mov	r3, r2
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4a1c      	ldr	r2, [pc, #112]	; (800473c <USB_Data_Get+0x98>)
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
  len = circ_buf[head].len;
 80046d2:	4b19      	ldr	r3, [pc, #100]	; (8004738 <USB_Data_Get+0x94>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	4619      	mov	r1, r3
 80046da:	4a18      	ldr	r2, [pc, #96]	; (800473c <USB_Data_Get+0x98>)
 80046dc:	460b      	mov	r3, r1
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	440b      	add	r3, r1
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	3340      	adds	r3, #64	; 0x40
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]
  head = (head + 1) % CIRC_BUF_SIZE;
 80046ec:	4b12      	ldr	r3, [pc, #72]	; (8004738 <USB_Data_Get+0x94>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	4b12      	ldr	r3, [pc, #72]	; (8004740 <USB_Data_Get+0x9c>)
 80046f6:	fb83 1302 	smull	r1, r3, r3, r2
 80046fa:	1119      	asrs	r1, r3, #4
 80046fc:	17d3      	asrs	r3, r2, #31
 80046fe:	1ac9      	subs	r1, r1, r3
 8004700:	460b      	mov	r3, r1
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	440b      	add	r3, r1
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	1ad1      	subs	r1, r2, r3
 800470a:	b2ca      	uxtb	r2, r1
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <USB_Data_Get+0x94>)
 800470e:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004710:	b672      	cpsid	i
}
 8004712:	bf00      	nop
  __disable_irq();
  size--;
 8004714:	4b07      	ldr	r3, [pc, #28]	; (8004734 <USB_Data_Get+0x90>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4b05      	ldr	r3, [pc, #20]	; (8004734 <USB_Data_Get+0x90>)
 8004720:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004722:	b662      	cpsie	i
}
 8004724:	bf00      	nop
  __enable_irq();

  return len;
 8004726:	68fb      	ldr	r3, [r7, #12]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	20000c01 	.word	0x20000c01
 8004738:	20000c00 	.word	0x20000c00
 800473c:	200002f8 	.word	0x200002f8
 8004740:	78787879 	.word	0x78787879

08004744 <USB_DataRx_Sched_Internal>:

static inline void USB_DataRx_Sched_Internal(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  if (size < CIRC_BUF_SIZE)
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <USB_DataRx_Sched_Internal+0x18>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b21      	cmp	r3, #33	; 0x21
 8004750:	d802      	bhi.n	8004758 <USB_DataRx_Sched_Internal+0x14>
//    SetEPRxValid(ENDP3);
	  USBD_CtlReceiveStatus(&hUsbDeviceHS);
 8004752:	4803      	ldr	r0, [pc, #12]	; (8004760 <USB_DataRx_Sched_Internal+0x1c>)
 8004754:	f00d ffb1 	bl	80126ba <USBD_CtlReceiveStatus>
}
 8004758:	bf00      	nop
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000c01 	.word	0x20000c01
 8004760:	20005228 	.word	0x20005228

08004764 <USB_DataRx_Sched>:

void USB_DataRx_Sched(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004768:	b672      	cpsid	i
}
 800476a:	bf00      	nop
  __disable_irq();
  USB_DataRx_Sched_Internal();
 800476c:	f7ff ffea 	bl	8004744 <USB_DataRx_Sched_Internal>
  __ASM volatile ("cpsie i" : : : "memory");
 8004770:	b662      	cpsie	i
}
 8004772:	bf00      	nop
  __enable_irq();
}
 8004774:	bf00      	nop
 8004776:	bd80      	pop	{r7, pc}

08004778 <CDC_Receive_handler>:

// CDC接收数据回调函数
/*void EP3_OUT_Callback(void)*/
void CDC_Receive_handler(uint8_t* Buf, uint32_t Len)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
	Receive_length = USBD_GetRxCount(&hUsbDeviceHS, CDC_OUT_EP);
 8004782:	2101      	movs	r1, #1
 8004784:	4823      	ldr	r0, [pc, #140]	; (8004814 <CDC_Receive_handler+0x9c>)
 8004786:	f00d ffab 	bl	80126e0 <USBD_GetRxCount>
 800478a:	4603      	mov	r3, r0
 800478c:	4a22      	ldr	r2, [pc, #136]	; (8004818 <CDC_Receive_handler+0xa0>)
 800478e:	6013      	str	r3, [r2, #0]
    if (size < CIRC_BUF_SIZE)
 8004790:	4b22      	ldr	r3, [pc, #136]	; (800481c <CDC_Receive_handler+0xa4>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b21      	cmp	r3, #33	; 0x21
 8004798:	d838      	bhi.n	800480c <CDC_Receive_handler+0x94>
    {
        // 循环缓冲区索引移动
        tail = (tail + 1) % CIRC_BUF_SIZE;
 800479a:	4b21      	ldr	r3, [pc, #132]	; (8004820 <CDC_Receive_handler+0xa8>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	4b20      	ldr	r3, [pc, #128]	; (8004824 <CDC_Receive_handler+0xac>)
 80047a4:	fb83 1302 	smull	r1, r3, r3, r2
 80047a8:	1119      	asrs	r1, r3, #4
 80047aa:	17d3      	asrs	r3, r2, #31
 80047ac:	1ac9      	subs	r1, r1, r3
 80047ae:	460b      	mov	r3, r1
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	440b      	add	r3, r1
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	1ad1      	subs	r1, r2, r3
 80047b8:	b2ca      	uxtb	r2, r1
 80047ba:	4b19      	ldr	r3, [pc, #100]	; (8004820 <CDC_Receive_handler+0xa8>)
 80047bc:	701a      	strb	r2, [r3, #0]
        // 将接收到的数据复制到循环缓冲区
        // 将数据从 Buf 复制到 circ_buf[tail].pbuf
        memcpy(circ_buf[tail].pbuf, Buf, Receive_length);
 80047be:	4b18      	ldr	r3, [pc, #96]	; (8004820 <CDC_Receive_handler+0xa8>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	4613      	mov	r3, r2
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4a16      	ldr	r2, [pc, #88]	; (8004828 <CDC_Receive_handler+0xb0>)
 80047d0:	4413      	add	r3, r2
 80047d2:	4a11      	ldr	r2, [pc, #68]	; (8004818 <CDC_Receive_handler+0xa0>)
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4618      	mov	r0, r3
 80047da:	f00f f966 	bl	8013aaa <memcpy>
        circ_buf[tail].len = Receive_length;
 80047de:	4b10      	ldr	r3, [pc, #64]	; (8004820 <CDC_Receive_handler+0xa8>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	4618      	mov	r0, r3
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <CDC_Receive_handler+0xa0>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	490f      	ldr	r1, [pc, #60]	; (8004828 <CDC_Receive_handler+0xb0>)
 80047ec:	4603      	mov	r3, r0
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	4403      	add	r3, r0
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	3340      	adds	r3, #64	; 0x40
 80047f8:	601a      	str	r2, [r3, #0]
        size++;
 80047fa:	4b08      	ldr	r3, [pc, #32]	; (800481c <CDC_Receive_handler+0xa4>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	3301      	adds	r3, #1
 8004802:	b2da      	uxtb	r2, r3
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <CDC_Receive_handler+0xa4>)
 8004806:	701a      	strb	r2, [r3, #0]
        USB_DataRx_Sched_Internal();
 8004808:	f7ff ff9c 	bl	8004744 <USB_DataRx_Sched_Internal>
    // 发送数据到USART1
//    HAL_UART_Transmit(&huart1, circ_buf[tail].pbuf, Receive_length, HAL_MAX_DELAY);

    // 发送数据回USB HS
//    CDC_Transmit_HS(circ_buf[tail].pbuf, Receive_length); // 假设存在一个名为USBD_CDC_Transmit_HS的函数
}
 800480c:	bf00      	nop
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20005228 	.word	0x20005228
 8004818:	200002f4 	.word	0x200002f4
 800481c:	20000c01 	.word	0x20000c01
 8004820:	20000010 	.word	0x20000010
 8004824:	78787879 	.word	0x78787879
 8004828:	200002f8 	.word	0x200002f8

0800482c <CDC_Send_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Send_DATA (uint8_t *ptrBuffer, uint8_t Send_length)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
  /*if max buffer is Not reached*/
  if(Send_length <= VIRTUAL_COM_PORT_DATA_SIZE)
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d80a      	bhi.n	8004854 <CDC_Send_DATA+0x28>
/*packet_sent = 0;
  memcpy(CDC_IN_EP, (unsigned char*)ptrBuffer, Send_length);
  CDC_Transmit_HS((unsigned char*)ptrBuffer, Send_length);
单次发送
 */
	  packet_sent = 0;
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <CDC_Send_DATA+0x34>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
//	  uint8_t result = USBD_OK;
//      memcpy(CDC_IN_EP, (unsigned char*)ptrBuffer, Send_length);
      CDC_Transmit_HS((unsigned char*)ptrBuffer, Send_length);
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	b29b      	uxth	r3, r3
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f00e f8e4 	bl	8012a18 <CDC_Transmit_HS>
  else
  {
    return 0;
    return USBD_OK;
  }
  return 1;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <CDC_Send_DATA+0x2a>
    return 0;
 8004854:	2300      	movs	r3, #0
  return USBD_BUSY;
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000014 	.word	0x20000014

08004864 <CDC_Receive_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Receive_DATA(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  USBD_CtlReceiveStatus(&hUsbDeviceHS);
 8004868:	4802      	ldr	r0, [pc, #8]	; (8004874 <CDC_Receive_DATA+0x10>)
 800486a:	f00d ff26 	bl	80126ba <USBD_CtlReceiveStatus>
  return 1 ;
 800486e:	2301      	movs	r3, #1
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20005228 	.word	0x20005228

08004878 <CDC_IsPacketSent>:
* Input          : None.
* Output         : None.
* Return         : 1/0.
*******************************************************************************/
int CDC_IsPacketSent(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return packet_sent;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <CDC_IsPacketSent+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000014 	.word	0x20000014

08004890 <is_external_clock_avail>:
 */

#include "clock.h"
#include <stm32f4xx.h>

bool is_external_clock_avail() {
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
	return (RCC->CR & RCC_CR_HSERDY) != RESET;
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <is_external_clock_avail+0x20>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	bf14      	ite	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	2300      	moveq	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	40023800 	.word	0x40023800

080048b4 <flash_page_erase>:
#include "stm32f4xx_hal.h"
#include <string.h>

// 擦除指定页的Flash存储器
int flash_page_erase(uint32_t page_addr)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef erase_init;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 80048bc:	f005 fa96 	bl	8009dec <HAL_FLASH_Unlock>

    // 配置擦除初始化结构体
    erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60bb      	str	r3, [r7, #8]
    erase_init.Sector = FLASH_SECTOR_0; // 选择要擦除的扇区，可以根据您的需求更改
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]
    erase_init.NbSectors = 1; // 要擦除的扇区数量
 80048c8:	2301      	movs	r3, #1
 80048ca:	617b      	str	r3, [r7, #20]
    erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3; // 选择电压范围，可以根据您的需求更改
 80048cc:	2302      	movs	r3, #2
 80048ce:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&erase_init, NULL); // 擦除指定页
 80048d0:	f107 0308 	add.w	r3, r7, #8
 80048d4:	2100      	movs	r1, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f005 fbea 	bl	800a0b0 <HAL_FLASHEx_Erase>
 80048dc:	4603      	mov	r3, r0
 80048de:	77fb      	strb	r3, [r7, #31]

    // 锁定Flash存储器
    HAL_FLASH_Lock();
 80048e0:	f005 faa6 	bl	8009e30 <HAL_FLASH_Lock>

    return status != HAL_OK ? -1 : 0;
 80048e4:	7ffb      	ldrb	r3, [r7, #31]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <flash_page_erase+0x3c>
 80048ea:	f04f 33ff 	mov.w	r3, #4294967295
 80048ee:	e000      	b.n	80048f2 <flash_page_erase+0x3e>
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <flash_write>:

// 向Flash存储器写入数据
int flash_write(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 80048fa:	b5b0      	push	{r4, r5, r7, lr}
 80048fc:	b088      	sub	sp, #32
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
    int ret = -1;
 8004906:	f04f 33ff 	mov.w	r3, #4294967295
 800490a:	61fb      	str	r3, [r7, #28]
    uint32_t data_word;
    uint32_t i;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 800490c:	f005 fa6e 	bl	8009dec <HAL_FLASH_Unlock>

    for (i = 0; i < data_len; i += 4)
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	e017      	b.n	8004946 <flash_write+0x4c>
    {
        // 从数据缓冲区中读取32位字
        memcpy(&data_word, &data[i], 4);
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	4413      	add	r3, r2
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	617b      	str	r3, [r7, #20]

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data_word) != HAL_OK)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2200      	movs	r2, #0
 8004924:	461c      	mov	r4, r3
 8004926:	4615      	mov	r5, r2
 8004928:	4622      	mov	r2, r4
 800492a:	462b      	mov	r3, r5
 800492c:	68f9      	ldr	r1, [r7, #12]
 800492e:	2002      	movs	r0, #2
 8004930:	f005 f954 	bl	8009bdc <HAL_FLASH_Program>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10c      	bne.n	8004954 <flash_write+0x5a>
            goto Exit;

        addr += 4; // 更新地址，指向下一个32位字
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3304      	adds	r3, #4
 800493e:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < data_len; i += 4)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	3304      	adds	r3, #4
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d3e3      	bcc.n	8004916 <flash_write+0x1c>
    }

    ret = data_len;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	e000      	b.n	8004956 <flash_write+0x5c>
            goto Exit;
 8004954:	bf00      	nop
Exit:
    // 锁定Flash存储器
    HAL_FLASH_Lock();
 8004956:	f005 fa6b 	bl	8009e30 <HAL_FLASH_Lock>

    return ret;
 800495a:	69fb      	ldr	r3, [r7, #28]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3720      	adds	r7, #32
 8004960:	46bd      	mov	sp, r7
 8004962:	bdb0      	pop	{r4, r5, r7, pc}

08004964 <flash_read>:

// 从Flash存储器读取数据
int flash_read(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for (i = 0; i < data_len; i++)
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e00c      	b.n	8004990 <flash_read+0x2c>
    {
        data[i] = *(__IO uint8_t *)(addr + i); // 从Flash存储器中读取字节数据
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4413      	add	r3, r2
 800497c:	4619      	mov	r1, r3
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4413      	add	r3, r2
 8004984:	780a      	ldrb	r2, [r1, #0]
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_len; i++)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	3301      	adds	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d3ee      	bcc.n	8004976 <flash_read+0x12>
    }

    return i;
 8004998:	697b      	ldr	r3, [r7, #20]
}
 800499a:	4618      	mov	r0, r3
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <MX_FSMC_Init>:

NAND_HandleTypeDef hnand1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80049ae:	f107 0310 	add.w	r3, r7, #16
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	609a      	str	r2, [r3, #8]
 80049ba:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80049bc:	463b      	mov	r3, r7
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	605a      	str	r2, [r3, #4]
 80049c4:	609a      	str	r2, [r3, #8]
 80049c6:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 80049c8:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <MX_FSMC_Init+0xbc>)
 80049ca:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <MX_FSMC_Init+0xc0>)
 80049cc:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 80049ce:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <MX_FSMC_Init+0xbc>)
 80049d0:	2210      	movs	r2, #16
 80049d2:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 80049d4:	4b23      	ldr	r3, [pc, #140]	; (8004a64 <MX_FSMC_Init+0xbc>)
 80049d6:	2202      	movs	r2, #2
 80049d8:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 80049da:	4b22      	ldr	r3, [pc, #136]	; (8004a64 <MX_FSMC_Init+0xbc>)
 80049dc:	2200      	movs	r2, #0
 80049de:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 80049e0:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <MX_FSMC_Init+0xbc>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80049e6:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <MX_FSMC_Init+0xbc>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 80049ec:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <MX_FSMC_Init+0xbc>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 80049f2:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <MX_FSMC_Init+0xbc>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 80049f8:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <MX_FSMC_Init+0xbc>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 0;
 80049fe:	4b19      	ldr	r3, [pc, #100]	; (8004a64 <MX_FSMC_Init+0xbc>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 0;
 8004a04:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <MX_FSMC_Init+0xbc>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 0;
 8004a0a:	4b16      	ldr	r3, [pc, #88]	; (8004a64 <MX_FSMC_Init+0xbc>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 0;
 8004a10:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <MX_FSMC_Init+0xbc>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 0;
 8004a16:	4b13      	ldr	r3, [pc, #76]	; (8004a64 <MX_FSMC_Init+0xbc>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <MX_FSMC_Init+0xbc>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8004a24:	23fc      	movs	r3, #252	; 0xfc
 8004a26:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8004a28:	23fc      	movs	r3, #252	; 0xfc
 8004a2a:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 8004a2c:	23fc      	movs	r3, #252	; 0xfc
 8004a2e:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 8004a30:	23fc      	movs	r3, #252	; 0xfc
 8004a32:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8004a34:	23fc      	movs	r3, #252	; 0xfc
 8004a36:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8004a38:	23fc      	movs	r3, #252	; 0xfc
 8004a3a:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 8004a3c:	23fc      	movs	r3, #252	; 0xfc
 8004a3e:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 8004a40:	23fc      	movs	r3, #252	; 0xfc
 8004a42:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8004a44:	463a      	mov	r2, r7
 8004a46:	f107 0310 	add.w	r3, r7, #16
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4805      	ldr	r0, [pc, #20]	; (8004a64 <MX_FSMC_Init+0xbc>)
 8004a4e:	f005 ff44 	bl	800a8da <HAL_NAND_Init>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8004a58:	f001 f81a 	bl	8005a90 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004a5c:	bf00      	nop
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000c04 	.word	0x20000c04
 8004a68:	a0000060 	.word	0xa0000060

08004a6c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004a80:	4b20      	ldr	r3, [pc, #128]	; (8004b04 <HAL_FSMC_MspInit+0x98>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d139      	bne.n	8004afc <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <HAL_FSMC_MspInit+0x98>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	603b      	str	r3, [r7, #0]
 8004a92:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <HAL_FSMC_MspInit+0x9c>)
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <HAL_FSMC_MspInit+0x9c>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6393      	str	r3, [r2, #56]	; 0x38
 8004a9e:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <HAL_FSMC_MspInit+0x9c>)
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004aaa:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8004aae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004abc:	230c      	movs	r3, #12
 8004abe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ac0:	1d3b      	adds	r3, r7, #4
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4811      	ldr	r0, [pc, #68]	; (8004b0c <HAL_FSMC_MspInit+0xa0>)
 8004ac6:	f005 fc15 	bl	800a2f4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8004aca:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8004ace:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004adc:	230c      	movs	r3, #12
 8004ade:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ae0:	1d3b      	adds	r3, r7, #4
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	480a      	ldr	r0, [pc, #40]	; (8004b10 <HAL_FSMC_MspInit+0xa4>)
 8004ae6:	f005 fc05 	bl	800a2f4 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8004aea:	2200      	movs	r2, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	2030      	movs	r0, #48	; 0x30
 8004af0:	f004 ff9d 	bl	8009a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004af4:	2030      	movs	r0, #48	; 0x30
 8004af6:	f004 ffb6 	bl	8009a66 <HAL_NVIC_EnableIRQ>
 8004afa:	e000      	b.n	8004afe <HAL_FSMC_MspInit+0x92>
    return;
 8004afc:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	20000c44 	.word	0x20000c44
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40020c00 	.word	0x40020c00

08004b14 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8004b1c:	f7ff ffa6 	bl	8004a6c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <nand_gpio_init>:
static fsmc_conf_t fsmc_conf;   // FSMC NAND Flash的配置结构体

static uint32_t FSMC_Initialized = 0;

static void nand_gpio_init(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN FSMC_MspInit 0 */

	  /* USER CODE END FSMC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b2e:	1d3b      	adds	r3, r7, #4
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	605a      	str	r2, [r3, #4]
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	611a      	str	r2, [r3, #16]
	  if (FSMC_Initialized) {
 8004b3c:	4b20      	ldr	r3, [pc, #128]	; (8004bc0 <nand_gpio_init+0x98>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d139      	bne.n	8004bb8 <nand_gpio_init+0x90>
	    return;
	  }
	  FSMC_Initialized = 1;
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <nand_gpio_init+0x98>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

	  /* Peripheral clock enable */
	  __HAL_RCC_FSMC_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	603b      	str	r3, [r7, #0]
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <nand_gpio_init+0x9c>)
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <nand_gpio_init+0x9c>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	6393      	str	r3, [r2, #56]	; 0x38
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <nand_gpio_init+0x9c>)
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	683b      	ldr	r3, [r7, #0]
	  PD5   ------> FSMC_NWE
	  PD6   ------> FSMC_NWAIT
	  PD7   ------> FSMC_NCE2
	  */
	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004b66:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8004b6a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b74:	2303      	movs	r3, #3
 8004b76:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004b78:	230c      	movs	r3, #12
 8004b7a:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b7c:	1d3b      	adds	r3, r7, #4
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4811      	ldr	r0, [pc, #68]	; (8004bc8 <nand_gpio_init+0xa0>)
 8004b82:	f005 fbb7 	bl	800a2f4 <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8004b86:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8004b8a:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
	                          |GPIO_PIN_6|GPIO_PIN_7;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b94:	2303      	movs	r3, #3
 8004b96:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004b98:	230c      	movs	r3, #12
 8004b9a:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b9c:	1d3b      	adds	r3, r7, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	480a      	ldr	r0, [pc, #40]	; (8004bcc <nand_gpio_init+0xa4>)
 8004ba2:	f005 fba7 	bl	800a2f4 <HAL_GPIO_Init>

	  /* Peripheral interrupt init */
	  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2100      	movs	r1, #0
 8004baa:	2030      	movs	r0, #48	; 0x30
 8004bac:	f004 ff3f 	bl	8009a2e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004bb0:	2030      	movs	r0, #48	; 0x30
 8004bb2:	f004 ff58 	bl	8009a66 <HAL_NVIC_EnableIRQ>
 8004bb6:	e000      	b.n	8004bba <nand_gpio_init+0x92>
	    return;
 8004bb8:	bf00      	nop
	  /* USER CODE BEGIN FSMC_MspInit 1 */

	  /* USER CODE END FSMC_MspInit 1 */
}
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000c60 	.word	0x20000c60
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40020c00 	.word	0x40020c00

08004bd0 <nand_fsmc_init>:

extern NAND_HandleTypeDef hnand1;

static void nand_fsmc_init()
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b090      	sub	sp, #64	; 0x40
 8004bd4:	af00      	add	r7, sp, #0
    FSMC_NAND_InitTypeDef fsmc_init;

//    FSMC_NAND_PCC_TimingTypeDef timing_init;
    FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
 8004be0:	609a      	str	r2, [r3, #8]
 8004be2:	60da      	str	r2, [r3, #12]
    FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	605a      	str	r2, [r3, #4]
 8004bec:	609a      	str	r2, [r3, #8]
 8004bee:	60da      	str	r2, [r3, #12]

//    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
    __HAL_RCC_FSMC_CLK_ENABLE();
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <nand_fsmc_init+0xc0>)
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	4a25      	ldr	r2, [pc, #148]	; (8004c90 <nand_fsmc_init+0xc0>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6393      	str	r3, [r2, #56]	; 0x38
 8004c00:	4b23      	ldr	r3, [pc, #140]	; (8004c90 <nand_fsmc_init+0xc0>)
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	603b      	str	r3, [r7, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]

//    timing_init.FSMC_SetupTime = fsmc_conf.setup_time;  // 设置时序参数
    ComSpaceTiming.SetupTime = fsmc_conf.setup_time;  // 设置时序参数
 8004c0c:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <nand_fsmc_init+0xc4>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	617b      	str	r3, [r7, #20]
//    timing_init.FSMC_WaitSetupTime = fsmc_conf.wait_setup_time;
    ComSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 8004c12:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <nand_fsmc_init+0xc4>)
 8004c14:	785b      	ldrb	r3, [r3, #1]
 8004c16:	61bb      	str	r3, [r7, #24]
//    timing_init.FSMC_HoldSetupTime = fsmc_conf.hold_setup_time;
    ComSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 8004c18:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <nand_fsmc_init+0xc4>)
 8004c1a:	789b      	ldrb	r3, [r3, #2]
 8004c1c:	61fb      	str	r3, [r7, #28]
//    timing_init.FSMC_HiZSetupTime = fsmc_conf.hi_z_setup_time;
    ComSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 8004c1e:	4b1d      	ldr	r3, [pc, #116]	; (8004c94 <nand_fsmc_init+0xc4>)
 8004c20:	78db      	ldrb	r3, [r3, #3]
 8004c22:	623b      	str	r3, [r7, #32]

    hnand1.Instance = FSMC_NAND_DEVICE;
 8004c24:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <nand_fsmc_init+0xc8>)
 8004c26:	4a1d      	ldr	r2, [pc, #116]	; (8004c9c <nand_fsmc_init+0xcc>)
 8004c28:	601a      	str	r2, [r3, #0]
//    fsmc_init.FSMC_Bank = FSMC_Bank2_NAND;  // 设置FSMC NAND Flash的相关参数
    hnand1.Init.NandBank = FSMC_Bank_NAND;
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <nand_fsmc_init+0xc8>)
 8004c2c:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <nand_fsmc_init+0xcc>)
 8004c2e:	605a      	str	r2, [r3, #4]
//    fsmc_init.FSMC_Waitfeature = FSMC_Waitfeature_Enable;
    hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8004c30:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <nand_fsmc_init+0xc8>)
 8004c32:	2202      	movs	r2, #2
 8004c34:	609a      	str	r2, [r3, #8]
//    fsmc_init.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
    hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8004c36:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <nand_fsmc_init+0xc8>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	60da      	str	r2, [r3, #12]
//    fsmc_init.FSMC_ECC = FSMC_ECC_Enable;
    hnand1.Init.EccComputation = FSMC_NAND_ECC_ENABLE;
 8004c3c:	4b16      	ldr	r3, [pc, #88]	; (8004c98 <nand_fsmc_init+0xc8>)
 8004c3e:	2240      	movs	r2, #64	; 0x40
 8004c40:	611a      	str	r2, [r3, #16]
//    fsmc_init.FSMC_ECCPageSize = FSMC_ECCPageSize_2048Bytes;
    hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_2048BYTE;
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <nand_fsmc_init+0xc8>)
 8004c44:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8004c48:	615a      	str	r2, [r3, #20]
//    fsmc_init.FSMC_TCLRSetupTime = fsmc_conf.clr_setup_time;
    hnand1.Init.TCLRSetupTime = fsmc_conf.clr_setup_time;
 8004c4a:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <nand_fsmc_init+0xc4>)
 8004c4c:	791b      	ldrb	r3, [r3, #4]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <nand_fsmc_init+0xc8>)
 8004c52:	619a      	str	r2, [r3, #24]
//    fsmc_init.FSMC_TARSetupTime = fsmc_conf.ar_setup_time;
    hnand1.Init.TARSetupTime = fsmc_conf.ar_setup_time;
 8004c54:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <nand_fsmc_init+0xc4>)
 8004c56:	795b      	ldrb	r3, [r3, #5]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <nand_fsmc_init+0xc8>)
 8004c5c:	61da      	str	r2, [r3, #28]
/*    ComSpaceTiming.SetupTime = 252;
    ComSpaceTiming.WaitSetupTime = 252;
    ComSpaceTiming.HoldSetupTime = 252;
    ComSpaceTiming.HiZSetupTime = 252;*/
//    fsmc_init.FSMC_AttributeSpaceTimingStruct = &timing_init;
    AttSpaceTiming.SetupTime = 252;
 8004c5e:	23fc      	movs	r3, #252	; 0xfc
 8004c60:	607b      	str	r3, [r7, #4]
    AttSpaceTiming.WaitSetupTime = 252;
 8004c62:	23fc      	movs	r3, #252	; 0xfc
 8004c64:	60bb      	str	r3, [r7, #8]
    AttSpaceTiming.HoldSetupTime = 252;
 8004c66:	23fc      	movs	r3, #252	; 0xfc
 8004c68:	60fb      	str	r3, [r7, #12]
    AttSpaceTiming.HiZSetupTime = 252;
 8004c6a:	23fc      	movs	r3, #252	; 0xfc
 8004c6c:	613b      	str	r3, [r7, #16]

    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8004c6e:	1d3a      	adds	r2, r7, #4
 8004c70:	f107 0314 	add.w	r3, r7, #20
 8004c74:	4619      	mov	r1, r3
 8004c76:	4808      	ldr	r0, [pc, #32]	; (8004c98 <nand_fsmc_init+0xc8>)
 8004c78:	f005 fe2f 	bl	800a8da <HAL_NAND_Init>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <nand_fsmc_init+0xb6>
    {
      Error_Handler( );
 8004c82:	f000 ff05 	bl	8005a90 <Error_Handler>
    }  // 初始化FSMC NAND Flash

//    FSMC_NANDCmd(FSMC_Bank_NAND, ENABLE);  // 使能FSMC NAND Flash
}
 8004c86:	bf00      	nop
 8004c88:	3740      	adds	r7, #64	; 0x40
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800
 8004c94:	20000c48 	.word	0x20000c48
 8004c98:	20000c04 	.word	0x20000c04
 8004c9c:	a0000060 	.word	0xa0000060

08004ca0 <nand_print_fsmc_info>:

static void nand_print_fsmc_info()
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
    DEBUG_PRINT("Setup time: %d\r\n", fsmc_conf.setup_time);
 8004ca4:	4b42      	ldr	r3, [pc, #264]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4842      	ldr	r0, [pc, #264]	; (8004db4 <nand_print_fsmc_info+0x114>)
 8004cac:	f00e fd3c 	bl	8013728 <iprintf>
    DEBUG_PRINT("Wait setup time: %d\r\n", fsmc_conf.wait_setup_time);
 8004cb0:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4840      	ldr	r0, [pc, #256]	; (8004db8 <nand_print_fsmc_info+0x118>)
 8004cb8:	f00e fd36 	bl	8013728 <iprintf>
    DEBUG_PRINT("Hold setup time: %d\r\n", fsmc_conf.hold_setup_time);
 8004cbc:	4b3c      	ldr	r3, [pc, #240]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004cbe:	789b      	ldrb	r3, [r3, #2]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	483e      	ldr	r0, [pc, #248]	; (8004dbc <nand_print_fsmc_info+0x11c>)
 8004cc4:	f00e fd30 	bl	8013728 <iprintf>
    DEBUG_PRINT("HiZ setup time: %d\r\n", fsmc_conf.hi_z_setup_time);
 8004cc8:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004cca:	78db      	ldrb	r3, [r3, #3]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	483c      	ldr	r0, [pc, #240]	; (8004dc0 <nand_print_fsmc_info+0x120>)
 8004cd0:	f00e fd2a 	bl	8013728 <iprintf>
    DEBUG_PRINT("CLR setup time: %d\r\n", fsmc_conf.clr_setup_time);
 8004cd4:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004cd6:	791b      	ldrb	r3, [r3, #4]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	483a      	ldr	r0, [pc, #232]	; (8004dc4 <nand_print_fsmc_info+0x124>)
 8004cdc:	f00e fd24 	bl	8013728 <iprintf>
    DEBUG_PRINT("AR setup time: %d\r\n", fsmc_conf.ar_setup_time);
 8004ce0:	4b33      	ldr	r3, [pc, #204]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004ce2:	795b      	ldrb	r3, [r3, #5]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4838      	ldr	r0, [pc, #224]	; (8004dc8 <nand_print_fsmc_info+0x128>)
 8004ce8:	f00e fd1e 	bl	8013728 <iprintf>
    DEBUG_PRINT("Row cycles: %d\r\n", fsmc_conf.row_cycles);
 8004cec:	4b30      	ldr	r3, [pc, #192]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004cee:	799b      	ldrb	r3, [r3, #6]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4836      	ldr	r0, [pc, #216]	; (8004dcc <nand_print_fsmc_info+0x12c>)
 8004cf4:	f00e fd18 	bl	8013728 <iprintf>
    DEBUG_PRINT("Col. cycles: %d\r\n", fsmc_conf.col_cycles);
 8004cf8:	4b2d      	ldr	r3, [pc, #180]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004cfa:	79db      	ldrb	r3, [r3, #7]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4834      	ldr	r0, [pc, #208]	; (8004dd0 <nand_print_fsmc_info+0x130>)
 8004d00:	f00e fd12 	bl	8013728 <iprintf>
    DEBUG_PRINT("Read command 1: %d\r\n", fsmc_conf.read1_cmd);
 8004d04:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d06:	7a1b      	ldrb	r3, [r3, #8]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4832      	ldr	r0, [pc, #200]	; (8004dd4 <nand_print_fsmc_info+0x134>)
 8004d0c:	f00e fd0c 	bl	8013728 <iprintf>
    DEBUG_PRINT("Read command 2: %d\r\n", fsmc_conf.read2_cmd);
 8004d10:	4b27      	ldr	r3, [pc, #156]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d12:	7a5b      	ldrb	r3, [r3, #9]
 8004d14:	4619      	mov	r1, r3
 8004d16:	4830      	ldr	r0, [pc, #192]	; (8004dd8 <nand_print_fsmc_info+0x138>)
 8004d18:	f00e fd06 	bl	8013728 <iprintf>
    DEBUG_PRINT("Read spare command: %d\r\n", fsmc_conf.read_spare_cmd);    
 8004d1c:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d1e:	7a9b      	ldrb	r3, [r3, #10]
 8004d20:	4619      	mov	r1, r3
 8004d22:	482e      	ldr	r0, [pc, #184]	; (8004ddc <nand_print_fsmc_info+0x13c>)
 8004d24:	f00e fd00 	bl	8013728 <iprintf>
    DEBUG_PRINT("Read ID command: %d\r\n", fsmc_conf.read_id_cmd);
 8004d28:	4b21      	ldr	r3, [pc, #132]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d2a:	7adb      	ldrb	r3, [r3, #11]
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	482c      	ldr	r0, [pc, #176]	; (8004de0 <nand_print_fsmc_info+0x140>)
 8004d30:	f00e fcfa 	bl	8013728 <iprintf>
    DEBUG_PRINT("Reset command: %d\r\n", fsmc_conf.reset_cmd);
 8004d34:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d36:	7b1b      	ldrb	r3, [r3, #12]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	482a      	ldr	r0, [pc, #168]	; (8004de4 <nand_print_fsmc_info+0x144>)
 8004d3c:	f00e fcf4 	bl	8013728 <iprintf>
    DEBUG_PRINT("Write 1 command: %d\r\n", fsmc_conf.write1_cmd);
 8004d40:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d42:	7b5b      	ldrb	r3, [r3, #13]
 8004d44:	4619      	mov	r1, r3
 8004d46:	4828      	ldr	r0, [pc, #160]	; (8004de8 <nand_print_fsmc_info+0x148>)
 8004d48:	f00e fcee 	bl	8013728 <iprintf>
    DEBUG_PRINT("Write 2 command: %d\r\n", fsmc_conf.write2_cmd);
 8004d4c:	4b18      	ldr	r3, [pc, #96]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d4e:	7b9b      	ldrb	r3, [r3, #14]
 8004d50:	4619      	mov	r1, r3
 8004d52:	4826      	ldr	r0, [pc, #152]	; (8004dec <nand_print_fsmc_info+0x14c>)
 8004d54:	f00e fce8 	bl	8013728 <iprintf>
    DEBUG_PRINT("Erase 1 command: %d\r\n", fsmc_conf.erase1_cmd);
 8004d58:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d5a:	7bdb      	ldrb	r3, [r3, #15]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4824      	ldr	r0, [pc, #144]	; (8004df0 <nand_print_fsmc_info+0x150>)
 8004d60:	f00e fce2 	bl	8013728 <iprintf>
    DEBUG_PRINT("Erase 2 command: %d\r\n", fsmc_conf.erase2_cmd);
 8004d64:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d66:	7c1b      	ldrb	r3, [r3, #16]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4822      	ldr	r0, [pc, #136]	; (8004df4 <nand_print_fsmc_info+0x154>)
 8004d6c:	f00e fcdc 	bl	8013728 <iprintf>
    DEBUG_PRINT("Status command: %d\r\n", fsmc_conf.status_cmd);
 8004d70:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d72:	7c5b      	ldrb	r3, [r3, #17]
 8004d74:	4619      	mov	r1, r3
 8004d76:	4820      	ldr	r0, [pc, #128]	; (8004df8 <nand_print_fsmc_info+0x158>)
 8004d78:	f00e fcd6 	bl	8013728 <iprintf>
    DEBUG_PRINT("Set feature command: %d\r\n", fsmc_conf.set_features_cmd);
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d7e:	7c9b      	ldrb	r3, [r3, #18]
 8004d80:	4619      	mov	r1, r3
 8004d82:	481e      	ldr	r0, [pc, #120]	; (8004dfc <nand_print_fsmc_info+0x15c>)
 8004d84:	f00e fcd0 	bl	8013728 <iprintf>
    DEBUG_PRINT("Enable ECC address: %d\r\n", fsmc_conf.enable_ecc_addr);
 8004d88:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d8a:	7cdb      	ldrb	r3, [r3, #19]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	481c      	ldr	r0, [pc, #112]	; (8004e00 <nand_print_fsmc_info+0x160>)
 8004d90:	f00e fcca 	bl	8013728 <iprintf>
    DEBUG_PRINT("Enable ECC value: %d\r\n", fsmc_conf.enable_ecc_value);
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004d96:	7d1b      	ldrb	r3, [r3, #20]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	481a      	ldr	r0, [pc, #104]	; (8004e04 <nand_print_fsmc_info+0x164>)
 8004d9c:	f00e fcc4 	bl	8013728 <iprintf>
    DEBUG_PRINT("Disable ECC value: %d\r\n", fsmc_conf.disable_ecc_value);
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <nand_print_fsmc_info+0x110>)
 8004da2:	7d5b      	ldrb	r3, [r3, #21]
 8004da4:	4619      	mov	r1, r3
 8004da6:	4818      	ldr	r0, [pc, #96]	; (8004e08 <nand_print_fsmc_info+0x168>)
 8004da8:	f00e fcbe 	bl	8013728 <iprintf>
}
 8004dac:	bf00      	nop
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000c48 	.word	0x20000c48
 8004db4:	08014560 	.word	0x08014560
 8004db8:	08014574 	.word	0x08014574
 8004dbc:	0801458c 	.word	0x0801458c
 8004dc0:	080145a4 	.word	0x080145a4
 8004dc4:	080145bc 	.word	0x080145bc
 8004dc8:	080145d4 	.word	0x080145d4
 8004dcc:	080145e8 	.word	0x080145e8
 8004dd0:	080145fc 	.word	0x080145fc
 8004dd4:	08014610 	.word	0x08014610
 8004dd8:	08014628 	.word	0x08014628
 8004ddc:	08014640 	.word	0x08014640
 8004de0:	0801465c 	.word	0x0801465c
 8004de4:	08014674 	.word	0x08014674
 8004de8:	08014688 	.word	0x08014688
 8004dec:	080146a0 	.word	0x080146a0
 8004df0:	080146b8 	.word	0x080146b8
 8004df4:	080146d0 	.word	0x080146d0
 8004df8:	080146e8 	.word	0x080146e8
 8004dfc:	08014700 	.word	0x08014700
 8004e00:	0801471c 	.word	0x0801471c
 8004e04:	08014738 	.word	0x08014738
 8004e08:	08014750 	.word	0x08014750

08004e0c <nand_reset>:

static void nand_reset()
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.reset_cmd;  // 发送复位命令给NAND Flash
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <nand_reset+0x18>)
 8004e12:	4a05      	ldr	r2, [pc, #20]	; (8004e28 <nand_reset+0x1c>)
 8004e14:	7b12      	ldrb	r2, [r2, #12]
 8004e16:	701a      	strb	r2, [r3, #0]
}
 8004e18:	bf00      	nop
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	70010000 	.word	0x70010000
 8004e28:	20000c48 	.word	0x20000c48

08004e2c <nand_init>:

static int nand_init(void *conf, uint32_t conf_size)
{
 8004e2c:	b5b0      	push	{r4, r5, r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(fsmc_conf_t))
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b15      	cmp	r3, #21
 8004e3a:	d802      	bhi.n	8004e42 <nand_init+0x16>
        return -1;
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e40:	e015      	b.n	8004e6e <nand_init+0x42>
   
    fsmc_conf = *(fsmc_conf_t *)conf;  // 从传入的配置结构体中获取配置参数
 8004e42:	4a0d      	ldr	r2, [pc, #52]	; (8004e78 <nand_init+0x4c>)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4614      	mov	r4, r2
 8004e48:	461d      	mov	r5, r3
 8004e4a:	6828      	ldr	r0, [r5, #0]
 8004e4c:	6869      	ldr	r1, [r5, #4]
 8004e4e:	68aa      	ldr	r2, [r5, #8]
 8004e50:	68eb      	ldr	r3, [r5, #12]
 8004e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e54:	6928      	ldr	r0, [r5, #16]
 8004e56:	6020      	str	r0, [r4, #0]
 8004e58:	8aab      	ldrh	r3, [r5, #20]
 8004e5a:	80a3      	strh	r3, [r4, #4]

    nand_gpio_init();  // 初始化GPIO引脚
 8004e5c:	f7ff fe64 	bl	8004b28 <nand_gpio_init>
    nand_fsmc_init();  // 初始化FSMC NAND Flash
 8004e60:	f7ff feb6 	bl	8004bd0 <nand_fsmc_init>
    nand_print_fsmc_info();  // 打印FSMC的配置信息
 8004e64:	f7ff ff1c 	bl	8004ca0 <nand_print_fsmc_info>
    nand_reset();  // 复位NAND Flash
 8004e68:	f7ff ffd0 	bl	8004e0c <nand_reset>

    return 0;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bdb0      	pop	{r4, r5, r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000c48 	.word	0x20000c48

08004e7c <nand_uninit>:

static void nand_uninit()
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
    //TODO
}
 8004e80:	bf00      	nop
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <nand_read_status>:

static uint32_t nand_read_status()
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
    uint32_t data, status;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.status_cmd;  // 发送状态命令给NAND Flash
 8004e92:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <nand_read_status+0x4c>)
 8004e94:	4a11      	ldr	r2, [pc, #68]	; (8004edc <nand_read_status+0x50>)
 8004e96:	7c52      	ldrb	r2, [r2, #17]
 8004e98:	701a      	strb	r2, [r3, #0]
    data = *(__IO uint8_t *)(Bank_NAND_ADDR);
 8004e9a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	603b      	str	r3, [r7, #0]

    if ((data & NAND_ERROR) == NAND_ERROR)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <nand_read_status+0x28>
        status = FLASH_STATUS_ERROR;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	e009      	b.n	8004ec8 <nand_read_status+0x3c>
    else if ((data & NAND_READY) == NAND_READY)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <nand_read_status+0x38>
        status = FLASH_STATUS_READY;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	e001      	b.n	8004ec8 <nand_read_status+0x3c>
    else
        status = FLASH_STATUS_BUSY;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的状态
 8004ec8:	687b      	ldr	r3, [r7, #4]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	70010000 	.word	0x70010000
 8004edc:	20000c48 	.word	0x20000c48

08004ee0 <nand_get_status>:

static uint32_t nand_get_status()
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8004ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eea:	603b      	str	r3, [r7, #0]

    status = nand_read_status();
 8004eec:	f7ff ffce 	bl	8004e8c <nand_read_status>
 8004ef0:	6078      	str	r0, [r7, #4]

    /* 等待NAND操作完成或超时发生 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8004ef2:	e005      	b.n	8004f00 <nand_get_status+0x20>
    {
        status = nand_read_status();
 8004ef4:	f7ff ffca 	bl	8004e8c <nand_read_status>
 8004ef8:	6078      	str	r0, [r7, #4]
        timeout --;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d102      	bne.n	8004f0c <nand_get_status+0x2c>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f3      	bne.n	8004ef4 <nand_get_status+0x14>
    }

    if (!timeout)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <nand_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的最终状态
 8004f16:	687b      	ldr	r3, [r7, #4]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <nand_read_id>:

// 从NAND Flash读取ID
static void nand_read_id(chip_id_t *nand_id)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
    uint32_t data = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_id_cmd;  // 发送读取ID的命令给NAND Flash
 8004f2c:	4b17      	ldr	r3, [pc, #92]	; (8004f8c <nand_read_id+0x6c>)
 8004f2e:	4a18      	ldr	r2, [pc, #96]	; (8004f90 <nand_read_id+0x70>)
 8004f30:	7ad2      	ldrb	r2, [r2, #11]
 8004f32:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004f34:	4b17      	ldr	r3, [pc, #92]	; (8004f94 <nand_read_id+0x74>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	701a      	strb	r2, [r3, #0]

    /* 从NAND Flash读取ID的序列 */
    data = *(__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA);
 8004f3a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]
    nand_id->maker_id   = ADDR_1st_CYCLE(data);  // 读取制造商ID
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	701a      	strb	r2, [r3, #0]
    nand_id->device_id  = ADDR_2nd_CYCLE(data);  // 读取设备ID
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	0a1b      	lsrs	r3, r3, #8
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	705a      	strb	r2, [r3, #1]
    nand_id->third_id   = ADDR_3rd_CYCLE(data);  // 读取第三个ID
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	709a      	strb	r2, [r3, #2]
    nand_id->fourth_id  = ADDR_4th_CYCLE(data);  // 读取第四个ID
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	0e1b      	lsrs	r3, r3, #24
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	70da      	strb	r2, [r3, #3]

    data = *((__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA) + 1);
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <nand_read_id+0x78>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]
    nand_id->fifth_id   = ADDR_1st_CYCLE(data);  // 读取第五个ID
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	711a      	strb	r2, [r3, #4]
    nand_id->sixth_id   = ADDR_2nd_CYCLE(data);  // 读取第六个ID
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	715a      	strb	r2, [r3, #5]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	70010000 	.word	0x70010000
 8004f90:	20000c48 	.word	0x20000c48
 8004f94:	70020000 	.word	0x70020000
 8004f98:	70000004 	.word	0x70000004

08004f9c <nand_write_page_async>:

// 异步方式写入NAND Flash的页数据
static void nand_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write1_cmd;  // 发送写入命令给NAND Flash
 8004fa8:	4b4c      	ldr	r3, [pc, #304]	; (80050dc <nand_write_page_async+0x140>)
 8004faa:	4a4d      	ldr	r2, [pc, #308]	; (80050e0 <nand_write_page_async+0x144>)
 8004fac:	7b52      	ldrb	r2, [r2, #13]
 8004fae:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8004fb0:	4b4b      	ldr	r3, [pc, #300]	; (80050e0 <nand_write_page_async+0x144>)
 8004fb2:	79db      	ldrb	r3, [r3, #7]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d82c      	bhi.n	8005014 <nand_write_page_async+0x78>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <nand_write_page_async+0x24>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	08004fd9 	.word	0x08004fd9
 8004fc8:	08004fe7 	.word	0x08004fe7
 8004fcc:	08004ffb 	.word	0x08004ffb
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004fd0:	4b44      	ldr	r3, [pc, #272]	; (80050e4 <nand_write_page_async+0x148>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
        break;
 8004fd6:	e01e      	b.n	8005016 <nand_write_page_async+0x7a>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004fd8:	4b42      	ldr	r3, [pc, #264]	; (80050e4 <nand_write_page_async+0x148>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004fde:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <nand_write_page_async+0x148>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
        break;
 8004fe4:	e017      	b.n	8005016 <nand_write_page_async+0x7a>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004fe6:	4b3f      	ldr	r3, [pc, #252]	; (80050e4 <nand_write_page_async+0x148>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004fec:	4b3d      	ldr	r3, [pc, #244]	; (80050e4 <nand_write_page_async+0x148>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004ff2:	4b3c      	ldr	r3, [pc, #240]	; (80050e4 <nand_write_page_async+0x148>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
        break;
 8004ff8:	e00d      	b.n	8005016 <nand_write_page_async+0x7a>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8004ffa:	4b3a      	ldr	r3, [pc, #232]	; (80050e4 <nand_write_page_async+0x148>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8005000:	4b38      	ldr	r3, [pc, #224]	; (80050e4 <nand_write_page_async+0x148>)
 8005002:	2200      	movs	r2, #0
 8005004:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8005006:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <nand_write_page_async+0x148>)
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 800500c:	4b35      	ldr	r3, [pc, #212]	; (80050e4 <nand_write_page_async+0x148>)
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
        break;
 8005012:	e000      	b.n	8005016 <nand_write_page_async+0x7a>
    default:
        break;
 8005014:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8005016:	4b32      	ldr	r3, [pc, #200]	; (80050e0 <nand_write_page_async+0x144>)
 8005018:	799b      	ldrb	r3, [r3, #6]
 800501a:	3b01      	subs	r3, #1
 800501c:	2b03      	cmp	r3, #3
 800501e:	d83d      	bhi.n	800509c <nand_write_page_async+0x100>
 8005020:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <nand_write_page_async+0x8c>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	08005039 	.word	0x08005039
 800502c:	08005043 	.word	0x08005043
 8005030:	08005057 	.word	0x08005057
 8005034:	08005075 	.word	0x08005075
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8005038:	4b2a      	ldr	r3, [pc, #168]	; (80050e4 <nand_write_page_async+0x148>)
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]
        break;
 8005040:	e02d      	b.n	800509e <nand_write_page_async+0x102>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8005042:	4b28      	ldr	r3, [pc, #160]	; (80050e4 <nand_write_page_async+0x148>)
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	0a1a      	lsrs	r2, r3, #8
 800504e:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <nand_write_page_async+0x148>)
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]
        break;
 8005054:	e023      	b.n	800509e <nand_write_page_async+0x102>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8005056:	4b23      	ldr	r3, [pc, #140]	; (80050e4 <nand_write_page_async+0x148>)
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	0a1a      	lsrs	r2, r3, #8
 8005062:	4b20      	ldr	r3, [pc, #128]	; (80050e4 <nand_write_page_async+0x148>)
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	0c1a      	lsrs	r2, r3, #16
 800506c:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <nand_write_page_async+0x148>)
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
        break;
 8005072:	e014      	b.n	800509e <nand_write_page_async+0x102>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8005074:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <nand_write_page_async+0x148>)
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	0a1a      	lsrs	r2, r3, #8
 8005080:	4b18      	ldr	r3, [pc, #96]	; (80050e4 <nand_write_page_async+0x148>)
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	0c1a      	lsrs	r2, r3, #16
 800508a:	4b16      	ldr	r3, [pc, #88]	; (80050e4 <nand_write_page_async+0x148>)
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	0e1a      	lsrs	r2, r3, #24
 8005094:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <nand_write_page_async+0x148>)
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
        break;
 800509a:	e000      	b.n	800509e <nand_write_page_async+0x102>
    default:
        break;
 800509c:	bf00      	nop
    }

    for(i = 0; i < page_size; i++)
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	e009      	b.n	80050b8 <nand_write_page_async+0x11c>
        *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = buf[i];  // 逐字节写入数据到NAND Flash的数据区
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	4413      	add	r3, r2
 80050aa:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	7013      	strb	r3, [r2, #0]
    for(i = 0; i < page_size; i++)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	3301      	adds	r3, #1
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d3f1      	bcc.n	80050a4 <nand_write_page_async+0x108>

    if (fsmc_conf.write2_cmd != UNDEFINED_CMD)
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <nand_write_page_async+0x144>)
 80050c2:	7b9b      	ldrb	r3, [r3, #14]
 80050c4:	2bff      	cmp	r3, #255	; 0xff
 80050c6:	d003      	beq.n	80050d0 <nand_write_page_async+0x134>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write2_cmd;  // 发送写入命令2给NAND Flash
 80050c8:	4b04      	ldr	r3, [pc, #16]	; (80050dc <nand_write_page_async+0x140>)
 80050ca:	4a05      	ldr	r2, [pc, #20]	; (80050e0 <nand_write_page_async+0x144>)
 80050cc:	7b92      	ldrb	r2, [r2, #14]
 80050ce:	701a      	strb	r2, [r3, #0]
}
 80050d0:	bf00      	nop
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	70010000 	.word	0x70010000
 80050e0:	20000c48 	.word	0x20000c48
 80050e4:	70020000 	.word	0x70020000

080050e8 <nand_read_data>:

// 从NAND Flash读取数据
static uint32_t nand_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read1_cmd;  // 发送读取命令给NAND Flash
 80050f6:	4b55      	ldr	r3, [pc, #340]	; (800524c <nand_read_data+0x164>)
 80050f8:	4a55      	ldr	r2, [pc, #340]	; (8005250 <nand_read_data+0x168>)
 80050fa:	7a12      	ldrb	r2, [r2, #8]
 80050fc:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 80050fe:	4b54      	ldr	r3, [pc, #336]	; (8005250 <nand_read_data+0x168>)
 8005100:	79db      	ldrb	r3, [r3, #7]
 8005102:	3b01      	subs	r3, #1
 8005104:	2b03      	cmp	r3, #3
 8005106:	d83c      	bhi.n	8005182 <nand_read_data+0x9a>
 8005108:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <nand_read_data+0x28>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005121 	.word	0x08005121
 8005114:	0800512b 	.word	0x0800512b
 8005118:	0800513f 	.word	0x0800513f
 800511c:	0800515d 	.word	0x0800515d
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8005120:	4b4c      	ldr	r3, [pc, #304]	; (8005254 <nand_read_data+0x16c>)
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]
        break;
 8005128:	e02c      	b.n	8005184 <nand_read_data+0x9c>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 800512a:	4b4a      	ldr	r3, [pc, #296]	; (8005254 <nand_read_data+0x16c>)
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	0a1a      	lsrs	r2, r3, #8
 8005136:	4b47      	ldr	r3, [pc, #284]	; (8005254 <nand_read_data+0x16c>)
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
        break;
 800513c:	e022      	b.n	8005184 <nand_read_data+0x9c>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 800513e:	4b45      	ldr	r3, [pc, #276]	; (8005254 <nand_read_data+0x16c>)
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	0a1a      	lsrs	r2, r3, #8
 800514a:	4b42      	ldr	r3, [pc, #264]	; (8005254 <nand_read_data+0x16c>)
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	0c1a      	lsrs	r2, r3, #16
 8005154:	4b3f      	ldr	r3, [pc, #252]	; (8005254 <nand_read_data+0x16c>)
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]
        break;
 800515a:	e013      	b.n	8005184 <nand_read_data+0x9c>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 800515c:	4b3d      	ldr	r3, [pc, #244]	; (8005254 <nand_read_data+0x16c>)
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	0a1a      	lsrs	r2, r3, #8
 8005168:	4b3a      	ldr	r3, [pc, #232]	; (8005254 <nand_read_data+0x16c>)
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	0c1a      	lsrs	r2, r3, #16
 8005172:	4b38      	ldr	r3, [pc, #224]	; (8005254 <nand_read_data+0x16c>)
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page_offset);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	0e1a      	lsrs	r2, r3, #24
 800517c:	4b35      	ldr	r3, [pc, #212]	; (8005254 <nand_read_data+0x16c>)
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
    default:
        break;
 8005182:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8005184:	4b32      	ldr	r3, [pc, #200]	; (8005250 <nand_read_data+0x168>)
 8005186:	799b      	ldrb	r3, [r3, #6]
 8005188:	3b01      	subs	r3, #1
 800518a:	2b03      	cmp	r3, #3
 800518c:	d83c      	bhi.n	8005208 <nand_read_data+0x120>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <nand_read_data+0xac>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051a5 	.word	0x080051a5
 8005198:	080051af 	.word	0x080051af
 800519c:	080051c3 	.word	0x080051c3
 80051a0:	080051e1 	.word	0x080051e1
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80051a4:	4b2b      	ldr	r3, [pc, #172]	; (8005254 <nand_read_data+0x16c>)
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	701a      	strb	r2, [r3, #0]
        break;
 80051ac:	e02d      	b.n	800520a <nand_read_data+0x122>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80051ae:	4b29      	ldr	r3, [pc, #164]	; (8005254 <nand_read_data+0x16c>)
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	0a1a      	lsrs	r2, r3, #8
 80051ba:	4b26      	ldr	r3, [pc, #152]	; (8005254 <nand_read_data+0x16c>)
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]
        break;
 80051c0:	e023      	b.n	800520a <nand_read_data+0x122>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80051c2:	4b24      	ldr	r3, [pc, #144]	; (8005254 <nand_read_data+0x16c>)
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	0a1a      	lsrs	r2, r3, #8
 80051ce:	4b21      	ldr	r3, [pc, #132]	; (8005254 <nand_read_data+0x16c>)
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	0c1a      	lsrs	r2, r3, #16
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <nand_read_data+0x16c>)
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
        break;
 80051de:	e014      	b.n	800520a <nand_read_data+0x122>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80051e0:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <nand_read_data+0x16c>)
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	0a1a      	lsrs	r2, r3, #8
 80051ec:	4b19      	ldr	r3, [pc, #100]	; (8005254 <nand_read_data+0x16c>)
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	0c1a      	lsrs	r2, r3, #16
 80051f6:	4b17      	ldr	r3, [pc, #92]	; (8005254 <nand_read_data+0x16c>)
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	0e1a      	lsrs	r2, r3, #24
 8005200:	4b14      	ldr	r3, [pc, #80]	; (8005254 <nand_read_data+0x16c>)
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	701a      	strb	r2, [r3, #0]
        break;
 8005206:	e000      	b.n	800520a <nand_read_data+0x122>
    default:
        break;
 8005208:	bf00      	nop
    }

    if (fsmc_conf.read2_cmd != UNDEFINED_CMD)
 800520a:	4b11      	ldr	r3, [pc, #68]	; (8005250 <nand_read_data+0x168>)
 800520c:	7a5b      	ldrb	r3, [r3, #9]
 800520e:	2bff      	cmp	r3, #255	; 0xff
 8005210:	d003      	beq.n	800521a <nand_read_data+0x132>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read2_cmd;  // 发送读取命令2给NAND Flash
 8005212:	4b0e      	ldr	r3, [pc, #56]	; (800524c <nand_read_data+0x164>)
 8005214:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <nand_read_data+0x168>)
 8005216:	7a52      	ldrb	r2, [r2, #9]
 8005218:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < data_size; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]
 800521e:	e00a      	b.n	8005236 <nand_read_data+0x14e>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 8005220:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	4413      	add	r3, r2
 800522a:	780a      	ldrb	r2, [r1, #0]
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	3301      	adds	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d3f0      	bcc.n	8005220 <nand_read_data+0x138>

    return nand_get_status();  // 获取NAND Flash的状态
 800523e:	f7ff fe4f 	bl	8004ee0 <nand_get_status>
 8005242:	4603      	mov	r3, r0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	70010000 	.word	0x70010000
 8005250:	20000c48 	.word	0x20000c48
 8005254:	70020000 	.word	0x70020000

08005258 <nand_read_page>:

// 从NAND Flash读取数据页
static uint32_t nand_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
    return nand_read_data(buf, page, 0, page_size);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff ff3c 	bl	80050e8 <nand_read_data>
 8005270:	4603      	mov	r3, r0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <nand_read_spare_data>:

// 从NAND Flash读取备用数据
static uint32_t nand_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
    uint32_t i;

    if (fsmc_conf.read_spare_cmd == UNDEFINED_CMD)
 800528a:	4b54      	ldr	r3, [pc, #336]	; (80053dc <nand_read_spare_data+0x160>)
 800528c:	7a9b      	ldrb	r3, [r3, #10]
 800528e:	2bff      	cmp	r3, #255	; 0xff
 8005290:	d101      	bne.n	8005296 <nand_read_spare_data+0x1a>
        return FLASH_STATUS_INVALID_CMD;
 8005292:	2304      	movs	r3, #4
 8005294:	e09e      	b.n	80053d4 <nand_read_spare_data+0x158>

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_spare_cmd;  // 发送读取备用数据命令给NAND Flash
 8005296:	4b52      	ldr	r3, [pc, #328]	; (80053e0 <nand_read_spare_data+0x164>)
 8005298:	4a50      	ldr	r2, [pc, #320]	; (80053dc <nand_read_spare_data+0x160>)
 800529a:	7a92      	ldrb	r2, [r2, #10]
 800529c:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 800529e:	4b4f      	ldr	r3, [pc, #316]	; (80053dc <nand_read_spare_data+0x160>)
 80052a0:	79db      	ldrb	r3, [r3, #7]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d83c      	bhi.n	8005322 <nand_read_spare_data+0xa6>
 80052a8:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <nand_read_spare_data+0x34>)
 80052aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ae:	bf00      	nop
 80052b0:	080052c1 	.word	0x080052c1
 80052b4:	080052cb 	.word	0x080052cb
 80052b8:	080052df 	.word	0x080052df
 80052bc:	080052fd 	.word	0x080052fd
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80052c0:	4b48      	ldr	r3, [pc, #288]	; (80053e4 <nand_read_spare_data+0x168>)
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
        break;
 80052c8:	e02c      	b.n	8005324 <nand_read_spare_data+0xa8>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80052ca:	4b46      	ldr	r3, [pc, #280]	; (80053e4 <nand_read_spare_data+0x168>)
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	0a1a      	lsrs	r2, r3, #8
 80052d6:	4b43      	ldr	r3, [pc, #268]	; (80053e4 <nand_read_spare_data+0x168>)
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]
        break;
 80052dc:	e022      	b.n	8005324 <nand_read_spare_data+0xa8>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80052de:	4b41      	ldr	r3, [pc, #260]	; (80053e4 <nand_read_spare_data+0x168>)
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	0a1a      	lsrs	r2, r3, #8
 80052ea:	4b3e      	ldr	r3, [pc, #248]	; (80053e4 <nand_read_spare_data+0x168>)
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	0c1a      	lsrs	r2, r3, #16
 80052f4:	4b3b      	ldr	r3, [pc, #236]	; (80053e4 <nand_read_spare_data+0x168>)
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]
        break;
 80052fa:	e013      	b.n	8005324 <nand_read_spare_data+0xa8>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80052fc:	4b39      	ldr	r3, [pc, #228]	; (80053e4 <nand_read_spare_data+0x168>)
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	0a1a      	lsrs	r2, r3, #8
 8005308:	4b36      	ldr	r3, [pc, #216]	; (80053e4 <nand_read_spare_data+0x168>)
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	0c1a      	lsrs	r2, r3, #16
 8005312:	4b34      	ldr	r3, [pc, #208]	; (80053e4 <nand_read_spare_data+0x168>)
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(offset);  // 发送列地址的第4个周期
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	0e1a      	lsrs	r2, r3, #24
 800531c:	4b31      	ldr	r3, [pc, #196]	; (80053e4 <nand_read_spare_data+0x168>)
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
    default:
        break;
 8005322:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8005324:	4b2d      	ldr	r3, [pc, #180]	; (80053dc <nand_read_spare_data+0x160>)
 8005326:	799b      	ldrb	r3, [r3, #6]
 8005328:	3b01      	subs	r3, #1
 800532a:	2b03      	cmp	r3, #3
 800532c:	d83c      	bhi.n	80053a8 <nand_read_spare_data+0x12c>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <nand_read_spare_data+0xb8>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005345 	.word	0x08005345
 8005338:	0800534f 	.word	0x0800534f
 800533c:	08005363 	.word	0x08005363
 8005340:	08005381 	.word	0x08005381
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8005344:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <nand_read_spare_data+0x168>)
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]
        break;
 800534c:	e02d      	b.n	80053aa <nand_read_spare_data+0x12e>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800534e:	4b25      	ldr	r3, [pc, #148]	; (80053e4 <nand_read_spare_data+0x168>)
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	0a1a      	lsrs	r2, r3, #8
 800535a:	4b22      	ldr	r3, [pc, #136]	; (80053e4 <nand_read_spare_data+0x168>)
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	701a      	strb	r2, [r3, #0]
        break;
 8005360:	e023      	b.n	80053aa <nand_read_spare_data+0x12e>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8005362:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <nand_read_spare_data+0x168>)
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	0a1a      	lsrs	r2, r3, #8
 800536e:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <nand_read_spare_data+0x168>)
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	0c1a      	lsrs	r2, r3, #16
 8005378:	4b1a      	ldr	r3, [pc, #104]	; (80053e4 <nand_read_spare_data+0x168>)
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
        break;
 800537e:	e014      	b.n	80053aa <nand_read_spare_data+0x12e>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8005380:	4b18      	ldr	r3, [pc, #96]	; (80053e4 <nand_read_spare_data+0x168>)
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	0a1a      	lsrs	r2, r3, #8
 800538c:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <nand_read_spare_data+0x168>)
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	0c1a      	lsrs	r2, r3, #16
 8005396:	4b13      	ldr	r3, [pc, #76]	; (80053e4 <nand_read_spare_data+0x168>)
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	0e1a      	lsrs	r2, r3, #24
 80053a0:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <nand_read_spare_data+0x168>)
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]
        break;
 80053a6:	e000      	b.n	80053aa <nand_read_spare_data+0x12e>
    default:
        break;
 80053a8:	bf00      	nop
    }

    for (i = 0; i < data_size; i++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e00a      	b.n	80053c6 <nand_read_spare_data+0x14a>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 80053b0:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	4413      	add	r3, r2
 80053ba:	780a      	ldrb	r2, [r1, #0]
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	3301      	adds	r3, #1
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d3f0      	bcc.n	80053b0 <nand_read_spare_data+0x134>

    return nand_get_status();  // 获取NAND Flash的状态
 80053ce:	f7ff fd87 	bl	8004ee0 <nand_get_status>
 80053d2:	4603      	mov	r3, r0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20000c48 	.word	0x20000c48
 80053e0:	70010000 	.word	0x70010000
 80053e4:	70020000 	.word	0x70020000

080053e8 <nand_erase_block>:

// 擦除NAND Flash的块
static uint32_t nand_erase_block(uint32_t page)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase1_cmd;  // 发送擦除命令1给NAND Flash
 80053f0:	4b2a      	ldr	r3, [pc, #168]	; (800549c <nand_erase_block+0xb4>)
 80053f2:	4a2b      	ldr	r2, [pc, #172]	; (80054a0 <nand_erase_block+0xb8>)
 80053f4:	7bd2      	ldrb	r2, [r2, #15]
 80053f6:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.row_cycles)
 80053f8:	4b29      	ldr	r3, [pc, #164]	; (80054a0 <nand_erase_block+0xb8>)
 80053fa:	799b      	ldrb	r3, [r3, #6]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d83c      	bhi.n	800547c <nand_erase_block+0x94>
 8005402:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <nand_erase_block+0x20>)
 8005404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005408:	08005419 	.word	0x08005419
 800540c:	08005423 	.word	0x08005423
 8005410:	08005437 	.word	0x08005437
 8005414:	08005455 	.word	0x08005455
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8005418:	4b22      	ldr	r3, [pc, #136]	; (80054a4 <nand_erase_block+0xbc>)
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]
        break;
 8005420:	e02d      	b.n	800547e <nand_erase_block+0x96>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8005422:	4b20      	ldr	r3, [pc, #128]	; (80054a4 <nand_erase_block+0xbc>)
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	0a1a      	lsrs	r2, r3, #8
 800542e:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <nand_erase_block+0xbc>)
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]
        break;
 8005434:	e023      	b.n	800547e <nand_erase_block+0x96>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8005436:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <nand_erase_block+0xbc>)
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	0a1a      	lsrs	r2, r3, #8
 8005442:	4b18      	ldr	r3, [pc, #96]	; (80054a4 <nand_erase_block+0xbc>)
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	0c1a      	lsrs	r2, r3, #16
 800544c:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <nand_erase_block+0xbc>)
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
        break;
 8005452:	e014      	b.n	800547e <nand_erase_block+0x96>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8005454:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <nand_erase_block+0xbc>)
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	0a1a      	lsrs	r2, r3, #8
 8005460:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <nand_erase_block+0xbc>)
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	0c1a      	lsrs	r2, r3, #16
 800546a:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <nand_erase_block+0xbc>)
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	0e1a      	lsrs	r2, r3, #24
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <nand_erase_block+0xbc>)
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]
        break;
 800547a:	e000      	b.n	800547e <nand_erase_block+0x96>
    default:
        break;
 800547c:	bf00      	nop
    }

    if (fsmc_conf.erase2_cmd != UNDEFINED_CMD)
 800547e:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <nand_erase_block+0xb8>)
 8005480:	7c1b      	ldrb	r3, [r3, #16]
 8005482:	2bff      	cmp	r3, #255	; 0xff
 8005484:	d003      	beq.n	800548e <nand_erase_block+0xa6>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase2_cmd;  // 发送擦除命令2给NAND Flash
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <nand_erase_block+0xb4>)
 8005488:	4a05      	ldr	r2, [pc, #20]	; (80054a0 <nand_erase_block+0xb8>)
 800548a:	7c12      	ldrb	r2, [r2, #16]
 800548c:	701a      	strb	r2, [r3, #0]

    return nand_get_status();  // 获取NAND Flash的状态
 800548e:	f7ff fd27 	bl	8004ee0 <nand_get_status>
 8005492:	4603      	mov	r3, r0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	70010000 	.word	0x70010000
 80054a0:	20000c48 	.word	0x20000c48
 80054a4:	70020000 	.word	0x70020000

080054a8 <nand_is_bb_supported>:

// 检查是否支持坏块
static inline bool nand_is_bb_supported()
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
    return true;
 80054ac:	2301      	movs	r3, #1
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <nand_enable_hw_ecc>:

// 启用或禁用硬件ECC
static uint32_t nand_enable_hw_ecc(bool enable)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
    uint8_t enable_ecc;

    if (fsmc_conf.set_features_cmd == UNDEFINED_CMD)
 80054c2:	4b17      	ldr	r3, [pc, #92]	; (8005520 <nand_enable_hw_ecc+0x68>)
 80054c4:	7c9b      	ldrb	r3, [r3, #18]
 80054c6:	2bff      	cmp	r3, #255	; 0xff
 80054c8:	d101      	bne.n	80054ce <nand_enable_hw_ecc+0x16>
        return FLASH_STATUS_INVALID_CMD;
 80054ca:	2304      	movs	r3, #4
 80054cc:	e021      	b.n	8005512 <nand_enable_hw_ecc+0x5a>

    enable_ecc = enable ? fsmc_conf.enable_ecc_value : fsmc_conf.disable_ecc_value;
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <nand_enable_hw_ecc+0x22>
 80054d4:	4b12      	ldr	r3, [pc, #72]	; (8005520 <nand_enable_hw_ecc+0x68>)
 80054d6:	7d1b      	ldrb	r3, [r3, #20]
 80054d8:	e001      	b.n	80054de <nand_enable_hw_ecc+0x26>
 80054da:	4b11      	ldr	r3, [pc, #68]	; (8005520 <nand_enable_hw_ecc+0x68>)
 80054dc:	7d5b      	ldrb	r3, [r3, #21]
 80054de:	73fb      	strb	r3, [r7, #15]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.set_features_cmd;  // 发送设置特性命令给NAND Flash
 80054e0:	4b10      	ldr	r3, [pc, #64]	; (8005524 <nand_enable_hw_ecc+0x6c>)
 80054e2:	4a0f      	ldr	r2, [pc, #60]	; (8005520 <nand_enable_hw_ecc+0x68>)
 80054e4:	7c92      	ldrb	r2, [r2, #18]
 80054e6:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = fsmc_conf.enable_ecc_addr;  // 发送使能ECC地址
 80054e8:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <nand_enable_hw_ecc+0x70>)
 80054ea:	4a0d      	ldr	r2, [pc, #52]	; (8005520 <nand_enable_hw_ecc+0x68>)
 80054ec:	7cd2      	ldrb	r2, [r2, #19]
 80054ee:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = enable_ecc;  // 发送使能ECC的值
 80054f0:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 80054f8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8005500:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8005508:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]

    return 0;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000c48 	.word	0x20000c48
 8005524:	70010000 	.word	0x70010000
 8005528:	70020000 	.word	0x70020000

0800552c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08c      	sub	sp, #48	; 0x30
 8005530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005532:	f107 031c 	add.w	r3, r7, #28
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	605a      	str	r2, [r3, #4]
 800553c:	609a      	str	r2, [r3, #8]
 800553e:	60da      	str	r2, [r3, #12]
 8005540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	4b69      	ldr	r3, [pc, #420]	; (80056ec <MX_GPIO_Init+0x1c0>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	4a68      	ldr	r2, [pc, #416]	; (80056ec <MX_GPIO_Init+0x1c0>)
 800554c:	f043 0310 	orr.w	r3, r3, #16
 8005550:	6313      	str	r3, [r2, #48]	; 0x30
 8005552:	4b66      	ldr	r3, [pc, #408]	; (80056ec <MX_GPIO_Init+0x1c0>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	4b62      	ldr	r3, [pc, #392]	; (80056ec <MX_GPIO_Init+0x1c0>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	4a61      	ldr	r2, [pc, #388]	; (80056ec <MX_GPIO_Init+0x1c0>)
 8005568:	f043 0304 	orr.w	r3, r3, #4
 800556c:	6313      	str	r3, [r2, #48]	; 0x30
 800556e:	4b5f      	ldr	r3, [pc, #380]	; (80056ec <MX_GPIO_Init+0x1c0>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	4b5b      	ldr	r3, [pc, #364]	; (80056ec <MX_GPIO_Init+0x1c0>)
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	4a5a      	ldr	r2, [pc, #360]	; (80056ec <MX_GPIO_Init+0x1c0>)
 8005584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005588:	6313      	str	r3, [r2, #48]	; 0x30
 800558a:	4b58      	ldr	r3, [pc, #352]	; (80056ec <MX_GPIO_Init+0x1c0>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	4b54      	ldr	r3, [pc, #336]	; (80056ec <MX_GPIO_Init+0x1c0>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	4a53      	ldr	r2, [pc, #332]	; (80056ec <MX_GPIO_Init+0x1c0>)
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	6313      	str	r3, [r2, #48]	; 0x30
 80055a6:	4b51      	ldr	r3, [pc, #324]	; (80056ec <MX_GPIO_Init+0x1c0>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055b2:	2300      	movs	r3, #0
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	4b4d      	ldr	r3, [pc, #308]	; (80056ec <MX_GPIO_Init+0x1c0>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	4a4c      	ldr	r2, [pc, #304]	; (80056ec <MX_GPIO_Init+0x1c0>)
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	6313      	str	r3, [r2, #48]	; 0x30
 80055c2:	4b4a      	ldr	r3, [pc, #296]	; (80056ec <MX_GPIO_Init+0x1c0>)
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	60bb      	str	r3, [r7, #8]
 80055cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055ce:	2300      	movs	r3, #0
 80055d0:	607b      	str	r3, [r7, #4]
 80055d2:	4b46      	ldr	r3, [pc, #280]	; (80056ec <MX_GPIO_Init+0x1c0>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	4a45      	ldr	r2, [pc, #276]	; (80056ec <MX_GPIO_Init+0x1c0>)
 80055d8:	f043 0308 	orr.w	r3, r3, #8
 80055dc:	6313      	str	r3, [r2, #48]	; 0x30
 80055de:	4b43      	ldr	r3, [pc, #268]	; (80056ec <MX_GPIO_Init+0x1c0>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	607b      	str	r3, [r7, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80055ea:	2201      	movs	r2, #1
 80055ec:	2140      	movs	r1, #64	; 0x40
 80055ee:	4840      	ldr	r0, [pc, #256]	; (80056f0 <MX_GPIO_Init+0x1c4>)
 80055f0:	f005 f918 	bl	800a824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 80055f4:	2201      	movs	r2, #1
 80055f6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80055fa:	483e      	ldr	r0, [pc, #248]	; (80056f4 <MX_GPIO_Init+0x1c8>)
 80055fc:	f005 f912 	bl	800a824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8005600:	2200      	movs	r2, #0
 8005602:	2110      	movs	r1, #16
 8005604:	483c      	ldr	r0, [pc, #240]	; (80056f8 <MX_GPIO_Init+0x1cc>)
 8005606:	f005 f90d 	bl	800a824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE11 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800560a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800560e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005610:	2303      	movs	r3, #3
 8005612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005614:	2300      	movs	r3, #0
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005618:	f107 031c 	add.w	r3, r7, #28
 800561c:	4619      	mov	r1, r3
 800561e:	4834      	ldr	r0, [pc, #208]	; (80056f0 <MX_GPIO_Init+0x1c4>)
 8005620:	f004 fe68 	bl	800a2f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8005624:	2340      	movs	r3, #64	; 0x40
 8005626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005628:	2301      	movs	r3, #1
 800562a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800562c:	2301      	movs	r3, #1
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005630:	2300      	movs	r3, #0
 8005632:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8005634:	f107 031c 	add.w	r3, r7, #28
 8005638:	4619      	mov	r1, r3
 800563a:	482d      	ldr	r0, [pc, #180]	; (80056f0 <MX_GPIO_Init+0x1c4>)
 800563c:	f004 fe5a 	bl	800a2f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8005640:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005646:	2301      	movs	r3, #1
 8005648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800564a:	2301      	movs	r3, #1
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800564e:	2300      	movs	r3, #0
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005652:	f107 031c 	add.w	r3, r7, #28
 8005656:	4619      	mov	r1, r3
 8005658:	4826      	ldr	r0, [pc, #152]	; (80056f4 <MX_GPIO_Init+0x1c8>)
 800565a:	f004 fe4b 	bl	800a2f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800565e:	f641 73f2 	movw	r3, #8178	; 0x1ff2
 8005662:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005664:	2303      	movs	r3, #3
 8005666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005668:	2300      	movs	r3, #0
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800566c:	f107 031c 	add.w	r3, r7, #28
 8005670:	4619      	mov	r1, r3
 8005672:	4820      	ldr	r0, [pc, #128]	; (80056f4 <MX_GPIO_Init+0x1c8>)
 8005674:	f004 fe3e 	bl	800a2f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8
 8005678:	f248 1307 	movw	r3, #33031	; 0x8107
 800567c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800567e:	2303      	movs	r3, #3
 8005680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005682:	2300      	movs	r3, #0
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005686:	f107 031c 	add.w	r3, r7, #28
 800568a:	4619      	mov	r1, r3
 800568c:	481a      	ldr	r0, [pc, #104]	; (80056f8 <MX_GPIO_Init+0x1cc>)
 800568e:	f004 fe31 	bl	800a2f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8005692:	2310      	movs	r3, #16
 8005694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005696:	2301      	movs	r3, #1
 8005698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800569a:	2300      	movs	r3, #0
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800569e:	2300      	movs	r3, #0
 80056a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80056a2:	f107 031c 	add.w	r3, r7, #28
 80056a6:	4619      	mov	r1, r3
 80056a8:	4813      	ldr	r0, [pc, #76]	; (80056f8 <MX_GPIO_Init+0x1cc>)
 80056aa:	f004 fe23 	bl	800a2f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB15 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80056ae:	f24c 33d4 	movw	r3, #50132	; 0xc3d4
 80056b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056b4:	2303      	movs	r3, #3
 80056b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056bc:	f107 031c 	add.w	r3, r7, #28
 80056c0:	4619      	mov	r1, r3
 80056c2:	480e      	ldr	r0, [pc, #56]	; (80056fc <MX_GPIO_Init+0x1d0>)
 80056c4:	f004 fe16 	bl	800a2f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD13
                           PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80056c8:	f242 730c 	movw	r3, #9996	; 0x270c
 80056cc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056ce:	2303      	movs	r3, #3
 80056d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056d6:	f107 031c 	add.w	r3, r7, #28
 80056da:	4619      	mov	r1, r3
 80056dc:	4808      	ldr	r0, [pc, #32]	; (8005700 <MX_GPIO_Init+0x1d4>)
 80056de:	f004 fe09 	bl	800a2f4 <HAL_GPIO_Init>

}
 80056e2:	bf00      	nop
 80056e4:	3730      	adds	r7, #48	; 0x30
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800
 80056f0:	40021000 	.word	0x40021000
 80056f4:	40020800 	.word	0x40020800
 80056f8:	40020000 	.word	0x40020000
 80056fc:	40020400 	.word	0x40020400
 8005700:	40020c00 	.word	0x40020c00

08005704 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8005708:	4b09      	ldr	r3, [pc, #36]	; (8005730 <MX_IWDG_Init+0x2c>)
 800570a:	4a0a      	ldr	r2, [pc, #40]	; (8005734 <MX_IWDG_Init+0x30>)
 800570c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800570e:	4b08      	ldr	r3, [pc, #32]	; (8005730 <MX_IWDG_Init+0x2c>)
 8005710:	2206      	movs	r2, #6
 8005712:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <MX_IWDG_Init+0x2c>)
 8005716:	f640 72ff 	movw	r2, #4095	; 0xfff
 800571a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800571c:	4804      	ldr	r0, [pc, #16]	; (8005730 <MX_IWDG_Init+0x2c>)
 800571e:	f005 f89a 	bl	800a856 <HAL_IWDG_Init>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8005728:	f000 f9b2 	bl	8005a90 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800572c:	bf00      	nop
 800572e:	bd80      	pop	{r7, pc}
 8005730:	20000c64 	.word	0x20000c64
 8005734:	40003000 	.word	0x40003000

08005738 <jtag_init>:
 */

#include <stm32f4xx.h>

void jtag_init()
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
    /* Enable JTAG in low power mode */
    HAL_DBGMCU_EnableDBGSleepMode();
 800573c:	f004 f848 	bl	80097d0 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8005740:	f004 f866 	bl	8009810 <HAL_DBGMCU_EnableDBGStandbyMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8005744:	f004 f854 	bl	80097f0 <HAL_DBGMCU_EnableDBGStopMode>
}
 8005748:	bf00      	nop
 800574a:	bd80      	pop	{r7, pc}

0800574c <led_init>:

#include "led.h"
#include "gpio.h"

void led_init()
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005752:	f107 030c 	add.w	r3, r7, #12
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	605a      	str	r2, [r3, #4]
 800575c:	609a      	str	r2, [r3, #8]
 800575e:	60da      	str	r2, [r3, #12]
 8005760:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE(); // 初始化GPIOE时钟
 8005762:	2300      	movs	r3, #0
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	4b26      	ldr	r3, [pc, #152]	; (8005800 <led_init+0xb4>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	4a25      	ldr	r2, [pc, #148]	; (8005800 <led_init+0xb4>)
 800576c:	f043 0310 	orr.w	r3, r3, #16
 8005770:	6313      	str	r3, [r2, #48]	; 0x30
 8005772:	4b23      	ldr	r3, [pc, #140]	; (8005800 <led_init+0xb4>)
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE(); // 初始化GPIOC时钟
 800577e:	2300      	movs	r3, #0
 8005780:	607b      	str	r3, [r7, #4]
 8005782:	4b1f      	ldr	r3, [pc, #124]	; (8005800 <led_init+0xb4>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <led_init+0xb4>)
 8005788:	f043 0304 	orr.w	r3, r3, #4
 800578c:	6313      	str	r3, [r2, #48]	; 0x30
 800578e:	4b1c      	ldr	r3, [pc, #112]	; (8005800 <led_init+0xb4>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	607b      	str	r3, [r7, #4]
 8005798:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800579a:	2201      	movs	r2, #1
 800579c:	2140      	movs	r1, #64	; 0x40
 800579e:	4819      	ldr	r0, [pc, #100]	; (8005804 <led_init+0xb8>)
 80057a0:	f005 f840 	bl	800a824 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 80057a4:	2201      	movs	r2, #1
 80057a6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80057aa:	4817      	ldr	r0, [pc, #92]	; (8005808 <led_init+0xbc>)
 80057ac:	f005 f83a 	bl	800a824 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = LED4_Pin;
 80057b0:	2340      	movs	r3, #64	; 0x40
 80057b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057b4:	2301      	movs	r3, #1
 80057b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057b8:	2301      	movs	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057bc:	2300      	movs	r3, #0
 80057be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80057c0:	f107 030c 	add.w	r3, r7, #12
 80057c4:	4619      	mov	r1, r3
 80057c6:	480f      	ldr	r0, [pc, #60]	; (8005804 <led_init+0xb8>)
 80057c8:	f004 fd94 	bl	800a2f4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PCPin PCPin PCPin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80057cc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80057d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057d2:	2301      	movs	r3, #1
 80057d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057d6:	2301      	movs	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057da:	2300      	movs	r3, #0
 80057dc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057de:	f107 030c 	add.w	r3, r7, #12
 80057e2:	4619      	mov	r1, r3
 80057e4:	4808      	ldr	r0, [pc, #32]	; (8005808 <led_init+0xbc>)
 80057e6:	f004 fd85 	bl	800a2f4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, LED1_Pin | LED2_Pin, GPIO_PIN_RESET); // 将引脚0和引脚1的状态置为低电平
 80057ea:	2200      	movs	r2, #0
 80057ec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80057f0:	4805      	ldr	r0, [pc, #20]	; (8005808 <led_init+0xbc>)
 80057f2:	f005 f817 	bl	800a824 <HAL_GPIO_WritePin>
}
 80057f6:	bf00      	nop
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40023800 	.word	0x40023800
 8005804:	40021000 	.word	0x40021000
 8005808:	40020800 	.word	0x40020800

0800580c <led_set>:

static void led_set(GPIO_TypeDef *gpiox, uint16_t pin, bool on)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	807b      	strh	r3, [r7, #2]
 8005818:	4613      	mov	r3, r2
 800581a:	707b      	strb	r3, [r7, #1]
    if (on)
 800581c:	787b      	ldrb	r3, [r7, #1]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d006      	beq.n	8005830 <led_set+0x24>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_SET); // 设置引脚为高电平
 8005822:	887b      	ldrh	r3, [r7, #2]
 8005824:	2201      	movs	r2, #1
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f004 fffb 	bl	800a824 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
}
 800582e:	e005      	b.n	800583c <led_set+0x30>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
 8005830:	887b      	ldrh	r3, [r7, #2]
 8005832:	2200      	movs	r2, #0
 8005834:	4619      	mov	r1, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f004 fff4 	bl	800a824 <HAL_GPIO_WritePin>
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <led_wr_set>:

void led_wr_set(bool on)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED1_Pin, on); // 设置引脚LED1的状态
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	461a      	mov	r2, r3
 8005852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005856:	4803      	ldr	r0, [pc, #12]	; (8005864 <led_wr_set+0x20>)
 8005858:	f7ff ffd8 	bl	800580c <led_set>
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40020800 	.word	0x40020800

08005868 <led_rd_set>:

void led_rd_set(bool on)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED2_Pin, on); // 设置引脚LED2的状态
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	461a      	mov	r2, r3
 8005876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800587a:	4803      	ldr	r0, [pc, #12]	; (8005888 <led_rd_set+0x20>)
 800587c:	f7ff ffc6 	bl	800580c <led_set>
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40020800 	.word	0x40020800

0800588c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	b29a      	uxth	r2, r3
 800589c:	f04f 33ff 	mov.w	r3, #4294967295
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	4804      	ldr	r0, [pc, #16]	; (80058b4 <_write+0x28>)
 80058a4:	f008 fa89 	bl	800ddba <HAL_UART_Transmit>
    return len;
 80058a8:	687b      	ldr	r3, [r7, #4]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	200051bc 	.word	0x200051bc

080058b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80058bc:	b662      	cpsie	i
}
 80058be:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058c0:	f003 fef0 	bl	80096a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058c4:	f000 f85c 	bl	8005980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058c8:	f7ff fe30 	bl	800552c <MX_GPIO_Init>
  MX_FSMC_Init();
 80058cc:	f7ff f86c 	bl	80049a8 <MX_FSMC_Init>
  MX_RTC_Init();
 80058d0:	f002 fbc6 	bl	8008060 <MX_RTC_Init>
  MX_SPI1_Init();
 80058d4:	f002 fc48 	bl	8008168 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80058d8:	f003 fe40 	bl	800955c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80058dc:	f00c ff10 	bl	8012700 <MX_USB_DEVICE_Init>
  MX_IWDG_Init();
 80058e0:	f7ff ff10 	bl	8005704 <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80058e4:	f000 f8b8 	bl	8005a58 <MX_NVIC_Init>
//  device_id = W25QXX_ReadID();
//  printf("W25Q256jv Device ID is 0x%04x\r\n", device_id);
//  JEDEC_ID = W25QXX_ReadJDID();
//  printf("----W25X_JEDEC_DEVICE_ID = %08x\r\n", JEDEC_ID);

  printf("\r\nNAND programmer ver: %d.%d.%d\r\n", SW_VERSION_MAJOR,
 80058e8:	2300      	movs	r3, #0
 80058ea:	2205      	movs	r2, #5
 80058ec:	2103      	movs	r1, #3
 80058ee:	481c      	ldr	r0, [pc, #112]	; (8005960 <main+0xa8>)
 80058f0:	f00d ff1a 	bl	8013728 <iprintf>
      SW_VERSION_MINOR, SW_VERSION_BUILD);

  if (!is_external_clock_avail())
 80058f4:	f7fe ffcc 	bl	8004890 <is_external_clock_avail>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f083 0301 	eor.w	r3, r3, #1
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <main+0x52>
      printf("External clock not detected. Fallback to internal clock.\r\n");
 8005904:	4817      	ldr	r0, [pc, #92]	; (8005964 <main+0xac>)
 8005906:	f00d ff75 	bl	80137f4 <puts>

  printf("JTAG init...");
 800590a:	4817      	ldr	r0, [pc, #92]	; (8005968 <main+0xb0>)
 800590c:	f00d ff0c 	bl	8013728 <iprintf>
  jtag_init();
 8005910:	f7ff ff12 	bl	8005738 <jtag_init>
  printf("done.\r\n");
 8005914:	4815      	ldr	r0, [pc, #84]	; (800596c <main+0xb4>)
 8005916:	f00d ff6d 	bl	80137f4 <puts>

  printf("LED init...");
 800591a:	4815      	ldr	r0, [pc, #84]	; (8005970 <main+0xb8>)
 800591c:	f00d ff04 	bl	8013728 <iprintf>
  led_init();
 8005920:	f7ff ff14 	bl	800574c <led_init>
  printf("done.\r\n");
 8005924:	4811      	ldr	r0, [pc, #68]	; (800596c <main+0xb4>)
 8005926:	f00d ff65 	bl	80137f4 <puts>

  printf("USB init...");
 800592a:	4812      	ldr	r0, [pc, #72]	; (8005974 <main+0xbc>)
 800592c:	f00d fefc 	bl	8013728 <iprintf>
  MX_USB_DEVICE_Init();
 8005930:	f00c fee6 	bl	8012700 <MX_USB_DEVICE_Init>
  printf("done.\r\n");
 8005934:	480d      	ldr	r0, [pc, #52]	; (800596c <main+0xb4>)
 8005936:	f00d ff5d 	bl	80137f4 <puts>

  printf("CDC init...");
 800593a:	480f      	ldr	r0, [pc, #60]	; (8005978 <main+0xc0>)
 800593c:	f00d fef4 	bl	8013728 <iprintf>
  cdc_init();
 8005940:	f7fe fe74 	bl	800462c <cdc_init>
  printf("done.\r\n");
 8005944:	4809      	ldr	r0, [pc, #36]	; (800596c <main+0xb4>)
 8005946:	f00d ff55 	bl	80137f4 <puts>

  printf("Programmer init...");
 800594a:	480c      	ldr	r0, [pc, #48]	; (800597c <main+0xc4>)
 800594c:	f00d feec 	bl	8013728 <iprintf>
  np_init();
 8005950:	f002 fb5a 	bl	8008008 <np_init>
  printf("done.\r\n");
 8005954:	4805      	ldr	r0, [pc, #20]	; (800596c <main+0xb4>)
 8005956:	f00d ff4d 	bl	80137f4 <puts>

  while (1)
      np_handler();
 800595a:	f002 fb65 	bl	8008028 <np_handler>
 800595e:	e7fc      	b.n	800595a <main+0xa2>
 8005960:	08014768 	.word	0x08014768
 8005964:	0801478c 	.word	0x0801478c
 8005968:	080147c8 	.word	0x080147c8
 800596c:	080147d8 	.word	0x080147d8
 8005970:	080147e0 	.word	0x080147e0
 8005974:	080147ec 	.word	0x080147ec
 8005978:	080147f8 	.word	0x080147f8
 800597c:	08014804 	.word	0x08014804

08005980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b094      	sub	sp, #80	; 0x50
 8005984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005986:	f107 0320 	add.w	r3, r7, #32
 800598a:	2230      	movs	r2, #48	; 0x30
 800598c:	2100      	movs	r1, #0
 800598e:	4618      	mov	r0, r3
 8005990:	f00e f810 	bl	80139b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005994:	f107 030c 	add.w	r3, r7, #12
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	60da      	str	r2, [r3, #12]
 80059a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80059a4:	2300      	movs	r3, #0
 80059a6:	60bb      	str	r3, [r7, #8]
 80059a8:	4b29      	ldr	r3, [pc, #164]	; (8005a50 <SystemClock_Config+0xd0>)
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	4a28      	ldr	r2, [pc, #160]	; (8005a50 <SystemClock_Config+0xd0>)
 80059ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b2:	6413      	str	r3, [r2, #64]	; 0x40
 80059b4:	4b26      	ldr	r3, [pc, #152]	; (8005a50 <SystemClock_Config+0xd0>)
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80059c0:	2300      	movs	r3, #0
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	4b23      	ldr	r3, [pc, #140]	; (8005a54 <SystemClock_Config+0xd4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <SystemClock_Config+0xd4>)
 80059ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <SystemClock_Config+0xd4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059d8:	607b      	str	r3, [r7, #4]
 80059da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80059dc:	2309      	movs	r3, #9
 80059de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80059e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80059e6:	2301      	movs	r3, #1
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80059ea:	2302      	movs	r3, #2
 80059ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80059ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80059f4:	2305      	movs	r3, #5
 80059f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80059f8:	23a8      	movs	r3, #168	; 0xa8
 80059fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80059fc:	2302      	movs	r3, #2
 80059fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005a00:	2307      	movs	r3, #7
 8005a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a04:	f107 0320 	add.w	r3, r7, #32
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f006 fb29 	bl	800c060 <HAL_RCC_OscConfig>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005a14:	f000 f83c 	bl	8005a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a18:	230f      	movs	r3, #15
 8005a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005a24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005a30:	f107 030c 	add.w	r3, r7, #12
 8005a34:	2105      	movs	r1, #5
 8005a36:	4618      	mov	r0, r3
 8005a38:	f006 fd8a 	bl	800c550 <HAL_RCC_ClockConfig>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8005a42:	f000 f825 	bl	8005a90 <Error_Handler>
  }
}
 8005a46:	bf00      	nop
 8005a48:	3750      	adds	r7, #80	; 0x50
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40023800 	.word	0x40023800
 8005a54:	40007000 	.word	0x40007000

08005a58 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* OTG_HS_EP1_OUT_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2100      	movs	r1, #0
 8005a60:	204a      	movs	r0, #74	; 0x4a
 8005a62:	f003 ffe4 	bl	8009a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8005a66:	204a      	movs	r0, #74	; 0x4a
 8005a68:	f003 fffd 	bl	8009a66 <HAL_NVIC_EnableIRQ>
  /* OTG_HS_EP1_IN_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2100      	movs	r1, #0
 8005a70:	204b      	movs	r0, #75	; 0x4b
 8005a72:	f003 ffdc 	bl	8009a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8005a76:	204b      	movs	r0, #75	; 0x4b
 8005a78:	f003 fff5 	bl	8009a66 <HAL_NVIC_EnableIRQ>
  /* OTG_HS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2100      	movs	r1, #0
 8005a80:	204d      	movs	r0, #77	; 0x4d
 8005a82:	f003 ffd4 	bl	8009a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8005a86:	204d      	movs	r0, #77	; 0x4d
 8005a88:	f003 ffed 	bl	8009a66 <HAL_NVIC_EnableIRQ>
}
 8005a8c:	bf00      	nop
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005a94:	b672      	cpsid	i
}
 8005a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a98:	e7fe      	b.n	8005a98 <Error_Handler+0x8>
	...

08005a9c <nand_bad_block_table_init>:

static uint32_t nand_bad_block_table_count; // NAND 坏块表中的块计数
static uint32_t nand_bad_block_table[NAND_BAD_BLOCK_TABLE_SIZE]; // NAND 坏块表

void nand_bad_block_table_init()
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
    memset(nand_bad_block_table, 0, sizeof(nand_bad_block_table)); // 初始化 NAND 坏块表为 0
 8005aa0:	2250      	movs	r2, #80	; 0x50
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4803      	ldr	r0, [pc, #12]	; (8005ab4 <nand_bad_block_table_init+0x18>)
 8005aa6:	f00d ff85 	bl	80139b4 <memset>
    nand_bad_block_table_count = 0; // 初始化 NAND 坏块计数为 0
 8005aaa:	4b03      	ldr	r3, [pc, #12]	; (8005ab8 <nand_bad_block_table_init+0x1c>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000c74 	.word	0x20000c74
 8005ab8:	20000c70 	.word	0x20000c70

08005abc <nand_bad_block_table_add>:

int nand_bad_block_table_add(uint32_t page)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
    if (nand_bad_block_table_count == NAND_BAD_BLOCK_TABLE_SIZE)
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <nand_bad_block_table_add+0x38>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b14      	cmp	r3, #20
 8005aca:	d102      	bne.n	8005ad2 <nand_bad_block_table_add+0x16>
        return -1; // 坏块表已满，无法添加
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	e009      	b.n	8005ae6 <nand_bad_block_table_add+0x2a>

    nand_bad_block_table[nand_bad_block_table_count++] = page; // 在坏块表末尾添加新的块
 8005ad2:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <nand_bad_block_table_add+0x38>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	4906      	ldr	r1, [pc, #24]	; (8005af4 <nand_bad_block_table_add+0x38>)
 8005ada:	600a      	str	r2, [r1, #0]
 8005adc:	4906      	ldr	r1, [pc, #24]	; (8005af8 <nand_bad_block_table_add+0x3c>)
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0; // 添加成功
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000c70 	.word	0x20000c70
 8005af8:	20000c74 	.word	0x20000c74

08005afc <nand_bad_block_table_lookup>:

bool nand_bad_block_table_lookup(uint32_t page)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
    uint32_t i;

    for (i = 0; i < nand_bad_block_table_count; i++)
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	e00b      	b.n	8005b22 <nand_bad_block_table_lookup+0x26>
    {
        if (nand_bad_block_table[i] == page)
 8005b0a:	4a0c      	ldr	r2, [pc, #48]	; (8005b3c <nand_bad_block_table_lookup+0x40>)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d101      	bne.n	8005b1c <nand_bad_block_table_lookup+0x20>
            return true; // 在坏块表中找到了对应的块
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e008      	b.n	8005b2e <nand_bad_block_table_lookup+0x32>
    for (i = 0; i < nand_bad_block_table_count; i++)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <nand_bad_block_table_lookup+0x44>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d3ee      	bcc.n	8005b0a <nand_bad_block_table_lookup+0xe>
    }

    return false; // 在坏块表中未找到对应的块
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	20000c74 	.word	0x20000c74
 8005b40:	20000c70 	.word	0x20000c70

08005b44 <nand_bad_block_table_iter_alloc>:

void *nand_bad_block_table_iter_alloc(uint32_t *page)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
    if (!nand_bad_block_table_count)
 8005b4c:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <nand_bad_block_table_iter_alloc+0x2c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <nand_bad_block_table_iter_alloc+0x14>
        return NULL; // 坏块表为空，无法进行迭代
 8005b54:	2300      	movs	r3, #0
 8005b56:	e004      	b.n	8005b62 <nand_bad_block_table_iter_alloc+0x1e>

    *page = nand_bad_block_table[0]; // 将坏块表的第一个块赋值给 page
 8005b58:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <nand_bad_block_table_iter_alloc+0x30>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]

    return &nand_bad_block_table[0]; // 返回坏块表的第一个块的地址作为迭代器
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <nand_bad_block_table_iter_alloc+0x30>)
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	20000c70 	.word	0x20000c70
 8005b74:	20000c74 	.word	0x20000c74

08005b78 <nand_bad_block_table_iter_next>:

void *nand_bad_block_table_iter_next(void *iter, uint32_t *page)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
    uint32_t *bbt_iter = iter;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60fb      	str	r3, [r7, #12]

    if (!bbt_iter)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <nand_bad_block_table_iter_next+0x18>
       return NULL; // 无效的迭代器，无法进行下一次迭代
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e012      	b.n	8005bb6 <nand_bad_block_table_iter_next+0x3e>

    bbt_iter++; // 迭代器指向下一个块
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3304      	adds	r3, #4
 8005b94:	60fb      	str	r3, [r7, #12]

    if (bbt_iter - &nand_bad_block_table[0] >= nand_bad_block_table_count)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a0a      	ldr	r2, [pc, #40]	; (8005bc4 <nand_bad_block_table_iter_next+0x4c>)
 8005b9a:	1a9b      	subs	r3, r3, r2
 8005b9c:	109b      	asrs	r3, r3, #2
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <nand_bad_block_table_iter_next+0x50>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d301      	bcc.n	8005bac <nand_bad_block_table_iter_next+0x34>
        return NULL; // 已达到坏块表的末尾，无法进行下一次迭代
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e004      	b.n	8005bb6 <nand_bad_block_table_iter_next+0x3e>

    *page = *bbt_iter; // 将当前迭代的块赋值给 page
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	601a      	str	r2, [r3, #0]

    return bbt_iter; // 返回下一次迭代的迭代器
 8005bb4:	68fb      	ldr	r3, [r7, #12]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000c74 	.word	0x20000c74
 8005bc8:	20000c70 	.word	0x20000c70

08005bcc <np_send_ok_status>:
static flash_hal_t *hal[] = { &hal_fsmc, &hal_spi_nor, &hal_spi_nand };  // HAL 驱动数组

uint8_t np_packet_send_buf[NP_PACKET_BUF_SIZE];    // 发送数据包缓冲区

static int np_send_ok_status()
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_OK };       // 正常状态响应
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	703b      	strb	r3, [r7, #0]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	707b      	strb	r3, [r7, #1]
    size_t len = sizeof(status);
 8005bda:	2302      	movs	r3, #2
 8005bdc:	607b      	str	r3, [r7, #4]

    if (np_comm_cb)
 8005bde:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <np_send_ok_status+0x34>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d006      	beq.n	8005bf4 <np_send_ok_status+0x28>
        np_comm_cb->send((uint8_t *)&status, len);             // 发送响应数据
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <np_send_ok_status+0x34>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	463a      	mov	r2, r7
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4798      	blx	r3

    return 0;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000cc4 	.word	0x20000cc4

08005c04 <np_send_error>:

static int np_send_error(uint8_t err_code)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	71fb      	strb	r3, [r7, #7]
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_ERROR };    // 错误状态响应
 8005c0e:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <np_send_error+0x40>)
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	823b      	strh	r3, [r7, #16]
    np_resp_err_t err_status = { status, err_code };           // 错误状态信息
 8005c14:	8a3b      	ldrh	r3, [r7, #16]
 8005c16:	81bb      	strh	r3, [r7, #12]
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	73bb      	strb	r3, [r7, #14]
    size_t len = sizeof(err_status);
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	617b      	str	r3, [r7, #20]

    if (np_comm_cb)
 8005c20:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <np_send_error+0x44>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <np_send_error+0x34>
        np_comm_cb->send((uint8_t *)&err_status, len);         // 发送错误响应数据
 8005c28:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <np_send_error+0x44>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f107 020c 	add.w	r2, r7, #12
 8005c32:	6979      	ldr	r1, [r7, #20]
 8005c34:	4610      	mov	r0, r2
 8005c36:	4798      	blx	r3

    return 0;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	08014818 	.word	0x08014818
 8005c48:	20000cc4 	.word	0x20000cc4

08005c4c <np_send_bad_block_info>:

// 发送坏块信息函数，参数为块地址、大小和是否跳过标志
static int np_send_bad_block_info(uint64_t addr, uint32_t size, bool is_skipped)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	; 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	70fb      	strb	r3, [r7, #3]
    // 根据是否跳过标志确定info的值
    uint8_t info = is_skipped ? NP_STATUS_BB_SKIP : NP_STATUS_BB;
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <np_send_bad_block_info+0x18>
 8005c60:	2304      	movs	r3, #4
 8005c62:	e000      	b.n	8005c66 <np_send_bad_block_info+0x1a>
 8005c64:	2302      	movs	r3, #2
 8005c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, info };
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8005c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    // 构造坏块信息
    np_resp_bad_block_t bad_block = { resp_header, addr, size };
 8005c78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c7a:	82bb      	strh	r3, [r7, #20]
 8005c7c:	f107 0318 	add.w	r3, r7, #24
 8005c80:	3b02      	subs	r3, #2
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	605a      	str	r2, [r3, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8c7 301e 	str.w	r3, [r7, #30]

    // 调用回调函数发送坏块信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&bad_block, sizeof(bad_block)))
 8005c90:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <np_send_bad_block_info+0x6c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f107 0214 	add.w	r2, r7, #20
 8005c9a:	210e      	movs	r1, #14
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4798      	blx	r3
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <np_send_bad_block_info+0x60>
        return -1;
 8005ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8005caa:	e000      	b.n	8005cae <np_send_bad_block_info+0x62>

    return 0;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3728      	adds	r7, #40	; 0x28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000cc4 	.word	0x20000cc4

08005cbc <np_send_progress>:

// 发送进度信息函数，参数为进度值
static int np_send_progress(uint64_t progress)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	e9c7 0100 	strd	r0, r1, [r7]
    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_PROGRESS };
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <np_send_progress+0x48>)
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	82bb      	strh	r3, [r7, #20]

    // 构造进度信息
    np_resp_progress_t resp_progress = { resp_header, progress };
 8005ccc:	8abb      	ldrh	r3, [r7, #20]
 8005cce:	813b      	strh	r3, [r7, #8]
 8005cd0:	f107 0308 	add.w	r3, r7, #8
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	605a      	str	r2, [r3, #4]

    // 调用回调函数发送进度信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&resp_progress, sizeof(resp_progress)))
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <np_send_progress+0x4c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f107 0208 	add.w	r2, r7, #8
 8005ce8:	210a      	movs	r1, #10
 8005cea:	4610      	mov	r0, r2
 8005cec:	4798      	blx	r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <np_send_progress+0x3e>
        return -1;
 8005cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf8:	e000      	b.n	8005cfc <np_send_progress+0x40>

    return 0;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	0801481c 	.word	0x0801481c
 8005d08:	20000cc4 	.word	0x20000cc4

08005d0c <_np_cmd_nand_read_id>:

// 内部函数，用于执行NAND读取ID的命令
static int _np_cmd_nand_read_id(np_prog_t *prog)
{
 8005d0c:	b5b0      	push	{r4, r5, r7, lr}
 8005d0e:	b08a      	sub	sp, #40	; 0x28
 8005d10:	af04      	add	r7, sp, #16
 8005d12:	6078      	str	r0, [r7, #4]
    np_resp_id_t resp;
    size_t resp_len = sizeof(resp);
 8005d14:	2308      	movs	r3, #8
 8005d16:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read ID command\r\n");
 8005d18:	481d      	ldr	r0, [pc, #116]	; (8005d90 <_np_cmd_nand_read_id+0x84>)
 8005d1a:	f00d fd6b 	bl	80137f4 <puts>

    // 设置响应头部的code和info字段
    resp.header.code = NP_RESP_DATA;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	3b02      	subs	r3, #2
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	737b      	strb	r3, [r7, #13]

    // 调用硬件抽象层的读取ID函数
    hal[prog->hal]->read_id(&resp.nand_id);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d32:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005d36:	461a      	mov	r2, r3
 8005d38:	4b16      	ldr	r3, [pc, #88]	; (8005d94 <_np_cmd_nand_read_id+0x88>)
 8005d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f107 020c 	add.w	r2, r7, #12
 8005d44:	3202      	adds	r2, #2
 8005d46:	4610      	mov	r0, r2
 8005d48:	4798      	blx	r3

    // 如果设置了通信回调函数，则发送响应数据
    if (np_comm_cb)
 8005d4a:	4b13      	ldr	r3, [pc, #76]	; (8005d98 <_np_cmd_nand_read_id+0x8c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <_np_cmd_nand_read_id+0x56>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8005d52:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <_np_cmd_nand_read_id+0x8c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f107 020c 	add.w	r2, r7, #12
 8005d5c:	6979      	ldr	r1, [r7, #20]
 8005d5e:	4610      	mov	r0, r2
 8005d60:	4798      	blx	r3

    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8005d62:	7bbb      	ldrb	r3, [r7, #14]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8005d64:	4618      	mov	r0, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8005d68:	461c      	mov	r4, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8005d6a:	7c3b      	ldrb	r3, [r7, #16]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8005d6c:	461d      	mov	r5, r3
        resp.nand_id.fourth_id, resp.nand_id.fifth_id, resp.nand_id.sixth_id);
 8005d6e:	7c7b      	ldrb	r3, [r7, #17]
 8005d70:	7cba      	ldrb	r2, [r7, #18]
 8005d72:	7cf9      	ldrb	r1, [r7, #19]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8005d74:	9102      	str	r1, [sp, #8]
 8005d76:	9201      	str	r2, [sp, #4]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	462b      	mov	r3, r5
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	4601      	mov	r1, r0
 8005d80:	4806      	ldr	r0, [pc, #24]	; (8005d9c <_np_cmd_nand_read_id+0x90>)
 8005d82:	f00d fcd1 	bl	8013728 <iprintf>

    return 0;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d90:	08014820 	.word	0x08014820
 8005d94:	20000040 	.word	0x20000040
 8005d98:	20000cc4 	.word	0x20000cc4
 8005d9c:	08014834 	.word	0x08014834

08005da0 <np_cmd_nand_read_id>:

// 执行NAND读取ID的命令
static int np_cmd_nand_read_id(np_prog_t *prog)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 8005da8:	2001      	movs	r0, #1
 8005daa:	f7ff fd5d 	bl	8005868 <led_rd_set>
    ret = _np_cmd_nand_read_id(prog);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff ffac 	bl	8005d0c <_np_cmd_nand_read_id>
 8005db4:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 8005db6:	2000      	movs	r0, #0
 8005db8:	f7ff fd56 	bl	8005868 <led_rd_set>

    return ret;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <np_read_bad_block_info_from_page>:

// 从页中读取坏块信息，参数为编程器、块号、页号和坏块标志指针
static int np_read_bad_block_info_from_page(np_prog_t *prog, uint32_t block,
    uint32_t page, bool *is_bad)
{
 8005dc8:	b5b0      	push	{r4, r5, r7, lr}
 8005dca:	b08a      	sub	sp, #40	; 0x28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
    uint32_t status;
    uint64_t addr = block * prog->chip_info.block_size;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ddc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	fb02 f303 	mul.w	r3, r2, r3
 8005de6:	2200      	movs	r2, #0
 8005de8:	461c      	mov	r4, r3
 8005dea:	4615      	mov	r5, r2
 8005dec:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005df6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off];
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005e00:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8005e04:	4413      	add	r3, r2
 8005e06:	3338      	adds	r3, #56	; 0x38
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	617b      	str	r3, [r7, #20]

    // 从页的备用区域读取坏块标志
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e16:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	4b35      	ldr	r3, [pc, #212]	; (8005ef4 <np_read_bad_block_info_from_page+0x12c>)
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	695c      	ldr	r4, [r3, #20]
        prog->chip_info.bb_mark_off, 1);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e2a:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2301      	movs	r3, #1
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	6978      	ldr	r0, [r7, #20]
 8005e36:	47a0      	blx	r4
 8005e38:	6278      	str	r0, [r7, #36]	; 0x24

    // 如果读取命令无效，则尝试读取整个页的数据
    if (status == FLASH_STATUS_INVALID_CMD)
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d11a      	bne.n	8005e76 <np_read_bad_block_info_from_page+0xae>
    {
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e46:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4b29      	ldr	r3, [pc, #164]	; (8005ef4 <np_read_bad_block_info_from_page+0x12c>)
 8005e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	f102 003c 	add.w	r0, r2, #60	; 0x3c
            prog->chip_info.page_size + prog->chip_info.spare_size);
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005e60:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005e6a:	f8d2 2238 	ldr.w	r2, [r2, #568]	; 0x238
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8005e6e:	440a      	add	r2, r1
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4798      	blx	r3
 8005e74:	6278      	str	r0, [r7, #36]	; 0x24
    }

    switch (status)
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d010      	beq.n	8005e9e <np_read_bad_block_info_from_page+0xd6>
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d815      	bhi.n	8005eae <np_read_bad_block_info_from_page+0xe6>
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d018      	beq.n	8005eba <np_read_bad_block_info_from_page+0xf2>
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d10f      	bne.n	8005eae <np_read_bad_block_info_from_page+0xe6>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        ERROR_PRINT("NAND read bad block info error at 0x%" PRIx64 "\r\n",
 8005e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e92:	4819      	ldr	r0, [pc, #100]	; (8005ef8 <np_read_bad_block_info_from_page+0x130>)
 8005e94:	f00d fc48 	bl	8013728 <iprintf>
            addr);
        return NP_ERR_NAND_RD;
 8005e98:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8005e9c:	e025      	b.n	8005eea <np_read_bad_block_info_from_page+0x122>
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND read timeout at 0x%" PRIx64 "\r\n", addr);
 8005e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ea2:	4816      	ldr	r0, [pc, #88]	; (8005efc <np_read_bad_block_info_from_page+0x134>)
 8005ea4:	f00d fc40 	bl	8013728 <iprintf>
        return NP_ERR_NAND_RD;
 8005ea8:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8005eac:	e01d      	b.n	8005eea <np_read_bad_block_info_from_page+0x122>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8005eae:	4814      	ldr	r0, [pc, #80]	; (8005f00 <np_read_bad_block_info_from_page+0x138>)
 8005eb0:	f00d fca0 	bl	80137f4 <puts>
        return NP_ERR_NAND_RD;
 8005eb4:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8005eb8:	e017      	b.n	8005eea <np_read_bad_block_info_from_page+0x122>
        break;
 8005eba:	bf00      	nop
    }

    // 判断坏块标志是否为NP_NAND_GOOD_BLOCK_MARK
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ec2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005ecc:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8005ed0:	4413      	add	r3, r2
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8005eda:	2bff      	cmp	r3, #255	; 0xff
 8005edc:	bf14      	ite	ne
 8005ede:	2301      	movne	r3, #1
 8005ee0:	2300      	moveq	r3, #0
 8005ee2:	b2da      	uxtb	r2, r3
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	701a      	strb	r2, [r3, #0]

    return 0;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3728      	adds	r7, #40	; 0x28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000040 	.word	0x20000040
 8005ef8:	08014860 	.word	0x08014860
 8005efc:	08014894 	.word	0x08014894
 8005f00:	080148bc 	.word	0x080148bc

08005f04 <_np_cmd_read_bad_blocks>:

// 内部函数，执行读取坏块命令，并可选择发送进度信息
static int _np_cmd_read_bad_blocks(np_prog_t *prog, bool send_progress)
{
 8005f04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f08:	b088      	sub	sp, #32
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	70fb      	strb	r3, [r7, #3]
    int ret;
    bool is_bad;
    uint32_t block, block_num, page_num, page;

    // 检查是否支持坏块检测
    if (!hal[prog->hal]->is_bb_supported())
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005f18:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4b40      	ldr	r3, [pc, #256]	; (8006020 <_np_cmd_read_bad_blocks+0x11c>)
 8005f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	4798      	blx	r3
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f083 0301 	eor.w	r3, r3, #1
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d16a      	bne.n	800600a <_np_cmd_read_bad_blocks+0x106>
        goto Exit;

    block_num = prog->chip_info.total_size / prog->chip_info.block_size;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8005f3a:	3330      	adds	r3, #48	; 0x30
 8005f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005f46:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	4698      	mov	r8, r3
 8005f4e:	4691      	mov	r9, r2
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	f7fe f98c 	bl	8004270 <__aeabi_uldivmod>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	61bb      	str	r3, [r7, #24]
    page_num = prog->chip_info.block_size / prog->chip_info.page_size;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005f66:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005f70:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f78:	617b      	str	r3, [r7, #20]
    /* Bad block - not 0xFF value in the first or second page in the block at
     * some offset in the page spare area
     */

    // 遍历所有块
    for (block = 0; block < block_num; block++)
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	e03f      	b.n	8006000 <_np_cmd_read_bad_blocks+0xfc>
    {
        page = block * page_num;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	613b      	str	r3, [r7, #16]

        // 如果需要发送进度信息，则调用np_send_progress函数发送
        if (send_progress)
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d007      	beq.n	8005fa0 <_np_cmd_read_bad_blocks+0x9c>
            np_send_progress(page);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2200      	movs	r2, #0
 8005f94:	461c      	mov	r4, r3
 8005f96:	4615      	mov	r5, r2
 8005f98:	4620      	mov	r0, r4
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	f7ff fe8e 	bl	8005cbc <np_send_progress>

        // 从第一个页和第二个页读取坏块信息
        if ((ret = np_read_bad_block_info_from_page(prog, block, page,
 8005fa0:	f107 030b 	add.w	r3, r7, #11
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	69f9      	ldr	r1, [r7, #28]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff ff0d 	bl	8005dc8 <np_read_bad_block_info_from_page>
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <_np_cmd_read_bad_blocks+0xb6>
            &is_bad)))
        {
            return ret;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	e02c      	b.n	8006014 <_np_cmd_read_bad_blocks+0x110>
        }

        if (!is_bad && (ret = np_read_bad_block_info_from_page(prog, block,
 8005fba:	7afb      	ldrb	r3, [r7, #11]
 8005fbc:	f083 0301 	eor.w	r3, r3, #1
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00d      	beq.n	8005fe2 <_np_cmd_read_bad_blocks+0xde>
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	f107 030b 	add.w	r3, r7, #11
 8005fce:	69f9      	ldr	r1, [r7, #28]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff fef9 	bl	8005dc8 <np_read_bad_block_info_from_page>
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <_np_cmd_read_bad_blocks+0xde>
            page + 1, &is_bad)))
        {
            return ret;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	e018      	b.n	8006014 <_np_cmd_read_bad_blocks+0x110>
        }

        // 如果是坏块，则将该页添加到坏块表中
        if (is_bad && nand_bad_block_table_add(page))
 8005fe2:	7afb      	ldrb	r3, [r7, #11]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <_np_cmd_read_bad_blocks+0xf6>
 8005fe8:	6938      	ldr	r0, [r7, #16]
 8005fea:	f7ff fd67 	bl	8005abc <nand_bad_block_table_add>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <_np_cmd_read_bad_blocks+0xf6>
            return NP_ERR_BBT_OVERFLOW;
 8005ff4:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8005ff8:	e00c      	b.n	8006014 <_np_cmd_read_bad_blocks+0x110>
    for (block = 0; block < block_num; block++)
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	61fb      	str	r3, [r7, #28]
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	429a      	cmp	r2, r3
 8006006:	d3bb      	bcc.n	8005f80 <_np_cmd_read_bad_blocks+0x7c>
    }

Exit:
 8006008:	e000      	b.n	800600c <_np_cmd_read_bad_blocks+0x108>
        goto Exit;
 800600a:	bf00      	nop
    prog->bb_is_read = 1;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	635a      	str	r2, [r3, #52]	; 0x34

    return 0;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800601e:	bf00      	nop
 8006020:	20000040 	.word	0x20000040

08006024 <np_nand_erase>:

// NAND擦除函数
static int np_nand_erase(np_prog_t *prog, uint32_t page)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
    uint32_t status;
    uint64_t addr = page * prog->chip_info.page_size;
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8006034:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 8006038:	6838      	ldr	r0, [r7, #0]
 800603a:	fb00 f101 	mul.w	r1, r0, r1
 800603e:	2000      	movs	r0, #0
 8006040:	460a      	mov	r2, r1
 8006042:	4603      	mov	r3, r0
 8006044:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    DEBUG_PRINT("NAND擦除地址：0x%" PRIx64 "\r\n", addr);
 8006048:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800604c:	481f      	ldr	r0, [pc, #124]	; (80060cc <np_nand_erase+0xa8>)
 800604e:	f00d fb6b 	bl	8013728 <iprintf>

    // 调用硬件抽象层的块擦除函数
    status = hal[prog->hal]->erase_block(page);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006058:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 800605c:	461a      	mov	r2, r3
 800605e:	4b1c      	ldr	r3, [pc, #112]	; (80060d0 <np_nand_erase+0xac>)
 8006060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	6838      	ldr	r0, [r7, #0]
 8006068:	4798      	blx	r3
 800606a:	60f8      	str	r0, [r7, #12]
    switch (status)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b03      	cmp	r3, #3
 8006070:	d018      	beq.n	80060a4 <np_nand_erase+0x80>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d81b      	bhi.n	80060b0 <np_nand_erase+0x8c>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d01e      	beq.n	80060bc <np_nand_erase+0x98>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d115      	bne.n	80060b0 <np_nand_erase+0x8c>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果擦除命令失败，发送坏块信息
        if (np_send_bad_block_info(addr, prog->chip_info.block_size, false))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800608a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800608e:	2300      	movs	r3, #0
 8006090:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006094:	f7ff fdda 	bl	8005c4c <np_send_bad_block_info>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d010      	beq.n	80060c0 <np_nand_erase+0x9c>
            return -1;
 800609e:	f04f 33ff 	mov.w	r3, #4294967295
 80060a2:	e00f      	b.n	80060c4 <np_nand_erase+0xa0>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND擦除超时，地址：0x%" PRIx64 "\r\n", addr);
 80060a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060a8:	480a      	ldr	r0, [pc, #40]	; (80060d4 <np_nand_erase+0xb0>)
 80060aa:	f00d fb3d 	bl	8013728 <iprintf>
        break;
 80060ae:	e008      	b.n	80060c2 <np_nand_erase+0x9e>
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 80060b0:	4809      	ldr	r0, [pc, #36]	; (80060d8 <np_nand_erase+0xb4>)
 80060b2:	f00d fb9f 	bl	80137f4 <puts>
        return -1;
 80060b6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ba:	e003      	b.n	80060c4 <np_nand_erase+0xa0>
        break;
 80060bc:	bf00      	nop
 80060be:	e000      	b.n	80060c2 <np_nand_erase+0x9e>
        break;
 80060c0:	bf00      	nop
    }

    return 0;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	080148d8 	.word	0x080148d8
 80060d0:	20000040 	.word	0x20000040
 80060d4:	080148f4 	.word	0x080148f4
 80060d8:	08014920 	.word	0x08014920

080060dc <_np_cmd_nand_erase>:

// 执行NAND擦除命令的内部函数
static int _np_cmd_nand_erase(np_prog_t *prog)
{
 80060dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060e0:	b0ac      	sub	sp, #176	; 0xb0
 80060e2:	af04      	add	r7, sp, #16
 80060e4:	6578      	str	r0, [r7, #84]	; 0x54
    int ret;
    uint64_t addr, len, total_size, total_len;
    uint32_t page, pages, pages_in_block, page_size, block_size;
    np_erase_cmd_t *erase_cmd;
    bool skip_bb, inc_spare, is_bad = false;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_erase_cmd_t))
 80060ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b11      	cmp	r3, #17
 80060f2:	d808      	bhi.n	8006106 <_np_cmd_nand_erase+0x2a>
    {
        ERROR_PRINT("擦除命令的缓冲区长度错误：%lu\r\n",
 80060f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	4619      	mov	r1, r3
 80060fa:	48b0      	ldr	r0, [pc, #704]	; (80063bc <_np_cmd_nand_erase+0x2e0>)
 80060fc:	f00d fb14 	bl	8013728 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8006100:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8006104:	e1c0      	b.n	8006488 <_np_cmd_nand_erase+0x3ac>
    }
    erase_cmd = (np_erase_cmd_t *)prog->rx_buf;
 8006106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	677b      	str	r3, [r7, #116]	; 0x74
    total_len = len = erase_cmd->len;
 800610c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800610e:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8006112:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8006116:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800611a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800611e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    addr = erase_cmd->addr;
 8006122:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006124:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8006128:	f8d1 3005 	ldr.w	r3, [r1, #5]
 800612c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    skip_bb = erase_cmd->flags.skip_bb;
 8006130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006132:	7c5b      	ldrb	r3, [r3, #17]
 8006134:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	bf14      	ite	ne
 800613e:	2301      	movne	r3, #1
 8006140:	2300      	moveq	r3, #0
 8006142:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    inc_spare = erase_cmd->flags.inc_spare;
 8006146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006148:	7c5b      	ldrb	r3, [r3, #17]
 800614a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	bf14      	ite	ne
 8006154:	2301      	movne	r3, #1
 8006156:	2300      	moveq	r3, #0
 8006158:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    DEBUG_PRINT("擦除地址：0x%" PRIx64 "，长度：0x%" PRIx64 "字节\r\n", addr,
 800615c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006160:	e9cd 2300 	strd	r2, r3, [sp]
 8006164:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006168:	4895      	ldr	r0, [pc, #596]	; (80063c0 <_np_cmd_nand_erase+0x2e4>)
 800616a:	f00d fadd 	bl	8013728 <iprintf>
        len);

    pages_in_block = prog->chip_info.block_size / prog->chip_info.page_size;
 800616e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006170:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006174:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800617a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800617e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	663b      	str	r3, [r7, #96]	; 0x60

    if (inc_spare)
 8006188:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800618c:	2b00      	cmp	r3, #0
 800618e:	d03f      	beq.n	8006210 <_np_cmd_nand_erase+0x134>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8006190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006192:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006196:	3330      	adds	r3, #48	; 0x30
 8006198:	e9d3 0100 	ldrd	r0, r1, [r3]
 800619c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800619e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80061a2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80061a6:	2200      	movs	r2, #0
 80061a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80061aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80061ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061b0:	f7fe f85e 	bl	8004270 <__aeabi_uldivmod>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4613      	mov	r3, r2
 80061ba:	65fb      	str	r3, [r7, #92]	; 0x5c
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 80061bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80061c2:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 80061c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80061cc:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80061d0:	4413      	add	r3, r2
 80061d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = pages_in_block * page_size;
 80061d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061dc:	fb02 f303 	mul.w	r3, r2, r3
 80061e0:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = (uint64_t)pages * page_size;
 80061e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061e4:	2200      	movs	r2, #0
 80061e6:	469a      	mov	sl, r3
 80061e8:	4693      	mov	fp, r2
 80061ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061ee:	2200      	movs	r2, #0
 80061f0:	4698      	mov	r8, r3
 80061f2:	4691      	mov	r9, r2
 80061f4:	fb08 f20b 	mul.w	r2, r8, fp
 80061f8:	fb0a f309 	mul.w	r3, sl, r9
 80061fc:	4413      	add	r3, r2
 80061fe:	fbaa 4508 	umull	r4, r5, sl, r8
 8006202:	442b      	add	r3, r5
 8006204:	461d      	mov	r5, r3
 8006206:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 800620a:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 800620e:	e014      	b.n	800623a <_np_cmd_nand_erase+0x15e>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8006210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006212:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006216:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800621a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = prog->chip_info.block_size;
 800621e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006220:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006224:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006228:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = prog->chip_info.total_size;
 800622a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800622c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006230:	3330      	adds	r3, #48	; 0x30
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    }

    // 如果设置了跳过坏块标志，并且坏块表未读取，则调用_np_cmd_read_bad_blocks函数进行坏块表读取
    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog, false)))
 800623a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00d      	beq.n	800625e <_np_cmd_nand_erase+0x182>
 8006242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006246:	2b00      	cmp	r3, #0
 8006248:	d109      	bne.n	800625e <_np_cmd_nand_erase+0x182>
 800624a:	2100      	movs	r1, #0
 800624c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800624e:	f7ff fe59 	bl	8005f04 <_np_cmd_read_bad_blocks>
 8006252:	65b8      	str	r0, [r7, #88]	; 0x58
 8006254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <_np_cmd_nand_erase+0x182>
    {
        return ret;
 800625a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800625c:	e114      	b.n	8006488 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查地址是否对齐到块大小
    if (addr % block_size)
 800625e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006260:	2200      	movs	r2, #0
 8006262:	643b      	str	r3, [r7, #64]	; 0x40
 8006264:	647a      	str	r2, [r7, #68]	; 0x44
 8006266:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800626a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800626e:	f7fd ffff 	bl	8004270 <__aeabi_uldivmod>
 8006272:	4313      	orrs	r3, r2
 8006274:	d009      	beq.n	800628a <_np_cmd_nand_erase+0x1ae>
    {
        ERROR_PRINT("地址0x%" PRIx64 "未对齐到块大小0x%lx\r\n", addr, block_size);
 8006276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800627e:	4851      	ldr	r0, [pc, #324]	; (80063c4 <_np_cmd_nand_erase+0x2e8>)
 8006280:	f00d fa52 	bl	8013728 <iprintf>
        return NP_ERR_ADDR_NOT_ALIGN;
 8006284:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006288:	e0fe      	b.n	8006488 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查长度是否为零
    if (!len)
 800628a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800628e:	4313      	orrs	r3, r2
 8006290:	d105      	bne.n	800629e <_np_cmd_nand_erase+0x1c2>
    {
        ERROR_PRINT("长度为零\r\n");
 8006292:	484d      	ldr	r0, [pc, #308]	; (80063c8 <_np_cmd_nand_erase+0x2ec>)
 8006294:	f00d faae 	bl	80137f4 <puts>
        return NP_ERR_LEN_INVALID;
 8006298:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800629c:	e0f4      	b.n	8006488 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查长度是否对齐到块大小
    if (len % block_size)
 800629e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062a0:	2200      	movs	r2, #0
 80062a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80062a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062a6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80062aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062ae:	f7fd ffdf 	bl	8004270 <__aeabi_uldivmod>
 80062b2:	4313      	orrs	r3, r2
 80062b4:	d009      	beq.n	80062ca <_np_cmd_nand_erase+0x1ee>
    {
        ERROR_PRINT("长度0x%" PRIx64 "未对齐到块大小0x%lx\r\n", len, block_size);
 80062b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80062be:	4843      	ldr	r0, [pc, #268]	; (80063cc <_np_cmd_nand_erase+0x2f0>)
 80062c0:	f00d fa32 	bl	8013728 <iprintf>
        return NP_ERR_LEN_NOT_ALIGN;
 80062c4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80062c8:	e0de      	b.n	8006488 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查擦除地址是否超出芯片大小
    if (addr + len > total_size)
 80062ca:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062ce:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80062d2:	1884      	adds	r4, r0, r2
 80062d4:	633c      	str	r4, [r7, #48]	; 0x30
 80062d6:	eb41 0303 	adc.w	r3, r1, r3
 80062da:	637b      	str	r3, [r7, #52]	; 0x34
 80062dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80062e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80062e4:	4621      	mov	r1, r4
 80062e6:	428a      	cmp	r2, r1
 80062e8:	4629      	mov	r1, r5
 80062ea:	418b      	sbcs	r3, r1
 80062ec:	d20f      	bcs.n	800630e <_np_cmd_nand_erase+0x232>
    {
        ERROR_PRINT("擦除地址超出范围：0x%" PRIx64 "+0x%" PRIx64 "大于芯片大小0x%" PRIx64 "\r\n", addr, len, total_size);
 80062ee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80062f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062f6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80062fa:	e9cd 2300 	strd	r2, r3, [sp]
 80062fe:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006302:	4833      	ldr	r0, [pc, #204]	; (80063d0 <_np_cmd_nand_erase+0x2f4>)
 8006304:	f00d fa10 	bl	8013728 <iprintf>
        return NP_ERR_ADDR_EXCEEDED;
 8006308:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800630c:	e0bc      	b.n	8006488 <_np_cmd_nand_erase+0x3ac>
    }

    page = addr / page_size;
 800630e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006312:	2200      	movs	r2, #0
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
 8006316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006318:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800631c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006320:	f7fd ffa6 	bl	8004270 <__aeabi_uldivmod>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4613      	mov	r3, r2
 800632a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    while (len)
 800632e:	e0a3      	b.n	8006478 <_np_cmd_nand_erase+0x39c>
    {
        if (addr >= total_size)
 8006330:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006334:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006338:	4290      	cmp	r0, r2
 800633a:	eb71 0303 	sbcs.w	r3, r1, r3
 800633e:	d30b      	bcc.n	8006358 <_np_cmd_nand_erase+0x27c>
        {
            ERROR_PRINT("擦除地址0x%" PRIx64 "超出范围：0x%" PRIx64 "\r\n", addr, total_size);
 8006340:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006344:	e9cd 2300 	strd	r2, r3, [sp]
 8006348:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800634c:	4821      	ldr	r0, [pc, #132]	; (80063d4 <_np_cmd_nand_erase+0x2f8>)
 800634e:	f00d f9eb 	bl	8013728 <iprintf>
            return NP_ERR_ADDR_EXCEEDED;
 8006352:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006356:	e097      	b.n	8006488 <_np_cmd_nand_erase+0x3ac>
        }

        // 如果设置了跳过坏块标志，并且当前块为坏块，则跳过当前块，并发送坏块信息
        if (skip_bb && (is_bad = nand_bad_block_table_lookup(page)))
 8006358:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01b      	beq.n	8006398 <_np_cmd_nand_erase+0x2bc>
 8006360:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8006364:	f7ff fbca 	bl	8005afc <nand_bad_block_table_lookup>
 8006368:	4603      	mov	r3, r0
 800636a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800636e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006372:	2b00      	cmp	r3, #0
 8006374:	d010      	beq.n	8006398 <_np_cmd_nand_erase+0x2bc>
        {
            DEBUG_PRINT("跳过坏块，地址：0x%" PRIx64 "\r\n", addr);
 8006376:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800637a:	4817      	ldr	r0, [pc, #92]	; (80063d8 <_np_cmd_nand_erase+0x2fc>)
 800637c:	f00d f9d4 	bl	8013728 <iprintf>
            if (np_send_bad_block_info(addr, block_size, true))
 8006380:	2301      	movs	r3, #1
 8006382:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006384:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006388:	f7ff fc60 	bl	8005c4c <np_send_bad_block_info>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <_np_cmd_nand_erase+0x2bc>
                return -1;
 8006392:	f04f 33ff 	mov.w	r3, #4294967295
 8006396:	e077      	b.n	8006488 <_np_cmd_nand_erase+0x3ac>
        }

        // 如果不是坏块，则执行擦除操作
        if (!is_bad && np_nand_erase(prog, page))
 8006398:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800639c:	f083 0301 	eor.w	r3, r3, #1
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d01a      	beq.n	80063dc <_np_cmd_nand_erase+0x300>
 80063a6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80063aa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80063ac:	f7ff fe3a 	bl	8006024 <np_nand_erase>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d012      	beq.n	80063dc <_np_cmd_nand_erase+0x300>
            return NP_ERR_NAND_ERASE;
 80063b6:	f06f 0368 	mvn.w	r3, #104	; 0x68
 80063ba:	e065      	b.n	8006488 <_np_cmd_nand_erase+0x3ac>
 80063bc:	0801493c 	.word	0x0801493c
 80063c0:	08014970 	.word	0x08014970
 80063c4:	080149a0 	.word	0x080149a0
 80063c8:	080149d0 	.word	0x080149d0
 80063cc:	080149e8 	.word	0x080149e8
 80063d0:	08014a18 	.word	0x08014a18
 80063d4:	08014a64 	.word	0x08014a64
 80063d8:	08014a98 	.word	0x08014a98

        addr += block_size;
 80063dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063de:	2200      	movs	r2, #0
 80063e0:	623b      	str	r3, [r7, #32]
 80063e2:	627a      	str	r2, [r7, #36]	; 0x24
 80063e4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80063e8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80063ec:	4621      	mov	r1, r4
 80063ee:	1851      	adds	r1, r2, r1
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	4629      	mov	r1, r5
 80063f4:	414b      	adcs	r3, r1
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80063fc:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
        page += pages_in_block;
 8006400:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006406:	4413      	add	r3, r2
 8006408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        /* 在部分擦除时不计算坏块 */
        if (!is_bad || (is_bad && erase_cmd->len == total_size))
 800640c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006410:	f083 0301 	eor.w	r3, r3, #1
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10e      	bne.n	8006438 <_np_cmd_nand_erase+0x35c>
 800641a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800641e:	2b00      	cmp	r3, #0
 8006420:	d01d      	beq.n	800645e <_np_cmd_nand_erase+0x382>
 8006422:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006424:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8006428:	f8d1 300d 	ldr.w	r3, [r1, #13]
 800642c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006430:	4299      	cmp	r1, r3
 8006432:	bf08      	it	eq
 8006434:	4290      	cmpeq	r0, r2
 8006436:	d112      	bne.n	800645e <_np_cmd_nand_erase+0x382>
            len -= block_size;
 8006438:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800643a:	2200      	movs	r2, #0
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	61fa      	str	r2, [r7, #28]
 8006440:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006444:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8006448:	4621      	mov	r1, r4
 800644a:	1a51      	subs	r1, r2, r1
 800644c:	6039      	str	r1, [r7, #0]
 800644e:	4629      	mov	r1, r5
 8006450:	eb63 0301 	sbc.w	r3, r3, r1
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	e9d7 3400 	ldrd	r3, r4, [r7]
 800645a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

        // 发送进度信息
        np_send_progress(total_len - len);
 800645e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006462:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006466:	1a84      	subs	r4, r0, r2
 8006468:	613c      	str	r4, [r7, #16]
 800646a:	eb61 0303 	sbc.w	r3, r1, r3
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006474:	f7ff fc22 	bl	8005cbc <np_send_progress>
    while (len)
 8006478:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800647c:	4313      	orrs	r3, r2
 800647e:	f47f af57 	bne.w	8006330 <_np_cmd_nand_erase+0x254>
    }

    return np_send_ok_status();
 8006482:	f7ff fba3 	bl	8005bcc <np_send_ok_status>
 8006486:	4603      	mov	r3, r0
}
 8006488:	4618      	mov	r0, r3
 800648a:	37a0      	adds	r7, #160	; 0xa0
 800648c:	46bd      	mov	sp, r7
 800648e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006492:	bf00      	nop

08006494 <np_cmd_nand_erase>:

// 执行NAND擦除命令的函数
static int np_cmd_nand_erase(np_prog_t *prog)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
    int ret;

    // 设置写入指示灯
    led_wr_set(true);
 800649c:	2001      	movs	r0, #1
 800649e:	f7ff f9d1 	bl	8005844 <led_wr_set>
    // 调用内部的_np_cmd_nand_erase函数执行擦除命令
    ret = _np_cmd_nand_erase(prog);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff fe1a 	bl	80060dc <_np_cmd_nand_erase>
 80064a8:	60f8      	str	r0, [r7, #12]
    // 关闭写入指示灯
    led_wr_set(false);
 80064aa:	2000      	movs	r0, #0
 80064ac:	f7ff f9ca 	bl	8005844 <led_wr_set>

    return ret;
 80064b0:	68fb      	ldr	r3, [r7, #12]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <np_send_write_ack>:

// 发送写入确认的函数
static int np_send_write_ack(uint64_t bytes_ack)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	e9c7 0100 	strd	r0, r1, [r7]
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_WRITE_ACK };
 80064c6:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <np_send_write_ack+0x48>)
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	82bb      	strh	r3, [r7, #20]
    np_resp_write_ack_t write_ack = { resp_header, bytes_ack };
 80064cc:	8abb      	ldrh	r3, [r7, #20]
 80064ce:	813b      	strh	r3, [r7, #8]
 80064d0:	f107 0308 	add.w	r3, r7, #8
 80064d4:	3302      	adds	r3, #2
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	605a      	str	r2, [r3, #4]

    // 发送写入确认响应
    if (np_comm_cb->send((uint8_t *)&write_ack, sizeof(write_ack)))
 80064de:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <np_send_write_ack+0x4c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f107 0208 	add.w	r2, r7, #8
 80064e8:	210a      	movs	r1, #10
 80064ea:	4610      	mov	r0, r2
 80064ec:	4798      	blx	r3
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <np_send_write_ack+0x3e>
        return -1;
 80064f4:	f04f 33ff 	mov.w	r3, #4294967295
 80064f8:	e000      	b.n	80064fc <np_send_write_ack+0x40>

    return 0;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	08014abc 	.word	0x08014abc
 8006508:	20000cc4 	.word	0x20000cc4

0800650c <np_cmd_nand_write_start>:

// 执行NAND写入开始命令的函数
static int np_cmd_nand_write_start(np_prog_t *prog)
{
 800650c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006510:	b09a      	sub	sp, #104	; 0x68
 8006512:	af04      	add	r7, sp, #16
 8006514:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint64_t addr, len;
    uint32_t pages, pages_in_block;
    np_write_start_cmd_t *write_start_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b11      	cmp	r3, #17
 800651c:	d808      	bhi.n	8006530 <np_cmd_nand_write_start+0x24>
    {
        ERROR_PRINT("写入开始命令的缓冲区长度错误：%lu\r\n",
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4619      	mov	r1, r3
 8006524:	489d      	ldr	r0, [pc, #628]	; (800679c <np_cmd_nand_write_start+0x290>)
 8006526:	f00d f8ff 	bl	8013728 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 800652a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800652e:	e184      	b.n	800683a <np_cmd_nand_write_start+0x32e>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	657b      	str	r3, [r7, #84]	; 0x54

    // 如果硬件支持硬件ECC，启用硬件ECC
    if (hal[prog->hal]->enable_hw_ecc)
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800653c:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8006540:	461a      	mov	r2, r3
 8006542:	4b97      	ldr	r3, [pc, #604]	; (80067a0 <np_cmd_nand_write_start+0x294>)
 8006544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	2b00      	cmp	r3, #0
 800654c:	d015      	beq.n	800657a <np_cmd_nand_write_start+0x6e>
        hal[prog->hal]->enable_hw_ecc(write_start_cmd->flags.enable_hw_ecc);
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006554:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8006558:	461a      	mov	r2, r3
 800655a:	4b91      	ldr	r3, [pc, #580]	; (80067a0 <np_cmd_nand_write_start+0x294>)
 800655c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006564:	7c5b      	ldrb	r3, [r3, #17]
 8006566:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	bf14      	ite	ne
 8006570:	2301      	movne	r3, #1
 8006572:	2300      	moveq	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	4618      	mov	r0, r3
 8006578:	4790      	blx	r2

    addr = write_start_cmd->addr;
 800657a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800657c:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8006580:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8006584:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    len = write_start_cmd->len;
 8006588:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800658a:	f8d1 2009 	ldr.w	r2, [r1, #9]
 800658e:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8006592:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    DEBUG_PRINT("写入地址：0x%" PRIx64 "，长度：0x%" PRIx64 "字节\r\n",
 8006596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800659a:	e9cd 2300 	strd	r2, r3, [sp]
 800659e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065a2:	4880      	ldr	r0, [pc, #512]	; (80067a4 <np_cmd_nand_write_start+0x298>)
 80065a4:	f00d f8c0 	bl	8013728 <iprintf>
        addr, len);

    if (write_start_cmd->flags.inc_spare)
 80065a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065aa:	7c5b      	ldrb	r3, [r3, #17]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d051      	beq.n	800665a <np_cmd_nand_write_start+0x14e>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80065bc:	3330      	adds	r3, #48	; 0x30
 80065be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065c8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80065cc:	2200      	movs	r2, #0
 80065ce:	623b      	str	r3, [r7, #32]
 80065d0:	627a      	str	r2, [r7, #36]	; 0x24
 80065d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065d6:	f7fd fe4b 	bl	8004270 <__aeabi_uldivmod>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4613      	mov	r3, r2
 80065e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        pages_in_block = prog->chip_info.block_size /
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065e8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065f2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 80065f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fa:	63bb      	str	r3, [r7, #56]	; 0x38
        prog->page_size = prog->chip_info.page_size +
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006602:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
            prog->chip_info.spare_size;
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800660c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
        prog->page_size = prog->chip_info.page_size +
 8006610:	441a      	add	r2, r3
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	621a      	str	r2, [r3, #32]
        prog->block_size = pages_in_block * prog->page_size;
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	6a1a      	ldr	r2, [r3, #32]
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	fb03 f202 	mul.w	r2, r3, r2
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = (uint64_t)pages * prog->page_size;
 8006624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006626:	2200      	movs	r2, #0
 8006628:	469a      	mov	sl, r3
 800662a:	4693      	mov	fp, r2
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	2200      	movs	r2, #0
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	61fa      	str	r2, [r7, #28]
 8006636:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800663a:	4603      	mov	r3, r0
 800663c:	fb03 f20b 	mul.w	r2, r3, fp
 8006640:	460b      	mov	r3, r1
 8006642:	fb0a f303 	mul.w	r3, sl, r3
 8006646:	4413      	add	r3, r2
 8006648:	4602      	mov	r2, r0
 800664a:	fbaa 4502 	umull	r4, r5, sl, r2
 800664e:	442b      	add	r3, r5
 8006650:	461d      	mov	r5, r3
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 8006658:	e016      	b.n	8006688 <np_cmd_nand_write_start+0x17c>
    }
    else
    {
        prog->page_size = prog->chip_info.page_size;
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006660:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	621a      	str	r2, [r3, #32]
        prog->block_size = prog->chip_info.block_size;
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800666e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = prog->chip_info.total_size;
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800667c:	3330      	adds	r3, #48	; 0x30
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006684:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }

    // 检查写入地址是否超出芯片大小
    if (addr + len > prog->total_size)
 8006688:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800668c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006690:	eb10 0802 	adds.w	r8, r0, r2
 8006694:	eb41 0903 	adc.w	r9, r1, r3
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800669e:	4542      	cmp	r2, r8
 80066a0:	eb73 0309 	sbcs.w	r3, r3, r9
 80066a4:	d210      	bcs.n	80066c8 <np_cmd_nand_write_start+0x1bc>
    {
        ERROR_PRINT("写入地址0x%" PRIx64 "+0x%" PRIx64
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80066ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066b4:	e9cd 2300 	strd	r2, r3, [sp]
 80066b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066bc:	483a      	ldr	r0, [pc, #232]	; (80067a8 <np_cmd_nand_write_start+0x29c>)
 80066be:	f00d f833 	bl	8013728 <iprintf>
            "超出芯片大小0x%" PRIx64 "\r\n", addr, len,
            prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 80066c2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80066c6:	e0b8      	b.n	800683a <np_cmd_nand_write_start+0x32e>
    }

    // 检查地址是否对齐到页大小
    if (addr % prog->page_size)
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	2200      	movs	r2, #0
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	617a      	str	r2, [r7, #20]
 80066d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80066d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80066da:	f7fd fdc9 	bl	8004270 <__aeabi_uldivmod>
 80066de:	4313      	orrs	r3, r2
 80066e0:	d00a      	beq.n	80066f8 <np_cmd_nand_write_start+0x1ec>
    {
        ERROR_PRINT("地址0x%" PRIx64 "未对齐到页大小0x%lx\r\n", addr, prog->page_size);
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066ec:	482f      	ldr	r0, [pc, #188]	; (80067ac <np_cmd_nand_write_start+0x2a0>)
 80066ee:	f00d f81b 	bl	8013728 <iprintf>
        return NP_ERR_ADDR_NOT_ALIGN;
 80066f2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80066f6:	e0a0      	b.n	800683a <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否为零
    if (!len)
 80066f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066fc:	4313      	orrs	r3, r2
 80066fe:	d105      	bne.n	800670c <np_cmd_nand_write_start+0x200>
    {
        ERROR_PRINT("长度为零\r\n");
 8006700:	482b      	ldr	r0, [pc, #172]	; (80067b0 <np_cmd_nand_write_start+0x2a4>)
 8006702:	f00d f877 	bl	80137f4 <puts>
        return NP_ERR_LEN_INVALID;
 8006706:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800670a:	e096      	b.n	800683a <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否对齐到页大小
    if (len % prog->page_size)
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	2200      	movs	r2, #0
 8006712:	60bb      	str	r3, [r7, #8]
 8006714:	60fa      	str	r2, [r7, #12]
 8006716:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800671a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800671e:	f7fd fda7 	bl	8004270 <__aeabi_uldivmod>
 8006722:	4313      	orrs	r3, r2
 8006724:	d00a      	beq.n	800673c <np_cmd_nand_write_start+0x230>
    {
        ERROR_PRINT("长度0x%" PRIx64 "未对齐到页大小0x%lx\r\n", len, prog->page_size);
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006730:	4820      	ldr	r0, [pc, #128]	; (80067b4 <np_cmd_nand_write_start+0x2a8>)
 8006732:	f00c fff9 	bl	8013728 <iprintf>
        return NP_ERR_LEN_NOT_ALIGN;
 8006736:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800673a:	e07e      	b.n	800683a <np_cmd_nand_write_start+0x32e>
    }

    // 设置跳过坏块标志，并且读取坏块信息
    prog->skip_bb = write_start_cmd->flags.skip_bb;
 800673c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800673e:	7c5b      	ldrb	r3, [r3, #17]
 8006740:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006744:	b2db      	uxtb	r3, r3
 8006746:	461a      	mov	r2, r3
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800674e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    if (prog->skip_bb && !prog->bb_is_read &&
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006758:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00d      	beq.n	800677c <np_cmd_nand_write_start+0x270>
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006764:	2b00      	cmp	r3, #0
 8006766:	d109      	bne.n	800677c <np_cmd_nand_write_start+0x270>
        (ret = _np_cmd_read_bad_blocks(prog, false)))
 8006768:	2100      	movs	r1, #0
 800676a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800676c:	f7ff fbca 	bl	8005f04 <_np_cmd_read_bad_blocks>
 8006770:	6378      	str	r0, [r7, #52]	; 0x34
    if (prog->skip_bb && !prog->bb_is_read &&
 8006772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <np_cmd_nand_write_start+0x270>
    {
        return ret;
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	e05e      	b.n	800683a <np_cmd_nand_write_start+0x32e>
    }

    // 检查页大小是否超过缓冲区大小
    if (prog->page_size > sizeof(prog->page.buf))
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 8006784:	d91a      	bls.n	80067bc <np_cmd_nand_write_start+0x2b0>
    {
        ERROR_PRINT("页大小0x%lx超过缓冲区大小0x%x\r\n", prog->page_size, sizeof(prog->page.buf));
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f44f 5207 	mov.w	r2, #8640	; 0x21c0
 800678e:	4619      	mov	r1, r3
 8006790:	4809      	ldr	r0, [pc, #36]	; (80067b8 <np_cmd_nand_write_start+0x2ac>)
 8006792:	f00c ffc9 	bl	8013728 <iprintf>
        return NP_ERR_BUF_OVERFLOW;
 8006796:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 800679a:	e04e      	b.n	800683a <np_cmd_nand_write_start+0x32e>
 800679c:	08014ac0 	.word	0x08014ac0
 80067a0:	20000040 	.word	0x20000040
 80067a4:	08014afc 	.word	0x08014afc
 80067a8:	08014b2c 	.word	0x08014b2c
 80067ac:	08014b68 	.word	0x08014b68
 80067b0:	080149d0 	.word	0x080149d0
 80067b4:	08014b98 	.word	0x08014b98
 80067b8:	08014bc8 	.word	0x08014bc8
    }

    // 设置写入相关的参数
    prog->addr = addr;
 80067bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 80067c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	2201      	movs	r2, #1
 80067d4:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	2200      	movs	r2, #0
 80067dc:	603b      	str	r3, [r7, #0]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80067e8:	f7fd fd42 	bl	8004270 <__aeabi_uldivmod>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80067f6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006800:	461a      	mov	r2, r3
 8006802:	2300      	movs	r3, #0
 8006804:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800680e:	3310      	adds	r3, #16
 8006810:	4619      	mov	r1, r3
 8006812:	f04f 0200 	mov.w	r2, #0
 8006816:	f04f 0300 	mov.w	r3, #0
 800681a:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006824:	3310      	adds	r3, #16
 8006826:	4619      	mov	r1, r3
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	e9c1 2300 	strd	r2, r3, [r1]

    // 发送OK状态响应
    return np_send_ok_status();
 8006834:	f7ff f9ca 	bl	8005bcc <np_send_ok_status>
 8006838:	4603      	mov	r3, r0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3758      	adds	r7, #88	; 0x58
 800683e:	46bd      	mov	sp, r7
 8006840:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006844 <np_nand_handle_status>:

// 处理NAND状态的函数
static int np_nand_handle_status(np_prog_t *prog)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
    switch (hal[prog->hal]->read_status())
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006852:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8006856:	461a      	mov	r2, r3
 8006858:	4b37      	ldr	r3, [pc, #220]	; (8006938 <np_nand_handle_status+0xf4>)
 800685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	4798      	blx	r3
 8006862:	4603      	mov	r3, r0
 8006864:	2b02      	cmp	r3, #2
 8006866:	d006      	beq.n	8006876 <np_nand_handle_status+0x32>
 8006868:	2b02      	cmp	r3, #2
 800686a:	d84b      	bhi.n	8006904 <np_nand_handle_status+0xc0>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d010      	beq.n	8006892 <np_nand_handle_status+0x4e>
 8006870:	2b01      	cmp	r3, #1
 8006872:	d01d      	beq.n	80068b0 <np_nand_handle_status+0x6c>
 8006874:	e046      	b.n	8006904 <np_nand_handle_status+0xc0>
    {
    case FLASH_STATUS_ERROR:
        // 如果状态为错误，发送坏块信息
        if (np_send_bad_block_info(prog->addr, prog->block_size, false))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006880:	2300      	movs	r3, #0
 8006882:	f7ff f9e3 	bl	8005c4c <np_send_bad_block_info>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <np_nand_handle_status+0x4e>
            return -1;
 800688c:	f04f 33ff 	mov.w	r3, #4294967295
 8006890:	e04e      	b.n	8006930 <np_nand_handle_status+0xec>
        /* 继续执行下面的代码 */
    case FLASH_STATUS_READY:
        // 如果状态为就绪，表示操作完成，将标志位和超时计数器重置
        prog->nand_wr_in_progress = 0;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006898:	461a      	mov	r2, r3
 800689a:	2300      	movs	r3, #0
 800689c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068a6:	461a      	mov	r2, r3
 80068a8:	2300      	movs	r3, #0
 80068aa:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        break;
 80068ae:	e03e      	b.n	800692e <np_nand_handle_status+0xea>
    case FLASH_STATUS_BUSY:
        // 如果状态为繁忙，增加超时计数器，并检查是否超时
        if (++prog->nand_timeout == NP_NAND_TIMEOUT)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068b6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80068ba:	3301      	adds	r3, #1
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80068c2:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068cc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80068d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068d4:	d12a      	bne.n	800692c <np_nand_handle_status+0xe8>
        {
            ERROR_PRINT("NAND写入超时，地址：0x%" PRIx64 "\r\n", prog->addr);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80068dc:	4817      	ldr	r0, [pc, #92]	; (800693c <np_nand_handle_status+0xf8>)
 80068de:	f00c ff23 	bl	8013728 <iprintf>
            prog->nand_wr_in_progress = 0;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068e8:	461a      	mov	r2, r3
 80068ea:	2300      	movs	r3, #0
 80068ec:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
            prog->nand_timeout = 0;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068f6:	461a      	mov	r2, r3
 80068f8:	2300      	movs	r3, #0
 80068fa:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
            return -1;
 80068fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006902:	e015      	b.n	8006930 <np_nand_handle_status+0xec>
        }
        break;
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 8006904:	480e      	ldr	r0, [pc, #56]	; (8006940 <np_nand_handle_status+0xfc>)
 8006906:	f00c ff75 	bl	80137f4 <puts>
        prog->nand_wr_in_progress = 0;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006910:	461a      	mov	r2, r3
 8006912:	2300      	movs	r3, #0
 8006914:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800691e:	461a      	mov	r2, r3
 8006920:	2300      	movs	r3, #0
 8006922:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        return -1;
 8006926:	f04f 33ff 	mov.w	r3, #4294967295
 800692a:	e001      	b.n	8006930 <np_nand_handle_status+0xec>
        break;
 800692c:	bf00      	nop
    }

    return 0;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000040 	.word	0x20000040
 800693c:	08014bfc 	.word	0x08014bfc
 8006940:	08014920 	.word	0x08014920

08006944 <np_nand_write>:

// 执行NAND写入的函数
static int np_nand_write(np_prog_t *prog)
{   
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af02      	add	r7, sp, #8
 800694a:	6078      	str	r0, [r7, #4]
    // 如果上一次的NAND写入还在进行中，等待其完成
    if (prog->nand_wr_in_progress)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006952:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d012      	beq.n	8006980 <np_nand_write+0x3c>
    {
        DEBUG_PRINT("等待上一次NAND写入完成\r\n");
 800695a:	481e      	ldr	r0, [pc, #120]	; (80069d4 <np_nand_write+0x90>)
 800695c:	f00c ff4a 	bl	80137f4 <puts>
        do
        {
            if (np_nand_handle_status(prog))
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff ff6f 	bl	8006844 <np_nand_handle_status>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <np_nand_write+0x2e>
                return -1;
 800696c:	f04f 33ff 	mov.w	r3, #4294967295
 8006970:	e02c      	b.n	80069cc <np_nand_write+0x88>
        }
        while (prog->nand_wr_in_progress);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006978:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ef      	bne.n	8006960 <np_nand_write+0x1c>
    }

    DEBUG_PRINT("NAND写入，地址：0x%" PRIx64 "，长度：%lu字节\r\n", prog->addr,
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	6a09      	ldr	r1, [r1, #32]
 800698a:	9100      	str	r1, [sp, #0]
 800698c:	4812      	ldr	r0, [pc, #72]	; (80069d8 <np_nand_write+0x94>)
 800698e:	f00c fecb 	bl	8013728 <iprintf>
        prog->page_size);

    // 调用硬件抽象层函数执行异步写入操作
    hal[prog->hal]->write_page_async(prog->page.buf, prog->page.page,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006998:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 800699c:	461a      	mov	r2, r3
 800699e:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <np_nand_write+0x98>)
 80069a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	f102 003c 	add.w	r0, r2, #60	; 0x3c
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80069b2:	f8d2 11fc 	ldr.w	r1, [r2, #508]	; 0x1fc
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6a12      	ldr	r2, [r2, #32]
 80069ba:	4798      	blx	r3
        prog->page_size);

    prog->nand_wr_in_progress = 1;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069c2:	461a      	mov	r2, r3
 80069c4:	2301      	movs	r3, #1
 80069c6:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

    return 0;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	08014c28 	.word	0x08014c28
 80069d8:	08014c4c 	.word	0x08014c4c
 80069dc:	20000040 	.word	0x20000040

080069e0 <np_cmd_nand_write_data>:

// 执行NAND写入数据命令的函数
static int np_cmd_nand_write_data(np_prog_t *prog)
{
 80069e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069e4:	b092      	sub	sp, #72	; 0x48
 80069e6:	af02      	add	r7, sp, #8
 80069e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint32_t write_len, bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d808      	bhi.n	8006a04 <np_cmd_nand_write_data+0x24>
    {
        ERROR_PRINT("写入数据命令的缓冲区长度错误：%lu\r\n",
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	4619      	mov	r1, r3
 80069f8:	486e      	ldr	r0, [pc, #440]	; (8006bb4 <np_cmd_nand_write_data+0x1d4>)
 80069fa:	f00c fe95 	bl	8013728 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80069fe:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8006a02:	e1a1      	b.n	8006d48 <np_cmd_nand_write_data+0x368>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	63bb      	str	r3, [r7, #56]	; 0x38
    len = write_data_cmd->len;
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	785b      	ldrb	r3, [r3, #1]
 8006a0e:	637b      	str	r3, [r7, #52]	; 0x34
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 8006a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a12:	3302      	adds	r3, #2
 8006a14:	2b40      	cmp	r3, #64	; 0x40
 8006a16:	d906      	bls.n	8006a26 <np_cmd_nand_write_data+0x46>
    {
        ERROR_PRINT("数据大小错误：0x%lx\r\n", len);
 8006a18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a1a:	4867      	ldr	r0, [pc, #412]	; (8006bb8 <np_cmd_nand_write_data+0x1d8>)
 8006a1c:	f00c fe84 	bl	8013728 <iprintf>
        return NP_ERR_CMD_DATA_SIZE;
 8006a20:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8006a24:	e190      	b.n	8006d48 <np_cmd_nand_write_data+0x368>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 8006a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a28:	1c9a      	adds	r2, r3, #2
 8006a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d00a      	beq.n	8006a48 <np_cmd_nand_write_data+0x68>
    {
        ERROR_PRINT("缓冲区长度0x%lx大于命令长度0x%lx\r\n",
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	6859      	ldr	r1, [r3, #4]
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	3302      	adds	r3, #2
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	485f      	ldr	r0, [pc, #380]	; (8006bbc <np_cmd_nand_write_data+0x1dc>)
 8006a3e:	f00c fe73 	bl	8013728 <iprintf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 8006a42:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8006a46:	e17f      	b.n	8006d48 <np_cmd_nand_write_data+0x368>
    }

    // 检查写入地址是否已设置
    if (!prog->addr_is_set)
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d105      	bne.n	8006a5c <np_cmd_nand_write_data+0x7c>
    {
        ERROR_PRINT("写入地址未设置\r\n");
 8006a50:	485b      	ldr	r0, [pc, #364]	; (8006bc0 <np_cmd_nand_write_data+0x1e0>)
 8006a52:	f00c fecf 	bl	80137f4 <puts>
        return NP_ERR_ADDR_INVALID;
 8006a56:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8006a5a:	e175      	b.n	8006d48 <np_cmd_nand_write_data+0x368>
    }

    // 计算本次写入的长度
    if (prog->page.offset + len > prog->page_size)
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a62:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a68:	441a      	add	r2, r3
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d909      	bls.n	8006a86 <np_cmd_nand_write_data+0xa6>
        write_len = prog->page_size - prog->page.offset;
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	6a1a      	ldr	r2, [r3, #32]
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a84:	e001      	b.n	8006a8a <np_cmd_nand_write_data+0xaa>
    else
        write_len = len;
 8006a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c

    // 将数据拷贝到页缓冲区
    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a9a:	18d0      	adds	r0, r2, r3
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	f00d f801 	bl	8013aaa <memcpy>
    prog->page.offset += write_len;
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006aae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab4:	441a      	add	r2, r3
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006abc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    // 如果页缓冲区已满，进行页写入操作
    if (prog->page.offset == prog->page_size)
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006ac6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	f040 80a2 	bne.w	8006c18 <np_cmd_nand_write_data+0x238>
    {
        // 如果启用了跳过坏块，并且当前页是坏块，跳过该坏块
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 8006ad4:	e038      	b.n	8006b48 <np_cmd_nand_write_data+0x168>
        {
            DEBUG_PRINT("跳过坏块，地址：0x%" PRIx64 "\r\n", prog->addr);
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006adc:	4839      	ldr	r0, [pc, #228]	; (8006bc4 <np_cmd_nand_write_data+0x1e4>)
 8006ade:	f00c fe23 	bl	8013728 <iprintf>
            if (np_send_bad_block_info(prog->addr, prog->block_size, true))
 8006ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006aec:	2301      	movs	r3, #1
 8006aee:	f7ff f8ad 	bl	8005c4c <np_send_bad_block_info>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <np_cmd_nand_write_data+0x11e>
                return -1;
 8006af8:	f04f 33ff 	mov.w	r3, #4294967295
 8006afc:	e124      	b.n	8006d48 <np_cmd_nand_write_data+0x368>

            prog->addr += prog->block_size;
 8006afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b00:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	2200      	movs	r2, #0
 8006b0a:	623b      	str	r3, [r7, #32]
 8006b0c:	627a      	str	r2, [r7, #36]	; 0x24
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	18c3      	adds	r3, r0, r3
 8006b12:	613b      	str	r3, [r7, #16]
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	eb41 0303 	adc.w	r3, r1, r3
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b22:	e9c3 1202 	strd	r1, r2, [r3, #8]
            prog->page.page += prog->block_size / prog->page_size;
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b2c:	f8d3 11fc 	ldr.w	r1, [r3, #508]	; 0x1fc
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3c:	18ca      	adds	r2, r1, r3
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b44:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00a      	beq.n	8006b6c <np_cmd_nand_write_data+0x18c>
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b5c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fe ffcb 	bl	8005afc <nand_bad_block_table_lookup>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1b4      	bne.n	8006ad6 <np_cmd_nand_write_data+0xf6>
        }

        // 检查写入地址是否超过芯片大小
        if (prog->addr >= prog->total_size)
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006b78:	4290      	cmp	r0, r2
 8006b7a:	eb71 0303 	sbcs.w	r3, r1, r3
 8006b7e:	d30f      	bcc.n	8006ba0 <np_cmd_nand_write_data+0x1c0>
        {
            ERROR_PRINT("写入地址0x%" PRIx64 "超过芯片大小0x%" PRIx64 "\r\n", prog->addr,
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b82:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006b8c:	e9cd 2300 	strd	r2, r3, [sp]
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	480c      	ldr	r0, [pc, #48]	; (8006bc8 <np_cmd_nand_write_data+0x1e8>)
 8006b96:	f00c fdc7 	bl	8013728 <iprintf>
                prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8006b9a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006b9e:	e0d3      	b.n	8006d48 <np_cmd_nand_write_data+0x368>
        }

        // 执行NAND写入操作
        if (np_nand_write(prog))
 8006ba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ba2:	f7ff fecf 	bl	8006944 <np_nand_write>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00f      	beq.n	8006bcc <np_cmd_nand_write_data+0x1ec>
            return NP_ERR_NAND_WR;
 8006bac:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8006bb0:	e0ca      	b.n	8006d48 <np_cmd_nand_write_data+0x368>
 8006bb2:	bf00      	nop
 8006bb4:	08014c80 	.word	0x08014c80
 8006bb8:	08014cbc 	.word	0x08014cbc
 8006bbc:	08014ce0 	.word	0x08014ce0
 8006bc0:	08014d18 	.word	0x08014d18
 8006bc4:	08014a98 	.word	0x08014a98
 8006bc8:	08014d38 	.word	0x08014d38

        // 更新地址和页偏移
        prog->addr += prog->page_size;
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	61fa      	str	r2, [r7, #28]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	18c3      	adds	r3, r0, r3
 8006be0:	60bb      	str	r3, [r7, #8]
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	eb41 0303 	adc.w	r3, r1, r3
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006bf0:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006bfa:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8006bfe:	3301      	adds	r3, #1
 8006c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c02:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006c06:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006c10:	461a      	mov	r2, r3
 8006c12:	2300      	movs	r3, #0
 8006c14:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    // 处理剩余的数据
    bytes_left = len - write_len;
 8006c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	633b      	str	r3, [r7, #48]	; 0x30
    if (bytes_left)
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d016      	beq.n	8006c54 <np_cmd_nand_write_data+0x274>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	1c9a      	adds	r2, r3, #2
 8006c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c32:	4413      	add	r3, r2
 8006c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c36:	4619      	mov	r1, r3
 8006c38:	f00c ff37 	bl	8013aaa <memcpy>
        prog->page.offset += bytes_left;
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006c42:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	4413      	add	r3, r2
 8006c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c4c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006c50:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    // 更新已写入和已确认的字节数
    prog->bytes_written += len;
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006c5a:	3310      	adds	r3, #16
 8006c5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c62:	2000      	movs	r0, #0
 8006c64:	468a      	mov	sl, r1
 8006c66:	4683      	mov	fp, r0
 8006c68:	eb12 010a 	adds.w	r1, r2, sl
 8006c6c:	6039      	str	r1, [r7, #0]
 8006c6e:	eb43 030b 	adc.w	r3, r3, fp
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006c7a:	3310      	adds	r3, #16
 8006c7c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c80:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006c8a:	3310      	adds	r3, #16
 8006c8c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006c96:	3310      	adds	r3, #16
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	1a84      	subs	r4, r0, r2
 8006c9e:	eb61 0503 	sbc.w	r5, r1, r3
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	4698      	mov	r8, r3
 8006caa:	4691      	mov	r9, r2
 8006cac:	4544      	cmp	r4, r8
 8006cae:	eb75 0309 	sbcs.w	r3, r5, r9
 8006cb2:	d20c      	bcs.n	8006cce <np_cmd_nand_write_data+0x2ee>
        prog->bytes_written == prog->len)
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006cba:	3310      	adds	r3, #16
 8006cbc:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8006cc6:	4299      	cmp	r1, r3
 8006cc8:	bf08      	it	eq
 8006cca:	4290      	cmpeq	r0, r2
 8006ccc:	d11b      	bne.n	8006d06 <np_cmd_nand_write_data+0x326>
    {
        // 发送写入确认响应
        if (np_send_write_ack(prog->bytes_written))
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006cd4:	3310      	adds	r3, #16
 8006cd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cda:	4610      	mov	r0, r2
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f7ff fbed 	bl	80064bc <np_send_write_ack>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <np_cmd_nand_write_data+0x30e>
            return -1;
 8006ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cec:	e02c      	b.n	8006d48 <np_cmd_nand_write_data+0x368>
        prog->bytes_ack = prog->bytes_written;
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006cf4:	3310      	adds	r3, #16
 8006cf6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006d00:	3310      	adds	r3, #16
 8006d02:	e9c3 0100 	strd	r0, r1, [r3]
    }

    // 检查实际写入的数据长度是否超过指定的长度
    if (prog->bytes_written > prog->len)
 8006d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d08:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006d0c:	3310      	adds	r3, #16
 8006d0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d14:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8006d18:	4290      	cmp	r0, r2
 8006d1a:	eb71 0303 	sbcs.w	r3, r1, r3
 8006d1e:	d212      	bcs.n	8006d46 <np_cmd_nand_write_data+0x366>
    {
        ERROR_PRINT("实际写入数据长度0x%" PRIx64 "超过0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006d26:	3310      	adds	r3, #16
 8006d28:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006d32:	e9cd 2300 	strd	r2, r3, [sp]
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4806      	ldr	r0, [pc, #24]	; (8006d54 <np_cmd_nand_write_data+0x374>)
 8006d3c:	f00c fcf4 	bl	8013728 <iprintf>
        return NP_ERR_LEN_EXCEEDED;
 8006d40:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8006d44:	e000      	b.n	8006d48 <np_cmd_nand_write_data+0x368>
    }

    return 0;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3740      	adds	r7, #64	; 0x40
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d52:	bf00      	nop
 8006d54:	08014d6c 	.word	0x08014d6c

08006d58 <np_cmd_nand_write_end>:

// 结束NAND写入命令的函数
static int np_cmd_nand_write_end(np_prog_t *prog)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
    // 清除地址已设置的标志位
    prog->addr_is_set = 0;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	631a      	str	r2, [r3, #48]	; 0x30

    // 检查是否有未写入的数据
    if (prog->page.offset)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <np_cmd_nand_write_end+0x34>
    {
        ERROR_PRINT("未写入长度为0x%lx的数据\r\n",
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006d7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4806      	ldr	r0, [pc, #24]	; (8006d9c <np_cmd_nand_write_end+0x44>)
 8006d82:	f00c fcd1 	bl	8013728 <iprintf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8006d86:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8006d8a:	e002      	b.n	8006d92 <np_cmd_nand_write_end+0x3a>
    }

    // 发送操作完成的响应
    return np_send_ok_status();
 8006d8c:	f7fe ff1e 	bl	8005bcc <np_send_ok_status>
 8006d90:	4603      	mov	r3, r0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	08014da0 	.word	0x08014da0

08006da0 <np_cmd_nand_write>:

// 执行NAND写入命令的函数
static int np_cmd_nand_write(np_prog_t *prog)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]

    // 根据命令类型执行相应的操作
    switch (cmd->code)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b05      	cmp	r3, #5
 8006db8:	d013      	beq.n	8006de2 <np_cmd_nand_write+0x42>
 8006dba:	2b05      	cmp	r3, #5
 8006dbc:	dc19      	bgt.n	8006df2 <np_cmd_nand_write+0x52>
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d002      	beq.n	8006dc8 <np_cmd_nand_write+0x28>
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d008      	beq.n	8006dd8 <np_cmd_nand_write+0x38>
    case NP_CMD_NAND_WRITE_E:
        ret = np_cmd_nand_write_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8006dc6:	e014      	b.n	8006df2 <np_cmd_nand_write+0x52>
        led_wr_set(true);
 8006dc8:	2001      	movs	r0, #1
 8006dca:	f7fe fd3b 	bl	8005844 <led_wr_set>
        ret = np_cmd_nand_write_start(prog);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff fb9c 	bl	800650c <np_cmd_nand_write_start>
 8006dd4:	60f8      	str	r0, [r7, #12]
        break;
 8006dd6:	e00d      	b.n	8006df4 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_data(prog);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fe01 	bl	80069e0 <np_cmd_nand_write_data>
 8006dde:	60f8      	str	r0, [r7, #12]
        break;
 8006de0:	e008      	b.n	8006df4 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_end(prog);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff ffb8 	bl	8006d58 <np_cmd_nand_write_end>
 8006de8:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8006dea:	2000      	movs	r0, #0
 8006dec:	f7fe fd2a 	bl	8005844 <led_wr_set>
        break;
 8006df0:	e000      	b.n	8006df4 <np_cmd_nand_write+0x54>
        break;
 8006df2:	bf00      	nop
    }

    // 如果操作失败，关闭写入指示灯
    if (ret < 0)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da02      	bge.n	8006e00 <np_cmd_nand_write+0x60>
        led_wr_set(false);
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	f7fe fd22 	bl	8005844 <led_wr_set>

    return ret;
 8006e00:	68fb      	ldr	r3, [r7, #12]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <np_nand_read>:

// 执行NAND读取操作的函数
static int np_nand_read(uint64_t addr, np_page_t *page, uint32_t page_size,
    uint32_t block_size, np_prog_t *prog)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
    uint32_t status;

    // 调用硬件抽象层函数执行页面读取操作
    status = hal[prog->hal]->read_page(page->buf, page->page, page_size);
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e20:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8006e24:	461a      	mov	r2, r3
 8006e26:	4b1c      	ldr	r3, [pc, #112]	; (8006e98 <np_nand_read+0x8c>)
 8006e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006e36:	f8d2 11c0 	ldr.w	r1, [r2, #448]	; 0x1c0
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	4798      	blx	r3
 8006e3e:	6178      	str	r0, [r7, #20]
    switch (status)
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d014      	beq.n	8006e70 <np_nand_read+0x64>
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d817      	bhi.n	8006e7c <np_nand_read+0x70>
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01a      	beq.n	8006e88 <np_nand_read+0x7c>
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d111      	bne.n	8006e7c <np_nand_read+0x70>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果读取状态为错误，发送坏块信息
        if (np_send_bad_block_info(addr, block_size, false))
 8006e58:	2300      	movs	r3, #0
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e60:	f7fe fef4 	bl	8005c4c <np_send_bad_block_info>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d010      	beq.n	8006e8c <np_nand_read+0x80>
            return -1;
 8006e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6e:	e00f      	b.n	8006e90 <np_nand_read+0x84>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND读取超时，地址：0x%" PRIx64 "\r\n", addr);
 8006e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e74:	4809      	ldr	r0, [pc, #36]	; (8006e9c <np_nand_read+0x90>)
 8006e76:	f00c fc57 	bl	8013728 <iprintf>
        break;
 8006e7a:	e008      	b.n	8006e8e <np_nand_read+0x82>
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 8006e7c:	4808      	ldr	r0, [pc, #32]	; (8006ea0 <np_nand_read+0x94>)
 8006e7e:	f00c fcb9 	bl	80137f4 <puts>
        return -1;
 8006e82:	f04f 33ff 	mov.w	r3, #4294967295
 8006e86:	e003      	b.n	8006e90 <np_nand_read+0x84>
        break;
 8006e88:	bf00      	nop
 8006e8a:	e000      	b.n	8006e8e <np_nand_read+0x82>
        break;
 8006e8c:	bf00      	nop
    }

    return 0;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20000040 	.word	0x20000040
 8006e9c:	08014dcc 	.word	0x08014dcc
 8006ea0:	08014920 	.word	0x08014920

08006ea4 <_np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int _np_cmd_nand_read(np_prog_t *prog)
{
 8006ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ea8:	b0b4      	sub	sp, #208	; 0xd0
 8006eaa:	af04      	add	r7, sp, #16
 8006eac:	6778      	str	r0, [r7, #116]	; 0x74
    np_read_cmd_t *read_cmd;
    bool skip_bb, inc_spare;
    uint64_t addr, len, total_size;
    uint32_t send_len, block_size, page_size, pages,
        pages_in_block;
    uint32_t resp_header_size = offsetof(np_resp_t, data);
 8006eae:	2302      	movs	r3, #2
 8006eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t tx_data_len = sizeof(np_packet_send_buf) - resp_header_size;
 8006eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eb8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006ebc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    np_resp_t *resp = (np_resp_t *)np_packet_send_buf;
 8006ec0:	4bb9      	ldr	r3, [pc, #740]	; (80071a8 <_np_cmd_nand_read+0x304>)
 8006ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_read_cmd_t))
 8006ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b11      	cmp	r3, #17
 8006ecc:	d808      	bhi.n	8006ee0 <_np_cmd_nand_read+0x3c>
    {
        ERROR_PRINT("读取命令缓冲区长度错误 %lu\r\n",
 8006ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	48b5      	ldr	r0, [pc, #724]	; (80071ac <_np_cmd_nand_read+0x308>)
 8006ed6:	f00c fc27 	bl	8013728 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8006eda:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8006ede:	e283      	b.n	80073e8 <_np_cmd_nand_read+0x544>
    }

    read_cmd = (np_read_cmd_t *)prog->rx_buf;
 8006ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    addr = read_cmd->addr;
 8006ee8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006eec:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8006ef0:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8006ef4:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
    len = read_cmd->len;
 8006ef8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006efc:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8006f00:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8006f04:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    skip_bb = read_cmd->flags.skip_bb;
 8006f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f0c:	7c5b      	ldrb	r3, [r3, #17]
 8006f0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bf14      	ite	ne
 8006f18:	2301      	movne	r3, #1
 8006f1a:	2300      	moveq	r3, #0
 8006f1c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    inc_spare = read_cmd->flags.inc_spare;
 8006f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f24:	7c5b      	ldrb	r3, [r3, #17]
 8006f26:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	bf14      	ite	ne
 8006f30:	2301      	movne	r3, #1
 8006f32:	2300      	moveq	r3, #0
 8006f34:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    DEBUG_PRINT("读取地址 0x%" PRIx64 " 长度为 0x%" PRIx64 " 的数据命令\r\n", addr,
 8006f38:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006f3c:	e9cd 2300 	strd	r2, r3, [sp]
 8006f40:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f44:	489a      	ldr	r0, [pc, #616]	; (80071b0 <_np_cmd_nand_read+0x30c>)
 8006f46:	f00c fbef 	bl	8013728 <iprintf>
        len);

    if (inc_spare)
 8006f4a:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d056      	beq.n	8007000 <_np_cmd_nand_read+0x15c>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8006f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f54:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8006f58:	3330      	adds	r3, #48	; 0x30
 8006f5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f64:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006f68:	2200      	movs	r2, #0
 8006f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f6e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006f72:	f7fd f97d 	bl	8004270 <__aeabi_uldivmod>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        pages_in_block = prog->chip_info.block_size /
 8006f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f86:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 8006f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f90:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 8006f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8006f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006fa2:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8006fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006fac:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = pages_in_block * page_size;
 8006fb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fbe:	fb02 f303 	mul.w	r3, r2, r3
 8006fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = (uint64_t)pages * page_size;
 8006fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fca:	2200      	movs	r2, #0
 8006fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8006fce:	667a      	str	r2, [r7, #100]	; 0x64
 8006fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4698      	mov	r8, r3
 8006fd8:	4691      	mov	r9, r2
 8006fda:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006fde:	460b      	mov	r3, r1
 8006fe0:	fb08 f203 	mul.w	r2, r8, r3
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	fb03 f309 	mul.w	r3, r3, r9
 8006fea:	4413      	add	r3, r2
 8006fec:	4602      	mov	r2, r0
 8006fee:	fba2 4508 	umull	r4, r5, r2, r8
 8006ff2:	442b      	add	r3, r5
 8006ff4:	461d      	mov	r5, r3
 8006ff6:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 8006ffa:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 8006ffe:	e015      	b.n	800702c <_np_cmd_nand_read+0x188>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8007000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007002:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007006:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800700a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = prog->chip_info.block_size;
 800700e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007010:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007014:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007018:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = prog->chip_info.total_size;
 800701c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800701e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007022:	3330      	adds	r3, #48	; 0x30
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
    }

    if (addr + len > total_size)
 800702c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007030:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007034:	eb10 0a02 	adds.w	sl, r0, r2
 8007038:	eb41 0b03 	adc.w	fp, r1, r3
 800703c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007040:	4552      	cmp	r2, sl
 8007042:	eb73 030b 	sbcs.w	r3, r3, fp
 8007046:	d20f      	bcs.n	8007068 <_np_cmd_nand_read+0x1c4>
    {
        ERROR_PRINT("读取地址 0x%" PRIx64 "+0x%" PRIx64
 8007048:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800704c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007050:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007054:	e9cd 2300 	strd	r2, r3, [sp]
 8007058:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800705c:	4855      	ldr	r0, [pc, #340]	; (80071b4 <_np_cmd_nand_read+0x310>)
 800705e:	f00c fb63 	bl	8013728 <iprintf>
            " 超出芯片大小 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8007062:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007066:	e1bf      	b.n	80073e8 <_np_cmd_nand_read+0x544>
    }

    if (addr % page_size)
 8007068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800706c:	2200      	movs	r2, #0
 800706e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007070:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007072:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007076:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800707a:	f7fd f8f9 	bl	8004270 <__aeabi_uldivmod>
 800707e:	4313      	orrs	r3, r2
 8007080:	d00a      	beq.n	8007098 <_np_cmd_nand_read+0x1f4>
    {
        ERROR_PRINT("读取地址 0x%" PRIx64
 8007082:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800708c:	484a      	ldr	r0, [pc, #296]	; (80071b8 <_np_cmd_nand_read+0x314>)
 800708e:	f00c fb4b 	bl	8013728 <iprintf>
            " 不对齐于页面大小 0x%lx\r\n", addr, page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8007092:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8007096:	e1a7      	b.n	80073e8 <_np_cmd_nand_read+0x544>
    }

    if (!len)
 8007098:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800709c:	4313      	orrs	r3, r2
 800709e:	d105      	bne.n	80070ac <_np_cmd_nand_read+0x208>
    {
        ERROR_PRINT("长度为0\r\n");
 80070a0:	4846      	ldr	r0, [pc, #280]	; (80071bc <_np_cmd_nand_read+0x318>)
 80070a2:	f00c fba7 	bl	80137f4 <puts>
        return NP_ERR_LEN_INVALID;
 80070a6:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80070aa:	e19d      	b.n	80073e8 <_np_cmd_nand_read+0x544>
    }

    if (len % page_size)
 80070ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b0:	2200      	movs	r2, #0
 80070b2:	653b      	str	r3, [r7, #80]	; 0x50
 80070b4:	657a      	str	r2, [r7, #84]	; 0x54
 80070b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80070ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070be:	f7fd f8d7 	bl	8004270 <__aeabi_uldivmod>
 80070c2:	4313      	orrs	r3, r2
 80070c4:	d00a      	beq.n	80070dc <_np_cmd_nand_read+0x238>
    {
        ERROR_PRINT("读取长度 0x%" PRIx64
 80070c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80070d0:	483b      	ldr	r0, [pc, #236]	; (80071c0 <_np_cmd_nand_read+0x31c>)
 80070d2:	f00c fb29 	bl	8013728 <iprintf>
            " 不对齐于页面大小 0x%lx\r\n", len, page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 80070d6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80070da:	e185      	b.n	80073e8 <_np_cmd_nand_read+0x544>
    }

    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 80070dc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00d      	beq.n	8007100 <_np_cmd_nand_read+0x25c>
 80070e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d109      	bne.n	8007100 <_np_cmd_nand_read+0x25c>
 80070ec:	2100      	movs	r1, #0
 80070ee:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80070f0:	f7fe ff08 	bl	8005f04 <_np_cmd_read_bad_blocks>
 80070f4:	67f8      	str	r0, [r7, #124]	; 0x7c
 80070f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <_np_cmd_nand_read+0x25c>
        false)))
    {
        return ret;
 80070fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070fe:	e173      	b.n	80073e8 <_np_cmd_nand_read+0x544>
    }

    page.page = addr / page_size;
 8007100:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007104:	2200      	movs	r2, #0
 8007106:	64bb      	str	r3, [r7, #72]	; 0x48
 8007108:	64fa      	str	r2, [r7, #76]	; 0x4c
 800710a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800710e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007112:	f7fd f8ad 	bl	8004270 <__aeabi_uldivmod>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	4b2a      	ldr	r3, [pc, #168]	; (80071c4 <_np_cmd_nand_read+0x320>)
 800711c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007120:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    page.offset = 0;
 8007124:	4b27      	ldr	r3, [pc, #156]	; (80071c4 <_np_cmd_nand_read+0x320>)
 8007126:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800712a:	461a      	mov	r2, r3
 800712c:	2300      	movs	r3, #0
 800712e:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4

    resp->code = NP_RESP_DATA;
 8007132:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007136:	2300      	movs	r3, #0
 8007138:	7013      	strb	r3, [r2, #0]

    while (len)
 800713a:	e14f      	b.n	80073dc <_np_cmd_nand_read+0x538>
    {
        if (addr >= total_size)
 800713c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007140:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007144:	4290      	cmp	r0, r2
 8007146:	eb71 0303 	sbcs.w	r3, r1, r3
 800714a:	d30b      	bcc.n	8007164 <_np_cmd_nand_read+0x2c0>
        {
            ERROR_PRINT("读取地址 0x%" PRIx64
 800714c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007150:	e9cd 2300 	strd	r2, r3, [sp]
 8007154:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007158:	481b      	ldr	r0, [pc, #108]	; (80071c8 <_np_cmd_nand_read+0x324>)
 800715a:	f00c fae5 	bl	8013728 <iprintf>
                " 超出芯片大小 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 800715e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007162:	e141      	b.n	80073e8 <_np_cmd_nand_read+0x544>
        }

        if (skip_bb && nand_bad_block_table_lookup(page.page))
 8007164:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8007168:	2b00      	cmp	r3, #0
 800716a:	d076      	beq.n	800725a <_np_cmd_nand_read+0x3b6>
 800716c:	4b15      	ldr	r3, [pc, #84]	; (80071c4 <_np_cmd_nand_read+0x320>)
 800716e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007172:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fcc0 	bl	8005afc <nand_bad_block_table_lookup>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d06b      	beq.n	800725a <_np_cmd_nand_read+0x3b6>
        {
            DEBUG_PRINT("跳过坏块地址 0x%" PRIx64 "\r\n", addr);
 8007182:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007186:	4811      	ldr	r0, [pc, #68]	; (80071cc <_np_cmd_nand_read+0x328>)
 8007188:	f00c face 	bl	8013728 <iprintf>
            if (np_send_bad_block_info(addr, block_size, true))
 800718c:	2301      	movs	r3, #1
 800718e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007192:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007196:	f7fe fd59 	bl	8005c4c <np_send_bad_block_info>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d017      	beq.n	80071d0 <_np_cmd_nand_read+0x32c>
                return -1;
 80071a0:	f04f 33ff 	mov.w	r3, #4294967295
 80071a4:	e120      	b.n	80073e8 <_np_cmd_nand_read+0x544>
 80071a6:	bf00      	nop
 80071a8:	20002f10 	.word	0x20002f10
 80071ac:	08014df8 	.word	0x08014df8
 80071b0:	08014e28 	.word	0x08014e28
 80071b4:	08014e60 	.word	0x08014e60
 80071b8:	08014ea0 	.word	0x08014ea0
 80071bc:	08014edc 	.word	0x08014edc
 80071c0:	08014ef0 	.word	0x08014ef0
 80071c4:	20002f50 	.word	0x20002f50
 80071c8:	08014f2c 	.word	0x08014f2c
 80071cc:	08014f64 	.word	0x08014f64

            /* 在部分读取时不计算坏块 */
            if (read_cmd->len == total_size)
 80071d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071d4:	f8d3 0009 	ldr.w	r0, [r3, #9]
 80071d8:	f8d3 100d 	ldr.w	r1, [r3, #13]
 80071dc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80071e0:	428b      	cmp	r3, r1
 80071e2:	bf08      	it	eq
 80071e4:	4282      	cmpeq	r2, r0
 80071e6:	d113      	bne.n	8007210 <_np_cmd_nand_read+0x36c>
                len -= block_size;
 80071e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071ec:	2200      	movs	r2, #0
 80071ee:	643b      	str	r3, [r7, #64]	; 0x40
 80071f0:	647a      	str	r2, [r7, #68]	; 0x44
 80071f2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80071f6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80071fa:	4621      	mov	r1, r4
 80071fc:	1a51      	subs	r1, r2, r1
 80071fe:	61b9      	str	r1, [r7, #24]
 8007200:	4629      	mov	r1, r5
 8007202:	eb63 0301 	sbc.w	r3, r3, r1
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800720c:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
            addr += block_size;
 8007210:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007214:	2200      	movs	r2, #0
 8007216:	63bb      	str	r3, [r7, #56]	; 0x38
 8007218:	63fa      	str	r2, [r7, #60]	; 0x3c
 800721a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800721e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007222:	4621      	mov	r1, r4
 8007224:	1851      	adds	r1, r2, r1
 8007226:	6139      	str	r1, [r7, #16]
 8007228:	4629      	mov	r1, r5
 800722a:	414b      	adcs	r3, r1
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007232:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
            page.page += block_size / page_size;
 8007236:	4b6f      	ldr	r3, [pc, #444]	; (80073f4 <_np_cmd_nand_read+0x550>)
 8007238:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800723c:	f8d3 11c0 	ldr.w	r1, [r3, #448]	; 0x1c0
 8007240:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007248:	fbb2 f3f3 	udiv	r3, r2, r3
 800724c:	18ca      	adds	r2, r1, r3
 800724e:	4b69      	ldr	r3, [pc, #420]	; (80073f4 <_np_cmd_nand_read+0x550>)
 8007250:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007254:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
            continue;
 8007258:	e0c0      	b.n	80073dc <_np_cmd_nand_read+0x538>
        }

        if (np_nand_read(addr, &page, page_size, block_size, prog))
 800725a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007268:	4a62      	ldr	r2, [pc, #392]	; (80073f4 <_np_cmd_nand_read+0x550>)
 800726a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800726e:	f7ff fdcd 	bl	8006e0c <np_nand_read>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d07e      	beq.n	8007376 <_np_cmd_nand_read+0x4d2>
            return NP_ERR_NAND_RD;
 8007278:	f06f 0367 	mvn.w	r3, #103	; 0x67
 800727c:	e0b4      	b.n	80073e8 <_np_cmd_nand_read+0x544>

        while (page.offset < page_size && len)
        {
            if (page_size - page.offset >= tx_data_len)
 800727e:	4b5d      	ldr	r3, [pc, #372]	; (80073f4 <_np_cmd_nand_read+0x550>)
 8007280:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007284:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8007288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800728c:	1a9a      	subs	r2, r3, r2
 800728e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007292:	4293      	cmp	r3, r2
 8007294:	d804      	bhi.n	80072a0 <_np_cmd_nand_read+0x3fc>
                send_len = tx_data_len;
 8007296:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800729a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800729e:	e009      	b.n	80072b4 <_np_cmd_nand_read+0x410>
            else
                send_len = page_size - page.offset;
 80072a0:	4b54      	ldr	r3, [pc, #336]	; (80073f4 <_np_cmd_nand_read+0x550>)
 80072a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072a6:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80072aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072ae:	1a9b      	subs	r3, r3, r2
 80072b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            if (send_len > len)
 80072b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072b8:	2200      	movs	r2, #0
 80072ba:	633b      	str	r3, [r7, #48]	; 0x30
 80072bc:	637a      	str	r2, [r7, #52]	; 0x34
 80072be:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80072c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80072c6:	4621      	mov	r1, r4
 80072c8:	428a      	cmp	r2, r1
 80072ca:	4629      	mov	r1, r5
 80072cc:	418b      	sbcs	r3, r1
 80072ce:	d203      	bcs.n	80072d8 <_np_cmd_nand_read+0x434>
                send_len = len;
 80072d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            memcpy(resp->data, page.buf + page.offset, send_len);
 80072d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072dc:	1c98      	adds	r0, r3, #2
 80072de:	4b45      	ldr	r3, [pc, #276]	; (80073f4 <_np_cmd_nand_read+0x550>)
 80072e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072e4:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80072e8:	4b42      	ldr	r3, [pc, #264]	; (80073f4 <_np_cmd_nand_read+0x550>)
 80072ea:	4413      	add	r3, r2
 80072ec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80072f0:	4619      	mov	r1, r3
 80072f2:	f00c fbda 	bl	8013aaa <memcpy>

            while (!np_comm_cb->send_ready());
 80072f6:	bf00      	nop
 80072f8:	4b3f      	ldr	r3, [pc, #252]	; (80073f8 <_np_cmd_nand_read+0x554>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	4798      	blx	r3
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0f8      	beq.n	80072f8 <_np_cmd_nand_read+0x454>

            resp->info = send_len;
 8007306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800730a:	b2db      	uxtb	r3, r3
 800730c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007310:	7053      	strb	r3, [r2, #1]
            if (np_comm_cb->send(np_packet_send_buf,
 8007312:	4b39      	ldr	r3, [pc, #228]	; (80073f8 <_np_cmd_nand_read+0x554>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681c      	ldr	r4, [r3, #0]
 8007318:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800731c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007320:	4413      	add	r3, r2
 8007322:	4619      	mov	r1, r3
 8007324:	4835      	ldr	r0, [pc, #212]	; (80073fc <_np_cmd_nand_read+0x558>)
 8007326:	47a0      	blx	r4
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <_np_cmd_nand_read+0x490>
                resp_header_size + send_len))
            {
                return -1;
 800732e:	f04f 33ff 	mov.w	r3, #4294967295
 8007332:	e059      	b.n	80073e8 <_np_cmd_nand_read+0x544>
            }

            page.offset += send_len;
 8007334:	4b2f      	ldr	r3, [pc, #188]	; (80073f4 <_np_cmd_nand_read+0x550>)
 8007336:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800733a:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 800733e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007342:	441a      	add	r2, r3
 8007344:	4b2b      	ldr	r3, [pc, #172]	; (80073f4 <_np_cmd_nand_read+0x550>)
 8007346:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800734a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            len -= send_len;
 800734e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007352:	2200      	movs	r2, #0
 8007354:	62bb      	str	r3, [r7, #40]	; 0x28
 8007356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007358:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800735c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8007360:	4621      	mov	r1, r4
 8007362:	1a51      	subs	r1, r2, r1
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	4629      	mov	r1, r5
 8007368:	eb63 0301 	sbc.w	r3, r3, r1
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007372:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
        while (page.offset < page_size && len)
 8007376:	4b1f      	ldr	r3, [pc, #124]	; (80073f4 <_np_cmd_nand_read+0x550>)
 8007378:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800737c:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8007380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007384:	4293      	cmp	r3, r2
 8007386:	d904      	bls.n	8007392 <_np_cmd_nand_read+0x4ee>
 8007388:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800738c:	4313      	orrs	r3, r2
 800738e:	f47f af76 	bne.w	800727e <_np_cmd_nand_read+0x3da>
        }

        addr += page_size;
 8007392:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007396:	2200      	movs	r2, #0
 8007398:	623b      	str	r3, [r7, #32]
 800739a:	627a      	str	r2, [r7, #36]	; 0x24
 800739c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80073a0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80073a4:	4621      	mov	r1, r4
 80073a6:	1851      	adds	r1, r2, r1
 80073a8:	6039      	str	r1, [r7, #0]
 80073aa:	4629      	mov	r1, r5
 80073ac:	414b      	adcs	r3, r1
 80073ae:	607b      	str	r3, [r7, #4]
 80073b0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80073b4:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
        page.offset = 0;
 80073b8:	4b0e      	ldr	r3, [pc, #56]	; (80073f4 <_np_cmd_nand_read+0x550>)
 80073ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073be:	461a      	mov	r2, r3
 80073c0:	2300      	movs	r3, #0
 80073c2:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
        page.page++;
 80073c6:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <_np_cmd_nand_read+0x550>)
 80073c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073cc:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	4b08      	ldr	r3, [pc, #32]	; (80073f4 <_np_cmd_nand_read+0x550>)
 80073d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073d8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    while (len)
 80073dc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f47f aeab 	bne.w	800713c <_np_cmd_nand_read+0x298>
    }

    return 0;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	37c0      	adds	r7, #192	; 0xc0
 80073ec:	46bd      	mov	sp, r7
 80073ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073f2:	bf00      	nop
 80073f4:	20002f50 	.word	0x20002f50
 80073f8:	20000cc4 	.word	0x20000cc4
 80073fc:	20002f10 	.word	0x20002f10

08007400 <np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int np_cmd_nand_read(np_prog_t *prog)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 8007408:	2001      	movs	r0, #1
 800740a:	f7fe fa2d 	bl	8005868 <led_rd_set>
    ret = _np_cmd_nand_read(prog); // 执行NAND读取命令
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff fd48 	bl	8006ea4 <_np_cmd_nand_read>
 8007414:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 8007416:	2000      	movs	r0, #0
 8007418:	f7fe fa26 	bl	8005868 <led_rd_set>

    return ret;
 800741c:	68fb      	ldr	r3, [r7, #12]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <np_fill_chip_info>:

// 填充芯片信息
static void np_fill_chip_info(np_conf_cmd_t *conf_cmd, np_prog_t *prog)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
    prog->chip_info.page_size = conf_cmd->page_size;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800743c:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
    prog->chip_info.block_size = conf_cmd->block_size;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800744c:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
    prog->chip_info.total_size = conf_cmd->total_size;
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	f8d1 200a 	ldr.w	r2, [r1, #10]
 8007456:	f8d1 300e 	ldr.w	r3, [r1, #14]
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	f501 5108 	add.w	r1, r1, #8704	; 0x2200
 8007460:	3130      	adds	r1, #48	; 0x30
 8007462:	e9c1 2300 	strd	r2, r3, [r1]
    prog->chip_info.spare_size = conf_cmd->spare_size;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 3012 	ldr.w	r3, [r3, #18]
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007472:	f8c2 3238 	str.w	r3, [r2, #568]	; 0x238
    prog->chip_info.bb_mark_off = conf_cmd->bb_mark_off;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	7d9a      	ldrb	r2, [r3, #22]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007480:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
    prog->chip_is_conf = 1;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2201      	movs	r2, #1
 8007488:	639a      	str	r2, [r3, #56]	; 0x38
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
	...

08007498 <np_print_chip_info>:

// 打印芯片信息
static void np_print_chip_info(np_prog_t *prog)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
    DEBUG_PRINT("页面大小: %lu\r\n", prog->chip_info.page_size);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074a6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80074aa:	4619      	mov	r1, r3
 80074ac:	4815      	ldr	r0, [pc, #84]	; (8007504 <np_print_chip_info+0x6c>)
 80074ae:	f00c f93b 	bl	8013728 <iprintf>
    DEBUG_PRINT("块大小: %lu\r\n", prog->chip_info.block_size);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074b8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80074bc:	4619      	mov	r1, r3
 80074be:	4812      	ldr	r0, [pc, #72]	; (8007508 <np_print_chip_info+0x70>)
 80074c0:	f00c f932 	bl	8013728 <iprintf>
    DEBUG_PRINT("总大小: 0x%" PRIx64 "\r\n", prog->chip_info.total_size);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80074ca:	3330      	adds	r3, #48	; 0x30
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	480e      	ldr	r0, [pc, #56]	; (800750c <np_print_chip_info+0x74>)
 80074d2:	f00c f929 	bl	8013728 <iprintf>
    DEBUG_PRINT("备用区大小: %lu\r\n", prog->chip_info.spare_size);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074dc:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80074e0:	4619      	mov	r1, r3
 80074e2:	480b      	ldr	r0, [pc, #44]	; (8007510 <np_print_chip_info+0x78>)
 80074e4:	f00c f920 	bl	8013728 <iprintf>
    DEBUG_PRINT("坏块标记偏移量: %d\r\n", prog->chip_info.bb_mark_off);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074ee:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 80074f2:	4619      	mov	r1, r3
 80074f4:	4807      	ldr	r0, [pc, #28]	; (8007514 <np_print_chip_info+0x7c>)
 80074f6:	f00c f917 	bl	8013728 <iprintf>
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	08014f80 	.word	0x08014f80
 8007508:	08014f94 	.word	0x08014f94
 800750c:	08014fa8 	.word	0x08014fa8
 8007510:	08014fbc 	.word	0x08014fbc
 8007514:	08014fd4 	.word	0x08014fd4

08007518 <np_cmd_nand_conf>:

// 执行NAND配置命令
static int np_cmd_nand_conf(np_prog_t *prog)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
    np_conf_cmd_t *conf_cmd;

    DEBUG_PRINT("芯片配置命令\r\n");
 8007520:	4825      	ldr	r0, [pc, #148]	; (80075b8 <np_cmd_nand_conf+0xa0>)
 8007522:	f00c f967 	bl	80137f4 <puts>

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_conf_cmd_t))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2b16      	cmp	r3, #22
 800752c:	d808      	bhi.n	8007540 <np_cmd_nand_conf+0x28>
    {
        ERROR_PRINT("配置命令缓冲区长度错误 %lu\r\n",
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	4619      	mov	r1, r3
 8007534:	4821      	ldr	r0, [pc, #132]	; (80075bc <np_cmd_nand_conf+0xa4>)
 8007536:	f00c f8f7 	bl	8013728 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 800753a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800753e:	e036      	b.n	80075ae <np_cmd_nand_conf+0x96>
    }

    conf_cmd = (np_conf_cmd_t *)prog->rx_buf;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	60fb      	str	r3, [r7, #12]

    np_fill_chip_info(conf_cmd, prog); // 填充芯片信息
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f7ff ff6c 	bl	8007426 <np_fill_chip_info>
    np_print_chip_info(prog); // 打印芯片信息
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff ffa2 	bl	8007498 <np_print_chip_info>

    prog->hal = conf_cmd->hal;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	785a      	ldrb	r2, [r3, #1]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800755e:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007568:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 800756c:	461a      	mov	r2, r3
 800756e:	4b14      	ldr	r3, [pc, #80]	; (80075c0 <np_cmd_nand_conf+0xa8>)
 8007570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	f102 0017 	add.w	r0, r2, #23
        prog->rx_buf_len - sizeof(np_conf_cmd_t)))
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6852      	ldr	r2, [r2, #4]
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8007580:	3a17      	subs	r2, #23
 8007582:	4611      	mov	r1, r2
 8007584:	4798      	blx	r3
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d008      	beq.n	800759e <np_cmd_nand_conf+0x86>
    {
        ERROR_PRINT("HAL配置命令缓冲区长度错误 %lu\r\n",
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	4619      	mov	r1, r3
 8007592:	480c      	ldr	r0, [pc, #48]	; (80075c4 <np_cmd_nand_conf+0xac>)
 8007594:	f00c f8c8 	bl	8013728 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8007598:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800759c:	e007      	b.n	80075ae <np_cmd_nand_conf+0x96>
    }

    nand_bad_block_table_init(); // 初始化坏块表
 800759e:	f7fe fa7d 	bl	8005a9c <nand_bad_block_table_init>
    prog->bb_is_read = 0;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	635a      	str	r2, [r3, #52]	; 0x34

    return np_send_ok_status();
 80075a8:	f7fe fb10 	bl	8005bcc <np_send_ok_status>
 80075ac:	4603      	mov	r3, r0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	08014ff0 	.word	0x08014ff0
 80075bc:	08015004 	.word	0x08015004
 80075c0:	20000040 	.word	0x20000040
 80075c4:	08015034 	.word	0x08015034

080075c8 <np_send_bad_blocks>:

// 发送坏块信息
static int np_send_bad_blocks(np_prog_t *prog)
{
 80075c8:	b5b0      	push	{r4, r5, r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
    uint32_t page;
    void *bb_iter;

    // 遍历坏块表，并发送坏块信息
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 80075d0:	f107 0308 	add.w	r3, r7, #8
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fab5 	bl	8005b44 <nand_bad_block_table_iter_alloc>
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	e021      	b.n	8007622 <np_send_bad_blocks+0x5a>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
    {
        if (np_send_bad_block_info(page * prog->chip_info.page_size,
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075e4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
 80075ee:	2200      	movs	r2, #0
 80075f0:	461c      	mov	r4, r3
 80075f2:	4615      	mov	r5, r2
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80075fa:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80075fe:	2300      	movs	r3, #0
 8007600:	4620      	mov	r0, r4
 8007602:	4629      	mov	r1, r5
 8007604:	f7fe fb22 	bl	8005c4c <np_send_bad_block_info>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <np_send_bad_blocks+0x4c>
            prog->chip_info.block_size, false))
        {
            return -1;
 800760e:	f04f 33ff 	mov.w	r3, #4294967295
 8007612:	e00a      	b.n	800762a <np_send_bad_blocks+0x62>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
 8007614:	f107 0308 	add.w	r3, r7, #8
 8007618:	4619      	mov	r1, r3
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f7fe faac 	bl	8005b78 <nand_bad_block_table_iter_next>
 8007620:	60f8      	str	r0, [r7, #12]
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1da      	bne.n	80075de <np_send_bad_blocks+0x16>
        }
    }

    return 0;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bdb0      	pop	{r4, r5, r7, pc}

08007632 <np_cmd_read_bad_blocks>:

// 执行读取坏块命令
int np_cmd_read_bad_blocks(np_prog_t *prog)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 800763a:	2001      	movs	r0, #1
 800763c:	f7fe f914 	bl	8005868 <led_rd_set>
    nand_bad_block_table_init(); // 初始化坏块表
 8007640:	f7fe fa2c 	bl	8005a9c <nand_bad_block_table_init>
    ret = _np_cmd_read_bad_blocks(prog, true); // 执行读取坏块命令
 8007644:	2101      	movs	r1, #1
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7fe fc5c 	bl	8005f04 <_np_cmd_read_bad_blocks>
 800764c:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 800764e:	2000      	movs	r0, #0
 8007650:	f7fe f90a 	bl	8005868 <led_rd_set>

    if (ret || (ret = np_send_bad_blocks(prog))) // 发送坏块信息
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d106      	bne.n	8007668 <np_cmd_read_bad_blocks+0x36>
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff ffb4 	bl	80075c8 <np_send_bad_blocks>
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <np_cmd_read_bad_blocks+0x3a>
        return ret;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	e002      	b.n	8007672 <np_cmd_read_bad_blocks+0x40>

    return np_send_ok_status(); // 发送成功状态
 800766c:	f7fe faae 	bl	8005bcc <np_send_ok_status>
 8007670:	4603      	mov	r3, r0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
	...

0800767c <np_cmd_version_get>:

// 获取版本号命令
int np_cmd_version_get(np_prog_t *prog)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
    np_resp_version_t resp;
    size_t resp_len = sizeof(resp);
 8007684:	2306      	movs	r3, #6
 8007686:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("读取版本号命令\r\n");
 8007688:	4810      	ldr	r0, [pc, #64]	; (80076cc <np_cmd_version_get+0x50>)
 800768a:	f00c f8b3 	bl	80137f4 <puts>

    resp.header.code = NP_RESP_DATA;
 800768e:	2300      	movs	r3, #0
 8007690:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	3b02      	subs	r3, #2
 8007698:	b2db      	uxtb	r3, r3
 800769a:	737b      	strb	r3, [r7, #13]
    resp.version.major = SW_VERSION_MAJOR;
 800769c:	2303      	movs	r3, #3
 800769e:	73bb      	strb	r3, [r7, #14]
    resp.version.minor = SW_VERSION_MINOR;
 80076a0:	2305      	movs	r3, #5
 80076a2:	73fb      	strb	r3, [r7, #15]
    resp.version.build = SW_VERSION_BUILD;
 80076a4:	2300      	movs	r3, #0
 80076a6:	823b      	strh	r3, [r7, #16]

    if (np_comm_cb)
 80076a8:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <np_cmd_version_get+0x54>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <np_cmd_version_get+0x44>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 80076b0:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <np_cmd_version_get+0x54>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f107 020c 	add.w	r2, r7, #12
 80076ba:	6979      	ldr	r1, [r7, #20]
 80076bc:	4610      	mov	r0, r2
 80076be:	4798      	blx	r3

    return 0;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	08015068 	.word	0x08015068
 80076d0:	20000cc4 	.word	0x20000cc4

080076d4 <np_boot_config_read>:

// 读取引导配置
static int np_boot_config_read(boot_config_t *config)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
    if (flash_read(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 80076dc:	2201      	movs	r2, #1
 80076de:	6879      	ldr	r1, [r7, #4]
 80076e0:	4806      	ldr	r0, [pc, #24]	; (80076fc <np_boot_config_read+0x28>)
 80076e2:	f7fd f93f 	bl	8004964 <flash_read>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	da02      	bge.n	80076f2 <np_boot_config_read+0x1e>
        < 0)
    {
        return -1;
 80076ec:	f04f 33ff 	mov.w	r3, #4294967295
 80076f0:	e000      	b.n	80076f4 <np_boot_config_read+0x20>
    }
    
    return 0;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	08003800 	.word	0x08003800

08007700 <np_boot_config_write>:

// 写入引导配置
static int np_boot_config_write(boot_config_t *config)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
    if (flash_page_erase(BOOT_CONFIG_ADDR) < 0)
 8007708:	480c      	ldr	r0, [pc, #48]	; (800773c <np_boot_config_write+0x3c>)
 800770a:	f7fd f8d3 	bl	80048b4 <flash_page_erase>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	da02      	bge.n	800771a <np_boot_config_write+0x1a>
        return -1;
 8007714:	f04f 33ff 	mov.w	r3, #4294967295
 8007718:	e00b      	b.n	8007732 <np_boot_config_write+0x32>

    if (flash_write(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 800771a:	2201      	movs	r2, #1
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4807      	ldr	r0, [pc, #28]	; (800773c <np_boot_config_write+0x3c>)
 8007720:	f7fd f8eb 	bl	80048fa <flash_write>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	da02      	bge.n	8007730 <np_boot_config_write+0x30>
        < 0)
    {
        return -1;
 800772a:	f04f 33ff 	mov.w	r3, #4294967295
 800772e:	e000      	b.n	8007732 <np_boot_config_write+0x32>
    }

    return 0;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	08003800 	.word	0x08003800

08007740 <np_cmd_active_image_get>:

// 获取活动镜像命令
static int np_cmd_active_image_get(np_prog_t *prog)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;
    np_resp_active_image_t resp;
    size_t resp_len = sizeof(resp);
 8007748:	2303      	movs	r3, #3
 800774a:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("获取活动镜像命令\r\n");
 800774c:	481c      	ldr	r0, [pc, #112]	; (80077c0 <np_cmd_active_image_get+0x80>)
 800774e:	f00c f851 	bl	80137f4 <puts>

    if (prog->active_image == 0xff)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007758:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 800775c:	2bff      	cmp	r3, #255	; 0xff
 800775e:	d110      	bne.n	8007782 <np_cmd_active_image_get+0x42>
    {
        if (np_boot_config_read(&boot_config))
 8007760:	f107 0310 	add.w	r3, r7, #16
 8007764:	4618      	mov	r0, r3
 8007766:	f7ff ffb5 	bl	80076d4 <np_boot_config_read>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <np_cmd_active_image_get+0x36>
            return NP_ERR_INTERNAL;
 8007770:	f04f 33ff 	mov.w	r3, #4294967295
 8007774:	e01f      	b.n	80077b6 <np_cmd_active_image_get+0x76>
        prog->active_image = boot_config.active_image;
 8007776:	7c3a      	ldrb	r2, [r7, #16]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800777e:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    }

    resp.header.code = NP_RESP_DATA;
 8007782:	2300      	movs	r3, #0
 8007784:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	b2db      	uxtb	r3, r3
 800778a:	3b02      	subs	r3, #2
 800778c:	b2db      	uxtb	r3, r3
 800778e:	737b      	strb	r3, [r7, #13]
    resp.active_image = prog->active_image;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007796:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 800779a:	73bb      	strb	r3, [r7, #14]

    if (np_comm_cb)
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <np_cmd_active_image_get+0x84>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d007      	beq.n	80077b4 <np_cmd_active_image_get+0x74>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 80077a4:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <np_cmd_active_image_get+0x84>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f107 020c 	add.w	r2, r7, #12
 80077ae:	6979      	ldr	r1, [r7, #20]
 80077b0:	4610      	mov	r0, r2
 80077b2:	4798      	blx	r3

    return 0;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	08015080 	.word	0x08015080
 80077c4:	20000cc4 	.word	0x20000cc4

080077c8 <np_cmd_fw_update_start>:

// 开始固件更新命令
static int np_cmd_fw_update_start(np_prog_t *prog)
{
 80077c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077cc:	b092      	sub	sp, #72	; 0x48
 80077ce:	af04      	add	r7, sp, #16
 80077d0:	61f8      	str	r0, [r7, #28]
    uint64_t addr, len;
    np_write_start_cmd_t *write_start_cmd;

    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	2b11      	cmp	r3, #17
 80077d8:	d808      	bhi.n	80077ec <np_cmd_fw_update_start+0x24>
    {
        ERROR_PRINT("写入开始命令的缓冲区长度错误 %lu\r\n",
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	4619      	mov	r1, r3
 80077e0:	4870      	ldr	r0, [pc, #448]	; (80079a4 <np_cmd_fw_update_start+0x1dc>)
 80077e2:	f00b ffa1 	bl	8013728 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80077e6:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80077ea:	e0d5      	b.n	8007998 <np_cmd_fw_update_start+0x1d0>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	637b      	str	r3, [r7, #52]	; 0x34
    addr = write_start_cmd->addr;
 80077f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077f4:	f8d1 2001 	ldr.w	r2, [r1, #1]
 80077f8:	f8d1 3005 	ldr.w	r3, [r1, #5]
 80077fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    len = write_start_cmd->len;
 8007800:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007802:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8007806:	f8d1 300d 	ldr.w	r3, [r1, #13]
 800780a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    DEBUG_PRINT("写入命令 0x%" PRIx64 " 地址 0x%" PRIx64 " 字节\r\n", addr,
 800780e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007812:	e9cd 2300 	strd	r2, r3, [sp]
 8007816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800781a:	4863      	ldr	r0, [pc, #396]	; (80079a8 <np_cmd_fw_update_start+0x1e0>)
 800781c:	f00b ff84 	bl	8013728 <iprintf>
        len);

    prog->base_addr = FLASH_START_ADDR;
 8007820:	69f9      	ldr	r1, [r7, #28]
 8007822:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007826:	f04f 0300 	mov.w	r3, #0
 800782a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    prog->page_size = FLASH_PAGE_SIZE;
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007834:	621a      	str	r2, [r3, #32]
    prog->block_size = FLASH_BLOCK_SIZE;
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800783c:	625a      	str	r2, [r3, #36]	; 0x24
    prog->total_size = FLASH_SIZE;
 800783e:	69f9      	ldr	r1, [r7, #28]
 8007840:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007844:	f04f 0300 	mov.w	r3, #0
 8007848:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    if (addr + len > prog->base_addr + prog->total_size)
 800784c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007850:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007854:	1884      	adds	r4, r0, r2
 8007856:	eb41 0503 	adc.w	r5, r1, r3
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007866:	eb10 0802 	adds.w	r8, r0, r2
 800786a:	eb41 0903 	adc.w	r9, r1, r3
 800786e:	45a0      	cmp	r8, r4
 8007870:	eb79 0305 	sbcs.w	r3, r9, r5
 8007874:	d217      	bcs.n	80078a6 <np_cmd_fw_update_start+0xde>
    {
        ERROR_PRINT("写入地址 0x%" PRIx64 "+0x%" PRIx64
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007882:	eb10 0a02 	adds.w	sl, r0, r2
 8007886:	eb41 0b03 	adc.w	fp, r1, r3
 800788a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800788e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007892:	e9cd 2300 	strd	r2, r3, [sp]
 8007896:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800789a:	4844      	ldr	r0, [pc, #272]	; (80079ac <np_cmd_fw_update_start+0x1e4>)
 800789c:	f00b ff44 	bl	8013728 <iprintf>
            " 超过闪存大小 0x%" PRIx64 "\r\n", addr, len,
            prog->base_addr + prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 80078a0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80078a4:	e078      	b.n	8007998 <np_cmd_fw_update_start+0x1d0>
    }

    if (addr % prog->page_size)
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	2200      	movs	r2, #0
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	617a      	str	r2, [r7, #20]
 80078b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80078b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80078b8:	f7fc fcda 	bl	8004270 <__aeabi_uldivmod>
 80078bc:	4313      	orrs	r3, r2
 80078be:	d00a      	beq.n	80078d6 <np_cmd_fw_update_start+0x10e>
    {
        ERROR_PRINT("地址 0x%" PRIx64
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078ca:	4839      	ldr	r0, [pc, #228]	; (80079b0 <np_cmd_fw_update_start+0x1e8>)
 80078cc:	f00b ff2c 	bl	8013728 <iprintf>
            " 未对齐到页大小 0x%lx\r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 80078d0:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80078d4:	e060      	b.n	8007998 <np_cmd_fw_update_start+0x1d0>
    }

    if (!len)
 80078d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078da:	4313      	orrs	r3, r2
 80078dc:	d105      	bne.n	80078ea <np_cmd_fw_update_start+0x122>
    {
        ERROR_PRINT("长度为0\r\n");
 80078de:	4835      	ldr	r0, [pc, #212]	; (80079b4 <np_cmd_fw_update_start+0x1ec>)
 80078e0:	f00b ff88 	bl	80137f4 <puts>
        return NP_ERR_LEN_INVALID;
 80078e4:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80078e8:	e056      	b.n	8007998 <np_cmd_fw_update_start+0x1d0>
    }

    if (len % prog->page_size)
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	2200      	movs	r2, #0
 80078f0:	60bb      	str	r3, [r7, #8]
 80078f2:	60fa      	str	r2, [r7, #12]
 80078f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80078f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078fc:	f7fc fcb8 	bl	8004270 <__aeabi_uldivmod>
 8007900:	4313      	orrs	r3, r2
 8007902:	d00a      	beq.n	800791a <np_cmd_fw_update_start+0x152>
    {
        ERROR_PRINT("长度 0x%" PRIx64
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800790e:	482a      	ldr	r0, [pc, #168]	; (80079b8 <np_cmd_fw_update_start+0x1f0>)
 8007910:	f00b ff0a 	bl	8013728 <iprintf>
            " 未对齐到页大小 0x%lx\r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8007914:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007918:	e03e      	b.n	8007998 <np_cmd_fw_update_start+0x1d0>
    }

    prog->addr = addr;
 800791a:	69f9      	ldr	r1, [r7, #28]
 800791c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007920:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 8007924:	69f9      	ldr	r1, [r7, #28]
 8007926:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800792a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	2201      	movs	r2, #1
 8007932:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	2200      	movs	r2, #0
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007942:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007946:	f7fc fc93 	bl	8004270 <__aeabi_uldivmod>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007954:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800795e:	461a      	mov	r2, r3
 8007960:	2300      	movs	r3, #0
 8007962:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800796c:	3310      	adds	r3, #16
 800796e:	4619      	mov	r1, r3
 8007970:	f04f 0200 	mov.w	r2, #0
 8007974:	f04f 0300 	mov.w	r3, #0
 8007978:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007982:	3310      	adds	r3, #16
 8007984:	4619      	mov	r1, r3
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	e9c1 2300 	strd	r2, r3, [r1]

    return np_send_ok_status();
 8007992:	f7fe f91b 	bl	8005bcc <np_send_ok_status>
 8007996:	4603      	mov	r3, r0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3738      	adds	r7, #56	; 0x38
 800799c:	46bd      	mov	sp, r7
 800799e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079a2:	bf00      	nop
 80079a4:	0801509c 	.word	0x0801509c
 80079a8:	080150d4 	.word	0x080150d4
 80079ac:	08015100 	.word	0x08015100
 80079b0:	08015140 	.word	0x08015140
 80079b4:	08014edc 	.word	0x08014edc
 80079b8:	08015174 	.word	0x08015174

080079bc <np_cmd_fw_update_data>:

// 写入固件数据命令
static int np_cmd_fw_update_data(np_prog_t *prog)
{
 80079bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	b0a7      	sub	sp, #156	; 0x9c
 80079c2:	af02      	add	r7, sp, #8
 80079c4:	6778      	str	r0, [r7, #116]	; 0x74
    uint32_t write_len;
    uint64_t bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 80079c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d808      	bhi.n	80079e0 <np_cmd_fw_update_data+0x24>
    {
        ERROR_PRINT("写入数据命令的缓冲区长度错误 %lu\r\n",
 80079ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	4619      	mov	r1, r3
 80079d4:	487c      	ldr	r0, [pc, #496]	; (8007bc8 <np_cmd_fw_update_data+0x20c>)
 80079d6:	f00b fea7 	bl	8013728 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80079da:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80079de:	e1d6      	b.n	8007d8e <np_cmd_fw_update_data+0x3d2>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 80079e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    len = write_data_cmd->len;
 80079e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2200      	movs	r2, #0
 80079f2:	60bb      	str	r3, [r7, #8]
 80079f4:	60fa      	str	r2, [r7, #12]
 80079f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079fa:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 80079fe:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007a02:	1c94      	adds	r4, r2, #2
 8007a04:	f143 0500 	adc.w	r5, r3, #0
 8007a08:	2c41      	cmp	r4, #65	; 0x41
 8007a0a:	f175 0300 	sbcs.w	r3, r5, #0
 8007a0e:	d307      	bcc.n	8007a20 <np_cmd_fw_update_data+0x64>
    {
        ERROR_PRINT("数据大小错误 0x%" PRIx64 "\r\n", len);
 8007a10:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007a14:	486d      	ldr	r0, [pc, #436]	; (8007bcc <np_cmd_fw_update_data+0x210>)
 8007a16:	f00b fe87 	bl	8013728 <iprintf>
        return NP_ERR_CMD_DATA_SIZE;
 8007a1a:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8007a1e:	e1b6      	b.n	8007d8e <np_cmd_fw_update_data+0x3d2>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 8007a20:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007a24:	f112 0802 	adds.w	r8, r2, #2
 8007a28:	f143 0900 	adc.w	r9, r3, #0
 8007a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	469a      	mov	sl, r3
 8007a34:	4693      	mov	fp, r2
 8007a36:	45d9      	cmp	r9, fp
 8007a38:	bf08      	it	eq
 8007a3a:	45d0      	cmpeq	r8, sl
 8007a3c:	d010      	beq.n	8007a60 <np_cmd_fw_update_data+0xa4>
    {
        ERROR_PRINT("缓冲区长度 0x%lx 大于命令长度 0x%" PRIx64 "\r\n",
 8007a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a40:	6859      	ldr	r1, [r3, #4]
 8007a42:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007a46:	1c90      	adds	r0, r2, #2
 8007a48:	66b8      	str	r0, [r7, #104]	; 0x68
 8007a4a:	f143 0300 	adc.w	r3, r3, #0
 8007a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a50:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007a54:	485e      	ldr	r0, [pc, #376]	; (8007bd0 <np_cmd_fw_update_data+0x214>)
 8007a56:	f00b fe67 	bl	8013728 <iprintf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 8007a5a:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8007a5e:	e196      	b.n	8007d8e <np_cmd_fw_update_data+0x3d2>
    }

    if (!prog->addr_is_set)
 8007a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d105      	bne.n	8007a74 <np_cmd_fw_update_data+0xb8>
    {
        ERROR_PRINT("写入地址未设置\r\n");
 8007a68:	485a      	ldr	r0, [pc, #360]	; (8007bd4 <np_cmd_fw_update_data+0x218>)
 8007a6a:	f00b fec3 	bl	80137f4 <puts>
        return NP_ERR_ADDR_INVALID;
 8007a6e:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8007a72:	e18c      	b.n	8007d8e <np_cmd_fw_update_data+0x3d2>
    }

    if (prog->page.offset + len > prog->page_size)
 8007a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a7e:	2200      	movs	r2, #0
 8007a80:	663b      	str	r3, [r7, #96]	; 0x60
 8007a82:	667a      	str	r2, [r7, #100]	; 0x64
 8007a84:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007a88:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	1889      	adds	r1, r1, r2
 8007a90:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a92:	4629      	mov	r1, r5
 8007a94:	eb43 0101 	adc.w	r1, r3, r1
 8007a98:	65f9      	str	r1, [r7, #92]	; 0x5c
 8007a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8007aa2:	657a      	str	r2, [r7, #84]	; 0x54
 8007aa4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8007aa8:	4623      	mov	r3, r4
 8007aaa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007aae:	4602      	mov	r2, r0
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	460a      	mov	r2, r1
 8007ab6:	4193      	sbcs	r3, r2
 8007ab8:	d20a      	bcs.n	8007ad0 <np_cmd_fw_update_data+0x114>
        write_len = prog->page_size - prog->page.offset;
 8007aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007abc:	6a1a      	ldr	r2, [r3, #32]
 8007abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007ac4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ace:	e003      	b.n	8007ad8 <np_cmd_fw_update_data+0x11c>
    else
        write_len = len;
 8007ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ad4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 8007ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ada:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ae0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007ae4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ae8:	18d0      	adds	r0, r2, r3
 8007aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007aee:	3302      	adds	r3, #2
 8007af0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007af4:	4619      	mov	r1, r3
 8007af6:	f00b ffd8 	bl	8013aaa <memcpy>
    prog->page.offset += write_len;
 8007afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007afc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007b00:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b08:	441a      	add	r2, r3
 8007b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007b10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    if (prog->page.offset == prog->page_size)
 8007b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007b1a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	f040 8082 	bne.w	8007c2c <np_cmd_fw_update_data+0x270>
    {
        if (prog->addr >= prog->base_addr + prog->total_size)
 8007b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b2a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b30:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b36:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007b3a:	1886      	adds	r6, r0, r2
 8007b3c:	64be      	str	r6, [r7, #72]	; 0x48
 8007b3e:	eb41 0303 	adc.w	r3, r1, r3
 8007b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b44:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007b48:	460b      	mov	r3, r1
 8007b4a:	429c      	cmp	r4, r3
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	eb75 0303 	sbcs.w	r3, r5, r3
 8007b52:	d319      	bcc.n	8007b88 <np_cmd_fw_update_data+0x1cc>
        {
            ERROR_PRINT("写入地址 0x%" PRIx64
 8007b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b56:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b5c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b62:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007b66:	1886      	adds	r6, r0, r2
 8007b68:	643e      	str	r6, [r7, #64]	; 0x40
 8007b6a:	eb41 0303 	adc.w	r3, r1, r3
 8007b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b74:	e9cd 2300 	strd	r2, r3, [sp]
 8007b78:	4622      	mov	r2, r4
 8007b7a:	462b      	mov	r3, r5
 8007b7c:	4816      	ldr	r0, [pc, #88]	; (8007bd8 <np_cmd_fw_update_data+0x21c>)
 8007b7e:	f00b fdd3 	bl	8013728 <iprintf>
                " 超过闪存大小 0x%" PRIx64 "\r\n",
                prog->addr, prog->base_addr + prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8007b82:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007b86:	e102      	b.n	8007d8e <np_cmd_fw_update_data+0x3d2>
        }

        if (flash_page_erase((uint32_t)prog->addr) < 0)
 8007b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fc fe8f 	bl	80048b4 <flash_page_erase>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	da02      	bge.n	8007ba2 <np_cmd_fw_update_data+0x1e6>
            return NP_ERR_INTERNAL;
 8007b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba0:	e0f5      	b.n	8007d8e <np_cmd_fw_update_data+0x3d2>

        if (flash_write((uint32_t)prog->addr, prog->page.buf,
 8007ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ba4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007ba8:	4610      	mov	r0, r2
 8007baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f7fc fea0 	bl	80048fa <flash_write>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	da0d      	bge.n	8007bdc <np_cmd_fw_update_data+0x220>
            prog->page_size) < 0)
        {
            return NP_ERR_INTERNAL;
 8007bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc4:	e0e3      	b.n	8007d8e <np_cmd_fw_update_data+0x3d2>
 8007bc6:	bf00      	nop
 8007bc8:	080151a8 	.word	0x080151a8
 8007bcc:	080151e0 	.word	0x080151e0
 8007bd0:	08015204 	.word	0x08015204
 8007bd4:	08014d18 	.word	0x08014d18
 8007bd8:	08015240 	.word	0x08015240
        }

        prog->addr += prog->page_size;
 8007bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bde:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	2200      	movs	r2, #0
 8007be8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bea:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007bec:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007bf0:	4623      	mov	r3, r4
 8007bf2:	18c3      	adds	r3, r0, r3
 8007bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	eb41 0303 	adc.w	r3, r1, r3
 8007bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c00:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007c04:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8007c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007c0e:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8007c12:	3301      	adds	r3, #1
 8007c14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007c16:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007c1a:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8007c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007c24:	461a      	mov	r2, r3
 8007c26:	2300      	movs	r3, #0
 8007c28:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    bytes_left = len - write_len;
 8007c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c30:	2200      	movs	r2, #0
 8007c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c36:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007c3a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8007c3e:	4621      	mov	r1, r4
 8007c40:	1a51      	subs	r1, r2, r1
 8007c42:	6039      	str	r1, [r7, #0]
 8007c44:	4629      	mov	r1, r5
 8007c46:	eb63 0301 	sbc.w	r3, r3, r1
 8007c4a:	607b      	str	r3, [r7, #4]
 8007c4c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007c50:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (bytes_left)
 8007c54:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	d018      	beq.n	8007c8e <np_cmd_fw_update_data+0x2d2>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8007c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c5e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8007c62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c66:	1c9a      	adds	r2, r3, #2
 8007c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c6c:	4413      	add	r3, r2
 8007c6e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c70:	4619      	mov	r1, r3
 8007c72:	f00b ff1a 	bl	8013aaa <memcpy>
        prog->page.offset += bytes_left;
 8007c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c78:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007c7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c82:	4413      	add	r3, r2
 8007c84:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007c86:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007c8a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    prog->bytes_written += len;
 8007c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c90:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007c94:	3310      	adds	r3, #16
 8007c96:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007c9a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007c9e:	1884      	adds	r4, r0, r2
 8007ca0:	623c      	str	r4, [r7, #32]
 8007ca2:	eb41 0303 	adc.w	r3, r1, r3
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007caa:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007cae:	3310      	adds	r3, #16
 8007cb0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007cb4:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8007cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cba:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007cbe:	3310      	adds	r3, #16
 8007cc0:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cc6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007cca:	3310      	adds	r3, #16
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	1a84      	subs	r4, r0, r2
 8007cd2:	61bc      	str	r4, [r7, #24]
 8007cd4:	eb61 0303 	sbc.w	r3, r1, r3
 8007cd8:	61fb      	str	r3, [r7, #28]
 8007cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	613b      	str	r3, [r7, #16]
 8007ce2:	617a      	str	r2, [r7, #20]
 8007ce4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8007ce8:	4623      	mov	r3, r4
 8007cea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cee:	4602      	mov	r2, r0
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	462b      	mov	r3, r5
 8007cf4:	460a      	mov	r2, r1
 8007cf6:	4193      	sbcs	r3, r2
 8007cf8:	d20c      	bcs.n	8007d14 <np_cmd_fw_update_data+0x358>
        prog->bytes_written == prog->len)
 8007cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cfc:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007d00:	3310      	adds	r3, #16
 8007d02:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8007d0c:	4299      	cmp	r1, r3
 8007d0e:	bf08      	it	eq
 8007d10:	4290      	cmpeq	r0, r2
 8007d12:	d11b      	bne.n	8007d4c <np_cmd_fw_update_data+0x390>
    {
        if (np_send_write_ack(prog->bytes_written))
 8007d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d16:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007d1a:	3310      	adds	r3, #16
 8007d1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d20:	4610      	mov	r0, r2
 8007d22:	4619      	mov	r1, r3
 8007d24:	f7fe fbca 	bl	80064bc <np_send_write_ack>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <np_cmd_fw_update_data+0x378>
            return -1;
 8007d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d32:	e02c      	b.n	8007d8e <np_cmd_fw_update_data+0x3d2>
        prog->bytes_ack = prog->bytes_written;
 8007d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d36:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007d3a:	3310      	adds	r3, #16
 8007d3c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d42:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007d46:	3310      	adds	r3, #16
 8007d48:	e9c3 0100 	strd	r0, r1, [r3]
    }

    if (prog->bytes_written > prog->len)
 8007d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d4e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007d52:	3310      	adds	r3, #16
 8007d54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d58:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007d5a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8007d5e:	4290      	cmp	r0, r2
 8007d60:	eb71 0303 	sbcs.w	r3, r1, r3
 8007d64:	d212      	bcs.n	8007d8c <np_cmd_fw_update_data+0x3d0>
    {
        ERROR_PRINT("实际写入数据长度 0x%" PRIx64
 8007d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d68:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8007d6c:	3310      	adds	r3, #16
 8007d6e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007d78:	e9cd 2300 	strd	r2, r3, [sp]
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4805      	ldr	r0, [pc, #20]	; (8007d98 <np_cmd_fw_update_data+0x3dc>)
 8007d82:	f00b fcd1 	bl	8013728 <iprintf>
            " 超过 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 8007d86:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8007d8a:	e000      	b.n	8007d8e <np_cmd_fw_update_data+0x3d2>
    }

    return 0;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3794      	adds	r7, #148	; 0x94
 8007d92:	46bd      	mov	sp, r7
 8007d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d98:	08015278 	.word	0x08015278

08007d9c <np_cmd_fw_update_end>:


// 固件更新结束命令
static int np_cmd_fw_update_end(np_prog_t *prog)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;

    prog->addr_is_set = 0;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	631a      	str	r2, [r3, #48]	; 0x30

    if (prog->page.offset)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007db0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00b      	beq.n	8007dd0 <np_cmd_fw_update_end+0x34>
    {
        ERROR_PRINT("未写入长度为 0x%lx 的数据\r\n",
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007dbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	481d      	ldr	r0, [pc, #116]	; (8007e3c <np_cmd_fw_update_end+0xa0>)
 8007dc6:	f00b fcaf 	bl	8013728 <iprintf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8007dca:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8007dce:	e030      	b.n	8007e32 <np_cmd_fw_update_end+0x96>
    }

    if (np_boot_config_read(&boot_config))
 8007dd0:	f107 030c 	add.w	r3, r7, #12
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fc7d 	bl	80076d4 <np_boot_config_read>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <np_cmd_fw_update_end+0x4a>
        return NP_ERR_INTERNAL;
 8007de0:	f04f 33ff 	mov.w	r3, #4294967295
 8007de4:	e025      	b.n	8007e32 <np_cmd_fw_update_end+0x96>

    if (prog->active_image == 0xff)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007dec:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8007df0:	2bff      	cmp	r3, #255	; 0xff
 8007df2:	d105      	bne.n	8007e00 <np_cmd_fw_update_end+0x64>
        prog->active_image = boot_config.active_image;
 8007df4:	7b3a      	ldrb	r2, [r7, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007dfc:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    boot_config.active_image = prog->active_image ? 0 : 1;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007e06:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bf0c      	ite	eq
 8007e0e:	2301      	moveq	r3, #1
 8007e10:	2300      	movne	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	733b      	strb	r3, [r7, #12]
    if (np_boot_config_write(&boot_config))
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff fc70 	bl	8007700 <np_boot_config_write>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d002      	beq.n	8007e2c <np_cmd_fw_update_end+0x90>
        return NP_ERR_INTERNAL;
 8007e26:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2a:	e002      	b.n	8007e32 <np_cmd_fw_update_end+0x96>

    return np_send_ok_status();
 8007e2c:	f7fd fece 	bl	8005bcc <np_send_ok_status>
 8007e30:	4603      	mov	r3, r0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	080152b0 	.word	0x080152b0

08007e40 <np_cmd_fw_update>:

// 固件更新命令
static int np_cmd_fw_update(np_prog_t *prog)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]

    switch (cmd->code)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	2b0c      	cmp	r3, #12
 8007e58:	d013      	beq.n	8007e82 <np_cmd_fw_update+0x42>
 8007e5a:	2b0c      	cmp	r3, #12
 8007e5c:	dc19      	bgt.n	8007e92 <np_cmd_fw_update+0x52>
 8007e5e:	2b0a      	cmp	r3, #10
 8007e60:	d002      	beq.n	8007e68 <np_cmd_fw_update+0x28>
 8007e62:	2b0b      	cmp	r3, #11
 8007e64:	d008      	beq.n	8007e78 <np_cmd_fw_update+0x38>
    case NP_CMD_FW_UPDATE_E:
        ret = np_cmd_fw_update_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8007e66:	e014      	b.n	8007e92 <np_cmd_fw_update+0x52>
        led_wr_set(true);
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f7fd fceb 	bl	8005844 <led_wr_set>
        ret = np_cmd_fw_update_start(prog);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7ff fcaa 	bl	80077c8 <np_cmd_fw_update_start>
 8007e74:	60f8      	str	r0, [r7, #12]
        break;
 8007e76:	e00d      	b.n	8007e94 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_data(prog);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff fd9f 	bl	80079bc <np_cmd_fw_update_data>
 8007e7e:	60f8      	str	r0, [r7, #12]
        break;
 8007e80:	e008      	b.n	8007e94 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_end(prog);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff ff8a 	bl	8007d9c <np_cmd_fw_update_end>
 8007e88:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	f7fd fcda 	bl	8005844 <led_wr_set>
        break;
 8007e90:	e000      	b.n	8007e94 <np_cmd_fw_update+0x54>
        break;
 8007e92:	bf00      	nop
    }

    if (ret < 0)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	da02      	bge.n	8007ea0 <np_cmd_fw_update+0x60>
        led_wr_set(false);
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	f7fd fcd2 	bl	8005844 <led_wr_set>

    return ret;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <np_cmd_is_valid>:
    { NP_CMD_FW_UPDATE_E, 0, np_cmd_fw_update },                 // 固件更新结束命令
};

// 检查命令是否有效
static bool np_cmd_is_valid(np_cmd_code_t code)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	71fb      	strb	r3, [r7, #7]
    return code >= 0 && code < NP_CMD_NAND_LAST;
 8007eb4:	79fb      	ldrb	r3, [r7, #7]
 8007eb6:	2b0c      	cmp	r3, #12
 8007eb8:	bf94      	ite	ls
 8007eba:	2301      	movls	r3, #1
 8007ebc:	2300      	movhi	r3, #0
 8007ebe:	b2db      	uxtb	r3, r3
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <np_cmd_handler>:

// 命令处理函数
static int np_cmd_handler(np_prog_t *prog)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd;

    if (prog->rx_buf_len < sizeof(np_cmd_t))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d108      	bne.n	8007eee <np_cmd_handler+0x22>
    {
        ERROR_PRINT("命令长度错误：%lu\r\n",
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	4823      	ldr	r0, [pc, #140]	; (8007f70 <np_cmd_handler+0xa4>)
 8007ee4:	f00b fc20 	bl	8013728 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8007ee8:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8007eec:	e03b      	b.n	8007f66 <np_cmd_handler+0x9a>
    }
    cmd = (np_cmd_t *)prog->rx_buf;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	60fb      	str	r3, [r7, #12]

    if (!np_cmd_is_valid(cmd->code))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7ff ffd6 	bl	8007eaa <np_cmd_is_valid>
 8007efe:	4603      	mov	r3, r0
 8007f00:	f083 0301 	eor.w	r3, r3, #1
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d008      	beq.n	8007f1c <np_cmd_handler+0x50>
    {
        ERROR_PRINT("无效的命令码：%d\r\n", cmd->code);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4818      	ldr	r0, [pc, #96]	; (8007f74 <np_cmd_handler+0xa8>)
 8007f12:	f00b fc09 	bl	8013728 <iprintf>
        return NP_ERR_CMD_INVALID;
 8007f16:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 8007f1a:	e024      	b.n	8007f66 <np_cmd_handler+0x9a>
    }

    if (!prog->chip_is_conf && cmd_handler[cmd->code].is_chip_cmd)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d112      	bne.n	8007f4a <np_cmd_handler+0x7e>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4a13      	ldr	r2, [pc, #76]	; (8007f78 <np_cmd_handler+0xac>)
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	440b      	add	r3, r1
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	3304      	adds	r3, #4
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <np_cmd_handler+0x7e>
    {
        ERROR_PRINT("芯片未配置\r\n");
 8007f3e:	480f      	ldr	r0, [pc, #60]	; (8007f7c <np_cmd_handler+0xb0>)
 8007f40:	f00b fc58 	bl	80137f4 <puts>
        return NP_ERR_CHIP_NOT_CONF;
 8007f44:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8007f48:	e00d      	b.n	8007f66 <np_cmd_handler+0x9a>
    }

    return cmd_handler[cmd->code].exec(prog);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4a09      	ldr	r2, [pc, #36]	; (8007f78 <np_cmd_handler+0xac>)
 8007f52:	460b      	mov	r3, r1
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	440b      	add	r3, r1
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
 8007f64:	4603      	mov	r3, r0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	080152dc 	.word	0x080152dc
 8007f74:	08015300 	.word	0x08015300
 8007f78:	2000004c 	.word	0x2000004c
 8007f7c:	08015324 	.word	0x08015324

08007f80 <np_packet_handler>:

// 数据包处理函数
static void np_packet_handler(np_prog_t *prog)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
    int ret;

    do
    {
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8007f88:	4b12      	ldr	r3, [pc, #72]	; (8007fd4 <np_packet_handler+0x54>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	4610      	mov	r0, r2
 8007f92:	4798      	blx	r3
 8007f94:	4602      	mov	r2, r0
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	605a      	str	r2, [r3, #4]
        if (!prog->rx_buf_len)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d012      	beq.n	8007fc8 <np_packet_handler+0x48>
            break;

        ret = np_cmd_handler(prog);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff ff92 	bl	8007ecc <np_cmd_handler>
 8007fa8:	60f8      	str	r0, [r7, #12]

        np_comm_cb->consume();
 8007faa:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <np_packet_handler+0x54>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	4798      	blx	r3

        if (ret < 0)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	dae7      	bge.n	8007f88 <np_packet_handler+0x8>
            np_send_error(-ret);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	425b      	negs	r3, r3
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fd fe1f 	bl	8005c04 <np_send_error>
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8007fc6:	e7df      	b.n	8007f88 <np_packet_handler+0x8>
            break;
 8007fc8:	bf00      	nop
    }
    while (1);
}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20000cc4 	.word	0x20000cc4

08007fd8 <np_nand_handler>:

// NAND 处理函数
static void np_nand_handler(np_prog_t *prog)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
    if (prog->nand_wr_in_progress)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007fe6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d008      	beq.n	8008000 <np_nand_handler+0x28>
    {
        if (np_nand_handle_status(prog))
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7fe fc28 	bl	8006844 <np_nand_handle_status>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <np_nand_handler+0x28>
            np_send_error(NP_ERR_NAND_WR);
 8007ffa:	2099      	movs	r0, #153	; 0x99
 8007ffc:	f7fd fe02 	bl	8005c04 <np_send_error>
    }
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <np_init>:

// NP 初始化函数
void np_init()
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
    prog.active_image = 0xff;
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <np_init+0x1c>)
 800800e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008012:	22ff      	movs	r2, #255	; 0xff
 8008014:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
}
 8008018:	bf00      	nop
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	20000cc8 	.word	0x20000cc8

08008028 <np_handler>:

// NP 处理函数
void np_handler()
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
    np_packet_handler(&prog);
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <np_handler+0x14>)
 800802e:	f7ff ffa7 	bl	8007f80 <np_packet_handler>
    np_nand_handler(&prog);
 8008032:	4802      	ldr	r0, [pc, #8]	; (800803c <np_handler+0x14>)
 8008034:	f7ff ffd0 	bl	8007fd8 <np_nand_handler>
}
 8008038:	bf00      	nop
 800803a:	bd80      	pop	{r7, pc}
 800803c:	20000cc8 	.word	0x20000cc8

08008040 <np_comm_register>:

// 注册 NP 通信回调函数
int np_comm_register(np_comm_cb_t *cb)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
    np_comm_cb = cb;
 8008048:	4a04      	ldr	r2, [pc, #16]	; (800805c <np_comm_register+0x1c>)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6013      	str	r3, [r2, #0]

    return 0;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	20000cc4 	.word	0x20000cc4

08008060 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008066:	1d3b      	adds	r3, r7, #4
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	605a      	str	r2, [r3, #4]
 800806e:	609a      	str	r2, [r3, #8]
 8008070:	60da      	str	r2, [r3, #12]
 8008072:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8008074:	2300      	movs	r3, #0
 8008076:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008078:	4b24      	ldr	r3, [pc, #144]	; (800810c <MX_RTC_Init+0xac>)
 800807a:	4a25      	ldr	r2, [pc, #148]	; (8008110 <MX_RTC_Init+0xb0>)
 800807c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800807e:	4b23      	ldr	r3, [pc, #140]	; (800810c <MX_RTC_Init+0xac>)
 8008080:	2200      	movs	r2, #0
 8008082:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008084:	4b21      	ldr	r3, [pc, #132]	; (800810c <MX_RTC_Init+0xac>)
 8008086:	227f      	movs	r2, #127	; 0x7f
 8008088:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800808a:	4b20      	ldr	r3, [pc, #128]	; (800810c <MX_RTC_Init+0xac>)
 800808c:	22ff      	movs	r2, #255	; 0xff
 800808e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008090:	4b1e      	ldr	r3, [pc, #120]	; (800810c <MX_RTC_Init+0xac>)
 8008092:	2200      	movs	r2, #0
 8008094:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008096:	4b1d      	ldr	r3, [pc, #116]	; (800810c <MX_RTC_Init+0xac>)
 8008098:	2200      	movs	r2, #0
 800809a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <MX_RTC_Init+0xac>)
 800809e:	2200      	movs	r2, #0
 80080a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80080a2:	481a      	ldr	r0, [pc, #104]	; (800810c <MX_RTC_Init+0xac>)
 80080a4:	f004 fd16 	bl	800cad4 <HAL_RTC_Init>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80080ae:	f7fd fcef 	bl	8005a90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80080be:	2300      	movs	r3, #0
 80080c0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80080c2:	2300      	movs	r3, #0
 80080c4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80080c6:	1d3b      	adds	r3, r7, #4
 80080c8:	2201      	movs	r2, #1
 80080ca:	4619      	mov	r1, r3
 80080cc:	480f      	ldr	r0, [pc, #60]	; (800810c <MX_RTC_Init+0xac>)
 80080ce:	f004 fd77 	bl	800cbc0 <HAL_RTC_SetTime>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80080d8:	f7fd fcda 	bl	8005a90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80080dc:	2301      	movs	r3, #1
 80080de:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80080e0:	2301      	movs	r3, #1
 80080e2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80080e4:	2301      	movs	r3, #1
 80080e6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80080ec:	463b      	mov	r3, r7
 80080ee:	2201      	movs	r2, #1
 80080f0:	4619      	mov	r1, r3
 80080f2:	4806      	ldr	r0, [pc, #24]	; (800810c <MX_RTC_Init+0xac>)
 80080f4:	f004 fdfe 	bl	800ccf4 <HAL_RTC_SetDate>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80080fe:	f7fd fcc7 	bl	8005a90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008102:	bf00      	nop
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20005118 	.word	0x20005118
 8008110:	40002800 	.word	0x40002800

08008114 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800811c:	f107 0308 	add.w	r3, r7, #8
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	605a      	str	r2, [r3, #4]
 8008126:	609a      	str	r2, [r3, #8]
 8008128:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a0c      	ldr	r2, [pc, #48]	; (8008160 <HAL_RTC_MspInit+0x4c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d111      	bne.n	8008158 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008134:	2302      	movs	r3, #2
 8008136:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800813c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800813e:	f107 0308 	add.w	r3, r7, #8
 8008142:	4618      	mov	r0, r3
 8008144:	f004 fbe4 	bl	800c910 <HAL_RCCEx_PeriphCLKConfig>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800814e:	f7fd fc9f 	bl	8005a90 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008152:	4b04      	ldr	r3, [pc, #16]	; (8008164 <HAL_RTC_MspInit+0x50>)
 8008154:	2201      	movs	r2, #1
 8008156:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008158:	bf00      	nop
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	40002800 	.word	0x40002800
 8008164:	42470e3c 	.word	0x42470e3c

08008168 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800816c:	4b17      	ldr	r3, [pc, #92]	; (80081cc <MX_SPI1_Init+0x64>)
 800816e:	4a18      	ldr	r2, [pc, #96]	; (80081d0 <MX_SPI1_Init+0x68>)
 8008170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008172:	4b16      	ldr	r3, [pc, #88]	; (80081cc <MX_SPI1_Init+0x64>)
 8008174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800817a:	4b14      	ldr	r3, [pc, #80]	; (80081cc <MX_SPI1_Init+0x64>)
 800817c:	2200      	movs	r2, #0
 800817e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008180:	4b12      	ldr	r3, [pc, #72]	; (80081cc <MX_SPI1_Init+0x64>)
 8008182:	2200      	movs	r2, #0
 8008184:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008186:	4b11      	ldr	r3, [pc, #68]	; (80081cc <MX_SPI1_Init+0x64>)
 8008188:	2202      	movs	r2, #2
 800818a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800818c:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <MX_SPI1_Init+0x64>)
 800818e:	2201      	movs	r2, #1
 8008190:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008192:	4b0e      	ldr	r3, [pc, #56]	; (80081cc <MX_SPI1_Init+0x64>)
 8008194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008198:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800819a:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <MX_SPI1_Init+0x64>)
 800819c:	2200      	movs	r2, #0
 800819e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80081a0:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <MX_SPI1_Init+0x64>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80081a6:	4b09      	ldr	r3, [pc, #36]	; (80081cc <MX_SPI1_Init+0x64>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081ac:	4b07      	ldr	r3, [pc, #28]	; (80081cc <MX_SPI1_Init+0x64>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80081b2:	4b06      	ldr	r3, [pc, #24]	; (80081cc <MX_SPI1_Init+0x64>)
 80081b4:	220a      	movs	r2, #10
 80081b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80081b8:	4804      	ldr	r0, [pc, #16]	; (80081cc <MX_SPI1_Init+0x64>)
 80081ba:	f004 fec0 	bl	800cf3e <HAL_SPI_Init>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80081c4:	f7fd fc64 	bl	8005a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80081c8:	bf00      	nop
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20005138 	.word	0x20005138
 80081d0:	40013000 	.word	0x40013000

080081d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08a      	sub	sp, #40	; 0x28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081dc:	f107 0314 	add.w	r3, r7, #20
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	605a      	str	r2, [r3, #4]
 80081e6:	609a      	str	r2, [r3, #8]
 80081e8:	60da      	str	r2, [r3, #12]
 80081ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a2c      	ldr	r2, [pc, #176]	; (80082a4 <HAL_SPI_MspInit+0xd0>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d151      	bne.n	800829a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80081f6:	2300      	movs	r3, #0
 80081f8:	613b      	str	r3, [r7, #16]
 80081fa:	4b2b      	ldr	r3, [pc, #172]	; (80082a8 <HAL_SPI_MspInit+0xd4>)
 80081fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fe:	4a2a      	ldr	r2, [pc, #168]	; (80082a8 <HAL_SPI_MspInit+0xd4>)
 8008200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008204:	6453      	str	r3, [r2, #68]	; 0x44
 8008206:	4b28      	ldr	r3, [pc, #160]	; (80082a8 <HAL_SPI_MspInit+0xd4>)
 8008208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800820e:	613b      	str	r3, [r7, #16]
 8008210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	4b24      	ldr	r3, [pc, #144]	; (80082a8 <HAL_SPI_MspInit+0xd4>)
 8008218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821a:	4a23      	ldr	r2, [pc, #140]	; (80082a8 <HAL_SPI_MspInit+0xd4>)
 800821c:	f043 0301 	orr.w	r3, r3, #1
 8008220:	6313      	str	r3, [r2, #48]	; 0x30
 8008222:	4b21      	ldr	r3, [pc, #132]	; (80082a8 <HAL_SPI_MspInit+0xd4>)
 8008224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800822e:	2300      	movs	r3, #0
 8008230:	60bb      	str	r3, [r7, #8]
 8008232:	4b1d      	ldr	r3, [pc, #116]	; (80082a8 <HAL_SPI_MspInit+0xd4>)
 8008234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008236:	4a1c      	ldr	r2, [pc, #112]	; (80082a8 <HAL_SPI_MspInit+0xd4>)
 8008238:	f043 0302 	orr.w	r3, r3, #2
 800823c:	6313      	str	r3, [r2, #48]	; 0x30
 800823e:	4b1a      	ldr	r3, [pc, #104]	; (80082a8 <HAL_SPI_MspInit+0xd4>)
 8008240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	60bb      	str	r3, [r7, #8]
 8008248:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800824a:	23c0      	movs	r3, #192	; 0xc0
 800824c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800824e:	2302      	movs	r3, #2
 8008250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008252:	2300      	movs	r3, #0
 8008254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008256:	2303      	movs	r3, #3
 8008258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800825a:	2305      	movs	r3, #5
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800825e:	f107 0314 	add.w	r3, r7, #20
 8008262:	4619      	mov	r1, r3
 8008264:	4811      	ldr	r0, [pc, #68]	; (80082ac <HAL_SPI_MspInit+0xd8>)
 8008266:	f002 f845 	bl	800a2f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 800826a:	2308      	movs	r3, #8
 800826c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800826e:	2302      	movs	r3, #2
 8008270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008272:	2300      	movs	r3, #0
 8008274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008276:	2303      	movs	r3, #3
 8008278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800827a:	2305      	movs	r3, #5
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 800827e:	f107 0314 	add.w	r3, r7, #20
 8008282:	4619      	mov	r1, r3
 8008284:	480a      	ldr	r0, [pc, #40]	; (80082b0 <HAL_SPI_MspInit+0xdc>)
 8008286:	f002 f835 	bl	800a2f4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800828a:	2200      	movs	r2, #0
 800828c:	2100      	movs	r1, #0
 800828e:	2023      	movs	r0, #35	; 0x23
 8008290:	f001 fbcd 	bl	8009a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8008294:	2023      	movs	r0, #35	; 0x23
 8008296:	f001 fbe6 	bl	8009a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800829a:	bf00      	nop
 800829c:	3728      	adds	r7, #40	; 0x28
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	40013000 	.word	0x40013000
 80082a8:	40023800 	.word	0x40023800
 80082ac:	40020000 	.word	0x40020000
 80082b0:	40020400 	.word	0x40020400

080082b4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a0b      	ldr	r2, [pc, #44]	; (80082f0 <HAL_SPI_MspDeInit+0x3c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d110      	bne.n	80082e8 <HAL_SPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80082c6:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <HAL_SPI_MspDeInit+0x40>)
 80082c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ca:	4a0a      	ldr	r2, [pc, #40]	; (80082f4 <HAL_SPI_MspDeInit+0x40>)
 80082cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082d0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_MISO_Pin|SPI1_MOSI_Pin);
 80082d2:	21c0      	movs	r1, #192	; 0xc0
 80082d4:	4808      	ldr	r0, [pc, #32]	; (80082f8 <HAL_SPI_MspDeInit+0x44>)
 80082d6:	f002 f9a9 	bl	800a62c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin);
 80082da:	2108      	movs	r1, #8
 80082dc:	4807      	ldr	r0, [pc, #28]	; (80082fc <HAL_SPI_MspDeInit+0x48>)
 80082de:	f002 f9a5 	bl	800a62c <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80082e2:	2023      	movs	r0, #35	; 0x23
 80082e4:	f001 fbcd 	bl	8009a82 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	40013000 	.word	0x40013000
 80082f4:	40023800 	.word	0x40023800
 80082f8:	40020000 	.word	0x40020000
 80082fc:	40020400 	.word	0x40020400

08008300 <spi_flash_gpio_init>:

static uint32_t flash_last_operation = FLASH_OP_EMPTY;
static uint32_t current_die = 0;

static void spi_flash_gpio_init()
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b088      	sub	sp, #32
 8008304:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008306:	f107 030c 	add.w	r3, r7, #12
 800830a:	2200      	movs	r2, #0
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	605a      	str	r2, [r3, #4]
 8008310:	609a      	str	r2, [r3, #8]
 8008312:	60da      	str	r2, [r3, #12]
 8008314:	611a      	str	r2, [r3, #16]

    __HAL_RCC_SPI1_CLK_ENABLE();
 8008316:	2300      	movs	r3, #0
 8008318:	60bb      	str	r3, [r7, #8]
 800831a:	4b33      	ldr	r3, [pc, #204]	; (80083e8 <spi_flash_gpio_init+0xe8>)
 800831c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831e:	4a32      	ldr	r2, [pc, #200]	; (80083e8 <spi_flash_gpio_init+0xe8>)
 8008320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008324:	6453      	str	r3, [r2, #68]	; 0x44
 8008326:	4b30      	ldr	r3, [pc, #192]	; (80083e8 <spi_flash_gpio_init+0xe8>)
 8008328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800832e:	60bb      	str	r3, [r7, #8]
 8008330:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008332:	2300      	movs	r3, #0
 8008334:	607b      	str	r3, [r7, #4]
 8008336:	4b2c      	ldr	r3, [pc, #176]	; (80083e8 <spi_flash_gpio_init+0xe8>)
 8008338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833a:	4a2b      	ldr	r2, [pc, #172]	; (80083e8 <spi_flash_gpio_init+0xe8>)
 800833c:	f043 0301 	orr.w	r3, r3, #1
 8008340:	6313      	str	r3, [r2, #48]	; 0x30
 8008342:	4b29      	ldr	r3, [pc, #164]	; (80083e8 <spi_flash_gpio_init+0xe8>)
 8008344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	607b      	str	r3, [r7, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800834e:	2300      	movs	r3, #0
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	4b25      	ldr	r3, [pc, #148]	; (80083e8 <spi_flash_gpio_init+0xe8>)
 8008354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008356:	4a24      	ldr	r2, [pc, #144]	; (80083e8 <spi_flash_gpio_init+0xe8>)
 8008358:	f043 0302 	orr.w	r3, r3, #2
 800835c:	6313      	str	r3, [r2, #48]	; 0x30
 800835e:	4b22      	ldr	r3, [pc, #136]	; (80083e8 <spi_flash_gpio_init+0xe8>)
 8008360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	603b      	str	r3, [r7, #0]
 8008368:	683b      	ldr	r3, [r7, #0]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_CS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 800836a:	2308      	movs	r3, #8
 800836c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800836e:	2302      	movs	r3, #2
 8008370:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008372:	2300      	movs	r3, #0
 8008374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008376:	2301      	movs	r3, #1
 8008378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800837a:	2305      	movs	r3, #5
 800837c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 800837e:	f107 030c 	add.w	r3, r7, #12
 8008382:	4619      	mov	r1, r3
 8008384:	4819      	ldr	r0, [pc, #100]	; (80083ec <spi_flash_gpio_init+0xec>)
 8008386:	f001 ffb5 	bl	800a2f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 800838a:	2380      	movs	r3, #128	; 0x80
 800838c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800838e:	2302      	movs	r3, #2
 8008390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008392:	2300      	movs	r3, #0
 8008394:	617b      	str	r3, [r7, #20]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ__MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008396:	2305      	movs	r3, #5
 8008398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800839a:	f107 030c 	add.w	r3, r7, #12
 800839e:	4619      	mov	r1, r3
 80083a0:	4813      	ldr	r0, [pc, #76]	; (80083f0 <spi_flash_gpio_init+0xf0>)
 80083a2:	f001 ffa7 	bl	800a2f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80083a6:	2340      	movs	r3, #64	; 0x40
 80083a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083aa:	2300      	movs	r3, #0
 80083ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80083b2:	2305      	movs	r3, #5
 80083b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	4619      	mov	r1, r3
 80083bc:	480c      	ldr	r0, [pc, #48]	; (80083f0 <spi_flash_gpio_init+0xf0>)
 80083be:	f001 ff99 	bl	800a2f4 <HAL_GPIO_Init>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80083c2:	2310      	movs	r3, #16
 80083c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083c6:	2301      	movs	r3, #1
 80083c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80083ce:	2301      	movs	r3, #1
 80083d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80083d2:	f107 030c 	add.w	r3, r7, #12
 80083d6:	4619      	mov	r1, r3
 80083d8:	4805      	ldr	r0, [pc, #20]	; (80083f0 <spi_flash_gpio_init+0xf0>)
 80083da:	f001 ff8b 	bl	800a2f4 <HAL_GPIO_Init>
}
 80083de:	bf00      	nop
 80083e0:	3720      	adds	r7, #32
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	40023800 	.word	0x40023800
 80083ec:	40020400 	.word	0x40020400
 80083f0:	40020000 	.word	0x40020000

080083f4 <spi_flash_gpio_uninit>:

static void spi_flash_gpio_uninit()
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083fa:	1d3b      	adds	r3, r7, #4
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	605a      	str	r2, [r3, #4]
 8008402:	609a      	str	r2, [r3, #8]
 8008404:	60da      	str	r2, [r3, #12]
 8008406:	611a      	str	r2, [r3, #16]

    __HAL_RCC_SPI1_CLK_DISABLE();
 8008408:	4b1a      	ldr	r3, [pc, #104]	; (8008474 <spi_flash_gpio_uninit+0x80>)
 800840a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800840c:	4a19      	ldr	r2, [pc, #100]	; (8008474 <spi_flash_gpio_uninit+0x80>)
 800840e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008412:	6453      	str	r3, [r2, #68]	; 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_CS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8008414:	2308      	movs	r3, #8
 8008416:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008418:	2300      	movs	r3, #0
 800841a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800841c:	2300      	movs	r3, #0
 800841e:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008420:	2305      	movs	r3, #5
 8008422:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8008424:	1d3b      	adds	r3, r7, #4
 8008426:	4619      	mov	r1, r3
 8008428:	4813      	ldr	r0, [pc, #76]	; (8008478 <spi_flash_gpio_uninit+0x84>)
 800842a:	f001 ff63 	bl	800a2f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 800842e:	2380      	movs	r3, #128	; 0x80
 8008430:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008432:	2300      	movs	r3, #0
 8008434:	60fb      	str	r3, [r7, #12]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ__MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008436:	2305      	movs	r3, #5
 8008438:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800843a:	1d3b      	adds	r3, r7, #4
 800843c:	4619      	mov	r1, r3
 800843e:	480f      	ldr	r0, [pc, #60]	; (800847c <spi_flash_gpio_uninit+0x88>)
 8008440:	f001 ff58 	bl	800a2f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8008444:	2340      	movs	r3, #64	; 0x40
 8008446:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008448:	2300      	movs	r3, #0
 800844a:	60fb      	str	r3, [r7, #12]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800844c:	2305      	movs	r3, #5
 800844e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008450:	1d3b      	adds	r3, r7, #4
 8008452:	4619      	mov	r1, r3
 8008454:	4809      	ldr	r0, [pc, #36]	; (800847c <spi_flash_gpio_uninit+0x88>)
 8008456:	f001 ff4d 	bl	800a2f4 <HAL_GPIO_Init>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800845a:	2310      	movs	r3, #16
 800845c:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008462:	1d3b      	adds	r3, r7, #4
 8008464:	4619      	mov	r1, r3
 8008466:	4805      	ldr	r0, [pc, #20]	; (800847c <spi_flash_gpio_uninit+0x88>)
 8008468:	f001 ff44 	bl	800a2f4 <HAL_GPIO_Init>
}
 800846c:	bf00      	nop
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	40023800 	.word	0x40023800
 8008478:	40020400 	.word	0x40020400
 800847c:	40020000 	.word	0x40020000

08008480 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
//    GPIO_ResetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8008484:	2200      	movs	r2, #0
 8008486:	2110      	movs	r1, #16
 8008488:	4802      	ldr	r0, [pc, #8]	; (8008494 <spi_flash_select_chip+0x14>)
 800848a:	f002 f9cb 	bl	800a824 <HAL_GPIO_WritePin>
}
 800848e:	bf00      	nop
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	40020000 	.word	0x40020000

08008498 <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 8008498:	b580      	push	{r7, lr}
 800849a:	af00      	add	r7, sp, #0
//    GPIO_SetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 800849c:	2201      	movs	r2, #1
 800849e:	2110      	movs	r1, #16
 80084a0:	4802      	ldr	r0, [pc, #8]	; (80084ac <spi_flash_deselect_chip+0x14>)
 80084a2:	f002 f9bf 	bl	800a824 <HAL_GPIO_WritePin>
}
 80084a6:	bf00      	nop
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	40020000 	.word	0x40020000

080084b0 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 80084b8:	4b1f      	ldr	r3, [pc, #124]	; (8008538 <spi_flash_get_baud_rate_prescaler+0x88>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a1f      	ldr	r2, [pc, #124]	; (800853c <spi_flash_get_baud_rate_prescaler+0x8c>)
 80084be:	fba2 2303 	umull	r2, r3, r2, r3
 80084c2:	099b      	lsrs	r3, r3, #6
 80084c4:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	085b      	lsrs	r3, r3, #1
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d301      	bcc.n	80084d4 <spi_flash_get_baud_rate_prescaler+0x24>
        return SPI_BAUDRATEPRESCALER_2;
 80084d0:	2300      	movs	r3, #0
 80084d2:	e02a      	b.n	800852a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	089b      	lsrs	r3, r3, #2
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d301      	bcc.n	80084e2 <spi_flash_get_baud_rate_prescaler+0x32>
        return SPI_BAUDRATEPRESCALER_4;
 80084de:	2308      	movs	r3, #8
 80084e0:	e023      	b.n	800852a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	08db      	lsrs	r3, r3, #3
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d301      	bcc.n	80084f0 <spi_flash_get_baud_rate_prescaler+0x40>
        return SPI_BAUDRATEPRESCALER_8;
 80084ec:	2310      	movs	r3, #16
 80084ee:	e01c      	b.n	800852a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	091b      	lsrs	r3, r3, #4
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d301      	bcc.n	80084fe <spi_flash_get_baud_rate_prescaler+0x4e>
        return SPI_BAUDRATEPRESCALER_16;
 80084fa:	2318      	movs	r3, #24
 80084fc:	e015      	b.n	800852a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	095b      	lsrs	r3, r3, #5
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	d301      	bcc.n	800850c <spi_flash_get_baud_rate_prescaler+0x5c>
        return SPI_BAUDRATEPRESCALER_32;
 8008508:	2320      	movs	r3, #32
 800850a:	e00e      	b.n	800852a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	099b      	lsrs	r3, r3, #6
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	429a      	cmp	r2, r3
 8008514:	d301      	bcc.n	800851a <spi_flash_get_baud_rate_prescaler+0x6a>
        return SPI_BAUDRATEPRESCALER_64;
 8008516:	2328      	movs	r3, #40	; 0x28
 8008518:	e007      	b.n	800852a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	09db      	lsrs	r3, r3, #7
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d301      	bcc.n	8008528 <spi_flash_get_baud_rate_prescaler+0x78>
        return SPI_BAUDRATEPRESCALER_128;
 8008524:	2330      	movs	r3, #48	; 0x30
 8008526:	e000      	b.n	800852a <spi_flash_get_baud_rate_prescaler+0x7a>
    else
        return SPI_BAUDRATEPRESCALER_256;
 8008528:	2338      	movs	r3, #56	; 0x38
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	20000138 	.word	0x20000138
 800853c:	10624dd3 	.word	0x10624dd3

08008540 <spi_flash_init>:

static int spi_flash_init(void *conf, uint32_t conf_size)
{
 8008540:	b590      	push	{r4, r7, lr}
 8008542:	b08f      	sub	sp, #60	; 0x3c
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef spi_init;

    if (conf_size < sizeof(spi_conf_t))
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b0e      	cmp	r3, #14
 800854e:	d802      	bhi.n	8008556 <spi_flash_init+0x16>
        return -1; 
 8008550:	f04f 33ff 	mov.w	r3, #4294967295
 8008554:	e041      	b.n	80085da <spi_flash_init+0x9a>
    spi_conf = *(spi_conf_t *)conf;
 8008556:	4b23      	ldr	r3, [pc, #140]	; (80085e4 <spi_flash_init+0xa4>)
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	4614      	mov	r4, r2
 800855c:	6820      	ldr	r0, [r4, #0]
 800855e:	6861      	ldr	r1, [r4, #4]
 8008560:	68a2      	ldr	r2, [r4, #8]
 8008562:	c307      	stmia	r3!, {r0, r1, r2}
 8008564:	89a2      	ldrh	r2, [r4, #12]
 8008566:	7ba1      	ldrb	r1, [r4, #14]
 8008568:	801a      	strh	r2, [r3, #0]
 800856a:	460a      	mov	r2, r1
 800856c:	709a      	strb	r2, [r3, #2]

    spi_flash_gpio_init();  // 初始化SPI Flash的GPIO引脚
 800856e:	f7ff fec7 	bl	8008300 <spi_flash_gpio_init>

    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8008572:	f7ff ff91 	bl	8008498 <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Init.Direction = SPI_DIRECTION_2LINES; // SPI双线全双工模式
 8008576:	4b1c      	ldr	r3, [pc, #112]	; (80085e8 <spi_flash_init+0xa8>)
 8008578:	2200      	movs	r2, #0
 800857a:	609a      	str	r2, [r3, #8]
    hspi1.Init.Mode = SPI_MODE_MASTER;           // 主模式
 800857c:	4b1a      	ldr	r3, [pc, #104]	; (80085e8 <spi_flash_init+0xa8>)
 800857e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008582:	605a      	str	r2, [r3, #4]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;     // 数据大小为8位
 8008584:	4b18      	ldr	r3, [pc, #96]	; (80085e8 <spi_flash_init+0xa8>)
 8008586:	2200      	movs	r2, #0
 8008588:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // 时钟极性为高电平时有效
 800858a:	4b17      	ldr	r3, [pc, #92]	; (80085e8 <spi_flash_init+0xa8>)
 800858c:	2202      	movs	r2, #2
 800858e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;       // 时钟相位为第2个边沿（上升沿）有效
 8008590:	4b15      	ldr	r3, [pc, #84]	; (80085e8 <spi_flash_init+0xa8>)
 8008592:	2201      	movs	r2, #1
 8008594:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;               // 使用软件管理片选信号
 8008596:	4b14      	ldr	r3, [pc, #80]	; (80085e8 <spi_flash_init+0xa8>)
 8008598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800859c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq); // 设置波特率预分频值（假设spi_conf.freq是你的频率设置）
 800859e:	4b11      	ldr	r3, [pc, #68]	; (80085e4 <spi_flash_init+0xa4>)
 80085a0:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7ff ff83 	bl	80084b0 <spi_flash_get_baud_rate_prescaler>
 80085aa:	4603      	mov	r3, r0
 80085ac:	461a      	mov	r2, r3
 80085ae:	4b0e      	ldr	r3, [pc, #56]	; (80085e8 <spi_flash_init+0xa8>)
 80085b0:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;      // 数据传输的起始位为最高有效位
 80085b2:	4b0d      	ldr	r3, [pc, #52]	; (80085e8 <spi_flash_init+0xa8>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	621a      	str	r2, [r3, #32]
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE; // 禁用CRC校验
 80085b8:	4b0b      	ldr	r3, [pc, #44]	; (80085e8 <spi_flash_init+0xa8>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;               // CRC校验多项式（不使用CRC时此值无关紧要）
 80085be:	4b0a      	ldr	r3, [pc, #40]	; (80085e8 <spi_flash_init+0xa8>)
 80085c0:	220a      	movs	r2, #10
 80085c2:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80085c4:	4808      	ldr	r0, [pc, #32]	; (80085e8 <spi_flash_init+0xa8>)
 80085c6:	f004 fcba 	bl	800cf3e <HAL_SPI_Init>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <spi_flash_init+0x94>
    {
      Error_Handler();
 80085d0:	f7fd fa5e 	bl	8005a90 <Error_Handler>
    }  // 根据以上配置初始化SPI1

    /* 使能SPI */
//    SPI_Cmd(SPI1, ENABLE);
    spi_flash_chip_init();  // 初始化SPI Flash芯片
 80085d4:	f000 f95a 	bl	800888c <spi_flash_chip_init>

    return 0;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	373c      	adds	r7, #60	; 0x3c
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd90      	pop	{r4, r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20005190 	.word	0x20005190
 80085e8:	20005138 	.word	0x20005138

080085ec <spi_flash_uninit>:

static void spi_flash_uninit()
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit();  // 反初始化SPI Flash的GPIO引脚
 80085f0:	f7ff ff00 	bl	80083f4 <spi_flash_gpio_uninit>

    /* 禁用SPI */
//    SPI_Cmd(SPI3, DISABLE);
//    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef* hspi);
    HAL_SPI_DeInit(&hspi1);
 80085f4:	4802      	ldr	r0, [pc, #8]	; (8008600 <spi_flash_uninit+0x14>)
 80085f6:	f004 fd2b 	bl	800d050 <HAL_SPI_DeInit>
}
 80085fa:	bf00      	nop
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	20005138 	.word	0x20005138

08008604 <spi_flash_send_byte>:

static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]
    uint8_t rxData;

    // 等待SPI空闲
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800860e:	bf00      	nop
 8008610:	480c      	ldr	r0, [pc, #48]	; (8008644 <spi_flash_send_byte+0x40>)
 8008612:	f005 fa33 	bl	800da7c <HAL_SPI_GetState>
 8008616:	4603      	mov	r3, r0
 8008618:	2b01      	cmp	r3, #1
 800861a:	d1f9      	bne.n	8008610 <spi_flash_send_byte+0xc>

    // 发送数据
    HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 800861c:	1df9      	adds	r1, r7, #7
 800861e:	f04f 33ff 	mov.w	r3, #4294967295
 8008622:	2201      	movs	r2, #1
 8008624:	4807      	ldr	r0, [pc, #28]	; (8008644 <spi_flash_send_byte+0x40>)
 8008626:	f004 fd3b 	bl	800d0a0 <HAL_SPI_Transmit>

    // 接收数据
    HAL_SPI_Receive(&hspi1, &rxData, 1, HAL_MAX_DELAY);
 800862a:	f107 010f 	add.w	r1, r7, #15
 800862e:	f04f 33ff 	mov.w	r3, #4294967295
 8008632:	2201      	movs	r2, #1
 8008634:	4803      	ldr	r0, [pc, #12]	; (8008644 <spi_flash_send_byte+0x40>)
 8008636:	f004 fe6f 	bl	800d318 <HAL_SPI_Receive>

    return rxData;
 800863a:	7bfb      	ldrb	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20005138 	.word	0x20005138

08008648 <spi_flash_read_byte>:

static inline uint8_t spi_flash_read_byte()
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 800864c:	20ff      	movs	r0, #255	; 0xff
 800864e:	f7ff ffd9 	bl	8008604 <spi_flash_send_byte>
 8008652:	4603      	mov	r3, r0
}
 8008654:	4618      	mov	r0, r3
 8008656:	bd80      	pop	{r7, pc}

08008658 <spi_flash_set_feature>:

static void spi_flash_set_feature(uint8_t addr, uint8_t data)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	460a      	mov	r2, r1
 8008662:	71fb      	strb	r3, [r7, #7]
 8008664:	4613      	mov	r3, r2
 8008666:	71bb      	strb	r3, [r7, #6]
    spi_flash_select_chip();  // 选中SPI Flash
 8008668:	f7ff ff0a 	bl	8008480 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_SET_FEATURE);  // 发送设置特征的操作码
 800866c:	201f      	movs	r0, #31
 800866e:	f7ff ffc9 	bl	8008604 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff ffc5 	bl	8008604 <spi_flash_send_byte>
    spi_flash_send_byte(data);  // 发送数据
 800867a:	79bb      	ldrb	r3, [r7, #6]
 800867c:	4618      	mov	r0, r3
 800867e:	f7ff ffc1 	bl	8008604 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8008682:	f7ff ff09 	bl	8008498 <spi_flash_deselect_chip>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <spi_flash_get_feature>:

static void spi_flash_get_feature(uint8_t addr, uint8_t *data)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	4603      	mov	r3, r0
 8008696:	6039      	str	r1, [r7, #0]
 8008698:	71fb      	strb	r3, [r7, #7]
    spi_flash_select_chip();  // 选中SPI Flash
 800869a:	f7ff fef1 	bl	8008480 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_GET_FEATURE);  // 发送获取特征的操作码
 800869e:	200f      	movs	r0, #15
 80086a0:	f7ff ffb0 	bl	8008604 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff ffac 	bl	8008604 <spi_flash_send_byte>
    *data = spi_flash_read_byte();  // 读取一个字节的数据
 80086ac:	f7ff ffcc 	bl	8008648 <spi_flash_read_byte>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	701a      	strb	r2, [r3, #0]
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 80086b8:	f7ff feee 	bl	8008498 <spi_flash_deselect_chip>
}
 80086bc:	bf00      	nop
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
    uint32_t timeout = 0x1000000;  // 超时时间
 80086ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086ce:	607b      	str	r3, [r7, #4]
    uint8_t status;

    do {
        spi_flash_get_feature(_SPI_NAND_ADDR_STATUS, &status);  // 获取状态
 80086d0:	1cfb      	adds	r3, r7, #3
 80086d2:	4619      	mov	r1, r3
 80086d4:	20c0      	movs	r0, #192	; 0xc0
 80086d6:	f7ff ffda 	bl	800868e <spi_flash_get_feature>
    } while((status & _SPI_NAND_VAL_OIP) && timeout);
 80086da:	78fb      	ldrb	r3, [r7, #3]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <spi_flash_read_status+0x26>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1f2      	bne.n	80086d0 <spi_flash_read_status+0xc>

    if (!timeout)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <spi_flash_read_status+0x30>
        return FLASH_STATUS_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e02b      	b.n	800874c <spi_flash_read_status+0x88>

    switch(flash_last_operation){
 80086f4:	4b17      	ldr	r3, [pc, #92]	; (8008754 <spi_flash_read_status+0x90>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d014      	beq.n	8008726 <spi_flash_read_status+0x62>
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d81d      	bhi.n	800873c <spi_flash_read_status+0x78>
 8008700:	2b01      	cmp	r3, #1
 8008702:	d002      	beq.n	800870a <spi_flash_read_status+0x46>
 8008704:	2b02      	cmp	r3, #2
 8008706:	d007      	beq.n	8008718 <spi_flash_read_status+0x54>
                return FLASH_STATUS_ERROR;
            break;
        case FLASH_OP_SPARE:
        case FLASH_OP_EMPTY:
        default:
            break;
 8008708:	e018      	b.n	800873c <spi_flash_read_status+0x78>
            if(status & _SPI_NAND_VAL_ERASE_FAIL)
 800870a:	78fb      	ldrb	r3, [r7, #3]
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b00      	cmp	r3, #0
 8008712:	d015      	beq.n	8008740 <spi_flash_read_status+0x7c>
                return FLASH_STATUS_ERROR;
 8008714:	2302      	movs	r3, #2
 8008716:	e019      	b.n	800874c <spi_flash_read_status+0x88>
            if(status & _SPI_NAND_VAL_PROGRAM_FAIL)
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	f003 0308 	and.w	r3, r3, #8
 800871e:	2b00      	cmp	r3, #0
 8008720:	d010      	beq.n	8008744 <spi_flash_read_status+0x80>
                return FLASH_STATUS_ERROR;
 8008722:	2302      	movs	r3, #2
 8008724:	e012      	b.n	800874c <spi_flash_read_status+0x88>
            if((status & spi_conf.ecc_err_bits_mask) == spi_conf.ecc_err_bits_state)
 8008726:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <spi_flash_read_status+0x94>)
 8008728:	799a      	ldrb	r2, [r3, #6]
 800872a:	78fb      	ldrb	r3, [r7, #3]
 800872c:	4013      	ands	r3, r2
 800872e:	b2da      	uxtb	r2, r3
 8008730:	4b09      	ldr	r3, [pc, #36]	; (8008758 <spi_flash_read_status+0x94>)
 8008732:	79db      	ldrb	r3, [r3, #7]
 8008734:	429a      	cmp	r2, r3
 8008736:	d107      	bne.n	8008748 <spi_flash_read_status+0x84>
                return FLASH_STATUS_ERROR;
 8008738:	2302      	movs	r3, #2
 800873a:	e007      	b.n	800874c <spi_flash_read_status+0x88>
            break;
 800873c:	bf00      	nop
 800873e:	e004      	b.n	800874a <spi_flash_read_status+0x86>
            break;
 8008740:	bf00      	nop
 8008742:	e002      	b.n	800874a <spi_flash_read_status+0x86>
            break;
 8008744:	bf00      	nop
 8008746:	e000      	b.n	800874a <spi_flash_read_status+0x86>
            break;
 8008748:	bf00      	nop
    }
    return FLASH_STATUS_READY;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	200051a0 	.word	0x200051a0
 8008758:	20005190 	.word	0x20005190

0800875c <spi_flash_select_die_cmd>:

// 选择 SPI Flash 的芯片
static void spi_flash_select_die_cmd(uint32_t die)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
    switch(spi_conf.die_select_type) {
 8008764:	4b18      	ldr	r3, [pc, #96]	; (80087c8 <spi_flash_select_die_cmd+0x6c>)
 8008766:	7a9b      	ldrb	r3, [r3, #10]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d002      	beq.n	8008772 <spi_flash_select_die_cmd+0x16>
 800876c:	2b02      	cmp	r3, #2
 800876e:	d00d      	beq.n	800878c <spi_flash_select_die_cmd+0x30>
        }
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
        break;
    }
    default:
        break;
 8008770:	e026      	b.n	80087c0 <spi_flash_select_die_cmd+0x64>
        spi_flash_select_chip();  // 选择 Flash 芯片
 8008772:	f7ff fe85 	bl	8008480 <spi_flash_select_chip>
        spi_flash_send_byte(_SPI_NAND_OP_DIE_SELECT);  // 发送选择芯片的指令
 8008776:	20c2      	movs	r0, #194	; 0xc2
 8008778:	f7ff ff44 	bl	8008604 <spi_flash_send_byte>
        spi_flash_send_byte(die);  // 发送芯片编号
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	b2db      	uxtb	r3, r3
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff ff3f 	bl	8008604 <spi_flash_send_byte>
        spi_flash_deselect_chip();  // 取消选择芯片
 8008786:	f7ff fe87 	bl	8008498 <spi_flash_deselect_chip>
        break;
 800878a:	e019      	b.n	80087c0 <spi_flash_select_die_cmd+0x64>
        spi_flash_get_feature(_SPI_NAND_ADDR_FEATURE_4, &feature);  // 读取 Flash 的特征值
 800878c:	f107 030f 	add.w	r3, r7, #15
 8008790:	4619      	mov	r1, r3
 8008792:	20d0      	movs	r0, #208	; 0xd0
 8008794:	f7ff ff7b 	bl	800868e <spi_flash_get_feature>
        if(die == 0) {
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d105      	bne.n	80087aa <spi_flash_select_die_cmd+0x4e>
            feature &= ~(0x40);  // 清除特征值中的某位
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	73fb      	strb	r3, [r7, #15]
 80087a8:	e004      	b.n	80087b4 <spi_flash_select_die_cmd+0x58>
            feature |= 0x40;  // 设置特征值中的某位
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	73fb      	strb	r3, [r7, #15]
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	4619      	mov	r1, r3
 80087b8:	20d0      	movs	r0, #208	; 0xd0
 80087ba:	f7ff ff4d 	bl	8008658 <spi_flash_set_feature>
        break;
 80087be:	bf00      	nop
    }
}
 80087c0:	bf00      	nop
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20005190 	.word	0x20005190

080087cc <spi_flash_select_die>:

// 选择 SPI Flash 的 die（芯片）（用于多芯片的情况）
static void spi_flash_select_die(uint32_t page)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
    uint32_t die = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	60fb      	str	r3, [r7, #12]
    if(spi_conf.die_select_type) {
 80087d8:	4b0f      	ldr	r3, [pc, #60]	; (8008818 <spi_flash_select_die+0x4c>)
 80087da:	7a9b      	ldrb	r3, [r3, #10]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d017      	beq.n	8008810 <spi_flash_select_die+0x44>
        if(!spi_conf.plane_select_have)
 80087e0:	4b0d      	ldr	r3, [pc, #52]	; (8008818 <spi_flash_select_die+0x4c>)
 80087e2:	7a5b      	ldrb	r3, [r3, #9]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d104      	bne.n	80087f2 <spi_flash_select_die+0x26>
            die = ((page >> 16) & 0xff);  // 计算芯片编号
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	0c1b      	lsrs	r3, r3, #16
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	e003      	b.n	80087fa <spi_flash_select_die+0x2e>
        else
            die = ((page >> 17) & 0xff);  // 计算芯片编号
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	0c5b      	lsrs	r3, r3, #17
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	60fb      	str	r3, [r7, #12]
        if (current_die != die) {
 80087fa:	4b08      	ldr	r3, [pc, #32]	; (800881c <spi_flash_select_die+0x50>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	429a      	cmp	r2, r3
 8008802:	d005      	beq.n	8008810 <spi_flash_select_die+0x44>
            current_die = die;
 8008804:	4a05      	ldr	r2, [pc, #20]	; (800881c <spi_flash_select_die+0x50>)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6013      	str	r3, [r2, #0]
            spi_flash_select_die_cmd(die);  // 选择芯片
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f7ff ffa6 	bl	800875c <spi_flash_select_die_cmd>
        }
    }
}
 8008810:	bf00      	nop
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	20005190 	.word	0x20005190
 800881c:	200051a4 	.word	0x200051a4

08008820 <spi_flash_read_id>:

// 读取 SPI Flash 的 ID（厂商ID和设备ID）
static void spi_flash_read_id(chip_id_t *chip_id)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();  // 选择 Flash 芯片
 8008828:	f7ff fe2a 	bl	8008480 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_READ_ID);  // 发送读取 ID 的指令
 800882c:	209f      	movs	r0, #159	; 0x9f
 800882e:	f7ff fee9 	bl	8008604 <spi_flash_send_byte>
    spi_flash_send_byte(_SPI_NAND_ADDR_MANUFACTURE_ID);  // 发送读取厂商ID的指令
 8008832:	2000      	movs	r0, #0
 8008834:	f7ff fee6 	bl	8008604 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();  // 读取厂商ID
 8008838:	f7ff ff06 	bl	8008648 <spi_flash_read_byte>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();  // 读取设备ID
 8008844:	f7ff ff00 	bl	8008648 <spi_flash_read_byte>
 8008848:	4603      	mov	r3, r0
 800884a:	461a      	mov	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();  // 读取第三个ID
 8008850:	f7ff fefa 	bl	8008648 <spi_flash_read_byte>
 8008854:	4603      	mov	r3, r0
 8008856:	461a      	mov	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();  // 读取第四个ID
 800885c:	f7ff fef4 	bl	8008648 <spi_flash_read_byte>
 8008860:	4603      	mov	r3, r0
 8008862:	461a      	mov	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();  // 读取第五个ID
 8008868:	f7ff feee 	bl	8008648 <spi_flash_read_byte>
 800886c:	4603      	mov	r3, r0
 800886e:	461a      	mov	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();  // 读取第六个ID
 8008874:	f7ff fee8 	bl	8008648 <spi_flash_read_byte>
 8008878:	4603      	mov	r3, r0
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();  // 取消选择芯片
 8008880:	f7ff fe0a 	bl	8008498 <spi_flash_deselect_chip>
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <spi_flash_chip_init>:

// SPI Flash 初始化
static void spi_flash_chip_init(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	af00      	add	r7, sp, #0
    if(spi_conf.die_select_type) {
 8008890:	4b19      	ldr	r3, [pc, #100]	; (80088f8 <spi_flash_chip_init+0x6c>)
 8008892:	7a9b      	ldrb	r3, [r3, #10]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d019      	beq.n	80088cc <spi_flash_chip_init+0x40>
        spi_flash_select_die_cmd(0);  // 选择第一个芯片
 8008898:	2000      	movs	r0, #0
 800889a:	f7ff ff5f 	bl	800875c <spi_flash_select_die_cmd>
        if(spi_conf.mode_data != UNDEFINED_CMD)
 800889e:	4b16      	ldr	r3, [pc, #88]	; (80088f8 <spi_flash_chip_init+0x6c>)
 80088a0:	791b      	ldrb	r3, [r3, #4]
 80088a2:	2bff      	cmp	r3, #255	; 0xff
 80088a4:	d005      	beq.n	80088b2 <spi_flash_chip_init+0x26>
            spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 80088a6:	4b14      	ldr	r3, [pc, #80]	; (80088f8 <spi_flash_chip_init+0x6c>)
 80088a8:	791b      	ldrb	r3, [r3, #4]
 80088aa:	4619      	mov	r1, r3
 80088ac:	20b0      	movs	r0, #176	; 0xb0
 80088ae:	f7ff fed3 	bl	8008658 <spi_flash_set_feature>
        if(spi_conf.unlock_data != UNDEFINED_CMD)
 80088b2:	4b11      	ldr	r3, [pc, #68]	; (80088f8 <spi_flash_chip_init+0x6c>)
 80088b4:	795b      	ldrb	r3, [r3, #5]
 80088b6:	2bff      	cmp	r3, #255	; 0xff
 80088b8:	d005      	beq.n	80088c6 <spi_flash_chip_init+0x3a>
            spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 80088ba:	4b0f      	ldr	r3, [pc, #60]	; (80088f8 <spi_flash_chip_init+0x6c>)
 80088bc:	795b      	ldrb	r3, [r3, #5]
 80088be:	4619      	mov	r1, r3
 80088c0:	20a0      	movs	r0, #160	; 0xa0
 80088c2:	f7ff fec9 	bl	8008658 <spi_flash_set_feature>
        spi_flash_select_die_cmd(1);  // 选择第二个芯片
 80088c6:	2001      	movs	r0, #1
 80088c8:	f7ff ff48 	bl	800875c <spi_flash_select_die_cmd>
    }
    if(spi_conf.mode_data != UNDEFINED_CMD)
 80088cc:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <spi_flash_chip_init+0x6c>)
 80088ce:	791b      	ldrb	r3, [r3, #4]
 80088d0:	2bff      	cmp	r3, #255	; 0xff
 80088d2:	d005      	beq.n	80088e0 <spi_flash_chip_init+0x54>
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 80088d4:	4b08      	ldr	r3, [pc, #32]	; (80088f8 <spi_flash_chip_init+0x6c>)
 80088d6:	791b      	ldrb	r3, [r3, #4]
 80088d8:	4619      	mov	r1, r3
 80088da:	20b0      	movs	r0, #176	; 0xb0
 80088dc:	f7ff febc 	bl	8008658 <spi_flash_set_feature>
    if(spi_conf.unlock_data != UNDEFINED_CMD)
 80088e0:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <spi_flash_chip_init+0x6c>)
 80088e2:	795b      	ldrb	r3, [r3, #5]
 80088e4:	2bff      	cmp	r3, #255	; 0xff
 80088e6:	d005      	beq.n	80088f4 <spi_flash_chip_init+0x68>
        spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 80088e8:	4b03      	ldr	r3, [pc, #12]	; (80088f8 <spi_flash_chip_init+0x6c>)
 80088ea:	795b      	ldrb	r3, [r3, #5]
 80088ec:	4619      	mov	r1, r3
 80088ee:	20a0      	movs	r0, #160	; 0xa0
 80088f0:	f7ff feb2 	bl	8008658 <spi_flash_set_feature>
}
 80088f4:	bf00      	nop
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	20005190 	.word	0x20005190

080088fc <spi_flash_write_enable>:

// 启用 Flash 的写入使能
static void spi_flash_write_enable()
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
    spi_flash_select_chip();  // 选择 Flash 芯片
 8008900:	f7ff fdbe 	bl	8008480 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_WRITE_ENABLE);  // 发送写使能指令
 8008904:	2006      	movs	r0, #6
 8008906:	f7ff fe7d 	bl	8008604 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择芯片
 800890a:	f7ff fdc5 	bl	8008498 <spi_flash_deselect_chip>
}
 800890e:	bf00      	nop
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <spi_flash_program_load>:

// 向 Flash 写入数据
static void spi_flash_program_load(uint8_t *buf, uint32_t page_size, uint32_t page)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t addr = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	613b      	str	r3, [r7, #16]
    spi_flash_select_chip();  // 选择 Flash 芯片
 8008924:	f7ff fdac 	bl	8008480 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_LOAD_SINGLE);  // 发送写入数据的指令
 8008928:	2002      	movs	r0, #2
 800892a:	f7ff fe6b 	bl	8008604 <spi_flash_send_byte>

    if(spi_conf.plane_select_have) {
 800892e:	4b1f      	ldr	r3, [pc, #124]	; (80089ac <spi_flash_program_load+0x98>)
 8008930:	7a5b      	ldrb	r3, [r3, #9]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d018      	beq.n	8008968 <spi_flash_program_load+0x54>
        if((page >> 6)& (0x1))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893c:	2b00      	cmp	r3, #0
 800893e:	d009      	beq.n	8008954 <spi_flash_program_load+0x40>
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) | (0x10));  // 发送地址的第二个字节
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	0a1b      	lsrs	r3, r3, #8
 8008944:	b2db      	uxtb	r3, r3
 8008946:	f043 0310 	orr.w	r3, r3, #16
 800894a:	b2db      	uxtb	r3, r3
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fe59 	bl	8008604 <spi_flash_send_byte>
 8008952:	e00f      	b.n	8008974 <spi_flash_program_load+0x60>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) & (0xef));  // 发送地址的第二个字节
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	0a1b      	lsrs	r3, r3, #8
 8008958:	b2db      	uxtb	r3, r3
 800895a:	f023 0310 	bic.w	r3, r3, #16
 800895e:	b2db      	uxtb	r3, r3
 8008960:	4618      	mov	r0, r3
 8008962:	f7ff fe4f 	bl	8008604 <spi_flash_send_byte>
 8008966:	e005      	b.n	8008974 <spi_flash_program_load+0x60>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(addr));  // 发送地址的第二个字节
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	0a1b      	lsrs	r3, r3, #8
 800896c:	b2db      	uxtb	r3, r3
 800896e:	4618      	mov	r0, r3
 8008970:	f7ff fe48 	bl	8008604 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(addr));  // 发送地址的第一个字节
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	b2db      	uxtb	r3, r3
 8008978:	4618      	mov	r0, r3
 800897a:	f7ff fe43 	bl	8008604 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	e009      	b.n	8008998 <spi_flash_program_load+0x84>
        spi_flash_send_byte(buf[i]);  // 逐字节写入数据
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	4413      	add	r3, r2
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	4618      	mov	r0, r3
 800898e:	f7ff fe39 	bl	8008604 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	3301      	adds	r3, #1
 8008996:	617b      	str	r3, [r7, #20]
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	429a      	cmp	r2, r3
 800899e:	d3f1      	bcc.n	8008984 <spi_flash_program_load+0x70>

    spi_flash_deselect_chip();  // 取消选择芯片
 80089a0:	f7ff fd7a 	bl	8008498 <spi_flash_deselect_chip>
}
 80089a4:	bf00      	nop
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20005190 	.word	0x20005190

080089b0 <spi_flash_write_page_async>:

// 异步写入页面数据到闪存
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 80089bc:	68b8      	ldr	r0, [r7, #8]
 80089be:	f7ff ff05 	bl	80087cc <spi_flash_select_die>

    spi_flash_program_load(buf, page_size, page);  // 加载数据到写入缓冲区
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	6879      	ldr	r1, [r7, #4]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f7ff ffa4 	bl	8008914 <spi_flash_program_load>

    spi_flash_write_enable();  // 使能写入
 80089cc:	f7ff ff96 	bl	80088fc <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 80089d0:	f7ff fd56 	bl	8008480 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_EXECUTE);  // 发送写入执行命令
 80089d4:	2010      	movs	r0, #16
 80089d6:	f7ff fe15 	bl	8008604 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_WRITE;  // 记录上一次操作为写入
 80089da:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <spi_flash_write_page_async+0x60>)
 80089dc:	2202      	movs	r2, #2
 80089de:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	0c1b      	lsrs	r3, r3, #16
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff fe0c 	bl	8008604 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	0a1b      	lsrs	r3, r3, #8
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff fe06 	bl	8008604 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff fe01 	bl	8008604 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8008a02:	f7ff fd49 	bl	8008498 <spi_flash_deselect_chip>
    // spi_flash_wait_operation_end();  // 等待操作结束

    // spi_flash_write_disable();  // 禁用写入
}
 8008a06:	bf00      	nop
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	200051a0 	.word	0x200051a0

08008a14 <spi_flash_load_page_into_cache>:

// 将页面数据加载到缓存中
static uint32_t spi_flash_load_page_into_cache(uint32_t page)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff fed5 	bl	80087cc <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 8008a22:	f7ff fd2d 	bl	8008480 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 8008a26:	2013      	movs	r0, #19
 8008a28:	f7ff fdec 	bl	8008604 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_READ;  // 记录上一次操作为读取
 8008a2c:	4b0e      	ldr	r3, [pc, #56]	; (8008a68 <spi_flash_load_page_into_cache+0x54>)
 8008a2e:	2203      	movs	r2, #3
 8008a30:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	0c1b      	lsrs	r3, r3, #16
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff fde3 	bl	8008604 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	0a1b      	lsrs	r3, r3, #8
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff fddd 	bl	8008604 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff fdd8 	bl	8008604 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8008a54:	f7ff fd20 	bl	8008498 <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8008a58:	f7ff fe34 	bl	80086c4 <spi_flash_read_status>
 8008a5c:	4603      	mov	r3, r0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	200051a0 	.word	0x200051a0

08008a6c <spi_flash_read_page>:

// 读取页面数据
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t data_size)
{
 8008a6c:	b590      	push	{r4, r7, lr}
 8008a6e:	b089      	sub	sp, #36	; 0x24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
    uint32_t status = spi_flash_load_page_into_cache(page);  // 将页面数据加载到缓存中
 8008a78:	68b8      	ldr	r0, [r7, #8]
 8008a7a:	f7ff ffcb 	bl	8008a14 <spi_flash_load_page_into_cache>
 8008a7e:	61b8      	str	r0, [r7, #24]
    uint32_t data_offset = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	617b      	str	r3, [r7, #20]

    spi_flash_select_chip();  // 选择闪存芯片
 8008a84:	f7ff fcfc 	bl	8008480 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8008a88:	2003      	movs	r0, #3
 8008a8a:	f7ff fdbb 	bl	8008604 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 8008a8e:	4b27      	ldr	r3, [pc, #156]	; (8008b2c <spi_flash_read_page+0xc0>)
 8008a90:	7a1b      	ldrb	r3, [r3, #8]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d002      	beq.n	8008a9c <spi_flash_read_page+0x30>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8008a96:	20ff      	movs	r0, #255	; 0xff
 8008a98:	f7ff fdb4 	bl	8008604 <spi_flash_send_byte>

    if (spi_conf.plane_select_have) {
 8008a9c:	4b23      	ldr	r3, [pc, #140]	; (8008b2c <spi_flash_read_page+0xc0>)
 8008a9e:	7a5b      	ldrb	r3, [r3, #9]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d018      	beq.n	8008ad6 <spi_flash_read_page+0x6a>
        if ((page >> 6) & (0x1))
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d009      	beq.n	8008ac2 <spi_flash_read_page+0x56>
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) | (0x10));  // 发送地址的第二个周期
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	0a1b      	lsrs	r3, r3, #8
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f043 0310 	orr.w	r3, r3, #16
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7ff fda2 	bl	8008604 <spi_flash_send_byte>
 8008ac0:	e00f      	b.n	8008ae2 <spi_flash_read_page+0x76>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) & (0xef));  // 发送地址的第二个周期
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	0a1b      	lsrs	r3, r3, #8
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f023 0310 	bic.w	r3, r3, #16
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff fd98 	bl	8008604 <spi_flash_send_byte>
 8008ad4:	e005      	b.n	8008ae2 <spi_flash_read_page+0x76>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset));  // 发送地址的第二个周期
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	0a1b      	lsrs	r3, r3, #8
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff fd91 	bl	8008604 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(data_offset));  // 发送地址的第一个周期
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff fd8c 	bl	8008604 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <spi_flash_read_page+0xc0>)
 8008aee:	7a1b      	ldrb	r3, [r3, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d102      	bne.n	8008afa <spi_flash_read_page+0x8e>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 8008af4:	20ff      	movs	r0, #255	; 0xff
 8008af6:	f7ff fd85 	bl	8008604 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 8008afa:	2300      	movs	r3, #0
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	e009      	b.n	8008b14 <spi_flash_read_page+0xa8>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	18d4      	adds	r4, r2, r3
 8008b06:	f7ff fd9f 	bl	8008648 <spi_flash_read_byte>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	3301      	adds	r3, #1
 8008b12:	61fb      	str	r3, [r7, #28]
 8008b14:	69fa      	ldr	r2, [r7, #28]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d3f1      	bcc.n	8008b00 <spi_flash_read_page+0x94>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8008b1c:	f7ff fcbc 	bl	8008498 <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8008b20:	69bb      	ldr	r3, [r7, #24]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3724      	adds	r7, #36	; 0x24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd90      	pop	{r4, r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20005190 	.word	0x20005190

08008b30 <spi_flash_read_spare_data>:

// 读取备用数据
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
    uint32_t status;

    spi_flash_select_die(page);  // 选择闪存芯片
 8008b3e:	68b8      	ldr	r0, [r7, #8]
 8008b40:	f7ff fe44 	bl	80087cc <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 8008b44:	f7ff fc9c 	bl	8008480 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 8008b48:	2013      	movs	r0, #19
 8008b4a:	f7ff fd5b 	bl	8008604 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_SPARE;  // 记录上一次操作为备用
 8008b4e:	4b38      	ldr	r3, [pc, #224]	; (8008c30 <spi_flash_read_spare_data+0x100>)
 8008b50:	2204      	movs	r2, #4
 8008b52:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	0c1b      	lsrs	r3, r3, #16
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff fd52 	bl	8008604 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	0a1b      	lsrs	r3, r3, #8
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff fd4c 	bl	8008604 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff fd47 	bl	8008604 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8008b76:	f7ff fc8f 	bl	8008498 <spi_flash_deselect_chip>
    status = spi_flash_read_status();  // 读取状态寄存器的值
 8008b7a:	f7ff fda3 	bl	80086c4 <spi_flash_read_status>
 8008b7e:	6138      	str	r0, [r7, #16]

    spi_flash_select_chip();  // 选择闪存芯片
 8008b80:	f7ff fc7e 	bl	8008480 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8008b84:	2003      	movs	r0, #3
 8008b86:	f7ff fd3d 	bl	8008604 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 8008b8a:	4b2a      	ldr	r3, [pc, #168]	; (8008c34 <spi_flash_read_spare_data+0x104>)
 8008b8c:	7a1b      	ldrb	r3, [r3, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d002      	beq.n	8008b98 <spi_flash_read_spare_data+0x68>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8008b92:	20ff      	movs	r0, #255	; 0xff
 8008b94:	f7ff fd36 	bl	8008604 <spi_flash_send_byte>

    offset += spi_conf.spare_offset;
 8008b98:	4b26      	ldr	r3, [pc, #152]	; (8008c34 <spi_flash_read_spare_data+0x104>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	607b      	str	r3, [r7, #4]
    if (spi_conf.plane_select_have) {
 8008ba2:	4b24      	ldr	r3, [pc, #144]	; (8008c34 <spi_flash_read_spare_data+0x104>)
 8008ba4:	7a5b      	ldrb	r3, [r3, #9]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d018      	beq.n	8008bdc <spi_flash_read_spare_data+0xac>
        if ((page >> 6) & (0x1))
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d009      	beq.n	8008bc8 <spi_flash_read_spare_data+0x98>
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) | (0x10));  // 发送地址的第二个周期
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	0a1b      	lsrs	r3, r3, #8
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	f043 0310 	orr.w	r3, r3, #16
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7ff fd1f 	bl	8008604 <spi_flash_send_byte>
 8008bc6:	e00f      	b.n	8008be8 <spi_flash_read_spare_data+0xb8>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) & (0xef));  // 发送地址的第二个周期
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	0a1b      	lsrs	r3, r3, #8
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	f023 0310 	bic.w	r3, r3, #16
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7ff fd15 	bl	8008604 <spi_flash_send_byte>
 8008bda:	e005      	b.n	8008be8 <spi_flash_read_spare_data+0xb8>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(offset));  // 发送地址的第二个周期
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	0a1b      	lsrs	r3, r3, #8
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff fd0e 	bl	8008604 <spi_flash_send_byte>
    }
    spi_flash_send_byte(ADDR_1st_CYCLE(offset));  // 发送地址的第一个周期
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7ff fd09 	bl	8008604 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 8008bf2:	4b10      	ldr	r3, [pc, #64]	; (8008c34 <spi_flash_read_spare_data+0x104>)
 8008bf4:	7a1b      	ldrb	r3, [r3, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d102      	bne.n	8008c00 <spi_flash_read_spare_data+0xd0>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 8008bfa:	20ff      	movs	r0, #255	; 0xff
 8008bfc:	f7ff fd02 	bl	8008604 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 8008c00:	2300      	movs	r3, #0
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	e009      	b.n	8008c1a <spi_flash_read_spare_data+0xea>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	18d4      	adds	r4, r2, r3
 8008c0c:	f7ff fd1c 	bl	8008648 <spi_flash_read_byte>
 8008c10:	4603      	mov	r3, r0
 8008c12:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	3301      	adds	r3, #1
 8008c18:	617b      	str	r3, [r7, #20]
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d3f1      	bcc.n	8008c06 <spi_flash_read_spare_data+0xd6>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8008c22:	f7ff fc39 	bl	8008498 <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8008c26:	693b      	ldr	r3, [r7, #16]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	371c      	adds	r7, #28
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd90      	pop	{r4, r7, pc}
 8008c30:	200051a0 	.word	0x200051a0
 8008c34:	20005190 	.word	0x20005190

08008c38 <spi_flash_erase_block>:

// 擦除块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff fdc3 	bl	80087cc <spi_flash_select_die>

    spi_flash_write_enable();  // 使能写入
 8008c46:	f7ff fe59 	bl	80088fc <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 8008c4a:	f7ff fc19 	bl	8008480 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_BLOCK_ERASE);  // 发送块擦除命令
 8008c4e:	20d8      	movs	r0, #216	; 0xd8
 8008c50:	f7ff fcd8 	bl	8008604 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_ERASE;  // 记录上一次操作为擦除
 8008c54:	4b0e      	ldr	r3, [pc, #56]	; (8008c90 <spi_flash_erase_block+0x58>)
 8008c56:	2201      	movs	r2, #1
 8008c58:	601a      	str	r2, [r3, #0]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	0c1b      	lsrs	r3, r3, #16
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7ff fccf 	bl	8008604 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	0a1b      	lsrs	r3, r3, #8
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff fcc9 	bl	8008604 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7ff fcc4 	bl	8008604 <spi_flash_send_byte>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8008c7c:	f7ff fc0c 	bl	8008498 <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8008c80:	f7ff fd20 	bl	80086c4 <spi_flash_read_status>
 8008c84:	4603      	mov	r3, r0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	200051a0 	.word	0x200051a0

08008c94 <spi_flash_is_bb_supported>:

// 检查是否支持坏块检测
static inline bool spi_flash_is_bb_supported()
{
 8008c94:	b480      	push	{r7}
 8008c96:	af00      	add	r7, sp, #0
    return true;
 8008c98:	2301      	movs	r3, #1
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <spi_flash_gpio_init>:

static spi_conf_t spi_conf;

// 初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_init()
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af00      	add	r7, sp, #0
	  SPI_HandleTypeDef* spiHandle;

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008caa:	f107 030c 	add.w	r3, r7, #12
 8008cae:	2200      	movs	r2, #0
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	605a      	str	r2, [r3, #4]
 8008cb4:	609a      	str	r2, [r3, #8]
 8008cb6:	60da      	str	r2, [r3, #12]
 8008cb8:	611a      	str	r2, [r3, #16]

	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60bb      	str	r3, [r7, #8]
 8008cbe:	4b33      	ldr	r3, [pc, #204]	; (8008d8c <spi_flash_gpio_init+0xe8>)
 8008cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc2:	4a32      	ldr	r2, [pc, #200]	; (8008d8c <spi_flash_gpio_init+0xe8>)
 8008cc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8008cca:	4b30      	ldr	r3, [pc, #192]	; (8008d8c <spi_flash_gpio_init+0xe8>)
 8008ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cd2:	60bb      	str	r3, [r7, #8]
 8008cd4:	68bb      	ldr	r3, [r7, #8]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	607b      	str	r3, [r7, #4]
 8008cda:	4b2c      	ldr	r3, [pc, #176]	; (8008d8c <spi_flash_gpio_init+0xe8>)
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	4a2b      	ldr	r2, [pc, #172]	; (8008d8c <spi_flash_gpio_init+0xe8>)
 8008ce0:	f043 0301 	orr.w	r3, r3, #1
 8008ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ce6:	4b29      	ldr	r3, [pc, #164]	; (8008d8c <spi_flash_gpio_init+0xe8>)
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	607b      	str	r3, [r7, #4]
 8008cf0:	687b      	ldr	r3, [r7, #4]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	603b      	str	r3, [r7, #0]
 8008cf6:	4b25      	ldr	r3, [pc, #148]	; (8008d8c <spi_flash_gpio_init+0xe8>)
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfa:	4a24      	ldr	r2, [pc, #144]	; (8008d8c <spi_flash_gpio_init+0xe8>)
 8008cfc:	f043 0302 	orr.w	r3, r3, #2
 8008d00:	6313      	str	r3, [r2, #48]	; 0x30
 8008d02:	4b22      	ldr	r3, [pc, #136]	; (8008d8c <spi_flash_gpio_init+0xe8>)
 8008d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	683b      	ldr	r3, [r7, #0]
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    PB3     ------> SPI1_SCK
	    */
	    /*Configure SPI1_SCK pin : PtPin */
	    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8008d0e:	2308      	movs	r3, #8
 8008d10:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d12:	2302      	movs	r3, #2
 8008d14:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008d1e:	2305      	movs	r3, #5
 8008d20:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8008d22:	f107 030c 	add.w	r3, r7, #12
 8008d26:	4619      	mov	r1, r3
 8008d28:	4819      	ldr	r0, [pc, #100]	; (8008d90 <spi_flash_gpio_init+0xec>)
 8008d2a:	f001 fae3 	bl	800a2f4 <HAL_GPIO_Init>

	    /*Configure SPI1_MOSI pin : PtPin */
	    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8008d2e:	2380      	movs	r3, #128	; 0x80
 8008d30:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d32:	2302      	movs	r3, #2
 8008d34:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008d3e:	2305      	movs	r3, #5
 8008d40:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8008d42:	f107 030c 	add.w	r3, r7, #12
 8008d46:	4619      	mov	r1, r3
 8008d48:	4812      	ldr	r0, [pc, #72]	; (8008d94 <spi_flash_gpio_init+0xf0>)
 8008d4a:	f001 fad3 	bl	800a2f4 <HAL_GPIO_Init>

	    /*Configure SPI1_MISO pin : PtPin */
	    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8008d4e:	2340      	movs	r3, #64	; 0x40
 8008d50:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d52:	2300      	movs	r3, #0
 8008d54:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008d56:	2301      	movs	r3, #1
 8008d58:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8008d5a:	f107 030c 	add.w	r3, r7, #12
 8008d5e:	4619      	mov	r1, r3
 8008d60:	480c      	ldr	r0, [pc, #48]	; (8008d94 <spi_flash_gpio_init+0xf0>)
 8008d62:	f001 fac7 	bl	800a2f4 <HAL_GPIO_Init>

	    /*Configure SPI1_CS pin : PtPin */
	    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8008d66:	2310      	movs	r3, #16
 8008d68:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d72:	2300      	movs	r3, #0
 8008d74:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008d76:	f107 030c 	add.w	r3, r7, #12
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	4805      	ldr	r0, [pc, #20]	; (8008d94 <spi_flash_gpio_init+0xf0>)
 8008d7e:	f001 fab9 	bl	800a2f4 <HAL_GPIO_Init>
}
 8008d82:	bf00      	nop
 8008d84:	3720      	adds	r7, #32
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	40023800 	.word	0x40023800
 8008d90:	40020400 	.word	0x40020400
 8008d94:	40020000 	.word	0x40020000

08008d98 <spi_flash_select_chip>:
	    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
}

// 选中SPI Flash芯片
static inline void spi_flash_select_chip()
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2110      	movs	r1, #16
 8008da0:	4802      	ldr	r0, [pc, #8]	; (8008dac <spi_flash_select_chip+0x14>)
 8008da2:	f001 fd3f 	bl	800a824 <HAL_GPIO_WritePin>
}
 8008da6:	bf00      	nop
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	40020000 	.word	0x40020000

08008db0 <spi_flash_deselect_chip>:

// 取消选中SPI Flash芯片
static inline void spi_flash_deselect_chip()
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8008db4:	2201      	movs	r2, #1
 8008db6:	2110      	movs	r1, #16
 8008db8:	4802      	ldr	r0, [pc, #8]	; (8008dc4 <spi_flash_deselect_chip+0x14>)
 8008dba:	f001 fd33 	bl	800a824 <HAL_GPIO_WritePin>
}
 8008dbe:	bf00      	nop
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40020000 	.word	0x40020000

08008dc8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_HandleTypeDef* hspi, SPI_InitTypeDef* SPI_InitStruct)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));

    /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
       master/slave mode, CPOL and CPHA */
    hspi->Init.Direction = SPI_InitStruct->Direction;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	609a      	str	r2, [r3, #8]
    hspi->Init.Mode = SPI_InitStruct->Mode;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	605a      	str	r2, [r3, #4]
    hspi->Init.DataSize = SPI_InitStruct->DataSize;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	689a      	ldr	r2, [r3, #8]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60da      	str	r2, [r3, #12]
    hspi->Init.CLKPolarity = SPI_InitStruct->CLKPolarity;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	68da      	ldr	r2, [r3, #12]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase = SPI_InitStruct->CLKPhase;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	691a      	ldr	r2, [r3, #16]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	615a      	str	r2, [r3, #20]
    hspi->Init.NSS = SPI_InitStruct->NSS;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	695a      	ldr	r2, [r3, #20]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	619a      	str	r2, [r3, #24]
    hspi->Init.BaudRatePrescaler = SPI_InitStruct->BaudRatePrescaler;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	699a      	ldr	r2, [r3, #24]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	61da      	str	r2, [r3, #28]
    hspi->Init.FirstBit = SPI_InitStruct->FirstBit;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	69da      	ldr	r2, [r3, #28]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	621a      	str	r2, [r3, #32]
    hspi->Init.TIMode = SPI_InitStruct->TIMode;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	6a1a      	ldr	r2, [r3, #32]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Initialize the SPI peripheral */
    if (HAL_SPI_Init(hspi) != HAL_OK)
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f004 f88f 	bl	800cf3e <HAL_SPI_Init>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <SPI_Init+0x62>
    {
        Error_Handler();
 8008e26:	f7fc fe33 	bl	8005a90 <Error_Handler>
    }
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <spi_flash_init>:

// 初始化SPI Flash
static int spi_flash_init(void *conf, uint32_t conf_size)
{
 8008e34:	b590      	push	{r4, r7, lr}
 8008e36:	b08f      	sub	sp, #60	; 0x3c
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef spi_init;

    if (conf_size < sizeof(spi_conf_t))
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b0c      	cmp	r3, #12
 8008e42:	d802      	bhi.n	8008e4a <spi_flash_init+0x16>
        return -1; 
 8008e44:	f04f 33ff 	mov.w	r3, #4294967295
 8008e48:	e041      	b.n	8008ece <spi_flash_init+0x9a>

    spi_conf = *(spi_conf_t *)conf;
 8008e4a:	4b23      	ldr	r3, [pc, #140]	; (8008ed8 <spi_flash_init+0xa4>)
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4614      	mov	r4, r2
 8008e50:	6820      	ldr	r0, [r4, #0]
 8008e52:	6861      	ldr	r1, [r4, #4]
 8008e54:	68a2      	ldr	r2, [r4, #8]
 8008e56:	c307      	stmia	r3!, {r0, r1, r2}
 8008e58:	7b22      	ldrb	r2, [r4, #12]
 8008e5a:	701a      	strb	r2, [r3, #0]

    spi_flash_gpio_init();
 8008e5c:	f7ff ff22 	bl	8008ca4 <spi_flash_gpio_init>

    spi_flash_deselect_chip();
 8008e60:	f7ff ffa6 	bl	8008db0 <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Instance = SPI1;
 8008e64:	4b1d      	ldr	r3, [pc, #116]	; (8008edc <spi_flash_init+0xa8>)
 8008e66:	4a1e      	ldr	r2, [pc, #120]	; (8008ee0 <spi_flash_init+0xac>)
 8008e68:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8008e6a:	4b1c      	ldr	r3, [pc, #112]	; (8008edc <spi_flash_init+0xa8>)
 8008e6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008e70:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008e72:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <spi_flash_init+0xa8>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008e78:	4b18      	ldr	r3, [pc, #96]	; (8008edc <spi_flash_init+0xa8>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008e7e:	4b17      	ldr	r3, [pc, #92]	; (8008edc <spi_flash_init+0xa8>)
 8008e80:	2202      	movs	r2, #2
 8008e82:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008e84:	4b15      	ldr	r3, [pc, #84]	; (8008edc <spi_flash_init+0xa8>)
 8008e86:	2201      	movs	r2, #1
 8008e88:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8008e8a:	4b14      	ldr	r3, [pc, #80]	; (8008edc <spi_flash_init+0xa8>)
 8008e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e90:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e92:	4b12      	ldr	r3, [pc, #72]	; (8008edc <spi_flash_init+0xa8>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008e98:	4b10      	ldr	r3, [pc, #64]	; (8008edc <spi_flash_init+0xa8>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008e9e:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <spi_flash_init+0xa8>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ea4:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <spi_flash_init+0xa8>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8008eaa:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <spi_flash_init+0xa8>)
 8008eac:	220a      	movs	r2, #10
 8008eae:	62da      	str	r2, [r3, #44]	; 0x2c
    SPI_Init(&hspi1, &spi_init);
 8008eb0:	f107 030c 	add.w	r3, r7, #12
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4809      	ldr	r0, [pc, #36]	; (8008edc <spi_flash_init+0xa8>)
 8008eb8:	f7ff ff86 	bl	8008dc8 <SPI_Init>
//    MX_SPI1_Init(&hspi1);

    /* 使能SPI */
//    SPI_Cmd(SPI1, ENABLE);
    __HAL_SPI_ENABLE(&hspi1);
 8008ebc:	4b07      	ldr	r3, [pc, #28]	; (8008edc <spi_flash_init+0xa8>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4b06      	ldr	r3, [pc, #24]	; (8008edc <spi_flash_init+0xa8>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eca:	601a      	str	r2, [r3, #0]

    return 0;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	373c      	adds	r7, #60	; 0x3c
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd90      	pop	{r4, r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	200051a8 	.word	0x200051a8
 8008edc:	20005138 	.word	0x20005138
 8008ee0:	40013000 	.word	0x40013000

08008ee4 <spi_flash_uninit>:

// 取消初始化SPI Flash
static void spi_flash_uninit()
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
//    spi_flash_gpio_uninit(&hspi1);
	HAL_SPI_MspDeInit(&hspi1);
 8008ee8:	4806      	ldr	r0, [pc, #24]	; (8008f04 <spi_flash_uninit+0x20>)
 8008eea:	f7ff f9e3 	bl	80082b4 <HAL_SPI_MspDeInit>
    /* 禁用SPI */
    __HAL_SPI_DISABLE(&hspi1);
 8008eee:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <spi_flash_uninit+0x20>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	4b03      	ldr	r3, [pc, #12]	; (8008f04 <spi_flash_uninit+0x20>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008efc:	601a      	str	r2, [r3, #0]
}
 8008efe:	bf00      	nop
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20005138 	.word	0x20005138

08008f08 <spi_flash_send_byte>:
}


// 发送一个字节到SPI Flash并返回接收到的字节
static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_byte;

    spi_flash_select_chip();
 8008f12:	f7ff ff41 	bl	8008d98 <spi_flash_select_chip>
    // 等待TXE标志位设置，表示发送缓冲区为空
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8008f16:	bf00      	nop
 8008f18:	4815      	ldr	r0, [pc, #84]	; (8008f70 <spi_flash_send_byte+0x68>)
 8008f1a:	f004 fdaf 	bl	800da7c <HAL_SPI_GetState>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d1f9      	bne.n	8008f18 <spi_flash_send_byte+0x10>

    // 发送一个字节
    if (HAL_OK == HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY))
 8008f24:	1df9      	adds	r1, r7, #7
 8008f26:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	4810      	ldr	r0, [pc, #64]	; (8008f70 <spi_flash_send_byte+0x68>)
 8008f2e:	f004 f8b7 	bl	800d0a0 <HAL_SPI_Transmit>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d113      	bne.n	8008f60 <spi_flash_send_byte+0x58>
    {
        // 等待RXNE标志位设置，表示接收缓冲区非空
        while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8008f38:	bf00      	nop
 8008f3a:	480d      	ldr	r0, [pc, #52]	; (8008f70 <spi_flash_send_byte+0x68>)
 8008f3c:	f004 fd9e 	bl	800da7c <HAL_SPI_GetState>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d1f9      	bne.n	8008f3a <spi_flash_send_byte+0x32>

        // 接收一个字节
        if (HAL_OK == HAL_SPI_Receive(&hspi1, &rx_byte, 1, HAL_MAX_DELAY))
 8008f46:	f107 010f 	add.w	r1, r7, #15
 8008f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4e:	2201      	movs	r2, #1
 8008f50:	4807      	ldr	r0, [pc, #28]	; (8008f70 <spi_flash_send_byte+0x68>)
 8008f52:	f004 f9e1 	bl	800d318 <HAL_SPI_Receive>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <spi_flash_send_byte+0x58>
        {
            return rx_byte;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
 8008f5e:	e002      	b.n	8008f66 <spi_flash_send_byte+0x5e>
        }
    }

    spi_flash_deselect_chip();
 8008f60:	f7ff ff26 	bl	8008db0 <spi_flash_deselect_chip>

    return 0; // 发送或接收出现问题，返回0或者根据需求返回其他错误值
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20005138 	.word	0x20005138

08008f74 <spi_flash_read_byte>:

// 从SPI Flash中读取一个字节
static inline uint8_t spi_flash_read_byte()
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8008f78:	20a5      	movs	r0, #165	; 0xa5
 8008f7a:	f7ff ffc5 	bl	8008f08 <spi_flash_send_byte>
 8008f7e:	4603      	mov	r3, r0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <spi_flash_read_status>:

// 读取SPI Flash的状态寄存器值
static uint32_t spi_flash_read_status()
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
    uint8_t status;
    uint32_t flash_status = FLASH_STATUS_READY;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	607b      	str	r3, [r7, #4]

    spi_flash_select_chip();
 8008f8e:	f7ff ff03 	bl	8008d98 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.status_cmd);
 8008f92:	4b16      	ldr	r3, [pc, #88]	; (8008fec <spi_flash_read_status+0x68>)
 8008f94:	799b      	ldrb	r3, [r3, #6]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff ffb6 	bl	8008f08 <spi_flash_send_byte>

    status = spi_flash_read_byte();
 8008f9c:	f7ff ffea 	bl	8008f74 <spi_flash_read_byte>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	70fb      	strb	r3, [r7, #3]

    if (spi_conf.busy_state == 1 && (status & (1 << spi_conf.busy_bit)))
 8008fa4:	4b11      	ldr	r3, [pc, #68]	; (8008fec <spi_flash_read_status+0x68>)
 8008fa6:	7a1b      	ldrb	r3, [r3, #8]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d10a      	bne.n	8008fc2 <spi_flash_read_status+0x3e>
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	4a0f      	ldr	r2, [pc, #60]	; (8008fec <spi_flash_read_status+0x68>)
 8008fb0:	79d2      	ldrb	r2, [r2, #7]
 8008fb2:	4113      	asrs	r3, r2
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <spi_flash_read_status+0x3e>
        flash_status = FLASH_STATUS_BUSY;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	607b      	str	r3, [r7, #4]
 8008fc0:	e00d      	b.n	8008fde <spi_flash_read_status+0x5a>
    else if (spi_conf.busy_state == 0 && !(status & (1 << spi_conf.busy_bit)))
 8008fc2:	4b0a      	ldr	r3, [pc, #40]	; (8008fec <spi_flash_read_status+0x68>)
 8008fc4:	7a1b      	ldrb	r3, [r3, #8]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d109      	bne.n	8008fde <spi_flash_read_status+0x5a>
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	4a07      	ldr	r2, [pc, #28]	; (8008fec <spi_flash_read_status+0x68>)
 8008fce:	79d2      	ldrb	r2, [r2, #7]
 8008fd0:	4113      	asrs	r3, r2
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <spi_flash_read_status+0x5a>
        flash_status = FLASH_STATUS_BUSY;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	607b      	str	r3, [r7, #4]

    spi_flash_deselect_chip();
 8008fde:	f7ff fee7 	bl	8008db0 <spi_flash_deselect_chip>

    return flash_status;
 8008fe2:	687b      	ldr	r3, [r7, #4]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	200051a8 	.word	0x200051a8

08008ff0 <spi_flash_get_status>:

// 获取SPI Flash的状态，等待操作完成或超时
static uint32_t spi_flash_get_status()
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8008ff6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ffa:	603b      	str	r3, [r7, #0]

    status = spi_flash_read_status();
 8008ffc:	f7ff ffc2 	bl	8008f84 <spi_flash_read_status>
 8009000:	6078      	str	r0, [r7, #4]

    /* 等待操作完成或超时 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8009002:	e005      	b.n	8009010 <spi_flash_get_status+0x20>
    {
        status = spi_flash_read_status();
 8009004:	f7ff ffbe 	bl	8008f84 <spi_flash_read_status>
 8009008:	6078      	str	r0, [r7, #4]
        timeout --;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	3b01      	subs	r3, #1
 800900e:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d102      	bne.n	800901c <spi_flash_get_status+0x2c>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1f3      	bne.n	8009004 <spi_flash_get_status+0x14>
    }

    if (!timeout)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <spi_flash_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	607b      	str	r3, [r7, #4]

    return status;
 8009026:	687b      	ldr	r3, [r7, #4]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <spi_flash_read_id>:

// 读取SPI Flash的ID
static void spi_flash_read_id(chip_id_t *chip_id)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();
 8009038:	f7ff feae 	bl	8008d98 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_id_cmd);
 800903c:	4b17      	ldr	r3, [pc, #92]	; (800909c <spi_flash_read_id+0x6c>)
 800903e:	789b      	ldrb	r3, [r3, #2]
 8009040:	4618      	mov	r0, r3
 8009042:	f7ff ff61 	bl	8008f08 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();
 8009046:	f7ff ff95 	bl	8008f74 <spi_flash_read_byte>
 800904a:	4603      	mov	r3, r0
 800904c:	461a      	mov	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();
 8009052:	f7ff ff8f 	bl	8008f74 <spi_flash_read_byte>
 8009056:	4603      	mov	r3, r0
 8009058:	461a      	mov	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();
 800905e:	f7ff ff89 	bl	8008f74 <spi_flash_read_byte>
 8009062:	4603      	mov	r3, r0
 8009064:	461a      	mov	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();
 800906a:	f7ff ff83 	bl	8008f74 <spi_flash_read_byte>
 800906e:	4603      	mov	r3, r0
 8009070:	461a      	mov	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();
 8009076:	f7ff ff7d 	bl	8008f74 <spi_flash_read_byte>
 800907a:	4603      	mov	r3, r0
 800907c:	461a      	mov	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();
 8009082:	f7ff ff77 	bl	8008f74 <spi_flash_read_byte>
 8009086:	4603      	mov	r3, r0
 8009088:	461a      	mov	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();
 800908e:	f7ff fe8f 	bl	8008db0 <spi_flash_deselect_chip>
}
 8009092:	bf00      	nop
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	200051a8 	.word	0x200051a8

080090a0 <spi_flash_write_enable>:

// 启用SPI Flash的写使能
static void spi_flash_write_enable()
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	af00      	add	r7, sp, #0
    if (spi_conf.write_en_cmd == UNDEFINED_CMD)
 80090a4:	4b07      	ldr	r3, [pc, #28]	; (80090c4 <spi_flash_write_enable+0x24>)
 80090a6:	791b      	ldrb	r3, [r3, #4]
 80090a8:	2bff      	cmp	r3, #255	; 0xff
 80090aa:	d009      	beq.n	80090c0 <spi_flash_write_enable+0x20>
        return;

    spi_flash_select_chip();
 80090ac:	f7ff fe74 	bl	8008d98 <spi_flash_select_chip>
    spi_flash_send_byte(spi_conf.write_en_cmd);
 80090b0:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <spi_flash_write_enable+0x24>)
 80090b2:	791b      	ldrb	r3, [r3, #4]
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7ff ff27 	bl	8008f08 <spi_flash_send_byte>
    spi_flash_deselect_chip();
 80090ba:	f7ff fe79 	bl	8008db0 <spi_flash_deselect_chip>
 80090be:	e000      	b.n	80090c2 <spi_flash_write_enable+0x22>
        return;
 80090c0:	bf00      	nop
}
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	200051a8 	.word	0x200051a8

080090c8 <spi_flash_write_page_async>:

// 异步写入SPI Flash的一页数据
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
    uint32_t i;

    spi_flash_write_enable();
 80090d4:	f7ff ffe4 	bl	80090a0 <spi_flash_write_enable>

    spi_flash_select_chip();
 80090d8:	f7ff fe5e 	bl	8008d98 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.write_cmd);
 80090dc:	4b19      	ldr	r3, [pc, #100]	; (8009144 <spi_flash_write_page_async+0x7c>)
 80090de:	78db      	ldrb	r3, [r3, #3]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff ff11 	bl	8008f08 <spi_flash_send_byte>

    page = page << spi_conf.page_offset;
 80090e6:	4b17      	ldr	r3, [pc, #92]	; (8009144 <spi_flash_write_page_async+0x7c>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	4093      	lsls	r3, r2
 80090f0:	60bb      	str	r3, [r7, #8]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	0c1b      	lsrs	r3, r3, #16
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7ff ff05 	bl	8008f08 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	0a1b      	lsrs	r3, r3, #8
 8009102:	b2db      	uxtb	r3, r3
 8009104:	4618      	mov	r0, r3
 8009106:	f7ff feff 	bl	8008f08 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	b2db      	uxtb	r3, r3
 800910e:	4618      	mov	r0, r3
 8009110:	f7ff fefa 	bl	8008f08 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 8009114:	2300      	movs	r3, #0
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	e009      	b.n	800912e <spi_flash_write_page_async+0x66>
        spi_flash_send_byte(buf[i]);
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	4413      	add	r3, r2
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff fef0 	bl	8008f08 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	3301      	adds	r3, #1
 800912c:	617b      	str	r3, [r7, #20]
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	429a      	cmp	r2, r3
 8009134:	d3f1      	bcc.n	800911a <spi_flash_write_page_async+0x52>

    spi_flash_deselect_chip();
 8009136:	f7ff fe3b 	bl	8008db0 <spi_flash_deselect_chip>
}
 800913a:	bf00      	nop
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	200051a8 	.word	0x200051a8

08009148 <spi_flash_read_data>:

// 从指定地址读取数据到缓冲区
static uint32_t spi_flash_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 8009148:	b590      	push	{r4, r7, lr}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
    uint32_t i, addr = (page << spi_conf.page_offset) + page_offset;
 8009156:	4b1d      	ldr	r3, [pc, #116]	; (80091cc <spi_flash_read_data+0x84>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	4093      	lsls	r3, r2
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	4413      	add	r3, r2
 8009164:	613b      	str	r3, [r7, #16]

    spi_flash_select_chip();
 8009166:	f7ff fe17 	bl	8008d98 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_cmd);
 800916a:	4b18      	ldr	r3, [pc, #96]	; (80091cc <spi_flash_read_data+0x84>)
 800916c:	785b      	ldrb	r3, [r3, #1]
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff feca 	bl	8008f08 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	0c1b      	lsrs	r3, r3, #16
 8009178:	b2db      	uxtb	r3, r3
 800917a:	4618      	mov	r0, r3
 800917c:	f7ff fec4 	bl	8008f08 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	0a1b      	lsrs	r3, r3, #8
 8009184:	b2db      	uxtb	r3, r3
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff febe 	bl	8008f08 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff feb9 	bl	8008f08 <spi_flash_send_byte>

    /* AT45DB要求在地址后写入虚拟字节 */
    spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8009196:	20a5      	movs	r0, #165	; 0xa5
 8009198:	f7ff feb6 	bl	8008f08 <spi_flash_send_byte>

    for (i = 0; i < data_size; i++)
 800919c:	2300      	movs	r3, #0
 800919e:	617b      	str	r3, [r7, #20]
 80091a0:	e009      	b.n	80091b6 <spi_flash_read_data+0x6e>
        buf[i] = spi_flash_read_byte();
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	18d4      	adds	r4, r2, r3
 80091a8:	f7ff fee4 	bl	8008f74 <spi_flash_read_byte>
 80091ac:	4603      	mov	r3, r0
 80091ae:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < data_size; i++)
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	3301      	adds	r3, #1
 80091b4:	617b      	str	r3, [r7, #20]
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d3f1      	bcc.n	80091a2 <spi_flash_read_data+0x5a>

    spi_flash_deselect_chip();
 80091be:	f7ff fdf7 	bl	8008db0 <spi_flash_deselect_chip>

    return FLASH_STATUS_READY;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	371c      	adds	r7, #28
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd90      	pop	{r4, r7, pc}
 80091cc:	200051a8 	.word	0x200051a8

080091d0 <spi_flash_read_page>:

// 从指定页读取数据到缓冲区
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
    return spi_flash_read_data(buf, page, 0, page_size);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	68b9      	ldr	r1, [r7, #8]
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f7ff ffb0 	bl	8009148 <spi_flash_read_data>
 80091e8:	4603      	mov	r3, r0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <spi_flash_read_spare_data>:

// 从指定页的偏移量读取备用数据到缓冲区
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b085      	sub	sp, #20
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	60f8      	str	r0, [r7, #12]
 80091fa:	60b9      	str	r1, [r7, #8]
 80091fc:	607a      	str	r2, [r7, #4]
 80091fe:	603b      	str	r3, [r7, #0]
    return FLASH_STATUS_INVALID_CMD;
 8009200:	2304      	movs	r3, #4
}
 8009202:	4618      	mov	r0, r3
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
	...

08009210 <spi_flash_erase_block>:

// 擦除指定块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
    uint32_t addr = page << spi_conf.page_offset;
 8009218:	4b14      	ldr	r3, [pc, #80]	; (800926c <spi_flash_erase_block+0x5c>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4093      	lsls	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]

    spi_flash_write_enable();
 8009224:	f7ff ff3c 	bl	80090a0 <spi_flash_write_enable>

    spi_flash_select_chip();
 8009228:	f7ff fdb6 	bl	8008d98 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.erase_cmd);
 800922c:	4b0f      	ldr	r3, [pc, #60]	; (800926c <spi_flash_erase_block+0x5c>)
 800922e:	795b      	ldrb	r3, [r3, #5]
 8009230:	4618      	mov	r0, r3
 8009232:	f7ff fe69 	bl	8008f08 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	0c1b      	lsrs	r3, r3, #16
 800923a:	b2db      	uxtb	r3, r3
 800923c:	4618      	mov	r0, r3
 800923e:	f7ff fe63 	bl	8008f08 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	0a1b      	lsrs	r3, r3, #8
 8009246:	b2db      	uxtb	r3, r3
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff fe5d 	bl	8008f08 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	b2db      	uxtb	r3, r3
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff fe58 	bl	8008f08 <spi_flash_send_byte>

    spi_flash_deselect_chip();
 8009258:	f7ff fdaa 	bl	8008db0 <spi_flash_deselect_chip>

    return spi_flash_get_status();
 800925c:	f7ff fec8 	bl	8008ff0 <spi_flash_get_status>
 8009260:	4603      	mov	r3, r0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	200051a8 	.word	0x200051a8

08009270 <spi_flash_is_bb_supported>:

// 检查是否支持坏块管理
static inline bool spi_flash_is_bb_supported()
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
    return false;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009286:	2300      	movs	r3, #0
 8009288:	607b      	str	r3, [r7, #4]
 800928a:	4b1f      	ldr	r3, [pc, #124]	; (8009308 <HAL_MspInit+0x88>)
 800928c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928e:	4a1e      	ldr	r2, [pc, #120]	; (8009308 <HAL_MspInit+0x88>)
 8009290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009294:	6453      	str	r3, [r2, #68]	; 0x44
 8009296:	4b1c      	ldr	r3, [pc, #112]	; (8009308 <HAL_MspInit+0x88>)
 8009298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800929a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800929e:	607b      	str	r3, [r7, #4]
 80092a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80092a2:	2300      	movs	r3, #0
 80092a4:	603b      	str	r3, [r7, #0]
 80092a6:	4b18      	ldr	r3, [pc, #96]	; (8009308 <HAL_MspInit+0x88>)
 80092a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092aa:	4a17      	ldr	r2, [pc, #92]	; (8009308 <HAL_MspInit+0x88>)
 80092ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b0:	6413      	str	r3, [r2, #64]	; 0x40
 80092b2:	4b15      	ldr	r3, [pc, #84]	; (8009308 <HAL_MspInit+0x88>)
 80092b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ba:	603b      	str	r3, [r7, #0]
 80092bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80092be:	2200      	movs	r2, #0
 80092c0:	2100      	movs	r1, #0
 80092c2:	2001      	movs	r0, #1
 80092c4:	f000 fbb3 	bl	8009a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80092c8:	2001      	movs	r0, #1
 80092ca:	f000 fbcc 	bl	8009a66 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80092ce:	2200      	movs	r2, #0
 80092d0:	2100      	movs	r1, #0
 80092d2:	2004      	movs	r0, #4
 80092d4:	f000 fbab 	bl	8009a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80092d8:	2004      	movs	r0, #4
 80092da:	f000 fbc4 	bl	8009a66 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80092de:	2200      	movs	r2, #0
 80092e0:	2100      	movs	r1, #0
 80092e2:	2005      	movs	r0, #5
 80092e4:	f000 fba3 	bl	8009a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80092e8:	2005      	movs	r0, #5
 80092ea:	f000 fbbc 	bl	8009a66 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80092ee:	2200      	movs	r2, #0
 80092f0:	2100      	movs	r1, #0
 80092f2:	2051      	movs	r0, #81	; 0x51
 80092f4:	f000 fb9b 	bl	8009a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80092f8:	2051      	movs	r0, #81	; 0x51
 80092fa:	f000 fbb4 	bl	8009a66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80092fe:	bf00      	nop
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	40023800 	.word	0x40023800

0800930c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800930c:	b480      	push	{r7}
 800930e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009310:	e7fe      	b.n	8009310 <NMI_Handler+0x4>

08009312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009312:	b480      	push	{r7}
 8009314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009316:	e7fe      	b.n	8009316 <HardFault_Handler+0x4>

08009318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800931c:	e7fe      	b.n	800931c <MemManage_Handler+0x4>

0800931e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800931e:	b480      	push	{r7}
 8009320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009322:	e7fe      	b.n	8009322 <BusFault_Handler+0x4>

08009324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009324:	b480      	push	{r7}
 8009326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009328:	e7fe      	b.n	8009328 <UsageFault_Handler+0x4>

0800932a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800932a:	b480      	push	{r7}
 800932c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800932e:	bf00      	nop
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009338:	b480      	push	{r7}
 800933a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800933c:	bf00      	nop
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009346:	b480      	push	{r7}
 8009348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800934a:	bf00      	nop
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009358:	f000 f9f6 	bl	8009748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800935c:	bf00      	nop
 800935e:	bd80      	pop	{r7, pc}

08009360 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8009364:	f002 fe62 	bl	800c02c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8009368:	bf00      	nop
 800936a:	bd80      	pop	{r7, pc}

0800936c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8009370:	f000 fc88 	bl	8009c84 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8009374:	bf00      	nop
 8009376:	bd80      	pop	{r7, pc}

08009378 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8009378:	b480      	push	{r7}
 800937a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800937c:	bf00      	nop
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
	...

08009388 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800938c:	4802      	ldr	r0, [pc, #8]	; (8009398 <SPI1_IRQHandler+0x10>)
 800938e:	f004 fa77 	bl	800d880 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8009392:	bf00      	nop
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	20005138 	.word	0x20005138

0800939c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80093a0:	4802      	ldr	r0, [pc, #8]	; (80093ac <USART1_IRQHandler+0x10>)
 80093a2:	f004 fd9d 	bl	800dee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80093a6:	bf00      	nop
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	200051bc 	.word	0x200051bc

080093b0 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 80093b4:	4802      	ldr	r0, [pc, #8]	; (80093c0 <FSMC_IRQHandler+0x10>)
 80093b6:	f001 fade 	bl	800a976 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 80093ba:	bf00      	nop
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20000c04 	.word	0x20000c04

080093c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80093c8:	4802      	ldr	r0, [pc, #8]	; (80093d4 <OTG_FS_IRQHandler+0x10>)
 80093ca:	f001 fd02 	bl	800add2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80093ce:	bf00      	nop
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	200079e0 	.word	0x200079e0

080093d8 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80093dc:	4802      	ldr	r0, [pc, #8]	; (80093e8 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 80093de:	f001 fcf8 	bl	800add2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 80093e2:	bf00      	nop
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20007eec 	.word	0x20007eec

080093ec <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80093f0:	4802      	ldr	r0, [pc, #8]	; (80093fc <OTG_HS_EP1_IN_IRQHandler+0x10>)
 80093f2:	f001 fcee 	bl	800add2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 80093f6:	bf00      	nop
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20007eec 	.word	0x20007eec

08009400 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8009404:	4802      	ldr	r0, [pc, #8]	; (8009410 <OTG_HS_IRQHandler+0x10>)
 8009406:	f001 fce4 	bl	800add2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800940a:	bf00      	nop
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20007eec 	.word	0x20007eec

08009414 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8009414:	b480      	push	{r7}
 8009416:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8009418:	bf00      	nop
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b086      	sub	sp, #24
 8009426:	af00      	add	r7, sp, #0
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	60b9      	str	r1, [r7, #8]
 800942c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800942e:	2300      	movs	r3, #0
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	e00a      	b.n	800944a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009434:	f3af 8000 	nop.w
 8009438:	4601      	mov	r1, r0
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	60ba      	str	r2, [r7, #8]
 8009440:	b2ca      	uxtb	r2, r1
 8009442:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	3301      	adds	r3, #1
 8009448:	617b      	str	r3, [r7, #20]
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	429a      	cmp	r2, r3
 8009450:	dbf0      	blt.n	8009434 <_read+0x12>
  }

  return len;
 8009452:	687b      	ldr	r3, [r7, #4]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <_close>:
  }
  return len;
}

int _close(int file)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009484:	605a      	str	r2, [r3, #4]
  return 0;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <_isatty>:

int _isatty(int file)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800949c:	2301      	movs	r3, #1
}
 800949e:	4618      	mov	r0, r3
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b085      	sub	sp, #20
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	60b9      	str	r1, [r7, #8]
 80094b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80094cc:	4a14      	ldr	r2, [pc, #80]	; (8009520 <_sbrk+0x5c>)
 80094ce:	4b15      	ldr	r3, [pc, #84]	; (8009524 <_sbrk+0x60>)
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80094d8:	4b13      	ldr	r3, [pc, #76]	; (8009528 <_sbrk+0x64>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d102      	bne.n	80094e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80094e0:	4b11      	ldr	r3, [pc, #68]	; (8009528 <_sbrk+0x64>)
 80094e2:	4a12      	ldr	r2, [pc, #72]	; (800952c <_sbrk+0x68>)
 80094e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80094e6:	4b10      	ldr	r3, [pc, #64]	; (8009528 <_sbrk+0x64>)
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4413      	add	r3, r2
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d207      	bcs.n	8009504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80094f4:	f00a faac 	bl	8013a50 <__errno>
 80094f8:	4603      	mov	r3, r0
 80094fa:	220c      	movs	r2, #12
 80094fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80094fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009502:	e009      	b.n	8009518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009504:	4b08      	ldr	r3, [pc, #32]	; (8009528 <_sbrk+0x64>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800950a:	4b07      	ldr	r3, [pc, #28]	; (8009528 <_sbrk+0x64>)
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4413      	add	r3, r2
 8009512:	4a05      	ldr	r2, [pc, #20]	; (8009528 <_sbrk+0x64>)
 8009514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009516:	68fb      	ldr	r3, [r7, #12]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	2000c000 	.word	0x2000c000
 8009524:	00001000 	.word	0x00001000
 8009528:	200051b8 	.word	0x200051b8
 800952c:	20008768 	.word	0x20008768

08009530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009534:	4b07      	ldr	r3, [pc, #28]	; (8009554 <SystemInit+0x24>)
 8009536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800953a:	4a06      	ldr	r2, [pc, #24]	; (8009554 <SystemInit+0x24>)
 800953c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8009544:	4b03      	ldr	r3, [pc, #12]	; (8009554 <SystemInit+0x24>)
 8009546:	4a04      	ldr	r2, [pc, #16]	; (8009558 <SystemInit+0x28>)
 8009548:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800954a:	bf00      	nop
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	e000ed00 	.word	0xe000ed00
 8009558:	08004000 	.word	0x08004000

0800955c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009560:	4b11      	ldr	r3, [pc, #68]	; (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009562:	4a12      	ldr	r2, [pc, #72]	; (80095ac <MX_USART1_UART_Init+0x50>)
 8009564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009566:	4b10      	ldr	r3, [pc, #64]	; (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800956c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800956e:	4b0e      	ldr	r3, [pc, #56]	; (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009570:	2200      	movs	r2, #0
 8009572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009574:	4b0c      	ldr	r3, [pc, #48]	; (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009576:	2200      	movs	r2, #0
 8009578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800957a:	4b0b      	ldr	r3, [pc, #44]	; (80095a8 <MX_USART1_UART_Init+0x4c>)
 800957c:	2200      	movs	r2, #0
 800957e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009580:	4b09      	ldr	r3, [pc, #36]	; (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009582:	220c      	movs	r2, #12
 8009584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009586:	4b08      	ldr	r3, [pc, #32]	; (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009588:	2200      	movs	r2, #0
 800958a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800958c:	4b06      	ldr	r3, [pc, #24]	; (80095a8 <MX_USART1_UART_Init+0x4c>)
 800958e:	2200      	movs	r2, #0
 8009590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009592:	4805      	ldr	r0, [pc, #20]	; (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009594:	f004 fbc4 	bl	800dd20 <HAL_UART_Init>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d001      	beq.n	80095a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800959e:	f7fc fa77 	bl	8005a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80095a2:	bf00      	nop
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	200051bc 	.word	0x200051bc
 80095ac:	40011000 	.word	0x40011000

080095b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08a      	sub	sp, #40	; 0x28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095b8:	f107 0314 	add.w	r3, r7, #20
 80095bc:	2200      	movs	r2, #0
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	605a      	str	r2, [r3, #4]
 80095c2:	609a      	str	r2, [r3, #8]
 80095c4:	60da      	str	r2, [r3, #12]
 80095c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a1d      	ldr	r2, [pc, #116]	; (8009644 <HAL_UART_MspInit+0x94>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d134      	bne.n	800963c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80095d2:	2300      	movs	r3, #0
 80095d4:	613b      	str	r3, [r7, #16]
 80095d6:	4b1c      	ldr	r3, [pc, #112]	; (8009648 <HAL_UART_MspInit+0x98>)
 80095d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095da:	4a1b      	ldr	r2, [pc, #108]	; (8009648 <HAL_UART_MspInit+0x98>)
 80095dc:	f043 0310 	orr.w	r3, r3, #16
 80095e0:	6453      	str	r3, [r2, #68]	; 0x44
 80095e2:	4b19      	ldr	r3, [pc, #100]	; (8009648 <HAL_UART_MspInit+0x98>)
 80095e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e6:	f003 0310 	and.w	r3, r3, #16
 80095ea:	613b      	str	r3, [r7, #16]
 80095ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095ee:	2300      	movs	r3, #0
 80095f0:	60fb      	str	r3, [r7, #12]
 80095f2:	4b15      	ldr	r3, [pc, #84]	; (8009648 <HAL_UART_MspInit+0x98>)
 80095f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f6:	4a14      	ldr	r2, [pc, #80]	; (8009648 <HAL_UART_MspInit+0x98>)
 80095f8:	f043 0301 	orr.w	r3, r3, #1
 80095fc:	6313      	str	r3, [r2, #48]	; 0x30
 80095fe:	4b12      	ldr	r3, [pc, #72]	; (8009648 <HAL_UART_MspInit+0x98>)
 8009600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800960a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800960e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009610:	2302      	movs	r3, #2
 8009612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009614:	2300      	movs	r3, #0
 8009616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009618:	2303      	movs	r3, #3
 800961a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800961c:	2307      	movs	r3, #7
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009620:	f107 0314 	add.w	r3, r7, #20
 8009624:	4619      	mov	r1, r3
 8009626:	4809      	ldr	r0, [pc, #36]	; (800964c <HAL_UART_MspInit+0x9c>)
 8009628:	f000 fe64 	bl	800a2f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800962c:	2200      	movs	r2, #0
 800962e:	2100      	movs	r1, #0
 8009630:	2025      	movs	r0, #37	; 0x25
 8009632:	f000 f9fc 	bl	8009a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009636:	2025      	movs	r0, #37	; 0x25
 8009638:	f000 fa15 	bl	8009a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800963c:	bf00      	nop
 800963e:	3728      	adds	r7, #40	; 0x28
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	40011000 	.word	0x40011000
 8009648:	40023800 	.word	0x40023800
 800964c:	40020000 	.word	0x40020000

08009650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009654:	480d      	ldr	r0, [pc, #52]	; (800968c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009656:	490e      	ldr	r1, [pc, #56]	; (8009690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009658:	4a0e      	ldr	r2, [pc, #56]	; (8009694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800965a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800965c:	e002      	b.n	8009664 <LoopCopyDataInit>

0800965e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800965e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009662:	3304      	adds	r3, #4

08009664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009668:	d3f9      	bcc.n	800965e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800966a:	4a0b      	ldr	r2, [pc, #44]	; (8009698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800966c:	4c0b      	ldr	r4, [pc, #44]	; (800969c <LoopFillZerobss+0x26>)
  movs r3, #0
 800966e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009670:	e001      	b.n	8009676 <LoopFillZerobss>

08009672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009674:	3204      	adds	r2, #4

08009676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009678:	d3fb      	bcc.n	8009672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800967a:	f7ff ff59 	bl	8009530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800967e:	f00a f9ed 	bl	8013a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009682:	f7fc f919 	bl	80058b8 <main>
  bx  lr    
 8009686:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009688:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800968c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009690:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8009694:	080153e0 	.word	0x080153e0
  ldr r2, =_sbss
 8009698:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 800969c:	20008764 	.word	0x20008764

080096a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80096a0:	e7fe      	b.n	80096a0 <ADC_IRQHandler>
	...

080096a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80096a8:	4b0e      	ldr	r3, [pc, #56]	; (80096e4 <HAL_Init+0x40>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a0d      	ldr	r2, [pc, #52]	; (80096e4 <HAL_Init+0x40>)
 80096ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80096b4:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <HAL_Init+0x40>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a0a      	ldr	r2, [pc, #40]	; (80096e4 <HAL_Init+0x40>)
 80096ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80096c0:	4b08      	ldr	r3, [pc, #32]	; (80096e4 <HAL_Init+0x40>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a07      	ldr	r2, [pc, #28]	; (80096e4 <HAL_Init+0x40>)
 80096c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80096cc:	2003      	movs	r0, #3
 80096ce:	f000 f9a3 	bl	8009a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80096d2:	200f      	movs	r0, #15
 80096d4:	f000 f808 	bl	80096e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80096d8:	f7ff fdd2 	bl	8009280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	40023c00 	.word	0x40023c00

080096e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80096f0:	4b12      	ldr	r3, [pc, #72]	; (800973c <HAL_InitTick+0x54>)
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	4b12      	ldr	r3, [pc, #72]	; (8009740 <HAL_InitTick+0x58>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	4619      	mov	r1, r3
 80096fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009702:	fbb2 f3f3 	udiv	r3, r2, r3
 8009706:	4618      	mov	r0, r3
 8009708:	f000 f9c9 	bl	8009a9e <HAL_SYSTICK_Config>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e00e      	b.n	8009734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b0f      	cmp	r3, #15
 800971a:	d80a      	bhi.n	8009732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800971c:	2200      	movs	r2, #0
 800971e:	6879      	ldr	r1, [r7, #4]
 8009720:	f04f 30ff 	mov.w	r0, #4294967295
 8009724:	f000 f983 	bl	8009a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009728:	4a06      	ldr	r2, [pc, #24]	; (8009744 <HAL_InitTick+0x5c>)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	e000      	b.n	8009734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
}
 8009734:	4618      	mov	r0, r3
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	20000138 	.word	0x20000138
 8009740:	20000140 	.word	0x20000140
 8009744:	2000013c 	.word	0x2000013c

08009748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009748:	b480      	push	{r7}
 800974a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800974c:	4b06      	ldr	r3, [pc, #24]	; (8009768 <HAL_IncTick+0x20>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	461a      	mov	r2, r3
 8009752:	4b06      	ldr	r3, [pc, #24]	; (800976c <HAL_IncTick+0x24>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4413      	add	r3, r2
 8009758:	4a04      	ldr	r2, [pc, #16]	; (800976c <HAL_IncTick+0x24>)
 800975a:	6013      	str	r3, [r2, #0]
}
 800975c:	bf00      	nop
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	20000140 	.word	0x20000140
 800976c:	20005200 	.word	0x20005200

08009770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009770:	b480      	push	{r7}
 8009772:	af00      	add	r7, sp, #0
  return uwTick;
 8009774:	4b03      	ldr	r3, [pc, #12]	; (8009784 <HAL_GetTick+0x14>)
 8009776:	681b      	ldr	r3, [r3, #0]
}
 8009778:	4618      	mov	r0, r3
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20005200 	.word	0x20005200

08009788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009790:	f7ff ffee 	bl	8009770 <HAL_GetTick>
 8009794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a0:	d005      	beq.n	80097ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80097a2:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <HAL_Delay+0x44>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	461a      	mov	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	4413      	add	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80097ae:	bf00      	nop
 80097b0:	f7ff ffde 	bl	8009770 <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d8f7      	bhi.n	80097b0 <HAL_Delay+0x28>
  {
  }
}
 80097c0:	bf00      	nop
 80097c2:	bf00      	nop
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20000140 	.word	0x20000140

080097d0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80097d0:	b480      	push	{r7}
 80097d2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80097d4:	4b05      	ldr	r3, [pc, #20]	; (80097ec <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	4a04      	ldr	r2, [pc, #16]	; (80097ec <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80097da:	f043 0301 	orr.w	r3, r3, #1
 80097de:	6053      	str	r3, [r2, #4]
}
 80097e0:	bf00      	nop
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	e0042000 	.word	0xe0042000

080097f0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80097f0:	b480      	push	{r7}
 80097f2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80097f4:	4b05      	ldr	r3, [pc, #20]	; (800980c <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	4a04      	ldr	r2, [pc, #16]	; (800980c <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80097fa:	f043 0302 	orr.w	r3, r3, #2
 80097fe:	6053      	str	r3, [r2, #4]
}
 8009800:	bf00      	nop
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	e0042000 	.word	0xe0042000

08009810 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8009810:	b480      	push	{r7}
 8009812:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8009814:	4b05      	ldr	r3, [pc, #20]	; (800982c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	4a04      	ldr	r2, [pc, #16]	; (800982c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800981a:	f043 0304 	orr.w	r3, r3, #4
 800981e:	6053      	str	r3, [r2, #4]
}
 8009820:	bf00      	nop
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	e0042000 	.word	0xe0042000

08009830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f003 0307 	and.w	r3, r3, #7
 800983e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009840:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <__NVIC_SetPriorityGrouping+0x44>)
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800984c:	4013      	ands	r3, r2
 800984e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800985c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009862:	4a04      	ldr	r2, [pc, #16]	; (8009874 <__NVIC_SetPriorityGrouping+0x44>)
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	60d3      	str	r3, [r2, #12]
}
 8009868:	bf00      	nop
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	e000ed00 	.word	0xe000ed00

08009878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800987c:	4b04      	ldr	r3, [pc, #16]	; (8009890 <__NVIC_GetPriorityGrouping+0x18>)
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	0a1b      	lsrs	r3, r3, #8
 8009882:	f003 0307 	and.w	r3, r3, #7
}
 8009886:	4618      	mov	r0, r3
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	e000ed00 	.word	0xe000ed00

08009894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800989e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	db0b      	blt.n	80098be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098a6:	79fb      	ldrb	r3, [r7, #7]
 80098a8:	f003 021f 	and.w	r2, r3, #31
 80098ac:	4907      	ldr	r1, [pc, #28]	; (80098cc <__NVIC_EnableIRQ+0x38>)
 80098ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098b2:	095b      	lsrs	r3, r3, #5
 80098b4:	2001      	movs	r0, #1
 80098b6:	fa00 f202 	lsl.w	r2, r0, r2
 80098ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80098be:	bf00      	nop
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	e000e100 	.word	0xe000e100

080098d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	db12      	blt.n	8009908 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098e2:	79fb      	ldrb	r3, [r7, #7]
 80098e4:	f003 021f 	and.w	r2, r3, #31
 80098e8:	490a      	ldr	r1, [pc, #40]	; (8009914 <__NVIC_DisableIRQ+0x44>)
 80098ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ee:	095b      	lsrs	r3, r3, #5
 80098f0:	2001      	movs	r0, #1
 80098f2:	fa00 f202 	lsl.w	r2, r0, r2
 80098f6:	3320      	adds	r3, #32
 80098f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80098fc:	f3bf 8f4f 	dsb	sy
}
 8009900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009902:	f3bf 8f6f 	isb	sy
}
 8009906:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	e000e100 	.word	0xe000e100

08009918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	6039      	str	r1, [r7, #0]
 8009922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009928:	2b00      	cmp	r3, #0
 800992a:	db0a      	blt.n	8009942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	b2da      	uxtb	r2, r3
 8009930:	490c      	ldr	r1, [pc, #48]	; (8009964 <__NVIC_SetPriority+0x4c>)
 8009932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009936:	0112      	lsls	r2, r2, #4
 8009938:	b2d2      	uxtb	r2, r2
 800993a:	440b      	add	r3, r1
 800993c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009940:	e00a      	b.n	8009958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	b2da      	uxtb	r2, r3
 8009946:	4908      	ldr	r1, [pc, #32]	; (8009968 <__NVIC_SetPriority+0x50>)
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	f003 030f 	and.w	r3, r3, #15
 800994e:	3b04      	subs	r3, #4
 8009950:	0112      	lsls	r2, r2, #4
 8009952:	b2d2      	uxtb	r2, r2
 8009954:	440b      	add	r3, r1
 8009956:	761a      	strb	r2, [r3, #24]
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	e000e100 	.word	0xe000e100
 8009968:	e000ed00 	.word	0xe000ed00

0800996c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800996c:	b480      	push	{r7}
 800996e:	b089      	sub	sp, #36	; 0x24
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f003 0307 	and.w	r3, r3, #7
 800997e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	f1c3 0307 	rsb	r3, r3, #7
 8009986:	2b04      	cmp	r3, #4
 8009988:	bf28      	it	cs
 800998a:	2304      	movcs	r3, #4
 800998c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	3304      	adds	r3, #4
 8009992:	2b06      	cmp	r3, #6
 8009994:	d902      	bls.n	800999c <NVIC_EncodePriority+0x30>
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	3b03      	subs	r3, #3
 800999a:	e000      	b.n	800999e <NVIC_EncodePriority+0x32>
 800999c:	2300      	movs	r3, #0
 800999e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099a0:	f04f 32ff 	mov.w	r2, #4294967295
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	fa02 f303 	lsl.w	r3, r2, r3
 80099aa:	43da      	mvns	r2, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	401a      	ands	r2, r3
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80099b4:	f04f 31ff 	mov.w	r1, #4294967295
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	fa01 f303 	lsl.w	r3, r1, r3
 80099be:	43d9      	mvns	r1, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099c4:	4313      	orrs	r3, r2
         );
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3724      	adds	r7, #36	; 0x24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
	...

080099d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	3b01      	subs	r3, #1
 80099e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099e4:	d301      	bcc.n	80099ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80099e6:	2301      	movs	r3, #1
 80099e8:	e00f      	b.n	8009a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099ea:	4a0a      	ldr	r2, [pc, #40]	; (8009a14 <SysTick_Config+0x40>)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099f2:	210f      	movs	r1, #15
 80099f4:	f04f 30ff 	mov.w	r0, #4294967295
 80099f8:	f7ff ff8e 	bl	8009918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80099fc:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <SysTick_Config+0x40>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009a02:	4b04      	ldr	r3, [pc, #16]	; (8009a14 <SysTick_Config+0x40>)
 8009a04:	2207      	movs	r2, #7
 8009a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	e000e010 	.word	0xe000e010

08009a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7ff ff05 	bl	8009830 <__NVIC_SetPriorityGrouping>
}
 8009a26:	bf00      	nop
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b086      	sub	sp, #24
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	4603      	mov	r3, r0
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	607a      	str	r2, [r7, #4]
 8009a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009a40:	f7ff ff1a 	bl	8009878 <__NVIC_GetPriorityGrouping>
 8009a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	6978      	ldr	r0, [r7, #20]
 8009a4c:	f7ff ff8e 	bl	800996c <NVIC_EncodePriority>
 8009a50:	4602      	mov	r2, r0
 8009a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a56:	4611      	mov	r1, r2
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff ff5d 	bl	8009918 <__NVIC_SetPriority>
}
 8009a5e:	bf00      	nop
 8009a60:	3718      	adds	r7, #24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b082      	sub	sp, #8
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff ff0d 	bl	8009894 <__NVIC_EnableIRQ>
}
 8009a7a:	bf00      	nop
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b082      	sub	sp, #8
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	4603      	mov	r3, r0
 8009a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7ff ff1d 	bl	80098d0 <__NVIC_DisableIRQ>
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7ff ff94 	bl	80099d4 <SysTick_Config>
 8009aac:	4603      	mov	r3, r0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b084      	sub	sp, #16
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ac2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009ac4:	f7ff fe54 	bl	8009770 <HAL_GetTick>
 8009ac8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d008      	beq.n	8009ae8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2280      	movs	r2, #128	; 0x80
 8009ada:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e052      	b.n	8009b8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f022 0216 	bic.w	r2, r2, #22
 8009af6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	695a      	ldr	r2, [r3, #20]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d103      	bne.n	8009b18 <HAL_DMA_Abort+0x62>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d007      	beq.n	8009b28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f022 0208 	bic.w	r2, r2, #8
 8009b26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f022 0201 	bic.w	r2, r2, #1
 8009b36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009b38:	e013      	b.n	8009b62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009b3a:	f7ff fe19 	bl	8009770 <HAL_GetTick>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	2b05      	cmp	r3, #5
 8009b46:	d90c      	bls.n	8009b62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2220      	movs	r2, #32
 8009b4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2203      	movs	r2, #3
 8009b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e015      	b.n	8009b8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1e4      	bne.n	8009b3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b74:	223f      	movs	r2, #63	; 0x3f
 8009b76:	409a      	lsls	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009b96:	b480      	push	{r7}
 8009b98:	b083      	sub	sp, #12
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d004      	beq.n	8009bb4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2280      	movs	r2, #128	; 0x80
 8009bae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e00c      	b.n	8009bce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2205      	movs	r2, #5
 8009bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f022 0201 	bic.w	r2, r2, #1
 8009bca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	370c      	adds	r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
	...

08009bdc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009bee:	4b23      	ldr	r3, [pc, #140]	; (8009c7c <HAL_FLASH_Program+0xa0>)
 8009bf0:	7e1b      	ldrb	r3, [r3, #24]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d101      	bne.n	8009bfa <HAL_FLASH_Program+0x1e>
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	e03b      	b.n	8009c72 <HAL_FLASH_Program+0x96>
 8009bfa:	4b20      	ldr	r3, [pc, #128]	; (8009c7c <HAL_FLASH_Program+0xa0>)
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009c00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009c04:	f000 f924 	bl	8009e50 <FLASH_WaitForLastOperation>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d12b      	bne.n	8009c6a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d105      	bne.n	8009c24 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009c18:	783b      	ldrb	r3, [r7, #0]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	68b8      	ldr	r0, [r7, #8]
 8009c1e:	f000 f9cf 	bl	8009fc0 <FLASH_Program_Byte>
 8009c22:	e016      	b.n	8009c52 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d105      	bne.n	8009c36 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009c2a:	883b      	ldrh	r3, [r7, #0]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	68b8      	ldr	r0, [r7, #8]
 8009c30:	f000 f9a2 	bl	8009f78 <FLASH_Program_HalfWord>
 8009c34:	e00d      	b.n	8009c52 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d105      	bne.n	8009c48 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	68b8      	ldr	r0, [r7, #8]
 8009c42:	f000 f977 	bl	8009f34 <FLASH_Program_Word>
 8009c46:	e004      	b.n	8009c52 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c4c:	68b8      	ldr	r0, [r7, #8]
 8009c4e:	f000 f93f 	bl	8009ed0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009c52:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009c56:	f000 f8fb 	bl	8009e50 <FLASH_WaitForLastOperation>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009c5e:	4b08      	ldr	r3, [pc, #32]	; (8009c80 <HAL_FLASH_Program+0xa4>)
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	4a07      	ldr	r2, [pc, #28]	; (8009c80 <HAL_FLASH_Program+0xa4>)
 8009c64:	f023 0301 	bic.w	r3, r3, #1
 8009c68:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009c6a:	4b04      	ldr	r3, [pc, #16]	; (8009c7c <HAL_FLASH_Program+0xa0>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20005204 	.word	0x20005204
 8009c80:	40023c00 	.word	0x40023c00

08009c84 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009c8e:	4b4b      	ldr	r3, [pc, #300]	; (8009dbc <HAL_FLASH_IRQHandler+0x138>)
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d020      	beq.n	8009cdc <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8009c9a:	4b49      	ldr	r3, [pc, #292]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d107      	bne.n	8009cb4 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8009ca4:	4b46      	ldr	r3, [pc, #280]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8009caa:	4b45      	ldr	r3, [pc, #276]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009cac:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb0:	60da      	str	r2, [r3, #12]
 8009cb2:	e00b      	b.n	8009ccc <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8009cb4:	4b42      	ldr	r3, [pc, #264]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d103      	bne.n	8009cc6 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8009cbe:	4b40      	ldr	r3, [pc, #256]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	607b      	str	r3, [r7, #4]
 8009cc4:	e002      	b.n	8009ccc <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8009cc6:	4b3e      	ldr	r3, [pc, #248]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8009ccc:	f000 f99a 	bl	800a004 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f881 	bl	8009dd8 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009cd6:	4b3a      	ldr	r3, [pc, #232]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009cdc:	4b37      	ldr	r3, [pc, #220]	; (8009dbc <HAL_FLASH_IRQHandler+0x138>)
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d04a      	beq.n	8009d7e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009ce8:	4b34      	ldr	r3, [pc, #208]	; (8009dbc <HAL_FLASH_IRQHandler+0x138>)
 8009cea:	2201      	movs	r2, #1
 8009cec:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8009cee:	4b34      	ldr	r3, [pc, #208]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d12d      	bne.n	8009d54 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8009cf8:	4b31      	ldr	r3, [pc, #196]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	4a30      	ldr	r2, [pc, #192]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d00:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8009d02:	4b2f      	ldr	r3, [pc, #188]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d015      	beq.n	8009d36 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8009d0a:	4b2d      	ldr	r3, [pc, #180]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f857 	bl	8009dc4 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8009d16:	4b2a      	ldr	r3, [pc, #168]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	4a28      	ldr	r2, [pc, #160]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d1e:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8009d20:	4b27      	ldr	r3, [pc, #156]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8009d26:	4b26      	ldr	r3, [pc, #152]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d28:	7a1b      	ldrb	r3, [r3, #8]
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa52 	bl	800a1d8 <FLASH_Erase_Sector>
 8009d34:	e023      	b.n	8009d7e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8009d36:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3a:	607b      	str	r3, [r7, #4]
 8009d3c:	4a20      	ldr	r2, [pc, #128]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009d42:	4b1f      	ldr	r3, [pc, #124]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8009d48:	f000 fa8e 	bl	800a268 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f839 	bl	8009dc4 <HAL_FLASH_EndOfOperationCallback>
 8009d52:	e014      	b.n	8009d7e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8009d54:	4b1a      	ldr	r3, [pc, #104]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d107      	bne.n	8009d6e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8009d5e:	f000 fa83 	bl	800a268 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8009d62:	4b17      	ldr	r3, [pc, #92]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 f82c 	bl	8009dc4 <HAL_FLASH_EndOfOperationCallback>
 8009d6c:	e004      	b.n	8009d78 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8009d6e:	4b14      	ldr	r3, [pc, #80]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 f826 	bl	8009dc4 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009d78:	4b11      	ldr	r3, [pc, #68]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8009d7e:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d114      	bne.n	8009db2 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8009d88:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <HAL_FLASH_IRQHandler+0x138>)
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	4a0b      	ldr	r2, [pc, #44]	; (8009dbc <HAL_FLASH_IRQHandler+0x138>)
 8009d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009d92:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8009d94:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <HAL_FLASH_IRQHandler+0x138>)
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	4a08      	ldr	r2, [pc, #32]	; (8009dbc <HAL_FLASH_IRQHandler+0x138>)
 8009d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d9e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8009da0:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <HAL_FLASH_IRQHandler+0x138>)
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	4a05      	ldr	r2, [pc, #20]	; (8009dbc <HAL_FLASH_IRQHandler+0x138>)
 8009da6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009daa:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8009dac:	4b04      	ldr	r3, [pc, #16]	; (8009dc0 <HAL_FLASH_IRQHandler+0x13c>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	761a      	strb	r2, [r3, #24]
  }
}
 8009db2:	bf00      	nop
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	40023c00 	.word	0x40023c00
 8009dc0:	20005204 	.word	0x20005204

08009dc4 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009df6:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <HAL_FLASH_Unlock+0x38>)
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	da0b      	bge.n	8009e16 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009dfe:	4b09      	ldr	r3, [pc, #36]	; (8009e24 <HAL_FLASH_Unlock+0x38>)
 8009e00:	4a09      	ldr	r2, [pc, #36]	; (8009e28 <HAL_FLASH_Unlock+0x3c>)
 8009e02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009e04:	4b07      	ldr	r3, [pc, #28]	; (8009e24 <HAL_FLASH_Unlock+0x38>)
 8009e06:	4a09      	ldr	r2, [pc, #36]	; (8009e2c <HAL_FLASH_Unlock+0x40>)
 8009e08:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009e0a:	4b06      	ldr	r3, [pc, #24]	; (8009e24 <HAL_FLASH_Unlock+0x38>)
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	da01      	bge.n	8009e16 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009e16:	79fb      	ldrb	r3, [r7, #7]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr
 8009e24:	40023c00 	.word	0x40023c00
 8009e28:	45670123 	.word	0x45670123
 8009e2c:	cdef89ab 	.word	0xcdef89ab

08009e30 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009e30:	b480      	push	{r7}
 8009e32:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8009e34:	4b05      	ldr	r3, [pc, #20]	; (8009e4c <HAL_FLASH_Lock+0x1c>)
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	4a04      	ldr	r2, [pc, #16]	; (8009e4c <HAL_FLASH_Lock+0x1c>)
 8009e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e3e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	40023c00 	.word	0x40023c00

08009e50 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009e5c:	4b1a      	ldr	r3, [pc, #104]	; (8009ec8 <FLASH_WaitForLastOperation+0x78>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8009e62:	f7ff fc85 	bl	8009770 <HAL_GetTick>
 8009e66:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009e68:	e010      	b.n	8009e8c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e70:	d00c      	beq.n	8009e8c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d007      	beq.n	8009e88 <FLASH_WaitForLastOperation+0x38>
 8009e78:	f7ff fc7a 	bl	8009770 <HAL_GetTick>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d201      	bcs.n	8009e8c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e019      	b.n	8009ec0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009e8c:	4b0f      	ldr	r3, [pc, #60]	; (8009ecc <FLASH_WaitForLastOperation+0x7c>)
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1e8      	bne.n	8009e6a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009e98:	4b0c      	ldr	r3, [pc, #48]	; (8009ecc <FLASH_WaitForLastOperation+0x7c>)
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009ea4:	4b09      	ldr	r3, [pc, #36]	; (8009ecc <FLASH_WaitForLastOperation+0x7c>)
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009eaa:	4b08      	ldr	r3, [pc, #32]	; (8009ecc <FLASH_WaitForLastOperation+0x7c>)
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009eb6:	f000 f8a5 	bl	800a004 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e000      	b.n	8009ec0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
  
}  
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	20005204 	.word	0x20005204
 8009ecc:	40023c00 	.word	0x40023c00

08009ed0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009edc:	4b14      	ldr	r3, [pc, #80]	; (8009f30 <FLASH_Program_DoubleWord+0x60>)
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	4a13      	ldr	r2, [pc, #76]	; (8009f30 <FLASH_Program_DoubleWord+0x60>)
 8009ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ee6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009ee8:	4b11      	ldr	r3, [pc, #68]	; (8009f30 <FLASH_Program_DoubleWord+0x60>)
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	4a10      	ldr	r2, [pc, #64]	; (8009f30 <FLASH_Program_DoubleWord+0x60>)
 8009eee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009ef2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009ef4:	4b0e      	ldr	r3, [pc, #56]	; (8009f30 <FLASH_Program_DoubleWord+0x60>)
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	4a0d      	ldr	r2, [pc, #52]	; (8009f30 <FLASH_Program_DoubleWord+0x60>)
 8009efa:	f043 0301 	orr.w	r3, r3, #1
 8009efe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009f06:	f3bf 8f6f 	isb	sy
}
 8009f0a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8009f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f10:	f04f 0200 	mov.w	r2, #0
 8009f14:	f04f 0300 	mov.w	r3, #0
 8009f18:	000a      	movs	r2, r1
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	68f9      	ldr	r1, [r7, #12]
 8009f1e:	3104      	adds	r1, #4
 8009f20:	4613      	mov	r3, r2
 8009f22:	600b      	str	r3, [r1, #0]
}
 8009f24:	bf00      	nop
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	40023c00 	.word	0x40023c00

08009f34 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009f3e:	4b0d      	ldr	r3, [pc, #52]	; (8009f74 <FLASH_Program_Word+0x40>)
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	4a0c      	ldr	r2, [pc, #48]	; (8009f74 <FLASH_Program_Word+0x40>)
 8009f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8009f4a:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <FLASH_Program_Word+0x40>)
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	4a09      	ldr	r2, [pc, #36]	; (8009f74 <FLASH_Program_Word+0x40>)
 8009f50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009f56:	4b07      	ldr	r3, [pc, #28]	; (8009f74 <FLASH_Program_Word+0x40>)
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	4a06      	ldr	r2, [pc, #24]	; (8009f74 <FLASH_Program_Word+0x40>)
 8009f5c:	f043 0301 	orr.w	r3, r3, #1
 8009f60:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	601a      	str	r2, [r3, #0]
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr
 8009f74:	40023c00 	.word	0x40023c00

08009f78 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009f84:	4b0d      	ldr	r3, [pc, #52]	; (8009fbc <FLASH_Program_HalfWord+0x44>)
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	4a0c      	ldr	r2, [pc, #48]	; (8009fbc <FLASH_Program_HalfWord+0x44>)
 8009f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8009f90:	4b0a      	ldr	r3, [pc, #40]	; (8009fbc <FLASH_Program_HalfWord+0x44>)
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	4a09      	ldr	r2, [pc, #36]	; (8009fbc <FLASH_Program_HalfWord+0x44>)
 8009f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009f9c:	4b07      	ldr	r3, [pc, #28]	; (8009fbc <FLASH_Program_HalfWord+0x44>)
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	4a06      	ldr	r2, [pc, #24]	; (8009fbc <FLASH_Program_HalfWord+0x44>)
 8009fa2:	f043 0301 	orr.w	r3, r3, #1
 8009fa6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	887a      	ldrh	r2, [r7, #2]
 8009fac:	801a      	strh	r2, [r3, #0]
}
 8009fae:	bf00      	nop
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	40023c00 	.word	0x40023c00

08009fc0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009fcc:	4b0c      	ldr	r3, [pc, #48]	; (800a000 <FLASH_Program_Byte+0x40>)
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	4a0b      	ldr	r2, [pc, #44]	; (800a000 <FLASH_Program_Byte+0x40>)
 8009fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009fd8:	4b09      	ldr	r3, [pc, #36]	; (800a000 <FLASH_Program_Byte+0x40>)
 8009fda:	4a09      	ldr	r2, [pc, #36]	; (800a000 <FLASH_Program_Byte+0x40>)
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009fe0:	4b07      	ldr	r3, [pc, #28]	; (800a000 <FLASH_Program_Byte+0x40>)
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	4a06      	ldr	r2, [pc, #24]	; (800a000 <FLASH_Program_Byte+0x40>)
 8009fe6:	f043 0301 	orr.w	r3, r3, #1
 8009fea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	78fa      	ldrb	r2, [r7, #3]
 8009ff0:	701a      	strb	r2, [r3, #0]
}
 8009ff2:	bf00      	nop
 8009ff4:	370c      	adds	r7, #12
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	40023c00 	.word	0x40023c00

0800a004 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800a004:	b480      	push	{r7}
 800a006:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a008:	4b27      	ldr	r3, [pc, #156]	; (800a0a8 <FLASH_SetErrorCode+0xa4>)
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	f003 0310 	and.w	r3, r3, #16
 800a010:	2b00      	cmp	r3, #0
 800a012:	d008      	beq.n	800a026 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a014:	4b25      	ldr	r3, [pc, #148]	; (800a0ac <FLASH_SetErrorCode+0xa8>)
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	f043 0310 	orr.w	r3, r3, #16
 800a01c:	4a23      	ldr	r2, [pc, #140]	; (800a0ac <FLASH_SetErrorCode+0xa8>)
 800a01e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800a020:	4b21      	ldr	r3, [pc, #132]	; (800a0a8 <FLASH_SetErrorCode+0xa4>)
 800a022:	2210      	movs	r2, #16
 800a024:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a026:	4b20      	ldr	r3, [pc, #128]	; (800a0a8 <FLASH_SetErrorCode+0xa4>)
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f003 0320 	and.w	r3, r3, #32
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d008      	beq.n	800a044 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a032:	4b1e      	ldr	r3, [pc, #120]	; (800a0ac <FLASH_SetErrorCode+0xa8>)
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	f043 0308 	orr.w	r3, r3, #8
 800a03a:	4a1c      	ldr	r2, [pc, #112]	; (800a0ac <FLASH_SetErrorCode+0xa8>)
 800a03c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800a03e:	4b1a      	ldr	r3, [pc, #104]	; (800a0a8 <FLASH_SetErrorCode+0xa4>)
 800a040:	2220      	movs	r2, #32
 800a042:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a044:	4b18      	ldr	r3, [pc, #96]	; (800a0a8 <FLASH_SetErrorCode+0xa4>)
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d008      	beq.n	800a062 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a050:	4b16      	ldr	r3, [pc, #88]	; (800a0ac <FLASH_SetErrorCode+0xa8>)
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	f043 0304 	orr.w	r3, r3, #4
 800a058:	4a14      	ldr	r2, [pc, #80]	; (800a0ac <FLASH_SetErrorCode+0xa8>)
 800a05a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800a05c:	4b12      	ldr	r3, [pc, #72]	; (800a0a8 <FLASH_SetErrorCode+0xa4>)
 800a05e:	2240      	movs	r2, #64	; 0x40
 800a060:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800a062:	4b11      	ldr	r3, [pc, #68]	; (800a0a8 <FLASH_SetErrorCode+0xa4>)
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d008      	beq.n	800a080 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800a06e:	4b0f      	ldr	r3, [pc, #60]	; (800a0ac <FLASH_SetErrorCode+0xa8>)
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	f043 0302 	orr.w	r3, r3, #2
 800a076:	4a0d      	ldr	r2, [pc, #52]	; (800a0ac <FLASH_SetErrorCode+0xa8>)
 800a078:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800a07a:	4b0b      	ldr	r3, [pc, #44]	; (800a0a8 <FLASH_SetErrorCode+0xa4>)
 800a07c:	2280      	movs	r2, #128	; 0x80
 800a07e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a080:	4b09      	ldr	r3, [pc, #36]	; (800a0a8 <FLASH_SetErrorCode+0xa4>)
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f003 0302 	and.w	r3, r3, #2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d008      	beq.n	800a09e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a08c:	4b07      	ldr	r3, [pc, #28]	; (800a0ac <FLASH_SetErrorCode+0xa8>)
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	f043 0320 	orr.w	r3, r3, #32
 800a094:	4a05      	ldr	r2, [pc, #20]	; (800a0ac <FLASH_SetErrorCode+0xa8>)
 800a096:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800a098:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <FLASH_SetErrorCode+0xa4>)
 800a09a:	2202      	movs	r2, #2
 800a09c:	60da      	str	r2, [r3, #12]
  }
}
 800a09e:	bf00      	nop
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	40023c00 	.word	0x40023c00
 800a0ac:	20005204 	.word	0x20005204

0800a0b0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a0c2:	4b31      	ldr	r3, [pc, #196]	; (800a188 <HAL_FLASHEx_Erase+0xd8>)
 800a0c4:	7e1b      	ldrb	r3, [r3, #24]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d101      	bne.n	800a0ce <HAL_FLASHEx_Erase+0x1e>
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	e058      	b.n	800a180 <HAL_FLASHEx_Erase+0xd0>
 800a0ce:	4b2e      	ldr	r3, [pc, #184]	; (800a188 <HAL_FLASHEx_Erase+0xd8>)
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a0d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a0d8:	f7ff feba 	bl	8009e50 <FLASH_WaitForLastOperation>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d148      	bne.n	800a178 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ec:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d115      	bne.n	800a122 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	4619      	mov	r1, r3
 800a102:	4610      	mov	r0, r2
 800a104:	f000 f844 	bl	800a190 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a108:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a10c:	f7ff fea0 	bl	8009e50 <FLASH_WaitForLastOperation>
 800a110:	4603      	mov	r3, r0
 800a112:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800a114:	4b1d      	ldr	r3, [pc, #116]	; (800a18c <HAL_FLASHEx_Erase+0xdc>)
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	4a1c      	ldr	r2, [pc, #112]	; (800a18c <HAL_FLASHEx_Erase+0xdc>)
 800a11a:	f023 0304 	bic.w	r3, r3, #4
 800a11e:	6113      	str	r3, [r2, #16]
 800a120:	e028      	b.n	800a174 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	60bb      	str	r3, [r7, #8]
 800a128:	e01c      	b.n	800a164 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	4619      	mov	r1, r3
 800a132:	68b8      	ldr	r0, [r7, #8]
 800a134:	f000 f850 	bl	800a1d8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a138:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a13c:	f7ff fe88 	bl	8009e50 <FLASH_WaitForLastOperation>
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800a144:	4b11      	ldr	r3, [pc, #68]	; (800a18c <HAL_FLASHEx_Erase+0xdc>)
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	4a10      	ldr	r2, [pc, #64]	; (800a18c <HAL_FLASHEx_Erase+0xdc>)
 800a14a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800a14e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d003      	beq.n	800a15e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	601a      	str	r2, [r3, #0]
          break;
 800a15c:	e00a      	b.n	800a174 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	3301      	adds	r3, #1
 800a162:	60bb      	str	r3, [r7, #8]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68da      	ldr	r2, [r3, #12]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	4413      	add	r3, r2
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	429a      	cmp	r2, r3
 800a172:	d3da      	bcc.n	800a12a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a174:	f000 f878 	bl	800a268 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a178:	4b03      	ldr	r3, [pc, #12]	; (800a188 <HAL_FLASHEx_Erase+0xd8>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	761a      	strb	r2, [r3, #24]

  return status;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	20005204 	.word	0x20005204
 800a18c:	40023c00 	.word	0x40023c00

0800a190 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	4603      	mov	r3, r0
 800a198:	6039      	str	r1, [r7, #0]
 800a19a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a19c:	4b0d      	ldr	r3, [pc, #52]	; (800a1d4 <FLASH_MassErase+0x44>)
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	4a0c      	ldr	r2, [pc, #48]	; (800a1d4 <FLASH_MassErase+0x44>)
 800a1a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800a1a8:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <FLASH_MassErase+0x44>)
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	4a09      	ldr	r2, [pc, #36]	; (800a1d4 <FLASH_MassErase+0x44>)
 800a1ae:	f043 0304 	orr.w	r3, r3, #4
 800a1b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800a1b4:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <FLASH_MassErase+0x44>)
 800a1b6:	691a      	ldr	r2, [r3, #16]
 800a1b8:	79fb      	ldrb	r3, [r7, #7]
 800a1ba:	021b      	lsls	r3, r3, #8
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	4a05      	ldr	r2, [pc, #20]	; (800a1d4 <FLASH_MassErase+0x44>)
 800a1c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1c4:	6113      	str	r3, [r2, #16]
}
 800a1c6:	bf00      	nop
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	40023c00 	.word	0x40023c00

0800a1d8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a1e8:	78fb      	ldrb	r3, [r7, #3]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d102      	bne.n	800a1f4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	e010      	b.n	800a216 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d103      	bne.n	800a202 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a1fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1fe:	60fb      	str	r3, [r7, #12]
 800a200:	e009      	b.n	800a216 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a202:	78fb      	ldrb	r3, [r7, #3]
 800a204:	2b02      	cmp	r3, #2
 800a206:	d103      	bne.n	800a210 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	e002      	b.n	800a216 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a210:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a214:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a216:	4b13      	ldr	r3, [pc, #76]	; (800a264 <FLASH_Erase_Sector+0x8c>)
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	4a12      	ldr	r2, [pc, #72]	; (800a264 <FLASH_Erase_Sector+0x8c>)
 800a21c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a220:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a222:	4b10      	ldr	r3, [pc, #64]	; (800a264 <FLASH_Erase_Sector+0x8c>)
 800a224:	691a      	ldr	r2, [r3, #16]
 800a226:	490f      	ldr	r1, [pc, #60]	; (800a264 <FLASH_Erase_Sector+0x8c>)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a22e:	4b0d      	ldr	r3, [pc, #52]	; (800a264 <FLASH_Erase_Sector+0x8c>)
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	4a0c      	ldr	r2, [pc, #48]	; (800a264 <FLASH_Erase_Sector+0x8c>)
 800a234:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a238:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a23a:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <FLASH_Erase_Sector+0x8c>)
 800a23c:	691a      	ldr	r2, [r3, #16]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	00db      	lsls	r3, r3, #3
 800a242:	4313      	orrs	r3, r2
 800a244:	4a07      	ldr	r2, [pc, #28]	; (800a264 <FLASH_Erase_Sector+0x8c>)
 800a246:	f043 0302 	orr.w	r3, r3, #2
 800a24a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a24c:	4b05      	ldr	r3, [pc, #20]	; (800a264 <FLASH_Erase_Sector+0x8c>)
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	4a04      	ldr	r2, [pc, #16]	; (800a264 <FLASH_Erase_Sector+0x8c>)
 800a252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a256:	6113      	str	r3, [r2, #16]
}
 800a258:	bf00      	nop
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	40023c00 	.word	0x40023c00

0800a268 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a268:	b480      	push	{r7}
 800a26a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800a26c:	4b20      	ldr	r3, [pc, #128]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a274:	2b00      	cmp	r3, #0
 800a276:	d017      	beq.n	800a2a8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a278:	4b1d      	ldr	r3, [pc, #116]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a1c      	ldr	r2, [pc, #112]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a27e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a282:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a284:	4b1a      	ldr	r3, [pc, #104]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a19      	ldr	r2, [pc, #100]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a28a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	4b17      	ldr	r3, [pc, #92]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a16      	ldr	r2, [pc, #88]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a29a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a29c:	4b14      	ldr	r3, [pc, #80]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a13      	ldr	r2, [pc, #76]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a2a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2a6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800a2a8:	4b11      	ldr	r3, [pc, #68]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d017      	beq.n	800a2e4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800a2b4:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a0d      	ldr	r2, [pc, #52]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a2ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2be:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a2c0:	4b0b      	ldr	r3, [pc, #44]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a0a      	ldr	r2, [pc, #40]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a2c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a2ca:	6013      	str	r3, [r2, #0]
 800a2cc:	4b08      	ldr	r3, [pc, #32]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a07      	ldr	r2, [pc, #28]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a2d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2d6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a2d8:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a04      	ldr	r2, [pc, #16]	; (800a2f0 <FLASH_FlushCaches+0x88>)
 800a2de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a2e2:	6013      	str	r3, [r2, #0]
  }
}
 800a2e4:	bf00      	nop
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	40023c00 	.word	0x40023c00

0800a2f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b089      	sub	sp, #36	; 0x24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a302:	2300      	movs	r3, #0
 800a304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a306:	2300      	movs	r3, #0
 800a308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a30a:	2300      	movs	r3, #0
 800a30c:	61fb      	str	r3, [r7, #28]
 800a30e:	e16b      	b.n	800a5e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a310:	2201      	movs	r2, #1
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	fa02 f303 	lsl.w	r3, r2, r3
 800a318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	4013      	ands	r3, r2
 800a322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	429a      	cmp	r2, r3
 800a32a:	f040 815a 	bne.w	800a5e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	f003 0303 	and.w	r3, r3, #3
 800a336:	2b01      	cmp	r3, #1
 800a338:	d005      	beq.n	800a346 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a342:	2b02      	cmp	r3, #2
 800a344:	d130      	bne.n	800a3a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	2203      	movs	r2, #3
 800a352:	fa02 f303 	lsl.w	r3, r2, r3
 800a356:	43db      	mvns	r3, r3
 800a358:	69ba      	ldr	r2, [r7, #24]
 800a35a:	4013      	ands	r3, r2
 800a35c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	fa02 f303 	lsl.w	r3, r2, r3
 800a36a:	69ba      	ldr	r2, [r7, #24]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	69ba      	ldr	r2, [r7, #24]
 800a374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a37c:	2201      	movs	r2, #1
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	fa02 f303 	lsl.w	r3, r2, r3
 800a384:	43db      	mvns	r3, r3
 800a386:	69ba      	ldr	r2, [r7, #24]
 800a388:	4013      	ands	r3, r2
 800a38a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	091b      	lsrs	r3, r3, #4
 800a392:	f003 0201 	and.w	r2, r3, #1
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	fa02 f303 	lsl.w	r3, r2, r3
 800a39c:	69ba      	ldr	r2, [r7, #24]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f003 0303 	and.w	r3, r3, #3
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d017      	beq.n	800a3e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	2203      	movs	r2, #3
 800a3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c4:	43db      	mvns	r3, r3
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d8:	69ba      	ldr	r2, [r7, #24]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	69ba      	ldr	r2, [r7, #24]
 800a3e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f003 0303 	and.w	r3, r3, #3
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d123      	bne.n	800a438 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	08da      	lsrs	r2, r3, #3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	3208      	adds	r2, #8
 800a3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	f003 0307 	and.w	r3, r3, #7
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	220f      	movs	r2, #15
 800a408:	fa02 f303 	lsl.w	r3, r2, r3
 800a40c:	43db      	mvns	r3, r3
 800a40e:	69ba      	ldr	r2, [r7, #24]
 800a410:	4013      	ands	r3, r2
 800a412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	691a      	ldr	r2, [r3, #16]
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	f003 0307 	and.w	r3, r3, #7
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	fa02 f303 	lsl.w	r3, r2, r3
 800a424:	69ba      	ldr	r2, [r7, #24]
 800a426:	4313      	orrs	r3, r2
 800a428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	08da      	lsrs	r2, r3, #3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	3208      	adds	r2, #8
 800a432:	69b9      	ldr	r1, [r7, #24]
 800a434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	005b      	lsls	r3, r3, #1
 800a442:	2203      	movs	r2, #3
 800a444:	fa02 f303 	lsl.w	r3, r2, r3
 800a448:	43db      	mvns	r3, r3
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	4013      	ands	r3, r2
 800a44e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f003 0203 	and.w	r2, r3, #3
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	005b      	lsls	r3, r3, #1
 800a45c:	fa02 f303 	lsl.w	r3, r2, r3
 800a460:	69ba      	ldr	r2, [r7, #24]
 800a462:	4313      	orrs	r3, r2
 800a464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	69ba      	ldr	r2, [r7, #24]
 800a46a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 80b4 	beq.w	800a5e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a47a:	2300      	movs	r3, #0
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	4b60      	ldr	r3, [pc, #384]	; (800a600 <HAL_GPIO_Init+0x30c>)
 800a480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a482:	4a5f      	ldr	r2, [pc, #380]	; (800a600 <HAL_GPIO_Init+0x30c>)
 800a484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a488:	6453      	str	r3, [r2, #68]	; 0x44
 800a48a:	4b5d      	ldr	r3, [pc, #372]	; (800a600 <HAL_GPIO_Init+0x30c>)
 800a48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a48e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a496:	4a5b      	ldr	r2, [pc, #364]	; (800a604 <HAL_GPIO_Init+0x310>)
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	089b      	lsrs	r3, r3, #2
 800a49c:	3302      	adds	r3, #2
 800a49e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	f003 0303 	and.w	r3, r3, #3
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	220f      	movs	r2, #15
 800a4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b2:	43db      	mvns	r3, r3
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a52      	ldr	r2, [pc, #328]	; (800a608 <HAL_GPIO_Init+0x314>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d02b      	beq.n	800a51a <HAL_GPIO_Init+0x226>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a51      	ldr	r2, [pc, #324]	; (800a60c <HAL_GPIO_Init+0x318>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d025      	beq.n	800a516 <HAL_GPIO_Init+0x222>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a50      	ldr	r2, [pc, #320]	; (800a610 <HAL_GPIO_Init+0x31c>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d01f      	beq.n	800a512 <HAL_GPIO_Init+0x21e>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a4f      	ldr	r2, [pc, #316]	; (800a614 <HAL_GPIO_Init+0x320>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d019      	beq.n	800a50e <HAL_GPIO_Init+0x21a>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a4e      	ldr	r2, [pc, #312]	; (800a618 <HAL_GPIO_Init+0x324>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d013      	beq.n	800a50a <HAL_GPIO_Init+0x216>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a4d      	ldr	r2, [pc, #308]	; (800a61c <HAL_GPIO_Init+0x328>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d00d      	beq.n	800a506 <HAL_GPIO_Init+0x212>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a4c      	ldr	r2, [pc, #304]	; (800a620 <HAL_GPIO_Init+0x32c>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d007      	beq.n	800a502 <HAL_GPIO_Init+0x20e>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a4b      	ldr	r2, [pc, #300]	; (800a624 <HAL_GPIO_Init+0x330>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d101      	bne.n	800a4fe <HAL_GPIO_Init+0x20a>
 800a4fa:	2307      	movs	r3, #7
 800a4fc:	e00e      	b.n	800a51c <HAL_GPIO_Init+0x228>
 800a4fe:	2308      	movs	r3, #8
 800a500:	e00c      	b.n	800a51c <HAL_GPIO_Init+0x228>
 800a502:	2306      	movs	r3, #6
 800a504:	e00a      	b.n	800a51c <HAL_GPIO_Init+0x228>
 800a506:	2305      	movs	r3, #5
 800a508:	e008      	b.n	800a51c <HAL_GPIO_Init+0x228>
 800a50a:	2304      	movs	r3, #4
 800a50c:	e006      	b.n	800a51c <HAL_GPIO_Init+0x228>
 800a50e:	2303      	movs	r3, #3
 800a510:	e004      	b.n	800a51c <HAL_GPIO_Init+0x228>
 800a512:	2302      	movs	r3, #2
 800a514:	e002      	b.n	800a51c <HAL_GPIO_Init+0x228>
 800a516:	2301      	movs	r3, #1
 800a518:	e000      	b.n	800a51c <HAL_GPIO_Init+0x228>
 800a51a:	2300      	movs	r3, #0
 800a51c:	69fa      	ldr	r2, [r7, #28]
 800a51e:	f002 0203 	and.w	r2, r2, #3
 800a522:	0092      	lsls	r2, r2, #2
 800a524:	4093      	lsls	r3, r2
 800a526:	69ba      	ldr	r2, [r7, #24]
 800a528:	4313      	orrs	r3, r2
 800a52a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a52c:	4935      	ldr	r1, [pc, #212]	; (800a604 <HAL_GPIO_Init+0x310>)
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	089b      	lsrs	r3, r3, #2
 800a532:	3302      	adds	r3, #2
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a53a:	4b3b      	ldr	r3, [pc, #236]	; (800a628 <HAL_GPIO_Init+0x334>)
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	43db      	mvns	r3, r3
 800a544:	69ba      	ldr	r2, [r7, #24]
 800a546:	4013      	ands	r3, r2
 800a548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a556:	69ba      	ldr	r2, [r7, #24]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a55e:	4a32      	ldr	r2, [pc, #200]	; (800a628 <HAL_GPIO_Init+0x334>)
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a564:	4b30      	ldr	r3, [pc, #192]	; (800a628 <HAL_GPIO_Init+0x334>)
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	43db      	mvns	r3, r3
 800a56e:	69ba      	ldr	r2, [r7, #24]
 800a570:	4013      	ands	r3, r2
 800a572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d003      	beq.n	800a588 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a580:	69ba      	ldr	r2, [r7, #24]
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	4313      	orrs	r3, r2
 800a586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a588:	4a27      	ldr	r2, [pc, #156]	; (800a628 <HAL_GPIO_Init+0x334>)
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a58e:	4b26      	ldr	r3, [pc, #152]	; (800a628 <HAL_GPIO_Init+0x334>)
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	43db      	mvns	r3, r3
 800a598:	69ba      	ldr	r2, [r7, #24]
 800a59a:	4013      	ands	r3, r2
 800a59c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d003      	beq.n	800a5b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a5aa:	69ba      	ldr	r2, [r7, #24]
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a5b2:	4a1d      	ldr	r2, [pc, #116]	; (800a628 <HAL_GPIO_Init+0x334>)
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a5b8:	4b1b      	ldr	r3, [pc, #108]	; (800a628 <HAL_GPIO_Init+0x334>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	43db      	mvns	r3, r3
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d003      	beq.n	800a5dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a5d4:	69ba      	ldr	r2, [r7, #24]
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a5dc:	4a12      	ldr	r2, [pc, #72]	; (800a628 <HAL_GPIO_Init+0x334>)
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	61fb      	str	r3, [r7, #28]
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	2b0f      	cmp	r3, #15
 800a5ec:	f67f ae90 	bls.w	800a310 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop
 800a5f4:	3724      	adds	r7, #36	; 0x24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	40023800 	.word	0x40023800
 800a604:	40013800 	.word	0x40013800
 800a608:	40020000 	.word	0x40020000
 800a60c:	40020400 	.word	0x40020400
 800a610:	40020800 	.word	0x40020800
 800a614:	40020c00 	.word	0x40020c00
 800a618:	40021000 	.word	0x40021000
 800a61c:	40021400 	.word	0x40021400
 800a620:	40021800 	.word	0x40021800
 800a624:	40021c00 	.word	0x40021c00
 800a628:	40013c00 	.word	0x40013c00

0800a62c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b087      	sub	sp, #28
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a636:	2300      	movs	r3, #0
 800a638:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a63a:	2300      	movs	r3, #0
 800a63c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a63e:	2300      	movs	r3, #0
 800a640:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a642:	2300      	movs	r3, #0
 800a644:	617b      	str	r3, [r7, #20]
 800a646:	e0cd      	b.n	800a7e4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a648:	2201      	movs	r2, #1
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	fa02 f303 	lsl.w	r3, r2, r3
 800a650:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	4013      	ands	r3, r2
 800a658:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	429a      	cmp	r2, r3
 800a660:	f040 80bd 	bne.w	800a7de <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a664:	4a65      	ldr	r2, [pc, #404]	; (800a7fc <HAL_GPIO_DeInit+0x1d0>)
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	089b      	lsrs	r3, r3, #2
 800a66a:	3302      	adds	r3, #2
 800a66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a670:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f003 0303 	and.w	r3, r3, #3
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	220f      	movs	r2, #15
 800a67c:	fa02 f303 	lsl.w	r3, r2, r3
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	4013      	ands	r3, r2
 800a684:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a5d      	ldr	r2, [pc, #372]	; (800a800 <HAL_GPIO_DeInit+0x1d4>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d02b      	beq.n	800a6e6 <HAL_GPIO_DeInit+0xba>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a5c      	ldr	r2, [pc, #368]	; (800a804 <HAL_GPIO_DeInit+0x1d8>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d025      	beq.n	800a6e2 <HAL_GPIO_DeInit+0xb6>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a5b      	ldr	r2, [pc, #364]	; (800a808 <HAL_GPIO_DeInit+0x1dc>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d01f      	beq.n	800a6de <HAL_GPIO_DeInit+0xb2>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a5a      	ldr	r2, [pc, #360]	; (800a80c <HAL_GPIO_DeInit+0x1e0>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d019      	beq.n	800a6da <HAL_GPIO_DeInit+0xae>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a59      	ldr	r2, [pc, #356]	; (800a810 <HAL_GPIO_DeInit+0x1e4>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d013      	beq.n	800a6d6 <HAL_GPIO_DeInit+0xaa>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a58      	ldr	r2, [pc, #352]	; (800a814 <HAL_GPIO_DeInit+0x1e8>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d00d      	beq.n	800a6d2 <HAL_GPIO_DeInit+0xa6>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a57      	ldr	r2, [pc, #348]	; (800a818 <HAL_GPIO_DeInit+0x1ec>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d007      	beq.n	800a6ce <HAL_GPIO_DeInit+0xa2>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a56      	ldr	r2, [pc, #344]	; (800a81c <HAL_GPIO_DeInit+0x1f0>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d101      	bne.n	800a6ca <HAL_GPIO_DeInit+0x9e>
 800a6c6:	2307      	movs	r3, #7
 800a6c8:	e00e      	b.n	800a6e8 <HAL_GPIO_DeInit+0xbc>
 800a6ca:	2308      	movs	r3, #8
 800a6cc:	e00c      	b.n	800a6e8 <HAL_GPIO_DeInit+0xbc>
 800a6ce:	2306      	movs	r3, #6
 800a6d0:	e00a      	b.n	800a6e8 <HAL_GPIO_DeInit+0xbc>
 800a6d2:	2305      	movs	r3, #5
 800a6d4:	e008      	b.n	800a6e8 <HAL_GPIO_DeInit+0xbc>
 800a6d6:	2304      	movs	r3, #4
 800a6d8:	e006      	b.n	800a6e8 <HAL_GPIO_DeInit+0xbc>
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e004      	b.n	800a6e8 <HAL_GPIO_DeInit+0xbc>
 800a6de:	2302      	movs	r3, #2
 800a6e0:	e002      	b.n	800a6e8 <HAL_GPIO_DeInit+0xbc>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e000      	b.n	800a6e8 <HAL_GPIO_DeInit+0xbc>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	f002 0203 	and.w	r2, r2, #3
 800a6ee:	0092      	lsls	r2, r2, #2
 800a6f0:	4093      	lsls	r3, r2
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d132      	bne.n	800a75e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a6f8:	4b49      	ldr	r3, [pc, #292]	; (800a820 <HAL_GPIO_DeInit+0x1f4>)
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	43db      	mvns	r3, r3
 800a700:	4947      	ldr	r1, [pc, #284]	; (800a820 <HAL_GPIO_DeInit+0x1f4>)
 800a702:	4013      	ands	r3, r2
 800a704:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a706:	4b46      	ldr	r3, [pc, #280]	; (800a820 <HAL_GPIO_DeInit+0x1f4>)
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	43db      	mvns	r3, r3
 800a70e:	4944      	ldr	r1, [pc, #272]	; (800a820 <HAL_GPIO_DeInit+0x1f4>)
 800a710:	4013      	ands	r3, r2
 800a712:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a714:	4b42      	ldr	r3, [pc, #264]	; (800a820 <HAL_GPIO_DeInit+0x1f4>)
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	43db      	mvns	r3, r3
 800a71c:	4940      	ldr	r1, [pc, #256]	; (800a820 <HAL_GPIO_DeInit+0x1f4>)
 800a71e:	4013      	ands	r3, r2
 800a720:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a722:	4b3f      	ldr	r3, [pc, #252]	; (800a820 <HAL_GPIO_DeInit+0x1f4>)
 800a724:	689a      	ldr	r2, [r3, #8]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	43db      	mvns	r3, r3
 800a72a:	493d      	ldr	r1, [pc, #244]	; (800a820 <HAL_GPIO_DeInit+0x1f4>)
 800a72c:	4013      	ands	r3, r2
 800a72e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	220f      	movs	r2, #15
 800a73a:	fa02 f303 	lsl.w	r3, r2, r3
 800a73e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a740:	4a2e      	ldr	r2, [pc, #184]	; (800a7fc <HAL_GPIO_DeInit+0x1d0>)
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	089b      	lsrs	r3, r3, #2
 800a746:	3302      	adds	r3, #2
 800a748:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	43da      	mvns	r2, r3
 800a750:	482a      	ldr	r0, [pc, #168]	; (800a7fc <HAL_GPIO_DeInit+0x1d0>)
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	089b      	lsrs	r3, r3, #2
 800a756:	400a      	ands	r2, r1
 800a758:	3302      	adds	r3, #2
 800a75a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	005b      	lsls	r3, r3, #1
 800a766:	2103      	movs	r1, #3
 800a768:	fa01 f303 	lsl.w	r3, r1, r3
 800a76c:	43db      	mvns	r3, r3
 800a76e:	401a      	ands	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	08da      	lsrs	r2, r3, #3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3208      	adds	r2, #8
 800a77c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	f003 0307 	and.w	r3, r3, #7
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	220f      	movs	r2, #15
 800a78a:	fa02 f303 	lsl.w	r3, r2, r3
 800a78e:	43db      	mvns	r3, r3
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	08d2      	lsrs	r2, r2, #3
 800a794:	4019      	ands	r1, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	3208      	adds	r2, #8
 800a79a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68da      	ldr	r2, [r3, #12]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	2103      	movs	r1, #3
 800a7a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ac:	43db      	mvns	r3, r3
 800a7ae:	401a      	ands	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c0:	43db      	mvns	r3, r3
 800a7c2:	401a      	ands	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	005b      	lsls	r3, r3, #1
 800a7d0:	2103      	movs	r1, #3
 800a7d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d6:	43db      	mvns	r3, r3
 800a7d8:	401a      	ands	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	617b      	str	r3, [r7, #20]
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	2b0f      	cmp	r3, #15
 800a7e8:	f67f af2e 	bls.w	800a648 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a7ec:	bf00      	nop
 800a7ee:	bf00      	nop
 800a7f0:	371c      	adds	r7, #28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	40013800 	.word	0x40013800
 800a800:	40020000 	.word	0x40020000
 800a804:	40020400 	.word	0x40020400
 800a808:	40020800 	.word	0x40020800
 800a80c:	40020c00 	.word	0x40020c00
 800a810:	40021000 	.word	0x40021000
 800a814:	40021400 	.word	0x40021400
 800a818:	40021800 	.word	0x40021800
 800a81c:	40021c00 	.word	0x40021c00
 800a820:	40013c00 	.word	0x40013c00

0800a824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	807b      	strh	r3, [r7, #2]
 800a830:	4613      	mov	r3, r2
 800a832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a834:	787b      	ldrb	r3, [r7, #1]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a83a:	887a      	ldrh	r2, [r7, #2]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a840:	e003      	b.n	800a84a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a842:	887b      	ldrh	r3, [r7, #2]
 800a844:	041a      	lsls	r2, r3, #16
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	619a      	str	r2, [r3, #24]
}
 800a84a:	bf00      	nop
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b084      	sub	sp, #16
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d101      	bne.n	800a868 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e034      	b.n	800a8d2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a870:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f245 5255 	movw	r2, #21845	; 0x5555
 800a87a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	6852      	ldr	r2, [r2, #4]
 800a884:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	6892      	ldr	r2, [r2, #8]
 800a88e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a890:	f7fe ff6e 	bl	8009770 <HAL_GetTick>
 800a894:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a896:	e00f      	b.n	800a8b8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a898:	f7fe ff6a 	bl	8009770 <HAL_GetTick>
 800a89c:	4602      	mov	r2, r0
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	2b31      	cmp	r3, #49	; 0x31
 800a8a4:	d908      	bls.n	800a8b8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	f003 0303 	and.w	r3, r3, #3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	e00c      	b.n	800a8d2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1e8      	bne.n	800a898 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a8ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	60b9      	str	r1, [r7, #8]
 800a8e4:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e03e      	b.n	800a96e <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d106      	bne.n	800a90a <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f7fa f905 	bl	8004b14 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3304      	adds	r3, #4
 800a912:	4619      	mov	r1, r3
 800a914:	4610      	mov	r0, r2
 800a916:	f004 fa17 	bl	800ed48 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6818      	ldr	r0, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	461a      	mov	r2, r3
 800a924:	68b9      	ldr	r1, [r7, #8]
 800a926:	f004 fa5b 	bl	800ede0 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6818      	ldr	r0, [r3, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	461a      	mov	r2, r3
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	f004 fa88 	bl	800ee4a <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	2b10      	cmp	r3, #16
 800a940:	d108      	bne.n	800a954 <HAL_NAND_Init+0x7a>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f042 0204 	orr.w	r2, r2, #4
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	e007      	b.n	800a964 <HAL_NAND_Init+0x8a>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6a1a      	ldr	r2, [r3, #32]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f042 0204 	orr.w	r2, r2, #4
 800a962:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	2b10      	cmp	r3, #16
 800a984:	d10a      	bne.n	800a99c <HAL_NAND_IRQHandler+0x26>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	2b01      	cmp	r3, #1
 800a992:	bf0c      	ite	eq
 800a994:	2301      	moveq	r3, #1
 800a996:	2300      	movne	r3, #0
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	e009      	b.n	800a9b0 <HAL_NAND_IRQHandler+0x3a>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	bf0c      	ite	eq
 800a9aa:	2301      	moveq	r3, #1
 800a9ac:	2300      	movne	r3, #0
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d017      	beq.n	800a9e4 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 f8b2 	bl	800ab1e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	2b10      	cmp	r3, #16
 800a9c0:	d108      	bne.n	800a9d4 <HAL_NAND_IRQHandler+0x5e>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f022 0201 	bic.w	r2, r2, #1
 800a9d0:	605a      	str	r2, [r3, #4]
 800a9d2:	e007      	b.n	800a9e4 <HAL_NAND_IRQHandler+0x6e>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f022 0201 	bic.w	r2, r2, #1
 800a9e2:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	2b10      	cmp	r3, #16
 800a9ea:	d10a      	bne.n	800aa02 <HAL_NAND_IRQHandler+0x8c>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f003 0302 	and.w	r3, r3, #2
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	bf0c      	ite	eq
 800a9fa:	2301      	moveq	r3, #1
 800a9fc:	2300      	movne	r3, #0
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	e009      	b.n	800aa16 <HAL_NAND_IRQHandler+0xa0>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	f003 0302 	and.w	r3, r3, #2
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	bf0c      	ite	eq
 800aa10:	2301      	moveq	r3, #1
 800aa12:	2300      	movne	r3, #0
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d017      	beq.n	800aa4a <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f87f 	bl	800ab1e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	2b10      	cmp	r3, #16
 800aa26:	d108      	bne.n	800aa3a <HAL_NAND_IRQHandler+0xc4>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0202 	bic.w	r2, r2, #2
 800aa36:	605a      	str	r2, [r3, #4]
 800aa38:	e007      	b.n	800aa4a <HAL_NAND_IRQHandler+0xd4>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f022 0202 	bic.w	r2, r2, #2
 800aa48:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	2b10      	cmp	r3, #16
 800aa50:	d10a      	bne.n	800aa68 <HAL_NAND_IRQHandler+0xf2>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f003 0304 	and.w	r3, r3, #4
 800aa5c:	2b04      	cmp	r3, #4
 800aa5e:	bf0c      	ite	eq
 800aa60:	2301      	moveq	r3, #1
 800aa62:	2300      	movne	r3, #0
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	e009      	b.n	800aa7c <HAL_NAND_IRQHandler+0x106>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	f003 0304 	and.w	r3, r3, #4
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	bf0c      	ite	eq
 800aa76:	2301      	moveq	r3, #1
 800aa78:	2300      	movne	r3, #0
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d017      	beq.n	800aab0 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 f84c 	bl	800ab1e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	2b10      	cmp	r3, #16
 800aa8c:	d108      	bne.n	800aaa0 <HAL_NAND_IRQHandler+0x12a>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	685a      	ldr	r2, [r3, #4]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f022 0204 	bic.w	r2, r2, #4
 800aa9c:	605a      	str	r2, [r3, #4]
 800aa9e:	e007      	b.n	800aab0 <HAL_NAND_IRQHandler+0x13a>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f022 0204 	bic.w	r2, r2, #4
 800aaae:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	2b10      	cmp	r3, #16
 800aab6:	d10a      	bne.n	800aace <HAL_NAND_IRQHandler+0x158>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac2:	2b40      	cmp	r3, #64	; 0x40
 800aac4:	bf0c      	ite	eq
 800aac6:	2301      	moveq	r3, #1
 800aac8:	2300      	movne	r3, #0
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	e009      	b.n	800aae2 <HAL_NAND_IRQHandler+0x16c>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad8:	2b40      	cmp	r3, #64	; 0x40
 800aada:	bf0c      	ite	eq
 800aadc:	2301      	moveq	r3, #1
 800aade:	2300      	movne	r3, #0
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d017      	beq.n	800ab16 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f819 	bl	800ab1e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	2b10      	cmp	r3, #16
 800aaf2:	d108      	bne.n	800ab06 <HAL_NAND_IRQHandler+0x190>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab02:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 800ab04:	e007      	b.n	800ab16 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab14:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ab16:	bf00      	nop
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b083      	sub	sp, #12
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 800ab26:	bf00      	nop
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ab32:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab34:	b08f      	sub	sp, #60	; 0x3c
 800ab36:	af0a      	add	r7, sp, #40	; 0x28
 800ab38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d101      	bne.n	800ab44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e10f      	b.n	800ad64 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f008 f93e 	bl	8012de0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2203      	movs	r2, #3
 800ab68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d102      	bne.n	800ab7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f004 faab 	bl	800f0de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	603b      	str	r3, [r7, #0]
 800ab8e:	687e      	ldr	r6, [r7, #4]
 800ab90:	466d      	mov	r5, sp
 800ab92:	f106 0410 	add.w	r4, r6, #16
 800ab96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aba2:	e885 0003 	stmia.w	r5, {r0, r1}
 800aba6:	1d33      	adds	r3, r6, #4
 800aba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abaa:	6838      	ldr	r0, [r7, #0]
 800abac:	f004 f982 	bl	800eeb4 <USB_CoreInit>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d005      	beq.n	800abc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2202      	movs	r2, #2
 800abba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e0d0      	b.n	800ad64 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2100      	movs	r1, #0
 800abc8:	4618      	mov	r0, r3
 800abca:	f004 fa99 	bl	800f100 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800abce:	2300      	movs	r3, #0
 800abd0:	73fb      	strb	r3, [r7, #15]
 800abd2:	e04a      	b.n	800ac6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800abd4:	7bfa      	ldrb	r2, [r7, #15]
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	4613      	mov	r3, r2
 800abda:	00db      	lsls	r3, r3, #3
 800abdc:	4413      	add	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	440b      	add	r3, r1
 800abe2:	333d      	adds	r3, #61	; 0x3d
 800abe4:	2201      	movs	r2, #1
 800abe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800abe8:	7bfa      	ldrb	r2, [r7, #15]
 800abea:	6879      	ldr	r1, [r7, #4]
 800abec:	4613      	mov	r3, r2
 800abee:	00db      	lsls	r3, r3, #3
 800abf0:	4413      	add	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	440b      	add	r3, r1
 800abf6:	333c      	adds	r3, #60	; 0x3c
 800abf8:	7bfa      	ldrb	r2, [r7, #15]
 800abfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800abfc:	7bfa      	ldrb	r2, [r7, #15]
 800abfe:	7bfb      	ldrb	r3, [r7, #15]
 800ac00:	b298      	uxth	r0, r3
 800ac02:	6879      	ldr	r1, [r7, #4]
 800ac04:	4613      	mov	r3, r2
 800ac06:	00db      	lsls	r3, r3, #3
 800ac08:	4413      	add	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	440b      	add	r3, r1
 800ac0e:	3344      	adds	r3, #68	; 0x44
 800ac10:	4602      	mov	r2, r0
 800ac12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ac14:	7bfa      	ldrb	r2, [r7, #15]
 800ac16:	6879      	ldr	r1, [r7, #4]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	00db      	lsls	r3, r3, #3
 800ac1c:	4413      	add	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	440b      	add	r3, r1
 800ac22:	3340      	adds	r3, #64	; 0x40
 800ac24:	2200      	movs	r2, #0
 800ac26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ac28:	7bfa      	ldrb	r2, [r7, #15]
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	00db      	lsls	r3, r3, #3
 800ac30:	4413      	add	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	440b      	add	r3, r1
 800ac36:	3348      	adds	r3, #72	; 0x48
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ac3c:	7bfa      	ldrb	r2, [r7, #15]
 800ac3e:	6879      	ldr	r1, [r7, #4]
 800ac40:	4613      	mov	r3, r2
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	4413      	add	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	440b      	add	r3, r1
 800ac4a:	334c      	adds	r3, #76	; 0x4c
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ac50:	7bfa      	ldrb	r2, [r7, #15]
 800ac52:	6879      	ldr	r1, [r7, #4]
 800ac54:	4613      	mov	r3, r2
 800ac56:	00db      	lsls	r3, r3, #3
 800ac58:	4413      	add	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	440b      	add	r3, r1
 800ac5e:	3354      	adds	r3, #84	; 0x54
 800ac60:	2200      	movs	r2, #0
 800ac62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
 800ac66:	3301      	adds	r3, #1
 800ac68:	73fb      	strb	r3, [r7, #15]
 800ac6a:	7bfa      	ldrb	r2, [r7, #15]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d3af      	bcc.n	800abd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac74:	2300      	movs	r3, #0
 800ac76:	73fb      	strb	r3, [r7, #15]
 800ac78:	e044      	b.n	800ad04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ac7a:	7bfa      	ldrb	r2, [r7, #15]
 800ac7c:	6879      	ldr	r1, [r7, #4]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	00db      	lsls	r3, r3, #3
 800ac82:	4413      	add	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	440b      	add	r3, r1
 800ac88:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ac90:	7bfa      	ldrb	r2, [r7, #15]
 800ac92:	6879      	ldr	r1, [r7, #4]
 800ac94:	4613      	mov	r3, r2
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	440b      	add	r3, r1
 800ac9e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800aca2:	7bfa      	ldrb	r2, [r7, #15]
 800aca4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aca6:	7bfa      	ldrb	r2, [r7, #15]
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	440b      	add	r3, r1
 800acb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800acb8:	2200      	movs	r2, #0
 800acba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800acbc:	7bfa      	ldrb	r2, [r7, #15]
 800acbe:	6879      	ldr	r1, [r7, #4]
 800acc0:	4613      	mov	r3, r2
 800acc2:	00db      	lsls	r3, r3, #3
 800acc4:	4413      	add	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	440b      	add	r3, r1
 800acca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800acd2:	7bfa      	ldrb	r2, [r7, #15]
 800acd4:	6879      	ldr	r1, [r7, #4]
 800acd6:	4613      	mov	r3, r2
 800acd8:	00db      	lsls	r3, r3, #3
 800acda:	4413      	add	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	440b      	add	r3, r1
 800ace0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ace4:	2200      	movs	r2, #0
 800ace6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ace8:	7bfa      	ldrb	r2, [r7, #15]
 800acea:	6879      	ldr	r1, [r7, #4]
 800acec:	4613      	mov	r3, r2
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	4413      	add	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	440b      	add	r3, r1
 800acf6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800acfa:	2200      	movs	r2, #0
 800acfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
 800ad00:	3301      	adds	r3, #1
 800ad02:	73fb      	strb	r3, [r7, #15]
 800ad04:	7bfa      	ldrb	r2, [r7, #15]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d3b5      	bcc.n	800ac7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	603b      	str	r3, [r7, #0]
 800ad14:	687e      	ldr	r6, [r7, #4]
 800ad16:	466d      	mov	r5, sp
 800ad18:	f106 0410 	add.w	r4, r6, #16
 800ad1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad24:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad28:	e885 0003 	stmia.w	r5, {r0, r1}
 800ad2c:	1d33      	adds	r3, r6, #4
 800ad2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad30:	6838      	ldr	r0, [r7, #0]
 800ad32:	f004 fa31 	bl	800f198 <USB_DevInit>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d005      	beq.n	800ad48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2202      	movs	r2, #2
 800ad40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e00d      	b.n	800ad64 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f005 fb80 	bl	8010462 <USB_DevDisconnect>

  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d101      	bne.n	800ad88 <HAL_PCD_Start+0x1c>
 800ad84:	2302      	movs	r3, #2
 800ad86:	e020      	b.n	800adca <HAL_PCD_Start+0x5e>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d109      	bne.n	800adac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d005      	beq.n	800adac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f004 f983 	bl	800f0bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4618      	mov	r0, r3
 800adbc:	f005 fb30 	bl	8010420 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800add2:	b590      	push	{r4, r7, lr}
 800add4:	b08d      	sub	sp, #52	; 0x34
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4618      	mov	r0, r3
 800adea:	f005 fbee 	bl	80105ca <USB_GetMode>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f040 848a 	bne.w	800b70a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4618      	mov	r0, r3
 800adfc:	f005 fb52 	bl	80104a4 <USB_ReadInterrupts>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f000 8480 	beq.w	800b708 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	0a1b      	lsrs	r3, r3, #8
 800ae12:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f005 fb3f 	bl	80104a4 <USB_ReadInterrupts>
 800ae26:	4603      	mov	r3, r0
 800ae28:	f003 0302 	and.w	r3, r3, #2
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d107      	bne.n	800ae40 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	695a      	ldr	r2, [r3, #20]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f002 0202 	and.w	r2, r2, #2
 800ae3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f005 fb2d 	bl	80104a4 <USB_ReadInterrupts>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	f003 0310 	and.w	r3, r3, #16
 800ae50:	2b10      	cmp	r3, #16
 800ae52:	d161      	bne.n	800af18 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	699a      	ldr	r2, [r3, #24]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 0210 	bic.w	r2, r2, #16
 800ae62:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	f003 020f 	and.w	r2, r3, #15
 800ae70:	4613      	mov	r3, r2
 800ae72:	00db      	lsls	r3, r3, #3
 800ae74:	4413      	add	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	4413      	add	r3, r2
 800ae80:	3304      	adds	r3, #4
 800ae82:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	0c5b      	lsrs	r3, r3, #17
 800ae88:	f003 030f 	and.w	r3, r3, #15
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d124      	bne.n	800aeda <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ae90:	69ba      	ldr	r2, [r7, #24]
 800ae92:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ae96:	4013      	ands	r3, r2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d035      	beq.n	800af08 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	091b      	lsrs	r3, r3, #4
 800aea4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800aea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	461a      	mov	r2, r3
 800aeae:	6a38      	ldr	r0, [r7, #32]
 800aeb0:	f005 f964 	bl	801017c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	691a      	ldr	r2, [r3, #16]
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	091b      	lsrs	r3, r3, #4
 800aebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aec0:	441a      	add	r2, r3
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	6a1a      	ldr	r2, [r3, #32]
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	091b      	lsrs	r3, r3, #4
 800aece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aed2:	441a      	add	r2, r3
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	621a      	str	r2, [r3, #32]
 800aed8:	e016      	b.n	800af08 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	0c5b      	lsrs	r3, r3, #17
 800aede:	f003 030f 	and.w	r3, r3, #15
 800aee2:	2b06      	cmp	r3, #6
 800aee4:	d110      	bne.n	800af08 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aeec:	2208      	movs	r2, #8
 800aeee:	4619      	mov	r1, r3
 800aef0:	6a38      	ldr	r0, [r7, #32]
 800aef2:	f005 f943 	bl	801017c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	6a1a      	ldr	r2, [r3, #32]
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	091b      	lsrs	r3, r3, #4
 800aefe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af02:	441a      	add	r2, r3
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f042 0210 	orr.w	r2, r2, #16
 800af16:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f005 fac1 	bl	80104a4 <USB_ReadInterrupts>
 800af22:	4603      	mov	r3, r0
 800af24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800af2c:	f040 80a7 	bne.w	800b07e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800af30:	2300      	movs	r3, #0
 800af32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4618      	mov	r0, r3
 800af3a:	f005 fac6 	bl	80104ca <USB_ReadDevAllOutEpInterrupt>
 800af3e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800af40:	e099      	b.n	800b076 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800af42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af44:	f003 0301 	and.w	r3, r3, #1
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f000 808e 	beq.w	800b06a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af54:	b2d2      	uxtb	r2, r2
 800af56:	4611      	mov	r1, r2
 800af58:	4618      	mov	r0, r3
 800af5a:	f005 faea 	bl	8010532 <USB_ReadDevOutEPInterrupt>
 800af5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	f003 0301 	and.w	r3, r3, #1
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00c      	beq.n	800af84 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6c:	015a      	lsls	r2, r3, #5
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	4413      	add	r3, r2
 800af72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af76:	461a      	mov	r2, r3
 800af78:	2301      	movs	r3, #1
 800af7a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800af7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fec2 	bl	800bd08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	f003 0308 	and.w	r3, r3, #8
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00c      	beq.n	800afa8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800af8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af90:	015a      	lsls	r2, r3, #5
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	4413      	add	r3, r2
 800af96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af9a:	461a      	mov	r2, r3
 800af9c:	2308      	movs	r3, #8
 800af9e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800afa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 ff98 	bl	800bed8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f003 0310 	and.w	r3, r3, #16
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d008      	beq.n	800afc4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb4:	015a      	lsls	r2, r3, #5
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	4413      	add	r3, r2
 800afba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afbe:	461a      	mov	r2, r3
 800afc0:	2310      	movs	r3, #16
 800afc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	f003 0302 	and.w	r3, r3, #2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d030      	beq.n	800b030 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afd6:	2b80      	cmp	r3, #128	; 0x80
 800afd8:	d109      	bne.n	800afee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	69fa      	ldr	r2, [r7, #28]
 800afe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afe8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800afec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800afee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aff0:	4613      	mov	r3, r2
 800aff2:	00db      	lsls	r3, r3, #3
 800aff4:	4413      	add	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	4413      	add	r3, r2
 800b000:	3304      	adds	r3, #4
 800b002:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	78db      	ldrb	r3, [r3, #3]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d108      	bne.n	800b01e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	2200      	movs	r2, #0
 800b010:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b014:	b2db      	uxtb	r3, r3
 800b016:	4619      	mov	r1, r3
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f008 f86b 	bl	80130f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b020:	015a      	lsls	r2, r3, #5
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	4413      	add	r3, r2
 800b026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b02a:	461a      	mov	r2, r3
 800b02c:	2302      	movs	r3, #2
 800b02e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	f003 0320 	and.w	r3, r3, #32
 800b036:	2b00      	cmp	r3, #0
 800b038:	d008      	beq.n	800b04c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	015a      	lsls	r2, r3, #5
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	4413      	add	r3, r2
 800b042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b046:	461a      	mov	r2, r3
 800b048:	2320      	movs	r3, #32
 800b04a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d009      	beq.n	800b06a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b062:	461a      	mov	r2, r3
 800b064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b068:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06c:	3301      	adds	r3, #1
 800b06e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b072:	085b      	lsrs	r3, r3, #1
 800b074:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f47f af62 	bne.w	800af42 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4618      	mov	r0, r3
 800b084:	f005 fa0e 	bl	80104a4 <USB_ReadInterrupts>
 800b088:	4603      	mov	r3, r0
 800b08a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b08e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b092:	f040 80db 	bne.w	800b24c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f005 fa2f 	bl	80104fe <USB_ReadDevAllInEpInterrupt>
 800b0a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b0a6:	e0cd      	b.n	800b244 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f000 80c2 	beq.w	800b238 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ba:	b2d2      	uxtb	r2, r2
 800b0bc:	4611      	mov	r1, r2
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f005 fa55 	bl	801056e <USB_ReadDevInEPInterrupt>
 800b0c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	f003 0301 	and.w	r3, r3, #1
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d057      	beq.n	800b180 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	f003 030f 	and.w	r3, r3, #15
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	43db      	mvns	r3, r3
 800b0ea:	69f9      	ldr	r1, [r7, #28]
 800b0ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	015a      	lsls	r2, r3, #5
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b100:	461a      	mov	r2, r3
 800b102:	2301      	movs	r3, #1
 800b104:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d132      	bne.n	800b174 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b10e:	6879      	ldr	r1, [r7, #4]
 800b110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b112:	4613      	mov	r3, r2
 800b114:	00db      	lsls	r3, r3, #3
 800b116:	4413      	add	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	440b      	add	r3, r1
 800b11c:	334c      	adds	r3, #76	; 0x4c
 800b11e:	6819      	ldr	r1, [r3, #0]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b124:	4613      	mov	r3, r2
 800b126:	00db      	lsls	r3, r3, #3
 800b128:	4413      	add	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4403      	add	r3, r0
 800b12e:	3348      	adds	r3, #72	; 0x48
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4419      	add	r1, r3
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b138:	4613      	mov	r3, r2
 800b13a:	00db      	lsls	r3, r3, #3
 800b13c:	4413      	add	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4403      	add	r3, r0
 800b142:	334c      	adds	r3, #76	; 0x4c
 800b144:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d113      	bne.n	800b174 <HAL_PCD_IRQHandler+0x3a2>
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b150:	4613      	mov	r3, r2
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	440b      	add	r3, r1
 800b15a:	3354      	adds	r3, #84	; 0x54
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d108      	bne.n	800b174 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6818      	ldr	r0, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b16c:	461a      	mov	r2, r3
 800b16e:	2101      	movs	r1, #1
 800b170:	f005 fa5c 	bl	801062c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	b2db      	uxtb	r3, r3
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f007 ff35 	bl	8012fea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	f003 0308 	and.w	r3, r3, #8
 800b186:	2b00      	cmp	r3, #0
 800b188:	d008      	beq.n	800b19c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	015a      	lsls	r2, r3, #5
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	4413      	add	r3, r2
 800b192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b196:	461a      	mov	r2, r3
 800b198:	2308      	movs	r3, #8
 800b19a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	f003 0310 	and.w	r3, r3, #16
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d008      	beq.n	800b1b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a8:	015a      	lsls	r2, r3, #5
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	2310      	movs	r3, #16
 800b1b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d008      	beq.n	800b1d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	015a      	lsls	r2, r3, #5
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	2340      	movs	r3, #64	; 0x40
 800b1d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	f003 0302 	and.w	r3, r3, #2
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d023      	beq.n	800b226 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b1de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1e0:	6a38      	ldr	r0, [r7, #32]
 800b1e2:	f004 f93d 	bl	800f460 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	4413      	add	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	3338      	adds	r3, #56	; 0x38
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	78db      	ldrb	r3, [r3, #3]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d108      	bne.n	800b214 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	2200      	movs	r2, #0
 800b206:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f007 ff82 	bl	8013118 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	015a      	lsls	r2, r3, #5
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	4413      	add	r3, r2
 800b21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b220:	461a      	mov	r2, r3
 800b222:	2302      	movs	r3, #2
 800b224:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d003      	beq.n	800b238 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fcdb 	bl	800bbee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	3301      	adds	r3, #1
 800b23c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	085b      	lsrs	r3, r3, #1
 800b242:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b246:	2b00      	cmp	r3, #0
 800b248:	f47f af2e 	bne.w	800b0a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4618      	mov	r0, r3
 800b252:	f005 f927 	bl	80104a4 <USB_ReadInterrupts>
 800b256:	4603      	mov	r3, r0
 800b258:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b25c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b260:	d122      	bne.n	800b2a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	69fa      	ldr	r2, [r7, #28]
 800b26c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b270:	f023 0301 	bic.w	r3, r3, #1
 800b274:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d108      	bne.n	800b292 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b288:	2100      	movs	r1, #0
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fec2 	bl	800c014 <HAL_PCDEx_LPM_Callback>
 800b290:	e002      	b.n	800b298 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f007 ff20 	bl	80130d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	695a      	ldr	r2, [r3, #20]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b2a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f005 f8f9 	bl	80104a4 <USB_ReadInterrupts>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2bc:	d112      	bne.n	800b2e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	f003 0301 	and.w	r3, r3, #1
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d102      	bne.n	800b2d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f007 fedc 	bl	801308c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	695a      	ldr	r2, [r3, #20]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b2e2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f005 f8db 	bl	80104a4 <USB_ReadInterrupts>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b2f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f8:	f040 80b7 	bne.w	800b46a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	69fa      	ldr	r2, [r7, #28]
 800b306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b30a:	f023 0301 	bic.w	r3, r3, #1
 800b30e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2110      	movs	r1, #16
 800b316:	4618      	mov	r0, r3
 800b318:	f004 f8a2 	bl	800f460 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b31c:	2300      	movs	r3, #0
 800b31e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b320:	e046      	b.n	800b3b0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b324:	015a      	lsls	r2, r3, #5
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	4413      	add	r3, r2
 800b32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b32e:	461a      	mov	r2, r3
 800b330:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b334:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b338:	015a      	lsls	r2, r3, #5
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	4413      	add	r3, r2
 800b33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b346:	0151      	lsls	r1, r2, #5
 800b348:	69fa      	ldr	r2, [r7, #28]
 800b34a:	440a      	add	r2, r1
 800b34c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b350:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b354:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b358:	015a      	lsls	r2, r3, #5
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	4413      	add	r3, r2
 800b35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b362:	461a      	mov	r2, r3
 800b364:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b368:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36c:	015a      	lsls	r2, r3, #5
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	4413      	add	r3, r2
 800b372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b37a:	0151      	lsls	r1, r2, #5
 800b37c:	69fa      	ldr	r2, [r7, #28]
 800b37e:	440a      	add	r2, r1
 800b380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b384:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b388:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38c:	015a      	lsls	r2, r3, #5
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	4413      	add	r3, r2
 800b392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b39a:	0151      	lsls	r1, r2, #5
 800b39c:	69fa      	ldr	r2, [r7, #28]
 800b39e:	440a      	add	r2, r1
 800b3a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d3b3      	bcc.n	800b322 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	69fa      	ldr	r2, [r7, #28]
 800b3c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b3cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d016      	beq.n	800b404 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3e0:	69fa      	ldr	r2, [r7, #28]
 800b3e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3e6:	f043 030b 	orr.w	r3, r3, #11
 800b3ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f6:	69fa      	ldr	r2, [r7, #28]
 800b3f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3fc:	f043 030b 	orr.w	r3, r3, #11
 800b400:	6453      	str	r3, [r2, #68]	; 0x44
 800b402:	e015      	b.n	800b430 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b40a:	695b      	ldr	r3, [r3, #20]
 800b40c:	69fa      	ldr	r2, [r7, #28]
 800b40e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b416:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b41a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	69fa      	ldr	r2, [r7, #28]
 800b426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b42a:	f043 030b 	orr.w	r3, r3, #11
 800b42e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	69fa      	ldr	r2, [r7, #28]
 800b43a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b43e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b442:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6818      	ldr	r0, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b454:	461a      	mov	r2, r3
 800b456:	f005 f8e9 	bl	801062c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	695a      	ldr	r2, [r3, #20]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4618      	mov	r0, r3
 800b470:	f005 f818 	bl	80104a4 <USB_ReadInterrupts>
 800b474:	4603      	mov	r3, r0
 800b476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b47a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b47e:	d124      	bne.n	800b4ca <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4618      	mov	r0, r3
 800b486:	f005 f8ae 	bl	80105e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4618      	mov	r0, r3
 800b490:	f004 f863 	bl	800f55a <USB_GetDevSpeed>
 800b494:	4603      	mov	r3, r0
 800b496:	461a      	mov	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681c      	ldr	r4, [r3, #0]
 800b4a0:	f001 fa02 	bl	800c8a8 <HAL_RCC_GetHCLKFreq>
 800b4a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f003 fd62 	bl	800ef78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f007 fdc0 	bl	801303a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	695a      	ldr	r2, [r3, #20]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b4c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f004 ffe8 	bl	80104a4 <USB_ReadInterrupts>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	f003 0308 	and.w	r3, r3, #8
 800b4da:	2b08      	cmp	r3, #8
 800b4dc:	d10a      	bne.n	800b4f4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f007 fd9d 	bl	801301e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	695a      	ldr	r2, [r3, #20]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f002 0208 	and.w	r2, r2, #8
 800b4f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f004 ffd3 	bl	80104a4 <USB_ReadInterrupts>
 800b4fe:	4603      	mov	r3, r0
 800b500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b504:	2b80      	cmp	r3, #128	; 0x80
 800b506:	d122      	bne.n	800b54e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b508:	6a3b      	ldr	r3, [r7, #32]
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b514:	2301      	movs	r3, #1
 800b516:	627b      	str	r3, [r7, #36]	; 0x24
 800b518:	e014      	b.n	800b544 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b51a:	6879      	ldr	r1, [r7, #4]
 800b51c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b51e:	4613      	mov	r3, r2
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	4413      	add	r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	440b      	add	r3, r1
 800b528:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d105      	bne.n	800b53e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	b2db      	uxtb	r3, r3
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fb27 	bl	800bb8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b540:	3301      	adds	r3, #1
 800b542:	627b      	str	r3, [r7, #36]	; 0x24
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d3e5      	bcc.n	800b51a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4618      	mov	r0, r3
 800b554:	f004 ffa6 	bl	80104a4 <USB_ReadInterrupts>
 800b558:	4603      	mov	r3, r0
 800b55a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b55e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b562:	d13b      	bne.n	800b5dc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b564:	2301      	movs	r3, #1
 800b566:	627b      	str	r3, [r7, #36]	; 0x24
 800b568:	e02b      	b.n	800b5c2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56c:	015a      	lsls	r2, r3, #5
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	4413      	add	r3, r2
 800b572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b57a:	6879      	ldr	r1, [r7, #4]
 800b57c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b57e:	4613      	mov	r3, r2
 800b580:	00db      	lsls	r3, r3, #3
 800b582:	4413      	add	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	440b      	add	r3, r1
 800b588:	3340      	adds	r3, #64	; 0x40
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d115      	bne.n	800b5bc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b590:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b592:	2b00      	cmp	r3, #0
 800b594:	da12      	bge.n	800b5bc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b596:	6879      	ldr	r1, [r7, #4]
 800b598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b59a:	4613      	mov	r3, r2
 800b59c:	00db      	lsls	r3, r3, #3
 800b59e:	4413      	add	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	440b      	add	r3, r1
 800b5a4:	333f      	adds	r3, #63	; 0x3f
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fae8 	bl	800bb8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	3301      	adds	r3, #1
 800b5c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d3ce      	bcc.n	800b56a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	695a      	ldr	r2, [r3, #20]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b5da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f004 ff5f 	bl	80104a4 <USB_ReadInterrupts>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5f0:	d155      	bne.n	800b69e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	627b      	str	r3, [r7, #36]	; 0x24
 800b5f6:	e045      	b.n	800b684 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fa:	015a      	lsls	r2, r3, #5
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	4413      	add	r3, r2
 800b600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b608:	6879      	ldr	r1, [r7, #4]
 800b60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b60c:	4613      	mov	r3, r2
 800b60e:	00db      	lsls	r3, r3, #3
 800b610:	4413      	add	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	440b      	add	r3, r1
 800b616:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d12e      	bne.n	800b67e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b620:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b622:	2b00      	cmp	r3, #0
 800b624:	da2b      	bge.n	800b67e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800b632:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b636:	429a      	cmp	r2, r3
 800b638:	d121      	bne.n	800b67e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b63a:	6879      	ldr	r1, [r7, #4]
 800b63c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b63e:	4613      	mov	r3, r2
 800b640:	00db      	lsls	r3, r3, #3
 800b642:	4413      	add	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	440b      	add	r3, r1
 800b648:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b64c:	2201      	movs	r2, #1
 800b64e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	699b      	ldr	r3, [r3, #24]
 800b654:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	695b      	ldr	r3, [r3, #20]
 800b660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10a      	bne.n	800b67e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	69fa      	ldr	r2, [r7, #28]
 800b672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b67a:	6053      	str	r3, [r2, #4]
            break;
 800b67c:	e007      	b.n	800b68e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b680:	3301      	adds	r3, #1
 800b682:	627b      	str	r3, [r7, #36]	; 0x24
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d3b4      	bcc.n	800b5f8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	695a      	ldr	r2, [r3, #20]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b69c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f004 fefe 	bl	80104a4 <USB_ReadInterrupts>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b2:	d10a      	bne.n	800b6ca <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f007 fd41 	bl	801313c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	695a      	ldr	r2, [r3, #20]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b6c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f004 fee8 	bl	80104a4 <USB_ReadInterrupts>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	f003 0304 	and.w	r3, r3, #4
 800b6da:	2b04      	cmp	r3, #4
 800b6dc:	d115      	bne.n	800b70a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	f003 0304 	and.w	r3, r3, #4
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d002      	beq.n	800b6f6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f007 fd31 	bl	8013158 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6859      	ldr	r1, [r3, #4]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	430a      	orrs	r2, r1
 800b704:	605a      	str	r2, [r3, #4]
 800b706:	e000      	b.n	800b70a <HAL_PCD_IRQHandler+0x938>
      return;
 800b708:	bf00      	nop
    }
  }
}
 800b70a:	3734      	adds	r7, #52	; 0x34
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd90      	pop	{r4, r7, pc}

0800b710 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b722:	2b01      	cmp	r3, #1
 800b724:	d101      	bne.n	800b72a <HAL_PCD_SetAddress+0x1a>
 800b726:	2302      	movs	r3, #2
 800b728:	e013      	b.n	800b752 <HAL_PCD_SetAddress+0x42>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2201      	movs	r2, #1
 800b72e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	78fa      	ldrb	r2, [r7, #3]
 800b736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	78fa      	ldrb	r2, [r7, #3]
 800b740:	4611      	mov	r1, r2
 800b742:	4618      	mov	r0, r3
 800b744:	f004 fe46 	bl	80103d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b084      	sub	sp, #16
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
 800b762:	4608      	mov	r0, r1
 800b764:	4611      	mov	r1, r2
 800b766:	461a      	mov	r2, r3
 800b768:	4603      	mov	r3, r0
 800b76a:	70fb      	strb	r3, [r7, #3]
 800b76c:	460b      	mov	r3, r1
 800b76e:	803b      	strh	r3, [r7, #0]
 800b770:	4613      	mov	r3, r2
 800b772:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	da0f      	bge.n	800b7a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b780:	78fb      	ldrb	r3, [r7, #3]
 800b782:	f003 020f 	and.w	r2, r3, #15
 800b786:	4613      	mov	r3, r2
 800b788:	00db      	lsls	r3, r3, #3
 800b78a:	4413      	add	r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	3338      	adds	r3, #56	; 0x38
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	4413      	add	r3, r2
 800b794:	3304      	adds	r3, #4
 800b796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2201      	movs	r2, #1
 800b79c:	705a      	strb	r2, [r3, #1]
 800b79e:	e00f      	b.n	800b7c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7a0:	78fb      	ldrb	r3, [r7, #3]
 800b7a2:	f003 020f 	and.w	r2, r3, #15
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	00db      	lsls	r3, r3, #3
 800b7aa:	4413      	add	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b7c0:	78fb      	ldrb	r3, [r7, #3]
 800b7c2:	f003 030f 	and.w	r3, r3, #15
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b7cc:	883a      	ldrh	r2, [r7, #0]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	78ba      	ldrb	r2, [r7, #2]
 800b7d6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	785b      	ldrb	r3, [r3, #1]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d004      	beq.n	800b7ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b7ea:	78bb      	ldrb	r3, [r7, #2]
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d102      	bne.n	800b7f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d101      	bne.n	800b804 <HAL_PCD_EP_Open+0xaa>
 800b800:	2302      	movs	r3, #2
 800b802:	e00e      	b.n	800b822 <HAL_PCD_EP_Open+0xc8>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68f9      	ldr	r1, [r7, #12]
 800b812:	4618      	mov	r0, r3
 800b814:	f003 fec6 	bl	800f5a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800b820:	7afb      	ldrb	r3, [r7, #11]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b084      	sub	sp, #16
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	460b      	mov	r3, r1
 800b834:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	da0f      	bge.n	800b85e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b83e:	78fb      	ldrb	r3, [r7, #3]
 800b840:	f003 020f 	and.w	r2, r3, #15
 800b844:	4613      	mov	r3, r2
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	4413      	add	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	3338      	adds	r3, #56	; 0x38
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	4413      	add	r3, r2
 800b852:	3304      	adds	r3, #4
 800b854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	705a      	strb	r2, [r3, #1]
 800b85c:	e00f      	b.n	800b87e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b85e:	78fb      	ldrb	r3, [r7, #3]
 800b860:	f003 020f 	and.w	r2, r3, #15
 800b864:	4613      	mov	r3, r2
 800b866:	00db      	lsls	r3, r3, #3
 800b868:	4413      	add	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	4413      	add	r3, r2
 800b874:	3304      	adds	r3, #4
 800b876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b87e:	78fb      	ldrb	r3, [r7, #3]
 800b880:	f003 030f 	and.w	r3, r3, #15
 800b884:	b2da      	uxtb	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b890:	2b01      	cmp	r3, #1
 800b892:	d101      	bne.n	800b898 <HAL_PCD_EP_Close+0x6e>
 800b894:	2302      	movs	r3, #2
 800b896:	e00e      	b.n	800b8b6 <HAL_PCD_EP_Close+0x8c>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	68f9      	ldr	r1, [r7, #12]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f003 ff04 	bl	800f6b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b086      	sub	sp, #24
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	60f8      	str	r0, [r7, #12]
 800b8c6:	607a      	str	r2, [r7, #4]
 800b8c8:	603b      	str	r3, [r7, #0]
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8ce:	7afb      	ldrb	r3, [r7, #11]
 800b8d0:	f003 020f 	and.w	r2, r3, #15
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	00db      	lsls	r3, r3, #3
 800b8d8:	4413      	add	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b900:	7afb      	ldrb	r3, [r7, #11]
 800b902:	f003 030f 	and.w	r3, r3, #15
 800b906:	b2da      	uxtb	r2, r3
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d102      	bne.n	800b91a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b91a:	7afb      	ldrb	r3, [r7, #11]
 800b91c:	f003 030f 	and.w	r3, r3, #15
 800b920:	2b00      	cmp	r3, #0
 800b922:	d109      	bne.n	800b938 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6818      	ldr	r0, [r3, #0]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	691b      	ldr	r3, [r3, #16]
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	461a      	mov	r2, r3
 800b930:	6979      	ldr	r1, [r7, #20]
 800b932:	f004 f9e3 	bl	800fcfc <USB_EP0StartXfer>
 800b936:	e008      	b.n	800b94a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6818      	ldr	r0, [r3, #0]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	b2db      	uxtb	r3, r3
 800b942:	461a      	mov	r2, r3
 800b944:	6979      	ldr	r1, [r7, #20]
 800b946:	f003 ff91 	bl	800f86c <USB_EPStartXfer>
  }

  return HAL_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	460b      	mov	r3, r1
 800b95e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b960:	78fb      	ldrb	r3, [r7, #3]
 800b962:	f003 020f 	and.w	r2, r3, #15
 800b966:	6879      	ldr	r1, [r7, #4]
 800b968:	4613      	mov	r3, r2
 800b96a:	00db      	lsls	r3, r3, #3
 800b96c:	4413      	add	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	440b      	add	r3, r1
 800b972:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800b976:	681b      	ldr	r3, [r3, #0]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	607a      	str	r2, [r7, #4]
 800b98e:	603b      	str	r3, [r7, #0]
 800b990:	460b      	mov	r3, r1
 800b992:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b994:	7afb      	ldrb	r3, [r7, #11]
 800b996:	f003 020f 	and.w	r2, r3, #15
 800b99a:	4613      	mov	r3, r2
 800b99c:	00db      	lsls	r3, r3, #3
 800b99e:	4413      	add	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	3338      	adds	r3, #56	; 0x38
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9c4:	7afb      	ldrb	r3, [r7, #11]
 800b9c6:	f003 030f 	and.w	r3, r3, #15
 800b9ca:	b2da      	uxtb	r2, r3
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d102      	bne.n	800b9de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b9de:	7afb      	ldrb	r3, [r7, #11]
 800b9e0:	f003 030f 	and.w	r3, r3, #15
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d109      	bne.n	800b9fc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6818      	ldr	r0, [r3, #0]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	6979      	ldr	r1, [r7, #20]
 800b9f6:	f004 f981 	bl	800fcfc <USB_EP0StartXfer>
 800b9fa:	e008      	b.n	800ba0e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6818      	ldr	r0, [r3, #0]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	461a      	mov	r2, r3
 800ba08:	6979      	ldr	r1, [r7, #20]
 800ba0a:	f003 ff2f 	bl	800f86c <USB_EPStartXfer>
  }

  return HAL_OK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3718      	adds	r7, #24
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	460b      	mov	r3, r1
 800ba22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ba24:	78fb      	ldrb	r3, [r7, #3]
 800ba26:	f003 020f 	and.w	r2, r3, #15
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d901      	bls.n	800ba36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e050      	b.n	800bad8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ba36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	da0f      	bge.n	800ba5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba3e:	78fb      	ldrb	r3, [r7, #3]
 800ba40:	f003 020f 	and.w	r2, r3, #15
 800ba44:	4613      	mov	r3, r2
 800ba46:	00db      	lsls	r3, r3, #3
 800ba48:	4413      	add	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	3338      	adds	r3, #56	; 0x38
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	4413      	add	r3, r2
 800ba52:	3304      	adds	r3, #4
 800ba54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	705a      	strb	r2, [r3, #1]
 800ba5c:	e00d      	b.n	800ba7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ba5e:	78fa      	ldrb	r2, [r7, #3]
 800ba60:	4613      	mov	r3, r2
 800ba62:	00db      	lsls	r3, r3, #3
 800ba64:	4413      	add	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	4413      	add	r3, r2
 800ba70:	3304      	adds	r3, #4
 800ba72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	f003 030f 	and.w	r3, r3, #15
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d101      	bne.n	800ba9a <HAL_PCD_EP_SetStall+0x82>
 800ba96:	2302      	movs	r3, #2
 800ba98:	e01e      	b.n	800bad8 <HAL_PCD_EP_SetStall+0xc0>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68f9      	ldr	r1, [r7, #12]
 800baa8:	4618      	mov	r0, r3
 800baaa:	f004 fbbf 	bl	801022c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800baae:	78fb      	ldrb	r3, [r7, #3]
 800bab0:	f003 030f 	and.w	r3, r3, #15
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10a      	bne.n	800bace <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6818      	ldr	r0, [r3, #0]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	b2d9      	uxtb	r1, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bac8:	461a      	mov	r2, r3
 800baca:	f004 fdaf 	bl	801062c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	460b      	mov	r3, r1
 800baea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800baec:	78fb      	ldrb	r3, [r7, #3]
 800baee:	f003 020f 	and.w	r2, r3, #15
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d901      	bls.n	800bafe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bafa:	2301      	movs	r3, #1
 800bafc:	e042      	b.n	800bb84 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bafe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	da0f      	bge.n	800bb26 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb06:	78fb      	ldrb	r3, [r7, #3]
 800bb08:	f003 020f 	and.w	r2, r3, #15
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	00db      	lsls	r3, r3, #3
 800bb10:	4413      	add	r3, r2
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	3338      	adds	r3, #56	; 0x38
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	4413      	add	r3, r2
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2201      	movs	r2, #1
 800bb22:	705a      	strb	r2, [r3, #1]
 800bb24:	e00f      	b.n	800bb46 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb26:	78fb      	ldrb	r3, [r7, #3]
 800bb28:	f003 020f 	and.w	r2, r3, #15
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	00db      	lsls	r3, r3, #3
 800bb30:	4413      	add	r3, r2
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb4c:	78fb      	ldrb	r3, [r7, #3]
 800bb4e:	f003 030f 	and.w	r3, r3, #15
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d101      	bne.n	800bb66 <HAL_PCD_EP_ClrStall+0x86>
 800bb62:	2302      	movs	r3, #2
 800bb64:	e00e      	b.n	800bb84 <HAL_PCD_EP_ClrStall+0xa4>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68f9      	ldr	r1, [r7, #12]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f004 fbc7 	bl	8010308 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	460b      	mov	r3, r1
 800bb96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bb98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	da0c      	bge.n	800bbba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bba0:	78fb      	ldrb	r3, [r7, #3]
 800bba2:	f003 020f 	and.w	r2, r3, #15
 800bba6:	4613      	mov	r3, r2
 800bba8:	00db      	lsls	r3, r3, #3
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	3338      	adds	r3, #56	; 0x38
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	60fb      	str	r3, [r7, #12]
 800bbb8:	e00c      	b.n	800bbd4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bbba:	78fb      	ldrb	r3, [r7, #3]
 800bbbc:	f003 020f 	and.w	r2, r3, #15
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	4413      	add	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	4413      	add	r3, r2
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68f9      	ldr	r1, [r7, #12]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f004 f9e6 	bl	800ffac <USB_EPStopXfer>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	72fb      	strb	r3, [r7, #11]

  return ret;
 800bbe4:	7afb      	ldrb	r3, [r7, #11]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b08a      	sub	sp, #40	; 0x28
 800bbf2:	af02      	add	r7, sp, #8
 800bbf4:	6078      	str	r0, [r7, #4]
 800bbf6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bc02:	683a      	ldr	r2, [r7, #0]
 800bc04:	4613      	mov	r3, r2
 800bc06:	00db      	lsls	r3, r3, #3
 800bc08:	4413      	add	r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	3338      	adds	r3, #56	; 0x38
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	4413      	add	r3, r2
 800bc12:	3304      	adds	r3, #4
 800bc14:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6a1a      	ldr	r2, [r3, #32]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d901      	bls.n	800bc26 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	e06c      	b.n	800bd00 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	699a      	ldr	r2, [r3, #24]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	69fa      	ldr	r2, [r7, #28]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d902      	bls.n	800bc42 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	3303      	adds	r3, #3
 800bc46:	089b      	lsrs	r3, r3, #2
 800bc48:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bc4a:	e02b      	b.n	800bca4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	699a      	ldr	r2, [r3, #24]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6a1b      	ldr	r3, [r3, #32]
 800bc54:	1ad3      	subs	r3, r2, r3
 800bc56:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	69fa      	ldr	r2, [r7, #28]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d902      	bls.n	800bc68 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	3303      	adds	r3, #3
 800bc6c:	089b      	lsrs	r3, r3, #2
 800bc6e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6919      	ldr	r1, [r3, #16]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	4603      	mov	r3, r0
 800bc86:	6978      	ldr	r0, [r7, #20]
 800bc88:	f004 fa3a 	bl	8010100 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	691a      	ldr	r2, [r3, #16]
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	441a      	add	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6a1a      	ldr	r2, [r3, #32]
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	441a      	add	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	015a      	lsls	r2, r3, #5
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	4413      	add	r3, r2
 800bcac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb0:	699b      	ldr	r3, [r3, #24]
 800bcb2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bcb4:	69ba      	ldr	r2, [r7, #24]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d809      	bhi.n	800bcce <PCD_WriteEmptyTxFifo+0xe0>
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6a1a      	ldr	r2, [r3, #32]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d203      	bcs.n	800bcce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	699b      	ldr	r3, [r3, #24]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1be      	bne.n	800bc4c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	699a      	ldr	r2, [r3, #24]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d811      	bhi.n	800bcfe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	f003 030f 	and.w	r3, r3, #15
 800bce0:	2201      	movs	r2, #1
 800bce2:	fa02 f303 	lsl.w	r3, r2, r3
 800bce6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	43db      	mvns	r3, r3
 800bcf4:	6939      	ldr	r1, [r7, #16]
 800bcf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3720      	adds	r7, #32
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b088      	sub	sp, #32
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	333c      	adds	r3, #60	; 0x3c
 800bd20:	3304      	adds	r3, #4
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	015a      	lsls	r2, r3, #5
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d17b      	bne.n	800be36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	f003 0308 	and.w	r3, r3, #8
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d015      	beq.n	800bd74 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	4a61      	ldr	r2, [pc, #388]	; (800bed0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	f240 80b9 	bls.w	800bec4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f000 80b3 	beq.w	800bec4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd70:	6093      	str	r3, [r2, #8]
 800bd72:	e0a7      	b.n	800bec4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	f003 0320 	and.w	r3, r3, #32
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d009      	beq.n	800bd92 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	015a      	lsls	r2, r3, #5
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	4413      	add	r3, r2
 800bd86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	2320      	movs	r3, #32
 800bd8e:	6093      	str	r3, [r2, #8]
 800bd90:	e098      	b.n	800bec4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f040 8093 	bne.w	800bec4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	4a4b      	ldr	r2, [pc, #300]	; (800bed0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d90f      	bls.n	800bdc6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00a      	beq.n	800bdc6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	015a      	lsls	r2, r3, #5
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdc2:	6093      	str	r3, [r2, #8]
 800bdc4:	e07e      	b.n	800bec4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	00db      	lsls	r3, r3, #3
 800bdcc:	4413      	add	r3, r2
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	3304      	adds	r3, #4
 800bdda:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	69da      	ldr	r2, [r3, #28]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	0159      	lsls	r1, r3, #5
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	440b      	add	r3, r1
 800bde8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdf2:	1ad2      	subs	r2, r2, r3
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d114      	bne.n	800be28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d109      	bne.n	800be1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800be10:	461a      	mov	r2, r3
 800be12:	2101      	movs	r1, #1
 800be14:	f004 fc0a 	bl	801062c <USB_EP0_OutStart>
 800be18:	e006      	b.n	800be28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	691a      	ldr	r2, [r3, #16]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	441a      	add	r2, r3
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	4619      	mov	r1, r3
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f007 f8c0 	bl	8012fb4 <HAL_PCD_DataOutStageCallback>
 800be34:	e046      	b.n	800bec4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	4a26      	ldr	r2, [pc, #152]	; (800bed4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d124      	bne.n	800be88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00a      	beq.n	800be5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	015a      	lsls	r2, r3, #5
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	4413      	add	r3, r2
 800be50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be54:	461a      	mov	r2, r3
 800be56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be5a:	6093      	str	r3, [r2, #8]
 800be5c:	e032      	b.n	800bec4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	f003 0320 	and.w	r3, r3, #32
 800be64:	2b00      	cmp	r3, #0
 800be66:	d008      	beq.n	800be7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	015a      	lsls	r2, r3, #5
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	4413      	add	r3, r2
 800be70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be74:	461a      	mov	r2, r3
 800be76:	2320      	movs	r3, #32
 800be78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	4619      	mov	r1, r3
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f007 f897 	bl	8012fb4 <HAL_PCD_DataOutStageCallback>
 800be86:	e01d      	b.n	800bec4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d114      	bne.n	800beb8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800be8e:	6879      	ldr	r1, [r7, #4]
 800be90:	683a      	ldr	r2, [r7, #0]
 800be92:	4613      	mov	r3, r2
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	440b      	add	r3, r1
 800be9c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d108      	bne.n	800beb8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6818      	ldr	r0, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800beb0:	461a      	mov	r2, r3
 800beb2:	2100      	movs	r1, #0
 800beb4:	f004 fbba 	bl	801062c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	4619      	mov	r1, r3
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f007 f878 	bl	8012fb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bec4:	2300      	movs	r3, #0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3720      	adds	r7, #32
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	4f54300a 	.word	0x4f54300a
 800bed4:	4f54310a 	.word	0x4f54310a

0800bed8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b086      	sub	sp, #24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	333c      	adds	r3, #60	; 0x3c
 800bef0:	3304      	adds	r3, #4
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	015a      	lsls	r2, r3, #5
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	4413      	add	r3, r2
 800befe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	4a15      	ldr	r2, [pc, #84]	; (800bf60 <PCD_EP_OutSetupPacket_int+0x88>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d90e      	bls.n	800bf2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d009      	beq.n	800bf2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	015a      	lsls	r2, r3, #5
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	4413      	add	r3, r2
 800bf20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf24:	461a      	mov	r2, r3
 800bf26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f007 f82f 	bl	8012f90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	4a0a      	ldr	r2, [pc, #40]	; (800bf60 <PCD_EP_OutSetupPacket_int+0x88>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d90c      	bls.n	800bf54 <PCD_EP_OutSetupPacket_int+0x7c>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d108      	bne.n	800bf54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6818      	ldr	r0, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	2101      	movs	r1, #1
 800bf50:	f004 fb6c 	bl	801062c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3718      	adds	r7, #24
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	4f54300a 	.word	0x4f54300a

0800bf64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	70fb      	strb	r3, [r7, #3]
 800bf70:	4613      	mov	r3, r2
 800bf72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bf7c:	78fb      	ldrb	r3, [r7, #3]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d107      	bne.n	800bf92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bf82:	883b      	ldrh	r3, [r7, #0]
 800bf84:	0419      	lsls	r1, r3, #16
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	430a      	orrs	r2, r1
 800bf8e:	629a      	str	r2, [r3, #40]	; 0x28
 800bf90:	e028      	b.n	800bfe4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf98:	0c1b      	lsrs	r3, r3, #16
 800bf9a:	68ba      	ldr	r2, [r7, #8]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	73fb      	strb	r3, [r7, #15]
 800bfa4:	e00d      	b.n	800bfc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	7bfb      	ldrb	r3, [r7, #15]
 800bfac:	3340      	adds	r3, #64	; 0x40
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	4413      	add	r3, r2
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	0c1b      	lsrs	r3, r3, #16
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	4413      	add	r3, r2
 800bfba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bfbc:	7bfb      	ldrb	r3, [r7, #15]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	73fb      	strb	r3, [r7, #15]
 800bfc2:	7bfa      	ldrb	r2, [r7, #15]
 800bfc4:	78fb      	ldrb	r3, [r7, #3]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d3ec      	bcc.n	800bfa6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bfcc:	883b      	ldrh	r3, [r7, #0]
 800bfce:	0418      	lsls	r0, r3, #16
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6819      	ldr	r1, [r3, #0]
 800bfd4:	78fb      	ldrb	r3, [r7, #3]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	4302      	orrs	r2, r0
 800bfdc:	3340      	adds	r3, #64	; 0x40
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	440b      	add	r3, r1
 800bfe2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3714      	adds	r7, #20
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr

0800bff2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bff2:	b480      	push	{r7}
 800bff4:	b083      	sub	sp, #12
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	460b      	mov	r3, r1
 800bffc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	887a      	ldrh	r2, [r7, #2]
 800c004:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	460b      	mov	r3, r1
 800c01e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c020:	bf00      	nop
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800c030:	4b06      	ldr	r3, [pc, #24]	; (800c04c <HAL_PWR_PVD_IRQHandler+0x20>)
 800c032:	695b      	ldr	r3, [r3, #20]
 800c034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d005      	beq.n	800c048 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800c03c:	f000 f808 	bl	800c050 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800c040:	4b02      	ldr	r3, [pc, #8]	; (800c04c <HAL_PWR_PVD_IRQHandler+0x20>)
 800c042:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c046:	615a      	str	r2, [r3, #20]
  }
}
 800c048:	bf00      	nop
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	40013c00 	.word	0x40013c00

0800c050 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800c050:	b480      	push	{r7}
 800c052:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800c054:	bf00      	nop
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr
	...

0800c060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
 800c070:	e267      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 0301 	and.w	r3, r3, #1
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d075      	beq.n	800c16a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c07e:	4b88      	ldr	r3, [pc, #544]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	f003 030c 	and.w	r3, r3, #12
 800c086:	2b04      	cmp	r3, #4
 800c088:	d00c      	beq.n	800c0a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c08a:	4b85      	ldr	r3, [pc, #532]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c092:	2b08      	cmp	r3, #8
 800c094:	d112      	bne.n	800c0bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c096:	4b82      	ldr	r3, [pc, #520]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c09e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0a2:	d10b      	bne.n	800c0bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c0a4:	4b7e      	ldr	r3, [pc, #504]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d05b      	beq.n	800c168 <HAL_RCC_OscConfig+0x108>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d157      	bne.n	800c168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e242      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0c4:	d106      	bne.n	800c0d4 <HAL_RCC_OscConfig+0x74>
 800c0c6:	4b76      	ldr	r3, [pc, #472]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a75      	ldr	r2, [pc, #468]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c0cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0d0:	6013      	str	r3, [r2, #0]
 800c0d2:	e01d      	b.n	800c110 <HAL_RCC_OscConfig+0xb0>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0dc:	d10c      	bne.n	800c0f8 <HAL_RCC_OscConfig+0x98>
 800c0de:	4b70      	ldr	r3, [pc, #448]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a6f      	ldr	r2, [pc, #444]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c0e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c0e8:	6013      	str	r3, [r2, #0]
 800c0ea:	4b6d      	ldr	r3, [pc, #436]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a6c      	ldr	r2, [pc, #432]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c0f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0f4:	6013      	str	r3, [r2, #0]
 800c0f6:	e00b      	b.n	800c110 <HAL_RCC_OscConfig+0xb0>
 800c0f8:	4b69      	ldr	r3, [pc, #420]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a68      	ldr	r2, [pc, #416]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c0fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	4b66      	ldr	r3, [pc, #408]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a65      	ldr	r2, [pc, #404]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c10a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c10e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d013      	beq.n	800c140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c118:	f7fd fb2a 	bl	8009770 <HAL_GetTick>
 800c11c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c11e:	e008      	b.n	800c132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c120:	f7fd fb26 	bl	8009770 <HAL_GetTick>
 800c124:	4602      	mov	r2, r0
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	2b64      	cmp	r3, #100	; 0x64
 800c12c:	d901      	bls.n	800c132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c12e:	2303      	movs	r3, #3
 800c130:	e207      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c132:	4b5b      	ldr	r3, [pc, #364]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d0f0      	beq.n	800c120 <HAL_RCC_OscConfig+0xc0>
 800c13e:	e014      	b.n	800c16a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c140:	f7fd fb16 	bl	8009770 <HAL_GetTick>
 800c144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c146:	e008      	b.n	800c15a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c148:	f7fd fb12 	bl	8009770 <HAL_GetTick>
 800c14c:	4602      	mov	r2, r0
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	2b64      	cmp	r3, #100	; 0x64
 800c154:	d901      	bls.n	800c15a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e1f3      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c15a:	4b51      	ldr	r3, [pc, #324]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1f0      	bne.n	800c148 <HAL_RCC_OscConfig+0xe8>
 800c166:	e000      	b.n	800c16a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 0302 	and.w	r3, r3, #2
 800c172:	2b00      	cmp	r3, #0
 800c174:	d063      	beq.n	800c23e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c176:	4b4a      	ldr	r3, [pc, #296]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	f003 030c 	and.w	r3, r3, #12
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d00b      	beq.n	800c19a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c182:	4b47      	ldr	r3, [pc, #284]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c18a:	2b08      	cmp	r3, #8
 800c18c:	d11c      	bne.n	800c1c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c18e:	4b44      	ldr	r3, [pc, #272]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c196:	2b00      	cmp	r3, #0
 800c198:	d116      	bne.n	800c1c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c19a:	4b41      	ldr	r3, [pc, #260]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 0302 	and.w	r3, r3, #2
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d005      	beq.n	800c1b2 <HAL_RCC_OscConfig+0x152>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d001      	beq.n	800c1b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e1c7      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1b2:	4b3b      	ldr	r3, [pc, #236]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	00db      	lsls	r3, r3, #3
 800c1c0:	4937      	ldr	r1, [pc, #220]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c1c6:	e03a      	b.n	800c23e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d020      	beq.n	800c212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c1d0:	4b34      	ldr	r3, [pc, #208]	; (800c2a4 <HAL_RCC_OscConfig+0x244>)
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1d6:	f7fd facb 	bl	8009770 <HAL_GetTick>
 800c1da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1dc:	e008      	b.n	800c1f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c1de:	f7fd fac7 	bl	8009770 <HAL_GetTick>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d901      	bls.n	800c1f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e1a8      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1f0:	4b2b      	ldr	r3, [pc, #172]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 0302 	and.w	r3, r3, #2
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d0f0      	beq.n	800c1de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1fc:	4b28      	ldr	r3, [pc, #160]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	00db      	lsls	r3, r3, #3
 800c20a:	4925      	ldr	r1, [pc, #148]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c20c:	4313      	orrs	r3, r2
 800c20e:	600b      	str	r3, [r1, #0]
 800c210:	e015      	b.n	800c23e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c212:	4b24      	ldr	r3, [pc, #144]	; (800c2a4 <HAL_RCC_OscConfig+0x244>)
 800c214:	2200      	movs	r2, #0
 800c216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c218:	f7fd faaa 	bl	8009770 <HAL_GetTick>
 800c21c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c21e:	e008      	b.n	800c232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c220:	f7fd faa6 	bl	8009770 <HAL_GetTick>
 800c224:	4602      	mov	r2, r0
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d901      	bls.n	800c232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	e187      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c232:	4b1b      	ldr	r3, [pc, #108]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f003 0302 	and.w	r3, r3, #2
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1f0      	bne.n	800c220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f003 0308 	and.w	r3, r3, #8
 800c246:	2b00      	cmp	r3, #0
 800c248:	d036      	beq.n	800c2b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	695b      	ldr	r3, [r3, #20]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d016      	beq.n	800c280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c252:	4b15      	ldr	r3, [pc, #84]	; (800c2a8 <HAL_RCC_OscConfig+0x248>)
 800c254:	2201      	movs	r2, #1
 800c256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c258:	f7fd fa8a 	bl	8009770 <HAL_GetTick>
 800c25c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c25e:	e008      	b.n	800c272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c260:	f7fd fa86 	bl	8009770 <HAL_GetTick>
 800c264:	4602      	mov	r2, r0
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	2b02      	cmp	r3, #2
 800c26c:	d901      	bls.n	800c272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c26e:	2303      	movs	r3, #3
 800c270:	e167      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c272:	4b0b      	ldr	r3, [pc, #44]	; (800c2a0 <HAL_RCC_OscConfig+0x240>)
 800c274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c276:	f003 0302 	and.w	r3, r3, #2
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d0f0      	beq.n	800c260 <HAL_RCC_OscConfig+0x200>
 800c27e:	e01b      	b.n	800c2b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c280:	4b09      	ldr	r3, [pc, #36]	; (800c2a8 <HAL_RCC_OscConfig+0x248>)
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c286:	f7fd fa73 	bl	8009770 <HAL_GetTick>
 800c28a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c28c:	e00e      	b.n	800c2ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c28e:	f7fd fa6f 	bl	8009770 <HAL_GetTick>
 800c292:	4602      	mov	r2, r0
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	1ad3      	subs	r3, r2, r3
 800c298:	2b02      	cmp	r3, #2
 800c29a:	d907      	bls.n	800c2ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c29c:	2303      	movs	r3, #3
 800c29e:	e150      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
 800c2a0:	40023800 	.word	0x40023800
 800c2a4:	42470000 	.word	0x42470000
 800c2a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c2ac:	4b88      	ldr	r3, [pc, #544]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c2ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2b0:	f003 0302 	and.w	r3, r3, #2
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1ea      	bne.n	800c28e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 0304 	and.w	r3, r3, #4
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f000 8097 	beq.w	800c3f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c2ca:	4b81      	ldr	r3, [pc, #516]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10f      	bne.n	800c2f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60bb      	str	r3, [r7, #8]
 800c2da:	4b7d      	ldr	r3, [pc, #500]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2de:	4a7c      	ldr	r2, [pc, #496]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c2e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2e4:	6413      	str	r3, [r2, #64]	; 0x40
 800c2e6:	4b7a      	ldr	r3, [pc, #488]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2ee:	60bb      	str	r3, [r7, #8]
 800c2f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c2f6:	4b77      	ldr	r3, [pc, #476]	; (800c4d4 <HAL_RCC_OscConfig+0x474>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d118      	bne.n	800c334 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c302:	4b74      	ldr	r3, [pc, #464]	; (800c4d4 <HAL_RCC_OscConfig+0x474>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a73      	ldr	r2, [pc, #460]	; (800c4d4 <HAL_RCC_OscConfig+0x474>)
 800c308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c30c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c30e:	f7fd fa2f 	bl	8009770 <HAL_GetTick>
 800c312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c314:	e008      	b.n	800c328 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c316:	f7fd fa2b 	bl	8009770 <HAL_GetTick>
 800c31a:	4602      	mov	r2, r0
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	2b02      	cmp	r3, #2
 800c322:	d901      	bls.n	800c328 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c324:	2303      	movs	r3, #3
 800c326:	e10c      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c328:	4b6a      	ldr	r3, [pc, #424]	; (800c4d4 <HAL_RCC_OscConfig+0x474>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c330:	2b00      	cmp	r3, #0
 800c332:	d0f0      	beq.n	800c316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d106      	bne.n	800c34a <HAL_RCC_OscConfig+0x2ea>
 800c33c:	4b64      	ldr	r3, [pc, #400]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c33e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c340:	4a63      	ldr	r2, [pc, #396]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c342:	f043 0301 	orr.w	r3, r3, #1
 800c346:	6713      	str	r3, [r2, #112]	; 0x70
 800c348:	e01c      	b.n	800c384 <HAL_RCC_OscConfig+0x324>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	2b05      	cmp	r3, #5
 800c350:	d10c      	bne.n	800c36c <HAL_RCC_OscConfig+0x30c>
 800c352:	4b5f      	ldr	r3, [pc, #380]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c356:	4a5e      	ldr	r2, [pc, #376]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c358:	f043 0304 	orr.w	r3, r3, #4
 800c35c:	6713      	str	r3, [r2, #112]	; 0x70
 800c35e:	4b5c      	ldr	r3, [pc, #368]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c362:	4a5b      	ldr	r2, [pc, #364]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c364:	f043 0301 	orr.w	r3, r3, #1
 800c368:	6713      	str	r3, [r2, #112]	; 0x70
 800c36a:	e00b      	b.n	800c384 <HAL_RCC_OscConfig+0x324>
 800c36c:	4b58      	ldr	r3, [pc, #352]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c36e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c370:	4a57      	ldr	r2, [pc, #348]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c372:	f023 0301 	bic.w	r3, r3, #1
 800c376:	6713      	str	r3, [r2, #112]	; 0x70
 800c378:	4b55      	ldr	r3, [pc, #340]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c37c:	4a54      	ldr	r2, [pc, #336]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c37e:	f023 0304 	bic.w	r3, r3, #4
 800c382:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	689b      	ldr	r3, [r3, #8]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d015      	beq.n	800c3b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c38c:	f7fd f9f0 	bl	8009770 <HAL_GetTick>
 800c390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c392:	e00a      	b.n	800c3aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c394:	f7fd f9ec 	bl	8009770 <HAL_GetTick>
 800c398:	4602      	mov	r2, r0
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d901      	bls.n	800c3aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e0cb      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3aa:	4b49      	ldr	r3, [pc, #292]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ae:	f003 0302 	and.w	r3, r3, #2
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d0ee      	beq.n	800c394 <HAL_RCC_OscConfig+0x334>
 800c3b6:	e014      	b.n	800c3e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c3b8:	f7fd f9da 	bl	8009770 <HAL_GetTick>
 800c3bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c3be:	e00a      	b.n	800c3d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c3c0:	f7fd f9d6 	bl	8009770 <HAL_GetTick>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d901      	bls.n	800c3d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c3d2:	2303      	movs	r3, #3
 800c3d4:	e0b5      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c3d6:	4b3e      	ldr	r3, [pc, #248]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3da:	f003 0302 	and.w	r3, r3, #2
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1ee      	bne.n	800c3c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d105      	bne.n	800c3f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c3e8:	4b39      	ldr	r3, [pc, #228]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ec:	4a38      	ldr	r2, [pc, #224]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c3ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f000 80a1 	beq.w	800c540 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c3fe:	4b34      	ldr	r3, [pc, #208]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	f003 030c 	and.w	r3, r3, #12
 800c406:	2b08      	cmp	r3, #8
 800c408:	d05c      	beq.n	800c4c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	699b      	ldr	r3, [r3, #24]
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d141      	bne.n	800c496 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c412:	4b31      	ldr	r3, [pc, #196]	; (800c4d8 <HAL_RCC_OscConfig+0x478>)
 800c414:	2200      	movs	r2, #0
 800c416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c418:	f7fd f9aa 	bl	8009770 <HAL_GetTick>
 800c41c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c41e:	e008      	b.n	800c432 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c420:	f7fd f9a6 	bl	8009770 <HAL_GetTick>
 800c424:	4602      	mov	r2, r0
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d901      	bls.n	800c432 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c42e:	2303      	movs	r3, #3
 800c430:	e087      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c432:	4b27      	ldr	r3, [pc, #156]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1f0      	bne.n	800c420 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	69da      	ldr	r2, [r3, #28]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	431a      	orrs	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c44c:	019b      	lsls	r3, r3, #6
 800c44e:	431a      	orrs	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c454:	085b      	lsrs	r3, r3, #1
 800c456:	3b01      	subs	r3, #1
 800c458:	041b      	lsls	r3, r3, #16
 800c45a:	431a      	orrs	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c460:	061b      	lsls	r3, r3, #24
 800c462:	491b      	ldr	r1, [pc, #108]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c464:	4313      	orrs	r3, r2
 800c466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c468:	4b1b      	ldr	r3, [pc, #108]	; (800c4d8 <HAL_RCC_OscConfig+0x478>)
 800c46a:	2201      	movs	r2, #1
 800c46c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c46e:	f7fd f97f 	bl	8009770 <HAL_GetTick>
 800c472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c474:	e008      	b.n	800c488 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c476:	f7fd f97b 	bl	8009770 <HAL_GetTick>
 800c47a:	4602      	mov	r2, r0
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	1ad3      	subs	r3, r2, r3
 800c480:	2b02      	cmp	r3, #2
 800c482:	d901      	bls.n	800c488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c484:	2303      	movs	r3, #3
 800c486:	e05c      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c488:	4b11      	ldr	r3, [pc, #68]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d0f0      	beq.n	800c476 <HAL_RCC_OscConfig+0x416>
 800c494:	e054      	b.n	800c540 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c496:	4b10      	ldr	r3, [pc, #64]	; (800c4d8 <HAL_RCC_OscConfig+0x478>)
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c49c:	f7fd f968 	bl	8009770 <HAL_GetTick>
 800c4a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4a2:	e008      	b.n	800c4b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c4a4:	f7fd f964 	bl	8009770 <HAL_GetTick>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d901      	bls.n	800c4b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	e045      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4b6:	4b06      	ldr	r3, [pc, #24]	; (800c4d0 <HAL_RCC_OscConfig+0x470>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1f0      	bne.n	800c4a4 <HAL_RCC_OscConfig+0x444>
 800c4c2:	e03d      	b.n	800c540 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d107      	bne.n	800c4dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e038      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
 800c4d0:	40023800 	.word	0x40023800
 800c4d4:	40007000 	.word	0x40007000
 800c4d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c4dc:	4b1b      	ldr	r3, [pc, #108]	; (800c54c <HAL_RCC_OscConfig+0x4ec>)
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	699b      	ldr	r3, [r3, #24]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d028      	beq.n	800c53c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d121      	bne.n	800c53c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c502:	429a      	cmp	r2, r3
 800c504:	d11a      	bne.n	800c53c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c50c:	4013      	ands	r3, r2
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c514:	4293      	cmp	r3, r2
 800c516:	d111      	bne.n	800c53c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c522:	085b      	lsrs	r3, r3, #1
 800c524:	3b01      	subs	r3, #1
 800c526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c528:	429a      	cmp	r2, r3
 800c52a:	d107      	bne.n	800c53c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c538:	429a      	cmp	r2, r3
 800c53a:	d001      	beq.n	800c540 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	e000      	b.n	800c542 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3718      	adds	r7, #24
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	40023800 	.word	0x40023800

0800c550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	e0cc      	b.n	800c6fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c564:	4b68      	ldr	r3, [pc, #416]	; (800c708 <HAL_RCC_ClockConfig+0x1b8>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f003 0307 	and.w	r3, r3, #7
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d90c      	bls.n	800c58c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c572:	4b65      	ldr	r3, [pc, #404]	; (800c708 <HAL_RCC_ClockConfig+0x1b8>)
 800c574:	683a      	ldr	r2, [r7, #0]
 800c576:	b2d2      	uxtb	r2, r2
 800c578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c57a:	4b63      	ldr	r3, [pc, #396]	; (800c708 <HAL_RCC_ClockConfig+0x1b8>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 0307 	and.w	r3, r3, #7
 800c582:	683a      	ldr	r2, [r7, #0]
 800c584:	429a      	cmp	r2, r3
 800c586:	d001      	beq.n	800c58c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	e0b8      	b.n	800c6fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f003 0302 	and.w	r3, r3, #2
 800c594:	2b00      	cmp	r3, #0
 800c596:	d020      	beq.n	800c5da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 0304 	and.w	r3, r3, #4
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d005      	beq.n	800c5b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c5a4:	4b59      	ldr	r3, [pc, #356]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	4a58      	ldr	r2, [pc, #352]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c5aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c5ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f003 0308 	and.w	r3, r3, #8
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d005      	beq.n	800c5c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c5bc:	4b53      	ldr	r3, [pc, #332]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	4a52      	ldr	r2, [pc, #328]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c5c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c5c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c5c8:	4b50      	ldr	r3, [pc, #320]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	494d      	ldr	r1, [pc, #308]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f003 0301 	and.w	r3, r3, #1
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d044      	beq.n	800c670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d107      	bne.n	800c5fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5ee:	4b47      	ldr	r3, [pc, #284]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d119      	bne.n	800c62e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e07f      	b.n	800c6fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	2b02      	cmp	r3, #2
 800c604:	d003      	beq.n	800c60e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c60a:	2b03      	cmp	r3, #3
 800c60c:	d107      	bne.n	800c61e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c60e:	4b3f      	ldr	r3, [pc, #252]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c616:	2b00      	cmp	r3, #0
 800c618:	d109      	bne.n	800c62e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	e06f      	b.n	800c6fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c61e:	4b3b      	ldr	r3, [pc, #236]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f003 0302 	and.w	r3, r3, #2
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	e067      	b.n	800c6fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c62e:	4b37      	ldr	r3, [pc, #220]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	f023 0203 	bic.w	r2, r3, #3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	4934      	ldr	r1, [pc, #208]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c63c:	4313      	orrs	r3, r2
 800c63e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c640:	f7fd f896 	bl	8009770 <HAL_GetTick>
 800c644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c646:	e00a      	b.n	800c65e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c648:	f7fd f892 	bl	8009770 <HAL_GetTick>
 800c64c:	4602      	mov	r2, r0
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	f241 3288 	movw	r2, #5000	; 0x1388
 800c656:	4293      	cmp	r3, r2
 800c658:	d901      	bls.n	800c65e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c65a:	2303      	movs	r3, #3
 800c65c:	e04f      	b.n	800c6fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c65e:	4b2b      	ldr	r3, [pc, #172]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	f003 020c 	and.w	r2, r3, #12
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d1eb      	bne.n	800c648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c670:	4b25      	ldr	r3, [pc, #148]	; (800c708 <HAL_RCC_ClockConfig+0x1b8>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 0307 	and.w	r3, r3, #7
 800c678:	683a      	ldr	r2, [r7, #0]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d20c      	bcs.n	800c698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c67e:	4b22      	ldr	r3, [pc, #136]	; (800c708 <HAL_RCC_ClockConfig+0x1b8>)
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	b2d2      	uxtb	r2, r2
 800c684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c686:	4b20      	ldr	r3, [pc, #128]	; (800c708 <HAL_RCC_ClockConfig+0x1b8>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 0307 	and.w	r3, r3, #7
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	429a      	cmp	r2, r3
 800c692:	d001      	beq.n	800c698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	e032      	b.n	800c6fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 0304 	and.w	r3, r3, #4
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d008      	beq.n	800c6b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c6a4:	4b19      	ldr	r3, [pc, #100]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	4916      	ldr	r1, [pc, #88]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f003 0308 	and.w	r3, r3, #8
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d009      	beq.n	800c6d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c6c2:	4b12      	ldr	r3, [pc, #72]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	00db      	lsls	r3, r3, #3
 800c6d0:	490e      	ldr	r1, [pc, #56]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c6d6:	f000 f821 	bl	800c71c <HAL_RCC_GetSysClockFreq>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	4b0b      	ldr	r3, [pc, #44]	; (800c70c <HAL_RCC_ClockConfig+0x1bc>)
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	091b      	lsrs	r3, r3, #4
 800c6e2:	f003 030f 	and.w	r3, r3, #15
 800c6e6:	490a      	ldr	r1, [pc, #40]	; (800c710 <HAL_RCC_ClockConfig+0x1c0>)
 800c6e8:	5ccb      	ldrb	r3, [r1, r3]
 800c6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ee:	4a09      	ldr	r2, [pc, #36]	; (800c714 <HAL_RCC_ClockConfig+0x1c4>)
 800c6f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c6f2:	4b09      	ldr	r3, [pc, #36]	; (800c718 <HAL_RCC_ClockConfig+0x1c8>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7fc fff6 	bl	80096e8 <HAL_InitTick>

  return HAL_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	40023c00 	.word	0x40023c00
 800c70c:	40023800 	.word	0x40023800
 800c710:	08015384 	.word	0x08015384
 800c714:	20000138 	.word	0x20000138
 800c718:	2000013c 	.word	0x2000013c

0800c71c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c71c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c720:	b090      	sub	sp, #64	; 0x40
 800c722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c724:	2300      	movs	r3, #0
 800c726:	637b      	str	r3, [r7, #52]	; 0x34
 800c728:	2300      	movs	r3, #0
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c72c:	2300      	movs	r3, #0
 800c72e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800c730:	2300      	movs	r3, #0
 800c732:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c734:	4b59      	ldr	r3, [pc, #356]	; (800c89c <HAL_RCC_GetSysClockFreq+0x180>)
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	f003 030c 	and.w	r3, r3, #12
 800c73c:	2b08      	cmp	r3, #8
 800c73e:	d00d      	beq.n	800c75c <HAL_RCC_GetSysClockFreq+0x40>
 800c740:	2b08      	cmp	r3, #8
 800c742:	f200 80a1 	bhi.w	800c888 <HAL_RCC_GetSysClockFreq+0x16c>
 800c746:	2b00      	cmp	r3, #0
 800c748:	d002      	beq.n	800c750 <HAL_RCC_GetSysClockFreq+0x34>
 800c74a:	2b04      	cmp	r3, #4
 800c74c:	d003      	beq.n	800c756 <HAL_RCC_GetSysClockFreq+0x3a>
 800c74e:	e09b      	b.n	800c888 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c750:	4b53      	ldr	r3, [pc, #332]	; (800c8a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800c752:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800c754:	e09b      	b.n	800c88e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c756:	4b53      	ldr	r3, [pc, #332]	; (800c8a4 <HAL_RCC_GetSysClockFreq+0x188>)
 800c758:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c75a:	e098      	b.n	800c88e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c75c:	4b4f      	ldr	r3, [pc, #316]	; (800c89c <HAL_RCC_GetSysClockFreq+0x180>)
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c764:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c766:	4b4d      	ldr	r3, [pc, #308]	; (800c89c <HAL_RCC_GetSysClockFreq+0x180>)
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d028      	beq.n	800c7c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c772:	4b4a      	ldr	r3, [pc, #296]	; (800c89c <HAL_RCC_GetSysClockFreq+0x180>)
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	099b      	lsrs	r3, r3, #6
 800c778:	2200      	movs	r2, #0
 800c77a:	623b      	str	r3, [r7, #32]
 800c77c:	627a      	str	r2, [r7, #36]	; 0x24
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c784:	2100      	movs	r1, #0
 800c786:	4b47      	ldr	r3, [pc, #284]	; (800c8a4 <HAL_RCC_GetSysClockFreq+0x188>)
 800c788:	fb03 f201 	mul.w	r2, r3, r1
 800c78c:	2300      	movs	r3, #0
 800c78e:	fb00 f303 	mul.w	r3, r0, r3
 800c792:	4413      	add	r3, r2
 800c794:	4a43      	ldr	r2, [pc, #268]	; (800c8a4 <HAL_RCC_GetSysClockFreq+0x188>)
 800c796:	fba0 1202 	umull	r1, r2, r0, r2
 800c79a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c79c:	460a      	mov	r2, r1
 800c79e:	62ba      	str	r2, [r7, #40]	; 0x28
 800c7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7a2:	4413      	add	r3, r2
 800c7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	61bb      	str	r3, [r7, #24]
 800c7ac:	61fa      	str	r2, [r7, #28]
 800c7ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c7b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c7b6:	f7f7 fd5b 	bl	8004270 <__aeabi_uldivmod>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	460b      	mov	r3, r1
 800c7be:	4613      	mov	r3, r2
 800c7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7c2:	e053      	b.n	800c86c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c7c4:	4b35      	ldr	r3, [pc, #212]	; (800c89c <HAL_RCC_GetSysClockFreq+0x180>)
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	099b      	lsrs	r3, r3, #6
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	613b      	str	r3, [r7, #16]
 800c7ce:	617a      	str	r2, [r7, #20]
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c7d6:	f04f 0b00 	mov.w	fp, #0
 800c7da:	4652      	mov	r2, sl
 800c7dc:	465b      	mov	r3, fp
 800c7de:	f04f 0000 	mov.w	r0, #0
 800c7e2:	f04f 0100 	mov.w	r1, #0
 800c7e6:	0159      	lsls	r1, r3, #5
 800c7e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c7ec:	0150      	lsls	r0, r2, #5
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	ebb2 080a 	subs.w	r8, r2, sl
 800c7f6:	eb63 090b 	sbc.w	r9, r3, fp
 800c7fa:	f04f 0200 	mov.w	r2, #0
 800c7fe:	f04f 0300 	mov.w	r3, #0
 800c802:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c806:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c80a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c80e:	ebb2 0408 	subs.w	r4, r2, r8
 800c812:	eb63 0509 	sbc.w	r5, r3, r9
 800c816:	f04f 0200 	mov.w	r2, #0
 800c81a:	f04f 0300 	mov.w	r3, #0
 800c81e:	00eb      	lsls	r3, r5, #3
 800c820:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c824:	00e2      	lsls	r2, r4, #3
 800c826:	4614      	mov	r4, r2
 800c828:	461d      	mov	r5, r3
 800c82a:	eb14 030a 	adds.w	r3, r4, sl
 800c82e:	603b      	str	r3, [r7, #0]
 800c830:	eb45 030b 	adc.w	r3, r5, fp
 800c834:	607b      	str	r3, [r7, #4]
 800c836:	f04f 0200 	mov.w	r2, #0
 800c83a:	f04f 0300 	mov.w	r3, #0
 800c83e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c842:	4629      	mov	r1, r5
 800c844:	028b      	lsls	r3, r1, #10
 800c846:	4621      	mov	r1, r4
 800c848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c84c:	4621      	mov	r1, r4
 800c84e:	028a      	lsls	r2, r1, #10
 800c850:	4610      	mov	r0, r2
 800c852:	4619      	mov	r1, r3
 800c854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c856:	2200      	movs	r2, #0
 800c858:	60bb      	str	r3, [r7, #8]
 800c85a:	60fa      	str	r2, [r7, #12]
 800c85c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c860:	f7f7 fd06 	bl	8004270 <__aeabi_uldivmod>
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	4613      	mov	r3, r2
 800c86a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c86c:	4b0b      	ldr	r3, [pc, #44]	; (800c89c <HAL_RCC_GetSysClockFreq+0x180>)
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	0c1b      	lsrs	r3, r3, #16
 800c872:	f003 0303 	and.w	r3, r3, #3
 800c876:	3301      	adds	r3, #1
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800c87c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c880:	fbb2 f3f3 	udiv	r3, r2, r3
 800c884:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c886:	e002      	b.n	800c88e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c888:	4b05      	ldr	r3, [pc, #20]	; (800c8a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800c88a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c88c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800c890:	4618      	mov	r0, r3
 800c892:	3740      	adds	r7, #64	; 0x40
 800c894:	46bd      	mov	sp, r7
 800c896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c89a:	bf00      	nop
 800c89c:	40023800 	.word	0x40023800
 800c8a0:	00f42400 	.word	0x00f42400
 800c8a4:	00989680 	.word	0x00989680

0800c8a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c8ac:	4b03      	ldr	r3, [pc, #12]	; (800c8bc <HAL_RCC_GetHCLKFreq+0x14>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	20000138 	.word	0x20000138

0800c8c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c8c4:	f7ff fff0 	bl	800c8a8 <HAL_RCC_GetHCLKFreq>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	4b05      	ldr	r3, [pc, #20]	; (800c8e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	0a9b      	lsrs	r3, r3, #10
 800c8d0:	f003 0307 	and.w	r3, r3, #7
 800c8d4:	4903      	ldr	r1, [pc, #12]	; (800c8e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c8d6:	5ccb      	ldrb	r3, [r1, r3]
 800c8d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	40023800 	.word	0x40023800
 800c8e4:	08015394 	.word	0x08015394

0800c8e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c8ec:	f7ff ffdc 	bl	800c8a8 <HAL_RCC_GetHCLKFreq>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	4b05      	ldr	r3, [pc, #20]	; (800c908 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	0b5b      	lsrs	r3, r3, #13
 800c8f8:	f003 0307 	and.w	r3, r3, #7
 800c8fc:	4903      	ldr	r1, [pc, #12]	; (800c90c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c8fe:	5ccb      	ldrb	r3, [r1, r3]
 800c900:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c904:	4618      	mov	r0, r3
 800c906:	bd80      	pop	{r7, pc}
 800c908:	40023800 	.word	0x40023800
 800c90c:	08015394 	.word	0x08015394

0800c910 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c918:	2300      	movs	r3, #0
 800c91a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c91c:	2300      	movs	r3, #0
 800c91e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f003 0301 	and.w	r3, r3, #1
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d105      	bne.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c934:	2b00      	cmp	r3, #0
 800c936:	d035      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c938:	4b62      	ldr	r3, [pc, #392]	; (800cac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c93e:	f7fc ff17 	bl	8009770 <HAL_GetTick>
 800c942:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c944:	e008      	b.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c946:	f7fc ff13 	bl	8009770 <HAL_GetTick>
 800c94a:	4602      	mov	r2, r0
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	2b02      	cmp	r3, #2
 800c952:	d901      	bls.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c954:	2303      	movs	r3, #3
 800c956:	e0b0      	b.n	800caba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c958:	4b5b      	ldr	r3, [pc, #364]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1f0      	bne.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	019a      	lsls	r2, r3, #6
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	071b      	lsls	r3, r3, #28
 800c970:	4955      	ldr	r1, [pc, #340]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c972:	4313      	orrs	r3, r2
 800c974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c978:	4b52      	ldr	r3, [pc, #328]	; (800cac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c97e:	f7fc fef7 	bl	8009770 <HAL_GetTick>
 800c982:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c984:	e008      	b.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c986:	f7fc fef3 	bl	8009770 <HAL_GetTick>
 800c98a:	4602      	mov	r2, r0
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	1ad3      	subs	r3, r2, r3
 800c990:	2b02      	cmp	r3, #2
 800c992:	d901      	bls.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c994:	2303      	movs	r3, #3
 800c996:	e090      	b.n	800caba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c998:	4b4b      	ldr	r3, [pc, #300]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d0f0      	beq.n	800c986 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0302 	and.w	r3, r3, #2
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 8083 	beq.w	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	60fb      	str	r3, [r7, #12]
 800c9b6:	4b44      	ldr	r3, [pc, #272]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ba:	4a43      	ldr	r2, [pc, #268]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c9bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9c0:	6413      	str	r3, [r2, #64]	; 0x40
 800c9c2:	4b41      	ldr	r3, [pc, #260]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c9ce:	4b3f      	ldr	r3, [pc, #252]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a3e      	ldr	r2, [pc, #248]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c9d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c9da:	f7fc fec9 	bl	8009770 <HAL_GetTick>
 800c9de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c9e0:	e008      	b.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c9e2:	f7fc fec5 	bl	8009770 <HAL_GetTick>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	2b02      	cmp	r3, #2
 800c9ee:	d901      	bls.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c9f0:	2303      	movs	r3, #3
 800c9f2:	e062      	b.n	800caba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c9f4:	4b35      	ldr	r3, [pc, #212]	; (800cacc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d0f0      	beq.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ca00:	4b31      	ldr	r3, [pc, #196]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ca02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d02f      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d028      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ca1e:	4b2a      	ldr	r3, [pc, #168]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ca20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ca28:	4b29      	ldr	r3, [pc, #164]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ca2e:	4b28      	ldr	r3, [pc, #160]	; (800cad0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ca34:	4a24      	ldr	r2, [pc, #144]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ca3a:	4b23      	ldr	r3, [pc, #140]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ca3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d114      	bne.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ca46:	f7fc fe93 	bl	8009770 <HAL_GetTick>
 800ca4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca4c:	e00a      	b.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca4e:	f7fc fe8f 	bl	8009770 <HAL_GetTick>
 800ca52:	4602      	mov	r2, r0
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d901      	bls.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800ca60:	2303      	movs	r3, #3
 800ca62:	e02a      	b.n	800caba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca64:	4b18      	ldr	r3, [pc, #96]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ca66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca68:	f003 0302 	and.w	r3, r3, #2
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d0ee      	beq.n	800ca4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca7c:	d10d      	bne.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800ca7e:	4b12      	ldr	r3, [pc, #72]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ca8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca92:	490d      	ldr	r1, [pc, #52]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ca94:	4313      	orrs	r3, r2
 800ca96:	608b      	str	r3, [r1, #8]
 800ca98:	e005      	b.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ca9a:	4b0b      	ldr	r3, [pc, #44]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	4a0a      	ldr	r2, [pc, #40]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800caa0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800caa4:	6093      	str	r3, [r2, #8]
 800caa6:	4b08      	ldr	r3, [pc, #32]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800caa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cab2:	4905      	ldr	r1, [pc, #20]	; (800cac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cab4:	4313      	orrs	r3, r2
 800cab6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3718      	adds	r7, #24
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	42470068 	.word	0x42470068
 800cac8:	40023800 	.word	0x40023800
 800cacc:	40007000 	.word	0x40007000
 800cad0:	42470e40 	.word	0x42470e40

0800cad4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cadc:	2301      	movs	r3, #1
 800cade:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d101      	bne.n	800caea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e066      	b.n	800cbb8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	7f5b      	ldrb	r3, [r3, #29]
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d105      	bne.n	800cb00 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7fb fb0a 	bl	8008114 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2202      	movs	r2, #2
 800cb04:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	22ca      	movs	r2, #202	; 0xca
 800cb0c:	625a      	str	r2, [r3, #36]	; 0x24
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	2253      	movs	r2, #83	; 0x53
 800cb14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 f998 	bl	800ce4c <RTC_EnterInitMode>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d12c      	bne.n	800cb80 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	6812      	ldr	r2, [r2, #0]
 800cb30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb38:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	6899      	ldr	r1, [r3, #8]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	685a      	ldr	r2, [r3, #4]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	431a      	orrs	r2, r3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	695b      	ldr	r3, [r3, #20]
 800cb4e:	431a      	orrs	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	430a      	orrs	r2, r1
 800cb56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	68d2      	ldr	r2, [r2, #12]
 800cb60:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	6919      	ldr	r1, [r3, #16]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	041a      	lsls	r2, r3, #16
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	430a      	orrs	r2, r1
 800cb74:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 f99f 	bl	800ceba <RTC_ExitInitMode>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800cb80:	7bfb      	ldrb	r3, [r7, #15]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d113      	bne.n	800cbae <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cb94:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	699a      	ldr	r2, [r3, #24]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	430a      	orrs	r2, r1
 800cba6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	22ff      	movs	r2, #255	; 0xff
 800cbb4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cbc0:	b590      	push	{r4, r7, lr}
 800cbc2:	b087      	sub	sp, #28
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	7f1b      	ldrb	r3, [r3, #28]
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d101      	bne.n	800cbdc <HAL_RTC_SetTime+0x1c>
 800cbd8:	2302      	movs	r3, #2
 800cbda:	e087      	b.n	800ccec <HAL_RTC_SetTime+0x12c>
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d126      	bne.n	800cc3c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d102      	bne.n	800cc02 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 f97c 	bl	800cf04 <RTC_ByteToBcd2>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	785b      	ldrb	r3, [r3, #1]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 f975 	bl	800cf04 <RTC_ByteToBcd2>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cc1e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	789b      	ldrb	r3, [r3, #2]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 f96d 	bl	800cf04 <RTC_ByteToBcd2>
 800cc2a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cc2c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	78db      	ldrb	r3, [r3, #3]
 800cc34:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cc36:	4313      	orrs	r3, r2
 800cc38:	617b      	str	r3, [r7, #20]
 800cc3a:	e018      	b.n	800cc6e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d102      	bne.n	800cc50 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	785b      	ldrb	r3, [r3, #1]
 800cc5a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cc5c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800cc62:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	78db      	ldrb	r3, [r3, #3]
 800cc68:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	22ca      	movs	r2, #202	; 0xca
 800cc74:	625a      	str	r2, [r3, #36]	; 0x24
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2253      	movs	r2, #83	; 0x53
 800cc7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f000 f8e4 	bl	800ce4c <RTC_EnterInitMode>
 800cc84:	4603      	mov	r3, r0
 800cc86:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cc88:	7cfb      	ldrb	r3, [r7, #19]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d120      	bne.n	800ccd0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cc98:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cc9c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	689a      	ldr	r2, [r3, #8]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ccac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	6899      	ldr	r1, [r3, #8]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	68da      	ldr	r2, [r3, #12]
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	431a      	orrs	r2, r3
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	430a      	orrs	r2, r1
 800ccc4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f000 f8f7 	bl	800ceba <RTC_ExitInitMode>
 800cccc:	4603      	mov	r3, r0
 800ccce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ccd0:	7cfb      	ldrb	r3, [r7, #19]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d102      	bne.n	800ccdc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2201      	movs	r2, #1
 800ccda:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	22ff      	movs	r2, #255	; 0xff
 800cce2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	771a      	strb	r2, [r3, #28]

  return status;
 800ccea:	7cfb      	ldrb	r3, [r7, #19]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	371c      	adds	r7, #28
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd90      	pop	{r4, r7, pc}

0800ccf4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ccf4:	b590      	push	{r4, r7, lr}
 800ccf6:	b087      	sub	sp, #28
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cd00:	2300      	movs	r3, #0
 800cd02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	7f1b      	ldrb	r3, [r3, #28]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d101      	bne.n	800cd10 <HAL_RTC_SetDate+0x1c>
 800cd0c:	2302      	movs	r3, #2
 800cd0e:	e071      	b.n	800cdf4 <HAL_RTC_SetDate+0x100>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2201      	movs	r2, #1
 800cd14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2202      	movs	r2, #2
 800cd1a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10e      	bne.n	800cd40 <HAL_RTC_SetDate+0x4c>
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	785b      	ldrb	r3, [r3, #1]
 800cd26:	f003 0310 	and.w	r3, r3, #16
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d008      	beq.n	800cd40 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	785b      	ldrb	r3, [r3, #1]
 800cd32:	f023 0310 	bic.w	r3, r3, #16
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	330a      	adds	r3, #10
 800cd3a:	b2da      	uxtb	r2, r3
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d11c      	bne.n	800cd80 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	78db      	ldrb	r3, [r3, #3]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 f8da 	bl	800cf04 <RTC_ByteToBcd2>
 800cd50:	4603      	mov	r3, r0
 800cd52:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	785b      	ldrb	r3, [r3, #1]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f000 f8d3 	bl	800cf04 <RTC_ByteToBcd2>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cd62:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	789b      	ldrb	r3, [r3, #2]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f000 f8cb 	bl	800cf04 <RTC_ByteToBcd2>
 800cd6e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cd70:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	617b      	str	r3, [r7, #20]
 800cd7e:	e00e      	b.n	800cd9e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	78db      	ldrb	r3, [r3, #3]
 800cd84:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	785b      	ldrb	r3, [r3, #1]
 800cd8a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cd8c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800cd8e:	68ba      	ldr	r2, [r7, #8]
 800cd90:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cd92:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	22ca      	movs	r2, #202	; 0xca
 800cda4:	625a      	str	r2, [r3, #36]	; 0x24
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2253      	movs	r2, #83	; 0x53
 800cdac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f000 f84c 	bl	800ce4c <RTC_EnterInitMode>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cdb8:	7cfb      	ldrb	r3, [r7, #19]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d10c      	bne.n	800cdd8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cdc8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cdcc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cdce:	68f8      	ldr	r0, [r7, #12]
 800cdd0:	f000 f873 	bl	800ceba <RTC_ExitInitMode>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cdd8:	7cfb      	ldrb	r3, [r7, #19]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d102      	bne.n	800cde4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2201      	movs	r2, #1
 800cde2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	22ff      	movs	r2, #255	; 0xff
 800cdea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	771a      	strb	r2, [r3, #28]

  return status;
 800cdf2:	7cfb      	ldrb	r3, [r7, #19]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	371c      	adds	r7, #28
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd90      	pop	{r4, r7, pc}

0800cdfc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ce04:	2300      	movs	r3, #0
 800ce06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	68da      	ldr	r2, [r3, #12]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ce16:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ce18:	f7fc fcaa 	bl	8009770 <HAL_GetTick>
 800ce1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ce1e:	e009      	b.n	800ce34 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ce20:	f7fc fca6 	bl	8009770 <HAL_GetTick>
 800ce24:	4602      	mov	r2, r0
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	1ad3      	subs	r3, r2, r3
 800ce2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce2e:	d901      	bls.n	800ce34 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ce30:	2303      	movs	r3, #3
 800ce32:	e007      	b.n	800ce44 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	f003 0320 	and.w	r3, r3, #32
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d0ee      	beq.n	800ce20 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3710      	adds	r7, #16
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ce54:	2300      	movs	r3, #0
 800ce56:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d122      	bne.n	800ceb0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	68da      	ldr	r2, [r3, #12]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ce78:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ce7a:	f7fc fc79 	bl	8009770 <HAL_GetTick>
 800ce7e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ce80:	e00c      	b.n	800ce9c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ce82:	f7fc fc75 	bl	8009770 <HAL_GetTick>
 800ce86:	4602      	mov	r2, r0
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	1ad3      	subs	r3, r2, r3
 800ce8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce90:	d904      	bls.n	800ce9c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2204      	movs	r2, #4
 800ce96:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d102      	bne.n	800ceb0 <RTC_EnterInitMode+0x64>
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d1e8      	bne.n	800ce82 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ceb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b084      	sub	sp, #16
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cec2:	2300      	movs	r3, #0
 800cec4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68da      	ldr	r2, [r3, #12]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ced4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	f003 0320 	and.w	r3, r3, #32
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d10a      	bne.n	800cefa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7ff ff89 	bl	800cdfc <HAL_RTC_WaitForSynchro>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d004      	beq.n	800cefa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2204      	movs	r2, #4
 800cef4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800cef6:	2301      	movs	r3, #1
 800cef8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800cf12:	e005      	b.n	800cf20 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cf14:	7bfb      	ldrb	r3, [r7, #15]
 800cf16:	3301      	adds	r3, #1
 800cf18:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800cf1a:	79fb      	ldrb	r3, [r7, #7]
 800cf1c:	3b0a      	subs	r3, #10
 800cf1e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800cf20:	79fb      	ldrb	r3, [r7, #7]
 800cf22:	2b09      	cmp	r3, #9
 800cf24:	d8f6      	bhi.n	800cf14 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
 800cf28:	011b      	lsls	r3, r3, #4
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	79fb      	ldrb	r3, [r7, #7]
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	b2db      	uxtb	r3, r3
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3714      	adds	r7, #20
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b082      	sub	sp, #8
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e07b      	b.n	800d048 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d108      	bne.n	800cf6a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf60:	d009      	beq.n	800cf76 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2200      	movs	r2, #0
 800cf66:	61da      	str	r2, [r3, #28]
 800cf68:	e005      	b.n	800cf76 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d106      	bne.n	800cf96 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f7fb f91f 	bl	80081d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2202      	movs	r2, #2
 800cf9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cfac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800cfbe:	431a      	orrs	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfc8:	431a      	orrs	r2, r3
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	f003 0302 	and.w	r3, r3, #2
 800cfd2:	431a      	orrs	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	695b      	ldr	r3, [r3, #20]
 800cfd8:	f003 0301 	and.w	r3, r3, #1
 800cfdc:	431a      	orrs	r2, r3
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfe6:	431a      	orrs	r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	69db      	ldr	r3, [r3, #28]
 800cfec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cff0:	431a      	orrs	r2, r3
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a1b      	ldr	r3, [r3, #32]
 800cff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cffa:	ea42 0103 	orr.w	r1, r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d002:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	430a      	orrs	r2, r1
 800d00c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	699b      	ldr	r3, [r3, #24]
 800d012:	0c1b      	lsrs	r3, r3, #16
 800d014:	f003 0104 	and.w	r1, r3, #4
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01c:	f003 0210 	and.w	r2, r3, #16
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	430a      	orrs	r2, r1
 800d026:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	69da      	ldr	r2, [r3, #28]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d036:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2201      	movs	r2, #1
 800d042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d046:	2300      	movs	r3, #0
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d101      	bne.n	800d062 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	e01a      	b.n	800d098 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2202      	movs	r2, #2
 800d066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d078:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7fb f91a 	bl	80082b4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d096:	2300      	movs	r3, #0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b088      	sub	sp, #32
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	603b      	str	r3, [r7, #0]
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d101      	bne.n	800d0c2 <HAL_SPI_Transmit+0x22>
 800d0be:	2302      	movs	r3, #2
 800d0c0:	e126      	b.n	800d310 <HAL_SPI_Transmit+0x270>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d0ca:	f7fc fb51 	bl	8009770 <HAL_GetTick>
 800d0ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d0d0:	88fb      	ldrh	r3, [r7, #6]
 800d0d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d002      	beq.n	800d0e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d0e4:	e10b      	b.n	800d2fe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d002      	beq.n	800d0f2 <HAL_SPI_Transmit+0x52>
 800d0ec:	88fb      	ldrh	r3, [r7, #6]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d102      	bne.n	800d0f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d0f6:	e102      	b.n	800d2fe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2203      	movs	r2, #3
 800d0fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2200      	movs	r2, #0
 800d104:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	88fa      	ldrh	r2, [r7, #6]
 800d110:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	88fa      	ldrh	r2, [r7, #6]
 800d116:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2200      	movs	r2, #0
 800d11c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2200      	movs	r2, #0
 800d122:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2200      	movs	r2, #0
 800d12e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d13e:	d10f      	bne.n	800d160 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d14e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d15e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d16a:	2b40      	cmp	r3, #64	; 0x40
 800d16c:	d007      	beq.n	800d17e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d17c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d186:	d14b      	bne.n	800d220 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d002      	beq.n	800d196 <HAL_SPI_Transmit+0xf6>
 800d190:	8afb      	ldrh	r3, [r7, #22]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d13e      	bne.n	800d214 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d19a:	881a      	ldrh	r2, [r3, #0]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a6:	1c9a      	adds	r2, r3, #2
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d1ba:	e02b      	b.n	800d214 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	f003 0302 	and.w	r3, r3, #2
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	d112      	bne.n	800d1f0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ce:	881a      	ldrh	r2, [r3, #0]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1da:	1c9a      	adds	r2, r3, #2
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	86da      	strh	r2, [r3, #54]	; 0x36
 800d1ee:	e011      	b.n	800d214 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1f0:	f7fc fabe 	bl	8009770 <HAL_GetTick>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	1ad3      	subs	r3, r2, r3
 800d1fa:	683a      	ldr	r2, [r7, #0]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d803      	bhi.n	800d208 <HAL_SPI_Transmit+0x168>
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d206:	d102      	bne.n	800d20e <HAL_SPI_Transmit+0x16e>
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d102      	bne.n	800d214 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800d20e:	2303      	movs	r3, #3
 800d210:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d212:	e074      	b.n	800d2fe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d218:	b29b      	uxth	r3, r3
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d1ce      	bne.n	800d1bc <HAL_SPI_Transmit+0x11c>
 800d21e:	e04c      	b.n	800d2ba <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <HAL_SPI_Transmit+0x18e>
 800d228:	8afb      	ldrh	r3, [r7, #22]
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d140      	bne.n	800d2b0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	330c      	adds	r3, #12
 800d238:	7812      	ldrb	r2, [r2, #0]
 800d23a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	3b01      	subs	r3, #1
 800d24e:	b29a      	uxth	r2, r3
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d254:	e02c      	b.n	800d2b0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	f003 0302 	and.w	r3, r3, #2
 800d260:	2b02      	cmp	r3, #2
 800d262:	d113      	bne.n	800d28c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	330c      	adds	r3, #12
 800d26e:	7812      	ldrb	r2, [r2, #0]
 800d270:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d280:	b29b      	uxth	r3, r3
 800d282:	3b01      	subs	r3, #1
 800d284:	b29a      	uxth	r2, r3
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	86da      	strh	r2, [r3, #54]	; 0x36
 800d28a:	e011      	b.n	800d2b0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d28c:	f7fc fa70 	bl	8009770 <HAL_GetTick>
 800d290:	4602      	mov	r2, r0
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	1ad3      	subs	r3, r2, r3
 800d296:	683a      	ldr	r2, [r7, #0]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d803      	bhi.n	800d2a4 <HAL_SPI_Transmit+0x204>
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a2:	d102      	bne.n	800d2aa <HAL_SPI_Transmit+0x20a>
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d102      	bne.n	800d2b0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800d2aa:	2303      	movs	r3, #3
 800d2ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d2ae:	e026      	b.n	800d2fe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1cd      	bne.n	800d256 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d2ba:	69ba      	ldr	r2, [r7, #24]
 800d2bc:	6839      	ldr	r1, [r7, #0]
 800d2be:	68f8      	ldr	r0, [r7, #12]
 800d2c0:	f000 fcec 	bl	800dc9c <SPI_EndRxTxTransaction>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d002      	beq.n	800d2d0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2220      	movs	r2, #32
 800d2ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2d8:	2300      	movs	r3, #0
 800d2da:	613b      	str	r3, [r7, #16]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	613b      	str	r3, [r7, #16]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	613b      	str	r3, [r7, #16]
 800d2ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d002      	beq.n	800d2fc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	77fb      	strb	r3, [r7, #31]
 800d2fa:	e000      	b.n	800d2fe <HAL_SPI_Transmit+0x25e>
  }

error:
 800d2fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2201      	movs	r2, #1
 800d302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2200      	movs	r2, #0
 800d30a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d30e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3720      	adds	r7, #32
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b088      	sub	sp, #32
 800d31c:	af02      	add	r7, sp, #8
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	603b      	str	r3, [r7, #0]
 800d324:	4613      	mov	r3, r2
 800d326:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d328:	2300      	movs	r3, #0
 800d32a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d334:	d112      	bne.n	800d35c <HAL_SPI_Receive+0x44>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d10e      	bne.n	800d35c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2204      	movs	r2, #4
 800d342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d346:	88fa      	ldrh	r2, [r7, #6]
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	4613      	mov	r3, r2
 800d34e:	68ba      	ldr	r2, [r7, #8]
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	f000 f8f1 	bl	800d53a <HAL_SPI_TransmitReceive>
 800d358:	4603      	mov	r3, r0
 800d35a:	e0ea      	b.n	800d532 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d362:	2b01      	cmp	r3, #1
 800d364:	d101      	bne.n	800d36a <HAL_SPI_Receive+0x52>
 800d366:	2302      	movs	r3, #2
 800d368:	e0e3      	b.n	800d532 <HAL_SPI_Receive+0x21a>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2201      	movs	r2, #1
 800d36e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d372:	f7fc f9fd 	bl	8009770 <HAL_GetTick>
 800d376:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	2b01      	cmp	r3, #1
 800d382:	d002      	beq.n	800d38a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d384:	2302      	movs	r3, #2
 800d386:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d388:	e0ca      	b.n	800d520 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <HAL_SPI_Receive+0x7e>
 800d390:	88fb      	ldrh	r3, [r7, #6]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d102      	bne.n	800d39c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d39a:	e0c1      	b.n	800d520 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2204      	movs	r2, #4
 800d3a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	68ba      	ldr	r2, [r7, #8]
 800d3ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	88fa      	ldrh	r2, [r7, #6]
 800d3b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	88fa      	ldrh	r2, [r7, #6]
 800d3ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3e2:	d10f      	bne.n	800d404 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d402:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d40e:	2b40      	cmp	r3, #64	; 0x40
 800d410:	d007      	beq.n	800d422 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d420:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d162      	bne.n	800d4f0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d42a:	e02e      	b.n	800d48a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	f003 0301 	and.w	r3, r3, #1
 800d436:	2b01      	cmp	r3, #1
 800d438:	d115      	bne.n	800d466 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f103 020c 	add.w	r2, r3, #12
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d446:	7812      	ldrb	r2, [r2, #0]
 800d448:	b2d2      	uxtb	r2, r2
 800d44a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d450:	1c5a      	adds	r2, r3, #1
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	3b01      	subs	r3, #1
 800d45e:	b29a      	uxth	r2, r3
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d464:	e011      	b.n	800d48a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d466:	f7fc f983 	bl	8009770 <HAL_GetTick>
 800d46a:	4602      	mov	r2, r0
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	1ad3      	subs	r3, r2, r3
 800d470:	683a      	ldr	r2, [r7, #0]
 800d472:	429a      	cmp	r2, r3
 800d474:	d803      	bhi.n	800d47e <HAL_SPI_Receive+0x166>
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d47c:	d102      	bne.n	800d484 <HAL_SPI_Receive+0x16c>
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d102      	bne.n	800d48a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800d484:	2303      	movs	r3, #3
 800d486:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d488:	e04a      	b.n	800d520 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d48e:	b29b      	uxth	r3, r3
 800d490:	2b00      	cmp	r3, #0
 800d492:	d1cb      	bne.n	800d42c <HAL_SPI_Receive+0x114>
 800d494:	e031      	b.n	800d4fa <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	f003 0301 	and.w	r3, r3, #1
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d113      	bne.n	800d4cc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	68da      	ldr	r2, [r3, #12]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ae:	b292      	uxth	r2, r2
 800d4b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b6:	1c9a      	adds	r2, r3, #2
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	3b01      	subs	r3, #1
 800d4c4:	b29a      	uxth	r2, r3
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d4ca:	e011      	b.n	800d4f0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4cc:	f7fc f950 	bl	8009770 <HAL_GetTick>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	1ad3      	subs	r3, r2, r3
 800d4d6:	683a      	ldr	r2, [r7, #0]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d803      	bhi.n	800d4e4 <HAL_SPI_Receive+0x1cc>
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e2:	d102      	bne.n	800d4ea <HAL_SPI_Receive+0x1d2>
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d102      	bne.n	800d4f0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800d4ea:	2303      	movs	r3, #3
 800d4ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d4ee:	e017      	b.n	800d520 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1cd      	bne.n	800d496 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d4fa:	693a      	ldr	r2, [r7, #16]
 800d4fc:	6839      	ldr	r1, [r7, #0]
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f000 fb66 	bl	800dbd0 <SPI_EndRxTransaction>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d002      	beq.n	800d510 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2220      	movs	r2, #32
 800d50e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d514:	2b00      	cmp	r3, #0
 800d516:	d002      	beq.n	800d51e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800d518:	2301      	movs	r3, #1
 800d51a:	75fb      	strb	r3, [r7, #23]
 800d51c:	e000      	b.n	800d520 <HAL_SPI_Receive+0x208>
  }

error :
 800d51e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2201      	movs	r2, #1
 800d524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d530:	7dfb      	ldrb	r3, [r7, #23]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3718      	adds	r7, #24
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b08c      	sub	sp, #48	; 0x30
 800d53e:	af00      	add	r7, sp, #0
 800d540:	60f8      	str	r0, [r7, #12]
 800d542:	60b9      	str	r1, [r7, #8]
 800d544:	607a      	str	r2, [r7, #4]
 800d546:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d548:	2301      	movs	r3, #1
 800d54a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d54c:	2300      	movs	r3, #0
 800d54e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d101      	bne.n	800d560 <HAL_SPI_TransmitReceive+0x26>
 800d55c:	2302      	movs	r3, #2
 800d55e:	e18a      	b.n	800d876 <HAL_SPI_TransmitReceive+0x33c>
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d568:	f7fc f902 	bl	8009770 <HAL_GetTick>
 800d56c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d57e:	887b      	ldrh	r3, [r7, #2]
 800d580:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d582:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d586:	2b01      	cmp	r3, #1
 800d588:	d00f      	beq.n	800d5aa <HAL_SPI_TransmitReceive+0x70>
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d590:	d107      	bne.n	800d5a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	689b      	ldr	r3, [r3, #8]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d103      	bne.n	800d5a2 <HAL_SPI_TransmitReceive+0x68>
 800d59a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d59e:	2b04      	cmp	r3, #4
 800d5a0:	d003      	beq.n	800d5aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d5a2:	2302      	movs	r3, #2
 800d5a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d5a8:	e15b      	b.n	800d862 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d005      	beq.n	800d5bc <HAL_SPI_TransmitReceive+0x82>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d002      	beq.n	800d5bc <HAL_SPI_TransmitReceive+0x82>
 800d5b6:	887b      	ldrh	r3, [r7, #2]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d103      	bne.n	800d5c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d5c2:	e14e      	b.n	800d862 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	2b04      	cmp	r3, #4
 800d5ce:	d003      	beq.n	800d5d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2205      	movs	r2, #5
 800d5d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	887a      	ldrh	r2, [r7, #2]
 800d5e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	887a      	ldrh	r2, [r7, #2]
 800d5ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	68ba      	ldr	r2, [r7, #8]
 800d5f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	887a      	ldrh	r2, [r7, #2]
 800d5fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	887a      	ldrh	r2, [r7, #2]
 800d600:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2200      	movs	r2, #0
 800d606:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2200      	movs	r2, #0
 800d60c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d618:	2b40      	cmp	r3, #64	; 0x40
 800d61a:	d007      	beq.n	800d62c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d62a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d634:	d178      	bne.n	800d728 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d002      	beq.n	800d644 <HAL_SPI_TransmitReceive+0x10a>
 800d63e:	8b7b      	ldrh	r3, [r7, #26]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d166      	bne.n	800d712 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d648:	881a      	ldrh	r2, [r3, #0]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d654:	1c9a      	adds	r2, r3, #2
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d65e:	b29b      	uxth	r3, r3
 800d660:	3b01      	subs	r3, #1
 800d662:	b29a      	uxth	r2, r3
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d668:	e053      	b.n	800d712 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	f003 0302 	and.w	r3, r3, #2
 800d674:	2b02      	cmp	r3, #2
 800d676:	d11b      	bne.n	800d6b0 <HAL_SPI_TransmitReceive+0x176>
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d016      	beq.n	800d6b0 <HAL_SPI_TransmitReceive+0x176>
 800d682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d684:	2b01      	cmp	r3, #1
 800d686:	d113      	bne.n	800d6b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68c:	881a      	ldrh	r2, [r3, #0]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d698:	1c9a      	adds	r2, r3, #2
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	689b      	ldr	r3, [r3, #8]
 800d6b6:	f003 0301 	and.w	r3, r3, #1
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d119      	bne.n	800d6f2 <HAL_SPI_TransmitReceive+0x1b8>
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d014      	beq.n	800d6f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	68da      	ldr	r2, [r3, #12]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d2:	b292      	uxth	r2, r2
 800d6d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6da:	1c9a      	adds	r2, r3, #2
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d6f2:	f7fc f83d 	bl	8009770 <HAL_GetTick>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fa:	1ad3      	subs	r3, r2, r3
 800d6fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d807      	bhi.n	800d712 <HAL_SPI_TransmitReceive+0x1d8>
 800d702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d708:	d003      	beq.n	800d712 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d70a:	2303      	movs	r3, #3
 800d70c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d710:	e0a7      	b.n	800d862 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d716:	b29b      	uxth	r3, r3
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1a6      	bne.n	800d66a <HAL_SPI_TransmitReceive+0x130>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d720:	b29b      	uxth	r3, r3
 800d722:	2b00      	cmp	r3, #0
 800d724:	d1a1      	bne.n	800d66a <HAL_SPI_TransmitReceive+0x130>
 800d726:	e07c      	b.n	800d822 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d002      	beq.n	800d736 <HAL_SPI_TransmitReceive+0x1fc>
 800d730:	8b7b      	ldrh	r3, [r7, #26]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d16b      	bne.n	800d80e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	330c      	adds	r3, #12
 800d740:	7812      	ldrb	r2, [r2, #0]
 800d742:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d748:	1c5a      	adds	r2, r3, #1
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d752:	b29b      	uxth	r3, r3
 800d754:	3b01      	subs	r3, #1
 800d756:	b29a      	uxth	r2, r3
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d75c:	e057      	b.n	800d80e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	f003 0302 	and.w	r3, r3, #2
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d11c      	bne.n	800d7a6 <HAL_SPI_TransmitReceive+0x26c>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d770:	b29b      	uxth	r3, r3
 800d772:	2b00      	cmp	r3, #0
 800d774:	d017      	beq.n	800d7a6 <HAL_SPI_TransmitReceive+0x26c>
 800d776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d114      	bne.n	800d7a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	330c      	adds	r3, #12
 800d786:	7812      	ldrb	r2, [r2, #0]
 800d788:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78e:	1c5a      	adds	r2, r3, #1
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d798:	b29b      	uxth	r3, r3
 800d79a:	3b01      	subs	r3, #1
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	f003 0301 	and.w	r3, r3, #1
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	d119      	bne.n	800d7e8 <HAL_SPI_TransmitReceive+0x2ae>
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d014      	beq.n	800d7e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	68da      	ldr	r2, [r3, #12]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c8:	b2d2      	uxtb	r2, r2
 800d7ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d7e8:	f7fb ffc2 	bl	8009770 <HAL_GetTick>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f0:	1ad3      	subs	r3, r2, r3
 800d7f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d803      	bhi.n	800d800 <HAL_SPI_TransmitReceive+0x2c6>
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7fe:	d102      	bne.n	800d806 <HAL_SPI_TransmitReceive+0x2cc>
 800d800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d802:	2b00      	cmp	r3, #0
 800d804:	d103      	bne.n	800d80e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d806:	2303      	movs	r3, #3
 800d808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d80c:	e029      	b.n	800d862 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d812:	b29b      	uxth	r3, r3
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1a2      	bne.n	800d75e <HAL_SPI_TransmitReceive+0x224>
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d19d      	bne.n	800d75e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d824:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f000 fa38 	bl	800dc9c <SPI_EndRxTxTransaction>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d006      	beq.n	800d840 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d832:	2301      	movs	r3, #1
 800d834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2220      	movs	r2, #32
 800d83c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d83e:	e010      	b.n	800d862 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	689b      	ldr	r3, [r3, #8]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d10b      	bne.n	800d860 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d848:	2300      	movs	r3, #0
 800d84a:	617b      	str	r3, [r7, #20]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	617b      	str	r3, [r7, #20]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	617b      	str	r3, [r7, #20]
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	e000      	b.n	800d862 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d860:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2201      	movs	r2, #1
 800d866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d872:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d876:	4618      	mov	r0, r3
 800d878:	3730      	adds	r7, #48	; 0x30
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
	...

0800d880 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b088      	sub	sp, #32
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10e      	bne.n	800d8c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d009      	beq.n	800d8c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d004      	beq.n	800d8c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	4798      	blx	r3
    return;
 800d8be:	e0ce      	b.n	800da5e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	f003 0302 	and.w	r3, r3, #2
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d009      	beq.n	800d8de <HAL_SPI_IRQHandler+0x5e>
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d004      	beq.n	800d8de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	4798      	blx	r3
    return;
 800d8dc:	e0bf      	b.n	800da5e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	f003 0320 	and.w	r3, r3, #32
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10a      	bne.n	800d8fe <HAL_SPI_IRQHandler+0x7e>
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d105      	bne.n	800d8fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f000 80b0 	beq.w	800da5e <HAL_SPI_IRQHandler+0x1de>
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	f003 0320 	and.w	r3, r3, #32
 800d904:	2b00      	cmp	r3, #0
 800d906:	f000 80aa 	beq.w	800da5e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d910:	2b00      	cmp	r3, #0
 800d912:	d023      	beq.n	800d95c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	2b03      	cmp	r3, #3
 800d91e:	d011      	beq.n	800d944 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d924:	f043 0204 	orr.w	r2, r3, #4
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d92c:	2300      	movs	r3, #0
 800d92e:	617b      	str	r3, [r7, #20]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	617b      	str	r3, [r7, #20]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	617b      	str	r3, [r7, #20]
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	e00b      	b.n	800d95c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d944:	2300      	movs	r3, #0
 800d946:	613b      	str	r3, [r7, #16]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	613b      	str	r3, [r7, #16]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	613b      	str	r3, [r7, #16]
 800d958:	693b      	ldr	r3, [r7, #16]
        return;
 800d95a:	e080      	b.n	800da5e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	f003 0320 	and.w	r3, r3, #32
 800d962:	2b00      	cmp	r3, #0
 800d964:	d014      	beq.n	800d990 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d96a:	f043 0201 	orr.w	r2, r3, #1
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d972:	2300      	movs	r3, #0
 800d974:	60fb      	str	r3, [r7, #12]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	689b      	ldr	r3, [r3, #8]
 800d97c:	60fb      	str	r3, [r7, #12]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d98c:	601a      	str	r2, [r3, #0]
 800d98e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00c      	beq.n	800d9b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d99e:	f043 0208 	orr.w	r2, r3, #8
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	60bb      	str	r3, [r7, #8]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	60bb      	str	r3, [r7, #8]
 800d9b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d04f      	beq.n	800da5c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	685a      	ldr	r2, [r3, #4]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d9ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	f003 0302 	and.w	r3, r3, #2
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d104      	bne.n	800d9e8 <HAL_SPI_IRQHandler+0x168>
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	f003 0301 	and.w	r3, r3, #1
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d034      	beq.n	800da52 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	685a      	ldr	r2, [r3, #4]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f022 0203 	bic.w	r2, r2, #3
 800d9f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d011      	beq.n	800da24 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da04:	4a17      	ldr	r2, [pc, #92]	; (800da64 <HAL_SPI_IRQHandler+0x1e4>)
 800da06:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7fc f8c2 	bl	8009b96 <HAL_DMA_Abort_IT>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d005      	beq.n	800da24 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d016      	beq.n	800da5a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da30:	4a0c      	ldr	r2, [pc, #48]	; (800da64 <HAL_SPI_IRQHandler+0x1e4>)
 800da32:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fc f8ac 	bl	8009b96 <HAL_DMA_Abort_IT>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00a      	beq.n	800da5a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800da50:	e003      	b.n	800da5a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f808 	bl	800da68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800da58:	e000      	b.n	800da5c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800da5a:	bf00      	nop
    return;
 800da5c:	bf00      	nop
  }
}
 800da5e:	3720      	adds	r7, #32
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	0800da99 	.word	0x0800da99

0800da68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800da70:	bf00      	nop
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800da8a:	b2db      	uxtb	r3, r3
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2200      	movs	r2, #0
 800daaa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2200      	movs	r2, #0
 800dab0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f7ff ffd8 	bl	800da68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dab8:	bf00      	nop
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b088      	sub	sp, #32
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	603b      	str	r3, [r7, #0]
 800dacc:	4613      	mov	r3, r2
 800dace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dad0:	f7fb fe4e 	bl	8009770 <HAL_GetTick>
 800dad4:	4602      	mov	r2, r0
 800dad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad8:	1a9b      	subs	r3, r3, r2
 800dada:	683a      	ldr	r2, [r7, #0]
 800dadc:	4413      	add	r3, r2
 800dade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dae0:	f7fb fe46 	bl	8009770 <HAL_GetTick>
 800dae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dae6:	4b39      	ldr	r3, [pc, #228]	; (800dbcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	015b      	lsls	r3, r3, #5
 800daec:	0d1b      	lsrs	r3, r3, #20
 800daee:	69fa      	ldr	r2, [r7, #28]
 800daf0:	fb02 f303 	mul.w	r3, r2, r3
 800daf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800daf6:	e054      	b.n	800dba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dafe:	d050      	beq.n	800dba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800db00:	f7fb fe36 	bl	8009770 <HAL_GetTick>
 800db04:	4602      	mov	r2, r0
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	1ad3      	subs	r3, r2, r3
 800db0a:	69fa      	ldr	r2, [r7, #28]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d902      	bls.n	800db16 <SPI_WaitFlagStateUntilTimeout+0x56>
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d13d      	bne.n	800db92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800db24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db2e:	d111      	bne.n	800db54 <SPI_WaitFlagStateUntilTimeout+0x94>
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db38:	d004      	beq.n	800db44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	689b      	ldr	r3, [r3, #8]
 800db3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db42:	d107      	bne.n	800db54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db5c:	d10f      	bne.n	800db7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800db6c:	601a      	str	r2, [r3, #0]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800db7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2201      	movs	r2, #1
 800db82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2200      	movs	r2, #0
 800db8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800db8e:	2303      	movs	r3, #3
 800db90:	e017      	b.n	800dbc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d101      	bne.n	800db9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800db98:	2300      	movs	r3, #0
 800db9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	3b01      	subs	r3, #1
 800dba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	689a      	ldr	r2, [r3, #8]
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	4013      	ands	r3, r2
 800dbac:	68ba      	ldr	r2, [r7, #8]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	bf0c      	ite	eq
 800dbb2:	2301      	moveq	r3, #1
 800dbb4:	2300      	movne	r3, #0
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	461a      	mov	r2, r3
 800dbba:	79fb      	ldrb	r3, [r7, #7]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d19b      	bne.n	800daf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dbc0:	2300      	movs	r3, #0
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3720      	adds	r7, #32
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	20000138 	.word	0x20000138

0800dbd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b086      	sub	sp, #24
 800dbd4:	af02      	add	r7, sp, #8
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dbe4:	d111      	bne.n	800dc0a <SPI_EndRxTransaction+0x3a>
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dbee:	d004      	beq.n	800dbfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	689b      	ldr	r3, [r3, #8]
 800dbf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbf8:	d107      	bne.n	800dc0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dc12:	d12a      	bne.n	800dc6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	689b      	ldr	r3, [r3, #8]
 800dc18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc1c:	d012      	beq.n	800dc44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	9300      	str	r3, [sp, #0]
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2200      	movs	r2, #0
 800dc26:	2180      	movs	r1, #128	; 0x80
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	f7ff ff49 	bl	800dac0 <SPI_WaitFlagStateUntilTimeout>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d02d      	beq.n	800dc90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc38:	f043 0220 	orr.w	r2, r3, #32
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800dc40:	2303      	movs	r3, #3
 800dc42:	e026      	b.n	800dc92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	2101      	movs	r1, #1
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f7ff ff36 	bl	800dac0 <SPI_WaitFlagStateUntilTimeout>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d01a      	beq.n	800dc90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc5e:	f043 0220 	orr.w	r2, r3, #32
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800dc66:	2303      	movs	r3, #3
 800dc68:	e013      	b.n	800dc92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	9300      	str	r3, [sp, #0]
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	2200      	movs	r2, #0
 800dc72:	2101      	movs	r1, #1
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f7ff ff23 	bl	800dac0 <SPI_WaitFlagStateUntilTimeout>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d007      	beq.n	800dc90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc84:	f043 0220 	orr.w	r2, r3, #32
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800dc8c:	2303      	movs	r3, #3
 800dc8e:	e000      	b.n	800dc92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
	...

0800dc9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b088      	sub	sp, #32
 800dca0:	af02      	add	r7, sp, #8
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800dca8:	4b1b      	ldr	r3, [pc, #108]	; (800dd18 <SPI_EndRxTxTransaction+0x7c>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a1b      	ldr	r2, [pc, #108]	; (800dd1c <SPI_EndRxTxTransaction+0x80>)
 800dcae:	fba2 2303 	umull	r2, r3, r2, r3
 800dcb2:	0d5b      	lsrs	r3, r3, #21
 800dcb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dcb8:	fb02 f303 	mul.w	r3, r2, r3
 800dcbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dcc6:	d112      	bne.n	800dcee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	2180      	movs	r1, #128	; 0x80
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	f7ff fef4 	bl	800dac0 <SPI_WaitFlagStateUntilTimeout>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d016      	beq.n	800dd0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dce2:	f043 0220 	orr.w	r2, r3, #32
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800dcea:	2303      	movs	r3, #3
 800dcec:	e00f      	b.n	800dd0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00a      	beq.n	800dd0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	3b01      	subs	r3, #1
 800dcf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd04:	2b80      	cmp	r3, #128	; 0x80
 800dd06:	d0f2      	beq.n	800dcee <SPI_EndRxTxTransaction+0x52>
 800dd08:	e000      	b.n	800dd0c <SPI_EndRxTxTransaction+0x70>
        break;
 800dd0a:	bf00      	nop
  }

  return HAL_OK;
 800dd0c:	2300      	movs	r3, #0
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3718      	adds	r7, #24
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	20000138 	.word	0x20000138
 800dd1c:	165e9f81 	.word	0x165e9f81

0800dd20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d101      	bne.n	800dd32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e03f      	b.n	800ddb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d106      	bne.n	800dd4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7fb fc32 	bl	80095b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2224      	movs	r2, #36	; 0x24
 800dd50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	68da      	ldr	r2, [r3, #12]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dd62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f000 fd7b 	bl	800e860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	691a      	ldr	r2, [r3, #16]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	695a      	ldr	r2, [r3, #20]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68da      	ldr	r2, [r3, #12]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dd98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2220      	movs	r2, #32
 800dda4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2220      	movs	r2, #32
 800ddac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ddb0:	2300      	movs	r3, #0
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3708      	adds	r7, #8
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b08a      	sub	sp, #40	; 0x28
 800ddbe:	af02      	add	r7, sp, #8
 800ddc0:	60f8      	str	r0, [r7, #12]
 800ddc2:	60b9      	str	r1, [r7, #8]
 800ddc4:	603b      	str	r3, [r7, #0]
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	2b20      	cmp	r3, #32
 800ddd8:	d17c      	bne.n	800ded4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d002      	beq.n	800dde6 <HAL_UART_Transmit+0x2c>
 800dde0:	88fb      	ldrh	r3, [r7, #6]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d101      	bne.n	800ddea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800dde6:	2301      	movs	r3, #1
 800dde8:	e075      	b.n	800ded6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d101      	bne.n	800ddf8 <HAL_UART_Transmit+0x3e>
 800ddf4:	2302      	movs	r3, #2
 800ddf6:	e06e      	b.n	800ded6 <HAL_UART_Transmit+0x11c>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2221      	movs	r2, #33	; 0x21
 800de0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de0e:	f7fb fcaf 	bl	8009770 <HAL_GetTick>
 800de12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	88fa      	ldrh	r2, [r7, #6]
 800de18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	88fa      	ldrh	r2, [r7, #6]
 800de1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de28:	d108      	bne.n	800de3c <HAL_UART_Transmit+0x82>
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	691b      	ldr	r3, [r3, #16]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d104      	bne.n	800de3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800de32:	2300      	movs	r3, #0
 800de34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	61bb      	str	r3, [r7, #24]
 800de3a:	e003      	b.n	800de44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de40:	2300      	movs	r3, #0
 800de42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800de4c:	e02a      	b.n	800dea4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	9300      	str	r3, [sp, #0]
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	2200      	movs	r2, #0
 800de56:	2180      	movs	r1, #128	; 0x80
 800de58:	68f8      	ldr	r0, [r7, #12]
 800de5a:	f000 faf9 	bl	800e450 <UART_WaitOnFlagUntilTimeout>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800de64:	2303      	movs	r3, #3
 800de66:	e036      	b.n	800ded6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d10b      	bne.n	800de86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	881b      	ldrh	r3, [r3, #0]
 800de72:	461a      	mov	r2, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	3302      	adds	r3, #2
 800de82:	61bb      	str	r3, [r7, #24]
 800de84:	e007      	b.n	800de96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	781a      	ldrb	r2, [r3, #0]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	3301      	adds	r3, #1
 800de94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	3b01      	subs	r3, #1
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d1cf      	bne.n	800de4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2200      	movs	r2, #0
 800deb6:	2140      	movs	r1, #64	; 0x40
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f000 fac9 	bl	800e450 <UART_WaitOnFlagUntilTimeout>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d001      	beq.n	800dec8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800dec4:	2303      	movs	r3, #3
 800dec6:	e006      	b.n	800ded6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2220      	movs	r2, #32
 800decc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	e000      	b.n	800ded6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ded4:	2302      	movs	r3, #2
  }
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3720      	adds	r7, #32
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
	...

0800dee0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b0ba      	sub	sp, #232	; 0xe8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	695b      	ldr	r3, [r3, #20]
 800df02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800df06:	2300      	movs	r3, #0
 800df08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800df0c:	2300      	movs	r3, #0
 800df0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800df12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df16:	f003 030f 	and.w	r3, r3, #15
 800df1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800df1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df22:	2b00      	cmp	r3, #0
 800df24:	d10f      	bne.n	800df46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800df26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df2a:	f003 0320 	and.w	r3, r3, #32
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d009      	beq.n	800df46 <HAL_UART_IRQHandler+0x66>
 800df32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df36:	f003 0320 	and.w	r3, r3, #32
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d003      	beq.n	800df46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 fbd3 	bl	800e6ea <UART_Receive_IT>
      return;
 800df44:	e256      	b.n	800e3f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800df46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	f000 80de 	beq.w	800e10c <HAL_UART_IRQHandler+0x22c>
 800df50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df54:	f003 0301 	and.w	r3, r3, #1
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d106      	bne.n	800df6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800df5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800df64:	2b00      	cmp	r3, #0
 800df66:	f000 80d1 	beq.w	800e10c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800df6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df6e:	f003 0301 	and.w	r3, r3, #1
 800df72:	2b00      	cmp	r3, #0
 800df74:	d00b      	beq.n	800df8e <HAL_UART_IRQHandler+0xae>
 800df76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d005      	beq.n	800df8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df86:	f043 0201 	orr.w	r2, r3, #1
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800df8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df92:	f003 0304 	and.w	r3, r3, #4
 800df96:	2b00      	cmp	r3, #0
 800df98:	d00b      	beq.n	800dfb2 <HAL_UART_IRQHandler+0xd2>
 800df9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df9e:	f003 0301 	and.w	r3, r3, #1
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d005      	beq.n	800dfb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfaa:	f043 0202 	orr.w	r2, r3, #2
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dfb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfb6:	f003 0302 	and.w	r3, r3, #2
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d00b      	beq.n	800dfd6 <HAL_UART_IRQHandler+0xf6>
 800dfbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfc2:	f003 0301 	and.w	r3, r3, #1
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d005      	beq.n	800dfd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfce:	f043 0204 	orr.w	r2, r3, #4
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800dfd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfda:	f003 0308 	and.w	r3, r3, #8
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d011      	beq.n	800e006 <HAL_UART_IRQHandler+0x126>
 800dfe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfe6:	f003 0320 	and.w	r3, r3, #32
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d105      	bne.n	800dffa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800dfee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dff2:	f003 0301 	and.w	r3, r3, #1
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d005      	beq.n	800e006 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dffe:	f043 0208 	orr.w	r2, r3, #8
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	f000 81ed 	beq.w	800e3ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e014:	f003 0320 	and.w	r3, r3, #32
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d008      	beq.n	800e02e <HAL_UART_IRQHandler+0x14e>
 800e01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e020:	f003 0320 	and.w	r3, r3, #32
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 fb5e 	bl	800e6ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	695b      	ldr	r3, [r3, #20]
 800e034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e038:	2b40      	cmp	r3, #64	; 0x40
 800e03a:	bf0c      	ite	eq
 800e03c:	2301      	moveq	r3, #1
 800e03e:	2300      	movne	r3, #0
 800e040:	b2db      	uxtb	r3, r3
 800e042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e04a:	f003 0308 	and.w	r3, r3, #8
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d103      	bne.n	800e05a <HAL_UART_IRQHandler+0x17a>
 800e052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e056:	2b00      	cmp	r3, #0
 800e058:	d04f      	beq.n	800e0fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fa66 	bl	800e52c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	695b      	ldr	r3, [r3, #20]
 800e066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e06a:	2b40      	cmp	r3, #64	; 0x40
 800e06c:	d141      	bne.n	800e0f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	3314      	adds	r3, #20
 800e074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e07c:	e853 3f00 	ldrex	r3, [r3]
 800e080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e08c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	3314      	adds	r3, #20
 800e096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e09a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e09e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e0a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e0aa:	e841 2300 	strex	r3, r2, [r1]
 800e0ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e0b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1d9      	bne.n	800e06e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d013      	beq.n	800e0ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0c6:	4a7d      	ldr	r2, [pc, #500]	; (800e2bc <HAL_UART_IRQHandler+0x3dc>)
 800e0c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fb fd61 	bl	8009b96 <HAL_DMA_Abort_IT>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d016      	beq.n	800e108 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e0e4:	4610      	mov	r0, r2
 800e0e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0e8:	e00e      	b.n	800e108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 f99a 	bl	800e424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0f0:	e00a      	b.n	800e108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 f996 	bl	800e424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0f8:	e006      	b.n	800e108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 f992 	bl	800e424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2200      	movs	r2, #0
 800e104:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800e106:	e170      	b.n	800e3ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e108:	bf00      	nop
    return;
 800e10a:	e16e      	b.n	800e3ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e110:	2b01      	cmp	r3, #1
 800e112:	f040 814a 	bne.w	800e3aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e11a:	f003 0310 	and.w	r3, r3, #16
 800e11e:	2b00      	cmp	r3, #0
 800e120:	f000 8143 	beq.w	800e3aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e128:	f003 0310 	and.w	r3, r3, #16
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	f000 813c 	beq.w	800e3aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e132:	2300      	movs	r3, #0
 800e134:	60bb      	str	r3, [r7, #8]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	60bb      	str	r3, [r7, #8]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	60bb      	str	r3, [r7, #8]
 800e146:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	695b      	ldr	r3, [r3, #20]
 800e14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e152:	2b40      	cmp	r3, #64	; 0x40
 800e154:	f040 80b4 	bne.w	800e2c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e164:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e168:	2b00      	cmp	r3, #0
 800e16a:	f000 8140 	beq.w	800e3ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e176:	429a      	cmp	r2, r3
 800e178:	f080 8139 	bcs.w	800e3ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e182:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e188:	69db      	ldr	r3, [r3, #28]
 800e18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e18e:	f000 8088 	beq.w	800e2a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	330c      	adds	r3, #12
 800e198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e19c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1a0:	e853 3f00 	ldrex	r3, [r3]
 800e1a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e1a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	330c      	adds	r3, #12
 800e1ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e1be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e1c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e1ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e1ce:	e841 2300 	strex	r3, r2, [r1]
 800e1d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e1d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d1d9      	bne.n	800e192 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3314      	adds	r3, #20
 800e1e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1e8:	e853 3f00 	ldrex	r3, [r3]
 800e1ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e1ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e1f0:	f023 0301 	bic.w	r3, r3, #1
 800e1f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	3314      	adds	r3, #20
 800e1fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e202:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e206:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e208:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e20a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e20e:	e841 2300 	strex	r3, r2, [r1]
 800e212:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1e1      	bne.n	800e1de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	3314      	adds	r3, #20
 800e220:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e224:	e853 3f00 	ldrex	r3, [r3]
 800e228:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e22a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e22c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	3314      	adds	r3, #20
 800e23a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e23e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e240:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e242:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e246:	e841 2300 	strex	r3, r2, [r1]
 800e24a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e24c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d1e3      	bne.n	800e21a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2220      	movs	r2, #32
 800e256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2200      	movs	r2, #0
 800e25e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	330c      	adds	r3, #12
 800e266:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e26a:	e853 3f00 	ldrex	r3, [r3]
 800e26e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e272:	f023 0310 	bic.w	r3, r3, #16
 800e276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	330c      	adds	r3, #12
 800e280:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e284:	65ba      	str	r2, [r7, #88]	; 0x58
 800e286:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e288:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e28a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e28c:	e841 2300 	strex	r3, r2, [r1]
 800e290:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1e3      	bne.n	800e260 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7fb fc0a 	bl	8009ab6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	1ad3      	subs	r3, r2, r3
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 f8c0 	bl	800e438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e2b8:	e099      	b.n	800e3ee <HAL_UART_IRQHandler+0x50e>
 800e2ba:	bf00      	nop
 800e2bc:	0800e5f3 	.word	0x0800e5f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	1ad3      	subs	r3, r2, r3
 800e2cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f000 808b 	beq.w	800e3f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800e2dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 8086 	beq.w	800e3f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	330c      	adds	r3, #12
 800e2ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f0:	e853 3f00 	ldrex	r3, [r3]
 800e2f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e2fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	330c      	adds	r3, #12
 800e306:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e30a:	647a      	str	r2, [r7, #68]	; 0x44
 800e30c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e30e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e312:	e841 2300 	strex	r3, r2, [r1]
 800e316:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d1e3      	bne.n	800e2e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	3314      	adds	r3, #20
 800e324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e328:	e853 3f00 	ldrex	r3, [r3]
 800e32c:	623b      	str	r3, [r7, #32]
   return(result);
 800e32e:	6a3b      	ldr	r3, [r7, #32]
 800e330:	f023 0301 	bic.w	r3, r3, #1
 800e334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	3314      	adds	r3, #20
 800e33e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e342:	633a      	str	r2, [r7, #48]	; 0x30
 800e344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e34a:	e841 2300 	strex	r3, r2, [r1]
 800e34e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e352:	2b00      	cmp	r3, #0
 800e354:	d1e3      	bne.n	800e31e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2220      	movs	r2, #32
 800e35a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2200      	movs	r2, #0
 800e362:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	330c      	adds	r3, #12
 800e36a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	e853 3f00 	ldrex	r3, [r3]
 800e372:	60fb      	str	r3, [r7, #12]
   return(result);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f023 0310 	bic.w	r3, r3, #16
 800e37a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	330c      	adds	r3, #12
 800e384:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e388:	61fa      	str	r2, [r7, #28]
 800e38a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e38c:	69b9      	ldr	r1, [r7, #24]
 800e38e:	69fa      	ldr	r2, [r7, #28]
 800e390:	e841 2300 	strex	r3, r2, [r1]
 800e394:	617b      	str	r3, [r7, #20]
   return(result);
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d1e3      	bne.n	800e364 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e39c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f848 	bl	800e438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e3a8:	e023      	b.n	800e3f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e3aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d009      	beq.n	800e3ca <HAL_UART_IRQHandler+0x4ea>
 800e3b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d003      	beq.n	800e3ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f929 	bl	800e61a <UART_Transmit_IT>
    return;
 800e3c8:	e014      	b.n	800e3f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e3ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d00e      	beq.n	800e3f4 <HAL_UART_IRQHandler+0x514>
 800e3d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d008      	beq.n	800e3f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 f969 	bl	800e6ba <UART_EndTransmit_IT>
    return;
 800e3e8:	e004      	b.n	800e3f4 <HAL_UART_IRQHandler+0x514>
    return;
 800e3ea:	bf00      	nop
 800e3ec:	e002      	b.n	800e3f4 <HAL_UART_IRQHandler+0x514>
      return;
 800e3ee:	bf00      	nop
 800e3f0:	e000      	b.n	800e3f4 <HAL_UART_IRQHandler+0x514>
      return;
 800e3f2:	bf00      	nop
  }
}
 800e3f4:	37e8      	adds	r7, #232	; 0xe8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop

0800e3fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e404:	bf00      	nop
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e418:	bf00      	nop
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e42c:	bf00      	nop
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	460b      	mov	r3, r1
 800e442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e444:	bf00      	nop
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b090      	sub	sp, #64	; 0x40
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	603b      	str	r3, [r7, #0]
 800e45c:	4613      	mov	r3, r2
 800e45e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e460:	e050      	b.n	800e504 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e468:	d04c      	beq.n	800e504 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e46a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d007      	beq.n	800e480 <UART_WaitOnFlagUntilTimeout+0x30>
 800e470:	f7fb f97e 	bl	8009770 <HAL_GetTick>
 800e474:	4602      	mov	r2, r0
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	1ad3      	subs	r3, r2, r3
 800e47a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d241      	bcs.n	800e504 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	330c      	adds	r3, #12
 800e486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	e853 3f00 	ldrex	r3, [r3]
 800e48e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e496:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	330c      	adds	r3, #12
 800e49e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4a0:	637a      	str	r2, [r7, #52]	; 0x34
 800e4a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e4a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4a8:	e841 2300 	strex	r3, r2, [r1]
 800e4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d1e5      	bne.n	800e480 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	3314      	adds	r3, #20
 800e4ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	e853 3f00 	ldrex	r3, [r3]
 800e4c2:	613b      	str	r3, [r7, #16]
   return(result);
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	f023 0301 	bic.w	r3, r3, #1
 800e4ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	3314      	adds	r3, #20
 800e4d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4d4:	623a      	str	r2, [r7, #32]
 800e4d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d8:	69f9      	ldr	r1, [r7, #28]
 800e4da:	6a3a      	ldr	r2, [r7, #32]
 800e4dc:	e841 2300 	strex	r3, r2, [r1]
 800e4e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1e5      	bne.n	800e4b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2220      	movs	r2, #32
 800e4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2220      	movs	r2, #32
 800e4f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e500:	2303      	movs	r3, #3
 800e502:	e00f      	b.n	800e524 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	4013      	ands	r3, r2
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	429a      	cmp	r2, r3
 800e512:	bf0c      	ite	eq
 800e514:	2301      	moveq	r3, #1
 800e516:	2300      	movne	r3, #0
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	461a      	mov	r2, r3
 800e51c:	79fb      	ldrb	r3, [r7, #7]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d09f      	beq.n	800e462 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e522:	2300      	movs	r3, #0
}
 800e524:	4618      	mov	r0, r3
 800e526:	3740      	adds	r7, #64	; 0x40
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b095      	sub	sp, #84	; 0x54
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	330c      	adds	r3, #12
 800e53a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e53e:	e853 3f00 	ldrex	r3, [r3]
 800e542:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e546:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e54a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	330c      	adds	r3, #12
 800e552:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e554:	643a      	str	r2, [r7, #64]	; 0x40
 800e556:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e558:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e55a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e55c:	e841 2300 	strex	r3, r2, [r1]
 800e560:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e564:	2b00      	cmp	r3, #0
 800e566:	d1e5      	bne.n	800e534 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	3314      	adds	r3, #20
 800e56e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e570:	6a3b      	ldr	r3, [r7, #32]
 800e572:	e853 3f00 	ldrex	r3, [r3]
 800e576:	61fb      	str	r3, [r7, #28]
   return(result);
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	f023 0301 	bic.w	r3, r3, #1
 800e57e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	3314      	adds	r3, #20
 800e586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e588:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e58a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e58c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e58e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e590:	e841 2300 	strex	r3, r2, [r1]
 800e594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d1e5      	bne.n	800e568 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5a0:	2b01      	cmp	r3, #1
 800e5a2:	d119      	bne.n	800e5d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	330c      	adds	r3, #12
 800e5aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	e853 3f00 	ldrex	r3, [r3]
 800e5b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	f023 0310 	bic.w	r3, r3, #16
 800e5ba:	647b      	str	r3, [r7, #68]	; 0x44
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	330c      	adds	r3, #12
 800e5c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5c4:	61ba      	str	r2, [r7, #24]
 800e5c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c8:	6979      	ldr	r1, [r7, #20]
 800e5ca:	69ba      	ldr	r2, [r7, #24]
 800e5cc:	e841 2300 	strex	r3, r2, [r1]
 800e5d0:	613b      	str	r3, [r7, #16]
   return(result);
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1e5      	bne.n	800e5a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2220      	movs	r2, #32
 800e5dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e5e6:	bf00      	nop
 800e5e8:	3754      	adds	r7, #84	; 0x54
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr

0800e5f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b084      	sub	sp, #16
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2200      	movs	r2, #0
 800e604:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2200      	movs	r2, #0
 800e60a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f7ff ff09 	bl	800e424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e612:	bf00      	nop
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e61a:	b480      	push	{r7}
 800e61c:	b085      	sub	sp, #20
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	2b21      	cmp	r3, #33	; 0x21
 800e62c:	d13e      	bne.n	800e6ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	689b      	ldr	r3, [r3, #8]
 800e632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e636:	d114      	bne.n	800e662 <UART_Transmit_IT+0x48>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d110      	bne.n	800e662 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6a1b      	ldr	r3, [r3, #32]
 800e644:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	881b      	ldrh	r3, [r3, #0]
 800e64a:	461a      	mov	r2, r3
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e654:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6a1b      	ldr	r3, [r3, #32]
 800e65a:	1c9a      	adds	r2, r3, #2
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	621a      	str	r2, [r3, #32]
 800e660:	e008      	b.n	800e674 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6a1b      	ldr	r3, [r3, #32]
 800e666:	1c59      	adds	r1, r3, #1
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	6211      	str	r1, [r2, #32]
 800e66c:	781a      	ldrb	r2, [r3, #0]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e678:	b29b      	uxth	r3, r3
 800e67a:	3b01      	subs	r3, #1
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	4619      	mov	r1, r3
 800e682:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e684:	2b00      	cmp	r3, #0
 800e686:	d10f      	bne.n	800e6a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	68da      	ldr	r2, [r3, #12]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e696:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	68da      	ldr	r2, [r3, #12]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e6a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	e000      	b.n	800e6ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e6ac:	2302      	movs	r3, #2
  }
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b082      	sub	sp, #8
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	68da      	ldr	r2, [r3, #12]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e6d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2220      	movs	r2, #32
 800e6d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f7ff fe8e 	bl	800e3fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e6e0:	2300      	movs	r3, #0
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3708      	adds	r7, #8
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b08c      	sub	sp, #48	; 0x30
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	2b22      	cmp	r3, #34	; 0x22
 800e6fc:	f040 80ab 	bne.w	800e856 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	689b      	ldr	r3, [r3, #8]
 800e704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e708:	d117      	bne.n	800e73a <UART_Receive_IT+0x50>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d113      	bne.n	800e73a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e712:	2300      	movs	r3, #0
 800e714:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e71a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	b29b      	uxth	r3, r3
 800e724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e728:	b29a      	uxth	r2, r3
 800e72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e732:	1c9a      	adds	r2, r3, #2
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	629a      	str	r2, [r3, #40]	; 0x28
 800e738:	e026      	b.n	800e788 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e73e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800e740:	2300      	movs	r3, #0
 800e742:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e74c:	d007      	beq.n	800e75e <UART_Receive_IT+0x74>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	689b      	ldr	r3, [r3, #8]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d10a      	bne.n	800e76c <UART_Receive_IT+0x82>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	691b      	ldr	r3, [r3, #16]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d106      	bne.n	800e76c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	b2da      	uxtb	r2, r3
 800e766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e768:	701a      	strb	r2, [r3, #0]
 800e76a:	e008      	b.n	800e77e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	b2db      	uxtb	r3, r3
 800e774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e782:	1c5a      	adds	r2, r3, #1
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	3b01      	subs	r3, #1
 800e790:	b29b      	uxth	r3, r3
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	4619      	mov	r1, r3
 800e796:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d15a      	bne.n	800e852 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	68da      	ldr	r2, [r3, #12]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f022 0220 	bic.w	r2, r2, #32
 800e7aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	68da      	ldr	r2, [r3, #12]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e7ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	695a      	ldr	r2, [r3, #20]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f022 0201 	bic.w	r2, r2, #1
 800e7ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2220      	movs	r2, #32
 800e7d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	d135      	bne.n	800e848 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	330c      	adds	r3, #12
 800e7e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	e853 3f00 	ldrex	r3, [r3]
 800e7f0:	613b      	str	r3, [r7, #16]
   return(result);
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	f023 0310 	bic.w	r3, r3, #16
 800e7f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	330c      	adds	r3, #12
 800e800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e802:	623a      	str	r2, [r7, #32]
 800e804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e806:	69f9      	ldr	r1, [r7, #28]
 800e808:	6a3a      	ldr	r2, [r7, #32]
 800e80a:	e841 2300 	strex	r3, r2, [r1]
 800e80e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d1e5      	bne.n	800e7e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f003 0310 	and.w	r3, r3, #16
 800e820:	2b10      	cmp	r3, #16
 800e822:	d10a      	bne.n	800e83a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e824:	2300      	movs	r3, #0
 800e826:	60fb      	str	r3, [r7, #12]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	60fb      	str	r3, [r7, #12]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	60fb      	str	r3, [r7, #12]
 800e838:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e83e:	4619      	mov	r1, r3
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff fdf9 	bl	800e438 <HAL_UARTEx_RxEventCallback>
 800e846:	e002      	b.n	800e84e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7ff fde1 	bl	800e410 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e84e:	2300      	movs	r3, #0
 800e850:	e002      	b.n	800e858 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	e000      	b.n	800e858 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800e856:	2302      	movs	r3, #2
  }
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3730      	adds	r7, #48	; 0x30
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e864:	b0c0      	sub	sp, #256	; 0x100
 800e866:	af00      	add	r7, sp, #0
 800e868:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e86c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e87c:	68d9      	ldr	r1, [r3, #12]
 800e87e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	ea40 0301 	orr.w	r3, r0, r1
 800e888:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e88e:	689a      	ldr	r2, [r3, #8]
 800e890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e894:	691b      	ldr	r3, [r3, #16]
 800e896:	431a      	orrs	r2, r3
 800e898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e89c:	695b      	ldr	r3, [r3, #20]
 800e89e:	431a      	orrs	r2, r3
 800e8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8a4:	69db      	ldr	r3, [r3, #28]
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e8ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e8b8:	f021 010c 	bic.w	r1, r1, #12
 800e8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e8c6:	430b      	orrs	r3, r1
 800e8c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e8ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	695b      	ldr	r3, [r3, #20]
 800e8d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8da:	6999      	ldr	r1, [r3, #24]
 800e8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	ea40 0301 	orr.w	r3, r0, r1
 800e8e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e8e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8ec:	681a      	ldr	r2, [r3, #0]
 800e8ee:	4b8f      	ldr	r3, [pc, #572]	; (800eb2c <UART_SetConfig+0x2cc>)
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d005      	beq.n	800e900 <UART_SetConfig+0xa0>
 800e8f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	4b8d      	ldr	r3, [pc, #564]	; (800eb30 <UART_SetConfig+0x2d0>)
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d104      	bne.n	800e90a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e900:	f7fd fff2 	bl	800c8e8 <HAL_RCC_GetPCLK2Freq>
 800e904:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e908:	e003      	b.n	800e912 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e90a:	f7fd ffd9 	bl	800c8c0 <HAL_RCC_GetPCLK1Freq>
 800e90e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e916:	69db      	ldr	r3, [r3, #28]
 800e918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e91c:	f040 810c 	bne.w	800eb38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e924:	2200      	movs	r2, #0
 800e926:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e92a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e92e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e932:	4622      	mov	r2, r4
 800e934:	462b      	mov	r3, r5
 800e936:	1891      	adds	r1, r2, r2
 800e938:	65b9      	str	r1, [r7, #88]	; 0x58
 800e93a:	415b      	adcs	r3, r3
 800e93c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e93e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e942:	4621      	mov	r1, r4
 800e944:	eb12 0801 	adds.w	r8, r2, r1
 800e948:	4629      	mov	r1, r5
 800e94a:	eb43 0901 	adc.w	r9, r3, r1
 800e94e:	f04f 0200 	mov.w	r2, #0
 800e952:	f04f 0300 	mov.w	r3, #0
 800e956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e95a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e95e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e962:	4690      	mov	r8, r2
 800e964:	4699      	mov	r9, r3
 800e966:	4623      	mov	r3, r4
 800e968:	eb18 0303 	adds.w	r3, r8, r3
 800e96c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e970:	462b      	mov	r3, r5
 800e972:	eb49 0303 	adc.w	r3, r9, r3
 800e976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e97a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e986:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e98a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e98e:	460b      	mov	r3, r1
 800e990:	18db      	adds	r3, r3, r3
 800e992:	653b      	str	r3, [r7, #80]	; 0x50
 800e994:	4613      	mov	r3, r2
 800e996:	eb42 0303 	adc.w	r3, r2, r3
 800e99a:	657b      	str	r3, [r7, #84]	; 0x54
 800e99c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e9a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e9a4:	f7f5 fc64 	bl	8004270 <__aeabi_uldivmod>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	4b61      	ldr	r3, [pc, #388]	; (800eb34 <UART_SetConfig+0x2d4>)
 800e9ae:	fba3 2302 	umull	r2, r3, r3, r2
 800e9b2:	095b      	lsrs	r3, r3, #5
 800e9b4:	011c      	lsls	r4, r3, #4
 800e9b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e9c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e9c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e9c8:	4642      	mov	r2, r8
 800e9ca:	464b      	mov	r3, r9
 800e9cc:	1891      	adds	r1, r2, r2
 800e9ce:	64b9      	str	r1, [r7, #72]	; 0x48
 800e9d0:	415b      	adcs	r3, r3
 800e9d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e9d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e9d8:	4641      	mov	r1, r8
 800e9da:	eb12 0a01 	adds.w	sl, r2, r1
 800e9de:	4649      	mov	r1, r9
 800e9e0:	eb43 0b01 	adc.w	fp, r3, r1
 800e9e4:	f04f 0200 	mov.w	r2, #0
 800e9e8:	f04f 0300 	mov.w	r3, #0
 800e9ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e9f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e9f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e9f8:	4692      	mov	sl, r2
 800e9fa:	469b      	mov	fp, r3
 800e9fc:	4643      	mov	r3, r8
 800e9fe:	eb1a 0303 	adds.w	r3, sl, r3
 800ea02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ea06:	464b      	mov	r3, r9
 800ea08:	eb4b 0303 	adc.w	r3, fp, r3
 800ea0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ea10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ea1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ea20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ea24:	460b      	mov	r3, r1
 800ea26:	18db      	adds	r3, r3, r3
 800ea28:	643b      	str	r3, [r7, #64]	; 0x40
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	eb42 0303 	adc.w	r3, r2, r3
 800ea30:	647b      	str	r3, [r7, #68]	; 0x44
 800ea32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ea36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ea3a:	f7f5 fc19 	bl	8004270 <__aeabi_uldivmod>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	4611      	mov	r1, r2
 800ea44:	4b3b      	ldr	r3, [pc, #236]	; (800eb34 <UART_SetConfig+0x2d4>)
 800ea46:	fba3 2301 	umull	r2, r3, r3, r1
 800ea4a:	095b      	lsrs	r3, r3, #5
 800ea4c:	2264      	movs	r2, #100	; 0x64
 800ea4e:	fb02 f303 	mul.w	r3, r2, r3
 800ea52:	1acb      	subs	r3, r1, r3
 800ea54:	00db      	lsls	r3, r3, #3
 800ea56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ea5a:	4b36      	ldr	r3, [pc, #216]	; (800eb34 <UART_SetConfig+0x2d4>)
 800ea5c:	fba3 2302 	umull	r2, r3, r3, r2
 800ea60:	095b      	lsrs	r3, r3, #5
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ea68:	441c      	add	r4, r3
 800ea6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ea74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ea78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ea7c:	4642      	mov	r2, r8
 800ea7e:	464b      	mov	r3, r9
 800ea80:	1891      	adds	r1, r2, r2
 800ea82:	63b9      	str	r1, [r7, #56]	; 0x38
 800ea84:	415b      	adcs	r3, r3
 800ea86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ea8c:	4641      	mov	r1, r8
 800ea8e:	1851      	adds	r1, r2, r1
 800ea90:	6339      	str	r1, [r7, #48]	; 0x30
 800ea92:	4649      	mov	r1, r9
 800ea94:	414b      	adcs	r3, r1
 800ea96:	637b      	str	r3, [r7, #52]	; 0x34
 800ea98:	f04f 0200 	mov.w	r2, #0
 800ea9c:	f04f 0300 	mov.w	r3, #0
 800eaa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800eaa4:	4659      	mov	r1, fp
 800eaa6:	00cb      	lsls	r3, r1, #3
 800eaa8:	4651      	mov	r1, sl
 800eaaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800eaae:	4651      	mov	r1, sl
 800eab0:	00ca      	lsls	r2, r1, #3
 800eab2:	4610      	mov	r0, r2
 800eab4:	4619      	mov	r1, r3
 800eab6:	4603      	mov	r3, r0
 800eab8:	4642      	mov	r2, r8
 800eaba:	189b      	adds	r3, r3, r2
 800eabc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eac0:	464b      	mov	r3, r9
 800eac2:	460a      	mov	r2, r1
 800eac4:	eb42 0303 	adc.w	r3, r2, r3
 800eac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eacc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	2200      	movs	r2, #0
 800ead4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ead8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800eadc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800eae0:	460b      	mov	r3, r1
 800eae2:	18db      	adds	r3, r3, r3
 800eae4:	62bb      	str	r3, [r7, #40]	; 0x28
 800eae6:	4613      	mov	r3, r2
 800eae8:	eb42 0303 	adc.w	r3, r2, r3
 800eaec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eaee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800eaf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800eaf6:	f7f5 fbbb 	bl	8004270 <__aeabi_uldivmod>
 800eafa:	4602      	mov	r2, r0
 800eafc:	460b      	mov	r3, r1
 800eafe:	4b0d      	ldr	r3, [pc, #52]	; (800eb34 <UART_SetConfig+0x2d4>)
 800eb00:	fba3 1302 	umull	r1, r3, r3, r2
 800eb04:	095b      	lsrs	r3, r3, #5
 800eb06:	2164      	movs	r1, #100	; 0x64
 800eb08:	fb01 f303 	mul.w	r3, r1, r3
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	00db      	lsls	r3, r3, #3
 800eb10:	3332      	adds	r3, #50	; 0x32
 800eb12:	4a08      	ldr	r2, [pc, #32]	; (800eb34 <UART_SetConfig+0x2d4>)
 800eb14:	fba2 2303 	umull	r2, r3, r2, r3
 800eb18:	095b      	lsrs	r3, r3, #5
 800eb1a:	f003 0207 	and.w	r2, r3, #7
 800eb1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4422      	add	r2, r4
 800eb26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800eb28:	e106      	b.n	800ed38 <UART_SetConfig+0x4d8>
 800eb2a:	bf00      	nop
 800eb2c:	40011000 	.word	0x40011000
 800eb30:	40011400 	.word	0x40011400
 800eb34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800eb38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800eb42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800eb46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800eb4a:	4642      	mov	r2, r8
 800eb4c:	464b      	mov	r3, r9
 800eb4e:	1891      	adds	r1, r2, r2
 800eb50:	6239      	str	r1, [r7, #32]
 800eb52:	415b      	adcs	r3, r3
 800eb54:	627b      	str	r3, [r7, #36]	; 0x24
 800eb56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eb5a:	4641      	mov	r1, r8
 800eb5c:	1854      	adds	r4, r2, r1
 800eb5e:	4649      	mov	r1, r9
 800eb60:	eb43 0501 	adc.w	r5, r3, r1
 800eb64:	f04f 0200 	mov.w	r2, #0
 800eb68:	f04f 0300 	mov.w	r3, #0
 800eb6c:	00eb      	lsls	r3, r5, #3
 800eb6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800eb72:	00e2      	lsls	r2, r4, #3
 800eb74:	4614      	mov	r4, r2
 800eb76:	461d      	mov	r5, r3
 800eb78:	4643      	mov	r3, r8
 800eb7a:	18e3      	adds	r3, r4, r3
 800eb7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800eb80:	464b      	mov	r3, r9
 800eb82:	eb45 0303 	adc.w	r3, r5, r3
 800eb86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800eb8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800eb96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800eb9a:	f04f 0200 	mov.w	r2, #0
 800eb9e:	f04f 0300 	mov.w	r3, #0
 800eba2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800eba6:	4629      	mov	r1, r5
 800eba8:	008b      	lsls	r3, r1, #2
 800ebaa:	4621      	mov	r1, r4
 800ebac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ebb0:	4621      	mov	r1, r4
 800ebb2:	008a      	lsls	r2, r1, #2
 800ebb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ebb8:	f7f5 fb5a 	bl	8004270 <__aeabi_uldivmod>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	4b60      	ldr	r3, [pc, #384]	; (800ed44 <UART_SetConfig+0x4e4>)
 800ebc2:	fba3 2302 	umull	r2, r3, r3, r2
 800ebc6:	095b      	lsrs	r3, r3, #5
 800ebc8:	011c      	lsls	r4, r3, #4
 800ebca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ebd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ebd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ebdc:	4642      	mov	r2, r8
 800ebde:	464b      	mov	r3, r9
 800ebe0:	1891      	adds	r1, r2, r2
 800ebe2:	61b9      	str	r1, [r7, #24]
 800ebe4:	415b      	adcs	r3, r3
 800ebe6:	61fb      	str	r3, [r7, #28]
 800ebe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ebec:	4641      	mov	r1, r8
 800ebee:	1851      	adds	r1, r2, r1
 800ebf0:	6139      	str	r1, [r7, #16]
 800ebf2:	4649      	mov	r1, r9
 800ebf4:	414b      	adcs	r3, r1
 800ebf6:	617b      	str	r3, [r7, #20]
 800ebf8:	f04f 0200 	mov.w	r2, #0
 800ebfc:	f04f 0300 	mov.w	r3, #0
 800ec00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ec04:	4659      	mov	r1, fp
 800ec06:	00cb      	lsls	r3, r1, #3
 800ec08:	4651      	mov	r1, sl
 800ec0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ec0e:	4651      	mov	r1, sl
 800ec10:	00ca      	lsls	r2, r1, #3
 800ec12:	4610      	mov	r0, r2
 800ec14:	4619      	mov	r1, r3
 800ec16:	4603      	mov	r3, r0
 800ec18:	4642      	mov	r2, r8
 800ec1a:	189b      	adds	r3, r3, r2
 800ec1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ec20:	464b      	mov	r3, r9
 800ec22:	460a      	mov	r2, r1
 800ec24:	eb42 0303 	adc.w	r3, r2, r3
 800ec28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ec2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	2200      	movs	r2, #0
 800ec34:	67bb      	str	r3, [r7, #120]	; 0x78
 800ec36:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ec38:	f04f 0200 	mov.w	r2, #0
 800ec3c:	f04f 0300 	mov.w	r3, #0
 800ec40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ec44:	4649      	mov	r1, r9
 800ec46:	008b      	lsls	r3, r1, #2
 800ec48:	4641      	mov	r1, r8
 800ec4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ec4e:	4641      	mov	r1, r8
 800ec50:	008a      	lsls	r2, r1, #2
 800ec52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ec56:	f7f5 fb0b 	bl	8004270 <__aeabi_uldivmod>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	4611      	mov	r1, r2
 800ec60:	4b38      	ldr	r3, [pc, #224]	; (800ed44 <UART_SetConfig+0x4e4>)
 800ec62:	fba3 2301 	umull	r2, r3, r3, r1
 800ec66:	095b      	lsrs	r3, r3, #5
 800ec68:	2264      	movs	r2, #100	; 0x64
 800ec6a:	fb02 f303 	mul.w	r3, r2, r3
 800ec6e:	1acb      	subs	r3, r1, r3
 800ec70:	011b      	lsls	r3, r3, #4
 800ec72:	3332      	adds	r3, #50	; 0x32
 800ec74:	4a33      	ldr	r2, [pc, #204]	; (800ed44 <UART_SetConfig+0x4e4>)
 800ec76:	fba2 2303 	umull	r2, r3, r2, r3
 800ec7a:	095b      	lsrs	r3, r3, #5
 800ec7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec80:	441c      	add	r4, r3
 800ec82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ec86:	2200      	movs	r2, #0
 800ec88:	673b      	str	r3, [r7, #112]	; 0x70
 800ec8a:	677a      	str	r2, [r7, #116]	; 0x74
 800ec8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ec90:	4642      	mov	r2, r8
 800ec92:	464b      	mov	r3, r9
 800ec94:	1891      	adds	r1, r2, r2
 800ec96:	60b9      	str	r1, [r7, #8]
 800ec98:	415b      	adcs	r3, r3
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eca0:	4641      	mov	r1, r8
 800eca2:	1851      	adds	r1, r2, r1
 800eca4:	6039      	str	r1, [r7, #0]
 800eca6:	4649      	mov	r1, r9
 800eca8:	414b      	adcs	r3, r1
 800ecaa:	607b      	str	r3, [r7, #4]
 800ecac:	f04f 0200 	mov.w	r2, #0
 800ecb0:	f04f 0300 	mov.w	r3, #0
 800ecb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ecb8:	4659      	mov	r1, fp
 800ecba:	00cb      	lsls	r3, r1, #3
 800ecbc:	4651      	mov	r1, sl
 800ecbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ecc2:	4651      	mov	r1, sl
 800ecc4:	00ca      	lsls	r2, r1, #3
 800ecc6:	4610      	mov	r0, r2
 800ecc8:	4619      	mov	r1, r3
 800ecca:	4603      	mov	r3, r0
 800eccc:	4642      	mov	r2, r8
 800ecce:	189b      	adds	r3, r3, r2
 800ecd0:	66bb      	str	r3, [r7, #104]	; 0x68
 800ecd2:	464b      	mov	r3, r9
 800ecd4:	460a      	mov	r2, r1
 800ecd6:	eb42 0303 	adc.w	r3, r2, r3
 800ecda:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ecdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	663b      	str	r3, [r7, #96]	; 0x60
 800ece6:	667a      	str	r2, [r7, #100]	; 0x64
 800ece8:	f04f 0200 	mov.w	r2, #0
 800ecec:	f04f 0300 	mov.w	r3, #0
 800ecf0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ecf4:	4649      	mov	r1, r9
 800ecf6:	008b      	lsls	r3, r1, #2
 800ecf8:	4641      	mov	r1, r8
 800ecfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ecfe:	4641      	mov	r1, r8
 800ed00:	008a      	lsls	r2, r1, #2
 800ed02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ed06:	f7f5 fab3 	bl	8004270 <__aeabi_uldivmod>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	4b0d      	ldr	r3, [pc, #52]	; (800ed44 <UART_SetConfig+0x4e4>)
 800ed10:	fba3 1302 	umull	r1, r3, r3, r2
 800ed14:	095b      	lsrs	r3, r3, #5
 800ed16:	2164      	movs	r1, #100	; 0x64
 800ed18:	fb01 f303 	mul.w	r3, r1, r3
 800ed1c:	1ad3      	subs	r3, r2, r3
 800ed1e:	011b      	lsls	r3, r3, #4
 800ed20:	3332      	adds	r3, #50	; 0x32
 800ed22:	4a08      	ldr	r2, [pc, #32]	; (800ed44 <UART_SetConfig+0x4e4>)
 800ed24:	fba2 2303 	umull	r2, r3, r2, r3
 800ed28:	095b      	lsrs	r3, r3, #5
 800ed2a:	f003 020f 	and.w	r2, r3, #15
 800ed2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4422      	add	r2, r4
 800ed36:	609a      	str	r2, [r3, #8]
}
 800ed38:	bf00      	nop
 800ed3a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ed44:	51eb851f 	.word	0x51eb851f

0800ed48 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2b10      	cmp	r3, #16
 800ed58:	d11c      	bne.n	800ed94 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	4b1f      	ldr	r3, [pc, #124]	; (800eddc <FSMC_NAND_Init+0x94>)
 800ed60:	4013      	ands	r3, r2
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	6851      	ldr	r1, [r2, #4]
 800ed66:	683a      	ldr	r2, [r7, #0]
 800ed68:	6892      	ldr	r2, [r2, #8]
 800ed6a:	4311      	orrs	r1, r2
 800ed6c:	683a      	ldr	r2, [r7, #0]
 800ed6e:	68d2      	ldr	r2, [r2, #12]
 800ed70:	4311      	orrs	r1, r2
 800ed72:	683a      	ldr	r2, [r7, #0]
 800ed74:	6912      	ldr	r2, [r2, #16]
 800ed76:	4311      	orrs	r1, r2
 800ed78:	683a      	ldr	r2, [r7, #0]
 800ed7a:	6952      	ldr	r2, [r2, #20]
 800ed7c:	0252      	lsls	r2, r2, #9
 800ed7e:	4311      	orrs	r1, r2
 800ed80:	683a      	ldr	r2, [r7, #0]
 800ed82:	6992      	ldr	r2, [r2, #24]
 800ed84:	0352      	lsls	r2, r2, #13
 800ed86:	430a      	orrs	r2, r1
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	f043 0208 	orr.w	r2, r3, #8
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	601a      	str	r2, [r3, #0]
 800ed92:	e01b      	b.n	800edcc <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6a1a      	ldr	r2, [r3, #32]
 800ed98:	4b10      	ldr	r3, [pc, #64]	; (800eddc <FSMC_NAND_Init+0x94>)
 800ed9a:	4013      	ands	r3, r2
 800ed9c:	683a      	ldr	r2, [r7, #0]
 800ed9e:	6851      	ldr	r1, [r2, #4]
 800eda0:	683a      	ldr	r2, [r7, #0]
 800eda2:	6892      	ldr	r2, [r2, #8]
 800eda4:	4311      	orrs	r1, r2
 800eda6:	683a      	ldr	r2, [r7, #0]
 800eda8:	68d2      	ldr	r2, [r2, #12]
 800edaa:	4311      	orrs	r1, r2
 800edac:	683a      	ldr	r2, [r7, #0]
 800edae:	6912      	ldr	r2, [r2, #16]
 800edb0:	4311      	orrs	r1, r2
 800edb2:	683a      	ldr	r2, [r7, #0]
 800edb4:	6952      	ldr	r2, [r2, #20]
 800edb6:	0252      	lsls	r2, r2, #9
 800edb8:	4311      	orrs	r1, r2
 800edba:	683a      	ldr	r2, [r7, #0]
 800edbc:	6992      	ldr	r2, [r2, #24]
 800edbe:	0352      	lsls	r2, r2, #13
 800edc0:	430a      	orrs	r2, r1
 800edc2:	4313      	orrs	r3, r2
 800edc4:	f043 0208 	orr.w	r2, r3, #8
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 800edcc:	2300      	movs	r3, #0
}
 800edce:	4618      	mov	r0, r3
 800edd0:	370c      	adds	r7, #12
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop
 800eddc:	fff00181 	.word	0xfff00181

0800ede0 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b085      	sub	sp, #20
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b10      	cmp	r3, #16
 800edf0:	d112      	bne.n	800ee18 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	021b      	lsls	r3, r3, #8
 800ee00:	431a      	orrs	r2, r3
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	689b      	ldr	r3, [r3, #8]
 800ee06:	041b      	lsls	r3, r3, #16
 800ee08:	431a      	orrs	r2, r3
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	68db      	ldr	r3, [r3, #12]
 800ee0e:	061b      	lsls	r3, r3, #24
 800ee10:	431a      	orrs	r2, r3
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	609a      	str	r2, [r3, #8]
 800ee16:	e011      	b.n	800ee3c <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	021b      	lsls	r3, r3, #8
 800ee26:	431a      	orrs	r2, r3
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	041b      	lsls	r3, r3, #16
 800ee2e:	431a      	orrs	r2, r3
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	061b      	lsls	r3, r3, #24
 800ee36:	431a      	orrs	r2, r3
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3714      	adds	r7, #20
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr

0800ee4a <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800ee4a:	b480      	push	{r7}
 800ee4c:	b085      	sub	sp, #20
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	60f8      	str	r0, [r7, #12]
 800ee52:	60b9      	str	r1, [r7, #8]
 800ee54:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2b10      	cmp	r3, #16
 800ee5a:	d112      	bne.n	800ee82 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	685b      	ldr	r3, [r3, #4]
 800ee68:	021b      	lsls	r3, r3, #8
 800ee6a:	431a      	orrs	r2, r3
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	041b      	lsls	r3, r3, #16
 800ee72:	431a      	orrs	r2, r3
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	061b      	lsls	r3, r3, #24
 800ee7a:	431a      	orrs	r2, r3
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	60da      	str	r2, [r3, #12]
 800ee80:	e011      	b.n	800eea6 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	021b      	lsls	r3, r3, #8
 800ee90:	431a      	orrs	r2, r3
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	041b      	lsls	r3, r3, #16
 800ee98:	431a      	orrs	r2, r3
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	061b      	lsls	r3, r3, #24
 800eea0:	431a      	orrs	r2, r3
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 800eea6:	2300      	movs	r3, #0
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3714      	adds	r7, #20
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eeb4:	b084      	sub	sp, #16
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b084      	sub	sp, #16
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
 800eebe:	f107 001c 	add.w	r0, r7, #28
 800eec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d122      	bne.n	800ef12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800eee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800eef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d105      	bne.n	800ef06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f001 fbee 	bl	80106e8 <USB_CoreReset>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	73fb      	strb	r3, [r7, #15]
 800ef10:	e01a      	b.n	800ef48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f001 fbe2 	bl	80106e8 <USB_CoreReset>
 800ef24:	4603      	mov	r3, r0
 800ef26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ef28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d106      	bne.n	800ef3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	639a      	str	r2, [r3, #56]	; 0x38
 800ef3a:	e005      	b.n	800ef48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ef48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d10b      	bne.n	800ef66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	f043 0206 	orr.w	r2, r3, #6
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	689b      	ldr	r3, [r3, #8]
 800ef5e:	f043 0220 	orr.w	r2, r3, #32
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ef66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3710      	adds	r7, #16
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ef72:	b004      	add	sp, #16
 800ef74:	4770      	bx	lr
	...

0800ef78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b087      	sub	sp, #28
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	4613      	mov	r3, r2
 800ef84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ef86:	79fb      	ldrb	r3, [r7, #7]
 800ef88:	2b02      	cmp	r3, #2
 800ef8a:	d165      	bne.n	800f058 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	4a41      	ldr	r2, [pc, #260]	; (800f094 <USB_SetTurnaroundTime+0x11c>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d906      	bls.n	800efa2 <USB_SetTurnaroundTime+0x2a>
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	4a40      	ldr	r2, [pc, #256]	; (800f098 <USB_SetTurnaroundTime+0x120>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d202      	bcs.n	800efa2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ef9c:	230f      	movs	r3, #15
 800ef9e:	617b      	str	r3, [r7, #20]
 800efa0:	e062      	b.n	800f068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	4a3c      	ldr	r2, [pc, #240]	; (800f098 <USB_SetTurnaroundTime+0x120>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d306      	bcc.n	800efb8 <USB_SetTurnaroundTime+0x40>
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	4a3b      	ldr	r2, [pc, #236]	; (800f09c <USB_SetTurnaroundTime+0x124>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d202      	bcs.n	800efb8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800efb2:	230e      	movs	r3, #14
 800efb4:	617b      	str	r3, [r7, #20]
 800efb6:	e057      	b.n	800f068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	4a38      	ldr	r2, [pc, #224]	; (800f09c <USB_SetTurnaroundTime+0x124>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d306      	bcc.n	800efce <USB_SetTurnaroundTime+0x56>
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	4a37      	ldr	r2, [pc, #220]	; (800f0a0 <USB_SetTurnaroundTime+0x128>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d202      	bcs.n	800efce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800efc8:	230d      	movs	r3, #13
 800efca:	617b      	str	r3, [r7, #20]
 800efcc:	e04c      	b.n	800f068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	4a33      	ldr	r2, [pc, #204]	; (800f0a0 <USB_SetTurnaroundTime+0x128>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d306      	bcc.n	800efe4 <USB_SetTurnaroundTime+0x6c>
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	4a32      	ldr	r2, [pc, #200]	; (800f0a4 <USB_SetTurnaroundTime+0x12c>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d802      	bhi.n	800efe4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800efde:	230c      	movs	r3, #12
 800efe0:	617b      	str	r3, [r7, #20]
 800efe2:	e041      	b.n	800f068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	4a2f      	ldr	r2, [pc, #188]	; (800f0a4 <USB_SetTurnaroundTime+0x12c>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d906      	bls.n	800effa <USB_SetTurnaroundTime+0x82>
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	4a2e      	ldr	r2, [pc, #184]	; (800f0a8 <USB_SetTurnaroundTime+0x130>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d802      	bhi.n	800effa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800eff4:	230b      	movs	r3, #11
 800eff6:	617b      	str	r3, [r7, #20]
 800eff8:	e036      	b.n	800f068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	4a2a      	ldr	r2, [pc, #168]	; (800f0a8 <USB_SetTurnaroundTime+0x130>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d906      	bls.n	800f010 <USB_SetTurnaroundTime+0x98>
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	4a29      	ldr	r2, [pc, #164]	; (800f0ac <USB_SetTurnaroundTime+0x134>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d802      	bhi.n	800f010 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f00a:	230a      	movs	r3, #10
 800f00c:	617b      	str	r3, [r7, #20]
 800f00e:	e02b      	b.n	800f068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	4a26      	ldr	r2, [pc, #152]	; (800f0ac <USB_SetTurnaroundTime+0x134>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d906      	bls.n	800f026 <USB_SetTurnaroundTime+0xae>
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	4a25      	ldr	r2, [pc, #148]	; (800f0b0 <USB_SetTurnaroundTime+0x138>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d202      	bcs.n	800f026 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f020:	2309      	movs	r3, #9
 800f022:	617b      	str	r3, [r7, #20]
 800f024:	e020      	b.n	800f068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	4a21      	ldr	r2, [pc, #132]	; (800f0b0 <USB_SetTurnaroundTime+0x138>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d306      	bcc.n	800f03c <USB_SetTurnaroundTime+0xc4>
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	4a20      	ldr	r2, [pc, #128]	; (800f0b4 <USB_SetTurnaroundTime+0x13c>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d802      	bhi.n	800f03c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f036:	2308      	movs	r3, #8
 800f038:	617b      	str	r3, [r7, #20]
 800f03a:	e015      	b.n	800f068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	4a1d      	ldr	r2, [pc, #116]	; (800f0b4 <USB_SetTurnaroundTime+0x13c>)
 800f040:	4293      	cmp	r3, r2
 800f042:	d906      	bls.n	800f052 <USB_SetTurnaroundTime+0xda>
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	4a1c      	ldr	r2, [pc, #112]	; (800f0b8 <USB_SetTurnaroundTime+0x140>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d202      	bcs.n	800f052 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f04c:	2307      	movs	r3, #7
 800f04e:	617b      	str	r3, [r7, #20]
 800f050:	e00a      	b.n	800f068 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f052:	2306      	movs	r3, #6
 800f054:	617b      	str	r3, [r7, #20]
 800f056:	e007      	b.n	800f068 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f058:	79fb      	ldrb	r3, [r7, #7]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d102      	bne.n	800f064 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f05e:	2309      	movs	r3, #9
 800f060:	617b      	str	r3, [r7, #20]
 800f062:	e001      	b.n	800f068 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f064:	2309      	movs	r3, #9
 800f066:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	68da      	ldr	r2, [r3, #12]
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	029b      	lsls	r3, r3, #10
 800f07c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f080:	431a      	orrs	r2, r3
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	371c      	adds	r7, #28
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr
 800f094:	00d8acbf 	.word	0x00d8acbf
 800f098:	00e4e1c0 	.word	0x00e4e1c0
 800f09c:	00f42400 	.word	0x00f42400
 800f0a0:	01067380 	.word	0x01067380
 800f0a4:	011a499f 	.word	0x011a499f
 800f0a8:	01312cff 	.word	0x01312cff
 800f0ac:	014ca43f 	.word	0x014ca43f
 800f0b0:	016e3600 	.word	0x016e3600
 800f0b4:	01a6ab1f 	.word	0x01a6ab1f
 800f0b8:	01e84800 	.word	0x01e84800

0800f0bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	f043 0201 	orr.w	r2, r3, #1
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f0d0:	2300      	movs	r3, #0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	370c      	adds	r7, #12
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr

0800f0de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f0de:	b480      	push	{r7}
 800f0e0:	b083      	sub	sp, #12
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	689b      	ldr	r3, [r3, #8]
 800f0ea:	f023 0201 	bic.w	r2, r3, #1
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b084      	sub	sp, #16
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	460b      	mov	r3, r1
 800f10a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f10c:	2300      	movs	r3, #0
 800f10e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f11c:	78fb      	ldrb	r3, [r7, #3]
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d115      	bne.n	800f14e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f12e:	2001      	movs	r0, #1
 800f130:	f7fa fb2a 	bl	8009788 <HAL_Delay>
      ms++;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	3301      	adds	r3, #1
 800f138:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f001 fa45 	bl	80105ca <USB_GetMode>
 800f140:	4603      	mov	r3, r0
 800f142:	2b01      	cmp	r3, #1
 800f144:	d01e      	beq.n	800f184 <USB_SetCurrentMode+0x84>
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2b31      	cmp	r3, #49	; 0x31
 800f14a:	d9f0      	bls.n	800f12e <USB_SetCurrentMode+0x2e>
 800f14c:	e01a      	b.n	800f184 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f14e:	78fb      	ldrb	r3, [r7, #3]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d115      	bne.n	800f180 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f160:	2001      	movs	r0, #1
 800f162:	f7fa fb11 	bl	8009788 <HAL_Delay>
      ms++;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	3301      	adds	r3, #1
 800f16a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f001 fa2c 	bl	80105ca <USB_GetMode>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d005      	beq.n	800f184 <USB_SetCurrentMode+0x84>
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2b31      	cmp	r3, #49	; 0x31
 800f17c:	d9f0      	bls.n	800f160 <USB_SetCurrentMode+0x60>
 800f17e:	e001      	b.n	800f184 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f180:	2301      	movs	r3, #1
 800f182:	e005      	b.n	800f190 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2b32      	cmp	r3, #50	; 0x32
 800f188:	d101      	bne.n	800f18e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f18a:	2301      	movs	r3, #1
 800f18c:	e000      	b.n	800f190 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3710      	adds	r7, #16
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f198:	b084      	sub	sp, #16
 800f19a:	b580      	push	{r7, lr}
 800f19c:	b086      	sub	sp, #24
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f1a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	613b      	str	r3, [r7, #16]
 800f1b6:	e009      	b.n	800f1cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	3340      	adds	r3, #64	; 0x40
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	4413      	add	r3, r2
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	613b      	str	r3, [r7, #16]
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	2b0e      	cmp	r3, #14
 800f1d0:	d9f2      	bls.n	800f1b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f1d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d11c      	bne.n	800f212 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1e6:	f043 0302 	orr.w	r3, r3, #2
 800f1ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f208:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	639a      	str	r2, [r3, #56]	; 0x38
 800f210:	e00b      	b.n	800f22a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f216:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f222:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f230:	461a      	mov	r2, r3
 800f232:	2300      	movs	r3, #0
 800f234:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f23c:	4619      	mov	r1, r3
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f244:	461a      	mov	r2, r3
 800f246:	680b      	ldr	r3, [r1, #0]
 800f248:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d10c      	bne.n	800f26a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f252:	2b00      	cmp	r3, #0
 800f254:	d104      	bne.n	800f260 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f256:	2100      	movs	r1, #0
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f000 f965 	bl	800f528 <USB_SetDevSpeed>
 800f25e:	e008      	b.n	800f272 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f260:	2101      	movs	r1, #1
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 f960 	bl	800f528 <USB_SetDevSpeed>
 800f268:	e003      	b.n	800f272 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f26a:	2103      	movs	r1, #3
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 f95b 	bl	800f528 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f272:	2110      	movs	r1, #16
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 f8f3 	bl	800f460 <USB_FlushTxFifo>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d001      	beq.n	800f284 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f280:	2301      	movs	r3, #1
 800f282:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f000 f91f 	bl	800f4c8 <USB_FlushRxFifo>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d001      	beq.n	800f294 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f290:	2301      	movs	r3, #1
 800f292:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f29a:	461a      	mov	r2, r3
 800f29c:	2300      	movs	r3, #0
 800f29e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	613b      	str	r3, [r7, #16]
 800f2bc:	e043      	b.n	800f346 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	015a      	lsls	r2, r3, #5
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2d4:	d118      	bne.n	800f308 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d10a      	bne.n	800f2f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	015a      	lsls	r2, r3, #5
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f2ee:	6013      	str	r3, [r2, #0]
 800f2f0:	e013      	b.n	800f31a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	015a      	lsls	r2, r3, #5
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2fe:	461a      	mov	r2, r3
 800f300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f304:	6013      	str	r3, [r2, #0]
 800f306:	e008      	b.n	800f31a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	015a      	lsls	r2, r3, #5
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	4413      	add	r3, r2
 800f310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f314:	461a      	mov	r2, r3
 800f316:	2300      	movs	r3, #0
 800f318:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	015a      	lsls	r2, r3, #5
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	4413      	add	r3, r2
 800f322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f326:	461a      	mov	r2, r3
 800f328:	2300      	movs	r3, #0
 800f32a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	015a      	lsls	r2, r3, #5
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	4413      	add	r3, r2
 800f334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f338:	461a      	mov	r2, r3
 800f33a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f33e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	3301      	adds	r3, #1
 800f344:	613b      	str	r3, [r7, #16]
 800f346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f348:	693a      	ldr	r2, [r7, #16]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d3b7      	bcc.n	800f2be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f34e:	2300      	movs	r3, #0
 800f350:	613b      	str	r3, [r7, #16]
 800f352:	e043      	b.n	800f3dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	015a      	lsls	r2, r3, #5
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	4413      	add	r3, r2
 800f35c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f36a:	d118      	bne.n	800f39e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d10a      	bne.n	800f388 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	015a      	lsls	r2, r3, #5
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	4413      	add	r3, r2
 800f37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f37e:	461a      	mov	r2, r3
 800f380:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f384:	6013      	str	r3, [r2, #0]
 800f386:	e013      	b.n	800f3b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	015a      	lsls	r2, r3, #5
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	4413      	add	r3, r2
 800f390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f394:	461a      	mov	r2, r3
 800f396:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f39a:	6013      	str	r3, [r2, #0]
 800f39c:	e008      	b.n	800f3b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	015a      	lsls	r2, r3, #5
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	015a      	lsls	r2, r3, #5
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	4413      	add	r3, r2
 800f3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3bc:	461a      	mov	r2, r3
 800f3be:	2300      	movs	r3, #0
 800f3c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	015a      	lsls	r2, r3, #5
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f3d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	3301      	adds	r3, #1
 800f3da:	613b      	str	r3, [r7, #16]
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3de:	693a      	ldr	r2, [r7, #16]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d3b7      	bcc.n	800f354 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3ea:	691b      	ldr	r3, [r3, #16]
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f3f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f404:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d105      	bne.n	800f418 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	699b      	ldr	r3, [r3, #24]
 800f410:	f043 0210 	orr.w	r2, r3, #16
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	699a      	ldr	r2, [r3, #24]
 800f41c:	4b0f      	ldr	r3, [pc, #60]	; (800f45c <USB_DevInit+0x2c4>)
 800f41e:	4313      	orrs	r3, r2
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f426:	2b00      	cmp	r3, #0
 800f428:	d005      	beq.n	800f436 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	699b      	ldr	r3, [r3, #24]
 800f42e:	f043 0208 	orr.w	r2, r3, #8
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d107      	bne.n	800f44c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	699b      	ldr	r3, [r3, #24]
 800f440:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f444:	f043 0304 	orr.w	r3, r3, #4
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f44c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3718      	adds	r7, #24
 800f452:	46bd      	mov	sp, r7
 800f454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f458:	b004      	add	sp, #16
 800f45a:	4770      	bx	lr
 800f45c:	803c3800 	.word	0x803c3800

0800f460 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f460:	b480      	push	{r7}
 800f462:	b085      	sub	sp, #20
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f46a:	2300      	movs	r3, #0
 800f46c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	3301      	adds	r3, #1
 800f472:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	4a13      	ldr	r2, [pc, #76]	; (800f4c4 <USB_FlushTxFifo+0x64>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	d901      	bls.n	800f480 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f47c:	2303      	movs	r3, #3
 800f47e:	e01b      	b.n	800f4b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	2b00      	cmp	r3, #0
 800f486:	daf2      	bge.n	800f46e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f488:	2300      	movs	r3, #0
 800f48a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	019b      	lsls	r3, r3, #6
 800f490:	f043 0220 	orr.w	r2, r3, #32
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	3301      	adds	r3, #1
 800f49c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	4a08      	ldr	r2, [pc, #32]	; (800f4c4 <USB_FlushTxFifo+0x64>)
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d901      	bls.n	800f4aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f4a6:	2303      	movs	r3, #3
 800f4a8:	e006      	b.n	800f4b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	691b      	ldr	r3, [r3, #16]
 800f4ae:	f003 0320 	and.w	r3, r3, #32
 800f4b2:	2b20      	cmp	r3, #32
 800f4b4:	d0f0      	beq.n	800f498 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f4b6:	2300      	movs	r3, #0
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3714      	adds	r7, #20
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr
 800f4c4:	00030d40 	.word	0x00030d40

0800f4c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b085      	sub	sp, #20
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	4a11      	ldr	r2, [pc, #68]	; (800f524 <USB_FlushRxFifo+0x5c>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d901      	bls.n	800f4e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f4e2:	2303      	movs	r3, #3
 800f4e4:	e018      	b.n	800f518 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	691b      	ldr	r3, [r3, #16]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	daf2      	bge.n	800f4d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2210      	movs	r2, #16
 800f4f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	4a08      	ldr	r2, [pc, #32]	; (800f524 <USB_FlushRxFifo+0x5c>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d901      	bls.n	800f50a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f506:	2303      	movs	r3, #3
 800f508:	e006      	b.n	800f518 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	691b      	ldr	r3, [r3, #16]
 800f50e:	f003 0310 	and.w	r3, r3, #16
 800f512:	2b10      	cmp	r3, #16
 800f514:	d0f0      	beq.n	800f4f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f516:	2300      	movs	r3, #0
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3714      	adds	r7, #20
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr
 800f524:	00030d40 	.word	0x00030d40

0800f528 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f528:	b480      	push	{r7}
 800f52a:	b085      	sub	sp, #20
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	460b      	mov	r3, r1
 800f532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	78fb      	ldrb	r3, [r7, #3]
 800f542:	68f9      	ldr	r1, [r7, #12]
 800f544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f548:	4313      	orrs	r3, r2
 800f54a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f54c:	2300      	movs	r3, #0
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3714      	adds	r7, #20
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr

0800f55a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f55a:	b480      	push	{r7}
 800f55c:	b087      	sub	sp, #28
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f56c:	689b      	ldr	r3, [r3, #8]
 800f56e:	f003 0306 	and.w	r3, r3, #6
 800f572:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d102      	bne.n	800f580 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f57a:	2300      	movs	r3, #0
 800f57c:	75fb      	strb	r3, [r7, #23]
 800f57e:	e00a      	b.n	800f596 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2b02      	cmp	r3, #2
 800f584:	d002      	beq.n	800f58c <USB_GetDevSpeed+0x32>
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2b06      	cmp	r3, #6
 800f58a:	d102      	bne.n	800f592 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f58c:	2302      	movs	r3, #2
 800f58e:	75fb      	strb	r3, [r7, #23]
 800f590:	e001      	b.n	800f596 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f592:	230f      	movs	r3, #15
 800f594:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f596:	7dfb      	ldrb	r3, [r7, #23]
}
 800f598:	4618      	mov	r0, r3
 800f59a:	371c      	adds	r7, #28
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr

0800f5a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b085      	sub	sp, #20
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	785b      	ldrb	r3, [r3, #1]
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d13a      	bne.n	800f636 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5c6:	69da      	ldr	r2, [r3, #28]
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	f003 030f 	and.w	r3, r3, #15
 800f5d0:	2101      	movs	r1, #1
 800f5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	68f9      	ldr	r1, [r7, #12]
 800f5da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	015a      	lsls	r2, r3, #5
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d155      	bne.n	800f6a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	015a      	lsls	r2, r3, #5
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	4413      	add	r3, r2
 800f600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f604:	681a      	ldr	r2, [r3, #0]
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	791b      	ldrb	r3, [r3, #4]
 800f612:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f614:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	059b      	lsls	r3, r3, #22
 800f61a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f61c:	4313      	orrs	r3, r2
 800f61e:	68ba      	ldr	r2, [r7, #8]
 800f620:	0151      	lsls	r1, r2, #5
 800f622:	68fa      	ldr	r2, [r7, #12]
 800f624:	440a      	add	r2, r1
 800f626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f62a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f62e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f632:	6013      	str	r3, [r2, #0]
 800f634:	e036      	b.n	800f6a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f63c:	69da      	ldr	r2, [r3, #28]
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	f003 030f 	and.w	r3, r3, #15
 800f646:	2101      	movs	r1, #1
 800f648:	fa01 f303 	lsl.w	r3, r1, r3
 800f64c:	041b      	lsls	r3, r3, #16
 800f64e:	68f9      	ldr	r1, [r7, #12]
 800f650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f654:	4313      	orrs	r3, r2
 800f656:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	015a      	lsls	r2, r3, #5
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	4413      	add	r3, r2
 800f660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d11a      	bne.n	800f6a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	015a      	lsls	r2, r3, #5
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	4413      	add	r3, r2
 800f676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f67a:	681a      	ldr	r2, [r3, #0]
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	791b      	ldrb	r3, [r3, #4]
 800f688:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f68a:	430b      	orrs	r3, r1
 800f68c:	4313      	orrs	r3, r2
 800f68e:	68ba      	ldr	r2, [r7, #8]
 800f690:	0151      	lsls	r1, r2, #5
 800f692:	68fa      	ldr	r2, [r7, #12]
 800f694:	440a      	add	r2, r1
 800f696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f69a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f69e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f6a4:	2300      	movs	r3, #0
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3714      	adds	r7, #20
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr
	...

0800f6b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	785b      	ldrb	r3, [r3, #1]
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d161      	bne.n	800f794 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	015a      	lsls	r2, r3, #5
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f6e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f6e6:	d11f      	bne.n	800f728 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	015a      	lsls	r2, r3, #5
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	4413      	add	r3, r2
 800f6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	68ba      	ldr	r2, [r7, #8]
 800f6f8:	0151      	lsls	r1, r2, #5
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	440a      	add	r2, r1
 800f6fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f702:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f706:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	015a      	lsls	r2, r3, #5
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	4413      	add	r3, r2
 800f710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	68ba      	ldr	r2, [r7, #8]
 800f718:	0151      	lsls	r1, r2, #5
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	440a      	add	r2, r1
 800f71e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f726:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f72e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	f003 030f 	and.w	r3, r3, #15
 800f738:	2101      	movs	r1, #1
 800f73a:	fa01 f303 	lsl.w	r3, r1, r3
 800f73e:	b29b      	uxth	r3, r3
 800f740:	43db      	mvns	r3, r3
 800f742:	68f9      	ldr	r1, [r7, #12]
 800f744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f748:	4013      	ands	r3, r2
 800f74a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f752:	69da      	ldr	r2, [r3, #28]
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	f003 030f 	and.w	r3, r3, #15
 800f75c:	2101      	movs	r1, #1
 800f75e:	fa01 f303 	lsl.w	r3, r1, r3
 800f762:	b29b      	uxth	r3, r3
 800f764:	43db      	mvns	r3, r3
 800f766:	68f9      	ldr	r1, [r7, #12]
 800f768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f76c:	4013      	ands	r3, r2
 800f76e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	015a      	lsls	r2, r3, #5
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	4413      	add	r3, r2
 800f778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f77c:	681a      	ldr	r2, [r3, #0]
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	0159      	lsls	r1, r3, #5
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	440b      	add	r3, r1
 800f786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f78a:	4619      	mov	r1, r3
 800f78c:	4b35      	ldr	r3, [pc, #212]	; (800f864 <USB_DeactivateEndpoint+0x1b0>)
 800f78e:	4013      	ands	r3, r2
 800f790:	600b      	str	r3, [r1, #0]
 800f792:	e060      	b.n	800f856 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	015a      	lsls	r2, r3, #5
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	4413      	add	r3, r2
 800f79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f7a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7aa:	d11f      	bne.n	800f7ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	015a      	lsls	r2, r3, #5
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	68ba      	ldr	r2, [r7, #8]
 800f7bc:	0151      	lsls	r1, r2, #5
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	440a      	add	r2, r1
 800f7c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f7ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	015a      	lsls	r2, r3, #5
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	68ba      	ldr	r2, [r7, #8]
 800f7dc:	0151      	lsls	r1, r2, #5
 800f7de:	68fa      	ldr	r2, [r7, #12]
 800f7e0:	440a      	add	r2, r1
 800f7e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f7ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	f003 030f 	and.w	r3, r3, #15
 800f7fc:	2101      	movs	r1, #1
 800f7fe:	fa01 f303 	lsl.w	r3, r1, r3
 800f802:	041b      	lsls	r3, r3, #16
 800f804:	43db      	mvns	r3, r3
 800f806:	68f9      	ldr	r1, [r7, #12]
 800f808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f80c:	4013      	ands	r3, r2
 800f80e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f816:	69da      	ldr	r2, [r3, #28]
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	f003 030f 	and.w	r3, r3, #15
 800f820:	2101      	movs	r1, #1
 800f822:	fa01 f303 	lsl.w	r3, r1, r3
 800f826:	041b      	lsls	r3, r3, #16
 800f828:	43db      	mvns	r3, r3
 800f82a:	68f9      	ldr	r1, [r7, #12]
 800f82c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f830:	4013      	ands	r3, r2
 800f832:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	015a      	lsls	r2, r3, #5
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	4413      	add	r3, r2
 800f83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	0159      	lsls	r1, r3, #5
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	440b      	add	r3, r1
 800f84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f84e:	4619      	mov	r1, r3
 800f850:	4b05      	ldr	r3, [pc, #20]	; (800f868 <USB_DeactivateEndpoint+0x1b4>)
 800f852:	4013      	ands	r3, r2
 800f854:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f856:	2300      	movs	r3, #0
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3714      	adds	r7, #20
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr
 800f864:	ec337800 	.word	0xec337800
 800f868:	eff37800 	.word	0xeff37800

0800f86c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b08a      	sub	sp, #40	; 0x28
 800f870:	af02      	add	r7, sp, #8
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	4613      	mov	r3, r2
 800f878:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	785b      	ldrb	r3, [r3, #1]
 800f888:	2b01      	cmp	r3, #1
 800f88a:	f040 815c 	bne.w	800fb46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	699b      	ldr	r3, [r3, #24]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d132      	bne.n	800f8fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	015a      	lsls	r2, r3, #5
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	4413      	add	r3, r2
 800f89e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	69ba      	ldr	r2, [r7, #24]
 800f8a6:	0151      	lsls	r1, r2, #5
 800f8a8:	69fa      	ldr	r2, [r7, #28]
 800f8aa:	440a      	add	r2, r1
 800f8ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f8b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f8b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f8ba:	69bb      	ldr	r3, [r7, #24]
 800f8bc:	015a      	lsls	r2, r3, #5
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	4413      	add	r3, r2
 800f8c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8c6:	691b      	ldr	r3, [r3, #16]
 800f8c8:	69ba      	ldr	r2, [r7, #24]
 800f8ca:	0151      	lsls	r1, r2, #5
 800f8cc:	69fa      	ldr	r2, [r7, #28]
 800f8ce:	440a      	add	r2, r1
 800f8d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f8d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	015a      	lsls	r2, r3, #5
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8e6:	691b      	ldr	r3, [r3, #16]
 800f8e8:	69ba      	ldr	r2, [r7, #24]
 800f8ea:	0151      	lsls	r1, r2, #5
 800f8ec:	69fa      	ldr	r2, [r7, #28]
 800f8ee:	440a      	add	r2, r1
 800f8f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8f4:	0cdb      	lsrs	r3, r3, #19
 800f8f6:	04db      	lsls	r3, r3, #19
 800f8f8:	6113      	str	r3, [r2, #16]
 800f8fa:	e074      	b.n	800f9e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f8fc:	69bb      	ldr	r3, [r7, #24]
 800f8fe:	015a      	lsls	r2, r3, #5
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	4413      	add	r3, r2
 800f904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f908:	691b      	ldr	r3, [r3, #16]
 800f90a:	69ba      	ldr	r2, [r7, #24]
 800f90c:	0151      	lsls	r1, r2, #5
 800f90e:	69fa      	ldr	r2, [r7, #28]
 800f910:	440a      	add	r2, r1
 800f912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f916:	0cdb      	lsrs	r3, r3, #19
 800f918:	04db      	lsls	r3, r3, #19
 800f91a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f91c:	69bb      	ldr	r3, [r7, #24]
 800f91e:	015a      	lsls	r2, r3, #5
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	4413      	add	r3, r2
 800f924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f928:	691b      	ldr	r3, [r3, #16]
 800f92a:	69ba      	ldr	r2, [r7, #24]
 800f92c:	0151      	lsls	r1, r2, #5
 800f92e:	69fa      	ldr	r2, [r7, #28]
 800f930:	440a      	add	r2, r1
 800f932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f936:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f93a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f93e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f940:	69bb      	ldr	r3, [r7, #24]
 800f942:	015a      	lsls	r2, r3, #5
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	4413      	add	r3, r2
 800f948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f94c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	6999      	ldr	r1, [r3, #24]
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	440b      	add	r3, r1
 800f958:	1e59      	subs	r1, r3, #1
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	fbb1 f3f3 	udiv	r3, r1, r3
 800f962:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f964:	4b9d      	ldr	r3, [pc, #628]	; (800fbdc <USB_EPStartXfer+0x370>)
 800f966:	400b      	ands	r3, r1
 800f968:	69b9      	ldr	r1, [r7, #24]
 800f96a:	0148      	lsls	r0, r1, #5
 800f96c:	69f9      	ldr	r1, [r7, #28]
 800f96e:	4401      	add	r1, r0
 800f970:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f974:	4313      	orrs	r3, r2
 800f976:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	015a      	lsls	r2, r3, #5
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	4413      	add	r3, r2
 800f980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f984:	691a      	ldr	r2, [r3, #16]
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	699b      	ldr	r3, [r3, #24]
 800f98a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f98e:	69b9      	ldr	r1, [r7, #24]
 800f990:	0148      	lsls	r0, r1, #5
 800f992:	69f9      	ldr	r1, [r7, #28]
 800f994:	4401      	add	r1, r0
 800f996:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f99a:	4313      	orrs	r3, r2
 800f99c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	791b      	ldrb	r3, [r3, #4]
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d11f      	bne.n	800f9e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	015a      	lsls	r2, r3, #5
 800f9aa:	69fb      	ldr	r3, [r7, #28]
 800f9ac:	4413      	add	r3, r2
 800f9ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9b2:	691b      	ldr	r3, [r3, #16]
 800f9b4:	69ba      	ldr	r2, [r7, #24]
 800f9b6:	0151      	lsls	r1, r2, #5
 800f9b8:	69fa      	ldr	r2, [r7, #28]
 800f9ba:	440a      	add	r2, r1
 800f9bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f9c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f9c6:	69bb      	ldr	r3, [r7, #24]
 800f9c8:	015a      	lsls	r2, r3, #5
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	4413      	add	r3, r2
 800f9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9d2:	691b      	ldr	r3, [r3, #16]
 800f9d4:	69ba      	ldr	r2, [r7, #24]
 800f9d6:	0151      	lsls	r1, r2, #5
 800f9d8:	69fa      	ldr	r2, [r7, #28]
 800f9da:	440a      	add	r2, r1
 800f9dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f9e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f9e6:	79fb      	ldrb	r3, [r7, #7]
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	d14b      	bne.n	800fa84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	695b      	ldr	r3, [r3, #20]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d009      	beq.n	800fa08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f9f4:	69bb      	ldr	r3, [r7, #24]
 800f9f6:	015a      	lsls	r2, r3, #5
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	4413      	add	r3, r2
 800f9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa00:	461a      	mov	r2, r3
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	695b      	ldr	r3, [r3, #20]
 800fa06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	791b      	ldrb	r3, [r3, #4]
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d128      	bne.n	800fa62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa16:	689b      	ldr	r3, [r3, #8]
 800fa18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d110      	bne.n	800fa42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	015a      	lsls	r2, r3, #5
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	4413      	add	r3, r2
 800fa28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	69ba      	ldr	r2, [r7, #24]
 800fa30:	0151      	lsls	r1, r2, #5
 800fa32:	69fa      	ldr	r2, [r7, #28]
 800fa34:	440a      	add	r2, r1
 800fa36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fa3e:	6013      	str	r3, [r2, #0]
 800fa40:	e00f      	b.n	800fa62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	015a      	lsls	r2, r3, #5
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	4413      	add	r3, r2
 800fa4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	69ba      	ldr	r2, [r7, #24]
 800fa52:	0151      	lsls	r1, r2, #5
 800fa54:	69fa      	ldr	r2, [r7, #28]
 800fa56:	440a      	add	r2, r1
 800fa58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa62:	69bb      	ldr	r3, [r7, #24]
 800fa64:	015a      	lsls	r2, r3, #5
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	4413      	add	r3, r2
 800fa6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	69ba      	ldr	r2, [r7, #24]
 800fa72:	0151      	lsls	r1, r2, #5
 800fa74:	69fa      	ldr	r2, [r7, #28]
 800fa76:	440a      	add	r2, r1
 800fa78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa80:	6013      	str	r3, [r2, #0]
 800fa82:	e133      	b.n	800fcec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa84:	69bb      	ldr	r3, [r7, #24]
 800fa86:	015a      	lsls	r2, r3, #5
 800fa88:	69fb      	ldr	r3, [r7, #28]
 800fa8a:	4413      	add	r3, r2
 800fa8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	69ba      	ldr	r2, [r7, #24]
 800fa94:	0151      	lsls	r1, r2, #5
 800fa96:	69fa      	ldr	r2, [r7, #28]
 800fa98:	440a      	add	r2, r1
 800fa9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800faa2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	791b      	ldrb	r3, [r3, #4]
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	d015      	beq.n	800fad8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	699b      	ldr	r3, [r3, #24]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	f000 811b 	beq.w	800fcec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fabc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	f003 030f 	and.w	r3, r3, #15
 800fac6:	2101      	movs	r1, #1
 800fac8:	fa01 f303 	lsl.w	r3, r1, r3
 800facc:	69f9      	ldr	r1, [r7, #28]
 800face:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fad2:	4313      	orrs	r3, r2
 800fad4:	634b      	str	r3, [r1, #52]	; 0x34
 800fad6:	e109      	b.n	800fcec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fade:	689b      	ldr	r3, [r3, #8]
 800fae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d110      	bne.n	800fb0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fae8:	69bb      	ldr	r3, [r7, #24]
 800faea:	015a      	lsls	r2, r3, #5
 800faec:	69fb      	ldr	r3, [r7, #28]
 800faee:	4413      	add	r3, r2
 800faf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	69ba      	ldr	r2, [r7, #24]
 800faf8:	0151      	lsls	r1, r2, #5
 800fafa:	69fa      	ldr	r2, [r7, #28]
 800fafc:	440a      	add	r2, r1
 800fafe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fb06:	6013      	str	r3, [r2, #0]
 800fb08:	e00f      	b.n	800fb2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	015a      	lsls	r2, r3, #5
 800fb0e:	69fb      	ldr	r3, [r7, #28]
 800fb10:	4413      	add	r3, r2
 800fb12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	69ba      	ldr	r2, [r7, #24]
 800fb1a:	0151      	lsls	r1, r2, #5
 800fb1c:	69fa      	ldr	r2, [r7, #28]
 800fb1e:	440a      	add	r2, r1
 800fb20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	6919      	ldr	r1, [r3, #16]
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	781a      	ldrb	r2, [r3, #0]
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	699b      	ldr	r3, [r3, #24]
 800fb36:	b298      	uxth	r0, r3
 800fb38:	79fb      	ldrb	r3, [r7, #7]
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	68f8      	ldr	r0, [r7, #12]
 800fb40:	f000 fade 	bl	8010100 <USB_WritePacket>
 800fb44:	e0d2      	b.n	800fcec <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fb46:	69bb      	ldr	r3, [r7, #24]
 800fb48:	015a      	lsls	r2, r3, #5
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb52:	691b      	ldr	r3, [r3, #16]
 800fb54:	69ba      	ldr	r2, [r7, #24]
 800fb56:	0151      	lsls	r1, r2, #5
 800fb58:	69fa      	ldr	r2, [r7, #28]
 800fb5a:	440a      	add	r2, r1
 800fb5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb60:	0cdb      	lsrs	r3, r3, #19
 800fb62:	04db      	lsls	r3, r3, #19
 800fb64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	015a      	lsls	r2, r3, #5
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	4413      	add	r3, r2
 800fb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb72:	691b      	ldr	r3, [r3, #16]
 800fb74:	69ba      	ldr	r2, [r7, #24]
 800fb76:	0151      	lsls	r1, r2, #5
 800fb78:	69fa      	ldr	r2, [r7, #28]
 800fb7a:	440a      	add	r2, r1
 800fb7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fb84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fb88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	699b      	ldr	r3, [r3, #24]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d126      	bne.n	800fbe0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fb92:	69bb      	ldr	r3, [r7, #24]
 800fb94:	015a      	lsls	r2, r3, #5
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	4413      	add	r3, r2
 800fb9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb9e:	691a      	ldr	r2, [r3, #16]
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fba8:	69b9      	ldr	r1, [r7, #24]
 800fbaa:	0148      	lsls	r0, r1, #5
 800fbac:	69f9      	ldr	r1, [r7, #28]
 800fbae:	4401      	add	r1, r0
 800fbb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	015a      	lsls	r2, r3, #5
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	69ba      	ldr	r2, [r7, #24]
 800fbc8:	0151      	lsls	r1, r2, #5
 800fbca:	69fa      	ldr	r2, [r7, #28]
 800fbcc:	440a      	add	r2, r1
 800fbce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fbd6:	6113      	str	r3, [r2, #16]
 800fbd8:	e03a      	b.n	800fc50 <USB_EPStartXfer+0x3e4>
 800fbda:	bf00      	nop
 800fbdc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	699a      	ldr	r2, [r3, #24]
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	4413      	add	r3, r2
 800fbea:	1e5a      	subs	r2, r3, #1
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	68db      	ldr	r3, [r3, #12]
 800fbf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbf4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	68db      	ldr	r3, [r3, #12]
 800fbfa:	8afa      	ldrh	r2, [r7, #22]
 800fbfc:	fb03 f202 	mul.w	r2, r3, r2
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fc04:	69bb      	ldr	r3, [r7, #24]
 800fc06:	015a      	lsls	r2, r3, #5
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	4413      	add	r3, r2
 800fc0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc10:	691a      	ldr	r2, [r3, #16]
 800fc12:	8afb      	ldrh	r3, [r7, #22]
 800fc14:	04d9      	lsls	r1, r3, #19
 800fc16:	4b38      	ldr	r3, [pc, #224]	; (800fcf8 <USB_EPStartXfer+0x48c>)
 800fc18:	400b      	ands	r3, r1
 800fc1a:	69b9      	ldr	r1, [r7, #24]
 800fc1c:	0148      	lsls	r0, r1, #5
 800fc1e:	69f9      	ldr	r1, [r7, #28]
 800fc20:	4401      	add	r1, r0
 800fc22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fc26:	4313      	orrs	r3, r2
 800fc28:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800fc2a:	69bb      	ldr	r3, [r7, #24]
 800fc2c:	015a      	lsls	r2, r3, #5
 800fc2e:	69fb      	ldr	r3, [r7, #28]
 800fc30:	4413      	add	r3, r2
 800fc32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc36:	691a      	ldr	r2, [r3, #16]
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	69db      	ldr	r3, [r3, #28]
 800fc3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc40:	69b9      	ldr	r1, [r7, #24]
 800fc42:	0148      	lsls	r0, r1, #5
 800fc44:	69f9      	ldr	r1, [r7, #28]
 800fc46:	4401      	add	r1, r0
 800fc48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fc50:	79fb      	ldrb	r3, [r7, #7]
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	d10d      	bne.n	800fc72 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	691b      	ldr	r3, [r3, #16]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d009      	beq.n	800fc72 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	6919      	ldr	r1, [r3, #16]
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	015a      	lsls	r2, r3, #5
 800fc66:	69fb      	ldr	r3, [r7, #28]
 800fc68:	4413      	add	r3, r2
 800fc6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc6e:	460a      	mov	r2, r1
 800fc70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	791b      	ldrb	r3, [r3, #4]
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d128      	bne.n	800fccc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fc7a:	69fb      	ldr	r3, [r7, #28]
 800fc7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc80:	689b      	ldr	r3, [r3, #8]
 800fc82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d110      	bne.n	800fcac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fc8a:	69bb      	ldr	r3, [r7, #24]
 800fc8c:	015a      	lsls	r2, r3, #5
 800fc8e:	69fb      	ldr	r3, [r7, #28]
 800fc90:	4413      	add	r3, r2
 800fc92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	69ba      	ldr	r2, [r7, #24]
 800fc9a:	0151      	lsls	r1, r2, #5
 800fc9c:	69fa      	ldr	r2, [r7, #28]
 800fc9e:	440a      	add	r2, r1
 800fca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fca4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fca8:	6013      	str	r3, [r2, #0]
 800fcaa:	e00f      	b.n	800fccc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fcac:	69bb      	ldr	r3, [r7, #24]
 800fcae:	015a      	lsls	r2, r3, #5
 800fcb0:	69fb      	ldr	r3, [r7, #28]
 800fcb2:	4413      	add	r3, r2
 800fcb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	69ba      	ldr	r2, [r7, #24]
 800fcbc:	0151      	lsls	r1, r2, #5
 800fcbe:	69fa      	ldr	r2, [r7, #28]
 800fcc0:	440a      	add	r2, r1
 800fcc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fcca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	015a      	lsls	r2, r3, #5
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	4413      	add	r3, r2
 800fcd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	69ba      	ldr	r2, [r7, #24]
 800fcdc:	0151      	lsls	r1, r2, #5
 800fcde:	69fa      	ldr	r2, [r7, #28]
 800fce0:	440a      	add	r2, r1
 800fce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fce6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fcea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fcec:	2300      	movs	r3, #0
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3720      	adds	r7, #32
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	1ff80000 	.word	0x1ff80000

0800fcfc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b087      	sub	sp, #28
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	4613      	mov	r3, r2
 800fd08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	785b      	ldrb	r3, [r3, #1]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	f040 80ce 	bne.w	800feba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	699b      	ldr	r3, [r3, #24]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d132      	bne.n	800fd8c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	015a      	lsls	r2, r3, #5
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd32:	691b      	ldr	r3, [r3, #16]
 800fd34:	693a      	ldr	r2, [r7, #16]
 800fd36:	0151      	lsls	r1, r2, #5
 800fd38:	697a      	ldr	r2, [r7, #20]
 800fd3a:	440a      	add	r2, r1
 800fd3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fd44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fd48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	015a      	lsls	r2, r3, #5
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	4413      	add	r3, r2
 800fd52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd56:	691b      	ldr	r3, [r3, #16]
 800fd58:	693a      	ldr	r2, [r7, #16]
 800fd5a:	0151      	lsls	r1, r2, #5
 800fd5c:	697a      	ldr	r2, [r7, #20]
 800fd5e:	440a      	add	r2, r1
 800fd60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fd68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	015a      	lsls	r2, r3, #5
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	4413      	add	r3, r2
 800fd72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd76:	691b      	ldr	r3, [r3, #16]
 800fd78:	693a      	ldr	r2, [r7, #16]
 800fd7a:	0151      	lsls	r1, r2, #5
 800fd7c:	697a      	ldr	r2, [r7, #20]
 800fd7e:	440a      	add	r2, r1
 800fd80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd84:	0cdb      	lsrs	r3, r3, #19
 800fd86:	04db      	lsls	r3, r3, #19
 800fd88:	6113      	str	r3, [r2, #16]
 800fd8a:	e04e      	b.n	800fe2a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	015a      	lsls	r2, r3, #5
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	4413      	add	r3, r2
 800fd94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd98:	691b      	ldr	r3, [r3, #16]
 800fd9a:	693a      	ldr	r2, [r7, #16]
 800fd9c:	0151      	lsls	r1, r2, #5
 800fd9e:	697a      	ldr	r2, [r7, #20]
 800fda0:	440a      	add	r2, r1
 800fda2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fda6:	0cdb      	lsrs	r3, r3, #19
 800fda8:	04db      	lsls	r3, r3, #19
 800fdaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	015a      	lsls	r2, r3, #5
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdb8:	691b      	ldr	r3, [r3, #16]
 800fdba:	693a      	ldr	r2, [r7, #16]
 800fdbc:	0151      	lsls	r1, r2, #5
 800fdbe:	697a      	ldr	r2, [r7, #20]
 800fdc0:	440a      	add	r2, r1
 800fdc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fdca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fdce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	699a      	ldr	r2, [r3, #24]
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	68db      	ldr	r3, [r3, #12]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d903      	bls.n	800fde4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	68da      	ldr	r2, [r3, #12]
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	015a      	lsls	r2, r3, #5
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	4413      	add	r3, r2
 800fdec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdf0:	691b      	ldr	r3, [r3, #16]
 800fdf2:	693a      	ldr	r2, [r7, #16]
 800fdf4:	0151      	lsls	r1, r2, #5
 800fdf6:	697a      	ldr	r2, [r7, #20]
 800fdf8:	440a      	add	r2, r1
 800fdfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	015a      	lsls	r2, r3, #5
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	4413      	add	r3, r2
 800fe0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe10:	691a      	ldr	r2, [r3, #16]
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	699b      	ldr	r3, [r3, #24]
 800fe16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe1a:	6939      	ldr	r1, [r7, #16]
 800fe1c:	0148      	lsls	r0, r1, #5
 800fe1e:	6979      	ldr	r1, [r7, #20]
 800fe20:	4401      	add	r1, r0
 800fe22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fe26:	4313      	orrs	r3, r2
 800fe28:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fe2a:	79fb      	ldrb	r3, [r7, #7]
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d11e      	bne.n	800fe6e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	695b      	ldr	r3, [r3, #20]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d009      	beq.n	800fe4c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	015a      	lsls	r2, r3, #5
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	4413      	add	r3, r2
 800fe40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe44:	461a      	mov	r2, r3
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	695b      	ldr	r3, [r3, #20]
 800fe4a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	015a      	lsls	r2, r3, #5
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	4413      	add	r3, r2
 800fe54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	693a      	ldr	r2, [r7, #16]
 800fe5c:	0151      	lsls	r1, r2, #5
 800fe5e:	697a      	ldr	r2, [r7, #20]
 800fe60:	440a      	add	r2, r1
 800fe62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fe6a:	6013      	str	r3, [r2, #0]
 800fe6c:	e097      	b.n	800ff9e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	015a      	lsls	r2, r3, #5
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	4413      	add	r3, r2
 800fe76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	693a      	ldr	r2, [r7, #16]
 800fe7e:	0151      	lsls	r1, r2, #5
 800fe80:	697a      	ldr	r2, [r7, #20]
 800fe82:	440a      	add	r2, r1
 800fe84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fe8c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	699b      	ldr	r3, [r3, #24]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	f000 8083 	beq.w	800ff9e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	f003 030f 	and.w	r3, r3, #15
 800fea8:	2101      	movs	r1, #1
 800feaa:	fa01 f303 	lsl.w	r3, r1, r3
 800feae:	6979      	ldr	r1, [r7, #20]
 800feb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800feb4:	4313      	orrs	r3, r2
 800feb6:	634b      	str	r3, [r1, #52]	; 0x34
 800feb8:	e071      	b.n	800ff9e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	015a      	lsls	r2, r3, #5
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	4413      	add	r3, r2
 800fec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	693a      	ldr	r2, [r7, #16]
 800feca:	0151      	lsls	r1, r2, #5
 800fecc:	697a      	ldr	r2, [r7, #20]
 800fece:	440a      	add	r2, r1
 800fed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fed4:	0cdb      	lsrs	r3, r3, #19
 800fed6:	04db      	lsls	r3, r3, #19
 800fed8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	015a      	lsls	r2, r3, #5
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	4413      	add	r3, r2
 800fee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fee6:	691b      	ldr	r3, [r3, #16]
 800fee8:	693a      	ldr	r2, [r7, #16]
 800feea:	0151      	lsls	r1, r2, #5
 800feec:	697a      	ldr	r2, [r7, #20]
 800feee:	440a      	add	r2, r1
 800fef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fef4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fef8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fefc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	699b      	ldr	r3, [r3, #24]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d003      	beq.n	800ff0e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	68da      	ldr	r2, [r3, #12]
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	68da      	ldr	r2, [r3, #12]
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	015a      	lsls	r2, r3, #5
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff22:	691b      	ldr	r3, [r3, #16]
 800ff24:	693a      	ldr	r2, [r7, #16]
 800ff26:	0151      	lsls	r1, r2, #5
 800ff28:	697a      	ldr	r2, [r7, #20]
 800ff2a:	440a      	add	r2, r1
 800ff2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	015a      	lsls	r2, r3, #5
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	4413      	add	r3, r2
 800ff3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff42:	691a      	ldr	r2, [r3, #16]
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	69db      	ldr	r3, [r3, #28]
 800ff48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff4c:	6939      	ldr	r1, [r7, #16]
 800ff4e:	0148      	lsls	r0, r1, #5
 800ff50:	6979      	ldr	r1, [r7, #20]
 800ff52:	4401      	add	r1, r0
 800ff54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ff58:	4313      	orrs	r3, r2
 800ff5a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ff5c:	79fb      	ldrb	r3, [r7, #7]
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d10d      	bne.n	800ff7e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	691b      	ldr	r3, [r3, #16]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d009      	beq.n	800ff7e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	6919      	ldr	r1, [r3, #16]
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	015a      	lsls	r2, r3, #5
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	4413      	add	r3, r2
 800ff76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff7a:	460a      	mov	r2, r1
 800ff7c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	015a      	lsls	r2, r3, #5
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	4413      	add	r3, r2
 800ff86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	693a      	ldr	r2, [r7, #16]
 800ff8e:	0151      	lsls	r1, r2, #5
 800ff90:	697a      	ldr	r2, [r7, #20]
 800ff92:	440a      	add	r2, r1
 800ff94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	371c      	adds	r7, #28
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b087      	sub	sp, #28
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	785b      	ldrb	r3, [r3, #1]
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	d14a      	bne.n	8010060 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	015a      	lsls	r2, r3, #5
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ffde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ffe2:	f040 8086 	bne.w	80100f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	015a      	lsls	r2, r3, #5
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	4413      	add	r3, r2
 800fff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	683a      	ldr	r2, [r7, #0]
 800fff8:	7812      	ldrb	r2, [r2, #0]
 800fffa:	0151      	lsls	r1, r2, #5
 800fffc:	693a      	ldr	r2, [r7, #16]
 800fffe:	440a      	add	r2, r1
 8010000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010004:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010008:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	015a      	lsls	r2, r3, #5
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	4413      	add	r3, r2
 8010014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	683a      	ldr	r2, [r7, #0]
 801001c:	7812      	ldrb	r2, [r2, #0]
 801001e:	0151      	lsls	r1, r2, #5
 8010020:	693a      	ldr	r2, [r7, #16]
 8010022:	440a      	add	r2, r1
 8010024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801002c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	3301      	adds	r3, #1
 8010032:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f242 7210 	movw	r2, #10000	; 0x2710
 801003a:	4293      	cmp	r3, r2
 801003c:	d902      	bls.n	8010044 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801003e:	2301      	movs	r3, #1
 8010040:	75fb      	strb	r3, [r7, #23]
          break;
 8010042:	e056      	b.n	80100f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	015a      	lsls	r2, r3, #5
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	4413      	add	r3, r2
 801004e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801005c:	d0e7      	beq.n	801002e <USB_EPStopXfer+0x82>
 801005e:	e048      	b.n	80100f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	015a      	lsls	r2, r3, #5
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	4413      	add	r3, r2
 801006a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010078:	d13b      	bne.n	80100f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	015a      	lsls	r2, r3, #5
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	4413      	add	r3, r2
 8010084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	683a      	ldr	r2, [r7, #0]
 801008c:	7812      	ldrb	r2, [r2, #0]
 801008e:	0151      	lsls	r1, r2, #5
 8010090:	693a      	ldr	r2, [r7, #16]
 8010092:	440a      	add	r2, r1
 8010094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010098:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801009c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	015a      	lsls	r2, r3, #5
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	4413      	add	r3, r2
 80100a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	683a      	ldr	r2, [r7, #0]
 80100b0:	7812      	ldrb	r2, [r2, #0]
 80100b2:	0151      	lsls	r1, r2, #5
 80100b4:	693a      	ldr	r2, [r7, #16]
 80100b6:	440a      	add	r2, r1
 80100b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80100c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	3301      	adds	r3, #1
 80100c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d902      	bls.n	80100d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80100d2:	2301      	movs	r3, #1
 80100d4:	75fb      	strb	r3, [r7, #23]
          break;
 80100d6:	e00c      	b.n	80100f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	015a      	lsls	r2, r3, #5
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	4413      	add	r3, r2
 80100e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80100ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80100f0:	d0e7      	beq.n	80100c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80100f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	371c      	adds	r7, #28
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr

08010100 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010100:	b480      	push	{r7}
 8010102:	b089      	sub	sp, #36	; 0x24
 8010104:	af00      	add	r7, sp, #0
 8010106:	60f8      	str	r0, [r7, #12]
 8010108:	60b9      	str	r1, [r7, #8]
 801010a:	4611      	mov	r1, r2
 801010c:	461a      	mov	r2, r3
 801010e:	460b      	mov	r3, r1
 8010110:	71fb      	strb	r3, [r7, #7]
 8010112:	4613      	mov	r3, r2
 8010114:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801011e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010122:	2b00      	cmp	r3, #0
 8010124:	d123      	bne.n	801016e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010126:	88bb      	ldrh	r3, [r7, #4]
 8010128:	3303      	adds	r3, #3
 801012a:	089b      	lsrs	r3, r3, #2
 801012c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801012e:	2300      	movs	r3, #0
 8010130:	61bb      	str	r3, [r7, #24]
 8010132:	e018      	b.n	8010166 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010134:	79fb      	ldrb	r3, [r7, #7]
 8010136:	031a      	lsls	r2, r3, #12
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	4413      	add	r3, r2
 801013c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010140:	461a      	mov	r2, r3
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	3301      	adds	r3, #1
 801014c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	3301      	adds	r3, #1
 8010152:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010154:	69fb      	ldr	r3, [r7, #28]
 8010156:	3301      	adds	r3, #1
 8010158:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	3301      	adds	r3, #1
 801015e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010160:	69bb      	ldr	r3, [r7, #24]
 8010162:	3301      	adds	r3, #1
 8010164:	61bb      	str	r3, [r7, #24]
 8010166:	69ba      	ldr	r2, [r7, #24]
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	429a      	cmp	r2, r3
 801016c:	d3e2      	bcc.n	8010134 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801016e:	2300      	movs	r3, #0
}
 8010170:	4618      	mov	r0, r3
 8010172:	3724      	adds	r7, #36	; 0x24
 8010174:	46bd      	mov	sp, r7
 8010176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017a:	4770      	bx	lr

0801017c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801017c:	b480      	push	{r7}
 801017e:	b08b      	sub	sp, #44	; 0x2c
 8010180:	af00      	add	r7, sp, #0
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	60b9      	str	r1, [r7, #8]
 8010186:	4613      	mov	r3, r2
 8010188:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010192:	88fb      	ldrh	r3, [r7, #6]
 8010194:	089b      	lsrs	r3, r3, #2
 8010196:	b29b      	uxth	r3, r3
 8010198:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801019a:	88fb      	ldrh	r3, [r7, #6]
 801019c:	f003 0303 	and.w	r3, r3, #3
 80101a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80101a2:	2300      	movs	r3, #0
 80101a4:	623b      	str	r3, [r7, #32]
 80101a6:	e014      	b.n	80101d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80101a8:	69bb      	ldr	r3, [r7, #24]
 80101aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80101b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b6:	3301      	adds	r3, #1
 80101b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	3301      	adds	r3, #1
 80101be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80101c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c2:	3301      	adds	r3, #1
 80101c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80101c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c8:	3301      	adds	r3, #1
 80101ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80101cc:	6a3b      	ldr	r3, [r7, #32]
 80101ce:	3301      	adds	r3, #1
 80101d0:	623b      	str	r3, [r7, #32]
 80101d2:	6a3a      	ldr	r2, [r7, #32]
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d3e6      	bcc.n	80101a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80101da:	8bfb      	ldrh	r3, [r7, #30]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d01e      	beq.n	801021e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80101e0:	2300      	movs	r3, #0
 80101e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80101e4:	69bb      	ldr	r3, [r7, #24]
 80101e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101ea:	461a      	mov	r2, r3
 80101ec:	f107 0310 	add.w	r3, r7, #16
 80101f0:	6812      	ldr	r2, [r2, #0]
 80101f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80101f4:	693a      	ldr	r2, [r7, #16]
 80101f6:	6a3b      	ldr	r3, [r7, #32]
 80101f8:	b2db      	uxtb	r3, r3
 80101fa:	00db      	lsls	r3, r3, #3
 80101fc:	fa22 f303 	lsr.w	r3, r2, r3
 8010200:	b2da      	uxtb	r2, r3
 8010202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010204:	701a      	strb	r2, [r3, #0]
      i++;
 8010206:	6a3b      	ldr	r3, [r7, #32]
 8010208:	3301      	adds	r3, #1
 801020a:	623b      	str	r3, [r7, #32]
      pDest++;
 801020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020e:	3301      	adds	r3, #1
 8010210:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010212:	8bfb      	ldrh	r3, [r7, #30]
 8010214:	3b01      	subs	r3, #1
 8010216:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010218:	8bfb      	ldrh	r3, [r7, #30]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d1ea      	bne.n	80101f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801021e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010220:	4618      	mov	r0, r3
 8010222:	372c      	adds	r7, #44	; 0x2c
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr

0801022c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801022c:	b480      	push	{r7}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	785b      	ldrb	r3, [r3, #1]
 8010244:	2b01      	cmp	r3, #1
 8010246:	d12c      	bne.n	80102a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	015a      	lsls	r2, r3, #5
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	4413      	add	r3, r2
 8010250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	db12      	blt.n	8010280 <USB_EPSetStall+0x54>
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00f      	beq.n	8010280 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	015a      	lsls	r2, r3, #5
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	4413      	add	r3, r2
 8010268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	68ba      	ldr	r2, [r7, #8]
 8010270:	0151      	lsls	r1, r2, #5
 8010272:	68fa      	ldr	r2, [r7, #12]
 8010274:	440a      	add	r2, r1
 8010276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801027a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801027e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	015a      	lsls	r2, r3, #5
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	4413      	add	r3, r2
 8010288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	68ba      	ldr	r2, [r7, #8]
 8010290:	0151      	lsls	r1, r2, #5
 8010292:	68fa      	ldr	r2, [r7, #12]
 8010294:	440a      	add	r2, r1
 8010296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801029a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801029e:	6013      	str	r3, [r2, #0]
 80102a0:	e02b      	b.n	80102fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	015a      	lsls	r2, r3, #5
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	4413      	add	r3, r2
 80102aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	db12      	blt.n	80102da <USB_EPSetStall+0xae>
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d00f      	beq.n	80102da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	015a      	lsls	r2, r3, #5
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	4413      	add	r3, r2
 80102c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	68ba      	ldr	r2, [r7, #8]
 80102ca:	0151      	lsls	r1, r2, #5
 80102cc:	68fa      	ldr	r2, [r7, #12]
 80102ce:	440a      	add	r2, r1
 80102d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80102d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	015a      	lsls	r2, r3, #5
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	4413      	add	r3, r2
 80102e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	68ba      	ldr	r2, [r7, #8]
 80102ea:	0151      	lsls	r1, r2, #5
 80102ec:	68fa      	ldr	r2, [r7, #12]
 80102ee:	440a      	add	r2, r1
 80102f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80102f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80102fa:	2300      	movs	r3, #0
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3714      	adds	r7, #20
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010308:	b480      	push	{r7}
 801030a:	b085      	sub	sp, #20
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	785b      	ldrb	r3, [r3, #1]
 8010320:	2b01      	cmp	r3, #1
 8010322:	d128      	bne.n	8010376 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	015a      	lsls	r2, r3, #5
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	4413      	add	r3, r2
 801032c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	68ba      	ldr	r2, [r7, #8]
 8010334:	0151      	lsls	r1, r2, #5
 8010336:	68fa      	ldr	r2, [r7, #12]
 8010338:	440a      	add	r2, r1
 801033a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801033e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010342:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	791b      	ldrb	r3, [r3, #4]
 8010348:	2b03      	cmp	r3, #3
 801034a:	d003      	beq.n	8010354 <USB_EPClearStall+0x4c>
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	791b      	ldrb	r3, [r3, #4]
 8010350:	2b02      	cmp	r3, #2
 8010352:	d138      	bne.n	80103c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	015a      	lsls	r2, r3, #5
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	4413      	add	r3, r2
 801035c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	68ba      	ldr	r2, [r7, #8]
 8010364:	0151      	lsls	r1, r2, #5
 8010366:	68fa      	ldr	r2, [r7, #12]
 8010368:	440a      	add	r2, r1
 801036a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801036e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010372:	6013      	str	r3, [r2, #0]
 8010374:	e027      	b.n	80103c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	015a      	lsls	r2, r3, #5
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	4413      	add	r3, r2
 801037e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	68ba      	ldr	r2, [r7, #8]
 8010386:	0151      	lsls	r1, r2, #5
 8010388:	68fa      	ldr	r2, [r7, #12]
 801038a:	440a      	add	r2, r1
 801038c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010390:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010394:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	791b      	ldrb	r3, [r3, #4]
 801039a:	2b03      	cmp	r3, #3
 801039c:	d003      	beq.n	80103a6 <USB_EPClearStall+0x9e>
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	791b      	ldrb	r3, [r3, #4]
 80103a2:	2b02      	cmp	r3, #2
 80103a4:	d10f      	bne.n	80103c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	015a      	lsls	r2, r3, #5
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	4413      	add	r3, r2
 80103ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	68ba      	ldr	r2, [r7, #8]
 80103b6:	0151      	lsls	r1, r2, #5
 80103b8:	68fa      	ldr	r2, [r7, #12]
 80103ba:	440a      	add	r2, r1
 80103bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80103c6:	2300      	movs	r3, #0
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3714      	adds	r7, #20
 80103cc:	46bd      	mov	sp, r7
 80103ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d2:	4770      	bx	lr

080103d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b085      	sub	sp, #20
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	460b      	mov	r3, r1
 80103de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80103f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80103f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103fe:	681a      	ldr	r2, [r3, #0]
 8010400:	78fb      	ldrb	r3, [r7, #3]
 8010402:	011b      	lsls	r3, r3, #4
 8010404:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010408:	68f9      	ldr	r1, [r7, #12]
 801040a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801040e:	4313      	orrs	r3, r2
 8010410:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010412:	2300      	movs	r3, #0
}
 8010414:	4618      	mov	r0, r3
 8010416:	3714      	adds	r7, #20
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr

08010420 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010420:	b480      	push	{r7}
 8010422:	b085      	sub	sp, #20
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801043a:	f023 0303 	bic.w	r3, r3, #3
 801043e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	68fa      	ldr	r2, [r7, #12]
 801044a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801044e:	f023 0302 	bic.w	r3, r3, #2
 8010452:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010454:	2300      	movs	r3, #0
}
 8010456:	4618      	mov	r0, r3
 8010458:	3714      	adds	r7, #20
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr

08010462 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010462:	b480      	push	{r7}
 8010464:	b085      	sub	sp, #20
 8010466:	af00      	add	r7, sp, #0
 8010468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	68fa      	ldr	r2, [r7, #12]
 8010478:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801047c:	f023 0303 	bic.w	r3, r3, #3
 8010480:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	68fa      	ldr	r2, [r7, #12]
 801048c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010490:	f043 0302 	orr.w	r3, r3, #2
 8010494:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010496:	2300      	movs	r3, #0
}
 8010498:	4618      	mov	r0, r3
 801049a:	3714      	adds	r7, #20
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80104a4:	b480      	push	{r7}
 80104a6:	b085      	sub	sp, #20
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	695b      	ldr	r3, [r3, #20]
 80104b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	699b      	ldr	r3, [r3, #24]
 80104b6:	68fa      	ldr	r2, [r7, #12]
 80104b8:	4013      	ands	r3, r2
 80104ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80104bc:	68fb      	ldr	r3, [r7, #12]
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3714      	adds	r7, #20
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80104ca:	b480      	push	{r7}
 80104cc:	b085      	sub	sp, #20
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104dc:	699b      	ldr	r3, [r3, #24]
 80104de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104e6:	69db      	ldr	r3, [r3, #28]
 80104e8:	68ba      	ldr	r2, [r7, #8]
 80104ea:	4013      	ands	r3, r2
 80104ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	0c1b      	lsrs	r3, r3, #16
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3714      	adds	r7, #20
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80104fe:	b480      	push	{r7}
 8010500:	b085      	sub	sp, #20
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010510:	699b      	ldr	r3, [r3, #24]
 8010512:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801051a:	69db      	ldr	r3, [r3, #28]
 801051c:	68ba      	ldr	r2, [r7, #8]
 801051e:	4013      	ands	r3, r2
 8010520:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	b29b      	uxth	r3, r3
}
 8010526:	4618      	mov	r0, r3
 8010528:	3714      	adds	r7, #20
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr

08010532 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010532:	b480      	push	{r7}
 8010534:	b085      	sub	sp, #20
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
 801053a:	460b      	mov	r3, r1
 801053c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010542:	78fb      	ldrb	r3, [r7, #3]
 8010544:	015a      	lsls	r2, r3, #5
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	4413      	add	r3, r2
 801054a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801054e:	689b      	ldr	r3, [r3, #8]
 8010550:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010558:	695b      	ldr	r3, [r3, #20]
 801055a:	68ba      	ldr	r2, [r7, #8]
 801055c:	4013      	ands	r3, r2
 801055e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010560:	68bb      	ldr	r3, [r7, #8]
}
 8010562:	4618      	mov	r0, r3
 8010564:	3714      	adds	r7, #20
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr

0801056e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801056e:	b480      	push	{r7}
 8010570:	b087      	sub	sp, #28
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
 8010576:	460b      	mov	r3, r1
 8010578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010584:	691b      	ldr	r3, [r3, #16]
 8010586:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801058e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010590:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010592:	78fb      	ldrb	r3, [r7, #3]
 8010594:	f003 030f 	and.w	r3, r3, #15
 8010598:	68fa      	ldr	r2, [r7, #12]
 801059a:	fa22 f303 	lsr.w	r3, r2, r3
 801059e:	01db      	lsls	r3, r3, #7
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	693a      	ldr	r2, [r7, #16]
 80105a4:	4313      	orrs	r3, r2
 80105a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80105a8:	78fb      	ldrb	r3, [r7, #3]
 80105aa:	015a      	lsls	r2, r3, #5
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	4413      	add	r3, r2
 80105b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105b4:	689b      	ldr	r3, [r3, #8]
 80105b6:	693a      	ldr	r2, [r7, #16]
 80105b8:	4013      	ands	r3, r2
 80105ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80105bc:	68bb      	ldr	r3, [r7, #8]
}
 80105be:	4618      	mov	r0, r3
 80105c0:	371c      	adds	r7, #28
 80105c2:	46bd      	mov	sp, r7
 80105c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c8:	4770      	bx	lr

080105ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80105ca:	b480      	push	{r7}
 80105cc:	b083      	sub	sp, #12
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	695b      	ldr	r3, [r3, #20]
 80105d6:	f003 0301 	and.w	r3, r3, #1
}
 80105da:	4618      	mov	r0, r3
 80105dc:	370c      	adds	r7, #12
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr

080105e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80105e6:	b480      	push	{r7}
 80105e8:	b085      	sub	sp, #20
 80105ea:	af00      	add	r7, sp, #0
 80105ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	68fa      	ldr	r2, [r7, #12]
 80105fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010600:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010604:	f023 0307 	bic.w	r3, r3, #7
 8010608:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	68fa      	ldr	r2, [r7, #12]
 8010614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801061c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801061e:	2300      	movs	r3, #0
}
 8010620:	4618      	mov	r0, r3
 8010622:	3714      	adds	r7, #20
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801062c:	b480      	push	{r7}
 801062e:	b087      	sub	sp, #28
 8010630:	af00      	add	r7, sp, #0
 8010632:	60f8      	str	r0, [r7, #12]
 8010634:	460b      	mov	r3, r1
 8010636:	607a      	str	r2, [r7, #4]
 8010638:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	333c      	adds	r3, #60	; 0x3c
 8010642:	3304      	adds	r3, #4
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	4a26      	ldr	r2, [pc, #152]	; (80106e4 <USB_EP0_OutStart+0xb8>)
 801064c:	4293      	cmp	r3, r2
 801064e:	d90a      	bls.n	8010666 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801065c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010660:	d101      	bne.n	8010666 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010662:	2300      	movs	r3, #0
 8010664:	e037      	b.n	80106d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801066c:	461a      	mov	r2, r3
 801066e:	2300      	movs	r3, #0
 8010670:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010678:	691b      	ldr	r3, [r3, #16]
 801067a:	697a      	ldr	r2, [r7, #20]
 801067c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010680:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801068c:	691b      	ldr	r3, [r3, #16]
 801068e:	697a      	ldr	r2, [r7, #20]
 8010690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010694:	f043 0318 	orr.w	r3, r3, #24
 8010698:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a0:	691b      	ldr	r3, [r3, #16]
 80106a2:	697a      	ldr	r2, [r7, #20]
 80106a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80106ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80106ae:	7afb      	ldrb	r3, [r7, #11]
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d10f      	bne.n	80106d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106ba:	461a      	mov	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	697a      	ldr	r2, [r7, #20]
 80106ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80106d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	371c      	adds	r7, #28
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	4f54300a 	.word	0x4f54300a

080106e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b085      	sub	sp, #20
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80106f0:	2300      	movs	r3, #0
 80106f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	3301      	adds	r3, #1
 80106f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	4a13      	ldr	r2, [pc, #76]	; (801074c <USB_CoreReset+0x64>)
 80106fe:	4293      	cmp	r3, r2
 8010700:	d901      	bls.n	8010706 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010702:	2303      	movs	r3, #3
 8010704:	e01b      	b.n	801073e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	691b      	ldr	r3, [r3, #16]
 801070a:	2b00      	cmp	r3, #0
 801070c:	daf2      	bge.n	80106f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801070e:	2300      	movs	r3, #0
 8010710:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	691b      	ldr	r3, [r3, #16]
 8010716:	f043 0201 	orr.w	r2, r3, #1
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	3301      	adds	r3, #1
 8010722:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	4a09      	ldr	r2, [pc, #36]	; (801074c <USB_CoreReset+0x64>)
 8010728:	4293      	cmp	r3, r2
 801072a:	d901      	bls.n	8010730 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801072c:	2303      	movs	r3, #3
 801072e:	e006      	b.n	801073e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	691b      	ldr	r3, [r3, #16]
 8010734:	f003 0301 	and.w	r3, r3, #1
 8010738:	2b01      	cmp	r3, #1
 801073a:	d0f0      	beq.n	801071e <USB_CoreReset+0x36>

  return HAL_OK;
 801073c:	2300      	movs	r3, #0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3714      	adds	r7, #20
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	00030d40 	.word	0x00030d40

08010750 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b084      	sub	sp, #16
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	460b      	mov	r3, r1
 801075a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801075c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010760:	f002 fedc 	bl	801351c <USBD_static_malloc>
 8010764:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d109      	bne.n	8010780 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	32b0      	adds	r2, #176	; 0xb0
 8010776:	2100      	movs	r1, #0
 8010778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801077c:	2302      	movs	r3, #2
 801077e:	e0d4      	b.n	801092a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010780:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8010784:	2100      	movs	r1, #0
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	f003 f914 	bl	80139b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	32b0      	adds	r2, #176	; 0xb0
 8010796:	68f9      	ldr	r1, [r7, #12]
 8010798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	32b0      	adds	r2, #176	; 0xb0
 80107a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	7c1b      	ldrb	r3, [r3, #16]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d138      	bne.n	801082a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80107b8:	4b5e      	ldr	r3, [pc, #376]	; (8010934 <USBD_CDC_Init+0x1e4>)
 80107ba:	7819      	ldrb	r1, [r3, #0]
 80107bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107c0:	2202      	movs	r2, #2
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f002 fd87 	bl	80132d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80107c8:	4b5a      	ldr	r3, [pc, #360]	; (8010934 <USBD_CDC_Init+0x1e4>)
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	f003 020f 	and.w	r2, r3, #15
 80107d0:	6879      	ldr	r1, [r7, #4]
 80107d2:	4613      	mov	r3, r2
 80107d4:	009b      	lsls	r3, r3, #2
 80107d6:	4413      	add	r3, r2
 80107d8:	009b      	lsls	r3, r3, #2
 80107da:	440b      	add	r3, r1
 80107dc:	3324      	adds	r3, #36	; 0x24
 80107de:	2201      	movs	r2, #1
 80107e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80107e2:	4b55      	ldr	r3, [pc, #340]	; (8010938 <USBD_CDC_Init+0x1e8>)
 80107e4:	7819      	ldrb	r1, [r3, #0]
 80107e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107ea:	2202      	movs	r2, #2
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f002 fd72 	bl	80132d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80107f2:	4b51      	ldr	r3, [pc, #324]	; (8010938 <USBD_CDC_Init+0x1e8>)
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	f003 020f 	and.w	r2, r3, #15
 80107fa:	6879      	ldr	r1, [r7, #4]
 80107fc:	4613      	mov	r3, r2
 80107fe:	009b      	lsls	r3, r3, #2
 8010800:	4413      	add	r3, r2
 8010802:	009b      	lsls	r3, r3, #2
 8010804:	440b      	add	r3, r1
 8010806:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801080a:	2201      	movs	r2, #1
 801080c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801080e:	4b4b      	ldr	r3, [pc, #300]	; (801093c <USBD_CDC_Init+0x1ec>)
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	f003 020f 	and.w	r2, r3, #15
 8010816:	6879      	ldr	r1, [r7, #4]
 8010818:	4613      	mov	r3, r2
 801081a:	009b      	lsls	r3, r3, #2
 801081c:	4413      	add	r3, r2
 801081e:	009b      	lsls	r3, r3, #2
 8010820:	440b      	add	r3, r1
 8010822:	3326      	adds	r3, #38	; 0x26
 8010824:	2210      	movs	r2, #16
 8010826:	801a      	strh	r2, [r3, #0]
 8010828:	e035      	b.n	8010896 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801082a:	4b42      	ldr	r3, [pc, #264]	; (8010934 <USBD_CDC_Init+0x1e4>)
 801082c:	7819      	ldrb	r1, [r3, #0]
 801082e:	2340      	movs	r3, #64	; 0x40
 8010830:	2202      	movs	r2, #2
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f002 fd4f 	bl	80132d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010838:	4b3e      	ldr	r3, [pc, #248]	; (8010934 <USBD_CDC_Init+0x1e4>)
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	f003 020f 	and.w	r2, r3, #15
 8010840:	6879      	ldr	r1, [r7, #4]
 8010842:	4613      	mov	r3, r2
 8010844:	009b      	lsls	r3, r3, #2
 8010846:	4413      	add	r3, r2
 8010848:	009b      	lsls	r3, r3, #2
 801084a:	440b      	add	r3, r1
 801084c:	3324      	adds	r3, #36	; 0x24
 801084e:	2201      	movs	r2, #1
 8010850:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010852:	4b39      	ldr	r3, [pc, #228]	; (8010938 <USBD_CDC_Init+0x1e8>)
 8010854:	7819      	ldrb	r1, [r3, #0]
 8010856:	2340      	movs	r3, #64	; 0x40
 8010858:	2202      	movs	r2, #2
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f002 fd3b 	bl	80132d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010860:	4b35      	ldr	r3, [pc, #212]	; (8010938 <USBD_CDC_Init+0x1e8>)
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	f003 020f 	and.w	r2, r3, #15
 8010868:	6879      	ldr	r1, [r7, #4]
 801086a:	4613      	mov	r3, r2
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	4413      	add	r3, r2
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	440b      	add	r3, r1
 8010874:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010878:	2201      	movs	r2, #1
 801087a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801087c:	4b2f      	ldr	r3, [pc, #188]	; (801093c <USBD_CDC_Init+0x1ec>)
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	f003 020f 	and.w	r2, r3, #15
 8010884:	6879      	ldr	r1, [r7, #4]
 8010886:	4613      	mov	r3, r2
 8010888:	009b      	lsls	r3, r3, #2
 801088a:	4413      	add	r3, r2
 801088c:	009b      	lsls	r3, r3, #2
 801088e:	440b      	add	r3, r1
 8010890:	3326      	adds	r3, #38	; 0x26
 8010892:	2210      	movs	r2, #16
 8010894:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010896:	4b29      	ldr	r3, [pc, #164]	; (801093c <USBD_CDC_Init+0x1ec>)
 8010898:	7819      	ldrb	r1, [r3, #0]
 801089a:	2308      	movs	r3, #8
 801089c:	2203      	movs	r2, #3
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f002 fd19 	bl	80132d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80108a4:	4b25      	ldr	r3, [pc, #148]	; (801093c <USBD_CDC_Init+0x1ec>)
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	f003 020f 	and.w	r2, r3, #15
 80108ac:	6879      	ldr	r1, [r7, #4]
 80108ae:	4613      	mov	r3, r2
 80108b0:	009b      	lsls	r3, r3, #2
 80108b2:	4413      	add	r3, r2
 80108b4:	009b      	lsls	r3, r3, #2
 80108b6:	440b      	add	r3, r1
 80108b8:	3324      	adds	r3, #36	; 0x24
 80108ba:	2201      	movs	r2, #1
 80108bc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2200      	movs	r2, #0
 80108c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	33b0      	adds	r3, #176	; 0xb0
 80108d0:	009b      	lsls	r3, r3, #2
 80108d2:	4413      	add	r3, r2
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2200      	movs	r2, #0
 80108de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2200      	movs	r2, #0
 80108e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d101      	bne.n	80108f8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80108f4:	2302      	movs	r3, #2
 80108f6:	e018      	b.n	801092a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	7c1b      	ldrb	r3, [r3, #16]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d10a      	bne.n	8010916 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010900:	4b0d      	ldr	r3, [pc, #52]	; (8010938 <USBD_CDC_Init+0x1e8>)
 8010902:	7819      	ldrb	r1, [r3, #0]
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801090a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f002 fdd0 	bl	80134b4 <USBD_LL_PrepareReceive>
 8010914:	e008      	b.n	8010928 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010916:	4b08      	ldr	r3, [pc, #32]	; (8010938 <USBD_CDC_Init+0x1e8>)
 8010918:	7819      	ldrb	r1, [r3, #0]
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010920:	2340      	movs	r3, #64	; 0x40
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f002 fdc6 	bl	80134b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010928:	2300      	movs	r3, #0
}
 801092a:	4618      	mov	r0, r3
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	200001cb 	.word	0x200001cb
 8010938:	200001cc 	.word	0x200001cc
 801093c:	200001cd 	.word	0x200001cd

08010940 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	460b      	mov	r3, r1
 801094a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801094c:	4b3a      	ldr	r3, [pc, #232]	; (8010a38 <USBD_CDC_DeInit+0xf8>)
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	4619      	mov	r1, r3
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f002 fce5 	bl	8013322 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010958:	4b37      	ldr	r3, [pc, #220]	; (8010a38 <USBD_CDC_DeInit+0xf8>)
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	f003 020f 	and.w	r2, r3, #15
 8010960:	6879      	ldr	r1, [r7, #4]
 8010962:	4613      	mov	r3, r2
 8010964:	009b      	lsls	r3, r3, #2
 8010966:	4413      	add	r3, r2
 8010968:	009b      	lsls	r3, r3, #2
 801096a:	440b      	add	r3, r1
 801096c:	3324      	adds	r3, #36	; 0x24
 801096e:	2200      	movs	r2, #0
 8010970:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010972:	4b32      	ldr	r3, [pc, #200]	; (8010a3c <USBD_CDC_DeInit+0xfc>)
 8010974:	781b      	ldrb	r3, [r3, #0]
 8010976:	4619      	mov	r1, r3
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f002 fcd2 	bl	8013322 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801097e:	4b2f      	ldr	r3, [pc, #188]	; (8010a3c <USBD_CDC_DeInit+0xfc>)
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	f003 020f 	and.w	r2, r3, #15
 8010986:	6879      	ldr	r1, [r7, #4]
 8010988:	4613      	mov	r3, r2
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	4413      	add	r3, r2
 801098e:	009b      	lsls	r3, r3, #2
 8010990:	440b      	add	r3, r1
 8010992:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010996:	2200      	movs	r2, #0
 8010998:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801099a:	4b29      	ldr	r3, [pc, #164]	; (8010a40 <USBD_CDC_DeInit+0x100>)
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	4619      	mov	r1, r3
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f002 fcbe 	bl	8013322 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80109a6:	4b26      	ldr	r3, [pc, #152]	; (8010a40 <USBD_CDC_DeInit+0x100>)
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	f003 020f 	and.w	r2, r3, #15
 80109ae:	6879      	ldr	r1, [r7, #4]
 80109b0:	4613      	mov	r3, r2
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	4413      	add	r3, r2
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	440b      	add	r3, r1
 80109ba:	3324      	adds	r3, #36	; 0x24
 80109bc:	2200      	movs	r2, #0
 80109be:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80109c0:	4b1f      	ldr	r3, [pc, #124]	; (8010a40 <USBD_CDC_DeInit+0x100>)
 80109c2:	781b      	ldrb	r3, [r3, #0]
 80109c4:	f003 020f 	and.w	r2, r3, #15
 80109c8:	6879      	ldr	r1, [r7, #4]
 80109ca:	4613      	mov	r3, r2
 80109cc:	009b      	lsls	r3, r3, #2
 80109ce:	4413      	add	r3, r2
 80109d0:	009b      	lsls	r3, r3, #2
 80109d2:	440b      	add	r3, r1
 80109d4:	3326      	adds	r3, #38	; 0x26
 80109d6:	2200      	movs	r2, #0
 80109d8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	32b0      	adds	r2, #176	; 0xb0
 80109e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d01f      	beq.n	8010a2c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	33b0      	adds	r3, #176	; 0xb0
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	4413      	add	r3, r2
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	32b0      	adds	r2, #176	; 0xb0
 8010a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f002 fd92 	bl	8013538 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	32b0      	adds	r2, #176	; 0xb0
 8010a1e:	2100      	movs	r1, #0
 8010a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2200      	movs	r2, #0
 8010a28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010a2c:	2300      	movs	r3, #0
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	200001cb 	.word	0x200001cb
 8010a3c:	200001cc 	.word	0x200001cc
 8010a40:	200001cd 	.word	0x200001cd

08010a44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b086      	sub	sp, #24
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	32b0      	adds	r2, #176	; 0xb0
 8010a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a5c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010a62:	2300      	movs	r3, #0
 8010a64:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a66:	2300      	movs	r3, #0
 8010a68:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d101      	bne.n	8010a74 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010a70:	2303      	movs	r3, #3
 8010a72:	e0bf      	b.n	8010bf4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d050      	beq.n	8010b22 <USBD_CDC_Setup+0xde>
 8010a80:	2b20      	cmp	r3, #32
 8010a82:	f040 80af 	bne.w	8010be4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	88db      	ldrh	r3, [r3, #6]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d03a      	beq.n	8010b04 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	b25b      	sxtb	r3, r3
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	da1b      	bge.n	8010ad0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010a9e:	687a      	ldr	r2, [r7, #4]
 8010aa0:	33b0      	adds	r3, #176	; 0xb0
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	4413      	add	r3, r2
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	689b      	ldr	r3, [r3, #8]
 8010aaa:	683a      	ldr	r2, [r7, #0]
 8010aac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010aae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010ab0:	683a      	ldr	r2, [r7, #0]
 8010ab2:	88d2      	ldrh	r2, [r2, #6]
 8010ab4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	88db      	ldrh	r3, [r3, #6]
 8010aba:	2b07      	cmp	r3, #7
 8010abc:	bf28      	it	cs
 8010abe:	2307      	movcs	r3, #7
 8010ac0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	89fa      	ldrh	r2, [r7, #14]
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f001 fd89 	bl	80125e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010ace:	e090      	b.n	8010bf2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	785a      	ldrb	r2, [r3, #1]
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	88db      	ldrh	r3, [r3, #6]
 8010ade:	2b3f      	cmp	r3, #63	; 0x3f
 8010ae0:	d803      	bhi.n	8010aea <USBD_CDC_Setup+0xa6>
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	88db      	ldrh	r3, [r3, #6]
 8010ae6:	b2da      	uxtb	r2, r3
 8010ae8:	e000      	b.n	8010aec <USBD_CDC_Setup+0xa8>
 8010aea:	2240      	movs	r2, #64	; 0x40
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010af2:	6939      	ldr	r1, [r7, #16]
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010afa:	461a      	mov	r2, r3
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f001 fd9b 	bl	8012638 <USBD_CtlPrepareRx>
      break;
 8010b02:	e076      	b.n	8010bf2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	33b0      	adds	r3, #176	; 0xb0
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	4413      	add	r3, r2
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	689b      	ldr	r3, [r3, #8]
 8010b16:	683a      	ldr	r2, [r7, #0]
 8010b18:	7850      	ldrb	r0, [r2, #1]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	6839      	ldr	r1, [r7, #0]
 8010b1e:	4798      	blx	r3
      break;
 8010b20:	e067      	b.n	8010bf2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	785b      	ldrb	r3, [r3, #1]
 8010b26:	2b0b      	cmp	r3, #11
 8010b28:	d851      	bhi.n	8010bce <USBD_CDC_Setup+0x18a>
 8010b2a:	a201      	add	r2, pc, #4	; (adr r2, 8010b30 <USBD_CDC_Setup+0xec>)
 8010b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b30:	08010b61 	.word	0x08010b61
 8010b34:	08010bdd 	.word	0x08010bdd
 8010b38:	08010bcf 	.word	0x08010bcf
 8010b3c:	08010bcf 	.word	0x08010bcf
 8010b40:	08010bcf 	.word	0x08010bcf
 8010b44:	08010bcf 	.word	0x08010bcf
 8010b48:	08010bcf 	.word	0x08010bcf
 8010b4c:	08010bcf 	.word	0x08010bcf
 8010b50:	08010bcf 	.word	0x08010bcf
 8010b54:	08010bcf 	.word	0x08010bcf
 8010b58:	08010b8b 	.word	0x08010b8b
 8010b5c:	08010bb5 	.word	0x08010bb5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b66:	b2db      	uxtb	r3, r3
 8010b68:	2b03      	cmp	r3, #3
 8010b6a:	d107      	bne.n	8010b7c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010b6c:	f107 030a 	add.w	r3, r7, #10
 8010b70:	2202      	movs	r2, #2
 8010b72:	4619      	mov	r1, r3
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f001 fd33 	bl	80125e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010b7a:	e032      	b.n	8010be2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010b7c:	6839      	ldr	r1, [r7, #0]
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f001 fcbd 	bl	80124fe <USBD_CtlError>
            ret = USBD_FAIL;
 8010b84:	2303      	movs	r3, #3
 8010b86:	75fb      	strb	r3, [r7, #23]
          break;
 8010b88:	e02b      	b.n	8010be2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b90:	b2db      	uxtb	r3, r3
 8010b92:	2b03      	cmp	r3, #3
 8010b94:	d107      	bne.n	8010ba6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010b96:	f107 030d 	add.w	r3, r7, #13
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f001 fd1e 	bl	80125e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010ba4:	e01d      	b.n	8010be2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010ba6:	6839      	ldr	r1, [r7, #0]
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f001 fca8 	bl	80124fe <USBD_CtlError>
            ret = USBD_FAIL;
 8010bae:	2303      	movs	r3, #3
 8010bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8010bb2:	e016      	b.n	8010be2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	2b03      	cmp	r3, #3
 8010bbe:	d00f      	beq.n	8010be0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010bc0:	6839      	ldr	r1, [r7, #0]
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f001 fc9b 	bl	80124fe <USBD_CtlError>
            ret = USBD_FAIL;
 8010bc8:	2303      	movs	r3, #3
 8010bca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010bcc:	e008      	b.n	8010be0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010bce:	6839      	ldr	r1, [r7, #0]
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f001 fc94 	bl	80124fe <USBD_CtlError>
          ret = USBD_FAIL;
 8010bd6:	2303      	movs	r3, #3
 8010bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8010bda:	e002      	b.n	8010be2 <USBD_CDC_Setup+0x19e>
          break;
 8010bdc:	bf00      	nop
 8010bde:	e008      	b.n	8010bf2 <USBD_CDC_Setup+0x1ae>
          break;
 8010be0:	bf00      	nop
      }
      break;
 8010be2:	e006      	b.n	8010bf2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010be4:	6839      	ldr	r1, [r7, #0]
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f001 fc89 	bl	80124fe <USBD_CtlError>
      ret = USBD_FAIL;
 8010bec:	2303      	movs	r3, #3
 8010bee:	75fb      	strb	r3, [r7, #23]
      break;
 8010bf0:	bf00      	nop
  }

  return (uint8_t)ret;
 8010bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3718      	adds	r7, #24
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	460b      	mov	r3, r1
 8010c06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	32b0      	adds	r2, #176	; 0xb0
 8010c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d101      	bne.n	8010c26 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010c22:	2303      	movs	r3, #3
 8010c24:	e065      	b.n	8010cf2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	32b0      	adds	r2, #176	; 0xb0
 8010c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c34:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010c36:	78fb      	ldrb	r3, [r7, #3]
 8010c38:	f003 020f 	and.w	r2, r3, #15
 8010c3c:	6879      	ldr	r1, [r7, #4]
 8010c3e:	4613      	mov	r3, r2
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	4413      	add	r3, r2
 8010c44:	009b      	lsls	r3, r3, #2
 8010c46:	440b      	add	r3, r1
 8010c48:	3318      	adds	r3, #24
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d02f      	beq.n	8010cb0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010c50:	78fb      	ldrb	r3, [r7, #3]
 8010c52:	f003 020f 	and.w	r2, r3, #15
 8010c56:	6879      	ldr	r1, [r7, #4]
 8010c58:	4613      	mov	r3, r2
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	4413      	add	r3, r2
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	440b      	add	r3, r1
 8010c62:	3318      	adds	r3, #24
 8010c64:	681a      	ldr	r2, [r3, #0]
 8010c66:	78fb      	ldrb	r3, [r7, #3]
 8010c68:	f003 010f 	and.w	r1, r3, #15
 8010c6c:	68f8      	ldr	r0, [r7, #12]
 8010c6e:	460b      	mov	r3, r1
 8010c70:	00db      	lsls	r3, r3, #3
 8010c72:	440b      	add	r3, r1
 8010c74:	009b      	lsls	r3, r3, #2
 8010c76:	4403      	add	r3, r0
 8010c78:	3348      	adds	r3, #72	; 0x48
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010c80:	fb01 f303 	mul.w	r3, r1, r3
 8010c84:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d112      	bne.n	8010cb0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010c8a:	78fb      	ldrb	r3, [r7, #3]
 8010c8c:	f003 020f 	and.w	r2, r3, #15
 8010c90:	6879      	ldr	r1, [r7, #4]
 8010c92:	4613      	mov	r3, r2
 8010c94:	009b      	lsls	r3, r3, #2
 8010c96:	4413      	add	r3, r2
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	440b      	add	r3, r1
 8010c9c:	3318      	adds	r3, #24
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010ca2:	78f9      	ldrb	r1, [r7, #3]
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f002 fbe2 	bl	8013472 <USBD_LL_Transmit>
 8010cae:	e01f      	b.n	8010cf0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010cbe:	687a      	ldr	r2, [r7, #4]
 8010cc0:	33b0      	adds	r3, #176	; 0xb0
 8010cc2:	009b      	lsls	r3, r3, #2
 8010cc4:	4413      	add	r3, r2
 8010cc6:	685b      	ldr	r3, [r3, #4]
 8010cc8:	691b      	ldr	r3, [r3, #16]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d010      	beq.n	8010cf0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	33b0      	adds	r3, #176	; 0xb0
 8010cd8:	009b      	lsls	r3, r3, #2
 8010cda:	4413      	add	r3, r2
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	691b      	ldr	r3, [r3, #16]
 8010ce0:	68ba      	ldr	r2, [r7, #8]
 8010ce2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010ce6:	68ba      	ldr	r2, [r7, #8]
 8010ce8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010cec:	78fa      	ldrb	r2, [r7, #3]
 8010cee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010cf0:	2300      	movs	r3, #0
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3710      	adds	r7, #16
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b084      	sub	sp, #16
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
 8010d02:	460b      	mov	r3, r1
 8010d04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	32b0      	adds	r2, #176	; 0xb0
 8010d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d14:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	32b0      	adds	r2, #176	; 0xb0
 8010d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d101      	bne.n	8010d2c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010d28:	2303      	movs	r3, #3
 8010d2a:	e01a      	b.n	8010d62 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010d2c:	78fb      	ldrb	r3, [r7, #3]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f002 fbe0 	bl	80134f6 <USBD_LL_GetRxDataSize>
 8010d36:	4602      	mov	r2, r0
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010d44:	687a      	ldr	r2, [r7, #4]
 8010d46:	33b0      	adds	r3, #176	; 0xb0
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	4413      	add	r3, r2
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	68db      	ldr	r3, [r3, #12]
 8010d50:	68fa      	ldr	r2, [r7, #12]
 8010d52:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010d56:	68fa      	ldr	r2, [r7, #12]
 8010d58:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010d60:	2300      	movs	r3, #0
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3710      	adds	r7, #16
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}

08010d6a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010d6a:	b580      	push	{r7, lr}
 8010d6c:	b084      	sub	sp, #16
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	32b0      	adds	r2, #176	; 0xb0
 8010d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d101      	bne.n	8010d8c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010d88:	2303      	movs	r3, #3
 8010d8a:	e025      	b.n	8010dd8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010d92:	687a      	ldr	r2, [r7, #4]
 8010d94:	33b0      	adds	r3, #176	; 0xb0
 8010d96:	009b      	lsls	r3, r3, #2
 8010d98:	4413      	add	r3, r2
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d01a      	beq.n	8010dd6 <USBD_CDC_EP0_RxReady+0x6c>
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010da6:	2bff      	cmp	r3, #255	; 0xff
 8010da8:	d015      	beq.n	8010dd6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010db0:	687a      	ldr	r2, [r7, #4]
 8010db2:	33b0      	adds	r3, #176	; 0xb0
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	4413      	add	r3, r2
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	689b      	ldr	r3, [r3, #8]
 8010dbc:	68fa      	ldr	r2, [r7, #12]
 8010dbe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8010dc2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010dca:	b292      	uxth	r2, r2
 8010dcc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	22ff      	movs	r2, #255	; 0xff
 8010dd2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010dd6:	2300      	movs	r3, #0
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3710      	adds	r7, #16
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}

08010de0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b086      	sub	sp, #24
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010de8:	2182      	movs	r1, #130	; 0x82
 8010dea:	4818      	ldr	r0, [pc, #96]	; (8010e4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010dec:	f000 fd4f 	bl	801188e <USBD_GetEpDesc>
 8010df0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010df2:	2101      	movs	r1, #1
 8010df4:	4815      	ldr	r0, [pc, #84]	; (8010e4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010df6:	f000 fd4a 	bl	801188e <USBD_GetEpDesc>
 8010dfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010dfc:	2181      	movs	r1, #129	; 0x81
 8010dfe:	4813      	ldr	r0, [pc, #76]	; (8010e4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010e00:	f000 fd45 	bl	801188e <USBD_GetEpDesc>
 8010e04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d002      	beq.n	8010e12 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	2210      	movs	r2, #16
 8010e10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d006      	beq.n	8010e26 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e20:	711a      	strb	r2, [r3, #4]
 8010e22:	2200      	movs	r2, #0
 8010e24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d006      	beq.n	8010e3a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e34:	711a      	strb	r2, [r3, #4]
 8010e36:	2200      	movs	r2, #0
 8010e38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2243      	movs	r2, #67	; 0x43
 8010e3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010e40:	4b02      	ldr	r3, [pc, #8]	; (8010e4c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3718      	adds	r7, #24
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	20000188 	.word	0x20000188

08010e50 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b086      	sub	sp, #24
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010e58:	2182      	movs	r1, #130	; 0x82
 8010e5a:	4818      	ldr	r0, [pc, #96]	; (8010ebc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010e5c:	f000 fd17 	bl	801188e <USBD_GetEpDesc>
 8010e60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010e62:	2101      	movs	r1, #1
 8010e64:	4815      	ldr	r0, [pc, #84]	; (8010ebc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010e66:	f000 fd12 	bl	801188e <USBD_GetEpDesc>
 8010e6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010e6c:	2181      	movs	r1, #129	; 0x81
 8010e6e:	4813      	ldr	r0, [pc, #76]	; (8010ebc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010e70:	f000 fd0d 	bl	801188e <USBD_GetEpDesc>
 8010e74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d002      	beq.n	8010e82 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	2210      	movs	r2, #16
 8010e80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d006      	beq.n	8010e96 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	711a      	strb	r2, [r3, #4]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	f042 0202 	orr.w	r2, r2, #2
 8010e94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d006      	beq.n	8010eaa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	711a      	strb	r2, [r3, #4]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	f042 0202 	orr.w	r2, r2, #2
 8010ea8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2243      	movs	r2, #67	; 0x43
 8010eae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010eb0:	4b02      	ldr	r3, [pc, #8]	; (8010ebc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3718      	adds	r7, #24
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
 8010eba:	bf00      	nop
 8010ebc:	20000188 	.word	0x20000188

08010ec0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b086      	sub	sp, #24
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010ec8:	2182      	movs	r1, #130	; 0x82
 8010eca:	4818      	ldr	r0, [pc, #96]	; (8010f2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010ecc:	f000 fcdf 	bl	801188e <USBD_GetEpDesc>
 8010ed0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010ed2:	2101      	movs	r1, #1
 8010ed4:	4815      	ldr	r0, [pc, #84]	; (8010f2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010ed6:	f000 fcda 	bl	801188e <USBD_GetEpDesc>
 8010eda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010edc:	2181      	movs	r1, #129	; 0x81
 8010ede:	4813      	ldr	r0, [pc, #76]	; (8010f2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010ee0:	f000 fcd5 	bl	801188e <USBD_GetEpDesc>
 8010ee4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d002      	beq.n	8010ef2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	2210      	movs	r2, #16
 8010ef0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d006      	beq.n	8010f06 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	2200      	movs	r2, #0
 8010efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010f00:	711a      	strb	r2, [r3, #4]
 8010f02:	2200      	movs	r2, #0
 8010f04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d006      	beq.n	8010f1a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010f14:	711a      	strb	r2, [r3, #4]
 8010f16:	2200      	movs	r2, #0
 8010f18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2243      	movs	r2, #67	; 0x43
 8010f1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010f20:	4b02      	ldr	r3, [pc, #8]	; (8010f2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3718      	adds	r7, #24
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	20000188 	.word	0x20000188

08010f30 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	220a      	movs	r2, #10
 8010f3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010f3e:	4b03      	ldr	r3, [pc, #12]	; (8010f4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	370c      	adds	r7, #12
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr
 8010f4c:	20000144 	.word	0x20000144

08010f50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010f50:	b480      	push	{r7}
 8010f52:	b083      	sub	sp, #12
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d101      	bne.n	8010f64 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010f60:	2303      	movs	r3, #3
 8010f62:	e009      	b.n	8010f78 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	33b0      	adds	r3, #176	; 0xb0
 8010f6e:	009b      	lsls	r3, r3, #2
 8010f70:	4413      	add	r3, r2
 8010f72:	683a      	ldr	r2, [r7, #0]
 8010f74:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010f76:	2300      	movs	r3, #0
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	370c      	adds	r7, #12
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f82:	4770      	bx	lr

08010f84 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b087      	sub	sp, #28
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	32b0      	adds	r2, #176	; 0xb0
 8010f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f9e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d101      	bne.n	8010faa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010fa6:	2303      	movs	r3, #3
 8010fa8:	e008      	b.n	8010fbc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010fba:	2300      	movs	r3, #0
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	371c      	adds	r7, #28
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr

08010fc8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b085      	sub	sp, #20
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	32b0      	adds	r2, #176	; 0xb0
 8010fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fe0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d101      	bne.n	8010fec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010fe8:	2303      	movs	r3, #3
 8010fea:	e004      	b.n	8010ff6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	683a      	ldr	r2, [r7, #0]
 8010ff0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010ff4:	2300      	movs	r3, #0
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3714      	adds	r7, #20
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr
	...

08011004 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	32b0      	adds	r2, #176	; 0xb0
 8011016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801101a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801101c:	2301      	movs	r3, #1
 801101e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	32b0      	adds	r2, #176	; 0xb0
 801102a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d101      	bne.n	8011036 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011032:	2303      	movs	r3, #3
 8011034:	e025      	b.n	8011082 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801103c:	2b00      	cmp	r3, #0
 801103e:	d11f      	bne.n	8011080 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	2201      	movs	r2, #1
 8011044:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011048:	4b10      	ldr	r3, [pc, #64]	; (801108c <USBD_CDC_TransmitPacket+0x88>)
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	f003 020f 	and.w	r2, r3, #15
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	4613      	mov	r3, r2
 801105a:	009b      	lsls	r3, r3, #2
 801105c:	4413      	add	r3, r2
 801105e:	009b      	lsls	r3, r3, #2
 8011060:	4403      	add	r3, r0
 8011062:	3318      	adds	r3, #24
 8011064:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011066:	4b09      	ldr	r3, [pc, #36]	; (801108c <USBD_CDC_TransmitPacket+0x88>)
 8011068:	7819      	ldrb	r1, [r3, #0]
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f002 f9fb 	bl	8013472 <USBD_LL_Transmit>

    ret = USBD_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011080:	7bfb      	ldrb	r3, [r7, #15]
}
 8011082:	4618      	mov	r0, r3
 8011084:	3710      	adds	r7, #16
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}
 801108a:	bf00      	nop
 801108c:	200001cb 	.word	0x200001cb

08011090 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b084      	sub	sp, #16
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	32b0      	adds	r2, #176	; 0xb0
 80110a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	32b0      	adds	r2, #176	; 0xb0
 80110b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d101      	bne.n	80110be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80110ba:	2303      	movs	r3, #3
 80110bc:	e018      	b.n	80110f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	7c1b      	ldrb	r3, [r3, #16]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d10a      	bne.n	80110dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80110c6:	4b0c      	ldr	r3, [pc, #48]	; (80110f8 <USBD_CDC_ReceivePacket+0x68>)
 80110c8:	7819      	ldrb	r1, [r3, #0]
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80110d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f002 f9ed 	bl	80134b4 <USBD_LL_PrepareReceive>
 80110da:	e008      	b.n	80110ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80110dc:	4b06      	ldr	r3, [pc, #24]	; (80110f8 <USBD_CDC_ReceivePacket+0x68>)
 80110de:	7819      	ldrb	r1, [r3, #0]
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80110e6:	2340      	movs	r3, #64	; 0x40
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f002 f9e3 	bl	80134b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80110ee:	2300      	movs	r3, #0
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3710      	adds	r7, #16
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	200001cc 	.word	0x200001cc

080110fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b086      	sub	sp, #24
 8011100:	af00      	add	r7, sp, #0
 8011102:	60f8      	str	r0, [r7, #12]
 8011104:	60b9      	str	r1, [r7, #8]
 8011106:	4613      	mov	r3, r2
 8011108:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d101      	bne.n	8011114 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011110:	2303      	movs	r3, #3
 8011112:	e01f      	b.n	8011154 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2200      	movs	r2, #0
 8011118:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	2200      	movs	r2, #0
 8011120:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2200      	movs	r2, #0
 8011128:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d003      	beq.n	801113a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	68ba      	ldr	r2, [r7, #8]
 8011136:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	2201      	movs	r2, #1
 801113e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	79fa      	ldrb	r2, [r7, #7]
 8011146:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011148:	68f8      	ldr	r0, [r7, #12]
 801114a:	f002 f813 	bl	8013174 <USBD_LL_Init>
 801114e:	4603      	mov	r3, r0
 8011150:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011152:	7dfb      	ldrb	r3, [r7, #23]
}
 8011154:	4618      	mov	r0, r3
 8011156:	3718      	adds	r7, #24
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}

0801115c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b084      	sub	sp, #16
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011166:	2300      	movs	r3, #0
 8011168:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d101      	bne.n	8011174 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011170:	2303      	movs	r3, #3
 8011172:	e025      	b.n	80111c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	683a      	ldr	r2, [r7, #0]
 8011178:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	32ae      	adds	r2, #174	; 0xae
 8011186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801118c:	2b00      	cmp	r3, #0
 801118e:	d00f      	beq.n	80111b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	32ae      	adds	r2, #174	; 0xae
 801119a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a0:	f107 020e 	add.w	r2, r7, #14
 80111a4:	4610      	mov	r0, r2
 80111a6:	4798      	blx	r3
 80111a8:	4602      	mov	r2, r0
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80111b6:	1c5a      	adds	r2, r3, #1
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80111be:	2300      	movs	r3, #0
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3710      	adds	r7, #16
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f002 f865 	bl	80132a0 <USBD_LL_Start>
 80111d6:	4603      	mov	r3, r0
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b083      	sub	sp, #12
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80111e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	370c      	adds	r7, #12
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr

080111f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80111f6:	b580      	push	{r7, lr}
 80111f8:	b084      	sub	sp, #16
 80111fa:	af00      	add	r7, sp, #0
 80111fc:	6078      	str	r0, [r7, #4]
 80111fe:	460b      	mov	r3, r1
 8011200:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011202:	2300      	movs	r3, #0
 8011204:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801120c:	2b00      	cmp	r3, #0
 801120e:	d009      	beq.n	8011224 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	78fa      	ldrb	r2, [r7, #3]
 801121a:	4611      	mov	r1, r2
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	4798      	blx	r3
 8011220:	4603      	mov	r3, r0
 8011222:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011224:	7bfb      	ldrb	r3, [r7, #15]
}
 8011226:	4618      	mov	r0, r3
 8011228:	3710      	adds	r7, #16
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801122e:	b580      	push	{r7, lr}
 8011230:	b084      	sub	sp, #16
 8011232:	af00      	add	r7, sp, #0
 8011234:	6078      	str	r0, [r7, #4]
 8011236:	460b      	mov	r3, r1
 8011238:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801123a:	2300      	movs	r3, #0
 801123c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	78fa      	ldrb	r2, [r7, #3]
 8011248:	4611      	mov	r1, r2
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	4798      	blx	r3
 801124e:	4603      	mov	r3, r0
 8011250:	2b00      	cmp	r3, #0
 8011252:	d001      	beq.n	8011258 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011254:	2303      	movs	r3, #3
 8011256:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011258:	7bfb      	ldrb	r3, [r7, #15]
}
 801125a:	4618      	mov	r0, r3
 801125c:	3710      	adds	r7, #16
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}

08011262 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011262:	b580      	push	{r7, lr}
 8011264:	b084      	sub	sp, #16
 8011266:	af00      	add	r7, sp, #0
 8011268:	6078      	str	r0, [r7, #4]
 801126a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011272:	6839      	ldr	r1, [r7, #0]
 8011274:	4618      	mov	r0, r3
 8011276:	f001 f908 	bl	801248a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2201      	movs	r2, #1
 801127e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011288:	461a      	mov	r2, r3
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011296:	f003 031f 	and.w	r3, r3, #31
 801129a:	2b02      	cmp	r3, #2
 801129c:	d01a      	beq.n	80112d4 <USBD_LL_SetupStage+0x72>
 801129e:	2b02      	cmp	r3, #2
 80112a0:	d822      	bhi.n	80112e8 <USBD_LL_SetupStage+0x86>
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d002      	beq.n	80112ac <USBD_LL_SetupStage+0x4a>
 80112a6:	2b01      	cmp	r3, #1
 80112a8:	d00a      	beq.n	80112c0 <USBD_LL_SetupStage+0x5e>
 80112aa:	e01d      	b.n	80112e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80112b2:	4619      	mov	r1, r3
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f000 fb5f 	bl	8011978 <USBD_StdDevReq>
 80112ba:	4603      	mov	r3, r0
 80112bc:	73fb      	strb	r3, [r7, #15]
      break;
 80112be:	e020      	b.n	8011302 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80112c6:	4619      	mov	r1, r3
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f000 fbc7 	bl	8011a5c <USBD_StdItfReq>
 80112ce:	4603      	mov	r3, r0
 80112d0:	73fb      	strb	r3, [r7, #15]
      break;
 80112d2:	e016      	b.n	8011302 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80112da:	4619      	mov	r1, r3
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f000 fc29 	bl	8011b34 <USBD_StdEPReq>
 80112e2:	4603      	mov	r3, r0
 80112e4:	73fb      	strb	r3, [r7, #15]
      break;
 80112e6:	e00c      	b.n	8011302 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80112ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	4619      	mov	r1, r3
 80112f6:	6878      	ldr	r0, [r7, #4]
 80112f8:	f002 f832 	bl	8013360 <USBD_LL_StallEP>
 80112fc:	4603      	mov	r3, r0
 80112fe:	73fb      	strb	r3, [r7, #15]
      break;
 8011300:	bf00      	nop
  }

  return ret;
 8011302:	7bfb      	ldrb	r3, [r7, #15]
}
 8011304:	4618      	mov	r0, r3
 8011306:	3710      	adds	r7, #16
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}

0801130c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b086      	sub	sp, #24
 8011310:	af00      	add	r7, sp, #0
 8011312:	60f8      	str	r0, [r7, #12]
 8011314:	460b      	mov	r3, r1
 8011316:	607a      	str	r2, [r7, #4]
 8011318:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801131a:	2300      	movs	r3, #0
 801131c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801131e:	7afb      	ldrb	r3, [r7, #11]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d16e      	bne.n	8011402 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801132a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011332:	2b03      	cmp	r3, #3
 8011334:	f040 8098 	bne.w	8011468 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	689a      	ldr	r2, [r3, #8]
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	429a      	cmp	r2, r3
 8011342:	d913      	bls.n	801136c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	689a      	ldr	r2, [r3, #8]
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	68db      	ldr	r3, [r3, #12]
 801134c:	1ad2      	subs	r2, r2, r3
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	68da      	ldr	r2, [r3, #12]
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	689b      	ldr	r3, [r3, #8]
 801135a:	4293      	cmp	r3, r2
 801135c:	bf28      	it	cs
 801135e:	4613      	movcs	r3, r2
 8011360:	461a      	mov	r2, r3
 8011362:	6879      	ldr	r1, [r7, #4]
 8011364:	68f8      	ldr	r0, [r7, #12]
 8011366:	f001 f984 	bl	8012672 <USBD_CtlContinueRx>
 801136a:	e07d      	b.n	8011468 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011372:	f003 031f 	and.w	r3, r3, #31
 8011376:	2b02      	cmp	r3, #2
 8011378:	d014      	beq.n	80113a4 <USBD_LL_DataOutStage+0x98>
 801137a:	2b02      	cmp	r3, #2
 801137c:	d81d      	bhi.n	80113ba <USBD_LL_DataOutStage+0xae>
 801137e:	2b00      	cmp	r3, #0
 8011380:	d002      	beq.n	8011388 <USBD_LL_DataOutStage+0x7c>
 8011382:	2b01      	cmp	r3, #1
 8011384:	d003      	beq.n	801138e <USBD_LL_DataOutStage+0x82>
 8011386:	e018      	b.n	80113ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011388:	2300      	movs	r3, #0
 801138a:	75bb      	strb	r3, [r7, #22]
            break;
 801138c:	e018      	b.n	80113c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011394:	b2db      	uxtb	r3, r3
 8011396:	4619      	mov	r1, r3
 8011398:	68f8      	ldr	r0, [r7, #12]
 801139a:	f000 fa5e 	bl	801185a <USBD_CoreFindIF>
 801139e:	4603      	mov	r3, r0
 80113a0:	75bb      	strb	r3, [r7, #22]
            break;
 80113a2:	e00d      	b.n	80113c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	4619      	mov	r1, r3
 80113ae:	68f8      	ldr	r0, [r7, #12]
 80113b0:	f000 fa60 	bl	8011874 <USBD_CoreFindEP>
 80113b4:	4603      	mov	r3, r0
 80113b6:	75bb      	strb	r3, [r7, #22]
            break;
 80113b8:	e002      	b.n	80113c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80113ba:	2300      	movs	r3, #0
 80113bc:	75bb      	strb	r3, [r7, #22]
            break;
 80113be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80113c0:	7dbb      	ldrb	r3, [r7, #22]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d119      	bne.n	80113fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113cc:	b2db      	uxtb	r3, r3
 80113ce:	2b03      	cmp	r3, #3
 80113d0:	d113      	bne.n	80113fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80113d2:	7dba      	ldrb	r2, [r7, #22]
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	32ae      	adds	r2, #174	; 0xae
 80113d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113dc:	691b      	ldr	r3, [r3, #16]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00b      	beq.n	80113fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80113e2:	7dba      	ldrb	r2, [r7, #22]
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80113ea:	7dba      	ldrb	r2, [r7, #22]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	32ae      	adds	r2, #174	; 0xae
 80113f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113f4:	691b      	ldr	r3, [r3, #16]
 80113f6:	68f8      	ldr	r0, [r7, #12]
 80113f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80113fa:	68f8      	ldr	r0, [r7, #12]
 80113fc:	f001 f94a 	bl	8012694 <USBD_CtlSendStatus>
 8011400:	e032      	b.n	8011468 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011402:	7afb      	ldrb	r3, [r7, #11]
 8011404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011408:	b2db      	uxtb	r3, r3
 801140a:	4619      	mov	r1, r3
 801140c:	68f8      	ldr	r0, [r7, #12]
 801140e:	f000 fa31 	bl	8011874 <USBD_CoreFindEP>
 8011412:	4603      	mov	r3, r0
 8011414:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011416:	7dbb      	ldrb	r3, [r7, #22]
 8011418:	2bff      	cmp	r3, #255	; 0xff
 801141a:	d025      	beq.n	8011468 <USBD_LL_DataOutStage+0x15c>
 801141c:	7dbb      	ldrb	r3, [r7, #22]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d122      	bne.n	8011468 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011428:	b2db      	uxtb	r3, r3
 801142a:	2b03      	cmp	r3, #3
 801142c:	d117      	bne.n	801145e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801142e:	7dba      	ldrb	r2, [r7, #22]
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	32ae      	adds	r2, #174	; 0xae
 8011434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011438:	699b      	ldr	r3, [r3, #24]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d00f      	beq.n	801145e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801143e:	7dba      	ldrb	r2, [r7, #22]
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011446:	7dba      	ldrb	r2, [r7, #22]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	32ae      	adds	r2, #174	; 0xae
 801144c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011450:	699b      	ldr	r3, [r3, #24]
 8011452:	7afa      	ldrb	r2, [r7, #11]
 8011454:	4611      	mov	r1, r2
 8011456:	68f8      	ldr	r0, [r7, #12]
 8011458:	4798      	blx	r3
 801145a:	4603      	mov	r3, r0
 801145c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801145e:	7dfb      	ldrb	r3, [r7, #23]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d001      	beq.n	8011468 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011464:	7dfb      	ldrb	r3, [r7, #23]
 8011466:	e000      	b.n	801146a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011468:	2300      	movs	r3, #0
}
 801146a:	4618      	mov	r0, r3
 801146c:	3718      	adds	r7, #24
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}

08011472 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011472:	b580      	push	{r7, lr}
 8011474:	b086      	sub	sp, #24
 8011476:	af00      	add	r7, sp, #0
 8011478:	60f8      	str	r0, [r7, #12]
 801147a:	460b      	mov	r3, r1
 801147c:	607a      	str	r2, [r7, #4]
 801147e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011480:	7afb      	ldrb	r3, [r7, #11]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d16f      	bne.n	8011566 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	3314      	adds	r3, #20
 801148a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011492:	2b02      	cmp	r3, #2
 8011494:	d15a      	bne.n	801154c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	689a      	ldr	r2, [r3, #8]
 801149a:	693b      	ldr	r3, [r7, #16]
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d914      	bls.n	80114cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	689a      	ldr	r2, [r3, #8]
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	68db      	ldr	r3, [r3, #12]
 80114aa:	1ad2      	subs	r2, r2, r3
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	689b      	ldr	r3, [r3, #8]
 80114b4:	461a      	mov	r2, r3
 80114b6:	6879      	ldr	r1, [r7, #4]
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f001 f8ac 	bl	8012616 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80114be:	2300      	movs	r3, #0
 80114c0:	2200      	movs	r2, #0
 80114c2:	2100      	movs	r1, #0
 80114c4:	68f8      	ldr	r0, [r7, #12]
 80114c6:	f001 fff5 	bl	80134b4 <USBD_LL_PrepareReceive>
 80114ca:	e03f      	b.n	801154c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	68da      	ldr	r2, [r3, #12]
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	689b      	ldr	r3, [r3, #8]
 80114d4:	429a      	cmp	r2, r3
 80114d6:	d11c      	bne.n	8011512 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	685a      	ldr	r2, [r3, #4]
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d316      	bcc.n	8011512 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	685a      	ldr	r2, [r3, #4]
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d20f      	bcs.n	8011512 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80114f2:	2200      	movs	r2, #0
 80114f4:	2100      	movs	r1, #0
 80114f6:	68f8      	ldr	r0, [r7, #12]
 80114f8:	f001 f88d 	bl	8012616 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2200      	movs	r2, #0
 8011500:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011504:	2300      	movs	r3, #0
 8011506:	2200      	movs	r2, #0
 8011508:	2100      	movs	r1, #0
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f001 ffd2 	bl	80134b4 <USBD_LL_PrepareReceive>
 8011510:	e01c      	b.n	801154c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011518:	b2db      	uxtb	r3, r3
 801151a:	2b03      	cmp	r3, #3
 801151c:	d10f      	bne.n	801153e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d009      	beq.n	801153e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	2200      	movs	r2, #0
 801152e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801153e:	2180      	movs	r1, #128	; 0x80
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f001 ff0d 	bl	8013360 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011546:	68f8      	ldr	r0, [r7, #12]
 8011548:	f001 f8b7 	bl	80126ba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d03a      	beq.n	80115cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	f7ff fe42 	bl	80111e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2200      	movs	r2, #0
 8011560:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011564:	e032      	b.n	80115cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011566:	7afb      	ldrb	r3, [r7, #11]
 8011568:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801156c:	b2db      	uxtb	r3, r3
 801156e:	4619      	mov	r1, r3
 8011570:	68f8      	ldr	r0, [r7, #12]
 8011572:	f000 f97f 	bl	8011874 <USBD_CoreFindEP>
 8011576:	4603      	mov	r3, r0
 8011578:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801157a:	7dfb      	ldrb	r3, [r7, #23]
 801157c:	2bff      	cmp	r3, #255	; 0xff
 801157e:	d025      	beq.n	80115cc <USBD_LL_DataInStage+0x15a>
 8011580:	7dfb      	ldrb	r3, [r7, #23]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d122      	bne.n	80115cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801158c:	b2db      	uxtb	r3, r3
 801158e:	2b03      	cmp	r3, #3
 8011590:	d11c      	bne.n	80115cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011592:	7dfa      	ldrb	r2, [r7, #23]
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	32ae      	adds	r2, #174	; 0xae
 8011598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801159c:	695b      	ldr	r3, [r3, #20]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d014      	beq.n	80115cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80115a2:	7dfa      	ldrb	r2, [r7, #23]
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80115aa:	7dfa      	ldrb	r2, [r7, #23]
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	32ae      	adds	r2, #174	; 0xae
 80115b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115b4:	695b      	ldr	r3, [r3, #20]
 80115b6:	7afa      	ldrb	r2, [r7, #11]
 80115b8:	4611      	mov	r1, r2
 80115ba:	68f8      	ldr	r0, [r7, #12]
 80115bc:	4798      	blx	r3
 80115be:	4603      	mov	r3, r0
 80115c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80115c2:	7dbb      	ldrb	r3, [r7, #22]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d001      	beq.n	80115cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80115c8:	7dbb      	ldrb	r3, [r7, #22]
 80115ca:	e000      	b.n	80115ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80115cc:	2300      	movs	r3, #0
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3718      	adds	r7, #24
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}

080115d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b084      	sub	sp, #16
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80115de:	2300      	movs	r3, #0
 80115e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2201      	movs	r2, #1
 80115e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2200      	movs	r2, #0
 80115ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2200      	movs	r2, #0
 80115f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2200      	movs	r2, #0
 80115fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2200      	movs	r2, #0
 8011604:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801160e:	2b00      	cmp	r3, #0
 8011610:	d014      	beq.n	801163c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d00e      	beq.n	801163c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	6852      	ldr	r2, [r2, #4]
 801162a:	b2d2      	uxtb	r2, r2
 801162c:	4611      	mov	r1, r2
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	4798      	blx	r3
 8011632:	4603      	mov	r3, r0
 8011634:	2b00      	cmp	r3, #0
 8011636:	d001      	beq.n	801163c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011638:	2303      	movs	r3, #3
 801163a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801163c:	2340      	movs	r3, #64	; 0x40
 801163e:	2200      	movs	r2, #0
 8011640:	2100      	movs	r1, #0
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f001 fe47 	bl	80132d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2201      	movs	r2, #1
 801164c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2240      	movs	r2, #64	; 0x40
 8011654:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011658:	2340      	movs	r3, #64	; 0x40
 801165a:	2200      	movs	r2, #0
 801165c:	2180      	movs	r1, #128	; 0x80
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f001 fe39 	bl	80132d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2201      	movs	r2, #1
 8011668:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2240      	movs	r2, #64	; 0x40
 801166e:	621a      	str	r2, [r3, #32]

  return ret;
 8011670:	7bfb      	ldrb	r3, [r7, #15]
}
 8011672:	4618      	mov	r0, r3
 8011674:	3710      	adds	r7, #16
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}

0801167a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801167a:	b480      	push	{r7}
 801167c:	b083      	sub	sp, #12
 801167e:	af00      	add	r7, sp, #0
 8011680:	6078      	str	r0, [r7, #4]
 8011682:	460b      	mov	r3, r1
 8011684:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	78fa      	ldrb	r2, [r7, #3]
 801168a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801168c:	2300      	movs	r3, #0
}
 801168e:	4618      	mov	r0, r3
 8011690:	370c      	adds	r7, #12
 8011692:	46bd      	mov	sp, r7
 8011694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011698:	4770      	bx	lr

0801169a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801169a:	b480      	push	{r7}
 801169c:	b083      	sub	sp, #12
 801169e:	af00      	add	r7, sp, #0
 80116a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116a8:	b2da      	uxtb	r2, r3
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2204      	movs	r2, #4
 80116b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	370c      	adds	r7, #12
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr

080116c6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80116c6:	b480      	push	{r7}
 80116c8:	b083      	sub	sp, #12
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	2b04      	cmp	r3, #4
 80116d8:	d106      	bne.n	80116e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80116e0:	b2da      	uxtb	r2, r3
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80116e8:	2300      	movs	r3, #0
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	370c      	adds	r7, #12
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr

080116f6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b082      	sub	sp, #8
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011704:	b2db      	uxtb	r3, r3
 8011706:	2b03      	cmp	r3, #3
 8011708:	d110      	bne.n	801172c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011710:	2b00      	cmp	r3, #0
 8011712:	d00b      	beq.n	801172c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801171a:	69db      	ldr	r3, [r3, #28]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d005      	beq.n	801172c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011726:	69db      	ldr	r3, [r3, #28]
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801172c:	2300      	movs	r3, #0
}
 801172e:	4618      	mov	r0, r3
 8011730:	3708      	adds	r7, #8
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}

08011736 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011736:	b580      	push	{r7, lr}
 8011738:	b082      	sub	sp, #8
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
 801173e:	460b      	mov	r3, r1
 8011740:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	32ae      	adds	r2, #174	; 0xae
 801174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d101      	bne.n	8011758 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011754:	2303      	movs	r3, #3
 8011756:	e01c      	b.n	8011792 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801175e:	b2db      	uxtb	r3, r3
 8011760:	2b03      	cmp	r3, #3
 8011762:	d115      	bne.n	8011790 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	32ae      	adds	r2, #174	; 0xae
 801176e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011772:	6a1b      	ldr	r3, [r3, #32]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d00b      	beq.n	8011790 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	32ae      	adds	r2, #174	; 0xae
 8011782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011786:	6a1b      	ldr	r3, [r3, #32]
 8011788:	78fa      	ldrb	r2, [r7, #3]
 801178a:	4611      	mov	r1, r2
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011790:	2300      	movs	r3, #0
}
 8011792:	4618      	mov	r0, r3
 8011794:	3708      	adds	r7, #8
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}

0801179a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801179a:	b580      	push	{r7, lr}
 801179c:	b082      	sub	sp, #8
 801179e:	af00      	add	r7, sp, #0
 80117a0:	6078      	str	r0, [r7, #4]
 80117a2:	460b      	mov	r3, r1
 80117a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	32ae      	adds	r2, #174	; 0xae
 80117b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d101      	bne.n	80117bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80117b8:	2303      	movs	r3, #3
 80117ba:	e01c      	b.n	80117f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117c2:	b2db      	uxtb	r3, r3
 80117c4:	2b03      	cmp	r3, #3
 80117c6:	d115      	bne.n	80117f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	32ae      	adds	r2, #174	; 0xae
 80117d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d00b      	beq.n	80117f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	32ae      	adds	r2, #174	; 0xae
 80117e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ec:	78fa      	ldrb	r2, [r7, #3]
 80117ee:	4611      	mov	r1, r2
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80117f4:	2300      	movs	r3, #0
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3708      	adds	r7, #8
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}

080117fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80117fe:	b480      	push	{r7}
 8011800:	b083      	sub	sp, #12
 8011802:	af00      	add	r7, sp, #0
 8011804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011806:	2300      	movs	r3, #0
}
 8011808:	4618      	mov	r0, r3
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801181c:	2300      	movs	r3, #0
 801181e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2201      	movs	r2, #1
 8011824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00e      	beq.n	8011850 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	687a      	ldr	r2, [r7, #4]
 801183c:	6852      	ldr	r2, [r2, #4]
 801183e:	b2d2      	uxtb	r2, r2
 8011840:	4611      	mov	r1, r2
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	4798      	blx	r3
 8011846:	4603      	mov	r3, r0
 8011848:	2b00      	cmp	r3, #0
 801184a:	d001      	beq.n	8011850 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801184c:	2303      	movs	r3, #3
 801184e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011850:	7bfb      	ldrb	r3, [r7, #15]
}
 8011852:	4618      	mov	r0, r3
 8011854:	3710      	adds	r7, #16
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}

0801185a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801185a:	b480      	push	{r7}
 801185c:	b083      	sub	sp, #12
 801185e:	af00      	add	r7, sp, #0
 8011860:	6078      	str	r0, [r7, #4]
 8011862:	460b      	mov	r3, r1
 8011864:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011866:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011868:	4618      	mov	r0, r3
 801186a:	370c      	adds	r7, #12
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011874:	b480      	push	{r7}
 8011876:	b083      	sub	sp, #12
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	460b      	mov	r3, r1
 801187e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011880:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011882:	4618      	mov	r0, r3
 8011884:	370c      	adds	r7, #12
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr

0801188e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b086      	sub	sp, #24
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
 8011896:	460b      	mov	r3, r1
 8011898:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80118a2:	2300      	movs	r3, #0
 80118a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	885b      	ldrh	r3, [r3, #2]
 80118aa:	b29a      	uxth	r2, r3
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	b29b      	uxth	r3, r3
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d920      	bls.n	80118f8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	781b      	ldrb	r3, [r3, #0]
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80118be:	e013      	b.n	80118e8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80118c0:	f107 030a 	add.w	r3, r7, #10
 80118c4:	4619      	mov	r1, r3
 80118c6:	6978      	ldr	r0, [r7, #20]
 80118c8:	f000 f81b 	bl	8011902 <USBD_GetNextDesc>
 80118cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	785b      	ldrb	r3, [r3, #1]
 80118d2:	2b05      	cmp	r3, #5
 80118d4:	d108      	bne.n	80118e8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	789b      	ldrb	r3, [r3, #2]
 80118de:	78fa      	ldrb	r2, [r7, #3]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d008      	beq.n	80118f6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80118e4:	2300      	movs	r3, #0
 80118e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	885b      	ldrh	r3, [r3, #2]
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	897b      	ldrh	r3, [r7, #10]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d8e5      	bhi.n	80118c0 <USBD_GetEpDesc+0x32>
 80118f4:	e000      	b.n	80118f8 <USBD_GetEpDesc+0x6a>
          break;
 80118f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80118f8:	693b      	ldr	r3, [r7, #16]
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3718      	adds	r7, #24
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}

08011902 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011902:	b480      	push	{r7}
 8011904:	b085      	sub	sp, #20
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
 801190a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	881a      	ldrh	r2, [r3, #0]
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	781b      	ldrb	r3, [r3, #0]
 8011918:	b29b      	uxth	r3, r3
 801191a:	4413      	add	r3, r2
 801191c:	b29a      	uxth	r2, r3
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	461a      	mov	r2, r3
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	4413      	add	r3, r2
 801192c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801192e:	68fb      	ldr	r3, [r7, #12]
}
 8011930:	4618      	mov	r0, r3
 8011932:	3714      	adds	r7, #20
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr

0801193c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801193c:	b480      	push	{r7}
 801193e:	b087      	sub	sp, #28
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	781b      	ldrb	r3, [r3, #0]
 801194c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	3301      	adds	r3, #1
 8011952:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801195a:	8a3b      	ldrh	r3, [r7, #16]
 801195c:	021b      	lsls	r3, r3, #8
 801195e:	b21a      	sxth	r2, r3
 8011960:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011964:	4313      	orrs	r3, r2
 8011966:	b21b      	sxth	r3, r3
 8011968:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801196a:	89fb      	ldrh	r3, [r7, #14]
}
 801196c:	4618      	mov	r0, r3
 801196e:	371c      	adds	r7, #28
 8011970:	46bd      	mov	sp, r7
 8011972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011976:	4770      	bx	lr

08011978 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b084      	sub	sp, #16
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011982:	2300      	movs	r3, #0
 8011984:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801198e:	2b40      	cmp	r3, #64	; 0x40
 8011990:	d005      	beq.n	801199e <USBD_StdDevReq+0x26>
 8011992:	2b40      	cmp	r3, #64	; 0x40
 8011994:	d857      	bhi.n	8011a46 <USBD_StdDevReq+0xce>
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00f      	beq.n	80119ba <USBD_StdDevReq+0x42>
 801199a:	2b20      	cmp	r3, #32
 801199c:	d153      	bne.n	8011a46 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	32ae      	adds	r2, #174	; 0xae
 80119a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119ac:	689b      	ldr	r3, [r3, #8]
 80119ae:	6839      	ldr	r1, [r7, #0]
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	4798      	blx	r3
 80119b4:	4603      	mov	r3, r0
 80119b6:	73fb      	strb	r3, [r7, #15]
      break;
 80119b8:	e04a      	b.n	8011a50 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	785b      	ldrb	r3, [r3, #1]
 80119be:	2b09      	cmp	r3, #9
 80119c0:	d83b      	bhi.n	8011a3a <USBD_StdDevReq+0xc2>
 80119c2:	a201      	add	r2, pc, #4	; (adr r2, 80119c8 <USBD_StdDevReq+0x50>)
 80119c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119c8:	08011a1d 	.word	0x08011a1d
 80119cc:	08011a31 	.word	0x08011a31
 80119d0:	08011a3b 	.word	0x08011a3b
 80119d4:	08011a27 	.word	0x08011a27
 80119d8:	08011a3b 	.word	0x08011a3b
 80119dc:	080119fb 	.word	0x080119fb
 80119e0:	080119f1 	.word	0x080119f1
 80119e4:	08011a3b 	.word	0x08011a3b
 80119e8:	08011a13 	.word	0x08011a13
 80119ec:	08011a05 	.word	0x08011a05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80119f0:	6839      	ldr	r1, [r7, #0]
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f000 fa3c 	bl	8011e70 <USBD_GetDescriptor>
          break;
 80119f8:	e024      	b.n	8011a44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80119fa:	6839      	ldr	r1, [r7, #0]
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f000 fba1 	bl	8012144 <USBD_SetAddress>
          break;
 8011a02:	e01f      	b.n	8011a44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011a04:	6839      	ldr	r1, [r7, #0]
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f000 fbe0 	bl	80121cc <USBD_SetConfig>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	73fb      	strb	r3, [r7, #15]
          break;
 8011a10:	e018      	b.n	8011a44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011a12:	6839      	ldr	r1, [r7, #0]
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f000 fc83 	bl	8012320 <USBD_GetConfig>
          break;
 8011a1a:	e013      	b.n	8011a44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011a1c:	6839      	ldr	r1, [r7, #0]
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f000 fcb4 	bl	801238c <USBD_GetStatus>
          break;
 8011a24:	e00e      	b.n	8011a44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011a26:	6839      	ldr	r1, [r7, #0]
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f000 fce3 	bl	80123f4 <USBD_SetFeature>
          break;
 8011a2e:	e009      	b.n	8011a44 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011a30:	6839      	ldr	r1, [r7, #0]
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f000 fd07 	bl	8012446 <USBD_ClrFeature>
          break;
 8011a38:	e004      	b.n	8011a44 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011a3a:	6839      	ldr	r1, [r7, #0]
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f000 fd5e 	bl	80124fe <USBD_CtlError>
          break;
 8011a42:	bf00      	nop
      }
      break;
 8011a44:	e004      	b.n	8011a50 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011a46:	6839      	ldr	r1, [r7, #0]
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f000 fd58 	bl	80124fe <USBD_CtlError>
      break;
 8011a4e:	bf00      	nop
  }

  return ret;
 8011a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3710      	adds	r7, #16
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop

08011a5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b084      	sub	sp, #16
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a66:	2300      	movs	r3, #0
 8011a68:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011a72:	2b40      	cmp	r3, #64	; 0x40
 8011a74:	d005      	beq.n	8011a82 <USBD_StdItfReq+0x26>
 8011a76:	2b40      	cmp	r3, #64	; 0x40
 8011a78:	d852      	bhi.n	8011b20 <USBD_StdItfReq+0xc4>
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d001      	beq.n	8011a82 <USBD_StdItfReq+0x26>
 8011a7e:	2b20      	cmp	r3, #32
 8011a80:	d14e      	bne.n	8011b20 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a88:	b2db      	uxtb	r3, r3
 8011a8a:	3b01      	subs	r3, #1
 8011a8c:	2b02      	cmp	r3, #2
 8011a8e:	d840      	bhi.n	8011b12 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	889b      	ldrh	r3, [r3, #4]
 8011a94:	b2db      	uxtb	r3, r3
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d836      	bhi.n	8011b08 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	889b      	ldrh	r3, [r3, #4]
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f7ff fed9 	bl	801185a <USBD_CoreFindIF>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011aac:	7bbb      	ldrb	r3, [r7, #14]
 8011aae:	2bff      	cmp	r3, #255	; 0xff
 8011ab0:	d01d      	beq.n	8011aee <USBD_StdItfReq+0x92>
 8011ab2:	7bbb      	ldrb	r3, [r7, #14]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d11a      	bne.n	8011aee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011ab8:	7bba      	ldrb	r2, [r7, #14]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	32ae      	adds	r2, #174	; 0xae
 8011abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ac2:	689b      	ldr	r3, [r3, #8]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d00f      	beq.n	8011ae8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011ac8:	7bba      	ldrb	r2, [r7, #14]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011ad0:	7bba      	ldrb	r2, [r7, #14]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	32ae      	adds	r2, #174	; 0xae
 8011ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ada:	689b      	ldr	r3, [r3, #8]
 8011adc:	6839      	ldr	r1, [r7, #0]
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	4798      	blx	r3
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011ae6:	e004      	b.n	8011af2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011ae8:	2303      	movs	r3, #3
 8011aea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011aec:	e001      	b.n	8011af2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011aee:	2303      	movs	r3, #3
 8011af0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	88db      	ldrh	r3, [r3, #6]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d110      	bne.n	8011b1c <USBD_StdItfReq+0xc0>
 8011afa:	7bfb      	ldrb	r3, [r7, #15]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d10d      	bne.n	8011b1c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f000 fdc7 	bl	8012694 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011b06:	e009      	b.n	8011b1c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011b08:	6839      	ldr	r1, [r7, #0]
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f000 fcf7 	bl	80124fe <USBD_CtlError>
          break;
 8011b10:	e004      	b.n	8011b1c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011b12:	6839      	ldr	r1, [r7, #0]
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f000 fcf2 	bl	80124fe <USBD_CtlError>
          break;
 8011b1a:	e000      	b.n	8011b1e <USBD_StdItfReq+0xc2>
          break;
 8011b1c:	bf00      	nop
      }
      break;
 8011b1e:	e004      	b.n	8011b2a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011b20:	6839      	ldr	r1, [r7, #0]
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f000 fceb 	bl	80124fe <USBD_CtlError>
      break;
 8011b28:	bf00      	nop
  }

  return ret;
 8011b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3710      	adds	r7, #16
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	889b      	ldrh	r3, [r3, #4]
 8011b46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011b50:	2b40      	cmp	r3, #64	; 0x40
 8011b52:	d007      	beq.n	8011b64 <USBD_StdEPReq+0x30>
 8011b54:	2b40      	cmp	r3, #64	; 0x40
 8011b56:	f200 817f 	bhi.w	8011e58 <USBD_StdEPReq+0x324>
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d02a      	beq.n	8011bb4 <USBD_StdEPReq+0x80>
 8011b5e:	2b20      	cmp	r3, #32
 8011b60:	f040 817a 	bne.w	8011e58 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011b64:	7bbb      	ldrb	r3, [r7, #14]
 8011b66:	4619      	mov	r1, r3
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f7ff fe83 	bl	8011874 <USBD_CoreFindEP>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011b72:	7b7b      	ldrb	r3, [r7, #13]
 8011b74:	2bff      	cmp	r3, #255	; 0xff
 8011b76:	f000 8174 	beq.w	8011e62 <USBD_StdEPReq+0x32e>
 8011b7a:	7b7b      	ldrb	r3, [r7, #13]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	f040 8170 	bne.w	8011e62 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011b82:	7b7a      	ldrb	r2, [r7, #13]
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011b8a:	7b7a      	ldrb	r2, [r7, #13]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	32ae      	adds	r2, #174	; 0xae
 8011b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b94:	689b      	ldr	r3, [r3, #8]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	f000 8163 	beq.w	8011e62 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011b9c:	7b7a      	ldrb	r2, [r7, #13]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	32ae      	adds	r2, #174	; 0xae
 8011ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ba6:	689b      	ldr	r3, [r3, #8]
 8011ba8:	6839      	ldr	r1, [r7, #0]
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	4798      	blx	r3
 8011bae:	4603      	mov	r3, r0
 8011bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011bb2:	e156      	b.n	8011e62 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	785b      	ldrb	r3, [r3, #1]
 8011bb8:	2b03      	cmp	r3, #3
 8011bba:	d008      	beq.n	8011bce <USBD_StdEPReq+0x9a>
 8011bbc:	2b03      	cmp	r3, #3
 8011bbe:	f300 8145 	bgt.w	8011e4c <USBD_StdEPReq+0x318>
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f000 809b 	beq.w	8011cfe <USBD_StdEPReq+0x1ca>
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d03c      	beq.n	8011c46 <USBD_StdEPReq+0x112>
 8011bcc:	e13e      	b.n	8011e4c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bd4:	b2db      	uxtb	r3, r3
 8011bd6:	2b02      	cmp	r3, #2
 8011bd8:	d002      	beq.n	8011be0 <USBD_StdEPReq+0xac>
 8011bda:	2b03      	cmp	r3, #3
 8011bdc:	d016      	beq.n	8011c0c <USBD_StdEPReq+0xd8>
 8011bde:	e02c      	b.n	8011c3a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011be0:	7bbb      	ldrb	r3, [r7, #14]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d00d      	beq.n	8011c02 <USBD_StdEPReq+0xce>
 8011be6:	7bbb      	ldrb	r3, [r7, #14]
 8011be8:	2b80      	cmp	r3, #128	; 0x80
 8011bea:	d00a      	beq.n	8011c02 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011bec:	7bbb      	ldrb	r3, [r7, #14]
 8011bee:	4619      	mov	r1, r3
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	f001 fbb5 	bl	8013360 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011bf6:	2180      	movs	r1, #128	; 0x80
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f001 fbb1 	bl	8013360 <USBD_LL_StallEP>
 8011bfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011c00:	e020      	b.n	8011c44 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011c02:	6839      	ldr	r1, [r7, #0]
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f000 fc7a 	bl	80124fe <USBD_CtlError>
              break;
 8011c0a:	e01b      	b.n	8011c44 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	885b      	ldrh	r3, [r3, #2]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d10e      	bne.n	8011c32 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011c14:	7bbb      	ldrb	r3, [r7, #14]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d00b      	beq.n	8011c32 <USBD_StdEPReq+0xfe>
 8011c1a:	7bbb      	ldrb	r3, [r7, #14]
 8011c1c:	2b80      	cmp	r3, #128	; 0x80
 8011c1e:	d008      	beq.n	8011c32 <USBD_StdEPReq+0xfe>
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	88db      	ldrh	r3, [r3, #6]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d104      	bne.n	8011c32 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c28:	7bbb      	ldrb	r3, [r7, #14]
 8011c2a:	4619      	mov	r1, r3
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f001 fb97 	bl	8013360 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f000 fd2e 	bl	8012694 <USBD_CtlSendStatus>

              break;
 8011c38:	e004      	b.n	8011c44 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011c3a:	6839      	ldr	r1, [r7, #0]
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f000 fc5e 	bl	80124fe <USBD_CtlError>
              break;
 8011c42:	bf00      	nop
          }
          break;
 8011c44:	e107      	b.n	8011e56 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	2b02      	cmp	r3, #2
 8011c50:	d002      	beq.n	8011c58 <USBD_StdEPReq+0x124>
 8011c52:	2b03      	cmp	r3, #3
 8011c54:	d016      	beq.n	8011c84 <USBD_StdEPReq+0x150>
 8011c56:	e04b      	b.n	8011cf0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c58:	7bbb      	ldrb	r3, [r7, #14]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d00d      	beq.n	8011c7a <USBD_StdEPReq+0x146>
 8011c5e:	7bbb      	ldrb	r3, [r7, #14]
 8011c60:	2b80      	cmp	r3, #128	; 0x80
 8011c62:	d00a      	beq.n	8011c7a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c64:	7bbb      	ldrb	r3, [r7, #14]
 8011c66:	4619      	mov	r1, r3
 8011c68:	6878      	ldr	r0, [r7, #4]
 8011c6a:	f001 fb79 	bl	8013360 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c6e:	2180      	movs	r1, #128	; 0x80
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f001 fb75 	bl	8013360 <USBD_LL_StallEP>
 8011c76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011c78:	e040      	b.n	8011cfc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011c7a:	6839      	ldr	r1, [r7, #0]
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f000 fc3e 	bl	80124fe <USBD_CtlError>
              break;
 8011c82:	e03b      	b.n	8011cfc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	885b      	ldrh	r3, [r3, #2]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d136      	bne.n	8011cfa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011c8c:	7bbb      	ldrb	r3, [r7, #14]
 8011c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d004      	beq.n	8011ca0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011c96:	7bbb      	ldrb	r3, [r7, #14]
 8011c98:	4619      	mov	r1, r3
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f001 fb7f 	bl	801339e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	f000 fcf7 	bl	8012694 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011ca6:	7bbb      	ldrb	r3, [r7, #14]
 8011ca8:	4619      	mov	r1, r3
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f7ff fde2 	bl	8011874 <USBD_CoreFindEP>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011cb4:	7b7b      	ldrb	r3, [r7, #13]
 8011cb6:	2bff      	cmp	r3, #255	; 0xff
 8011cb8:	d01f      	beq.n	8011cfa <USBD_StdEPReq+0x1c6>
 8011cba:	7b7b      	ldrb	r3, [r7, #13]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d11c      	bne.n	8011cfa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011cc0:	7b7a      	ldrb	r2, [r7, #13]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011cc8:	7b7a      	ldrb	r2, [r7, #13]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	32ae      	adds	r2, #174	; 0xae
 8011cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cd2:	689b      	ldr	r3, [r3, #8]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d010      	beq.n	8011cfa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011cd8:	7b7a      	ldrb	r2, [r7, #13]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	32ae      	adds	r2, #174	; 0xae
 8011cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ce2:	689b      	ldr	r3, [r3, #8]
 8011ce4:	6839      	ldr	r1, [r7, #0]
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	4798      	blx	r3
 8011cea:	4603      	mov	r3, r0
 8011cec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011cee:	e004      	b.n	8011cfa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011cf0:	6839      	ldr	r1, [r7, #0]
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f000 fc03 	bl	80124fe <USBD_CtlError>
              break;
 8011cf8:	e000      	b.n	8011cfc <USBD_StdEPReq+0x1c8>
              break;
 8011cfa:	bf00      	nop
          }
          break;
 8011cfc:	e0ab      	b.n	8011e56 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	2b02      	cmp	r3, #2
 8011d08:	d002      	beq.n	8011d10 <USBD_StdEPReq+0x1dc>
 8011d0a:	2b03      	cmp	r3, #3
 8011d0c:	d032      	beq.n	8011d74 <USBD_StdEPReq+0x240>
 8011d0e:	e097      	b.n	8011e40 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d10:	7bbb      	ldrb	r3, [r7, #14]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d007      	beq.n	8011d26 <USBD_StdEPReq+0x1f2>
 8011d16:	7bbb      	ldrb	r3, [r7, #14]
 8011d18:	2b80      	cmp	r3, #128	; 0x80
 8011d1a:	d004      	beq.n	8011d26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011d1c:	6839      	ldr	r1, [r7, #0]
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f000 fbed 	bl	80124fe <USBD_CtlError>
                break;
 8011d24:	e091      	b.n	8011e4a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	da0b      	bge.n	8011d46 <USBD_StdEPReq+0x212>
 8011d2e:	7bbb      	ldrb	r3, [r7, #14]
 8011d30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d34:	4613      	mov	r3, r2
 8011d36:	009b      	lsls	r3, r3, #2
 8011d38:	4413      	add	r3, r2
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	3310      	adds	r3, #16
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	4413      	add	r3, r2
 8011d42:	3304      	adds	r3, #4
 8011d44:	e00b      	b.n	8011d5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011d46:	7bbb      	ldrb	r3, [r7, #14]
 8011d48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	4413      	add	r3, r2
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011d58:	687a      	ldr	r2, [r7, #4]
 8011d5a:	4413      	add	r3, r2
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	2200      	movs	r2, #0
 8011d64:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	2202      	movs	r2, #2
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f000 fc37 	bl	80125e0 <USBD_CtlSendData>
              break;
 8011d72:	e06a      	b.n	8011e4a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	da11      	bge.n	8011da0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011d7c:	7bbb      	ldrb	r3, [r7, #14]
 8011d7e:	f003 020f 	and.w	r2, r3, #15
 8011d82:	6879      	ldr	r1, [r7, #4]
 8011d84:	4613      	mov	r3, r2
 8011d86:	009b      	lsls	r3, r3, #2
 8011d88:	4413      	add	r3, r2
 8011d8a:	009b      	lsls	r3, r3, #2
 8011d8c:	440b      	add	r3, r1
 8011d8e:	3324      	adds	r3, #36	; 0x24
 8011d90:	881b      	ldrh	r3, [r3, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d117      	bne.n	8011dc6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011d96:	6839      	ldr	r1, [r7, #0]
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f000 fbb0 	bl	80124fe <USBD_CtlError>
                  break;
 8011d9e:	e054      	b.n	8011e4a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011da0:	7bbb      	ldrb	r3, [r7, #14]
 8011da2:	f003 020f 	and.w	r2, r3, #15
 8011da6:	6879      	ldr	r1, [r7, #4]
 8011da8:	4613      	mov	r3, r2
 8011daa:	009b      	lsls	r3, r3, #2
 8011dac:	4413      	add	r3, r2
 8011dae:	009b      	lsls	r3, r3, #2
 8011db0:	440b      	add	r3, r1
 8011db2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011db6:	881b      	ldrh	r3, [r3, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d104      	bne.n	8011dc6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011dbc:	6839      	ldr	r1, [r7, #0]
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f000 fb9d 	bl	80124fe <USBD_CtlError>
                  break;
 8011dc4:	e041      	b.n	8011e4a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011dc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	da0b      	bge.n	8011de6 <USBD_StdEPReq+0x2b2>
 8011dce:	7bbb      	ldrb	r3, [r7, #14]
 8011dd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	009b      	lsls	r3, r3, #2
 8011dd8:	4413      	add	r3, r2
 8011dda:	009b      	lsls	r3, r3, #2
 8011ddc:	3310      	adds	r3, #16
 8011dde:	687a      	ldr	r2, [r7, #4]
 8011de0:	4413      	add	r3, r2
 8011de2:	3304      	adds	r3, #4
 8011de4:	e00b      	b.n	8011dfe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011de6:	7bbb      	ldrb	r3, [r7, #14]
 8011de8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011dec:	4613      	mov	r3, r2
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	4413      	add	r3, r2
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	4413      	add	r3, r2
 8011dfc:	3304      	adds	r3, #4
 8011dfe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011e00:	7bbb      	ldrb	r3, [r7, #14]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d002      	beq.n	8011e0c <USBD_StdEPReq+0x2d8>
 8011e06:	7bbb      	ldrb	r3, [r7, #14]
 8011e08:	2b80      	cmp	r3, #128	; 0x80
 8011e0a:	d103      	bne.n	8011e14 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	601a      	str	r2, [r3, #0]
 8011e12:	e00e      	b.n	8011e32 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011e14:	7bbb      	ldrb	r3, [r7, #14]
 8011e16:	4619      	mov	r1, r3
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f001 fadf 	bl	80133dc <USBD_LL_IsStallEP>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d003      	beq.n	8011e2c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	2201      	movs	r2, #1
 8011e28:	601a      	str	r2, [r3, #0]
 8011e2a:	e002      	b.n	8011e32 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	2202      	movs	r2, #2
 8011e36:	4619      	mov	r1, r3
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f000 fbd1 	bl	80125e0 <USBD_CtlSendData>
              break;
 8011e3e:	e004      	b.n	8011e4a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011e40:	6839      	ldr	r1, [r7, #0]
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f000 fb5b 	bl	80124fe <USBD_CtlError>
              break;
 8011e48:	bf00      	nop
          }
          break;
 8011e4a:	e004      	b.n	8011e56 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011e4c:	6839      	ldr	r1, [r7, #0]
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f000 fb55 	bl	80124fe <USBD_CtlError>
          break;
 8011e54:	bf00      	nop
      }
      break;
 8011e56:	e005      	b.n	8011e64 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011e58:	6839      	ldr	r1, [r7, #0]
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f000 fb4f 	bl	80124fe <USBD_CtlError>
      break;
 8011e60:	e000      	b.n	8011e64 <USBD_StdEPReq+0x330>
      break;
 8011e62:	bf00      	nop
  }

  return ret;
 8011e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3710      	adds	r7, #16
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}
	...

08011e70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b084      	sub	sp, #16
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011e82:	2300      	movs	r3, #0
 8011e84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	885b      	ldrh	r3, [r3, #2]
 8011e8a:	0a1b      	lsrs	r3, r3, #8
 8011e8c:	b29b      	uxth	r3, r3
 8011e8e:	3b01      	subs	r3, #1
 8011e90:	2b06      	cmp	r3, #6
 8011e92:	f200 8128 	bhi.w	80120e6 <USBD_GetDescriptor+0x276>
 8011e96:	a201      	add	r2, pc, #4	; (adr r2, 8011e9c <USBD_GetDescriptor+0x2c>)
 8011e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e9c:	08011eb9 	.word	0x08011eb9
 8011ea0:	08011ed1 	.word	0x08011ed1
 8011ea4:	08011f11 	.word	0x08011f11
 8011ea8:	080120e7 	.word	0x080120e7
 8011eac:	080120e7 	.word	0x080120e7
 8011eb0:	08012087 	.word	0x08012087
 8011eb4:	080120b3 	.word	0x080120b3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	687a      	ldr	r2, [r7, #4]
 8011ec2:	7c12      	ldrb	r2, [r2, #16]
 8011ec4:	f107 0108 	add.w	r1, r7, #8
 8011ec8:	4610      	mov	r0, r2
 8011eca:	4798      	blx	r3
 8011ecc:	60f8      	str	r0, [r7, #12]
      break;
 8011ece:	e112      	b.n	80120f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	7c1b      	ldrb	r3, [r3, #16]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d10d      	bne.n	8011ef4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ee0:	f107 0208 	add.w	r2, r7, #8
 8011ee4:	4610      	mov	r0, r2
 8011ee6:	4798      	blx	r3
 8011ee8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	3301      	adds	r3, #1
 8011eee:	2202      	movs	r2, #2
 8011ef0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011ef2:	e100      	b.n	80120f6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011efc:	f107 0208 	add.w	r2, r7, #8
 8011f00:	4610      	mov	r0, r2
 8011f02:	4798      	blx	r3
 8011f04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	3301      	adds	r3, #1
 8011f0a:	2202      	movs	r2, #2
 8011f0c:	701a      	strb	r2, [r3, #0]
      break;
 8011f0e:	e0f2      	b.n	80120f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	885b      	ldrh	r3, [r3, #2]
 8011f14:	b2db      	uxtb	r3, r3
 8011f16:	2b05      	cmp	r3, #5
 8011f18:	f200 80ac 	bhi.w	8012074 <USBD_GetDescriptor+0x204>
 8011f1c:	a201      	add	r2, pc, #4	; (adr r2, 8011f24 <USBD_GetDescriptor+0xb4>)
 8011f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f22:	bf00      	nop
 8011f24:	08011f3d 	.word	0x08011f3d
 8011f28:	08011f71 	.word	0x08011f71
 8011f2c:	08011fa5 	.word	0x08011fa5
 8011f30:	08011fd9 	.word	0x08011fd9
 8011f34:	0801200d 	.word	0x0801200d
 8011f38:	08012041 	.word	0x08012041
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d00b      	beq.n	8011f60 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	687a      	ldr	r2, [r7, #4]
 8011f52:	7c12      	ldrb	r2, [r2, #16]
 8011f54:	f107 0108 	add.w	r1, r7, #8
 8011f58:	4610      	mov	r0, r2
 8011f5a:	4798      	blx	r3
 8011f5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f5e:	e091      	b.n	8012084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011f60:	6839      	ldr	r1, [r7, #0]
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f000 facb 	bl	80124fe <USBD_CtlError>
            err++;
 8011f68:	7afb      	ldrb	r3, [r7, #11]
 8011f6a:	3301      	adds	r3, #1
 8011f6c:	72fb      	strb	r3, [r7, #11]
          break;
 8011f6e:	e089      	b.n	8012084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f76:	689b      	ldr	r3, [r3, #8]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d00b      	beq.n	8011f94 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f82:	689b      	ldr	r3, [r3, #8]
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	7c12      	ldrb	r2, [r2, #16]
 8011f88:	f107 0108 	add.w	r1, r7, #8
 8011f8c:	4610      	mov	r0, r2
 8011f8e:	4798      	blx	r3
 8011f90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f92:	e077      	b.n	8012084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011f94:	6839      	ldr	r1, [r7, #0]
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f000 fab1 	bl	80124fe <USBD_CtlError>
            err++;
 8011f9c:	7afb      	ldrb	r3, [r7, #11]
 8011f9e:	3301      	adds	r3, #1
 8011fa0:	72fb      	strb	r3, [r7, #11]
          break;
 8011fa2:	e06f      	b.n	8012084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011faa:	68db      	ldr	r3, [r3, #12]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d00b      	beq.n	8011fc8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	7c12      	ldrb	r2, [r2, #16]
 8011fbc:	f107 0108 	add.w	r1, r7, #8
 8011fc0:	4610      	mov	r0, r2
 8011fc2:	4798      	blx	r3
 8011fc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011fc6:	e05d      	b.n	8012084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011fc8:	6839      	ldr	r1, [r7, #0]
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 fa97 	bl	80124fe <USBD_CtlError>
            err++;
 8011fd0:	7afb      	ldrb	r3, [r7, #11]
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	72fb      	strb	r3, [r7, #11]
          break;
 8011fd6:	e055      	b.n	8012084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fde:	691b      	ldr	r3, [r3, #16]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d00b      	beq.n	8011ffc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fea:	691b      	ldr	r3, [r3, #16]
 8011fec:	687a      	ldr	r2, [r7, #4]
 8011fee:	7c12      	ldrb	r2, [r2, #16]
 8011ff0:	f107 0108 	add.w	r1, r7, #8
 8011ff4:	4610      	mov	r0, r2
 8011ff6:	4798      	blx	r3
 8011ff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ffa:	e043      	b.n	8012084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011ffc:	6839      	ldr	r1, [r7, #0]
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f000 fa7d 	bl	80124fe <USBD_CtlError>
            err++;
 8012004:	7afb      	ldrb	r3, [r7, #11]
 8012006:	3301      	adds	r3, #1
 8012008:	72fb      	strb	r3, [r7, #11]
          break;
 801200a:	e03b      	b.n	8012084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012012:	695b      	ldr	r3, [r3, #20]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d00b      	beq.n	8012030 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801201e:	695b      	ldr	r3, [r3, #20]
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	7c12      	ldrb	r2, [r2, #16]
 8012024:	f107 0108 	add.w	r1, r7, #8
 8012028:	4610      	mov	r0, r2
 801202a:	4798      	blx	r3
 801202c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801202e:	e029      	b.n	8012084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012030:	6839      	ldr	r1, [r7, #0]
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f000 fa63 	bl	80124fe <USBD_CtlError>
            err++;
 8012038:	7afb      	ldrb	r3, [r7, #11]
 801203a:	3301      	adds	r3, #1
 801203c:	72fb      	strb	r3, [r7, #11]
          break;
 801203e:	e021      	b.n	8012084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012046:	699b      	ldr	r3, [r3, #24]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d00b      	beq.n	8012064 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012052:	699b      	ldr	r3, [r3, #24]
 8012054:	687a      	ldr	r2, [r7, #4]
 8012056:	7c12      	ldrb	r2, [r2, #16]
 8012058:	f107 0108 	add.w	r1, r7, #8
 801205c:	4610      	mov	r0, r2
 801205e:	4798      	blx	r3
 8012060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012062:	e00f      	b.n	8012084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012064:	6839      	ldr	r1, [r7, #0]
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 fa49 	bl	80124fe <USBD_CtlError>
            err++;
 801206c:	7afb      	ldrb	r3, [r7, #11]
 801206e:	3301      	adds	r3, #1
 8012070:	72fb      	strb	r3, [r7, #11]
          break;
 8012072:	e007      	b.n	8012084 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012074:	6839      	ldr	r1, [r7, #0]
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f000 fa41 	bl	80124fe <USBD_CtlError>
          err++;
 801207c:	7afb      	ldrb	r3, [r7, #11]
 801207e:	3301      	adds	r3, #1
 8012080:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012082:	bf00      	nop
      }
      break;
 8012084:	e037      	b.n	80120f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	7c1b      	ldrb	r3, [r3, #16]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d109      	bne.n	80120a2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012096:	f107 0208 	add.w	r2, r7, #8
 801209a:	4610      	mov	r0, r2
 801209c:	4798      	blx	r3
 801209e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80120a0:	e029      	b.n	80120f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80120a2:	6839      	ldr	r1, [r7, #0]
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f000 fa2a 	bl	80124fe <USBD_CtlError>
        err++;
 80120aa:	7afb      	ldrb	r3, [r7, #11]
 80120ac:	3301      	adds	r3, #1
 80120ae:	72fb      	strb	r3, [r7, #11]
      break;
 80120b0:	e021      	b.n	80120f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	7c1b      	ldrb	r3, [r3, #16]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d10d      	bne.n	80120d6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120c2:	f107 0208 	add.w	r2, r7, #8
 80120c6:	4610      	mov	r0, r2
 80120c8:	4798      	blx	r3
 80120ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	3301      	adds	r3, #1
 80120d0:	2207      	movs	r2, #7
 80120d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80120d4:	e00f      	b.n	80120f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80120d6:	6839      	ldr	r1, [r7, #0]
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f000 fa10 	bl	80124fe <USBD_CtlError>
        err++;
 80120de:	7afb      	ldrb	r3, [r7, #11]
 80120e0:	3301      	adds	r3, #1
 80120e2:	72fb      	strb	r3, [r7, #11]
      break;
 80120e4:	e007      	b.n	80120f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80120e6:	6839      	ldr	r1, [r7, #0]
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 fa08 	bl	80124fe <USBD_CtlError>
      err++;
 80120ee:	7afb      	ldrb	r3, [r7, #11]
 80120f0:	3301      	adds	r3, #1
 80120f2:	72fb      	strb	r3, [r7, #11]
      break;
 80120f4:	bf00      	nop
  }

  if (err != 0U)
 80120f6:	7afb      	ldrb	r3, [r7, #11]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d11e      	bne.n	801213a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	88db      	ldrh	r3, [r3, #6]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d016      	beq.n	8012132 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012104:	893b      	ldrh	r3, [r7, #8]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d00e      	beq.n	8012128 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	88da      	ldrh	r2, [r3, #6]
 801210e:	893b      	ldrh	r3, [r7, #8]
 8012110:	4293      	cmp	r3, r2
 8012112:	bf28      	it	cs
 8012114:	4613      	movcs	r3, r2
 8012116:	b29b      	uxth	r3, r3
 8012118:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801211a:	893b      	ldrh	r3, [r7, #8]
 801211c:	461a      	mov	r2, r3
 801211e:	68f9      	ldr	r1, [r7, #12]
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f000 fa5d 	bl	80125e0 <USBD_CtlSendData>
 8012126:	e009      	b.n	801213c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012128:	6839      	ldr	r1, [r7, #0]
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f000 f9e7 	bl	80124fe <USBD_CtlError>
 8012130:	e004      	b.n	801213c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f000 faae 	bl	8012694 <USBD_CtlSendStatus>
 8012138:	e000      	b.n	801213c <USBD_GetDescriptor+0x2cc>
    return;
 801213a:	bf00      	nop
  }
}
 801213c:	3710      	adds	r7, #16
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop

08012144 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b084      	sub	sp, #16
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
 801214c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	889b      	ldrh	r3, [r3, #4]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d131      	bne.n	80121ba <USBD_SetAddress+0x76>
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	88db      	ldrh	r3, [r3, #6]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d12d      	bne.n	80121ba <USBD_SetAddress+0x76>
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	885b      	ldrh	r3, [r3, #2]
 8012162:	2b7f      	cmp	r3, #127	; 0x7f
 8012164:	d829      	bhi.n	80121ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	885b      	ldrh	r3, [r3, #2]
 801216a:	b2db      	uxtb	r3, r3
 801216c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012170:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012178:	b2db      	uxtb	r3, r3
 801217a:	2b03      	cmp	r3, #3
 801217c:	d104      	bne.n	8012188 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801217e:	6839      	ldr	r1, [r7, #0]
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f000 f9bc 	bl	80124fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012186:	e01d      	b.n	80121c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	7bfa      	ldrb	r2, [r7, #15]
 801218c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012190:	7bfb      	ldrb	r3, [r7, #15]
 8012192:	4619      	mov	r1, r3
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f001 f94d 	bl	8013434 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f000 fa7a 	bl	8012694 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80121a0:	7bfb      	ldrb	r3, [r7, #15]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d004      	beq.n	80121b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2202      	movs	r2, #2
 80121aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121ae:	e009      	b.n	80121c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2201      	movs	r2, #1
 80121b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121b8:	e004      	b.n	80121c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80121ba:	6839      	ldr	r1, [r7, #0]
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f000 f99e 	bl	80124fe <USBD_CtlError>
  }
}
 80121c2:	bf00      	nop
 80121c4:	bf00      	nop
 80121c6:	3710      	adds	r7, #16
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b084      	sub	sp, #16
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80121d6:	2300      	movs	r3, #0
 80121d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	885b      	ldrh	r3, [r3, #2]
 80121de:	b2da      	uxtb	r2, r3
 80121e0:	4b4e      	ldr	r3, [pc, #312]	; (801231c <USBD_SetConfig+0x150>)
 80121e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80121e4:	4b4d      	ldr	r3, [pc, #308]	; (801231c <USBD_SetConfig+0x150>)
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d905      	bls.n	80121f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80121ec:	6839      	ldr	r1, [r7, #0]
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f000 f985 	bl	80124fe <USBD_CtlError>
    return USBD_FAIL;
 80121f4:	2303      	movs	r3, #3
 80121f6:	e08c      	b.n	8012312 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	2b02      	cmp	r3, #2
 8012202:	d002      	beq.n	801220a <USBD_SetConfig+0x3e>
 8012204:	2b03      	cmp	r3, #3
 8012206:	d029      	beq.n	801225c <USBD_SetConfig+0x90>
 8012208:	e075      	b.n	80122f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801220a:	4b44      	ldr	r3, [pc, #272]	; (801231c <USBD_SetConfig+0x150>)
 801220c:	781b      	ldrb	r3, [r3, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d020      	beq.n	8012254 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012212:	4b42      	ldr	r3, [pc, #264]	; (801231c <USBD_SetConfig+0x150>)
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	461a      	mov	r2, r3
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801221c:	4b3f      	ldr	r3, [pc, #252]	; (801231c <USBD_SetConfig+0x150>)
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	4619      	mov	r1, r3
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f7fe ffe7 	bl	80111f6 <USBD_SetClassConfig>
 8012228:	4603      	mov	r3, r0
 801222a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801222c:	7bfb      	ldrb	r3, [r7, #15]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d008      	beq.n	8012244 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012232:	6839      	ldr	r1, [r7, #0]
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f000 f962 	bl	80124fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	2202      	movs	r2, #2
 801223e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012242:	e065      	b.n	8012310 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f000 fa25 	bl	8012694 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2203      	movs	r2, #3
 801224e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012252:	e05d      	b.n	8012310 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f000 fa1d 	bl	8012694 <USBD_CtlSendStatus>
      break;
 801225a:	e059      	b.n	8012310 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801225c:	4b2f      	ldr	r3, [pc, #188]	; (801231c <USBD_SetConfig+0x150>)
 801225e:	781b      	ldrb	r3, [r3, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d112      	bne.n	801228a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2202      	movs	r2, #2
 8012268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801226c:	4b2b      	ldr	r3, [pc, #172]	; (801231c <USBD_SetConfig+0x150>)
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	461a      	mov	r2, r3
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012276:	4b29      	ldr	r3, [pc, #164]	; (801231c <USBD_SetConfig+0x150>)
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	4619      	mov	r1, r3
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7fe ffd6 	bl	801122e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f000 fa06 	bl	8012694 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012288:	e042      	b.n	8012310 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801228a:	4b24      	ldr	r3, [pc, #144]	; (801231c <USBD_SetConfig+0x150>)
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	461a      	mov	r2, r3
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	685b      	ldr	r3, [r3, #4]
 8012294:	429a      	cmp	r2, r3
 8012296:	d02a      	beq.n	80122ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	b2db      	uxtb	r3, r3
 801229e:	4619      	mov	r1, r3
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f7fe ffc4 	bl	801122e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80122a6:	4b1d      	ldr	r3, [pc, #116]	; (801231c <USBD_SetConfig+0x150>)
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	461a      	mov	r2, r3
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80122b0:	4b1a      	ldr	r3, [pc, #104]	; (801231c <USBD_SetConfig+0x150>)
 80122b2:	781b      	ldrb	r3, [r3, #0]
 80122b4:	4619      	mov	r1, r3
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f7fe ff9d 	bl	80111f6 <USBD_SetClassConfig>
 80122bc:	4603      	mov	r3, r0
 80122be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80122c0:	7bfb      	ldrb	r3, [r7, #15]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d00f      	beq.n	80122e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80122c6:	6839      	ldr	r1, [r7, #0]
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f000 f918 	bl	80124fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	b2db      	uxtb	r3, r3
 80122d4:	4619      	mov	r1, r3
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f7fe ffa9 	bl	801122e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2202      	movs	r2, #2
 80122e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80122e4:	e014      	b.n	8012310 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 f9d4 	bl	8012694 <USBD_CtlSendStatus>
      break;
 80122ec:	e010      	b.n	8012310 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f000 f9d0 	bl	8012694 <USBD_CtlSendStatus>
      break;
 80122f4:	e00c      	b.n	8012310 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80122f6:	6839      	ldr	r1, [r7, #0]
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f000 f900 	bl	80124fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80122fe:	4b07      	ldr	r3, [pc, #28]	; (801231c <USBD_SetConfig+0x150>)
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	4619      	mov	r1, r3
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f7fe ff92 	bl	801122e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801230a:	2303      	movs	r3, #3
 801230c:	73fb      	strb	r3, [r7, #15]
      break;
 801230e:	bf00      	nop
  }

  return ret;
 8012310:	7bfb      	ldrb	r3, [r7, #15]
}
 8012312:	4618      	mov	r0, r3
 8012314:	3710      	adds	r7, #16
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}
 801231a:	bf00      	nop
 801231c:	20005224 	.word	0x20005224

08012320 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	88db      	ldrh	r3, [r3, #6]
 801232e:	2b01      	cmp	r3, #1
 8012330:	d004      	beq.n	801233c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012332:	6839      	ldr	r1, [r7, #0]
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f000 f8e2 	bl	80124fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801233a:	e023      	b.n	8012384 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012342:	b2db      	uxtb	r3, r3
 8012344:	2b02      	cmp	r3, #2
 8012346:	dc02      	bgt.n	801234e <USBD_GetConfig+0x2e>
 8012348:	2b00      	cmp	r3, #0
 801234a:	dc03      	bgt.n	8012354 <USBD_GetConfig+0x34>
 801234c:	e015      	b.n	801237a <USBD_GetConfig+0x5a>
 801234e:	2b03      	cmp	r3, #3
 8012350:	d00b      	beq.n	801236a <USBD_GetConfig+0x4a>
 8012352:	e012      	b.n	801237a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2200      	movs	r2, #0
 8012358:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	3308      	adds	r3, #8
 801235e:	2201      	movs	r2, #1
 8012360:	4619      	mov	r1, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f000 f93c 	bl	80125e0 <USBD_CtlSendData>
        break;
 8012368:	e00c      	b.n	8012384 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	3304      	adds	r3, #4
 801236e:	2201      	movs	r2, #1
 8012370:	4619      	mov	r1, r3
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f000 f934 	bl	80125e0 <USBD_CtlSendData>
        break;
 8012378:	e004      	b.n	8012384 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801237a:	6839      	ldr	r1, [r7, #0]
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f000 f8be 	bl	80124fe <USBD_CtlError>
        break;
 8012382:	bf00      	nop
}
 8012384:	bf00      	nop
 8012386:	3708      	adds	r7, #8
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801239c:	b2db      	uxtb	r3, r3
 801239e:	3b01      	subs	r3, #1
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d81e      	bhi.n	80123e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	88db      	ldrh	r3, [r3, #6]
 80123a8:	2b02      	cmp	r3, #2
 80123aa:	d004      	beq.n	80123b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80123ac:	6839      	ldr	r1, [r7, #0]
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f000 f8a5 	bl	80124fe <USBD_CtlError>
        break;
 80123b4:	e01a      	b.n	80123ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2201      	movs	r2, #1
 80123ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d005      	beq.n	80123d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	f043 0202 	orr.w	r2, r3, #2
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	330c      	adds	r3, #12
 80123d6:	2202      	movs	r2, #2
 80123d8:	4619      	mov	r1, r3
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f000 f900 	bl	80125e0 <USBD_CtlSendData>
      break;
 80123e0:	e004      	b.n	80123ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80123e2:	6839      	ldr	r1, [r7, #0]
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f000 f88a 	bl	80124fe <USBD_CtlError>
      break;
 80123ea:	bf00      	nop
  }
}
 80123ec:	bf00      	nop
 80123ee:	3708      	adds	r7, #8
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	885b      	ldrh	r3, [r3, #2]
 8012402:	2b01      	cmp	r3, #1
 8012404:	d107      	bne.n	8012416 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2201      	movs	r2, #1
 801240a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f000 f940 	bl	8012694 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012414:	e013      	b.n	801243e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	885b      	ldrh	r3, [r3, #2]
 801241a:	2b02      	cmp	r3, #2
 801241c:	d10b      	bne.n	8012436 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	889b      	ldrh	r3, [r3, #4]
 8012422:	0a1b      	lsrs	r3, r3, #8
 8012424:	b29b      	uxth	r3, r3
 8012426:	b2da      	uxtb	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f000 f930 	bl	8012694 <USBD_CtlSendStatus>
}
 8012434:	e003      	b.n	801243e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012436:	6839      	ldr	r1, [r7, #0]
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f000 f860 	bl	80124fe <USBD_CtlError>
}
 801243e:	bf00      	nop
 8012440:	3708      	adds	r7, #8
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012446:	b580      	push	{r7, lr}
 8012448:	b082      	sub	sp, #8
 801244a:	af00      	add	r7, sp, #0
 801244c:	6078      	str	r0, [r7, #4]
 801244e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012456:	b2db      	uxtb	r3, r3
 8012458:	3b01      	subs	r3, #1
 801245a:	2b02      	cmp	r3, #2
 801245c:	d80b      	bhi.n	8012476 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	885b      	ldrh	r3, [r3, #2]
 8012462:	2b01      	cmp	r3, #1
 8012464:	d10c      	bne.n	8012480 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2200      	movs	r2, #0
 801246a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f000 f910 	bl	8012694 <USBD_CtlSendStatus>
      }
      break;
 8012474:	e004      	b.n	8012480 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012476:	6839      	ldr	r1, [r7, #0]
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f000 f840 	bl	80124fe <USBD_CtlError>
      break;
 801247e:	e000      	b.n	8012482 <USBD_ClrFeature+0x3c>
      break;
 8012480:	bf00      	nop
  }
}
 8012482:	bf00      	nop
 8012484:	3708      	adds	r7, #8
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b084      	sub	sp, #16
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
 8012492:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	781a      	ldrb	r2, [r3, #0]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	3301      	adds	r3, #1
 80124a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	781a      	ldrb	r2, [r3, #0]
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	3301      	adds	r3, #1
 80124b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80124b4:	68f8      	ldr	r0, [r7, #12]
 80124b6:	f7ff fa41 	bl	801193c <SWAPBYTE>
 80124ba:	4603      	mov	r3, r0
 80124bc:	461a      	mov	r2, r3
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	3301      	adds	r3, #1
 80124c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	3301      	adds	r3, #1
 80124cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80124ce:	68f8      	ldr	r0, [r7, #12]
 80124d0:	f7ff fa34 	bl	801193c <SWAPBYTE>
 80124d4:	4603      	mov	r3, r0
 80124d6:	461a      	mov	r2, r3
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	3301      	adds	r3, #1
 80124e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	3301      	adds	r3, #1
 80124e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80124e8:	68f8      	ldr	r0, [r7, #12]
 80124ea:	f7ff fa27 	bl	801193c <SWAPBYTE>
 80124ee:	4603      	mov	r3, r0
 80124f0:	461a      	mov	r2, r3
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	80da      	strh	r2, [r3, #6]
}
 80124f6:	bf00      	nop
 80124f8:	3710      	adds	r7, #16
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b082      	sub	sp, #8
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
 8012506:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012508:	2180      	movs	r1, #128	; 0x80
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f000 ff28 	bl	8013360 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012510:	2100      	movs	r1, #0
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f000 ff24 	bl	8013360 <USBD_LL_StallEP>
}
 8012518:	bf00      	nop
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b086      	sub	sp, #24
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801252c:	2300      	movs	r3, #0
 801252e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d036      	beq.n	80125a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801253a:	6938      	ldr	r0, [r7, #16]
 801253c:	f000 f836 	bl	80125ac <USBD_GetLen>
 8012540:	4603      	mov	r3, r0
 8012542:	3301      	adds	r3, #1
 8012544:	b29b      	uxth	r3, r3
 8012546:	005b      	lsls	r3, r3, #1
 8012548:	b29a      	uxth	r2, r3
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801254e:	7dfb      	ldrb	r3, [r7, #23]
 8012550:	68ba      	ldr	r2, [r7, #8]
 8012552:	4413      	add	r3, r2
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	7812      	ldrb	r2, [r2, #0]
 8012558:	701a      	strb	r2, [r3, #0]
  idx++;
 801255a:	7dfb      	ldrb	r3, [r7, #23]
 801255c:	3301      	adds	r3, #1
 801255e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012560:	7dfb      	ldrb	r3, [r7, #23]
 8012562:	68ba      	ldr	r2, [r7, #8]
 8012564:	4413      	add	r3, r2
 8012566:	2203      	movs	r2, #3
 8012568:	701a      	strb	r2, [r3, #0]
  idx++;
 801256a:	7dfb      	ldrb	r3, [r7, #23]
 801256c:	3301      	adds	r3, #1
 801256e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012570:	e013      	b.n	801259a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012572:	7dfb      	ldrb	r3, [r7, #23]
 8012574:	68ba      	ldr	r2, [r7, #8]
 8012576:	4413      	add	r3, r2
 8012578:	693a      	ldr	r2, [r7, #16]
 801257a:	7812      	ldrb	r2, [r2, #0]
 801257c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	3301      	adds	r3, #1
 8012582:	613b      	str	r3, [r7, #16]
    idx++;
 8012584:	7dfb      	ldrb	r3, [r7, #23]
 8012586:	3301      	adds	r3, #1
 8012588:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801258a:	7dfb      	ldrb	r3, [r7, #23]
 801258c:	68ba      	ldr	r2, [r7, #8]
 801258e:	4413      	add	r3, r2
 8012590:	2200      	movs	r2, #0
 8012592:	701a      	strb	r2, [r3, #0]
    idx++;
 8012594:	7dfb      	ldrb	r3, [r7, #23]
 8012596:	3301      	adds	r3, #1
 8012598:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d1e7      	bne.n	8012572 <USBD_GetString+0x52>
 80125a2:	e000      	b.n	80125a6 <USBD_GetString+0x86>
    return;
 80125a4:	bf00      	nop
  }
}
 80125a6:	3718      	adds	r7, #24
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}

080125ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b085      	sub	sp, #20
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80125b4:	2300      	movs	r3, #0
 80125b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80125bc:	e005      	b.n	80125ca <USBD_GetLen+0x1e>
  {
    len++;
 80125be:	7bfb      	ldrb	r3, [r7, #15]
 80125c0:	3301      	adds	r3, #1
 80125c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	3301      	adds	r3, #1
 80125c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d1f5      	bne.n	80125be <USBD_GetLen+0x12>
  }

  return len;
 80125d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3714      	adds	r7, #20
 80125d8:	46bd      	mov	sp, r7
 80125da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125de:	4770      	bx	lr

080125e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	2202      	movs	r2, #2
 80125f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	687a      	ldr	r2, [r7, #4]
 80125fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	68ba      	ldr	r2, [r7, #8]
 8012604:	2100      	movs	r1, #0
 8012606:	68f8      	ldr	r0, [r7, #12]
 8012608:	f000 ff33 	bl	8013472 <USBD_LL_Transmit>

  return USBD_OK;
 801260c:	2300      	movs	r3, #0
}
 801260e:	4618      	mov	r0, r3
 8012610:	3710      	adds	r7, #16
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}

08012616 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012616:	b580      	push	{r7, lr}
 8012618:	b084      	sub	sp, #16
 801261a:	af00      	add	r7, sp, #0
 801261c:	60f8      	str	r0, [r7, #12]
 801261e:	60b9      	str	r1, [r7, #8]
 8012620:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	68ba      	ldr	r2, [r7, #8]
 8012626:	2100      	movs	r1, #0
 8012628:	68f8      	ldr	r0, [r7, #12]
 801262a:	f000 ff22 	bl	8013472 <USBD_LL_Transmit>

  return USBD_OK;
 801262e:	2300      	movs	r3, #0
}
 8012630:	4618      	mov	r0, r3
 8012632:	3710      	adds	r7, #16
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}

08012638 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b084      	sub	sp, #16
 801263c:	af00      	add	r7, sp, #0
 801263e:	60f8      	str	r0, [r7, #12]
 8012640:	60b9      	str	r1, [r7, #8]
 8012642:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	2203      	movs	r2, #3
 8012648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	687a      	ldr	r2, [r7, #4]
 8012658:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	68ba      	ldr	r2, [r7, #8]
 8012660:	2100      	movs	r1, #0
 8012662:	68f8      	ldr	r0, [r7, #12]
 8012664:	f000 ff26 	bl	80134b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012668:	2300      	movs	r3, #0
}
 801266a:	4618      	mov	r0, r3
 801266c:	3710      	adds	r7, #16
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}

08012672 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012672:	b580      	push	{r7, lr}
 8012674:	b084      	sub	sp, #16
 8012676:	af00      	add	r7, sp, #0
 8012678:	60f8      	str	r0, [r7, #12]
 801267a:	60b9      	str	r1, [r7, #8]
 801267c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	68ba      	ldr	r2, [r7, #8]
 8012682:	2100      	movs	r1, #0
 8012684:	68f8      	ldr	r0, [r7, #12]
 8012686:	f000 ff15 	bl	80134b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801268a:	2300      	movs	r3, #0
}
 801268c:	4618      	mov	r0, r3
 801268e:	3710      	adds	r7, #16
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}

08012694 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2204      	movs	r2, #4
 80126a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80126a4:	2300      	movs	r3, #0
 80126a6:	2200      	movs	r2, #0
 80126a8:	2100      	movs	r1, #0
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f000 fee1 	bl	8013472 <USBD_LL_Transmit>

  return USBD_OK;
 80126b0:	2300      	movs	r3, #0
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3708      	adds	r7, #8
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}

080126ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80126ba:	b580      	push	{r7, lr}
 80126bc:	b082      	sub	sp, #8
 80126be:	af00      	add	r7, sp, #0
 80126c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	2205      	movs	r2, #5
 80126c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80126ca:	2300      	movs	r3, #0
 80126cc:	2200      	movs	r2, #0
 80126ce:	2100      	movs	r1, #0
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 feef 	bl	80134b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80126d6:	2300      	movs	r3, #0
}
 80126d8:	4618      	mov	r0, r3
 80126da:	3708      	adds	r7, #8
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <USBD_GetRxCount>:
  * @param  pdev: device instance
  * @param  ep_addr: endpoint address
  * @retval Rx Data blength
  */
uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	460b      	mov	r3, r1
 80126ea:	70fb      	strb	r3, [r7, #3]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 80126ec:	78fb      	ldrb	r3, [r7, #3]
 80126ee:	4619      	mov	r1, r3
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f000 ff00 	bl	80134f6 <USBD_LL_GetRxDataSize>
 80126f6:	4603      	mov	r3, r0
}
 80126f8:	4618      	mov	r0, r3
 80126fa:	3708      	adds	r7, #8
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}

08012700 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8012704:	2201      	movs	r2, #1
 8012706:	4924      	ldr	r1, [pc, #144]	; (8012798 <MX_USB_DEVICE_Init+0x98>)
 8012708:	4824      	ldr	r0, [pc, #144]	; (801279c <MX_USB_DEVICE_Init+0x9c>)
 801270a:	f7fe fcf7 	bl	80110fc <USBD_Init>
 801270e:	4603      	mov	r3, r0
 8012710:	2b00      	cmp	r3, #0
 8012712:	d001      	beq.n	8012718 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012714:	f7f3 f9bc 	bl	8005a90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8012718:	4921      	ldr	r1, [pc, #132]	; (80127a0 <MX_USB_DEVICE_Init+0xa0>)
 801271a:	4820      	ldr	r0, [pc, #128]	; (801279c <MX_USB_DEVICE_Init+0x9c>)
 801271c:	f7fe fd1e 	bl	801115c <USBD_RegisterClass>
 8012720:	4603      	mov	r3, r0
 8012722:	2b00      	cmp	r3, #0
 8012724:	d001      	beq.n	801272a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012726:	f7f3 f9b3 	bl	8005a90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801272a:	491e      	ldr	r1, [pc, #120]	; (80127a4 <MX_USB_DEVICE_Init+0xa4>)
 801272c:	481b      	ldr	r0, [pc, #108]	; (801279c <MX_USB_DEVICE_Init+0x9c>)
 801272e:	f7fe fc0f 	bl	8010f50 <USBD_CDC_RegisterInterface>
 8012732:	4603      	mov	r3, r0
 8012734:	2b00      	cmp	r3, #0
 8012736:	d001      	beq.n	801273c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012738:	f7f3 f9aa 	bl	8005a90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801273c:	4817      	ldr	r0, [pc, #92]	; (801279c <MX_USB_DEVICE_Init+0x9c>)
 801273e:	f7fe fd43 	bl	80111c8 <USBD_Start>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d001      	beq.n	801274c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012748:	f7f3 f9a2 	bl	8005a90 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801274c:	2200      	movs	r2, #0
 801274e:	4916      	ldr	r1, [pc, #88]	; (80127a8 <MX_USB_DEVICE_Init+0xa8>)
 8012750:	4816      	ldr	r0, [pc, #88]	; (80127ac <MX_USB_DEVICE_Init+0xac>)
 8012752:	f7fe fcd3 	bl	80110fc <USBD_Init>
 8012756:	4603      	mov	r3, r0
 8012758:	2b00      	cmp	r3, #0
 801275a:	d001      	beq.n	8012760 <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 801275c:	f7f3 f998 	bl	8005a90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012760:	490f      	ldr	r1, [pc, #60]	; (80127a0 <MX_USB_DEVICE_Init+0xa0>)
 8012762:	4812      	ldr	r0, [pc, #72]	; (80127ac <MX_USB_DEVICE_Init+0xac>)
 8012764:	f7fe fcfa 	bl	801115c <USBD_RegisterClass>
 8012768:	4603      	mov	r3, r0
 801276a:	2b00      	cmp	r3, #0
 801276c:	d001      	beq.n	8012772 <MX_USB_DEVICE_Init+0x72>
  {
    Error_Handler();
 801276e:	f7f3 f98f 	bl	8005a90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012772:	490f      	ldr	r1, [pc, #60]	; (80127b0 <MX_USB_DEVICE_Init+0xb0>)
 8012774:	480d      	ldr	r0, [pc, #52]	; (80127ac <MX_USB_DEVICE_Init+0xac>)
 8012776:	f7fe fbeb 	bl	8010f50 <USBD_CDC_RegisterInterface>
 801277a:	4603      	mov	r3, r0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d001      	beq.n	8012784 <MX_USB_DEVICE_Init+0x84>
  {
    Error_Handler();
 8012780:	f7f3 f986 	bl	8005a90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012784:	4809      	ldr	r0, [pc, #36]	; (80127ac <MX_USB_DEVICE_Init+0xac>)
 8012786:	f7fe fd1f 	bl	80111c8 <USBD_Start>
 801278a:	4603      	mov	r3, r0
 801278c:	2b00      	cmp	r3, #0
 801278e:	d001      	beq.n	8012794 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 8012790:	f7f3 f97e 	bl	8005a90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012794:	bf00      	nop
 8012796:	bd80      	pop	{r7, pc}
 8012798:	20000228 	.word	0x20000228
 801279c:	20005228 	.word	0x20005228
 80127a0:	20000150 	.word	0x20000150
 80127a4:	200001e4 	.word	0x200001e4
 80127a8:	200001f8 	.word	0x200001f8
 80127ac:	20005504 	.word	0x20005504
 80127b0:	200001d0 	.word	0x200001d0

080127b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80127b8:	2200      	movs	r2, #0
 80127ba:	4905      	ldr	r1, [pc, #20]	; (80127d0 <CDC_Init_FS+0x1c>)
 80127bc:	4805      	ldr	r0, [pc, #20]	; (80127d4 <CDC_Init_FS+0x20>)
 80127be:	f7fe fbe1 	bl	8010f84 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80127c2:	4905      	ldr	r1, [pc, #20]	; (80127d8 <CDC_Init_FS+0x24>)
 80127c4:	4803      	ldr	r0, [pc, #12]	; (80127d4 <CDC_Init_FS+0x20>)
 80127c6:	f7fe fbff 	bl	8010fc8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80127ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	20005fe0 	.word	0x20005fe0
 80127d4:	20005504 	.word	0x20005504
 80127d8:	200057e0 	.word	0x200057e0

080127dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80127dc:	b480      	push	{r7}
 80127de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80127e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	46bd      	mov	sp, r7
 80127e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ea:	4770      	bx	lr

080127ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80127ec:	b480      	push	{r7}
 80127ee:	b083      	sub	sp, #12
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	4603      	mov	r3, r0
 80127f4:	6039      	str	r1, [r7, #0]
 80127f6:	71fb      	strb	r3, [r7, #7]
 80127f8:	4613      	mov	r3, r2
 80127fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80127fc:	79fb      	ldrb	r3, [r7, #7]
 80127fe:	2b23      	cmp	r3, #35	; 0x23
 8012800:	d84a      	bhi.n	8012898 <CDC_Control_FS+0xac>
 8012802:	a201      	add	r2, pc, #4	; (adr r2, 8012808 <CDC_Control_FS+0x1c>)
 8012804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012808:	08012899 	.word	0x08012899
 801280c:	08012899 	.word	0x08012899
 8012810:	08012899 	.word	0x08012899
 8012814:	08012899 	.word	0x08012899
 8012818:	08012899 	.word	0x08012899
 801281c:	08012899 	.word	0x08012899
 8012820:	08012899 	.word	0x08012899
 8012824:	08012899 	.word	0x08012899
 8012828:	08012899 	.word	0x08012899
 801282c:	08012899 	.word	0x08012899
 8012830:	08012899 	.word	0x08012899
 8012834:	08012899 	.word	0x08012899
 8012838:	08012899 	.word	0x08012899
 801283c:	08012899 	.word	0x08012899
 8012840:	08012899 	.word	0x08012899
 8012844:	08012899 	.word	0x08012899
 8012848:	08012899 	.word	0x08012899
 801284c:	08012899 	.word	0x08012899
 8012850:	08012899 	.word	0x08012899
 8012854:	08012899 	.word	0x08012899
 8012858:	08012899 	.word	0x08012899
 801285c:	08012899 	.word	0x08012899
 8012860:	08012899 	.word	0x08012899
 8012864:	08012899 	.word	0x08012899
 8012868:	08012899 	.word	0x08012899
 801286c:	08012899 	.word	0x08012899
 8012870:	08012899 	.word	0x08012899
 8012874:	08012899 	.word	0x08012899
 8012878:	08012899 	.word	0x08012899
 801287c:	08012899 	.word	0x08012899
 8012880:	08012899 	.word	0x08012899
 8012884:	08012899 	.word	0x08012899
 8012888:	08012899 	.word	0x08012899
 801288c:	08012899 	.word	0x08012899
 8012890:	08012899 	.word	0x08012899
 8012894:	08012899 	.word	0x08012899
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012898:	bf00      	nop
  }

  return (USBD_OK);
 801289a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801289c:	4618      	mov	r0, r3
 801289e:	370c      	adds	r7, #12
 80128a0:	46bd      	mov	sp, r7
 80128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a6:	4770      	bx	lr

080128a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80128b2:	6879      	ldr	r1, [r7, #4]
 80128b4:	4805      	ldr	r0, [pc, #20]	; (80128cc <CDC_Receive_FS+0x24>)
 80128b6:	f7fe fb87 	bl	8010fc8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80128ba:	4804      	ldr	r0, [pc, #16]	; (80128cc <CDC_Receive_FS+0x24>)
 80128bc:	f7fe fbe8 	bl	8011090 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80128c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3708      	adds	r7, #8
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}
 80128ca:	bf00      	nop
 80128cc:	20005504 	.word	0x20005504

080128d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80128d0:	b480      	push	{r7}
 80128d2:	b087      	sub	sp, #28
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	4613      	mov	r3, r2
 80128dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80128de:	2300      	movs	r3, #0
 80128e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80128e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	371c      	adds	r7, #28
 80128ea:	46bd      	mov	sp, r7
 80128ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f0:	4770      	bx	lr
	...

080128f4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80128f8:	2200      	movs	r2, #0
 80128fa:	4905      	ldr	r1, [pc, #20]	; (8012910 <CDC_Init_HS+0x1c>)
 80128fc:	4805      	ldr	r0, [pc, #20]	; (8012914 <CDC_Init_HS+0x20>)
 80128fe:	f7fe fb41 	bl	8010f84 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8012902:	4905      	ldr	r1, [pc, #20]	; (8012918 <CDC_Init_HS+0x24>)
 8012904:	4803      	ldr	r0, [pc, #12]	; (8012914 <CDC_Init_HS+0x20>)
 8012906:	f7fe fb5f 	bl	8010fc8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801290a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801290c:	4618      	mov	r0, r3
 801290e:	bd80      	pop	{r7, pc}
 8012910:	20006fe0 	.word	0x20006fe0
 8012914:	20005228 	.word	0x20005228
 8012918:	200067e0 	.word	0x200067e0

0801291c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801291c:	b480      	push	{r7}
 801291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8012920:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8012922:	4618      	mov	r0, r3
 8012924:	46bd      	mov	sp, r7
 8012926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292a:	4770      	bx	lr

0801292c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801292c:	b480      	push	{r7}
 801292e:	b083      	sub	sp, #12
 8012930:	af00      	add	r7, sp, #0
 8012932:	4603      	mov	r3, r0
 8012934:	6039      	str	r1, [r7, #0]
 8012936:	71fb      	strb	r3, [r7, #7]
 8012938:	4613      	mov	r3, r2
 801293a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801293c:	79fb      	ldrb	r3, [r7, #7]
 801293e:	2b23      	cmp	r3, #35	; 0x23
 8012940:	d84a      	bhi.n	80129d8 <CDC_Control_HS+0xac>
 8012942:	a201      	add	r2, pc, #4	; (adr r2, 8012948 <CDC_Control_HS+0x1c>)
 8012944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012948:	080129d9 	.word	0x080129d9
 801294c:	080129d9 	.word	0x080129d9
 8012950:	080129d9 	.word	0x080129d9
 8012954:	080129d9 	.word	0x080129d9
 8012958:	080129d9 	.word	0x080129d9
 801295c:	080129d9 	.word	0x080129d9
 8012960:	080129d9 	.word	0x080129d9
 8012964:	080129d9 	.word	0x080129d9
 8012968:	080129d9 	.word	0x080129d9
 801296c:	080129d9 	.word	0x080129d9
 8012970:	080129d9 	.word	0x080129d9
 8012974:	080129d9 	.word	0x080129d9
 8012978:	080129d9 	.word	0x080129d9
 801297c:	080129d9 	.word	0x080129d9
 8012980:	080129d9 	.word	0x080129d9
 8012984:	080129d9 	.word	0x080129d9
 8012988:	080129d9 	.word	0x080129d9
 801298c:	080129d9 	.word	0x080129d9
 8012990:	080129d9 	.word	0x080129d9
 8012994:	080129d9 	.word	0x080129d9
 8012998:	080129d9 	.word	0x080129d9
 801299c:	080129d9 	.word	0x080129d9
 80129a0:	080129d9 	.word	0x080129d9
 80129a4:	080129d9 	.word	0x080129d9
 80129a8:	080129d9 	.word	0x080129d9
 80129ac:	080129d9 	.word	0x080129d9
 80129b0:	080129d9 	.word	0x080129d9
 80129b4:	080129d9 	.word	0x080129d9
 80129b8:	080129d9 	.word	0x080129d9
 80129bc:	080129d9 	.word	0x080129d9
 80129c0:	080129d9 	.word	0x080129d9
 80129c4:	080129d9 	.word	0x080129d9
 80129c8:	080129d9 	.word	0x080129d9
 80129cc:	080129d9 	.word	0x080129d9
 80129d0:	080129d9 	.word	0x080129d9
 80129d4:	080129d9 	.word	0x080129d9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80129d8:	bf00      	nop
  }

  return (USBD_OK);
 80129da:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80129dc:	4618      	mov	r0, r3
 80129de:	370c      	adds	r7, #12
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr

080129e8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  CDC_Receive_handler(Buf, Len);
 80129f2:	6839      	ldr	r1, [r7, #0]
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f7f1 febf 	bl	8004778 <CDC_Receive_handler>

  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80129fa:	6879      	ldr	r1, [r7, #4]
 80129fc:	4805      	ldr	r0, [pc, #20]	; (8012a14 <CDC_Receive_HS+0x2c>)
 80129fe:	f7fe fae3 	bl	8010fc8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8012a02:	4804      	ldr	r0, [pc, #16]	; (8012a14 <CDC_Receive_HS+0x2c>)
 8012a04:	f7fe fb44 	bl	8011090 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012a08:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	20005228 	.word	0x20005228

08012a18 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b084      	sub	sp, #16
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	460b      	mov	r3, r1
 8012a22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012a24:	2300      	movs	r3, #0
 8012a26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8012a28:	4b0e      	ldr	r3, [pc, #56]	; (8012a64 <CDC_Transmit_HS+0x4c>)
 8012a2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d001      	beq.n	8012a3e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	e00e      	b.n	8012a5c <CDC_Transmit_HS+0x44>
    packet_sent = 1;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8012a3e:	887b      	ldrh	r3, [r7, #2]
 8012a40:	461a      	mov	r2, r3
 8012a42:	6879      	ldr	r1, [r7, #4]
 8012a44:	4807      	ldr	r0, [pc, #28]	; (8012a64 <CDC_Transmit_HS+0x4c>)
 8012a46:	f7fe fa9d 	bl	8010f84 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8012a4a:	4806      	ldr	r0, [pc, #24]	; (8012a64 <CDC_Transmit_HS+0x4c>)
 8012a4c:	f7fe fada 	bl	8011004 <USBD_CDC_TransmitPacket>
 8012a50:	4603      	mov	r3, r0
 8012a52:	73fb      	strb	r3, [r7, #15]
  packet_sent = 0;
 8012a54:	4b04      	ldr	r3, [pc, #16]	; (8012a68 <CDC_Transmit_HS+0x50>)
 8012a56:	2200      	movs	r2, #0
 8012a58:	601a      	str	r2, [r3, #0]
  /* USER CODE END 12 */
  return result;
 8012a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	3710      	adds	r7, #16
 8012a60:	46bd      	mov	sp, r7
 8012a62:	bd80      	pop	{r7, pc}
 8012a64:	20005228 	.word	0x20005228
 8012a68:	20000014 	.word	0x20000014

08012a6c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b087      	sub	sp, #28
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	60f8      	str	r0, [r7, #12]
 8012a74:	60b9      	str	r1, [r7, #8]
 8012a76:	4613      	mov	r3, r2
 8012a78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	75fb      	strb	r3, [r7, #23]
  packet_sent = 0;
 8012a7e:	4b05      	ldr	r3, [pc, #20]	; (8012a94 <CDC_TransmitCplt_HS+0x28>)
 8012a80:	2200      	movs	r2, #0
 8012a82:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8012a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	371c      	adds	r7, #28
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr
 8012a94:	20000014 	.word	0x20000014

08012a98 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a98:	b480      	push	{r7}
 8012a9a:	b083      	sub	sp, #12
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	6039      	str	r1, [r7, #0]
 8012aa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	2212      	movs	r2, #18
 8012aa8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8012aaa:	4b03      	ldr	r3, [pc, #12]	; (8012ab8 <USBD_HS_DeviceDescriptor+0x20>)
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	370c      	adds	r7, #12
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab6:	4770      	bx	lr
 8012ab8:	20000244 	.word	0x20000244

08012abc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012abc:	b480      	push	{r7}
 8012abe:	b083      	sub	sp, #12
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	6039      	str	r1, [r7, #0]
 8012ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	2204      	movs	r2, #4
 8012acc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012ace:	4b03      	ldr	r3, [pc, #12]	; (8012adc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	370c      	adds	r7, #12
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ada:	4770      	bx	lr
 8012adc:	20000258 	.word	0x20000258

08012ae0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	6039      	str	r1, [r7, #0]
 8012aea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012aec:	79fb      	ldrb	r3, [r7, #7]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d105      	bne.n	8012afe <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012af2:	683a      	ldr	r2, [r7, #0]
 8012af4:	4907      	ldr	r1, [pc, #28]	; (8012b14 <USBD_HS_ProductStrDescriptor+0x34>)
 8012af6:	4808      	ldr	r0, [pc, #32]	; (8012b18 <USBD_HS_ProductStrDescriptor+0x38>)
 8012af8:	f7ff fd12 	bl	8012520 <USBD_GetString>
 8012afc:	e004      	b.n	8012b08 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012afe:	683a      	ldr	r2, [r7, #0]
 8012b00:	4904      	ldr	r1, [pc, #16]	; (8012b14 <USBD_HS_ProductStrDescriptor+0x34>)
 8012b02:	4805      	ldr	r0, [pc, #20]	; (8012b18 <USBD_HS_ProductStrDescriptor+0x38>)
 8012b04:	f7ff fd0c 	bl	8012520 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012b08:	4b02      	ldr	r3, [pc, #8]	; (8012b14 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	200077e0 	.word	0x200077e0
 8012b18:	0801533c 	.word	0x0801533c

08012b1c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	4603      	mov	r3, r0
 8012b24:	6039      	str	r1, [r7, #0]
 8012b26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012b28:	683a      	ldr	r2, [r7, #0]
 8012b2a:	4904      	ldr	r1, [pc, #16]	; (8012b3c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8012b2c:	4804      	ldr	r0, [pc, #16]	; (8012b40 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8012b2e:	f7ff fcf7 	bl	8012520 <USBD_GetString>
  return USBD_StrDesc;
 8012b32:	4b02      	ldr	r3, [pc, #8]	; (8012b3c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3708      	adds	r7, #8
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}
 8012b3c:	200077e0 	.word	0x200077e0
 8012b40:	08015354 	.word	0x08015354

08012b44 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b082      	sub	sp, #8
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	6039      	str	r1, [r7, #0]
 8012b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	221a      	movs	r2, #26
 8012b54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012b56:	f000 f8e7 	bl	8012d28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012b5a:	4b02      	ldr	r3, [pc, #8]	; (8012b64 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	3708      	adds	r7, #8
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}
 8012b64:	2000025c 	.word	0x2000025c

08012b68 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	4603      	mov	r3, r0
 8012b70:	6039      	str	r1, [r7, #0]
 8012b72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012b74:	79fb      	ldrb	r3, [r7, #7]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d105      	bne.n	8012b86 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012b7a:	683a      	ldr	r2, [r7, #0]
 8012b7c:	4907      	ldr	r1, [pc, #28]	; (8012b9c <USBD_HS_ConfigStrDescriptor+0x34>)
 8012b7e:	4808      	ldr	r0, [pc, #32]	; (8012ba0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012b80:	f7ff fcce 	bl	8012520 <USBD_GetString>
 8012b84:	e004      	b.n	8012b90 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012b86:	683a      	ldr	r2, [r7, #0]
 8012b88:	4904      	ldr	r1, [pc, #16]	; (8012b9c <USBD_HS_ConfigStrDescriptor+0x34>)
 8012b8a:	4805      	ldr	r0, [pc, #20]	; (8012ba0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012b8c:	f7ff fcc8 	bl	8012520 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012b90:	4b02      	ldr	r3, [pc, #8]	; (8012b9c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3708      	adds	r7, #8
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	200077e0 	.word	0x200077e0
 8012ba0:	08015368 	.word	0x08015368

08012ba4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	4603      	mov	r3, r0
 8012bac:	6039      	str	r1, [r7, #0]
 8012bae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012bb0:	79fb      	ldrb	r3, [r7, #7]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d105      	bne.n	8012bc2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012bb6:	683a      	ldr	r2, [r7, #0]
 8012bb8:	4907      	ldr	r1, [pc, #28]	; (8012bd8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012bba:	4808      	ldr	r0, [pc, #32]	; (8012bdc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012bbc:	f7ff fcb0 	bl	8012520 <USBD_GetString>
 8012bc0:	e004      	b.n	8012bcc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012bc2:	683a      	ldr	r2, [r7, #0]
 8012bc4:	4904      	ldr	r1, [pc, #16]	; (8012bd8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012bc6:	4805      	ldr	r0, [pc, #20]	; (8012bdc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012bc8:	f7ff fcaa 	bl	8012520 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012bcc:	4b02      	ldr	r3, [pc, #8]	; (8012bd8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3708      	adds	r7, #8
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}
 8012bd6:	bf00      	nop
 8012bd8:	200077e0 	.word	0x200077e0
 8012bdc:	08015374 	.word	0x08015374

08012be0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012be0:	b480      	push	{r7}
 8012be2:	b083      	sub	sp, #12
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	4603      	mov	r3, r0
 8012be8:	6039      	str	r1, [r7, #0]
 8012bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	2212      	movs	r2, #18
 8012bf0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012bf2:	4b03      	ldr	r3, [pc, #12]	; (8012c00 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	370c      	adds	r7, #12
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr
 8012c00:	20000214 	.word	0x20000214

08012c04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c04:	b480      	push	{r7}
 8012c06:	b083      	sub	sp, #12
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	6039      	str	r1, [r7, #0]
 8012c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	2204      	movs	r2, #4
 8012c14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012c16:	4b03      	ldr	r3, [pc, #12]	; (8012c24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	370c      	adds	r7, #12
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c22:	4770      	bx	lr
 8012c24:	20000258 	.word	0x20000258

08012c28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	4603      	mov	r3, r0
 8012c30:	6039      	str	r1, [r7, #0]
 8012c32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012c34:	79fb      	ldrb	r3, [r7, #7]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d105      	bne.n	8012c46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012c3a:	683a      	ldr	r2, [r7, #0]
 8012c3c:	4907      	ldr	r1, [pc, #28]	; (8012c5c <USBD_FS_ProductStrDescriptor+0x34>)
 8012c3e:	4808      	ldr	r0, [pc, #32]	; (8012c60 <USBD_FS_ProductStrDescriptor+0x38>)
 8012c40:	f7ff fc6e 	bl	8012520 <USBD_GetString>
 8012c44:	e004      	b.n	8012c50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012c46:	683a      	ldr	r2, [r7, #0]
 8012c48:	4904      	ldr	r1, [pc, #16]	; (8012c5c <USBD_FS_ProductStrDescriptor+0x34>)
 8012c4a:	4805      	ldr	r0, [pc, #20]	; (8012c60 <USBD_FS_ProductStrDescriptor+0x38>)
 8012c4c:	f7ff fc68 	bl	8012520 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c50:	4b02      	ldr	r3, [pc, #8]	; (8012c5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	3708      	adds	r7, #8
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}
 8012c5a:	bf00      	nop
 8012c5c:	200077e0 	.word	0x200077e0
 8012c60:	0801533c 	.word	0x0801533c

08012c64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	6039      	str	r1, [r7, #0]
 8012c6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012c70:	683a      	ldr	r2, [r7, #0]
 8012c72:	4904      	ldr	r1, [pc, #16]	; (8012c84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012c74:	4804      	ldr	r0, [pc, #16]	; (8012c88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012c76:	f7ff fc53 	bl	8012520 <USBD_GetString>
  return USBD_StrDesc;
 8012c7a:	4b02      	ldr	r3, [pc, #8]	; (8012c84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	3708      	adds	r7, #8
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	200077e0 	.word	0x200077e0
 8012c88:	08015354 	.word	0x08015354

08012c8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	4603      	mov	r3, r0
 8012c94:	6039      	str	r1, [r7, #0]
 8012c96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	221a      	movs	r2, #26
 8012c9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012c9e:	f000 f843 	bl	8012d28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012ca2:	4b02      	ldr	r3, [pc, #8]	; (8012cac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3708      	adds	r7, #8
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}
 8012cac:	2000025c 	.word	0x2000025c

08012cb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	6039      	str	r1, [r7, #0]
 8012cba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012cbc:	79fb      	ldrb	r3, [r7, #7]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d105      	bne.n	8012cce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012cc2:	683a      	ldr	r2, [r7, #0]
 8012cc4:	4907      	ldr	r1, [pc, #28]	; (8012ce4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012cc6:	4808      	ldr	r0, [pc, #32]	; (8012ce8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012cc8:	f7ff fc2a 	bl	8012520 <USBD_GetString>
 8012ccc:	e004      	b.n	8012cd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012cce:	683a      	ldr	r2, [r7, #0]
 8012cd0:	4904      	ldr	r1, [pc, #16]	; (8012ce4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012cd2:	4805      	ldr	r0, [pc, #20]	; (8012ce8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012cd4:	f7ff fc24 	bl	8012520 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012cd8:	4b02      	ldr	r3, [pc, #8]	; (8012ce4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	3708      	adds	r7, #8
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}
 8012ce2:	bf00      	nop
 8012ce4:	200077e0 	.word	0x200077e0
 8012ce8:	08015368 	.word	0x08015368

08012cec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	6039      	str	r1, [r7, #0]
 8012cf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012cf8:	79fb      	ldrb	r3, [r7, #7]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d105      	bne.n	8012d0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012cfe:	683a      	ldr	r2, [r7, #0]
 8012d00:	4907      	ldr	r1, [pc, #28]	; (8012d20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012d02:	4808      	ldr	r0, [pc, #32]	; (8012d24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012d04:	f7ff fc0c 	bl	8012520 <USBD_GetString>
 8012d08:	e004      	b.n	8012d14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012d0a:	683a      	ldr	r2, [r7, #0]
 8012d0c:	4904      	ldr	r1, [pc, #16]	; (8012d20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012d0e:	4805      	ldr	r0, [pc, #20]	; (8012d24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012d10:	f7ff fc06 	bl	8012520 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d14:	4b02      	ldr	r3, [pc, #8]	; (8012d20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3708      	adds	r7, #8
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	200077e0 	.word	0x200077e0
 8012d24:	08015374 	.word	0x08015374

08012d28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b084      	sub	sp, #16
 8012d2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8012d2e:	68fa      	ldr	r2, [r7, #12]
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	4413      	add	r3, r2
 8012d34:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d009      	beq.n	8012d50 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012d3c:	2208      	movs	r2, #8
 8012d3e:	4906      	ldr	r1, [pc, #24]	; (8012d58 <Get_SerialNum+0x30>)
 8012d40:	68f8      	ldr	r0, [r7, #12]
 8012d42:	f000 f80d 	bl	8012d60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012d46:	2204      	movs	r2, #4
 8012d48:	4904      	ldr	r1, [pc, #16]	; (8012d5c <Get_SerialNum+0x34>)
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f000 f808 	bl	8012d60 <IntToUnicode>
  }
}
 8012d50:	bf00      	nop
 8012d52:	3710      	adds	r7, #16
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	2000025e 	.word	0x2000025e
 8012d5c:	2000026e 	.word	0x2000026e

08012d60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012d60:	b480      	push	{r7}
 8012d62:	b087      	sub	sp, #28
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	60b9      	str	r1, [r7, #8]
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012d72:	2300      	movs	r3, #0
 8012d74:	75fb      	strb	r3, [r7, #23]
 8012d76:	e027      	b.n	8012dc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	0f1b      	lsrs	r3, r3, #28
 8012d7c:	2b09      	cmp	r3, #9
 8012d7e:	d80b      	bhi.n	8012d98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	0f1b      	lsrs	r3, r3, #28
 8012d84:	b2da      	uxtb	r2, r3
 8012d86:	7dfb      	ldrb	r3, [r7, #23]
 8012d88:	005b      	lsls	r3, r3, #1
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	440b      	add	r3, r1
 8012d90:	3230      	adds	r2, #48	; 0x30
 8012d92:	b2d2      	uxtb	r2, r2
 8012d94:	701a      	strb	r2, [r3, #0]
 8012d96:	e00a      	b.n	8012dae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	0f1b      	lsrs	r3, r3, #28
 8012d9c:	b2da      	uxtb	r2, r3
 8012d9e:	7dfb      	ldrb	r3, [r7, #23]
 8012da0:	005b      	lsls	r3, r3, #1
 8012da2:	4619      	mov	r1, r3
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	440b      	add	r3, r1
 8012da8:	3237      	adds	r2, #55	; 0x37
 8012daa:	b2d2      	uxtb	r2, r2
 8012dac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	011b      	lsls	r3, r3, #4
 8012db2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012db4:	7dfb      	ldrb	r3, [r7, #23]
 8012db6:	005b      	lsls	r3, r3, #1
 8012db8:	3301      	adds	r3, #1
 8012dba:	68ba      	ldr	r2, [r7, #8]
 8012dbc:	4413      	add	r3, r2
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012dc2:	7dfb      	ldrb	r3, [r7, #23]
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	75fb      	strb	r3, [r7, #23]
 8012dc8:	7dfa      	ldrb	r2, [r7, #23]
 8012dca:	79fb      	ldrb	r3, [r7, #7]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d3d3      	bcc.n	8012d78 <IntToUnicode+0x18>
  }
}
 8012dd0:	bf00      	nop
 8012dd2:	bf00      	nop
 8012dd4:	371c      	adds	r7, #28
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ddc:	4770      	bx	lr
	...

08012de0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b08e      	sub	sp, #56	; 0x38
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012dec:	2200      	movs	r2, #0
 8012dee:	601a      	str	r2, [r3, #0]
 8012df0:	605a      	str	r2, [r3, #4]
 8012df2:	609a      	str	r2, [r3, #8]
 8012df4:	60da      	str	r2, [r3, #12]
 8012df6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012e00:	d13b      	bne.n	8012e7a <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e02:	2300      	movs	r3, #0
 8012e04:	623b      	str	r3, [r7, #32]
 8012e06:	4b5d      	ldr	r3, [pc, #372]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e0a:	4a5c      	ldr	r2, [pc, #368]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012e0c:	f043 0301 	orr.w	r3, r3, #1
 8012e10:	6313      	str	r3, [r2, #48]	; 0x30
 8012e12:	4b5a      	ldr	r3, [pc, #360]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e16:	f003 0301 	and.w	r3, r3, #1
 8012e1a:	623b      	str	r3, [r7, #32]
 8012e1c:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012e1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e24:	2302      	movs	r3, #2
 8012e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e2c:	2303      	movs	r3, #3
 8012e2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012e30:	230a      	movs	r3, #10
 8012e32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e38:	4619      	mov	r1, r3
 8012e3a:	4851      	ldr	r0, [pc, #324]	; (8012f80 <HAL_PCD_MspInit+0x1a0>)
 8012e3c:	f7f7 fa5a 	bl	800a2f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012e40:	4b4e      	ldr	r3, [pc, #312]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e44:	4a4d      	ldr	r2, [pc, #308]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e4a:	6353      	str	r3, [r2, #52]	; 0x34
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	61fb      	str	r3, [r7, #28]
 8012e50:	4b4a      	ldr	r3, [pc, #296]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e54:	4a49      	ldr	r2, [pc, #292]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012e5a:	6453      	str	r3, [r2, #68]	; 0x44
 8012e5c:	4b47      	ldr	r3, [pc, #284]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012e64:	61fb      	str	r3, [r7, #28]
 8012e66:	69fb      	ldr	r3, [r7, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012e68:	2200      	movs	r2, #0
 8012e6a:	2100      	movs	r1, #0
 8012e6c:	2043      	movs	r0, #67	; 0x43
 8012e6e:	f7f6 fdde 	bl	8009a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012e72:	2043      	movs	r0, #67	; 0x43
 8012e74:	f7f6 fdf7 	bl	8009a66 <HAL_NVIC_EnableIRQ>
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8012e78:	e07b      	b.n	8012f72 <HAL_PCD_MspInit+0x192>
  else if(pcdHandle->Instance==USB_OTG_HS)
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	4a41      	ldr	r2, [pc, #260]	; (8012f84 <HAL_PCD_MspInit+0x1a4>)
 8012e80:	4293      	cmp	r3, r2
 8012e82:	d176      	bne.n	8012f72 <HAL_PCD_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012e84:	2300      	movs	r3, #0
 8012e86:	61bb      	str	r3, [r7, #24]
 8012e88:	4b3c      	ldr	r3, [pc, #240]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e8c:	4a3b      	ldr	r2, [pc, #236]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012e8e:	f043 0304 	orr.w	r3, r3, #4
 8012e92:	6313      	str	r3, [r2, #48]	; 0x30
 8012e94:	4b39      	ldr	r3, [pc, #228]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e98:	f003 0304 	and.w	r3, r3, #4
 8012e9c:	61bb      	str	r3, [r7, #24]
 8012e9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	617b      	str	r3, [r7, #20]
 8012ea4:	4b35      	ldr	r3, [pc, #212]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ea8:	4a34      	ldr	r2, [pc, #208]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012eaa:	f043 0301 	orr.w	r3, r3, #1
 8012eae:	6313      	str	r3, [r2, #48]	; 0x30
 8012eb0:	4b32      	ldr	r3, [pc, #200]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eb4:	f003 0301 	and.w	r3, r3, #1
 8012eb8:	617b      	str	r3, [r7, #20]
 8012eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	613b      	str	r3, [r7, #16]
 8012ec0:	4b2e      	ldr	r3, [pc, #184]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ec4:	4a2d      	ldr	r2, [pc, #180]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012ec6:	f043 0302 	orr.w	r3, r3, #2
 8012eca:	6313      	str	r3, [r2, #48]	; 0x30
 8012ecc:	4b2b      	ldr	r3, [pc, #172]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ed0:	f003 0302 	and.w	r3, r3, #2
 8012ed4:	613b      	str	r3, [r7, #16]
 8012ed6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8012ed8:	230d      	movs	r3, #13
 8012eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012edc:	2302      	movs	r3, #2
 8012ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012ee4:	2303      	movs	r3, #3
 8012ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8012ee8:	230a      	movs	r3, #10
 8012eea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	4825      	ldr	r0, [pc, #148]	; (8012f88 <HAL_PCD_MspInit+0x1a8>)
 8012ef4:	f7f7 f9fe 	bl	800a2f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8012ef8:	2328      	movs	r3, #40	; 0x28
 8012efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012efc:	2302      	movs	r3, #2
 8012efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f00:	2300      	movs	r3, #0
 8012f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f04:	2303      	movs	r3, #3
 8012f06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8012f08:	230a      	movs	r3, #10
 8012f0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012f10:	4619      	mov	r1, r3
 8012f12:	481b      	ldr	r0, [pc, #108]	; (8012f80 <HAL_PCD_MspInit+0x1a0>)
 8012f14:	f7f7 f9ee 	bl	800a2f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8012f18:	f643 4323 	movw	r3, #15395	; 0x3c23
 8012f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f1e:	2302      	movs	r3, #2
 8012f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f22:	2300      	movs	r3, #0
 8012f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f26:	2303      	movs	r3, #3
 8012f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8012f2a:	230a      	movs	r3, #10
 8012f2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012f32:	4619      	mov	r1, r3
 8012f34:	4815      	ldr	r0, [pc, #84]	; (8012f8c <HAL_PCD_MspInit+0x1ac>)
 8012f36:	f7f7 f9dd 	bl	800a2f4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	60fb      	str	r3, [r7, #12]
 8012f3e:	4b0f      	ldr	r3, [pc, #60]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f42:	4a0e      	ldr	r2, [pc, #56]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012f44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012f48:	6313      	str	r3, [r2, #48]	; 0x30
 8012f4a:	4b0c      	ldr	r3, [pc, #48]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012f52:	60fb      	str	r3, [r7, #12]
 8012f54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8012f56:	2300      	movs	r3, #0
 8012f58:	60bb      	str	r3, [r7, #8]
 8012f5a:	4b08      	ldr	r3, [pc, #32]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f5e:	4a07      	ldr	r2, [pc, #28]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012f64:	6313      	str	r3, [r2, #48]	; 0x30
 8012f66:	4b05      	ldr	r3, [pc, #20]	; (8012f7c <HAL_PCD_MspInit+0x19c>)
 8012f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012f6e:	60bb      	str	r3, [r7, #8]
 8012f70:	68bb      	ldr	r3, [r7, #8]
}
 8012f72:	bf00      	nop
 8012f74:	3738      	adds	r7, #56	; 0x38
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	40023800 	.word	0x40023800
 8012f80:	40020000 	.word	0x40020000
 8012f84:	40040000 	.word	0x40040000
 8012f88:	40020800 	.word	0x40020800
 8012f8c:	40020400 	.word	0x40020400

08012f90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b082      	sub	sp, #8
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012fa4:	4619      	mov	r1, r3
 8012fa6:	4610      	mov	r0, r2
 8012fa8:	f7fe f95b 	bl	8011262 <USBD_LL_SetupStage>
}
 8012fac:	bf00      	nop
 8012fae:	3708      	adds	r7, #8
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	460b      	mov	r3, r1
 8012fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012fc6:	78fa      	ldrb	r2, [r7, #3]
 8012fc8:	6879      	ldr	r1, [r7, #4]
 8012fca:	4613      	mov	r3, r2
 8012fcc:	00db      	lsls	r3, r3, #3
 8012fce:	4413      	add	r3, r2
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	440b      	add	r3, r1
 8012fd4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012fd8:	681a      	ldr	r2, [r3, #0]
 8012fda:	78fb      	ldrb	r3, [r7, #3]
 8012fdc:	4619      	mov	r1, r3
 8012fde:	f7fe f995 	bl	801130c <USBD_LL_DataOutStage>
}
 8012fe2:	bf00      	nop
 8012fe4:	3708      	adds	r7, #8
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}

08012fea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fea:	b580      	push	{r7, lr}
 8012fec:	b082      	sub	sp, #8
 8012fee:	af00      	add	r7, sp, #0
 8012ff0:	6078      	str	r0, [r7, #4]
 8012ff2:	460b      	mov	r3, r1
 8012ff4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012ffc:	78fa      	ldrb	r2, [r7, #3]
 8012ffe:	6879      	ldr	r1, [r7, #4]
 8013000:	4613      	mov	r3, r2
 8013002:	00db      	lsls	r3, r3, #3
 8013004:	4413      	add	r3, r2
 8013006:	009b      	lsls	r3, r3, #2
 8013008:	440b      	add	r3, r1
 801300a:	334c      	adds	r3, #76	; 0x4c
 801300c:	681a      	ldr	r2, [r3, #0]
 801300e:	78fb      	ldrb	r3, [r7, #3]
 8013010:	4619      	mov	r1, r3
 8013012:	f7fe fa2e 	bl	8011472 <USBD_LL_DataInStage>
}
 8013016:	bf00      	nop
 8013018:	3708      	adds	r7, #8
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}

0801301e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801301e:	b580      	push	{r7, lr}
 8013020:	b082      	sub	sp, #8
 8013022:	af00      	add	r7, sp, #0
 8013024:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801302c:	4618      	mov	r0, r3
 801302e:	f7fe fb62 	bl	80116f6 <USBD_LL_SOF>
}
 8013032:	bf00      	nop
 8013034:	3708      	adds	r7, #8
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}

0801303a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801303a:	b580      	push	{r7, lr}
 801303c:	b084      	sub	sp, #16
 801303e:	af00      	add	r7, sp, #0
 8013040:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013042:	2301      	movs	r3, #1
 8013044:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	68db      	ldr	r3, [r3, #12]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d102      	bne.n	8013054 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801304e:	2300      	movs	r3, #0
 8013050:	73fb      	strb	r3, [r7, #15]
 8013052:	e008      	b.n	8013066 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	68db      	ldr	r3, [r3, #12]
 8013058:	2b02      	cmp	r3, #2
 801305a:	d102      	bne.n	8013062 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801305c:	2301      	movs	r3, #1
 801305e:	73fb      	strb	r3, [r7, #15]
 8013060:	e001      	b.n	8013066 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013062:	f7f2 fd15 	bl	8005a90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801306c:	7bfa      	ldrb	r2, [r7, #15]
 801306e:	4611      	mov	r1, r2
 8013070:	4618      	mov	r0, r3
 8013072:	f7fe fb02 	bl	801167a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801307c:	4618      	mov	r0, r3
 801307e:	f7fe faaa 	bl	80115d6 <USBD_LL_Reset>
}
 8013082:	bf00      	nop
 8013084:	3710      	adds	r7, #16
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
	...

0801308c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801309a:	4618      	mov	r0, r3
 801309c:	f7fe fafd 	bl	801169a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	687a      	ldr	r2, [r7, #4]
 80130ac:	6812      	ldr	r2, [r2, #0]
 80130ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80130b2:	f043 0301 	orr.w	r3, r3, #1
 80130b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6a1b      	ldr	r3, [r3, #32]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d005      	beq.n	80130cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130c0:	4b04      	ldr	r3, [pc, #16]	; (80130d4 <HAL_PCD_SuspendCallback+0x48>)
 80130c2:	691b      	ldr	r3, [r3, #16]
 80130c4:	4a03      	ldr	r2, [pc, #12]	; (80130d4 <HAL_PCD_SuspendCallback+0x48>)
 80130c6:	f043 0306 	orr.w	r3, r3, #6
 80130ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80130cc:	bf00      	nop
 80130ce:	3708      	adds	r7, #8
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bd80      	pop	{r7, pc}
 80130d4:	e000ed00 	.word	0xe000ed00

080130d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b082      	sub	sp, #8
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7fe faed 	bl	80116c6 <USBD_LL_Resume>
}
 80130ec:	bf00      	nop
 80130ee:	3708      	adds	r7, #8
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}

080130f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b082      	sub	sp, #8
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	460b      	mov	r3, r1
 80130fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013106:	78fa      	ldrb	r2, [r7, #3]
 8013108:	4611      	mov	r1, r2
 801310a:	4618      	mov	r0, r3
 801310c:	f7fe fb45 	bl	801179a <USBD_LL_IsoOUTIncomplete>
}
 8013110:	bf00      	nop
 8013112:	3708      	adds	r7, #8
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}

08013118 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	460b      	mov	r3, r1
 8013122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801312a:	78fa      	ldrb	r2, [r7, #3]
 801312c:	4611      	mov	r1, r2
 801312e:	4618      	mov	r0, r3
 8013130:	f7fe fb01 	bl	8011736 <USBD_LL_IsoINIncomplete>
}
 8013134:	bf00      	nop
 8013136:	3708      	adds	r7, #8
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}

0801313c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b082      	sub	sp, #8
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801314a:	4618      	mov	r0, r3
 801314c:	f7fe fb57 	bl	80117fe <USBD_LL_DevConnected>
}
 8013150:	bf00      	nop
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}

08013158 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b082      	sub	sp, #8
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013166:	4618      	mov	r0, r3
 8013168:	f7fe fb54 	bl	8011814 <USBD_LL_DevDisconnected>
}
 801316c:	bf00      	nop
 801316e:	3708      	adds	r7, #8
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}

08013174 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d13c      	bne.n	80131fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013184:	4a43      	ldr	r2, [pc, #268]	; (8013294 <USBD_LL_Init+0x120>)
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	4a41      	ldr	r2, [pc, #260]	; (8013294 <USBD_LL_Init+0x120>)
 8013190:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013194:	4b3f      	ldr	r3, [pc, #252]	; (8013294 <USBD_LL_Init+0x120>)
 8013196:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801319a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801319c:	4b3d      	ldr	r3, [pc, #244]	; (8013294 <USBD_LL_Init+0x120>)
 801319e:	2204      	movs	r2, #4
 80131a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80131a2:	4b3c      	ldr	r3, [pc, #240]	; (8013294 <USBD_LL_Init+0x120>)
 80131a4:	2202      	movs	r2, #2
 80131a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80131a8:	4b3a      	ldr	r3, [pc, #232]	; (8013294 <USBD_LL_Init+0x120>)
 80131aa:	2200      	movs	r2, #0
 80131ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80131ae:	4b39      	ldr	r3, [pc, #228]	; (8013294 <USBD_LL_Init+0x120>)
 80131b0:	2202      	movs	r2, #2
 80131b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80131b4:	4b37      	ldr	r3, [pc, #220]	; (8013294 <USBD_LL_Init+0x120>)
 80131b6:	2200      	movs	r2, #0
 80131b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80131ba:	4b36      	ldr	r3, [pc, #216]	; (8013294 <USBD_LL_Init+0x120>)
 80131bc:	2200      	movs	r2, #0
 80131be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80131c0:	4b34      	ldr	r3, [pc, #208]	; (8013294 <USBD_LL_Init+0x120>)
 80131c2:	2200      	movs	r2, #0
 80131c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80131c6:	4b33      	ldr	r3, [pc, #204]	; (8013294 <USBD_LL_Init+0x120>)
 80131c8:	2200      	movs	r2, #0
 80131ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80131cc:	4b31      	ldr	r3, [pc, #196]	; (8013294 <USBD_LL_Init+0x120>)
 80131ce:	2200      	movs	r2, #0
 80131d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80131d2:	4830      	ldr	r0, [pc, #192]	; (8013294 <USBD_LL_Init+0x120>)
 80131d4:	f7f7 fcad 	bl	800ab32 <HAL_PCD_Init>
 80131d8:	4603      	mov	r3, r0
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d001      	beq.n	80131e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80131de:	f7f2 fc57 	bl	8005a90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80131e2:	2180      	movs	r1, #128	; 0x80
 80131e4:	482b      	ldr	r0, [pc, #172]	; (8013294 <USBD_LL_Init+0x120>)
 80131e6:	f7f8 ff04 	bl	800bff2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80131ea:	2240      	movs	r2, #64	; 0x40
 80131ec:	2100      	movs	r1, #0
 80131ee:	4829      	ldr	r0, [pc, #164]	; (8013294 <USBD_LL_Init+0x120>)
 80131f0:	f7f8 feb8 	bl	800bf64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80131f4:	2280      	movs	r2, #128	; 0x80
 80131f6:	2101      	movs	r1, #1
 80131f8:	4826      	ldr	r0, [pc, #152]	; (8013294 <USBD_LL_Init+0x120>)
 80131fa:	f7f8 feb3 	bl	800bf64 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	781b      	ldrb	r3, [r3, #0]
 8013202:	2b01      	cmp	r3, #1
 8013204:	d140      	bne.n	8013288 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8013206:	4a24      	ldr	r2, [pc, #144]	; (8013298 <USBD_LL_Init+0x124>)
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	4a21      	ldr	r2, [pc, #132]	; (8013298 <USBD_LL_Init+0x124>)
 8013212:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8013216:	4b20      	ldr	r3, [pc, #128]	; (8013298 <USBD_LL_Init+0x124>)
 8013218:	4a20      	ldr	r2, [pc, #128]	; (801329c <USBD_LL_Init+0x128>)
 801321a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 801321c:	4b1e      	ldr	r3, [pc, #120]	; (8013298 <USBD_LL_Init+0x124>)
 801321e:	2206      	movs	r2, #6
 8013220:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8013222:	4b1d      	ldr	r3, [pc, #116]	; (8013298 <USBD_LL_Init+0x124>)
 8013224:	2200      	movs	r2, #0
 8013226:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8013228:	4b1b      	ldr	r3, [pc, #108]	; (8013298 <USBD_LL_Init+0x124>)
 801322a:	2200      	movs	r2, #0
 801322c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 801322e:	4b1a      	ldr	r3, [pc, #104]	; (8013298 <USBD_LL_Init+0x124>)
 8013230:	2201      	movs	r2, #1
 8013232:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8013234:	4b18      	ldr	r3, [pc, #96]	; (8013298 <USBD_LL_Init+0x124>)
 8013236:	2200      	movs	r2, #0
 8013238:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801323a:	4b17      	ldr	r3, [pc, #92]	; (8013298 <USBD_LL_Init+0x124>)
 801323c:	2200      	movs	r2, #0
 801323e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8013240:	4b15      	ldr	r3, [pc, #84]	; (8013298 <USBD_LL_Init+0x124>)
 8013242:	2200      	movs	r2, #0
 8013244:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8013246:	4b14      	ldr	r3, [pc, #80]	; (8013298 <USBD_LL_Init+0x124>)
 8013248:	2200      	movs	r2, #0
 801324a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801324c:	4b12      	ldr	r3, [pc, #72]	; (8013298 <USBD_LL_Init+0x124>)
 801324e:	2200      	movs	r2, #0
 8013250:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8013252:	4b11      	ldr	r3, [pc, #68]	; (8013298 <USBD_LL_Init+0x124>)
 8013254:	2200      	movs	r2, #0
 8013256:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8013258:	480f      	ldr	r0, [pc, #60]	; (8013298 <USBD_LL_Init+0x124>)
 801325a:	f7f7 fc6a 	bl	800ab32 <HAL_PCD_Init>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d001      	beq.n	8013268 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 8013264:	f7f2 fc14 	bl	8005a90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8013268:	f44f 7100 	mov.w	r1, #512	; 0x200
 801326c:	480a      	ldr	r0, [pc, #40]	; (8013298 <USBD_LL_Init+0x124>)
 801326e:	f7f8 fec0 	bl	800bff2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8013272:	2280      	movs	r2, #128	; 0x80
 8013274:	2100      	movs	r1, #0
 8013276:	4808      	ldr	r0, [pc, #32]	; (8013298 <USBD_LL_Init+0x124>)
 8013278:	f7f8 fe74 	bl	800bf64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801327c:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8013280:	2101      	movs	r1, #1
 8013282:	4805      	ldr	r0, [pc, #20]	; (8013298 <USBD_LL_Init+0x124>)
 8013284:	f7f8 fe6e 	bl	800bf64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013288:	2300      	movs	r3, #0
}
 801328a:	4618      	mov	r0, r3
 801328c:	3708      	adds	r7, #8
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
 8013292:	bf00      	nop
 8013294:	200079e0 	.word	0x200079e0
 8013298:	20007eec 	.word	0x20007eec
 801329c:	40040000 	.word	0x40040000

080132a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b084      	sub	sp, #16
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132a8:	2300      	movs	r3, #0
 80132aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132ac:	2300      	movs	r3, #0
 80132ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7f7 fd58 	bl	800ad6c <HAL_PCD_Start>
 80132bc:	4603      	mov	r3, r0
 80132be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132c0:	7bfb      	ldrb	r3, [r7, #15]
 80132c2:	4618      	mov	r0, r3
 80132c4:	f000 f942 	bl	801354c <USBD_Get_USB_Status>
 80132c8:	4603      	mov	r3, r0
 80132ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3710      	adds	r7, #16
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}

080132d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80132d6:	b580      	push	{r7, lr}
 80132d8:	b084      	sub	sp, #16
 80132da:	af00      	add	r7, sp, #0
 80132dc:	6078      	str	r0, [r7, #4]
 80132de:	4608      	mov	r0, r1
 80132e0:	4611      	mov	r1, r2
 80132e2:	461a      	mov	r2, r3
 80132e4:	4603      	mov	r3, r0
 80132e6:	70fb      	strb	r3, [r7, #3]
 80132e8:	460b      	mov	r3, r1
 80132ea:	70bb      	strb	r3, [r7, #2]
 80132ec:	4613      	mov	r3, r2
 80132ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132f0:	2300      	movs	r3, #0
 80132f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132f4:	2300      	movs	r3, #0
 80132f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80132fe:	78bb      	ldrb	r3, [r7, #2]
 8013300:	883a      	ldrh	r2, [r7, #0]
 8013302:	78f9      	ldrb	r1, [r7, #3]
 8013304:	f7f8 fa29 	bl	800b75a <HAL_PCD_EP_Open>
 8013308:	4603      	mov	r3, r0
 801330a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801330c:	7bfb      	ldrb	r3, [r7, #15]
 801330e:	4618      	mov	r0, r3
 8013310:	f000 f91c 	bl	801354c <USBD_Get_USB_Status>
 8013314:	4603      	mov	r3, r0
 8013316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013318:	7bbb      	ldrb	r3, [r7, #14]
}
 801331a:	4618      	mov	r0, r3
 801331c:	3710      	adds	r7, #16
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}

08013322 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013322:	b580      	push	{r7, lr}
 8013324:	b084      	sub	sp, #16
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
 801332a:	460b      	mov	r3, r1
 801332c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801332e:	2300      	movs	r3, #0
 8013330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013332:	2300      	movs	r3, #0
 8013334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801333c:	78fa      	ldrb	r2, [r7, #3]
 801333e:	4611      	mov	r1, r2
 8013340:	4618      	mov	r0, r3
 8013342:	f7f8 fa72 	bl	800b82a <HAL_PCD_EP_Close>
 8013346:	4603      	mov	r3, r0
 8013348:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801334a:	7bfb      	ldrb	r3, [r7, #15]
 801334c:	4618      	mov	r0, r3
 801334e:	f000 f8fd 	bl	801354c <USBD_Get_USB_Status>
 8013352:	4603      	mov	r3, r0
 8013354:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013356:	7bbb      	ldrb	r3, [r7, #14]
}
 8013358:	4618      	mov	r0, r3
 801335a:	3710      	adds	r7, #16
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	460b      	mov	r3, r1
 801336a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801336c:	2300      	movs	r3, #0
 801336e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013370:	2300      	movs	r3, #0
 8013372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801337a:	78fa      	ldrb	r2, [r7, #3]
 801337c:	4611      	mov	r1, r2
 801337e:	4618      	mov	r0, r3
 8013380:	f7f8 fb4a 	bl	800ba18 <HAL_PCD_EP_SetStall>
 8013384:	4603      	mov	r3, r0
 8013386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013388:	7bfb      	ldrb	r3, [r7, #15]
 801338a:	4618      	mov	r0, r3
 801338c:	f000 f8de 	bl	801354c <USBD_Get_USB_Status>
 8013390:	4603      	mov	r3, r0
 8013392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013394:	7bbb      	ldrb	r3, [r7, #14]
}
 8013396:	4618      	mov	r0, r3
 8013398:	3710      	adds	r7, #16
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}

0801339e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801339e:	b580      	push	{r7, lr}
 80133a0:	b084      	sub	sp, #16
 80133a2:	af00      	add	r7, sp, #0
 80133a4:	6078      	str	r0, [r7, #4]
 80133a6:	460b      	mov	r3, r1
 80133a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133aa:	2300      	movs	r3, #0
 80133ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133ae:	2300      	movs	r3, #0
 80133b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80133b8:	78fa      	ldrb	r2, [r7, #3]
 80133ba:	4611      	mov	r1, r2
 80133bc:	4618      	mov	r0, r3
 80133be:	f7f8 fb8f 	bl	800bae0 <HAL_PCD_EP_ClrStall>
 80133c2:	4603      	mov	r3, r0
 80133c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133c6:	7bfb      	ldrb	r3, [r7, #15]
 80133c8:	4618      	mov	r0, r3
 80133ca:	f000 f8bf 	bl	801354c <USBD_Get_USB_Status>
 80133ce:	4603      	mov	r3, r0
 80133d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3710      	adds	r7, #16
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}

080133dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133dc:	b480      	push	{r7}
 80133de:	b085      	sub	sp, #20
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	460b      	mov	r3, r1
 80133e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80133ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80133f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	da0b      	bge.n	8013410 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80133f8:	78fb      	ldrb	r3, [r7, #3]
 80133fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80133fe:	68f9      	ldr	r1, [r7, #12]
 8013400:	4613      	mov	r3, r2
 8013402:	00db      	lsls	r3, r3, #3
 8013404:	4413      	add	r3, r2
 8013406:	009b      	lsls	r3, r3, #2
 8013408:	440b      	add	r3, r1
 801340a:	333e      	adds	r3, #62	; 0x3e
 801340c:	781b      	ldrb	r3, [r3, #0]
 801340e:	e00b      	b.n	8013428 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013410:	78fb      	ldrb	r3, [r7, #3]
 8013412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013416:	68f9      	ldr	r1, [r7, #12]
 8013418:	4613      	mov	r3, r2
 801341a:	00db      	lsls	r3, r3, #3
 801341c:	4413      	add	r3, r2
 801341e:	009b      	lsls	r3, r3, #2
 8013420:	440b      	add	r3, r1
 8013422:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013426:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013428:	4618      	mov	r0, r3
 801342a:	3714      	adds	r7, #20
 801342c:	46bd      	mov	sp, r7
 801342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013432:	4770      	bx	lr

08013434 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b084      	sub	sp, #16
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
 801343c:	460b      	mov	r3, r1
 801343e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013440:	2300      	movs	r3, #0
 8013442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013444:	2300      	movs	r3, #0
 8013446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801344e:	78fa      	ldrb	r2, [r7, #3]
 8013450:	4611      	mov	r1, r2
 8013452:	4618      	mov	r0, r3
 8013454:	f7f8 f95c 	bl	800b710 <HAL_PCD_SetAddress>
 8013458:	4603      	mov	r3, r0
 801345a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801345c:	7bfb      	ldrb	r3, [r7, #15]
 801345e:	4618      	mov	r0, r3
 8013460:	f000 f874 	bl	801354c <USBD_Get_USB_Status>
 8013464:	4603      	mov	r3, r0
 8013466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013468:	7bbb      	ldrb	r3, [r7, #14]
}
 801346a:	4618      	mov	r0, r3
 801346c:	3710      	adds	r7, #16
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}

08013472 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013472:	b580      	push	{r7, lr}
 8013474:	b086      	sub	sp, #24
 8013476:	af00      	add	r7, sp, #0
 8013478:	60f8      	str	r0, [r7, #12]
 801347a:	607a      	str	r2, [r7, #4]
 801347c:	603b      	str	r3, [r7, #0]
 801347e:	460b      	mov	r3, r1
 8013480:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013482:	2300      	movs	r3, #0
 8013484:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013486:	2300      	movs	r3, #0
 8013488:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013490:	7af9      	ldrb	r1, [r7, #11]
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	687a      	ldr	r2, [r7, #4]
 8013496:	f7f8 fa75 	bl	800b984 <HAL_PCD_EP_Transmit>
 801349a:	4603      	mov	r3, r0
 801349c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801349e:	7dfb      	ldrb	r3, [r7, #23]
 80134a0:	4618      	mov	r0, r3
 80134a2:	f000 f853 	bl	801354c <USBD_Get_USB_Status>
 80134a6:	4603      	mov	r3, r0
 80134a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80134aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3718      	adds	r7, #24
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}

080134b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b086      	sub	sp, #24
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	60f8      	str	r0, [r7, #12]
 80134bc:	607a      	str	r2, [r7, #4]
 80134be:	603b      	str	r3, [r7, #0]
 80134c0:	460b      	mov	r3, r1
 80134c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134c4:	2300      	movs	r3, #0
 80134c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134c8:	2300      	movs	r3, #0
 80134ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80134d2:	7af9      	ldrb	r1, [r7, #11]
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	687a      	ldr	r2, [r7, #4]
 80134d8:	f7f8 f9f1 	bl	800b8be <HAL_PCD_EP_Receive>
 80134dc:	4603      	mov	r3, r0
 80134de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134e0:	7dfb      	ldrb	r3, [r7, #23]
 80134e2:	4618      	mov	r0, r3
 80134e4:	f000 f832 	bl	801354c <USBD_Get_USB_Status>
 80134e8:	4603      	mov	r3, r0
 80134ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80134ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3718      	adds	r7, #24
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}

080134f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134f6:	b580      	push	{r7, lr}
 80134f8:	b082      	sub	sp, #8
 80134fa:	af00      	add	r7, sp, #0
 80134fc:	6078      	str	r0, [r7, #4]
 80134fe:	460b      	mov	r3, r1
 8013500:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013508:	78fa      	ldrb	r2, [r7, #3]
 801350a:	4611      	mov	r1, r2
 801350c:	4618      	mov	r0, r3
 801350e:	f7f8 fa21 	bl	800b954 <HAL_PCD_EP_GetRxCount>
 8013512:	4603      	mov	r3, r0
}
 8013514:	4618      	mov	r0, r3
 8013516:	3708      	adds	r7, #8
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}

0801351c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801351c:	b480      	push	{r7}
 801351e:	b083      	sub	sp, #12
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013524:	4b03      	ldr	r3, [pc, #12]	; (8013534 <USBD_static_malloc+0x18>)
}
 8013526:	4618      	mov	r0, r3
 8013528:	370c      	adds	r7, #12
 801352a:	46bd      	mov	sp, r7
 801352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013530:	4770      	bx	lr
 8013532:	bf00      	nop
 8013534:	200083f8 	.word	0x200083f8

08013538 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013538:	b480      	push	{r7}
 801353a:	b083      	sub	sp, #12
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]

}
 8013540:	bf00      	nop
 8013542:	370c      	adds	r7, #12
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr

0801354c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801354c:	b480      	push	{r7}
 801354e:	b085      	sub	sp, #20
 8013550:	af00      	add	r7, sp, #0
 8013552:	4603      	mov	r3, r0
 8013554:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013556:	2300      	movs	r3, #0
 8013558:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801355a:	79fb      	ldrb	r3, [r7, #7]
 801355c:	2b03      	cmp	r3, #3
 801355e:	d817      	bhi.n	8013590 <USBD_Get_USB_Status+0x44>
 8013560:	a201      	add	r2, pc, #4	; (adr r2, 8013568 <USBD_Get_USB_Status+0x1c>)
 8013562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013566:	bf00      	nop
 8013568:	08013579 	.word	0x08013579
 801356c:	0801357f 	.word	0x0801357f
 8013570:	08013585 	.word	0x08013585
 8013574:	0801358b 	.word	0x0801358b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013578:	2300      	movs	r3, #0
 801357a:	73fb      	strb	r3, [r7, #15]
    break;
 801357c:	e00b      	b.n	8013596 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801357e:	2303      	movs	r3, #3
 8013580:	73fb      	strb	r3, [r7, #15]
    break;
 8013582:	e008      	b.n	8013596 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013584:	2301      	movs	r3, #1
 8013586:	73fb      	strb	r3, [r7, #15]
    break;
 8013588:	e005      	b.n	8013596 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801358a:	2303      	movs	r3, #3
 801358c:	73fb      	strb	r3, [r7, #15]
    break;
 801358e:	e002      	b.n	8013596 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013590:	2303      	movs	r3, #3
 8013592:	73fb      	strb	r3, [r7, #15]
    break;
 8013594:	bf00      	nop
  }
  return usb_status;
 8013596:	7bfb      	ldrb	r3, [r7, #15]
}
 8013598:	4618      	mov	r0, r3
 801359a:	3714      	adds	r7, #20
 801359c:	46bd      	mov	sp, r7
 801359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a2:	4770      	bx	lr

080135a4 <std>:
 80135a4:	2300      	movs	r3, #0
 80135a6:	b510      	push	{r4, lr}
 80135a8:	4604      	mov	r4, r0
 80135aa:	e9c0 3300 	strd	r3, r3, [r0]
 80135ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135b2:	6083      	str	r3, [r0, #8]
 80135b4:	8181      	strh	r1, [r0, #12]
 80135b6:	6643      	str	r3, [r0, #100]	; 0x64
 80135b8:	81c2      	strh	r2, [r0, #14]
 80135ba:	6183      	str	r3, [r0, #24]
 80135bc:	4619      	mov	r1, r3
 80135be:	2208      	movs	r2, #8
 80135c0:	305c      	adds	r0, #92	; 0x5c
 80135c2:	f000 f9f7 	bl	80139b4 <memset>
 80135c6:	4b0d      	ldr	r3, [pc, #52]	; (80135fc <std+0x58>)
 80135c8:	6263      	str	r3, [r4, #36]	; 0x24
 80135ca:	4b0d      	ldr	r3, [pc, #52]	; (8013600 <std+0x5c>)
 80135cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80135ce:	4b0d      	ldr	r3, [pc, #52]	; (8013604 <std+0x60>)
 80135d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80135d2:	4b0d      	ldr	r3, [pc, #52]	; (8013608 <std+0x64>)
 80135d4:	6323      	str	r3, [r4, #48]	; 0x30
 80135d6:	4b0d      	ldr	r3, [pc, #52]	; (801360c <std+0x68>)
 80135d8:	6224      	str	r4, [r4, #32]
 80135da:	429c      	cmp	r4, r3
 80135dc:	d006      	beq.n	80135ec <std+0x48>
 80135de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80135e2:	4294      	cmp	r4, r2
 80135e4:	d002      	beq.n	80135ec <std+0x48>
 80135e6:	33d0      	adds	r3, #208	; 0xd0
 80135e8:	429c      	cmp	r4, r3
 80135ea:	d105      	bne.n	80135f8 <std+0x54>
 80135ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80135f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135f4:	f000 ba56 	b.w	8013aa4 <__retarget_lock_init_recursive>
 80135f8:	bd10      	pop	{r4, pc}
 80135fa:	bf00      	nop
 80135fc:	08013805 	.word	0x08013805
 8013600:	08013827 	.word	0x08013827
 8013604:	0801385f 	.word	0x0801385f
 8013608:	08013883 	.word	0x08013883
 801360c:	20008618 	.word	0x20008618

08013610 <stdio_exit_handler>:
 8013610:	4a02      	ldr	r2, [pc, #8]	; (801361c <stdio_exit_handler+0xc>)
 8013612:	4903      	ldr	r1, [pc, #12]	; (8013620 <stdio_exit_handler+0x10>)
 8013614:	4803      	ldr	r0, [pc, #12]	; (8013624 <stdio_exit_handler+0x14>)
 8013616:	f000 b869 	b.w	80136ec <_fwalk_sglue>
 801361a:	bf00      	nop
 801361c:	20000278 	.word	0x20000278
 8013620:	0801436d 	.word	0x0801436d
 8013624:	20000284 	.word	0x20000284

08013628 <cleanup_stdio>:
 8013628:	6841      	ldr	r1, [r0, #4]
 801362a:	4b0c      	ldr	r3, [pc, #48]	; (801365c <cleanup_stdio+0x34>)
 801362c:	4299      	cmp	r1, r3
 801362e:	b510      	push	{r4, lr}
 8013630:	4604      	mov	r4, r0
 8013632:	d001      	beq.n	8013638 <cleanup_stdio+0x10>
 8013634:	f000 fe9a 	bl	801436c <_fflush_r>
 8013638:	68a1      	ldr	r1, [r4, #8]
 801363a:	4b09      	ldr	r3, [pc, #36]	; (8013660 <cleanup_stdio+0x38>)
 801363c:	4299      	cmp	r1, r3
 801363e:	d002      	beq.n	8013646 <cleanup_stdio+0x1e>
 8013640:	4620      	mov	r0, r4
 8013642:	f000 fe93 	bl	801436c <_fflush_r>
 8013646:	68e1      	ldr	r1, [r4, #12]
 8013648:	4b06      	ldr	r3, [pc, #24]	; (8013664 <cleanup_stdio+0x3c>)
 801364a:	4299      	cmp	r1, r3
 801364c:	d004      	beq.n	8013658 <cleanup_stdio+0x30>
 801364e:	4620      	mov	r0, r4
 8013650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013654:	f000 be8a 	b.w	801436c <_fflush_r>
 8013658:	bd10      	pop	{r4, pc}
 801365a:	bf00      	nop
 801365c:	20008618 	.word	0x20008618
 8013660:	20008680 	.word	0x20008680
 8013664:	200086e8 	.word	0x200086e8

08013668 <global_stdio_init.part.0>:
 8013668:	b510      	push	{r4, lr}
 801366a:	4b0b      	ldr	r3, [pc, #44]	; (8013698 <global_stdio_init.part.0+0x30>)
 801366c:	4c0b      	ldr	r4, [pc, #44]	; (801369c <global_stdio_init.part.0+0x34>)
 801366e:	4a0c      	ldr	r2, [pc, #48]	; (80136a0 <global_stdio_init.part.0+0x38>)
 8013670:	601a      	str	r2, [r3, #0]
 8013672:	4620      	mov	r0, r4
 8013674:	2200      	movs	r2, #0
 8013676:	2104      	movs	r1, #4
 8013678:	f7ff ff94 	bl	80135a4 <std>
 801367c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013680:	2201      	movs	r2, #1
 8013682:	2109      	movs	r1, #9
 8013684:	f7ff ff8e 	bl	80135a4 <std>
 8013688:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801368c:	2202      	movs	r2, #2
 801368e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013692:	2112      	movs	r1, #18
 8013694:	f7ff bf86 	b.w	80135a4 <std>
 8013698:	20008750 	.word	0x20008750
 801369c:	20008618 	.word	0x20008618
 80136a0:	08013611 	.word	0x08013611

080136a4 <__sfp_lock_acquire>:
 80136a4:	4801      	ldr	r0, [pc, #4]	; (80136ac <__sfp_lock_acquire+0x8>)
 80136a6:	f000 b9fe 	b.w	8013aa6 <__retarget_lock_acquire_recursive>
 80136aa:	bf00      	nop
 80136ac:	20008759 	.word	0x20008759

080136b0 <__sfp_lock_release>:
 80136b0:	4801      	ldr	r0, [pc, #4]	; (80136b8 <__sfp_lock_release+0x8>)
 80136b2:	f000 b9f9 	b.w	8013aa8 <__retarget_lock_release_recursive>
 80136b6:	bf00      	nop
 80136b8:	20008759 	.word	0x20008759

080136bc <__sinit>:
 80136bc:	b510      	push	{r4, lr}
 80136be:	4604      	mov	r4, r0
 80136c0:	f7ff fff0 	bl	80136a4 <__sfp_lock_acquire>
 80136c4:	6a23      	ldr	r3, [r4, #32]
 80136c6:	b11b      	cbz	r3, 80136d0 <__sinit+0x14>
 80136c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136cc:	f7ff bff0 	b.w	80136b0 <__sfp_lock_release>
 80136d0:	4b04      	ldr	r3, [pc, #16]	; (80136e4 <__sinit+0x28>)
 80136d2:	6223      	str	r3, [r4, #32]
 80136d4:	4b04      	ldr	r3, [pc, #16]	; (80136e8 <__sinit+0x2c>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d1f5      	bne.n	80136c8 <__sinit+0xc>
 80136dc:	f7ff ffc4 	bl	8013668 <global_stdio_init.part.0>
 80136e0:	e7f2      	b.n	80136c8 <__sinit+0xc>
 80136e2:	bf00      	nop
 80136e4:	08013629 	.word	0x08013629
 80136e8:	20008750 	.word	0x20008750

080136ec <_fwalk_sglue>:
 80136ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136f0:	4607      	mov	r7, r0
 80136f2:	4688      	mov	r8, r1
 80136f4:	4614      	mov	r4, r2
 80136f6:	2600      	movs	r6, #0
 80136f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136fc:	f1b9 0901 	subs.w	r9, r9, #1
 8013700:	d505      	bpl.n	801370e <_fwalk_sglue+0x22>
 8013702:	6824      	ldr	r4, [r4, #0]
 8013704:	2c00      	cmp	r4, #0
 8013706:	d1f7      	bne.n	80136f8 <_fwalk_sglue+0xc>
 8013708:	4630      	mov	r0, r6
 801370a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801370e:	89ab      	ldrh	r3, [r5, #12]
 8013710:	2b01      	cmp	r3, #1
 8013712:	d907      	bls.n	8013724 <_fwalk_sglue+0x38>
 8013714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013718:	3301      	adds	r3, #1
 801371a:	d003      	beq.n	8013724 <_fwalk_sglue+0x38>
 801371c:	4629      	mov	r1, r5
 801371e:	4638      	mov	r0, r7
 8013720:	47c0      	blx	r8
 8013722:	4306      	orrs	r6, r0
 8013724:	3568      	adds	r5, #104	; 0x68
 8013726:	e7e9      	b.n	80136fc <_fwalk_sglue+0x10>

08013728 <iprintf>:
 8013728:	b40f      	push	{r0, r1, r2, r3}
 801372a:	b507      	push	{r0, r1, r2, lr}
 801372c:	4906      	ldr	r1, [pc, #24]	; (8013748 <iprintf+0x20>)
 801372e:	ab04      	add	r3, sp, #16
 8013730:	6808      	ldr	r0, [r1, #0]
 8013732:	f853 2b04 	ldr.w	r2, [r3], #4
 8013736:	6881      	ldr	r1, [r0, #8]
 8013738:	9301      	str	r3, [sp, #4]
 801373a:	f000 fae7 	bl	8013d0c <_vfiprintf_r>
 801373e:	b003      	add	sp, #12
 8013740:	f85d eb04 	ldr.w	lr, [sp], #4
 8013744:	b004      	add	sp, #16
 8013746:	4770      	bx	lr
 8013748:	200002d0 	.word	0x200002d0

0801374c <_puts_r>:
 801374c:	6a03      	ldr	r3, [r0, #32]
 801374e:	b570      	push	{r4, r5, r6, lr}
 8013750:	6884      	ldr	r4, [r0, #8]
 8013752:	4605      	mov	r5, r0
 8013754:	460e      	mov	r6, r1
 8013756:	b90b      	cbnz	r3, 801375c <_puts_r+0x10>
 8013758:	f7ff ffb0 	bl	80136bc <__sinit>
 801375c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801375e:	07db      	lsls	r3, r3, #31
 8013760:	d405      	bmi.n	801376e <_puts_r+0x22>
 8013762:	89a3      	ldrh	r3, [r4, #12]
 8013764:	0598      	lsls	r0, r3, #22
 8013766:	d402      	bmi.n	801376e <_puts_r+0x22>
 8013768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801376a:	f000 f99c 	bl	8013aa6 <__retarget_lock_acquire_recursive>
 801376e:	89a3      	ldrh	r3, [r4, #12]
 8013770:	0719      	lsls	r1, r3, #28
 8013772:	d513      	bpl.n	801379c <_puts_r+0x50>
 8013774:	6923      	ldr	r3, [r4, #16]
 8013776:	b18b      	cbz	r3, 801379c <_puts_r+0x50>
 8013778:	3e01      	subs	r6, #1
 801377a:	68a3      	ldr	r3, [r4, #8]
 801377c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013780:	3b01      	subs	r3, #1
 8013782:	60a3      	str	r3, [r4, #8]
 8013784:	b9e9      	cbnz	r1, 80137c2 <_puts_r+0x76>
 8013786:	2b00      	cmp	r3, #0
 8013788:	da2e      	bge.n	80137e8 <_puts_r+0x9c>
 801378a:	4622      	mov	r2, r4
 801378c:	210a      	movs	r1, #10
 801378e:	4628      	mov	r0, r5
 8013790:	f000 f87b 	bl	801388a <__swbuf_r>
 8013794:	3001      	adds	r0, #1
 8013796:	d007      	beq.n	80137a8 <_puts_r+0x5c>
 8013798:	250a      	movs	r5, #10
 801379a:	e007      	b.n	80137ac <_puts_r+0x60>
 801379c:	4621      	mov	r1, r4
 801379e:	4628      	mov	r0, r5
 80137a0:	f000 f8b0 	bl	8013904 <__swsetup_r>
 80137a4:	2800      	cmp	r0, #0
 80137a6:	d0e7      	beq.n	8013778 <_puts_r+0x2c>
 80137a8:	f04f 35ff 	mov.w	r5, #4294967295
 80137ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80137ae:	07da      	lsls	r2, r3, #31
 80137b0:	d405      	bmi.n	80137be <_puts_r+0x72>
 80137b2:	89a3      	ldrh	r3, [r4, #12]
 80137b4:	059b      	lsls	r3, r3, #22
 80137b6:	d402      	bmi.n	80137be <_puts_r+0x72>
 80137b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80137ba:	f000 f975 	bl	8013aa8 <__retarget_lock_release_recursive>
 80137be:	4628      	mov	r0, r5
 80137c0:	bd70      	pop	{r4, r5, r6, pc}
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	da04      	bge.n	80137d0 <_puts_r+0x84>
 80137c6:	69a2      	ldr	r2, [r4, #24]
 80137c8:	429a      	cmp	r2, r3
 80137ca:	dc06      	bgt.n	80137da <_puts_r+0x8e>
 80137cc:	290a      	cmp	r1, #10
 80137ce:	d004      	beq.n	80137da <_puts_r+0x8e>
 80137d0:	6823      	ldr	r3, [r4, #0]
 80137d2:	1c5a      	adds	r2, r3, #1
 80137d4:	6022      	str	r2, [r4, #0]
 80137d6:	7019      	strb	r1, [r3, #0]
 80137d8:	e7cf      	b.n	801377a <_puts_r+0x2e>
 80137da:	4622      	mov	r2, r4
 80137dc:	4628      	mov	r0, r5
 80137de:	f000 f854 	bl	801388a <__swbuf_r>
 80137e2:	3001      	adds	r0, #1
 80137e4:	d1c9      	bne.n	801377a <_puts_r+0x2e>
 80137e6:	e7df      	b.n	80137a8 <_puts_r+0x5c>
 80137e8:	6823      	ldr	r3, [r4, #0]
 80137ea:	250a      	movs	r5, #10
 80137ec:	1c5a      	adds	r2, r3, #1
 80137ee:	6022      	str	r2, [r4, #0]
 80137f0:	701d      	strb	r5, [r3, #0]
 80137f2:	e7db      	b.n	80137ac <_puts_r+0x60>

080137f4 <puts>:
 80137f4:	4b02      	ldr	r3, [pc, #8]	; (8013800 <puts+0xc>)
 80137f6:	4601      	mov	r1, r0
 80137f8:	6818      	ldr	r0, [r3, #0]
 80137fa:	f7ff bfa7 	b.w	801374c <_puts_r>
 80137fe:	bf00      	nop
 8013800:	200002d0 	.word	0x200002d0

08013804 <__sread>:
 8013804:	b510      	push	{r4, lr}
 8013806:	460c      	mov	r4, r1
 8013808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801380c:	f000 f8fc 	bl	8013a08 <_read_r>
 8013810:	2800      	cmp	r0, #0
 8013812:	bfab      	itete	ge
 8013814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013816:	89a3      	ldrhlt	r3, [r4, #12]
 8013818:	181b      	addge	r3, r3, r0
 801381a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801381e:	bfac      	ite	ge
 8013820:	6563      	strge	r3, [r4, #84]	; 0x54
 8013822:	81a3      	strhlt	r3, [r4, #12]
 8013824:	bd10      	pop	{r4, pc}

08013826 <__swrite>:
 8013826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801382a:	461f      	mov	r7, r3
 801382c:	898b      	ldrh	r3, [r1, #12]
 801382e:	05db      	lsls	r3, r3, #23
 8013830:	4605      	mov	r5, r0
 8013832:	460c      	mov	r4, r1
 8013834:	4616      	mov	r6, r2
 8013836:	d505      	bpl.n	8013844 <__swrite+0x1e>
 8013838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801383c:	2302      	movs	r3, #2
 801383e:	2200      	movs	r2, #0
 8013840:	f000 f8d0 	bl	80139e4 <_lseek_r>
 8013844:	89a3      	ldrh	r3, [r4, #12]
 8013846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801384a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801384e:	81a3      	strh	r3, [r4, #12]
 8013850:	4632      	mov	r2, r6
 8013852:	463b      	mov	r3, r7
 8013854:	4628      	mov	r0, r5
 8013856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801385a:	f000 b8e7 	b.w	8013a2c <_write_r>

0801385e <__sseek>:
 801385e:	b510      	push	{r4, lr}
 8013860:	460c      	mov	r4, r1
 8013862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013866:	f000 f8bd 	bl	80139e4 <_lseek_r>
 801386a:	1c43      	adds	r3, r0, #1
 801386c:	89a3      	ldrh	r3, [r4, #12]
 801386e:	bf15      	itete	ne
 8013870:	6560      	strne	r0, [r4, #84]	; 0x54
 8013872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801387a:	81a3      	strheq	r3, [r4, #12]
 801387c:	bf18      	it	ne
 801387e:	81a3      	strhne	r3, [r4, #12]
 8013880:	bd10      	pop	{r4, pc}

08013882 <__sclose>:
 8013882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013886:	f000 b89d 	b.w	80139c4 <_close_r>

0801388a <__swbuf_r>:
 801388a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801388c:	460e      	mov	r6, r1
 801388e:	4614      	mov	r4, r2
 8013890:	4605      	mov	r5, r0
 8013892:	b118      	cbz	r0, 801389c <__swbuf_r+0x12>
 8013894:	6a03      	ldr	r3, [r0, #32]
 8013896:	b90b      	cbnz	r3, 801389c <__swbuf_r+0x12>
 8013898:	f7ff ff10 	bl	80136bc <__sinit>
 801389c:	69a3      	ldr	r3, [r4, #24]
 801389e:	60a3      	str	r3, [r4, #8]
 80138a0:	89a3      	ldrh	r3, [r4, #12]
 80138a2:	071a      	lsls	r2, r3, #28
 80138a4:	d525      	bpl.n	80138f2 <__swbuf_r+0x68>
 80138a6:	6923      	ldr	r3, [r4, #16]
 80138a8:	b31b      	cbz	r3, 80138f2 <__swbuf_r+0x68>
 80138aa:	6823      	ldr	r3, [r4, #0]
 80138ac:	6922      	ldr	r2, [r4, #16]
 80138ae:	1a98      	subs	r0, r3, r2
 80138b0:	6963      	ldr	r3, [r4, #20]
 80138b2:	b2f6      	uxtb	r6, r6
 80138b4:	4283      	cmp	r3, r0
 80138b6:	4637      	mov	r7, r6
 80138b8:	dc04      	bgt.n	80138c4 <__swbuf_r+0x3a>
 80138ba:	4621      	mov	r1, r4
 80138bc:	4628      	mov	r0, r5
 80138be:	f000 fd55 	bl	801436c <_fflush_r>
 80138c2:	b9e0      	cbnz	r0, 80138fe <__swbuf_r+0x74>
 80138c4:	68a3      	ldr	r3, [r4, #8]
 80138c6:	3b01      	subs	r3, #1
 80138c8:	60a3      	str	r3, [r4, #8]
 80138ca:	6823      	ldr	r3, [r4, #0]
 80138cc:	1c5a      	adds	r2, r3, #1
 80138ce:	6022      	str	r2, [r4, #0]
 80138d0:	701e      	strb	r6, [r3, #0]
 80138d2:	6962      	ldr	r2, [r4, #20]
 80138d4:	1c43      	adds	r3, r0, #1
 80138d6:	429a      	cmp	r2, r3
 80138d8:	d004      	beq.n	80138e4 <__swbuf_r+0x5a>
 80138da:	89a3      	ldrh	r3, [r4, #12]
 80138dc:	07db      	lsls	r3, r3, #31
 80138de:	d506      	bpl.n	80138ee <__swbuf_r+0x64>
 80138e0:	2e0a      	cmp	r6, #10
 80138e2:	d104      	bne.n	80138ee <__swbuf_r+0x64>
 80138e4:	4621      	mov	r1, r4
 80138e6:	4628      	mov	r0, r5
 80138e8:	f000 fd40 	bl	801436c <_fflush_r>
 80138ec:	b938      	cbnz	r0, 80138fe <__swbuf_r+0x74>
 80138ee:	4638      	mov	r0, r7
 80138f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138f2:	4621      	mov	r1, r4
 80138f4:	4628      	mov	r0, r5
 80138f6:	f000 f805 	bl	8013904 <__swsetup_r>
 80138fa:	2800      	cmp	r0, #0
 80138fc:	d0d5      	beq.n	80138aa <__swbuf_r+0x20>
 80138fe:	f04f 37ff 	mov.w	r7, #4294967295
 8013902:	e7f4      	b.n	80138ee <__swbuf_r+0x64>

08013904 <__swsetup_r>:
 8013904:	b538      	push	{r3, r4, r5, lr}
 8013906:	4b2a      	ldr	r3, [pc, #168]	; (80139b0 <__swsetup_r+0xac>)
 8013908:	4605      	mov	r5, r0
 801390a:	6818      	ldr	r0, [r3, #0]
 801390c:	460c      	mov	r4, r1
 801390e:	b118      	cbz	r0, 8013918 <__swsetup_r+0x14>
 8013910:	6a03      	ldr	r3, [r0, #32]
 8013912:	b90b      	cbnz	r3, 8013918 <__swsetup_r+0x14>
 8013914:	f7ff fed2 	bl	80136bc <__sinit>
 8013918:	89a3      	ldrh	r3, [r4, #12]
 801391a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801391e:	0718      	lsls	r0, r3, #28
 8013920:	d422      	bmi.n	8013968 <__swsetup_r+0x64>
 8013922:	06d9      	lsls	r1, r3, #27
 8013924:	d407      	bmi.n	8013936 <__swsetup_r+0x32>
 8013926:	2309      	movs	r3, #9
 8013928:	602b      	str	r3, [r5, #0]
 801392a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801392e:	81a3      	strh	r3, [r4, #12]
 8013930:	f04f 30ff 	mov.w	r0, #4294967295
 8013934:	e034      	b.n	80139a0 <__swsetup_r+0x9c>
 8013936:	0758      	lsls	r0, r3, #29
 8013938:	d512      	bpl.n	8013960 <__swsetup_r+0x5c>
 801393a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801393c:	b141      	cbz	r1, 8013950 <__swsetup_r+0x4c>
 801393e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013942:	4299      	cmp	r1, r3
 8013944:	d002      	beq.n	801394c <__swsetup_r+0x48>
 8013946:	4628      	mov	r0, r5
 8013948:	f000 f8be 	bl	8013ac8 <_free_r>
 801394c:	2300      	movs	r3, #0
 801394e:	6363      	str	r3, [r4, #52]	; 0x34
 8013950:	89a3      	ldrh	r3, [r4, #12]
 8013952:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013956:	81a3      	strh	r3, [r4, #12]
 8013958:	2300      	movs	r3, #0
 801395a:	6063      	str	r3, [r4, #4]
 801395c:	6923      	ldr	r3, [r4, #16]
 801395e:	6023      	str	r3, [r4, #0]
 8013960:	89a3      	ldrh	r3, [r4, #12]
 8013962:	f043 0308 	orr.w	r3, r3, #8
 8013966:	81a3      	strh	r3, [r4, #12]
 8013968:	6923      	ldr	r3, [r4, #16]
 801396a:	b94b      	cbnz	r3, 8013980 <__swsetup_r+0x7c>
 801396c:	89a3      	ldrh	r3, [r4, #12]
 801396e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013976:	d003      	beq.n	8013980 <__swsetup_r+0x7c>
 8013978:	4621      	mov	r1, r4
 801397a:	4628      	mov	r0, r5
 801397c:	f000 fd44 	bl	8014408 <__smakebuf_r>
 8013980:	89a0      	ldrh	r0, [r4, #12]
 8013982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013986:	f010 0301 	ands.w	r3, r0, #1
 801398a:	d00a      	beq.n	80139a2 <__swsetup_r+0x9e>
 801398c:	2300      	movs	r3, #0
 801398e:	60a3      	str	r3, [r4, #8]
 8013990:	6963      	ldr	r3, [r4, #20]
 8013992:	425b      	negs	r3, r3
 8013994:	61a3      	str	r3, [r4, #24]
 8013996:	6923      	ldr	r3, [r4, #16]
 8013998:	b943      	cbnz	r3, 80139ac <__swsetup_r+0xa8>
 801399a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801399e:	d1c4      	bne.n	801392a <__swsetup_r+0x26>
 80139a0:	bd38      	pop	{r3, r4, r5, pc}
 80139a2:	0781      	lsls	r1, r0, #30
 80139a4:	bf58      	it	pl
 80139a6:	6963      	ldrpl	r3, [r4, #20]
 80139a8:	60a3      	str	r3, [r4, #8]
 80139aa:	e7f4      	b.n	8013996 <__swsetup_r+0x92>
 80139ac:	2000      	movs	r0, #0
 80139ae:	e7f7      	b.n	80139a0 <__swsetup_r+0x9c>
 80139b0:	200002d0 	.word	0x200002d0

080139b4 <memset>:
 80139b4:	4402      	add	r2, r0
 80139b6:	4603      	mov	r3, r0
 80139b8:	4293      	cmp	r3, r2
 80139ba:	d100      	bne.n	80139be <memset+0xa>
 80139bc:	4770      	bx	lr
 80139be:	f803 1b01 	strb.w	r1, [r3], #1
 80139c2:	e7f9      	b.n	80139b8 <memset+0x4>

080139c4 <_close_r>:
 80139c4:	b538      	push	{r3, r4, r5, lr}
 80139c6:	4d06      	ldr	r5, [pc, #24]	; (80139e0 <_close_r+0x1c>)
 80139c8:	2300      	movs	r3, #0
 80139ca:	4604      	mov	r4, r0
 80139cc:	4608      	mov	r0, r1
 80139ce:	602b      	str	r3, [r5, #0]
 80139d0:	f7f5 fd44 	bl	800945c <_close>
 80139d4:	1c43      	adds	r3, r0, #1
 80139d6:	d102      	bne.n	80139de <_close_r+0x1a>
 80139d8:	682b      	ldr	r3, [r5, #0]
 80139da:	b103      	cbz	r3, 80139de <_close_r+0x1a>
 80139dc:	6023      	str	r3, [r4, #0]
 80139de:	bd38      	pop	{r3, r4, r5, pc}
 80139e0:	20008754 	.word	0x20008754

080139e4 <_lseek_r>:
 80139e4:	b538      	push	{r3, r4, r5, lr}
 80139e6:	4d07      	ldr	r5, [pc, #28]	; (8013a04 <_lseek_r+0x20>)
 80139e8:	4604      	mov	r4, r0
 80139ea:	4608      	mov	r0, r1
 80139ec:	4611      	mov	r1, r2
 80139ee:	2200      	movs	r2, #0
 80139f0:	602a      	str	r2, [r5, #0]
 80139f2:	461a      	mov	r2, r3
 80139f4:	f7f5 fd59 	bl	80094aa <_lseek>
 80139f8:	1c43      	adds	r3, r0, #1
 80139fa:	d102      	bne.n	8013a02 <_lseek_r+0x1e>
 80139fc:	682b      	ldr	r3, [r5, #0]
 80139fe:	b103      	cbz	r3, 8013a02 <_lseek_r+0x1e>
 8013a00:	6023      	str	r3, [r4, #0]
 8013a02:	bd38      	pop	{r3, r4, r5, pc}
 8013a04:	20008754 	.word	0x20008754

08013a08 <_read_r>:
 8013a08:	b538      	push	{r3, r4, r5, lr}
 8013a0a:	4d07      	ldr	r5, [pc, #28]	; (8013a28 <_read_r+0x20>)
 8013a0c:	4604      	mov	r4, r0
 8013a0e:	4608      	mov	r0, r1
 8013a10:	4611      	mov	r1, r2
 8013a12:	2200      	movs	r2, #0
 8013a14:	602a      	str	r2, [r5, #0]
 8013a16:	461a      	mov	r2, r3
 8013a18:	f7f5 fd03 	bl	8009422 <_read>
 8013a1c:	1c43      	adds	r3, r0, #1
 8013a1e:	d102      	bne.n	8013a26 <_read_r+0x1e>
 8013a20:	682b      	ldr	r3, [r5, #0]
 8013a22:	b103      	cbz	r3, 8013a26 <_read_r+0x1e>
 8013a24:	6023      	str	r3, [r4, #0]
 8013a26:	bd38      	pop	{r3, r4, r5, pc}
 8013a28:	20008754 	.word	0x20008754

08013a2c <_write_r>:
 8013a2c:	b538      	push	{r3, r4, r5, lr}
 8013a2e:	4d07      	ldr	r5, [pc, #28]	; (8013a4c <_write_r+0x20>)
 8013a30:	4604      	mov	r4, r0
 8013a32:	4608      	mov	r0, r1
 8013a34:	4611      	mov	r1, r2
 8013a36:	2200      	movs	r2, #0
 8013a38:	602a      	str	r2, [r5, #0]
 8013a3a:	461a      	mov	r2, r3
 8013a3c:	f7f1 ff26 	bl	800588c <_write>
 8013a40:	1c43      	adds	r3, r0, #1
 8013a42:	d102      	bne.n	8013a4a <_write_r+0x1e>
 8013a44:	682b      	ldr	r3, [r5, #0]
 8013a46:	b103      	cbz	r3, 8013a4a <_write_r+0x1e>
 8013a48:	6023      	str	r3, [r4, #0]
 8013a4a:	bd38      	pop	{r3, r4, r5, pc}
 8013a4c:	20008754 	.word	0x20008754

08013a50 <__errno>:
 8013a50:	4b01      	ldr	r3, [pc, #4]	; (8013a58 <__errno+0x8>)
 8013a52:	6818      	ldr	r0, [r3, #0]
 8013a54:	4770      	bx	lr
 8013a56:	bf00      	nop
 8013a58:	200002d0 	.word	0x200002d0

08013a5c <__libc_init_array>:
 8013a5c:	b570      	push	{r4, r5, r6, lr}
 8013a5e:	4d0d      	ldr	r5, [pc, #52]	; (8013a94 <__libc_init_array+0x38>)
 8013a60:	4c0d      	ldr	r4, [pc, #52]	; (8013a98 <__libc_init_array+0x3c>)
 8013a62:	1b64      	subs	r4, r4, r5
 8013a64:	10a4      	asrs	r4, r4, #2
 8013a66:	2600      	movs	r6, #0
 8013a68:	42a6      	cmp	r6, r4
 8013a6a:	d109      	bne.n	8013a80 <__libc_init_array+0x24>
 8013a6c:	4d0b      	ldr	r5, [pc, #44]	; (8013a9c <__libc_init_array+0x40>)
 8013a6e:	4c0c      	ldr	r4, [pc, #48]	; (8013aa0 <__libc_init_array+0x44>)
 8013a70:	f000 fd38 	bl	80144e4 <_init>
 8013a74:	1b64      	subs	r4, r4, r5
 8013a76:	10a4      	asrs	r4, r4, #2
 8013a78:	2600      	movs	r6, #0
 8013a7a:	42a6      	cmp	r6, r4
 8013a7c:	d105      	bne.n	8013a8a <__libc_init_array+0x2e>
 8013a7e:	bd70      	pop	{r4, r5, r6, pc}
 8013a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a84:	4798      	blx	r3
 8013a86:	3601      	adds	r6, #1
 8013a88:	e7ee      	b.n	8013a68 <__libc_init_array+0xc>
 8013a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a8e:	4798      	blx	r3
 8013a90:	3601      	adds	r6, #1
 8013a92:	e7f2      	b.n	8013a7a <__libc_init_array+0x1e>
 8013a94:	080153d8 	.word	0x080153d8
 8013a98:	080153d8 	.word	0x080153d8
 8013a9c:	080153d8 	.word	0x080153d8
 8013aa0:	080153dc 	.word	0x080153dc

08013aa4 <__retarget_lock_init_recursive>:
 8013aa4:	4770      	bx	lr

08013aa6 <__retarget_lock_acquire_recursive>:
 8013aa6:	4770      	bx	lr

08013aa8 <__retarget_lock_release_recursive>:
 8013aa8:	4770      	bx	lr

08013aaa <memcpy>:
 8013aaa:	440a      	add	r2, r1
 8013aac:	4291      	cmp	r1, r2
 8013aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8013ab2:	d100      	bne.n	8013ab6 <memcpy+0xc>
 8013ab4:	4770      	bx	lr
 8013ab6:	b510      	push	{r4, lr}
 8013ab8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013abc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ac0:	4291      	cmp	r1, r2
 8013ac2:	d1f9      	bne.n	8013ab8 <memcpy+0xe>
 8013ac4:	bd10      	pop	{r4, pc}
	...

08013ac8 <_free_r>:
 8013ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013aca:	2900      	cmp	r1, #0
 8013acc:	d044      	beq.n	8013b58 <_free_r+0x90>
 8013ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ad2:	9001      	str	r0, [sp, #4]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	f1a1 0404 	sub.w	r4, r1, #4
 8013ada:	bfb8      	it	lt
 8013adc:	18e4      	addlt	r4, r4, r3
 8013ade:	f000 f8df 	bl	8013ca0 <__malloc_lock>
 8013ae2:	4a1e      	ldr	r2, [pc, #120]	; (8013b5c <_free_r+0x94>)
 8013ae4:	9801      	ldr	r0, [sp, #4]
 8013ae6:	6813      	ldr	r3, [r2, #0]
 8013ae8:	b933      	cbnz	r3, 8013af8 <_free_r+0x30>
 8013aea:	6063      	str	r3, [r4, #4]
 8013aec:	6014      	str	r4, [r2, #0]
 8013aee:	b003      	add	sp, #12
 8013af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013af4:	f000 b8da 	b.w	8013cac <__malloc_unlock>
 8013af8:	42a3      	cmp	r3, r4
 8013afa:	d908      	bls.n	8013b0e <_free_r+0x46>
 8013afc:	6825      	ldr	r5, [r4, #0]
 8013afe:	1961      	adds	r1, r4, r5
 8013b00:	428b      	cmp	r3, r1
 8013b02:	bf01      	itttt	eq
 8013b04:	6819      	ldreq	r1, [r3, #0]
 8013b06:	685b      	ldreq	r3, [r3, #4]
 8013b08:	1949      	addeq	r1, r1, r5
 8013b0a:	6021      	streq	r1, [r4, #0]
 8013b0c:	e7ed      	b.n	8013aea <_free_r+0x22>
 8013b0e:	461a      	mov	r2, r3
 8013b10:	685b      	ldr	r3, [r3, #4]
 8013b12:	b10b      	cbz	r3, 8013b18 <_free_r+0x50>
 8013b14:	42a3      	cmp	r3, r4
 8013b16:	d9fa      	bls.n	8013b0e <_free_r+0x46>
 8013b18:	6811      	ldr	r1, [r2, #0]
 8013b1a:	1855      	adds	r5, r2, r1
 8013b1c:	42a5      	cmp	r5, r4
 8013b1e:	d10b      	bne.n	8013b38 <_free_r+0x70>
 8013b20:	6824      	ldr	r4, [r4, #0]
 8013b22:	4421      	add	r1, r4
 8013b24:	1854      	adds	r4, r2, r1
 8013b26:	42a3      	cmp	r3, r4
 8013b28:	6011      	str	r1, [r2, #0]
 8013b2a:	d1e0      	bne.n	8013aee <_free_r+0x26>
 8013b2c:	681c      	ldr	r4, [r3, #0]
 8013b2e:	685b      	ldr	r3, [r3, #4]
 8013b30:	6053      	str	r3, [r2, #4]
 8013b32:	440c      	add	r4, r1
 8013b34:	6014      	str	r4, [r2, #0]
 8013b36:	e7da      	b.n	8013aee <_free_r+0x26>
 8013b38:	d902      	bls.n	8013b40 <_free_r+0x78>
 8013b3a:	230c      	movs	r3, #12
 8013b3c:	6003      	str	r3, [r0, #0]
 8013b3e:	e7d6      	b.n	8013aee <_free_r+0x26>
 8013b40:	6825      	ldr	r5, [r4, #0]
 8013b42:	1961      	adds	r1, r4, r5
 8013b44:	428b      	cmp	r3, r1
 8013b46:	bf04      	itt	eq
 8013b48:	6819      	ldreq	r1, [r3, #0]
 8013b4a:	685b      	ldreq	r3, [r3, #4]
 8013b4c:	6063      	str	r3, [r4, #4]
 8013b4e:	bf04      	itt	eq
 8013b50:	1949      	addeq	r1, r1, r5
 8013b52:	6021      	streq	r1, [r4, #0]
 8013b54:	6054      	str	r4, [r2, #4]
 8013b56:	e7ca      	b.n	8013aee <_free_r+0x26>
 8013b58:	b003      	add	sp, #12
 8013b5a:	bd30      	pop	{r4, r5, pc}
 8013b5c:	2000875c 	.word	0x2000875c

08013b60 <sbrk_aligned>:
 8013b60:	b570      	push	{r4, r5, r6, lr}
 8013b62:	4e0e      	ldr	r6, [pc, #56]	; (8013b9c <sbrk_aligned+0x3c>)
 8013b64:	460c      	mov	r4, r1
 8013b66:	6831      	ldr	r1, [r6, #0]
 8013b68:	4605      	mov	r5, r0
 8013b6a:	b911      	cbnz	r1, 8013b72 <sbrk_aligned+0x12>
 8013b6c:	f000 fcaa 	bl	80144c4 <_sbrk_r>
 8013b70:	6030      	str	r0, [r6, #0]
 8013b72:	4621      	mov	r1, r4
 8013b74:	4628      	mov	r0, r5
 8013b76:	f000 fca5 	bl	80144c4 <_sbrk_r>
 8013b7a:	1c43      	adds	r3, r0, #1
 8013b7c:	d00a      	beq.n	8013b94 <sbrk_aligned+0x34>
 8013b7e:	1cc4      	adds	r4, r0, #3
 8013b80:	f024 0403 	bic.w	r4, r4, #3
 8013b84:	42a0      	cmp	r0, r4
 8013b86:	d007      	beq.n	8013b98 <sbrk_aligned+0x38>
 8013b88:	1a21      	subs	r1, r4, r0
 8013b8a:	4628      	mov	r0, r5
 8013b8c:	f000 fc9a 	bl	80144c4 <_sbrk_r>
 8013b90:	3001      	adds	r0, #1
 8013b92:	d101      	bne.n	8013b98 <sbrk_aligned+0x38>
 8013b94:	f04f 34ff 	mov.w	r4, #4294967295
 8013b98:	4620      	mov	r0, r4
 8013b9a:	bd70      	pop	{r4, r5, r6, pc}
 8013b9c:	20008760 	.word	0x20008760

08013ba0 <_malloc_r>:
 8013ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ba4:	1ccd      	adds	r5, r1, #3
 8013ba6:	f025 0503 	bic.w	r5, r5, #3
 8013baa:	3508      	adds	r5, #8
 8013bac:	2d0c      	cmp	r5, #12
 8013bae:	bf38      	it	cc
 8013bb0:	250c      	movcc	r5, #12
 8013bb2:	2d00      	cmp	r5, #0
 8013bb4:	4607      	mov	r7, r0
 8013bb6:	db01      	blt.n	8013bbc <_malloc_r+0x1c>
 8013bb8:	42a9      	cmp	r1, r5
 8013bba:	d905      	bls.n	8013bc8 <_malloc_r+0x28>
 8013bbc:	230c      	movs	r3, #12
 8013bbe:	603b      	str	r3, [r7, #0]
 8013bc0:	2600      	movs	r6, #0
 8013bc2:	4630      	mov	r0, r6
 8013bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013bc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013c9c <_malloc_r+0xfc>
 8013bcc:	f000 f868 	bl	8013ca0 <__malloc_lock>
 8013bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8013bd4:	461c      	mov	r4, r3
 8013bd6:	bb5c      	cbnz	r4, 8013c30 <_malloc_r+0x90>
 8013bd8:	4629      	mov	r1, r5
 8013bda:	4638      	mov	r0, r7
 8013bdc:	f7ff ffc0 	bl	8013b60 <sbrk_aligned>
 8013be0:	1c43      	adds	r3, r0, #1
 8013be2:	4604      	mov	r4, r0
 8013be4:	d155      	bne.n	8013c92 <_malloc_r+0xf2>
 8013be6:	f8d8 4000 	ldr.w	r4, [r8]
 8013bea:	4626      	mov	r6, r4
 8013bec:	2e00      	cmp	r6, #0
 8013bee:	d145      	bne.n	8013c7c <_malloc_r+0xdc>
 8013bf0:	2c00      	cmp	r4, #0
 8013bf2:	d048      	beq.n	8013c86 <_malloc_r+0xe6>
 8013bf4:	6823      	ldr	r3, [r4, #0]
 8013bf6:	4631      	mov	r1, r6
 8013bf8:	4638      	mov	r0, r7
 8013bfa:	eb04 0903 	add.w	r9, r4, r3
 8013bfe:	f000 fc61 	bl	80144c4 <_sbrk_r>
 8013c02:	4581      	cmp	r9, r0
 8013c04:	d13f      	bne.n	8013c86 <_malloc_r+0xe6>
 8013c06:	6821      	ldr	r1, [r4, #0]
 8013c08:	1a6d      	subs	r5, r5, r1
 8013c0a:	4629      	mov	r1, r5
 8013c0c:	4638      	mov	r0, r7
 8013c0e:	f7ff ffa7 	bl	8013b60 <sbrk_aligned>
 8013c12:	3001      	adds	r0, #1
 8013c14:	d037      	beq.n	8013c86 <_malloc_r+0xe6>
 8013c16:	6823      	ldr	r3, [r4, #0]
 8013c18:	442b      	add	r3, r5
 8013c1a:	6023      	str	r3, [r4, #0]
 8013c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d038      	beq.n	8013c96 <_malloc_r+0xf6>
 8013c24:	685a      	ldr	r2, [r3, #4]
 8013c26:	42a2      	cmp	r2, r4
 8013c28:	d12b      	bne.n	8013c82 <_malloc_r+0xe2>
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	605a      	str	r2, [r3, #4]
 8013c2e:	e00f      	b.n	8013c50 <_malloc_r+0xb0>
 8013c30:	6822      	ldr	r2, [r4, #0]
 8013c32:	1b52      	subs	r2, r2, r5
 8013c34:	d41f      	bmi.n	8013c76 <_malloc_r+0xd6>
 8013c36:	2a0b      	cmp	r2, #11
 8013c38:	d917      	bls.n	8013c6a <_malloc_r+0xca>
 8013c3a:	1961      	adds	r1, r4, r5
 8013c3c:	42a3      	cmp	r3, r4
 8013c3e:	6025      	str	r5, [r4, #0]
 8013c40:	bf18      	it	ne
 8013c42:	6059      	strne	r1, [r3, #4]
 8013c44:	6863      	ldr	r3, [r4, #4]
 8013c46:	bf08      	it	eq
 8013c48:	f8c8 1000 	streq.w	r1, [r8]
 8013c4c:	5162      	str	r2, [r4, r5]
 8013c4e:	604b      	str	r3, [r1, #4]
 8013c50:	4638      	mov	r0, r7
 8013c52:	f104 060b 	add.w	r6, r4, #11
 8013c56:	f000 f829 	bl	8013cac <__malloc_unlock>
 8013c5a:	f026 0607 	bic.w	r6, r6, #7
 8013c5e:	1d23      	adds	r3, r4, #4
 8013c60:	1af2      	subs	r2, r6, r3
 8013c62:	d0ae      	beq.n	8013bc2 <_malloc_r+0x22>
 8013c64:	1b9b      	subs	r3, r3, r6
 8013c66:	50a3      	str	r3, [r4, r2]
 8013c68:	e7ab      	b.n	8013bc2 <_malloc_r+0x22>
 8013c6a:	42a3      	cmp	r3, r4
 8013c6c:	6862      	ldr	r2, [r4, #4]
 8013c6e:	d1dd      	bne.n	8013c2c <_malloc_r+0x8c>
 8013c70:	f8c8 2000 	str.w	r2, [r8]
 8013c74:	e7ec      	b.n	8013c50 <_malloc_r+0xb0>
 8013c76:	4623      	mov	r3, r4
 8013c78:	6864      	ldr	r4, [r4, #4]
 8013c7a:	e7ac      	b.n	8013bd6 <_malloc_r+0x36>
 8013c7c:	4634      	mov	r4, r6
 8013c7e:	6876      	ldr	r6, [r6, #4]
 8013c80:	e7b4      	b.n	8013bec <_malloc_r+0x4c>
 8013c82:	4613      	mov	r3, r2
 8013c84:	e7cc      	b.n	8013c20 <_malloc_r+0x80>
 8013c86:	230c      	movs	r3, #12
 8013c88:	603b      	str	r3, [r7, #0]
 8013c8a:	4638      	mov	r0, r7
 8013c8c:	f000 f80e 	bl	8013cac <__malloc_unlock>
 8013c90:	e797      	b.n	8013bc2 <_malloc_r+0x22>
 8013c92:	6025      	str	r5, [r4, #0]
 8013c94:	e7dc      	b.n	8013c50 <_malloc_r+0xb0>
 8013c96:	605b      	str	r3, [r3, #4]
 8013c98:	deff      	udf	#255	; 0xff
 8013c9a:	bf00      	nop
 8013c9c:	2000875c 	.word	0x2000875c

08013ca0 <__malloc_lock>:
 8013ca0:	4801      	ldr	r0, [pc, #4]	; (8013ca8 <__malloc_lock+0x8>)
 8013ca2:	f7ff bf00 	b.w	8013aa6 <__retarget_lock_acquire_recursive>
 8013ca6:	bf00      	nop
 8013ca8:	20008758 	.word	0x20008758

08013cac <__malloc_unlock>:
 8013cac:	4801      	ldr	r0, [pc, #4]	; (8013cb4 <__malloc_unlock+0x8>)
 8013cae:	f7ff befb 	b.w	8013aa8 <__retarget_lock_release_recursive>
 8013cb2:	bf00      	nop
 8013cb4:	20008758 	.word	0x20008758

08013cb8 <__sfputc_r>:
 8013cb8:	6893      	ldr	r3, [r2, #8]
 8013cba:	3b01      	subs	r3, #1
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	b410      	push	{r4}
 8013cc0:	6093      	str	r3, [r2, #8]
 8013cc2:	da08      	bge.n	8013cd6 <__sfputc_r+0x1e>
 8013cc4:	6994      	ldr	r4, [r2, #24]
 8013cc6:	42a3      	cmp	r3, r4
 8013cc8:	db01      	blt.n	8013cce <__sfputc_r+0x16>
 8013cca:	290a      	cmp	r1, #10
 8013ccc:	d103      	bne.n	8013cd6 <__sfputc_r+0x1e>
 8013cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cd2:	f7ff bdda 	b.w	801388a <__swbuf_r>
 8013cd6:	6813      	ldr	r3, [r2, #0]
 8013cd8:	1c58      	adds	r0, r3, #1
 8013cda:	6010      	str	r0, [r2, #0]
 8013cdc:	7019      	strb	r1, [r3, #0]
 8013cde:	4608      	mov	r0, r1
 8013ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ce4:	4770      	bx	lr

08013ce6 <__sfputs_r>:
 8013ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ce8:	4606      	mov	r6, r0
 8013cea:	460f      	mov	r7, r1
 8013cec:	4614      	mov	r4, r2
 8013cee:	18d5      	adds	r5, r2, r3
 8013cf0:	42ac      	cmp	r4, r5
 8013cf2:	d101      	bne.n	8013cf8 <__sfputs_r+0x12>
 8013cf4:	2000      	movs	r0, #0
 8013cf6:	e007      	b.n	8013d08 <__sfputs_r+0x22>
 8013cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cfc:	463a      	mov	r2, r7
 8013cfe:	4630      	mov	r0, r6
 8013d00:	f7ff ffda 	bl	8013cb8 <__sfputc_r>
 8013d04:	1c43      	adds	r3, r0, #1
 8013d06:	d1f3      	bne.n	8013cf0 <__sfputs_r+0xa>
 8013d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d0c <_vfiprintf_r>:
 8013d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d10:	460d      	mov	r5, r1
 8013d12:	b09d      	sub	sp, #116	; 0x74
 8013d14:	4614      	mov	r4, r2
 8013d16:	4698      	mov	r8, r3
 8013d18:	4606      	mov	r6, r0
 8013d1a:	b118      	cbz	r0, 8013d24 <_vfiprintf_r+0x18>
 8013d1c:	6a03      	ldr	r3, [r0, #32]
 8013d1e:	b90b      	cbnz	r3, 8013d24 <_vfiprintf_r+0x18>
 8013d20:	f7ff fccc 	bl	80136bc <__sinit>
 8013d24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d26:	07d9      	lsls	r1, r3, #31
 8013d28:	d405      	bmi.n	8013d36 <_vfiprintf_r+0x2a>
 8013d2a:	89ab      	ldrh	r3, [r5, #12]
 8013d2c:	059a      	lsls	r2, r3, #22
 8013d2e:	d402      	bmi.n	8013d36 <_vfiprintf_r+0x2a>
 8013d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d32:	f7ff feb8 	bl	8013aa6 <__retarget_lock_acquire_recursive>
 8013d36:	89ab      	ldrh	r3, [r5, #12]
 8013d38:	071b      	lsls	r3, r3, #28
 8013d3a:	d501      	bpl.n	8013d40 <_vfiprintf_r+0x34>
 8013d3c:	692b      	ldr	r3, [r5, #16]
 8013d3e:	b99b      	cbnz	r3, 8013d68 <_vfiprintf_r+0x5c>
 8013d40:	4629      	mov	r1, r5
 8013d42:	4630      	mov	r0, r6
 8013d44:	f7ff fdde 	bl	8013904 <__swsetup_r>
 8013d48:	b170      	cbz	r0, 8013d68 <_vfiprintf_r+0x5c>
 8013d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d4c:	07dc      	lsls	r4, r3, #31
 8013d4e:	d504      	bpl.n	8013d5a <_vfiprintf_r+0x4e>
 8013d50:	f04f 30ff 	mov.w	r0, #4294967295
 8013d54:	b01d      	add	sp, #116	; 0x74
 8013d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d5a:	89ab      	ldrh	r3, [r5, #12]
 8013d5c:	0598      	lsls	r0, r3, #22
 8013d5e:	d4f7      	bmi.n	8013d50 <_vfiprintf_r+0x44>
 8013d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d62:	f7ff fea1 	bl	8013aa8 <__retarget_lock_release_recursive>
 8013d66:	e7f3      	b.n	8013d50 <_vfiprintf_r+0x44>
 8013d68:	2300      	movs	r3, #0
 8013d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8013d6c:	2320      	movs	r3, #32
 8013d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d76:	2330      	movs	r3, #48	; 0x30
 8013d78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013f2c <_vfiprintf_r+0x220>
 8013d7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d80:	f04f 0901 	mov.w	r9, #1
 8013d84:	4623      	mov	r3, r4
 8013d86:	469a      	mov	sl, r3
 8013d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d8c:	b10a      	cbz	r2, 8013d92 <_vfiprintf_r+0x86>
 8013d8e:	2a25      	cmp	r2, #37	; 0x25
 8013d90:	d1f9      	bne.n	8013d86 <_vfiprintf_r+0x7a>
 8013d92:	ebba 0b04 	subs.w	fp, sl, r4
 8013d96:	d00b      	beq.n	8013db0 <_vfiprintf_r+0xa4>
 8013d98:	465b      	mov	r3, fp
 8013d9a:	4622      	mov	r2, r4
 8013d9c:	4629      	mov	r1, r5
 8013d9e:	4630      	mov	r0, r6
 8013da0:	f7ff ffa1 	bl	8013ce6 <__sfputs_r>
 8013da4:	3001      	adds	r0, #1
 8013da6:	f000 80a9 	beq.w	8013efc <_vfiprintf_r+0x1f0>
 8013daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dac:	445a      	add	r2, fp
 8013dae:	9209      	str	r2, [sp, #36]	; 0x24
 8013db0:	f89a 3000 	ldrb.w	r3, [sl]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	f000 80a1 	beq.w	8013efc <_vfiprintf_r+0x1f0>
 8013dba:	2300      	movs	r3, #0
 8013dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8013dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013dc4:	f10a 0a01 	add.w	sl, sl, #1
 8013dc8:	9304      	str	r3, [sp, #16]
 8013dca:	9307      	str	r3, [sp, #28]
 8013dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8013dd2:	4654      	mov	r4, sl
 8013dd4:	2205      	movs	r2, #5
 8013dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dda:	4854      	ldr	r0, [pc, #336]	; (8013f2c <_vfiprintf_r+0x220>)
 8013ddc:	f7f0 f9f8 	bl	80041d0 <memchr>
 8013de0:	9a04      	ldr	r2, [sp, #16]
 8013de2:	b9d8      	cbnz	r0, 8013e1c <_vfiprintf_r+0x110>
 8013de4:	06d1      	lsls	r1, r2, #27
 8013de6:	bf44      	itt	mi
 8013de8:	2320      	movmi	r3, #32
 8013dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013dee:	0713      	lsls	r3, r2, #28
 8013df0:	bf44      	itt	mi
 8013df2:	232b      	movmi	r3, #43	; 0x2b
 8013df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013df8:	f89a 3000 	ldrb.w	r3, [sl]
 8013dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8013dfe:	d015      	beq.n	8013e2c <_vfiprintf_r+0x120>
 8013e00:	9a07      	ldr	r2, [sp, #28]
 8013e02:	4654      	mov	r4, sl
 8013e04:	2000      	movs	r0, #0
 8013e06:	f04f 0c0a 	mov.w	ip, #10
 8013e0a:	4621      	mov	r1, r4
 8013e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e10:	3b30      	subs	r3, #48	; 0x30
 8013e12:	2b09      	cmp	r3, #9
 8013e14:	d94d      	bls.n	8013eb2 <_vfiprintf_r+0x1a6>
 8013e16:	b1b0      	cbz	r0, 8013e46 <_vfiprintf_r+0x13a>
 8013e18:	9207      	str	r2, [sp, #28]
 8013e1a:	e014      	b.n	8013e46 <_vfiprintf_r+0x13a>
 8013e1c:	eba0 0308 	sub.w	r3, r0, r8
 8013e20:	fa09 f303 	lsl.w	r3, r9, r3
 8013e24:	4313      	orrs	r3, r2
 8013e26:	9304      	str	r3, [sp, #16]
 8013e28:	46a2      	mov	sl, r4
 8013e2a:	e7d2      	b.n	8013dd2 <_vfiprintf_r+0xc6>
 8013e2c:	9b03      	ldr	r3, [sp, #12]
 8013e2e:	1d19      	adds	r1, r3, #4
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	9103      	str	r1, [sp, #12]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	bfbb      	ittet	lt
 8013e38:	425b      	neglt	r3, r3
 8013e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8013e3e:	9307      	strge	r3, [sp, #28]
 8013e40:	9307      	strlt	r3, [sp, #28]
 8013e42:	bfb8      	it	lt
 8013e44:	9204      	strlt	r2, [sp, #16]
 8013e46:	7823      	ldrb	r3, [r4, #0]
 8013e48:	2b2e      	cmp	r3, #46	; 0x2e
 8013e4a:	d10c      	bne.n	8013e66 <_vfiprintf_r+0x15a>
 8013e4c:	7863      	ldrb	r3, [r4, #1]
 8013e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8013e50:	d134      	bne.n	8013ebc <_vfiprintf_r+0x1b0>
 8013e52:	9b03      	ldr	r3, [sp, #12]
 8013e54:	1d1a      	adds	r2, r3, #4
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	9203      	str	r2, [sp, #12]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	bfb8      	it	lt
 8013e5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e62:	3402      	adds	r4, #2
 8013e64:	9305      	str	r3, [sp, #20]
 8013e66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013f3c <_vfiprintf_r+0x230>
 8013e6a:	7821      	ldrb	r1, [r4, #0]
 8013e6c:	2203      	movs	r2, #3
 8013e6e:	4650      	mov	r0, sl
 8013e70:	f7f0 f9ae 	bl	80041d0 <memchr>
 8013e74:	b138      	cbz	r0, 8013e86 <_vfiprintf_r+0x17a>
 8013e76:	9b04      	ldr	r3, [sp, #16]
 8013e78:	eba0 000a 	sub.w	r0, r0, sl
 8013e7c:	2240      	movs	r2, #64	; 0x40
 8013e7e:	4082      	lsls	r2, r0
 8013e80:	4313      	orrs	r3, r2
 8013e82:	3401      	adds	r4, #1
 8013e84:	9304      	str	r3, [sp, #16]
 8013e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e8a:	4829      	ldr	r0, [pc, #164]	; (8013f30 <_vfiprintf_r+0x224>)
 8013e8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e90:	2206      	movs	r2, #6
 8013e92:	f7f0 f99d 	bl	80041d0 <memchr>
 8013e96:	2800      	cmp	r0, #0
 8013e98:	d03f      	beq.n	8013f1a <_vfiprintf_r+0x20e>
 8013e9a:	4b26      	ldr	r3, [pc, #152]	; (8013f34 <_vfiprintf_r+0x228>)
 8013e9c:	bb1b      	cbnz	r3, 8013ee6 <_vfiprintf_r+0x1da>
 8013e9e:	9b03      	ldr	r3, [sp, #12]
 8013ea0:	3307      	adds	r3, #7
 8013ea2:	f023 0307 	bic.w	r3, r3, #7
 8013ea6:	3308      	adds	r3, #8
 8013ea8:	9303      	str	r3, [sp, #12]
 8013eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eac:	443b      	add	r3, r7
 8013eae:	9309      	str	r3, [sp, #36]	; 0x24
 8013eb0:	e768      	b.n	8013d84 <_vfiprintf_r+0x78>
 8013eb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8013eb6:	460c      	mov	r4, r1
 8013eb8:	2001      	movs	r0, #1
 8013eba:	e7a6      	b.n	8013e0a <_vfiprintf_r+0xfe>
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	3401      	adds	r4, #1
 8013ec0:	9305      	str	r3, [sp, #20]
 8013ec2:	4619      	mov	r1, r3
 8013ec4:	f04f 0c0a 	mov.w	ip, #10
 8013ec8:	4620      	mov	r0, r4
 8013eca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ece:	3a30      	subs	r2, #48	; 0x30
 8013ed0:	2a09      	cmp	r2, #9
 8013ed2:	d903      	bls.n	8013edc <_vfiprintf_r+0x1d0>
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d0c6      	beq.n	8013e66 <_vfiprintf_r+0x15a>
 8013ed8:	9105      	str	r1, [sp, #20]
 8013eda:	e7c4      	b.n	8013e66 <_vfiprintf_r+0x15a>
 8013edc:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	2301      	movs	r3, #1
 8013ee4:	e7f0      	b.n	8013ec8 <_vfiprintf_r+0x1bc>
 8013ee6:	ab03      	add	r3, sp, #12
 8013ee8:	9300      	str	r3, [sp, #0]
 8013eea:	462a      	mov	r2, r5
 8013eec:	4b12      	ldr	r3, [pc, #72]	; (8013f38 <_vfiprintf_r+0x22c>)
 8013eee:	a904      	add	r1, sp, #16
 8013ef0:	4630      	mov	r0, r6
 8013ef2:	f3af 8000 	nop.w
 8013ef6:	4607      	mov	r7, r0
 8013ef8:	1c78      	adds	r0, r7, #1
 8013efa:	d1d6      	bne.n	8013eaa <_vfiprintf_r+0x19e>
 8013efc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013efe:	07d9      	lsls	r1, r3, #31
 8013f00:	d405      	bmi.n	8013f0e <_vfiprintf_r+0x202>
 8013f02:	89ab      	ldrh	r3, [r5, #12]
 8013f04:	059a      	lsls	r2, r3, #22
 8013f06:	d402      	bmi.n	8013f0e <_vfiprintf_r+0x202>
 8013f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f0a:	f7ff fdcd 	bl	8013aa8 <__retarget_lock_release_recursive>
 8013f0e:	89ab      	ldrh	r3, [r5, #12]
 8013f10:	065b      	lsls	r3, r3, #25
 8013f12:	f53f af1d 	bmi.w	8013d50 <_vfiprintf_r+0x44>
 8013f16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f18:	e71c      	b.n	8013d54 <_vfiprintf_r+0x48>
 8013f1a:	ab03      	add	r3, sp, #12
 8013f1c:	9300      	str	r3, [sp, #0]
 8013f1e:	462a      	mov	r2, r5
 8013f20:	4b05      	ldr	r3, [pc, #20]	; (8013f38 <_vfiprintf_r+0x22c>)
 8013f22:	a904      	add	r1, sp, #16
 8013f24:	4630      	mov	r0, r6
 8013f26:	f000 f879 	bl	801401c <_printf_i>
 8013f2a:	e7e4      	b.n	8013ef6 <_vfiprintf_r+0x1ea>
 8013f2c:	0801539c 	.word	0x0801539c
 8013f30:	080153a6 	.word	0x080153a6
 8013f34:	00000000 	.word	0x00000000
 8013f38:	08013ce7 	.word	0x08013ce7
 8013f3c:	080153a2 	.word	0x080153a2

08013f40 <_printf_common>:
 8013f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f44:	4616      	mov	r6, r2
 8013f46:	4699      	mov	r9, r3
 8013f48:	688a      	ldr	r2, [r1, #8]
 8013f4a:	690b      	ldr	r3, [r1, #16]
 8013f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f50:	4293      	cmp	r3, r2
 8013f52:	bfb8      	it	lt
 8013f54:	4613      	movlt	r3, r2
 8013f56:	6033      	str	r3, [r6, #0]
 8013f58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f5c:	4607      	mov	r7, r0
 8013f5e:	460c      	mov	r4, r1
 8013f60:	b10a      	cbz	r2, 8013f66 <_printf_common+0x26>
 8013f62:	3301      	adds	r3, #1
 8013f64:	6033      	str	r3, [r6, #0]
 8013f66:	6823      	ldr	r3, [r4, #0]
 8013f68:	0699      	lsls	r1, r3, #26
 8013f6a:	bf42      	ittt	mi
 8013f6c:	6833      	ldrmi	r3, [r6, #0]
 8013f6e:	3302      	addmi	r3, #2
 8013f70:	6033      	strmi	r3, [r6, #0]
 8013f72:	6825      	ldr	r5, [r4, #0]
 8013f74:	f015 0506 	ands.w	r5, r5, #6
 8013f78:	d106      	bne.n	8013f88 <_printf_common+0x48>
 8013f7a:	f104 0a19 	add.w	sl, r4, #25
 8013f7e:	68e3      	ldr	r3, [r4, #12]
 8013f80:	6832      	ldr	r2, [r6, #0]
 8013f82:	1a9b      	subs	r3, r3, r2
 8013f84:	42ab      	cmp	r3, r5
 8013f86:	dc26      	bgt.n	8013fd6 <_printf_common+0x96>
 8013f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013f8c:	1e13      	subs	r3, r2, #0
 8013f8e:	6822      	ldr	r2, [r4, #0]
 8013f90:	bf18      	it	ne
 8013f92:	2301      	movne	r3, #1
 8013f94:	0692      	lsls	r2, r2, #26
 8013f96:	d42b      	bmi.n	8013ff0 <_printf_common+0xb0>
 8013f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013f9c:	4649      	mov	r1, r9
 8013f9e:	4638      	mov	r0, r7
 8013fa0:	47c0      	blx	r8
 8013fa2:	3001      	adds	r0, #1
 8013fa4:	d01e      	beq.n	8013fe4 <_printf_common+0xa4>
 8013fa6:	6823      	ldr	r3, [r4, #0]
 8013fa8:	6922      	ldr	r2, [r4, #16]
 8013faa:	f003 0306 	and.w	r3, r3, #6
 8013fae:	2b04      	cmp	r3, #4
 8013fb0:	bf02      	ittt	eq
 8013fb2:	68e5      	ldreq	r5, [r4, #12]
 8013fb4:	6833      	ldreq	r3, [r6, #0]
 8013fb6:	1aed      	subeq	r5, r5, r3
 8013fb8:	68a3      	ldr	r3, [r4, #8]
 8013fba:	bf0c      	ite	eq
 8013fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013fc0:	2500      	movne	r5, #0
 8013fc2:	4293      	cmp	r3, r2
 8013fc4:	bfc4      	itt	gt
 8013fc6:	1a9b      	subgt	r3, r3, r2
 8013fc8:	18ed      	addgt	r5, r5, r3
 8013fca:	2600      	movs	r6, #0
 8013fcc:	341a      	adds	r4, #26
 8013fce:	42b5      	cmp	r5, r6
 8013fd0:	d11a      	bne.n	8014008 <_printf_common+0xc8>
 8013fd2:	2000      	movs	r0, #0
 8013fd4:	e008      	b.n	8013fe8 <_printf_common+0xa8>
 8013fd6:	2301      	movs	r3, #1
 8013fd8:	4652      	mov	r2, sl
 8013fda:	4649      	mov	r1, r9
 8013fdc:	4638      	mov	r0, r7
 8013fde:	47c0      	blx	r8
 8013fe0:	3001      	adds	r0, #1
 8013fe2:	d103      	bne.n	8013fec <_printf_common+0xac>
 8013fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8013fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fec:	3501      	adds	r5, #1
 8013fee:	e7c6      	b.n	8013f7e <_printf_common+0x3e>
 8013ff0:	18e1      	adds	r1, r4, r3
 8013ff2:	1c5a      	adds	r2, r3, #1
 8013ff4:	2030      	movs	r0, #48	; 0x30
 8013ff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013ffa:	4422      	add	r2, r4
 8013ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014004:	3302      	adds	r3, #2
 8014006:	e7c7      	b.n	8013f98 <_printf_common+0x58>
 8014008:	2301      	movs	r3, #1
 801400a:	4622      	mov	r2, r4
 801400c:	4649      	mov	r1, r9
 801400e:	4638      	mov	r0, r7
 8014010:	47c0      	blx	r8
 8014012:	3001      	adds	r0, #1
 8014014:	d0e6      	beq.n	8013fe4 <_printf_common+0xa4>
 8014016:	3601      	adds	r6, #1
 8014018:	e7d9      	b.n	8013fce <_printf_common+0x8e>
	...

0801401c <_printf_i>:
 801401c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014020:	7e0f      	ldrb	r7, [r1, #24]
 8014022:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014024:	2f78      	cmp	r7, #120	; 0x78
 8014026:	4691      	mov	r9, r2
 8014028:	4680      	mov	r8, r0
 801402a:	460c      	mov	r4, r1
 801402c:	469a      	mov	sl, r3
 801402e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014032:	d807      	bhi.n	8014044 <_printf_i+0x28>
 8014034:	2f62      	cmp	r7, #98	; 0x62
 8014036:	d80a      	bhi.n	801404e <_printf_i+0x32>
 8014038:	2f00      	cmp	r7, #0
 801403a:	f000 80d4 	beq.w	80141e6 <_printf_i+0x1ca>
 801403e:	2f58      	cmp	r7, #88	; 0x58
 8014040:	f000 80c0 	beq.w	80141c4 <_printf_i+0x1a8>
 8014044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801404c:	e03a      	b.n	80140c4 <_printf_i+0xa8>
 801404e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014052:	2b15      	cmp	r3, #21
 8014054:	d8f6      	bhi.n	8014044 <_printf_i+0x28>
 8014056:	a101      	add	r1, pc, #4	; (adr r1, 801405c <_printf_i+0x40>)
 8014058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801405c:	080140b5 	.word	0x080140b5
 8014060:	080140c9 	.word	0x080140c9
 8014064:	08014045 	.word	0x08014045
 8014068:	08014045 	.word	0x08014045
 801406c:	08014045 	.word	0x08014045
 8014070:	08014045 	.word	0x08014045
 8014074:	080140c9 	.word	0x080140c9
 8014078:	08014045 	.word	0x08014045
 801407c:	08014045 	.word	0x08014045
 8014080:	08014045 	.word	0x08014045
 8014084:	08014045 	.word	0x08014045
 8014088:	080141cd 	.word	0x080141cd
 801408c:	080140f5 	.word	0x080140f5
 8014090:	08014187 	.word	0x08014187
 8014094:	08014045 	.word	0x08014045
 8014098:	08014045 	.word	0x08014045
 801409c:	080141ef 	.word	0x080141ef
 80140a0:	08014045 	.word	0x08014045
 80140a4:	080140f5 	.word	0x080140f5
 80140a8:	08014045 	.word	0x08014045
 80140ac:	08014045 	.word	0x08014045
 80140b0:	0801418f 	.word	0x0801418f
 80140b4:	682b      	ldr	r3, [r5, #0]
 80140b6:	1d1a      	adds	r2, r3, #4
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	602a      	str	r2, [r5, #0]
 80140bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80140c4:	2301      	movs	r3, #1
 80140c6:	e09f      	b.n	8014208 <_printf_i+0x1ec>
 80140c8:	6820      	ldr	r0, [r4, #0]
 80140ca:	682b      	ldr	r3, [r5, #0]
 80140cc:	0607      	lsls	r7, r0, #24
 80140ce:	f103 0104 	add.w	r1, r3, #4
 80140d2:	6029      	str	r1, [r5, #0]
 80140d4:	d501      	bpl.n	80140da <_printf_i+0xbe>
 80140d6:	681e      	ldr	r6, [r3, #0]
 80140d8:	e003      	b.n	80140e2 <_printf_i+0xc6>
 80140da:	0646      	lsls	r6, r0, #25
 80140dc:	d5fb      	bpl.n	80140d6 <_printf_i+0xba>
 80140de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80140e2:	2e00      	cmp	r6, #0
 80140e4:	da03      	bge.n	80140ee <_printf_i+0xd2>
 80140e6:	232d      	movs	r3, #45	; 0x2d
 80140e8:	4276      	negs	r6, r6
 80140ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140ee:	485a      	ldr	r0, [pc, #360]	; (8014258 <_printf_i+0x23c>)
 80140f0:	230a      	movs	r3, #10
 80140f2:	e012      	b.n	801411a <_printf_i+0xfe>
 80140f4:	682b      	ldr	r3, [r5, #0]
 80140f6:	6820      	ldr	r0, [r4, #0]
 80140f8:	1d19      	adds	r1, r3, #4
 80140fa:	6029      	str	r1, [r5, #0]
 80140fc:	0605      	lsls	r5, r0, #24
 80140fe:	d501      	bpl.n	8014104 <_printf_i+0xe8>
 8014100:	681e      	ldr	r6, [r3, #0]
 8014102:	e002      	b.n	801410a <_printf_i+0xee>
 8014104:	0641      	lsls	r1, r0, #25
 8014106:	d5fb      	bpl.n	8014100 <_printf_i+0xe4>
 8014108:	881e      	ldrh	r6, [r3, #0]
 801410a:	4853      	ldr	r0, [pc, #332]	; (8014258 <_printf_i+0x23c>)
 801410c:	2f6f      	cmp	r7, #111	; 0x6f
 801410e:	bf0c      	ite	eq
 8014110:	2308      	moveq	r3, #8
 8014112:	230a      	movne	r3, #10
 8014114:	2100      	movs	r1, #0
 8014116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801411a:	6865      	ldr	r5, [r4, #4]
 801411c:	60a5      	str	r5, [r4, #8]
 801411e:	2d00      	cmp	r5, #0
 8014120:	bfa2      	ittt	ge
 8014122:	6821      	ldrge	r1, [r4, #0]
 8014124:	f021 0104 	bicge.w	r1, r1, #4
 8014128:	6021      	strge	r1, [r4, #0]
 801412a:	b90e      	cbnz	r6, 8014130 <_printf_i+0x114>
 801412c:	2d00      	cmp	r5, #0
 801412e:	d04b      	beq.n	80141c8 <_printf_i+0x1ac>
 8014130:	4615      	mov	r5, r2
 8014132:	fbb6 f1f3 	udiv	r1, r6, r3
 8014136:	fb03 6711 	mls	r7, r3, r1, r6
 801413a:	5dc7      	ldrb	r7, [r0, r7]
 801413c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014140:	4637      	mov	r7, r6
 8014142:	42bb      	cmp	r3, r7
 8014144:	460e      	mov	r6, r1
 8014146:	d9f4      	bls.n	8014132 <_printf_i+0x116>
 8014148:	2b08      	cmp	r3, #8
 801414a:	d10b      	bne.n	8014164 <_printf_i+0x148>
 801414c:	6823      	ldr	r3, [r4, #0]
 801414e:	07de      	lsls	r6, r3, #31
 8014150:	d508      	bpl.n	8014164 <_printf_i+0x148>
 8014152:	6923      	ldr	r3, [r4, #16]
 8014154:	6861      	ldr	r1, [r4, #4]
 8014156:	4299      	cmp	r1, r3
 8014158:	bfde      	ittt	le
 801415a:	2330      	movle	r3, #48	; 0x30
 801415c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014160:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014164:	1b52      	subs	r2, r2, r5
 8014166:	6122      	str	r2, [r4, #16]
 8014168:	f8cd a000 	str.w	sl, [sp]
 801416c:	464b      	mov	r3, r9
 801416e:	aa03      	add	r2, sp, #12
 8014170:	4621      	mov	r1, r4
 8014172:	4640      	mov	r0, r8
 8014174:	f7ff fee4 	bl	8013f40 <_printf_common>
 8014178:	3001      	adds	r0, #1
 801417a:	d14a      	bne.n	8014212 <_printf_i+0x1f6>
 801417c:	f04f 30ff 	mov.w	r0, #4294967295
 8014180:	b004      	add	sp, #16
 8014182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014186:	6823      	ldr	r3, [r4, #0]
 8014188:	f043 0320 	orr.w	r3, r3, #32
 801418c:	6023      	str	r3, [r4, #0]
 801418e:	4833      	ldr	r0, [pc, #204]	; (801425c <_printf_i+0x240>)
 8014190:	2778      	movs	r7, #120	; 0x78
 8014192:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014196:	6823      	ldr	r3, [r4, #0]
 8014198:	6829      	ldr	r1, [r5, #0]
 801419a:	061f      	lsls	r7, r3, #24
 801419c:	f851 6b04 	ldr.w	r6, [r1], #4
 80141a0:	d402      	bmi.n	80141a8 <_printf_i+0x18c>
 80141a2:	065f      	lsls	r7, r3, #25
 80141a4:	bf48      	it	mi
 80141a6:	b2b6      	uxthmi	r6, r6
 80141a8:	07df      	lsls	r7, r3, #31
 80141aa:	bf48      	it	mi
 80141ac:	f043 0320 	orrmi.w	r3, r3, #32
 80141b0:	6029      	str	r1, [r5, #0]
 80141b2:	bf48      	it	mi
 80141b4:	6023      	strmi	r3, [r4, #0]
 80141b6:	b91e      	cbnz	r6, 80141c0 <_printf_i+0x1a4>
 80141b8:	6823      	ldr	r3, [r4, #0]
 80141ba:	f023 0320 	bic.w	r3, r3, #32
 80141be:	6023      	str	r3, [r4, #0]
 80141c0:	2310      	movs	r3, #16
 80141c2:	e7a7      	b.n	8014114 <_printf_i+0xf8>
 80141c4:	4824      	ldr	r0, [pc, #144]	; (8014258 <_printf_i+0x23c>)
 80141c6:	e7e4      	b.n	8014192 <_printf_i+0x176>
 80141c8:	4615      	mov	r5, r2
 80141ca:	e7bd      	b.n	8014148 <_printf_i+0x12c>
 80141cc:	682b      	ldr	r3, [r5, #0]
 80141ce:	6826      	ldr	r6, [r4, #0]
 80141d0:	6961      	ldr	r1, [r4, #20]
 80141d2:	1d18      	adds	r0, r3, #4
 80141d4:	6028      	str	r0, [r5, #0]
 80141d6:	0635      	lsls	r5, r6, #24
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	d501      	bpl.n	80141e0 <_printf_i+0x1c4>
 80141dc:	6019      	str	r1, [r3, #0]
 80141de:	e002      	b.n	80141e6 <_printf_i+0x1ca>
 80141e0:	0670      	lsls	r0, r6, #25
 80141e2:	d5fb      	bpl.n	80141dc <_printf_i+0x1c0>
 80141e4:	8019      	strh	r1, [r3, #0]
 80141e6:	2300      	movs	r3, #0
 80141e8:	6123      	str	r3, [r4, #16]
 80141ea:	4615      	mov	r5, r2
 80141ec:	e7bc      	b.n	8014168 <_printf_i+0x14c>
 80141ee:	682b      	ldr	r3, [r5, #0]
 80141f0:	1d1a      	adds	r2, r3, #4
 80141f2:	602a      	str	r2, [r5, #0]
 80141f4:	681d      	ldr	r5, [r3, #0]
 80141f6:	6862      	ldr	r2, [r4, #4]
 80141f8:	2100      	movs	r1, #0
 80141fa:	4628      	mov	r0, r5
 80141fc:	f7ef ffe8 	bl	80041d0 <memchr>
 8014200:	b108      	cbz	r0, 8014206 <_printf_i+0x1ea>
 8014202:	1b40      	subs	r0, r0, r5
 8014204:	6060      	str	r0, [r4, #4]
 8014206:	6863      	ldr	r3, [r4, #4]
 8014208:	6123      	str	r3, [r4, #16]
 801420a:	2300      	movs	r3, #0
 801420c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014210:	e7aa      	b.n	8014168 <_printf_i+0x14c>
 8014212:	6923      	ldr	r3, [r4, #16]
 8014214:	462a      	mov	r2, r5
 8014216:	4649      	mov	r1, r9
 8014218:	4640      	mov	r0, r8
 801421a:	47d0      	blx	sl
 801421c:	3001      	adds	r0, #1
 801421e:	d0ad      	beq.n	801417c <_printf_i+0x160>
 8014220:	6823      	ldr	r3, [r4, #0]
 8014222:	079b      	lsls	r3, r3, #30
 8014224:	d413      	bmi.n	801424e <_printf_i+0x232>
 8014226:	68e0      	ldr	r0, [r4, #12]
 8014228:	9b03      	ldr	r3, [sp, #12]
 801422a:	4298      	cmp	r0, r3
 801422c:	bfb8      	it	lt
 801422e:	4618      	movlt	r0, r3
 8014230:	e7a6      	b.n	8014180 <_printf_i+0x164>
 8014232:	2301      	movs	r3, #1
 8014234:	4632      	mov	r2, r6
 8014236:	4649      	mov	r1, r9
 8014238:	4640      	mov	r0, r8
 801423a:	47d0      	blx	sl
 801423c:	3001      	adds	r0, #1
 801423e:	d09d      	beq.n	801417c <_printf_i+0x160>
 8014240:	3501      	adds	r5, #1
 8014242:	68e3      	ldr	r3, [r4, #12]
 8014244:	9903      	ldr	r1, [sp, #12]
 8014246:	1a5b      	subs	r3, r3, r1
 8014248:	42ab      	cmp	r3, r5
 801424a:	dcf2      	bgt.n	8014232 <_printf_i+0x216>
 801424c:	e7eb      	b.n	8014226 <_printf_i+0x20a>
 801424e:	2500      	movs	r5, #0
 8014250:	f104 0619 	add.w	r6, r4, #25
 8014254:	e7f5      	b.n	8014242 <_printf_i+0x226>
 8014256:	bf00      	nop
 8014258:	080153ad 	.word	0x080153ad
 801425c:	080153be 	.word	0x080153be

08014260 <__sflush_r>:
 8014260:	898a      	ldrh	r2, [r1, #12]
 8014262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014266:	4605      	mov	r5, r0
 8014268:	0710      	lsls	r0, r2, #28
 801426a:	460c      	mov	r4, r1
 801426c:	d458      	bmi.n	8014320 <__sflush_r+0xc0>
 801426e:	684b      	ldr	r3, [r1, #4]
 8014270:	2b00      	cmp	r3, #0
 8014272:	dc05      	bgt.n	8014280 <__sflush_r+0x20>
 8014274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014276:	2b00      	cmp	r3, #0
 8014278:	dc02      	bgt.n	8014280 <__sflush_r+0x20>
 801427a:	2000      	movs	r0, #0
 801427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014282:	2e00      	cmp	r6, #0
 8014284:	d0f9      	beq.n	801427a <__sflush_r+0x1a>
 8014286:	2300      	movs	r3, #0
 8014288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801428c:	682f      	ldr	r7, [r5, #0]
 801428e:	6a21      	ldr	r1, [r4, #32]
 8014290:	602b      	str	r3, [r5, #0]
 8014292:	d032      	beq.n	80142fa <__sflush_r+0x9a>
 8014294:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014296:	89a3      	ldrh	r3, [r4, #12]
 8014298:	075a      	lsls	r2, r3, #29
 801429a:	d505      	bpl.n	80142a8 <__sflush_r+0x48>
 801429c:	6863      	ldr	r3, [r4, #4]
 801429e:	1ac0      	subs	r0, r0, r3
 80142a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80142a2:	b10b      	cbz	r3, 80142a8 <__sflush_r+0x48>
 80142a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80142a6:	1ac0      	subs	r0, r0, r3
 80142a8:	2300      	movs	r3, #0
 80142aa:	4602      	mov	r2, r0
 80142ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142ae:	6a21      	ldr	r1, [r4, #32]
 80142b0:	4628      	mov	r0, r5
 80142b2:	47b0      	blx	r6
 80142b4:	1c43      	adds	r3, r0, #1
 80142b6:	89a3      	ldrh	r3, [r4, #12]
 80142b8:	d106      	bne.n	80142c8 <__sflush_r+0x68>
 80142ba:	6829      	ldr	r1, [r5, #0]
 80142bc:	291d      	cmp	r1, #29
 80142be:	d82b      	bhi.n	8014318 <__sflush_r+0xb8>
 80142c0:	4a29      	ldr	r2, [pc, #164]	; (8014368 <__sflush_r+0x108>)
 80142c2:	410a      	asrs	r2, r1
 80142c4:	07d6      	lsls	r6, r2, #31
 80142c6:	d427      	bmi.n	8014318 <__sflush_r+0xb8>
 80142c8:	2200      	movs	r2, #0
 80142ca:	6062      	str	r2, [r4, #4]
 80142cc:	04d9      	lsls	r1, r3, #19
 80142ce:	6922      	ldr	r2, [r4, #16]
 80142d0:	6022      	str	r2, [r4, #0]
 80142d2:	d504      	bpl.n	80142de <__sflush_r+0x7e>
 80142d4:	1c42      	adds	r2, r0, #1
 80142d6:	d101      	bne.n	80142dc <__sflush_r+0x7c>
 80142d8:	682b      	ldr	r3, [r5, #0]
 80142da:	b903      	cbnz	r3, 80142de <__sflush_r+0x7e>
 80142dc:	6560      	str	r0, [r4, #84]	; 0x54
 80142de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80142e0:	602f      	str	r7, [r5, #0]
 80142e2:	2900      	cmp	r1, #0
 80142e4:	d0c9      	beq.n	801427a <__sflush_r+0x1a>
 80142e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80142ea:	4299      	cmp	r1, r3
 80142ec:	d002      	beq.n	80142f4 <__sflush_r+0x94>
 80142ee:	4628      	mov	r0, r5
 80142f0:	f7ff fbea 	bl	8013ac8 <_free_r>
 80142f4:	2000      	movs	r0, #0
 80142f6:	6360      	str	r0, [r4, #52]	; 0x34
 80142f8:	e7c0      	b.n	801427c <__sflush_r+0x1c>
 80142fa:	2301      	movs	r3, #1
 80142fc:	4628      	mov	r0, r5
 80142fe:	47b0      	blx	r6
 8014300:	1c41      	adds	r1, r0, #1
 8014302:	d1c8      	bne.n	8014296 <__sflush_r+0x36>
 8014304:	682b      	ldr	r3, [r5, #0]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d0c5      	beq.n	8014296 <__sflush_r+0x36>
 801430a:	2b1d      	cmp	r3, #29
 801430c:	d001      	beq.n	8014312 <__sflush_r+0xb2>
 801430e:	2b16      	cmp	r3, #22
 8014310:	d101      	bne.n	8014316 <__sflush_r+0xb6>
 8014312:	602f      	str	r7, [r5, #0]
 8014314:	e7b1      	b.n	801427a <__sflush_r+0x1a>
 8014316:	89a3      	ldrh	r3, [r4, #12]
 8014318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801431c:	81a3      	strh	r3, [r4, #12]
 801431e:	e7ad      	b.n	801427c <__sflush_r+0x1c>
 8014320:	690f      	ldr	r7, [r1, #16]
 8014322:	2f00      	cmp	r7, #0
 8014324:	d0a9      	beq.n	801427a <__sflush_r+0x1a>
 8014326:	0793      	lsls	r3, r2, #30
 8014328:	680e      	ldr	r6, [r1, #0]
 801432a:	bf08      	it	eq
 801432c:	694b      	ldreq	r3, [r1, #20]
 801432e:	600f      	str	r7, [r1, #0]
 8014330:	bf18      	it	ne
 8014332:	2300      	movne	r3, #0
 8014334:	eba6 0807 	sub.w	r8, r6, r7
 8014338:	608b      	str	r3, [r1, #8]
 801433a:	f1b8 0f00 	cmp.w	r8, #0
 801433e:	dd9c      	ble.n	801427a <__sflush_r+0x1a>
 8014340:	6a21      	ldr	r1, [r4, #32]
 8014342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014344:	4643      	mov	r3, r8
 8014346:	463a      	mov	r2, r7
 8014348:	4628      	mov	r0, r5
 801434a:	47b0      	blx	r6
 801434c:	2800      	cmp	r0, #0
 801434e:	dc06      	bgt.n	801435e <__sflush_r+0xfe>
 8014350:	89a3      	ldrh	r3, [r4, #12]
 8014352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014356:	81a3      	strh	r3, [r4, #12]
 8014358:	f04f 30ff 	mov.w	r0, #4294967295
 801435c:	e78e      	b.n	801427c <__sflush_r+0x1c>
 801435e:	4407      	add	r7, r0
 8014360:	eba8 0800 	sub.w	r8, r8, r0
 8014364:	e7e9      	b.n	801433a <__sflush_r+0xda>
 8014366:	bf00      	nop
 8014368:	dfbffffe 	.word	0xdfbffffe

0801436c <_fflush_r>:
 801436c:	b538      	push	{r3, r4, r5, lr}
 801436e:	690b      	ldr	r3, [r1, #16]
 8014370:	4605      	mov	r5, r0
 8014372:	460c      	mov	r4, r1
 8014374:	b913      	cbnz	r3, 801437c <_fflush_r+0x10>
 8014376:	2500      	movs	r5, #0
 8014378:	4628      	mov	r0, r5
 801437a:	bd38      	pop	{r3, r4, r5, pc}
 801437c:	b118      	cbz	r0, 8014386 <_fflush_r+0x1a>
 801437e:	6a03      	ldr	r3, [r0, #32]
 8014380:	b90b      	cbnz	r3, 8014386 <_fflush_r+0x1a>
 8014382:	f7ff f99b 	bl	80136bc <__sinit>
 8014386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d0f3      	beq.n	8014376 <_fflush_r+0xa>
 801438e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014390:	07d0      	lsls	r0, r2, #31
 8014392:	d404      	bmi.n	801439e <_fflush_r+0x32>
 8014394:	0599      	lsls	r1, r3, #22
 8014396:	d402      	bmi.n	801439e <_fflush_r+0x32>
 8014398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801439a:	f7ff fb84 	bl	8013aa6 <__retarget_lock_acquire_recursive>
 801439e:	4628      	mov	r0, r5
 80143a0:	4621      	mov	r1, r4
 80143a2:	f7ff ff5d 	bl	8014260 <__sflush_r>
 80143a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80143a8:	07da      	lsls	r2, r3, #31
 80143aa:	4605      	mov	r5, r0
 80143ac:	d4e4      	bmi.n	8014378 <_fflush_r+0xc>
 80143ae:	89a3      	ldrh	r3, [r4, #12]
 80143b0:	059b      	lsls	r3, r3, #22
 80143b2:	d4e1      	bmi.n	8014378 <_fflush_r+0xc>
 80143b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143b6:	f7ff fb77 	bl	8013aa8 <__retarget_lock_release_recursive>
 80143ba:	e7dd      	b.n	8014378 <_fflush_r+0xc>

080143bc <__swhatbuf_r>:
 80143bc:	b570      	push	{r4, r5, r6, lr}
 80143be:	460c      	mov	r4, r1
 80143c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143c4:	2900      	cmp	r1, #0
 80143c6:	b096      	sub	sp, #88	; 0x58
 80143c8:	4615      	mov	r5, r2
 80143ca:	461e      	mov	r6, r3
 80143cc:	da0d      	bge.n	80143ea <__swhatbuf_r+0x2e>
 80143ce:	89a3      	ldrh	r3, [r4, #12]
 80143d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80143d4:	f04f 0100 	mov.w	r1, #0
 80143d8:	bf0c      	ite	eq
 80143da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80143de:	2340      	movne	r3, #64	; 0x40
 80143e0:	2000      	movs	r0, #0
 80143e2:	6031      	str	r1, [r6, #0]
 80143e4:	602b      	str	r3, [r5, #0]
 80143e6:	b016      	add	sp, #88	; 0x58
 80143e8:	bd70      	pop	{r4, r5, r6, pc}
 80143ea:	466a      	mov	r2, sp
 80143ec:	f000 f848 	bl	8014480 <_fstat_r>
 80143f0:	2800      	cmp	r0, #0
 80143f2:	dbec      	blt.n	80143ce <__swhatbuf_r+0x12>
 80143f4:	9901      	ldr	r1, [sp, #4]
 80143f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80143fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80143fe:	4259      	negs	r1, r3
 8014400:	4159      	adcs	r1, r3
 8014402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014406:	e7eb      	b.n	80143e0 <__swhatbuf_r+0x24>

08014408 <__smakebuf_r>:
 8014408:	898b      	ldrh	r3, [r1, #12]
 801440a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801440c:	079d      	lsls	r5, r3, #30
 801440e:	4606      	mov	r6, r0
 8014410:	460c      	mov	r4, r1
 8014412:	d507      	bpl.n	8014424 <__smakebuf_r+0x1c>
 8014414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014418:	6023      	str	r3, [r4, #0]
 801441a:	6123      	str	r3, [r4, #16]
 801441c:	2301      	movs	r3, #1
 801441e:	6163      	str	r3, [r4, #20]
 8014420:	b002      	add	sp, #8
 8014422:	bd70      	pop	{r4, r5, r6, pc}
 8014424:	ab01      	add	r3, sp, #4
 8014426:	466a      	mov	r2, sp
 8014428:	f7ff ffc8 	bl	80143bc <__swhatbuf_r>
 801442c:	9900      	ldr	r1, [sp, #0]
 801442e:	4605      	mov	r5, r0
 8014430:	4630      	mov	r0, r6
 8014432:	f7ff fbb5 	bl	8013ba0 <_malloc_r>
 8014436:	b948      	cbnz	r0, 801444c <__smakebuf_r+0x44>
 8014438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801443c:	059a      	lsls	r2, r3, #22
 801443e:	d4ef      	bmi.n	8014420 <__smakebuf_r+0x18>
 8014440:	f023 0303 	bic.w	r3, r3, #3
 8014444:	f043 0302 	orr.w	r3, r3, #2
 8014448:	81a3      	strh	r3, [r4, #12]
 801444a:	e7e3      	b.n	8014414 <__smakebuf_r+0xc>
 801444c:	89a3      	ldrh	r3, [r4, #12]
 801444e:	6020      	str	r0, [r4, #0]
 8014450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014454:	81a3      	strh	r3, [r4, #12]
 8014456:	9b00      	ldr	r3, [sp, #0]
 8014458:	6163      	str	r3, [r4, #20]
 801445a:	9b01      	ldr	r3, [sp, #4]
 801445c:	6120      	str	r0, [r4, #16]
 801445e:	b15b      	cbz	r3, 8014478 <__smakebuf_r+0x70>
 8014460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014464:	4630      	mov	r0, r6
 8014466:	f000 f81d 	bl	80144a4 <_isatty_r>
 801446a:	b128      	cbz	r0, 8014478 <__smakebuf_r+0x70>
 801446c:	89a3      	ldrh	r3, [r4, #12]
 801446e:	f023 0303 	bic.w	r3, r3, #3
 8014472:	f043 0301 	orr.w	r3, r3, #1
 8014476:	81a3      	strh	r3, [r4, #12]
 8014478:	89a3      	ldrh	r3, [r4, #12]
 801447a:	431d      	orrs	r5, r3
 801447c:	81a5      	strh	r5, [r4, #12]
 801447e:	e7cf      	b.n	8014420 <__smakebuf_r+0x18>

08014480 <_fstat_r>:
 8014480:	b538      	push	{r3, r4, r5, lr}
 8014482:	4d07      	ldr	r5, [pc, #28]	; (80144a0 <_fstat_r+0x20>)
 8014484:	2300      	movs	r3, #0
 8014486:	4604      	mov	r4, r0
 8014488:	4608      	mov	r0, r1
 801448a:	4611      	mov	r1, r2
 801448c:	602b      	str	r3, [r5, #0]
 801448e:	f7f4 fff1 	bl	8009474 <_fstat>
 8014492:	1c43      	adds	r3, r0, #1
 8014494:	d102      	bne.n	801449c <_fstat_r+0x1c>
 8014496:	682b      	ldr	r3, [r5, #0]
 8014498:	b103      	cbz	r3, 801449c <_fstat_r+0x1c>
 801449a:	6023      	str	r3, [r4, #0]
 801449c:	bd38      	pop	{r3, r4, r5, pc}
 801449e:	bf00      	nop
 80144a0:	20008754 	.word	0x20008754

080144a4 <_isatty_r>:
 80144a4:	b538      	push	{r3, r4, r5, lr}
 80144a6:	4d06      	ldr	r5, [pc, #24]	; (80144c0 <_isatty_r+0x1c>)
 80144a8:	2300      	movs	r3, #0
 80144aa:	4604      	mov	r4, r0
 80144ac:	4608      	mov	r0, r1
 80144ae:	602b      	str	r3, [r5, #0]
 80144b0:	f7f4 fff0 	bl	8009494 <_isatty>
 80144b4:	1c43      	adds	r3, r0, #1
 80144b6:	d102      	bne.n	80144be <_isatty_r+0x1a>
 80144b8:	682b      	ldr	r3, [r5, #0]
 80144ba:	b103      	cbz	r3, 80144be <_isatty_r+0x1a>
 80144bc:	6023      	str	r3, [r4, #0]
 80144be:	bd38      	pop	{r3, r4, r5, pc}
 80144c0:	20008754 	.word	0x20008754

080144c4 <_sbrk_r>:
 80144c4:	b538      	push	{r3, r4, r5, lr}
 80144c6:	4d06      	ldr	r5, [pc, #24]	; (80144e0 <_sbrk_r+0x1c>)
 80144c8:	2300      	movs	r3, #0
 80144ca:	4604      	mov	r4, r0
 80144cc:	4608      	mov	r0, r1
 80144ce:	602b      	str	r3, [r5, #0]
 80144d0:	f7f4 fff8 	bl	80094c4 <_sbrk>
 80144d4:	1c43      	adds	r3, r0, #1
 80144d6:	d102      	bne.n	80144de <_sbrk_r+0x1a>
 80144d8:	682b      	ldr	r3, [r5, #0]
 80144da:	b103      	cbz	r3, 80144de <_sbrk_r+0x1a>
 80144dc:	6023      	str	r3, [r4, #0]
 80144de:	bd38      	pop	{r3, r4, r5, pc}
 80144e0:	20008754 	.word	0x20008754

080144e4 <_init>:
 80144e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144e6:	bf00      	nop
 80144e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144ea:	bc08      	pop	{r3}
 80144ec:	469e      	mov	lr, r3
 80144ee:	4770      	bx	lr

080144f0 <_fini>:
 80144f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144f2:	bf00      	nop
 80144f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144f6:	bc08      	pop	{r3}
 80144f8:	469e      	mov	lr, r3
 80144fa:	4770      	bx	lr
