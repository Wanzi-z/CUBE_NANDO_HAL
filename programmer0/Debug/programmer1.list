
programmer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08022000  08022000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f48  08022190  08022190  00002190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010bc  080360d8  080360d8  000160d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037194  08037194  0002092c  2**0
                  CONTENTS
  4 .ARM          00000008  08037194  08037194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803719c  0803719c  0002092c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803719c  0803719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080371a4  080371a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000092c  20000000  080371a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002092c  2**0
                  CONTENTS
 10 .bss          00008484  20000930  20000930  00020930  2**3
                  ALLOC
 11 ._user_heap_stack 00001804  20008db4  20008db4  00020930  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002092c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002095c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021eed  00000000  00000000  0002099f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006545  00000000  00000000  0004288c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bd0  00000000  00000000  00048dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014df  00000000  00000000  0004a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029767  00000000  00000000  0004be87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000277b7  00000000  00000000  000755ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d75b5  00000000  00000000  0009cda5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008194  00000000  00000000  0017435c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0017c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08022190 <__do_global_dtors_aux>:
 8022190:	b510      	push	{r4, lr}
 8022192:	4c05      	ldr	r4, [pc, #20]	; (80221a8 <__do_global_dtors_aux+0x18>)
 8022194:	7823      	ldrb	r3, [r4, #0]
 8022196:	b933      	cbnz	r3, 80221a6 <__do_global_dtors_aux+0x16>
 8022198:	4b04      	ldr	r3, [pc, #16]	; (80221ac <__do_global_dtors_aux+0x1c>)
 802219a:	b113      	cbz	r3, 80221a2 <__do_global_dtors_aux+0x12>
 802219c:	4804      	ldr	r0, [pc, #16]	; (80221b0 <__do_global_dtors_aux+0x20>)
 802219e:	f3af 8000 	nop.w
 80221a2:	2301      	movs	r3, #1
 80221a4:	7023      	strb	r3, [r4, #0]
 80221a6:	bd10      	pop	{r4, pc}
 80221a8:	20000930 	.word	0x20000930
 80221ac:	00000000 	.word	0x00000000
 80221b0:	080360c0 	.word	0x080360c0

080221b4 <frame_dummy>:
 80221b4:	b508      	push	{r3, lr}
 80221b6:	4b03      	ldr	r3, [pc, #12]	; (80221c4 <frame_dummy+0x10>)
 80221b8:	b11b      	cbz	r3, 80221c2 <frame_dummy+0xe>
 80221ba:	4903      	ldr	r1, [pc, #12]	; (80221c8 <frame_dummy+0x14>)
 80221bc:	4803      	ldr	r0, [pc, #12]	; (80221cc <frame_dummy+0x18>)
 80221be:	f3af 8000 	nop.w
 80221c2:	bd08      	pop	{r3, pc}
 80221c4:	00000000 	.word	0x00000000
 80221c8:	20000934 	.word	0x20000934
 80221cc:	080360c0 	.word	0x080360c0

080221d0 <strlen>:
 80221d0:	4603      	mov	r3, r0
 80221d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80221d6:	2a00      	cmp	r2, #0
 80221d8:	d1fb      	bne.n	80221d2 <strlen+0x2>
 80221da:	1a18      	subs	r0, r3, r0
 80221dc:	3801      	subs	r0, #1
 80221de:	4770      	bx	lr

080221e0 <memchr>:
 80221e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80221e4:	2a10      	cmp	r2, #16
 80221e6:	db2b      	blt.n	8022240 <memchr+0x60>
 80221e8:	f010 0f07 	tst.w	r0, #7
 80221ec:	d008      	beq.n	8022200 <memchr+0x20>
 80221ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80221f2:	3a01      	subs	r2, #1
 80221f4:	428b      	cmp	r3, r1
 80221f6:	d02d      	beq.n	8022254 <memchr+0x74>
 80221f8:	f010 0f07 	tst.w	r0, #7
 80221fc:	b342      	cbz	r2, 8022250 <memchr+0x70>
 80221fe:	d1f6      	bne.n	80221ee <memchr+0xe>
 8022200:	b4f0      	push	{r4, r5, r6, r7}
 8022202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8022206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802220a:	f022 0407 	bic.w	r4, r2, #7
 802220e:	f07f 0700 	mvns.w	r7, #0
 8022212:	2300      	movs	r3, #0
 8022214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8022218:	3c08      	subs	r4, #8
 802221a:	ea85 0501 	eor.w	r5, r5, r1
 802221e:	ea86 0601 	eor.w	r6, r6, r1
 8022222:	fa85 f547 	uadd8	r5, r5, r7
 8022226:	faa3 f587 	sel	r5, r3, r7
 802222a:	fa86 f647 	uadd8	r6, r6, r7
 802222e:	faa5 f687 	sel	r6, r5, r7
 8022232:	b98e      	cbnz	r6, 8022258 <memchr+0x78>
 8022234:	d1ee      	bne.n	8022214 <memchr+0x34>
 8022236:	bcf0      	pop	{r4, r5, r6, r7}
 8022238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802223c:	f002 0207 	and.w	r2, r2, #7
 8022240:	b132      	cbz	r2, 8022250 <memchr+0x70>
 8022242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022246:	3a01      	subs	r2, #1
 8022248:	ea83 0301 	eor.w	r3, r3, r1
 802224c:	b113      	cbz	r3, 8022254 <memchr+0x74>
 802224e:	d1f8      	bne.n	8022242 <memchr+0x62>
 8022250:	2000      	movs	r0, #0
 8022252:	4770      	bx	lr
 8022254:	3801      	subs	r0, #1
 8022256:	4770      	bx	lr
 8022258:	2d00      	cmp	r5, #0
 802225a:	bf06      	itte	eq
 802225c:	4635      	moveq	r5, r6
 802225e:	3803      	subeq	r0, #3
 8022260:	3807      	subne	r0, #7
 8022262:	f015 0f01 	tst.w	r5, #1
 8022266:	d107      	bne.n	8022278 <memchr+0x98>
 8022268:	3001      	adds	r0, #1
 802226a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802226e:	bf02      	ittt	eq
 8022270:	3001      	addeq	r0, #1
 8022272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8022276:	3001      	addeq	r0, #1
 8022278:	bcf0      	pop	{r4, r5, r6, r7}
 802227a:	3801      	subs	r0, #1
 802227c:	4770      	bx	lr
 802227e:	bf00      	nop

08022280 <__aeabi_drsub>:
 8022280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8022284:	e002      	b.n	802228c <__adddf3>
 8022286:	bf00      	nop

08022288 <__aeabi_dsub>:
 8022288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802228c <__adddf3>:
 802228c:	b530      	push	{r4, r5, lr}
 802228e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8022292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8022296:	ea94 0f05 	teq	r4, r5
 802229a:	bf08      	it	eq
 802229c:	ea90 0f02 	teqeq	r0, r2
 80222a0:	bf1f      	itttt	ne
 80222a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80222a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80222aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80222ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80222b2:	f000 80e2 	beq.w	802247a <__adddf3+0x1ee>
 80222b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80222ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80222be:	bfb8      	it	lt
 80222c0:	426d      	neglt	r5, r5
 80222c2:	dd0c      	ble.n	80222de <__adddf3+0x52>
 80222c4:	442c      	add	r4, r5
 80222c6:	ea80 0202 	eor.w	r2, r0, r2
 80222ca:	ea81 0303 	eor.w	r3, r1, r3
 80222ce:	ea82 0000 	eor.w	r0, r2, r0
 80222d2:	ea83 0101 	eor.w	r1, r3, r1
 80222d6:	ea80 0202 	eor.w	r2, r0, r2
 80222da:	ea81 0303 	eor.w	r3, r1, r3
 80222de:	2d36      	cmp	r5, #54	; 0x36
 80222e0:	bf88      	it	hi
 80222e2:	bd30      	pophi	{r4, r5, pc}
 80222e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80222e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80222ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80222f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80222f4:	d002      	beq.n	80222fc <__adddf3+0x70>
 80222f6:	4240      	negs	r0, r0
 80222f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80222fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8022300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8022304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8022308:	d002      	beq.n	8022310 <__adddf3+0x84>
 802230a:	4252      	negs	r2, r2
 802230c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8022310:	ea94 0f05 	teq	r4, r5
 8022314:	f000 80a7 	beq.w	8022466 <__adddf3+0x1da>
 8022318:	f1a4 0401 	sub.w	r4, r4, #1
 802231c:	f1d5 0e20 	rsbs	lr, r5, #32
 8022320:	db0d      	blt.n	802233e <__adddf3+0xb2>
 8022322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8022326:	fa22 f205 	lsr.w	r2, r2, r5
 802232a:	1880      	adds	r0, r0, r2
 802232c:	f141 0100 	adc.w	r1, r1, #0
 8022330:	fa03 f20e 	lsl.w	r2, r3, lr
 8022334:	1880      	adds	r0, r0, r2
 8022336:	fa43 f305 	asr.w	r3, r3, r5
 802233a:	4159      	adcs	r1, r3
 802233c:	e00e      	b.n	802235c <__adddf3+0xd0>
 802233e:	f1a5 0520 	sub.w	r5, r5, #32
 8022342:	f10e 0e20 	add.w	lr, lr, #32
 8022346:	2a01      	cmp	r2, #1
 8022348:	fa03 fc0e 	lsl.w	ip, r3, lr
 802234c:	bf28      	it	cs
 802234e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8022352:	fa43 f305 	asr.w	r3, r3, r5
 8022356:	18c0      	adds	r0, r0, r3
 8022358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802235c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8022360:	d507      	bpl.n	8022372 <__adddf3+0xe6>
 8022362:	f04f 0e00 	mov.w	lr, #0
 8022366:	f1dc 0c00 	rsbs	ip, ip, #0
 802236a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802236e:	eb6e 0101 	sbc.w	r1, lr, r1
 8022372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8022376:	d31b      	bcc.n	80223b0 <__adddf3+0x124>
 8022378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802237c:	d30c      	bcc.n	8022398 <__adddf3+0x10c>
 802237e:	0849      	lsrs	r1, r1, #1
 8022380:	ea5f 0030 	movs.w	r0, r0, rrx
 8022384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8022388:	f104 0401 	add.w	r4, r4, #1
 802238c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8022390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8022394:	f080 809a 	bcs.w	80224cc <__adddf3+0x240>
 8022398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802239c:	bf08      	it	eq
 802239e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80223a2:	f150 0000 	adcs.w	r0, r0, #0
 80223a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80223aa:	ea41 0105 	orr.w	r1, r1, r5
 80223ae:	bd30      	pop	{r4, r5, pc}
 80223b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80223b4:	4140      	adcs	r0, r0
 80223b6:	eb41 0101 	adc.w	r1, r1, r1
 80223ba:	3c01      	subs	r4, #1
 80223bc:	bf28      	it	cs
 80223be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80223c2:	d2e9      	bcs.n	8022398 <__adddf3+0x10c>
 80223c4:	f091 0f00 	teq	r1, #0
 80223c8:	bf04      	itt	eq
 80223ca:	4601      	moveq	r1, r0
 80223cc:	2000      	moveq	r0, #0
 80223ce:	fab1 f381 	clz	r3, r1
 80223d2:	bf08      	it	eq
 80223d4:	3320      	addeq	r3, #32
 80223d6:	f1a3 030b 	sub.w	r3, r3, #11
 80223da:	f1b3 0220 	subs.w	r2, r3, #32
 80223de:	da0c      	bge.n	80223fa <__adddf3+0x16e>
 80223e0:	320c      	adds	r2, #12
 80223e2:	dd08      	ble.n	80223f6 <__adddf3+0x16a>
 80223e4:	f102 0c14 	add.w	ip, r2, #20
 80223e8:	f1c2 020c 	rsb	r2, r2, #12
 80223ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80223f0:	fa21 f102 	lsr.w	r1, r1, r2
 80223f4:	e00c      	b.n	8022410 <__adddf3+0x184>
 80223f6:	f102 0214 	add.w	r2, r2, #20
 80223fa:	bfd8      	it	le
 80223fc:	f1c2 0c20 	rsble	ip, r2, #32
 8022400:	fa01 f102 	lsl.w	r1, r1, r2
 8022404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8022408:	bfdc      	itt	le
 802240a:	ea41 010c 	orrle.w	r1, r1, ip
 802240e:	4090      	lslle	r0, r2
 8022410:	1ae4      	subs	r4, r4, r3
 8022412:	bfa2      	ittt	ge
 8022414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8022418:	4329      	orrge	r1, r5
 802241a:	bd30      	popge	{r4, r5, pc}
 802241c:	ea6f 0404 	mvn.w	r4, r4
 8022420:	3c1f      	subs	r4, #31
 8022422:	da1c      	bge.n	802245e <__adddf3+0x1d2>
 8022424:	340c      	adds	r4, #12
 8022426:	dc0e      	bgt.n	8022446 <__adddf3+0x1ba>
 8022428:	f104 0414 	add.w	r4, r4, #20
 802242c:	f1c4 0220 	rsb	r2, r4, #32
 8022430:	fa20 f004 	lsr.w	r0, r0, r4
 8022434:	fa01 f302 	lsl.w	r3, r1, r2
 8022438:	ea40 0003 	orr.w	r0, r0, r3
 802243c:	fa21 f304 	lsr.w	r3, r1, r4
 8022440:	ea45 0103 	orr.w	r1, r5, r3
 8022444:	bd30      	pop	{r4, r5, pc}
 8022446:	f1c4 040c 	rsb	r4, r4, #12
 802244a:	f1c4 0220 	rsb	r2, r4, #32
 802244e:	fa20 f002 	lsr.w	r0, r0, r2
 8022452:	fa01 f304 	lsl.w	r3, r1, r4
 8022456:	ea40 0003 	orr.w	r0, r0, r3
 802245a:	4629      	mov	r1, r5
 802245c:	bd30      	pop	{r4, r5, pc}
 802245e:	fa21 f004 	lsr.w	r0, r1, r4
 8022462:	4629      	mov	r1, r5
 8022464:	bd30      	pop	{r4, r5, pc}
 8022466:	f094 0f00 	teq	r4, #0
 802246a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802246e:	bf06      	itte	eq
 8022470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8022474:	3401      	addeq	r4, #1
 8022476:	3d01      	subne	r5, #1
 8022478:	e74e      	b.n	8022318 <__adddf3+0x8c>
 802247a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802247e:	bf18      	it	ne
 8022480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8022484:	d029      	beq.n	80224da <__adddf3+0x24e>
 8022486:	ea94 0f05 	teq	r4, r5
 802248a:	bf08      	it	eq
 802248c:	ea90 0f02 	teqeq	r0, r2
 8022490:	d005      	beq.n	802249e <__adddf3+0x212>
 8022492:	ea54 0c00 	orrs.w	ip, r4, r0
 8022496:	bf04      	itt	eq
 8022498:	4619      	moveq	r1, r3
 802249a:	4610      	moveq	r0, r2
 802249c:	bd30      	pop	{r4, r5, pc}
 802249e:	ea91 0f03 	teq	r1, r3
 80224a2:	bf1e      	ittt	ne
 80224a4:	2100      	movne	r1, #0
 80224a6:	2000      	movne	r0, #0
 80224a8:	bd30      	popne	{r4, r5, pc}
 80224aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80224ae:	d105      	bne.n	80224bc <__adddf3+0x230>
 80224b0:	0040      	lsls	r0, r0, #1
 80224b2:	4149      	adcs	r1, r1
 80224b4:	bf28      	it	cs
 80224b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80224ba:	bd30      	pop	{r4, r5, pc}
 80224bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80224c0:	bf3c      	itt	cc
 80224c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80224c6:	bd30      	popcc	{r4, r5, pc}
 80224c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80224cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80224d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80224d4:	f04f 0000 	mov.w	r0, #0
 80224d8:	bd30      	pop	{r4, r5, pc}
 80224da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80224de:	bf1a      	itte	ne
 80224e0:	4619      	movne	r1, r3
 80224e2:	4610      	movne	r0, r2
 80224e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80224e8:	bf1c      	itt	ne
 80224ea:	460b      	movne	r3, r1
 80224ec:	4602      	movne	r2, r0
 80224ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80224f2:	bf06      	itte	eq
 80224f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80224f8:	ea91 0f03 	teqeq	r1, r3
 80224fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8022500:	bd30      	pop	{r4, r5, pc}
 8022502:	bf00      	nop

08022504 <__aeabi_ui2d>:
 8022504:	f090 0f00 	teq	r0, #0
 8022508:	bf04      	itt	eq
 802250a:	2100      	moveq	r1, #0
 802250c:	4770      	bxeq	lr
 802250e:	b530      	push	{r4, r5, lr}
 8022510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8022514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8022518:	f04f 0500 	mov.w	r5, #0
 802251c:	f04f 0100 	mov.w	r1, #0
 8022520:	e750      	b.n	80223c4 <__adddf3+0x138>
 8022522:	bf00      	nop

08022524 <__aeabi_i2d>:
 8022524:	f090 0f00 	teq	r0, #0
 8022528:	bf04      	itt	eq
 802252a:	2100      	moveq	r1, #0
 802252c:	4770      	bxeq	lr
 802252e:	b530      	push	{r4, r5, lr}
 8022530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8022534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8022538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802253c:	bf48      	it	mi
 802253e:	4240      	negmi	r0, r0
 8022540:	f04f 0100 	mov.w	r1, #0
 8022544:	e73e      	b.n	80223c4 <__adddf3+0x138>
 8022546:	bf00      	nop

08022548 <__aeabi_f2d>:
 8022548:	0042      	lsls	r2, r0, #1
 802254a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802254e:	ea4f 0131 	mov.w	r1, r1, rrx
 8022552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8022556:	bf1f      	itttt	ne
 8022558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802255c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8022560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8022564:	4770      	bxne	lr
 8022566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802256a:	bf08      	it	eq
 802256c:	4770      	bxeq	lr
 802256e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8022572:	bf04      	itt	eq
 8022574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8022578:	4770      	bxeq	lr
 802257a:	b530      	push	{r4, r5, lr}
 802257c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8022580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8022584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8022588:	e71c      	b.n	80223c4 <__adddf3+0x138>
 802258a:	bf00      	nop

0802258c <__aeabi_ul2d>:
 802258c:	ea50 0201 	orrs.w	r2, r0, r1
 8022590:	bf08      	it	eq
 8022592:	4770      	bxeq	lr
 8022594:	b530      	push	{r4, r5, lr}
 8022596:	f04f 0500 	mov.w	r5, #0
 802259a:	e00a      	b.n	80225b2 <__aeabi_l2d+0x16>

0802259c <__aeabi_l2d>:
 802259c:	ea50 0201 	orrs.w	r2, r0, r1
 80225a0:	bf08      	it	eq
 80225a2:	4770      	bxeq	lr
 80225a4:	b530      	push	{r4, r5, lr}
 80225a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80225aa:	d502      	bpl.n	80225b2 <__aeabi_l2d+0x16>
 80225ac:	4240      	negs	r0, r0
 80225ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80225b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80225b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80225ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80225be:	f43f aed8 	beq.w	8022372 <__adddf3+0xe6>
 80225c2:	f04f 0203 	mov.w	r2, #3
 80225c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80225ca:	bf18      	it	ne
 80225cc:	3203      	addne	r2, #3
 80225ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80225d2:	bf18      	it	ne
 80225d4:	3203      	addne	r2, #3
 80225d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80225da:	f1c2 0320 	rsb	r3, r2, #32
 80225de:	fa00 fc03 	lsl.w	ip, r0, r3
 80225e2:	fa20 f002 	lsr.w	r0, r0, r2
 80225e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80225ea:	ea40 000e 	orr.w	r0, r0, lr
 80225ee:	fa21 f102 	lsr.w	r1, r1, r2
 80225f2:	4414      	add	r4, r2
 80225f4:	e6bd      	b.n	8022372 <__adddf3+0xe6>
 80225f6:	bf00      	nop

080225f8 <__aeabi_dmul>:
 80225f8:	b570      	push	{r4, r5, r6, lr}
 80225fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80225fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8022602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8022606:	bf1d      	ittte	ne
 8022608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802260c:	ea94 0f0c 	teqne	r4, ip
 8022610:	ea95 0f0c 	teqne	r5, ip
 8022614:	f000 f8de 	bleq	80227d4 <__aeabi_dmul+0x1dc>
 8022618:	442c      	add	r4, r5
 802261a:	ea81 0603 	eor.w	r6, r1, r3
 802261e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8022622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8022626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802262a:	bf18      	it	ne
 802262c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8022630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8022634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022638:	d038      	beq.n	80226ac <__aeabi_dmul+0xb4>
 802263a:	fba0 ce02 	umull	ip, lr, r0, r2
 802263e:	f04f 0500 	mov.w	r5, #0
 8022642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8022646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802264a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802264e:	f04f 0600 	mov.w	r6, #0
 8022652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8022656:	f09c 0f00 	teq	ip, #0
 802265a:	bf18      	it	ne
 802265c:	f04e 0e01 	orrne.w	lr, lr, #1
 8022660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8022664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8022668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802266c:	d204      	bcs.n	8022678 <__aeabi_dmul+0x80>
 802266e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8022672:	416d      	adcs	r5, r5
 8022674:	eb46 0606 	adc.w	r6, r6, r6
 8022678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802267c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8022680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8022684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8022688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802268c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8022690:	bf88      	it	hi
 8022692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8022696:	d81e      	bhi.n	80226d6 <__aeabi_dmul+0xde>
 8022698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802269c:	bf08      	it	eq
 802269e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80226a2:	f150 0000 	adcs.w	r0, r0, #0
 80226a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80226aa:	bd70      	pop	{r4, r5, r6, pc}
 80226ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80226b0:	ea46 0101 	orr.w	r1, r6, r1
 80226b4:	ea40 0002 	orr.w	r0, r0, r2
 80226b8:	ea81 0103 	eor.w	r1, r1, r3
 80226bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80226c0:	bfc2      	ittt	gt
 80226c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80226c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80226ca:	bd70      	popgt	{r4, r5, r6, pc}
 80226cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80226d0:	f04f 0e00 	mov.w	lr, #0
 80226d4:	3c01      	subs	r4, #1
 80226d6:	f300 80ab 	bgt.w	8022830 <__aeabi_dmul+0x238>
 80226da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80226de:	bfde      	ittt	le
 80226e0:	2000      	movle	r0, #0
 80226e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80226e6:	bd70      	pople	{r4, r5, r6, pc}
 80226e8:	f1c4 0400 	rsb	r4, r4, #0
 80226ec:	3c20      	subs	r4, #32
 80226ee:	da35      	bge.n	802275c <__aeabi_dmul+0x164>
 80226f0:	340c      	adds	r4, #12
 80226f2:	dc1b      	bgt.n	802272c <__aeabi_dmul+0x134>
 80226f4:	f104 0414 	add.w	r4, r4, #20
 80226f8:	f1c4 0520 	rsb	r5, r4, #32
 80226fc:	fa00 f305 	lsl.w	r3, r0, r5
 8022700:	fa20 f004 	lsr.w	r0, r0, r4
 8022704:	fa01 f205 	lsl.w	r2, r1, r5
 8022708:	ea40 0002 	orr.w	r0, r0, r2
 802270c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8022710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8022714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8022718:	fa21 f604 	lsr.w	r6, r1, r4
 802271c:	eb42 0106 	adc.w	r1, r2, r6
 8022720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8022724:	bf08      	it	eq
 8022726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802272a:	bd70      	pop	{r4, r5, r6, pc}
 802272c:	f1c4 040c 	rsb	r4, r4, #12
 8022730:	f1c4 0520 	rsb	r5, r4, #32
 8022734:	fa00 f304 	lsl.w	r3, r0, r4
 8022738:	fa20 f005 	lsr.w	r0, r0, r5
 802273c:	fa01 f204 	lsl.w	r2, r1, r4
 8022740:	ea40 0002 	orr.w	r0, r0, r2
 8022744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8022748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802274c:	f141 0100 	adc.w	r1, r1, #0
 8022750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8022754:	bf08      	it	eq
 8022756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802275a:	bd70      	pop	{r4, r5, r6, pc}
 802275c:	f1c4 0520 	rsb	r5, r4, #32
 8022760:	fa00 f205 	lsl.w	r2, r0, r5
 8022764:	ea4e 0e02 	orr.w	lr, lr, r2
 8022768:	fa20 f304 	lsr.w	r3, r0, r4
 802276c:	fa01 f205 	lsl.w	r2, r1, r5
 8022770:	ea43 0302 	orr.w	r3, r3, r2
 8022774:	fa21 f004 	lsr.w	r0, r1, r4
 8022778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802277c:	fa21 f204 	lsr.w	r2, r1, r4
 8022780:	ea20 0002 	bic.w	r0, r0, r2
 8022784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8022788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802278c:	bf08      	it	eq
 802278e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8022792:	bd70      	pop	{r4, r5, r6, pc}
 8022794:	f094 0f00 	teq	r4, #0
 8022798:	d10f      	bne.n	80227ba <__aeabi_dmul+0x1c2>
 802279a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802279e:	0040      	lsls	r0, r0, #1
 80227a0:	eb41 0101 	adc.w	r1, r1, r1
 80227a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80227a8:	bf08      	it	eq
 80227aa:	3c01      	subeq	r4, #1
 80227ac:	d0f7      	beq.n	802279e <__aeabi_dmul+0x1a6>
 80227ae:	ea41 0106 	orr.w	r1, r1, r6
 80227b2:	f095 0f00 	teq	r5, #0
 80227b6:	bf18      	it	ne
 80227b8:	4770      	bxne	lr
 80227ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80227be:	0052      	lsls	r2, r2, #1
 80227c0:	eb43 0303 	adc.w	r3, r3, r3
 80227c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80227c8:	bf08      	it	eq
 80227ca:	3d01      	subeq	r5, #1
 80227cc:	d0f7      	beq.n	80227be <__aeabi_dmul+0x1c6>
 80227ce:	ea43 0306 	orr.w	r3, r3, r6
 80227d2:	4770      	bx	lr
 80227d4:	ea94 0f0c 	teq	r4, ip
 80227d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80227dc:	bf18      	it	ne
 80227de:	ea95 0f0c 	teqne	r5, ip
 80227e2:	d00c      	beq.n	80227fe <__aeabi_dmul+0x206>
 80227e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80227e8:	bf18      	it	ne
 80227ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80227ee:	d1d1      	bne.n	8022794 <__aeabi_dmul+0x19c>
 80227f0:	ea81 0103 	eor.w	r1, r1, r3
 80227f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80227f8:	f04f 0000 	mov.w	r0, #0
 80227fc:	bd70      	pop	{r4, r5, r6, pc}
 80227fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8022802:	bf06      	itte	eq
 8022804:	4610      	moveq	r0, r2
 8022806:	4619      	moveq	r1, r3
 8022808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802280c:	d019      	beq.n	8022842 <__aeabi_dmul+0x24a>
 802280e:	ea94 0f0c 	teq	r4, ip
 8022812:	d102      	bne.n	802281a <__aeabi_dmul+0x222>
 8022814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8022818:	d113      	bne.n	8022842 <__aeabi_dmul+0x24a>
 802281a:	ea95 0f0c 	teq	r5, ip
 802281e:	d105      	bne.n	802282c <__aeabi_dmul+0x234>
 8022820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8022824:	bf1c      	itt	ne
 8022826:	4610      	movne	r0, r2
 8022828:	4619      	movne	r1, r3
 802282a:	d10a      	bne.n	8022842 <__aeabi_dmul+0x24a>
 802282c:	ea81 0103 	eor.w	r1, r1, r3
 8022830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8022834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8022838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802283c:	f04f 0000 	mov.w	r0, #0
 8022840:	bd70      	pop	{r4, r5, r6, pc}
 8022842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8022846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802284a:	bd70      	pop	{r4, r5, r6, pc}

0802284c <__aeabi_ddiv>:
 802284c:	b570      	push	{r4, r5, r6, lr}
 802284e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8022852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8022856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802285a:	bf1d      	ittte	ne
 802285c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8022860:	ea94 0f0c 	teqne	r4, ip
 8022864:	ea95 0f0c 	teqne	r5, ip
 8022868:	f000 f8a7 	bleq	80229ba <__aeabi_ddiv+0x16e>
 802286c:	eba4 0405 	sub.w	r4, r4, r5
 8022870:	ea81 0e03 	eor.w	lr, r1, r3
 8022874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8022878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802287c:	f000 8088 	beq.w	8022990 <__aeabi_ddiv+0x144>
 8022880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8022884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8022888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802288c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8022890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8022894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8022898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802289c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80228a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80228a4:	429d      	cmp	r5, r3
 80228a6:	bf08      	it	eq
 80228a8:	4296      	cmpeq	r6, r2
 80228aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80228ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80228b2:	d202      	bcs.n	80228ba <__aeabi_ddiv+0x6e>
 80228b4:	085b      	lsrs	r3, r3, #1
 80228b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80228ba:	1ab6      	subs	r6, r6, r2
 80228bc:	eb65 0503 	sbc.w	r5, r5, r3
 80228c0:	085b      	lsrs	r3, r3, #1
 80228c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80228c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80228ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80228ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80228d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80228d6:	bf22      	ittt	cs
 80228d8:	1ab6      	subcs	r6, r6, r2
 80228da:	4675      	movcs	r5, lr
 80228dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80228e0:	085b      	lsrs	r3, r3, #1
 80228e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80228e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80228ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80228ee:	bf22      	ittt	cs
 80228f0:	1ab6      	subcs	r6, r6, r2
 80228f2:	4675      	movcs	r5, lr
 80228f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80228f8:	085b      	lsrs	r3, r3, #1
 80228fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80228fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8022902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8022906:	bf22      	ittt	cs
 8022908:	1ab6      	subcs	r6, r6, r2
 802290a:	4675      	movcs	r5, lr
 802290c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8022910:	085b      	lsrs	r3, r3, #1
 8022912:	ea4f 0232 	mov.w	r2, r2, rrx
 8022916:	ebb6 0e02 	subs.w	lr, r6, r2
 802291a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802291e:	bf22      	ittt	cs
 8022920:	1ab6      	subcs	r6, r6, r2
 8022922:	4675      	movcs	r5, lr
 8022924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8022928:	ea55 0e06 	orrs.w	lr, r5, r6
 802292c:	d018      	beq.n	8022960 <__aeabi_ddiv+0x114>
 802292e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8022932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8022936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802293a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802293e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8022942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8022946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802294a:	d1c0      	bne.n	80228ce <__aeabi_ddiv+0x82>
 802294c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8022950:	d10b      	bne.n	802296a <__aeabi_ddiv+0x11e>
 8022952:	ea41 0100 	orr.w	r1, r1, r0
 8022956:	f04f 0000 	mov.w	r0, #0
 802295a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802295e:	e7b6      	b.n	80228ce <__aeabi_ddiv+0x82>
 8022960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8022964:	bf04      	itt	eq
 8022966:	4301      	orreq	r1, r0
 8022968:	2000      	moveq	r0, #0
 802296a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802296e:	bf88      	it	hi
 8022970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8022974:	f63f aeaf 	bhi.w	80226d6 <__aeabi_dmul+0xde>
 8022978:	ebb5 0c03 	subs.w	ip, r5, r3
 802297c:	bf04      	itt	eq
 802297e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8022982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8022986:	f150 0000 	adcs.w	r0, r0, #0
 802298a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802298e:	bd70      	pop	{r4, r5, r6, pc}
 8022990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8022994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8022998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802299c:	bfc2      	ittt	gt
 802299e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80229a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80229a6:	bd70      	popgt	{r4, r5, r6, pc}
 80229a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80229ac:	f04f 0e00 	mov.w	lr, #0
 80229b0:	3c01      	subs	r4, #1
 80229b2:	e690      	b.n	80226d6 <__aeabi_dmul+0xde>
 80229b4:	ea45 0e06 	orr.w	lr, r5, r6
 80229b8:	e68d      	b.n	80226d6 <__aeabi_dmul+0xde>
 80229ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80229be:	ea94 0f0c 	teq	r4, ip
 80229c2:	bf08      	it	eq
 80229c4:	ea95 0f0c 	teqeq	r5, ip
 80229c8:	f43f af3b 	beq.w	8022842 <__aeabi_dmul+0x24a>
 80229cc:	ea94 0f0c 	teq	r4, ip
 80229d0:	d10a      	bne.n	80229e8 <__aeabi_ddiv+0x19c>
 80229d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80229d6:	f47f af34 	bne.w	8022842 <__aeabi_dmul+0x24a>
 80229da:	ea95 0f0c 	teq	r5, ip
 80229de:	f47f af25 	bne.w	802282c <__aeabi_dmul+0x234>
 80229e2:	4610      	mov	r0, r2
 80229e4:	4619      	mov	r1, r3
 80229e6:	e72c      	b.n	8022842 <__aeabi_dmul+0x24a>
 80229e8:	ea95 0f0c 	teq	r5, ip
 80229ec:	d106      	bne.n	80229fc <__aeabi_ddiv+0x1b0>
 80229ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80229f2:	f43f aefd 	beq.w	80227f0 <__aeabi_dmul+0x1f8>
 80229f6:	4610      	mov	r0, r2
 80229f8:	4619      	mov	r1, r3
 80229fa:	e722      	b.n	8022842 <__aeabi_dmul+0x24a>
 80229fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8022a00:	bf18      	it	ne
 8022a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8022a06:	f47f aec5 	bne.w	8022794 <__aeabi_dmul+0x19c>
 8022a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8022a0e:	f47f af0d 	bne.w	802282c <__aeabi_dmul+0x234>
 8022a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8022a16:	f47f aeeb 	bne.w	80227f0 <__aeabi_dmul+0x1f8>
 8022a1a:	e712      	b.n	8022842 <__aeabi_dmul+0x24a>

08022a1c <__gedf2>:
 8022a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8022a20:	e006      	b.n	8022a30 <__cmpdf2+0x4>
 8022a22:	bf00      	nop

08022a24 <__ledf2>:
 8022a24:	f04f 0c01 	mov.w	ip, #1
 8022a28:	e002      	b.n	8022a30 <__cmpdf2+0x4>
 8022a2a:	bf00      	nop

08022a2c <__cmpdf2>:
 8022a2c:	f04f 0c01 	mov.w	ip, #1
 8022a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8022a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8022a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8022a40:	bf18      	it	ne
 8022a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8022a46:	d01b      	beq.n	8022a80 <__cmpdf2+0x54>
 8022a48:	b001      	add	sp, #4
 8022a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8022a4e:	bf0c      	ite	eq
 8022a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8022a54:	ea91 0f03 	teqne	r1, r3
 8022a58:	bf02      	ittt	eq
 8022a5a:	ea90 0f02 	teqeq	r0, r2
 8022a5e:	2000      	moveq	r0, #0
 8022a60:	4770      	bxeq	lr
 8022a62:	f110 0f00 	cmn.w	r0, #0
 8022a66:	ea91 0f03 	teq	r1, r3
 8022a6a:	bf58      	it	pl
 8022a6c:	4299      	cmppl	r1, r3
 8022a6e:	bf08      	it	eq
 8022a70:	4290      	cmpeq	r0, r2
 8022a72:	bf2c      	ite	cs
 8022a74:	17d8      	asrcs	r0, r3, #31
 8022a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8022a7a:	f040 0001 	orr.w	r0, r0, #1
 8022a7e:	4770      	bx	lr
 8022a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8022a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022a88:	d102      	bne.n	8022a90 <__cmpdf2+0x64>
 8022a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8022a8e:	d107      	bne.n	8022aa0 <__cmpdf2+0x74>
 8022a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8022a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022a98:	d1d6      	bne.n	8022a48 <__cmpdf2+0x1c>
 8022a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8022a9e:	d0d3      	beq.n	8022a48 <__cmpdf2+0x1c>
 8022aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8022aa4:	4770      	bx	lr
 8022aa6:	bf00      	nop

08022aa8 <__aeabi_cdrcmple>:
 8022aa8:	4684      	mov	ip, r0
 8022aaa:	4610      	mov	r0, r2
 8022aac:	4662      	mov	r2, ip
 8022aae:	468c      	mov	ip, r1
 8022ab0:	4619      	mov	r1, r3
 8022ab2:	4663      	mov	r3, ip
 8022ab4:	e000      	b.n	8022ab8 <__aeabi_cdcmpeq>
 8022ab6:	bf00      	nop

08022ab8 <__aeabi_cdcmpeq>:
 8022ab8:	b501      	push	{r0, lr}
 8022aba:	f7ff ffb7 	bl	8022a2c <__cmpdf2>
 8022abe:	2800      	cmp	r0, #0
 8022ac0:	bf48      	it	mi
 8022ac2:	f110 0f00 	cmnmi.w	r0, #0
 8022ac6:	bd01      	pop	{r0, pc}

08022ac8 <__aeabi_dcmpeq>:
 8022ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022acc:	f7ff fff4 	bl	8022ab8 <__aeabi_cdcmpeq>
 8022ad0:	bf0c      	ite	eq
 8022ad2:	2001      	moveq	r0, #1
 8022ad4:	2000      	movne	r0, #0
 8022ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8022ada:	bf00      	nop

08022adc <__aeabi_dcmplt>:
 8022adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022ae0:	f7ff ffea 	bl	8022ab8 <__aeabi_cdcmpeq>
 8022ae4:	bf34      	ite	cc
 8022ae6:	2001      	movcc	r0, #1
 8022ae8:	2000      	movcs	r0, #0
 8022aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8022aee:	bf00      	nop

08022af0 <__aeabi_dcmple>:
 8022af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022af4:	f7ff ffe0 	bl	8022ab8 <__aeabi_cdcmpeq>
 8022af8:	bf94      	ite	ls
 8022afa:	2001      	movls	r0, #1
 8022afc:	2000      	movhi	r0, #0
 8022afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8022b02:	bf00      	nop

08022b04 <__aeabi_dcmpge>:
 8022b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022b08:	f7ff ffce 	bl	8022aa8 <__aeabi_cdrcmple>
 8022b0c:	bf94      	ite	ls
 8022b0e:	2001      	movls	r0, #1
 8022b10:	2000      	movhi	r0, #0
 8022b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8022b16:	bf00      	nop

08022b18 <__aeabi_dcmpgt>:
 8022b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022b1c:	f7ff ffc4 	bl	8022aa8 <__aeabi_cdrcmple>
 8022b20:	bf34      	ite	cc
 8022b22:	2001      	movcc	r0, #1
 8022b24:	2000      	movcs	r0, #0
 8022b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8022b2a:	bf00      	nop

08022b2c <__aeabi_dcmpun>:
 8022b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8022b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022b34:	d102      	bne.n	8022b3c <__aeabi_dcmpun+0x10>
 8022b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8022b3a:	d10a      	bne.n	8022b52 <__aeabi_dcmpun+0x26>
 8022b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8022b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022b44:	d102      	bne.n	8022b4c <__aeabi_dcmpun+0x20>
 8022b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8022b4a:	d102      	bne.n	8022b52 <__aeabi_dcmpun+0x26>
 8022b4c:	f04f 0000 	mov.w	r0, #0
 8022b50:	4770      	bx	lr
 8022b52:	f04f 0001 	mov.w	r0, #1
 8022b56:	4770      	bx	lr

08022b58 <__aeabi_d2iz>:
 8022b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8022b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8022b60:	d215      	bcs.n	8022b8e <__aeabi_d2iz+0x36>
 8022b62:	d511      	bpl.n	8022b88 <__aeabi_d2iz+0x30>
 8022b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8022b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8022b6c:	d912      	bls.n	8022b94 <__aeabi_d2iz+0x3c>
 8022b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8022b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8022b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8022b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8022b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8022b82:	bf18      	it	ne
 8022b84:	4240      	negne	r0, r0
 8022b86:	4770      	bx	lr
 8022b88:	f04f 0000 	mov.w	r0, #0
 8022b8c:	4770      	bx	lr
 8022b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8022b92:	d105      	bne.n	8022ba0 <__aeabi_d2iz+0x48>
 8022b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8022b98:	bf08      	it	eq
 8022b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8022b9e:	4770      	bx	lr
 8022ba0:	f04f 0000 	mov.w	r0, #0
 8022ba4:	4770      	bx	lr
 8022ba6:	bf00      	nop

08022ba8 <__aeabi_uldivmod>:
 8022ba8:	b953      	cbnz	r3, 8022bc0 <__aeabi_uldivmod+0x18>
 8022baa:	b94a      	cbnz	r2, 8022bc0 <__aeabi_uldivmod+0x18>
 8022bac:	2900      	cmp	r1, #0
 8022bae:	bf08      	it	eq
 8022bb0:	2800      	cmpeq	r0, #0
 8022bb2:	bf1c      	itt	ne
 8022bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8022bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8022bbc:	f000 b970 	b.w	8022ea0 <__aeabi_idiv0>
 8022bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8022bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8022bc8:	f000 f806 	bl	8022bd8 <__udivmoddi4>
 8022bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8022bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022bd4:	b004      	add	sp, #16
 8022bd6:	4770      	bx	lr

08022bd8 <__udivmoddi4>:
 8022bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022bdc:	9e08      	ldr	r6, [sp, #32]
 8022bde:	460d      	mov	r5, r1
 8022be0:	4604      	mov	r4, r0
 8022be2:	460f      	mov	r7, r1
 8022be4:	2b00      	cmp	r3, #0
 8022be6:	d14a      	bne.n	8022c7e <__udivmoddi4+0xa6>
 8022be8:	428a      	cmp	r2, r1
 8022bea:	4694      	mov	ip, r2
 8022bec:	d965      	bls.n	8022cba <__udivmoddi4+0xe2>
 8022bee:	fab2 f382 	clz	r3, r2
 8022bf2:	b143      	cbz	r3, 8022c06 <__udivmoddi4+0x2e>
 8022bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8022bf8:	f1c3 0220 	rsb	r2, r3, #32
 8022bfc:	409f      	lsls	r7, r3
 8022bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8022c02:	4317      	orrs	r7, r2
 8022c04:	409c      	lsls	r4, r3
 8022c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8022c0a:	fa1f f58c 	uxth.w	r5, ip
 8022c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8022c12:	0c22      	lsrs	r2, r4, #16
 8022c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8022c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8022c1c:	fb01 f005 	mul.w	r0, r1, r5
 8022c20:	4290      	cmp	r0, r2
 8022c22:	d90a      	bls.n	8022c3a <__udivmoddi4+0x62>
 8022c24:	eb1c 0202 	adds.w	r2, ip, r2
 8022c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8022c2c:	f080 811c 	bcs.w	8022e68 <__udivmoddi4+0x290>
 8022c30:	4290      	cmp	r0, r2
 8022c32:	f240 8119 	bls.w	8022e68 <__udivmoddi4+0x290>
 8022c36:	3902      	subs	r1, #2
 8022c38:	4462      	add	r2, ip
 8022c3a:	1a12      	subs	r2, r2, r0
 8022c3c:	b2a4      	uxth	r4, r4
 8022c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8022c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8022c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022c4a:	fb00 f505 	mul.w	r5, r0, r5
 8022c4e:	42a5      	cmp	r5, r4
 8022c50:	d90a      	bls.n	8022c68 <__udivmoddi4+0x90>
 8022c52:	eb1c 0404 	adds.w	r4, ip, r4
 8022c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8022c5a:	f080 8107 	bcs.w	8022e6c <__udivmoddi4+0x294>
 8022c5e:	42a5      	cmp	r5, r4
 8022c60:	f240 8104 	bls.w	8022e6c <__udivmoddi4+0x294>
 8022c64:	4464      	add	r4, ip
 8022c66:	3802      	subs	r0, #2
 8022c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8022c6c:	1b64      	subs	r4, r4, r5
 8022c6e:	2100      	movs	r1, #0
 8022c70:	b11e      	cbz	r6, 8022c7a <__udivmoddi4+0xa2>
 8022c72:	40dc      	lsrs	r4, r3
 8022c74:	2300      	movs	r3, #0
 8022c76:	e9c6 4300 	strd	r4, r3, [r6]
 8022c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c7e:	428b      	cmp	r3, r1
 8022c80:	d908      	bls.n	8022c94 <__udivmoddi4+0xbc>
 8022c82:	2e00      	cmp	r6, #0
 8022c84:	f000 80ed 	beq.w	8022e62 <__udivmoddi4+0x28a>
 8022c88:	2100      	movs	r1, #0
 8022c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8022c8e:	4608      	mov	r0, r1
 8022c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c94:	fab3 f183 	clz	r1, r3
 8022c98:	2900      	cmp	r1, #0
 8022c9a:	d149      	bne.n	8022d30 <__udivmoddi4+0x158>
 8022c9c:	42ab      	cmp	r3, r5
 8022c9e:	d302      	bcc.n	8022ca6 <__udivmoddi4+0xce>
 8022ca0:	4282      	cmp	r2, r0
 8022ca2:	f200 80f8 	bhi.w	8022e96 <__udivmoddi4+0x2be>
 8022ca6:	1a84      	subs	r4, r0, r2
 8022ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8022cac:	2001      	movs	r0, #1
 8022cae:	4617      	mov	r7, r2
 8022cb0:	2e00      	cmp	r6, #0
 8022cb2:	d0e2      	beq.n	8022c7a <__udivmoddi4+0xa2>
 8022cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8022cb8:	e7df      	b.n	8022c7a <__udivmoddi4+0xa2>
 8022cba:	b902      	cbnz	r2, 8022cbe <__udivmoddi4+0xe6>
 8022cbc:	deff      	udf	#255	; 0xff
 8022cbe:	fab2 f382 	clz	r3, r2
 8022cc2:	2b00      	cmp	r3, #0
 8022cc4:	f040 8090 	bne.w	8022de8 <__udivmoddi4+0x210>
 8022cc8:	1a8a      	subs	r2, r1, r2
 8022cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8022cce:	fa1f fe8c 	uxth.w	lr, ip
 8022cd2:	2101      	movs	r1, #1
 8022cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8022cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8022cdc:	0c22      	lsrs	r2, r4, #16
 8022cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8022ce2:	fb0e f005 	mul.w	r0, lr, r5
 8022ce6:	4290      	cmp	r0, r2
 8022ce8:	d908      	bls.n	8022cfc <__udivmoddi4+0x124>
 8022cea:	eb1c 0202 	adds.w	r2, ip, r2
 8022cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8022cf2:	d202      	bcs.n	8022cfa <__udivmoddi4+0x122>
 8022cf4:	4290      	cmp	r0, r2
 8022cf6:	f200 80cb 	bhi.w	8022e90 <__udivmoddi4+0x2b8>
 8022cfa:	4645      	mov	r5, r8
 8022cfc:	1a12      	subs	r2, r2, r0
 8022cfe:	b2a4      	uxth	r4, r4
 8022d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8022d04:	fb07 2210 	mls	r2, r7, r0, r2
 8022d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8022d10:	45a6      	cmp	lr, r4
 8022d12:	d908      	bls.n	8022d26 <__udivmoddi4+0x14e>
 8022d14:	eb1c 0404 	adds.w	r4, ip, r4
 8022d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8022d1c:	d202      	bcs.n	8022d24 <__udivmoddi4+0x14c>
 8022d1e:	45a6      	cmp	lr, r4
 8022d20:	f200 80bb 	bhi.w	8022e9a <__udivmoddi4+0x2c2>
 8022d24:	4610      	mov	r0, r2
 8022d26:	eba4 040e 	sub.w	r4, r4, lr
 8022d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8022d2e:	e79f      	b.n	8022c70 <__udivmoddi4+0x98>
 8022d30:	f1c1 0720 	rsb	r7, r1, #32
 8022d34:	408b      	lsls	r3, r1
 8022d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8022d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8022d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8022d42:	fa20 f307 	lsr.w	r3, r0, r7
 8022d46:	40fd      	lsrs	r5, r7
 8022d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8022d4c:	4323      	orrs	r3, r4
 8022d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8022d52:	fa1f fe8c 	uxth.w	lr, ip
 8022d56:	fb09 5518 	mls	r5, r9, r8, r5
 8022d5a:	0c1c      	lsrs	r4, r3, #16
 8022d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8022d60:	fb08 f50e 	mul.w	r5, r8, lr
 8022d64:	42a5      	cmp	r5, r4
 8022d66:	fa02 f201 	lsl.w	r2, r2, r1
 8022d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8022d6e:	d90b      	bls.n	8022d88 <__udivmoddi4+0x1b0>
 8022d70:	eb1c 0404 	adds.w	r4, ip, r4
 8022d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8022d78:	f080 8088 	bcs.w	8022e8c <__udivmoddi4+0x2b4>
 8022d7c:	42a5      	cmp	r5, r4
 8022d7e:	f240 8085 	bls.w	8022e8c <__udivmoddi4+0x2b4>
 8022d82:	f1a8 0802 	sub.w	r8, r8, #2
 8022d86:	4464      	add	r4, ip
 8022d88:	1b64      	subs	r4, r4, r5
 8022d8a:	b29d      	uxth	r5, r3
 8022d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8022d90:	fb09 4413 	mls	r4, r9, r3, r4
 8022d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8022d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8022d9c:	45a6      	cmp	lr, r4
 8022d9e:	d908      	bls.n	8022db2 <__udivmoddi4+0x1da>
 8022da0:	eb1c 0404 	adds.w	r4, ip, r4
 8022da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8022da8:	d26c      	bcs.n	8022e84 <__udivmoddi4+0x2ac>
 8022daa:	45a6      	cmp	lr, r4
 8022dac:	d96a      	bls.n	8022e84 <__udivmoddi4+0x2ac>
 8022dae:	3b02      	subs	r3, #2
 8022db0:	4464      	add	r4, ip
 8022db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8022db6:	fba3 9502 	umull	r9, r5, r3, r2
 8022dba:	eba4 040e 	sub.w	r4, r4, lr
 8022dbe:	42ac      	cmp	r4, r5
 8022dc0:	46c8      	mov	r8, r9
 8022dc2:	46ae      	mov	lr, r5
 8022dc4:	d356      	bcc.n	8022e74 <__udivmoddi4+0x29c>
 8022dc6:	d053      	beq.n	8022e70 <__udivmoddi4+0x298>
 8022dc8:	b156      	cbz	r6, 8022de0 <__udivmoddi4+0x208>
 8022dca:	ebb0 0208 	subs.w	r2, r0, r8
 8022dce:	eb64 040e 	sbc.w	r4, r4, lr
 8022dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8022dd6:	40ca      	lsrs	r2, r1
 8022dd8:	40cc      	lsrs	r4, r1
 8022dda:	4317      	orrs	r7, r2
 8022ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8022de0:	4618      	mov	r0, r3
 8022de2:	2100      	movs	r1, #0
 8022de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022de8:	f1c3 0120 	rsb	r1, r3, #32
 8022dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8022df0:	fa20 f201 	lsr.w	r2, r0, r1
 8022df4:	fa25 f101 	lsr.w	r1, r5, r1
 8022df8:	409d      	lsls	r5, r3
 8022dfa:	432a      	orrs	r2, r5
 8022dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8022e00:	fa1f fe8c 	uxth.w	lr, ip
 8022e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8022e08:	fb07 1510 	mls	r5, r7, r0, r1
 8022e0c:	0c11      	lsrs	r1, r2, #16
 8022e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8022e12:	fb00 f50e 	mul.w	r5, r0, lr
 8022e16:	428d      	cmp	r5, r1
 8022e18:	fa04 f403 	lsl.w	r4, r4, r3
 8022e1c:	d908      	bls.n	8022e30 <__udivmoddi4+0x258>
 8022e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8022e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8022e26:	d22f      	bcs.n	8022e88 <__udivmoddi4+0x2b0>
 8022e28:	428d      	cmp	r5, r1
 8022e2a:	d92d      	bls.n	8022e88 <__udivmoddi4+0x2b0>
 8022e2c:	3802      	subs	r0, #2
 8022e2e:	4461      	add	r1, ip
 8022e30:	1b49      	subs	r1, r1, r5
 8022e32:	b292      	uxth	r2, r2
 8022e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8022e38:	fb07 1115 	mls	r1, r7, r5, r1
 8022e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8022e40:	fb05 f10e 	mul.w	r1, r5, lr
 8022e44:	4291      	cmp	r1, r2
 8022e46:	d908      	bls.n	8022e5a <__udivmoddi4+0x282>
 8022e48:	eb1c 0202 	adds.w	r2, ip, r2
 8022e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8022e50:	d216      	bcs.n	8022e80 <__udivmoddi4+0x2a8>
 8022e52:	4291      	cmp	r1, r2
 8022e54:	d914      	bls.n	8022e80 <__udivmoddi4+0x2a8>
 8022e56:	3d02      	subs	r5, #2
 8022e58:	4462      	add	r2, ip
 8022e5a:	1a52      	subs	r2, r2, r1
 8022e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8022e60:	e738      	b.n	8022cd4 <__udivmoddi4+0xfc>
 8022e62:	4631      	mov	r1, r6
 8022e64:	4630      	mov	r0, r6
 8022e66:	e708      	b.n	8022c7a <__udivmoddi4+0xa2>
 8022e68:	4639      	mov	r1, r7
 8022e6a:	e6e6      	b.n	8022c3a <__udivmoddi4+0x62>
 8022e6c:	4610      	mov	r0, r2
 8022e6e:	e6fb      	b.n	8022c68 <__udivmoddi4+0x90>
 8022e70:	4548      	cmp	r0, r9
 8022e72:	d2a9      	bcs.n	8022dc8 <__udivmoddi4+0x1f0>
 8022e74:	ebb9 0802 	subs.w	r8, r9, r2
 8022e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8022e7c:	3b01      	subs	r3, #1
 8022e7e:	e7a3      	b.n	8022dc8 <__udivmoddi4+0x1f0>
 8022e80:	4645      	mov	r5, r8
 8022e82:	e7ea      	b.n	8022e5a <__udivmoddi4+0x282>
 8022e84:	462b      	mov	r3, r5
 8022e86:	e794      	b.n	8022db2 <__udivmoddi4+0x1da>
 8022e88:	4640      	mov	r0, r8
 8022e8a:	e7d1      	b.n	8022e30 <__udivmoddi4+0x258>
 8022e8c:	46d0      	mov	r8, sl
 8022e8e:	e77b      	b.n	8022d88 <__udivmoddi4+0x1b0>
 8022e90:	3d02      	subs	r5, #2
 8022e92:	4462      	add	r2, ip
 8022e94:	e732      	b.n	8022cfc <__udivmoddi4+0x124>
 8022e96:	4608      	mov	r0, r1
 8022e98:	e70a      	b.n	8022cb0 <__udivmoddi4+0xd8>
 8022e9a:	4464      	add	r4, ip
 8022e9c:	3802      	subs	r0, #2
 8022e9e:	e742      	b.n	8022d26 <__udivmoddi4+0x14e>

08022ea0 <__aeabi_idiv0>:
 8022ea0:	4770      	bx	lr
 8022ea2:	bf00      	nop

08022ea4 <cdc_send>:
#include "cdc_endp.h"

#define SEND_TIMEOUT 0x1000000          // 发送超时时间

static int cdc_send(uint8_t *data, uint32_t len)
{
 8022ea4:	b580      	push	{r7, lr}
 8022ea6:	b084      	sub	sp, #16
 8022ea8:	af00      	add	r7, sp, #0
 8022eaa:	6078      	str	r0, [r7, #4]
 8022eac:	6039      	str	r1, [r7, #0]
    uint32_t timeout = SEND_TIMEOUT;
 8022eae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8022eb2:	60fb      	str	r3, [r7, #12]

    if (!CDC_IsPacketSent())              // 如果之前的CDC发送未完成
 8022eb4:	f000 f98e 	bl	80231d4 <CDC_IsPacketSent>
 8022eb8:	4603      	mov	r3, r0
 8022eba:	2b00      	cmp	r3, #0
 8022ebc:	d117      	bne.n	8022eee <cdc_send+0x4a>
    {
        DEBUG_PRINT("Wait for previous CDC TX\r\n");  // 打印调试信息，等待上一次CDC发送完成
 8022ebe:	4816      	ldr	r0, [pc, #88]	; (8022f18 <cdc_send+0x74>)
 8022ec0:	f00e fc62 	bl	8031788 <puts>
        while (!CDC_IsPacketSent() && --timeout);    // 等待CDC发送完成，或者超时
 8022ec4:	bf00      	nop
 8022ec6:	f000 f985 	bl	80231d4 <CDC_IsPacketSent>
 8022eca:	4603      	mov	r3, r0
 8022ecc:	2b00      	cmp	r3, #0
 8022ece:	d105      	bne.n	8022edc <cdc_send+0x38>
 8022ed0:	68fb      	ldr	r3, [r7, #12]
 8022ed2:	3b01      	subs	r3, #1
 8022ed4:	60fb      	str	r3, [r7, #12]
 8022ed6:	68fb      	ldr	r3, [r7, #12]
 8022ed8:	2b00      	cmp	r3, #0
 8022eda:	d1f4      	bne.n	8022ec6 <cdc_send+0x22>
        if (!timeout)
 8022edc:	68fb      	ldr	r3, [r7, #12]
 8022ede:	2b00      	cmp	r3, #0
 8022ee0:	d105      	bne.n	8022eee <cdc_send+0x4a>
        {
            ERROR_PRINT("Failed to send data, CDC is busy\r\n");   // 打印错误信息，发送超时，CDC忙碌
 8022ee2:	480e      	ldr	r0, [pc, #56]	; (8022f1c <cdc_send+0x78>)
 8022ee4:	f00e fc50 	bl	8031788 <puts>
            return -1;                                          // 返回错误代码
 8022ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8022eec:	e00f      	b.n	8022f0e <cdc_send+0x6a>
        }
    }

    if (!CDC_Send_DATA(data, len))                              // 发送数据
 8022eee:	683b      	ldr	r3, [r7, #0]
 8022ef0:	b2db      	uxtb	r3, r3
 8022ef2:	4619      	mov	r1, r3
 8022ef4:	6878      	ldr	r0, [r7, #4]
 8022ef6:	f000 f941 	bl	802317c <CDC_Send_DATA>
 8022efa:	4603      	mov	r3, r0
 8022efc:	2b00      	cmp	r3, #0
 8022efe:	d105      	bne.n	8022f0c <cdc_send+0x68>
    {
        ERROR_PRINT("Failed to send data\r\n");                  // 打印错误信息，发送数据失败
 8022f00:	4807      	ldr	r0, [pc, #28]	; (8022f20 <cdc_send+0x7c>)
 8022f02:	f00e fc41 	bl	8031788 <puts>
        return -1;                                              // 返回错误代码
 8022f06:	f04f 33ff 	mov.w	r3, #4294967295
 8022f0a:	e000      	b.n	8022f0e <cdc_send+0x6a>
    }

    return 0;                                                   // 返回成功代码
 8022f0c:	2300      	movs	r3, #0
}
 8022f0e:	4618      	mov	r0, r3
 8022f10:	3710      	adds	r7, #16
 8022f12:	46bd      	mov	sp, r7
 8022f14:	bd80      	pop	{r7, pc}
 8022f16:	bf00      	nop
 8022f18:	080360d8 	.word	0x080360d8
 8022f1c:	080360f4 	.word	0x080360f4
 8022f20:	08036120 	.word	0x08036120

08022f24 <cdc_send_ready>:

static int cdc_send_ready()
{
 8022f24:	b580      	push	{r7, lr}
 8022f26:	af00      	add	r7, sp, #0
    return CDC_IsPacketSent();                                  // 返回CDC是否可发送数据的状态
 8022f28:	f000 f954 	bl	80231d4 <CDC_IsPacketSent>
 8022f2c:	4603      	mov	r3, r0
}
 8022f2e:	4618      	mov	r0, r3
 8022f30:	bd80      	pop	{r7, pc}

08022f32 <cdc_peek>:

static uint32_t cdc_peek(uint8_t **data)
{
 8022f32:	b580      	push	{r7, lr}
 8022f34:	b082      	sub	sp, #8
 8022f36:	af00      	add	r7, sp, #0
 8022f38:	6078      	str	r0, [r7, #4]
    return USB_Data_Peek(data);                                 // 查看USB数据
 8022f3a:	6878      	ldr	r0, [r7, #4]
 8022f3c:	f000 f82a 	bl	8022f94 <USB_Data_Peek>
 8022f40:	4603      	mov	r3, r0
}
 8022f42:	4618      	mov	r0, r3
 8022f44:	3708      	adds	r7, #8
 8022f46:	46bd      	mov	sp, r7
 8022f48:	bd80      	pop	{r7, pc}

08022f4a <cdc_consume>:

static void cdc_consume()
{
 8022f4a:	b580      	push	{r7, lr}
 8022f4c:	b082      	sub	sp, #8
 8022f4e:	af00      	add	r7, sp, #0
    uint8_t *data;

    USB_Data_Get(&data);                                        // 获取USB数据
 8022f50:	1d3b      	adds	r3, r7, #4
 8022f52:	4618      	mov	r0, r3
 8022f54:	f000 f84e 	bl	8022ff4 <USB_Data_Get>
    USB_DataRx_Sched();                                         // 调度USB数据接收
 8022f58:	f000 f8ac 	bl	80230b4 <USB_DataRx_Sched>
}
 8022f5c:	bf00      	nop
 8022f5e:	3708      	adds	r7, #8
 8022f60:	46bd      	mov	sp, r7
 8022f62:	bd80      	pop	{r7, pc}

08022f64 <cdc_init>:
    .peek = cdc_peek,
    .consume = cdc_consume,
};

void cdc_init()
{
 8022f64:	b580      	push	{r7, lr}
 8022f66:	af00      	add	r7, sp, #0
    np_comm_register(&cdc_comm_cb);                             // 注册CDC通信回调函数
 8022f68:	4803      	ldr	r0, [pc, #12]	; (8022f78 <cdc_init+0x14>)
 8022f6a:	f003 fc79 	bl	8026860 <np_comm_register>

    /* Enable receive of data */
    CDC_Receive_DATA();                                         // 启用数据接收
 8022f6e:	f000 f927 	bl	80231c0 <CDC_Receive_DATA>
}
 8022f72:	bf00      	nop
 8022f74:	bd80      	pop	{r7, pc}
 8022f76:	bf00      	nop
 8022f78:	20000000 	.word	0x20000000

08022f7c <EP1_IN_Callback>:
* Output         : None.
* Return         : None.
*******************************************************************************/

void EP1_IN_Callback ()
{
 8022f7c:	b480      	push	{r7}
 8022f7e:	af00      	add	r7, sp, #0
  packet_sent = 1;
 8022f80:	4b03      	ldr	r3, [pc, #12]	; (8022f90 <EP1_IN_Callback+0x14>)
 8022f82:	2201      	movs	r2, #1
 8022f84:	601a      	str	r2, [r3, #0]
}
 8022f86:	bf00      	nop
 8022f88:	46bd      	mov	sp, r7
 8022f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f8e:	4770      	bx	lr
 8022f90:	20000014 	.word	0x20000014

08022f94 <USB_Data_Peek>:

static packet_t circ_buf[CIRC_BUF_SIZE];
static volatile uint8_t head, size, tail = CIRC_BUF_SIZE - 1;

uint32_t USB_Data_Peek(uint8_t **data)
{
 8022f94:	b480      	push	{r7}
 8022f96:	b083      	sub	sp, #12
 8022f98:	af00      	add	r7, sp, #0
 8022f9a:	6078      	str	r0, [r7, #4]
  if (!size)
 8022f9c:	4b12      	ldr	r3, [pc, #72]	; (8022fe8 <USB_Data_Peek+0x54>)
 8022f9e:	781b      	ldrb	r3, [r3, #0]
 8022fa0:	b2db      	uxtb	r3, r3
 8022fa2:	2b00      	cmp	r3, #0
 8022fa4:	d101      	bne.n	8022faa <USB_Data_Peek+0x16>
    return 0;
 8022fa6:	2300      	movs	r3, #0
 8022fa8:	e017      	b.n	8022fda <USB_Data_Peek+0x46>

  *data = circ_buf[head].pbuf;
 8022faa:	4b10      	ldr	r3, [pc, #64]	; (8022fec <USB_Data_Peek+0x58>)
 8022fac:	781b      	ldrb	r3, [r3, #0]
 8022fae:	b2db      	uxtb	r3, r3
 8022fb0:	461a      	mov	r2, r3
 8022fb2:	4613      	mov	r3, r2
 8022fb4:	011b      	lsls	r3, r3, #4
 8022fb6:	4413      	add	r3, r2
 8022fb8:	009b      	lsls	r3, r3, #2
 8022fba:	4a0d      	ldr	r2, [pc, #52]	; (8022ff0 <USB_Data_Peek+0x5c>)
 8022fbc:	441a      	add	r2, r3
 8022fbe:	687b      	ldr	r3, [r7, #4]
 8022fc0:	601a      	str	r2, [r3, #0]

  return circ_buf[head].len;
 8022fc2:	4b0a      	ldr	r3, [pc, #40]	; (8022fec <USB_Data_Peek+0x58>)
 8022fc4:	781b      	ldrb	r3, [r3, #0]
 8022fc6:	b2db      	uxtb	r3, r3
 8022fc8:	4619      	mov	r1, r3
 8022fca:	4a09      	ldr	r2, [pc, #36]	; (8022ff0 <USB_Data_Peek+0x5c>)
 8022fcc:	460b      	mov	r3, r1
 8022fce:	011b      	lsls	r3, r3, #4
 8022fd0:	440b      	add	r3, r1
 8022fd2:	009b      	lsls	r3, r3, #2
 8022fd4:	4413      	add	r3, r2
 8022fd6:	3340      	adds	r3, #64	; 0x40
 8022fd8:	681b      	ldr	r3, [r3, #0]
}
 8022fda:	4618      	mov	r0, r3
 8022fdc:	370c      	adds	r7, #12
 8022fde:	46bd      	mov	sp, r7
 8022fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fe4:	4770      	bx	lr
 8022fe6:	bf00      	nop
 8022fe8:	20001259 	.word	0x20001259
 8022fec:	20001258 	.word	0x20001258
 8022ff0:	20000950 	.word	0x20000950

08022ff4 <USB_Data_Get>:

uint32_t USB_Data_Get(uint8_t **data)
{
 8022ff4:	b480      	push	{r7}
 8022ff6:	b085      	sub	sp, #20
 8022ff8:	af00      	add	r7, sp, #0
 8022ffa:	6078      	str	r0, [r7, #4]
  uint32_t len;

  if (!size)
 8022ffc:	4b21      	ldr	r3, [pc, #132]	; (8023084 <USB_Data_Get+0x90>)
 8022ffe:	781b      	ldrb	r3, [r3, #0]
 8023000:	b2db      	uxtb	r3, r3
 8023002:	2b00      	cmp	r3, #0
 8023004:	d101      	bne.n	802300a <USB_Data_Get+0x16>
    return 0;
 8023006:	2300      	movs	r3, #0
 8023008:	e036      	b.n	8023078 <USB_Data_Get+0x84>

  *data = circ_buf[head].pbuf;
 802300a:	4b1f      	ldr	r3, [pc, #124]	; (8023088 <USB_Data_Get+0x94>)
 802300c:	781b      	ldrb	r3, [r3, #0]
 802300e:	b2db      	uxtb	r3, r3
 8023010:	461a      	mov	r2, r3
 8023012:	4613      	mov	r3, r2
 8023014:	011b      	lsls	r3, r3, #4
 8023016:	4413      	add	r3, r2
 8023018:	009b      	lsls	r3, r3, #2
 802301a:	4a1c      	ldr	r2, [pc, #112]	; (802308c <USB_Data_Get+0x98>)
 802301c:	441a      	add	r2, r3
 802301e:	687b      	ldr	r3, [r7, #4]
 8023020:	601a      	str	r2, [r3, #0]
  len = circ_buf[head].len;
 8023022:	4b19      	ldr	r3, [pc, #100]	; (8023088 <USB_Data_Get+0x94>)
 8023024:	781b      	ldrb	r3, [r3, #0]
 8023026:	b2db      	uxtb	r3, r3
 8023028:	4619      	mov	r1, r3
 802302a:	4a18      	ldr	r2, [pc, #96]	; (802308c <USB_Data_Get+0x98>)
 802302c:	460b      	mov	r3, r1
 802302e:	011b      	lsls	r3, r3, #4
 8023030:	440b      	add	r3, r1
 8023032:	009b      	lsls	r3, r3, #2
 8023034:	4413      	add	r3, r2
 8023036:	3340      	adds	r3, #64	; 0x40
 8023038:	681b      	ldr	r3, [r3, #0]
 802303a:	60fb      	str	r3, [r7, #12]
  head = (head + 1) % CIRC_BUF_SIZE;
 802303c:	4b12      	ldr	r3, [pc, #72]	; (8023088 <USB_Data_Get+0x94>)
 802303e:	781b      	ldrb	r3, [r3, #0]
 8023040:	b2db      	uxtb	r3, r3
 8023042:	1c5a      	adds	r2, r3, #1
 8023044:	4b12      	ldr	r3, [pc, #72]	; (8023090 <USB_Data_Get+0x9c>)
 8023046:	fb83 1302 	smull	r1, r3, r3, r2
 802304a:	1119      	asrs	r1, r3, #4
 802304c:	17d3      	asrs	r3, r2, #31
 802304e:	1ac9      	subs	r1, r1, r3
 8023050:	460b      	mov	r3, r1
 8023052:	011b      	lsls	r3, r3, #4
 8023054:	440b      	add	r3, r1
 8023056:	005b      	lsls	r3, r3, #1
 8023058:	1ad1      	subs	r1, r2, r3
 802305a:	b2ca      	uxtb	r2, r1
 802305c:	4b0a      	ldr	r3, [pc, #40]	; (8023088 <USB_Data_Get+0x94>)
 802305e:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8023060:	b672      	cpsid	i
}
 8023062:	bf00      	nop
  __disable_irq();
  size--;
 8023064:	4b07      	ldr	r3, [pc, #28]	; (8023084 <USB_Data_Get+0x90>)
 8023066:	781b      	ldrb	r3, [r3, #0]
 8023068:	b2db      	uxtb	r3, r3
 802306a:	3b01      	subs	r3, #1
 802306c:	b2da      	uxtb	r2, r3
 802306e:	4b05      	ldr	r3, [pc, #20]	; (8023084 <USB_Data_Get+0x90>)
 8023070:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8023072:	b662      	cpsie	i
}
 8023074:	bf00      	nop
  __enable_irq();

  return len;
 8023076:	68fb      	ldr	r3, [r7, #12]
}
 8023078:	4618      	mov	r0, r3
 802307a:	3714      	adds	r7, #20
 802307c:	46bd      	mov	sp, r7
 802307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023082:	4770      	bx	lr
 8023084:	20001259 	.word	0x20001259
 8023088:	20001258 	.word	0x20001258
 802308c:	20000950 	.word	0x20000950
 8023090:	78787879 	.word	0x78787879

08023094 <USB_DataRx_Sched_Internal>:

static inline void USB_DataRx_Sched_Internal(void)
{
 8023094:	b580      	push	{r7, lr}
 8023096:	af00      	add	r7, sp, #0
  if (size < CIRC_BUF_SIZE)
 8023098:	4b04      	ldr	r3, [pc, #16]	; (80230ac <USB_DataRx_Sched_Internal+0x18>)
 802309a:	781b      	ldrb	r3, [r3, #0]
 802309c:	b2db      	uxtb	r3, r3
 802309e:	2b21      	cmp	r3, #33	; 0x21
 80230a0:	d802      	bhi.n	80230a8 <USB_DataRx_Sched_Internal+0x14>
//	  USBD_CtlReceiveStatus(&hUsbDeviceHS);
	  USBD_CtlReceiveStatus(&hUsbDeviceFS);
 80230a2:	4803      	ldr	r0, [pc, #12]	; (80230b0 <USB_DataRx_Sched_Internal+0x1c>)
 80230a4:	f00d fac7 	bl	8030636 <USBD_CtlReceiveStatus>
}
 80230a8:	bf00      	nop
 80230aa:	bd80      	pop	{r7, pc}
 80230ac:	20001259 	.word	0x20001259
 80230b0:	20005b54 	.word	0x20005b54

080230b4 <USB_DataRx_Sched>:

void USB_DataRx_Sched(void)
{
 80230b4:	b580      	push	{r7, lr}
 80230b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80230b8:	b672      	cpsid	i
}
 80230ba:	bf00      	nop
  __disable_irq();
  USB_DataRx_Sched_Internal();
 80230bc:	f7ff ffea 	bl	8023094 <USB_DataRx_Sched_Internal>
  __ASM volatile ("cpsie i" : : : "memory");
 80230c0:	b662      	cpsie	i
}
 80230c2:	bf00      	nop
  __enable_irq();
}
 80230c4:	bf00      	nop
 80230c6:	bd80      	pop	{r7, pc}

080230c8 <EP3_OUT_Callback>:

void EP3_OUT_Callback(uint8_t **Buf, uint32_t *Len)
{
 80230c8:	b580      	push	{r7, lr}
 80230ca:	b082      	sub	sp, #8
 80230cc:	af00      	add	r7, sp, #0
 80230ce:	6078      	str	r0, [r7, #4]
 80230d0:	6039      	str	r1, [r7, #0]
//	Receive_length = USBD_GetRxCount(&hUsbDeviceHS, CDC_OUT_EP);
	Receive_length = USBD_GetRxCount(&hUsbDeviceFS, CDC_OUT_EP);
 80230d2:	2101      	movs	r1, #1
 80230d4:	4823      	ldr	r0, [pc, #140]	; (8023164 <EP3_OUT_Callback+0x9c>)
 80230d6:	f00d fac1 	bl	803065c <USBD_GetRxCount>
 80230da:	4603      	mov	r3, r0
 80230dc:	4a22      	ldr	r2, [pc, #136]	; (8023168 <EP3_OUT_Callback+0xa0>)
 80230de:	6013      	str	r3, [r2, #0]
    if (size < CIRC_BUF_SIZE)
 80230e0:	4b22      	ldr	r3, [pc, #136]	; (802316c <EP3_OUT_Callback+0xa4>)
 80230e2:	781b      	ldrb	r3, [r3, #0]
 80230e4:	b2db      	uxtb	r3, r3
 80230e6:	2b21      	cmp	r3, #33	; 0x21
 80230e8:	d838      	bhi.n	802315c <EP3_OUT_Callback+0x94>
    {
        tail = (tail + 1) % CIRC_BUF_SIZE;
 80230ea:	4b21      	ldr	r3, [pc, #132]	; (8023170 <EP3_OUT_Callback+0xa8>)
 80230ec:	781b      	ldrb	r3, [r3, #0]
 80230ee:	b2db      	uxtb	r3, r3
 80230f0:	1c5a      	adds	r2, r3, #1
 80230f2:	4b20      	ldr	r3, [pc, #128]	; (8023174 <EP3_OUT_Callback+0xac>)
 80230f4:	fb83 1302 	smull	r1, r3, r3, r2
 80230f8:	1119      	asrs	r1, r3, #4
 80230fa:	17d3      	asrs	r3, r2, #31
 80230fc:	1ac9      	subs	r1, r1, r3
 80230fe:	460b      	mov	r3, r1
 8023100:	011b      	lsls	r3, r3, #4
 8023102:	440b      	add	r3, r1
 8023104:	005b      	lsls	r3, r3, #1
 8023106:	1ad1      	subs	r1, r2, r3
 8023108:	b2ca      	uxtb	r2, r1
 802310a:	4b19      	ldr	r3, [pc, #100]	; (8023170 <EP3_OUT_Callback+0xa8>)
 802310c:	701a      	strb	r2, [r3, #0]
        memcpy(circ_buf[tail].pbuf, Buf, Receive_length);
 802310e:	4b18      	ldr	r3, [pc, #96]	; (8023170 <EP3_OUT_Callback+0xa8>)
 8023110:	781b      	ldrb	r3, [r3, #0]
 8023112:	b2db      	uxtb	r3, r3
 8023114:	461a      	mov	r2, r3
 8023116:	4613      	mov	r3, r2
 8023118:	011b      	lsls	r3, r3, #4
 802311a:	4413      	add	r3, r2
 802311c:	009b      	lsls	r3, r3, #2
 802311e:	4a16      	ldr	r2, [pc, #88]	; (8023178 <EP3_OUT_Callback+0xb0>)
 8023120:	4413      	add	r3, r2
 8023122:	4a11      	ldr	r2, [pc, #68]	; (8023168 <EP3_OUT_Callback+0xa0>)
 8023124:	6812      	ldr	r2, [r2, #0]
 8023126:	6879      	ldr	r1, [r7, #4]
 8023128:	4618      	mov	r0, r3
 802312a:	f00e fbf5 	bl	8031918 <memcpy>
        circ_buf[tail].len = Receive_length;
 802312e:	4b10      	ldr	r3, [pc, #64]	; (8023170 <EP3_OUT_Callback+0xa8>)
 8023130:	781b      	ldrb	r3, [r3, #0]
 8023132:	b2db      	uxtb	r3, r3
 8023134:	4618      	mov	r0, r3
 8023136:	4b0c      	ldr	r3, [pc, #48]	; (8023168 <EP3_OUT_Callback+0xa0>)
 8023138:	681a      	ldr	r2, [r3, #0]
 802313a:	490f      	ldr	r1, [pc, #60]	; (8023178 <EP3_OUT_Callback+0xb0>)
 802313c:	4603      	mov	r3, r0
 802313e:	011b      	lsls	r3, r3, #4
 8023140:	4403      	add	r3, r0
 8023142:	009b      	lsls	r3, r3, #2
 8023144:	440b      	add	r3, r1
 8023146:	3340      	adds	r3, #64	; 0x40
 8023148:	601a      	str	r2, [r3, #0]
        size++;
 802314a:	4b08      	ldr	r3, [pc, #32]	; (802316c <EP3_OUT_Callback+0xa4>)
 802314c:	781b      	ldrb	r3, [r3, #0]
 802314e:	b2db      	uxtb	r3, r3
 8023150:	3301      	adds	r3, #1
 8023152:	b2da      	uxtb	r2, r3
 8023154:	4b05      	ldr	r3, [pc, #20]	; (802316c <EP3_OUT_Callback+0xa4>)
 8023156:	701a      	strb	r2, [r3, #0]
        USB_DataRx_Sched_Internal();
 8023158:	f7ff ff9c 	bl	8023094 <USB_DataRx_Sched_Internal>
    }
}
 802315c:	bf00      	nop
 802315e:	3708      	adds	r7, #8
 8023160:	46bd      	mov	sp, r7
 8023162:	bd80      	pop	{r7, pc}
 8023164:	20005b54 	.word	0x20005b54
 8023168:	2000094c 	.word	0x2000094c
 802316c:	20001259 	.word	0x20001259
 8023170:	20000010 	.word	0x20000010
 8023174:	78787879 	.word	0x78787879
 8023178:	20000950 	.word	0x20000950

0802317c <CDC_Send_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Send_DATA (uint8_t *ptrBuffer, uint8_t Send_length)
{
 802317c:	b580      	push	{r7, lr}
 802317e:	b082      	sub	sp, #8
 8023180:	af00      	add	r7, sp, #0
 8023182:	6078      	str	r0, [r7, #4]
 8023184:	460b      	mov	r3, r1
 8023186:	70fb      	strb	r3, [r7, #3]
  /*if max buffer is Not reached*/
  if(Send_length <= CDC_DATA_FS_MAX_PACKET_SIZE)
 8023188:	78fb      	ldrb	r3, [r7, #3]
 802318a:	2b40      	cmp	r3, #64	; 0x40
 802318c:	d80f      	bhi.n	80231ae <CDC_Send_DATA+0x32>
  {
	/*Sent flag*/
	packet_sent = 0;
 802318e:	4b0a      	ldr	r3, [pc, #40]	; (80231b8 <CDC_Send_DATA+0x3c>)
 8023190:	2200      	movs	r2, #0
 8023192:	601a      	str	r2, [r3, #0]
	/* send  packet to PMA*/
//    CDC_Transmit_HS((unsigned char*)ptrBuffer, Send_length);
    CDC_Transmit_FS((unsigned char*)ptrBuffer, Send_length);
 8023194:	78fb      	ldrb	r3, [r7, #3]
 8023196:	b29b      	uxth	r3, r3
 8023198:	4619      	mov	r1, r3
 802319a:	6878      	ldr	r0, [r7, #4]
 802319c:	f00d fb5c 	bl	8030858 <CDC_Transmit_FS>
    DEBUG_PRINT("CDC_Send_DATA: %ld\r\n", Send_length);
 80231a0:	78fb      	ldrb	r3, [r7, #3]
 80231a2:	4619      	mov	r1, r3
 80231a4:	4805      	ldr	r0, [pc, #20]	; (80231bc <CDC_Send_DATA+0x40>)
 80231a6:	f00e fa97 	bl	80316d8 <printf>
  }
  else
  {
    return 0;
  }
  return 1;
 80231aa:	2301      	movs	r3, #1
 80231ac:	e000      	b.n	80231b0 <CDC_Send_DATA+0x34>
    return 0;
 80231ae:	2300      	movs	r3, #0
}
 80231b0:	4618      	mov	r0, r3
 80231b2:	3708      	adds	r7, #8
 80231b4:	46bd      	mov	sp, r7
 80231b6:	bd80      	pop	{r7, pc}
 80231b8:	20000014 	.word	0x20000014
 80231bc:	0803613c 	.word	0x0803613c

080231c0 <CDC_Receive_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Receive_DATA(void)
{
 80231c0:	b580      	push	{r7, lr}
 80231c2:	af00      	add	r7, sp, #0
//  USBD_CtlReceiveStatus(&hUsbDeviceHS);
    USBD_CtlReceiveStatus(&hUsbDeviceFS);
 80231c4:	4802      	ldr	r0, [pc, #8]	; (80231d0 <CDC_Receive_DATA+0x10>)
 80231c6:	f00d fa36 	bl	8030636 <USBD_CtlReceiveStatus>
  return 1 ;
 80231ca:	2301      	movs	r3, #1
}
 80231cc:	4618      	mov	r0, r3
 80231ce:	bd80      	pop	{r7, pc}
 80231d0:	20005b54 	.word	0x20005b54

080231d4 <CDC_IsPacketSent>:
* Input          : None.
* Output         : None.
* Return         : 1/0.
*******************************************************************************/
int CDC_IsPacketSent(void)
{
 80231d4:	b480      	push	{r7}
 80231d6:	af00      	add	r7, sp, #0
  return packet_sent;
 80231d8:	4b03      	ldr	r3, [pc, #12]	; (80231e8 <CDC_IsPacketSent+0x14>)
 80231da:	681b      	ldr	r3, [r3, #0]
}
 80231dc:	4618      	mov	r0, r3
 80231de:	46bd      	mov	sp, r7
 80231e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231e4:	4770      	bx	lr
 80231e6:	bf00      	nop
 80231e8:	20000014 	.word	0x20000014

080231ec <is_external_clock_avail>:
 */

#include "clock.h"
#include <stm32f4xx.h>

bool is_external_clock_avail() {
 80231ec:	b480      	push	{r7}
 80231ee:	af00      	add	r7, sp, #0
	return (RCC->CR & RCC_CR_HSERDY_Msk) != RESET;
 80231f0:	4b06      	ldr	r3, [pc, #24]	; (802320c <is_external_clock_avail+0x20>)
 80231f2:	681b      	ldr	r3, [r3, #0]
 80231f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80231f8:	2b00      	cmp	r3, #0
 80231fa:	bf14      	ite	ne
 80231fc:	2301      	movne	r3, #1
 80231fe:	2300      	moveq	r3, #0
 8023200:	b2db      	uxtb	r3, r3
}
 8023202:	4618      	mov	r0, r3
 8023204:	46bd      	mov	sp, r7
 8023206:	f85d 7b04 	ldr.w	r7, [sp], #4
 802320a:	4770      	bx	lr
 802320c:	40023800 	.word	0x40023800

08023210 <flash_page_erase>:
#include "stm32f4xx_hal.h"
#include <string.h>

// 擦除指定页的Flash存储器
int flash_page_erase(uint32_t page_addr)
{
 8023210:	b580      	push	{r7, lr}
 8023212:	b088      	sub	sp, #32
 8023214:	af00      	add	r7, sp, #0
 8023216:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef erase_init;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 8023218:	f005 f88a 	bl	8028330 <HAL_FLASH_Unlock>

    // 配置擦除初始化结构体
    erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 802321c:	2300      	movs	r3, #0
 802321e:	60bb      	str	r3, [r7, #8]
    erase_init.Sector = FLASH_SECTOR_0; // 选择要擦除的扇区，可以根据您的需求更改
 8023220:	2300      	movs	r3, #0
 8023222:	613b      	str	r3, [r7, #16]
    erase_init.NbSectors = 1; // 要擦除的扇区数量
 8023224:	2301      	movs	r3, #1
 8023226:	617b      	str	r3, [r7, #20]
    erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3; // 选择电压范围，可以根据您的需求更改
 8023228:	2302      	movs	r3, #2
 802322a:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&erase_init, NULL); // 擦除指定页
 802322c:	f107 0308 	add.w	r3, r7, #8
 8023230:	2100      	movs	r1, #0
 8023232:	4618      	mov	r0, r3
 8023234:	f005 f9de 	bl	80285f4 <HAL_FLASHEx_Erase>
 8023238:	4603      	mov	r3, r0
 802323a:	77fb      	strb	r3, [r7, #31]

    // 锁定Flash存储器
    HAL_FLASH_Lock();
 802323c:	f005 f89a 	bl	8028374 <HAL_FLASH_Lock>

    return status != HAL_OK ? -1 : 0;
 8023240:	7ffb      	ldrb	r3, [r7, #31]
 8023242:	2b00      	cmp	r3, #0
 8023244:	d002      	beq.n	802324c <flash_page_erase+0x3c>
 8023246:	f04f 33ff 	mov.w	r3, #4294967295
 802324a:	e000      	b.n	802324e <flash_page_erase+0x3e>
 802324c:	2300      	movs	r3, #0
}
 802324e:	4618      	mov	r0, r3
 8023250:	3720      	adds	r7, #32
 8023252:	46bd      	mov	sp, r7
 8023254:	bd80      	pop	{r7, pc}

08023256 <flash_write>:

// 向Flash存储器写入数据
int flash_write(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 8023256:	b5b0      	push	{r4, r5, r7, lr}
 8023258:	b088      	sub	sp, #32
 802325a:	af00      	add	r7, sp, #0
 802325c:	60f8      	str	r0, [r7, #12]
 802325e:	60b9      	str	r1, [r7, #8]
 8023260:	607a      	str	r2, [r7, #4]
    int ret = -1;
 8023262:	f04f 33ff 	mov.w	r3, #4294967295
 8023266:	61fb      	str	r3, [r7, #28]
    uint32_t data_word;
    uint32_t i;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 8023268:	f005 f862 	bl	8028330 <HAL_FLASH_Unlock>

    for (i = 0; i < data_len; i += 4)
 802326c:	2300      	movs	r3, #0
 802326e:	61bb      	str	r3, [r7, #24]
 8023270:	e017      	b.n	80232a2 <flash_write+0x4c>
    {
        // 从数据缓冲区中读取32位字
        memcpy(&data_word, &data[i], 4);
 8023272:	68ba      	ldr	r2, [r7, #8]
 8023274:	69bb      	ldr	r3, [r7, #24]
 8023276:	4413      	add	r3, r2
 8023278:	681b      	ldr	r3, [r3, #0]
 802327a:	617b      	str	r3, [r7, #20]

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data_word) != HAL_OK)
 802327c:	697b      	ldr	r3, [r7, #20]
 802327e:	2200      	movs	r2, #0
 8023280:	461c      	mov	r4, r3
 8023282:	4615      	mov	r5, r2
 8023284:	4622      	mov	r2, r4
 8023286:	462b      	mov	r3, r5
 8023288:	68f9      	ldr	r1, [r7, #12]
 802328a:	2002      	movs	r0, #2
 802328c:	f004 ff48 	bl	8028120 <HAL_FLASH_Program>
 8023290:	4603      	mov	r3, r0
 8023292:	2b00      	cmp	r3, #0
 8023294:	d10c      	bne.n	80232b0 <flash_write+0x5a>
            goto Exit;

        addr += 4; // 更新地址，指向下一个32位字
 8023296:	68fb      	ldr	r3, [r7, #12]
 8023298:	3304      	adds	r3, #4
 802329a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < data_len; i += 4)
 802329c:	69bb      	ldr	r3, [r7, #24]
 802329e:	3304      	adds	r3, #4
 80232a0:	61bb      	str	r3, [r7, #24]
 80232a2:	69ba      	ldr	r2, [r7, #24]
 80232a4:	687b      	ldr	r3, [r7, #4]
 80232a6:	429a      	cmp	r2, r3
 80232a8:	d3e3      	bcc.n	8023272 <flash_write+0x1c>
    }

    ret = data_len;
 80232aa:	687b      	ldr	r3, [r7, #4]
 80232ac:	61fb      	str	r3, [r7, #28]
 80232ae:	e000      	b.n	80232b2 <flash_write+0x5c>
            goto Exit;
 80232b0:	bf00      	nop
Exit:
    // 锁定Flash存储器
    HAL_FLASH_Lock();
 80232b2:	f005 f85f 	bl	8028374 <HAL_FLASH_Lock>

    return ret;
 80232b6:	69fb      	ldr	r3, [r7, #28]
}
 80232b8:	4618      	mov	r0, r3
 80232ba:	3720      	adds	r7, #32
 80232bc:	46bd      	mov	sp, r7
 80232be:	bdb0      	pop	{r4, r5, r7, pc}

080232c0 <flash_read>:

// 从Flash存储器读取数据
int flash_read(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 80232c0:	b480      	push	{r7}
 80232c2:	b087      	sub	sp, #28
 80232c4:	af00      	add	r7, sp, #0
 80232c6:	60f8      	str	r0, [r7, #12]
 80232c8:	60b9      	str	r1, [r7, #8]
 80232ca:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for (i = 0; i < data_len; i++)
 80232cc:	2300      	movs	r3, #0
 80232ce:	617b      	str	r3, [r7, #20]
 80232d0:	e00c      	b.n	80232ec <flash_read+0x2c>
    {
        data[i] = *(__IO uint8_t *)(addr + i); // 从Flash存储器中读取字节数据
 80232d2:	68fa      	ldr	r2, [r7, #12]
 80232d4:	697b      	ldr	r3, [r7, #20]
 80232d6:	4413      	add	r3, r2
 80232d8:	4619      	mov	r1, r3
 80232da:	68ba      	ldr	r2, [r7, #8]
 80232dc:	697b      	ldr	r3, [r7, #20]
 80232de:	4413      	add	r3, r2
 80232e0:	780a      	ldrb	r2, [r1, #0]
 80232e2:	b2d2      	uxtb	r2, r2
 80232e4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_len; i++)
 80232e6:	697b      	ldr	r3, [r7, #20]
 80232e8:	3301      	adds	r3, #1
 80232ea:	617b      	str	r3, [r7, #20]
 80232ec:	697a      	ldr	r2, [r7, #20]
 80232ee:	687b      	ldr	r3, [r7, #4]
 80232f0:	429a      	cmp	r2, r3
 80232f2:	d3ee      	bcc.n	80232d2 <flash_read+0x12>
    }

    return i;
 80232f4:	697b      	ldr	r3, [r7, #20]
}
 80232f6:	4618      	mov	r0, r3
 80232f8:	371c      	adds	r7, #28
 80232fa:	46bd      	mov	sp, r7
 80232fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023300:	4770      	bx	lr
	...

08023304 <HAL_FSMC_MspInit>:
  /* USER CODE END FSMC_Init 2 */
}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8023304:	b580      	push	{r7, lr}
 8023306:	b086      	sub	sp, #24
 8023308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802330a:	1d3b      	adds	r3, r7, #4
 802330c:	2200      	movs	r2, #0
 802330e:	601a      	str	r2, [r3, #0]
 8023310:	605a      	str	r2, [r3, #4]
 8023312:	609a      	str	r2, [r3, #8]
 8023314:	60da      	str	r2, [r3, #12]
 8023316:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8023318:	4b20      	ldr	r3, [pc, #128]	; (802339c <HAL_FSMC_MspInit+0x98>)
 802331a:	681b      	ldr	r3, [r3, #0]
 802331c:	2b00      	cmp	r3, #0
 802331e:	d139      	bne.n	8023394 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8023320:	4b1e      	ldr	r3, [pc, #120]	; (802339c <HAL_FSMC_MspInit+0x98>)
 8023322:	2201      	movs	r2, #1
 8023324:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8023326:	2300      	movs	r3, #0
 8023328:	603b      	str	r3, [r7, #0]
 802332a:	4b1d      	ldr	r3, [pc, #116]	; (80233a0 <HAL_FSMC_MspInit+0x9c>)
 802332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802332e:	4a1c      	ldr	r2, [pc, #112]	; (80233a0 <HAL_FSMC_MspInit+0x9c>)
 8023330:	f043 0301 	orr.w	r3, r3, #1
 8023334:	6393      	str	r3, [r2, #56]	; 0x38
 8023336:	4b1a      	ldr	r3, [pc, #104]	; (80233a0 <HAL_FSMC_MspInit+0x9c>)
 8023338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802333a:	f003 0301 	and.w	r3, r3, #1
 802333e:	603b      	str	r3, [r7, #0]
 8023340:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8023342:	f64f 7380 	movw	r3, #65408	; 0xff80
 8023346:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023348:	2302      	movs	r3, #2
 802334a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802334c:	2300      	movs	r3, #0
 802334e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023350:	2303      	movs	r3, #3
 8023352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8023354:	230c      	movs	r3, #12
 8023356:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8023358:	1d3b      	adds	r3, r7, #4
 802335a:	4619      	mov	r1, r3
 802335c:	4811      	ldr	r0, [pc, #68]	; (80233a4 <HAL_FSMC_MspInit+0xa0>)
 802335e:	f005 fa6b 	bl	8028838 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8023362:	f64d 73f3 	movw	r3, #57331	; 0xdff3
 8023366:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023368:	2302      	movs	r3, #2
 802336a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802336c:	2300      	movs	r3, #0
 802336e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023370:	2303      	movs	r3, #3
 8023372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8023374:	230c      	movs	r3, #12
 8023376:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023378:	1d3b      	adds	r3, r7, #4
 802337a:	4619      	mov	r1, r3
 802337c:	480a      	ldr	r0, [pc, #40]	; (80233a8 <HAL_FSMC_MspInit+0xa4>)
 802337e:	f005 fa5b 	bl	8028838 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8023382:	2200      	movs	r2, #0
 8023384:	2100      	movs	r1, #0
 8023386:	2030      	movs	r0, #48	; 0x30
 8023388:	f004 fdf3 	bl	8027f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 802338c:	2030      	movs	r0, #48	; 0x30
 802338e:	f004 fe0c 	bl	8027faa <HAL_NVIC_EnableIRQ>
 8023392:	e000      	b.n	8023396 <HAL_FSMC_MspInit+0x92>
    return;
 8023394:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8023396:	3718      	adds	r7, #24
 8023398:	46bd      	mov	sp, r7
 802339a:	bd80      	pop	{r7, pc}
 802339c:	2000129c 	.word	0x2000129c
 80233a0:	40023800 	.word	0x40023800
 80233a4:	40021000 	.word	0x40021000
 80233a8:	40020c00 	.word	0x40020c00

080233ac <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 80233ac:	b580      	push	{r7, lr}
 80233ae:	b082      	sub	sp, #8
 80233b0:	af00      	add	r7, sp, #0
 80233b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 80233b4:	f7ff ffa6 	bl	8023304 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80233b8:	bf00      	nop
 80233ba:	3708      	adds	r7, #8
 80233bc:	46bd      	mov	sp, r7
 80233be:	bd80      	pop	{r7, pc}

080233c0 <nand_gpio_init>:
static fsmc_conf_t fsmc_conf;   // FSMC NAND Flash的配置结构体

static uint32_t FSMC_Initialized = 0;

static void nand_gpio_init(void)
{
 80233c0:	b580      	push	{r7, lr}
 80233c2:	b086      	sub	sp, #24
 80233c4:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN FSMC_MspInit 0 */

	  /* USER CODE END FSMC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80233c6:	1d3b      	adds	r3, r7, #4
 80233c8:	2200      	movs	r2, #0
 80233ca:	601a      	str	r2, [r3, #0]
 80233cc:	605a      	str	r2, [r3, #4]
 80233ce:	609a      	str	r2, [r3, #8]
 80233d0:	60da      	str	r2, [r3, #12]
 80233d2:	611a      	str	r2, [r3, #16]
	  if (FSMC_Initialized) {
 80233d4:	4b20      	ldr	r3, [pc, #128]	; (8023458 <nand_gpio_init+0x98>)
 80233d6:	681b      	ldr	r3, [r3, #0]
 80233d8:	2b00      	cmp	r3, #0
 80233da:	d139      	bne.n	8023450 <nand_gpio_init+0x90>
	    return;
	  }
	  FSMC_Initialized = 1;
 80233dc:	4b1e      	ldr	r3, [pc, #120]	; (8023458 <nand_gpio_init+0x98>)
 80233de:	2201      	movs	r2, #1
 80233e0:	601a      	str	r2, [r3, #0]

	  /* Peripheral clock enable */
	  __HAL_RCC_FSMC_CLK_ENABLE();
 80233e2:	2300      	movs	r3, #0
 80233e4:	603b      	str	r3, [r7, #0]
 80233e6:	4b1d      	ldr	r3, [pc, #116]	; (802345c <nand_gpio_init+0x9c>)
 80233e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80233ea:	4a1c      	ldr	r2, [pc, #112]	; (802345c <nand_gpio_init+0x9c>)
 80233ec:	f043 0301 	orr.w	r3, r3, #1
 80233f0:	6393      	str	r3, [r2, #56]	; 0x38
 80233f2:	4b1a      	ldr	r3, [pc, #104]	; (802345c <nand_gpio_init+0x9c>)
 80233f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80233f6:	f003 0301 	and.w	r3, r3, #1
 80233fa:	603b      	str	r3, [r7, #0]
 80233fc:	683b      	ldr	r3, [r7, #0]
	  PD5   ------> FSMC_NWE
	  PD6   ------> FSMC_NWAIT
	  PD7   ------> FSMC_NCE2
	  */
	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80233fe:	f64f 7380 	movw	r3, #65408	; 0xff80
 8023402:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023404:	2302      	movs	r3, #2
 8023406:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023408:	2300      	movs	r3, #0
 802340a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802340c:	2303      	movs	r3, #3
 802340e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8023410:	230c      	movs	r3, #12
 8023412:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8023414:	1d3b      	adds	r3, r7, #4
 8023416:	4619      	mov	r1, r3
 8023418:	4811      	ldr	r0, [pc, #68]	; (8023460 <nand_gpio_init+0xa0>)
 802341a:	f005 fa0d 	bl	8028838 <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 802341e:	f64d 73f3 	movw	r3, #57331	; 0xdff3
 8023422:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
	                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                          |GPIO_PIN_7;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023424:	2302      	movs	r3, #2
 8023426:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023428:	2300      	movs	r3, #0
 802342a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802342c:	2303      	movs	r3, #3
 802342e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8023430:	230c      	movs	r3, #12
 8023432:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023434:	1d3b      	adds	r3, r7, #4
 8023436:	4619      	mov	r1, r3
 8023438:	480a      	ldr	r0, [pc, #40]	; (8023464 <nand_gpio_init+0xa4>)
 802343a:	f005 f9fd 	bl	8028838 <HAL_GPIO_Init>

	  /* Peripheral interrupt init */
	  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 802343e:	2200      	movs	r2, #0
 8023440:	2100      	movs	r1, #0
 8023442:	2030      	movs	r0, #48	; 0x30
 8023444:	f004 fd95 	bl	8027f72 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8023448:	2030      	movs	r0, #48	; 0x30
 802344a:	f004 fdae 	bl	8027faa <HAL_NVIC_EnableIRQ>
 802344e:	e000      	b.n	8023452 <nand_gpio_init+0x92>
	    return;
 8023450:	bf00      	nop
	  /* USER CODE BEGIN FSMC_MspInit 1 */

	  /* USER CODE END FSMC_MspInit 1 */
}
 8023452:	3718      	adds	r7, #24
 8023454:	46bd      	mov	sp, r7
 8023456:	bd80      	pop	{r7, pc}
 8023458:	200012b8 	.word	0x200012b8
 802345c:	40023800 	.word	0x40023800
 8023460:	40021000 	.word	0x40021000
 8023464:	40020c00 	.word	0x40020c00

08023468 <nand_fsmc_init>:


static void nand_fsmc_init()
{
 8023468:	b580      	push	{r7, lr}
 802346a:	b08a      	sub	sp, #40	; 0x28
 802346c:	af00      	add	r7, sp, #0
//    FSMC_NAND_InitTypeDef fsmc_init;

//    FSMC_NAND_PCC_TimingTypeDef timing_init;
    FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 802346e:	f107 0318 	add.w	r3, r7, #24
 8023472:	2200      	movs	r2, #0
 8023474:	601a      	str	r2, [r3, #0]
 8023476:	605a      	str	r2, [r3, #4]
 8023478:	609a      	str	r2, [r3, #8]
 802347a:	60da      	str	r2, [r3, #12]
    FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 802347c:	f107 0308 	add.w	r3, r7, #8
 8023480:	2200      	movs	r2, #0
 8023482:	601a      	str	r2, [r3, #0]
 8023484:	605a      	str	r2, [r3, #4]
 8023486:	609a      	str	r2, [r3, #8]
 8023488:	60da      	str	r2, [r3, #12]

//    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
//    __HAL_RCC_FSMC_CLK_ENABLE();

    hnand1.Instance = FSMC_NAND_DEVICE;
 802348a:	4b29      	ldr	r3, [pc, #164]	; (8023530 <nand_fsmc_init+0xc8>)
 802348c:	4a29      	ldr	r2, [pc, #164]	; (8023534 <nand_fsmc_init+0xcc>)
 802348e:	601a      	str	r2, [r3, #0]
//    fsmc_init.FSMC_Bank = FSMC_Bank2_NAND;  // 设置FSMC NAND Flash的相关参数
    hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8023490:	4b27      	ldr	r3, [pc, #156]	; (8023530 <nand_fsmc_init+0xc8>)
 8023492:	2210      	movs	r2, #16
 8023494:	605a      	str	r2, [r3, #4]
//    fsmc_init.FSMC_Waitfeature = FSMC_Waitfeature_Enable;
    hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8023496:	4b26      	ldr	r3, [pc, #152]	; (8023530 <nand_fsmc_init+0xc8>)
 8023498:	2202      	movs	r2, #2
 802349a:	609a      	str	r2, [r3, #8]
//    fsmc_init.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
    hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 802349c:	4b24      	ldr	r3, [pc, #144]	; (8023530 <nand_fsmc_init+0xc8>)
 802349e:	2200      	movs	r2, #0
 80234a0:	60da      	str	r2, [r3, #12]
//    fsmc_init.FSMC_ECC = FSMC_ECC_Enable;
    hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 80234a2:	4b23      	ldr	r3, [pc, #140]	; (8023530 <nand_fsmc_init+0xc8>)
 80234a4:	2200      	movs	r2, #0
 80234a6:	611a      	str	r2, [r3, #16]
//    fsmc_init.FSMC_ECCPageSize = FSMC_ECCPageSize_2048Bytes;
    hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80234a8:	4b21      	ldr	r3, [pc, #132]	; (8023530 <nand_fsmc_init+0xc8>)
 80234aa:	2200      	movs	r2, #0
 80234ac:	615a      	str	r2, [r3, #20]
//    fsmc_init.FSMC_TCLRSetupTime = fsmc_conf.clr_setup_time;
    hnand1.Init.TCLRSetupTime = fsmc_conf.clr_setup_time;
 80234ae:	4b22      	ldr	r3, [pc, #136]	; (8023538 <nand_fsmc_init+0xd0>)
 80234b0:	791b      	ldrb	r3, [r3, #4]
 80234b2:	461a      	mov	r2, r3
 80234b4:	4b1e      	ldr	r3, [pc, #120]	; (8023530 <nand_fsmc_init+0xc8>)
 80234b6:	619a      	str	r2, [r3, #24]
//    fsmc_init.FSMC_TARSetupTime = fsmc_conf.ar_setup_time;
    hnand1.Init.TARSetupTime = fsmc_conf.ar_setup_time;
 80234b8:	4b1f      	ldr	r3, [pc, #124]	; (8023538 <nand_fsmc_init+0xd0>)
 80234ba:	795b      	ldrb	r3, [r3, #5]
 80234bc:	461a      	mov	r2, r3
 80234be:	4b1c      	ldr	r3, [pc, #112]	; (8023530 <nand_fsmc_init+0xc8>)
 80234c0:	61da      	str	r2, [r3, #28]
    /* ComSpaceTiming */
//    timing_init.FSMC_SetupTime = fsmc_conf.setup_time;  // 设置时序参数
    ComSpaceTiming.SetupTime = fsmc_conf.setup_time;  // 设置时序参数
 80234c2:	4b1d      	ldr	r3, [pc, #116]	; (8023538 <nand_fsmc_init+0xd0>)
 80234c4:	781b      	ldrb	r3, [r3, #0]
 80234c6:	61bb      	str	r3, [r7, #24]
//    timing_init.FSMC_WaitSetupTime = fsmc_conf.wait_setup_time;
    ComSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 80234c8:	4b1b      	ldr	r3, [pc, #108]	; (8023538 <nand_fsmc_init+0xd0>)
 80234ca:	785b      	ldrb	r3, [r3, #1]
 80234cc:	61fb      	str	r3, [r7, #28]
//    timing_init.FSMC_HoldSetupTime = fsmc_conf.hold_setup_time;
    ComSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 80234ce:	4b1a      	ldr	r3, [pc, #104]	; (8023538 <nand_fsmc_init+0xd0>)
 80234d0:	789b      	ldrb	r3, [r3, #2]
 80234d2:	623b      	str	r3, [r7, #32]
//    timing_init.FSMC_HiZSetupTime = fsmc_conf.hi_z_setup_time;
    ComSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 80234d4:	4b18      	ldr	r3, [pc, #96]	; (8023538 <nand_fsmc_init+0xd0>)
 80234d6:	78db      	ldrb	r3, [r3, #3]
 80234d8:	627b      	str	r3, [r7, #36]	; 0x24
    /* AttSpaceTiming */
    AttSpaceTiming.SetupTime = fsmc_conf.setup_time;
 80234da:	4b17      	ldr	r3, [pc, #92]	; (8023538 <nand_fsmc_init+0xd0>)
 80234dc:	781b      	ldrb	r3, [r3, #0]
 80234de:	60bb      	str	r3, [r7, #8]
    AttSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 80234e0:	4b15      	ldr	r3, [pc, #84]	; (8023538 <nand_fsmc_init+0xd0>)
 80234e2:	785b      	ldrb	r3, [r3, #1]
 80234e4:	60fb      	str	r3, [r7, #12]
    AttSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 80234e6:	4b14      	ldr	r3, [pc, #80]	; (8023538 <nand_fsmc_init+0xd0>)
 80234e8:	789b      	ldrb	r3, [r3, #2]
 80234ea:	613b      	str	r3, [r7, #16]
    AttSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 80234ec:	4b12      	ldr	r3, [pc, #72]	; (8023538 <nand_fsmc_init+0xd0>)
 80234ee:	78db      	ldrb	r3, [r3, #3]
 80234f0:	617b      	str	r3, [r7, #20]

    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80234f2:	f107 0208 	add.w	r2, r7, #8
 80234f6:	f107 0318 	add.w	r3, r7, #24
 80234fa:	4619      	mov	r1, r3
 80234fc:	480c      	ldr	r0, [pc, #48]	; (8023530 <nand_fsmc_init+0xc8>)
 80234fe:	f005 fc4c 	bl	8028d9a <HAL_NAND_Init>
 8023502:	4603      	mov	r3, r0
 8023504:	2b00      	cmp	r3, #0
 8023506:	d001      	beq.n	802350c <nand_fsmc_init+0xa4>
    {
      Error_Handler( );
 8023508:	f000 fed2 	bl	80242b0 <Error_Handler>
    }  // 初始化FSMC NAND Flash

//    FSMC_NANDCmd(FSMC_Bank_NAND, ENABLE);  // 使能FSMC NAND Flash
    __HAL_RCC_FSMC_CLK_ENABLE();
 802350c:	2300      	movs	r3, #0
 802350e:	607b      	str	r3, [r7, #4]
 8023510:	4b0a      	ldr	r3, [pc, #40]	; (802353c <nand_fsmc_init+0xd4>)
 8023512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023514:	4a09      	ldr	r2, [pc, #36]	; (802353c <nand_fsmc_init+0xd4>)
 8023516:	f043 0301 	orr.w	r3, r3, #1
 802351a:	6393      	str	r3, [r2, #56]	; 0x38
 802351c:	4b07      	ldr	r3, [pc, #28]	; (802353c <nand_fsmc_init+0xd4>)
 802351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023520:	f003 0301 	and.w	r3, r3, #1
 8023524:	607b      	str	r3, [r7, #4]
 8023526:	687b      	ldr	r3, [r7, #4]
}
 8023528:	bf00      	nop
 802352a:	3728      	adds	r7, #40	; 0x28
 802352c:	46bd      	mov	sp, r7
 802352e:	bd80      	pop	{r7, pc}
 8023530:	2000125c 	.word	0x2000125c
 8023534:	a0000060 	.word	0xa0000060
 8023538:	200012a0 	.word	0x200012a0
 802353c:	40023800 	.word	0x40023800

08023540 <nand_print_fsmc_info>:

static void nand_print_fsmc_info()
{
 8023540:	b580      	push	{r7, lr}
 8023542:	af00      	add	r7, sp, #0
    DEBUG_PRINT("Setup time: %d\r\n", fsmc_conf.setup_time);
 8023544:	4b42      	ldr	r3, [pc, #264]	; (8023650 <nand_print_fsmc_info+0x110>)
 8023546:	781b      	ldrb	r3, [r3, #0]
 8023548:	4619      	mov	r1, r3
 802354a:	4842      	ldr	r0, [pc, #264]	; (8023654 <nand_print_fsmc_info+0x114>)
 802354c:	f00e f8c4 	bl	80316d8 <printf>
    DEBUG_PRINT("Wait setup time: %d\r\n", fsmc_conf.wait_setup_time);
 8023550:	4b3f      	ldr	r3, [pc, #252]	; (8023650 <nand_print_fsmc_info+0x110>)
 8023552:	785b      	ldrb	r3, [r3, #1]
 8023554:	4619      	mov	r1, r3
 8023556:	4840      	ldr	r0, [pc, #256]	; (8023658 <nand_print_fsmc_info+0x118>)
 8023558:	f00e f8be 	bl	80316d8 <printf>
    DEBUG_PRINT("Hold setup time: %d\r\n", fsmc_conf.hold_setup_time);
 802355c:	4b3c      	ldr	r3, [pc, #240]	; (8023650 <nand_print_fsmc_info+0x110>)
 802355e:	789b      	ldrb	r3, [r3, #2]
 8023560:	4619      	mov	r1, r3
 8023562:	483e      	ldr	r0, [pc, #248]	; (802365c <nand_print_fsmc_info+0x11c>)
 8023564:	f00e f8b8 	bl	80316d8 <printf>
    DEBUG_PRINT("HiZ setup time: %d\r\n", fsmc_conf.hi_z_setup_time);
 8023568:	4b39      	ldr	r3, [pc, #228]	; (8023650 <nand_print_fsmc_info+0x110>)
 802356a:	78db      	ldrb	r3, [r3, #3]
 802356c:	4619      	mov	r1, r3
 802356e:	483c      	ldr	r0, [pc, #240]	; (8023660 <nand_print_fsmc_info+0x120>)
 8023570:	f00e f8b2 	bl	80316d8 <printf>
    DEBUG_PRINT("CLR setup time: %d\r\n", fsmc_conf.clr_setup_time);
 8023574:	4b36      	ldr	r3, [pc, #216]	; (8023650 <nand_print_fsmc_info+0x110>)
 8023576:	791b      	ldrb	r3, [r3, #4]
 8023578:	4619      	mov	r1, r3
 802357a:	483a      	ldr	r0, [pc, #232]	; (8023664 <nand_print_fsmc_info+0x124>)
 802357c:	f00e f8ac 	bl	80316d8 <printf>
    DEBUG_PRINT("AR setup time: %d\r\n", fsmc_conf.ar_setup_time);
 8023580:	4b33      	ldr	r3, [pc, #204]	; (8023650 <nand_print_fsmc_info+0x110>)
 8023582:	795b      	ldrb	r3, [r3, #5]
 8023584:	4619      	mov	r1, r3
 8023586:	4838      	ldr	r0, [pc, #224]	; (8023668 <nand_print_fsmc_info+0x128>)
 8023588:	f00e f8a6 	bl	80316d8 <printf>
    DEBUG_PRINT("Row cycles: %d\r\n", fsmc_conf.row_cycles);
 802358c:	4b30      	ldr	r3, [pc, #192]	; (8023650 <nand_print_fsmc_info+0x110>)
 802358e:	799b      	ldrb	r3, [r3, #6]
 8023590:	4619      	mov	r1, r3
 8023592:	4836      	ldr	r0, [pc, #216]	; (802366c <nand_print_fsmc_info+0x12c>)
 8023594:	f00e f8a0 	bl	80316d8 <printf>
    DEBUG_PRINT("Col. cycles: %d\r\n", fsmc_conf.col_cycles);
 8023598:	4b2d      	ldr	r3, [pc, #180]	; (8023650 <nand_print_fsmc_info+0x110>)
 802359a:	79db      	ldrb	r3, [r3, #7]
 802359c:	4619      	mov	r1, r3
 802359e:	4834      	ldr	r0, [pc, #208]	; (8023670 <nand_print_fsmc_info+0x130>)
 80235a0:	f00e f89a 	bl	80316d8 <printf>
    DEBUG_PRINT("Read command 1: %d\r\n", fsmc_conf.read1_cmd);
 80235a4:	4b2a      	ldr	r3, [pc, #168]	; (8023650 <nand_print_fsmc_info+0x110>)
 80235a6:	7a1b      	ldrb	r3, [r3, #8]
 80235a8:	4619      	mov	r1, r3
 80235aa:	4832      	ldr	r0, [pc, #200]	; (8023674 <nand_print_fsmc_info+0x134>)
 80235ac:	f00e f894 	bl	80316d8 <printf>
    DEBUG_PRINT("Read command 2: %d\r\n", fsmc_conf.read2_cmd);
 80235b0:	4b27      	ldr	r3, [pc, #156]	; (8023650 <nand_print_fsmc_info+0x110>)
 80235b2:	7a5b      	ldrb	r3, [r3, #9]
 80235b4:	4619      	mov	r1, r3
 80235b6:	4830      	ldr	r0, [pc, #192]	; (8023678 <nand_print_fsmc_info+0x138>)
 80235b8:	f00e f88e 	bl	80316d8 <printf>
    DEBUG_PRINT("Read spare command: %d\r\n", fsmc_conf.read_spare_cmd);    
 80235bc:	4b24      	ldr	r3, [pc, #144]	; (8023650 <nand_print_fsmc_info+0x110>)
 80235be:	7a9b      	ldrb	r3, [r3, #10]
 80235c0:	4619      	mov	r1, r3
 80235c2:	482e      	ldr	r0, [pc, #184]	; (802367c <nand_print_fsmc_info+0x13c>)
 80235c4:	f00e f888 	bl	80316d8 <printf>
    DEBUG_PRINT("Read ID command: %d\r\n", fsmc_conf.read_id_cmd);
 80235c8:	4b21      	ldr	r3, [pc, #132]	; (8023650 <nand_print_fsmc_info+0x110>)
 80235ca:	7adb      	ldrb	r3, [r3, #11]
 80235cc:	4619      	mov	r1, r3
 80235ce:	482c      	ldr	r0, [pc, #176]	; (8023680 <nand_print_fsmc_info+0x140>)
 80235d0:	f00e f882 	bl	80316d8 <printf>
    DEBUG_PRINT("Reset command: %d\r\n", fsmc_conf.reset_cmd);
 80235d4:	4b1e      	ldr	r3, [pc, #120]	; (8023650 <nand_print_fsmc_info+0x110>)
 80235d6:	7b1b      	ldrb	r3, [r3, #12]
 80235d8:	4619      	mov	r1, r3
 80235da:	482a      	ldr	r0, [pc, #168]	; (8023684 <nand_print_fsmc_info+0x144>)
 80235dc:	f00e f87c 	bl	80316d8 <printf>
    DEBUG_PRINT("Write 1 command: %d\r\n", fsmc_conf.write1_cmd);
 80235e0:	4b1b      	ldr	r3, [pc, #108]	; (8023650 <nand_print_fsmc_info+0x110>)
 80235e2:	7b5b      	ldrb	r3, [r3, #13]
 80235e4:	4619      	mov	r1, r3
 80235e6:	4828      	ldr	r0, [pc, #160]	; (8023688 <nand_print_fsmc_info+0x148>)
 80235e8:	f00e f876 	bl	80316d8 <printf>
    DEBUG_PRINT("Write 2 command: %d\r\n", fsmc_conf.write2_cmd);
 80235ec:	4b18      	ldr	r3, [pc, #96]	; (8023650 <nand_print_fsmc_info+0x110>)
 80235ee:	7b9b      	ldrb	r3, [r3, #14]
 80235f0:	4619      	mov	r1, r3
 80235f2:	4826      	ldr	r0, [pc, #152]	; (802368c <nand_print_fsmc_info+0x14c>)
 80235f4:	f00e f870 	bl	80316d8 <printf>
    DEBUG_PRINT("Erase 1 command: %d\r\n", fsmc_conf.erase1_cmd);
 80235f8:	4b15      	ldr	r3, [pc, #84]	; (8023650 <nand_print_fsmc_info+0x110>)
 80235fa:	7bdb      	ldrb	r3, [r3, #15]
 80235fc:	4619      	mov	r1, r3
 80235fe:	4824      	ldr	r0, [pc, #144]	; (8023690 <nand_print_fsmc_info+0x150>)
 8023600:	f00e f86a 	bl	80316d8 <printf>
    DEBUG_PRINT("Erase 2 command: %d\r\n", fsmc_conf.erase2_cmd);
 8023604:	4b12      	ldr	r3, [pc, #72]	; (8023650 <nand_print_fsmc_info+0x110>)
 8023606:	7c1b      	ldrb	r3, [r3, #16]
 8023608:	4619      	mov	r1, r3
 802360a:	4822      	ldr	r0, [pc, #136]	; (8023694 <nand_print_fsmc_info+0x154>)
 802360c:	f00e f864 	bl	80316d8 <printf>
    DEBUG_PRINT("Status command: %d\r\n", fsmc_conf.status_cmd);
 8023610:	4b0f      	ldr	r3, [pc, #60]	; (8023650 <nand_print_fsmc_info+0x110>)
 8023612:	7c5b      	ldrb	r3, [r3, #17]
 8023614:	4619      	mov	r1, r3
 8023616:	4820      	ldr	r0, [pc, #128]	; (8023698 <nand_print_fsmc_info+0x158>)
 8023618:	f00e f85e 	bl	80316d8 <printf>
    DEBUG_PRINT("Set feature command: %d\r\n", fsmc_conf.set_features_cmd);
 802361c:	4b0c      	ldr	r3, [pc, #48]	; (8023650 <nand_print_fsmc_info+0x110>)
 802361e:	7c9b      	ldrb	r3, [r3, #18]
 8023620:	4619      	mov	r1, r3
 8023622:	481e      	ldr	r0, [pc, #120]	; (802369c <nand_print_fsmc_info+0x15c>)
 8023624:	f00e f858 	bl	80316d8 <printf>
    DEBUG_PRINT("Enable ECC address: %d\r\n", fsmc_conf.enable_ecc_addr);
 8023628:	4b09      	ldr	r3, [pc, #36]	; (8023650 <nand_print_fsmc_info+0x110>)
 802362a:	7cdb      	ldrb	r3, [r3, #19]
 802362c:	4619      	mov	r1, r3
 802362e:	481c      	ldr	r0, [pc, #112]	; (80236a0 <nand_print_fsmc_info+0x160>)
 8023630:	f00e f852 	bl	80316d8 <printf>
    DEBUG_PRINT("Enable ECC value: %d\r\n", fsmc_conf.enable_ecc_value);
 8023634:	4b06      	ldr	r3, [pc, #24]	; (8023650 <nand_print_fsmc_info+0x110>)
 8023636:	7d1b      	ldrb	r3, [r3, #20]
 8023638:	4619      	mov	r1, r3
 802363a:	481a      	ldr	r0, [pc, #104]	; (80236a4 <nand_print_fsmc_info+0x164>)
 802363c:	f00e f84c 	bl	80316d8 <printf>
    DEBUG_PRINT("Disable ECC value: %d\r\n", fsmc_conf.disable_ecc_value);
 8023640:	4b03      	ldr	r3, [pc, #12]	; (8023650 <nand_print_fsmc_info+0x110>)
 8023642:	7d5b      	ldrb	r3, [r3, #21]
 8023644:	4619      	mov	r1, r3
 8023646:	4818      	ldr	r0, [pc, #96]	; (80236a8 <nand_print_fsmc_info+0x168>)
 8023648:	f00e f846 	bl	80316d8 <printf>
}
 802364c:	bf00      	nop
 802364e:	bd80      	pop	{r7, pc}
 8023650:	200012a0 	.word	0x200012a0
 8023654:	08036154 	.word	0x08036154
 8023658:	08036168 	.word	0x08036168
 802365c:	08036180 	.word	0x08036180
 8023660:	08036198 	.word	0x08036198
 8023664:	080361b0 	.word	0x080361b0
 8023668:	080361c8 	.word	0x080361c8
 802366c:	080361dc 	.word	0x080361dc
 8023670:	080361f0 	.word	0x080361f0
 8023674:	08036204 	.word	0x08036204
 8023678:	0803621c 	.word	0x0803621c
 802367c:	08036234 	.word	0x08036234
 8023680:	08036250 	.word	0x08036250
 8023684:	08036268 	.word	0x08036268
 8023688:	0803627c 	.word	0x0803627c
 802368c:	08036294 	.word	0x08036294
 8023690:	080362ac 	.word	0x080362ac
 8023694:	080362c4 	.word	0x080362c4
 8023698:	080362dc 	.word	0x080362dc
 802369c:	080362f4 	.word	0x080362f4
 80236a0:	08036310 	.word	0x08036310
 80236a4:	0803632c 	.word	0x0803632c
 80236a8:	08036344 	.word	0x08036344

080236ac <nand_reset>:

static void nand_reset()
{
 80236ac:	b480      	push	{r7}
 80236ae:	af00      	add	r7, sp, #0
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.reset_cmd;  // 发送复位命令给NAND Flash
 80236b0:	4b04      	ldr	r3, [pc, #16]	; (80236c4 <nand_reset+0x18>)
 80236b2:	4a05      	ldr	r2, [pc, #20]	; (80236c8 <nand_reset+0x1c>)
 80236b4:	7b12      	ldrb	r2, [r2, #12]
 80236b6:	701a      	strb	r2, [r3, #0]
}
 80236b8:	bf00      	nop
 80236ba:	46bd      	mov	sp, r7
 80236bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236c0:	4770      	bx	lr
 80236c2:	bf00      	nop
 80236c4:	70010000 	.word	0x70010000
 80236c8:	200012a0 	.word	0x200012a0

080236cc <nand_init>:

static int nand_init(void *conf, uint32_t conf_size)
{
 80236cc:	b5b0      	push	{r4, r5, r7, lr}
 80236ce:	b082      	sub	sp, #8
 80236d0:	af00      	add	r7, sp, #0
 80236d2:	6078      	str	r0, [r7, #4]
 80236d4:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(fsmc_conf_t))
 80236d6:	683b      	ldr	r3, [r7, #0]
 80236d8:	2b15      	cmp	r3, #21
 80236da:	d802      	bhi.n	80236e2 <nand_init+0x16>
        return -1;
 80236dc:	f04f 33ff 	mov.w	r3, #4294967295
 80236e0:	e015      	b.n	802370e <nand_init+0x42>
   
    fsmc_conf = *(fsmc_conf_t *)conf;  // 从传入的配置结构体中获取配置参数
 80236e2:	4a0d      	ldr	r2, [pc, #52]	; (8023718 <nand_init+0x4c>)
 80236e4:	687b      	ldr	r3, [r7, #4]
 80236e6:	4614      	mov	r4, r2
 80236e8:	461d      	mov	r5, r3
 80236ea:	6828      	ldr	r0, [r5, #0]
 80236ec:	6869      	ldr	r1, [r5, #4]
 80236ee:	68aa      	ldr	r2, [r5, #8]
 80236f0:	68eb      	ldr	r3, [r5, #12]
 80236f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80236f4:	6928      	ldr	r0, [r5, #16]
 80236f6:	6020      	str	r0, [r4, #0]
 80236f8:	8aab      	ldrh	r3, [r5, #20]
 80236fa:	80a3      	strh	r3, [r4, #4]

    nand_gpio_init();  // 初始化GPIO引脚
 80236fc:	f7ff fe60 	bl	80233c0 <nand_gpio_init>
    nand_fsmc_init();  // 初始化FSMC NAND Flash
 8023700:	f7ff feb2 	bl	8023468 <nand_fsmc_init>
    nand_print_fsmc_info();  // 打印FSMC的配置信息
 8023704:	f7ff ff1c 	bl	8023540 <nand_print_fsmc_info>
    nand_reset();  // 复位NAND Flash
 8023708:	f7ff ffd0 	bl	80236ac <nand_reset>

    return 0;
 802370c:	2300      	movs	r3, #0
}
 802370e:	4618      	mov	r0, r3
 8023710:	3708      	adds	r7, #8
 8023712:	46bd      	mov	sp, r7
 8023714:	bdb0      	pop	{r4, r5, r7, pc}
 8023716:	bf00      	nop
 8023718:	200012a0 	.word	0x200012a0

0802371c <nand_uninit>:

static void nand_uninit()
{
 802371c:	b480      	push	{r7}
 802371e:	af00      	add	r7, sp, #0
    //TODO
}
 8023720:	bf00      	nop
 8023722:	46bd      	mov	sp, r7
 8023724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023728:	4770      	bx	lr
	...

0802372c <nand_read_status>:

static uint32_t nand_read_status()
{
 802372c:	b480      	push	{r7}
 802372e:	b083      	sub	sp, #12
 8023730:	af00      	add	r7, sp, #0
    uint32_t data, status;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.status_cmd;  // 发送状态命令给NAND Flash
 8023732:	4b11      	ldr	r3, [pc, #68]	; (8023778 <nand_read_status+0x4c>)
 8023734:	4a11      	ldr	r2, [pc, #68]	; (802377c <nand_read_status+0x50>)
 8023736:	7c52      	ldrb	r2, [r2, #17]
 8023738:	701a      	strb	r2, [r3, #0]
    data = *(__IO uint8_t *)(Bank_NAND_ADDR);
 802373a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 802373e:	781b      	ldrb	r3, [r3, #0]
 8023740:	b2db      	uxtb	r3, r3
 8023742:	603b      	str	r3, [r7, #0]

    if ((data & NAND_ERROR) == NAND_ERROR)
 8023744:	683b      	ldr	r3, [r7, #0]
 8023746:	f003 0301 	and.w	r3, r3, #1
 802374a:	2b00      	cmp	r3, #0
 802374c:	d002      	beq.n	8023754 <nand_read_status+0x28>
        status = FLASH_STATUS_ERROR;
 802374e:	2302      	movs	r3, #2
 8023750:	607b      	str	r3, [r7, #4]
 8023752:	e009      	b.n	8023768 <nand_read_status+0x3c>
    else if ((data & NAND_READY) == NAND_READY)
 8023754:	683b      	ldr	r3, [r7, #0]
 8023756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802375a:	2b00      	cmp	r3, #0
 802375c:	d002      	beq.n	8023764 <nand_read_status+0x38>
        status = FLASH_STATUS_READY;
 802375e:	2300      	movs	r3, #0
 8023760:	607b      	str	r3, [r7, #4]
 8023762:	e001      	b.n	8023768 <nand_read_status+0x3c>
    else
        status = FLASH_STATUS_BUSY;
 8023764:	2301      	movs	r3, #1
 8023766:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的状态
 8023768:	687b      	ldr	r3, [r7, #4]
}
 802376a:	4618      	mov	r0, r3
 802376c:	370c      	adds	r7, #12
 802376e:	46bd      	mov	sp, r7
 8023770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023774:	4770      	bx	lr
 8023776:	bf00      	nop
 8023778:	70010000 	.word	0x70010000
 802377c:	200012a0 	.word	0x200012a0

08023780 <nand_get_status>:

static uint32_t nand_get_status()
{
 8023780:	b580      	push	{r7, lr}
 8023782:	b082      	sub	sp, #8
 8023784:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8023786:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802378a:	603b      	str	r3, [r7, #0]

    status = nand_read_status();
 802378c:	f7ff ffce 	bl	802372c <nand_read_status>
 8023790:	6078      	str	r0, [r7, #4]

    /* 等待NAND操作完成或超时发生 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8023792:	e005      	b.n	80237a0 <nand_get_status+0x20>
    {
        status = nand_read_status();
 8023794:	f7ff ffca 	bl	802372c <nand_read_status>
 8023798:	6078      	str	r0, [r7, #4]
        timeout --;
 802379a:	683b      	ldr	r3, [r7, #0]
 802379c:	3b01      	subs	r3, #1
 802379e:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 80237a0:	687b      	ldr	r3, [r7, #4]
 80237a2:	2b01      	cmp	r3, #1
 80237a4:	d102      	bne.n	80237ac <nand_get_status+0x2c>
 80237a6:	683b      	ldr	r3, [r7, #0]
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	d1f3      	bne.n	8023794 <nand_get_status+0x14>
    }

    if (!timeout)
 80237ac:	683b      	ldr	r3, [r7, #0]
 80237ae:	2b00      	cmp	r3, #0
 80237b0:	d101      	bne.n	80237b6 <nand_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 80237b2:	2303      	movs	r3, #3
 80237b4:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的最终状态
 80237b6:	687b      	ldr	r3, [r7, #4]
}
 80237b8:	4618      	mov	r0, r3
 80237ba:	3708      	adds	r7, #8
 80237bc:	46bd      	mov	sp, r7
 80237be:	bd80      	pop	{r7, pc}

080237c0 <nand_read_id>:

// 从NAND Flash读取ID
static void nand_read_id(chip_id_t *nand_id)
{
 80237c0:	b480      	push	{r7}
 80237c2:	b085      	sub	sp, #20
 80237c4:	af00      	add	r7, sp, #0
 80237c6:	6078      	str	r0, [r7, #4]
    uint32_t data = 0;
 80237c8:	2300      	movs	r3, #0
 80237ca:	60fb      	str	r3, [r7, #12]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_id_cmd;  // 发送读取ID的命令给NAND Flash
 80237cc:	4b17      	ldr	r3, [pc, #92]	; (802382c <nand_read_id+0x6c>)
 80237ce:	4a18      	ldr	r2, [pc, #96]	; (8023830 <nand_read_id+0x70>)
 80237d0:	7ad2      	ldrb	r2, [r2, #11]
 80237d2:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 80237d4:	4b17      	ldr	r3, [pc, #92]	; (8023834 <nand_read_id+0x74>)
 80237d6:	2200      	movs	r2, #0
 80237d8:	701a      	strb	r2, [r3, #0]

    /* 从NAND Flash读取ID的序列 */
    data = *(__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA);
 80237da:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80237de:	681b      	ldr	r3, [r3, #0]
 80237e0:	60fb      	str	r3, [r7, #12]
    nand_id->maker_id   = ADDR_1st_CYCLE(data);  // 读取制造商ID
 80237e2:	68fb      	ldr	r3, [r7, #12]
 80237e4:	b2da      	uxtb	r2, r3
 80237e6:	687b      	ldr	r3, [r7, #4]
 80237e8:	701a      	strb	r2, [r3, #0]
    nand_id->device_id  = ADDR_2nd_CYCLE(data);  // 读取设备ID
 80237ea:	68fb      	ldr	r3, [r7, #12]
 80237ec:	0a1b      	lsrs	r3, r3, #8
 80237ee:	b2da      	uxtb	r2, r3
 80237f0:	687b      	ldr	r3, [r7, #4]
 80237f2:	705a      	strb	r2, [r3, #1]
    nand_id->third_id   = ADDR_3rd_CYCLE(data);  // 读取第三个ID
 80237f4:	68fb      	ldr	r3, [r7, #12]
 80237f6:	0c1b      	lsrs	r3, r3, #16
 80237f8:	b2da      	uxtb	r2, r3
 80237fa:	687b      	ldr	r3, [r7, #4]
 80237fc:	709a      	strb	r2, [r3, #2]
    nand_id->fourth_id  = ADDR_4th_CYCLE(data);  // 读取第四个ID
 80237fe:	68fb      	ldr	r3, [r7, #12]
 8023800:	0e1b      	lsrs	r3, r3, #24
 8023802:	b2da      	uxtb	r2, r3
 8023804:	687b      	ldr	r3, [r7, #4]
 8023806:	70da      	strb	r2, [r3, #3]

    data = *((__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA) + 1);
 8023808:	4b0b      	ldr	r3, [pc, #44]	; (8023838 <nand_read_id+0x78>)
 802380a:	681b      	ldr	r3, [r3, #0]
 802380c:	60fb      	str	r3, [r7, #12]
    nand_id->fifth_id   = ADDR_1st_CYCLE(data);  // 读取第五个ID
 802380e:	68fb      	ldr	r3, [r7, #12]
 8023810:	b2da      	uxtb	r2, r3
 8023812:	687b      	ldr	r3, [r7, #4]
 8023814:	711a      	strb	r2, [r3, #4]
    nand_id->sixth_id   = ADDR_2nd_CYCLE(data);  // 读取第六个ID
 8023816:	68fb      	ldr	r3, [r7, #12]
 8023818:	0a1b      	lsrs	r3, r3, #8
 802381a:	b2da      	uxtb	r2, r3
 802381c:	687b      	ldr	r3, [r7, #4]
 802381e:	715a      	strb	r2, [r3, #5]
}
 8023820:	bf00      	nop
 8023822:	3714      	adds	r7, #20
 8023824:	46bd      	mov	sp, r7
 8023826:	f85d 7b04 	ldr.w	r7, [sp], #4
 802382a:	4770      	bx	lr
 802382c:	70010000 	.word	0x70010000
 8023830:	200012a0 	.word	0x200012a0
 8023834:	70020000 	.word	0x70020000
 8023838:	70000004 	.word	0x70000004

0802383c <nand_write_page_async>:

// 异步方式写入NAND Flash的页数据
static void nand_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 802383c:	b480      	push	{r7}
 802383e:	b087      	sub	sp, #28
 8023840:	af00      	add	r7, sp, #0
 8023842:	60f8      	str	r0, [r7, #12]
 8023844:	60b9      	str	r1, [r7, #8]
 8023846:	607a      	str	r2, [r7, #4]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write1_cmd;  // 发送写入命令给NAND Flash
 8023848:	4b4c      	ldr	r3, [pc, #304]	; (802397c <nand_write_page_async+0x140>)
 802384a:	4a4d      	ldr	r2, [pc, #308]	; (8023980 <nand_write_page_async+0x144>)
 802384c:	7b52      	ldrb	r2, [r2, #13]
 802384e:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8023850:	4b4b      	ldr	r3, [pc, #300]	; (8023980 <nand_write_page_async+0x144>)
 8023852:	79db      	ldrb	r3, [r3, #7]
 8023854:	3b01      	subs	r3, #1
 8023856:	2b03      	cmp	r3, #3
 8023858:	d82c      	bhi.n	80238b4 <nand_write_page_async+0x78>
 802385a:	a201      	add	r2, pc, #4	; (adr r2, 8023860 <nand_write_page_async+0x24>)
 802385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023860:	08023871 	.word	0x08023871
 8023864:	08023879 	.word	0x08023879
 8023868:	08023887 	.word	0x08023887
 802386c:	0802389b 	.word	0x0802389b
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023870:	4b44      	ldr	r3, [pc, #272]	; (8023984 <nand_write_page_async+0x148>)
 8023872:	2200      	movs	r2, #0
 8023874:	701a      	strb	r2, [r3, #0]
        break;
 8023876:	e01e      	b.n	80238b6 <nand_write_page_async+0x7a>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023878:	4b42      	ldr	r3, [pc, #264]	; (8023984 <nand_write_page_async+0x148>)
 802387a:	2200      	movs	r2, #0
 802387c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 802387e:	4b41      	ldr	r3, [pc, #260]	; (8023984 <nand_write_page_async+0x148>)
 8023880:	2200      	movs	r2, #0
 8023882:	701a      	strb	r2, [r3, #0]
        break;
 8023884:	e017      	b.n	80238b6 <nand_write_page_async+0x7a>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023886:	4b3f      	ldr	r3, [pc, #252]	; (8023984 <nand_write_page_async+0x148>)
 8023888:	2200      	movs	r2, #0
 802388a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 802388c:	4b3d      	ldr	r3, [pc, #244]	; (8023984 <nand_write_page_async+0x148>)
 802388e:	2200      	movs	r2, #0
 8023890:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023892:	4b3c      	ldr	r3, [pc, #240]	; (8023984 <nand_write_page_async+0x148>)
 8023894:	2200      	movs	r2, #0
 8023896:	701a      	strb	r2, [r3, #0]
        break;
 8023898:	e00d      	b.n	80238b6 <nand_write_page_async+0x7a>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 802389a:	4b3a      	ldr	r3, [pc, #232]	; (8023984 <nand_write_page_async+0x148>)
 802389c:	2200      	movs	r2, #0
 802389e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 80238a0:	4b38      	ldr	r3, [pc, #224]	; (8023984 <nand_write_page_async+0x148>)
 80238a2:	2200      	movs	r2, #0
 80238a4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 80238a6:	4b37      	ldr	r3, [pc, #220]	; (8023984 <nand_write_page_async+0x148>)
 80238a8:	2200      	movs	r2, #0
 80238aa:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 80238ac:	4b35      	ldr	r3, [pc, #212]	; (8023984 <nand_write_page_async+0x148>)
 80238ae:	2200      	movs	r2, #0
 80238b0:	701a      	strb	r2, [r3, #0]
        break;
 80238b2:	e000      	b.n	80238b6 <nand_write_page_async+0x7a>
    default:
        break;
 80238b4:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 80238b6:	4b32      	ldr	r3, [pc, #200]	; (8023980 <nand_write_page_async+0x144>)
 80238b8:	799b      	ldrb	r3, [r3, #6]
 80238ba:	3b01      	subs	r3, #1
 80238bc:	2b03      	cmp	r3, #3
 80238be:	d83d      	bhi.n	802393c <nand_write_page_async+0x100>
 80238c0:	a201      	add	r2, pc, #4	; (adr r2, 80238c8 <nand_write_page_async+0x8c>)
 80238c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80238c6:	bf00      	nop
 80238c8:	080238d9 	.word	0x080238d9
 80238cc:	080238e3 	.word	0x080238e3
 80238d0:	080238f7 	.word	0x080238f7
 80238d4:	08023915 	.word	0x08023915
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80238d8:	4b2a      	ldr	r3, [pc, #168]	; (8023984 <nand_write_page_async+0x148>)
 80238da:	68ba      	ldr	r2, [r7, #8]
 80238dc:	b2d2      	uxtb	r2, r2
 80238de:	701a      	strb	r2, [r3, #0]
        break;
 80238e0:	e02d      	b.n	802393e <nand_write_page_async+0x102>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80238e2:	4b28      	ldr	r3, [pc, #160]	; (8023984 <nand_write_page_async+0x148>)
 80238e4:	68ba      	ldr	r2, [r7, #8]
 80238e6:	b2d2      	uxtb	r2, r2
 80238e8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80238ea:	68bb      	ldr	r3, [r7, #8]
 80238ec:	0a1a      	lsrs	r2, r3, #8
 80238ee:	4b25      	ldr	r3, [pc, #148]	; (8023984 <nand_write_page_async+0x148>)
 80238f0:	b2d2      	uxtb	r2, r2
 80238f2:	701a      	strb	r2, [r3, #0]
        break;
 80238f4:	e023      	b.n	802393e <nand_write_page_async+0x102>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80238f6:	4b23      	ldr	r3, [pc, #140]	; (8023984 <nand_write_page_async+0x148>)
 80238f8:	68ba      	ldr	r2, [r7, #8]
 80238fa:	b2d2      	uxtb	r2, r2
 80238fc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80238fe:	68bb      	ldr	r3, [r7, #8]
 8023900:	0a1a      	lsrs	r2, r3, #8
 8023902:	4b20      	ldr	r3, [pc, #128]	; (8023984 <nand_write_page_async+0x148>)
 8023904:	b2d2      	uxtb	r2, r2
 8023906:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8023908:	68bb      	ldr	r3, [r7, #8]
 802390a:	0c1a      	lsrs	r2, r3, #16
 802390c:	4b1d      	ldr	r3, [pc, #116]	; (8023984 <nand_write_page_async+0x148>)
 802390e:	b2d2      	uxtb	r2, r2
 8023910:	701a      	strb	r2, [r3, #0]
        break;
 8023912:	e014      	b.n	802393e <nand_write_page_async+0x102>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023914:	4b1b      	ldr	r3, [pc, #108]	; (8023984 <nand_write_page_async+0x148>)
 8023916:	68ba      	ldr	r2, [r7, #8]
 8023918:	b2d2      	uxtb	r2, r2
 802391a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 802391c:	68bb      	ldr	r3, [r7, #8]
 802391e:	0a1a      	lsrs	r2, r3, #8
 8023920:	4b18      	ldr	r3, [pc, #96]	; (8023984 <nand_write_page_async+0x148>)
 8023922:	b2d2      	uxtb	r2, r2
 8023924:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8023926:	68bb      	ldr	r3, [r7, #8]
 8023928:	0c1a      	lsrs	r2, r3, #16
 802392a:	4b16      	ldr	r3, [pc, #88]	; (8023984 <nand_write_page_async+0x148>)
 802392c:	b2d2      	uxtb	r2, r2
 802392e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 8023930:	68bb      	ldr	r3, [r7, #8]
 8023932:	0e1a      	lsrs	r2, r3, #24
 8023934:	4b13      	ldr	r3, [pc, #76]	; (8023984 <nand_write_page_async+0x148>)
 8023936:	b2d2      	uxtb	r2, r2
 8023938:	701a      	strb	r2, [r3, #0]
        break;
 802393a:	e000      	b.n	802393e <nand_write_page_async+0x102>
    default:
        break;
 802393c:	bf00      	nop
    }

    for(i = 0; i < page_size; i++)
 802393e:	2300      	movs	r3, #0
 8023940:	617b      	str	r3, [r7, #20]
 8023942:	e009      	b.n	8023958 <nand_write_page_async+0x11c>
        *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = buf[i];  // 逐字节写入数据到NAND Flash的数据区
 8023944:	68fa      	ldr	r2, [r7, #12]
 8023946:	697b      	ldr	r3, [r7, #20]
 8023948:	4413      	add	r3, r2
 802394a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 802394e:	781b      	ldrb	r3, [r3, #0]
 8023950:	7013      	strb	r3, [r2, #0]
    for(i = 0; i < page_size; i++)
 8023952:	697b      	ldr	r3, [r7, #20]
 8023954:	3301      	adds	r3, #1
 8023956:	617b      	str	r3, [r7, #20]
 8023958:	697a      	ldr	r2, [r7, #20]
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	429a      	cmp	r2, r3
 802395e:	d3f1      	bcc.n	8023944 <nand_write_page_async+0x108>

    if (fsmc_conf.write2_cmd != UNDEFINED_CMD)
 8023960:	4b07      	ldr	r3, [pc, #28]	; (8023980 <nand_write_page_async+0x144>)
 8023962:	7b9b      	ldrb	r3, [r3, #14]
 8023964:	2bff      	cmp	r3, #255	; 0xff
 8023966:	d003      	beq.n	8023970 <nand_write_page_async+0x134>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write2_cmd;  // 发送写入命令2给NAND Flash
 8023968:	4b04      	ldr	r3, [pc, #16]	; (802397c <nand_write_page_async+0x140>)
 802396a:	4a05      	ldr	r2, [pc, #20]	; (8023980 <nand_write_page_async+0x144>)
 802396c:	7b92      	ldrb	r2, [r2, #14]
 802396e:	701a      	strb	r2, [r3, #0]
}
 8023970:	bf00      	nop
 8023972:	371c      	adds	r7, #28
 8023974:	46bd      	mov	sp, r7
 8023976:	f85d 7b04 	ldr.w	r7, [sp], #4
 802397a:	4770      	bx	lr
 802397c:	70010000 	.word	0x70010000
 8023980:	200012a0 	.word	0x200012a0
 8023984:	70020000 	.word	0x70020000

08023988 <nand_read_data>:

// 从NAND Flash读取数据
static uint32_t nand_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 8023988:	b580      	push	{r7, lr}
 802398a:	b086      	sub	sp, #24
 802398c:	af00      	add	r7, sp, #0
 802398e:	60f8      	str	r0, [r7, #12]
 8023990:	60b9      	str	r1, [r7, #8]
 8023992:	607a      	str	r2, [r7, #4]
 8023994:	603b      	str	r3, [r7, #0]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read1_cmd;  // 发送读取命令给NAND Flash
 8023996:	4b55      	ldr	r3, [pc, #340]	; (8023aec <nand_read_data+0x164>)
 8023998:	4a55      	ldr	r2, [pc, #340]	; (8023af0 <nand_read_data+0x168>)
 802399a:	7a12      	ldrb	r2, [r2, #8]
 802399c:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 802399e:	4b54      	ldr	r3, [pc, #336]	; (8023af0 <nand_read_data+0x168>)
 80239a0:	79db      	ldrb	r3, [r3, #7]
 80239a2:	3b01      	subs	r3, #1
 80239a4:	2b03      	cmp	r3, #3
 80239a6:	d83c      	bhi.n	8023a22 <nand_read_data+0x9a>
 80239a8:	a201      	add	r2, pc, #4	; (adr r2, 80239b0 <nand_read_data+0x28>)
 80239aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80239ae:	bf00      	nop
 80239b0:	080239c1 	.word	0x080239c1
 80239b4:	080239cb 	.word	0x080239cb
 80239b8:	080239df 	.word	0x080239df
 80239bc:	080239fd 	.word	0x080239fd
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 80239c0:	4b4c      	ldr	r3, [pc, #304]	; (8023af4 <nand_read_data+0x16c>)
 80239c2:	687a      	ldr	r2, [r7, #4]
 80239c4:	b2d2      	uxtb	r2, r2
 80239c6:	701a      	strb	r2, [r3, #0]
        break;
 80239c8:	e02c      	b.n	8023a24 <nand_read_data+0x9c>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 80239ca:	4b4a      	ldr	r3, [pc, #296]	; (8023af4 <nand_read_data+0x16c>)
 80239cc:	687a      	ldr	r2, [r7, #4]
 80239ce:	b2d2      	uxtb	r2, r2
 80239d0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 80239d2:	687b      	ldr	r3, [r7, #4]
 80239d4:	0a1a      	lsrs	r2, r3, #8
 80239d6:	4b47      	ldr	r3, [pc, #284]	; (8023af4 <nand_read_data+0x16c>)
 80239d8:	b2d2      	uxtb	r2, r2
 80239da:	701a      	strb	r2, [r3, #0]
        break;
 80239dc:	e022      	b.n	8023a24 <nand_read_data+0x9c>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 80239de:	4b45      	ldr	r3, [pc, #276]	; (8023af4 <nand_read_data+0x16c>)
 80239e0:	687a      	ldr	r2, [r7, #4]
 80239e2:	b2d2      	uxtb	r2, r2
 80239e4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 80239e6:	687b      	ldr	r3, [r7, #4]
 80239e8:	0a1a      	lsrs	r2, r3, #8
 80239ea:	4b42      	ldr	r3, [pc, #264]	; (8023af4 <nand_read_data+0x16c>)
 80239ec:	b2d2      	uxtb	r2, r2
 80239ee:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 80239f0:	687b      	ldr	r3, [r7, #4]
 80239f2:	0c1a      	lsrs	r2, r3, #16
 80239f4:	4b3f      	ldr	r3, [pc, #252]	; (8023af4 <nand_read_data+0x16c>)
 80239f6:	b2d2      	uxtb	r2, r2
 80239f8:	701a      	strb	r2, [r3, #0]
        break;
 80239fa:	e013      	b.n	8023a24 <nand_read_data+0x9c>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 80239fc:	4b3d      	ldr	r3, [pc, #244]	; (8023af4 <nand_read_data+0x16c>)
 80239fe:	687a      	ldr	r2, [r7, #4]
 8023a00:	b2d2      	uxtb	r2, r2
 8023a02:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8023a04:	687b      	ldr	r3, [r7, #4]
 8023a06:	0a1a      	lsrs	r2, r3, #8
 8023a08:	4b3a      	ldr	r3, [pc, #232]	; (8023af4 <nand_read_data+0x16c>)
 8023a0a:	b2d2      	uxtb	r2, r2
 8023a0c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 8023a0e:	687b      	ldr	r3, [r7, #4]
 8023a10:	0c1a      	lsrs	r2, r3, #16
 8023a12:	4b38      	ldr	r3, [pc, #224]	; (8023af4 <nand_read_data+0x16c>)
 8023a14:	b2d2      	uxtb	r2, r2
 8023a16:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page_offset);
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	0e1a      	lsrs	r2, r3, #24
 8023a1c:	4b35      	ldr	r3, [pc, #212]	; (8023af4 <nand_read_data+0x16c>)
 8023a1e:	b2d2      	uxtb	r2, r2
 8023a20:	701a      	strb	r2, [r3, #0]
    default:
        break;
 8023a22:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8023a24:	4b32      	ldr	r3, [pc, #200]	; (8023af0 <nand_read_data+0x168>)
 8023a26:	799b      	ldrb	r3, [r3, #6]
 8023a28:	3b01      	subs	r3, #1
 8023a2a:	2b03      	cmp	r3, #3
 8023a2c:	d83c      	bhi.n	8023aa8 <nand_read_data+0x120>
 8023a2e:	a201      	add	r2, pc, #4	; (adr r2, 8023a34 <nand_read_data+0xac>)
 8023a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023a34:	08023a45 	.word	0x08023a45
 8023a38:	08023a4f 	.word	0x08023a4f
 8023a3c:	08023a63 	.word	0x08023a63
 8023a40:	08023a81 	.word	0x08023a81
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023a44:	4b2b      	ldr	r3, [pc, #172]	; (8023af4 <nand_read_data+0x16c>)
 8023a46:	68ba      	ldr	r2, [r7, #8]
 8023a48:	b2d2      	uxtb	r2, r2
 8023a4a:	701a      	strb	r2, [r3, #0]
        break;
 8023a4c:	e02d      	b.n	8023aaa <nand_read_data+0x122>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023a4e:	4b29      	ldr	r3, [pc, #164]	; (8023af4 <nand_read_data+0x16c>)
 8023a50:	68ba      	ldr	r2, [r7, #8]
 8023a52:	b2d2      	uxtb	r2, r2
 8023a54:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8023a56:	68bb      	ldr	r3, [r7, #8]
 8023a58:	0a1a      	lsrs	r2, r3, #8
 8023a5a:	4b26      	ldr	r3, [pc, #152]	; (8023af4 <nand_read_data+0x16c>)
 8023a5c:	b2d2      	uxtb	r2, r2
 8023a5e:	701a      	strb	r2, [r3, #0]
        break;
 8023a60:	e023      	b.n	8023aaa <nand_read_data+0x122>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023a62:	4b24      	ldr	r3, [pc, #144]	; (8023af4 <nand_read_data+0x16c>)
 8023a64:	68ba      	ldr	r2, [r7, #8]
 8023a66:	b2d2      	uxtb	r2, r2
 8023a68:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8023a6a:	68bb      	ldr	r3, [r7, #8]
 8023a6c:	0a1a      	lsrs	r2, r3, #8
 8023a6e:	4b21      	ldr	r3, [pc, #132]	; (8023af4 <nand_read_data+0x16c>)
 8023a70:	b2d2      	uxtb	r2, r2
 8023a72:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8023a74:	68bb      	ldr	r3, [r7, #8]
 8023a76:	0c1a      	lsrs	r2, r3, #16
 8023a78:	4b1e      	ldr	r3, [pc, #120]	; (8023af4 <nand_read_data+0x16c>)
 8023a7a:	b2d2      	uxtb	r2, r2
 8023a7c:	701a      	strb	r2, [r3, #0]
        break;
 8023a7e:	e014      	b.n	8023aaa <nand_read_data+0x122>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023a80:	4b1c      	ldr	r3, [pc, #112]	; (8023af4 <nand_read_data+0x16c>)
 8023a82:	68ba      	ldr	r2, [r7, #8]
 8023a84:	b2d2      	uxtb	r2, r2
 8023a86:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8023a88:	68bb      	ldr	r3, [r7, #8]
 8023a8a:	0a1a      	lsrs	r2, r3, #8
 8023a8c:	4b19      	ldr	r3, [pc, #100]	; (8023af4 <nand_read_data+0x16c>)
 8023a8e:	b2d2      	uxtb	r2, r2
 8023a90:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8023a92:	68bb      	ldr	r3, [r7, #8]
 8023a94:	0c1a      	lsrs	r2, r3, #16
 8023a96:	4b17      	ldr	r3, [pc, #92]	; (8023af4 <nand_read_data+0x16c>)
 8023a98:	b2d2      	uxtb	r2, r2
 8023a9a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 8023a9c:	68bb      	ldr	r3, [r7, #8]
 8023a9e:	0e1a      	lsrs	r2, r3, #24
 8023aa0:	4b14      	ldr	r3, [pc, #80]	; (8023af4 <nand_read_data+0x16c>)
 8023aa2:	b2d2      	uxtb	r2, r2
 8023aa4:	701a      	strb	r2, [r3, #0]
        break;
 8023aa6:	e000      	b.n	8023aaa <nand_read_data+0x122>
    default:
        break;
 8023aa8:	bf00      	nop
    }

    if (fsmc_conf.read2_cmd != UNDEFINED_CMD)
 8023aaa:	4b11      	ldr	r3, [pc, #68]	; (8023af0 <nand_read_data+0x168>)
 8023aac:	7a5b      	ldrb	r3, [r3, #9]
 8023aae:	2bff      	cmp	r3, #255	; 0xff
 8023ab0:	d003      	beq.n	8023aba <nand_read_data+0x132>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read2_cmd;  // 发送读取命令2给NAND Flash
 8023ab2:	4b0e      	ldr	r3, [pc, #56]	; (8023aec <nand_read_data+0x164>)
 8023ab4:	4a0e      	ldr	r2, [pc, #56]	; (8023af0 <nand_read_data+0x168>)
 8023ab6:	7a52      	ldrb	r2, [r2, #9]
 8023ab8:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < data_size; i++)
 8023aba:	2300      	movs	r3, #0
 8023abc:	617b      	str	r3, [r7, #20]
 8023abe:	e00a      	b.n	8023ad6 <nand_read_data+0x14e>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 8023ac0:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8023ac4:	68fa      	ldr	r2, [r7, #12]
 8023ac6:	697b      	ldr	r3, [r7, #20]
 8023ac8:	4413      	add	r3, r2
 8023aca:	780a      	ldrb	r2, [r1, #0]
 8023acc:	b2d2      	uxtb	r2, r2
 8023ace:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 8023ad0:	697b      	ldr	r3, [r7, #20]
 8023ad2:	3301      	adds	r3, #1
 8023ad4:	617b      	str	r3, [r7, #20]
 8023ad6:	697a      	ldr	r2, [r7, #20]
 8023ad8:	683b      	ldr	r3, [r7, #0]
 8023ada:	429a      	cmp	r2, r3
 8023adc:	d3f0      	bcc.n	8023ac0 <nand_read_data+0x138>

    return nand_get_status();  // 获取NAND Flash的状态
 8023ade:	f7ff fe4f 	bl	8023780 <nand_get_status>
 8023ae2:	4603      	mov	r3, r0
}
 8023ae4:	4618      	mov	r0, r3
 8023ae6:	3718      	adds	r7, #24
 8023ae8:	46bd      	mov	sp, r7
 8023aea:	bd80      	pop	{r7, pc}
 8023aec:	70010000 	.word	0x70010000
 8023af0:	200012a0 	.word	0x200012a0
 8023af4:	70020000 	.word	0x70020000

08023af8 <nand_read_page>:

// 从NAND Flash读取数据页
static uint32_t nand_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8023af8:	b580      	push	{r7, lr}
 8023afa:	b084      	sub	sp, #16
 8023afc:	af00      	add	r7, sp, #0
 8023afe:	60f8      	str	r0, [r7, #12]
 8023b00:	60b9      	str	r1, [r7, #8]
 8023b02:	607a      	str	r2, [r7, #4]
    return nand_read_data(buf, page, 0, page_size);
 8023b04:	687b      	ldr	r3, [r7, #4]
 8023b06:	2200      	movs	r2, #0
 8023b08:	68b9      	ldr	r1, [r7, #8]
 8023b0a:	68f8      	ldr	r0, [r7, #12]
 8023b0c:	f7ff ff3c 	bl	8023988 <nand_read_data>
 8023b10:	4603      	mov	r3, r0
}
 8023b12:	4618      	mov	r0, r3
 8023b14:	3710      	adds	r7, #16
 8023b16:	46bd      	mov	sp, r7
 8023b18:	bd80      	pop	{r7, pc}
	...

08023b1c <nand_read_spare_data>:

// 从NAND Flash读取备用数据
static uint32_t nand_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 8023b1c:	b580      	push	{r7, lr}
 8023b1e:	b086      	sub	sp, #24
 8023b20:	af00      	add	r7, sp, #0
 8023b22:	60f8      	str	r0, [r7, #12]
 8023b24:	60b9      	str	r1, [r7, #8]
 8023b26:	607a      	str	r2, [r7, #4]
 8023b28:	603b      	str	r3, [r7, #0]
    uint32_t i;

    if (fsmc_conf.read_spare_cmd == UNDEFINED_CMD)
 8023b2a:	4b54      	ldr	r3, [pc, #336]	; (8023c7c <nand_read_spare_data+0x160>)
 8023b2c:	7a9b      	ldrb	r3, [r3, #10]
 8023b2e:	2bff      	cmp	r3, #255	; 0xff
 8023b30:	d101      	bne.n	8023b36 <nand_read_spare_data+0x1a>
        return FLASH_STATUS_INVALID_CMD;
 8023b32:	2304      	movs	r3, #4
 8023b34:	e09e      	b.n	8023c74 <nand_read_spare_data+0x158>

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_spare_cmd;  // 发送读取备用数据命令给NAND Flash
 8023b36:	4b52      	ldr	r3, [pc, #328]	; (8023c80 <nand_read_spare_data+0x164>)
 8023b38:	4a50      	ldr	r2, [pc, #320]	; (8023c7c <nand_read_spare_data+0x160>)
 8023b3a:	7a92      	ldrb	r2, [r2, #10]
 8023b3c:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8023b3e:	4b4f      	ldr	r3, [pc, #316]	; (8023c7c <nand_read_spare_data+0x160>)
 8023b40:	79db      	ldrb	r3, [r3, #7]
 8023b42:	3b01      	subs	r3, #1
 8023b44:	2b03      	cmp	r3, #3
 8023b46:	d83c      	bhi.n	8023bc2 <nand_read_spare_data+0xa6>
 8023b48:	a201      	add	r2, pc, #4	; (adr r2, 8023b50 <nand_read_spare_data+0x34>)
 8023b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023b4e:	bf00      	nop
 8023b50:	08023b61 	.word	0x08023b61
 8023b54:	08023b6b 	.word	0x08023b6b
 8023b58:	08023b7f 	.word	0x08023b7f
 8023b5c:	08023b9d 	.word	0x08023b9d
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023b60:	4b48      	ldr	r3, [pc, #288]	; (8023c84 <nand_read_spare_data+0x168>)
 8023b62:	687a      	ldr	r2, [r7, #4]
 8023b64:	b2d2      	uxtb	r2, r2
 8023b66:	701a      	strb	r2, [r3, #0]
        break;
 8023b68:	e02c      	b.n	8023bc4 <nand_read_spare_data+0xa8>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023b6a:	4b46      	ldr	r3, [pc, #280]	; (8023c84 <nand_read_spare_data+0x168>)
 8023b6c:	687a      	ldr	r2, [r7, #4]
 8023b6e:	b2d2      	uxtb	r2, r2
 8023b70:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8023b72:	687b      	ldr	r3, [r7, #4]
 8023b74:	0a1a      	lsrs	r2, r3, #8
 8023b76:	4b43      	ldr	r3, [pc, #268]	; (8023c84 <nand_read_spare_data+0x168>)
 8023b78:	b2d2      	uxtb	r2, r2
 8023b7a:	701a      	strb	r2, [r3, #0]
        break;
 8023b7c:	e022      	b.n	8023bc4 <nand_read_spare_data+0xa8>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023b7e:	4b41      	ldr	r3, [pc, #260]	; (8023c84 <nand_read_spare_data+0x168>)
 8023b80:	687a      	ldr	r2, [r7, #4]
 8023b82:	b2d2      	uxtb	r2, r2
 8023b84:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8023b86:	687b      	ldr	r3, [r7, #4]
 8023b88:	0a1a      	lsrs	r2, r3, #8
 8023b8a:	4b3e      	ldr	r3, [pc, #248]	; (8023c84 <nand_read_spare_data+0x168>)
 8023b8c:	b2d2      	uxtb	r2, r2
 8023b8e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	0c1a      	lsrs	r2, r3, #16
 8023b94:	4b3b      	ldr	r3, [pc, #236]	; (8023c84 <nand_read_spare_data+0x168>)
 8023b96:	b2d2      	uxtb	r2, r2
 8023b98:	701a      	strb	r2, [r3, #0]
        break;
 8023b9a:	e013      	b.n	8023bc4 <nand_read_spare_data+0xa8>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023b9c:	4b39      	ldr	r3, [pc, #228]	; (8023c84 <nand_read_spare_data+0x168>)
 8023b9e:	687a      	ldr	r2, [r7, #4]
 8023ba0:	b2d2      	uxtb	r2, r2
 8023ba2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8023ba4:	687b      	ldr	r3, [r7, #4]
 8023ba6:	0a1a      	lsrs	r2, r3, #8
 8023ba8:	4b36      	ldr	r3, [pc, #216]	; (8023c84 <nand_read_spare_data+0x168>)
 8023baa:	b2d2      	uxtb	r2, r2
 8023bac:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 8023bae:	687b      	ldr	r3, [r7, #4]
 8023bb0:	0c1a      	lsrs	r2, r3, #16
 8023bb2:	4b34      	ldr	r3, [pc, #208]	; (8023c84 <nand_read_spare_data+0x168>)
 8023bb4:	b2d2      	uxtb	r2, r2
 8023bb6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(offset);  // 发送列地址的第4个周期
 8023bb8:	687b      	ldr	r3, [r7, #4]
 8023bba:	0e1a      	lsrs	r2, r3, #24
 8023bbc:	4b31      	ldr	r3, [pc, #196]	; (8023c84 <nand_read_spare_data+0x168>)
 8023bbe:	b2d2      	uxtb	r2, r2
 8023bc0:	701a      	strb	r2, [r3, #0]
    default:
        break;
 8023bc2:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8023bc4:	4b2d      	ldr	r3, [pc, #180]	; (8023c7c <nand_read_spare_data+0x160>)
 8023bc6:	799b      	ldrb	r3, [r3, #6]
 8023bc8:	3b01      	subs	r3, #1
 8023bca:	2b03      	cmp	r3, #3
 8023bcc:	d83c      	bhi.n	8023c48 <nand_read_spare_data+0x12c>
 8023bce:	a201      	add	r2, pc, #4	; (adr r2, 8023bd4 <nand_read_spare_data+0xb8>)
 8023bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023bd4:	08023be5 	.word	0x08023be5
 8023bd8:	08023bef 	.word	0x08023bef
 8023bdc:	08023c03 	.word	0x08023c03
 8023be0:	08023c21 	.word	0x08023c21
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023be4:	4b27      	ldr	r3, [pc, #156]	; (8023c84 <nand_read_spare_data+0x168>)
 8023be6:	68ba      	ldr	r2, [r7, #8]
 8023be8:	b2d2      	uxtb	r2, r2
 8023bea:	701a      	strb	r2, [r3, #0]
        break;
 8023bec:	e02d      	b.n	8023c4a <nand_read_spare_data+0x12e>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023bee:	4b25      	ldr	r3, [pc, #148]	; (8023c84 <nand_read_spare_data+0x168>)
 8023bf0:	68ba      	ldr	r2, [r7, #8]
 8023bf2:	b2d2      	uxtb	r2, r2
 8023bf4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023bf6:	68bb      	ldr	r3, [r7, #8]
 8023bf8:	0a1a      	lsrs	r2, r3, #8
 8023bfa:	4b22      	ldr	r3, [pc, #136]	; (8023c84 <nand_read_spare_data+0x168>)
 8023bfc:	b2d2      	uxtb	r2, r2
 8023bfe:	701a      	strb	r2, [r3, #0]
        break;
 8023c00:	e023      	b.n	8023c4a <nand_read_spare_data+0x12e>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023c02:	4b20      	ldr	r3, [pc, #128]	; (8023c84 <nand_read_spare_data+0x168>)
 8023c04:	68ba      	ldr	r2, [r7, #8]
 8023c06:	b2d2      	uxtb	r2, r2
 8023c08:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023c0a:	68bb      	ldr	r3, [r7, #8]
 8023c0c:	0a1a      	lsrs	r2, r3, #8
 8023c0e:	4b1d      	ldr	r3, [pc, #116]	; (8023c84 <nand_read_spare_data+0x168>)
 8023c10:	b2d2      	uxtb	r2, r2
 8023c12:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023c14:	68bb      	ldr	r3, [r7, #8]
 8023c16:	0c1a      	lsrs	r2, r3, #16
 8023c18:	4b1a      	ldr	r3, [pc, #104]	; (8023c84 <nand_read_spare_data+0x168>)
 8023c1a:	b2d2      	uxtb	r2, r2
 8023c1c:	701a      	strb	r2, [r3, #0]
        break;
 8023c1e:	e014      	b.n	8023c4a <nand_read_spare_data+0x12e>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023c20:	4b18      	ldr	r3, [pc, #96]	; (8023c84 <nand_read_spare_data+0x168>)
 8023c22:	68ba      	ldr	r2, [r7, #8]
 8023c24:	b2d2      	uxtb	r2, r2
 8023c26:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023c28:	68bb      	ldr	r3, [r7, #8]
 8023c2a:	0a1a      	lsrs	r2, r3, #8
 8023c2c:	4b15      	ldr	r3, [pc, #84]	; (8023c84 <nand_read_spare_data+0x168>)
 8023c2e:	b2d2      	uxtb	r2, r2
 8023c30:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023c32:	68bb      	ldr	r3, [r7, #8]
 8023c34:	0c1a      	lsrs	r2, r3, #16
 8023c36:	4b13      	ldr	r3, [pc, #76]	; (8023c84 <nand_read_spare_data+0x168>)
 8023c38:	b2d2      	uxtb	r2, r2
 8023c3a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 8023c3c:	68bb      	ldr	r3, [r7, #8]
 8023c3e:	0e1a      	lsrs	r2, r3, #24
 8023c40:	4b10      	ldr	r3, [pc, #64]	; (8023c84 <nand_read_spare_data+0x168>)
 8023c42:	b2d2      	uxtb	r2, r2
 8023c44:	701a      	strb	r2, [r3, #0]
        break;
 8023c46:	e000      	b.n	8023c4a <nand_read_spare_data+0x12e>
    default:
        break;
 8023c48:	bf00      	nop
    }

    for (i = 0; i < data_size; i++)
 8023c4a:	2300      	movs	r3, #0
 8023c4c:	617b      	str	r3, [r7, #20]
 8023c4e:	e00a      	b.n	8023c66 <nand_read_spare_data+0x14a>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 8023c50:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8023c54:	68fa      	ldr	r2, [r7, #12]
 8023c56:	697b      	ldr	r3, [r7, #20]
 8023c58:	4413      	add	r3, r2
 8023c5a:	780a      	ldrb	r2, [r1, #0]
 8023c5c:	b2d2      	uxtb	r2, r2
 8023c5e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 8023c60:	697b      	ldr	r3, [r7, #20]
 8023c62:	3301      	adds	r3, #1
 8023c64:	617b      	str	r3, [r7, #20]
 8023c66:	697a      	ldr	r2, [r7, #20]
 8023c68:	683b      	ldr	r3, [r7, #0]
 8023c6a:	429a      	cmp	r2, r3
 8023c6c:	d3f0      	bcc.n	8023c50 <nand_read_spare_data+0x134>

    return nand_get_status();  // 获取NAND Flash的状态
 8023c6e:	f7ff fd87 	bl	8023780 <nand_get_status>
 8023c72:	4603      	mov	r3, r0
}
 8023c74:	4618      	mov	r0, r3
 8023c76:	3718      	adds	r7, #24
 8023c78:	46bd      	mov	sp, r7
 8023c7a:	bd80      	pop	{r7, pc}
 8023c7c:	200012a0 	.word	0x200012a0
 8023c80:	70010000 	.word	0x70010000
 8023c84:	70020000 	.word	0x70020000

08023c88 <nand_erase_block>:

// 擦除NAND Flash的块
static uint32_t nand_erase_block(uint32_t page)
{
 8023c88:	b580      	push	{r7, lr}
 8023c8a:	b082      	sub	sp, #8
 8023c8c:	af00      	add	r7, sp, #0
 8023c8e:	6078      	str	r0, [r7, #4]
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase1_cmd;  // 发送擦除命令1给NAND Flash
 8023c90:	4b2a      	ldr	r3, [pc, #168]	; (8023d3c <nand_erase_block+0xb4>)
 8023c92:	4a2b      	ldr	r2, [pc, #172]	; (8023d40 <nand_erase_block+0xb8>)
 8023c94:	7bd2      	ldrb	r2, [r2, #15]
 8023c96:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.row_cycles)
 8023c98:	4b29      	ldr	r3, [pc, #164]	; (8023d40 <nand_erase_block+0xb8>)
 8023c9a:	799b      	ldrb	r3, [r3, #6]
 8023c9c:	3b01      	subs	r3, #1
 8023c9e:	2b03      	cmp	r3, #3
 8023ca0:	d83c      	bhi.n	8023d1c <nand_erase_block+0x94>
 8023ca2:	a201      	add	r2, pc, #4	; (adr r2, 8023ca8 <nand_erase_block+0x20>)
 8023ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023ca8:	08023cb9 	.word	0x08023cb9
 8023cac:	08023cc3 	.word	0x08023cc3
 8023cb0:	08023cd7 	.word	0x08023cd7
 8023cb4:	08023cf5 	.word	0x08023cf5
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023cb8:	4b22      	ldr	r3, [pc, #136]	; (8023d44 <nand_erase_block+0xbc>)
 8023cba:	687a      	ldr	r2, [r7, #4]
 8023cbc:	b2d2      	uxtb	r2, r2
 8023cbe:	701a      	strb	r2, [r3, #0]
        break;
 8023cc0:	e02d      	b.n	8023d1e <nand_erase_block+0x96>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023cc2:	4b20      	ldr	r3, [pc, #128]	; (8023d44 <nand_erase_block+0xbc>)
 8023cc4:	687a      	ldr	r2, [r7, #4]
 8023cc6:	b2d2      	uxtb	r2, r2
 8023cc8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023cca:	687b      	ldr	r3, [r7, #4]
 8023ccc:	0a1a      	lsrs	r2, r3, #8
 8023cce:	4b1d      	ldr	r3, [pc, #116]	; (8023d44 <nand_erase_block+0xbc>)
 8023cd0:	b2d2      	uxtb	r2, r2
 8023cd2:	701a      	strb	r2, [r3, #0]
        break;
 8023cd4:	e023      	b.n	8023d1e <nand_erase_block+0x96>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023cd6:	4b1b      	ldr	r3, [pc, #108]	; (8023d44 <nand_erase_block+0xbc>)
 8023cd8:	687a      	ldr	r2, [r7, #4]
 8023cda:	b2d2      	uxtb	r2, r2
 8023cdc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023cde:	687b      	ldr	r3, [r7, #4]
 8023ce0:	0a1a      	lsrs	r2, r3, #8
 8023ce2:	4b18      	ldr	r3, [pc, #96]	; (8023d44 <nand_erase_block+0xbc>)
 8023ce4:	b2d2      	uxtb	r2, r2
 8023ce6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	0c1a      	lsrs	r2, r3, #16
 8023cec:	4b15      	ldr	r3, [pc, #84]	; (8023d44 <nand_erase_block+0xbc>)
 8023cee:	b2d2      	uxtb	r2, r2
 8023cf0:	701a      	strb	r2, [r3, #0]
        break;
 8023cf2:	e014      	b.n	8023d1e <nand_erase_block+0x96>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023cf4:	4b13      	ldr	r3, [pc, #76]	; (8023d44 <nand_erase_block+0xbc>)
 8023cf6:	687a      	ldr	r2, [r7, #4]
 8023cf8:	b2d2      	uxtb	r2, r2
 8023cfa:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023cfc:	687b      	ldr	r3, [r7, #4]
 8023cfe:	0a1a      	lsrs	r2, r3, #8
 8023d00:	4b10      	ldr	r3, [pc, #64]	; (8023d44 <nand_erase_block+0xbc>)
 8023d02:	b2d2      	uxtb	r2, r2
 8023d04:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023d06:	687b      	ldr	r3, [r7, #4]
 8023d08:	0c1a      	lsrs	r2, r3, #16
 8023d0a:	4b0e      	ldr	r3, [pc, #56]	; (8023d44 <nand_erase_block+0xbc>)
 8023d0c:	b2d2      	uxtb	r2, r2
 8023d0e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 8023d10:	687b      	ldr	r3, [r7, #4]
 8023d12:	0e1a      	lsrs	r2, r3, #24
 8023d14:	4b0b      	ldr	r3, [pc, #44]	; (8023d44 <nand_erase_block+0xbc>)
 8023d16:	b2d2      	uxtb	r2, r2
 8023d18:	701a      	strb	r2, [r3, #0]
        break;
 8023d1a:	e000      	b.n	8023d1e <nand_erase_block+0x96>
    default:
        break;
 8023d1c:	bf00      	nop
    }

    if (fsmc_conf.erase2_cmd != UNDEFINED_CMD)
 8023d1e:	4b08      	ldr	r3, [pc, #32]	; (8023d40 <nand_erase_block+0xb8>)
 8023d20:	7c1b      	ldrb	r3, [r3, #16]
 8023d22:	2bff      	cmp	r3, #255	; 0xff
 8023d24:	d003      	beq.n	8023d2e <nand_erase_block+0xa6>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase2_cmd;  // 发送擦除命令2给NAND Flash
 8023d26:	4b05      	ldr	r3, [pc, #20]	; (8023d3c <nand_erase_block+0xb4>)
 8023d28:	4a05      	ldr	r2, [pc, #20]	; (8023d40 <nand_erase_block+0xb8>)
 8023d2a:	7c12      	ldrb	r2, [r2, #16]
 8023d2c:	701a      	strb	r2, [r3, #0]

    return nand_get_status();  // 获取NAND Flash的状态
 8023d2e:	f7ff fd27 	bl	8023780 <nand_get_status>
 8023d32:	4603      	mov	r3, r0
}
 8023d34:	4618      	mov	r0, r3
 8023d36:	3708      	adds	r7, #8
 8023d38:	46bd      	mov	sp, r7
 8023d3a:	bd80      	pop	{r7, pc}
 8023d3c:	70010000 	.word	0x70010000
 8023d40:	200012a0 	.word	0x200012a0
 8023d44:	70020000 	.word	0x70020000

08023d48 <nand_is_bb_supported>:

// 检查是否支持坏块
static inline bool nand_is_bb_supported()
{
 8023d48:	b480      	push	{r7}
 8023d4a:	af00      	add	r7, sp, #0
    return true;
 8023d4c:	2301      	movs	r3, #1
}
 8023d4e:	4618      	mov	r0, r3
 8023d50:	46bd      	mov	sp, r7
 8023d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d56:	4770      	bx	lr

08023d58 <nand_enable_hw_ecc>:

// 启用或禁用硬件ECC
static uint32_t nand_enable_hw_ecc(bool enable)
{
 8023d58:	b480      	push	{r7}
 8023d5a:	b085      	sub	sp, #20
 8023d5c:	af00      	add	r7, sp, #0
 8023d5e:	4603      	mov	r3, r0
 8023d60:	71fb      	strb	r3, [r7, #7]
    uint8_t enable_ecc;

    if (fsmc_conf.set_features_cmd == UNDEFINED_CMD)
 8023d62:	4b17      	ldr	r3, [pc, #92]	; (8023dc0 <nand_enable_hw_ecc+0x68>)
 8023d64:	7c9b      	ldrb	r3, [r3, #18]
 8023d66:	2bff      	cmp	r3, #255	; 0xff
 8023d68:	d101      	bne.n	8023d6e <nand_enable_hw_ecc+0x16>
        return FLASH_STATUS_INVALID_CMD;
 8023d6a:	2304      	movs	r3, #4
 8023d6c:	e021      	b.n	8023db2 <nand_enable_hw_ecc+0x5a>

    enable_ecc = enable ? fsmc_conf.enable_ecc_value : fsmc_conf.disable_ecc_value;
 8023d6e:	79fb      	ldrb	r3, [r7, #7]
 8023d70:	2b00      	cmp	r3, #0
 8023d72:	d002      	beq.n	8023d7a <nand_enable_hw_ecc+0x22>
 8023d74:	4b12      	ldr	r3, [pc, #72]	; (8023dc0 <nand_enable_hw_ecc+0x68>)
 8023d76:	7d1b      	ldrb	r3, [r3, #20]
 8023d78:	e001      	b.n	8023d7e <nand_enable_hw_ecc+0x26>
 8023d7a:	4b11      	ldr	r3, [pc, #68]	; (8023dc0 <nand_enable_hw_ecc+0x68>)
 8023d7c:	7d5b      	ldrb	r3, [r3, #21]
 8023d7e:	73fb      	strb	r3, [r7, #15]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.set_features_cmd;  // 发送设置特性命令给NAND Flash
 8023d80:	4b10      	ldr	r3, [pc, #64]	; (8023dc4 <nand_enable_hw_ecc+0x6c>)
 8023d82:	4a0f      	ldr	r2, [pc, #60]	; (8023dc0 <nand_enable_hw_ecc+0x68>)
 8023d84:	7c92      	ldrb	r2, [r2, #18]
 8023d86:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = fsmc_conf.enable_ecc_addr;  // 发送使能ECC地址
 8023d88:	4b0f      	ldr	r3, [pc, #60]	; (8023dc8 <nand_enable_hw_ecc+0x70>)
 8023d8a:	4a0d      	ldr	r2, [pc, #52]	; (8023dc0 <nand_enable_hw_ecc+0x68>)
 8023d8c:	7cd2      	ldrb	r2, [r2, #19]
 8023d8e:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = enable_ecc;  // 发送使能ECC的值
 8023d90:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8023d94:	7bfb      	ldrb	r3, [r7, #15]
 8023d96:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023d98:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023d9c:	2200      	movs	r2, #0
 8023d9e:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023da0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023da4:	2200      	movs	r2, #0
 8023da6:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023da8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023dac:	2200      	movs	r2, #0
 8023dae:	701a      	strb	r2, [r3, #0]

    return 0;
 8023db0:	2300      	movs	r3, #0
}
 8023db2:	4618      	mov	r0, r3
 8023db4:	3714      	adds	r7, #20
 8023db6:	46bd      	mov	sp, r7
 8023db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dbc:	4770      	bx	lr
 8023dbe:	bf00      	nop
 8023dc0:	200012a0 	.word	0x200012a0
 8023dc4:	70010000 	.word	0x70010000
 8023dc8:	70020000 	.word	0x70020000

08023dcc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8023dcc:	b580      	push	{r7, lr}
 8023dce:	b08c      	sub	sp, #48	; 0x30
 8023dd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023dd2:	f107 031c 	add.w	r3, r7, #28
 8023dd6:	2200      	movs	r2, #0
 8023dd8:	601a      	str	r2, [r3, #0]
 8023dda:	605a      	str	r2, [r3, #4]
 8023ddc:	609a      	str	r2, [r3, #8]
 8023dde:	60da      	str	r2, [r3, #12]
 8023de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8023de2:	2300      	movs	r3, #0
 8023de4:	61bb      	str	r3, [r7, #24]
 8023de6:	4b68      	ldr	r3, [pc, #416]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dea:	4a67      	ldr	r2, [pc, #412]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023dec:	f043 0310 	orr.w	r3, r3, #16
 8023df0:	6313      	str	r3, [r2, #48]	; 0x30
 8023df2:	4b65      	ldr	r3, [pc, #404]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023df6:	f003 0310 	and.w	r3, r3, #16
 8023dfa:	61bb      	str	r3, [r7, #24]
 8023dfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023dfe:	2300      	movs	r3, #0
 8023e00:	617b      	str	r3, [r7, #20]
 8023e02:	4b61      	ldr	r3, [pc, #388]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e06:	4a60      	ldr	r2, [pc, #384]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e08:	f043 0304 	orr.w	r3, r3, #4
 8023e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8023e0e:	4b5e      	ldr	r3, [pc, #376]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e12:	f003 0304 	and.w	r3, r3, #4
 8023e16:	617b      	str	r3, [r7, #20]
 8023e18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8023e1a:	2300      	movs	r3, #0
 8023e1c:	613b      	str	r3, [r7, #16]
 8023e1e:	4b5a      	ldr	r3, [pc, #360]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e22:	4a59      	ldr	r2, [pc, #356]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023e28:	6313      	str	r3, [r2, #48]	; 0x30
 8023e2a:	4b57      	ldr	r3, [pc, #348]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023e32:	613b      	str	r3, [r7, #16]
 8023e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8023e36:	2300      	movs	r3, #0
 8023e38:	60fb      	str	r3, [r7, #12]
 8023e3a:	4b53      	ldr	r3, [pc, #332]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e3e:	4a52      	ldr	r2, [pc, #328]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e40:	f043 0301 	orr.w	r3, r3, #1
 8023e44:	6313      	str	r3, [r2, #48]	; 0x30
 8023e46:	4b50      	ldr	r3, [pc, #320]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e4a:	f003 0301 	and.w	r3, r3, #1
 8023e4e:	60fb      	str	r3, [r7, #12]
 8023e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023e52:	2300      	movs	r3, #0
 8023e54:	60bb      	str	r3, [r7, #8]
 8023e56:	4b4c      	ldr	r3, [pc, #304]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e5a:	4a4b      	ldr	r2, [pc, #300]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e5c:	f043 0302 	orr.w	r3, r3, #2
 8023e60:	6313      	str	r3, [r2, #48]	; 0x30
 8023e62:	4b49      	ldr	r3, [pc, #292]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e66:	f003 0302 	and.w	r3, r3, #2
 8023e6a:	60bb      	str	r3, [r7, #8]
 8023e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023e6e:	2300      	movs	r3, #0
 8023e70:	607b      	str	r3, [r7, #4]
 8023e72:	4b45      	ldr	r3, [pc, #276]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e76:	4a44      	ldr	r2, [pc, #272]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e78:	f043 0308 	orr.w	r3, r3, #8
 8023e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8023e7e:	4b42      	ldr	r3, [pc, #264]	; (8023f88 <MX_GPIO_Init+0x1bc>)
 8023e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e82:	f003 0308 	and.w	r3, r3, #8
 8023e86:	607b      	str	r3, [r7, #4]
 8023e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8023e8a:	2201      	movs	r2, #1
 8023e8c:	2104      	movs	r1, #4
 8023e8e:	483f      	ldr	r0, [pc, #252]	; (8023f8c <MX_GPIO_Init+0x1c0>)
 8023e90:	f004 ff6a 	bl	8028d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8023e94:	2200      	movs	r2, #0
 8023e96:	2140      	movs	r1, #64	; 0x40
 8023e98:	483c      	ldr	r0, [pc, #240]	; (8023f8c <MX_GPIO_Init+0x1c0>)
 8023e9a:	f004 ff65 	bl	8028d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8023e9e:	2200      	movs	r2, #0
 8023ea0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8023ea4:	483a      	ldr	r0, [pc, #232]	; (8023f90 <MX_GPIO_Init+0x1c4>)
 8023ea6:	f004 ff5f 	bl	8028d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8023eaa:	2304      	movs	r3, #4
 8023eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023eae:	2301      	movs	r3, #1
 8023eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023eb2:	2301      	movs	r3, #1
 8023eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8023eb6:	2301      	movs	r3, #1
 8023eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8023eba:	f107 031c 	add.w	r3, r7, #28
 8023ebe:	4619      	mov	r1, r3
 8023ec0:	4832      	ldr	r0, [pc, #200]	; (8023f8c <MX_GPIO_Init+0x1c0>)
 8023ec2:	f004 fcb9 	bl	8028838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE4 PE5 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_0
 8023ec6:	233b      	movs	r3, #59	; 0x3b
 8023ec8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023eca:	2303      	movs	r3, #3
 8023ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023ece:	2300      	movs	r3, #0
 8023ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8023ed2:	f107 031c 	add.w	r3, r7, #28
 8023ed6:	4619      	mov	r1, r3
 8023ed8:	482c      	ldr	r0, [pc, #176]	; (8023f8c <MX_GPIO_Init+0x1c0>)
 8023eda:	f004 fcad 	bl	8028838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8023ede:	2340      	movs	r3, #64	; 0x40
 8023ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023ee2:	2301      	movs	r3, #1
 8023ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023ee6:	2301      	movs	r3, #1
 8023ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023eea:	2300      	movs	r3, #0
 8023eec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8023eee:	f107 031c 	add.w	r3, r7, #28
 8023ef2:	4619      	mov	r1, r3
 8023ef4:	4825      	ldr	r0, [pc, #148]	; (8023f8c <MX_GPIO_Init+0x1c0>)
 8023ef6:	f004 fc9f 	bl	8028838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8023efa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8023efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023f00:	2301      	movs	r3, #1
 8023f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023f04:	2301      	movs	r3, #1
 8023f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023f08:	2300      	movs	r3, #0
 8023f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023f0c:	f107 031c 	add.w	r3, r7, #28
 8023f10:	4619      	mov	r1, r3
 8023f12:	481f      	ldr	r0, [pc, #124]	; (8023f90 <MX_GPIO_Init+0x1c4>)
 8023f14:	f004 fc90 	bl	8028838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8023f18:	f641 73f2 	movw	r3, #8178	; 0x1ff2
 8023f1c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023f1e:	2303      	movs	r3, #3
 8023f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023f22:	2300      	movs	r3, #0
 8023f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023f26:	f107 031c 	add.w	r3, r7, #28
 8023f2a:	4619      	mov	r1, r3
 8023f2c:	4818      	ldr	r0, [pc, #96]	; (8023f90 <MX_GPIO_Init+0x1c4>)
 8023f2e:	f004 fc83 	bl	8028838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8023f32:	f248 1317 	movw	r3, #33047	; 0x8117
 8023f36:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023f38:	2303      	movs	r3, #3
 8023f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023f3c:	2300      	movs	r3, #0
 8023f3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023f40:	f107 031c 	add.w	r3, r7, #28
 8023f44:	4619      	mov	r1, r3
 8023f46:	4813      	ldr	r0, [pc, #76]	; (8023f94 <MX_GPIO_Init+0x1c8>)
 8023f48:	f004 fc76 	bl	8028838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB15 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8023f4c:	f24c 33d4 	movw	r3, #50132	; 0xc3d4
 8023f50:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023f52:	2303      	movs	r3, #3
 8023f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023f56:	2300      	movs	r3, #0
 8023f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023f5a:	f107 031c 	add.w	r3, r7, #28
 8023f5e:	4619      	mov	r1, r3
 8023f60:	480d      	ldr	r0, [pc, #52]	; (8023f98 <MX_GPIO_Init+0x1cc>)
 8023f62:	f004 fc69 	bl	8028838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8023f66:	f242 030c 	movw	r3, #8204	; 0x200c
 8023f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023f6c:	2303      	movs	r3, #3
 8023f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023f70:	2300      	movs	r3, #0
 8023f72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023f74:	f107 031c 	add.w	r3, r7, #28
 8023f78:	4619      	mov	r1, r3
 8023f7a:	4808      	ldr	r0, [pc, #32]	; (8023f9c <MX_GPIO_Init+0x1d0>)
 8023f7c:	f004 fc5c 	bl	8028838 <HAL_GPIO_Init>

}
 8023f80:	bf00      	nop
 8023f82:	3730      	adds	r7, #48	; 0x30
 8023f84:	46bd      	mov	sp, r7
 8023f86:	bd80      	pop	{r7, pc}
 8023f88:	40023800 	.word	0x40023800
 8023f8c:	40021000 	.word	0x40021000
 8023f90:	40020800 	.word	0x40020800
 8023f94:	40020000 	.word	0x40020000
 8023f98:	40020400 	.word	0x40020400
 8023f9c:	40020c00 	.word	0x40020c00

08023fa0 <jtag_init>:
 */

#include <stm32f4xx.h>

void jtag_init()
{
 8023fa0:	b580      	push	{r7, lr}
 8023fa2:	af00      	add	r7, sp, #0
    /* Enable JTAG in low power mode */
    HAL_DBGMCU_EnableDBGSleepMode();
 8023fa4:	f003 feb6 	bl	8027d14 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8023fa8:	f003 fed4 	bl	8027d54 <HAL_DBGMCU_EnableDBGStandbyMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8023fac:	f003 fec2 	bl	8027d34 <HAL_DBGMCU_EnableDBGStopMode>
}
 8023fb0:	bf00      	nop
 8023fb2:	bd80      	pop	{r7, pc}

08023fb4 <led_init>:

#include "led.h"
#include "gpio.h"

void led_init()
{
 8023fb4:	b580      	push	{r7, lr}
 8023fb6:	b088      	sub	sp, #32
 8023fb8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023fba:	f107 030c 	add.w	r3, r7, #12
 8023fbe:	2200      	movs	r2, #0
 8023fc0:	601a      	str	r2, [r3, #0]
 8023fc2:	605a      	str	r2, [r3, #4]
 8023fc4:	609a      	str	r2, [r3, #8]
 8023fc6:	60da      	str	r2, [r3, #12]
 8023fc8:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE(); // 初始化GPIOE时钟
 8023fca:	2300      	movs	r3, #0
 8023fcc:	60bb      	str	r3, [r7, #8]
 8023fce:	4b26      	ldr	r3, [pc, #152]	; (8024068 <led_init+0xb4>)
 8023fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023fd2:	4a25      	ldr	r2, [pc, #148]	; (8024068 <led_init+0xb4>)
 8023fd4:	f043 0310 	orr.w	r3, r3, #16
 8023fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8023fda:	4b23      	ldr	r3, [pc, #140]	; (8024068 <led_init+0xb4>)
 8023fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023fde:	f003 0310 	and.w	r3, r3, #16
 8023fe2:	60bb      	str	r3, [r7, #8]
 8023fe4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE(); // 初始化GPIOC时钟
 8023fe6:	2300      	movs	r3, #0
 8023fe8:	607b      	str	r3, [r7, #4]
 8023fea:	4b1f      	ldr	r3, [pc, #124]	; (8024068 <led_init+0xb4>)
 8023fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023fee:	4a1e      	ldr	r2, [pc, #120]	; (8024068 <led_init+0xb4>)
 8023ff0:	f043 0304 	orr.w	r3, r3, #4
 8023ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8023ff6:	4b1c      	ldr	r3, [pc, #112]	; (8024068 <led_init+0xb4>)
 8023ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023ffa:	f003 0304 	and.w	r3, r3, #4
 8023ffe:	607b      	str	r3, [r7, #4]
 8024000:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8024002:	2201      	movs	r2, #1
 8024004:	2140      	movs	r1, #64	; 0x40
 8024006:	4819      	ldr	r0, [pc, #100]	; (802406c <led_init+0xb8>)
 8024008:	f004 feae 	bl	8028d68 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 802400c:	2201      	movs	r2, #1
 802400e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8024012:	4817      	ldr	r0, [pc, #92]	; (8024070 <led_init+0xbc>)
 8024014:	f004 fea8 	bl	8028d68 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = LED4_Pin;
 8024018:	2340      	movs	r3, #64	; 0x40
 802401a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802401c:	2301      	movs	r3, #1
 802401e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024020:	2301      	movs	r3, #1
 8024022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024024:	2300      	movs	r3, #0
 8024026:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8024028:	f107 030c 	add.w	r3, r7, #12
 802402c:	4619      	mov	r1, r3
 802402e:	480f      	ldr	r0, [pc, #60]	; (802406c <led_init+0xb8>)
 8024030:	f004 fc02 	bl	8028838 <HAL_GPIO_Init>

    /*Configure GPIO pins : PCPin PCPin PCPin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8024034:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8024038:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802403a:	2301      	movs	r3, #1
 802403c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802403e:	2301      	movs	r3, #1
 8024040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024042:	2300      	movs	r3, #0
 8024044:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8024046:	f107 030c 	add.w	r3, r7, #12
 802404a:	4619      	mov	r1, r3
 802404c:	4808      	ldr	r0, [pc, #32]	; (8024070 <led_init+0xbc>)
 802404e:	f004 fbf3 	bl	8028838 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, LED1_Pin | LED2_Pin, GPIO_PIN_RESET); // 将引脚0和引脚1的状态置为低电平
 8024052:	2200      	movs	r2, #0
 8024054:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8024058:	4805      	ldr	r0, [pc, #20]	; (8024070 <led_init+0xbc>)
 802405a:	f004 fe85 	bl	8028d68 <HAL_GPIO_WritePin>
}
 802405e:	bf00      	nop
 8024060:	3720      	adds	r7, #32
 8024062:	46bd      	mov	sp, r7
 8024064:	bd80      	pop	{r7, pc}
 8024066:	bf00      	nop
 8024068:	40023800 	.word	0x40023800
 802406c:	40021000 	.word	0x40021000
 8024070:	40020800 	.word	0x40020800

08024074 <led_set>:

static void led_set(GPIO_TypeDef *gpiox, uint16_t pin, bool on)
{
 8024074:	b580      	push	{r7, lr}
 8024076:	b082      	sub	sp, #8
 8024078:	af00      	add	r7, sp, #0
 802407a:	6078      	str	r0, [r7, #4]
 802407c:	460b      	mov	r3, r1
 802407e:	807b      	strh	r3, [r7, #2]
 8024080:	4613      	mov	r3, r2
 8024082:	707b      	strb	r3, [r7, #1]
    if (on)
 8024084:	787b      	ldrb	r3, [r7, #1]
 8024086:	2b00      	cmp	r3, #0
 8024088:	d006      	beq.n	8024098 <led_set+0x24>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_SET); // 设置引脚为高电平
 802408a:	887b      	ldrh	r3, [r7, #2]
 802408c:	2201      	movs	r2, #1
 802408e:	4619      	mov	r1, r3
 8024090:	6878      	ldr	r0, [r7, #4]
 8024092:	f004 fe69 	bl	8028d68 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
}
 8024096:	e005      	b.n	80240a4 <led_set+0x30>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
 8024098:	887b      	ldrh	r3, [r7, #2]
 802409a:	2200      	movs	r2, #0
 802409c:	4619      	mov	r1, r3
 802409e:	6878      	ldr	r0, [r7, #4]
 80240a0:	f004 fe62 	bl	8028d68 <HAL_GPIO_WritePin>
}
 80240a4:	bf00      	nop
 80240a6:	3708      	adds	r7, #8
 80240a8:	46bd      	mov	sp, r7
 80240aa:	bd80      	pop	{r7, pc}

080240ac <led_wr_set>:

void led_wr_set(bool on)
{
 80240ac:	b580      	push	{r7, lr}
 80240ae:	b082      	sub	sp, #8
 80240b0:	af00      	add	r7, sp, #0
 80240b2:	4603      	mov	r3, r0
 80240b4:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED1_Pin, on); // 设置引脚LED1的状态
 80240b6:	79fb      	ldrb	r3, [r7, #7]
 80240b8:	461a      	mov	r2, r3
 80240ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80240be:	4803      	ldr	r0, [pc, #12]	; (80240cc <led_wr_set+0x20>)
 80240c0:	f7ff ffd8 	bl	8024074 <led_set>
}
 80240c4:	bf00      	nop
 80240c6:	3708      	adds	r7, #8
 80240c8:	46bd      	mov	sp, r7
 80240ca:	bd80      	pop	{r7, pc}
 80240cc:	40020800 	.word	0x40020800

080240d0 <led_rd_set>:

void led_rd_set(bool on)
{
 80240d0:	b580      	push	{r7, lr}
 80240d2:	b082      	sub	sp, #8
 80240d4:	af00      	add	r7, sp, #0
 80240d6:	4603      	mov	r3, r0
 80240d8:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED2_Pin, on); // 设置引脚LED2的状态
 80240da:	79fb      	ldrb	r3, [r7, #7]
 80240dc:	461a      	mov	r2, r3
 80240de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80240e2:	4803      	ldr	r0, [pc, #12]	; (80240f0 <led_rd_set+0x20>)
 80240e4:	f7ff ffc6 	bl	8024074 <led_set>
}
 80240e8:	bf00      	nop
 80240ea:	3708      	adds	r7, #8
 80240ec:	46bd      	mov	sp, r7
 80240ee:	bd80      	pop	{r7, pc}
 80240f0:	40020800 	.word	0x40020800

080240f4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80240f4:	b580      	push	{r7, lr}
 80240f6:	b084      	sub	sp, #16
 80240f8:	af00      	add	r7, sp, #0
 80240fa:	60f8      	str	r0, [r7, #12]
 80240fc:	60b9      	str	r1, [r7, #8]
 80240fe:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8024100:	687b      	ldr	r3, [r7, #4]
 8024102:	b29a      	uxth	r2, r3
 8024104:	f04f 33ff 	mov.w	r3, #4294967295
 8024108:	68b9      	ldr	r1, [r7, #8]
 802410a:	4804      	ldr	r0, [pc, #16]	; (802411c <_write+0x28>)
 802410c:	f007 fe2f 	bl	802bd6e <HAL_UART_Transmit>
    return len;
 8024110:	687b      	ldr	r3, [r7, #4]
}
 8024112:	4618      	mov	r0, r3
 8024114:	3710      	adds	r7, #16
 8024116:	46bd      	mov	sp, r7
 8024118:	bd80      	pop	{r7, pc}
 802411a:	bf00      	nop
 802411c:	2000580c 	.word	0x2000580c

08024120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8024120:	b580      	push	{r7, lr}
 8024122:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8024124:	b662      	cpsie	i
}
 8024126:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8024128:	f003 fd5e 	bl	8027be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802412c:	f000 f852 	bl	80241d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8024130:	f7ff fe4c 	bl	8023dcc <MX_GPIO_Init>
//  MX_FSMC_Init();
  MX_RTC_Init();
 8024134:	f002 fba4 	bl	8026880 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8024138:	f003 fcb2 	bl	8027aa0 <MX_USART1_UART_Init>
//  MX_USB_DEVICE_Init();
//  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  printf("\r\nNAND programmer ver: %d.%d.%d\r\n", SW_VERSION_MAJOR,
 802413c:	2300      	movs	r3, #0
 802413e:	2205      	movs	r2, #5
 8024140:	2103      	movs	r1, #3
 8024142:	481c      	ldr	r0, [pc, #112]	; (80241b4 <main+0x94>)
 8024144:	f00d fac8 	bl	80316d8 <printf>
      SW_VERSION_MINOR, SW_VERSION_BUILD);

  if (!is_external_clock_avail())
 8024148:	f7ff f850 	bl	80231ec <is_external_clock_avail>
 802414c:	4603      	mov	r3, r0
 802414e:	f083 0301 	eor.w	r3, r3, #1
 8024152:	b2db      	uxtb	r3, r3
 8024154:	2b00      	cmp	r3, #0
 8024156:	d002      	beq.n	802415e <main+0x3e>
      printf("External clock not detected. Fallback to internal clock.\r\n");
 8024158:	4817      	ldr	r0, [pc, #92]	; (80241b8 <main+0x98>)
 802415a:	f00d fb15 	bl	8031788 <puts>

  printf("JTAG init...");
 802415e:	4817      	ldr	r0, [pc, #92]	; (80241bc <main+0x9c>)
 8024160:	f00d faba 	bl	80316d8 <printf>
  jtag_init();
 8024164:	f7ff ff1c 	bl	8023fa0 <jtag_init>
  printf("done.\r\n");
 8024168:	4815      	ldr	r0, [pc, #84]	; (80241c0 <main+0xa0>)
 802416a:	f00d fb0d 	bl	8031788 <puts>

  printf("LED init...");
 802416e:	4815      	ldr	r0, [pc, #84]	; (80241c4 <main+0xa4>)
 8024170:	f00d fab2 	bl	80316d8 <printf>
  led_init();
 8024174:	f7ff ff1e 	bl	8023fb4 <led_init>
  printf("done.\r\n");
 8024178:	4811      	ldr	r0, [pc, #68]	; (80241c0 <main+0xa0>)
 802417a:	f00d fb05 	bl	8031788 <puts>

  printf("USB init...");
 802417e:	4812      	ldr	r0, [pc, #72]	; (80241c8 <main+0xa8>)
 8024180:	f00d faaa 	bl	80316d8 <printf>
  MX_USB_DEVICE_Init();
 8024184:	f00c fa7a 	bl	803067c <MX_USB_DEVICE_Init>
  printf("done.\r\n");
 8024188:	480d      	ldr	r0, [pc, #52]	; (80241c0 <main+0xa0>)
 802418a:	f00d fafd 	bl	8031788 <puts>

  printf("CDC init...");
 802418e:	480f      	ldr	r0, [pc, #60]	; (80241cc <main+0xac>)
 8024190:	f00d faa2 	bl	80316d8 <printf>
  cdc_init();
 8024194:	f7fe fee6 	bl	8022f64 <cdc_init>
  printf("done.\r\n");
 8024198:	4809      	ldr	r0, [pc, #36]	; (80241c0 <main+0xa0>)
 802419a:	f00d faf5 	bl	8031788 <puts>

  printf("Programmer init...");
 802419e:	480c      	ldr	r0, [pc, #48]	; (80241d0 <main+0xb0>)
 80241a0:	f00d fa9a 	bl	80316d8 <printf>
  np_init();
 80241a4:	f002 fb40 	bl	8026828 <np_init>
  printf("done.\r\n");
 80241a8:	4805      	ldr	r0, [pc, #20]	; (80241c0 <main+0xa0>)
 80241aa:	f00d faed 	bl	8031788 <puts>
		printf(" W25Q256JV QuadSPI Test OK\r\n");
	else
		printf(" W25Q256JV QuadSPI Test False\r\n");*/

  while (1)
      np_handler();
 80241ae:	f002 fb4b 	bl	8026848 <np_handler>
 80241b2:	e7fc      	b.n	80241ae <main+0x8e>
 80241b4:	0803635c 	.word	0x0803635c
 80241b8:	08036380 	.word	0x08036380
 80241bc:	080363bc 	.word	0x080363bc
 80241c0:	080363cc 	.word	0x080363cc
 80241c4:	080363d4 	.word	0x080363d4
 80241c8:	080363e0 	.word	0x080363e0
 80241cc:	080363ec 	.word	0x080363ec
 80241d0:	080363f8 	.word	0x080363f8

080241d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80241d4:	b580      	push	{r7, lr}
 80241d6:	b094      	sub	sp, #80	; 0x50
 80241d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80241da:	f107 0320 	add.w	r3, r7, #32
 80241de:	2230      	movs	r2, #48	; 0x30
 80241e0:	2100      	movs	r1, #0
 80241e2:	4618      	mov	r0, r3
 80241e4:	f00d fb1b 	bl	803181e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80241e8:	f107 030c 	add.w	r3, r7, #12
 80241ec:	2200      	movs	r2, #0
 80241ee:	601a      	str	r2, [r3, #0]
 80241f0:	605a      	str	r2, [r3, #4]
 80241f2:	609a      	str	r2, [r3, #8]
 80241f4:	60da      	str	r2, [r3, #12]
 80241f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80241f8:	2300      	movs	r3, #0
 80241fa:	60bb      	str	r3, [r7, #8]
 80241fc:	4b2a      	ldr	r3, [pc, #168]	; (80242a8 <SystemClock_Config+0xd4>)
 80241fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024200:	4a29      	ldr	r2, [pc, #164]	; (80242a8 <SystemClock_Config+0xd4>)
 8024202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024206:	6413      	str	r3, [r2, #64]	; 0x40
 8024208:	4b27      	ldr	r3, [pc, #156]	; (80242a8 <SystemClock_Config+0xd4>)
 802420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802420c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024210:	60bb      	str	r3, [r7, #8]
 8024212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8024214:	2300      	movs	r3, #0
 8024216:	607b      	str	r3, [r7, #4]
 8024218:	4b24      	ldr	r3, [pc, #144]	; (80242ac <SystemClock_Config+0xd8>)
 802421a:	681b      	ldr	r3, [r3, #0]
 802421c:	4a23      	ldr	r2, [pc, #140]	; (80242ac <SystemClock_Config+0xd8>)
 802421e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024222:	6013      	str	r3, [r2, #0]
 8024224:	4b21      	ldr	r3, [pc, #132]	; (80242ac <SystemClock_Config+0xd8>)
 8024226:	681b      	ldr	r3, [r3, #0]
 8024228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802422c:	607b      	str	r3, [r7, #4]
 802422e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8024230:	2309      	movs	r3, #9
 8024232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8024234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8024238:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 802423a:	2301      	movs	r3, #1
 802423c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802423e:	2302      	movs	r3, #2
 8024240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8024242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8024246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8024248:	2305      	movs	r3, #5
 802424a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 802424c:	23a8      	movs	r3, #168	; 0xa8
 802424e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8024250:	2302      	movs	r3, #2
 8024252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8024254:	2307      	movs	r3, #7
 8024256:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8024258:	f107 0320 	add.w	r3, r7, #32
 802425c:	4618      	mov	r0, r3
 802425e:	f006 f95f 	bl	802a520 <HAL_RCC_OscConfig>
 8024262:	4603      	mov	r3, r0
 8024264:	2b00      	cmp	r3, #0
 8024266:	d001      	beq.n	802426c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8024268:	f000 f822 	bl	80242b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802426c:	230f      	movs	r3, #15
 802426e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8024270:	2302      	movs	r3, #2
 8024272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8024274:	2300      	movs	r3, #0
 8024276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8024278:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802427c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802427e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8024282:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8024284:	f107 030c 	add.w	r3, r7, #12
 8024288:	2105      	movs	r1, #5
 802428a:	4618      	mov	r0, r3
 802428c:	f006 fbc0 	bl	802aa10 <HAL_RCC_ClockConfig>
 8024290:	4603      	mov	r3, r0
 8024292:	2b00      	cmp	r3, #0
 8024294:	d001      	beq.n	802429a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8024296:	f000 f80b 	bl	80242b0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 802429a:	f006 fc9f 	bl	802abdc <HAL_RCC_EnableCSS>
}
 802429e:	bf00      	nop
 80242a0:	3750      	adds	r7, #80	; 0x50
 80242a2:	46bd      	mov	sp, r7
 80242a4:	bd80      	pop	{r7, pc}
 80242a6:	bf00      	nop
 80242a8:	40023800 	.word	0x40023800
 80242ac:	40007000 	.word	0x40007000

080242b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80242b0:	b480      	push	{r7}
 80242b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80242b4:	b672      	cpsid	i
}
 80242b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80242b8:	e7fe      	b.n	80242b8 <Error_Handler+0x8>
	...

080242bc <nand_bad_block_table_init>:

static uint32_t nand_bad_block_table_count; // NAND 坏块表中的块计数
static uint32_t nand_bad_block_table[NAND_BAD_BLOCK_TABLE_SIZE]; // NAND 坏块表

void nand_bad_block_table_init()
{
 80242bc:	b580      	push	{r7, lr}
 80242be:	af00      	add	r7, sp, #0
    memset(nand_bad_block_table, 0, sizeof(nand_bad_block_table)); // 初始化 NAND 坏块表为 0
 80242c0:	2250      	movs	r2, #80	; 0x50
 80242c2:	2100      	movs	r1, #0
 80242c4:	4803      	ldr	r0, [pc, #12]	; (80242d4 <nand_bad_block_table_init+0x18>)
 80242c6:	f00d faaa 	bl	803181e <memset>
    nand_bad_block_table_count = 0; // 初始化 NAND 坏块计数为 0
 80242ca:	4b03      	ldr	r3, [pc, #12]	; (80242d8 <nand_bad_block_table_init+0x1c>)
 80242cc:	2200      	movs	r2, #0
 80242ce:	601a      	str	r2, [r3, #0]
}
 80242d0:	bf00      	nop
 80242d2:	bd80      	pop	{r7, pc}
 80242d4:	200012c0 	.word	0x200012c0
 80242d8:	200012bc 	.word	0x200012bc

080242dc <nand_bad_block_table_add>:

int nand_bad_block_table_add(uint32_t page)
{
 80242dc:	b480      	push	{r7}
 80242de:	b083      	sub	sp, #12
 80242e0:	af00      	add	r7, sp, #0
 80242e2:	6078      	str	r0, [r7, #4]
    if (nand_bad_block_table_count == NAND_BAD_BLOCK_TABLE_SIZE)
 80242e4:	4b0b      	ldr	r3, [pc, #44]	; (8024314 <nand_bad_block_table_add+0x38>)
 80242e6:	681b      	ldr	r3, [r3, #0]
 80242e8:	2b14      	cmp	r3, #20
 80242ea:	d102      	bne.n	80242f2 <nand_bad_block_table_add+0x16>
        return -1; // 坏块表已满，无法添加
 80242ec:	f04f 33ff 	mov.w	r3, #4294967295
 80242f0:	e009      	b.n	8024306 <nand_bad_block_table_add+0x2a>

    nand_bad_block_table[nand_bad_block_table_count++] = page; // 在坏块表末尾添加新的块
 80242f2:	4b08      	ldr	r3, [pc, #32]	; (8024314 <nand_bad_block_table_add+0x38>)
 80242f4:	681b      	ldr	r3, [r3, #0]
 80242f6:	1c5a      	adds	r2, r3, #1
 80242f8:	4906      	ldr	r1, [pc, #24]	; (8024314 <nand_bad_block_table_add+0x38>)
 80242fa:	600a      	str	r2, [r1, #0]
 80242fc:	4906      	ldr	r1, [pc, #24]	; (8024318 <nand_bad_block_table_add+0x3c>)
 80242fe:	687a      	ldr	r2, [r7, #4]
 8024300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0; // 添加成功
 8024304:	2300      	movs	r3, #0
}
 8024306:	4618      	mov	r0, r3
 8024308:	370c      	adds	r7, #12
 802430a:	46bd      	mov	sp, r7
 802430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024310:	4770      	bx	lr
 8024312:	bf00      	nop
 8024314:	200012bc 	.word	0x200012bc
 8024318:	200012c0 	.word	0x200012c0

0802431c <nand_bad_block_table_lookup>:

bool nand_bad_block_table_lookup(uint32_t page)
{
 802431c:	b480      	push	{r7}
 802431e:	b085      	sub	sp, #20
 8024320:	af00      	add	r7, sp, #0
 8024322:	6078      	str	r0, [r7, #4]
    uint32_t i;

    for (i = 0; i < nand_bad_block_table_count; i++)
 8024324:	2300      	movs	r3, #0
 8024326:	60fb      	str	r3, [r7, #12]
 8024328:	e00b      	b.n	8024342 <nand_bad_block_table_lookup+0x26>
    {
        if (nand_bad_block_table[i] == page)
 802432a:	4a0c      	ldr	r2, [pc, #48]	; (802435c <nand_bad_block_table_lookup+0x40>)
 802432c:	68fb      	ldr	r3, [r7, #12]
 802432e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024332:	687a      	ldr	r2, [r7, #4]
 8024334:	429a      	cmp	r2, r3
 8024336:	d101      	bne.n	802433c <nand_bad_block_table_lookup+0x20>
            return true; // 在坏块表中找到了对应的块
 8024338:	2301      	movs	r3, #1
 802433a:	e008      	b.n	802434e <nand_bad_block_table_lookup+0x32>
    for (i = 0; i < nand_bad_block_table_count; i++)
 802433c:	68fb      	ldr	r3, [r7, #12]
 802433e:	3301      	adds	r3, #1
 8024340:	60fb      	str	r3, [r7, #12]
 8024342:	4b07      	ldr	r3, [pc, #28]	; (8024360 <nand_bad_block_table_lookup+0x44>)
 8024344:	681b      	ldr	r3, [r3, #0]
 8024346:	68fa      	ldr	r2, [r7, #12]
 8024348:	429a      	cmp	r2, r3
 802434a:	d3ee      	bcc.n	802432a <nand_bad_block_table_lookup+0xe>
    }

    return false; // 在坏块表中未找到对应的块
 802434c:	2300      	movs	r3, #0
}
 802434e:	4618      	mov	r0, r3
 8024350:	3714      	adds	r7, #20
 8024352:	46bd      	mov	sp, r7
 8024354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024358:	4770      	bx	lr
 802435a:	bf00      	nop
 802435c:	200012c0 	.word	0x200012c0
 8024360:	200012bc 	.word	0x200012bc

08024364 <nand_bad_block_table_iter_alloc>:

void *nand_bad_block_table_iter_alloc(uint32_t *page)
{
 8024364:	b480      	push	{r7}
 8024366:	b083      	sub	sp, #12
 8024368:	af00      	add	r7, sp, #0
 802436a:	6078      	str	r0, [r7, #4]
    if (!nand_bad_block_table_count)
 802436c:	4b08      	ldr	r3, [pc, #32]	; (8024390 <nand_bad_block_table_iter_alloc+0x2c>)
 802436e:	681b      	ldr	r3, [r3, #0]
 8024370:	2b00      	cmp	r3, #0
 8024372:	d101      	bne.n	8024378 <nand_bad_block_table_iter_alloc+0x14>
        return NULL; // 坏块表为空，无法进行迭代
 8024374:	2300      	movs	r3, #0
 8024376:	e004      	b.n	8024382 <nand_bad_block_table_iter_alloc+0x1e>

    *page = nand_bad_block_table[0]; // 将坏块表的第一个块赋值给 page
 8024378:	4b06      	ldr	r3, [pc, #24]	; (8024394 <nand_bad_block_table_iter_alloc+0x30>)
 802437a:	681a      	ldr	r2, [r3, #0]
 802437c:	687b      	ldr	r3, [r7, #4]
 802437e:	601a      	str	r2, [r3, #0]

    return &nand_bad_block_table[0]; // 返回坏块表的第一个块的地址作为迭代器
 8024380:	4b04      	ldr	r3, [pc, #16]	; (8024394 <nand_bad_block_table_iter_alloc+0x30>)
}
 8024382:	4618      	mov	r0, r3
 8024384:	370c      	adds	r7, #12
 8024386:	46bd      	mov	sp, r7
 8024388:	f85d 7b04 	ldr.w	r7, [sp], #4
 802438c:	4770      	bx	lr
 802438e:	bf00      	nop
 8024390:	200012bc 	.word	0x200012bc
 8024394:	200012c0 	.word	0x200012c0

08024398 <nand_bad_block_table_iter_next>:

void *nand_bad_block_table_iter_next(void *iter, uint32_t *page)
{
 8024398:	b480      	push	{r7}
 802439a:	b085      	sub	sp, #20
 802439c:	af00      	add	r7, sp, #0
 802439e:	6078      	str	r0, [r7, #4]
 80243a0:	6039      	str	r1, [r7, #0]
    uint32_t *bbt_iter = iter;
 80243a2:	687b      	ldr	r3, [r7, #4]
 80243a4:	60fb      	str	r3, [r7, #12]

    if (!bbt_iter)
 80243a6:	68fb      	ldr	r3, [r7, #12]
 80243a8:	2b00      	cmp	r3, #0
 80243aa:	d101      	bne.n	80243b0 <nand_bad_block_table_iter_next+0x18>
       return NULL; // 无效的迭代器，无法进行下一次迭代
 80243ac:	2300      	movs	r3, #0
 80243ae:	e012      	b.n	80243d6 <nand_bad_block_table_iter_next+0x3e>

    bbt_iter++; // 迭代器指向下一个块
 80243b0:	68fb      	ldr	r3, [r7, #12]
 80243b2:	3304      	adds	r3, #4
 80243b4:	60fb      	str	r3, [r7, #12]

    if (bbt_iter - &nand_bad_block_table[0] >= nand_bad_block_table_count)
 80243b6:	68fb      	ldr	r3, [r7, #12]
 80243b8:	4a0a      	ldr	r2, [pc, #40]	; (80243e4 <nand_bad_block_table_iter_next+0x4c>)
 80243ba:	1a9b      	subs	r3, r3, r2
 80243bc:	109b      	asrs	r3, r3, #2
 80243be:	461a      	mov	r2, r3
 80243c0:	4b09      	ldr	r3, [pc, #36]	; (80243e8 <nand_bad_block_table_iter_next+0x50>)
 80243c2:	681b      	ldr	r3, [r3, #0]
 80243c4:	429a      	cmp	r2, r3
 80243c6:	d301      	bcc.n	80243cc <nand_bad_block_table_iter_next+0x34>
        return NULL; // 已达到坏块表的末尾，无法进行下一次迭代
 80243c8:	2300      	movs	r3, #0
 80243ca:	e004      	b.n	80243d6 <nand_bad_block_table_iter_next+0x3e>

    *page = *bbt_iter; // 将当前迭代的块赋值给 page
 80243cc:	68fb      	ldr	r3, [r7, #12]
 80243ce:	681a      	ldr	r2, [r3, #0]
 80243d0:	683b      	ldr	r3, [r7, #0]
 80243d2:	601a      	str	r2, [r3, #0]

    return bbt_iter; // 返回下一次迭代的迭代器
 80243d4:	68fb      	ldr	r3, [r7, #12]
}
 80243d6:	4618      	mov	r0, r3
 80243d8:	3714      	adds	r7, #20
 80243da:	46bd      	mov	sp, r7
 80243dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243e0:	4770      	bx	lr
 80243e2:	bf00      	nop
 80243e4:	200012c0 	.word	0x200012c0
 80243e8:	200012bc 	.word	0x200012bc

080243ec <np_send_ok_status>:
static flash_hal_t *hal[] = { &hal_fsmc, &hal_spi_nor, &hal_spi_nand };

uint8_t np_packet_send_buf[NP_PACKET_BUF_SIZE];

static int np_send_ok_status()
{
 80243ec:	b580      	push	{r7, lr}
 80243ee:	b082      	sub	sp, #8
 80243f0:	af00      	add	r7, sp, #0
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_OK };
 80243f2:	2301      	movs	r3, #1
 80243f4:	703b      	strb	r3, [r7, #0]
 80243f6:	2300      	movs	r3, #0
 80243f8:	707b      	strb	r3, [r7, #1]
    size_t len = sizeof(status);
 80243fa:	2302      	movs	r3, #2
 80243fc:	607b      	str	r3, [r7, #4]

    if (np_comm_cb)
 80243fe:	4b08      	ldr	r3, [pc, #32]	; (8024420 <np_send_ok_status+0x34>)
 8024400:	681b      	ldr	r3, [r3, #0]
 8024402:	2b00      	cmp	r3, #0
 8024404:	d006      	beq.n	8024414 <np_send_ok_status+0x28>
        np_comm_cb->send((uint8_t *)&status, len);
 8024406:	4b06      	ldr	r3, [pc, #24]	; (8024420 <np_send_ok_status+0x34>)
 8024408:	681b      	ldr	r3, [r3, #0]
 802440a:	681b      	ldr	r3, [r3, #0]
 802440c:	463a      	mov	r2, r7
 802440e:	6879      	ldr	r1, [r7, #4]
 8024410:	4610      	mov	r0, r2
 8024412:	4798      	blx	r3

    return 0;
 8024414:	2300      	movs	r3, #0
}
 8024416:	4618      	mov	r0, r3
 8024418:	3708      	adds	r7, #8
 802441a:	46bd      	mov	sp, r7
 802441c:	bd80      	pop	{r7, pc}
 802441e:	bf00      	nop
 8024420:	20001310 	.word	0x20001310

08024424 <np_send_error>:

static int np_send_error(uint8_t err_code)
{
 8024424:	b580      	push	{r7, lr}
 8024426:	b086      	sub	sp, #24
 8024428:	af00      	add	r7, sp, #0
 802442a:	4603      	mov	r3, r0
 802442c:	71fb      	strb	r3, [r7, #7]
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_ERROR };
 802442e:	4b0d      	ldr	r3, [pc, #52]	; (8024464 <np_send_error+0x40>)
 8024430:	881b      	ldrh	r3, [r3, #0]
 8024432:	823b      	strh	r3, [r7, #16]
    np_resp_err_t err_status = { status, err_code };
 8024434:	8a3b      	ldrh	r3, [r7, #16]
 8024436:	81bb      	strh	r3, [r7, #12]
 8024438:	79fb      	ldrb	r3, [r7, #7]
 802443a:	73bb      	strb	r3, [r7, #14]
    size_t len = sizeof(err_status);
 802443c:	2303      	movs	r3, #3
 802443e:	617b      	str	r3, [r7, #20]

    if (np_comm_cb)
 8024440:	4b09      	ldr	r3, [pc, #36]	; (8024468 <np_send_error+0x44>)
 8024442:	681b      	ldr	r3, [r3, #0]
 8024444:	2b00      	cmp	r3, #0
 8024446:	d007      	beq.n	8024458 <np_send_error+0x34>
        np_comm_cb->send((uint8_t *)&err_status, len);
 8024448:	4b07      	ldr	r3, [pc, #28]	; (8024468 <np_send_error+0x44>)
 802444a:	681b      	ldr	r3, [r3, #0]
 802444c:	681b      	ldr	r3, [r3, #0]
 802444e:	f107 020c 	add.w	r2, r7, #12
 8024452:	6979      	ldr	r1, [r7, #20]
 8024454:	4610      	mov	r0, r2
 8024456:	4798      	blx	r3

    return 0;
 8024458:	2300      	movs	r3, #0
}
 802445a:	4618      	mov	r0, r3
 802445c:	3718      	adds	r7, #24
 802445e:	46bd      	mov	sp, r7
 8024460:	bd80      	pop	{r7, pc}
 8024462:	bf00      	nop
 8024464:	0803640c 	.word	0x0803640c
 8024468:	20001310 	.word	0x20001310

0802446c <np_send_bad_block_info>:

static int np_send_bad_block_info(uint64_t addr, uint32_t size, bool is_skipped)
{
 802446c:	b580      	push	{r7, lr}
 802446e:	b08a      	sub	sp, #40	; 0x28
 8024470:	af00      	add	r7, sp, #0
 8024472:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8024476:	607a      	str	r2, [r7, #4]
 8024478:	70fb      	strb	r3, [r7, #3]
    uint8_t info = is_skipped ? NP_STATUS_BB_SKIP : NP_STATUS_BB;
 802447a:	78fb      	ldrb	r3, [r7, #3]
 802447c:	2b00      	cmp	r3, #0
 802447e:	d001      	beq.n	8024484 <np_send_bad_block_info+0x18>
 8024480:	2304      	movs	r3, #4
 8024482:	e000      	b.n	8024486 <np_send_bad_block_info+0x1a>
 8024484:	2302      	movs	r3, #2
 8024486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    np_resp_t resp_header = { NP_RESP_STATUS, info };
 802448a:	2301      	movs	r3, #1
 802448c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8024490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8024494:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    np_resp_bad_block_t bad_block = { resp_header, addr, size };
 8024498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802449a:	82bb      	strh	r3, [r7, #20]
 802449c:	f107 0318 	add.w	r3, r7, #24
 80244a0:	3b02      	subs	r3, #2
 80244a2:	68ba      	ldr	r2, [r7, #8]
 80244a4:	601a      	str	r2, [r3, #0]
 80244a6:	68fa      	ldr	r2, [r7, #12]
 80244a8:	605a      	str	r2, [r3, #4]
 80244aa:	687b      	ldr	r3, [r7, #4]
 80244ac:	f8c7 301e 	str.w	r3, [r7, #30]

    if (np_comm_cb->send((uint8_t *)&bad_block, sizeof(bad_block)))
 80244b0:	4b09      	ldr	r3, [pc, #36]	; (80244d8 <np_send_bad_block_info+0x6c>)
 80244b2:	681b      	ldr	r3, [r3, #0]
 80244b4:	681b      	ldr	r3, [r3, #0]
 80244b6:	f107 0214 	add.w	r2, r7, #20
 80244ba:	210e      	movs	r1, #14
 80244bc:	4610      	mov	r0, r2
 80244be:	4798      	blx	r3
 80244c0:	4603      	mov	r3, r0
 80244c2:	2b00      	cmp	r3, #0
 80244c4:	d002      	beq.n	80244cc <np_send_bad_block_info+0x60>
        return -1;
 80244c6:	f04f 33ff 	mov.w	r3, #4294967295
 80244ca:	e000      	b.n	80244ce <np_send_bad_block_info+0x62>

    return 0;
 80244cc:	2300      	movs	r3, #0
}
 80244ce:	4618      	mov	r0, r3
 80244d0:	3728      	adds	r7, #40	; 0x28
 80244d2:	46bd      	mov	sp, r7
 80244d4:	bd80      	pop	{r7, pc}
 80244d6:	bf00      	nop
 80244d8:	20001310 	.word	0x20001310

080244dc <np_send_progress>:

static int np_send_progress(uint64_t progress)
{
 80244dc:	b580      	push	{r7, lr}
 80244de:	b086      	sub	sp, #24
 80244e0:	af00      	add	r7, sp, #0
 80244e2:	e9c7 0100 	strd	r0, r1, [r7]
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_PROGRESS };
 80244e6:	4b0f      	ldr	r3, [pc, #60]	; (8024524 <np_send_progress+0x48>)
 80244e8:	881b      	ldrh	r3, [r3, #0]
 80244ea:	82bb      	strh	r3, [r7, #20]
    np_resp_progress_t resp_progress = { resp_header, progress };
 80244ec:	8abb      	ldrh	r3, [r7, #20]
 80244ee:	813b      	strh	r3, [r7, #8]
 80244f0:	f107 0308 	add.w	r3, r7, #8
 80244f4:	3302      	adds	r3, #2
 80244f6:	683a      	ldr	r2, [r7, #0]
 80244f8:	601a      	str	r2, [r3, #0]
 80244fa:	687a      	ldr	r2, [r7, #4]
 80244fc:	605a      	str	r2, [r3, #4]

    if (np_comm_cb->send((uint8_t *)&resp_progress, sizeof(resp_progress)))
 80244fe:	4b0a      	ldr	r3, [pc, #40]	; (8024528 <np_send_progress+0x4c>)
 8024500:	681b      	ldr	r3, [r3, #0]
 8024502:	681b      	ldr	r3, [r3, #0]
 8024504:	f107 0208 	add.w	r2, r7, #8
 8024508:	210a      	movs	r1, #10
 802450a:	4610      	mov	r0, r2
 802450c:	4798      	blx	r3
 802450e:	4603      	mov	r3, r0
 8024510:	2b00      	cmp	r3, #0
 8024512:	d002      	beq.n	802451a <np_send_progress+0x3e>
        return -1;
 8024514:	f04f 33ff 	mov.w	r3, #4294967295
 8024518:	e000      	b.n	802451c <np_send_progress+0x40>

    return 0;
 802451a:	2300      	movs	r3, #0
}
 802451c:	4618      	mov	r0, r3
 802451e:	3718      	adds	r7, #24
 8024520:	46bd      	mov	sp, r7
 8024522:	bd80      	pop	{r7, pc}
 8024524:	08036410 	.word	0x08036410
 8024528:	20001310 	.word	0x20001310

0802452c <_np_cmd_nand_read_id>:

static int _np_cmd_nand_read_id(np_prog_t *prog)
{
 802452c:	b5b0      	push	{r4, r5, r7, lr}
 802452e:	b08a      	sub	sp, #40	; 0x28
 8024530:	af04      	add	r7, sp, #16
 8024532:	6078      	str	r0, [r7, #4]
    np_resp_id_t resp;
    size_t resp_len = sizeof(resp);
 8024534:	2308      	movs	r3, #8
 8024536:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read ID command\r\n");
 8024538:	481d      	ldr	r0, [pc, #116]	; (80245b0 <_np_cmd_nand_read_id+0x84>)
 802453a:	f00d f925 	bl	8031788 <puts>

    resp.header.code = NP_RESP_DATA;
 802453e:	2300      	movs	r3, #0
 8024540:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8024542:	697b      	ldr	r3, [r7, #20]
 8024544:	b2db      	uxtb	r3, r3
 8024546:	3b02      	subs	r3, #2
 8024548:	b2db      	uxtb	r3, r3
 802454a:	737b      	strb	r3, [r7, #13]
    hal[prog->hal]->read_id(&resp.nand_id);
 802454c:	687b      	ldr	r3, [r7, #4]
 802454e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024552:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024556:	461a      	mov	r2, r3
 8024558:	4b16      	ldr	r3, [pc, #88]	; (80245b4 <_np_cmd_nand_read_id+0x88>)
 802455a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802455e:	689b      	ldr	r3, [r3, #8]
 8024560:	f107 020c 	add.w	r2, r7, #12
 8024564:	3202      	adds	r2, #2
 8024566:	4610      	mov	r0, r2
 8024568:	4798      	blx	r3

    if (np_comm_cb)
 802456a:	4b13      	ldr	r3, [pc, #76]	; (80245b8 <_np_cmd_nand_read_id+0x8c>)
 802456c:	681b      	ldr	r3, [r3, #0]
 802456e:	2b00      	cmp	r3, #0
 8024570:	d007      	beq.n	8024582 <_np_cmd_nand_read_id+0x56>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8024572:	4b11      	ldr	r3, [pc, #68]	; (80245b8 <_np_cmd_nand_read_id+0x8c>)
 8024574:	681b      	ldr	r3, [r3, #0]
 8024576:	681b      	ldr	r3, [r3, #0]
 8024578:	f107 020c 	add.w	r2, r7, #12
 802457c:	6979      	ldr	r1, [r7, #20]
 802457e:	4610      	mov	r0, r2
 8024580:	4798      	blx	r3

    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8024582:	7bbb      	ldrb	r3, [r7, #14]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8024584:	4618      	mov	r0, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8024586:	7bfb      	ldrb	r3, [r7, #15]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8024588:	461c      	mov	r4, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 802458a:	7c3b      	ldrb	r3, [r7, #16]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 802458c:	461d      	mov	r5, r3
        resp.nand_id.fourth_id, resp.nand_id.fifth_id, resp.nand_id.sixth_id);
 802458e:	7c7b      	ldrb	r3, [r7, #17]
 8024590:	7cba      	ldrb	r2, [r7, #18]
 8024592:	7cf9      	ldrb	r1, [r7, #19]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8024594:	9102      	str	r1, [sp, #8]
 8024596:	9201      	str	r2, [sp, #4]
 8024598:	9300      	str	r3, [sp, #0]
 802459a:	462b      	mov	r3, r5
 802459c:	4622      	mov	r2, r4
 802459e:	4601      	mov	r1, r0
 80245a0:	4806      	ldr	r0, [pc, #24]	; (80245bc <_np_cmd_nand_read_id+0x90>)
 80245a2:	f00d f899 	bl	80316d8 <printf>

    return 0;
 80245a6:	2300      	movs	r3, #0
}
 80245a8:	4618      	mov	r0, r3
 80245aa:	3718      	adds	r7, #24
 80245ac:	46bd      	mov	sp, r7
 80245ae:	bdb0      	pop	{r4, r5, r7, pc}
 80245b0:	08036414 	.word	0x08036414
 80245b4:	20000040 	.word	0x20000040
 80245b8:	20001310 	.word	0x20001310
 80245bc:	08036428 	.word	0x08036428

080245c0 <np_cmd_nand_read_id>:

static int np_cmd_nand_read_id(np_prog_t *prog)
{
 80245c0:	b580      	push	{r7, lr}
 80245c2:	b084      	sub	sp, #16
 80245c4:	af00      	add	r7, sp, #0
 80245c6:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 80245c8:	2001      	movs	r0, #1
 80245ca:	f7ff fd81 	bl	80240d0 <led_rd_set>
    ret = _np_cmd_nand_read_id(prog);
 80245ce:	6878      	ldr	r0, [r7, #4]
 80245d0:	f7ff ffac 	bl	802452c <_np_cmd_nand_read_id>
 80245d4:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 80245d6:	2000      	movs	r0, #0
 80245d8:	f7ff fd7a 	bl	80240d0 <led_rd_set>

    return ret;
 80245dc:	68fb      	ldr	r3, [r7, #12]
}
 80245de:	4618      	mov	r0, r3
 80245e0:	3710      	adds	r7, #16
 80245e2:	46bd      	mov	sp, r7
 80245e4:	bd80      	pop	{r7, pc}
	...

080245e8 <np_read_bad_block_info_from_page>:

static int np_read_bad_block_info_from_page(np_prog_t *prog, uint32_t block,
    uint32_t page, bool *is_bad)
{
 80245e8:	b5b0      	push	{r4, r5, r7, lr}
 80245ea:	b08a      	sub	sp, #40	; 0x28
 80245ec:	af00      	add	r7, sp, #0
 80245ee:	60f8      	str	r0, [r7, #12]
 80245f0:	60b9      	str	r1, [r7, #8]
 80245f2:	607a      	str	r2, [r7, #4]
 80245f4:	603b      	str	r3, [r7, #0]
    uint32_t status;
    uint64_t addr = block * prog->chip_info.block_size;
 80245f6:	68fb      	ldr	r3, [r7, #12]
 80245f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80245fc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8024600:	68ba      	ldr	r2, [r7, #8]
 8024602:	fb02 f303 	mul.w	r3, r2, r3
 8024606:	2200      	movs	r2, #0
 8024608:	461c      	mov	r4, r3
 802460a:	4615      	mov	r5, r2
 802460c:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8024610:	68fb      	ldr	r3, [r7, #12]
 8024612:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024616:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off];
 802461a:	68fa      	ldr	r2, [r7, #12]
 802461c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024620:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8024624:	4413      	add	r3, r2
 8024626:	3338      	adds	r3, #56	; 0x38
 8024628:	68fa      	ldr	r2, [r7, #12]
 802462a:	4413      	add	r3, r2
 802462c:	3304      	adds	r3, #4
 802462e:	617b      	str	r3, [r7, #20]

    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8024630:	68fb      	ldr	r3, [r7, #12]
 8024632:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024636:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 802463a:	461a      	mov	r2, r3
 802463c:	4b35      	ldr	r3, [pc, #212]	; (8024714 <np_read_bad_block_info_from_page+0x12c>)
 802463e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024642:	695c      	ldr	r4, [r3, #20]
        prog->chip_info.bb_mark_off, 1);
 8024644:	68fb      	ldr	r3, [r7, #12]
 8024646:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802464a:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 802464e:	461a      	mov	r2, r3
 8024650:	2301      	movs	r3, #1
 8024652:	6879      	ldr	r1, [r7, #4]
 8024654:	6978      	ldr	r0, [r7, #20]
 8024656:	47a0      	blx	r4
 8024658:	6278      	str	r0, [r7, #36]	; 0x24
    if (status == FLASH_STATUS_INVALID_CMD)
 802465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802465c:	2b04      	cmp	r3, #4
 802465e:	d11a      	bne.n	8024696 <np_read_bad_block_info_from_page+0xae>
    {
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8024660:	68fb      	ldr	r3, [r7, #12]
 8024662:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024666:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 802466a:	461a      	mov	r2, r3
 802466c:	4b29      	ldr	r3, [pc, #164]	; (8024714 <np_read_bad_block_info_from_page+0x12c>)
 802466e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024672:	691b      	ldr	r3, [r3, #16]
 8024674:	68fa      	ldr	r2, [r7, #12]
 8024676:	f102 003c 	add.w	r0, r2, #60	; 0x3c
            prog->chip_info.page_size + prog->chip_info.spare_size);
 802467a:	68fa      	ldr	r2, [r7, #12]
 802467c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024680:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
 8024684:	68fa      	ldr	r2, [r7, #12]
 8024686:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 802468a:	f8d2 2238 	ldr.w	r2, [r2, #568]	; 0x238
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 802468e:	440a      	add	r2, r1
 8024690:	6879      	ldr	r1, [r7, #4]
 8024692:	4798      	blx	r3
 8024694:	6278      	str	r0, [r7, #36]	; 0x24
    }

    switch (status)
 8024696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024698:	2b03      	cmp	r3, #3
 802469a:	d010      	beq.n	80246be <np_read_bad_block_info_from_page+0xd6>
 802469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802469e:	2b03      	cmp	r3, #3
 80246a0:	d815      	bhi.n	80246ce <np_read_bad_block_info_from_page+0xe6>
 80246a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246a4:	2b00      	cmp	r3, #0
 80246a6:	d018      	beq.n	80246da <np_read_bad_block_info_from_page+0xf2>
 80246a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246aa:	2b02      	cmp	r3, #2
 80246ac:	d10f      	bne.n	80246ce <np_read_bad_block_info_from_page+0xe6>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        ERROR_PRINT("NAND read bad block info error at 0x%" PRIx64 "\r\n",
 80246ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80246b2:	4819      	ldr	r0, [pc, #100]	; (8024718 <np_read_bad_block_info_from_page+0x130>)
 80246b4:	f00d f810 	bl	80316d8 <printf>
            addr);
        return NP_ERR_NAND_RD;
 80246b8:	f06f 0367 	mvn.w	r3, #103	; 0x67
 80246bc:	e025      	b.n	802470a <np_read_bad_block_info_from_page+0x122>
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND read timeout at 0x%" PRIx64 "\r\n", addr);
 80246be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80246c2:	4816      	ldr	r0, [pc, #88]	; (802471c <np_read_bad_block_info_from_page+0x134>)
 80246c4:	f00d f808 	bl	80316d8 <printf>
        return NP_ERR_NAND_RD;
 80246c8:	f06f 0367 	mvn.w	r3, #103	; 0x67
 80246cc:	e01d      	b.n	802470a <np_read_bad_block_info_from_page+0x122>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 80246ce:	4814      	ldr	r0, [pc, #80]	; (8024720 <np_read_bad_block_info_from_page+0x138>)
 80246d0:	f00d f85a 	bl	8031788 <puts>
        return NP_ERR_NAND_RD;
 80246d4:	f06f 0367 	mvn.w	r3, #103	; 0x67
 80246d8:	e017      	b.n	802470a <np_read_bad_block_info_from_page+0x122>
        break;
 80246da:	bf00      	nop
    }

    *is_bad = prog->page.buf[prog->chip_info.page_size +
 80246dc:	68fb      	ldr	r3, [r7, #12]
 80246de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80246e2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 80246e6:	68fa      	ldr	r2, [r7, #12]
 80246e8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80246ec:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 80246f0:	4413      	add	r3, r2
 80246f2:	68fa      	ldr	r2, [r7, #12]
 80246f4:	4413      	add	r3, r2
 80246f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 80246fa:	2bff      	cmp	r3, #255	; 0xff
 80246fc:	bf14      	ite	ne
 80246fe:	2301      	movne	r3, #1
 8024700:	2300      	moveq	r3, #0
 8024702:	b2da      	uxtb	r2, r3
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8024704:	683b      	ldr	r3, [r7, #0]
 8024706:	701a      	strb	r2, [r3, #0]

    return 0;
 8024708:	2300      	movs	r3, #0
}
 802470a:	4618      	mov	r0, r3
 802470c:	3728      	adds	r7, #40	; 0x28
 802470e:	46bd      	mov	sp, r7
 8024710:	bdb0      	pop	{r4, r5, r7, pc}
 8024712:	bf00      	nop
 8024714:	20000040 	.word	0x20000040
 8024718:	0803644c 	.word	0x0803644c
 802471c:	08036480 	.word	0x08036480
 8024720:	080364a8 	.word	0x080364a8

08024724 <_np_cmd_read_bad_blocks>:

static int _np_cmd_read_bad_blocks(np_prog_t *prog, bool send_progress)
{
 8024724:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8024728:	b088      	sub	sp, #32
 802472a:	af00      	add	r7, sp, #0
 802472c:	6078      	str	r0, [r7, #4]
 802472e:	460b      	mov	r3, r1
 8024730:	70fb      	strb	r3, [r7, #3]
    int ret;
    bool is_bad;
    uint32_t block, block_num, page_num, page;

    if (!hal[prog->hal]->is_bb_supported())
 8024732:	687b      	ldr	r3, [r7, #4]
 8024734:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024738:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 802473c:	461a      	mov	r2, r3
 802473e:	4b40      	ldr	r3, [pc, #256]	; (8024840 <_np_cmd_read_bad_blocks+0x11c>)
 8024740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024744:	6a1b      	ldr	r3, [r3, #32]
 8024746:	4798      	blx	r3
 8024748:	4603      	mov	r3, r0
 802474a:	f083 0301 	eor.w	r3, r3, #1
 802474e:	b2db      	uxtb	r3, r3
 8024750:	2b00      	cmp	r3, #0
 8024752:	d16a      	bne.n	802482a <_np_cmd_read_bad_blocks+0x106>
        goto Exit;

    block_num = prog->chip_info.total_size / prog->chip_info.block_size;
 8024754:	687b      	ldr	r3, [r7, #4]
 8024756:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802475a:	3330      	adds	r3, #48	; 0x30
 802475c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024760:	687b      	ldr	r3, [r7, #4]
 8024762:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024766:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 802476a:	2200      	movs	r2, #0
 802476c:	4698      	mov	r8, r3
 802476e:	4691      	mov	r9, r2
 8024770:	4642      	mov	r2, r8
 8024772:	464b      	mov	r3, r9
 8024774:	f7fe fa18 	bl	8022ba8 <__aeabi_uldivmod>
 8024778:	4602      	mov	r2, r0
 802477a:	460b      	mov	r3, r1
 802477c:	4613      	mov	r3, r2
 802477e:	61bb      	str	r3, [r7, #24]
    page_num = prog->chip_info.block_size / prog->chip_info.page_size;
 8024780:	687b      	ldr	r3, [r7, #4]
 8024782:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024786:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 802478a:	687b      	ldr	r3, [r7, #4]
 802478c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024790:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024794:	fbb2 f3f3 	udiv	r3, r2, r3
 8024798:	617b      	str	r3, [r7, #20]

    /* Bad block - not 0xFF value in the first or second page in the block at
     * some offset in the page spare area
     */
    for (block = 0; block < block_num; block++)
 802479a:	2300      	movs	r3, #0
 802479c:	61fb      	str	r3, [r7, #28]
 802479e:	e03f      	b.n	8024820 <_np_cmd_read_bad_blocks+0xfc>
    {
        page = block * page_num;
 80247a0:	69fb      	ldr	r3, [r7, #28]
 80247a2:	697a      	ldr	r2, [r7, #20]
 80247a4:	fb02 f303 	mul.w	r3, r2, r3
 80247a8:	613b      	str	r3, [r7, #16]

        if (send_progress)
 80247aa:	78fb      	ldrb	r3, [r7, #3]
 80247ac:	2b00      	cmp	r3, #0
 80247ae:	d007      	beq.n	80247c0 <_np_cmd_read_bad_blocks+0x9c>
            np_send_progress(page);
 80247b0:	693b      	ldr	r3, [r7, #16]
 80247b2:	2200      	movs	r2, #0
 80247b4:	461c      	mov	r4, r3
 80247b6:	4615      	mov	r5, r2
 80247b8:	4620      	mov	r0, r4
 80247ba:	4629      	mov	r1, r5
 80247bc:	f7ff fe8e 	bl	80244dc <np_send_progress>

        if ((ret = np_read_bad_block_info_from_page(prog, block, page,
 80247c0:	f107 030b 	add.w	r3, r7, #11
 80247c4:	693a      	ldr	r2, [r7, #16]
 80247c6:	69f9      	ldr	r1, [r7, #28]
 80247c8:	6878      	ldr	r0, [r7, #4]
 80247ca:	f7ff ff0d 	bl	80245e8 <np_read_bad_block_info_from_page>
 80247ce:	60f8      	str	r0, [r7, #12]
 80247d0:	68fb      	ldr	r3, [r7, #12]
 80247d2:	2b00      	cmp	r3, #0
 80247d4:	d001      	beq.n	80247da <_np_cmd_read_bad_blocks+0xb6>
            &is_bad)))
        {
            return ret;
 80247d6:	68fb      	ldr	r3, [r7, #12]
 80247d8:	e02c      	b.n	8024834 <_np_cmd_read_bad_blocks+0x110>
        }

        if (!is_bad && (ret = np_read_bad_block_info_from_page(prog, block,
 80247da:	7afb      	ldrb	r3, [r7, #11]
 80247dc:	f083 0301 	eor.w	r3, r3, #1
 80247e0:	b2db      	uxtb	r3, r3
 80247e2:	2b00      	cmp	r3, #0
 80247e4:	d00d      	beq.n	8024802 <_np_cmd_read_bad_blocks+0xde>
 80247e6:	693b      	ldr	r3, [r7, #16]
 80247e8:	1c5a      	adds	r2, r3, #1
 80247ea:	f107 030b 	add.w	r3, r7, #11
 80247ee:	69f9      	ldr	r1, [r7, #28]
 80247f0:	6878      	ldr	r0, [r7, #4]
 80247f2:	f7ff fef9 	bl	80245e8 <np_read_bad_block_info_from_page>
 80247f6:	60f8      	str	r0, [r7, #12]
 80247f8:	68fb      	ldr	r3, [r7, #12]
 80247fa:	2b00      	cmp	r3, #0
 80247fc:	d001      	beq.n	8024802 <_np_cmd_read_bad_blocks+0xde>
            page + 1, &is_bad)))
        {
            return ret;
 80247fe:	68fb      	ldr	r3, [r7, #12]
 8024800:	e018      	b.n	8024834 <_np_cmd_read_bad_blocks+0x110>
        }

        if (is_bad && nand_bad_block_table_add(page))
 8024802:	7afb      	ldrb	r3, [r7, #11]
 8024804:	2b00      	cmp	r3, #0
 8024806:	d008      	beq.n	802481a <_np_cmd_read_bad_blocks+0xf6>
 8024808:	6938      	ldr	r0, [r7, #16]
 802480a:	f7ff fd67 	bl	80242dc <nand_bad_block_table_add>
 802480e:	4603      	mov	r3, r0
 8024810:	2b00      	cmp	r3, #0
 8024812:	d002      	beq.n	802481a <_np_cmd_read_bad_blocks+0xf6>
            return NP_ERR_BBT_OVERFLOW;
 8024814:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8024818:	e00c      	b.n	8024834 <_np_cmd_read_bad_blocks+0x110>
    for (block = 0; block < block_num; block++)
 802481a:	69fb      	ldr	r3, [r7, #28]
 802481c:	3301      	adds	r3, #1
 802481e:	61fb      	str	r3, [r7, #28]
 8024820:	69fa      	ldr	r2, [r7, #28]
 8024822:	69bb      	ldr	r3, [r7, #24]
 8024824:	429a      	cmp	r2, r3
 8024826:	d3bb      	bcc.n	80247a0 <_np_cmd_read_bad_blocks+0x7c>
    }

Exit:
 8024828:	e000      	b.n	802482c <_np_cmd_read_bad_blocks+0x108>
        goto Exit;
 802482a:	bf00      	nop
    prog->bb_is_read = 1;
 802482c:	687b      	ldr	r3, [r7, #4]
 802482e:	2201      	movs	r2, #1
 8024830:	635a      	str	r2, [r3, #52]	; 0x34

    return 0;
 8024832:	2300      	movs	r3, #0
}
 8024834:	4618      	mov	r0, r3
 8024836:	3720      	adds	r7, #32
 8024838:	46bd      	mov	sp, r7
 802483a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 802483e:	bf00      	nop
 8024840:	20000040 	.word	0x20000040

08024844 <np_nand_erase>:

static int np_nand_erase(np_prog_t *prog, uint32_t page)
{
 8024844:	b580      	push	{r7, lr}
 8024846:	b086      	sub	sp, #24
 8024848:	af00      	add	r7, sp, #0
 802484a:	6078      	str	r0, [r7, #4]
 802484c:	6039      	str	r1, [r7, #0]
    uint32_t status;
    uint64_t addr = page * prog->chip_info.page_size;
 802484e:	6879      	ldr	r1, [r7, #4]
 8024850:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8024854:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 8024858:	6838      	ldr	r0, [r7, #0]
 802485a:	fb00 f101 	mul.w	r1, r0, r1
 802485e:	2000      	movs	r0, #0
 8024860:	460a      	mov	r2, r1
 8024862:	4603      	mov	r3, r0
 8024864:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    DEBUG_PRINT("NAND erase at 0x%" PRIx64 "\r\n", addr);
 8024868:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802486c:	481f      	ldr	r0, [pc, #124]	; (80248ec <np_nand_erase+0xa8>)
 802486e:	f00c ff33 	bl	80316d8 <printf>

    status = hal[prog->hal]->erase_block(page);
 8024872:	687b      	ldr	r3, [r7, #4]
 8024874:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024878:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 802487c:	461a      	mov	r2, r3
 802487e:	4b1c      	ldr	r3, [pc, #112]	; (80248f0 <np_nand_erase+0xac>)
 8024880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024884:	68db      	ldr	r3, [r3, #12]
 8024886:	6838      	ldr	r0, [r7, #0]
 8024888:	4798      	blx	r3
 802488a:	60f8      	str	r0, [r7, #12]
    switch (status)
 802488c:	68fb      	ldr	r3, [r7, #12]
 802488e:	2b03      	cmp	r3, #3
 8024890:	d018      	beq.n	80248c4 <np_nand_erase+0x80>
 8024892:	68fb      	ldr	r3, [r7, #12]
 8024894:	2b03      	cmp	r3, #3
 8024896:	d81b      	bhi.n	80248d0 <np_nand_erase+0x8c>
 8024898:	68fb      	ldr	r3, [r7, #12]
 802489a:	2b00      	cmp	r3, #0
 802489c:	d01e      	beq.n	80248dc <np_nand_erase+0x98>
 802489e:	68fb      	ldr	r3, [r7, #12]
 80248a0:	2b02      	cmp	r3, #2
 80248a2:	d115      	bne.n	80248d0 <np_nand_erase+0x8c>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        if (np_send_bad_block_info(addr, prog->chip_info.block_size, false))
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80248aa:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80248ae:	2300      	movs	r3, #0
 80248b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80248b4:	f7ff fdda 	bl	802446c <np_send_bad_block_info>
 80248b8:	4603      	mov	r3, r0
 80248ba:	2b00      	cmp	r3, #0
 80248bc:	d010      	beq.n	80248e0 <np_nand_erase+0x9c>
            return -1;
 80248be:	f04f 33ff 	mov.w	r3, #4294967295
 80248c2:	e00f      	b.n	80248e4 <np_nand_erase+0xa0>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND erase timeout at 0x%" PRIx64 "\r\n", addr);
 80248c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80248c8:	480a      	ldr	r0, [pc, #40]	; (80248f4 <np_nand_erase+0xb0>)
 80248ca:	f00c ff05 	bl	80316d8 <printf>
        break;
 80248ce:	e008      	b.n	80248e2 <np_nand_erase+0x9e>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 80248d0:	4809      	ldr	r0, [pc, #36]	; (80248f8 <np_nand_erase+0xb4>)
 80248d2:	f00c ff59 	bl	8031788 <puts>
        return -1;
 80248d6:	f04f 33ff 	mov.w	r3, #4294967295
 80248da:	e003      	b.n	80248e4 <np_nand_erase+0xa0>
        break;
 80248dc:	bf00      	nop
 80248de:	e000      	b.n	80248e2 <np_nand_erase+0x9e>
        break;
 80248e0:	bf00      	nop
    }

    return 0;
 80248e2:	2300      	movs	r3, #0
}
 80248e4:	4618      	mov	r0, r3
 80248e6:	3718      	adds	r7, #24
 80248e8:	46bd      	mov	sp, r7
 80248ea:	bd80      	pop	{r7, pc}
 80248ec:	080364c4 	.word	0x080364c4
 80248f0:	20000040 	.word	0x20000040
 80248f4:	080364dc 	.word	0x080364dc
 80248f8:	080364a8 	.word	0x080364a8

080248fc <_np_cmd_nand_erase>:

static int _np_cmd_nand_erase(np_prog_t *prog)
{
 80248fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8024900:	b0ac      	sub	sp, #176	; 0xb0
 8024902:	af04      	add	r7, sp, #16
 8024904:	6578      	str	r0, [r7, #84]	; 0x54
    int ret;
    uint64_t addr, len, total_size, total_len;
    uint32_t page, pages, pages_in_block, page_size, block_size;
    np_erase_cmd_t *erase_cmd;
    bool skip_bb, inc_spare, is_bad = false;
 8024906:	2300      	movs	r3, #0
 8024908:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if (prog->rx_buf_len < sizeof(np_erase_cmd_t))
 802490c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802490e:	685b      	ldr	r3, [r3, #4]
 8024910:	2b11      	cmp	r3, #17
 8024912:	d808      	bhi.n	8024926 <_np_cmd_nand_erase+0x2a>
    {
        ERROR_PRINT("Wrong buffer length for erase command %lu\r\n",
 8024914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024916:	685b      	ldr	r3, [r3, #4]
 8024918:	4619      	mov	r1, r3
 802491a:	48b0      	ldr	r0, [pc, #704]	; (8024bdc <_np_cmd_nand_erase+0x2e0>)
 802491c:	f00c fedc 	bl	80316d8 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8024920:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024924:	e1c0      	b.n	8024ca8 <_np_cmd_nand_erase+0x3ac>
    }
    erase_cmd = (np_erase_cmd_t *)prog->rx_buf;
 8024926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024928:	681b      	ldr	r3, [r3, #0]
 802492a:	677b      	str	r3, [r7, #116]	; 0x74
    total_len = len = erase_cmd->len;
 802492c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 802492e:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8024932:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8024936:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 802493a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 802493e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    addr = erase_cmd->addr;
 8024942:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8024944:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8024948:	f8d1 3005 	ldr.w	r3, [r1, #5]
 802494c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    skip_bb = erase_cmd->flags.skip_bb;
 8024950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024952:	7c5b      	ldrb	r3, [r3, #17]
 8024954:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8024958:	b2db      	uxtb	r3, r3
 802495a:	2b00      	cmp	r3, #0
 802495c:	bf14      	ite	ne
 802495e:	2301      	movne	r3, #1
 8024960:	2300      	moveq	r3, #0
 8024962:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    inc_spare = erase_cmd->flags.inc_spare;
 8024966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024968:	7c5b      	ldrb	r3, [r3, #17]
 802496a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 802496e:	b2db      	uxtb	r3, r3
 8024970:	2b00      	cmp	r3, #0
 8024972:	bf14      	ite	ne
 8024974:	2301      	movne	r3, #1
 8024976:	2300      	moveq	r3, #0
 8024978:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    DEBUG_PRINT("Erase at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n", addr,
 802497c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024980:	e9cd 2300 	strd	r2, r3, [sp]
 8024984:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024988:	4895      	ldr	r0, [pc, #596]	; (8024be0 <_np_cmd_nand_erase+0x2e4>)
 802498a:	f00c fea5 	bl	80316d8 <printf>
        len);

    pages_in_block = prog->chip_info.block_size / prog->chip_info.page_size;
 802498e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024990:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024994:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8024998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802499a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802499e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80249a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80249a6:	663b      	str	r3, [r7, #96]	; 0x60

    if (inc_spare)
 80249a8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80249ac:	2b00      	cmp	r3, #0
 80249ae:	d03f      	beq.n	8024a30 <_np_cmd_nand_erase+0x134>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 80249b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80249b2:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80249b6:	3330      	adds	r3, #48	; 0x30
 80249b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80249bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80249be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80249c2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80249c6:	2200      	movs	r2, #0
 80249c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80249ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80249cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80249d0:	f7fe f8ea 	bl	8022ba8 <__aeabi_uldivmod>
 80249d4:	4602      	mov	r2, r0
 80249d6:	460b      	mov	r3, r1
 80249d8:	4613      	mov	r3, r2
 80249da:	65fb      	str	r3, [r7, #92]	; 0x5c
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 80249dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80249de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80249e2:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 80249e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80249e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80249ec:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80249f0:	4413      	add	r3, r2
 80249f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = pages_in_block * page_size;
 80249f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80249f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80249fc:	fb02 f303 	mul.w	r3, r2, r3
 8024a00:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = (uint64_t)pages * page_size;
 8024a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024a04:	2200      	movs	r2, #0
 8024a06:	469a      	mov	sl, r3
 8024a08:	4693      	mov	fp, r2
 8024a0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024a0e:	2200      	movs	r2, #0
 8024a10:	4698      	mov	r8, r3
 8024a12:	4691      	mov	r9, r2
 8024a14:	fb08 f20b 	mul.w	r2, r8, fp
 8024a18:	fb0a f309 	mul.w	r3, sl, r9
 8024a1c:	4413      	add	r3, r2
 8024a1e:	fbaa 4508 	umull	r4, r5, sl, r8
 8024a22:	442b      	add	r3, r5
 8024a24:	461d      	mov	r5, r3
 8024a26:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 8024a2a:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 8024a2e:	e014      	b.n	8024a5a <_np_cmd_nand_erase+0x15e>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8024a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024a32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a36:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = prog->chip_info.block_size;
 8024a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024a40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a44:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8024a48:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = prog->chip_info.total_size;
 8024a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024a4c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024a50:	3330      	adds	r3, #48	; 0x30
 8024a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a56:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    }

    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 8024a5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8024a5e:	2b00      	cmp	r3, #0
 8024a60:	d00d      	beq.n	8024a7e <_np_cmd_nand_erase+0x182>
 8024a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024a66:	2b00      	cmp	r3, #0
 8024a68:	d109      	bne.n	8024a7e <_np_cmd_nand_erase+0x182>
 8024a6a:	2100      	movs	r1, #0
 8024a6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8024a6e:	f7ff fe59 	bl	8024724 <_np_cmd_read_bad_blocks>
 8024a72:	65b8      	str	r0, [r7, #88]	; 0x58
 8024a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024a76:	2b00      	cmp	r3, #0
 8024a78:	d001      	beq.n	8024a7e <_np_cmd_nand_erase+0x182>
        false)))
    {
        return ret;
 8024a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024a7c:	e114      	b.n	8024ca8 <_np_cmd_nand_erase+0x3ac>
    }

    if (addr % block_size)
 8024a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024a80:	2200      	movs	r2, #0
 8024a82:	643b      	str	r3, [r7, #64]	; 0x40
 8024a84:	647a      	str	r2, [r7, #68]	; 0x44
 8024a86:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024a8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024a8e:	f7fe f88b 	bl	8022ba8 <__aeabi_uldivmod>
 8024a92:	4313      	orrs	r3, r2
 8024a94:	d009      	beq.n	8024aaa <_np_cmd_nand_erase+0x1ae>
    {
        ERROR_PRINT("Address 0x%" PRIx64
 8024a96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024a98:	9300      	str	r3, [sp, #0]
 8024a9a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024a9e:	4851      	ldr	r0, [pc, #324]	; (8024be4 <_np_cmd_nand_erase+0x2e8>)
 8024aa0:	f00c fe1a 	bl	80316d8 <printf>
            " is not aligned to block size 0x%lx\r\n", addr, block_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8024aa4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8024aa8:	e0fe      	b.n	8024ca8 <_np_cmd_nand_erase+0x3ac>
    }

    if (!len)
 8024aaa:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024aae:	4313      	orrs	r3, r2
 8024ab0:	d105      	bne.n	8024abe <_np_cmd_nand_erase+0x1c2>
    {
        ERROR_PRINT("Length is 0\r\n");
 8024ab2:	484d      	ldr	r0, [pc, #308]	; (8024be8 <_np_cmd_nand_erase+0x2ec>)
 8024ab4:	f00c fe68 	bl	8031788 <puts>
        return NP_ERR_LEN_INVALID;
 8024ab8:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024abc:	e0f4      	b.n	8024ca8 <_np_cmd_nand_erase+0x3ac>
    }

    if (len % block_size)
 8024abe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024ac0:	2200      	movs	r2, #0
 8024ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8024ac4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8024ac6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8024aca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8024ace:	f7fe f86b 	bl	8022ba8 <__aeabi_uldivmod>
 8024ad2:	4313      	orrs	r3, r2
 8024ad4:	d009      	beq.n	8024aea <_np_cmd_nand_erase+0x1ee>
    {
        ERROR_PRINT("Length 0x%" PRIx64
 8024ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024ad8:	9300      	str	r3, [sp, #0]
 8024ada:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024ade:	4843      	ldr	r0, [pc, #268]	; (8024bec <_np_cmd_nand_erase+0x2f0>)
 8024ae0:	f00c fdfa 	bl	80316d8 <printf>
            " is not aligned to block size 0x%lx\r\n", len, block_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8024ae4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024ae8:	e0de      	b.n	8024ca8 <_np_cmd_nand_erase+0x3ac>
    }

    if (addr + len > total_size)
 8024aea:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024aee:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024af2:	1884      	adds	r4, r0, r2
 8024af4:	633c      	str	r4, [r7, #48]	; 0x30
 8024af6:	eb41 0303 	adc.w	r3, r1, r3
 8024afa:	637b      	str	r3, [r7, #52]	; 0x34
 8024afc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8024b00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8024b04:	4621      	mov	r1, r4
 8024b06:	428a      	cmp	r2, r1
 8024b08:	4629      	mov	r1, r5
 8024b0a:	418b      	sbcs	r3, r1
 8024b0c:	d20f      	bcs.n	8024b2e <_np_cmd_nand_erase+0x232>
    {
        ERROR_PRINT("Erase address exceded 0x%" PRIx64 "+0x%" PRIx64
 8024b0e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8024b12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024b16:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024b1a:	e9cd 2300 	strd	r2, r3, [sp]
 8024b1e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024b22:	4833      	ldr	r0, [pc, #204]	; (8024bf0 <_np_cmd_nand_erase+0x2f4>)
 8024b24:	f00c fdd8 	bl	80316d8 <printf>
            " is more then chip size 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8024b28:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024b2c:	e0bc      	b.n	8024ca8 <_np_cmd_nand_erase+0x3ac>
    }

    page = addr / page_size;
 8024b2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024b32:	2200      	movs	r2, #0
 8024b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8024b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8024b38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8024b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024b40:	f7fe f832 	bl	8022ba8 <__aeabi_uldivmod>
 8024b44:	4602      	mov	r2, r0
 8024b46:	460b      	mov	r3, r1
 8024b48:	4613      	mov	r3, r2
 8024b4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    while (len)
 8024b4e:	e0a3      	b.n	8024c98 <_np_cmd_nand_erase+0x39c>
    {
        if (addr >= total_size)
 8024b50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024b54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8024b58:	4290      	cmp	r0, r2
 8024b5a:	eb71 0303 	sbcs.w	r3, r1, r3
 8024b5e:	d30b      	bcc.n	8024b78 <_np_cmd_nand_erase+0x27c>
        {
            ERROR_PRINT("Erase address 0x%" PRIx64
 8024b60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8024b64:	e9cd 2300 	strd	r2, r3, [sp]
 8024b68:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024b6c:	4821      	ldr	r0, [pc, #132]	; (8024bf4 <_np_cmd_nand_erase+0x2f8>)
 8024b6e:	f00c fdb3 	bl	80316d8 <printf>
                " is more then chip size 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8024b72:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024b76:	e097      	b.n	8024ca8 <_np_cmd_nand_erase+0x3ac>
        }

        if (skip_bb && (is_bad = nand_bad_block_table_lookup(page)))
 8024b78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8024b7c:	2b00      	cmp	r3, #0
 8024b7e:	d01b      	beq.n	8024bb8 <_np_cmd_nand_erase+0x2bc>
 8024b80:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8024b84:	f7ff fbca 	bl	802431c <nand_bad_block_table_lookup>
 8024b88:	4603      	mov	r3, r0
 8024b8a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8024b8e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8024b92:	2b00      	cmp	r3, #0
 8024b94:	d010      	beq.n	8024bb8 <_np_cmd_nand_erase+0x2bc>
        {
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", addr);
 8024b96:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024b9a:	4817      	ldr	r0, [pc, #92]	; (8024bf8 <_np_cmd_nand_erase+0x2fc>)
 8024b9c:	f00c fd9c 	bl	80316d8 <printf>
            if (np_send_bad_block_info(addr, block_size, true))
 8024ba0:	2301      	movs	r3, #1
 8024ba2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8024ba4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024ba8:	f7ff fc60 	bl	802446c <np_send_bad_block_info>
 8024bac:	4603      	mov	r3, r0
 8024bae:	2b00      	cmp	r3, #0
 8024bb0:	d002      	beq.n	8024bb8 <_np_cmd_nand_erase+0x2bc>
                return -1;
 8024bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8024bb6:	e077      	b.n	8024ca8 <_np_cmd_nand_erase+0x3ac>
        }

        if (!is_bad && np_nand_erase(prog, page))
 8024bb8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8024bbc:	f083 0301 	eor.w	r3, r3, #1
 8024bc0:	b2db      	uxtb	r3, r3
 8024bc2:	2b00      	cmp	r3, #0
 8024bc4:	d01a      	beq.n	8024bfc <_np_cmd_nand_erase+0x300>
 8024bc6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8024bca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8024bcc:	f7ff fe3a 	bl	8024844 <np_nand_erase>
 8024bd0:	4603      	mov	r3, r0
 8024bd2:	2b00      	cmp	r3, #0
 8024bd4:	d012      	beq.n	8024bfc <_np_cmd_nand_erase+0x300>
            return NP_ERR_NAND_ERASE;
 8024bd6:	f06f 0368 	mvn.w	r3, #104	; 0x68
 8024bda:	e065      	b.n	8024ca8 <_np_cmd_nand_erase+0x3ac>
 8024bdc:	08036504 	.word	0x08036504
 8024be0:	08036538 	.word	0x08036538
 8024be4:	08036560 	.word	0x08036560
 8024be8:	0803659c 	.word	0x0803659c
 8024bec:	080365b0 	.word	0x080365b0
 8024bf0:	080365ec 	.word	0x080365ec
 8024bf4:	08036638 	.word	0x08036638
 8024bf8:	08036674 	.word	0x08036674

        addr += block_size;
 8024bfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024bfe:	2200      	movs	r2, #0
 8024c00:	623b      	str	r3, [r7, #32]
 8024c02:	627a      	str	r2, [r7, #36]	; 0x24
 8024c04:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024c08:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8024c0c:	4621      	mov	r1, r4
 8024c0e:	1851      	adds	r1, r2, r1
 8024c10:	60b9      	str	r1, [r7, #8]
 8024c12:	4629      	mov	r1, r5
 8024c14:	414b      	adcs	r3, r1
 8024c16:	60fb      	str	r3, [r7, #12]
 8024c18:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8024c1c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
        page += pages_in_block;
 8024c20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8024c24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8024c26:	4413      	add	r3, r2
 8024c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        /* On partial erase do not count bad blocks */
        if (!is_bad || (is_bad && erase_cmd->len == total_size))
 8024c2c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8024c30:	f083 0301 	eor.w	r3, r3, #1
 8024c34:	b2db      	uxtb	r3, r3
 8024c36:	2b00      	cmp	r3, #0
 8024c38:	d10e      	bne.n	8024c58 <_np_cmd_nand_erase+0x35c>
 8024c3a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8024c3e:	2b00      	cmp	r3, #0
 8024c40:	d01d      	beq.n	8024c7e <_np_cmd_nand_erase+0x382>
 8024c42:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8024c44:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8024c48:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8024c4c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8024c50:	4299      	cmp	r1, r3
 8024c52:	bf08      	it	eq
 8024c54:	4290      	cmpeq	r0, r2
 8024c56:	d112      	bne.n	8024c7e <_np_cmd_nand_erase+0x382>
            len -= block_size;
 8024c58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024c5a:	2200      	movs	r2, #0
 8024c5c:	61bb      	str	r3, [r7, #24]
 8024c5e:	61fa      	str	r2, [r7, #28]
 8024c60:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024c64:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8024c68:	4621      	mov	r1, r4
 8024c6a:	1a51      	subs	r1, r2, r1
 8024c6c:	6039      	str	r1, [r7, #0]
 8024c6e:	4629      	mov	r1, r5
 8024c70:	eb63 0301 	sbc.w	r3, r3, r1
 8024c74:	607b      	str	r3, [r7, #4]
 8024c76:	e9d7 3400 	ldrd	r3, r4, [r7]
 8024c7a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

        np_send_progress(total_len - len);
 8024c7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8024c82:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024c86:	1a84      	subs	r4, r0, r2
 8024c88:	613c      	str	r4, [r7, #16]
 8024c8a:	eb61 0303 	sbc.w	r3, r1, r3
 8024c8e:	617b      	str	r3, [r7, #20]
 8024c90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8024c94:	f7ff fc22 	bl	80244dc <np_send_progress>
    while (len)
 8024c98:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024c9c:	4313      	orrs	r3, r2
 8024c9e:	f47f af57 	bne.w	8024b50 <_np_cmd_nand_erase+0x254>
    }

    return np_send_ok_status();
 8024ca2:	f7ff fba3 	bl	80243ec <np_send_ok_status>
 8024ca6:	4603      	mov	r3, r0
}
 8024ca8:	4618      	mov	r0, r3
 8024caa:	37a0      	adds	r7, #160	; 0xa0
 8024cac:	46bd      	mov	sp, r7
 8024cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024cb2:	bf00      	nop

08024cb4 <np_cmd_nand_erase>:

static int np_cmd_nand_erase(np_prog_t *prog)
{
 8024cb4:	b580      	push	{r7, lr}
 8024cb6:	b084      	sub	sp, #16
 8024cb8:	af00      	add	r7, sp, #0
 8024cba:	6078      	str	r0, [r7, #4]
    int ret;

    led_wr_set(true);
 8024cbc:	2001      	movs	r0, #1
 8024cbe:	f7ff f9f5 	bl	80240ac <led_wr_set>
    ret = _np_cmd_nand_erase(prog);
 8024cc2:	6878      	ldr	r0, [r7, #4]
 8024cc4:	f7ff fe1a 	bl	80248fc <_np_cmd_nand_erase>
 8024cc8:	60f8      	str	r0, [r7, #12]
    led_wr_set(false);
 8024cca:	2000      	movs	r0, #0
 8024ccc:	f7ff f9ee 	bl	80240ac <led_wr_set>

    return ret;
 8024cd0:	68fb      	ldr	r3, [r7, #12]
}
 8024cd2:	4618      	mov	r0, r3
 8024cd4:	3710      	adds	r7, #16
 8024cd6:	46bd      	mov	sp, r7
 8024cd8:	bd80      	pop	{r7, pc}
	...

08024cdc <np_send_write_ack>:

static int np_send_write_ack(uint64_t bytes_ack)
{
 8024cdc:	b580      	push	{r7, lr}
 8024cde:	b086      	sub	sp, #24
 8024ce0:	af00      	add	r7, sp, #0
 8024ce2:	e9c7 0100 	strd	r0, r1, [r7]
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_WRITE_ACK };
 8024ce6:	4b0f      	ldr	r3, [pc, #60]	; (8024d24 <np_send_write_ack+0x48>)
 8024ce8:	881b      	ldrh	r3, [r3, #0]
 8024cea:	82bb      	strh	r3, [r7, #20]
    np_resp_write_ack_t write_ack = { resp_header, bytes_ack };
 8024cec:	8abb      	ldrh	r3, [r7, #20]
 8024cee:	813b      	strh	r3, [r7, #8]
 8024cf0:	f107 0308 	add.w	r3, r7, #8
 8024cf4:	3302      	adds	r3, #2
 8024cf6:	683a      	ldr	r2, [r7, #0]
 8024cf8:	601a      	str	r2, [r3, #0]
 8024cfa:	687a      	ldr	r2, [r7, #4]
 8024cfc:	605a      	str	r2, [r3, #4]

    if (np_comm_cb->send((uint8_t *)&write_ack, sizeof(write_ack)))
 8024cfe:	4b0a      	ldr	r3, [pc, #40]	; (8024d28 <np_send_write_ack+0x4c>)
 8024d00:	681b      	ldr	r3, [r3, #0]
 8024d02:	681b      	ldr	r3, [r3, #0]
 8024d04:	f107 0208 	add.w	r2, r7, #8
 8024d08:	210a      	movs	r1, #10
 8024d0a:	4610      	mov	r0, r2
 8024d0c:	4798      	blx	r3
 8024d0e:	4603      	mov	r3, r0
 8024d10:	2b00      	cmp	r3, #0
 8024d12:	d002      	beq.n	8024d1a <np_send_write_ack+0x3e>
        return -1;
 8024d14:	f04f 33ff 	mov.w	r3, #4294967295
 8024d18:	e000      	b.n	8024d1c <np_send_write_ack+0x40>

    return 0;
 8024d1a:	2300      	movs	r3, #0
}
 8024d1c:	4618      	mov	r0, r3
 8024d1e:	3718      	adds	r7, #24
 8024d20:	46bd      	mov	sp, r7
 8024d22:	bd80      	pop	{r7, pc}
 8024d24:	08036694 	.word	0x08036694
 8024d28:	20001310 	.word	0x20001310

08024d2c <np_cmd_nand_write_start>:

static int np_cmd_nand_write_start(np_prog_t *prog)
{
 8024d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8024d30:	b09a      	sub	sp, #104	; 0x68
 8024d32:	af04      	add	r7, sp, #16
 8024d34:	62f8      	str	r0, [r7, #44]	; 0x2c
    int ret;
    uint64_t addr, len;
    uint32_t pages, pages_in_block;
    np_write_start_cmd_t *write_start_cmd;

    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 8024d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d38:	685b      	ldr	r3, [r3, #4]
 8024d3a:	2b11      	cmp	r3, #17
 8024d3c:	d808      	bhi.n	8024d50 <np_cmd_nand_write_start+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write start command %lu\r\n",
 8024d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d40:	685b      	ldr	r3, [r3, #4]
 8024d42:	4619      	mov	r1, r3
 8024d44:	489d      	ldr	r0, [pc, #628]	; (8024fbc <np_cmd_nand_write_start+0x290>)
 8024d46:	f00c fcc7 	bl	80316d8 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8024d4a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024d4e:	e184      	b.n	802505a <np_cmd_nand_write_start+0x32e>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 8024d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d52:	681b      	ldr	r3, [r3, #0]
 8024d54:	657b      	str	r3, [r7, #84]	; 0x54

    if (hal[prog->hal]->enable_hw_ecc)
 8024d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d58:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024d5c:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024d60:	461a      	mov	r2, r3
 8024d62:	4b97      	ldr	r3, [pc, #604]	; (8024fc0 <np_cmd_nand_write_start+0x294>)
 8024d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024d6a:	2b00      	cmp	r3, #0
 8024d6c:	d015      	beq.n	8024d9a <np_cmd_nand_write_start+0x6e>
        hal[prog->hal]->enable_hw_ecc(write_start_cmd->flags.enable_hw_ecc);
 8024d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024d74:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024d78:	461a      	mov	r2, r3
 8024d7a:	4b91      	ldr	r3, [pc, #580]	; (8024fc0 <np_cmd_nand_write_start+0x294>)
 8024d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024d84:	7c5b      	ldrb	r3, [r3, #17]
 8024d86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8024d8a:	b2db      	uxtb	r3, r3
 8024d8c:	2b00      	cmp	r3, #0
 8024d8e:	bf14      	ite	ne
 8024d90:	2301      	movne	r3, #1
 8024d92:	2300      	moveq	r3, #0
 8024d94:	b2db      	uxtb	r3, r3
 8024d96:	4618      	mov	r0, r3
 8024d98:	4790      	blx	r2

    addr = write_start_cmd->addr;
 8024d9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024d9c:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8024da0:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8024da4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    len = write_start_cmd->len;
 8024da8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024daa:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8024dae:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8024db2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    DEBUG_PRINT("Write at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n",
 8024db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024dba:	e9cd 2300 	strd	r2, r3, [sp]
 8024dbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024dc2:	4880      	ldr	r0, [pc, #512]	; (8024fc4 <np_cmd_nand_write_start+0x298>)
 8024dc4:	f00c fc88 	bl	80316d8 <printf>
        addr, len);

    if (write_start_cmd->flags.inc_spare)
 8024dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024dca:	7c5b      	ldrb	r3, [r3, #17]
 8024dcc:	f003 0302 	and.w	r3, r3, #2
 8024dd0:	b2db      	uxtb	r3, r3
 8024dd2:	2b00      	cmp	r3, #0
 8024dd4:	d051      	beq.n	8024e7a <np_cmd_nand_write_start+0x14e>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8024dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024dd8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024ddc:	3330      	adds	r3, #48	; 0x30
 8024dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024de4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024de8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024dec:	2200      	movs	r2, #0
 8024dee:	623b      	str	r3, [r7, #32]
 8024df0:	627a      	str	r2, [r7, #36]	; 0x24
 8024df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024df6:	f7fd fed7 	bl	8022ba8 <__aeabi_uldivmod>
 8024dfa:	4602      	mov	r2, r0
 8024dfc:	460b      	mov	r3, r1
 8024dfe:	4613      	mov	r3, r2
 8024e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        pages_in_block = prog->chip_info.block_size /
 8024e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e08:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 8024e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e12:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 8024e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8024e1a:	63bb      	str	r3, [r7, #56]	; 0x38
        prog->page_size = prog->chip_info.page_size +
 8024e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e22:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
            prog->chip_info.spare_size;
 8024e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e2c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
        prog->page_size = prog->chip_info.page_size +
 8024e30:	441a      	add	r2, r3
 8024e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e34:	621a      	str	r2, [r3, #32]
        prog->block_size = pages_in_block * prog->page_size;
 8024e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e38:	6a1a      	ldr	r2, [r3, #32]
 8024e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024e3c:	fb03 f202 	mul.w	r2, r3, r2
 8024e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e42:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = (uint64_t)pages * prog->page_size;
 8024e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024e46:	2200      	movs	r2, #0
 8024e48:	469a      	mov	sl, r3
 8024e4a:	4693      	mov	fp, r2
 8024e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e4e:	6a1b      	ldr	r3, [r3, #32]
 8024e50:	2200      	movs	r2, #0
 8024e52:	61bb      	str	r3, [r7, #24]
 8024e54:	61fa      	str	r2, [r7, #28]
 8024e56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8024e5a:	4603      	mov	r3, r0
 8024e5c:	fb03 f20b 	mul.w	r2, r3, fp
 8024e60:	460b      	mov	r3, r1
 8024e62:	fb0a f303 	mul.w	r3, sl, r3
 8024e66:	4413      	add	r3, r2
 8024e68:	4602      	mov	r2, r0
 8024e6a:	fbaa 4502 	umull	r4, r5, sl, r2
 8024e6e:	442b      	add	r3, r5
 8024e70:	461d      	mov	r5, r3
 8024e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e74:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 8024e78:	e016      	b.n	8024ea8 <np_cmd_nand_write_start+0x17c>
    }
    else
    {
        prog->page_size = prog->chip_info.page_size;
 8024e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e7c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e80:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8024e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e86:	621a      	str	r2, [r3, #32]
        prog->block_size = prog->chip_info.block_size;
 8024e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e8e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8024e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e94:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = prog->chip_info.total_size;
 8024e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e98:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024e9c:	3330      	adds	r3, #48	; 0x30
 8024e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024ea4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }

    if (addr + len > prog->total_size)
 8024ea8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8024eac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024eb0:	eb10 0802 	adds.w	r8, r0, r2
 8024eb4:	eb41 0903 	adc.w	r9, r1, r3
 8024eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024eba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024ebe:	4542      	cmp	r2, r8
 8024ec0:	eb73 0309 	sbcs.w	r3, r3, r9
 8024ec4:	d210      	bcs.n	8024ee8 <np_cmd_nand_write_start+0x1bc>
    {
        ERROR_PRINT("Write address 0x%" PRIx64 "+0x%" PRIx64
 8024ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ec8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024ecc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024ed0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024ed4:	e9cd 2300 	strd	r2, r3, [sp]
 8024ed8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024edc:	483a      	ldr	r0, [pc, #232]	; (8024fc8 <np_cmd_nand_write_start+0x29c>)
 8024ede:	f00c fbfb 	bl	80316d8 <printf>
            " is more then chip size 0x%" PRIx64 "\r\n", addr, len,
            prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8024ee2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024ee6:	e0b8      	b.n	802505a <np_cmd_nand_write_start+0x32e>
    }

    if (addr % prog->page_size)
 8024ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024eea:	6a1b      	ldr	r3, [r3, #32]
 8024eec:	2200      	movs	r2, #0
 8024eee:	613b      	str	r3, [r7, #16]
 8024ef0:	617a      	str	r2, [r7, #20]
 8024ef2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8024ef6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8024efa:	f7fd fe55 	bl	8022ba8 <__aeabi_uldivmod>
 8024efe:	4313      	orrs	r3, r2
 8024f00:	d00a      	beq.n	8024f18 <np_cmd_nand_write_start+0x1ec>
    {
        ERROR_PRINT("Address 0x%" PRIx64
 8024f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f04:	6a1b      	ldr	r3, [r3, #32]
 8024f06:	9300      	str	r3, [sp, #0]
 8024f08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024f0c:	482f      	ldr	r0, [pc, #188]	; (8024fcc <np_cmd_nand_write_start+0x2a0>)
 8024f0e:	f00c fbe3 	bl	80316d8 <printf>
            " is not aligned to page size 0x%lx\r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8024f12:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8024f16:	e0a0      	b.n	802505a <np_cmd_nand_write_start+0x32e>
    }

    if (!len)
 8024f18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024f1c:	4313      	orrs	r3, r2
 8024f1e:	d105      	bne.n	8024f2c <np_cmd_nand_write_start+0x200>
    {
        ERROR_PRINT("Length is 0\r\n");
 8024f20:	482b      	ldr	r0, [pc, #172]	; (8024fd0 <np_cmd_nand_write_start+0x2a4>)
 8024f22:	f00c fc31 	bl	8031788 <puts>
        return NP_ERR_LEN_INVALID;
 8024f26:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024f2a:	e096      	b.n	802505a <np_cmd_nand_write_start+0x32e>
    }

    if (len % prog->page_size)
 8024f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f2e:	6a1b      	ldr	r3, [r3, #32]
 8024f30:	2200      	movs	r2, #0
 8024f32:	60bb      	str	r3, [r7, #8]
 8024f34:	60fa      	str	r2, [r7, #12]
 8024f36:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8024f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024f3e:	f7fd fe33 	bl	8022ba8 <__aeabi_uldivmod>
 8024f42:	4313      	orrs	r3, r2
 8024f44:	d00a      	beq.n	8024f5c <np_cmd_nand_write_start+0x230>
    {
        ERROR_PRINT("Length 0x%" PRIx64
 8024f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f48:	6a1b      	ldr	r3, [r3, #32]
 8024f4a:	9300      	str	r3, [sp, #0]
 8024f4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024f50:	4820      	ldr	r0, [pc, #128]	; (8024fd4 <np_cmd_nand_write_start+0x2a8>)
 8024f52:	f00c fbc1 	bl	80316d8 <printf>
            " is not aligned to page size 0x%lx\r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8024f56:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024f5a:	e07e      	b.n	802505a <np_cmd_nand_write_start+0x32e>
    }

    prog->skip_bb = write_start_cmd->flags.skip_bb;
 8024f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024f5e:	7c5b      	ldrb	r3, [r3, #17]
 8024f60:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8024f64:	b2db      	uxtb	r3, r3
 8024f66:	461a      	mov	r2, r3
 8024f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f6e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    if (prog->skip_bb && !prog->bb_is_read &&
 8024f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f78:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8024f7c:	2b00      	cmp	r3, #0
 8024f7e:	d00d      	beq.n	8024f9c <np_cmd_nand_write_start+0x270>
 8024f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024f84:	2b00      	cmp	r3, #0
 8024f86:	d109      	bne.n	8024f9c <np_cmd_nand_write_start+0x270>
        (ret = _np_cmd_read_bad_blocks(prog, false)))
 8024f88:	2100      	movs	r1, #0
 8024f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8024f8c:	f7ff fbca 	bl	8024724 <_np_cmd_read_bad_blocks>
 8024f90:	6378      	str	r0, [r7, #52]	; 0x34
    if (prog->skip_bb && !prog->bb_is_read &&
 8024f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024f94:	2b00      	cmp	r3, #0
 8024f96:	d001      	beq.n	8024f9c <np_cmd_nand_write_start+0x270>
    {
        return ret;
 8024f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024f9a:	e05e      	b.n	802505a <np_cmd_nand_write_start+0x32e>
    }

    if (prog->page_size > sizeof(prog->page.buf))
 8024f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f9e:	6a1b      	ldr	r3, [r3, #32]
 8024fa0:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 8024fa4:	d91a      	bls.n	8024fdc <np_cmd_nand_write_start+0x2b0>
    {
        ERROR_PRINT("Page size 0x%lx"
 8024fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024fa8:	6a1b      	ldr	r3, [r3, #32]
 8024faa:	f44f 5207 	mov.w	r2, #8640	; 0x21c0
 8024fae:	4619      	mov	r1, r3
 8024fb0:	4809      	ldr	r0, [pc, #36]	; (8024fd8 <np_cmd_nand_write_start+0x2ac>)
 8024fb2:	f00c fb91 	bl	80316d8 <printf>
            " is more then buffer size 0x%x\r\n", prog->page_size, sizeof(prog->page.buf));
        return NP_ERR_BUF_OVERFLOW;
 8024fb6:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 8024fba:	e04e      	b.n	802505a <np_cmd_nand_write_start+0x32e>
 8024fbc:	08036698 	.word	0x08036698
 8024fc0:	20000040 	.word	0x20000040
 8024fc4:	080366d4 	.word	0x080366d4
 8024fc8:	080366fc 	.word	0x080366fc
 8024fcc:	08036740 	.word	0x08036740
 8024fd0:	0803659c 	.word	0x0803659c
 8024fd4:	0803677c 	.word	0x0803677c
 8024fd8:	080367b8 	.word	0x080367b8
    }

    prog->addr = addr;
 8024fdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024fde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024fe2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 8024fe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024fe8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024fec:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 8024ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ff2:	2201      	movs	r2, #1
 8024ff4:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 8024ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ff8:	6a1b      	ldr	r3, [r3, #32]
 8024ffa:	2200      	movs	r2, #0
 8024ffc:	603b      	str	r3, [r7, #0]
 8024ffe:	607a      	str	r2, [r7, #4]
 8025000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025004:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8025008:	f7fd fdce 	bl	8022ba8 <__aeabi_uldivmod>
 802500c:	4602      	mov	r2, r0
 802500e:	460b      	mov	r3, r1
 8025010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025012:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025016:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 802501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802501c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025020:	461a      	mov	r2, r3
 8025022:	2300      	movs	r3, #0
 8025024:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 8025028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802502a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802502e:	3310      	adds	r3, #16
 8025030:	4619      	mov	r1, r3
 8025032:	f04f 0200 	mov.w	r2, #0
 8025036:	f04f 0300 	mov.w	r3, #0
 802503a:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 802503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025040:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025044:	3310      	adds	r3, #16
 8025046:	4619      	mov	r1, r3
 8025048:	f04f 0200 	mov.w	r2, #0
 802504c:	f04f 0300 	mov.w	r3, #0
 8025050:	e9c1 2300 	strd	r2, r3, [r1]

    return np_send_ok_status();
 8025054:	f7ff f9ca 	bl	80243ec <np_send_ok_status>
 8025058:	4603      	mov	r3, r0
}
 802505a:	4618      	mov	r0, r3
 802505c:	3758      	adds	r7, #88	; 0x58
 802505e:	46bd      	mov	sp, r7
 8025060:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08025064 <np_nand_handle_status>:

static int np_nand_handle_status(np_prog_t *prog)
{
 8025064:	b580      	push	{r7, lr}
 8025066:	b082      	sub	sp, #8
 8025068:	af00      	add	r7, sp, #0
 802506a:	6078      	str	r0, [r7, #4]
    switch (hal[prog->hal]->read_status())
 802506c:	687b      	ldr	r3, [r7, #4]
 802506e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025072:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8025076:	461a      	mov	r2, r3
 8025078:	4b37      	ldr	r3, [pc, #220]	; (8025158 <np_nand_handle_status+0xf4>)
 802507a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802507e:	69db      	ldr	r3, [r3, #28]
 8025080:	4798      	blx	r3
 8025082:	4603      	mov	r3, r0
 8025084:	2b02      	cmp	r3, #2
 8025086:	d006      	beq.n	8025096 <np_nand_handle_status+0x32>
 8025088:	2b02      	cmp	r3, #2
 802508a:	d84b      	bhi.n	8025124 <np_nand_handle_status+0xc0>
 802508c:	2b00      	cmp	r3, #0
 802508e:	d010      	beq.n	80250b2 <np_nand_handle_status+0x4e>
 8025090:	2b01      	cmp	r3, #1
 8025092:	d01d      	beq.n	80250d0 <np_nand_handle_status+0x6c>
 8025094:	e046      	b.n	8025124 <np_nand_handle_status+0xc0>
    {
    case FLASH_STATUS_ERROR:
        if (np_send_bad_block_info(prog->addr, prog->block_size, false))
 8025096:	687b      	ldr	r3, [r7, #4]
 8025098:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 802509c:	687b      	ldr	r3, [r7, #4]
 802509e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80250a0:	2300      	movs	r3, #0
 80250a2:	f7ff f9e3 	bl	802446c <np_send_bad_block_info>
 80250a6:	4603      	mov	r3, r0
 80250a8:	2b00      	cmp	r3, #0
 80250aa:	d002      	beq.n	80250b2 <np_nand_handle_status+0x4e>
            return -1;
 80250ac:	f04f 33ff 	mov.w	r3, #4294967295
 80250b0:	e04e      	b.n	8025150 <np_nand_handle_status+0xec>
        /* fall through */
    case FLASH_STATUS_READY:
        prog->nand_wr_in_progress = 0;
 80250b2:	687b      	ldr	r3, [r7, #4]
 80250b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80250b8:	461a      	mov	r2, r3
 80250ba:	2300      	movs	r3, #0
 80250bc:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 80250c0:	687b      	ldr	r3, [r7, #4]
 80250c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80250c6:	461a      	mov	r2, r3
 80250c8:	2300      	movs	r3, #0
 80250ca:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        break;
 80250ce:	e03e      	b.n	802514e <np_nand_handle_status+0xea>
    case FLASH_STATUS_BUSY:
        if (++prog->nand_timeout == NP_NAND_TIMEOUT)
 80250d0:	687b      	ldr	r3, [r7, #4]
 80250d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80250d6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80250da:	3301      	adds	r3, #1
 80250dc:	687a      	ldr	r2, [r7, #4]
 80250de:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80250e2:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
 80250e6:	687b      	ldr	r3, [r7, #4]
 80250e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80250ec:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80250f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80250f4:	d12a      	bne.n	802514c <np_nand_handle_status+0xe8>
        {
            ERROR_PRINT("NAND write timeout at 0x%" PRIx64 "\r\n", prog->addr);
 80250f6:	687b      	ldr	r3, [r7, #4]
 80250f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80250fc:	4817      	ldr	r0, [pc, #92]	; (802515c <np_nand_handle_status+0xf8>)
 80250fe:	f00c faeb 	bl	80316d8 <printf>
            prog->nand_wr_in_progress = 0;
 8025102:	687b      	ldr	r3, [r7, #4]
 8025104:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025108:	461a      	mov	r2, r3
 802510a:	2300      	movs	r3, #0
 802510c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
            prog->nand_timeout = 0;
 8025110:	687b      	ldr	r3, [r7, #4]
 8025112:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025116:	461a      	mov	r2, r3
 8025118:	2300      	movs	r3, #0
 802511a:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
            return -1;
 802511e:	f04f 33ff 	mov.w	r3, #4294967295
 8025122:	e015      	b.n	8025150 <np_nand_handle_status+0xec>
        }
        break;
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8025124:	480e      	ldr	r0, [pc, #56]	; (8025160 <np_nand_handle_status+0xfc>)
 8025126:	f00c fb2f 	bl	8031788 <puts>
        prog->nand_wr_in_progress = 0;
 802512a:	687b      	ldr	r3, [r7, #4]
 802512c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025130:	461a      	mov	r2, r3
 8025132:	2300      	movs	r3, #0
 8025134:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 8025138:	687b      	ldr	r3, [r7, #4]
 802513a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802513e:	461a      	mov	r2, r3
 8025140:	2300      	movs	r3, #0
 8025142:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        return -1;
 8025146:	f04f 33ff 	mov.w	r3, #4294967295
 802514a:	e001      	b.n	8025150 <np_nand_handle_status+0xec>
        break;
 802514c:	bf00      	nop
    }

    return 0;
 802514e:	2300      	movs	r3, #0
}
 8025150:	4618      	mov	r0, r3
 8025152:	3708      	adds	r7, #8
 8025154:	46bd      	mov	sp, r7
 8025156:	bd80      	pop	{r7, pc}
 8025158:	20000040 	.word	0x20000040
 802515c:	080367f0 	.word	0x080367f0
 8025160:	080364a8 	.word	0x080364a8

08025164 <np_nand_write>:

static int np_nand_write(np_prog_t *prog)
{   
 8025164:	b580      	push	{r7, lr}
 8025166:	b084      	sub	sp, #16
 8025168:	af02      	add	r7, sp, #8
 802516a:	6078      	str	r0, [r7, #4]
    if (prog->nand_wr_in_progress)
 802516c:	687b      	ldr	r3, [r7, #4]
 802516e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025172:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8025176:	2b00      	cmp	r3, #0
 8025178:	d012      	beq.n	80251a0 <np_nand_write+0x3c>
    {
        DEBUG_PRINT("Wait for previous NAND write\r\n");
 802517a:	481e      	ldr	r0, [pc, #120]	; (80251f4 <np_nand_write+0x90>)
 802517c:	f00c fb04 	bl	8031788 <puts>
        do
        {
            if (np_nand_handle_status(prog))
 8025180:	6878      	ldr	r0, [r7, #4]
 8025182:	f7ff ff6f 	bl	8025064 <np_nand_handle_status>
 8025186:	4603      	mov	r3, r0
 8025188:	2b00      	cmp	r3, #0
 802518a:	d002      	beq.n	8025192 <np_nand_write+0x2e>
                return -1;
 802518c:	f04f 33ff 	mov.w	r3, #4294967295
 8025190:	e02c      	b.n	80251ec <np_nand_write+0x88>
        }
        while (prog->nand_wr_in_progress);
 8025192:	687b      	ldr	r3, [r7, #4]
 8025194:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025198:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 802519c:	2b00      	cmp	r3, #0
 802519e:	d1ef      	bne.n	8025180 <np_nand_write+0x1c>
    }

    DEBUG_PRINT("NAND write at 0x%" PRIx64 " %lu bytes\r\n", prog->addr,
 80251a0:	687b      	ldr	r3, [r7, #4]
 80251a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80251a6:	6879      	ldr	r1, [r7, #4]
 80251a8:	6a09      	ldr	r1, [r1, #32]
 80251aa:	9100      	str	r1, [sp, #0]
 80251ac:	4812      	ldr	r0, [pc, #72]	; (80251f8 <np_nand_write+0x94>)
 80251ae:	f00c fa93 	bl	80316d8 <printf>
        prog->page_size);

    hal[prog->hal]->write_page_async(prog->page.buf, prog->page.page,
 80251b2:	687b      	ldr	r3, [r7, #4]
 80251b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80251b8:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 80251bc:	461a      	mov	r2, r3
 80251be:	4b0f      	ldr	r3, [pc, #60]	; (80251fc <np_nand_write+0x98>)
 80251c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80251c4:	699b      	ldr	r3, [r3, #24]
 80251c6:	687a      	ldr	r2, [r7, #4]
 80251c8:	f102 003c 	add.w	r0, r2, #60	; 0x3c
 80251cc:	687a      	ldr	r2, [r7, #4]
 80251ce:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80251d2:	f8d2 11fc 	ldr.w	r1, [r2, #508]	; 0x1fc
 80251d6:	687a      	ldr	r2, [r7, #4]
 80251d8:	6a12      	ldr	r2, [r2, #32]
 80251da:	4798      	blx	r3
        prog->page_size);

    prog->nand_wr_in_progress = 1;
 80251dc:	687b      	ldr	r3, [r7, #4]
 80251de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80251e2:	461a      	mov	r2, r3
 80251e4:	2301      	movs	r3, #1
 80251e6:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

    return 0;
 80251ea:	2300      	movs	r3, #0
}
 80251ec:	4618      	mov	r0, r3
 80251ee:	3708      	adds	r7, #8
 80251f0:	46bd      	mov	sp, r7
 80251f2:	bd80      	pop	{r7, pc}
 80251f4:	08036818 	.word	0x08036818
 80251f8:	08036838 	.word	0x08036838
 80251fc:	20000040 	.word	0x20000040

08025200 <np_cmd_nand_write_data>:

static int np_cmd_nand_write_data(np_prog_t *prog)
{
 8025200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8025204:	b092      	sub	sp, #72	; 0x48
 8025206:	af02      	add	r7, sp, #8
 8025208:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint32_t write_len, bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 802520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802520c:	685b      	ldr	r3, [r3, #4]
 802520e:	2b01      	cmp	r3, #1
 8025210:	d808      	bhi.n	8025224 <np_cmd_nand_write_data+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write data command %lu\r\n",
 8025212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025214:	685b      	ldr	r3, [r3, #4]
 8025216:	4619      	mov	r1, r3
 8025218:	486e      	ldr	r0, [pc, #440]	; (80253d4 <np_cmd_nand_write_data+0x1d4>)
 802521a:	f00c fa5d 	bl	80316d8 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 802521e:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025222:	e1a1      	b.n	8025568 <np_cmd_nand_write_data+0x368>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 8025224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025226:	681b      	ldr	r3, [r3, #0]
 8025228:	63bb      	str	r3, [r7, #56]	; 0x38
    len = write_data_cmd->len;
 802522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802522c:	785b      	ldrb	r3, [r3, #1]
 802522e:	637b      	str	r3, [r7, #52]	; 0x34
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 8025230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025232:	3302      	adds	r3, #2
 8025234:	2b40      	cmp	r3, #64	; 0x40
 8025236:	d906      	bls.n	8025246 <np_cmd_nand_write_data+0x46>
    {
        ERROR_PRINT("Data size is wrong 0x%lx\r\n", len);
 8025238:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802523a:	4867      	ldr	r0, [pc, #412]	; (80253d8 <np_cmd_nand_write_data+0x1d8>)
 802523c:	f00c fa4c 	bl	80316d8 <printf>
        return NP_ERR_CMD_DATA_SIZE;
 8025240:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8025244:	e190      	b.n	8025568 <np_cmd_nand_write_data+0x368>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 8025246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025248:	1c9a      	adds	r2, r3, #2
 802524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802524c:	685b      	ldr	r3, [r3, #4]
 802524e:	429a      	cmp	r2, r3
 8025250:	d00a      	beq.n	8025268 <np_cmd_nand_write_data+0x68>
    {
        ERROR_PRINT("Buffer len 0x%lx is bigger then command 0x%lx\r\n",
 8025252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025254:	6859      	ldr	r1, [r3, #4]
 8025256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025258:	3302      	adds	r3, #2
 802525a:	461a      	mov	r2, r3
 802525c:	485f      	ldr	r0, [pc, #380]	; (80253dc <np_cmd_nand_write_data+0x1dc>)
 802525e:	f00c fa3b 	bl	80316d8 <printf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 8025262:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8025266:	e17f      	b.n	8025568 <np_cmd_nand_write_data+0x368>
    }

    if (!prog->addr_is_set)
 8025268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802526c:	2b00      	cmp	r3, #0
 802526e:	d105      	bne.n	802527c <np_cmd_nand_write_data+0x7c>
    {
        ERROR_PRINT("Write address is not set\r\n");
 8025270:	485b      	ldr	r0, [pc, #364]	; (80253e0 <np_cmd_nand_write_data+0x1e0>)
 8025272:	f00c fa89 	bl	8031788 <puts>
        return NP_ERR_ADDR_INVALID;
 8025276:	f06f 0364 	mvn.w	r3, #100	; 0x64
 802527a:	e175      	b.n	8025568 <np_cmd_nand_write_data+0x368>
    }

    if (prog->page.offset + len > prog->page_size)
 802527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802527e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025282:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8025286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025288:	441a      	add	r2, r3
 802528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802528c:	6a1b      	ldr	r3, [r3, #32]
 802528e:	429a      	cmp	r2, r3
 8025290:	d909      	bls.n	80252a6 <np_cmd_nand_write_data+0xa6>
        write_len = prog->page_size - prog->page.offset;
 8025292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025294:	6a1a      	ldr	r2, [r3, #32]
 8025296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025298:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802529c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80252a0:	1ad3      	subs	r3, r2, r3
 80252a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80252a4:	e001      	b.n	80252aa <np_cmd_nand_write_data+0xaa>
    else
        write_len = len;
 80252a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80252a8:	63fb      	str	r3, [r7, #60]	; 0x3c

    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 80252aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252ac:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80252b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80252b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80252ba:	18d0      	adds	r0, r2, r3
 80252bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252be:	3302      	adds	r3, #2
 80252c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80252c2:	4619      	mov	r1, r3
 80252c4:	f00c fb28 	bl	8031918 <memcpy>
    prog->page.offset += write_len;
 80252c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80252ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80252d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80252d4:	441a      	add	r2, r3
 80252d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80252dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    if (prog->page.offset == prog->page_size)
 80252e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80252e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80252ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252ec:	6a1b      	ldr	r3, [r3, #32]
 80252ee:	429a      	cmp	r2, r3
 80252f0:	f040 80a2 	bne.w	8025438 <np_cmd_nand_write_data+0x238>
    {
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 80252f4:	e038      	b.n	8025368 <np_cmd_nand_write_data+0x168>
        {
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", prog->addr);
 80252f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80252fc:	4839      	ldr	r0, [pc, #228]	; (80253e4 <np_cmd_nand_write_data+0x1e4>)
 80252fe:	f00c f9eb 	bl	80316d8 <printf>
            if (np_send_bad_block_info(prog->addr, prog->block_size, true))
 8025302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025304:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8025308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802530a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802530c:	2301      	movs	r3, #1
 802530e:	f7ff f8ad 	bl	802446c <np_send_bad_block_info>
 8025312:	4603      	mov	r3, r0
 8025314:	2b00      	cmp	r3, #0
 8025316:	d002      	beq.n	802531e <np_cmd_nand_write_data+0x11e>
                return -1;
 8025318:	f04f 33ff 	mov.w	r3, #4294967295
 802531c:	e124      	b.n	8025568 <np_cmd_nand_write_data+0x368>

            prog->addr += prog->block_size;
 802531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025320:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8025324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025328:	2200      	movs	r2, #0
 802532a:	623b      	str	r3, [r7, #32]
 802532c:	627a      	str	r2, [r7, #36]	; 0x24
 802532e:	6a3b      	ldr	r3, [r7, #32]
 8025330:	18c3      	adds	r3, r0, r3
 8025332:	613b      	str	r3, [r7, #16]
 8025334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025336:	eb41 0303 	adc.w	r3, r1, r3
 802533a:	617b      	str	r3, [r7, #20]
 802533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802533e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8025342:	e9c3 1202 	strd	r1, r2, [r3, #8]
            prog->page.page += prog->block_size / prog->page_size;
 8025346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025348:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802534c:	f8d3 11fc 	ldr.w	r1, [r3, #508]	; 0x1fc
 8025350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025356:	6a1b      	ldr	r3, [r3, #32]
 8025358:	fbb2 f3f3 	udiv	r3, r2, r3
 802535c:	18ca      	adds	r2, r1, r3
 802535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025360:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025364:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 8025368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802536a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802536e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8025372:	2b00      	cmp	r3, #0
 8025374:	d00a      	beq.n	802538c <np_cmd_nand_write_data+0x18c>
 8025376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025378:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802537c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8025380:	4618      	mov	r0, r3
 8025382:	f7fe ffcb 	bl	802431c <nand_bad_block_table_lookup>
 8025386:	4603      	mov	r3, r0
 8025388:	2b00      	cmp	r3, #0
 802538a:	d1b4      	bne.n	80252f6 <np_cmd_nand_write_data+0xf6>
        }

        if (prog->addr >= prog->total_size)
 802538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802538e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8025392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025394:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8025398:	4290      	cmp	r0, r2
 802539a:	eb71 0303 	sbcs.w	r3, r1, r3
 802539e:	d30f      	bcc.n	80253c0 <np_cmd_nand_write_data+0x1c0>
        {
            ERROR_PRINT("Write address 0x%" PRIx64
 80253a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80253a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80253ac:	e9cd 2300 	strd	r2, r3, [sp]
 80253b0:	4602      	mov	r2, r0
 80253b2:	460b      	mov	r3, r1
 80253b4:	480c      	ldr	r0, [pc, #48]	; (80253e8 <np_cmd_nand_write_data+0x1e8>)
 80253b6:	f00c f98f 	bl	80316d8 <printf>
                " is more then chip size 0x%" PRIx64 "\r\n", prog->addr,
                prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 80253ba:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80253be:	e0d3      	b.n	8025568 <np_cmd_nand_write_data+0x368>
        }

        if (np_nand_write(prog))
 80253c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80253c2:	f7ff fecf 	bl	8025164 <np_nand_write>
 80253c6:	4603      	mov	r3, r0
 80253c8:	2b00      	cmp	r3, #0
 80253ca:	d00f      	beq.n	80253ec <np_cmd_nand_write_data+0x1ec>
            return NP_ERR_NAND_WR;
 80253cc:	f06f 0366 	mvn.w	r3, #102	; 0x66
 80253d0:	e0ca      	b.n	8025568 <np_cmd_nand_write_data+0x368>
 80253d2:	bf00      	nop
 80253d4:	0803685c 	.word	0x0803685c
 80253d8:	08036894 	.word	0x08036894
 80253dc:	080368b8 	.word	0x080368b8
 80253e0:	080368f0 	.word	0x080368f0
 80253e4:	08036674 	.word	0x08036674
 80253e8:	08036914 	.word	0x08036914

        prog->addr += prog->page_size;
 80253ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253ee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80253f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253f4:	6a1b      	ldr	r3, [r3, #32]
 80253f6:	2200      	movs	r2, #0
 80253f8:	61bb      	str	r3, [r7, #24]
 80253fa:	61fa      	str	r2, [r7, #28]
 80253fc:	69bb      	ldr	r3, [r7, #24]
 80253fe:	18c3      	adds	r3, r0, r3
 8025400:	60bb      	str	r3, [r7, #8]
 8025402:	69fb      	ldr	r3, [r7, #28]
 8025404:	eb41 0303 	adc.w	r3, r1, r3
 8025408:	60fb      	str	r3, [r7, #12]
 802540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802540c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8025410:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8025414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025416:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802541a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 802541e:	3301      	adds	r3, #1
 8025420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025422:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025426:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 802542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802542c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025430:	461a      	mov	r2, r3
 8025432:	2300      	movs	r3, #0
 8025434:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    bytes_left = len - write_len;
 8025438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802543a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802543c:	1ad3      	subs	r3, r2, r3
 802543e:	633b      	str	r3, [r7, #48]	; 0x30
    if (bytes_left)
 8025440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025442:	2b00      	cmp	r3, #0
 8025444:	d016      	beq.n	8025474 <np_cmd_nand_write_data+0x274>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8025446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025448:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 802544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802544e:	1c9a      	adds	r2, r3, #2
 8025450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025452:	4413      	add	r3, r2
 8025454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025456:	4619      	mov	r1, r3
 8025458:	f00c fa5e 	bl	8031918 <memcpy>
        prog->page.offset += bytes_left;
 802545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802545e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025462:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8025466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025468:	4413      	add	r3, r2
 802546a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802546c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025470:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    prog->bytes_written += len;
 8025474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025476:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802547a:	3310      	adds	r3, #16
 802547c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025480:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025482:	2000      	movs	r0, #0
 8025484:	468a      	mov	sl, r1
 8025486:	4683      	mov	fp, r0
 8025488:	eb12 010a 	adds.w	r1, r2, sl
 802548c:	6039      	str	r1, [r7, #0]
 802548e:	eb43 030b 	adc.w	r3, r3, fp
 8025492:	607b      	str	r3, [r7, #4]
 8025494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025496:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802549a:	3310      	adds	r3, #16
 802549c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80254a0:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 80254a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254a6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80254aa:	3310      	adds	r3, #16
 80254ac:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80254b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254b2:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80254b6:	3310      	adds	r3, #16
 80254b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254bc:	1a84      	subs	r4, r0, r2
 80254be:	eb61 0503 	sbc.w	r5, r1, r3
 80254c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254c4:	6a1b      	ldr	r3, [r3, #32]
 80254c6:	2200      	movs	r2, #0
 80254c8:	4698      	mov	r8, r3
 80254ca:	4691      	mov	r9, r2
 80254cc:	4544      	cmp	r4, r8
 80254ce:	eb75 0309 	sbcs.w	r3, r5, r9
 80254d2:	d20c      	bcs.n	80254ee <np_cmd_nand_write_data+0x2ee>
        prog->bytes_written == prog->len)
 80254d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254d6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80254da:	3310      	adds	r3, #16
 80254dc:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80254e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 80254e6:	4299      	cmp	r1, r3
 80254e8:	bf08      	it	eq
 80254ea:	4290      	cmpeq	r0, r2
 80254ec:	d11b      	bne.n	8025526 <np_cmd_nand_write_data+0x326>
    {
        if (np_send_write_ack(prog->bytes_written))
 80254ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254f0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80254f4:	3310      	adds	r3, #16
 80254f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80254fa:	4610      	mov	r0, r2
 80254fc:	4619      	mov	r1, r3
 80254fe:	f7ff fbed 	bl	8024cdc <np_send_write_ack>
 8025502:	4603      	mov	r3, r0
 8025504:	2b00      	cmp	r3, #0
 8025506:	d002      	beq.n	802550e <np_cmd_nand_write_data+0x30e>
            return -1;
 8025508:	f04f 33ff 	mov.w	r3, #4294967295
 802550c:	e02c      	b.n	8025568 <np_cmd_nand_write_data+0x368>
        prog->bytes_ack = prog->bytes_written;
 802550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025510:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025514:	3310      	adds	r3, #16
 8025516:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 802551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802551c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025520:	3310      	adds	r3, #16
 8025522:	e9c3 0100 	strd	r0, r1, [r3]
    }

    if (prog->bytes_written > prog->len)
 8025526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025528:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802552c:	3310      	adds	r3, #16
 802552e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8025534:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8025538:	4290      	cmp	r0, r2
 802553a:	eb71 0303 	sbcs.w	r3, r1, r3
 802553e:	d212      	bcs.n	8025566 <np_cmd_nand_write_data+0x366>
    {
        ERROR_PRINT("Actual write data length 0x%" PRIx64
 8025540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025542:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025546:	3310      	adds	r3, #16
 8025548:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 802554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802554e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8025552:	e9cd 2300 	strd	r2, r3, [sp]
 8025556:	4602      	mov	r2, r0
 8025558:	460b      	mov	r3, r1
 802555a:	4806      	ldr	r0, [pc, #24]	; (8025574 <np_cmd_nand_write_data+0x374>)
 802555c:	f00c f8bc 	bl	80316d8 <printf>
            " is more then 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 8025560:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8025564:	e000      	b.n	8025568 <np_cmd_nand_write_data+0x368>
    }

    return 0;
 8025566:	2300      	movs	r3, #0
}
 8025568:	4618      	mov	r0, r3
 802556a:	3740      	adds	r7, #64	; 0x40
 802556c:	46bd      	mov	sp, r7
 802556e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8025572:	bf00      	nop
 8025574:	08036950 	.word	0x08036950

08025578 <np_cmd_nand_write_end>:

static int np_cmd_nand_write_end(np_prog_t *prog)
{
 8025578:	b580      	push	{r7, lr}
 802557a:	b082      	sub	sp, #8
 802557c:	af00      	add	r7, sp, #0
 802557e:	6078      	str	r0, [r7, #4]
    prog->addr_is_set = 0;
 8025580:	687b      	ldr	r3, [r7, #4]
 8025582:	2200      	movs	r2, #0
 8025584:	631a      	str	r2, [r3, #48]	; 0x30

    if (prog->page.offset)
 8025586:	687b      	ldr	r3, [r7, #4]
 8025588:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802558c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025590:	2b00      	cmp	r3, #0
 8025592:	d00b      	beq.n	80255ac <np_cmd_nand_write_end+0x34>
    {
        ERROR_PRINT("Data of 0x%lx length was not written\r\n",
 8025594:	687b      	ldr	r3, [r7, #4]
 8025596:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802559a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802559e:	4619      	mov	r1, r3
 80255a0:	4806      	ldr	r0, [pc, #24]	; (80255bc <np_cmd_nand_write_end+0x44>)
 80255a2:	f00c f899 	bl	80316d8 <printf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 80255a6:	f06f 0366 	mvn.w	r3, #102	; 0x66
 80255aa:	e002      	b.n	80255b2 <np_cmd_nand_write_end+0x3a>
    }

    return np_send_ok_status();
 80255ac:	f7fe ff1e 	bl	80243ec <np_send_ok_status>
 80255b0:	4603      	mov	r3, r0
}
 80255b2:	4618      	mov	r0, r3
 80255b4:	3708      	adds	r7, #8
 80255b6:	46bd      	mov	sp, r7
 80255b8:	bd80      	pop	{r7, pc}
 80255ba:	bf00      	nop
 80255bc:	08036990 	.word	0x08036990

080255c0 <np_cmd_nand_write>:

static int np_cmd_nand_write(np_prog_t *prog)
{
 80255c0:	b580      	push	{r7, lr}
 80255c2:	b084      	sub	sp, #16
 80255c4:	af00      	add	r7, sp, #0
 80255c6:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 80255c8:	687b      	ldr	r3, [r7, #4]
 80255ca:	681b      	ldr	r3, [r3, #0]
 80255cc:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 80255ce:	2300      	movs	r3, #0
 80255d0:	60fb      	str	r3, [r7, #12]

    switch (cmd->code)
 80255d2:	68bb      	ldr	r3, [r7, #8]
 80255d4:	781b      	ldrb	r3, [r3, #0]
 80255d6:	2b05      	cmp	r3, #5
 80255d8:	d013      	beq.n	8025602 <np_cmd_nand_write+0x42>
 80255da:	2b05      	cmp	r3, #5
 80255dc:	dc19      	bgt.n	8025612 <np_cmd_nand_write+0x52>
 80255de:	2b03      	cmp	r3, #3
 80255e0:	d002      	beq.n	80255e8 <np_cmd_nand_write+0x28>
 80255e2:	2b04      	cmp	r3, #4
 80255e4:	d008      	beq.n	80255f8 <np_cmd_nand_write+0x38>
    case NP_CMD_NAND_WRITE_E:
        ret = np_cmd_nand_write_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 80255e6:	e014      	b.n	8025612 <np_cmd_nand_write+0x52>
        led_wr_set(true);
 80255e8:	2001      	movs	r0, #1
 80255ea:	f7fe fd5f 	bl	80240ac <led_wr_set>
        ret = np_cmd_nand_write_start(prog);
 80255ee:	6878      	ldr	r0, [r7, #4]
 80255f0:	f7ff fb9c 	bl	8024d2c <np_cmd_nand_write_start>
 80255f4:	60f8      	str	r0, [r7, #12]
        break;
 80255f6:	e00d      	b.n	8025614 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_data(prog);
 80255f8:	6878      	ldr	r0, [r7, #4]
 80255fa:	f7ff fe01 	bl	8025200 <np_cmd_nand_write_data>
 80255fe:	60f8      	str	r0, [r7, #12]
        break;
 8025600:	e008      	b.n	8025614 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_end(prog);
 8025602:	6878      	ldr	r0, [r7, #4]
 8025604:	f7ff ffb8 	bl	8025578 <np_cmd_nand_write_end>
 8025608:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 802560a:	2000      	movs	r0, #0
 802560c:	f7fe fd4e 	bl	80240ac <led_wr_set>
        break;
 8025610:	e000      	b.n	8025614 <np_cmd_nand_write+0x54>
        break;
 8025612:	bf00      	nop
    }

    if (ret < 0)
 8025614:	68fb      	ldr	r3, [r7, #12]
 8025616:	2b00      	cmp	r3, #0
 8025618:	da02      	bge.n	8025620 <np_cmd_nand_write+0x60>
        led_wr_set(false);
 802561a:	2000      	movs	r0, #0
 802561c:	f7fe fd46 	bl	80240ac <led_wr_set>

    return ret;
 8025620:	68fb      	ldr	r3, [r7, #12]
}
 8025622:	4618      	mov	r0, r3
 8025624:	3710      	adds	r7, #16
 8025626:	46bd      	mov	sp, r7
 8025628:	bd80      	pop	{r7, pc}
	...

0802562c <np_nand_read>:

static int np_nand_read(uint64_t addr, np_page_t *page, uint32_t page_size,
    uint32_t block_size, np_prog_t *prog)
{
 802562c:	b580      	push	{r7, lr}
 802562e:	b086      	sub	sp, #24
 8025630:	af00      	add	r7, sp, #0
 8025632:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8025636:	607a      	str	r2, [r7, #4]
 8025638:	603b      	str	r3, [r7, #0]
    uint32_t status;

    status = hal[prog->hal]->read_page(page->buf, page->page, page_size);
 802563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802563c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025640:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8025644:	461a      	mov	r2, r3
 8025646:	4b1c      	ldr	r3, [pc, #112]	; (80256b8 <np_nand_read+0x8c>)
 8025648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802564c:	691b      	ldr	r3, [r3, #16]
 802564e:	6878      	ldr	r0, [r7, #4]
 8025650:	687a      	ldr	r2, [r7, #4]
 8025652:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025656:	f8d2 11c0 	ldr.w	r1, [r2, #448]	; 0x1c0
 802565a:	683a      	ldr	r2, [r7, #0]
 802565c:	4798      	blx	r3
 802565e:	6178      	str	r0, [r7, #20]
    switch (status)
 8025660:	697b      	ldr	r3, [r7, #20]
 8025662:	2b03      	cmp	r3, #3
 8025664:	d014      	beq.n	8025690 <np_nand_read+0x64>
 8025666:	697b      	ldr	r3, [r7, #20]
 8025668:	2b03      	cmp	r3, #3
 802566a:	d817      	bhi.n	802569c <np_nand_read+0x70>
 802566c:	697b      	ldr	r3, [r7, #20]
 802566e:	2b00      	cmp	r3, #0
 8025670:	d01a      	beq.n	80256a8 <np_nand_read+0x7c>
 8025672:	697b      	ldr	r3, [r7, #20]
 8025674:	2b02      	cmp	r3, #2
 8025676:	d111      	bne.n	802569c <np_nand_read+0x70>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        if (np_send_bad_block_info(addr, block_size, false))
 8025678:	2300      	movs	r3, #0
 802567a:	6a3a      	ldr	r2, [r7, #32]
 802567c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025680:	f7fe fef4 	bl	802446c <np_send_bad_block_info>
 8025684:	4603      	mov	r3, r0
 8025686:	2b00      	cmp	r3, #0
 8025688:	d010      	beq.n	80256ac <np_nand_read+0x80>
            return -1;
 802568a:	f04f 33ff 	mov.w	r3, #4294967295
 802568e:	e00f      	b.n	80256b0 <np_nand_read+0x84>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND write timeout at 0x%" PRIx64 "\r\n", addr);
 8025690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8025694:	4809      	ldr	r0, [pc, #36]	; (80256bc <np_nand_read+0x90>)
 8025696:	f00c f81f 	bl	80316d8 <printf>
        break;
 802569a:	e008      	b.n	80256ae <np_nand_read+0x82>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 802569c:	4808      	ldr	r0, [pc, #32]	; (80256c0 <np_nand_read+0x94>)
 802569e:	f00c f873 	bl	8031788 <puts>
        return -1;
 80256a2:	f04f 33ff 	mov.w	r3, #4294967295
 80256a6:	e003      	b.n	80256b0 <np_nand_read+0x84>
        break;
 80256a8:	bf00      	nop
 80256aa:	e000      	b.n	80256ae <np_nand_read+0x82>
        break;
 80256ac:	bf00      	nop
    }

    return 0;
 80256ae:	2300      	movs	r3, #0
}
 80256b0:	4618      	mov	r0, r3
 80256b2:	3718      	adds	r7, #24
 80256b4:	46bd      	mov	sp, r7
 80256b6:	bd80      	pop	{r7, pc}
 80256b8:	20000040 	.word	0x20000040
 80256bc:	080367f0 	.word	0x080367f0
 80256c0:	080364a8 	.word	0x080364a8

080256c4 <_np_cmd_nand_read>:

static int _np_cmd_nand_read(np_prog_t *prog)
{
 80256c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80256c8:	b0b4      	sub	sp, #208	; 0xd0
 80256ca:	af04      	add	r7, sp, #16
 80256cc:	6778      	str	r0, [r7, #116]	; 0x74
    static np_page_t page;
    np_read_cmd_t *read_cmd;
    bool skip_bb, inc_spare;
    uint64_t addr, len, total_size;
    uint32_t send_len, block_size, page_size, pages, pages_in_block;
    uint32_t resp_header_size = offsetof(np_resp_t, data);
 80256ce:	2302      	movs	r3, #2
 80256d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t tx_data_len = sizeof(np_packet_send_buf) - resp_header_size;
 80256d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80256d8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80256dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    np_resp_t *resp = (np_resp_t *)np_packet_send_buf;
 80256e0:	4bb9      	ldr	r3, [pc, #740]	; (80259c8 <_np_cmd_nand_read+0x304>)
 80256e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    if (prog->rx_buf_len < sizeof(np_read_cmd_t))
 80256e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80256e8:	685b      	ldr	r3, [r3, #4]
 80256ea:	2b11      	cmp	r3, #17
 80256ec:	d808      	bhi.n	8025700 <_np_cmd_nand_read+0x3c>
    {
        ERROR_PRINT("Wrong buffer length for read command %lu\r\n",
 80256ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80256f0:	685b      	ldr	r3, [r3, #4]
 80256f2:	4619      	mov	r1, r3
 80256f4:	48b5      	ldr	r0, [pc, #724]	; (80259cc <_np_cmd_nand_read+0x308>)
 80256f6:	f00b ffef 	bl	80316d8 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80256fa:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80256fe:	e283      	b.n	8025c08 <_np_cmd_nand_read+0x544>
    }

    read_cmd = (np_read_cmd_t *)prog->rx_buf;
 8025700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025702:	681b      	ldr	r3, [r3, #0]
 8025704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    addr = read_cmd->addr;
 8025708:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 802570c:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8025710:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8025714:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
    len = read_cmd->len;
 8025718:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 802571c:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8025720:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8025724:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    skip_bb = read_cmd->flags.skip_bb;
 8025728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802572c:	7c5b      	ldrb	r3, [r3, #17]
 802572e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8025732:	b2db      	uxtb	r3, r3
 8025734:	2b00      	cmp	r3, #0
 8025736:	bf14      	ite	ne
 8025738:	2301      	movne	r3, #1
 802573a:	2300      	moveq	r3, #0
 802573c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    inc_spare = read_cmd->flags.inc_spare;
 8025740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025744:	7c5b      	ldrb	r3, [r3, #17]
 8025746:	f3c3 0340 	ubfx	r3, r3, #1, #1
 802574a:	b2db      	uxtb	r3, r3
 802574c:	2b00      	cmp	r3, #0
 802574e:	bf14      	ite	ne
 8025750:	2301      	movne	r3, #1
 8025752:	2300      	moveq	r3, #0
 8025754:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    DEBUG_PRINT("Read at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n", addr,
 8025758:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 802575c:	e9cd 2300 	strd	r2, r3, [sp]
 8025760:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025764:	489a      	ldr	r0, [pc, #616]	; (80259d0 <_np_cmd_nand_read+0x30c>)
 8025766:	f00b ffb7 	bl	80316d8 <printf>
        len);

    if (inc_spare)
 802576a:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 802576e:	2b00      	cmp	r3, #0
 8025770:	d056      	beq.n	8025820 <_np_cmd_nand_read+0x15c>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8025772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025774:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025778:	3330      	adds	r3, #48	; 0x30
 802577a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802577e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025780:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025784:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8025788:	2200      	movs	r2, #0
 802578a:	66bb      	str	r3, [r7, #104]	; 0x68
 802578c:	66fa      	str	r2, [r7, #108]	; 0x6c
 802578e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8025792:	f7fd fa09 	bl	8022ba8 <__aeabi_uldivmod>
 8025796:	4602      	mov	r2, r0
 8025798:	460b      	mov	r3, r1
 802579a:	4613      	mov	r3, r2
 802579c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        pages_in_block = prog->chip_info.block_size /
 80257a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80257a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80257a6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 80257aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80257ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80257b0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 80257b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80257b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 80257bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80257be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80257c2:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 80257c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80257c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80257cc:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80257d0:	4413      	add	r3, r2
 80257d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = pages_in_block * page_size;
 80257d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80257da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80257de:	fb02 f303 	mul.w	r3, r2, r3
 80257e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = (uint64_t)pages * page_size;
 80257e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80257ea:	2200      	movs	r2, #0
 80257ec:	663b      	str	r3, [r7, #96]	; 0x60
 80257ee:	667a      	str	r2, [r7, #100]	; 0x64
 80257f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80257f4:	2200      	movs	r2, #0
 80257f6:	4698      	mov	r8, r3
 80257f8:	4691      	mov	r9, r2
 80257fa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80257fe:	460b      	mov	r3, r1
 8025800:	fb08 f203 	mul.w	r2, r8, r3
 8025804:	4603      	mov	r3, r0
 8025806:	fb03 f309 	mul.w	r3, r3, r9
 802580a:	4413      	add	r3, r2
 802580c:	4602      	mov	r2, r0
 802580e:	fba2 4508 	umull	r4, r5, r2, r8
 8025812:	442b      	add	r3, r5
 8025814:	461d      	mov	r5, r3
 8025816:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 802581a:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 802581e:	e015      	b.n	802584c <_np_cmd_nand_read+0x188>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8025820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025822:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025826:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 802582a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = prog->chip_info.block_size;
 802582e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025830:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025834:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8025838:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = prog->chip_info.total_size;
 802583c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802583e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025842:	3330      	adds	r3, #48	; 0x30
 8025844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025848:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
    }

    if (addr + len > total_size)
 802584c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025850:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025854:	eb10 0a02 	adds.w	sl, r0, r2
 8025858:	eb41 0b03 	adc.w	fp, r1, r3
 802585c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025860:	4552      	cmp	r2, sl
 8025862:	eb73 030b 	sbcs.w	r3, r3, fp
 8025866:	d20f      	bcs.n	8025888 <_np_cmd_nand_read+0x1c4>
    {
        ERROR_PRINT("Read address 0x%" PRIx64 "+0x%" PRIx64
 8025868:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 802586c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025870:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025874:	e9cd 2300 	strd	r2, r3, [sp]
 8025878:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 802587c:	4855      	ldr	r0, [pc, #340]	; (80259d4 <_np_cmd_nand_read+0x310>)
 802587e:	f00b ff2b 	bl	80316d8 <printf>
            " is more then chip size 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8025882:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025886:	e1bf      	b.n	8025c08 <_np_cmd_nand_read+0x544>
    }

    if (addr % page_size)
 8025888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802588c:	2200      	movs	r2, #0
 802588e:	65bb      	str	r3, [r7, #88]	; 0x58
 8025890:	65fa      	str	r2, [r7, #92]	; 0x5c
 8025892:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025896:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802589a:	f7fd f985 	bl	8022ba8 <__aeabi_uldivmod>
 802589e:	4313      	orrs	r3, r2
 80258a0:	d00a      	beq.n	80258b8 <_np_cmd_nand_read+0x1f4>
    {
        ERROR_PRINT("Read address 0x%" PRIx64
 80258a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80258a6:	9300      	str	r3, [sp, #0]
 80258a8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80258ac:	484a      	ldr	r0, [pc, #296]	; (80259d8 <_np_cmd_nand_read+0x314>)
 80258ae:	f00b ff13 	bl	80316d8 <printf>
            " is not aligned to page size 0x%lx\r\n", addr, page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 80258b2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80258b6:	e1a7      	b.n	8025c08 <_np_cmd_nand_read+0x544>
    }

    if (!len)
 80258b8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80258bc:	4313      	orrs	r3, r2
 80258be:	d105      	bne.n	80258cc <_np_cmd_nand_read+0x208>
    {
        ERROR_PRINT("Length is 0\r\n");
 80258c0:	4846      	ldr	r0, [pc, #280]	; (80259dc <_np_cmd_nand_read+0x318>)
 80258c2:	f00b ff61 	bl	8031788 <puts>
        return NP_ERR_LEN_INVALID;
 80258c6:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80258ca:	e19d      	b.n	8025c08 <_np_cmd_nand_read+0x544>
    }

    if (len % page_size)
 80258cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80258d0:	2200      	movs	r2, #0
 80258d2:	653b      	str	r3, [r7, #80]	; 0x50
 80258d4:	657a      	str	r2, [r7, #84]	; 0x54
 80258d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80258da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80258de:	f7fd f963 	bl	8022ba8 <__aeabi_uldivmod>
 80258e2:	4313      	orrs	r3, r2
 80258e4:	d00a      	beq.n	80258fc <_np_cmd_nand_read+0x238>
    {
        ERROR_PRINT("Read length 0x%" PRIx64
 80258e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80258ea:	9300      	str	r3, [sp, #0]
 80258ec:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80258f0:	483b      	ldr	r0, [pc, #236]	; (80259e0 <_np_cmd_nand_read+0x31c>)
 80258f2:	f00b fef1 	bl	80316d8 <printf>
            " is not aligned to page size 0x%lx\r\n", len, page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 80258f6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80258fa:	e185      	b.n	8025c08 <_np_cmd_nand_read+0x544>
    }

    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 80258fc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8025900:	2b00      	cmp	r3, #0
 8025902:	d00d      	beq.n	8025920 <_np_cmd_nand_read+0x25c>
 8025904:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025908:	2b00      	cmp	r3, #0
 802590a:	d109      	bne.n	8025920 <_np_cmd_nand_read+0x25c>
 802590c:	2100      	movs	r1, #0
 802590e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8025910:	f7fe ff08 	bl	8024724 <_np_cmd_read_bad_blocks>
 8025914:	67f8      	str	r0, [r7, #124]	; 0x7c
 8025916:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025918:	2b00      	cmp	r3, #0
 802591a:	d001      	beq.n	8025920 <_np_cmd_nand_read+0x25c>
        false)))
    {
        return ret;
 802591c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802591e:	e173      	b.n	8025c08 <_np_cmd_nand_read+0x544>
    }

    page.page = addr / page_size;
 8025920:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025924:	2200      	movs	r2, #0
 8025926:	64bb      	str	r3, [r7, #72]	; 0x48
 8025928:	64fa      	str	r2, [r7, #76]	; 0x4c
 802592a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802592e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025932:	f7fd f939 	bl	8022ba8 <__aeabi_uldivmod>
 8025936:	4602      	mov	r2, r0
 8025938:	460b      	mov	r3, r1
 802593a:	4b2a      	ldr	r3, [pc, #168]	; (80259e4 <_np_cmd_nand_read+0x320>)
 802593c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025940:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    page.offset = 0;
 8025944:	4b27      	ldr	r3, [pc, #156]	; (80259e4 <_np_cmd_nand_read+0x320>)
 8025946:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802594a:	461a      	mov	r2, r3
 802594c:	2300      	movs	r3, #0
 802594e:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4

    resp->code = NP_RESP_DATA;
 8025952:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8025956:	2300      	movs	r3, #0
 8025958:	7013      	strb	r3, [r2, #0]

    while (len)
 802595a:	e14f      	b.n	8025bfc <_np_cmd_nand_read+0x538>
    {
        if (addr >= total_size)
 802595c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025960:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025964:	4290      	cmp	r0, r2
 8025966:	eb71 0303 	sbcs.w	r3, r1, r3
 802596a:	d30b      	bcc.n	8025984 <_np_cmd_nand_read+0x2c0>
        {
            ERROR_PRINT("Read address 0x%" PRIx64
 802596c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025970:	e9cd 2300 	strd	r2, r3, [sp]
 8025974:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025978:	481b      	ldr	r0, [pc, #108]	; (80259e8 <_np_cmd_nand_read+0x324>)
 802597a:	f00b fead 	bl	80316d8 <printf>
                " is more then chip size 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 802597e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025982:	e141      	b.n	8025c08 <_np_cmd_nand_read+0x544>
        }

        if (skip_bb && nand_bad_block_table_lookup(page.page))
 8025984:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8025988:	2b00      	cmp	r3, #0
 802598a:	d076      	beq.n	8025a7a <_np_cmd_nand_read+0x3b6>
 802598c:	4b15      	ldr	r3, [pc, #84]	; (80259e4 <_np_cmd_nand_read+0x320>)
 802598e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025992:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8025996:	4618      	mov	r0, r3
 8025998:	f7fe fcc0 	bl	802431c <nand_bad_block_table_lookup>
 802599c:	4603      	mov	r3, r0
 802599e:	2b00      	cmp	r3, #0
 80259a0:	d06b      	beq.n	8025a7a <_np_cmd_nand_read+0x3b6>
        {
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", addr);
 80259a2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80259a6:	4811      	ldr	r0, [pc, #68]	; (80259ec <_np_cmd_nand_read+0x328>)
 80259a8:	f00b fe96 	bl	80316d8 <printf>
            if (np_send_bad_block_info(addr, block_size, true))
 80259ac:	2301      	movs	r3, #1
 80259ae:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80259b2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80259b6:	f7fe fd59 	bl	802446c <np_send_bad_block_info>
 80259ba:	4603      	mov	r3, r0
 80259bc:	2b00      	cmp	r3, #0
 80259be:	d017      	beq.n	80259f0 <_np_cmd_nand_read+0x32c>
                return -1;
 80259c0:	f04f 33ff 	mov.w	r3, #4294967295
 80259c4:	e120      	b.n	8025c08 <_np_cmd_nand_read+0x544>
 80259c6:	bf00      	nop
 80259c8:	20003560 	.word	0x20003560
 80259cc:	080369c0 	.word	0x080369c0
 80259d0:	080369f4 	.word	0x080369f4
 80259d4:	08036a1c 	.word	0x08036a1c
 80259d8:	08036a60 	.word	0x08036a60
 80259dc:	0803659c 	.word	0x0803659c
 80259e0:	08036aa0 	.word	0x08036aa0
 80259e4:	200035a0 	.word	0x200035a0
 80259e8:	08036ae0 	.word	0x08036ae0
 80259ec:	08036674 	.word	0x08036674

            /* On partial read do not count bad blocks */
            if (read_cmd->len == total_size)
 80259f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80259f4:	f8d3 0009 	ldr.w	r0, [r3, #9]
 80259f8:	f8d3 100d 	ldr.w	r1, [r3, #13]
 80259fc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025a00:	428b      	cmp	r3, r1
 8025a02:	bf08      	it	eq
 8025a04:	4282      	cmpeq	r2, r0
 8025a06:	d113      	bne.n	8025a30 <_np_cmd_nand_read+0x36c>
                len -= block_size;
 8025a08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025a0c:	2200      	movs	r2, #0
 8025a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8025a10:	647a      	str	r2, [r7, #68]	; 0x44
 8025a12:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025a16:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8025a1a:	4621      	mov	r1, r4
 8025a1c:	1a51      	subs	r1, r2, r1
 8025a1e:	61b9      	str	r1, [r7, #24]
 8025a20:	4629      	mov	r1, r5
 8025a22:	eb63 0301 	sbc.w	r3, r3, r1
 8025a26:	61fb      	str	r3, [r7, #28]
 8025a28:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8025a2c:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
            addr += block_size;
 8025a30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025a34:	2200      	movs	r2, #0
 8025a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8025a38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8025a3a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025a3e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8025a42:	4621      	mov	r1, r4
 8025a44:	1851      	adds	r1, r2, r1
 8025a46:	6139      	str	r1, [r7, #16]
 8025a48:	4629      	mov	r1, r5
 8025a4a:	414b      	adcs	r3, r1
 8025a4c:	617b      	str	r3, [r7, #20]
 8025a4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8025a52:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
            page.page += block_size / page_size;
 8025a56:	4b6f      	ldr	r3, [pc, #444]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025a58:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025a5c:	f8d3 11c0 	ldr.w	r1, [r3, #448]	; 0x1c0
 8025a60:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8025a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8025a6c:	18ca      	adds	r2, r1, r3
 8025a6e:	4b69      	ldr	r3, [pc, #420]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025a70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025a74:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
            continue;
 8025a78:	e0c0      	b.n	8025bfc <_np_cmd_nand_read+0x538>
        }

        if (np_nand_read(addr, &page, page_size, block_size, prog))
 8025a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a7c:	9301      	str	r3, [sp, #4]
 8025a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025a82:	9300      	str	r3, [sp, #0]
 8025a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025a88:	4a62      	ldr	r2, [pc, #392]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025a8a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025a8e:	f7ff fdcd 	bl	802562c <np_nand_read>
 8025a92:	4603      	mov	r3, r0
 8025a94:	2b00      	cmp	r3, #0
 8025a96:	d07e      	beq.n	8025b96 <_np_cmd_nand_read+0x4d2>
            return NP_ERR_NAND_RD;
 8025a98:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8025a9c:	e0b4      	b.n	8025c08 <_np_cmd_nand_read+0x544>

        while (page.offset < page_size && len)
        {
            if (page_size - page.offset >= tx_data_len)
 8025a9e:	4b5d      	ldr	r3, [pc, #372]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025aa0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025aa4:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025aac:	1a9a      	subs	r2, r3, r2
 8025aae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025ab2:	4293      	cmp	r3, r2
 8025ab4:	d804      	bhi.n	8025ac0 <_np_cmd_nand_read+0x3fc>
                send_len = tx_data_len;
 8025ab6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8025abe:	e009      	b.n	8025ad4 <_np_cmd_nand_read+0x410>
            else
                send_len = page_size - page.offset;
 8025ac0:	4b54      	ldr	r3, [pc, #336]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025ac2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025ac6:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025aca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025ace:	1a9b      	subs	r3, r3, r2
 8025ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            if (send_len > len)
 8025ad4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025ad8:	2200      	movs	r2, #0
 8025ada:	633b      	str	r3, [r7, #48]	; 0x30
 8025adc:	637a      	str	r2, [r7, #52]	; 0x34
 8025ade:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025ae2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8025ae6:	4621      	mov	r1, r4
 8025ae8:	428a      	cmp	r2, r1
 8025aea:	4629      	mov	r1, r5
 8025aec:	418b      	sbcs	r3, r1
 8025aee:	d203      	bcs.n	8025af8 <_np_cmd_nand_read+0x434>
                send_len = len;
 8025af0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8025af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            memcpy(resp->data, page.buf + page.offset, send_len);
 8025af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025afc:	1c98      	adds	r0, r3, #2
 8025afe:	4b45      	ldr	r3, [pc, #276]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025b00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025b04:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025b08:	4b42      	ldr	r3, [pc, #264]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025b0a:	4413      	add	r3, r2
 8025b0c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8025b10:	4619      	mov	r1, r3
 8025b12:	f00b ff01 	bl	8031918 <memcpy>

            while (!np_comm_cb->send_ready());
 8025b16:	bf00      	nop
 8025b18:	4b3f      	ldr	r3, [pc, #252]	; (8025c18 <_np_cmd_nand_read+0x554>)
 8025b1a:	681b      	ldr	r3, [r3, #0]
 8025b1c:	685b      	ldr	r3, [r3, #4]
 8025b1e:	4798      	blx	r3
 8025b20:	4603      	mov	r3, r0
 8025b22:	2b00      	cmp	r3, #0
 8025b24:	d0f8      	beq.n	8025b18 <_np_cmd_nand_read+0x454>

            resp->info = send_len;
 8025b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025b2a:	b2db      	uxtb	r3, r3
 8025b2c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8025b30:	7053      	strb	r3, [r2, #1]
            if (np_comm_cb->send(np_packet_send_buf,
 8025b32:	4b39      	ldr	r3, [pc, #228]	; (8025c18 <_np_cmd_nand_read+0x554>)
 8025b34:	681b      	ldr	r3, [r3, #0]
 8025b36:	681c      	ldr	r4, [r3, #0]
 8025b38:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8025b3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025b40:	4413      	add	r3, r2
 8025b42:	4619      	mov	r1, r3
 8025b44:	4835      	ldr	r0, [pc, #212]	; (8025c1c <_np_cmd_nand_read+0x558>)
 8025b46:	47a0      	blx	r4
 8025b48:	4603      	mov	r3, r0
 8025b4a:	2b00      	cmp	r3, #0
 8025b4c:	d002      	beq.n	8025b54 <_np_cmd_nand_read+0x490>
                resp_header_size + send_len))
            {
                return -1;
 8025b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8025b52:	e059      	b.n	8025c08 <_np_cmd_nand_read+0x544>
            }

            page.offset += send_len;
 8025b54:	4b2f      	ldr	r3, [pc, #188]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025b56:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025b5a:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025b5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025b62:	441a      	add	r2, r3
 8025b64:	4b2b      	ldr	r3, [pc, #172]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025b66:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025b6a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            len -= send_len;
 8025b6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025b72:	2200      	movs	r2, #0
 8025b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8025b76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8025b78:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025b7c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8025b80:	4621      	mov	r1, r4
 8025b82:	1a51      	subs	r1, r2, r1
 8025b84:	60b9      	str	r1, [r7, #8]
 8025b86:	4629      	mov	r1, r5
 8025b88:	eb63 0301 	sbc.w	r3, r3, r1
 8025b8c:	60fb      	str	r3, [r7, #12]
 8025b8e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8025b92:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
        while (page.offset < page_size && len)
 8025b96:	4b1f      	ldr	r3, [pc, #124]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025b98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025b9c:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025ba4:	4293      	cmp	r3, r2
 8025ba6:	d904      	bls.n	8025bb2 <_np_cmd_nand_read+0x4ee>
 8025ba8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025bac:	4313      	orrs	r3, r2
 8025bae:	f47f af76 	bne.w	8025a9e <_np_cmd_nand_read+0x3da>
        }

        addr += page_size;
 8025bb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025bb6:	2200      	movs	r2, #0
 8025bb8:	623b      	str	r3, [r7, #32]
 8025bba:	627a      	str	r2, [r7, #36]	; 0x24
 8025bbc:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025bc0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8025bc4:	4621      	mov	r1, r4
 8025bc6:	1851      	adds	r1, r2, r1
 8025bc8:	6039      	str	r1, [r7, #0]
 8025bca:	4629      	mov	r1, r5
 8025bcc:	414b      	adcs	r3, r1
 8025bce:	607b      	str	r3, [r7, #4]
 8025bd0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8025bd4:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
        page.offset = 0;
 8025bd8:	4b0e      	ldr	r3, [pc, #56]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025bda:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025bde:	461a      	mov	r2, r3
 8025be0:	2300      	movs	r3, #0
 8025be2:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
        page.page++;
 8025be6:	4b0b      	ldr	r3, [pc, #44]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025be8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025bec:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8025bf0:	1c5a      	adds	r2, r3, #1
 8025bf2:	4b08      	ldr	r3, [pc, #32]	; (8025c14 <_np_cmd_nand_read+0x550>)
 8025bf4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025bf8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    while (len)
 8025bfc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025c00:	4313      	orrs	r3, r2
 8025c02:	f47f aeab 	bne.w	802595c <_np_cmd_nand_read+0x298>
    }

    return 0;
 8025c06:	2300      	movs	r3, #0
}
 8025c08:	4618      	mov	r0, r3
 8025c0a:	37c0      	adds	r7, #192	; 0xc0
 8025c0c:	46bd      	mov	sp, r7
 8025c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8025c12:	bf00      	nop
 8025c14:	200035a0 	.word	0x200035a0
 8025c18:	20001310 	.word	0x20001310
 8025c1c:	20003560 	.word	0x20003560

08025c20 <np_cmd_nand_read>:

static int np_cmd_nand_read(np_prog_t *prog)
{
 8025c20:	b580      	push	{r7, lr}
 8025c22:	b084      	sub	sp, #16
 8025c24:	af00      	add	r7, sp, #0
 8025c26:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 8025c28:	2001      	movs	r0, #1
 8025c2a:	f7fe fa51 	bl	80240d0 <led_rd_set>
    ret = _np_cmd_nand_read(prog);
 8025c2e:	6878      	ldr	r0, [r7, #4]
 8025c30:	f7ff fd48 	bl	80256c4 <_np_cmd_nand_read>
 8025c34:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 8025c36:	2000      	movs	r0, #0
 8025c38:	f7fe fa4a 	bl	80240d0 <led_rd_set>

    return ret;
 8025c3c:	68fb      	ldr	r3, [r7, #12]
}
 8025c3e:	4618      	mov	r0, r3
 8025c40:	3710      	adds	r7, #16
 8025c42:	46bd      	mov	sp, r7
 8025c44:	bd80      	pop	{r7, pc}

08025c46 <np_fill_chip_info>:

static void np_fill_chip_info(np_conf_cmd_t *conf_cmd, np_prog_t *prog)
{
 8025c46:	b480      	push	{r7}
 8025c48:	b083      	sub	sp, #12
 8025c4a:	af00      	add	r7, sp, #0
 8025c4c:	6078      	str	r0, [r7, #4]
 8025c4e:	6039      	str	r1, [r7, #0]
    prog->chip_info.page_size = conf_cmd->page_size;
 8025c50:	687b      	ldr	r3, [r7, #4]
 8025c52:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8025c56:	683a      	ldr	r2, [r7, #0]
 8025c58:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025c5c:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
    prog->chip_info.block_size = conf_cmd->block_size;
 8025c60:	687b      	ldr	r3, [r7, #4]
 8025c62:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8025c66:	683a      	ldr	r2, [r7, #0]
 8025c68:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025c6c:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
    prog->chip_info.total_size = conf_cmd->total_size;
 8025c70:	6879      	ldr	r1, [r7, #4]
 8025c72:	f8d1 200a 	ldr.w	r2, [r1, #10]
 8025c76:	f8d1 300e 	ldr.w	r3, [r1, #14]
 8025c7a:	6839      	ldr	r1, [r7, #0]
 8025c7c:	f501 5108 	add.w	r1, r1, #8704	; 0x2200
 8025c80:	3130      	adds	r1, #48	; 0x30
 8025c82:	e9c1 2300 	strd	r2, r3, [r1]
    prog->chip_info.spare_size = conf_cmd->spare_size;
 8025c86:	687b      	ldr	r3, [r7, #4]
 8025c88:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8025c8c:	683a      	ldr	r2, [r7, #0]
 8025c8e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025c92:	f8c2 3238 	str.w	r3, [r2, #568]	; 0x238
    prog->chip_info.bb_mark_off = conf_cmd->bb_mark_off;
 8025c96:	687b      	ldr	r3, [r7, #4]
 8025c98:	7d9a      	ldrb	r2, [r3, #22]
 8025c9a:	683b      	ldr	r3, [r7, #0]
 8025c9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025ca0:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
    prog->chip_is_conf = 1;
 8025ca4:	683b      	ldr	r3, [r7, #0]
 8025ca6:	2201      	movs	r2, #1
 8025ca8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8025caa:	bf00      	nop
 8025cac:	370c      	adds	r7, #12
 8025cae:	46bd      	mov	sp, r7
 8025cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cb4:	4770      	bx	lr
	...

08025cb8 <np_print_chip_info>:

static void np_print_chip_info(np_prog_t *prog)
{
 8025cb8:	b580      	push	{r7, lr}
 8025cba:	b082      	sub	sp, #8
 8025cbc:	af00      	add	r7, sp, #0
 8025cbe:	6078      	str	r0, [r7, #4]
    DEBUG_PRINT("Page size: %lu\r\n", prog->chip_info.page_size);
 8025cc0:	687b      	ldr	r3, [r7, #4]
 8025cc2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025cc6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8025cca:	4619      	mov	r1, r3
 8025ccc:	4815      	ldr	r0, [pc, #84]	; (8025d24 <np_print_chip_info+0x6c>)
 8025cce:	f00b fd03 	bl	80316d8 <printf>
    DEBUG_PRINT("Block size: %lu\r\n", prog->chip_info.block_size);
 8025cd2:	687b      	ldr	r3, [r7, #4]
 8025cd4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025cd8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8025cdc:	4619      	mov	r1, r3
 8025cde:	4812      	ldr	r0, [pc, #72]	; (8025d28 <np_print_chip_info+0x70>)
 8025ce0:	f00b fcfa 	bl	80316d8 <printf>
    DEBUG_PRINT("Total size: 0x%" PRIx64 "\r\n", prog->chip_info.total_size);
 8025ce4:	687b      	ldr	r3, [r7, #4]
 8025ce6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025cea:	3330      	adds	r3, #48	; 0x30
 8025cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025cf0:	480e      	ldr	r0, [pc, #56]	; (8025d2c <np_print_chip_info+0x74>)
 8025cf2:	f00b fcf1 	bl	80316d8 <printf>
    DEBUG_PRINT("Spare size: %lu\r\n", prog->chip_info.spare_size);    
 8025cf6:	687b      	ldr	r3, [r7, #4]
 8025cf8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025cfc:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8025d00:	4619      	mov	r1, r3
 8025d02:	480b      	ldr	r0, [pc, #44]	; (8025d30 <np_print_chip_info+0x78>)
 8025d04:	f00b fce8 	bl	80316d8 <printf>
    DEBUG_PRINT("Bad block mark offset: %d\r\n", prog->chip_info.bb_mark_off);
 8025d08:	687b      	ldr	r3, [r7, #4]
 8025d0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d0e:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8025d12:	4619      	mov	r1, r3
 8025d14:	4807      	ldr	r0, [pc, #28]	; (8025d34 <np_print_chip_info+0x7c>)
 8025d16:	f00b fcdf 	bl	80316d8 <printf>
}
 8025d1a:	bf00      	nop
 8025d1c:	3708      	adds	r7, #8
 8025d1e:	46bd      	mov	sp, r7
 8025d20:	bd80      	pop	{r7, pc}
 8025d22:	bf00      	nop
 8025d24:	08036b1c 	.word	0x08036b1c
 8025d28:	08036b30 	.word	0x08036b30
 8025d2c:	08036b44 	.word	0x08036b44
 8025d30:	08036b5c 	.word	0x08036b5c
 8025d34:	08036b70 	.word	0x08036b70

08025d38 <np_cmd_nand_conf>:

static int np_cmd_nand_conf(np_prog_t *prog)
{
 8025d38:	b580      	push	{r7, lr}
 8025d3a:	b084      	sub	sp, #16
 8025d3c:	af00      	add	r7, sp, #0
 8025d3e:	6078      	str	r0, [r7, #4]
    np_conf_cmd_t *conf_cmd;

    DEBUG_PRINT("Chip configure command\r\n");
 8025d40:	4825      	ldr	r0, [pc, #148]	; (8025dd8 <np_cmd_nand_conf+0xa0>)
 8025d42:	f00b fd21 	bl	8031788 <puts>

    if (prog->rx_buf_len < sizeof(np_conf_cmd_t))
 8025d46:	687b      	ldr	r3, [r7, #4]
 8025d48:	685b      	ldr	r3, [r3, #4]
 8025d4a:	2b16      	cmp	r3, #22
 8025d4c:	d808      	bhi.n	8025d60 <np_cmd_nand_conf+0x28>
    {
        ERROR_PRINT("Wrong buffer length for configuration command %lu\r\n",
 8025d4e:	687b      	ldr	r3, [r7, #4]
 8025d50:	685b      	ldr	r3, [r3, #4]
 8025d52:	4619      	mov	r1, r3
 8025d54:	4821      	ldr	r0, [pc, #132]	; (8025ddc <np_cmd_nand_conf+0xa4>)
 8025d56:	f00b fcbf 	bl	80316d8 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8025d5a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025d5e:	e036      	b.n	8025dce <np_cmd_nand_conf+0x96>
    }

    conf_cmd = (np_conf_cmd_t *)prog->rx_buf;
 8025d60:	687b      	ldr	r3, [r7, #4]
 8025d62:	681b      	ldr	r3, [r3, #0]
 8025d64:	60fb      	str	r3, [r7, #12]

    np_fill_chip_info(conf_cmd, prog);
 8025d66:	6879      	ldr	r1, [r7, #4]
 8025d68:	68f8      	ldr	r0, [r7, #12]
 8025d6a:	f7ff ff6c 	bl	8025c46 <np_fill_chip_info>
    np_print_chip_info(prog);
 8025d6e:	6878      	ldr	r0, [r7, #4]
 8025d70:	f7ff ffa2 	bl	8025cb8 <np_print_chip_info>

    prog->hal = conf_cmd->hal;
 8025d74:	68fb      	ldr	r3, [r7, #12]
 8025d76:	785a      	ldrb	r2, [r3, #1]
 8025d78:	687b      	ldr	r3, [r7, #4]
 8025d7a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d7e:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8025d82:	687b      	ldr	r3, [r7, #4]
 8025d84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d88:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8025d8c:	461a      	mov	r2, r3
 8025d8e:	4b14      	ldr	r3, [pc, #80]	; (8025de0 <np_cmd_nand_conf+0xa8>)
 8025d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025d94:	681b      	ldr	r3, [r3, #0]
 8025d96:	68fa      	ldr	r2, [r7, #12]
 8025d98:	f102 0017 	add.w	r0, r2, #23
        prog->rx_buf_len - sizeof(np_conf_cmd_t)))
 8025d9c:	687a      	ldr	r2, [r7, #4]
 8025d9e:	6852      	ldr	r2, [r2, #4]
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8025da0:	3a17      	subs	r2, #23
 8025da2:	4611      	mov	r1, r2
 8025da4:	4798      	blx	r3
 8025da6:	4603      	mov	r3, r0
 8025da8:	2b00      	cmp	r3, #0
 8025daa:	d008      	beq.n	8025dbe <np_cmd_nand_conf+0x86>
    {
        ERROR_PRINT("Wrong buffer length for hal configuration command %lu\r\n",
 8025dac:	687b      	ldr	r3, [r7, #4]
 8025dae:	685b      	ldr	r3, [r3, #4]
 8025db0:	4619      	mov	r1, r3
 8025db2:	480c      	ldr	r0, [pc, #48]	; (8025de4 <np_cmd_nand_conf+0xac>)
 8025db4:	f00b fc90 	bl	80316d8 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8025db8:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025dbc:	e007      	b.n	8025dce <np_cmd_nand_conf+0x96>
    }

    nand_bad_block_table_init();
 8025dbe:	f7fe fa7d 	bl	80242bc <nand_bad_block_table_init>
    prog->bb_is_read = 0;
 8025dc2:	687b      	ldr	r3, [r7, #4]
 8025dc4:	2200      	movs	r2, #0
 8025dc6:	635a      	str	r2, [r3, #52]	; 0x34

    return np_send_ok_status();
 8025dc8:	f7fe fb10 	bl	80243ec <np_send_ok_status>
 8025dcc:	4603      	mov	r3, r0
}
 8025dce:	4618      	mov	r0, r3
 8025dd0:	3710      	adds	r7, #16
 8025dd2:	46bd      	mov	sp, r7
 8025dd4:	bd80      	pop	{r7, pc}
 8025dd6:	bf00      	nop
 8025dd8:	08036b8c 	.word	0x08036b8c
 8025ddc:	08036ba4 	.word	0x08036ba4
 8025de0:	20000040 	.word	0x20000040
 8025de4:	08036be0 	.word	0x08036be0

08025de8 <np_send_bad_blocks>:

static int np_send_bad_blocks(np_prog_t *prog)
{
 8025de8:	b5b0      	push	{r4, r5, r7, lr}
 8025dea:	b084      	sub	sp, #16
 8025dec:	af00      	add	r7, sp, #0
 8025dee:	6078      	str	r0, [r7, #4]
    uint32_t page;
    void *bb_iter;

    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 8025df0:	f107 0308 	add.w	r3, r7, #8
 8025df4:	4618      	mov	r0, r3
 8025df6:	f7fe fab5 	bl	8024364 <nand_bad_block_table_iter_alloc>
 8025dfa:	60f8      	str	r0, [r7, #12]
 8025dfc:	e021      	b.n	8025e42 <np_send_bad_blocks+0x5a>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
    {
        if (np_send_bad_block_info(page * prog->chip_info.page_size,
 8025dfe:	687b      	ldr	r3, [r7, #4]
 8025e00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025e04:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8025e08:	68ba      	ldr	r2, [r7, #8]
 8025e0a:	fb02 f303 	mul.w	r3, r2, r3
 8025e0e:	2200      	movs	r2, #0
 8025e10:	461c      	mov	r4, r3
 8025e12:	4615      	mov	r5, r2
 8025e14:	687b      	ldr	r3, [r7, #4]
 8025e16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025e1a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8025e1e:	2300      	movs	r3, #0
 8025e20:	4620      	mov	r0, r4
 8025e22:	4629      	mov	r1, r5
 8025e24:	f7fe fb22 	bl	802446c <np_send_bad_block_info>
 8025e28:	4603      	mov	r3, r0
 8025e2a:	2b00      	cmp	r3, #0
 8025e2c:	d002      	beq.n	8025e34 <np_send_bad_blocks+0x4c>
            prog->chip_info.block_size, false))
        {
            return -1;
 8025e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8025e32:	e00a      	b.n	8025e4a <np_send_bad_blocks+0x62>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
 8025e34:	f107 0308 	add.w	r3, r7, #8
 8025e38:	4619      	mov	r1, r3
 8025e3a:	68f8      	ldr	r0, [r7, #12]
 8025e3c:	f7fe faac 	bl	8024398 <nand_bad_block_table_iter_next>
 8025e40:	60f8      	str	r0, [r7, #12]
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 8025e42:	68fb      	ldr	r3, [r7, #12]
 8025e44:	2b00      	cmp	r3, #0
 8025e46:	d1da      	bne.n	8025dfe <np_send_bad_blocks+0x16>
        }
    }

    return 0;
 8025e48:	2300      	movs	r3, #0
}
 8025e4a:	4618      	mov	r0, r3
 8025e4c:	3710      	adds	r7, #16
 8025e4e:	46bd      	mov	sp, r7
 8025e50:	bdb0      	pop	{r4, r5, r7, pc}

08025e52 <np_cmd_read_bad_blocks>:

int np_cmd_read_bad_blocks(np_prog_t *prog)
{
 8025e52:	b580      	push	{r7, lr}
 8025e54:	b084      	sub	sp, #16
 8025e56:	af00      	add	r7, sp, #0
 8025e58:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 8025e5a:	2001      	movs	r0, #1
 8025e5c:	f7fe f938 	bl	80240d0 <led_rd_set>
    nand_bad_block_table_init();  
 8025e60:	f7fe fa2c 	bl	80242bc <nand_bad_block_table_init>
    ret = _np_cmd_read_bad_blocks(prog, true);
 8025e64:	2101      	movs	r1, #1
 8025e66:	6878      	ldr	r0, [r7, #4]
 8025e68:	f7fe fc5c 	bl	8024724 <_np_cmd_read_bad_blocks>
 8025e6c:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 8025e6e:	2000      	movs	r0, #0
 8025e70:	f7fe f92e 	bl	80240d0 <led_rd_set>

    if (ret || (ret = np_send_bad_blocks(prog)))
 8025e74:	68fb      	ldr	r3, [r7, #12]
 8025e76:	2b00      	cmp	r3, #0
 8025e78:	d106      	bne.n	8025e88 <np_cmd_read_bad_blocks+0x36>
 8025e7a:	6878      	ldr	r0, [r7, #4]
 8025e7c:	f7ff ffb4 	bl	8025de8 <np_send_bad_blocks>
 8025e80:	60f8      	str	r0, [r7, #12]
 8025e82:	68fb      	ldr	r3, [r7, #12]
 8025e84:	2b00      	cmp	r3, #0
 8025e86:	d001      	beq.n	8025e8c <np_cmd_read_bad_blocks+0x3a>
        return ret;
 8025e88:	68fb      	ldr	r3, [r7, #12]
 8025e8a:	e002      	b.n	8025e92 <np_cmd_read_bad_blocks+0x40>

    return np_send_ok_status();
 8025e8c:	f7fe faae 	bl	80243ec <np_send_ok_status>
 8025e90:	4603      	mov	r3, r0
}
 8025e92:	4618      	mov	r0, r3
 8025e94:	3710      	adds	r7, #16
 8025e96:	46bd      	mov	sp, r7
 8025e98:	bd80      	pop	{r7, pc}
	...

08025e9c <np_cmd_version_get>:

int np_cmd_version_get(np_prog_t *prog)
{
 8025e9c:	b580      	push	{r7, lr}
 8025e9e:	b086      	sub	sp, #24
 8025ea0:	af00      	add	r7, sp, #0
 8025ea2:	6078      	str	r0, [r7, #4]
    np_resp_version_t resp;
    size_t resp_len = sizeof(resp);
 8025ea4:	2306      	movs	r3, #6
 8025ea6:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read version command\r\n");
 8025ea8:	4810      	ldr	r0, [pc, #64]	; (8025eec <np_cmd_version_get+0x50>)
 8025eaa:	f00b fc6d 	bl	8031788 <puts>

    resp.header.code = NP_RESP_DATA;
 8025eae:	2300      	movs	r3, #0
 8025eb0:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8025eb2:	697b      	ldr	r3, [r7, #20]
 8025eb4:	b2db      	uxtb	r3, r3
 8025eb6:	3b02      	subs	r3, #2
 8025eb8:	b2db      	uxtb	r3, r3
 8025eba:	737b      	strb	r3, [r7, #13]
    resp.version.major = SW_VERSION_MAJOR;
 8025ebc:	2303      	movs	r3, #3
 8025ebe:	73bb      	strb	r3, [r7, #14]
    resp.version.minor = SW_VERSION_MINOR;
 8025ec0:	2305      	movs	r3, #5
 8025ec2:	73fb      	strb	r3, [r7, #15]
    resp.version.build = SW_VERSION_BUILD;
 8025ec4:	2300      	movs	r3, #0
 8025ec6:	823b      	strh	r3, [r7, #16]

    if (np_comm_cb)
 8025ec8:	4b09      	ldr	r3, [pc, #36]	; (8025ef0 <np_cmd_version_get+0x54>)
 8025eca:	681b      	ldr	r3, [r3, #0]
 8025ecc:	2b00      	cmp	r3, #0
 8025ece:	d007      	beq.n	8025ee0 <np_cmd_version_get+0x44>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8025ed0:	4b07      	ldr	r3, [pc, #28]	; (8025ef0 <np_cmd_version_get+0x54>)
 8025ed2:	681b      	ldr	r3, [r3, #0]
 8025ed4:	681b      	ldr	r3, [r3, #0]
 8025ed6:	f107 020c 	add.w	r2, r7, #12
 8025eda:	6979      	ldr	r1, [r7, #20]
 8025edc:	4610      	mov	r0, r2
 8025ede:	4798      	blx	r3

    return 0;
 8025ee0:	2300      	movs	r3, #0
}
 8025ee2:	4618      	mov	r0, r3
 8025ee4:	3718      	adds	r7, #24
 8025ee6:	46bd      	mov	sp, r7
 8025ee8:	bd80      	pop	{r7, pc}
 8025eea:	bf00      	nop
 8025eec:	08036c20 	.word	0x08036c20
 8025ef0:	20001310 	.word	0x20001310

08025ef4 <np_boot_config_read>:

static int np_boot_config_read(boot_config_t *config)
{
 8025ef4:	b580      	push	{r7, lr}
 8025ef6:	b082      	sub	sp, #8
 8025ef8:	af00      	add	r7, sp, #0
 8025efa:	6078      	str	r0, [r7, #4]
    if (flash_read(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 8025efc:	2201      	movs	r2, #1
 8025efe:	6879      	ldr	r1, [r7, #4]
 8025f00:	4806      	ldr	r0, [pc, #24]	; (8025f1c <np_boot_config_read+0x28>)
 8025f02:	f7fd f9dd 	bl	80232c0 <flash_read>
 8025f06:	4603      	mov	r3, r0
 8025f08:	2b00      	cmp	r3, #0
 8025f0a:	da02      	bge.n	8025f12 <np_boot_config_read+0x1e>
        < 0)
    {
        return -1;
 8025f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8025f10:	e000      	b.n	8025f14 <np_boot_config_read+0x20>
    }
    
    return 0;
 8025f12:	2300      	movs	r3, #0
}
 8025f14:	4618      	mov	r0, r3
 8025f16:	3708      	adds	r7, #8
 8025f18:	46bd      	mov	sp, r7
 8025f1a:	bd80      	pop	{r7, pc}
 8025f1c:	08003800 	.word	0x08003800

08025f20 <np_boot_config_write>:

static int np_boot_config_write(boot_config_t *config)
{
 8025f20:	b580      	push	{r7, lr}
 8025f22:	b082      	sub	sp, #8
 8025f24:	af00      	add	r7, sp, #0
 8025f26:	6078      	str	r0, [r7, #4]
    if (flash_page_erase(BOOT_CONFIG_ADDR) < 0)
 8025f28:	480c      	ldr	r0, [pc, #48]	; (8025f5c <np_boot_config_write+0x3c>)
 8025f2a:	f7fd f971 	bl	8023210 <flash_page_erase>
 8025f2e:	4603      	mov	r3, r0
 8025f30:	2b00      	cmp	r3, #0
 8025f32:	da02      	bge.n	8025f3a <np_boot_config_write+0x1a>
        return -1;
 8025f34:	f04f 33ff 	mov.w	r3, #4294967295
 8025f38:	e00b      	b.n	8025f52 <np_boot_config_write+0x32>

    if (flash_write(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 8025f3a:	2201      	movs	r2, #1
 8025f3c:	6879      	ldr	r1, [r7, #4]
 8025f3e:	4807      	ldr	r0, [pc, #28]	; (8025f5c <np_boot_config_write+0x3c>)
 8025f40:	f7fd f989 	bl	8023256 <flash_write>
 8025f44:	4603      	mov	r3, r0
 8025f46:	2b00      	cmp	r3, #0
 8025f48:	da02      	bge.n	8025f50 <np_boot_config_write+0x30>
        < 0)
    {
        return -1;
 8025f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8025f4e:	e000      	b.n	8025f52 <np_boot_config_write+0x32>
    }

    return 0;
 8025f50:	2300      	movs	r3, #0
}
 8025f52:	4618      	mov	r0, r3
 8025f54:	3708      	adds	r7, #8
 8025f56:	46bd      	mov	sp, r7
 8025f58:	bd80      	pop	{r7, pc}
 8025f5a:	bf00      	nop
 8025f5c:	08003800 	.word	0x08003800

08025f60 <np_cmd_active_image_get>:

static int np_cmd_active_image_get(np_prog_t *prog)
{
 8025f60:	b580      	push	{r7, lr}
 8025f62:	b086      	sub	sp, #24
 8025f64:	af00      	add	r7, sp, #0
 8025f66:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;
    np_resp_active_image_t resp;
    size_t resp_len = sizeof(resp);
 8025f68:	2303      	movs	r3, #3
 8025f6a:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Get active image command\r\n");
 8025f6c:	481c      	ldr	r0, [pc, #112]	; (8025fe0 <np_cmd_active_image_get+0x80>)
 8025f6e:	f00b fc0b 	bl	8031788 <puts>

    if (prog->active_image == 0xff)
 8025f72:	687b      	ldr	r3, [r7, #4]
 8025f74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025f78:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8025f7c:	2bff      	cmp	r3, #255	; 0xff
 8025f7e:	d110      	bne.n	8025fa2 <np_cmd_active_image_get+0x42>
    {
        if (np_boot_config_read(&boot_config))
 8025f80:	f107 0310 	add.w	r3, r7, #16
 8025f84:	4618      	mov	r0, r3
 8025f86:	f7ff ffb5 	bl	8025ef4 <np_boot_config_read>
 8025f8a:	4603      	mov	r3, r0
 8025f8c:	2b00      	cmp	r3, #0
 8025f8e:	d002      	beq.n	8025f96 <np_cmd_active_image_get+0x36>
            return NP_ERR_INTERNAL;
 8025f90:	f04f 33ff 	mov.w	r3, #4294967295
 8025f94:	e01f      	b.n	8025fd6 <np_cmd_active_image_get+0x76>
        prog->active_image = boot_config.active_image;
 8025f96:	7c3a      	ldrb	r2, [r7, #16]
 8025f98:	687b      	ldr	r3, [r7, #4]
 8025f9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025f9e:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    }

    resp.header.code = NP_RESP_DATA;
 8025fa2:	2300      	movs	r3, #0
 8025fa4:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8025fa6:	697b      	ldr	r3, [r7, #20]
 8025fa8:	b2db      	uxtb	r3, r3
 8025faa:	3b02      	subs	r3, #2
 8025fac:	b2db      	uxtb	r3, r3
 8025fae:	737b      	strb	r3, [r7, #13]
    resp.active_image = prog->active_image;
 8025fb0:	687b      	ldr	r3, [r7, #4]
 8025fb2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025fb6:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8025fba:	73bb      	strb	r3, [r7, #14]

    if (np_comm_cb)
 8025fbc:	4b09      	ldr	r3, [pc, #36]	; (8025fe4 <np_cmd_active_image_get+0x84>)
 8025fbe:	681b      	ldr	r3, [r3, #0]
 8025fc0:	2b00      	cmp	r3, #0
 8025fc2:	d007      	beq.n	8025fd4 <np_cmd_active_image_get+0x74>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8025fc4:	4b07      	ldr	r3, [pc, #28]	; (8025fe4 <np_cmd_active_image_get+0x84>)
 8025fc6:	681b      	ldr	r3, [r3, #0]
 8025fc8:	681b      	ldr	r3, [r3, #0]
 8025fca:	f107 020c 	add.w	r2, r7, #12
 8025fce:	6979      	ldr	r1, [r7, #20]
 8025fd0:	4610      	mov	r0, r2
 8025fd2:	4798      	blx	r3

    return 0;
 8025fd4:	2300      	movs	r3, #0
}
 8025fd6:	4618      	mov	r0, r3
 8025fd8:	3718      	adds	r7, #24
 8025fda:	46bd      	mov	sp, r7
 8025fdc:	bd80      	pop	{r7, pc}
 8025fde:	bf00      	nop
 8025fe0:	08036c38 	.word	0x08036c38
 8025fe4:	20001310 	.word	0x20001310

08025fe8 <np_cmd_fw_update_start>:

static int np_cmd_fw_update_start(np_prog_t *prog)
{
 8025fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8025fec:	b092      	sub	sp, #72	; 0x48
 8025fee:	af04      	add	r7, sp, #16
 8025ff0:	61f8      	str	r0, [r7, #28]
    uint64_t addr, len;
    np_write_start_cmd_t *write_start_cmd;

    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 8025ff2:	69fb      	ldr	r3, [r7, #28]
 8025ff4:	685b      	ldr	r3, [r3, #4]
 8025ff6:	2b11      	cmp	r3, #17
 8025ff8:	d808      	bhi.n	802600c <np_cmd_fw_update_start+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write start command %lu\r\n",
 8025ffa:	69fb      	ldr	r3, [r7, #28]
 8025ffc:	685b      	ldr	r3, [r3, #4]
 8025ffe:	4619      	mov	r1, r3
 8026000:	4870      	ldr	r0, [pc, #448]	; (80261c4 <np_cmd_fw_update_start+0x1dc>)
 8026002:	f00b fb69 	bl	80316d8 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8026006:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 802600a:	e0d5      	b.n	80261b8 <np_cmd_fw_update_start+0x1d0>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 802600c:	69fb      	ldr	r3, [r7, #28]
 802600e:	681b      	ldr	r3, [r3, #0]
 8026010:	637b      	str	r3, [r7, #52]	; 0x34
    addr = write_start_cmd->addr;
 8026012:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8026014:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8026018:	f8d1 3005 	ldr.w	r3, [r1, #5]
 802601c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    len = write_start_cmd->len;
 8026020:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8026022:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8026026:	f8d1 300d 	ldr.w	r3, [r1, #13]
 802602a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    DEBUG_PRINT("Write at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n", addr,
 802602e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8026032:	e9cd 2300 	strd	r2, r3, [sp]
 8026036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802603a:	4863      	ldr	r0, [pc, #396]	; (80261c8 <np_cmd_fw_update_start+0x1e0>)
 802603c:	f00b fb4c 	bl	80316d8 <printf>
        len);

    prog->base_addr = FLASH_START_ADDR;
 8026040:	69f9      	ldr	r1, [r7, #28]
 8026042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8026046:	f04f 0300 	mov.w	r3, #0
 802604a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    prog->page_size = FLASH_PAGE_SIZE;
 802604e:	69fb      	ldr	r3, [r7, #28]
 8026050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8026054:	621a      	str	r2, [r3, #32]
    prog->block_size = FLASH_BLOCK_SIZE;
 8026056:	69fb      	ldr	r3, [r7, #28]
 8026058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802605c:	625a      	str	r2, [r3, #36]	; 0x24
    prog->total_size = FLASH_SIZE;
 802605e:	69f9      	ldr	r1, [r7, #28]
 8026060:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8026064:	f04f 0300 	mov.w	r3, #0
 8026068:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    if (addr + len > prog->base_addr + prog->total_size)
 802606c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8026070:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8026074:	1884      	adds	r4, r0, r2
 8026076:	eb41 0503 	adc.w	r5, r1, r3
 802607a:	69fb      	ldr	r3, [r7, #28]
 802607c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8026080:	69fb      	ldr	r3, [r7, #28]
 8026082:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8026086:	eb10 0802 	adds.w	r8, r0, r2
 802608a:	eb41 0903 	adc.w	r9, r1, r3
 802608e:	45a0      	cmp	r8, r4
 8026090:	eb79 0305 	sbcs.w	r3, r9, r5
 8026094:	d217      	bcs.n	80260c6 <np_cmd_fw_update_start+0xde>
    {
        ERROR_PRINT("Write address 0x%" PRIx64 "+0x%" PRIx64
 8026096:	69fb      	ldr	r3, [r7, #28]
 8026098:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 802609c:	69fb      	ldr	r3, [r7, #28]
 802609e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80260a2:	eb10 0a02 	adds.w	sl, r0, r2
 80260a6:	eb41 0b03 	adc.w	fp, r1, r3
 80260aa:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80260ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80260b2:	e9cd 2300 	strd	r2, r3, [sp]
 80260b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80260ba:	4844      	ldr	r0, [pc, #272]	; (80261cc <np_cmd_fw_update_start+0x1e4>)
 80260bc:	f00b fb0c 	bl	80316d8 <printf>
            " is more then flash size 0x%" PRIx64 "\r\n", addr, len,
            prog->base_addr + prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 80260c0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80260c4:	e078      	b.n	80261b8 <np_cmd_fw_update_start+0x1d0>
    }

    if (addr % prog->page_size)
 80260c6:	69fb      	ldr	r3, [r7, #28]
 80260c8:	6a1b      	ldr	r3, [r3, #32]
 80260ca:	2200      	movs	r2, #0
 80260cc:	613b      	str	r3, [r7, #16]
 80260ce:	617a      	str	r2, [r7, #20]
 80260d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80260d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80260d8:	f7fc fd66 	bl	8022ba8 <__aeabi_uldivmod>
 80260dc:	4313      	orrs	r3, r2
 80260de:	d00a      	beq.n	80260f6 <np_cmd_fw_update_start+0x10e>
    {
        ERROR_PRINT("Address 0x%" PRIx64
 80260e0:	69fb      	ldr	r3, [r7, #28]
 80260e2:	6a1b      	ldr	r3, [r3, #32]
 80260e4:	9300      	str	r3, [sp, #0]
 80260e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80260ea:	4839      	ldr	r0, [pc, #228]	; (80261d0 <np_cmd_fw_update_start+0x1e8>)
 80260ec:	f00b faf4 	bl	80316d8 <printf>
            " is not aligned to page size 0x%lx\r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 80260f0:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80260f4:	e060      	b.n	80261b8 <np_cmd_fw_update_start+0x1d0>
    }

    if (!len)
 80260f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80260fa:	4313      	orrs	r3, r2
 80260fc:	d105      	bne.n	802610a <np_cmd_fw_update_start+0x122>
    {
        ERROR_PRINT("Length is 0\r\n");
 80260fe:	4835      	ldr	r0, [pc, #212]	; (80261d4 <np_cmd_fw_update_start+0x1ec>)
 8026100:	f00b fb42 	bl	8031788 <puts>
        return NP_ERR_LEN_INVALID;
 8026104:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8026108:	e056      	b.n	80261b8 <np_cmd_fw_update_start+0x1d0>
    }

    if (len % prog->page_size)
 802610a:	69fb      	ldr	r3, [r7, #28]
 802610c:	6a1b      	ldr	r3, [r3, #32]
 802610e:	2200      	movs	r2, #0
 8026110:	60bb      	str	r3, [r7, #8]
 8026112:	60fa      	str	r2, [r7, #12]
 8026114:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8026118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802611c:	f7fc fd44 	bl	8022ba8 <__aeabi_uldivmod>
 8026120:	4313      	orrs	r3, r2
 8026122:	d00a      	beq.n	802613a <np_cmd_fw_update_start+0x152>
    {
        ERROR_PRINT("Length 0x%" PRIx64
 8026124:	69fb      	ldr	r3, [r7, #28]
 8026126:	6a1b      	ldr	r3, [r3, #32]
 8026128:	9300      	str	r3, [sp, #0]
 802612a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802612e:	482a      	ldr	r0, [pc, #168]	; (80261d8 <np_cmd_fw_update_start+0x1f0>)
 8026130:	f00b fad2 	bl	80316d8 <printf>
            " is not aligned to page size 0x%lx\r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8026134:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8026138:	e03e      	b.n	80261b8 <np_cmd_fw_update_start+0x1d0>
    }

    prog->addr = addr;
 802613a:	69f9      	ldr	r1, [r7, #28]
 802613c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8026140:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 8026144:	69f9      	ldr	r1, [r7, #28]
 8026146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802614a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 802614e:	69fb      	ldr	r3, [r7, #28]
 8026150:	2201      	movs	r2, #1
 8026152:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 8026154:	69fb      	ldr	r3, [r7, #28]
 8026156:	6a1b      	ldr	r3, [r3, #32]
 8026158:	2200      	movs	r2, #0
 802615a:	603b      	str	r3, [r7, #0]
 802615c:	607a      	str	r2, [r7, #4]
 802615e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026162:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8026166:	f7fc fd1f 	bl	8022ba8 <__aeabi_uldivmod>
 802616a:	4602      	mov	r2, r0
 802616c:	460b      	mov	r3, r1
 802616e:	69fb      	ldr	r3, [r7, #28]
 8026170:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026174:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 8026178:	69fb      	ldr	r3, [r7, #28]
 802617a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802617e:	461a      	mov	r2, r3
 8026180:	2300      	movs	r3, #0
 8026182:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 8026186:	69fb      	ldr	r3, [r7, #28]
 8026188:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802618c:	3310      	adds	r3, #16
 802618e:	4619      	mov	r1, r3
 8026190:	f04f 0200 	mov.w	r2, #0
 8026194:	f04f 0300 	mov.w	r3, #0
 8026198:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 802619c:	69fb      	ldr	r3, [r7, #28]
 802619e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80261a2:	3310      	adds	r3, #16
 80261a4:	4619      	mov	r1, r3
 80261a6:	f04f 0200 	mov.w	r2, #0
 80261aa:	f04f 0300 	mov.w	r3, #0
 80261ae:	e9c1 2300 	strd	r2, r3, [r1]

    return np_send_ok_status();
 80261b2:	f7fe f91b 	bl	80243ec <np_send_ok_status>
 80261b6:	4603      	mov	r3, r0
}
 80261b8:	4618      	mov	r0, r3
 80261ba:	3738      	adds	r7, #56	; 0x38
 80261bc:	46bd      	mov	sp, r7
 80261be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80261c2:	bf00      	nop
 80261c4:	08036698 	.word	0x08036698
 80261c8:	080366d4 	.word	0x080366d4
 80261cc:	08036c54 	.word	0x08036c54
 80261d0:	08036740 	.word	0x08036740
 80261d4:	0803659c 	.word	0x0803659c
 80261d8:	0803677c 	.word	0x0803677c

080261dc <np_cmd_fw_update_data>:

static int np_cmd_fw_update_data(np_prog_t *prog)
{
 80261dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261e0:	b0a7      	sub	sp, #156	; 0x9c
 80261e2:	af02      	add	r7, sp, #8
 80261e4:	6778      	str	r0, [r7, #116]	; 0x74
    uint32_t write_len;
    uint64_t bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 80261e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80261e8:	685b      	ldr	r3, [r3, #4]
 80261ea:	2b01      	cmp	r3, #1
 80261ec:	d808      	bhi.n	8026200 <np_cmd_fw_update_data+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write data command %lu\r\n",
 80261ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80261f0:	685b      	ldr	r3, [r3, #4]
 80261f2:	4619      	mov	r1, r3
 80261f4:	487c      	ldr	r0, [pc, #496]	; (80263e8 <np_cmd_fw_update_data+0x20c>)
 80261f6:	f00b fa6f 	bl	80316d8 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80261fa:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80261fe:	e1d6      	b.n	80265ae <np_cmd_fw_update_data+0x3d2>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 8026200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026202:	681b      	ldr	r3, [r3, #0]
 8026204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    len = write_data_cmd->len;
 8026208:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802620c:	785b      	ldrb	r3, [r3, #1]
 802620e:	b2db      	uxtb	r3, r3
 8026210:	2200      	movs	r2, #0
 8026212:	60bb      	str	r3, [r7, #8]
 8026214:	60fa      	str	r2, [r7, #12]
 8026216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802621a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 802621e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8026222:	1c94      	adds	r4, r2, #2
 8026224:	f143 0500 	adc.w	r5, r3, #0
 8026228:	2c41      	cmp	r4, #65	; 0x41
 802622a:	f175 0300 	sbcs.w	r3, r5, #0
 802622e:	d307      	bcc.n	8026240 <np_cmd_fw_update_data+0x64>
    {
        ERROR_PRINT("Data size is wrong 0x%" PRIx64 "\r\n", len);
 8026230:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8026234:	486d      	ldr	r0, [pc, #436]	; (80263ec <np_cmd_fw_update_data+0x210>)
 8026236:	f00b fa4f 	bl	80316d8 <printf>
        return NP_ERR_CMD_DATA_SIZE;
 802623a:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 802623e:	e1b6      	b.n	80265ae <np_cmd_fw_update_data+0x3d2>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 8026240:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8026244:	f112 0802 	adds.w	r8, r2, #2
 8026248:	f143 0900 	adc.w	r9, r3, #0
 802624c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802624e:	685b      	ldr	r3, [r3, #4]
 8026250:	2200      	movs	r2, #0
 8026252:	469a      	mov	sl, r3
 8026254:	4693      	mov	fp, r2
 8026256:	45d9      	cmp	r9, fp
 8026258:	bf08      	it	eq
 802625a:	45d0      	cmpeq	r8, sl
 802625c:	d010      	beq.n	8026280 <np_cmd_fw_update_data+0xa4>
    {
        ERROR_PRINT("Buffer len 0x%lx is bigger then command 0x%" PRIx64 "\r\n",
 802625e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026260:	6859      	ldr	r1, [r3, #4]
 8026262:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8026266:	1c90      	adds	r0, r2, #2
 8026268:	66b8      	str	r0, [r7, #104]	; 0x68
 802626a:	f143 0300 	adc.w	r3, r3, #0
 802626e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8026270:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8026274:	485e      	ldr	r0, [pc, #376]	; (80263f0 <np_cmd_fw_update_data+0x214>)
 8026276:	f00b fa2f 	bl	80316d8 <printf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 802627a:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 802627e:	e196      	b.n	80265ae <np_cmd_fw_update_data+0x3d2>
    }

    if (!prog->addr_is_set)
 8026280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026284:	2b00      	cmp	r3, #0
 8026286:	d105      	bne.n	8026294 <np_cmd_fw_update_data+0xb8>
    {
        ERROR_PRINT("Write address is not set\r\n");
 8026288:	485a      	ldr	r0, [pc, #360]	; (80263f4 <np_cmd_fw_update_data+0x218>)
 802628a:	f00b fa7d 	bl	8031788 <puts>
        return NP_ERR_ADDR_INVALID;
 802628e:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8026292:	e18c      	b.n	80265ae <np_cmd_fw_update_data+0x3d2>
    }

    if (prog->page.offset + len > prog->page_size)
 8026294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026296:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802629a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802629e:	2200      	movs	r2, #0
 80262a0:	663b      	str	r3, [r7, #96]	; 0x60
 80262a2:	667a      	str	r2, [r7, #100]	; 0x64
 80262a4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80262a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80262ac:	4621      	mov	r1, r4
 80262ae:	1889      	adds	r1, r1, r2
 80262b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80262b2:	4629      	mov	r1, r5
 80262b4:	eb43 0101 	adc.w	r1, r3, r1
 80262b8:	65f9      	str	r1, [r7, #92]	; 0x5c
 80262ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80262bc:	6a1b      	ldr	r3, [r3, #32]
 80262be:	2200      	movs	r2, #0
 80262c0:	653b      	str	r3, [r7, #80]	; 0x50
 80262c2:	657a      	str	r2, [r7, #84]	; 0x54
 80262c4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80262c8:	4623      	mov	r3, r4
 80262ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80262ce:	4602      	mov	r2, r0
 80262d0:	4293      	cmp	r3, r2
 80262d2:	462b      	mov	r3, r5
 80262d4:	460a      	mov	r2, r1
 80262d6:	4193      	sbcs	r3, r2
 80262d8:	d20a      	bcs.n	80262f0 <np_cmd_fw_update_data+0x114>
        write_len = prog->page_size - prog->page.offset;
 80262da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80262dc:	6a1a      	ldr	r2, [r3, #32]
 80262de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80262e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80262e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80262e8:	1ad3      	subs	r3, r2, r3
 80262ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80262ee:	e003      	b.n	80262f8 <np_cmd_fw_update_data+0x11c>
    else
        write_len = len;
 80262f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80262f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 80262f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80262fa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80262fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026300:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8026308:	18d0      	adds	r0, r2, r3
 802630a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802630e:	3302      	adds	r3, #2
 8026310:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8026314:	4619      	mov	r1, r3
 8026316:	f00b faff 	bl	8031918 <memcpy>
    prog->page.offset += write_len;
 802631a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802631c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026320:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8026324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8026328:	441a      	add	r2, r3
 802632a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802632c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026330:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    if (prog->page.offset == prog->page_size)
 8026334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026336:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802633a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 802633e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026340:	6a1b      	ldr	r3, [r3, #32]
 8026342:	429a      	cmp	r2, r3
 8026344:	f040 8082 	bne.w	802644c <np_cmd_fw_update_data+0x270>
    {
        if (prog->addr >= prog->base_addr + prog->total_size)
 8026348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802634a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 802634e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026350:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8026354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026356:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 802635a:	1886      	adds	r6, r0, r2
 802635c:	64be      	str	r6, [r7, #72]	; 0x48
 802635e:	eb41 0303 	adc.w	r3, r1, r3
 8026362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026364:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8026368:	460b      	mov	r3, r1
 802636a:	429c      	cmp	r4, r3
 802636c:	4613      	mov	r3, r2
 802636e:	eb75 0303 	sbcs.w	r3, r5, r3
 8026372:	d319      	bcc.n	80263a8 <np_cmd_fw_update_data+0x1cc>
        {
            ERROR_PRINT("Write address 0x%" PRIx64
 8026374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026376:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 802637a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802637c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8026380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026382:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8026386:	1886      	adds	r6, r0, r2
 8026388:	643e      	str	r6, [r7, #64]	; 0x40
 802638a:	eb41 0303 	adc.w	r3, r1, r3
 802638e:	647b      	str	r3, [r7, #68]	; 0x44
 8026390:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8026394:	e9cd 2300 	strd	r2, r3, [sp]
 8026398:	4622      	mov	r2, r4
 802639a:	462b      	mov	r3, r5
 802639c:	4816      	ldr	r0, [pc, #88]	; (80263f8 <np_cmd_fw_update_data+0x21c>)
 802639e:	f00b f99b 	bl	80316d8 <printf>
                " is more then flash size 0x%" PRIx64 "\r\n",
                prog->addr, prog->base_addr + prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 80263a2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80263a6:	e102      	b.n	80265ae <np_cmd_fw_update_data+0x3d2>
        }

        if (flash_page_erase((uint32_t)prog->addr) < 0)
 80263a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80263aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80263ae:	4613      	mov	r3, r2
 80263b0:	4618      	mov	r0, r3
 80263b2:	f7fc ff2d 	bl	8023210 <flash_page_erase>
 80263b6:	4603      	mov	r3, r0
 80263b8:	2b00      	cmp	r3, #0
 80263ba:	da02      	bge.n	80263c2 <np_cmd_fw_update_data+0x1e6>
            return NP_ERR_INTERNAL;
 80263bc:	f04f 33ff 	mov.w	r3, #4294967295
 80263c0:	e0f5      	b.n	80265ae <np_cmd_fw_update_data+0x3d2>

        if (flash_write((uint32_t)prog->addr, prog->page.buf,
 80263c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80263c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80263c8:	4610      	mov	r0, r2
 80263ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80263cc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80263d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80263d2:	6a1b      	ldr	r3, [r3, #32]
 80263d4:	461a      	mov	r2, r3
 80263d6:	f7fc ff3e 	bl	8023256 <flash_write>
 80263da:	4603      	mov	r3, r0
 80263dc:	2b00      	cmp	r3, #0
 80263de:	da0d      	bge.n	80263fc <np_cmd_fw_update_data+0x220>
            prog->page_size) < 0)
        {
            return NP_ERR_INTERNAL;
 80263e0:	f04f 33ff 	mov.w	r3, #4294967295
 80263e4:	e0e3      	b.n	80265ae <np_cmd_fw_update_data+0x3d2>
 80263e6:	bf00      	nop
 80263e8:	0803685c 	.word	0x0803685c
 80263ec:	08036c98 	.word	0x08036c98
 80263f0:	08036cbc 	.word	0x08036cbc
 80263f4:	080368f0 	.word	0x080368f0
 80263f8:	08036cf4 	.word	0x08036cf4
        }

        prog->addr += prog->page_size;
 80263fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80263fe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8026402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026404:	6a1b      	ldr	r3, [r3, #32]
 8026406:	2200      	movs	r2, #0
 8026408:	63bb      	str	r3, [r7, #56]	; 0x38
 802640a:	63fa      	str	r2, [r7, #60]	; 0x3c
 802640c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8026410:	4623      	mov	r3, r4
 8026412:	18c3      	adds	r3, r0, r3
 8026414:	633b      	str	r3, [r7, #48]	; 0x30
 8026416:	462b      	mov	r3, r5
 8026418:	eb41 0303 	adc.w	r3, r1, r3
 802641c:	637b      	str	r3, [r7, #52]	; 0x34
 802641e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026420:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8026424:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8026428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802642a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802642e:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8026432:	3301      	adds	r3, #1
 8026434:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8026436:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 802643a:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 802643e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026440:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026444:	461a      	mov	r2, r3
 8026446:	2300      	movs	r3, #0
 8026448:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    bytes_left = len - write_len;
 802644c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8026450:	2200      	movs	r2, #0
 8026452:	62bb      	str	r3, [r7, #40]	; 0x28
 8026454:	62fa      	str	r2, [r7, #44]	; 0x2c
 8026456:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 802645a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 802645e:	4621      	mov	r1, r4
 8026460:	1a51      	subs	r1, r2, r1
 8026462:	6039      	str	r1, [r7, #0]
 8026464:	4629      	mov	r1, r5
 8026466:	eb63 0301 	sbc.w	r3, r3, r1
 802646a:	607b      	str	r3, [r7, #4]
 802646c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8026470:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (bytes_left)
 8026474:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8026478:	4313      	orrs	r3, r2
 802647a:	d018      	beq.n	80264ae <np_cmd_fw_update_data+0x2d2>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 802647c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802647e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8026482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8026486:	1c9a      	adds	r2, r3, #2
 8026488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802648c:	4413      	add	r3, r2
 802648e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8026490:	4619      	mov	r1, r3
 8026492:	f00b fa41 	bl	8031918 <memcpy>
        prog->page.offset += bytes_left;
 8026496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026498:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802649c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80264a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80264a2:	4413      	add	r3, r2
 80264a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80264a6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80264aa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    prog->bytes_written += len;
 80264ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80264b0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80264b4:	3310      	adds	r3, #16
 80264b6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80264ba:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80264be:	1884      	adds	r4, r0, r2
 80264c0:	623c      	str	r4, [r7, #32]
 80264c2:	eb41 0303 	adc.w	r3, r1, r3
 80264c6:	627b      	str	r3, [r7, #36]	; 0x24
 80264c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80264ca:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80264ce:	3310      	adds	r3, #16
 80264d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80264d4:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 80264d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80264da:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80264de:	3310      	adds	r3, #16
 80264e0:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80264e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80264e6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80264ea:	3310      	adds	r3, #16
 80264ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80264f0:	1a84      	subs	r4, r0, r2
 80264f2:	61bc      	str	r4, [r7, #24]
 80264f4:	eb61 0303 	sbc.w	r3, r1, r3
 80264f8:	61fb      	str	r3, [r7, #28]
 80264fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80264fc:	6a1b      	ldr	r3, [r3, #32]
 80264fe:	2200      	movs	r2, #0
 8026500:	613b      	str	r3, [r7, #16]
 8026502:	617a      	str	r2, [r7, #20]
 8026504:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8026508:	4623      	mov	r3, r4
 802650a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802650e:	4602      	mov	r2, r0
 8026510:	4293      	cmp	r3, r2
 8026512:	462b      	mov	r3, r5
 8026514:	460a      	mov	r2, r1
 8026516:	4193      	sbcs	r3, r2
 8026518:	d20c      	bcs.n	8026534 <np_cmd_fw_update_data+0x358>
        prog->bytes_written == prog->len)
 802651a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802651c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8026520:	3310      	adds	r3, #16
 8026522:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8026526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026528:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 802652c:	4299      	cmp	r1, r3
 802652e:	bf08      	it	eq
 8026530:	4290      	cmpeq	r0, r2
 8026532:	d11b      	bne.n	802656c <np_cmd_fw_update_data+0x390>
    {
        if (np_send_write_ack(prog->bytes_written))
 8026534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026536:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802653a:	3310      	adds	r3, #16
 802653c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8026540:	4610      	mov	r0, r2
 8026542:	4619      	mov	r1, r3
 8026544:	f7fe fbca 	bl	8024cdc <np_send_write_ack>
 8026548:	4603      	mov	r3, r0
 802654a:	2b00      	cmp	r3, #0
 802654c:	d002      	beq.n	8026554 <np_cmd_fw_update_data+0x378>
            return -1;
 802654e:	f04f 33ff 	mov.w	r3, #4294967295
 8026552:	e02c      	b.n	80265ae <np_cmd_fw_update_data+0x3d2>
        prog->bytes_ack = prog->bytes_written;
 8026554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026556:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802655a:	3310      	adds	r3, #16
 802655c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8026560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026562:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8026566:	3310      	adds	r3, #16
 8026568:	e9c3 0100 	strd	r0, r1, [r3]
    }

    if (prog->bytes_written > prog->len)
 802656c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802656e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8026572:	3310      	adds	r3, #16
 8026574:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8026578:	6f79      	ldr	r1, [r7, #116]	; 0x74
 802657a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 802657e:	4290      	cmp	r0, r2
 8026580:	eb71 0303 	sbcs.w	r3, r1, r3
 8026584:	d212      	bcs.n	80265ac <np_cmd_fw_update_data+0x3d0>
    {
        ERROR_PRINT("Actual write data length 0x%" PRIx64
 8026586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026588:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802658c:	3310      	adds	r3, #16
 802658e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8026592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026594:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8026598:	e9cd 2300 	strd	r2, r3, [sp]
 802659c:	4602      	mov	r2, r0
 802659e:	460b      	mov	r3, r1
 80265a0:	4805      	ldr	r0, [pc, #20]	; (80265b8 <np_cmd_fw_update_data+0x3dc>)
 80265a2:	f00b f899 	bl	80316d8 <printf>
            " is more then 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 80265a6:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 80265aa:	e000      	b.n	80265ae <np_cmd_fw_update_data+0x3d2>
    }

    return 0;
 80265ac:	2300      	movs	r3, #0
}
 80265ae:	4618      	mov	r0, r3
 80265b0:	3794      	adds	r7, #148	; 0x94
 80265b2:	46bd      	mov	sp, r7
 80265b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265b8:	08036950 	.word	0x08036950

080265bc <np_cmd_fw_update_end>:

static int np_cmd_fw_update_end(np_prog_t *prog)
{
 80265bc:	b580      	push	{r7, lr}
 80265be:	b084      	sub	sp, #16
 80265c0:	af00      	add	r7, sp, #0
 80265c2:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;

    prog->addr_is_set = 0;
 80265c4:	687b      	ldr	r3, [r7, #4]
 80265c6:	2200      	movs	r2, #0
 80265c8:	631a      	str	r2, [r3, #48]	; 0x30

    if (prog->page.offset)
 80265ca:	687b      	ldr	r3, [r7, #4]
 80265cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80265d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80265d4:	2b00      	cmp	r3, #0
 80265d6:	d00b      	beq.n	80265f0 <np_cmd_fw_update_end+0x34>
    {
        ERROR_PRINT("Data of 0x%lx length was not written\r\n",
 80265d8:	687b      	ldr	r3, [r7, #4]
 80265da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80265de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80265e2:	4619      	mov	r1, r3
 80265e4:	481d      	ldr	r0, [pc, #116]	; (802665c <np_cmd_fw_update_end+0xa0>)
 80265e6:	f00b f877 	bl	80316d8 <printf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 80265ea:	f06f 0366 	mvn.w	r3, #102	; 0x66
 80265ee:	e030      	b.n	8026652 <np_cmd_fw_update_end+0x96>
    }

    if (np_boot_config_read(&boot_config))
 80265f0:	f107 030c 	add.w	r3, r7, #12
 80265f4:	4618      	mov	r0, r3
 80265f6:	f7ff fc7d 	bl	8025ef4 <np_boot_config_read>
 80265fa:	4603      	mov	r3, r0
 80265fc:	2b00      	cmp	r3, #0
 80265fe:	d002      	beq.n	8026606 <np_cmd_fw_update_end+0x4a>
        return NP_ERR_INTERNAL;
 8026600:	f04f 33ff 	mov.w	r3, #4294967295
 8026604:	e025      	b.n	8026652 <np_cmd_fw_update_end+0x96>

    if (prog->active_image == 0xff)
 8026606:	687b      	ldr	r3, [r7, #4]
 8026608:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802660c:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8026610:	2bff      	cmp	r3, #255	; 0xff
 8026612:	d105      	bne.n	8026620 <np_cmd_fw_update_end+0x64>
        prog->active_image = boot_config.active_image;
 8026614:	7b3a      	ldrb	r2, [r7, #12]
 8026616:	687b      	ldr	r3, [r7, #4]
 8026618:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802661c:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    boot_config.active_image = prog->active_image ? 0 : 1;
 8026620:	687b      	ldr	r3, [r7, #4]
 8026622:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026626:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 802662a:	2b00      	cmp	r3, #0
 802662c:	bf0c      	ite	eq
 802662e:	2301      	moveq	r3, #1
 8026630:	2300      	movne	r3, #0
 8026632:	b2db      	uxtb	r3, r3
 8026634:	733b      	strb	r3, [r7, #12]
    if (np_boot_config_write(&boot_config))
 8026636:	f107 030c 	add.w	r3, r7, #12
 802663a:	4618      	mov	r0, r3
 802663c:	f7ff fc70 	bl	8025f20 <np_boot_config_write>
 8026640:	4603      	mov	r3, r0
 8026642:	2b00      	cmp	r3, #0
 8026644:	d002      	beq.n	802664c <np_cmd_fw_update_end+0x90>
        return NP_ERR_INTERNAL;
 8026646:	f04f 33ff 	mov.w	r3, #4294967295
 802664a:	e002      	b.n	8026652 <np_cmd_fw_update_end+0x96>

    return np_send_ok_status();
 802664c:	f7fd fece 	bl	80243ec <np_send_ok_status>
 8026650:	4603      	mov	r3, r0
}
 8026652:	4618      	mov	r0, r3
 8026654:	3710      	adds	r7, #16
 8026656:	46bd      	mov	sp, r7
 8026658:	bd80      	pop	{r7, pc}
 802665a:	bf00      	nop
 802665c:	08036990 	.word	0x08036990

08026660 <np_cmd_fw_update>:

static int np_cmd_fw_update(np_prog_t *prog)
{
 8026660:	b580      	push	{r7, lr}
 8026662:	b084      	sub	sp, #16
 8026664:	af00      	add	r7, sp, #0
 8026666:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8026668:	687b      	ldr	r3, [r7, #4]
 802666a:	681b      	ldr	r3, [r3, #0]
 802666c:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 802666e:	2300      	movs	r3, #0
 8026670:	60fb      	str	r3, [r7, #12]

    switch (cmd->code)
 8026672:	68bb      	ldr	r3, [r7, #8]
 8026674:	781b      	ldrb	r3, [r3, #0]
 8026676:	2b0c      	cmp	r3, #12
 8026678:	d013      	beq.n	80266a2 <np_cmd_fw_update+0x42>
 802667a:	2b0c      	cmp	r3, #12
 802667c:	dc19      	bgt.n	80266b2 <np_cmd_fw_update+0x52>
 802667e:	2b0a      	cmp	r3, #10
 8026680:	d002      	beq.n	8026688 <np_cmd_fw_update+0x28>
 8026682:	2b0b      	cmp	r3, #11
 8026684:	d008      	beq.n	8026698 <np_cmd_fw_update+0x38>
    case NP_CMD_FW_UPDATE_E:
        ret = np_cmd_fw_update_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8026686:	e014      	b.n	80266b2 <np_cmd_fw_update+0x52>
        led_wr_set(true);
 8026688:	2001      	movs	r0, #1
 802668a:	f7fd fd0f 	bl	80240ac <led_wr_set>
        ret = np_cmd_fw_update_start(prog);
 802668e:	6878      	ldr	r0, [r7, #4]
 8026690:	f7ff fcaa 	bl	8025fe8 <np_cmd_fw_update_start>
 8026694:	60f8      	str	r0, [r7, #12]
        break;
 8026696:	e00d      	b.n	80266b4 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_data(prog);
 8026698:	6878      	ldr	r0, [r7, #4]
 802669a:	f7ff fd9f 	bl	80261dc <np_cmd_fw_update_data>
 802669e:	60f8      	str	r0, [r7, #12]
        break;
 80266a0:	e008      	b.n	80266b4 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_end(prog);
 80266a2:	6878      	ldr	r0, [r7, #4]
 80266a4:	f7ff ff8a 	bl	80265bc <np_cmd_fw_update_end>
 80266a8:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 80266aa:	2000      	movs	r0, #0
 80266ac:	f7fd fcfe 	bl	80240ac <led_wr_set>
        break;
 80266b0:	e000      	b.n	80266b4 <np_cmd_fw_update+0x54>
        break;
 80266b2:	bf00      	nop
    }

    if (ret < 0)
 80266b4:	68fb      	ldr	r3, [r7, #12]
 80266b6:	2b00      	cmp	r3, #0
 80266b8:	da02      	bge.n	80266c0 <np_cmd_fw_update+0x60>
        led_wr_set(false);
 80266ba:	2000      	movs	r0, #0
 80266bc:	f7fd fcf6 	bl	80240ac <led_wr_set>

    return ret;
 80266c0:	68fb      	ldr	r3, [r7, #12]
}
 80266c2:	4618      	mov	r0, r3
 80266c4:	3710      	adds	r7, #16
 80266c6:	46bd      	mov	sp, r7
 80266c8:	bd80      	pop	{r7, pc}

080266ca <np_cmd_is_valid>:
    { NP_CMD_FW_UPDATE_D, 0, np_cmd_fw_update },
    { NP_CMD_FW_UPDATE_E, 0, np_cmd_fw_update },    
};

static bool np_cmd_is_valid(np_cmd_code_t code)
{
 80266ca:	b480      	push	{r7}
 80266cc:	b083      	sub	sp, #12
 80266ce:	af00      	add	r7, sp, #0
 80266d0:	4603      	mov	r3, r0
 80266d2:	71fb      	strb	r3, [r7, #7]
    return code >= 0 && code < NP_CMD_NAND_LAST;
 80266d4:	79fb      	ldrb	r3, [r7, #7]
 80266d6:	2b0c      	cmp	r3, #12
 80266d8:	bf94      	ite	ls
 80266da:	2301      	movls	r3, #1
 80266dc:	2300      	movhi	r3, #0
 80266de:	b2db      	uxtb	r3, r3
}
 80266e0:	4618      	mov	r0, r3
 80266e2:	370c      	adds	r7, #12
 80266e4:	46bd      	mov	sp, r7
 80266e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266ea:	4770      	bx	lr

080266ec <np_cmd_handler>:

static int np_cmd_handler(np_prog_t *prog)
{
 80266ec:	b580      	push	{r7, lr}
 80266ee:	b084      	sub	sp, #16
 80266f0:	af00      	add	r7, sp, #0
 80266f2:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd;

    if (prog->rx_buf_len < sizeof(np_cmd_t))
 80266f4:	687b      	ldr	r3, [r7, #4]
 80266f6:	685b      	ldr	r3, [r3, #4]
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	d108      	bne.n	802670e <np_cmd_handler+0x22>
    {
        ERROR_PRINT("Wrong buffer length for command %lu\r\n",
 80266fc:	687b      	ldr	r3, [r7, #4]
 80266fe:	685b      	ldr	r3, [r3, #4]
 8026700:	4619      	mov	r1, r3
 8026702:	4823      	ldr	r0, [pc, #140]	; (8026790 <np_cmd_handler+0xa4>)
 8026704:	f00a ffe8 	bl	80316d8 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8026708:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 802670c:	e03b      	b.n	8026786 <np_cmd_handler+0x9a>
    }
    cmd = (np_cmd_t *)prog->rx_buf;
 802670e:	687b      	ldr	r3, [r7, #4]
 8026710:	681b      	ldr	r3, [r3, #0]
 8026712:	60fb      	str	r3, [r7, #12]

    if (!np_cmd_is_valid(cmd->code))
 8026714:	68fb      	ldr	r3, [r7, #12]
 8026716:	781b      	ldrb	r3, [r3, #0]
 8026718:	4618      	mov	r0, r3
 802671a:	f7ff ffd6 	bl	80266ca <np_cmd_is_valid>
 802671e:	4603      	mov	r3, r0
 8026720:	f083 0301 	eor.w	r3, r3, #1
 8026724:	b2db      	uxtb	r3, r3
 8026726:	2b00      	cmp	r3, #0
 8026728:	d008      	beq.n	802673c <np_cmd_handler+0x50>
    {
        ERROR_PRINT("Invalid cmd code %d\r\n", cmd->code);
 802672a:	68fb      	ldr	r3, [r7, #12]
 802672c:	781b      	ldrb	r3, [r3, #0]
 802672e:	4619      	mov	r1, r3
 8026730:	4818      	ldr	r0, [pc, #96]	; (8026794 <np_cmd_handler+0xa8>)
 8026732:	f00a ffd1 	bl	80316d8 <printf>
        return NP_ERR_CMD_INVALID;
 8026736:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 802673a:	e024      	b.n	8026786 <np_cmd_handler+0x9a>
    }

    if (!prog->chip_is_conf && cmd_handler[cmd->code].is_chip_cmd)
 802673c:	687b      	ldr	r3, [r7, #4]
 802673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026740:	2b00      	cmp	r3, #0
 8026742:	d112      	bne.n	802676a <np_cmd_handler+0x7e>
 8026744:	68fb      	ldr	r3, [r7, #12]
 8026746:	781b      	ldrb	r3, [r3, #0]
 8026748:	4619      	mov	r1, r3
 802674a:	4a13      	ldr	r2, [pc, #76]	; (8026798 <np_cmd_handler+0xac>)
 802674c:	460b      	mov	r3, r1
 802674e:	005b      	lsls	r3, r3, #1
 8026750:	440b      	add	r3, r1
 8026752:	009b      	lsls	r3, r3, #2
 8026754:	4413      	add	r3, r2
 8026756:	3304      	adds	r3, #4
 8026758:	781b      	ldrb	r3, [r3, #0]
 802675a:	2b00      	cmp	r3, #0
 802675c:	d005      	beq.n	802676a <np_cmd_handler+0x7e>
    {
        ERROR_PRINT("Chip is not configured\r\n");
 802675e:	480f      	ldr	r0, [pc, #60]	; (802679c <np_cmd_handler+0xb0>)
 8026760:	f00b f812 	bl	8031788 <puts>
        return NP_ERR_CHIP_NOT_CONF;
 8026764:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8026768:	e00d      	b.n	8026786 <np_cmd_handler+0x9a>
    }

    return cmd_handler[cmd->code].exec(prog);
 802676a:	68fb      	ldr	r3, [r7, #12]
 802676c:	781b      	ldrb	r3, [r3, #0]
 802676e:	4619      	mov	r1, r3
 8026770:	4a09      	ldr	r2, [pc, #36]	; (8026798 <np_cmd_handler+0xac>)
 8026772:	460b      	mov	r3, r1
 8026774:	005b      	lsls	r3, r3, #1
 8026776:	440b      	add	r3, r1
 8026778:	009b      	lsls	r3, r3, #2
 802677a:	4413      	add	r3, r2
 802677c:	3308      	adds	r3, #8
 802677e:	681b      	ldr	r3, [r3, #0]
 8026780:	6878      	ldr	r0, [r7, #4]
 8026782:	4798      	blx	r3
 8026784:	4603      	mov	r3, r0
}
 8026786:	4618      	mov	r0, r3
 8026788:	3710      	adds	r7, #16
 802678a:	46bd      	mov	sp, r7
 802678c:	bd80      	pop	{r7, pc}
 802678e:	bf00      	nop
 8026790:	08036d34 	.word	0x08036d34
 8026794:	08036d64 	.word	0x08036d64
 8026798:	2000004c 	.word	0x2000004c
 802679c:	08036d84 	.word	0x08036d84

080267a0 <np_packet_handler>:

static void np_packet_handler(np_prog_t *prog)
{
 80267a0:	b580      	push	{r7, lr}
 80267a2:	b084      	sub	sp, #16
 80267a4:	af00      	add	r7, sp, #0
 80267a6:	6078      	str	r0, [r7, #4]
    int ret;

    do
    {
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 80267a8:	4b12      	ldr	r3, [pc, #72]	; (80267f4 <np_packet_handler+0x54>)
 80267aa:	681b      	ldr	r3, [r3, #0]
 80267ac:	689b      	ldr	r3, [r3, #8]
 80267ae:	687a      	ldr	r2, [r7, #4]
 80267b0:	4610      	mov	r0, r2
 80267b2:	4798      	blx	r3
 80267b4:	4602      	mov	r2, r0
 80267b6:	687b      	ldr	r3, [r7, #4]
 80267b8:	605a      	str	r2, [r3, #4]
        if (!prog->rx_buf_len)
 80267ba:	687b      	ldr	r3, [r7, #4]
 80267bc:	685b      	ldr	r3, [r3, #4]
 80267be:	2b00      	cmp	r3, #0
 80267c0:	d012      	beq.n	80267e8 <np_packet_handler+0x48>
            break;

        ret = np_cmd_handler(prog);
 80267c2:	6878      	ldr	r0, [r7, #4]
 80267c4:	f7ff ff92 	bl	80266ec <np_cmd_handler>
 80267c8:	60f8      	str	r0, [r7, #12]

        np_comm_cb->consume();
 80267ca:	4b0a      	ldr	r3, [pc, #40]	; (80267f4 <np_packet_handler+0x54>)
 80267cc:	681b      	ldr	r3, [r3, #0]
 80267ce:	68db      	ldr	r3, [r3, #12]
 80267d0:	4798      	blx	r3

        if (ret < 0)
 80267d2:	68fb      	ldr	r3, [r7, #12]
 80267d4:	2b00      	cmp	r3, #0
 80267d6:	dae7      	bge.n	80267a8 <np_packet_handler+0x8>
            np_send_error(-ret);
 80267d8:	68fb      	ldr	r3, [r7, #12]
 80267da:	b2db      	uxtb	r3, r3
 80267dc:	425b      	negs	r3, r3
 80267de:	b2db      	uxtb	r3, r3
 80267e0:	4618      	mov	r0, r3
 80267e2:	f7fd fe1f 	bl	8024424 <np_send_error>
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 80267e6:	e7df      	b.n	80267a8 <np_packet_handler+0x8>
            break;
 80267e8:	bf00      	nop
    }
    while (1);
}
 80267ea:	bf00      	nop
 80267ec:	3710      	adds	r7, #16
 80267ee:	46bd      	mov	sp, r7
 80267f0:	bd80      	pop	{r7, pc}
 80267f2:	bf00      	nop
 80267f4:	20001310 	.word	0x20001310

080267f8 <np_nand_handler>:

static void np_nand_handler(np_prog_t *prog)
{
 80267f8:	b580      	push	{r7, lr}
 80267fa:	b082      	sub	sp, #8
 80267fc:	af00      	add	r7, sp, #0
 80267fe:	6078      	str	r0, [r7, #4]
    if (prog->nand_wr_in_progress)
 8026800:	687b      	ldr	r3, [r7, #4]
 8026802:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026806:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 802680a:	2b00      	cmp	r3, #0
 802680c:	d008      	beq.n	8026820 <np_nand_handler+0x28>
    {
        if (np_nand_handle_status(prog))
 802680e:	6878      	ldr	r0, [r7, #4]
 8026810:	f7fe fc28 	bl	8025064 <np_nand_handle_status>
 8026814:	4603      	mov	r3, r0
 8026816:	2b00      	cmp	r3, #0
 8026818:	d002      	beq.n	8026820 <np_nand_handler+0x28>
            np_send_error(NP_ERR_NAND_WR);
 802681a:	2099      	movs	r0, #153	; 0x99
 802681c:	f7fd fe02 	bl	8024424 <np_send_error>
    }
}
 8026820:	bf00      	nop
 8026822:	3708      	adds	r7, #8
 8026824:	46bd      	mov	sp, r7
 8026826:	bd80      	pop	{r7, pc}

08026828 <np_init>:

void np_init()
{
 8026828:	b480      	push	{r7}
 802682a:	af00      	add	r7, sp, #0
    prog.active_image = 0xff;
 802682c:	4b05      	ldr	r3, [pc, #20]	; (8026844 <np_init+0x1c>)
 802682e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026832:	22ff      	movs	r2, #255	; 0xff
 8026834:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
}
 8026838:	bf00      	nop
 802683a:	46bd      	mov	sp, r7
 802683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026840:	4770      	bx	lr
 8026842:	bf00      	nop
 8026844:	20001318 	.word	0x20001318

08026848 <np_handler>:

void np_handler()
{
 8026848:	b580      	push	{r7, lr}
 802684a:	af00      	add	r7, sp, #0
    np_packet_handler(&prog);
 802684c:	4803      	ldr	r0, [pc, #12]	; (802685c <np_handler+0x14>)
 802684e:	f7ff ffa7 	bl	80267a0 <np_packet_handler>
    np_nand_handler(&prog);
 8026852:	4802      	ldr	r0, [pc, #8]	; (802685c <np_handler+0x14>)
 8026854:	f7ff ffd0 	bl	80267f8 <np_nand_handler>
}
 8026858:	bf00      	nop
 802685a:	bd80      	pop	{r7, pc}
 802685c:	20001318 	.word	0x20001318

08026860 <np_comm_register>:

int np_comm_register(np_comm_cb_t *cb)
{
 8026860:	b480      	push	{r7}
 8026862:	b083      	sub	sp, #12
 8026864:	af00      	add	r7, sp, #0
 8026866:	6078      	str	r0, [r7, #4]
    np_comm_cb = cb;
 8026868:	4a04      	ldr	r2, [pc, #16]	; (802687c <np_comm_register+0x1c>)
 802686a:	687b      	ldr	r3, [r7, #4]
 802686c:	6013      	str	r3, [r2, #0]

    return 0;
 802686e:	2300      	movs	r3, #0
}
 8026870:	4618      	mov	r0, r3
 8026872:	370c      	adds	r7, #12
 8026874:	46bd      	mov	sp, r7
 8026876:	f85d 7b04 	ldr.w	r7, [sp], #4
 802687a:	4770      	bx	lr
 802687c:	20001310 	.word	0x20001310

08026880 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8026880:	b580      	push	{r7, lr}
 8026882:	b086      	sub	sp, #24
 8026884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8026886:	1d3b      	adds	r3, r7, #4
 8026888:	2200      	movs	r2, #0
 802688a:	601a      	str	r2, [r3, #0]
 802688c:	605a      	str	r2, [r3, #4]
 802688e:	609a      	str	r2, [r3, #8]
 8026890:	60da      	str	r2, [r3, #12]
 8026892:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8026894:	2300      	movs	r3, #0
 8026896:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8026898:	4b24      	ldr	r3, [pc, #144]	; (802692c <MX_RTC_Init+0xac>)
 802689a:	4a25      	ldr	r2, [pc, #148]	; (8026930 <MX_RTC_Init+0xb0>)
 802689c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 802689e:	4b23      	ldr	r3, [pc, #140]	; (802692c <MX_RTC_Init+0xac>)
 80268a0:	2200      	movs	r2, #0
 80268a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80268a4:	4b21      	ldr	r3, [pc, #132]	; (802692c <MX_RTC_Init+0xac>)
 80268a6:	227f      	movs	r2, #127	; 0x7f
 80268a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80268aa:	4b20      	ldr	r3, [pc, #128]	; (802692c <MX_RTC_Init+0xac>)
 80268ac:	22ff      	movs	r2, #255	; 0xff
 80268ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80268b0:	4b1e      	ldr	r3, [pc, #120]	; (802692c <MX_RTC_Init+0xac>)
 80268b2:	2200      	movs	r2, #0
 80268b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80268b6:	4b1d      	ldr	r3, [pc, #116]	; (802692c <MX_RTC_Init+0xac>)
 80268b8:	2200      	movs	r2, #0
 80268ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80268bc:	4b1b      	ldr	r3, [pc, #108]	; (802692c <MX_RTC_Init+0xac>)
 80268be:	2200      	movs	r2, #0
 80268c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80268c2:	481a      	ldr	r0, [pc, #104]	; (802692c <MX_RTC_Init+0xac>)
 80268c4:	f004 fb8e 	bl	802afe4 <HAL_RTC_Init>
 80268c8:	4603      	mov	r3, r0
 80268ca:	2b00      	cmp	r3, #0
 80268cc:	d001      	beq.n	80268d2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80268ce:	f7fd fcef 	bl	80242b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80268d2:	2300      	movs	r3, #0
 80268d4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80268d6:	2300      	movs	r3, #0
 80268d8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80268da:	2300      	movs	r3, #0
 80268dc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80268de:	2300      	movs	r3, #0
 80268e0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80268e2:	2300      	movs	r3, #0
 80268e4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80268e6:	1d3b      	adds	r3, r7, #4
 80268e8:	2201      	movs	r2, #1
 80268ea:	4619      	mov	r1, r3
 80268ec:	480f      	ldr	r0, [pc, #60]	; (802692c <MX_RTC_Init+0xac>)
 80268ee:	f004 fbef 	bl	802b0d0 <HAL_RTC_SetTime>
 80268f2:	4603      	mov	r3, r0
 80268f4:	2b00      	cmp	r3, #0
 80268f6:	d001      	beq.n	80268fc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80268f8:	f7fd fcda 	bl	80242b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80268fc:	2301      	movs	r3, #1
 80268fe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8026900:	2301      	movs	r3, #1
 8026902:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8026904:	2301      	movs	r3, #1
 8026906:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8026908:	2300      	movs	r3, #0
 802690a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 802690c:	463b      	mov	r3, r7
 802690e:	2201      	movs	r2, #1
 8026910:	4619      	mov	r1, r3
 8026912:	4806      	ldr	r0, [pc, #24]	; (802692c <MX_RTC_Init+0xac>)
 8026914:	f004 fc76 	bl	802b204 <HAL_RTC_SetDate>
 8026918:	4603      	mov	r3, r0
 802691a:	2b00      	cmp	r3, #0
 802691c:	d001      	beq.n	8026922 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 802691e:	f7fd fcc7 	bl	80242b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8026922:	bf00      	nop
 8026924:	3718      	adds	r7, #24
 8026926:	46bd      	mov	sp, r7
 8026928:	bd80      	pop	{r7, pc}
 802692a:	bf00      	nop
 802692c:	20005768 	.word	0x20005768
 8026930:	40002800 	.word	0x40002800

08026934 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8026934:	b580      	push	{r7, lr}
 8026936:	b086      	sub	sp, #24
 8026938:	af00      	add	r7, sp, #0
 802693a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802693c:	f107 0308 	add.w	r3, r7, #8
 8026940:	2200      	movs	r2, #0
 8026942:	601a      	str	r2, [r3, #0]
 8026944:	605a      	str	r2, [r3, #4]
 8026946:	609a      	str	r2, [r3, #8]
 8026948:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 802694a:	687b      	ldr	r3, [r7, #4]
 802694c:	681b      	ldr	r3, [r3, #0]
 802694e:	4a0c      	ldr	r2, [pc, #48]	; (8026980 <HAL_RTC_MspInit+0x4c>)
 8026950:	4293      	cmp	r3, r2
 8026952:	d111      	bne.n	8026978 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8026954:	2302      	movs	r3, #2
 8026956:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8026958:	f44f 7300 	mov.w	r3, #512	; 0x200
 802695c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802695e:	f107 0308 	add.w	r3, r7, #8
 8026962:	4618      	mov	r0, r3
 8026964:	f004 fa5c 	bl	802ae20 <HAL_RCCEx_PeriphCLKConfig>
 8026968:	4603      	mov	r3, r0
 802696a:	2b00      	cmp	r3, #0
 802696c:	d001      	beq.n	8026972 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 802696e:	f7fd fc9f 	bl	80242b0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8026972:	4b04      	ldr	r3, [pc, #16]	; (8026984 <HAL_RTC_MspInit+0x50>)
 8026974:	2201      	movs	r2, #1
 8026976:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8026978:	bf00      	nop
 802697a:	3718      	adds	r7, #24
 802697c:	46bd      	mov	sp, r7
 802697e:	bd80      	pop	{r7, pc}
 8026980:	40002800 	.word	0x40002800
 8026984:	42470e3c 	.word	0x42470e3c

08026988 <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8026988:	b580      	push	{r7, lr}
 802698a:	b08a      	sub	sp, #40	; 0x28
 802698c:	af00      	add	r7, sp, #0
 802698e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026990:	f107 0314 	add.w	r3, r7, #20
 8026994:	2200      	movs	r2, #0
 8026996:	601a      	str	r2, [r3, #0]
 8026998:	605a      	str	r2, [r3, #4]
 802699a:	609a      	str	r2, [r3, #8]
 802699c:	60da      	str	r2, [r3, #12]
 802699e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80269a0:	687b      	ldr	r3, [r7, #4]
 80269a2:	681b      	ldr	r3, [r3, #0]
 80269a4:	4a2c      	ldr	r2, [pc, #176]	; (8026a58 <HAL_SPI_MspInit+0xd0>)
 80269a6:	4293      	cmp	r3, r2
 80269a8:	d151      	bne.n	8026a4e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80269aa:	2300      	movs	r3, #0
 80269ac:	613b      	str	r3, [r7, #16]
 80269ae:	4b2b      	ldr	r3, [pc, #172]	; (8026a5c <HAL_SPI_MspInit+0xd4>)
 80269b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80269b2:	4a2a      	ldr	r2, [pc, #168]	; (8026a5c <HAL_SPI_MspInit+0xd4>)
 80269b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80269b8:	6453      	str	r3, [r2, #68]	; 0x44
 80269ba:	4b28      	ldr	r3, [pc, #160]	; (8026a5c <HAL_SPI_MspInit+0xd4>)
 80269bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80269be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80269c2:	613b      	str	r3, [r7, #16]
 80269c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80269c6:	2300      	movs	r3, #0
 80269c8:	60fb      	str	r3, [r7, #12]
 80269ca:	4b24      	ldr	r3, [pc, #144]	; (8026a5c <HAL_SPI_MspInit+0xd4>)
 80269cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80269ce:	4a23      	ldr	r2, [pc, #140]	; (8026a5c <HAL_SPI_MspInit+0xd4>)
 80269d0:	f043 0301 	orr.w	r3, r3, #1
 80269d4:	6313      	str	r3, [r2, #48]	; 0x30
 80269d6:	4b21      	ldr	r3, [pc, #132]	; (8026a5c <HAL_SPI_MspInit+0xd4>)
 80269d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80269da:	f003 0301 	and.w	r3, r3, #1
 80269de:	60fb      	str	r3, [r7, #12]
 80269e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80269e2:	2300      	movs	r3, #0
 80269e4:	60bb      	str	r3, [r7, #8]
 80269e6:	4b1d      	ldr	r3, [pc, #116]	; (8026a5c <HAL_SPI_MspInit+0xd4>)
 80269e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80269ea:	4a1c      	ldr	r2, [pc, #112]	; (8026a5c <HAL_SPI_MspInit+0xd4>)
 80269ec:	f043 0302 	orr.w	r3, r3, #2
 80269f0:	6313      	str	r3, [r2, #48]	; 0x30
 80269f2:	4b1a      	ldr	r3, [pc, #104]	; (8026a5c <HAL_SPI_MspInit+0xd4>)
 80269f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80269f6:	f003 0302 	and.w	r3, r3, #2
 80269fa:	60bb      	str	r3, [r7, #8]
 80269fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80269fe:	23c0      	movs	r3, #192	; 0xc0
 8026a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026a02:	2302      	movs	r3, #2
 8026a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026a06:	2300      	movs	r3, #0
 8026a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8026a0a:	2301      	movs	r3, #1
 8026a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026a0e:	2305      	movs	r3, #5
 8026a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026a12:	f107 0314 	add.w	r3, r7, #20
 8026a16:	4619      	mov	r1, r3
 8026a18:	4811      	ldr	r0, [pc, #68]	; (8026a60 <HAL_SPI_MspInit+0xd8>)
 8026a1a:	f001 ff0d 	bl	8028838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8026a1e:	2308      	movs	r3, #8
 8026a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026a22:	2302      	movs	r3, #2
 8026a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026a26:	2300      	movs	r3, #0
 8026a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8026a2a:	2301      	movs	r3, #1
 8026a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026a2e:	2305      	movs	r3, #5
 8026a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8026a32:	f107 0314 	add.w	r3, r7, #20
 8026a36:	4619      	mov	r1, r3
 8026a38:	480a      	ldr	r0, [pc, #40]	; (8026a64 <HAL_SPI_MspInit+0xdc>)
 8026a3a:	f001 fefd 	bl	8028838 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8026a3e:	2200      	movs	r2, #0
 8026a40:	2100      	movs	r1, #0
 8026a42:	2023      	movs	r0, #35	; 0x23
 8026a44:	f001 fa95 	bl	8027f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8026a48:	2023      	movs	r0, #35	; 0x23
 8026a4a:	f001 faae 	bl	8027faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8026a4e:	bf00      	nop
 8026a50:	3728      	adds	r7, #40	; 0x28
 8026a52:	46bd      	mov	sp, r7
 8026a54:	bd80      	pop	{r7, pc}
 8026a56:	bf00      	nop
 8026a58:	40013000 	.word	0x40013000
 8026a5c:	40023800 	.word	0x40023800
 8026a60:	40020000 	.word	0x40020000
 8026a64:	40020400 	.word	0x40020400

08026a68 <spi_flash_gpio_uninit>:
	  /* USER CODE END SPI1_MspInit 1 */
	  }
}

static void spi_flash_gpio_uninit(SPI_HandleTypeDef* spiHandle)
{
 8026a68:	b580      	push	{r7, lr}
 8026a6a:	b082      	sub	sp, #8
 8026a6c:	af00      	add	r7, sp, #0
 8026a6e:	6078      	str	r0, [r7, #4]
	  if(spiHandle->Instance==SPI1)
 8026a70:	687b      	ldr	r3, [r7, #4]
 8026a72:	681b      	ldr	r3, [r3, #0]
 8026a74:	4a0b      	ldr	r2, [pc, #44]	; (8026aa4 <spi_flash_gpio_uninit+0x3c>)
 8026a76:	4293      	cmp	r3, r2
 8026a78:	d110      	bne.n	8026a9c <spi_flash_gpio_uninit+0x34>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 8026a7a:	4b0b      	ldr	r3, [pc, #44]	; (8026aa8 <spi_flash_gpio_uninit+0x40>)
 8026a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026a7e:	4a0a      	ldr	r2, [pc, #40]	; (8026aa8 <spi_flash_gpio_uninit+0x40>)
 8026a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026a84:	6453      	str	r3, [r2, #68]	; 0x44
	    /**SPI1 GPIO Configuration
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    PB3     ------> SPI1_SCK
	    */
	    HAL_GPIO_DeInit(GPIOA, SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8026a86:	21c0      	movs	r1, #192	; 0xc0
 8026a88:	4808      	ldr	r0, [pc, #32]	; (8026aac <spi_flash_gpio_uninit+0x44>)
 8026a8a:	f002 f871 	bl	8028b70 <HAL_GPIO_DeInit>

	    HAL_GPIO_DeInit(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin);
 8026a8e:	2108      	movs	r1, #8
 8026a90:	4807      	ldr	r0, [pc, #28]	; (8026ab0 <spi_flash_gpio_uninit+0x48>)
 8026a92:	f002 f86d 	bl	8028b70 <HAL_GPIO_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8026a96:	2023      	movs	r0, #35	; 0x23
 8026a98:	f001 fa95 	bl	8027fc6 <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 8026a9c:	bf00      	nop
 8026a9e:	3708      	adds	r7, #8
 8026aa0:	46bd      	mov	sp, r7
 8026aa2:	bd80      	pop	{r7, pc}
 8026aa4:	40013000 	.word	0x40013000
 8026aa8:	40023800 	.word	0x40023800
 8026aac:	40020000 	.word	0x40020000
 8026ab0:	40020400 	.word	0x40020400

08026ab4 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 8026ab4:	b580      	push	{r7, lr}
 8026ab6:	af00      	add	r7, sp, #0
//    GPIO_ResetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8026ab8:	2200      	movs	r2, #0
 8026aba:	2104      	movs	r1, #4
 8026abc:	4802      	ldr	r0, [pc, #8]	; (8026ac8 <spi_flash_select_chip+0x14>)
 8026abe:	f002 f953 	bl	8028d68 <HAL_GPIO_WritePin>
}
 8026ac2:	bf00      	nop
 8026ac4:	bd80      	pop	{r7, pc}
 8026ac6:	bf00      	nop
 8026ac8:	40021000 	.word	0x40021000

08026acc <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 8026acc:	b580      	push	{r7, lr}
 8026ace:	af00      	add	r7, sp, #0
//    GPIO_SetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8026ad0:	2201      	movs	r2, #1
 8026ad2:	2104      	movs	r1, #4
 8026ad4:	4802      	ldr	r0, [pc, #8]	; (8026ae0 <spi_flash_deselect_chip+0x14>)
 8026ad6:	f002 f947 	bl	8028d68 <HAL_GPIO_WritePin>
}
 8026ada:	bf00      	nop
 8026adc:	bd80      	pop	{r7, pc}
 8026ade:	bf00      	nop
 8026ae0:	40021000 	.word	0x40021000

08026ae4 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 8026ae4:	b480      	push	{r7}
 8026ae6:	b085      	sub	sp, #20
 8026ae8:	af00      	add	r7, sp, #0
 8026aea:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 8026aec:	4b1f      	ldr	r3, [pc, #124]	; (8026b6c <spi_flash_get_baud_rate_prescaler+0x88>)
 8026aee:	681b      	ldr	r3, [r3, #0]
 8026af0:	4a1f      	ldr	r2, [pc, #124]	; (8026b70 <spi_flash_get_baud_rate_prescaler+0x8c>)
 8026af2:	fba2 2303 	umull	r2, r3, r2, r3
 8026af6:	099b      	lsrs	r3, r3, #6
 8026af8:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 8026afa:	68fb      	ldr	r3, [r7, #12]
 8026afc:	085b      	lsrs	r3, r3, #1
 8026afe:	687a      	ldr	r2, [r7, #4]
 8026b00:	429a      	cmp	r2, r3
 8026b02:	d301      	bcc.n	8026b08 <spi_flash_get_baud_rate_prescaler+0x24>
        return SPI_BAUDRATEPRESCALER_2;
 8026b04:	2300      	movs	r3, #0
 8026b06:	e02a      	b.n	8026b5e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8026b08:	68fb      	ldr	r3, [r7, #12]
 8026b0a:	089b      	lsrs	r3, r3, #2
 8026b0c:	687a      	ldr	r2, [r7, #4]
 8026b0e:	429a      	cmp	r2, r3
 8026b10:	d301      	bcc.n	8026b16 <spi_flash_get_baud_rate_prescaler+0x32>
        return SPI_BAUDRATEPRESCALER_4;
 8026b12:	2308      	movs	r3, #8
 8026b14:	e023      	b.n	8026b5e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 8026b16:	68fb      	ldr	r3, [r7, #12]
 8026b18:	08db      	lsrs	r3, r3, #3
 8026b1a:	687a      	ldr	r2, [r7, #4]
 8026b1c:	429a      	cmp	r2, r3
 8026b1e:	d301      	bcc.n	8026b24 <spi_flash_get_baud_rate_prescaler+0x40>
        return SPI_BAUDRATEPRESCALER_8;
 8026b20:	2310      	movs	r3, #16
 8026b22:	e01c      	b.n	8026b5e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8026b24:	68fb      	ldr	r3, [r7, #12]
 8026b26:	091b      	lsrs	r3, r3, #4
 8026b28:	687a      	ldr	r2, [r7, #4]
 8026b2a:	429a      	cmp	r2, r3
 8026b2c:	d301      	bcc.n	8026b32 <spi_flash_get_baud_rate_prescaler+0x4e>
        return SPI_BAUDRATEPRESCALER_16;
 8026b2e:	2318      	movs	r3, #24
 8026b30:	e015      	b.n	8026b5e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 8026b32:	68fb      	ldr	r3, [r7, #12]
 8026b34:	095b      	lsrs	r3, r3, #5
 8026b36:	687a      	ldr	r2, [r7, #4]
 8026b38:	429a      	cmp	r2, r3
 8026b3a:	d301      	bcc.n	8026b40 <spi_flash_get_baud_rate_prescaler+0x5c>
        return SPI_BAUDRATEPRESCALER_32;
 8026b3c:	2320      	movs	r3, #32
 8026b3e:	e00e      	b.n	8026b5e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 8026b40:	68fb      	ldr	r3, [r7, #12]
 8026b42:	099b      	lsrs	r3, r3, #6
 8026b44:	687a      	ldr	r2, [r7, #4]
 8026b46:	429a      	cmp	r2, r3
 8026b48:	d301      	bcc.n	8026b4e <spi_flash_get_baud_rate_prescaler+0x6a>
        return SPI_BAUDRATEPRESCALER_64;
 8026b4a:	2328      	movs	r3, #40	; 0x28
 8026b4c:	e007      	b.n	8026b5e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 8026b4e:	68fb      	ldr	r3, [r7, #12]
 8026b50:	09db      	lsrs	r3, r3, #7
 8026b52:	687a      	ldr	r2, [r7, #4]
 8026b54:	429a      	cmp	r2, r3
 8026b56:	d301      	bcc.n	8026b5c <spi_flash_get_baud_rate_prescaler+0x78>
        return SPI_BAUDRATEPRESCALER_128;
 8026b58:	2330      	movs	r3, #48	; 0x30
 8026b5a:	e000      	b.n	8026b5e <spi_flash_get_baud_rate_prescaler+0x7a>
    else
        return SPI_BAUDRATEPRESCALER_256;
 8026b5c:	2338      	movs	r3, #56	; 0x38
}
 8026b5e:	4618      	mov	r0, r3
 8026b60:	3714      	adds	r7, #20
 8026b62:	46bd      	mov	sp, r7
 8026b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b68:	4770      	bx	lr
 8026b6a:	bf00      	nop
 8026b6c:	20000138 	.word	0x20000138
 8026b70:	10624dd3 	.word	0x10624dd3

08026b74 <spi_flash_init>:

static int spi_flash_init(void *conf, uint32_t conf_size)
{
 8026b74:	b590      	push	{r4, r7, lr}
 8026b76:	b083      	sub	sp, #12
 8026b78:	af00      	add	r7, sp, #0
 8026b7a:	6078      	str	r0, [r7, #4]
 8026b7c:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(spi_conf_t))
 8026b7e:	683b      	ldr	r3, [r7, #0]
 8026b80:	2b0e      	cmp	r3, #14
 8026b82:	d802      	bhi.n	8026b8a <spi_flash_init+0x16>
        return -1;
 8026b84:	f04f 33ff 	mov.w	r3, #4294967295
 8026b88:	e046      	b.n	8026c18 <spi_flash_init+0xa4>

    spi_conf = *(spi_conf_t *)conf;
 8026b8a:	4b25      	ldr	r3, [pc, #148]	; (8026c20 <spi_flash_init+0xac>)
 8026b8c:	687a      	ldr	r2, [r7, #4]
 8026b8e:	4614      	mov	r4, r2
 8026b90:	6820      	ldr	r0, [r4, #0]
 8026b92:	6861      	ldr	r1, [r4, #4]
 8026b94:	68a2      	ldr	r2, [r4, #8]
 8026b96:	c307      	stmia	r3!, {r0, r1, r2}
 8026b98:	89a2      	ldrh	r2, [r4, #12]
 8026b9a:	7ba1      	ldrb	r1, [r4, #14]
 8026b9c:	801a      	strh	r2, [r3, #0]
 8026b9e:	460a      	mov	r2, r1
 8026ba0:	709a      	strb	r2, [r3, #2]

//    spi_flash_gpio_init(&hspi1);

    spi_flash_deselect_chip();
 8026ba2:	f7ff ff93 	bl	8026acc <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Instance = SPI1;
 8026ba6:	4b1f      	ldr	r3, [pc, #124]	; (8026c24 <spi_flash_init+0xb0>)
 8026ba8:	4a1f      	ldr	r2, [pc, #124]	; (8026c28 <spi_flash_init+0xb4>)
 8026baa:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8026bac:	4b1d      	ldr	r3, [pc, #116]	; (8026c24 <spi_flash_init+0xb0>)
 8026bae:	f44f 7282 	mov.w	r2, #260	; 0x104
 8026bb2:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8026bb4:	4b1b      	ldr	r3, [pc, #108]	; (8026c24 <spi_flash_init+0xb0>)
 8026bb6:	2200      	movs	r2, #0
 8026bb8:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8026bba:	4b1a      	ldr	r3, [pc, #104]	; (8026c24 <spi_flash_init+0xb0>)
 8026bbc:	2200      	movs	r2, #0
 8026bbe:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8026bc0:	4b18      	ldr	r3, [pc, #96]	; (8026c24 <spi_flash_init+0xb0>)
 8026bc2:	2202      	movs	r2, #2
 8026bc4:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8026bc6:	4b17      	ldr	r3, [pc, #92]	; (8026c24 <spi_flash_init+0xb0>)
 8026bc8:	2201      	movs	r2, #1
 8026bca:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8026bcc:	4b15      	ldr	r3, [pc, #84]	; (8026c24 <spi_flash_init+0xb0>)
 8026bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026bd2:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler =
    	spi_flash_get_baud_rate_prescaler(spi_conf.freq);
 8026bd4:	4b12      	ldr	r3, [pc, #72]	; (8026c20 <spi_flash_init+0xac>)
 8026bd6:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8026bda:	4618      	mov	r0, r3
 8026bdc:	f7ff ff82 	bl	8026ae4 <spi_flash_get_baud_rate_prescaler>
 8026be0:	4603      	mov	r3, r0
 8026be2:	461a      	mov	r2, r3
    hspi1.Init.BaudRatePrescaler =
 8026be4:	4b0f      	ldr	r3, [pc, #60]	; (8026c24 <spi_flash_init+0xb0>)
 8026be6:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8026be8:	4b0e      	ldr	r3, [pc, #56]	; (8026c24 <spi_flash_init+0xb0>)
 8026bea:	2200      	movs	r2, #0
 8026bec:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8026bee:	4b0d      	ldr	r3, [pc, #52]	; (8026c24 <spi_flash_init+0xb0>)
 8026bf0:	2200      	movs	r2, #0
 8026bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8026bf4:	4b0b      	ldr	r3, [pc, #44]	; (8026c24 <spi_flash_init+0xb0>)
 8026bf6:	2200      	movs	r2, #0
 8026bf8:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8026bfa:	4b0a      	ldr	r3, [pc, #40]	; (8026c24 <spi_flash_init+0xb0>)
 8026bfc:	220a      	movs	r2, #10
 8026bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(&hspi1)  ;
 8026c00:	4808      	ldr	r0, [pc, #32]	; (8026c24 <spi_flash_init+0xb0>)
 8026c02:	f004 fc24 	bl	802b44e <HAL_SPI_Init>

    /* Enable SPI */
    __HAL_SPI_ENABLE(&hspi1);
 8026c06:	4b07      	ldr	r3, [pc, #28]	; (8026c24 <spi_flash_init+0xb0>)
 8026c08:	681b      	ldr	r3, [r3, #0]
 8026c0a:	681a      	ldr	r2, [r3, #0]
 8026c0c:	4b05      	ldr	r3, [pc, #20]	; (8026c24 <spi_flash_init+0xb0>)
 8026c0e:	681b      	ldr	r3, [r3, #0]
 8026c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026c14:	601a      	str	r2, [r3, #0]

    return 0;
 8026c16:	2300      	movs	r3, #0
}
 8026c18:	4618      	mov	r0, r3
 8026c1a:	370c      	adds	r7, #12
 8026c1c:	46bd      	mov	sp, r7
 8026c1e:	bd90      	pop	{r4, r7, pc}
 8026c20:	200057e0 	.word	0x200057e0
 8026c24:	20005788 	.word	0x20005788
 8026c28:	40013000 	.word	0x40013000

08026c2c <spi_flash_uninit>:

static void spi_flash_uninit()
{
 8026c2c:	b580      	push	{r7, lr}
 8026c2e:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit(&hspi1);
 8026c30:	4806      	ldr	r0, [pc, #24]	; (8026c4c <spi_flash_uninit+0x20>)
 8026c32:	f7ff ff19 	bl	8026a68 <spi_flash_gpio_uninit>

    /* 禁用SPI */
    __HAL_SPI_DISABLE(&hspi1);
 8026c36:	4b05      	ldr	r3, [pc, #20]	; (8026c4c <spi_flash_uninit+0x20>)
 8026c38:	681b      	ldr	r3, [r3, #0]
 8026c3a:	681a      	ldr	r2, [r3, #0]
 8026c3c:	4b03      	ldr	r3, [pc, #12]	; (8026c4c <spi_flash_uninit+0x20>)
 8026c3e:	681b      	ldr	r3, [r3, #0]
 8026c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026c44:	601a      	str	r2, [r3, #0]
}
 8026c46:	bf00      	nop
 8026c48:	bd80      	pop	{r7, pc}
 8026c4a:	bf00      	nop
 8026c4c:	20005788 	.word	0x20005788

08026c50 <spi_flash_send_byte>:

static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8026c50:	b580      	push	{r7, lr}
 8026c52:	b084      	sub	sp, #16
 8026c54:	af00      	add	r7, sp, #0
 8026c56:	4603      	mov	r3, r0
 8026c58:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_byte;

    HAL_SPI_TransmitReceive_IT(&hspi1,&byte,&rx_byte,1);
 8026c5a:	f107 020f 	add.w	r2, r7, #15
 8026c5e:	1df9      	adds	r1, r7, #7
 8026c60:	2301      	movs	r3, #1
 8026c62:	4804      	ldr	r0, [pc, #16]	; (8026c74 <spi_flash_send_byte+0x24>)
 8026c64:	f004 fc7c 	bl	802b560 <HAL_SPI_TransmitReceive_IT>

 	return rx_byte;
 8026c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8026c6a:	4618      	mov	r0, r3
 8026c6c:	3710      	adds	r7, #16
 8026c6e:	46bd      	mov	sp, r7
 8026c70:	bd80      	pop	{r7, pc}
 8026c72:	bf00      	nop
 8026c74:	20005788 	.word	0x20005788

08026c78 <spi_flash_read_byte>:

static inline uint8_t spi_flash_read_byte()
{
 8026c78:	b580      	push	{r7, lr}
 8026c7a:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8026c7c:	20ff      	movs	r0, #255	; 0xff
 8026c7e:	f7ff ffe7 	bl	8026c50 <spi_flash_send_byte>
 8026c82:	4603      	mov	r3, r0
}
 8026c84:	4618      	mov	r0, r3
 8026c86:	bd80      	pop	{r7, pc}

08026c88 <spi_flash_set_feature>:

static void spi_flash_set_feature(uint8_t addr, uint8_t data)
{
 8026c88:	b580      	push	{r7, lr}
 8026c8a:	b082      	sub	sp, #8
 8026c8c:	af00      	add	r7, sp, #0
 8026c8e:	4603      	mov	r3, r0
 8026c90:	460a      	mov	r2, r1
 8026c92:	71fb      	strb	r3, [r7, #7]
 8026c94:	4613      	mov	r3, r2
 8026c96:	71bb      	strb	r3, [r7, #6]
    spi_flash_select_chip();  // 选中SPI Flash
 8026c98:	f7ff ff0c 	bl	8026ab4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_SET_FEATURE);  // 发送设置特征的操作码
 8026c9c:	201f      	movs	r0, #31
 8026c9e:	f7ff ffd7 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 8026ca2:	79fb      	ldrb	r3, [r7, #7]
 8026ca4:	4618      	mov	r0, r3
 8026ca6:	f7ff ffd3 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_send_byte(data);  // 发送数据
 8026caa:	79bb      	ldrb	r3, [r7, #6]
 8026cac:	4618      	mov	r0, r3
 8026cae:	f7ff ffcf 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8026cb2:	f7ff ff0b 	bl	8026acc <spi_flash_deselect_chip>
}
 8026cb6:	bf00      	nop
 8026cb8:	3708      	adds	r7, #8
 8026cba:	46bd      	mov	sp, r7
 8026cbc:	bd80      	pop	{r7, pc}

08026cbe <spi_flash_get_feature>:

static void spi_flash_get_feature(uint8_t addr, uint8_t *data)
{
 8026cbe:	b580      	push	{r7, lr}
 8026cc0:	b082      	sub	sp, #8
 8026cc2:	af00      	add	r7, sp, #0
 8026cc4:	4603      	mov	r3, r0
 8026cc6:	6039      	str	r1, [r7, #0]
 8026cc8:	71fb      	strb	r3, [r7, #7]
    spi_flash_select_chip();  // 选中SPI Flash
 8026cca:	f7ff fef3 	bl	8026ab4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_GET_FEATURE);  // 发送获取特征的操作码
 8026cce:	200f      	movs	r0, #15
 8026cd0:	f7ff ffbe 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 8026cd4:	79fb      	ldrb	r3, [r7, #7]
 8026cd6:	4618      	mov	r0, r3
 8026cd8:	f7ff ffba 	bl	8026c50 <spi_flash_send_byte>
    *data = spi_flash_read_byte();  // 读取一个字节的数据
 8026cdc:	f7ff ffcc 	bl	8026c78 <spi_flash_read_byte>
 8026ce0:	4603      	mov	r3, r0
 8026ce2:	461a      	mov	r2, r3
 8026ce4:	683b      	ldr	r3, [r7, #0]
 8026ce6:	701a      	strb	r2, [r3, #0]
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8026ce8:	f7ff fef0 	bl	8026acc <spi_flash_deselect_chip>
}
 8026cec:	bf00      	nop
 8026cee:	3708      	adds	r7, #8
 8026cf0:	46bd      	mov	sp, r7
 8026cf2:	bd80      	pop	{r7, pc}

08026cf4 <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 8026cf4:	b580      	push	{r7, lr}
 8026cf6:	b082      	sub	sp, #8
 8026cf8:	af00      	add	r7, sp, #0
    uint32_t timeout = 0x1000000;  // 超时时间
 8026cfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8026cfe:	607b      	str	r3, [r7, #4]
    uint8_t status;

    do {
        spi_flash_get_feature(_SPI_NAND_ADDR_STATUS, &status);  // 获取状态
 8026d00:	1cfb      	adds	r3, r7, #3
 8026d02:	4619      	mov	r1, r3
 8026d04:	20c0      	movs	r0, #192	; 0xc0
 8026d06:	f7ff ffda 	bl	8026cbe <spi_flash_get_feature>
    } while((status & _SPI_NAND_VAL_OIP) && timeout);
 8026d0a:	78fb      	ldrb	r3, [r7, #3]
 8026d0c:	f003 0301 	and.w	r3, r3, #1
 8026d10:	2b00      	cmp	r3, #0
 8026d12:	d002      	beq.n	8026d1a <spi_flash_read_status+0x26>
 8026d14:	687b      	ldr	r3, [r7, #4]
 8026d16:	2b00      	cmp	r3, #0
 8026d18:	d1f2      	bne.n	8026d00 <spi_flash_read_status+0xc>

    if (!timeout)
 8026d1a:	687b      	ldr	r3, [r7, #4]
 8026d1c:	2b00      	cmp	r3, #0
 8026d1e:	d101      	bne.n	8026d24 <spi_flash_read_status+0x30>
        return FLASH_STATUS_TIMEOUT;
 8026d20:	2303      	movs	r3, #3
 8026d22:	e02b      	b.n	8026d7c <spi_flash_read_status+0x88>

    switch(flash_last_operation){
 8026d24:	4b17      	ldr	r3, [pc, #92]	; (8026d84 <spi_flash_read_status+0x90>)
 8026d26:	681b      	ldr	r3, [r3, #0]
 8026d28:	2b03      	cmp	r3, #3
 8026d2a:	d014      	beq.n	8026d56 <spi_flash_read_status+0x62>
 8026d2c:	2b03      	cmp	r3, #3
 8026d2e:	d81d      	bhi.n	8026d6c <spi_flash_read_status+0x78>
 8026d30:	2b01      	cmp	r3, #1
 8026d32:	d002      	beq.n	8026d3a <spi_flash_read_status+0x46>
 8026d34:	2b02      	cmp	r3, #2
 8026d36:	d007      	beq.n	8026d48 <spi_flash_read_status+0x54>
                return FLASH_STATUS_ERROR;
            break;
        case FLASH_OP_SPARE:
        case FLASH_OP_EMPTY:
        default:
            break;
 8026d38:	e018      	b.n	8026d6c <spi_flash_read_status+0x78>
            if(status & _SPI_NAND_VAL_ERASE_FAIL)
 8026d3a:	78fb      	ldrb	r3, [r7, #3]
 8026d3c:	f003 0304 	and.w	r3, r3, #4
 8026d40:	2b00      	cmp	r3, #0
 8026d42:	d015      	beq.n	8026d70 <spi_flash_read_status+0x7c>
                return FLASH_STATUS_ERROR;
 8026d44:	2302      	movs	r3, #2
 8026d46:	e019      	b.n	8026d7c <spi_flash_read_status+0x88>
            if(status & _SPI_NAND_VAL_PROGRAM_FAIL)
 8026d48:	78fb      	ldrb	r3, [r7, #3]
 8026d4a:	f003 0308 	and.w	r3, r3, #8
 8026d4e:	2b00      	cmp	r3, #0
 8026d50:	d010      	beq.n	8026d74 <spi_flash_read_status+0x80>
                return FLASH_STATUS_ERROR;
 8026d52:	2302      	movs	r3, #2
 8026d54:	e012      	b.n	8026d7c <spi_flash_read_status+0x88>
            if((status & spi_conf.ecc_err_bits_mask) == spi_conf.ecc_err_bits_state)
 8026d56:	4b0c      	ldr	r3, [pc, #48]	; (8026d88 <spi_flash_read_status+0x94>)
 8026d58:	799a      	ldrb	r2, [r3, #6]
 8026d5a:	78fb      	ldrb	r3, [r7, #3]
 8026d5c:	4013      	ands	r3, r2
 8026d5e:	b2da      	uxtb	r2, r3
 8026d60:	4b09      	ldr	r3, [pc, #36]	; (8026d88 <spi_flash_read_status+0x94>)
 8026d62:	79db      	ldrb	r3, [r3, #7]
 8026d64:	429a      	cmp	r2, r3
 8026d66:	d107      	bne.n	8026d78 <spi_flash_read_status+0x84>
                return FLASH_STATUS_ERROR;
 8026d68:	2302      	movs	r3, #2
 8026d6a:	e007      	b.n	8026d7c <spi_flash_read_status+0x88>
            break;
 8026d6c:	bf00      	nop
 8026d6e:	e004      	b.n	8026d7a <spi_flash_read_status+0x86>
            break;
 8026d70:	bf00      	nop
 8026d72:	e002      	b.n	8026d7a <spi_flash_read_status+0x86>
            break;
 8026d74:	bf00      	nop
 8026d76:	e000      	b.n	8026d7a <spi_flash_read_status+0x86>
            break;
 8026d78:	bf00      	nop
    }
    return FLASH_STATUS_READY;
 8026d7a:	2300      	movs	r3, #0
}
 8026d7c:	4618      	mov	r0, r3
 8026d7e:	3708      	adds	r7, #8
 8026d80:	46bd      	mov	sp, r7
 8026d82:	bd80      	pop	{r7, pc}
 8026d84:	200057f0 	.word	0x200057f0
 8026d88:	200057e0 	.word	0x200057e0

08026d8c <spi_flash_select_die_cmd>:

// 选择 SPI Flash 的芯片
static void spi_flash_select_die_cmd(uint32_t die)
{
 8026d8c:	b580      	push	{r7, lr}
 8026d8e:	b084      	sub	sp, #16
 8026d90:	af00      	add	r7, sp, #0
 8026d92:	6078      	str	r0, [r7, #4]
    switch(spi_conf.die_select_type) {
 8026d94:	4b18      	ldr	r3, [pc, #96]	; (8026df8 <spi_flash_select_die_cmd+0x6c>)
 8026d96:	7a9b      	ldrb	r3, [r3, #10]
 8026d98:	2b01      	cmp	r3, #1
 8026d9a:	d002      	beq.n	8026da2 <spi_flash_select_die_cmd+0x16>
 8026d9c:	2b02      	cmp	r3, #2
 8026d9e:	d00d      	beq.n	8026dbc <spi_flash_select_die_cmd+0x30>
        }
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
        break;
    }
    default:
        break;
 8026da0:	e026      	b.n	8026df0 <spi_flash_select_die_cmd+0x64>
        spi_flash_select_chip();  // 选择 Flash 芯片
 8026da2:	f7ff fe87 	bl	8026ab4 <spi_flash_select_chip>
        spi_flash_send_byte(_SPI_NAND_OP_DIE_SELECT);  // 发送选择芯片的指令
 8026da6:	20c2      	movs	r0, #194	; 0xc2
 8026da8:	f7ff ff52 	bl	8026c50 <spi_flash_send_byte>
        spi_flash_send_byte(die);  // 发送芯片编号
 8026dac:	687b      	ldr	r3, [r7, #4]
 8026dae:	b2db      	uxtb	r3, r3
 8026db0:	4618      	mov	r0, r3
 8026db2:	f7ff ff4d 	bl	8026c50 <spi_flash_send_byte>
        spi_flash_deselect_chip();  // 取消选择芯片
 8026db6:	f7ff fe89 	bl	8026acc <spi_flash_deselect_chip>
        break;
 8026dba:	e019      	b.n	8026df0 <spi_flash_select_die_cmd+0x64>
        spi_flash_get_feature(_SPI_NAND_ADDR_FEATURE_4, &feature);  // 读取 Flash 的特征值
 8026dbc:	f107 030f 	add.w	r3, r7, #15
 8026dc0:	4619      	mov	r1, r3
 8026dc2:	20d0      	movs	r0, #208	; 0xd0
 8026dc4:	f7ff ff7b 	bl	8026cbe <spi_flash_get_feature>
        if(die == 0) {
 8026dc8:	687b      	ldr	r3, [r7, #4]
 8026dca:	2b00      	cmp	r3, #0
 8026dcc:	d105      	bne.n	8026dda <spi_flash_select_die_cmd+0x4e>
            feature &= ~(0x40);  // 清除特征值中的某位
 8026dce:	7bfb      	ldrb	r3, [r7, #15]
 8026dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8026dd4:	b2db      	uxtb	r3, r3
 8026dd6:	73fb      	strb	r3, [r7, #15]
 8026dd8:	e004      	b.n	8026de4 <spi_flash_select_die_cmd+0x58>
            feature |= 0x40;  // 设置特征值中的某位
 8026dda:	7bfb      	ldrb	r3, [r7, #15]
 8026ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026de0:	b2db      	uxtb	r3, r3
 8026de2:	73fb      	strb	r3, [r7, #15]
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
 8026de4:	7bfb      	ldrb	r3, [r7, #15]
 8026de6:	4619      	mov	r1, r3
 8026de8:	20d0      	movs	r0, #208	; 0xd0
 8026dea:	f7ff ff4d 	bl	8026c88 <spi_flash_set_feature>
        break;
 8026dee:	bf00      	nop
    }
}
 8026df0:	bf00      	nop
 8026df2:	3710      	adds	r7, #16
 8026df4:	46bd      	mov	sp, r7
 8026df6:	bd80      	pop	{r7, pc}
 8026df8:	200057e0 	.word	0x200057e0

08026dfc <spi_flash_select_die>:

// 选择 SPI Flash 的 die（芯片）（用于多芯片的情况）
static void spi_flash_select_die(uint32_t page)
{
 8026dfc:	b580      	push	{r7, lr}
 8026dfe:	b084      	sub	sp, #16
 8026e00:	af00      	add	r7, sp, #0
 8026e02:	6078      	str	r0, [r7, #4]
    uint32_t die = 0;
 8026e04:	2300      	movs	r3, #0
 8026e06:	60fb      	str	r3, [r7, #12]
    if(spi_conf.die_select_type) {
 8026e08:	4b0f      	ldr	r3, [pc, #60]	; (8026e48 <spi_flash_select_die+0x4c>)
 8026e0a:	7a9b      	ldrb	r3, [r3, #10]
 8026e0c:	2b00      	cmp	r3, #0
 8026e0e:	d017      	beq.n	8026e40 <spi_flash_select_die+0x44>
        if(!spi_conf.plane_select_have)
 8026e10:	4b0d      	ldr	r3, [pc, #52]	; (8026e48 <spi_flash_select_die+0x4c>)
 8026e12:	7a5b      	ldrb	r3, [r3, #9]
 8026e14:	2b00      	cmp	r3, #0
 8026e16:	d104      	bne.n	8026e22 <spi_flash_select_die+0x26>
            die = ((page >> 16) & 0xff);  // 计算芯片编号
 8026e18:	687b      	ldr	r3, [r7, #4]
 8026e1a:	0c1b      	lsrs	r3, r3, #16
 8026e1c:	b2db      	uxtb	r3, r3
 8026e1e:	60fb      	str	r3, [r7, #12]
 8026e20:	e003      	b.n	8026e2a <spi_flash_select_die+0x2e>
        else
            die = ((page >> 17) & 0xff);  // 计算芯片编号
 8026e22:	687b      	ldr	r3, [r7, #4]
 8026e24:	0c5b      	lsrs	r3, r3, #17
 8026e26:	b2db      	uxtb	r3, r3
 8026e28:	60fb      	str	r3, [r7, #12]
        if (current_die != die) {
 8026e2a:	4b08      	ldr	r3, [pc, #32]	; (8026e4c <spi_flash_select_die+0x50>)
 8026e2c:	681b      	ldr	r3, [r3, #0]
 8026e2e:	68fa      	ldr	r2, [r7, #12]
 8026e30:	429a      	cmp	r2, r3
 8026e32:	d005      	beq.n	8026e40 <spi_flash_select_die+0x44>
            current_die = die;
 8026e34:	4a05      	ldr	r2, [pc, #20]	; (8026e4c <spi_flash_select_die+0x50>)
 8026e36:	68fb      	ldr	r3, [r7, #12]
 8026e38:	6013      	str	r3, [r2, #0]
            spi_flash_select_die_cmd(die);  // 选择芯片
 8026e3a:	68f8      	ldr	r0, [r7, #12]
 8026e3c:	f7ff ffa6 	bl	8026d8c <spi_flash_select_die_cmd>
        }
    }
}
 8026e40:	bf00      	nop
 8026e42:	3710      	adds	r7, #16
 8026e44:	46bd      	mov	sp, r7
 8026e46:	bd80      	pop	{r7, pc}
 8026e48:	200057e0 	.word	0x200057e0
 8026e4c:	200057f4 	.word	0x200057f4

08026e50 <spi_flash_read_id>:

// 读取 SPI Flash 的 ID（厂商ID和设备ID）
static void spi_flash_read_id(chip_id_t *chip_id)
{
 8026e50:	b580      	push	{r7, lr}
 8026e52:	b082      	sub	sp, #8
 8026e54:	af00      	add	r7, sp, #0
 8026e56:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();  // 选择 Flash 芯片
 8026e58:	f7ff fe2c 	bl	8026ab4 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_READ_ID);  // 发送读取 ID 的指令
 8026e5c:	209f      	movs	r0, #159	; 0x9f
 8026e5e:	f7ff fef7 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_send_byte(_SPI_NAND_ADDR_MANUFACTURE_ID);  // 发送读取厂商ID的指令
 8026e62:	2000      	movs	r0, #0
 8026e64:	f7ff fef4 	bl	8026c50 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();  // 读取厂商ID
 8026e68:	f7ff ff06 	bl	8026c78 <spi_flash_read_byte>
 8026e6c:	4603      	mov	r3, r0
 8026e6e:	461a      	mov	r2, r3
 8026e70:	687b      	ldr	r3, [r7, #4]
 8026e72:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();  // 读取设备ID
 8026e74:	f7ff ff00 	bl	8026c78 <spi_flash_read_byte>
 8026e78:	4603      	mov	r3, r0
 8026e7a:	461a      	mov	r2, r3
 8026e7c:	687b      	ldr	r3, [r7, #4]
 8026e7e:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();  // 读取第三个ID
 8026e80:	f7ff fefa 	bl	8026c78 <spi_flash_read_byte>
 8026e84:	4603      	mov	r3, r0
 8026e86:	461a      	mov	r2, r3
 8026e88:	687b      	ldr	r3, [r7, #4]
 8026e8a:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();  // 读取第四个ID
 8026e8c:	f7ff fef4 	bl	8026c78 <spi_flash_read_byte>
 8026e90:	4603      	mov	r3, r0
 8026e92:	461a      	mov	r2, r3
 8026e94:	687b      	ldr	r3, [r7, #4]
 8026e96:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();  // 读取第五个ID
 8026e98:	f7ff feee 	bl	8026c78 <spi_flash_read_byte>
 8026e9c:	4603      	mov	r3, r0
 8026e9e:	461a      	mov	r2, r3
 8026ea0:	687b      	ldr	r3, [r7, #4]
 8026ea2:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();  // 读取第六个ID
 8026ea4:	f7ff fee8 	bl	8026c78 <spi_flash_read_byte>
 8026ea8:	4603      	mov	r3, r0
 8026eaa:	461a      	mov	r2, r3
 8026eac:	687b      	ldr	r3, [r7, #4]
 8026eae:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();  // 取消选择芯片
 8026eb0:	f7ff fe0c 	bl	8026acc <spi_flash_deselect_chip>
}
 8026eb4:	bf00      	nop
 8026eb6:	3708      	adds	r7, #8
 8026eb8:	46bd      	mov	sp, r7
 8026eba:	bd80      	pop	{r7, pc}

08026ebc <spi_flash_write_enable>:
        spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
}

// 启用 Flash 的写入使能
static void spi_flash_write_enable()
{
 8026ebc:	b580      	push	{r7, lr}
 8026ebe:	af00      	add	r7, sp, #0
    spi_flash_select_chip();  // 选择 Flash 芯片
 8026ec0:	f7ff fdf8 	bl	8026ab4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_WRITE_ENABLE);  // 发送写使能指令
 8026ec4:	2006      	movs	r0, #6
 8026ec6:	f7ff fec3 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择芯片
 8026eca:	f7ff fdff 	bl	8026acc <spi_flash_deselect_chip>
}
 8026ece:	bf00      	nop
 8026ed0:	bd80      	pop	{r7, pc}
	...

08026ed4 <spi_flash_program_load>:

// 向 Flash 写入数据
static void spi_flash_program_load(uint8_t *buf, uint32_t page_size, uint32_t page)
{
 8026ed4:	b580      	push	{r7, lr}
 8026ed6:	b086      	sub	sp, #24
 8026ed8:	af00      	add	r7, sp, #0
 8026eda:	60f8      	str	r0, [r7, #12]
 8026edc:	60b9      	str	r1, [r7, #8]
 8026ede:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t addr = 0;
 8026ee0:	2300      	movs	r3, #0
 8026ee2:	613b      	str	r3, [r7, #16]
    spi_flash_select_chip();  // 选择 Flash 芯片
 8026ee4:	f7ff fde6 	bl	8026ab4 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_LOAD_SINGLE);  // 发送写入数据的指令
 8026ee8:	2002      	movs	r0, #2
 8026eea:	f7ff feb1 	bl	8026c50 <spi_flash_send_byte>

    if(spi_conf.plane_select_have) {
 8026eee:	4b1f      	ldr	r3, [pc, #124]	; (8026f6c <spi_flash_program_load+0x98>)
 8026ef0:	7a5b      	ldrb	r3, [r3, #9]
 8026ef2:	2b00      	cmp	r3, #0
 8026ef4:	d018      	beq.n	8026f28 <spi_flash_program_load+0x54>
        if((page >> 6)& (0x1))
 8026ef6:	687b      	ldr	r3, [r7, #4]
 8026ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026efc:	2b00      	cmp	r3, #0
 8026efe:	d009      	beq.n	8026f14 <spi_flash_program_load+0x40>
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) | (0x10));  // 发送地址的第二个字节
 8026f00:	693b      	ldr	r3, [r7, #16]
 8026f02:	0a1b      	lsrs	r3, r3, #8
 8026f04:	b2db      	uxtb	r3, r3
 8026f06:	f043 0310 	orr.w	r3, r3, #16
 8026f0a:	b2db      	uxtb	r3, r3
 8026f0c:	4618      	mov	r0, r3
 8026f0e:	f7ff fe9f 	bl	8026c50 <spi_flash_send_byte>
 8026f12:	e00f      	b.n	8026f34 <spi_flash_program_load+0x60>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) & (0xef));  // 发送地址的第二个字节
 8026f14:	693b      	ldr	r3, [r7, #16]
 8026f16:	0a1b      	lsrs	r3, r3, #8
 8026f18:	b2db      	uxtb	r3, r3
 8026f1a:	f023 0310 	bic.w	r3, r3, #16
 8026f1e:	b2db      	uxtb	r3, r3
 8026f20:	4618      	mov	r0, r3
 8026f22:	f7ff fe95 	bl	8026c50 <spi_flash_send_byte>
 8026f26:	e005      	b.n	8026f34 <spi_flash_program_load+0x60>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(addr));  // 发送地址的第二个字节
 8026f28:	693b      	ldr	r3, [r7, #16]
 8026f2a:	0a1b      	lsrs	r3, r3, #8
 8026f2c:	b2db      	uxtb	r3, r3
 8026f2e:	4618      	mov	r0, r3
 8026f30:	f7ff fe8e 	bl	8026c50 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(addr));  // 发送地址的第一个字节
 8026f34:	693b      	ldr	r3, [r7, #16]
 8026f36:	b2db      	uxtb	r3, r3
 8026f38:	4618      	mov	r0, r3
 8026f3a:	f7ff fe89 	bl	8026c50 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 8026f3e:	2300      	movs	r3, #0
 8026f40:	617b      	str	r3, [r7, #20]
 8026f42:	e009      	b.n	8026f58 <spi_flash_program_load+0x84>
        spi_flash_send_byte(buf[i]);  // 逐字节写入数据
 8026f44:	68fa      	ldr	r2, [r7, #12]
 8026f46:	697b      	ldr	r3, [r7, #20]
 8026f48:	4413      	add	r3, r2
 8026f4a:	781b      	ldrb	r3, [r3, #0]
 8026f4c:	4618      	mov	r0, r3
 8026f4e:	f7ff fe7f 	bl	8026c50 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8026f52:	697b      	ldr	r3, [r7, #20]
 8026f54:	3301      	adds	r3, #1
 8026f56:	617b      	str	r3, [r7, #20]
 8026f58:	697a      	ldr	r2, [r7, #20]
 8026f5a:	68bb      	ldr	r3, [r7, #8]
 8026f5c:	429a      	cmp	r2, r3
 8026f5e:	d3f1      	bcc.n	8026f44 <spi_flash_program_load+0x70>

    spi_flash_deselect_chip();  // 取消选择芯片
 8026f60:	f7ff fdb4 	bl	8026acc <spi_flash_deselect_chip>
}
 8026f64:	bf00      	nop
 8026f66:	3718      	adds	r7, #24
 8026f68:	46bd      	mov	sp, r7
 8026f6a:	bd80      	pop	{r7, pc}
 8026f6c:	200057e0 	.word	0x200057e0

08026f70 <spi_flash_write_page_async>:

// 异步写入页面数据到闪存
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8026f70:	b580      	push	{r7, lr}
 8026f72:	b084      	sub	sp, #16
 8026f74:	af00      	add	r7, sp, #0
 8026f76:	60f8      	str	r0, [r7, #12]
 8026f78:	60b9      	str	r1, [r7, #8]
 8026f7a:	607a      	str	r2, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8026f7c:	68b8      	ldr	r0, [r7, #8]
 8026f7e:	f7ff ff3d 	bl	8026dfc <spi_flash_select_die>

    spi_flash_program_load(buf, page_size, page);  // 加载数据到写入缓冲区
 8026f82:	68ba      	ldr	r2, [r7, #8]
 8026f84:	6879      	ldr	r1, [r7, #4]
 8026f86:	68f8      	ldr	r0, [r7, #12]
 8026f88:	f7ff ffa4 	bl	8026ed4 <spi_flash_program_load>

    spi_flash_write_enable();  // 使能写入
 8026f8c:	f7ff ff96 	bl	8026ebc <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 8026f90:	f7ff fd90 	bl	8026ab4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_EXECUTE);  // 发送写入执行命令
 8026f94:	2010      	movs	r0, #16
 8026f96:	f7ff fe5b 	bl	8026c50 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_WRITE;  // 记录上一次操作为写入
 8026f9a:	4b0d      	ldr	r3, [pc, #52]	; (8026fd0 <spi_flash_write_page_async+0x60>)
 8026f9c:	2202      	movs	r2, #2
 8026f9e:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8026fa0:	68bb      	ldr	r3, [r7, #8]
 8026fa2:	0c1b      	lsrs	r3, r3, #16
 8026fa4:	b2db      	uxtb	r3, r3
 8026fa6:	4618      	mov	r0, r3
 8026fa8:	f7ff fe52 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8026fac:	68bb      	ldr	r3, [r7, #8]
 8026fae:	0a1b      	lsrs	r3, r3, #8
 8026fb0:	b2db      	uxtb	r3, r3
 8026fb2:	4618      	mov	r0, r3
 8026fb4:	f7ff fe4c 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8026fb8:	68bb      	ldr	r3, [r7, #8]
 8026fba:	b2db      	uxtb	r3, r3
 8026fbc:	4618      	mov	r0, r3
 8026fbe:	f7ff fe47 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026fc2:	f7ff fd83 	bl	8026acc <spi_flash_deselect_chip>
    // spi_flash_wait_operation_end();  // 等待操作结束

    // spi_flash_write_disable();  // 禁用写入
}
 8026fc6:	bf00      	nop
 8026fc8:	3710      	adds	r7, #16
 8026fca:	46bd      	mov	sp, r7
 8026fcc:	bd80      	pop	{r7, pc}
 8026fce:	bf00      	nop
 8026fd0:	200057f0 	.word	0x200057f0

08026fd4 <spi_flash_load_page_into_cache>:

// 将页面数据加载到缓存中
static uint32_t spi_flash_load_page_into_cache(uint32_t page)
{
 8026fd4:	b580      	push	{r7, lr}
 8026fd6:	b082      	sub	sp, #8
 8026fd8:	af00      	add	r7, sp, #0
 8026fda:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8026fdc:	6878      	ldr	r0, [r7, #4]
 8026fde:	f7ff ff0d 	bl	8026dfc <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 8026fe2:	f7ff fd67 	bl	8026ab4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 8026fe6:	2013      	movs	r0, #19
 8026fe8:	f7ff fe32 	bl	8026c50 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_READ;  // 记录上一次操作为读取
 8026fec:	4b0e      	ldr	r3, [pc, #56]	; (8027028 <spi_flash_load_page_into_cache+0x54>)
 8026fee:	2203      	movs	r2, #3
 8026ff0:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8026ff2:	687b      	ldr	r3, [r7, #4]
 8026ff4:	0c1b      	lsrs	r3, r3, #16
 8026ff6:	b2db      	uxtb	r3, r3
 8026ff8:	4618      	mov	r0, r3
 8026ffa:	f7ff fe29 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8026ffe:	687b      	ldr	r3, [r7, #4]
 8027000:	0a1b      	lsrs	r3, r3, #8
 8027002:	b2db      	uxtb	r3, r3
 8027004:	4618      	mov	r0, r3
 8027006:	f7ff fe23 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 802700a:	687b      	ldr	r3, [r7, #4]
 802700c:	b2db      	uxtb	r3, r3
 802700e:	4618      	mov	r0, r3
 8027010:	f7ff fe1e 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8027014:	f7ff fd5a 	bl	8026acc <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8027018:	f7ff fe6c 	bl	8026cf4 <spi_flash_read_status>
 802701c:	4603      	mov	r3, r0
}
 802701e:	4618      	mov	r0, r3
 8027020:	3708      	adds	r7, #8
 8027022:	46bd      	mov	sp, r7
 8027024:	bd80      	pop	{r7, pc}
 8027026:	bf00      	nop
 8027028:	200057f0 	.word	0x200057f0

0802702c <spi_flash_read_page>:

// 读取页面数据
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t data_size)
{
 802702c:	b590      	push	{r4, r7, lr}
 802702e:	b089      	sub	sp, #36	; 0x24
 8027030:	af00      	add	r7, sp, #0
 8027032:	60f8      	str	r0, [r7, #12]
 8027034:	60b9      	str	r1, [r7, #8]
 8027036:	607a      	str	r2, [r7, #4]
    uint32_t status = spi_flash_load_page_into_cache(page);  // 将页面数据加载到缓存中
 8027038:	68b8      	ldr	r0, [r7, #8]
 802703a:	f7ff ffcb 	bl	8026fd4 <spi_flash_load_page_into_cache>
 802703e:	61b8      	str	r0, [r7, #24]
    uint32_t data_offset = 0;
 8027040:	2300      	movs	r3, #0
 8027042:	617b      	str	r3, [r7, #20]

    spi_flash_select_chip();  // 选择闪存芯片
 8027044:	f7ff fd36 	bl	8026ab4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8027048:	2003      	movs	r0, #3
 802704a:	f7ff fe01 	bl	8026c50 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 802704e:	4b27      	ldr	r3, [pc, #156]	; (80270ec <spi_flash_read_page+0xc0>)
 8027050:	7a1b      	ldrb	r3, [r3, #8]
 8027052:	2b00      	cmp	r3, #0
 8027054:	d002      	beq.n	802705c <spi_flash_read_page+0x30>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8027056:	20ff      	movs	r0, #255	; 0xff
 8027058:	f7ff fdfa 	bl	8026c50 <spi_flash_send_byte>

    if (spi_conf.plane_select_have) {
 802705c:	4b23      	ldr	r3, [pc, #140]	; (80270ec <spi_flash_read_page+0xc0>)
 802705e:	7a5b      	ldrb	r3, [r3, #9]
 8027060:	2b00      	cmp	r3, #0
 8027062:	d018      	beq.n	8027096 <spi_flash_read_page+0x6a>
        if ((page >> 6) & (0x1))
 8027064:	68bb      	ldr	r3, [r7, #8]
 8027066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802706a:	2b00      	cmp	r3, #0
 802706c:	d009      	beq.n	8027082 <spi_flash_read_page+0x56>
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) | (0x10));  // 发送地址的第二个周期
 802706e:	697b      	ldr	r3, [r7, #20]
 8027070:	0a1b      	lsrs	r3, r3, #8
 8027072:	b2db      	uxtb	r3, r3
 8027074:	f043 0310 	orr.w	r3, r3, #16
 8027078:	b2db      	uxtb	r3, r3
 802707a:	4618      	mov	r0, r3
 802707c:	f7ff fde8 	bl	8026c50 <spi_flash_send_byte>
 8027080:	e00f      	b.n	80270a2 <spi_flash_read_page+0x76>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) & (0xef));  // 发送地址的第二个周期
 8027082:	697b      	ldr	r3, [r7, #20]
 8027084:	0a1b      	lsrs	r3, r3, #8
 8027086:	b2db      	uxtb	r3, r3
 8027088:	f023 0310 	bic.w	r3, r3, #16
 802708c:	b2db      	uxtb	r3, r3
 802708e:	4618      	mov	r0, r3
 8027090:	f7ff fdde 	bl	8026c50 <spi_flash_send_byte>
 8027094:	e005      	b.n	80270a2 <spi_flash_read_page+0x76>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset));  // 发送地址的第二个周期
 8027096:	697b      	ldr	r3, [r7, #20]
 8027098:	0a1b      	lsrs	r3, r3, #8
 802709a:	b2db      	uxtb	r3, r3
 802709c:	4618      	mov	r0, r3
 802709e:	f7ff fdd7 	bl	8026c50 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(data_offset));  // 发送地址的第一个周期
 80270a2:	697b      	ldr	r3, [r7, #20]
 80270a4:	b2db      	uxtb	r3, r3
 80270a6:	4618      	mov	r0, r3
 80270a8:	f7ff fdd2 	bl	8026c50 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 80270ac:	4b0f      	ldr	r3, [pc, #60]	; (80270ec <spi_flash_read_page+0xc0>)
 80270ae:	7a1b      	ldrb	r3, [r3, #8]
 80270b0:	2b00      	cmp	r3, #0
 80270b2:	d102      	bne.n	80270ba <spi_flash_read_page+0x8e>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 80270b4:	20ff      	movs	r0, #255	; 0xff
 80270b6:	f7ff fdcb 	bl	8026c50 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 80270ba:	2300      	movs	r3, #0
 80270bc:	61fb      	str	r3, [r7, #28]
 80270be:	e009      	b.n	80270d4 <spi_flash_read_page+0xa8>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 80270c0:	68fa      	ldr	r2, [r7, #12]
 80270c2:	69fb      	ldr	r3, [r7, #28]
 80270c4:	18d4      	adds	r4, r2, r3
 80270c6:	f7ff fdd7 	bl	8026c78 <spi_flash_read_byte>
 80270ca:	4603      	mov	r3, r0
 80270cc:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 80270ce:	69fb      	ldr	r3, [r7, #28]
 80270d0:	3301      	adds	r3, #1
 80270d2:	61fb      	str	r3, [r7, #28]
 80270d4:	69fa      	ldr	r2, [r7, #28]
 80270d6:	687b      	ldr	r3, [r7, #4]
 80270d8:	429a      	cmp	r2, r3
 80270da:	d3f1      	bcc.n	80270c0 <spi_flash_read_page+0x94>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 80270dc:	f7ff fcf6 	bl	8026acc <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 80270e0:	69bb      	ldr	r3, [r7, #24]
}
 80270e2:	4618      	mov	r0, r3
 80270e4:	3724      	adds	r7, #36	; 0x24
 80270e6:	46bd      	mov	sp, r7
 80270e8:	bd90      	pop	{r4, r7, pc}
 80270ea:	bf00      	nop
 80270ec:	200057e0 	.word	0x200057e0

080270f0 <spi_flash_read_spare_data>:

// 读取备用数据
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 80270f0:	b590      	push	{r4, r7, lr}
 80270f2:	b087      	sub	sp, #28
 80270f4:	af00      	add	r7, sp, #0
 80270f6:	60f8      	str	r0, [r7, #12]
 80270f8:	60b9      	str	r1, [r7, #8]
 80270fa:	607a      	str	r2, [r7, #4]
 80270fc:	603b      	str	r3, [r7, #0]
    uint32_t status;

    spi_flash_select_die(page);  // 选择闪存芯片
 80270fe:	68b8      	ldr	r0, [r7, #8]
 8027100:	f7ff fe7c 	bl	8026dfc <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 8027104:	f7ff fcd6 	bl	8026ab4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 8027108:	2013      	movs	r0, #19
 802710a:	f7ff fda1 	bl	8026c50 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_SPARE;  // 记录上一次操作为备用
 802710e:	4b38      	ldr	r3, [pc, #224]	; (80271f0 <spi_flash_read_spare_data+0x100>)
 8027110:	2204      	movs	r2, #4
 8027112:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8027114:	68bb      	ldr	r3, [r7, #8]
 8027116:	0c1b      	lsrs	r3, r3, #16
 8027118:	b2db      	uxtb	r3, r3
 802711a:	4618      	mov	r0, r3
 802711c:	f7ff fd98 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8027120:	68bb      	ldr	r3, [r7, #8]
 8027122:	0a1b      	lsrs	r3, r3, #8
 8027124:	b2db      	uxtb	r3, r3
 8027126:	4618      	mov	r0, r3
 8027128:	f7ff fd92 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 802712c:	68bb      	ldr	r3, [r7, #8]
 802712e:	b2db      	uxtb	r3, r3
 8027130:	4618      	mov	r0, r3
 8027132:	f7ff fd8d 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8027136:	f7ff fcc9 	bl	8026acc <spi_flash_deselect_chip>
    status = spi_flash_read_status();  // 读取状态寄存器的值
 802713a:	f7ff fddb 	bl	8026cf4 <spi_flash_read_status>
 802713e:	6138      	str	r0, [r7, #16]

    spi_flash_select_chip();  // 选择闪存芯片
 8027140:	f7ff fcb8 	bl	8026ab4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8027144:	2003      	movs	r0, #3
 8027146:	f7ff fd83 	bl	8026c50 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 802714a:	4b2a      	ldr	r3, [pc, #168]	; (80271f4 <spi_flash_read_spare_data+0x104>)
 802714c:	7a1b      	ldrb	r3, [r3, #8]
 802714e:	2b00      	cmp	r3, #0
 8027150:	d002      	beq.n	8027158 <spi_flash_read_spare_data+0x68>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8027152:	20ff      	movs	r0, #255	; 0xff
 8027154:	f7ff fd7c 	bl	8026c50 <spi_flash_send_byte>

    offset += spi_conf.spare_offset;
 8027158:	4b26      	ldr	r3, [pc, #152]	; (80271f4 <spi_flash_read_spare_data+0x104>)
 802715a:	681b      	ldr	r3, [r3, #0]
 802715c:	687a      	ldr	r2, [r7, #4]
 802715e:	4413      	add	r3, r2
 8027160:	607b      	str	r3, [r7, #4]
    if (spi_conf.plane_select_have) {
 8027162:	4b24      	ldr	r3, [pc, #144]	; (80271f4 <spi_flash_read_spare_data+0x104>)
 8027164:	7a5b      	ldrb	r3, [r3, #9]
 8027166:	2b00      	cmp	r3, #0
 8027168:	d018      	beq.n	802719c <spi_flash_read_spare_data+0xac>
        if ((page >> 6) & (0x1))
 802716a:	68bb      	ldr	r3, [r7, #8]
 802716c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027170:	2b00      	cmp	r3, #0
 8027172:	d009      	beq.n	8027188 <spi_flash_read_spare_data+0x98>
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) | (0x10));  // 发送地址的第二个周期
 8027174:	687b      	ldr	r3, [r7, #4]
 8027176:	0a1b      	lsrs	r3, r3, #8
 8027178:	b2db      	uxtb	r3, r3
 802717a:	f043 0310 	orr.w	r3, r3, #16
 802717e:	b2db      	uxtb	r3, r3
 8027180:	4618      	mov	r0, r3
 8027182:	f7ff fd65 	bl	8026c50 <spi_flash_send_byte>
 8027186:	e00f      	b.n	80271a8 <spi_flash_read_spare_data+0xb8>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) & (0xef));  // 发送地址的第二个周期
 8027188:	687b      	ldr	r3, [r7, #4]
 802718a:	0a1b      	lsrs	r3, r3, #8
 802718c:	b2db      	uxtb	r3, r3
 802718e:	f023 0310 	bic.w	r3, r3, #16
 8027192:	b2db      	uxtb	r3, r3
 8027194:	4618      	mov	r0, r3
 8027196:	f7ff fd5b 	bl	8026c50 <spi_flash_send_byte>
 802719a:	e005      	b.n	80271a8 <spi_flash_read_spare_data+0xb8>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(offset));  // 发送地址的第二个周期
 802719c:	687b      	ldr	r3, [r7, #4]
 802719e:	0a1b      	lsrs	r3, r3, #8
 80271a0:	b2db      	uxtb	r3, r3
 80271a2:	4618      	mov	r0, r3
 80271a4:	f7ff fd54 	bl	8026c50 <spi_flash_send_byte>
    }
    spi_flash_send_byte(ADDR_1st_CYCLE(offset));  // 发送地址的第一个周期
 80271a8:	687b      	ldr	r3, [r7, #4]
 80271aa:	b2db      	uxtb	r3, r3
 80271ac:	4618      	mov	r0, r3
 80271ae:	f7ff fd4f 	bl	8026c50 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 80271b2:	4b10      	ldr	r3, [pc, #64]	; (80271f4 <spi_flash_read_spare_data+0x104>)
 80271b4:	7a1b      	ldrb	r3, [r3, #8]
 80271b6:	2b00      	cmp	r3, #0
 80271b8:	d102      	bne.n	80271c0 <spi_flash_read_spare_data+0xd0>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 80271ba:	20ff      	movs	r0, #255	; 0xff
 80271bc:	f7ff fd48 	bl	8026c50 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 80271c0:	2300      	movs	r3, #0
 80271c2:	617b      	str	r3, [r7, #20]
 80271c4:	e009      	b.n	80271da <spi_flash_read_spare_data+0xea>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 80271c6:	68fa      	ldr	r2, [r7, #12]
 80271c8:	697b      	ldr	r3, [r7, #20]
 80271ca:	18d4      	adds	r4, r2, r3
 80271cc:	f7ff fd54 	bl	8026c78 <spi_flash_read_byte>
 80271d0:	4603      	mov	r3, r0
 80271d2:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 80271d4:	697b      	ldr	r3, [r7, #20]
 80271d6:	3301      	adds	r3, #1
 80271d8:	617b      	str	r3, [r7, #20]
 80271da:	697a      	ldr	r2, [r7, #20]
 80271dc:	683b      	ldr	r3, [r7, #0]
 80271de:	429a      	cmp	r2, r3
 80271e0:	d3f1      	bcc.n	80271c6 <spi_flash_read_spare_data+0xd6>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 80271e2:	f7ff fc73 	bl	8026acc <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 80271e6:	693b      	ldr	r3, [r7, #16]
}
 80271e8:	4618      	mov	r0, r3
 80271ea:	371c      	adds	r7, #28
 80271ec:	46bd      	mov	sp, r7
 80271ee:	bd90      	pop	{r4, r7, pc}
 80271f0:	200057f0 	.word	0x200057f0
 80271f4:	200057e0 	.word	0x200057e0

080271f8 <spi_flash_erase_block>:

// 擦除块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 80271f8:	b580      	push	{r7, lr}
 80271fa:	b082      	sub	sp, #8
 80271fc:	af00      	add	r7, sp, #0
 80271fe:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8027200:	6878      	ldr	r0, [r7, #4]
 8027202:	f7ff fdfb 	bl	8026dfc <spi_flash_select_die>

    spi_flash_write_enable();  // 使能写入
 8027206:	f7ff fe59 	bl	8026ebc <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 802720a:	f7ff fc53 	bl	8026ab4 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_BLOCK_ERASE);  // 发送块擦除命令
 802720e:	20d8      	movs	r0, #216	; 0xd8
 8027210:	f7ff fd1e 	bl	8026c50 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_ERASE;  // 记录上一次操作为擦除
 8027214:	4b0e      	ldr	r3, [pc, #56]	; (8027250 <spi_flash_erase_block+0x58>)
 8027216:	2201      	movs	r2, #1
 8027218:	601a      	str	r2, [r3, #0]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 802721a:	687b      	ldr	r3, [r7, #4]
 802721c:	0c1b      	lsrs	r3, r3, #16
 802721e:	b2db      	uxtb	r3, r3
 8027220:	4618      	mov	r0, r3
 8027222:	f7ff fd15 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8027226:	687b      	ldr	r3, [r7, #4]
 8027228:	0a1b      	lsrs	r3, r3, #8
 802722a:	b2db      	uxtb	r3, r3
 802722c:	4618      	mov	r0, r3
 802722e:	f7ff fd0f 	bl	8026c50 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8027232:	687b      	ldr	r3, [r7, #4]
 8027234:	b2db      	uxtb	r3, r3
 8027236:	4618      	mov	r0, r3
 8027238:	f7ff fd0a 	bl	8026c50 <spi_flash_send_byte>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 802723c:	f7ff fc46 	bl	8026acc <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8027240:	f7ff fd58 	bl	8026cf4 <spi_flash_read_status>
 8027244:	4603      	mov	r3, r0
}
 8027246:	4618      	mov	r0, r3
 8027248:	3708      	adds	r7, #8
 802724a:	46bd      	mov	sp, r7
 802724c:	bd80      	pop	{r7, pc}
 802724e:	bf00      	nop
 8027250:	200057f0 	.word	0x200057f0

08027254 <spi_flash_is_bb_supported>:

// 检查是否支持坏块检测
static inline bool spi_flash_is_bb_supported()
{
 8027254:	b480      	push	{r7}
 8027256:	af00      	add	r7, sp, #0
    return true;
 8027258:	2301      	movs	r3, #1
}
 802725a:	4618      	mov	r0, r3
 802725c:	46bd      	mov	sp, r7
 802725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027262:	4770      	bx	lr

08027264 <spi_flash_gpio_uninit>:
	  }
}

// 取消初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_uninit(SPI_HandleTypeDef* spiHandle)
{
 8027264:	b580      	push	{r7, lr}
 8027266:	b082      	sub	sp, #8
 8027268:	af00      	add	r7, sp, #0
 802726a:	6078      	str	r0, [r7, #4]
	  if(spiHandle->Instance==SPI1)
 802726c:	687b      	ldr	r3, [r7, #4]
 802726e:	681b      	ldr	r3, [r3, #0]
 8027270:	4a0b      	ldr	r2, [pc, #44]	; (80272a0 <spi_flash_gpio_uninit+0x3c>)
 8027272:	4293      	cmp	r3, r2
 8027274:	d110      	bne.n	8027298 <spi_flash_gpio_uninit+0x34>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 8027276:	4b0b      	ldr	r3, [pc, #44]	; (80272a4 <spi_flash_gpio_uninit+0x40>)
 8027278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802727a:	4a0a      	ldr	r2, [pc, #40]	; (80272a4 <spi_flash_gpio_uninit+0x40>)
 802727c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027280:	6453      	str	r3, [r2, #68]	; 0x44
	    /**SPI1 GPIO Configuration
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    PB3     ------> SPI1_SCK
	    */
	    HAL_GPIO_DeInit(GPIOA, SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8027282:	21c0      	movs	r1, #192	; 0xc0
 8027284:	4808      	ldr	r0, [pc, #32]	; (80272a8 <spi_flash_gpio_uninit+0x44>)
 8027286:	f001 fc73 	bl	8028b70 <HAL_GPIO_DeInit>

	    HAL_GPIO_DeInit(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin);
 802728a:	2108      	movs	r1, #8
 802728c:	4807      	ldr	r0, [pc, #28]	; (80272ac <spi_flash_gpio_uninit+0x48>)
 802728e:	f001 fc6f 	bl	8028b70 <HAL_GPIO_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8027292:	2023      	movs	r0, #35	; 0x23
 8027294:	f000 fe97 	bl	8027fc6 <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 8027298:	bf00      	nop
 802729a:	3708      	adds	r7, #8
 802729c:	46bd      	mov	sp, r7
 802729e:	bd80      	pop	{r7, pc}
 80272a0:	40013000 	.word	0x40013000
 80272a4:	40023800 	.word	0x40023800
 80272a8:	40020000 	.word	0x40020000
 80272ac:	40020400 	.word	0x40020400

080272b0 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 80272b0:	b580      	push	{r7, lr}
 80272b2:	af00      	add	r7, sp, #0
   	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 80272b4:	2200      	movs	r2, #0
 80272b6:	2104      	movs	r1, #4
 80272b8:	4802      	ldr	r0, [pc, #8]	; (80272c4 <spi_flash_select_chip+0x14>)
 80272ba:	f001 fd55 	bl	8028d68 <HAL_GPIO_WritePin>
}
 80272be:	bf00      	nop
 80272c0:	bd80      	pop	{r7, pc}
 80272c2:	bf00      	nop
 80272c4:	40021000 	.word	0x40021000

080272c8 <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 80272c8:	b580      	push	{r7, lr}
 80272ca:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 80272cc:	2201      	movs	r2, #1
 80272ce:	2104      	movs	r1, #4
 80272d0:	4802      	ldr	r0, [pc, #8]	; (80272dc <spi_flash_deselect_chip+0x14>)
 80272d2:	f001 fd49 	bl	8028d68 <HAL_GPIO_WritePin>
}
 80272d6:	bf00      	nop
 80272d8:	bd80      	pop	{r7, pc}
 80272da:	bf00      	nop
 80272dc:	40021000 	.word	0x40021000

080272e0 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 80272e0:	b480      	push	{r7}
 80272e2:	b085      	sub	sp, #20
 80272e4:	af00      	add	r7, sp, #0
 80272e6:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 80272e8:	4b1f      	ldr	r3, [pc, #124]	; (8027368 <spi_flash_get_baud_rate_prescaler+0x88>)
 80272ea:	681b      	ldr	r3, [r3, #0]
 80272ec:	4a1f      	ldr	r2, [pc, #124]	; (802736c <spi_flash_get_baud_rate_prescaler+0x8c>)
 80272ee:	fba2 2303 	umull	r2, r3, r2, r3
 80272f2:	099b      	lsrs	r3, r3, #6
 80272f4:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 80272f6:	68fb      	ldr	r3, [r7, #12]
 80272f8:	085b      	lsrs	r3, r3, #1
 80272fa:	687a      	ldr	r2, [r7, #4]
 80272fc:	429a      	cmp	r2, r3
 80272fe:	d301      	bcc.n	8027304 <spi_flash_get_baud_rate_prescaler+0x24>
    	return SPI_BAUDRATEPRESCALER_2;
 8027300:	2300      	movs	r3, #0
 8027302:	e02a      	b.n	802735a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8027304:	68fb      	ldr	r3, [r7, #12]
 8027306:	089b      	lsrs	r3, r3, #2
 8027308:	687a      	ldr	r2, [r7, #4]
 802730a:	429a      	cmp	r2, r3
 802730c:	d301      	bcc.n	8027312 <spi_flash_get_baud_rate_prescaler+0x32>
    	return SPI_BAUDRATEPRESCALER_4;
 802730e:	2308      	movs	r3, #8
 8027310:	e023      	b.n	802735a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 8027312:	68fb      	ldr	r3, [r7, #12]
 8027314:	08db      	lsrs	r3, r3, #3
 8027316:	687a      	ldr	r2, [r7, #4]
 8027318:	429a      	cmp	r2, r3
 802731a:	d301      	bcc.n	8027320 <spi_flash_get_baud_rate_prescaler+0x40>
    	return SPI_BAUDRATEPRESCALER_8;
 802731c:	2310      	movs	r3, #16
 802731e:	e01c      	b.n	802735a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8027320:	68fb      	ldr	r3, [r7, #12]
 8027322:	091b      	lsrs	r3, r3, #4
 8027324:	687a      	ldr	r2, [r7, #4]
 8027326:	429a      	cmp	r2, r3
 8027328:	d301      	bcc.n	802732e <spi_flash_get_baud_rate_prescaler+0x4e>
    	return SPI_BAUDRATEPRESCALER_16;
 802732a:	2318      	movs	r3, #24
 802732c:	e015      	b.n	802735a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 802732e:	68fb      	ldr	r3, [r7, #12]
 8027330:	095b      	lsrs	r3, r3, #5
 8027332:	687a      	ldr	r2, [r7, #4]
 8027334:	429a      	cmp	r2, r3
 8027336:	d301      	bcc.n	802733c <spi_flash_get_baud_rate_prescaler+0x5c>
    	return SPI_BAUDRATEPRESCALER_32;
 8027338:	2320      	movs	r3, #32
 802733a:	e00e      	b.n	802735a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 802733c:	68fb      	ldr	r3, [r7, #12]
 802733e:	099b      	lsrs	r3, r3, #6
 8027340:	687a      	ldr	r2, [r7, #4]
 8027342:	429a      	cmp	r2, r3
 8027344:	d301      	bcc.n	802734a <spi_flash_get_baud_rate_prescaler+0x6a>
    	return SPI_BAUDRATEPRESCALER_64;
 8027346:	2328      	movs	r3, #40	; 0x28
 8027348:	e007      	b.n	802735a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 802734a:	68fb      	ldr	r3, [r7, #12]
 802734c:	09db      	lsrs	r3, r3, #7
 802734e:	687a      	ldr	r2, [r7, #4]
 8027350:	429a      	cmp	r2, r3
 8027352:	d301      	bcc.n	8027358 <spi_flash_get_baud_rate_prescaler+0x78>
    	return SPI_BAUDRATEPRESCALER_128;
 8027354:	2330      	movs	r3, #48	; 0x30
 8027356:	e000      	b.n	802735a <spi_flash_get_baud_rate_prescaler+0x7a>
    else
    	return SPI_BAUDRATEPRESCALER_256;
 8027358:	2338      	movs	r3, #56	; 0x38
}
 802735a:	4618      	mov	r0, r3
 802735c:	3714      	adds	r7, #20
 802735e:	46bd      	mov	sp, r7
 8027360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027364:	4770      	bx	lr
 8027366:	bf00      	nop
 8027368:	20000138 	.word	0x20000138
 802736c:	10624dd3 	.word	0x10624dd3

08027370 <spi_flash_init>:

// 初始化SPI Flash
static int spi_flash_init(void *conf, uint32_t conf_size)
{
 8027370:	b590      	push	{r4, r7, lr}
 8027372:	b08f      	sub	sp, #60	; 0x3c
 8027374:	af00      	add	r7, sp, #0
 8027376:	6078      	str	r0, [r7, #4]
 8027378:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef Init;

	if (conf_size < sizeof(spi_conf_t))
 802737a:	683b      	ldr	r3, [r7, #0]
 802737c:	2b0c      	cmp	r3, #12
 802737e:	d802      	bhi.n	8027386 <spi_flash_init+0x16>
        return -1;
 8027380:	f04f 33ff 	mov.w	r3, #4294967295
 8027384:	e043      	b.n	802740e <spi_flash_init+0x9e>

    spi_conf = *(spi_conf_t *)conf;
 8027386:	4b24      	ldr	r3, [pc, #144]	; (8027418 <spi_flash_init+0xa8>)
 8027388:	687a      	ldr	r2, [r7, #4]
 802738a:	4614      	mov	r4, r2
 802738c:	6820      	ldr	r0, [r4, #0]
 802738e:	6861      	ldr	r1, [r4, #4]
 8027390:	68a2      	ldr	r2, [r4, #8]
 8027392:	c307      	stmia	r3!, {r0, r1, r2}
 8027394:	7b22      	ldrb	r2, [r4, #12]
 8027396:	701a      	strb	r2, [r3, #0]

//    spi_flash_gpio_init(&hspi1);

    spi_flash_deselect_chip();
 8027398:	f7ff ff96 	bl	80272c8 <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Instance = SPI1;
 802739c:	4b1f      	ldr	r3, [pc, #124]	; (802741c <spi_flash_init+0xac>)
 802739e:	4a20      	ldr	r2, [pc, #128]	; (8027420 <spi_flash_init+0xb0>)
 80273a0:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80273a2:	4b1e      	ldr	r3, [pc, #120]	; (802741c <spi_flash_init+0xac>)
 80273a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80273a8:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80273aa:	4b1c      	ldr	r3, [pc, #112]	; (802741c <spi_flash_init+0xac>)
 80273ac:	2200      	movs	r2, #0
 80273ae:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80273b0:	4b1a      	ldr	r3, [pc, #104]	; (802741c <spi_flash_init+0xac>)
 80273b2:	2200      	movs	r2, #0
 80273b4:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80273b6:	4b19      	ldr	r3, [pc, #100]	; (802741c <spi_flash_init+0xac>)
 80273b8:	2202      	movs	r2, #2
 80273ba:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80273bc:	4b17      	ldr	r3, [pc, #92]	; (802741c <spi_flash_init+0xac>)
 80273be:	2201      	movs	r2, #1
 80273c0:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80273c2:	4b16      	ldr	r3, [pc, #88]	; (802741c <spi_flash_init+0xac>)
 80273c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80273c8:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq);
 80273ca:	4b13      	ldr	r3, [pc, #76]	; (8027418 <spi_flash_init+0xa8>)
 80273cc:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80273d0:	4618      	mov	r0, r3
 80273d2:	f7ff ff85 	bl	80272e0 <spi_flash_get_baud_rate_prescaler>
 80273d6:	4603      	mov	r3, r0
 80273d8:	461a      	mov	r2, r3
 80273da:	4b10      	ldr	r3, [pc, #64]	; (802741c <spi_flash_init+0xac>)
 80273dc:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80273de:	4b0f      	ldr	r3, [pc, #60]	; (802741c <spi_flash_init+0xac>)
 80273e0:	2200      	movs	r2, #0
 80273e2:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80273e4:	4b0d      	ldr	r3, [pc, #52]	; (802741c <spi_flash_init+0xac>)
 80273e6:	2200      	movs	r2, #0
 80273e8:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80273ea:	4b0c      	ldr	r3, [pc, #48]	; (802741c <spi_flash_init+0xac>)
 80273ec:	2200      	movs	r2, #0
 80273ee:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 80273f0:	4b0a      	ldr	r3, [pc, #40]	; (802741c <spi_flash_init+0xac>)
 80273f2:	220a      	movs	r2, #10
 80273f4:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(&hspi1)  ;
 80273f6:	4809      	ldr	r0, [pc, #36]	; (802741c <spi_flash_init+0xac>)
 80273f8:	f004 f829 	bl	802b44e <HAL_SPI_Init>

    /* Enable SPI */
    __HAL_SPI_ENABLE(&hspi1);
 80273fc:	4b07      	ldr	r3, [pc, #28]	; (802741c <spi_flash_init+0xac>)
 80273fe:	681b      	ldr	r3, [r3, #0]
 8027400:	681a      	ldr	r2, [r3, #0]
 8027402:	4b06      	ldr	r3, [pc, #24]	; (802741c <spi_flash_init+0xac>)
 8027404:	681b      	ldr	r3, [r3, #0]
 8027406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802740a:	601a      	str	r2, [r3, #0]

    return 0;
 802740c:	2300      	movs	r3, #0
}
 802740e:	4618      	mov	r0, r3
 8027410:	373c      	adds	r7, #60	; 0x3c
 8027412:	46bd      	mov	sp, r7
 8027414:	bd90      	pop	{r4, r7, pc}
 8027416:	bf00      	nop
 8027418:	200057f8 	.word	0x200057f8
 802741c:	20005788 	.word	0x20005788
 8027420:	40013000 	.word	0x40013000

08027424 <spi_flash_uninit>:

// 取消初始化SPI Flash
static void spi_flash_uninit()
{
 8027424:	b580      	push	{r7, lr}
 8027426:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit(&hspi1);
 8027428:	4806      	ldr	r0, [pc, #24]	; (8027444 <spi_flash_uninit+0x20>)
 802742a:	f7ff ff1b 	bl	8027264 <spi_flash_gpio_uninit>

    /* 禁用SPI */
    __HAL_SPI_DISABLE(&hspi1);
 802742e:	4b05      	ldr	r3, [pc, #20]	; (8027444 <spi_flash_uninit+0x20>)
 8027430:	681b      	ldr	r3, [r3, #0]
 8027432:	681a      	ldr	r2, [r3, #0]
 8027434:	4b03      	ldr	r3, [pc, #12]	; (8027444 <spi_flash_uninit+0x20>)
 8027436:	681b      	ldr	r3, [r3, #0]
 8027438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802743c:	601a      	str	r2, [r3, #0]
}
 802743e:	bf00      	nop
 8027440:	bd80      	pop	{r7, pc}
 8027442:	bf00      	nop
 8027444:	20005788 	.word	0x20005788

08027448 <spi_flash_send_byte>:

// 发送一个字节到SPI Flash并返回接收到的字节
static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8027448:	b580      	push	{r7, lr}
 802744a:	b084      	sub	sp, #16
 802744c:	af00      	add	r7, sp, #0
 802744e:	4603      	mov	r3, r0
 8027450:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_byte;

    HAL_SPI_TransmitReceive_IT(&hspi1,&byte,&rx_byte,1);
 8027452:	f107 020f 	add.w	r2, r7, #15
 8027456:	1df9      	adds	r1, r7, #7
 8027458:	2301      	movs	r3, #1
 802745a:	4804      	ldr	r0, [pc, #16]	; (802746c <spi_flash_send_byte+0x24>)
 802745c:	f004 f880 	bl	802b560 <HAL_SPI_TransmitReceive_IT>

 	return rx_byte;
 8027460:	7bfb      	ldrb	r3, [r7, #15]
}
 8027462:	4618      	mov	r0, r3
 8027464:	3710      	adds	r7, #16
 8027466:	46bd      	mov	sp, r7
 8027468:	bd80      	pop	{r7, pc}
 802746a:	bf00      	nop
 802746c:	20005788 	.word	0x20005788

08027470 <spi_flash_read_byte>:

static inline uint8_t spi_flash_read_byte()
{
 8027470:	b580      	push	{r7, lr}
 8027472:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8027474:	20a5      	movs	r0, #165	; 0xa5
 8027476:	f7ff ffe7 	bl	8027448 <spi_flash_send_byte>
 802747a:	4603      	mov	r3, r0
}
 802747c:	4618      	mov	r0, r3
 802747e:	bd80      	pop	{r7, pc}

08027480 <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 8027480:	b580      	push	{r7, lr}
 8027482:	b082      	sub	sp, #8
 8027484:	af00      	add	r7, sp, #0
    uint8_t status;
    uint32_t flash_status = FLASH_READY;
 8027486:	2300      	movs	r3, #0
 8027488:	607b      	str	r3, [r7, #4]

    spi_flash_select_chip();
 802748a:	f7ff ff11 	bl	80272b0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.status_cmd);
 802748e:	4b16      	ldr	r3, [pc, #88]	; (80274e8 <spi_flash_read_status+0x68>)
 8027490:	799b      	ldrb	r3, [r3, #6]
 8027492:	4618      	mov	r0, r3
 8027494:	f7ff ffd8 	bl	8027448 <spi_flash_send_byte>

    status = spi_flash_read_byte();
 8027498:	f7ff ffea 	bl	8027470 <spi_flash_read_byte>
 802749c:	4603      	mov	r3, r0
 802749e:	70fb      	strb	r3, [r7, #3]

    if (spi_conf.busy_state == 1 && (status & (1 << spi_conf.busy_bit)))
 80274a0:	4b11      	ldr	r3, [pc, #68]	; (80274e8 <spi_flash_read_status+0x68>)
 80274a2:	7a1b      	ldrb	r3, [r3, #8]
 80274a4:	2b01      	cmp	r3, #1
 80274a6:	d10a      	bne.n	80274be <spi_flash_read_status+0x3e>
 80274a8:	78fb      	ldrb	r3, [r7, #3]
 80274aa:	4a0f      	ldr	r2, [pc, #60]	; (80274e8 <spi_flash_read_status+0x68>)
 80274ac:	79d2      	ldrb	r2, [r2, #7]
 80274ae:	4113      	asrs	r3, r2
 80274b0:	f003 0301 	and.w	r3, r3, #1
 80274b4:	2b00      	cmp	r3, #0
 80274b6:	d002      	beq.n	80274be <spi_flash_read_status+0x3e>
        flash_status = FLASH_BUSY;
 80274b8:	2301      	movs	r3, #1
 80274ba:	607b      	str	r3, [r7, #4]
 80274bc:	e00d      	b.n	80274da <spi_flash_read_status+0x5a>
    else if (spi_conf.busy_state == 0 && !(status & (1 << spi_conf.busy_bit)))
 80274be:	4b0a      	ldr	r3, [pc, #40]	; (80274e8 <spi_flash_read_status+0x68>)
 80274c0:	7a1b      	ldrb	r3, [r3, #8]
 80274c2:	2b00      	cmp	r3, #0
 80274c4:	d109      	bne.n	80274da <spi_flash_read_status+0x5a>
 80274c6:	78fb      	ldrb	r3, [r7, #3]
 80274c8:	4a07      	ldr	r2, [pc, #28]	; (80274e8 <spi_flash_read_status+0x68>)
 80274ca:	79d2      	ldrb	r2, [r2, #7]
 80274cc:	4113      	asrs	r3, r2
 80274ce:	f003 0301 	and.w	r3, r3, #1
 80274d2:	2b00      	cmp	r3, #0
 80274d4:	d101      	bne.n	80274da <spi_flash_read_status+0x5a>
        flash_status = FLASH_BUSY;
 80274d6:	2301      	movs	r3, #1
 80274d8:	607b      	str	r3, [r7, #4]

    spi_flash_deselect_chip();
 80274da:	f7ff fef5 	bl	80272c8 <spi_flash_deselect_chip>

    return flash_status;
 80274de:	687b      	ldr	r3, [r7, #4]
}
 80274e0:	4618      	mov	r0, r3
 80274e2:	3708      	adds	r7, #8
 80274e4:	46bd      	mov	sp, r7
 80274e6:	bd80      	pop	{r7, pc}
 80274e8:	200057f8 	.word	0x200057f8

080274ec <spi_flash_get_status>:

static uint32_t spi_flash_get_status()
{
 80274ec:	b580      	push	{r7, lr}
 80274ee:	b082      	sub	sp, #8
 80274f0:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 80274f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80274f6:	603b      	str	r3, [r7, #0]

    status = spi_flash_read_status();
 80274f8:	f7ff ffc2 	bl	8027480 <spi_flash_read_status>
 80274fc:	6078      	str	r0, [r7, #4]

    /* Wait for an operation to complete or a TIMEOUT to occur */
    while (status == FLASH_BUSY && timeout)
 80274fe:	e005      	b.n	802750c <spi_flash_get_status+0x20>
    {
        status = spi_flash_read_status();
 8027500:	f7ff ffbe 	bl	8027480 <spi_flash_read_status>
 8027504:	6078      	str	r0, [r7, #4]
        timeout --;
 8027506:	683b      	ldr	r3, [r7, #0]
 8027508:	3b01      	subs	r3, #1
 802750a:	603b      	str	r3, [r7, #0]
    while (status == FLASH_BUSY && timeout)
 802750c:	687b      	ldr	r3, [r7, #4]
 802750e:	2b01      	cmp	r3, #1
 8027510:	d102      	bne.n	8027518 <spi_flash_get_status+0x2c>
 8027512:	683b      	ldr	r3, [r7, #0]
 8027514:	2b00      	cmp	r3, #0
 8027516:	d1f3      	bne.n	8027500 <spi_flash_get_status+0x14>
    }

    if (!timeout)
 8027518:	683b      	ldr	r3, [r7, #0]
 802751a:	2b00      	cmp	r3, #0
 802751c:	d101      	bne.n	8027522 <spi_flash_get_status+0x36>
        status = FLASH_TIMEOUT;
 802751e:	2302      	movs	r3, #2
 8027520:	607b      	str	r3, [r7, #4]

    return status;
 8027522:	687b      	ldr	r3, [r7, #4]
}
 8027524:	4618      	mov	r0, r3
 8027526:	3708      	adds	r7, #8
 8027528:	46bd      	mov	sp, r7
 802752a:	bd80      	pop	{r7, pc}

0802752c <spi_flash_read_id>:

static void spi_flash_read_id(chip_id_t *chip_id)
{
 802752c:	b580      	push	{r7, lr}
 802752e:	b082      	sub	sp, #8
 8027530:	af00      	add	r7, sp, #0
 8027532:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();
 8027534:	f7ff febc 	bl	80272b0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_id_cmd);
 8027538:	4b17      	ldr	r3, [pc, #92]	; (8027598 <spi_flash_read_id+0x6c>)
 802753a:	789b      	ldrb	r3, [r3, #2]
 802753c:	4618      	mov	r0, r3
 802753e:	f7ff ff83 	bl	8027448 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();
 8027542:	f7ff ff95 	bl	8027470 <spi_flash_read_byte>
 8027546:	4603      	mov	r3, r0
 8027548:	461a      	mov	r2, r3
 802754a:	687b      	ldr	r3, [r7, #4]
 802754c:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();
 802754e:	f7ff ff8f 	bl	8027470 <spi_flash_read_byte>
 8027552:	4603      	mov	r3, r0
 8027554:	461a      	mov	r2, r3
 8027556:	687b      	ldr	r3, [r7, #4]
 8027558:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();
 802755a:	f7ff ff89 	bl	8027470 <spi_flash_read_byte>
 802755e:	4603      	mov	r3, r0
 8027560:	461a      	mov	r2, r3
 8027562:	687b      	ldr	r3, [r7, #4]
 8027564:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();
 8027566:	f7ff ff83 	bl	8027470 <spi_flash_read_byte>
 802756a:	4603      	mov	r3, r0
 802756c:	461a      	mov	r2, r3
 802756e:	687b      	ldr	r3, [r7, #4]
 8027570:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();
 8027572:	f7ff ff7d 	bl	8027470 <spi_flash_read_byte>
 8027576:	4603      	mov	r3, r0
 8027578:	461a      	mov	r2, r3
 802757a:	687b      	ldr	r3, [r7, #4]
 802757c:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();
 802757e:	f7ff ff77 	bl	8027470 <spi_flash_read_byte>
 8027582:	4603      	mov	r3, r0
 8027584:	461a      	mov	r2, r3
 8027586:	687b      	ldr	r3, [r7, #4]
 8027588:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();
 802758a:	f7ff fe9d 	bl	80272c8 <spi_flash_deselect_chip>
}
 802758e:	bf00      	nop
 8027590:	3708      	adds	r7, #8
 8027592:	46bd      	mov	sp, r7
 8027594:	bd80      	pop	{r7, pc}
 8027596:	bf00      	nop
 8027598:	200057f8 	.word	0x200057f8

0802759c <spi_flash_write_enable>:

static void spi_flash_write_enable()
{
 802759c:	b580      	push	{r7, lr}
 802759e:	af00      	add	r7, sp, #0
    if (spi_conf.write_en_cmd == UNDEFINED_CMD)
 80275a0:	4b07      	ldr	r3, [pc, #28]	; (80275c0 <spi_flash_write_enable+0x24>)
 80275a2:	791b      	ldrb	r3, [r3, #4]
 80275a4:	2bff      	cmp	r3, #255	; 0xff
 80275a6:	d009      	beq.n	80275bc <spi_flash_write_enable+0x20>
        return;

    spi_flash_select_chip();
 80275a8:	f7ff fe82 	bl	80272b0 <spi_flash_select_chip>
    spi_flash_send_byte(spi_conf.write_en_cmd);
 80275ac:	4b04      	ldr	r3, [pc, #16]	; (80275c0 <spi_flash_write_enable+0x24>)
 80275ae:	791b      	ldrb	r3, [r3, #4]
 80275b0:	4618      	mov	r0, r3
 80275b2:	f7ff ff49 	bl	8027448 <spi_flash_send_byte>
    spi_flash_deselect_chip();
 80275b6:	f7ff fe87 	bl	80272c8 <spi_flash_deselect_chip>
 80275ba:	e000      	b.n	80275be <spi_flash_write_enable+0x22>
        return;
 80275bc:	bf00      	nop
}
 80275be:	bd80      	pop	{r7, pc}
 80275c0:	200057f8 	.word	0x200057f8

080275c4 <spi_flash_write_page_async>:

static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 80275c4:	b580      	push	{r7, lr}
 80275c6:	b086      	sub	sp, #24
 80275c8:	af00      	add	r7, sp, #0
 80275ca:	60f8      	str	r0, [r7, #12]
 80275cc:	60b9      	str	r1, [r7, #8]
 80275ce:	607a      	str	r2, [r7, #4]
    uint32_t i;

    spi_flash_write_enable();
 80275d0:	f7ff ffe4 	bl	802759c <spi_flash_write_enable>

    spi_flash_select_chip();
 80275d4:	f7ff fe6c 	bl	80272b0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.write_cmd);
 80275d8:	4b19      	ldr	r3, [pc, #100]	; (8027640 <spi_flash_write_page_async+0x7c>)
 80275da:	78db      	ldrb	r3, [r3, #3]
 80275dc:	4618      	mov	r0, r3
 80275de:	f7ff ff33 	bl	8027448 <spi_flash_send_byte>

    page = page << spi_conf.page_offset;
 80275e2:	4b17      	ldr	r3, [pc, #92]	; (8027640 <spi_flash_write_page_async+0x7c>)
 80275e4:	781b      	ldrb	r3, [r3, #0]
 80275e6:	461a      	mov	r2, r3
 80275e8:	68bb      	ldr	r3, [r7, #8]
 80275ea:	4093      	lsls	r3, r2
 80275ec:	60bb      	str	r3, [r7, #8]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));
 80275ee:	68bb      	ldr	r3, [r7, #8]
 80275f0:	0c1b      	lsrs	r3, r3, #16
 80275f2:	b2db      	uxtb	r3, r3
 80275f4:	4618      	mov	r0, r3
 80275f6:	f7ff ff27 	bl	8027448 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));
 80275fa:	68bb      	ldr	r3, [r7, #8]
 80275fc:	0a1b      	lsrs	r3, r3, #8
 80275fe:	b2db      	uxtb	r3, r3
 8027600:	4618      	mov	r0, r3
 8027602:	f7ff ff21 	bl	8027448 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));
 8027606:	68bb      	ldr	r3, [r7, #8]
 8027608:	b2db      	uxtb	r3, r3
 802760a:	4618      	mov	r0, r3
 802760c:	f7ff ff1c 	bl	8027448 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 8027610:	2300      	movs	r3, #0
 8027612:	617b      	str	r3, [r7, #20]
 8027614:	e009      	b.n	802762a <spi_flash_write_page_async+0x66>
        spi_flash_send_byte(buf[i]);
 8027616:	68fa      	ldr	r2, [r7, #12]
 8027618:	697b      	ldr	r3, [r7, #20]
 802761a:	4413      	add	r3, r2
 802761c:	781b      	ldrb	r3, [r3, #0]
 802761e:	4618      	mov	r0, r3
 8027620:	f7ff ff12 	bl	8027448 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8027624:	697b      	ldr	r3, [r7, #20]
 8027626:	3301      	adds	r3, #1
 8027628:	617b      	str	r3, [r7, #20]
 802762a:	697a      	ldr	r2, [r7, #20]
 802762c:	687b      	ldr	r3, [r7, #4]
 802762e:	429a      	cmp	r2, r3
 8027630:	d3f1      	bcc.n	8027616 <spi_flash_write_page_async+0x52>

    spi_flash_deselect_chip();
 8027632:	f7ff fe49 	bl	80272c8 <spi_flash_deselect_chip>
}
 8027636:	bf00      	nop
 8027638:	3718      	adds	r7, #24
 802763a:	46bd      	mov	sp, r7
 802763c:	bd80      	pop	{r7, pc}
 802763e:	bf00      	nop
 8027640:	200057f8 	.word	0x200057f8

08027644 <spi_flash_read_data>:

static uint32_t spi_flash_read_data(uint8_t *buf, uint32_t page,
    uint32_t page_offset, uint32_t data_size)
{
 8027644:	b590      	push	{r4, r7, lr}
 8027646:	b087      	sub	sp, #28
 8027648:	af00      	add	r7, sp, #0
 802764a:	60f8      	str	r0, [r7, #12]
 802764c:	60b9      	str	r1, [r7, #8]
 802764e:	607a      	str	r2, [r7, #4]
 8027650:	603b      	str	r3, [r7, #0]
    uint32_t i, addr = (page << spi_conf.page_offset) + page_offset;
 8027652:	4b1d      	ldr	r3, [pc, #116]	; (80276c8 <spi_flash_read_data+0x84>)
 8027654:	781b      	ldrb	r3, [r3, #0]
 8027656:	461a      	mov	r2, r3
 8027658:	68bb      	ldr	r3, [r7, #8]
 802765a:	4093      	lsls	r3, r2
 802765c:	687a      	ldr	r2, [r7, #4]
 802765e:	4413      	add	r3, r2
 8027660:	613b      	str	r3, [r7, #16]

    spi_flash_select_chip();
 8027662:	f7ff fe25 	bl	80272b0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_cmd);
 8027666:	4b18      	ldr	r3, [pc, #96]	; (80276c8 <spi_flash_read_data+0x84>)
 8027668:	785b      	ldrb	r3, [r3, #1]
 802766a:	4618      	mov	r0, r3
 802766c:	f7ff feec 	bl	8027448 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8027670:	693b      	ldr	r3, [r7, #16]
 8027672:	0c1b      	lsrs	r3, r3, #16
 8027674:	b2db      	uxtb	r3, r3
 8027676:	4618      	mov	r0, r3
 8027678:	f7ff fee6 	bl	8027448 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 802767c:	693b      	ldr	r3, [r7, #16]
 802767e:	0a1b      	lsrs	r3, r3, #8
 8027680:	b2db      	uxtb	r3, r3
 8027682:	4618      	mov	r0, r3
 8027684:	f7ff fee0 	bl	8027448 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 8027688:	693b      	ldr	r3, [r7, #16]
 802768a:	b2db      	uxtb	r3, r3
 802768c:	4618      	mov	r0, r3
 802768e:	f7ff fedb 	bl	8027448 <spi_flash_send_byte>

    /* AT45DB requires write of dummy byte after address */
    spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8027692:	20a5      	movs	r0, #165	; 0xa5
 8027694:	f7ff fed8 	bl	8027448 <spi_flash_send_byte>

    for (i = 0; i < data_size; i++)
 8027698:	2300      	movs	r3, #0
 802769a:	617b      	str	r3, [r7, #20]
 802769c:	e009      	b.n	80276b2 <spi_flash_read_data+0x6e>
        buf[i] = spi_flash_read_byte();
 802769e:	68fa      	ldr	r2, [r7, #12]
 80276a0:	697b      	ldr	r3, [r7, #20]
 80276a2:	18d4      	adds	r4, r2, r3
 80276a4:	f7ff fee4 	bl	8027470 <spi_flash_read_byte>
 80276a8:	4603      	mov	r3, r0
 80276aa:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < data_size; i++)
 80276ac:	697b      	ldr	r3, [r7, #20]
 80276ae:	3301      	adds	r3, #1
 80276b0:	617b      	str	r3, [r7, #20]
 80276b2:	697a      	ldr	r2, [r7, #20]
 80276b4:	683b      	ldr	r3, [r7, #0]
 80276b6:	429a      	cmp	r2, r3
 80276b8:	d3f1      	bcc.n	802769e <spi_flash_read_data+0x5a>

    spi_flash_deselect_chip();
 80276ba:	f7ff fe05 	bl	80272c8 <spi_flash_deselect_chip>

    return FLASH_READY;
 80276be:	2300      	movs	r3, #0
}
 80276c0:	4618      	mov	r0, r3
 80276c2:	371c      	adds	r7, #28
 80276c4:	46bd      	mov	sp, r7
 80276c6:	bd90      	pop	{r4, r7, pc}
 80276c8:	200057f8 	.word	0x200057f8

080276cc <spi_flash_read_page>:

static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page,
    uint32_t page_size)
{
 80276cc:	b580      	push	{r7, lr}
 80276ce:	b084      	sub	sp, #16
 80276d0:	af00      	add	r7, sp, #0
 80276d2:	60f8      	str	r0, [r7, #12]
 80276d4:	60b9      	str	r1, [r7, #8]
 80276d6:	607a      	str	r2, [r7, #4]
    return spi_flash_read_data(buf, page, 0, page_size);
 80276d8:	687b      	ldr	r3, [r7, #4]
 80276da:	2200      	movs	r2, #0
 80276dc:	68b9      	ldr	r1, [r7, #8]
 80276de:	68f8      	ldr	r0, [r7, #12]
 80276e0:	f7ff ffb0 	bl	8027644 <spi_flash_read_data>
 80276e4:	4603      	mov	r3, r0
}
 80276e6:	4618      	mov	r0, r3
 80276e8:	3710      	adds	r7, #16
 80276ea:	46bd      	mov	sp, r7
 80276ec:	bd80      	pop	{r7, pc}

080276ee <spi_flash_read_spare_data>:

static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page,
    uint32_t offset, uint32_t data_size)
{
 80276ee:	b480      	push	{r7}
 80276f0:	b085      	sub	sp, #20
 80276f2:	af00      	add	r7, sp, #0
 80276f4:	60f8      	str	r0, [r7, #12]
 80276f6:	60b9      	str	r1, [r7, #8]
 80276f8:	607a      	str	r2, [r7, #4]
 80276fa:	603b      	str	r3, [r7, #0]
    return FLASH_STATUS_INVALID_CMD;
 80276fc:	2304      	movs	r3, #4
}
 80276fe:	4618      	mov	r0, r3
 8027700:	3714      	adds	r7, #20
 8027702:	46bd      	mov	sp, r7
 8027704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027708:	4770      	bx	lr
	...

0802770c <spi_flash_erase_block>:

static uint32_t spi_flash_erase_block(uint32_t page)
{
 802770c:	b580      	push	{r7, lr}
 802770e:	b084      	sub	sp, #16
 8027710:	af00      	add	r7, sp, #0
 8027712:	6078      	str	r0, [r7, #4]
    uint32_t addr = page << spi_conf.page_offset;
 8027714:	4b14      	ldr	r3, [pc, #80]	; (8027768 <spi_flash_erase_block+0x5c>)
 8027716:	781b      	ldrb	r3, [r3, #0]
 8027718:	461a      	mov	r2, r3
 802771a:	687b      	ldr	r3, [r7, #4]
 802771c:	4093      	lsls	r3, r2
 802771e:	60fb      	str	r3, [r7, #12]

    spi_flash_write_enable();
 8027720:	f7ff ff3c 	bl	802759c <spi_flash_write_enable>

    spi_flash_select_chip();
 8027724:	f7ff fdc4 	bl	80272b0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.erase_cmd);
 8027728:	4b0f      	ldr	r3, [pc, #60]	; (8027768 <spi_flash_erase_block+0x5c>)
 802772a:	795b      	ldrb	r3, [r3, #5]
 802772c:	4618      	mov	r0, r3
 802772e:	f7ff fe8b 	bl	8027448 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8027732:	68fb      	ldr	r3, [r7, #12]
 8027734:	0c1b      	lsrs	r3, r3, #16
 8027736:	b2db      	uxtb	r3, r3
 8027738:	4618      	mov	r0, r3
 802773a:	f7ff fe85 	bl	8027448 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 802773e:	68fb      	ldr	r3, [r7, #12]
 8027740:	0a1b      	lsrs	r3, r3, #8
 8027742:	b2db      	uxtb	r3, r3
 8027744:	4618      	mov	r0, r3
 8027746:	f7ff fe7f 	bl	8027448 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 802774a:	68fb      	ldr	r3, [r7, #12]
 802774c:	b2db      	uxtb	r3, r3
 802774e:	4618      	mov	r0, r3
 8027750:	f7ff fe7a 	bl	8027448 <spi_flash_send_byte>

    spi_flash_deselect_chip();
 8027754:	f7ff fdb8 	bl	80272c8 <spi_flash_deselect_chip>

    return spi_flash_get_status();
 8027758:	f7ff fec8 	bl	80274ec <spi_flash_get_status>
 802775c:	4603      	mov	r3, r0
}
 802775e:	4618      	mov	r0, r3
 8027760:	3710      	adds	r7, #16
 8027762:	46bd      	mov	sp, r7
 8027764:	bd80      	pop	{r7, pc}
 8027766:	bf00      	nop
 8027768:	200057f8 	.word	0x200057f8

0802776c <spi_flash_is_bb_supported>:

static inline bool spi_flash_is_bb_supported()
{
 802776c:	b480      	push	{r7}
 802776e:	af00      	add	r7, sp, #0
    return false;
 8027770:	2300      	movs	r3, #0
}
 8027772:	4618      	mov	r0, r3
 8027774:	46bd      	mov	sp, r7
 8027776:	f85d 7b04 	ldr.w	r7, [sp], #4
 802777a:	4770      	bx	lr

0802777c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802777c:	b580      	push	{r7, lr}
 802777e:	b082      	sub	sp, #8
 8027780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027782:	2300      	movs	r3, #0
 8027784:	607b      	str	r3, [r7, #4]
 8027786:	4b1f      	ldr	r3, [pc, #124]	; (8027804 <HAL_MspInit+0x88>)
 8027788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802778a:	4a1e      	ldr	r2, [pc, #120]	; (8027804 <HAL_MspInit+0x88>)
 802778c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027790:	6453      	str	r3, [r2, #68]	; 0x44
 8027792:	4b1c      	ldr	r3, [pc, #112]	; (8027804 <HAL_MspInit+0x88>)
 8027794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802779a:	607b      	str	r3, [r7, #4]
 802779c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802779e:	2300      	movs	r3, #0
 80277a0:	603b      	str	r3, [r7, #0]
 80277a2:	4b18      	ldr	r3, [pc, #96]	; (8027804 <HAL_MspInit+0x88>)
 80277a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80277a6:	4a17      	ldr	r2, [pc, #92]	; (8027804 <HAL_MspInit+0x88>)
 80277a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80277ac:	6413      	str	r3, [r2, #64]	; 0x40
 80277ae:	4b15      	ldr	r3, [pc, #84]	; (8027804 <HAL_MspInit+0x88>)
 80277b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80277b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80277b6:	603b      	str	r3, [r7, #0]
 80277b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80277ba:	2200      	movs	r2, #0
 80277bc:	2100      	movs	r1, #0
 80277be:	2001      	movs	r0, #1
 80277c0:	f000 fbd7 	bl	8027f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80277c4:	2001      	movs	r0, #1
 80277c6:	f000 fbf0 	bl	8027faa <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80277ca:	2200      	movs	r2, #0
 80277cc:	2100      	movs	r1, #0
 80277ce:	2004      	movs	r0, #4
 80277d0:	f000 fbcf 	bl	8027f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80277d4:	2004      	movs	r0, #4
 80277d6:	f000 fbe8 	bl	8027faa <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80277da:	2200      	movs	r2, #0
 80277dc:	2100      	movs	r1, #0
 80277de:	2005      	movs	r0, #5
 80277e0:	f000 fbc7 	bl	8027f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80277e4:	2005      	movs	r0, #5
 80277e6:	f000 fbe0 	bl	8027faa <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80277ea:	2200      	movs	r2, #0
 80277ec:	2100      	movs	r1, #0
 80277ee:	2051      	movs	r0, #81	; 0x51
 80277f0:	f000 fbbf 	bl	8027f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80277f4:	2051      	movs	r0, #81	; 0x51
 80277f6:	f000 fbd8 	bl	8027faa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80277fa:	bf00      	nop
 80277fc:	3708      	adds	r7, #8
 80277fe:	46bd      	mov	sp, r7
 8027800:	bd80      	pop	{r7, pc}
 8027802:	bf00      	nop
 8027804:	40023800 	.word	0x40023800

08027808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8027808:	b580      	push	{r7, lr}
 802780a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 802780c:	f003 faec 	bl	802ade8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8027810:	e7fe      	b.n	8027810 <NMI_Handler+0x8>

08027812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8027812:	b480      	push	{r7}
 8027814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8027816:	e7fe      	b.n	8027816 <HardFault_Handler+0x4>

08027818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8027818:	b480      	push	{r7}
 802781a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802781c:	e7fe      	b.n	802781c <MemManage_Handler+0x4>

0802781e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802781e:	b480      	push	{r7}
 8027820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8027822:	e7fe      	b.n	8027822 <BusFault_Handler+0x4>

08027824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8027824:	b480      	push	{r7}
 8027826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8027828:	e7fe      	b.n	8027828 <UsageFault_Handler+0x4>

0802782a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802782a:	b480      	push	{r7}
 802782c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802782e:	bf00      	nop
 8027830:	46bd      	mov	sp, r7
 8027832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027836:	4770      	bx	lr

08027838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8027838:	b480      	push	{r7}
 802783a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802783c:	bf00      	nop
 802783e:	46bd      	mov	sp, r7
 8027840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027844:	4770      	bx	lr

08027846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8027846:	b480      	push	{r7}
 8027848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802784a:	bf00      	nop
 802784c:	46bd      	mov	sp, r7
 802784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027852:	4770      	bx	lr

08027854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8027854:	b580      	push	{r7, lr}
 8027856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8027858:	f000 fa18 	bl	8027c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802785c:	bf00      	nop
 802785e:	bd80      	pop	{r7, pc}

08027860 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8027860:	b580      	push	{r7, lr}
 8027862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8027864:	f002 fe42 	bl	802a4ec <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8027868:	bf00      	nop
 802786a:	bd80      	pop	{r7, pc}

0802786c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 802786c:	b580      	push	{r7, lr}
 802786e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8027870:	f000 fcaa 	bl	80281c8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8027874:	bf00      	nop
 8027876:	bd80      	pop	{r7, pc}

08027878 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8027878:	b480      	push	{r7}
 802787a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 802787c:	bf00      	nop
 802787e:	46bd      	mov	sp, r7
 8027880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027884:	4770      	bx	lr
	...

08027888 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8027888:	b580      	push	{r7, lr}
 802788a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802788c:	4802      	ldr	r0, [pc, #8]	; (8027898 <SPI1_IRQHandler+0x10>)
 802788e:	f003 fefb 	bl	802b688 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8027892:	bf00      	nop
 8027894:	bd80      	pop	{r7, pc}
 8027896:	bf00      	nop
 8027898:	20005788 	.word	0x20005788

0802789c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 802789c:	b580      	push	{r7, lr}
 802789e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80278a0:	4802      	ldr	r0, [pc, #8]	; (80278ac <USART1_IRQHandler+0x10>)
 80278a2:	f004 faf7 	bl	802be94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80278a6:	bf00      	nop
 80278a8:	bd80      	pop	{r7, pc}
 80278aa:	bf00      	nop
 80278ac:	2000580c 	.word	0x2000580c

080278b0 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 80278b0:	b580      	push	{r7, lr}
 80278b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 80278b4:	4802      	ldr	r0, [pc, #8]	; (80278c0 <FSMC_IRQHandler+0x10>)
 80278b6:	f001 fabe 	bl	8028e36 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 80278ba:	bf00      	nop
 80278bc:	bd80      	pop	{r7, pc}
 80278be:	bf00      	nop
 80278c0:	2000125c 	.word	0x2000125c

080278c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80278c4:	b580      	push	{r7, lr}
 80278c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80278c8:	4802      	ldr	r0, [pc, #8]	; (80278d4 <OTG_FS_IRQHandler+0x10>)
 80278ca:	f001 fce2 	bl	8029292 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80278ce:	bf00      	nop
 80278d0:	bd80      	pop	{r7, pc}
 80278d2:	bf00      	nop
 80278d4:	20008030 	.word	0x20008030

080278d8 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 80278d8:	b580      	push	{r7, lr}
 80278da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80278dc:	4802      	ldr	r0, [pc, #8]	; (80278e8 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 80278de:	f001 fcd8 	bl	8029292 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 80278e2:	bf00      	nop
 80278e4:	bd80      	pop	{r7, pc}
 80278e6:	bf00      	nop
 80278e8:	2000853c 	.word	0x2000853c

080278ec <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 80278ec:	b580      	push	{r7, lr}
 80278ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80278f0:	4802      	ldr	r0, [pc, #8]	; (80278fc <OTG_HS_EP1_IN_IRQHandler+0x10>)
 80278f2:	f001 fcce 	bl	8029292 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 80278f6:	bf00      	nop
 80278f8:	bd80      	pop	{r7, pc}
 80278fa:	bf00      	nop
 80278fc:	2000853c 	.word	0x2000853c

08027900 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8027900:	b580      	push	{r7, lr}
 8027902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8027904:	4802      	ldr	r0, [pc, #8]	; (8027910 <OTG_HS_IRQHandler+0x10>)
 8027906:	f001 fcc4 	bl	8029292 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 802790a:	bf00      	nop
 802790c:	bd80      	pop	{r7, pc}
 802790e:	bf00      	nop
 8027910:	2000853c 	.word	0x2000853c

08027914 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8027914:	b480      	push	{r7}
 8027916:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8027918:	bf00      	nop
 802791a:	46bd      	mov	sp, r7
 802791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027920:	4770      	bx	lr

08027922 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8027922:	b480      	push	{r7}
 8027924:	af00      	add	r7, sp, #0
  return 1;
 8027926:	2301      	movs	r3, #1
}
 8027928:	4618      	mov	r0, r3
 802792a:	46bd      	mov	sp, r7
 802792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027930:	4770      	bx	lr

08027932 <_kill>:

int _kill(int pid, int sig)
{
 8027932:	b580      	push	{r7, lr}
 8027934:	b082      	sub	sp, #8
 8027936:	af00      	add	r7, sp, #0
 8027938:	6078      	str	r0, [r7, #4]
 802793a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 802793c:	f009 ffbe 	bl	80318bc <__errno>
 8027940:	4603      	mov	r3, r0
 8027942:	2216      	movs	r2, #22
 8027944:	601a      	str	r2, [r3, #0]
  return -1;
 8027946:	f04f 33ff 	mov.w	r3, #4294967295
}
 802794a:	4618      	mov	r0, r3
 802794c:	3708      	adds	r7, #8
 802794e:	46bd      	mov	sp, r7
 8027950:	bd80      	pop	{r7, pc}

08027952 <_exit>:

void _exit (int status)
{
 8027952:	b580      	push	{r7, lr}
 8027954:	b082      	sub	sp, #8
 8027956:	af00      	add	r7, sp, #0
 8027958:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 802795a:	f04f 31ff 	mov.w	r1, #4294967295
 802795e:	6878      	ldr	r0, [r7, #4]
 8027960:	f7ff ffe7 	bl	8027932 <_kill>
  while (1) {}    /* Make sure we hang here */
 8027964:	e7fe      	b.n	8027964 <_exit+0x12>

08027966 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8027966:	b580      	push	{r7, lr}
 8027968:	b086      	sub	sp, #24
 802796a:	af00      	add	r7, sp, #0
 802796c:	60f8      	str	r0, [r7, #12]
 802796e:	60b9      	str	r1, [r7, #8]
 8027970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8027972:	2300      	movs	r3, #0
 8027974:	617b      	str	r3, [r7, #20]
 8027976:	e00a      	b.n	802798e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8027978:	f3af 8000 	nop.w
 802797c:	4601      	mov	r1, r0
 802797e:	68bb      	ldr	r3, [r7, #8]
 8027980:	1c5a      	adds	r2, r3, #1
 8027982:	60ba      	str	r2, [r7, #8]
 8027984:	b2ca      	uxtb	r2, r1
 8027986:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8027988:	697b      	ldr	r3, [r7, #20]
 802798a:	3301      	adds	r3, #1
 802798c:	617b      	str	r3, [r7, #20]
 802798e:	697a      	ldr	r2, [r7, #20]
 8027990:	687b      	ldr	r3, [r7, #4]
 8027992:	429a      	cmp	r2, r3
 8027994:	dbf0      	blt.n	8027978 <_read+0x12>
  }

  return len;
 8027996:	687b      	ldr	r3, [r7, #4]
}
 8027998:	4618      	mov	r0, r3
 802799a:	3718      	adds	r7, #24
 802799c:	46bd      	mov	sp, r7
 802799e:	bd80      	pop	{r7, pc}

080279a0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80279a0:	b480      	push	{r7}
 80279a2:	b083      	sub	sp, #12
 80279a4:	af00      	add	r7, sp, #0
 80279a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80279a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80279ac:	4618      	mov	r0, r3
 80279ae:	370c      	adds	r7, #12
 80279b0:	46bd      	mov	sp, r7
 80279b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279b6:	4770      	bx	lr

080279b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80279b8:	b480      	push	{r7}
 80279ba:	b083      	sub	sp, #12
 80279bc:	af00      	add	r7, sp, #0
 80279be:	6078      	str	r0, [r7, #4]
 80279c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80279c2:	683b      	ldr	r3, [r7, #0]
 80279c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80279c8:	605a      	str	r2, [r3, #4]
  return 0;
 80279ca:	2300      	movs	r3, #0
}
 80279cc:	4618      	mov	r0, r3
 80279ce:	370c      	adds	r7, #12
 80279d0:	46bd      	mov	sp, r7
 80279d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279d6:	4770      	bx	lr

080279d8 <_isatty>:

int _isatty(int file)
{
 80279d8:	b480      	push	{r7}
 80279da:	b083      	sub	sp, #12
 80279dc:	af00      	add	r7, sp, #0
 80279de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80279e0:	2301      	movs	r3, #1
}
 80279e2:	4618      	mov	r0, r3
 80279e4:	370c      	adds	r7, #12
 80279e6:	46bd      	mov	sp, r7
 80279e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279ec:	4770      	bx	lr

080279ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80279ee:	b480      	push	{r7}
 80279f0:	b085      	sub	sp, #20
 80279f2:	af00      	add	r7, sp, #0
 80279f4:	60f8      	str	r0, [r7, #12]
 80279f6:	60b9      	str	r1, [r7, #8]
 80279f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80279fa:	2300      	movs	r3, #0
}
 80279fc:	4618      	mov	r0, r3
 80279fe:	3714      	adds	r7, #20
 8027a00:	46bd      	mov	sp, r7
 8027a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a06:	4770      	bx	lr

08027a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8027a08:	b580      	push	{r7, lr}
 8027a0a:	b086      	sub	sp, #24
 8027a0c:	af00      	add	r7, sp, #0
 8027a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8027a10:	4a14      	ldr	r2, [pc, #80]	; (8027a64 <_sbrk+0x5c>)
 8027a12:	4b15      	ldr	r3, [pc, #84]	; (8027a68 <_sbrk+0x60>)
 8027a14:	1ad3      	subs	r3, r2, r3
 8027a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8027a18:	697b      	ldr	r3, [r7, #20]
 8027a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8027a1c:	4b13      	ldr	r3, [pc, #76]	; (8027a6c <_sbrk+0x64>)
 8027a1e:	681b      	ldr	r3, [r3, #0]
 8027a20:	2b00      	cmp	r3, #0
 8027a22:	d102      	bne.n	8027a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8027a24:	4b11      	ldr	r3, [pc, #68]	; (8027a6c <_sbrk+0x64>)
 8027a26:	4a12      	ldr	r2, [pc, #72]	; (8027a70 <_sbrk+0x68>)
 8027a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8027a2a:	4b10      	ldr	r3, [pc, #64]	; (8027a6c <_sbrk+0x64>)
 8027a2c:	681a      	ldr	r2, [r3, #0]
 8027a2e:	687b      	ldr	r3, [r7, #4]
 8027a30:	4413      	add	r3, r2
 8027a32:	693a      	ldr	r2, [r7, #16]
 8027a34:	429a      	cmp	r2, r3
 8027a36:	d207      	bcs.n	8027a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8027a38:	f009 ff40 	bl	80318bc <__errno>
 8027a3c:	4603      	mov	r3, r0
 8027a3e:	220c      	movs	r2, #12
 8027a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8027a42:	f04f 33ff 	mov.w	r3, #4294967295
 8027a46:	e009      	b.n	8027a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8027a48:	4b08      	ldr	r3, [pc, #32]	; (8027a6c <_sbrk+0x64>)
 8027a4a:	681b      	ldr	r3, [r3, #0]
 8027a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8027a4e:	4b07      	ldr	r3, [pc, #28]	; (8027a6c <_sbrk+0x64>)
 8027a50:	681a      	ldr	r2, [r3, #0]
 8027a52:	687b      	ldr	r3, [r7, #4]
 8027a54:	4413      	add	r3, r2
 8027a56:	4a05      	ldr	r2, [pc, #20]	; (8027a6c <_sbrk+0x64>)
 8027a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8027a5a:	68fb      	ldr	r3, [r7, #12]
}
 8027a5c:	4618      	mov	r0, r3
 8027a5e:	3718      	adds	r7, #24
 8027a60:	46bd      	mov	sp, r7
 8027a62:	bd80      	pop	{r7, pc}
 8027a64:	2000c000 	.word	0x2000c000
 8027a68:	00001000 	.word	0x00001000
 8027a6c:	20005808 	.word	0x20005808
 8027a70:	20008db8 	.word	0x20008db8

08027a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8027a74:	b480      	push	{r7}
 8027a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8027a78:	4b07      	ldr	r3, [pc, #28]	; (8027a98 <SystemInit+0x24>)
 8027a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027a7e:	4a06      	ldr	r2, [pc, #24]	; (8027a98 <SystemInit+0x24>)
 8027a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8027a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8027a88:	4b03      	ldr	r3, [pc, #12]	; (8027a98 <SystemInit+0x24>)
 8027a8a:	4a04      	ldr	r2, [pc, #16]	; (8027a9c <SystemInit+0x28>)
 8027a8c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8027a8e:	bf00      	nop
 8027a90:	46bd      	mov	sp, r7
 8027a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a96:	4770      	bx	lr
 8027a98:	e000ed00 	.word	0xe000ed00
 8027a9c:	08022000 	.word	0x08022000

08027aa0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8027aa0:	b580      	push	{r7, lr}
 8027aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8027aa4:	4b11      	ldr	r3, [pc, #68]	; (8027aec <MX_USART1_UART_Init+0x4c>)
 8027aa6:	4a12      	ldr	r2, [pc, #72]	; (8027af0 <MX_USART1_UART_Init+0x50>)
 8027aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8027aaa:	4b10      	ldr	r3, [pc, #64]	; (8027aec <MX_USART1_UART_Init+0x4c>)
 8027aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8027ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8027ab2:	4b0e      	ldr	r3, [pc, #56]	; (8027aec <MX_USART1_UART_Init+0x4c>)
 8027ab4:	2200      	movs	r2, #0
 8027ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8027ab8:	4b0c      	ldr	r3, [pc, #48]	; (8027aec <MX_USART1_UART_Init+0x4c>)
 8027aba:	2200      	movs	r2, #0
 8027abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8027abe:	4b0b      	ldr	r3, [pc, #44]	; (8027aec <MX_USART1_UART_Init+0x4c>)
 8027ac0:	2200      	movs	r2, #0
 8027ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8027ac4:	4b09      	ldr	r3, [pc, #36]	; (8027aec <MX_USART1_UART_Init+0x4c>)
 8027ac6:	220c      	movs	r2, #12
 8027ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8027aca:	4b08      	ldr	r3, [pc, #32]	; (8027aec <MX_USART1_UART_Init+0x4c>)
 8027acc:	2200      	movs	r2, #0
 8027ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8027ad0:	4b06      	ldr	r3, [pc, #24]	; (8027aec <MX_USART1_UART_Init+0x4c>)
 8027ad2:	2200      	movs	r2, #0
 8027ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8027ad6:	4805      	ldr	r0, [pc, #20]	; (8027aec <MX_USART1_UART_Init+0x4c>)
 8027ad8:	f004 f8fc 	bl	802bcd4 <HAL_UART_Init>
 8027adc:	4603      	mov	r3, r0
 8027ade:	2b00      	cmp	r3, #0
 8027ae0:	d001      	beq.n	8027ae6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8027ae2:	f7fc fbe5 	bl	80242b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8027ae6:	bf00      	nop
 8027ae8:	bd80      	pop	{r7, pc}
 8027aea:	bf00      	nop
 8027aec:	2000580c 	.word	0x2000580c
 8027af0:	40011000 	.word	0x40011000

08027af4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8027af4:	b580      	push	{r7, lr}
 8027af6:	b08a      	sub	sp, #40	; 0x28
 8027af8:	af00      	add	r7, sp, #0
 8027afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8027afc:	f107 0314 	add.w	r3, r7, #20
 8027b00:	2200      	movs	r2, #0
 8027b02:	601a      	str	r2, [r3, #0]
 8027b04:	605a      	str	r2, [r3, #4]
 8027b06:	609a      	str	r2, [r3, #8]
 8027b08:	60da      	str	r2, [r3, #12]
 8027b0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8027b0c:	687b      	ldr	r3, [r7, #4]
 8027b0e:	681b      	ldr	r3, [r3, #0]
 8027b10:	4a1d      	ldr	r2, [pc, #116]	; (8027b88 <HAL_UART_MspInit+0x94>)
 8027b12:	4293      	cmp	r3, r2
 8027b14:	d134      	bne.n	8027b80 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8027b16:	2300      	movs	r3, #0
 8027b18:	613b      	str	r3, [r7, #16]
 8027b1a:	4b1c      	ldr	r3, [pc, #112]	; (8027b8c <HAL_UART_MspInit+0x98>)
 8027b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027b1e:	4a1b      	ldr	r2, [pc, #108]	; (8027b8c <HAL_UART_MspInit+0x98>)
 8027b20:	f043 0310 	orr.w	r3, r3, #16
 8027b24:	6453      	str	r3, [r2, #68]	; 0x44
 8027b26:	4b19      	ldr	r3, [pc, #100]	; (8027b8c <HAL_UART_MspInit+0x98>)
 8027b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027b2a:	f003 0310 	and.w	r3, r3, #16
 8027b2e:	613b      	str	r3, [r7, #16]
 8027b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8027b32:	2300      	movs	r3, #0
 8027b34:	60fb      	str	r3, [r7, #12]
 8027b36:	4b15      	ldr	r3, [pc, #84]	; (8027b8c <HAL_UART_MspInit+0x98>)
 8027b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b3a:	4a14      	ldr	r2, [pc, #80]	; (8027b8c <HAL_UART_MspInit+0x98>)
 8027b3c:	f043 0301 	orr.w	r3, r3, #1
 8027b40:	6313      	str	r3, [r2, #48]	; 0x30
 8027b42:	4b12      	ldr	r3, [pc, #72]	; (8027b8c <HAL_UART_MspInit+0x98>)
 8027b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b46:	f003 0301 	and.w	r3, r3, #1
 8027b4a:	60fb      	str	r3, [r7, #12]
 8027b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8027b4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8027b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8027b54:	2302      	movs	r3, #2
 8027b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027b58:	2300      	movs	r3, #0
 8027b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8027b5c:	2303      	movs	r3, #3
 8027b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8027b60:	2307      	movs	r3, #7
 8027b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8027b64:	f107 0314 	add.w	r3, r7, #20
 8027b68:	4619      	mov	r1, r3
 8027b6a:	4809      	ldr	r0, [pc, #36]	; (8027b90 <HAL_UART_MspInit+0x9c>)
 8027b6c:	f000 fe64 	bl	8028838 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8027b70:	2200      	movs	r2, #0
 8027b72:	2100      	movs	r1, #0
 8027b74:	2025      	movs	r0, #37	; 0x25
 8027b76:	f000 f9fc 	bl	8027f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8027b7a:	2025      	movs	r0, #37	; 0x25
 8027b7c:	f000 fa15 	bl	8027faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8027b80:	bf00      	nop
 8027b82:	3728      	adds	r7, #40	; 0x28
 8027b84:	46bd      	mov	sp, r7
 8027b86:	bd80      	pop	{r7, pc}
 8027b88:	40011000 	.word	0x40011000
 8027b8c:	40023800 	.word	0x40023800
 8027b90:	40020000 	.word	0x40020000

08027b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8027b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8027bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8027b98:	480d      	ldr	r0, [pc, #52]	; (8027bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8027b9a:	490e      	ldr	r1, [pc, #56]	; (8027bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8027b9c:	4a0e      	ldr	r2, [pc, #56]	; (8027bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8027b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8027ba0:	e002      	b.n	8027ba8 <LoopCopyDataInit>

08027ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8027ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8027ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8027ba6:	3304      	adds	r3, #4

08027ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8027ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8027baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8027bac:	d3f9      	bcc.n	8027ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8027bae:	4a0b      	ldr	r2, [pc, #44]	; (8027bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8027bb0:	4c0b      	ldr	r4, [pc, #44]	; (8027be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8027bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8027bb4:	e001      	b.n	8027bba <LoopFillZerobss>

08027bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8027bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8027bb8:	3204      	adds	r2, #4

08027bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8027bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8027bbc:	d3fb      	bcc.n	8027bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8027bbe:	f7ff ff59 	bl	8027a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8027bc2:	f009 fe81 	bl	80318c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8027bc6:	f7fc faab 	bl	8024120 <main>
  bx  lr    
 8027bca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8027bcc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8027bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8027bd4:	2000092c 	.word	0x2000092c
  ldr r2, =_sidata
 8027bd8:	080371a8 	.word	0x080371a8
  ldr r2, =_sbss
 8027bdc:	20000930 	.word	0x20000930
  ldr r4, =_ebss
 8027be0:	20008db4 	.word	0x20008db4

08027be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8027be4:	e7fe      	b.n	8027be4 <ADC_IRQHandler>
	...

08027be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8027be8:	b580      	push	{r7, lr}
 8027bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8027bec:	4b0e      	ldr	r3, [pc, #56]	; (8027c28 <HAL_Init+0x40>)
 8027bee:	681b      	ldr	r3, [r3, #0]
 8027bf0:	4a0d      	ldr	r2, [pc, #52]	; (8027c28 <HAL_Init+0x40>)
 8027bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8027bf8:	4b0b      	ldr	r3, [pc, #44]	; (8027c28 <HAL_Init+0x40>)
 8027bfa:	681b      	ldr	r3, [r3, #0]
 8027bfc:	4a0a      	ldr	r2, [pc, #40]	; (8027c28 <HAL_Init+0x40>)
 8027bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8027c04:	4b08      	ldr	r3, [pc, #32]	; (8027c28 <HAL_Init+0x40>)
 8027c06:	681b      	ldr	r3, [r3, #0]
 8027c08:	4a07      	ldr	r2, [pc, #28]	; (8027c28 <HAL_Init+0x40>)
 8027c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8027c10:	2003      	movs	r0, #3
 8027c12:	f000 f9a3 	bl	8027f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8027c16:	200f      	movs	r0, #15
 8027c18:	f000 f808 	bl	8027c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8027c1c:	f7ff fdae 	bl	802777c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8027c20:	2300      	movs	r3, #0
}
 8027c22:	4618      	mov	r0, r3
 8027c24:	bd80      	pop	{r7, pc}
 8027c26:	bf00      	nop
 8027c28:	40023c00 	.word	0x40023c00

08027c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8027c2c:	b580      	push	{r7, lr}
 8027c2e:	b082      	sub	sp, #8
 8027c30:	af00      	add	r7, sp, #0
 8027c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8027c34:	4b12      	ldr	r3, [pc, #72]	; (8027c80 <HAL_InitTick+0x54>)
 8027c36:	681a      	ldr	r2, [r3, #0]
 8027c38:	4b12      	ldr	r3, [pc, #72]	; (8027c84 <HAL_InitTick+0x58>)
 8027c3a:	781b      	ldrb	r3, [r3, #0]
 8027c3c:	4619      	mov	r1, r3
 8027c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8027c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8027c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8027c4a:	4618      	mov	r0, r3
 8027c4c:	f000 f9c9 	bl	8027fe2 <HAL_SYSTICK_Config>
 8027c50:	4603      	mov	r3, r0
 8027c52:	2b00      	cmp	r3, #0
 8027c54:	d001      	beq.n	8027c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8027c56:	2301      	movs	r3, #1
 8027c58:	e00e      	b.n	8027c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8027c5a:	687b      	ldr	r3, [r7, #4]
 8027c5c:	2b0f      	cmp	r3, #15
 8027c5e:	d80a      	bhi.n	8027c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8027c60:	2200      	movs	r2, #0
 8027c62:	6879      	ldr	r1, [r7, #4]
 8027c64:	f04f 30ff 	mov.w	r0, #4294967295
 8027c68:	f000 f983 	bl	8027f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8027c6c:	4a06      	ldr	r2, [pc, #24]	; (8027c88 <HAL_InitTick+0x5c>)
 8027c6e:	687b      	ldr	r3, [r7, #4]
 8027c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8027c72:	2300      	movs	r3, #0
 8027c74:	e000      	b.n	8027c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8027c76:	2301      	movs	r3, #1
}
 8027c78:	4618      	mov	r0, r3
 8027c7a:	3708      	adds	r7, #8
 8027c7c:	46bd      	mov	sp, r7
 8027c7e:	bd80      	pop	{r7, pc}
 8027c80:	20000138 	.word	0x20000138
 8027c84:	20000140 	.word	0x20000140
 8027c88:	2000013c 	.word	0x2000013c

08027c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8027c8c:	b480      	push	{r7}
 8027c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8027c90:	4b06      	ldr	r3, [pc, #24]	; (8027cac <HAL_IncTick+0x20>)
 8027c92:	781b      	ldrb	r3, [r3, #0]
 8027c94:	461a      	mov	r2, r3
 8027c96:	4b06      	ldr	r3, [pc, #24]	; (8027cb0 <HAL_IncTick+0x24>)
 8027c98:	681b      	ldr	r3, [r3, #0]
 8027c9a:	4413      	add	r3, r2
 8027c9c:	4a04      	ldr	r2, [pc, #16]	; (8027cb0 <HAL_IncTick+0x24>)
 8027c9e:	6013      	str	r3, [r2, #0]
}
 8027ca0:	bf00      	nop
 8027ca2:	46bd      	mov	sp, r7
 8027ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ca8:	4770      	bx	lr
 8027caa:	bf00      	nop
 8027cac:	20000140 	.word	0x20000140
 8027cb0:	20005850 	.word	0x20005850

08027cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8027cb4:	b480      	push	{r7}
 8027cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8027cb8:	4b03      	ldr	r3, [pc, #12]	; (8027cc8 <HAL_GetTick+0x14>)
 8027cba:	681b      	ldr	r3, [r3, #0]
}
 8027cbc:	4618      	mov	r0, r3
 8027cbe:	46bd      	mov	sp, r7
 8027cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cc4:	4770      	bx	lr
 8027cc6:	bf00      	nop
 8027cc8:	20005850 	.word	0x20005850

08027ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8027ccc:	b580      	push	{r7, lr}
 8027cce:	b084      	sub	sp, #16
 8027cd0:	af00      	add	r7, sp, #0
 8027cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8027cd4:	f7ff ffee 	bl	8027cb4 <HAL_GetTick>
 8027cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8027cda:	687b      	ldr	r3, [r7, #4]
 8027cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8027cde:	68fb      	ldr	r3, [r7, #12]
 8027ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027ce4:	d005      	beq.n	8027cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8027ce6:	4b0a      	ldr	r3, [pc, #40]	; (8027d10 <HAL_Delay+0x44>)
 8027ce8:	781b      	ldrb	r3, [r3, #0]
 8027cea:	461a      	mov	r2, r3
 8027cec:	68fb      	ldr	r3, [r7, #12]
 8027cee:	4413      	add	r3, r2
 8027cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8027cf2:	bf00      	nop
 8027cf4:	f7ff ffde 	bl	8027cb4 <HAL_GetTick>
 8027cf8:	4602      	mov	r2, r0
 8027cfa:	68bb      	ldr	r3, [r7, #8]
 8027cfc:	1ad3      	subs	r3, r2, r3
 8027cfe:	68fa      	ldr	r2, [r7, #12]
 8027d00:	429a      	cmp	r2, r3
 8027d02:	d8f7      	bhi.n	8027cf4 <HAL_Delay+0x28>
  {
  }
}
 8027d04:	bf00      	nop
 8027d06:	bf00      	nop
 8027d08:	3710      	adds	r7, #16
 8027d0a:	46bd      	mov	sp, r7
 8027d0c:	bd80      	pop	{r7, pc}
 8027d0e:	bf00      	nop
 8027d10:	20000140 	.word	0x20000140

08027d14 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8027d14:	b480      	push	{r7}
 8027d16:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8027d18:	4b05      	ldr	r3, [pc, #20]	; (8027d30 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8027d1a:	685b      	ldr	r3, [r3, #4]
 8027d1c:	4a04      	ldr	r2, [pc, #16]	; (8027d30 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8027d1e:	f043 0301 	orr.w	r3, r3, #1
 8027d22:	6053      	str	r3, [r2, #4]
}
 8027d24:	bf00      	nop
 8027d26:	46bd      	mov	sp, r7
 8027d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d2c:	4770      	bx	lr
 8027d2e:	bf00      	nop
 8027d30:	e0042000 	.word	0xe0042000

08027d34 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8027d34:	b480      	push	{r7}
 8027d36:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8027d38:	4b05      	ldr	r3, [pc, #20]	; (8027d50 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8027d3a:	685b      	ldr	r3, [r3, #4]
 8027d3c:	4a04      	ldr	r2, [pc, #16]	; (8027d50 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8027d3e:	f043 0302 	orr.w	r3, r3, #2
 8027d42:	6053      	str	r3, [r2, #4]
}
 8027d44:	bf00      	nop
 8027d46:	46bd      	mov	sp, r7
 8027d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d4c:	4770      	bx	lr
 8027d4e:	bf00      	nop
 8027d50:	e0042000 	.word	0xe0042000

08027d54 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8027d54:	b480      	push	{r7}
 8027d56:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8027d58:	4b05      	ldr	r3, [pc, #20]	; (8027d70 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8027d5a:	685b      	ldr	r3, [r3, #4]
 8027d5c:	4a04      	ldr	r2, [pc, #16]	; (8027d70 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8027d5e:	f043 0304 	orr.w	r3, r3, #4
 8027d62:	6053      	str	r3, [r2, #4]
}
 8027d64:	bf00      	nop
 8027d66:	46bd      	mov	sp, r7
 8027d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d6c:	4770      	bx	lr
 8027d6e:	bf00      	nop
 8027d70:	e0042000 	.word	0xe0042000

08027d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8027d74:	b480      	push	{r7}
 8027d76:	b085      	sub	sp, #20
 8027d78:	af00      	add	r7, sp, #0
 8027d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8027d7c:	687b      	ldr	r3, [r7, #4]
 8027d7e:	f003 0307 	and.w	r3, r3, #7
 8027d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8027d84:	4b0c      	ldr	r3, [pc, #48]	; (8027db8 <__NVIC_SetPriorityGrouping+0x44>)
 8027d86:	68db      	ldr	r3, [r3, #12]
 8027d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8027d8a:	68ba      	ldr	r2, [r7, #8]
 8027d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8027d90:	4013      	ands	r3, r2
 8027d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8027d94:	68fb      	ldr	r3, [r7, #12]
 8027d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8027d98:	68bb      	ldr	r3, [r7, #8]
 8027d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8027d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8027da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8027da6:	4a04      	ldr	r2, [pc, #16]	; (8027db8 <__NVIC_SetPriorityGrouping+0x44>)
 8027da8:	68bb      	ldr	r3, [r7, #8]
 8027daa:	60d3      	str	r3, [r2, #12]
}
 8027dac:	bf00      	nop
 8027dae:	3714      	adds	r7, #20
 8027db0:	46bd      	mov	sp, r7
 8027db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027db6:	4770      	bx	lr
 8027db8:	e000ed00 	.word	0xe000ed00

08027dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8027dbc:	b480      	push	{r7}
 8027dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8027dc0:	4b04      	ldr	r3, [pc, #16]	; (8027dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8027dc2:	68db      	ldr	r3, [r3, #12]
 8027dc4:	0a1b      	lsrs	r3, r3, #8
 8027dc6:	f003 0307 	and.w	r3, r3, #7
}
 8027dca:	4618      	mov	r0, r3
 8027dcc:	46bd      	mov	sp, r7
 8027dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027dd2:	4770      	bx	lr
 8027dd4:	e000ed00 	.word	0xe000ed00

08027dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8027dd8:	b480      	push	{r7}
 8027dda:	b083      	sub	sp, #12
 8027ddc:	af00      	add	r7, sp, #0
 8027dde:	4603      	mov	r3, r0
 8027de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8027de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027de6:	2b00      	cmp	r3, #0
 8027de8:	db0b      	blt.n	8027e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8027dea:	79fb      	ldrb	r3, [r7, #7]
 8027dec:	f003 021f 	and.w	r2, r3, #31
 8027df0:	4907      	ldr	r1, [pc, #28]	; (8027e10 <__NVIC_EnableIRQ+0x38>)
 8027df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027df6:	095b      	lsrs	r3, r3, #5
 8027df8:	2001      	movs	r0, #1
 8027dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8027dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8027e02:	bf00      	nop
 8027e04:	370c      	adds	r7, #12
 8027e06:	46bd      	mov	sp, r7
 8027e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e0c:	4770      	bx	lr
 8027e0e:	bf00      	nop
 8027e10:	e000e100 	.word	0xe000e100

08027e14 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8027e14:	b480      	push	{r7}
 8027e16:	b083      	sub	sp, #12
 8027e18:	af00      	add	r7, sp, #0
 8027e1a:	4603      	mov	r3, r0
 8027e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8027e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027e22:	2b00      	cmp	r3, #0
 8027e24:	db12      	blt.n	8027e4c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8027e26:	79fb      	ldrb	r3, [r7, #7]
 8027e28:	f003 021f 	and.w	r2, r3, #31
 8027e2c:	490a      	ldr	r1, [pc, #40]	; (8027e58 <__NVIC_DisableIRQ+0x44>)
 8027e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027e32:	095b      	lsrs	r3, r3, #5
 8027e34:	2001      	movs	r0, #1
 8027e36:	fa00 f202 	lsl.w	r2, r0, r2
 8027e3a:	3320      	adds	r3, #32
 8027e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8027e40:	f3bf 8f4f 	dsb	sy
}
 8027e44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8027e46:	f3bf 8f6f 	isb	sy
}
 8027e4a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8027e4c:	bf00      	nop
 8027e4e:	370c      	adds	r7, #12
 8027e50:	46bd      	mov	sp, r7
 8027e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e56:	4770      	bx	lr
 8027e58:	e000e100 	.word	0xe000e100

08027e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8027e5c:	b480      	push	{r7}
 8027e5e:	b083      	sub	sp, #12
 8027e60:	af00      	add	r7, sp, #0
 8027e62:	4603      	mov	r3, r0
 8027e64:	6039      	str	r1, [r7, #0]
 8027e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8027e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027e6c:	2b00      	cmp	r3, #0
 8027e6e:	db0a      	blt.n	8027e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8027e70:	683b      	ldr	r3, [r7, #0]
 8027e72:	b2da      	uxtb	r2, r3
 8027e74:	490c      	ldr	r1, [pc, #48]	; (8027ea8 <__NVIC_SetPriority+0x4c>)
 8027e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027e7a:	0112      	lsls	r2, r2, #4
 8027e7c:	b2d2      	uxtb	r2, r2
 8027e7e:	440b      	add	r3, r1
 8027e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8027e84:	e00a      	b.n	8027e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8027e86:	683b      	ldr	r3, [r7, #0]
 8027e88:	b2da      	uxtb	r2, r3
 8027e8a:	4908      	ldr	r1, [pc, #32]	; (8027eac <__NVIC_SetPriority+0x50>)
 8027e8c:	79fb      	ldrb	r3, [r7, #7]
 8027e8e:	f003 030f 	and.w	r3, r3, #15
 8027e92:	3b04      	subs	r3, #4
 8027e94:	0112      	lsls	r2, r2, #4
 8027e96:	b2d2      	uxtb	r2, r2
 8027e98:	440b      	add	r3, r1
 8027e9a:	761a      	strb	r2, [r3, #24]
}
 8027e9c:	bf00      	nop
 8027e9e:	370c      	adds	r7, #12
 8027ea0:	46bd      	mov	sp, r7
 8027ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ea6:	4770      	bx	lr
 8027ea8:	e000e100 	.word	0xe000e100
 8027eac:	e000ed00 	.word	0xe000ed00

08027eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8027eb0:	b480      	push	{r7}
 8027eb2:	b089      	sub	sp, #36	; 0x24
 8027eb4:	af00      	add	r7, sp, #0
 8027eb6:	60f8      	str	r0, [r7, #12]
 8027eb8:	60b9      	str	r1, [r7, #8]
 8027eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8027ebc:	68fb      	ldr	r3, [r7, #12]
 8027ebe:	f003 0307 	and.w	r3, r3, #7
 8027ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8027ec4:	69fb      	ldr	r3, [r7, #28]
 8027ec6:	f1c3 0307 	rsb	r3, r3, #7
 8027eca:	2b04      	cmp	r3, #4
 8027ecc:	bf28      	it	cs
 8027ece:	2304      	movcs	r3, #4
 8027ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8027ed2:	69fb      	ldr	r3, [r7, #28]
 8027ed4:	3304      	adds	r3, #4
 8027ed6:	2b06      	cmp	r3, #6
 8027ed8:	d902      	bls.n	8027ee0 <NVIC_EncodePriority+0x30>
 8027eda:	69fb      	ldr	r3, [r7, #28]
 8027edc:	3b03      	subs	r3, #3
 8027ede:	e000      	b.n	8027ee2 <NVIC_EncodePriority+0x32>
 8027ee0:	2300      	movs	r3, #0
 8027ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8027ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8027ee8:	69bb      	ldr	r3, [r7, #24]
 8027eea:	fa02 f303 	lsl.w	r3, r2, r3
 8027eee:	43da      	mvns	r2, r3
 8027ef0:	68bb      	ldr	r3, [r7, #8]
 8027ef2:	401a      	ands	r2, r3
 8027ef4:	697b      	ldr	r3, [r7, #20]
 8027ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8027ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8027efc:	697b      	ldr	r3, [r7, #20]
 8027efe:	fa01 f303 	lsl.w	r3, r1, r3
 8027f02:	43d9      	mvns	r1, r3
 8027f04:	687b      	ldr	r3, [r7, #4]
 8027f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8027f08:	4313      	orrs	r3, r2
         );
}
 8027f0a:	4618      	mov	r0, r3
 8027f0c:	3724      	adds	r7, #36	; 0x24
 8027f0e:	46bd      	mov	sp, r7
 8027f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f14:	4770      	bx	lr
	...

08027f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8027f18:	b580      	push	{r7, lr}
 8027f1a:	b082      	sub	sp, #8
 8027f1c:	af00      	add	r7, sp, #0
 8027f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8027f20:	687b      	ldr	r3, [r7, #4]
 8027f22:	3b01      	subs	r3, #1
 8027f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8027f28:	d301      	bcc.n	8027f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8027f2a:	2301      	movs	r3, #1
 8027f2c:	e00f      	b.n	8027f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8027f2e:	4a0a      	ldr	r2, [pc, #40]	; (8027f58 <SysTick_Config+0x40>)
 8027f30:	687b      	ldr	r3, [r7, #4]
 8027f32:	3b01      	subs	r3, #1
 8027f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8027f36:	210f      	movs	r1, #15
 8027f38:	f04f 30ff 	mov.w	r0, #4294967295
 8027f3c:	f7ff ff8e 	bl	8027e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8027f40:	4b05      	ldr	r3, [pc, #20]	; (8027f58 <SysTick_Config+0x40>)
 8027f42:	2200      	movs	r2, #0
 8027f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8027f46:	4b04      	ldr	r3, [pc, #16]	; (8027f58 <SysTick_Config+0x40>)
 8027f48:	2207      	movs	r2, #7
 8027f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8027f4c:	2300      	movs	r3, #0
}
 8027f4e:	4618      	mov	r0, r3
 8027f50:	3708      	adds	r7, #8
 8027f52:	46bd      	mov	sp, r7
 8027f54:	bd80      	pop	{r7, pc}
 8027f56:	bf00      	nop
 8027f58:	e000e010 	.word	0xe000e010

08027f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8027f5c:	b580      	push	{r7, lr}
 8027f5e:	b082      	sub	sp, #8
 8027f60:	af00      	add	r7, sp, #0
 8027f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8027f64:	6878      	ldr	r0, [r7, #4]
 8027f66:	f7ff ff05 	bl	8027d74 <__NVIC_SetPriorityGrouping>
}
 8027f6a:	bf00      	nop
 8027f6c:	3708      	adds	r7, #8
 8027f6e:	46bd      	mov	sp, r7
 8027f70:	bd80      	pop	{r7, pc}

08027f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8027f72:	b580      	push	{r7, lr}
 8027f74:	b086      	sub	sp, #24
 8027f76:	af00      	add	r7, sp, #0
 8027f78:	4603      	mov	r3, r0
 8027f7a:	60b9      	str	r1, [r7, #8]
 8027f7c:	607a      	str	r2, [r7, #4]
 8027f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8027f80:	2300      	movs	r3, #0
 8027f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8027f84:	f7ff ff1a 	bl	8027dbc <__NVIC_GetPriorityGrouping>
 8027f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8027f8a:	687a      	ldr	r2, [r7, #4]
 8027f8c:	68b9      	ldr	r1, [r7, #8]
 8027f8e:	6978      	ldr	r0, [r7, #20]
 8027f90:	f7ff ff8e 	bl	8027eb0 <NVIC_EncodePriority>
 8027f94:	4602      	mov	r2, r0
 8027f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8027f9a:	4611      	mov	r1, r2
 8027f9c:	4618      	mov	r0, r3
 8027f9e:	f7ff ff5d 	bl	8027e5c <__NVIC_SetPriority>
}
 8027fa2:	bf00      	nop
 8027fa4:	3718      	adds	r7, #24
 8027fa6:	46bd      	mov	sp, r7
 8027fa8:	bd80      	pop	{r7, pc}

08027faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8027faa:	b580      	push	{r7, lr}
 8027fac:	b082      	sub	sp, #8
 8027fae:	af00      	add	r7, sp, #0
 8027fb0:	4603      	mov	r3, r0
 8027fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8027fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027fb8:	4618      	mov	r0, r3
 8027fba:	f7ff ff0d 	bl	8027dd8 <__NVIC_EnableIRQ>
}
 8027fbe:	bf00      	nop
 8027fc0:	3708      	adds	r7, #8
 8027fc2:	46bd      	mov	sp, r7
 8027fc4:	bd80      	pop	{r7, pc}

08027fc6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8027fc6:	b580      	push	{r7, lr}
 8027fc8:	b082      	sub	sp, #8
 8027fca:	af00      	add	r7, sp, #0
 8027fcc:	4603      	mov	r3, r0
 8027fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8027fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027fd4:	4618      	mov	r0, r3
 8027fd6:	f7ff ff1d 	bl	8027e14 <__NVIC_DisableIRQ>
}
 8027fda:	bf00      	nop
 8027fdc:	3708      	adds	r7, #8
 8027fde:	46bd      	mov	sp, r7
 8027fe0:	bd80      	pop	{r7, pc}

08027fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8027fe2:	b580      	push	{r7, lr}
 8027fe4:	b082      	sub	sp, #8
 8027fe6:	af00      	add	r7, sp, #0
 8027fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8027fea:	6878      	ldr	r0, [r7, #4]
 8027fec:	f7ff ff94 	bl	8027f18 <SysTick_Config>
 8027ff0:	4603      	mov	r3, r0
}
 8027ff2:	4618      	mov	r0, r3
 8027ff4:	3708      	adds	r7, #8
 8027ff6:	46bd      	mov	sp, r7
 8027ff8:	bd80      	pop	{r7, pc}

08027ffa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8027ffa:	b580      	push	{r7, lr}
 8027ffc:	b084      	sub	sp, #16
 8027ffe:	af00      	add	r7, sp, #0
 8028000:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8028002:	687b      	ldr	r3, [r7, #4]
 8028004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8028006:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8028008:	f7ff fe54 	bl	8027cb4 <HAL_GetTick>
 802800c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802800e:	687b      	ldr	r3, [r7, #4]
 8028010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8028014:	b2db      	uxtb	r3, r3
 8028016:	2b02      	cmp	r3, #2
 8028018:	d008      	beq.n	802802c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802801a:	687b      	ldr	r3, [r7, #4]
 802801c:	2280      	movs	r2, #128	; 0x80
 802801e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8028020:	687b      	ldr	r3, [r7, #4]
 8028022:	2200      	movs	r2, #0
 8028024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8028028:	2301      	movs	r3, #1
 802802a:	e052      	b.n	80280d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802802c:	687b      	ldr	r3, [r7, #4]
 802802e:	681b      	ldr	r3, [r3, #0]
 8028030:	681a      	ldr	r2, [r3, #0]
 8028032:	687b      	ldr	r3, [r7, #4]
 8028034:	681b      	ldr	r3, [r3, #0]
 8028036:	f022 0216 	bic.w	r2, r2, #22
 802803a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 802803c:	687b      	ldr	r3, [r7, #4]
 802803e:	681b      	ldr	r3, [r3, #0]
 8028040:	695a      	ldr	r2, [r3, #20]
 8028042:	687b      	ldr	r3, [r7, #4]
 8028044:	681b      	ldr	r3, [r3, #0]
 8028046:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802804a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802804c:	687b      	ldr	r3, [r7, #4]
 802804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028050:	2b00      	cmp	r3, #0
 8028052:	d103      	bne.n	802805c <HAL_DMA_Abort+0x62>
 8028054:	687b      	ldr	r3, [r7, #4]
 8028056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028058:	2b00      	cmp	r3, #0
 802805a:	d007      	beq.n	802806c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 802805c:	687b      	ldr	r3, [r7, #4]
 802805e:	681b      	ldr	r3, [r3, #0]
 8028060:	681a      	ldr	r2, [r3, #0]
 8028062:	687b      	ldr	r3, [r7, #4]
 8028064:	681b      	ldr	r3, [r3, #0]
 8028066:	f022 0208 	bic.w	r2, r2, #8
 802806a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802806c:	687b      	ldr	r3, [r7, #4]
 802806e:	681b      	ldr	r3, [r3, #0]
 8028070:	681a      	ldr	r2, [r3, #0]
 8028072:	687b      	ldr	r3, [r7, #4]
 8028074:	681b      	ldr	r3, [r3, #0]
 8028076:	f022 0201 	bic.w	r2, r2, #1
 802807a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802807c:	e013      	b.n	80280a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802807e:	f7ff fe19 	bl	8027cb4 <HAL_GetTick>
 8028082:	4602      	mov	r2, r0
 8028084:	68bb      	ldr	r3, [r7, #8]
 8028086:	1ad3      	subs	r3, r2, r3
 8028088:	2b05      	cmp	r3, #5
 802808a:	d90c      	bls.n	80280a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802808c:	687b      	ldr	r3, [r7, #4]
 802808e:	2220      	movs	r2, #32
 8028090:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8028092:	687b      	ldr	r3, [r7, #4]
 8028094:	2203      	movs	r2, #3
 8028096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802809a:	687b      	ldr	r3, [r7, #4]
 802809c:	2200      	movs	r2, #0
 802809e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80280a2:	2303      	movs	r3, #3
 80280a4:	e015      	b.n	80280d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80280a6:	687b      	ldr	r3, [r7, #4]
 80280a8:	681b      	ldr	r3, [r3, #0]
 80280aa:	681b      	ldr	r3, [r3, #0]
 80280ac:	f003 0301 	and.w	r3, r3, #1
 80280b0:	2b00      	cmp	r3, #0
 80280b2:	d1e4      	bne.n	802807e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80280b4:	687b      	ldr	r3, [r7, #4]
 80280b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80280b8:	223f      	movs	r2, #63	; 0x3f
 80280ba:	409a      	lsls	r2, r3
 80280bc:	68fb      	ldr	r3, [r7, #12]
 80280be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80280c0:	687b      	ldr	r3, [r7, #4]
 80280c2:	2201      	movs	r2, #1
 80280c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80280c8:	687b      	ldr	r3, [r7, #4]
 80280ca:	2200      	movs	r2, #0
 80280cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80280d0:	2300      	movs	r3, #0
}
 80280d2:	4618      	mov	r0, r3
 80280d4:	3710      	adds	r7, #16
 80280d6:	46bd      	mov	sp, r7
 80280d8:	bd80      	pop	{r7, pc}

080280da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80280da:	b480      	push	{r7}
 80280dc:	b083      	sub	sp, #12
 80280de:	af00      	add	r7, sp, #0
 80280e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80280e2:	687b      	ldr	r3, [r7, #4]
 80280e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80280e8:	b2db      	uxtb	r3, r3
 80280ea:	2b02      	cmp	r3, #2
 80280ec:	d004      	beq.n	80280f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80280ee:	687b      	ldr	r3, [r7, #4]
 80280f0:	2280      	movs	r2, #128	; 0x80
 80280f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80280f4:	2301      	movs	r3, #1
 80280f6:	e00c      	b.n	8028112 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80280f8:	687b      	ldr	r3, [r7, #4]
 80280fa:	2205      	movs	r2, #5
 80280fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8028100:	687b      	ldr	r3, [r7, #4]
 8028102:	681b      	ldr	r3, [r3, #0]
 8028104:	681a      	ldr	r2, [r3, #0]
 8028106:	687b      	ldr	r3, [r7, #4]
 8028108:	681b      	ldr	r3, [r3, #0]
 802810a:	f022 0201 	bic.w	r2, r2, #1
 802810e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8028110:	2300      	movs	r3, #0
}
 8028112:	4618      	mov	r0, r3
 8028114:	370c      	adds	r7, #12
 8028116:	46bd      	mov	sp, r7
 8028118:	f85d 7b04 	ldr.w	r7, [sp], #4
 802811c:	4770      	bx	lr
	...

08028120 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8028120:	b580      	push	{r7, lr}
 8028122:	b086      	sub	sp, #24
 8028124:	af00      	add	r7, sp, #0
 8028126:	60f8      	str	r0, [r7, #12]
 8028128:	60b9      	str	r1, [r7, #8]
 802812a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 802812e:	2301      	movs	r3, #1
 8028130:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8028132:	4b23      	ldr	r3, [pc, #140]	; (80281c0 <HAL_FLASH_Program+0xa0>)
 8028134:	7e1b      	ldrb	r3, [r3, #24]
 8028136:	2b01      	cmp	r3, #1
 8028138:	d101      	bne.n	802813e <HAL_FLASH_Program+0x1e>
 802813a:	2302      	movs	r3, #2
 802813c:	e03b      	b.n	80281b6 <HAL_FLASH_Program+0x96>
 802813e:	4b20      	ldr	r3, [pc, #128]	; (80281c0 <HAL_FLASH_Program+0xa0>)
 8028140:	2201      	movs	r2, #1
 8028142:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8028144:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028148:	f000 f924 	bl	8028394 <FLASH_WaitForLastOperation>
 802814c:	4603      	mov	r3, r0
 802814e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8028150:	7dfb      	ldrb	r3, [r7, #23]
 8028152:	2b00      	cmp	r3, #0
 8028154:	d12b      	bne.n	80281ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8028156:	68fb      	ldr	r3, [r7, #12]
 8028158:	2b00      	cmp	r3, #0
 802815a:	d105      	bne.n	8028168 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 802815c:	783b      	ldrb	r3, [r7, #0]
 802815e:	4619      	mov	r1, r3
 8028160:	68b8      	ldr	r0, [r7, #8]
 8028162:	f000 f9cf 	bl	8028504 <FLASH_Program_Byte>
 8028166:	e016      	b.n	8028196 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8028168:	68fb      	ldr	r3, [r7, #12]
 802816a:	2b01      	cmp	r3, #1
 802816c:	d105      	bne.n	802817a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 802816e:	883b      	ldrh	r3, [r7, #0]
 8028170:	4619      	mov	r1, r3
 8028172:	68b8      	ldr	r0, [r7, #8]
 8028174:	f000 f9a2 	bl	80284bc <FLASH_Program_HalfWord>
 8028178:	e00d      	b.n	8028196 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 802817a:	68fb      	ldr	r3, [r7, #12]
 802817c:	2b02      	cmp	r3, #2
 802817e:	d105      	bne.n	802818c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8028180:	683b      	ldr	r3, [r7, #0]
 8028182:	4619      	mov	r1, r3
 8028184:	68b8      	ldr	r0, [r7, #8]
 8028186:	f000 f977 	bl	8028478 <FLASH_Program_Word>
 802818a:	e004      	b.n	8028196 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 802818c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028190:	68b8      	ldr	r0, [r7, #8]
 8028192:	f000 f93f 	bl	8028414 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8028196:	f24c 3050 	movw	r0, #50000	; 0xc350
 802819a:	f000 f8fb 	bl	8028394 <FLASH_WaitForLastOperation>
 802819e:	4603      	mov	r3, r0
 80281a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80281a2:	4b08      	ldr	r3, [pc, #32]	; (80281c4 <HAL_FLASH_Program+0xa4>)
 80281a4:	691b      	ldr	r3, [r3, #16]
 80281a6:	4a07      	ldr	r2, [pc, #28]	; (80281c4 <HAL_FLASH_Program+0xa4>)
 80281a8:	f023 0301 	bic.w	r3, r3, #1
 80281ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80281ae:	4b04      	ldr	r3, [pc, #16]	; (80281c0 <HAL_FLASH_Program+0xa0>)
 80281b0:	2200      	movs	r2, #0
 80281b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80281b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80281b6:	4618      	mov	r0, r3
 80281b8:	3718      	adds	r7, #24
 80281ba:	46bd      	mov	sp, r7
 80281bc:	bd80      	pop	{r7, pc}
 80281be:	bf00      	nop
 80281c0:	20005854 	.word	0x20005854
 80281c4:	40023c00 	.word	0x40023c00

080281c8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80281c8:	b580      	push	{r7, lr}
 80281ca:	b082      	sub	sp, #8
 80281cc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80281ce:	2300      	movs	r3, #0
 80281d0:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80281d2:	4b4b      	ldr	r3, [pc, #300]	; (8028300 <HAL_FLASH_IRQHandler+0x138>)
 80281d4:	68db      	ldr	r3, [r3, #12]
 80281d6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80281da:	2b00      	cmp	r3, #0
 80281dc:	d020      	beq.n	8028220 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80281de:	4b49      	ldr	r3, [pc, #292]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 80281e0:	781b      	ldrb	r3, [r3, #0]
 80281e2:	b2db      	uxtb	r3, r3
 80281e4:	2b01      	cmp	r3, #1
 80281e6:	d107      	bne.n	80281f8 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 80281e8:	4b46      	ldr	r3, [pc, #280]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 80281ea:	68db      	ldr	r3, [r3, #12]
 80281ec:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 80281ee:	4b45      	ldr	r3, [pc, #276]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 80281f0:	f04f 32ff 	mov.w	r2, #4294967295
 80281f4:	60da      	str	r2, [r3, #12]
 80281f6:	e00b      	b.n	8028210 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80281f8:	4b42      	ldr	r3, [pc, #264]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 80281fa:	781b      	ldrb	r3, [r3, #0]
 80281fc:	b2db      	uxtb	r3, r3
 80281fe:	2b02      	cmp	r3, #2
 8028200:	d103      	bne.n	802820a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8028202:	4b40      	ldr	r3, [pc, #256]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 8028204:	691b      	ldr	r3, [r3, #16]
 8028206:	607b      	str	r3, [r7, #4]
 8028208:	e002      	b.n	8028210 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 802820a:	4b3e      	ldr	r3, [pc, #248]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 802820c:	695b      	ldr	r3, [r3, #20]
 802820e:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8028210:	f000 f99a 	bl	8028548 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8028214:	6878      	ldr	r0, [r7, #4]
 8028216:	f000 f881 	bl	802831c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 802821a:	4b3a      	ldr	r3, [pc, #232]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 802821c:	2200      	movs	r2, #0
 802821e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8028220:	4b37      	ldr	r3, [pc, #220]	; (8028300 <HAL_FLASH_IRQHandler+0x138>)
 8028222:	68db      	ldr	r3, [r3, #12]
 8028224:	f003 0301 	and.w	r3, r3, #1
 8028228:	2b00      	cmp	r3, #0
 802822a:	d04a      	beq.n	80282c2 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 802822c:	4b34      	ldr	r3, [pc, #208]	; (8028300 <HAL_FLASH_IRQHandler+0x138>)
 802822e:	2201      	movs	r2, #1
 8028230:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8028232:	4b34      	ldr	r3, [pc, #208]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 8028234:	781b      	ldrb	r3, [r3, #0]
 8028236:	b2db      	uxtb	r3, r3
 8028238:	2b01      	cmp	r3, #1
 802823a:	d12d      	bne.n	8028298 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 802823c:	4b31      	ldr	r3, [pc, #196]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 802823e:	685b      	ldr	r3, [r3, #4]
 8028240:	3b01      	subs	r3, #1
 8028242:	4a30      	ldr	r2, [pc, #192]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 8028244:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8028246:	4b2f      	ldr	r3, [pc, #188]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 8028248:	685b      	ldr	r3, [r3, #4]
 802824a:	2b00      	cmp	r3, #0
 802824c:	d015      	beq.n	802827a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 802824e:	4b2d      	ldr	r3, [pc, #180]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 8028250:	68db      	ldr	r3, [r3, #12]
 8028252:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8028254:	6878      	ldr	r0, [r7, #4]
 8028256:	f000 f857 	bl	8028308 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 802825a:	4b2a      	ldr	r3, [pc, #168]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 802825c:	68db      	ldr	r3, [r3, #12]
 802825e:	3301      	adds	r3, #1
 8028260:	4a28      	ldr	r2, [pc, #160]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 8028262:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8028264:	4b27      	ldr	r3, [pc, #156]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 8028266:	68db      	ldr	r3, [r3, #12]
 8028268:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 802826a:	4b26      	ldr	r3, [pc, #152]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 802826c:	7a1b      	ldrb	r3, [r3, #8]
 802826e:	b2db      	uxtb	r3, r3
 8028270:	4619      	mov	r1, r3
 8028272:	6878      	ldr	r0, [r7, #4]
 8028274:	f000 fa52 	bl	802871c <FLASH_Erase_Sector>
 8028278:	e023      	b.n	80282c2 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 802827a:	f04f 33ff 	mov.w	r3, #4294967295
 802827e:	607b      	str	r3, [r7, #4]
 8028280:	4a20      	ldr	r2, [pc, #128]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 8028282:	687b      	ldr	r3, [r7, #4]
 8028284:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8028286:	4b1f      	ldr	r3, [pc, #124]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 8028288:	2200      	movs	r2, #0
 802828a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 802828c:	f000 fa8e 	bl	80287ac <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8028290:	6878      	ldr	r0, [r7, #4]
 8028292:	f000 f839 	bl	8028308 <HAL_FLASH_EndOfOperationCallback>
 8028296:	e014      	b.n	80282c2 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8028298:	4b1a      	ldr	r3, [pc, #104]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 802829a:	781b      	ldrb	r3, [r3, #0]
 802829c:	b2db      	uxtb	r3, r3
 802829e:	2b02      	cmp	r3, #2
 80282a0:	d107      	bne.n	80282b2 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80282a2:	f000 fa83 	bl	80287ac <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80282a6:	4b17      	ldr	r3, [pc, #92]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 80282a8:	691b      	ldr	r3, [r3, #16]
 80282aa:	4618      	mov	r0, r3
 80282ac:	f000 f82c 	bl	8028308 <HAL_FLASH_EndOfOperationCallback>
 80282b0:	e004      	b.n	80282bc <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80282b2:	4b14      	ldr	r3, [pc, #80]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 80282b4:	695b      	ldr	r3, [r3, #20]
 80282b6:	4618      	mov	r0, r3
 80282b8:	f000 f826 	bl	8028308 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80282bc:	4b11      	ldr	r3, [pc, #68]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 80282be:	2200      	movs	r2, #0
 80282c0:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80282c2:	4b10      	ldr	r3, [pc, #64]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 80282c4:	781b      	ldrb	r3, [r3, #0]
 80282c6:	b2db      	uxtb	r3, r3
 80282c8:	2b00      	cmp	r3, #0
 80282ca:	d114      	bne.n	80282f6 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80282cc:	4b0c      	ldr	r3, [pc, #48]	; (8028300 <HAL_FLASH_IRQHandler+0x138>)
 80282ce:	691b      	ldr	r3, [r3, #16]
 80282d0:	4a0b      	ldr	r2, [pc, #44]	; (8028300 <HAL_FLASH_IRQHandler+0x138>)
 80282d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80282d6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80282d8:	4b09      	ldr	r3, [pc, #36]	; (8028300 <HAL_FLASH_IRQHandler+0x138>)
 80282da:	691b      	ldr	r3, [r3, #16]
 80282dc:	4a08      	ldr	r2, [pc, #32]	; (8028300 <HAL_FLASH_IRQHandler+0x138>)
 80282de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80282e2:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80282e4:	4b06      	ldr	r3, [pc, #24]	; (8028300 <HAL_FLASH_IRQHandler+0x138>)
 80282e6:	691b      	ldr	r3, [r3, #16]
 80282e8:	4a05      	ldr	r2, [pc, #20]	; (8028300 <HAL_FLASH_IRQHandler+0x138>)
 80282ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80282ee:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80282f0:	4b04      	ldr	r3, [pc, #16]	; (8028304 <HAL_FLASH_IRQHandler+0x13c>)
 80282f2:	2200      	movs	r2, #0
 80282f4:	761a      	strb	r2, [r3, #24]
  }
}
 80282f6:	bf00      	nop
 80282f8:	3708      	adds	r7, #8
 80282fa:	46bd      	mov	sp, r7
 80282fc:	bd80      	pop	{r7, pc}
 80282fe:	bf00      	nop
 8028300:	40023c00 	.word	0x40023c00
 8028304:	20005854 	.word	0x20005854

08028308 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8028308:	b480      	push	{r7}
 802830a:	b083      	sub	sp, #12
 802830c:	af00      	add	r7, sp, #0
 802830e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8028310:	bf00      	nop
 8028312:	370c      	adds	r7, #12
 8028314:	46bd      	mov	sp, r7
 8028316:	f85d 7b04 	ldr.w	r7, [sp], #4
 802831a:	4770      	bx	lr

0802831c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 802831c:	b480      	push	{r7}
 802831e:	b083      	sub	sp, #12
 8028320:	af00      	add	r7, sp, #0
 8028322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8028324:	bf00      	nop
 8028326:	370c      	adds	r7, #12
 8028328:	46bd      	mov	sp, r7
 802832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802832e:	4770      	bx	lr

08028330 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8028330:	b480      	push	{r7}
 8028332:	b083      	sub	sp, #12
 8028334:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8028336:	2300      	movs	r3, #0
 8028338:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802833a:	4b0b      	ldr	r3, [pc, #44]	; (8028368 <HAL_FLASH_Unlock+0x38>)
 802833c:	691b      	ldr	r3, [r3, #16]
 802833e:	2b00      	cmp	r3, #0
 8028340:	da0b      	bge.n	802835a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8028342:	4b09      	ldr	r3, [pc, #36]	; (8028368 <HAL_FLASH_Unlock+0x38>)
 8028344:	4a09      	ldr	r2, [pc, #36]	; (802836c <HAL_FLASH_Unlock+0x3c>)
 8028346:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8028348:	4b07      	ldr	r3, [pc, #28]	; (8028368 <HAL_FLASH_Unlock+0x38>)
 802834a:	4a09      	ldr	r2, [pc, #36]	; (8028370 <HAL_FLASH_Unlock+0x40>)
 802834c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802834e:	4b06      	ldr	r3, [pc, #24]	; (8028368 <HAL_FLASH_Unlock+0x38>)
 8028350:	691b      	ldr	r3, [r3, #16]
 8028352:	2b00      	cmp	r3, #0
 8028354:	da01      	bge.n	802835a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8028356:	2301      	movs	r3, #1
 8028358:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 802835a:	79fb      	ldrb	r3, [r7, #7]
}
 802835c:	4618      	mov	r0, r3
 802835e:	370c      	adds	r7, #12
 8028360:	46bd      	mov	sp, r7
 8028362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028366:	4770      	bx	lr
 8028368:	40023c00 	.word	0x40023c00
 802836c:	45670123 	.word	0x45670123
 8028370:	cdef89ab 	.word	0xcdef89ab

08028374 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8028374:	b480      	push	{r7}
 8028376:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8028378:	4b05      	ldr	r3, [pc, #20]	; (8028390 <HAL_FLASH_Lock+0x1c>)
 802837a:	691b      	ldr	r3, [r3, #16]
 802837c:	4a04      	ldr	r2, [pc, #16]	; (8028390 <HAL_FLASH_Lock+0x1c>)
 802837e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8028382:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8028384:	2300      	movs	r3, #0
}
 8028386:	4618      	mov	r0, r3
 8028388:	46bd      	mov	sp, r7
 802838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802838e:	4770      	bx	lr
 8028390:	40023c00 	.word	0x40023c00

08028394 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8028394:	b580      	push	{r7, lr}
 8028396:	b084      	sub	sp, #16
 8028398:	af00      	add	r7, sp, #0
 802839a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802839c:	2300      	movs	r3, #0
 802839e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80283a0:	4b1a      	ldr	r3, [pc, #104]	; (802840c <FLASH_WaitForLastOperation+0x78>)
 80283a2:	2200      	movs	r2, #0
 80283a4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80283a6:	f7ff fc85 	bl	8027cb4 <HAL_GetTick>
 80283aa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80283ac:	e010      	b.n	80283d0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80283ae:	687b      	ldr	r3, [r7, #4]
 80283b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80283b4:	d00c      	beq.n	80283d0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80283b6:	687b      	ldr	r3, [r7, #4]
 80283b8:	2b00      	cmp	r3, #0
 80283ba:	d007      	beq.n	80283cc <FLASH_WaitForLastOperation+0x38>
 80283bc:	f7ff fc7a 	bl	8027cb4 <HAL_GetTick>
 80283c0:	4602      	mov	r2, r0
 80283c2:	68fb      	ldr	r3, [r7, #12]
 80283c4:	1ad3      	subs	r3, r2, r3
 80283c6:	687a      	ldr	r2, [r7, #4]
 80283c8:	429a      	cmp	r2, r3
 80283ca:	d201      	bcs.n	80283d0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80283cc:	2303      	movs	r3, #3
 80283ce:	e019      	b.n	8028404 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80283d0:	4b0f      	ldr	r3, [pc, #60]	; (8028410 <FLASH_WaitForLastOperation+0x7c>)
 80283d2:	68db      	ldr	r3, [r3, #12]
 80283d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80283d8:	2b00      	cmp	r3, #0
 80283da:	d1e8      	bne.n	80283ae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80283dc:	4b0c      	ldr	r3, [pc, #48]	; (8028410 <FLASH_WaitForLastOperation+0x7c>)
 80283de:	68db      	ldr	r3, [r3, #12]
 80283e0:	f003 0301 	and.w	r3, r3, #1
 80283e4:	2b00      	cmp	r3, #0
 80283e6:	d002      	beq.n	80283ee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80283e8:	4b09      	ldr	r3, [pc, #36]	; (8028410 <FLASH_WaitForLastOperation+0x7c>)
 80283ea:	2201      	movs	r2, #1
 80283ec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80283ee:	4b08      	ldr	r3, [pc, #32]	; (8028410 <FLASH_WaitForLastOperation+0x7c>)
 80283f0:	68db      	ldr	r3, [r3, #12]
 80283f2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80283f6:	2b00      	cmp	r3, #0
 80283f8:	d003      	beq.n	8028402 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80283fa:	f000 f8a5 	bl	8028548 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80283fe:	2301      	movs	r3, #1
 8028400:	e000      	b.n	8028404 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8028402:	2300      	movs	r3, #0
  
}  
 8028404:	4618      	mov	r0, r3
 8028406:	3710      	adds	r7, #16
 8028408:	46bd      	mov	sp, r7
 802840a:	bd80      	pop	{r7, pc}
 802840c:	20005854 	.word	0x20005854
 8028410:	40023c00 	.word	0x40023c00

08028414 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8028414:	b480      	push	{r7}
 8028416:	b085      	sub	sp, #20
 8028418:	af00      	add	r7, sp, #0
 802841a:	60f8      	str	r0, [r7, #12]
 802841c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8028420:	4b14      	ldr	r3, [pc, #80]	; (8028474 <FLASH_Program_DoubleWord+0x60>)
 8028422:	691b      	ldr	r3, [r3, #16]
 8028424:	4a13      	ldr	r2, [pc, #76]	; (8028474 <FLASH_Program_DoubleWord+0x60>)
 8028426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802842a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 802842c:	4b11      	ldr	r3, [pc, #68]	; (8028474 <FLASH_Program_DoubleWord+0x60>)
 802842e:	691b      	ldr	r3, [r3, #16]
 8028430:	4a10      	ldr	r2, [pc, #64]	; (8028474 <FLASH_Program_DoubleWord+0x60>)
 8028432:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8028436:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8028438:	4b0e      	ldr	r3, [pc, #56]	; (8028474 <FLASH_Program_DoubleWord+0x60>)
 802843a:	691b      	ldr	r3, [r3, #16]
 802843c:	4a0d      	ldr	r2, [pc, #52]	; (8028474 <FLASH_Program_DoubleWord+0x60>)
 802843e:	f043 0301 	orr.w	r3, r3, #1
 8028442:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8028444:	68fb      	ldr	r3, [r7, #12]
 8028446:	683a      	ldr	r2, [r7, #0]
 8028448:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 802844a:	f3bf 8f6f 	isb	sy
}
 802844e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8028450:	e9d7 0100 	ldrd	r0, r1, [r7]
 8028454:	f04f 0200 	mov.w	r2, #0
 8028458:	f04f 0300 	mov.w	r3, #0
 802845c:	000a      	movs	r2, r1
 802845e:	2300      	movs	r3, #0
 8028460:	68f9      	ldr	r1, [r7, #12]
 8028462:	3104      	adds	r1, #4
 8028464:	4613      	mov	r3, r2
 8028466:	600b      	str	r3, [r1, #0]
}
 8028468:	bf00      	nop
 802846a:	3714      	adds	r7, #20
 802846c:	46bd      	mov	sp, r7
 802846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028472:	4770      	bx	lr
 8028474:	40023c00 	.word	0x40023c00

08028478 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8028478:	b480      	push	{r7}
 802847a:	b083      	sub	sp, #12
 802847c:	af00      	add	r7, sp, #0
 802847e:	6078      	str	r0, [r7, #4]
 8028480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8028482:	4b0d      	ldr	r3, [pc, #52]	; (80284b8 <FLASH_Program_Word+0x40>)
 8028484:	691b      	ldr	r3, [r3, #16]
 8028486:	4a0c      	ldr	r2, [pc, #48]	; (80284b8 <FLASH_Program_Word+0x40>)
 8028488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802848c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 802848e:	4b0a      	ldr	r3, [pc, #40]	; (80284b8 <FLASH_Program_Word+0x40>)
 8028490:	691b      	ldr	r3, [r3, #16]
 8028492:	4a09      	ldr	r2, [pc, #36]	; (80284b8 <FLASH_Program_Word+0x40>)
 8028494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8028498:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802849a:	4b07      	ldr	r3, [pc, #28]	; (80284b8 <FLASH_Program_Word+0x40>)
 802849c:	691b      	ldr	r3, [r3, #16]
 802849e:	4a06      	ldr	r2, [pc, #24]	; (80284b8 <FLASH_Program_Word+0x40>)
 80284a0:	f043 0301 	orr.w	r3, r3, #1
 80284a4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80284a6:	687b      	ldr	r3, [r7, #4]
 80284a8:	683a      	ldr	r2, [r7, #0]
 80284aa:	601a      	str	r2, [r3, #0]
}
 80284ac:	bf00      	nop
 80284ae:	370c      	adds	r7, #12
 80284b0:	46bd      	mov	sp, r7
 80284b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284b6:	4770      	bx	lr
 80284b8:	40023c00 	.word	0x40023c00

080284bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80284bc:	b480      	push	{r7}
 80284be:	b083      	sub	sp, #12
 80284c0:	af00      	add	r7, sp, #0
 80284c2:	6078      	str	r0, [r7, #4]
 80284c4:	460b      	mov	r3, r1
 80284c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80284c8:	4b0d      	ldr	r3, [pc, #52]	; (8028500 <FLASH_Program_HalfWord+0x44>)
 80284ca:	691b      	ldr	r3, [r3, #16]
 80284cc:	4a0c      	ldr	r2, [pc, #48]	; (8028500 <FLASH_Program_HalfWord+0x44>)
 80284ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80284d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80284d4:	4b0a      	ldr	r3, [pc, #40]	; (8028500 <FLASH_Program_HalfWord+0x44>)
 80284d6:	691b      	ldr	r3, [r3, #16]
 80284d8:	4a09      	ldr	r2, [pc, #36]	; (8028500 <FLASH_Program_HalfWord+0x44>)
 80284da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80284de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80284e0:	4b07      	ldr	r3, [pc, #28]	; (8028500 <FLASH_Program_HalfWord+0x44>)
 80284e2:	691b      	ldr	r3, [r3, #16]
 80284e4:	4a06      	ldr	r2, [pc, #24]	; (8028500 <FLASH_Program_HalfWord+0x44>)
 80284e6:	f043 0301 	orr.w	r3, r3, #1
 80284ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80284ec:	687b      	ldr	r3, [r7, #4]
 80284ee:	887a      	ldrh	r2, [r7, #2]
 80284f0:	801a      	strh	r2, [r3, #0]
}
 80284f2:	bf00      	nop
 80284f4:	370c      	adds	r7, #12
 80284f6:	46bd      	mov	sp, r7
 80284f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284fc:	4770      	bx	lr
 80284fe:	bf00      	nop
 8028500:	40023c00 	.word	0x40023c00

08028504 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8028504:	b480      	push	{r7}
 8028506:	b083      	sub	sp, #12
 8028508:	af00      	add	r7, sp, #0
 802850a:	6078      	str	r0, [r7, #4]
 802850c:	460b      	mov	r3, r1
 802850e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8028510:	4b0c      	ldr	r3, [pc, #48]	; (8028544 <FLASH_Program_Byte+0x40>)
 8028512:	691b      	ldr	r3, [r3, #16]
 8028514:	4a0b      	ldr	r2, [pc, #44]	; (8028544 <FLASH_Program_Byte+0x40>)
 8028516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802851a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 802851c:	4b09      	ldr	r3, [pc, #36]	; (8028544 <FLASH_Program_Byte+0x40>)
 802851e:	4a09      	ldr	r2, [pc, #36]	; (8028544 <FLASH_Program_Byte+0x40>)
 8028520:	691b      	ldr	r3, [r3, #16]
 8028522:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8028524:	4b07      	ldr	r3, [pc, #28]	; (8028544 <FLASH_Program_Byte+0x40>)
 8028526:	691b      	ldr	r3, [r3, #16]
 8028528:	4a06      	ldr	r2, [pc, #24]	; (8028544 <FLASH_Program_Byte+0x40>)
 802852a:	f043 0301 	orr.w	r3, r3, #1
 802852e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8028530:	687b      	ldr	r3, [r7, #4]
 8028532:	78fa      	ldrb	r2, [r7, #3]
 8028534:	701a      	strb	r2, [r3, #0]
}
 8028536:	bf00      	nop
 8028538:	370c      	adds	r7, #12
 802853a:	46bd      	mov	sp, r7
 802853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028540:	4770      	bx	lr
 8028542:	bf00      	nop
 8028544:	40023c00 	.word	0x40023c00

08028548 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8028548:	b480      	push	{r7}
 802854a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 802854c:	4b27      	ldr	r3, [pc, #156]	; (80285ec <FLASH_SetErrorCode+0xa4>)
 802854e:	68db      	ldr	r3, [r3, #12]
 8028550:	f003 0310 	and.w	r3, r3, #16
 8028554:	2b00      	cmp	r3, #0
 8028556:	d008      	beq.n	802856a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8028558:	4b25      	ldr	r3, [pc, #148]	; (80285f0 <FLASH_SetErrorCode+0xa8>)
 802855a:	69db      	ldr	r3, [r3, #28]
 802855c:	f043 0310 	orr.w	r3, r3, #16
 8028560:	4a23      	ldr	r2, [pc, #140]	; (80285f0 <FLASH_SetErrorCode+0xa8>)
 8028562:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8028564:	4b21      	ldr	r3, [pc, #132]	; (80285ec <FLASH_SetErrorCode+0xa4>)
 8028566:	2210      	movs	r2, #16
 8028568:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 802856a:	4b20      	ldr	r3, [pc, #128]	; (80285ec <FLASH_SetErrorCode+0xa4>)
 802856c:	68db      	ldr	r3, [r3, #12]
 802856e:	f003 0320 	and.w	r3, r3, #32
 8028572:	2b00      	cmp	r3, #0
 8028574:	d008      	beq.n	8028588 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8028576:	4b1e      	ldr	r3, [pc, #120]	; (80285f0 <FLASH_SetErrorCode+0xa8>)
 8028578:	69db      	ldr	r3, [r3, #28]
 802857a:	f043 0308 	orr.w	r3, r3, #8
 802857e:	4a1c      	ldr	r2, [pc, #112]	; (80285f0 <FLASH_SetErrorCode+0xa8>)
 8028580:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8028582:	4b1a      	ldr	r3, [pc, #104]	; (80285ec <FLASH_SetErrorCode+0xa4>)
 8028584:	2220      	movs	r2, #32
 8028586:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8028588:	4b18      	ldr	r3, [pc, #96]	; (80285ec <FLASH_SetErrorCode+0xa4>)
 802858a:	68db      	ldr	r3, [r3, #12]
 802858c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028590:	2b00      	cmp	r3, #0
 8028592:	d008      	beq.n	80285a6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8028594:	4b16      	ldr	r3, [pc, #88]	; (80285f0 <FLASH_SetErrorCode+0xa8>)
 8028596:	69db      	ldr	r3, [r3, #28]
 8028598:	f043 0304 	orr.w	r3, r3, #4
 802859c:	4a14      	ldr	r2, [pc, #80]	; (80285f0 <FLASH_SetErrorCode+0xa8>)
 802859e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80285a0:	4b12      	ldr	r3, [pc, #72]	; (80285ec <FLASH_SetErrorCode+0xa4>)
 80285a2:	2240      	movs	r2, #64	; 0x40
 80285a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80285a6:	4b11      	ldr	r3, [pc, #68]	; (80285ec <FLASH_SetErrorCode+0xa4>)
 80285a8:	68db      	ldr	r3, [r3, #12]
 80285aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80285ae:	2b00      	cmp	r3, #0
 80285b0:	d008      	beq.n	80285c4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80285b2:	4b0f      	ldr	r3, [pc, #60]	; (80285f0 <FLASH_SetErrorCode+0xa8>)
 80285b4:	69db      	ldr	r3, [r3, #28]
 80285b6:	f043 0302 	orr.w	r3, r3, #2
 80285ba:	4a0d      	ldr	r2, [pc, #52]	; (80285f0 <FLASH_SetErrorCode+0xa8>)
 80285bc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80285be:	4b0b      	ldr	r3, [pc, #44]	; (80285ec <FLASH_SetErrorCode+0xa4>)
 80285c0:	2280      	movs	r2, #128	; 0x80
 80285c2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80285c4:	4b09      	ldr	r3, [pc, #36]	; (80285ec <FLASH_SetErrorCode+0xa4>)
 80285c6:	68db      	ldr	r3, [r3, #12]
 80285c8:	f003 0302 	and.w	r3, r3, #2
 80285cc:	2b00      	cmp	r3, #0
 80285ce:	d008      	beq.n	80285e2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80285d0:	4b07      	ldr	r3, [pc, #28]	; (80285f0 <FLASH_SetErrorCode+0xa8>)
 80285d2:	69db      	ldr	r3, [r3, #28]
 80285d4:	f043 0320 	orr.w	r3, r3, #32
 80285d8:	4a05      	ldr	r2, [pc, #20]	; (80285f0 <FLASH_SetErrorCode+0xa8>)
 80285da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80285dc:	4b03      	ldr	r3, [pc, #12]	; (80285ec <FLASH_SetErrorCode+0xa4>)
 80285de:	2202      	movs	r2, #2
 80285e0:	60da      	str	r2, [r3, #12]
  }
}
 80285e2:	bf00      	nop
 80285e4:	46bd      	mov	sp, r7
 80285e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285ea:	4770      	bx	lr
 80285ec:	40023c00 	.word	0x40023c00
 80285f0:	20005854 	.word	0x20005854

080285f4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80285f4:	b580      	push	{r7, lr}
 80285f6:	b084      	sub	sp, #16
 80285f8:	af00      	add	r7, sp, #0
 80285fa:	6078      	str	r0, [r7, #4]
 80285fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80285fe:	2301      	movs	r3, #1
 8028600:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8028602:	2300      	movs	r3, #0
 8028604:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8028606:	4b31      	ldr	r3, [pc, #196]	; (80286cc <HAL_FLASHEx_Erase+0xd8>)
 8028608:	7e1b      	ldrb	r3, [r3, #24]
 802860a:	2b01      	cmp	r3, #1
 802860c:	d101      	bne.n	8028612 <HAL_FLASHEx_Erase+0x1e>
 802860e:	2302      	movs	r3, #2
 8028610:	e058      	b.n	80286c4 <HAL_FLASHEx_Erase+0xd0>
 8028612:	4b2e      	ldr	r3, [pc, #184]	; (80286cc <HAL_FLASHEx_Erase+0xd8>)
 8028614:	2201      	movs	r2, #1
 8028616:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8028618:	f24c 3050 	movw	r0, #50000	; 0xc350
 802861c:	f7ff feba 	bl	8028394 <FLASH_WaitForLastOperation>
 8028620:	4603      	mov	r3, r0
 8028622:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8028624:	7bfb      	ldrb	r3, [r7, #15]
 8028626:	2b00      	cmp	r3, #0
 8028628:	d148      	bne.n	80286bc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802862a:	683b      	ldr	r3, [r7, #0]
 802862c:	f04f 32ff 	mov.w	r2, #4294967295
 8028630:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8028632:	687b      	ldr	r3, [r7, #4]
 8028634:	681b      	ldr	r3, [r3, #0]
 8028636:	2b01      	cmp	r3, #1
 8028638:	d115      	bne.n	8028666 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802863a:	687b      	ldr	r3, [r7, #4]
 802863c:	691b      	ldr	r3, [r3, #16]
 802863e:	b2da      	uxtb	r2, r3
 8028640:	687b      	ldr	r3, [r7, #4]
 8028642:	685b      	ldr	r3, [r3, #4]
 8028644:	4619      	mov	r1, r3
 8028646:	4610      	mov	r0, r2
 8028648:	f000 f844 	bl	80286d4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802864c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028650:	f7ff fea0 	bl	8028394 <FLASH_WaitForLastOperation>
 8028654:	4603      	mov	r3, r0
 8028656:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8028658:	4b1d      	ldr	r3, [pc, #116]	; (80286d0 <HAL_FLASHEx_Erase+0xdc>)
 802865a:	691b      	ldr	r3, [r3, #16]
 802865c:	4a1c      	ldr	r2, [pc, #112]	; (80286d0 <HAL_FLASHEx_Erase+0xdc>)
 802865e:	f023 0304 	bic.w	r3, r3, #4
 8028662:	6113      	str	r3, [r2, #16]
 8028664:	e028      	b.n	80286b8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8028666:	687b      	ldr	r3, [r7, #4]
 8028668:	689b      	ldr	r3, [r3, #8]
 802866a:	60bb      	str	r3, [r7, #8]
 802866c:	e01c      	b.n	80286a8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 802866e:	687b      	ldr	r3, [r7, #4]
 8028670:	691b      	ldr	r3, [r3, #16]
 8028672:	b2db      	uxtb	r3, r3
 8028674:	4619      	mov	r1, r3
 8028676:	68b8      	ldr	r0, [r7, #8]
 8028678:	f000 f850 	bl	802871c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802867c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028680:	f7ff fe88 	bl	8028394 <FLASH_WaitForLastOperation>
 8028684:	4603      	mov	r3, r0
 8028686:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8028688:	4b11      	ldr	r3, [pc, #68]	; (80286d0 <HAL_FLASHEx_Erase+0xdc>)
 802868a:	691b      	ldr	r3, [r3, #16]
 802868c:	4a10      	ldr	r2, [pc, #64]	; (80286d0 <HAL_FLASHEx_Erase+0xdc>)
 802868e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8028692:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8028694:	7bfb      	ldrb	r3, [r7, #15]
 8028696:	2b00      	cmp	r3, #0
 8028698:	d003      	beq.n	80286a2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 802869a:	683b      	ldr	r3, [r7, #0]
 802869c:	68ba      	ldr	r2, [r7, #8]
 802869e:	601a      	str	r2, [r3, #0]
          break;
 80286a0:	e00a      	b.n	80286b8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80286a2:	68bb      	ldr	r3, [r7, #8]
 80286a4:	3301      	adds	r3, #1
 80286a6:	60bb      	str	r3, [r7, #8]
 80286a8:	687b      	ldr	r3, [r7, #4]
 80286aa:	68da      	ldr	r2, [r3, #12]
 80286ac:	687b      	ldr	r3, [r7, #4]
 80286ae:	689b      	ldr	r3, [r3, #8]
 80286b0:	4413      	add	r3, r2
 80286b2:	68ba      	ldr	r2, [r7, #8]
 80286b4:	429a      	cmp	r2, r3
 80286b6:	d3da      	bcc.n	802866e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80286b8:	f000 f878 	bl	80287ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80286bc:	4b03      	ldr	r3, [pc, #12]	; (80286cc <HAL_FLASHEx_Erase+0xd8>)
 80286be:	2200      	movs	r2, #0
 80286c0:	761a      	strb	r2, [r3, #24]

  return status;
 80286c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80286c4:	4618      	mov	r0, r3
 80286c6:	3710      	adds	r7, #16
 80286c8:	46bd      	mov	sp, r7
 80286ca:	bd80      	pop	{r7, pc}
 80286cc:	20005854 	.word	0x20005854
 80286d0:	40023c00 	.word	0x40023c00

080286d4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80286d4:	b480      	push	{r7}
 80286d6:	b083      	sub	sp, #12
 80286d8:	af00      	add	r7, sp, #0
 80286da:	4603      	mov	r3, r0
 80286dc:	6039      	str	r1, [r7, #0]
 80286de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80286e0:	4b0d      	ldr	r3, [pc, #52]	; (8028718 <FLASH_MassErase+0x44>)
 80286e2:	691b      	ldr	r3, [r3, #16]
 80286e4:	4a0c      	ldr	r2, [pc, #48]	; (8028718 <FLASH_MassErase+0x44>)
 80286e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80286ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80286ec:	4b0a      	ldr	r3, [pc, #40]	; (8028718 <FLASH_MassErase+0x44>)
 80286ee:	691b      	ldr	r3, [r3, #16]
 80286f0:	4a09      	ldr	r2, [pc, #36]	; (8028718 <FLASH_MassErase+0x44>)
 80286f2:	f043 0304 	orr.w	r3, r3, #4
 80286f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80286f8:	4b07      	ldr	r3, [pc, #28]	; (8028718 <FLASH_MassErase+0x44>)
 80286fa:	691a      	ldr	r2, [r3, #16]
 80286fc:	79fb      	ldrb	r3, [r7, #7]
 80286fe:	021b      	lsls	r3, r3, #8
 8028700:	4313      	orrs	r3, r2
 8028702:	4a05      	ldr	r2, [pc, #20]	; (8028718 <FLASH_MassErase+0x44>)
 8028704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028708:	6113      	str	r3, [r2, #16]
}
 802870a:	bf00      	nop
 802870c:	370c      	adds	r7, #12
 802870e:	46bd      	mov	sp, r7
 8028710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028714:	4770      	bx	lr
 8028716:	bf00      	nop
 8028718:	40023c00 	.word	0x40023c00

0802871c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 802871c:	b480      	push	{r7}
 802871e:	b085      	sub	sp, #20
 8028720:	af00      	add	r7, sp, #0
 8028722:	6078      	str	r0, [r7, #4]
 8028724:	460b      	mov	r3, r1
 8028726:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8028728:	2300      	movs	r3, #0
 802872a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 802872c:	78fb      	ldrb	r3, [r7, #3]
 802872e:	2b00      	cmp	r3, #0
 8028730:	d102      	bne.n	8028738 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8028732:	2300      	movs	r3, #0
 8028734:	60fb      	str	r3, [r7, #12]
 8028736:	e010      	b.n	802875a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8028738:	78fb      	ldrb	r3, [r7, #3]
 802873a:	2b01      	cmp	r3, #1
 802873c:	d103      	bne.n	8028746 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 802873e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8028742:	60fb      	str	r3, [r7, #12]
 8028744:	e009      	b.n	802875a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8028746:	78fb      	ldrb	r3, [r7, #3]
 8028748:	2b02      	cmp	r3, #2
 802874a:	d103      	bne.n	8028754 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 802874c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8028750:	60fb      	str	r3, [r7, #12]
 8028752:	e002      	b.n	802875a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8028754:	f44f 7340 	mov.w	r3, #768	; 0x300
 8028758:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802875a:	4b13      	ldr	r3, [pc, #76]	; (80287a8 <FLASH_Erase_Sector+0x8c>)
 802875c:	691b      	ldr	r3, [r3, #16]
 802875e:	4a12      	ldr	r2, [pc, #72]	; (80287a8 <FLASH_Erase_Sector+0x8c>)
 8028760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028764:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8028766:	4b10      	ldr	r3, [pc, #64]	; (80287a8 <FLASH_Erase_Sector+0x8c>)
 8028768:	691a      	ldr	r2, [r3, #16]
 802876a:	490f      	ldr	r1, [pc, #60]	; (80287a8 <FLASH_Erase_Sector+0x8c>)
 802876c:	68fb      	ldr	r3, [r7, #12]
 802876e:	4313      	orrs	r3, r2
 8028770:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8028772:	4b0d      	ldr	r3, [pc, #52]	; (80287a8 <FLASH_Erase_Sector+0x8c>)
 8028774:	691b      	ldr	r3, [r3, #16]
 8028776:	4a0c      	ldr	r2, [pc, #48]	; (80287a8 <FLASH_Erase_Sector+0x8c>)
 8028778:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 802877c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 802877e:	4b0a      	ldr	r3, [pc, #40]	; (80287a8 <FLASH_Erase_Sector+0x8c>)
 8028780:	691a      	ldr	r2, [r3, #16]
 8028782:	687b      	ldr	r3, [r7, #4]
 8028784:	00db      	lsls	r3, r3, #3
 8028786:	4313      	orrs	r3, r2
 8028788:	4a07      	ldr	r2, [pc, #28]	; (80287a8 <FLASH_Erase_Sector+0x8c>)
 802878a:	f043 0302 	orr.w	r3, r3, #2
 802878e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8028790:	4b05      	ldr	r3, [pc, #20]	; (80287a8 <FLASH_Erase_Sector+0x8c>)
 8028792:	691b      	ldr	r3, [r3, #16]
 8028794:	4a04      	ldr	r2, [pc, #16]	; (80287a8 <FLASH_Erase_Sector+0x8c>)
 8028796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802879a:	6113      	str	r3, [r2, #16]
}
 802879c:	bf00      	nop
 802879e:	3714      	adds	r7, #20
 80287a0:	46bd      	mov	sp, r7
 80287a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287a6:	4770      	bx	lr
 80287a8:	40023c00 	.word	0x40023c00

080287ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80287ac:	b480      	push	{r7}
 80287ae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80287b0:	4b20      	ldr	r3, [pc, #128]	; (8028834 <FLASH_FlushCaches+0x88>)
 80287b2:	681b      	ldr	r3, [r3, #0]
 80287b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80287b8:	2b00      	cmp	r3, #0
 80287ba:	d017      	beq.n	80287ec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80287bc:	4b1d      	ldr	r3, [pc, #116]	; (8028834 <FLASH_FlushCaches+0x88>)
 80287be:	681b      	ldr	r3, [r3, #0]
 80287c0:	4a1c      	ldr	r2, [pc, #112]	; (8028834 <FLASH_FlushCaches+0x88>)
 80287c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80287c6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80287c8:	4b1a      	ldr	r3, [pc, #104]	; (8028834 <FLASH_FlushCaches+0x88>)
 80287ca:	681b      	ldr	r3, [r3, #0]
 80287cc:	4a19      	ldr	r2, [pc, #100]	; (8028834 <FLASH_FlushCaches+0x88>)
 80287ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80287d2:	6013      	str	r3, [r2, #0]
 80287d4:	4b17      	ldr	r3, [pc, #92]	; (8028834 <FLASH_FlushCaches+0x88>)
 80287d6:	681b      	ldr	r3, [r3, #0]
 80287d8:	4a16      	ldr	r2, [pc, #88]	; (8028834 <FLASH_FlushCaches+0x88>)
 80287da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80287de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80287e0:	4b14      	ldr	r3, [pc, #80]	; (8028834 <FLASH_FlushCaches+0x88>)
 80287e2:	681b      	ldr	r3, [r3, #0]
 80287e4:	4a13      	ldr	r2, [pc, #76]	; (8028834 <FLASH_FlushCaches+0x88>)
 80287e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80287ea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80287ec:	4b11      	ldr	r3, [pc, #68]	; (8028834 <FLASH_FlushCaches+0x88>)
 80287ee:	681b      	ldr	r3, [r3, #0]
 80287f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80287f4:	2b00      	cmp	r3, #0
 80287f6:	d017      	beq.n	8028828 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80287f8:	4b0e      	ldr	r3, [pc, #56]	; (8028834 <FLASH_FlushCaches+0x88>)
 80287fa:	681b      	ldr	r3, [r3, #0]
 80287fc:	4a0d      	ldr	r2, [pc, #52]	; (8028834 <FLASH_FlushCaches+0x88>)
 80287fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8028802:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8028804:	4b0b      	ldr	r3, [pc, #44]	; (8028834 <FLASH_FlushCaches+0x88>)
 8028806:	681b      	ldr	r3, [r3, #0]
 8028808:	4a0a      	ldr	r2, [pc, #40]	; (8028834 <FLASH_FlushCaches+0x88>)
 802880a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802880e:	6013      	str	r3, [r2, #0]
 8028810:	4b08      	ldr	r3, [pc, #32]	; (8028834 <FLASH_FlushCaches+0x88>)
 8028812:	681b      	ldr	r3, [r3, #0]
 8028814:	4a07      	ldr	r2, [pc, #28]	; (8028834 <FLASH_FlushCaches+0x88>)
 8028816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802881a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 802881c:	4b05      	ldr	r3, [pc, #20]	; (8028834 <FLASH_FlushCaches+0x88>)
 802881e:	681b      	ldr	r3, [r3, #0]
 8028820:	4a04      	ldr	r2, [pc, #16]	; (8028834 <FLASH_FlushCaches+0x88>)
 8028822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8028826:	6013      	str	r3, [r2, #0]
  }
}
 8028828:	bf00      	nop
 802882a:	46bd      	mov	sp, r7
 802882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028830:	4770      	bx	lr
 8028832:	bf00      	nop
 8028834:	40023c00 	.word	0x40023c00

08028838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8028838:	b480      	push	{r7}
 802883a:	b089      	sub	sp, #36	; 0x24
 802883c:	af00      	add	r7, sp, #0
 802883e:	6078      	str	r0, [r7, #4]
 8028840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8028842:	2300      	movs	r3, #0
 8028844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8028846:	2300      	movs	r3, #0
 8028848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802884a:	2300      	movs	r3, #0
 802884c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802884e:	2300      	movs	r3, #0
 8028850:	61fb      	str	r3, [r7, #28]
 8028852:	e16b      	b.n	8028b2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8028854:	2201      	movs	r2, #1
 8028856:	69fb      	ldr	r3, [r7, #28]
 8028858:	fa02 f303 	lsl.w	r3, r2, r3
 802885c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802885e:	683b      	ldr	r3, [r7, #0]
 8028860:	681b      	ldr	r3, [r3, #0]
 8028862:	697a      	ldr	r2, [r7, #20]
 8028864:	4013      	ands	r3, r2
 8028866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8028868:	693a      	ldr	r2, [r7, #16]
 802886a:	697b      	ldr	r3, [r7, #20]
 802886c:	429a      	cmp	r2, r3
 802886e:	f040 815a 	bne.w	8028b26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8028872:	683b      	ldr	r3, [r7, #0]
 8028874:	685b      	ldr	r3, [r3, #4]
 8028876:	f003 0303 	and.w	r3, r3, #3
 802887a:	2b01      	cmp	r3, #1
 802887c:	d005      	beq.n	802888a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802887e:	683b      	ldr	r3, [r7, #0]
 8028880:	685b      	ldr	r3, [r3, #4]
 8028882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8028886:	2b02      	cmp	r3, #2
 8028888:	d130      	bne.n	80288ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802888a:	687b      	ldr	r3, [r7, #4]
 802888c:	689b      	ldr	r3, [r3, #8]
 802888e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8028890:	69fb      	ldr	r3, [r7, #28]
 8028892:	005b      	lsls	r3, r3, #1
 8028894:	2203      	movs	r2, #3
 8028896:	fa02 f303 	lsl.w	r3, r2, r3
 802889a:	43db      	mvns	r3, r3
 802889c:	69ba      	ldr	r2, [r7, #24]
 802889e:	4013      	ands	r3, r2
 80288a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80288a2:	683b      	ldr	r3, [r7, #0]
 80288a4:	68da      	ldr	r2, [r3, #12]
 80288a6:	69fb      	ldr	r3, [r7, #28]
 80288a8:	005b      	lsls	r3, r3, #1
 80288aa:	fa02 f303 	lsl.w	r3, r2, r3
 80288ae:	69ba      	ldr	r2, [r7, #24]
 80288b0:	4313      	orrs	r3, r2
 80288b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80288b4:	687b      	ldr	r3, [r7, #4]
 80288b6:	69ba      	ldr	r2, [r7, #24]
 80288b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80288ba:	687b      	ldr	r3, [r7, #4]
 80288bc:	685b      	ldr	r3, [r3, #4]
 80288be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80288c0:	2201      	movs	r2, #1
 80288c2:	69fb      	ldr	r3, [r7, #28]
 80288c4:	fa02 f303 	lsl.w	r3, r2, r3
 80288c8:	43db      	mvns	r3, r3
 80288ca:	69ba      	ldr	r2, [r7, #24]
 80288cc:	4013      	ands	r3, r2
 80288ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80288d0:	683b      	ldr	r3, [r7, #0]
 80288d2:	685b      	ldr	r3, [r3, #4]
 80288d4:	091b      	lsrs	r3, r3, #4
 80288d6:	f003 0201 	and.w	r2, r3, #1
 80288da:	69fb      	ldr	r3, [r7, #28]
 80288dc:	fa02 f303 	lsl.w	r3, r2, r3
 80288e0:	69ba      	ldr	r2, [r7, #24]
 80288e2:	4313      	orrs	r3, r2
 80288e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80288e6:	687b      	ldr	r3, [r7, #4]
 80288e8:	69ba      	ldr	r2, [r7, #24]
 80288ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80288ec:	683b      	ldr	r3, [r7, #0]
 80288ee:	685b      	ldr	r3, [r3, #4]
 80288f0:	f003 0303 	and.w	r3, r3, #3
 80288f4:	2b03      	cmp	r3, #3
 80288f6:	d017      	beq.n	8028928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80288f8:	687b      	ldr	r3, [r7, #4]
 80288fa:	68db      	ldr	r3, [r3, #12]
 80288fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80288fe:	69fb      	ldr	r3, [r7, #28]
 8028900:	005b      	lsls	r3, r3, #1
 8028902:	2203      	movs	r2, #3
 8028904:	fa02 f303 	lsl.w	r3, r2, r3
 8028908:	43db      	mvns	r3, r3
 802890a:	69ba      	ldr	r2, [r7, #24]
 802890c:	4013      	ands	r3, r2
 802890e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8028910:	683b      	ldr	r3, [r7, #0]
 8028912:	689a      	ldr	r2, [r3, #8]
 8028914:	69fb      	ldr	r3, [r7, #28]
 8028916:	005b      	lsls	r3, r3, #1
 8028918:	fa02 f303 	lsl.w	r3, r2, r3
 802891c:	69ba      	ldr	r2, [r7, #24]
 802891e:	4313      	orrs	r3, r2
 8028920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8028922:	687b      	ldr	r3, [r7, #4]
 8028924:	69ba      	ldr	r2, [r7, #24]
 8028926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8028928:	683b      	ldr	r3, [r7, #0]
 802892a:	685b      	ldr	r3, [r3, #4]
 802892c:	f003 0303 	and.w	r3, r3, #3
 8028930:	2b02      	cmp	r3, #2
 8028932:	d123      	bne.n	802897c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8028934:	69fb      	ldr	r3, [r7, #28]
 8028936:	08da      	lsrs	r2, r3, #3
 8028938:	687b      	ldr	r3, [r7, #4]
 802893a:	3208      	adds	r2, #8
 802893c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8028942:	69fb      	ldr	r3, [r7, #28]
 8028944:	f003 0307 	and.w	r3, r3, #7
 8028948:	009b      	lsls	r3, r3, #2
 802894a:	220f      	movs	r2, #15
 802894c:	fa02 f303 	lsl.w	r3, r2, r3
 8028950:	43db      	mvns	r3, r3
 8028952:	69ba      	ldr	r2, [r7, #24]
 8028954:	4013      	ands	r3, r2
 8028956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8028958:	683b      	ldr	r3, [r7, #0]
 802895a:	691a      	ldr	r2, [r3, #16]
 802895c:	69fb      	ldr	r3, [r7, #28]
 802895e:	f003 0307 	and.w	r3, r3, #7
 8028962:	009b      	lsls	r3, r3, #2
 8028964:	fa02 f303 	lsl.w	r3, r2, r3
 8028968:	69ba      	ldr	r2, [r7, #24]
 802896a:	4313      	orrs	r3, r2
 802896c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802896e:	69fb      	ldr	r3, [r7, #28]
 8028970:	08da      	lsrs	r2, r3, #3
 8028972:	687b      	ldr	r3, [r7, #4]
 8028974:	3208      	adds	r2, #8
 8028976:	69b9      	ldr	r1, [r7, #24]
 8028978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802897c:	687b      	ldr	r3, [r7, #4]
 802897e:	681b      	ldr	r3, [r3, #0]
 8028980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8028982:	69fb      	ldr	r3, [r7, #28]
 8028984:	005b      	lsls	r3, r3, #1
 8028986:	2203      	movs	r2, #3
 8028988:	fa02 f303 	lsl.w	r3, r2, r3
 802898c:	43db      	mvns	r3, r3
 802898e:	69ba      	ldr	r2, [r7, #24]
 8028990:	4013      	ands	r3, r2
 8028992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8028994:	683b      	ldr	r3, [r7, #0]
 8028996:	685b      	ldr	r3, [r3, #4]
 8028998:	f003 0203 	and.w	r2, r3, #3
 802899c:	69fb      	ldr	r3, [r7, #28]
 802899e:	005b      	lsls	r3, r3, #1
 80289a0:	fa02 f303 	lsl.w	r3, r2, r3
 80289a4:	69ba      	ldr	r2, [r7, #24]
 80289a6:	4313      	orrs	r3, r2
 80289a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80289aa:	687b      	ldr	r3, [r7, #4]
 80289ac:	69ba      	ldr	r2, [r7, #24]
 80289ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80289b0:	683b      	ldr	r3, [r7, #0]
 80289b2:	685b      	ldr	r3, [r3, #4]
 80289b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80289b8:	2b00      	cmp	r3, #0
 80289ba:	f000 80b4 	beq.w	8028b26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80289be:	2300      	movs	r3, #0
 80289c0:	60fb      	str	r3, [r7, #12]
 80289c2:	4b60      	ldr	r3, [pc, #384]	; (8028b44 <HAL_GPIO_Init+0x30c>)
 80289c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80289c6:	4a5f      	ldr	r2, [pc, #380]	; (8028b44 <HAL_GPIO_Init+0x30c>)
 80289c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80289cc:	6453      	str	r3, [r2, #68]	; 0x44
 80289ce:	4b5d      	ldr	r3, [pc, #372]	; (8028b44 <HAL_GPIO_Init+0x30c>)
 80289d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80289d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80289d6:	60fb      	str	r3, [r7, #12]
 80289d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80289da:	4a5b      	ldr	r2, [pc, #364]	; (8028b48 <HAL_GPIO_Init+0x310>)
 80289dc:	69fb      	ldr	r3, [r7, #28]
 80289de:	089b      	lsrs	r3, r3, #2
 80289e0:	3302      	adds	r3, #2
 80289e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80289e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80289e8:	69fb      	ldr	r3, [r7, #28]
 80289ea:	f003 0303 	and.w	r3, r3, #3
 80289ee:	009b      	lsls	r3, r3, #2
 80289f0:	220f      	movs	r2, #15
 80289f2:	fa02 f303 	lsl.w	r3, r2, r3
 80289f6:	43db      	mvns	r3, r3
 80289f8:	69ba      	ldr	r2, [r7, #24]
 80289fa:	4013      	ands	r3, r2
 80289fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80289fe:	687b      	ldr	r3, [r7, #4]
 8028a00:	4a52      	ldr	r2, [pc, #328]	; (8028b4c <HAL_GPIO_Init+0x314>)
 8028a02:	4293      	cmp	r3, r2
 8028a04:	d02b      	beq.n	8028a5e <HAL_GPIO_Init+0x226>
 8028a06:	687b      	ldr	r3, [r7, #4]
 8028a08:	4a51      	ldr	r2, [pc, #324]	; (8028b50 <HAL_GPIO_Init+0x318>)
 8028a0a:	4293      	cmp	r3, r2
 8028a0c:	d025      	beq.n	8028a5a <HAL_GPIO_Init+0x222>
 8028a0e:	687b      	ldr	r3, [r7, #4]
 8028a10:	4a50      	ldr	r2, [pc, #320]	; (8028b54 <HAL_GPIO_Init+0x31c>)
 8028a12:	4293      	cmp	r3, r2
 8028a14:	d01f      	beq.n	8028a56 <HAL_GPIO_Init+0x21e>
 8028a16:	687b      	ldr	r3, [r7, #4]
 8028a18:	4a4f      	ldr	r2, [pc, #316]	; (8028b58 <HAL_GPIO_Init+0x320>)
 8028a1a:	4293      	cmp	r3, r2
 8028a1c:	d019      	beq.n	8028a52 <HAL_GPIO_Init+0x21a>
 8028a1e:	687b      	ldr	r3, [r7, #4]
 8028a20:	4a4e      	ldr	r2, [pc, #312]	; (8028b5c <HAL_GPIO_Init+0x324>)
 8028a22:	4293      	cmp	r3, r2
 8028a24:	d013      	beq.n	8028a4e <HAL_GPIO_Init+0x216>
 8028a26:	687b      	ldr	r3, [r7, #4]
 8028a28:	4a4d      	ldr	r2, [pc, #308]	; (8028b60 <HAL_GPIO_Init+0x328>)
 8028a2a:	4293      	cmp	r3, r2
 8028a2c:	d00d      	beq.n	8028a4a <HAL_GPIO_Init+0x212>
 8028a2e:	687b      	ldr	r3, [r7, #4]
 8028a30:	4a4c      	ldr	r2, [pc, #304]	; (8028b64 <HAL_GPIO_Init+0x32c>)
 8028a32:	4293      	cmp	r3, r2
 8028a34:	d007      	beq.n	8028a46 <HAL_GPIO_Init+0x20e>
 8028a36:	687b      	ldr	r3, [r7, #4]
 8028a38:	4a4b      	ldr	r2, [pc, #300]	; (8028b68 <HAL_GPIO_Init+0x330>)
 8028a3a:	4293      	cmp	r3, r2
 8028a3c:	d101      	bne.n	8028a42 <HAL_GPIO_Init+0x20a>
 8028a3e:	2307      	movs	r3, #7
 8028a40:	e00e      	b.n	8028a60 <HAL_GPIO_Init+0x228>
 8028a42:	2308      	movs	r3, #8
 8028a44:	e00c      	b.n	8028a60 <HAL_GPIO_Init+0x228>
 8028a46:	2306      	movs	r3, #6
 8028a48:	e00a      	b.n	8028a60 <HAL_GPIO_Init+0x228>
 8028a4a:	2305      	movs	r3, #5
 8028a4c:	e008      	b.n	8028a60 <HAL_GPIO_Init+0x228>
 8028a4e:	2304      	movs	r3, #4
 8028a50:	e006      	b.n	8028a60 <HAL_GPIO_Init+0x228>
 8028a52:	2303      	movs	r3, #3
 8028a54:	e004      	b.n	8028a60 <HAL_GPIO_Init+0x228>
 8028a56:	2302      	movs	r3, #2
 8028a58:	e002      	b.n	8028a60 <HAL_GPIO_Init+0x228>
 8028a5a:	2301      	movs	r3, #1
 8028a5c:	e000      	b.n	8028a60 <HAL_GPIO_Init+0x228>
 8028a5e:	2300      	movs	r3, #0
 8028a60:	69fa      	ldr	r2, [r7, #28]
 8028a62:	f002 0203 	and.w	r2, r2, #3
 8028a66:	0092      	lsls	r2, r2, #2
 8028a68:	4093      	lsls	r3, r2
 8028a6a:	69ba      	ldr	r2, [r7, #24]
 8028a6c:	4313      	orrs	r3, r2
 8028a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8028a70:	4935      	ldr	r1, [pc, #212]	; (8028b48 <HAL_GPIO_Init+0x310>)
 8028a72:	69fb      	ldr	r3, [r7, #28]
 8028a74:	089b      	lsrs	r3, r3, #2
 8028a76:	3302      	adds	r3, #2
 8028a78:	69ba      	ldr	r2, [r7, #24]
 8028a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8028a7e:	4b3b      	ldr	r3, [pc, #236]	; (8028b6c <HAL_GPIO_Init+0x334>)
 8028a80:	689b      	ldr	r3, [r3, #8]
 8028a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028a84:	693b      	ldr	r3, [r7, #16]
 8028a86:	43db      	mvns	r3, r3
 8028a88:	69ba      	ldr	r2, [r7, #24]
 8028a8a:	4013      	ands	r3, r2
 8028a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8028a8e:	683b      	ldr	r3, [r7, #0]
 8028a90:	685b      	ldr	r3, [r3, #4]
 8028a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028a96:	2b00      	cmp	r3, #0
 8028a98:	d003      	beq.n	8028aa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8028a9a:	69ba      	ldr	r2, [r7, #24]
 8028a9c:	693b      	ldr	r3, [r7, #16]
 8028a9e:	4313      	orrs	r3, r2
 8028aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8028aa2:	4a32      	ldr	r2, [pc, #200]	; (8028b6c <HAL_GPIO_Init+0x334>)
 8028aa4:	69bb      	ldr	r3, [r7, #24]
 8028aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8028aa8:	4b30      	ldr	r3, [pc, #192]	; (8028b6c <HAL_GPIO_Init+0x334>)
 8028aaa:	68db      	ldr	r3, [r3, #12]
 8028aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028aae:	693b      	ldr	r3, [r7, #16]
 8028ab0:	43db      	mvns	r3, r3
 8028ab2:	69ba      	ldr	r2, [r7, #24]
 8028ab4:	4013      	ands	r3, r2
 8028ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8028ab8:	683b      	ldr	r3, [r7, #0]
 8028aba:	685b      	ldr	r3, [r3, #4]
 8028abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8028ac0:	2b00      	cmp	r3, #0
 8028ac2:	d003      	beq.n	8028acc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8028ac4:	69ba      	ldr	r2, [r7, #24]
 8028ac6:	693b      	ldr	r3, [r7, #16]
 8028ac8:	4313      	orrs	r3, r2
 8028aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8028acc:	4a27      	ldr	r2, [pc, #156]	; (8028b6c <HAL_GPIO_Init+0x334>)
 8028ace:	69bb      	ldr	r3, [r7, #24]
 8028ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8028ad2:	4b26      	ldr	r3, [pc, #152]	; (8028b6c <HAL_GPIO_Init+0x334>)
 8028ad4:	685b      	ldr	r3, [r3, #4]
 8028ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028ad8:	693b      	ldr	r3, [r7, #16]
 8028ada:	43db      	mvns	r3, r3
 8028adc:	69ba      	ldr	r2, [r7, #24]
 8028ade:	4013      	ands	r3, r2
 8028ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8028ae2:	683b      	ldr	r3, [r7, #0]
 8028ae4:	685b      	ldr	r3, [r3, #4]
 8028ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028aea:	2b00      	cmp	r3, #0
 8028aec:	d003      	beq.n	8028af6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8028aee:	69ba      	ldr	r2, [r7, #24]
 8028af0:	693b      	ldr	r3, [r7, #16]
 8028af2:	4313      	orrs	r3, r2
 8028af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8028af6:	4a1d      	ldr	r2, [pc, #116]	; (8028b6c <HAL_GPIO_Init+0x334>)
 8028af8:	69bb      	ldr	r3, [r7, #24]
 8028afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8028afc:	4b1b      	ldr	r3, [pc, #108]	; (8028b6c <HAL_GPIO_Init+0x334>)
 8028afe:	681b      	ldr	r3, [r3, #0]
 8028b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028b02:	693b      	ldr	r3, [r7, #16]
 8028b04:	43db      	mvns	r3, r3
 8028b06:	69ba      	ldr	r2, [r7, #24]
 8028b08:	4013      	ands	r3, r2
 8028b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8028b0c:	683b      	ldr	r3, [r7, #0]
 8028b0e:	685b      	ldr	r3, [r3, #4]
 8028b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8028b14:	2b00      	cmp	r3, #0
 8028b16:	d003      	beq.n	8028b20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8028b18:	69ba      	ldr	r2, [r7, #24]
 8028b1a:	693b      	ldr	r3, [r7, #16]
 8028b1c:	4313      	orrs	r3, r2
 8028b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8028b20:	4a12      	ldr	r2, [pc, #72]	; (8028b6c <HAL_GPIO_Init+0x334>)
 8028b22:	69bb      	ldr	r3, [r7, #24]
 8028b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8028b26:	69fb      	ldr	r3, [r7, #28]
 8028b28:	3301      	adds	r3, #1
 8028b2a:	61fb      	str	r3, [r7, #28]
 8028b2c:	69fb      	ldr	r3, [r7, #28]
 8028b2e:	2b0f      	cmp	r3, #15
 8028b30:	f67f ae90 	bls.w	8028854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8028b34:	bf00      	nop
 8028b36:	bf00      	nop
 8028b38:	3724      	adds	r7, #36	; 0x24
 8028b3a:	46bd      	mov	sp, r7
 8028b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b40:	4770      	bx	lr
 8028b42:	bf00      	nop
 8028b44:	40023800 	.word	0x40023800
 8028b48:	40013800 	.word	0x40013800
 8028b4c:	40020000 	.word	0x40020000
 8028b50:	40020400 	.word	0x40020400
 8028b54:	40020800 	.word	0x40020800
 8028b58:	40020c00 	.word	0x40020c00
 8028b5c:	40021000 	.word	0x40021000
 8028b60:	40021400 	.word	0x40021400
 8028b64:	40021800 	.word	0x40021800
 8028b68:	40021c00 	.word	0x40021c00
 8028b6c:	40013c00 	.word	0x40013c00

08028b70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8028b70:	b480      	push	{r7}
 8028b72:	b087      	sub	sp, #28
 8028b74:	af00      	add	r7, sp, #0
 8028b76:	6078      	str	r0, [r7, #4]
 8028b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8028b7a:	2300      	movs	r3, #0
 8028b7c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8028b7e:	2300      	movs	r3, #0
 8028b80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8028b82:	2300      	movs	r3, #0
 8028b84:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8028b86:	2300      	movs	r3, #0
 8028b88:	617b      	str	r3, [r7, #20]
 8028b8a:	e0cd      	b.n	8028d28 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8028b8c:	2201      	movs	r2, #1
 8028b8e:	697b      	ldr	r3, [r7, #20]
 8028b90:	fa02 f303 	lsl.w	r3, r2, r3
 8028b94:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8028b96:	683a      	ldr	r2, [r7, #0]
 8028b98:	693b      	ldr	r3, [r7, #16]
 8028b9a:	4013      	ands	r3, r2
 8028b9c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8028b9e:	68fa      	ldr	r2, [r7, #12]
 8028ba0:	693b      	ldr	r3, [r7, #16]
 8028ba2:	429a      	cmp	r2, r3
 8028ba4:	f040 80bd 	bne.w	8028d22 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8028ba8:	4a65      	ldr	r2, [pc, #404]	; (8028d40 <HAL_GPIO_DeInit+0x1d0>)
 8028baa:	697b      	ldr	r3, [r7, #20]
 8028bac:	089b      	lsrs	r3, r3, #2
 8028bae:	3302      	adds	r3, #2
 8028bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028bb4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8028bb6:	697b      	ldr	r3, [r7, #20]
 8028bb8:	f003 0303 	and.w	r3, r3, #3
 8028bbc:	009b      	lsls	r3, r3, #2
 8028bbe:	220f      	movs	r2, #15
 8028bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8028bc4:	68ba      	ldr	r2, [r7, #8]
 8028bc6:	4013      	ands	r3, r2
 8028bc8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8028bca:	687b      	ldr	r3, [r7, #4]
 8028bcc:	4a5d      	ldr	r2, [pc, #372]	; (8028d44 <HAL_GPIO_DeInit+0x1d4>)
 8028bce:	4293      	cmp	r3, r2
 8028bd0:	d02b      	beq.n	8028c2a <HAL_GPIO_DeInit+0xba>
 8028bd2:	687b      	ldr	r3, [r7, #4]
 8028bd4:	4a5c      	ldr	r2, [pc, #368]	; (8028d48 <HAL_GPIO_DeInit+0x1d8>)
 8028bd6:	4293      	cmp	r3, r2
 8028bd8:	d025      	beq.n	8028c26 <HAL_GPIO_DeInit+0xb6>
 8028bda:	687b      	ldr	r3, [r7, #4]
 8028bdc:	4a5b      	ldr	r2, [pc, #364]	; (8028d4c <HAL_GPIO_DeInit+0x1dc>)
 8028bde:	4293      	cmp	r3, r2
 8028be0:	d01f      	beq.n	8028c22 <HAL_GPIO_DeInit+0xb2>
 8028be2:	687b      	ldr	r3, [r7, #4]
 8028be4:	4a5a      	ldr	r2, [pc, #360]	; (8028d50 <HAL_GPIO_DeInit+0x1e0>)
 8028be6:	4293      	cmp	r3, r2
 8028be8:	d019      	beq.n	8028c1e <HAL_GPIO_DeInit+0xae>
 8028bea:	687b      	ldr	r3, [r7, #4]
 8028bec:	4a59      	ldr	r2, [pc, #356]	; (8028d54 <HAL_GPIO_DeInit+0x1e4>)
 8028bee:	4293      	cmp	r3, r2
 8028bf0:	d013      	beq.n	8028c1a <HAL_GPIO_DeInit+0xaa>
 8028bf2:	687b      	ldr	r3, [r7, #4]
 8028bf4:	4a58      	ldr	r2, [pc, #352]	; (8028d58 <HAL_GPIO_DeInit+0x1e8>)
 8028bf6:	4293      	cmp	r3, r2
 8028bf8:	d00d      	beq.n	8028c16 <HAL_GPIO_DeInit+0xa6>
 8028bfa:	687b      	ldr	r3, [r7, #4]
 8028bfc:	4a57      	ldr	r2, [pc, #348]	; (8028d5c <HAL_GPIO_DeInit+0x1ec>)
 8028bfe:	4293      	cmp	r3, r2
 8028c00:	d007      	beq.n	8028c12 <HAL_GPIO_DeInit+0xa2>
 8028c02:	687b      	ldr	r3, [r7, #4]
 8028c04:	4a56      	ldr	r2, [pc, #344]	; (8028d60 <HAL_GPIO_DeInit+0x1f0>)
 8028c06:	4293      	cmp	r3, r2
 8028c08:	d101      	bne.n	8028c0e <HAL_GPIO_DeInit+0x9e>
 8028c0a:	2307      	movs	r3, #7
 8028c0c:	e00e      	b.n	8028c2c <HAL_GPIO_DeInit+0xbc>
 8028c0e:	2308      	movs	r3, #8
 8028c10:	e00c      	b.n	8028c2c <HAL_GPIO_DeInit+0xbc>
 8028c12:	2306      	movs	r3, #6
 8028c14:	e00a      	b.n	8028c2c <HAL_GPIO_DeInit+0xbc>
 8028c16:	2305      	movs	r3, #5
 8028c18:	e008      	b.n	8028c2c <HAL_GPIO_DeInit+0xbc>
 8028c1a:	2304      	movs	r3, #4
 8028c1c:	e006      	b.n	8028c2c <HAL_GPIO_DeInit+0xbc>
 8028c1e:	2303      	movs	r3, #3
 8028c20:	e004      	b.n	8028c2c <HAL_GPIO_DeInit+0xbc>
 8028c22:	2302      	movs	r3, #2
 8028c24:	e002      	b.n	8028c2c <HAL_GPIO_DeInit+0xbc>
 8028c26:	2301      	movs	r3, #1
 8028c28:	e000      	b.n	8028c2c <HAL_GPIO_DeInit+0xbc>
 8028c2a:	2300      	movs	r3, #0
 8028c2c:	697a      	ldr	r2, [r7, #20]
 8028c2e:	f002 0203 	and.w	r2, r2, #3
 8028c32:	0092      	lsls	r2, r2, #2
 8028c34:	4093      	lsls	r3, r2
 8028c36:	68ba      	ldr	r2, [r7, #8]
 8028c38:	429a      	cmp	r2, r3
 8028c3a:	d132      	bne.n	8028ca2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8028c3c:	4b49      	ldr	r3, [pc, #292]	; (8028d64 <HAL_GPIO_DeInit+0x1f4>)
 8028c3e:	681a      	ldr	r2, [r3, #0]
 8028c40:	68fb      	ldr	r3, [r7, #12]
 8028c42:	43db      	mvns	r3, r3
 8028c44:	4947      	ldr	r1, [pc, #284]	; (8028d64 <HAL_GPIO_DeInit+0x1f4>)
 8028c46:	4013      	ands	r3, r2
 8028c48:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8028c4a:	4b46      	ldr	r3, [pc, #280]	; (8028d64 <HAL_GPIO_DeInit+0x1f4>)
 8028c4c:	685a      	ldr	r2, [r3, #4]
 8028c4e:	68fb      	ldr	r3, [r7, #12]
 8028c50:	43db      	mvns	r3, r3
 8028c52:	4944      	ldr	r1, [pc, #272]	; (8028d64 <HAL_GPIO_DeInit+0x1f4>)
 8028c54:	4013      	ands	r3, r2
 8028c56:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8028c58:	4b42      	ldr	r3, [pc, #264]	; (8028d64 <HAL_GPIO_DeInit+0x1f4>)
 8028c5a:	68da      	ldr	r2, [r3, #12]
 8028c5c:	68fb      	ldr	r3, [r7, #12]
 8028c5e:	43db      	mvns	r3, r3
 8028c60:	4940      	ldr	r1, [pc, #256]	; (8028d64 <HAL_GPIO_DeInit+0x1f4>)
 8028c62:	4013      	ands	r3, r2
 8028c64:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8028c66:	4b3f      	ldr	r3, [pc, #252]	; (8028d64 <HAL_GPIO_DeInit+0x1f4>)
 8028c68:	689a      	ldr	r2, [r3, #8]
 8028c6a:	68fb      	ldr	r3, [r7, #12]
 8028c6c:	43db      	mvns	r3, r3
 8028c6e:	493d      	ldr	r1, [pc, #244]	; (8028d64 <HAL_GPIO_DeInit+0x1f4>)
 8028c70:	4013      	ands	r3, r2
 8028c72:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8028c74:	697b      	ldr	r3, [r7, #20]
 8028c76:	f003 0303 	and.w	r3, r3, #3
 8028c7a:	009b      	lsls	r3, r3, #2
 8028c7c:	220f      	movs	r2, #15
 8028c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8028c82:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8028c84:	4a2e      	ldr	r2, [pc, #184]	; (8028d40 <HAL_GPIO_DeInit+0x1d0>)
 8028c86:	697b      	ldr	r3, [r7, #20]
 8028c88:	089b      	lsrs	r3, r3, #2
 8028c8a:	3302      	adds	r3, #2
 8028c8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8028c90:	68bb      	ldr	r3, [r7, #8]
 8028c92:	43da      	mvns	r2, r3
 8028c94:	482a      	ldr	r0, [pc, #168]	; (8028d40 <HAL_GPIO_DeInit+0x1d0>)
 8028c96:	697b      	ldr	r3, [r7, #20]
 8028c98:	089b      	lsrs	r3, r3, #2
 8028c9a:	400a      	ands	r2, r1
 8028c9c:	3302      	adds	r3, #2
 8028c9e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8028ca2:	687b      	ldr	r3, [r7, #4]
 8028ca4:	681a      	ldr	r2, [r3, #0]
 8028ca6:	697b      	ldr	r3, [r7, #20]
 8028ca8:	005b      	lsls	r3, r3, #1
 8028caa:	2103      	movs	r1, #3
 8028cac:	fa01 f303 	lsl.w	r3, r1, r3
 8028cb0:	43db      	mvns	r3, r3
 8028cb2:	401a      	ands	r2, r3
 8028cb4:	687b      	ldr	r3, [r7, #4]
 8028cb6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8028cb8:	697b      	ldr	r3, [r7, #20]
 8028cba:	08da      	lsrs	r2, r3, #3
 8028cbc:	687b      	ldr	r3, [r7, #4]
 8028cbe:	3208      	adds	r2, #8
 8028cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028cc4:	697b      	ldr	r3, [r7, #20]
 8028cc6:	f003 0307 	and.w	r3, r3, #7
 8028cca:	009b      	lsls	r3, r3, #2
 8028ccc:	220f      	movs	r2, #15
 8028cce:	fa02 f303 	lsl.w	r3, r2, r3
 8028cd2:	43db      	mvns	r3, r3
 8028cd4:	697a      	ldr	r2, [r7, #20]
 8028cd6:	08d2      	lsrs	r2, r2, #3
 8028cd8:	4019      	ands	r1, r3
 8028cda:	687b      	ldr	r3, [r7, #4]
 8028cdc:	3208      	adds	r2, #8
 8028cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8028ce2:	687b      	ldr	r3, [r7, #4]
 8028ce4:	68da      	ldr	r2, [r3, #12]
 8028ce6:	697b      	ldr	r3, [r7, #20]
 8028ce8:	005b      	lsls	r3, r3, #1
 8028cea:	2103      	movs	r1, #3
 8028cec:	fa01 f303 	lsl.w	r3, r1, r3
 8028cf0:	43db      	mvns	r3, r3
 8028cf2:	401a      	ands	r2, r3
 8028cf4:	687b      	ldr	r3, [r7, #4]
 8028cf6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8028cf8:	687b      	ldr	r3, [r7, #4]
 8028cfa:	685a      	ldr	r2, [r3, #4]
 8028cfc:	2101      	movs	r1, #1
 8028cfe:	697b      	ldr	r3, [r7, #20]
 8028d00:	fa01 f303 	lsl.w	r3, r1, r3
 8028d04:	43db      	mvns	r3, r3
 8028d06:	401a      	ands	r2, r3
 8028d08:	687b      	ldr	r3, [r7, #4]
 8028d0a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8028d0c:	687b      	ldr	r3, [r7, #4]
 8028d0e:	689a      	ldr	r2, [r3, #8]
 8028d10:	697b      	ldr	r3, [r7, #20]
 8028d12:	005b      	lsls	r3, r3, #1
 8028d14:	2103      	movs	r1, #3
 8028d16:	fa01 f303 	lsl.w	r3, r1, r3
 8028d1a:	43db      	mvns	r3, r3
 8028d1c:	401a      	ands	r2, r3
 8028d1e:	687b      	ldr	r3, [r7, #4]
 8028d20:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8028d22:	697b      	ldr	r3, [r7, #20]
 8028d24:	3301      	adds	r3, #1
 8028d26:	617b      	str	r3, [r7, #20]
 8028d28:	697b      	ldr	r3, [r7, #20]
 8028d2a:	2b0f      	cmp	r3, #15
 8028d2c:	f67f af2e 	bls.w	8028b8c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8028d30:	bf00      	nop
 8028d32:	bf00      	nop
 8028d34:	371c      	adds	r7, #28
 8028d36:	46bd      	mov	sp, r7
 8028d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d3c:	4770      	bx	lr
 8028d3e:	bf00      	nop
 8028d40:	40013800 	.word	0x40013800
 8028d44:	40020000 	.word	0x40020000
 8028d48:	40020400 	.word	0x40020400
 8028d4c:	40020800 	.word	0x40020800
 8028d50:	40020c00 	.word	0x40020c00
 8028d54:	40021000 	.word	0x40021000
 8028d58:	40021400 	.word	0x40021400
 8028d5c:	40021800 	.word	0x40021800
 8028d60:	40021c00 	.word	0x40021c00
 8028d64:	40013c00 	.word	0x40013c00

08028d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8028d68:	b480      	push	{r7}
 8028d6a:	b083      	sub	sp, #12
 8028d6c:	af00      	add	r7, sp, #0
 8028d6e:	6078      	str	r0, [r7, #4]
 8028d70:	460b      	mov	r3, r1
 8028d72:	807b      	strh	r3, [r7, #2]
 8028d74:	4613      	mov	r3, r2
 8028d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8028d78:	787b      	ldrb	r3, [r7, #1]
 8028d7a:	2b00      	cmp	r3, #0
 8028d7c:	d003      	beq.n	8028d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8028d7e:	887a      	ldrh	r2, [r7, #2]
 8028d80:	687b      	ldr	r3, [r7, #4]
 8028d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8028d84:	e003      	b.n	8028d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8028d86:	887b      	ldrh	r3, [r7, #2]
 8028d88:	041a      	lsls	r2, r3, #16
 8028d8a:	687b      	ldr	r3, [r7, #4]
 8028d8c:	619a      	str	r2, [r3, #24]
}
 8028d8e:	bf00      	nop
 8028d90:	370c      	adds	r7, #12
 8028d92:	46bd      	mov	sp, r7
 8028d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d98:	4770      	bx	lr

08028d9a <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8028d9a:	b580      	push	{r7, lr}
 8028d9c:	b084      	sub	sp, #16
 8028d9e:	af00      	add	r7, sp, #0
 8028da0:	60f8      	str	r0, [r7, #12]
 8028da2:	60b9      	str	r1, [r7, #8]
 8028da4:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8028da6:	68fb      	ldr	r3, [r7, #12]
 8028da8:	2b00      	cmp	r3, #0
 8028daa:	d101      	bne.n	8028db0 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8028dac:	2301      	movs	r3, #1
 8028dae:	e03e      	b.n	8028e2e <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8028db0:	68fb      	ldr	r3, [r7, #12]
 8028db2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8028db6:	b2db      	uxtb	r3, r3
 8028db8:	2b00      	cmp	r3, #0
 8028dba:	d106      	bne.n	8028dca <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8028dbc:	68fb      	ldr	r3, [r7, #12]
 8028dbe:	2200      	movs	r2, #0
 8028dc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8028dc4:	68f8      	ldr	r0, [r7, #12]
 8028dc6:	f7fa faf1 	bl	80233ac <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8028dca:	68fb      	ldr	r3, [r7, #12]
 8028dcc:	681a      	ldr	r2, [r3, #0]
 8028dce:	68fb      	ldr	r3, [r7, #12]
 8028dd0:	3304      	adds	r3, #4
 8028dd2:	4619      	mov	r1, r3
 8028dd4:	4610      	mov	r0, r2
 8028dd6:	f003 ff91 	bl	802ccfc <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8028dda:	68fb      	ldr	r3, [r7, #12]
 8028ddc:	6818      	ldr	r0, [r3, #0]
 8028dde:	68fb      	ldr	r3, [r7, #12]
 8028de0:	685b      	ldr	r3, [r3, #4]
 8028de2:	461a      	mov	r2, r3
 8028de4:	68b9      	ldr	r1, [r7, #8]
 8028de6:	f003 ffd5 	bl	802cd94 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8028dea:	68fb      	ldr	r3, [r7, #12]
 8028dec:	6818      	ldr	r0, [r3, #0]
 8028dee:	68fb      	ldr	r3, [r7, #12]
 8028df0:	685b      	ldr	r3, [r3, #4]
 8028df2:	461a      	mov	r2, r3
 8028df4:	6879      	ldr	r1, [r7, #4]
 8028df6:	f004 f802 	bl	802cdfe <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8028dfa:	68fb      	ldr	r3, [r7, #12]
 8028dfc:	685b      	ldr	r3, [r3, #4]
 8028dfe:	2b10      	cmp	r3, #16
 8028e00:	d108      	bne.n	8028e14 <HAL_NAND_Init+0x7a>
 8028e02:	68fb      	ldr	r3, [r7, #12]
 8028e04:	681b      	ldr	r3, [r3, #0]
 8028e06:	681a      	ldr	r2, [r3, #0]
 8028e08:	68fb      	ldr	r3, [r7, #12]
 8028e0a:	681b      	ldr	r3, [r3, #0]
 8028e0c:	f042 0204 	orr.w	r2, r2, #4
 8028e10:	601a      	str	r2, [r3, #0]
 8028e12:	e007      	b.n	8028e24 <HAL_NAND_Init+0x8a>
 8028e14:	68fb      	ldr	r3, [r7, #12]
 8028e16:	681b      	ldr	r3, [r3, #0]
 8028e18:	6a1a      	ldr	r2, [r3, #32]
 8028e1a:	68fb      	ldr	r3, [r7, #12]
 8028e1c:	681b      	ldr	r3, [r3, #0]
 8028e1e:	f042 0204 	orr.w	r2, r2, #4
 8028e22:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8028e24:	68fb      	ldr	r3, [r7, #12]
 8028e26:	2201      	movs	r2, #1
 8028e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8028e2c:	2300      	movs	r3, #0
}
 8028e2e:	4618      	mov	r0, r3
 8028e30:	3710      	adds	r7, #16
 8028e32:	46bd      	mov	sp, r7
 8028e34:	bd80      	pop	{r7, pc}

08028e36 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 8028e36:	b580      	push	{r7, lr}
 8028e38:	b082      	sub	sp, #8
 8028e3a:	af00      	add	r7, sp, #0
 8028e3c:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8028e3e:	687b      	ldr	r3, [r7, #4]
 8028e40:	685b      	ldr	r3, [r3, #4]
 8028e42:	2b10      	cmp	r3, #16
 8028e44:	d10a      	bne.n	8028e5c <HAL_NAND_IRQHandler+0x26>
 8028e46:	687b      	ldr	r3, [r7, #4]
 8028e48:	681b      	ldr	r3, [r3, #0]
 8028e4a:	685b      	ldr	r3, [r3, #4]
 8028e4c:	f003 0301 	and.w	r3, r3, #1
 8028e50:	2b01      	cmp	r3, #1
 8028e52:	bf0c      	ite	eq
 8028e54:	2301      	moveq	r3, #1
 8028e56:	2300      	movne	r3, #0
 8028e58:	b2db      	uxtb	r3, r3
 8028e5a:	e009      	b.n	8028e70 <HAL_NAND_IRQHandler+0x3a>
 8028e5c:	687b      	ldr	r3, [r7, #4]
 8028e5e:	681b      	ldr	r3, [r3, #0]
 8028e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028e62:	f003 0301 	and.w	r3, r3, #1
 8028e66:	2b01      	cmp	r3, #1
 8028e68:	bf0c      	ite	eq
 8028e6a:	2301      	moveq	r3, #1
 8028e6c:	2300      	movne	r3, #0
 8028e6e:	b2db      	uxtb	r3, r3
 8028e70:	2b00      	cmp	r3, #0
 8028e72:	d017      	beq.n	8028ea4 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8028e74:	6878      	ldr	r0, [r7, #4]
 8028e76:	f000 f8b2 	bl	8028fde <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8028e7a:	687b      	ldr	r3, [r7, #4]
 8028e7c:	685b      	ldr	r3, [r3, #4]
 8028e7e:	2b10      	cmp	r3, #16
 8028e80:	d108      	bne.n	8028e94 <HAL_NAND_IRQHandler+0x5e>
 8028e82:	687b      	ldr	r3, [r7, #4]
 8028e84:	681b      	ldr	r3, [r3, #0]
 8028e86:	685a      	ldr	r2, [r3, #4]
 8028e88:	687b      	ldr	r3, [r7, #4]
 8028e8a:	681b      	ldr	r3, [r3, #0]
 8028e8c:	f022 0201 	bic.w	r2, r2, #1
 8028e90:	605a      	str	r2, [r3, #4]
 8028e92:	e007      	b.n	8028ea4 <HAL_NAND_IRQHandler+0x6e>
 8028e94:	687b      	ldr	r3, [r7, #4]
 8028e96:	681b      	ldr	r3, [r3, #0]
 8028e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028e9a:	687b      	ldr	r3, [r7, #4]
 8028e9c:	681b      	ldr	r3, [r3, #0]
 8028e9e:	f022 0201 	bic.w	r2, r2, #1
 8028ea2:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8028ea4:	687b      	ldr	r3, [r7, #4]
 8028ea6:	685b      	ldr	r3, [r3, #4]
 8028ea8:	2b10      	cmp	r3, #16
 8028eaa:	d10a      	bne.n	8028ec2 <HAL_NAND_IRQHandler+0x8c>
 8028eac:	687b      	ldr	r3, [r7, #4]
 8028eae:	681b      	ldr	r3, [r3, #0]
 8028eb0:	685b      	ldr	r3, [r3, #4]
 8028eb2:	f003 0302 	and.w	r3, r3, #2
 8028eb6:	2b02      	cmp	r3, #2
 8028eb8:	bf0c      	ite	eq
 8028eba:	2301      	moveq	r3, #1
 8028ebc:	2300      	movne	r3, #0
 8028ebe:	b2db      	uxtb	r3, r3
 8028ec0:	e009      	b.n	8028ed6 <HAL_NAND_IRQHandler+0xa0>
 8028ec2:	687b      	ldr	r3, [r7, #4]
 8028ec4:	681b      	ldr	r3, [r3, #0]
 8028ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028ec8:	f003 0302 	and.w	r3, r3, #2
 8028ecc:	2b02      	cmp	r3, #2
 8028ece:	bf0c      	ite	eq
 8028ed0:	2301      	moveq	r3, #1
 8028ed2:	2300      	movne	r3, #0
 8028ed4:	b2db      	uxtb	r3, r3
 8028ed6:	2b00      	cmp	r3, #0
 8028ed8:	d017      	beq.n	8028f0a <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8028eda:	6878      	ldr	r0, [r7, #4]
 8028edc:	f000 f87f 	bl	8028fde <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8028ee0:	687b      	ldr	r3, [r7, #4]
 8028ee2:	685b      	ldr	r3, [r3, #4]
 8028ee4:	2b10      	cmp	r3, #16
 8028ee6:	d108      	bne.n	8028efa <HAL_NAND_IRQHandler+0xc4>
 8028ee8:	687b      	ldr	r3, [r7, #4]
 8028eea:	681b      	ldr	r3, [r3, #0]
 8028eec:	685a      	ldr	r2, [r3, #4]
 8028eee:	687b      	ldr	r3, [r7, #4]
 8028ef0:	681b      	ldr	r3, [r3, #0]
 8028ef2:	f022 0202 	bic.w	r2, r2, #2
 8028ef6:	605a      	str	r2, [r3, #4]
 8028ef8:	e007      	b.n	8028f0a <HAL_NAND_IRQHandler+0xd4>
 8028efa:	687b      	ldr	r3, [r7, #4]
 8028efc:	681b      	ldr	r3, [r3, #0]
 8028efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028f00:	687b      	ldr	r3, [r7, #4]
 8028f02:	681b      	ldr	r3, [r3, #0]
 8028f04:	f022 0202 	bic.w	r2, r2, #2
 8028f08:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8028f0a:	687b      	ldr	r3, [r7, #4]
 8028f0c:	685b      	ldr	r3, [r3, #4]
 8028f0e:	2b10      	cmp	r3, #16
 8028f10:	d10a      	bne.n	8028f28 <HAL_NAND_IRQHandler+0xf2>
 8028f12:	687b      	ldr	r3, [r7, #4]
 8028f14:	681b      	ldr	r3, [r3, #0]
 8028f16:	685b      	ldr	r3, [r3, #4]
 8028f18:	f003 0304 	and.w	r3, r3, #4
 8028f1c:	2b04      	cmp	r3, #4
 8028f1e:	bf0c      	ite	eq
 8028f20:	2301      	moveq	r3, #1
 8028f22:	2300      	movne	r3, #0
 8028f24:	b2db      	uxtb	r3, r3
 8028f26:	e009      	b.n	8028f3c <HAL_NAND_IRQHandler+0x106>
 8028f28:	687b      	ldr	r3, [r7, #4]
 8028f2a:	681b      	ldr	r3, [r3, #0]
 8028f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028f2e:	f003 0304 	and.w	r3, r3, #4
 8028f32:	2b04      	cmp	r3, #4
 8028f34:	bf0c      	ite	eq
 8028f36:	2301      	moveq	r3, #1
 8028f38:	2300      	movne	r3, #0
 8028f3a:	b2db      	uxtb	r3, r3
 8028f3c:	2b00      	cmp	r3, #0
 8028f3e:	d017      	beq.n	8028f70 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8028f40:	6878      	ldr	r0, [r7, #4]
 8028f42:	f000 f84c 	bl	8028fde <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8028f46:	687b      	ldr	r3, [r7, #4]
 8028f48:	685b      	ldr	r3, [r3, #4]
 8028f4a:	2b10      	cmp	r3, #16
 8028f4c:	d108      	bne.n	8028f60 <HAL_NAND_IRQHandler+0x12a>
 8028f4e:	687b      	ldr	r3, [r7, #4]
 8028f50:	681b      	ldr	r3, [r3, #0]
 8028f52:	685a      	ldr	r2, [r3, #4]
 8028f54:	687b      	ldr	r3, [r7, #4]
 8028f56:	681b      	ldr	r3, [r3, #0]
 8028f58:	f022 0204 	bic.w	r2, r2, #4
 8028f5c:	605a      	str	r2, [r3, #4]
 8028f5e:	e007      	b.n	8028f70 <HAL_NAND_IRQHandler+0x13a>
 8028f60:	687b      	ldr	r3, [r7, #4]
 8028f62:	681b      	ldr	r3, [r3, #0]
 8028f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028f66:	687b      	ldr	r3, [r7, #4]
 8028f68:	681b      	ldr	r3, [r3, #0]
 8028f6a:	f022 0204 	bic.w	r2, r2, #4
 8028f6e:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8028f70:	687b      	ldr	r3, [r7, #4]
 8028f72:	685b      	ldr	r3, [r3, #4]
 8028f74:	2b10      	cmp	r3, #16
 8028f76:	d10a      	bne.n	8028f8e <HAL_NAND_IRQHandler+0x158>
 8028f78:	687b      	ldr	r3, [r7, #4]
 8028f7a:	681b      	ldr	r3, [r3, #0]
 8028f7c:	685b      	ldr	r3, [r3, #4]
 8028f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028f82:	2b40      	cmp	r3, #64	; 0x40
 8028f84:	bf0c      	ite	eq
 8028f86:	2301      	moveq	r3, #1
 8028f88:	2300      	movne	r3, #0
 8028f8a:	b2db      	uxtb	r3, r3
 8028f8c:	e009      	b.n	8028fa2 <HAL_NAND_IRQHandler+0x16c>
 8028f8e:	687b      	ldr	r3, [r7, #4]
 8028f90:	681b      	ldr	r3, [r3, #0]
 8028f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028f98:	2b40      	cmp	r3, #64	; 0x40
 8028f9a:	bf0c      	ite	eq
 8028f9c:	2301      	moveq	r3, #1
 8028f9e:	2300      	movne	r3, #0
 8028fa0:	b2db      	uxtb	r3, r3
 8028fa2:	2b00      	cmp	r3, #0
 8028fa4:	d017      	beq.n	8028fd6 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8028fa6:	6878      	ldr	r0, [r7, #4]
 8028fa8:	f000 f819 	bl	8028fde <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8028fac:	687b      	ldr	r3, [r7, #4]
 8028fae:	685b      	ldr	r3, [r3, #4]
 8028fb0:	2b10      	cmp	r3, #16
 8028fb2:	d108      	bne.n	8028fc6 <HAL_NAND_IRQHandler+0x190>
 8028fb4:	687b      	ldr	r3, [r7, #4]
 8028fb6:	681b      	ldr	r3, [r3, #0]
 8028fb8:	685a      	ldr	r2, [r3, #4]
 8028fba:	687b      	ldr	r3, [r7, #4]
 8028fbc:	681b      	ldr	r3, [r3, #0]
 8028fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028fc2:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8028fc4:	e007      	b.n	8028fd6 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8028fc6:	687b      	ldr	r3, [r7, #4]
 8028fc8:	681b      	ldr	r3, [r3, #0]
 8028fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028fcc:	687b      	ldr	r3, [r7, #4]
 8028fce:	681b      	ldr	r3, [r3, #0]
 8028fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028fd4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8028fd6:	bf00      	nop
 8028fd8:	3708      	adds	r7, #8
 8028fda:	46bd      	mov	sp, r7
 8028fdc:	bd80      	pop	{r7, pc}

08028fde <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8028fde:	b480      	push	{r7}
 8028fe0:	b083      	sub	sp, #12
 8028fe2:	af00      	add	r7, sp, #0
 8028fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8028fe6:	bf00      	nop
 8028fe8:	370c      	adds	r7, #12
 8028fea:	46bd      	mov	sp, r7
 8028fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ff0:	4770      	bx	lr

08028ff2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8028ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028ff4:	b08f      	sub	sp, #60	; 0x3c
 8028ff6:	af0a      	add	r7, sp, #40	; 0x28
 8028ff8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8028ffa:	687b      	ldr	r3, [r7, #4]
 8028ffc:	2b00      	cmp	r3, #0
 8028ffe:	d101      	bne.n	8029004 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8029000:	2301      	movs	r3, #1
 8029002:	e10f      	b.n	8029224 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8029004:	687b      	ldr	r3, [r7, #4]
 8029006:	681b      	ldr	r3, [r3, #0]
 8029008:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 802900a:	687b      	ldr	r3, [r7, #4]
 802900c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8029010:	b2db      	uxtb	r3, r3
 8029012:	2b00      	cmp	r3, #0
 8029014:	d106      	bne.n	8029024 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8029016:	687b      	ldr	r3, [r7, #4]
 8029018:	2200      	movs	r2, #0
 802901a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 802901e:	6878      	ldr	r0, [r7, #4]
 8029020:	f007 fe9e 	bl	8030d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8029024:	687b      	ldr	r3, [r7, #4]
 8029026:	2203      	movs	r2, #3
 8029028:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 802902c:	68bb      	ldr	r3, [r7, #8]
 802902e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029034:	2b00      	cmp	r3, #0
 8029036:	d102      	bne.n	802903e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8029038:	687b      	ldr	r3, [r7, #4]
 802903a:	2200      	movs	r2, #0
 802903c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 802903e:	687b      	ldr	r3, [r7, #4]
 8029040:	681b      	ldr	r3, [r3, #0]
 8029042:	4618      	mov	r0, r3
 8029044:	f004 f825 	bl	802d092 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8029048:	687b      	ldr	r3, [r7, #4]
 802904a:	681b      	ldr	r3, [r3, #0]
 802904c:	603b      	str	r3, [r7, #0]
 802904e:	687e      	ldr	r6, [r7, #4]
 8029050:	466d      	mov	r5, sp
 8029052:	f106 0410 	add.w	r4, r6, #16
 8029056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8029058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802905a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802905c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802905e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8029062:	e885 0003 	stmia.w	r5, {r0, r1}
 8029066:	1d33      	adds	r3, r6, #4
 8029068:	cb0e      	ldmia	r3, {r1, r2, r3}
 802906a:	6838      	ldr	r0, [r7, #0]
 802906c:	f003 fefc 	bl	802ce68 <USB_CoreInit>
 8029070:	4603      	mov	r3, r0
 8029072:	2b00      	cmp	r3, #0
 8029074:	d005      	beq.n	8029082 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8029076:	687b      	ldr	r3, [r7, #4]
 8029078:	2202      	movs	r2, #2
 802907a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 802907e:	2301      	movs	r3, #1
 8029080:	e0d0      	b.n	8029224 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8029082:	687b      	ldr	r3, [r7, #4]
 8029084:	681b      	ldr	r3, [r3, #0]
 8029086:	2100      	movs	r1, #0
 8029088:	4618      	mov	r0, r3
 802908a:	f004 f813 	bl	802d0b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802908e:	2300      	movs	r3, #0
 8029090:	73fb      	strb	r3, [r7, #15]
 8029092:	e04a      	b.n	802912a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8029094:	7bfa      	ldrb	r2, [r7, #15]
 8029096:	6879      	ldr	r1, [r7, #4]
 8029098:	4613      	mov	r3, r2
 802909a:	00db      	lsls	r3, r3, #3
 802909c:	4413      	add	r3, r2
 802909e:	009b      	lsls	r3, r3, #2
 80290a0:	440b      	add	r3, r1
 80290a2:	333d      	adds	r3, #61	; 0x3d
 80290a4:	2201      	movs	r2, #1
 80290a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80290a8:	7bfa      	ldrb	r2, [r7, #15]
 80290aa:	6879      	ldr	r1, [r7, #4]
 80290ac:	4613      	mov	r3, r2
 80290ae:	00db      	lsls	r3, r3, #3
 80290b0:	4413      	add	r3, r2
 80290b2:	009b      	lsls	r3, r3, #2
 80290b4:	440b      	add	r3, r1
 80290b6:	333c      	adds	r3, #60	; 0x3c
 80290b8:	7bfa      	ldrb	r2, [r7, #15]
 80290ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80290bc:	7bfa      	ldrb	r2, [r7, #15]
 80290be:	7bfb      	ldrb	r3, [r7, #15]
 80290c0:	b298      	uxth	r0, r3
 80290c2:	6879      	ldr	r1, [r7, #4]
 80290c4:	4613      	mov	r3, r2
 80290c6:	00db      	lsls	r3, r3, #3
 80290c8:	4413      	add	r3, r2
 80290ca:	009b      	lsls	r3, r3, #2
 80290cc:	440b      	add	r3, r1
 80290ce:	3344      	adds	r3, #68	; 0x44
 80290d0:	4602      	mov	r2, r0
 80290d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80290d4:	7bfa      	ldrb	r2, [r7, #15]
 80290d6:	6879      	ldr	r1, [r7, #4]
 80290d8:	4613      	mov	r3, r2
 80290da:	00db      	lsls	r3, r3, #3
 80290dc:	4413      	add	r3, r2
 80290de:	009b      	lsls	r3, r3, #2
 80290e0:	440b      	add	r3, r1
 80290e2:	3340      	adds	r3, #64	; 0x40
 80290e4:	2200      	movs	r2, #0
 80290e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80290e8:	7bfa      	ldrb	r2, [r7, #15]
 80290ea:	6879      	ldr	r1, [r7, #4]
 80290ec:	4613      	mov	r3, r2
 80290ee:	00db      	lsls	r3, r3, #3
 80290f0:	4413      	add	r3, r2
 80290f2:	009b      	lsls	r3, r3, #2
 80290f4:	440b      	add	r3, r1
 80290f6:	3348      	adds	r3, #72	; 0x48
 80290f8:	2200      	movs	r2, #0
 80290fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80290fc:	7bfa      	ldrb	r2, [r7, #15]
 80290fe:	6879      	ldr	r1, [r7, #4]
 8029100:	4613      	mov	r3, r2
 8029102:	00db      	lsls	r3, r3, #3
 8029104:	4413      	add	r3, r2
 8029106:	009b      	lsls	r3, r3, #2
 8029108:	440b      	add	r3, r1
 802910a:	334c      	adds	r3, #76	; 0x4c
 802910c:	2200      	movs	r2, #0
 802910e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8029110:	7bfa      	ldrb	r2, [r7, #15]
 8029112:	6879      	ldr	r1, [r7, #4]
 8029114:	4613      	mov	r3, r2
 8029116:	00db      	lsls	r3, r3, #3
 8029118:	4413      	add	r3, r2
 802911a:	009b      	lsls	r3, r3, #2
 802911c:	440b      	add	r3, r1
 802911e:	3354      	adds	r3, #84	; 0x54
 8029120:	2200      	movs	r2, #0
 8029122:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8029124:	7bfb      	ldrb	r3, [r7, #15]
 8029126:	3301      	adds	r3, #1
 8029128:	73fb      	strb	r3, [r7, #15]
 802912a:	7bfa      	ldrb	r2, [r7, #15]
 802912c:	687b      	ldr	r3, [r7, #4]
 802912e:	685b      	ldr	r3, [r3, #4]
 8029130:	429a      	cmp	r2, r3
 8029132:	d3af      	bcc.n	8029094 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8029134:	2300      	movs	r3, #0
 8029136:	73fb      	strb	r3, [r7, #15]
 8029138:	e044      	b.n	80291c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 802913a:	7bfa      	ldrb	r2, [r7, #15]
 802913c:	6879      	ldr	r1, [r7, #4]
 802913e:	4613      	mov	r3, r2
 8029140:	00db      	lsls	r3, r3, #3
 8029142:	4413      	add	r3, r2
 8029144:	009b      	lsls	r3, r3, #2
 8029146:	440b      	add	r3, r1
 8029148:	f203 237d 	addw	r3, r3, #637	; 0x27d
 802914c:	2200      	movs	r2, #0
 802914e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8029150:	7bfa      	ldrb	r2, [r7, #15]
 8029152:	6879      	ldr	r1, [r7, #4]
 8029154:	4613      	mov	r3, r2
 8029156:	00db      	lsls	r3, r3, #3
 8029158:	4413      	add	r3, r2
 802915a:	009b      	lsls	r3, r3, #2
 802915c:	440b      	add	r3, r1
 802915e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8029162:	7bfa      	ldrb	r2, [r7, #15]
 8029164:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8029166:	7bfa      	ldrb	r2, [r7, #15]
 8029168:	6879      	ldr	r1, [r7, #4]
 802916a:	4613      	mov	r3, r2
 802916c:	00db      	lsls	r3, r3, #3
 802916e:	4413      	add	r3, r2
 8029170:	009b      	lsls	r3, r3, #2
 8029172:	440b      	add	r3, r1
 8029174:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8029178:	2200      	movs	r2, #0
 802917a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 802917c:	7bfa      	ldrb	r2, [r7, #15]
 802917e:	6879      	ldr	r1, [r7, #4]
 8029180:	4613      	mov	r3, r2
 8029182:	00db      	lsls	r3, r3, #3
 8029184:	4413      	add	r3, r2
 8029186:	009b      	lsls	r3, r3, #2
 8029188:	440b      	add	r3, r1
 802918a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802918e:	2200      	movs	r2, #0
 8029190:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8029192:	7bfa      	ldrb	r2, [r7, #15]
 8029194:	6879      	ldr	r1, [r7, #4]
 8029196:	4613      	mov	r3, r2
 8029198:	00db      	lsls	r3, r3, #3
 802919a:	4413      	add	r3, r2
 802919c:	009b      	lsls	r3, r3, #2
 802919e:	440b      	add	r3, r1
 80291a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80291a4:	2200      	movs	r2, #0
 80291a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80291a8:	7bfa      	ldrb	r2, [r7, #15]
 80291aa:	6879      	ldr	r1, [r7, #4]
 80291ac:	4613      	mov	r3, r2
 80291ae:	00db      	lsls	r3, r3, #3
 80291b0:	4413      	add	r3, r2
 80291b2:	009b      	lsls	r3, r3, #2
 80291b4:	440b      	add	r3, r1
 80291b6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80291ba:	2200      	movs	r2, #0
 80291bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80291be:	7bfb      	ldrb	r3, [r7, #15]
 80291c0:	3301      	adds	r3, #1
 80291c2:	73fb      	strb	r3, [r7, #15]
 80291c4:	7bfa      	ldrb	r2, [r7, #15]
 80291c6:	687b      	ldr	r3, [r7, #4]
 80291c8:	685b      	ldr	r3, [r3, #4]
 80291ca:	429a      	cmp	r2, r3
 80291cc:	d3b5      	bcc.n	802913a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80291ce:	687b      	ldr	r3, [r7, #4]
 80291d0:	681b      	ldr	r3, [r3, #0]
 80291d2:	603b      	str	r3, [r7, #0]
 80291d4:	687e      	ldr	r6, [r7, #4]
 80291d6:	466d      	mov	r5, sp
 80291d8:	f106 0410 	add.w	r4, r6, #16
 80291dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80291de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80291e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80291e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80291e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80291e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80291ec:	1d33      	adds	r3, r6, #4
 80291ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80291f0:	6838      	ldr	r0, [r7, #0]
 80291f2:	f003 ffab 	bl	802d14c <USB_DevInit>
 80291f6:	4603      	mov	r3, r0
 80291f8:	2b00      	cmp	r3, #0
 80291fa:	d005      	beq.n	8029208 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80291fc:	687b      	ldr	r3, [r7, #4]
 80291fe:	2202      	movs	r2, #2
 8029200:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8029204:	2301      	movs	r3, #1
 8029206:	e00d      	b.n	8029224 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8029208:	687b      	ldr	r3, [r7, #4]
 802920a:	2200      	movs	r2, #0
 802920c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8029210:	687b      	ldr	r3, [r7, #4]
 8029212:	2201      	movs	r2, #1
 8029214:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8029218:	687b      	ldr	r3, [r7, #4]
 802921a:	681b      	ldr	r3, [r3, #0]
 802921c:	4618      	mov	r0, r3
 802921e:	f005 f8fa 	bl	802e416 <USB_DevDisconnect>

  return HAL_OK;
 8029222:	2300      	movs	r3, #0
}
 8029224:	4618      	mov	r0, r3
 8029226:	3714      	adds	r7, #20
 8029228:	46bd      	mov	sp, r7
 802922a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802922c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 802922c:	b580      	push	{r7, lr}
 802922e:	b084      	sub	sp, #16
 8029230:	af00      	add	r7, sp, #0
 8029232:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8029234:	687b      	ldr	r3, [r7, #4]
 8029236:	681b      	ldr	r3, [r3, #0]
 8029238:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 802923a:	687b      	ldr	r3, [r7, #4]
 802923c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029240:	2b01      	cmp	r3, #1
 8029242:	d101      	bne.n	8029248 <HAL_PCD_Start+0x1c>
 8029244:	2302      	movs	r3, #2
 8029246:	e020      	b.n	802928a <HAL_PCD_Start+0x5e>
 8029248:	687b      	ldr	r3, [r7, #4]
 802924a:	2201      	movs	r2, #1
 802924c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8029250:	687b      	ldr	r3, [r7, #4]
 8029252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029254:	2b01      	cmp	r3, #1
 8029256:	d109      	bne.n	802926c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8029258:	687b      	ldr	r3, [r7, #4]
 802925a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 802925c:	2b01      	cmp	r3, #1
 802925e:	d005      	beq.n	802926c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8029260:	68fb      	ldr	r3, [r7, #12]
 8029262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029264:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8029268:	68fb      	ldr	r3, [r7, #12]
 802926a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 802926c:	687b      	ldr	r3, [r7, #4]
 802926e:	681b      	ldr	r3, [r3, #0]
 8029270:	4618      	mov	r0, r3
 8029272:	f003 fefd 	bl	802d070 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8029276:	687b      	ldr	r3, [r7, #4]
 8029278:	681b      	ldr	r3, [r3, #0]
 802927a:	4618      	mov	r0, r3
 802927c:	f005 f8aa 	bl	802e3d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8029280:	687b      	ldr	r3, [r7, #4]
 8029282:	2200      	movs	r2, #0
 8029284:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8029288:	2300      	movs	r3, #0
}
 802928a:	4618      	mov	r0, r3
 802928c:	3710      	adds	r7, #16
 802928e:	46bd      	mov	sp, r7
 8029290:	bd80      	pop	{r7, pc}

08029292 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8029292:	b590      	push	{r4, r7, lr}
 8029294:	b08d      	sub	sp, #52	; 0x34
 8029296:	af00      	add	r7, sp, #0
 8029298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802929a:	687b      	ldr	r3, [r7, #4]
 802929c:	681b      	ldr	r3, [r3, #0]
 802929e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80292a0:	6a3b      	ldr	r3, [r7, #32]
 80292a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80292a4:	687b      	ldr	r3, [r7, #4]
 80292a6:	681b      	ldr	r3, [r3, #0]
 80292a8:	4618      	mov	r0, r3
 80292aa:	f005 f968 	bl	802e57e <USB_GetMode>
 80292ae:	4603      	mov	r3, r0
 80292b0:	2b00      	cmp	r3, #0
 80292b2:	f040 848a 	bne.w	8029bca <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80292b6:	687b      	ldr	r3, [r7, #4]
 80292b8:	681b      	ldr	r3, [r3, #0]
 80292ba:	4618      	mov	r0, r3
 80292bc:	f005 f8cc 	bl	802e458 <USB_ReadInterrupts>
 80292c0:	4603      	mov	r3, r0
 80292c2:	2b00      	cmp	r3, #0
 80292c4:	f000 8480 	beq.w	8029bc8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80292c8:	69fb      	ldr	r3, [r7, #28]
 80292ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80292ce:	689b      	ldr	r3, [r3, #8]
 80292d0:	0a1b      	lsrs	r3, r3, #8
 80292d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80292d6:	687b      	ldr	r3, [r7, #4]
 80292d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80292dc:	687b      	ldr	r3, [r7, #4]
 80292de:	681b      	ldr	r3, [r3, #0]
 80292e0:	4618      	mov	r0, r3
 80292e2:	f005 f8b9 	bl	802e458 <USB_ReadInterrupts>
 80292e6:	4603      	mov	r3, r0
 80292e8:	f003 0302 	and.w	r3, r3, #2
 80292ec:	2b02      	cmp	r3, #2
 80292ee:	d107      	bne.n	8029300 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80292f0:	687b      	ldr	r3, [r7, #4]
 80292f2:	681b      	ldr	r3, [r3, #0]
 80292f4:	695a      	ldr	r2, [r3, #20]
 80292f6:	687b      	ldr	r3, [r7, #4]
 80292f8:	681b      	ldr	r3, [r3, #0]
 80292fa:	f002 0202 	and.w	r2, r2, #2
 80292fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8029300:	687b      	ldr	r3, [r7, #4]
 8029302:	681b      	ldr	r3, [r3, #0]
 8029304:	4618      	mov	r0, r3
 8029306:	f005 f8a7 	bl	802e458 <USB_ReadInterrupts>
 802930a:	4603      	mov	r3, r0
 802930c:	f003 0310 	and.w	r3, r3, #16
 8029310:	2b10      	cmp	r3, #16
 8029312:	d161      	bne.n	80293d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8029314:	687b      	ldr	r3, [r7, #4]
 8029316:	681b      	ldr	r3, [r3, #0]
 8029318:	699a      	ldr	r2, [r3, #24]
 802931a:	687b      	ldr	r3, [r7, #4]
 802931c:	681b      	ldr	r3, [r3, #0]
 802931e:	f022 0210 	bic.w	r2, r2, #16
 8029322:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8029324:	6a3b      	ldr	r3, [r7, #32]
 8029326:	6a1b      	ldr	r3, [r3, #32]
 8029328:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 802932a:	69bb      	ldr	r3, [r7, #24]
 802932c:	f003 020f 	and.w	r2, r3, #15
 8029330:	4613      	mov	r3, r2
 8029332:	00db      	lsls	r3, r3, #3
 8029334:	4413      	add	r3, r2
 8029336:	009b      	lsls	r3, r3, #2
 8029338:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802933c:	687a      	ldr	r2, [r7, #4]
 802933e:	4413      	add	r3, r2
 8029340:	3304      	adds	r3, #4
 8029342:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8029344:	69bb      	ldr	r3, [r7, #24]
 8029346:	0c5b      	lsrs	r3, r3, #17
 8029348:	f003 030f 	and.w	r3, r3, #15
 802934c:	2b02      	cmp	r3, #2
 802934e:	d124      	bne.n	802939a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8029350:	69ba      	ldr	r2, [r7, #24]
 8029352:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8029356:	4013      	ands	r3, r2
 8029358:	2b00      	cmp	r3, #0
 802935a:	d035      	beq.n	80293c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 802935c:	697b      	ldr	r3, [r7, #20]
 802935e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8029360:	69bb      	ldr	r3, [r7, #24]
 8029362:	091b      	lsrs	r3, r3, #4
 8029364:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8029366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802936a:	b29b      	uxth	r3, r3
 802936c:	461a      	mov	r2, r3
 802936e:	6a38      	ldr	r0, [r7, #32]
 8029370:	f004 fede 	bl	802e130 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8029374:	697b      	ldr	r3, [r7, #20]
 8029376:	691a      	ldr	r2, [r3, #16]
 8029378:	69bb      	ldr	r3, [r7, #24]
 802937a:	091b      	lsrs	r3, r3, #4
 802937c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8029380:	441a      	add	r2, r3
 8029382:	697b      	ldr	r3, [r7, #20]
 8029384:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8029386:	697b      	ldr	r3, [r7, #20]
 8029388:	6a1a      	ldr	r2, [r3, #32]
 802938a:	69bb      	ldr	r3, [r7, #24]
 802938c:	091b      	lsrs	r3, r3, #4
 802938e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8029392:	441a      	add	r2, r3
 8029394:	697b      	ldr	r3, [r7, #20]
 8029396:	621a      	str	r2, [r3, #32]
 8029398:	e016      	b.n	80293c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 802939a:	69bb      	ldr	r3, [r7, #24]
 802939c:	0c5b      	lsrs	r3, r3, #17
 802939e:	f003 030f 	and.w	r3, r3, #15
 80293a2:	2b06      	cmp	r3, #6
 80293a4:	d110      	bne.n	80293c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80293a6:	687b      	ldr	r3, [r7, #4]
 80293a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80293ac:	2208      	movs	r2, #8
 80293ae:	4619      	mov	r1, r3
 80293b0:	6a38      	ldr	r0, [r7, #32]
 80293b2:	f004 febd 	bl	802e130 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80293b6:	697b      	ldr	r3, [r7, #20]
 80293b8:	6a1a      	ldr	r2, [r3, #32]
 80293ba:	69bb      	ldr	r3, [r7, #24]
 80293bc:	091b      	lsrs	r3, r3, #4
 80293be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80293c2:	441a      	add	r2, r3
 80293c4:	697b      	ldr	r3, [r7, #20]
 80293c6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80293c8:	687b      	ldr	r3, [r7, #4]
 80293ca:	681b      	ldr	r3, [r3, #0]
 80293cc:	699a      	ldr	r2, [r3, #24]
 80293ce:	687b      	ldr	r3, [r7, #4]
 80293d0:	681b      	ldr	r3, [r3, #0]
 80293d2:	f042 0210 	orr.w	r2, r2, #16
 80293d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80293d8:	687b      	ldr	r3, [r7, #4]
 80293da:	681b      	ldr	r3, [r3, #0]
 80293dc:	4618      	mov	r0, r3
 80293de:	f005 f83b 	bl	802e458 <USB_ReadInterrupts>
 80293e2:	4603      	mov	r3, r0
 80293e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80293e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80293ec:	f040 80a7 	bne.w	802953e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80293f0:	2300      	movs	r3, #0
 80293f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80293f4:	687b      	ldr	r3, [r7, #4]
 80293f6:	681b      	ldr	r3, [r3, #0]
 80293f8:	4618      	mov	r0, r3
 80293fa:	f005 f840 	bl	802e47e <USB_ReadDevAllOutEpInterrupt>
 80293fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8029400:	e099      	b.n	8029536 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8029402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029404:	f003 0301 	and.w	r3, r3, #1
 8029408:	2b00      	cmp	r3, #0
 802940a:	f000 808e 	beq.w	802952a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 802940e:	687b      	ldr	r3, [r7, #4]
 8029410:	681b      	ldr	r3, [r3, #0]
 8029412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029414:	b2d2      	uxtb	r2, r2
 8029416:	4611      	mov	r1, r2
 8029418:	4618      	mov	r0, r3
 802941a:	f005 f864 	bl	802e4e6 <USB_ReadDevOutEPInterrupt>
 802941e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8029420:	693b      	ldr	r3, [r7, #16]
 8029422:	f003 0301 	and.w	r3, r3, #1
 8029426:	2b00      	cmp	r3, #0
 8029428:	d00c      	beq.n	8029444 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 802942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802942c:	015a      	lsls	r2, r3, #5
 802942e:	69fb      	ldr	r3, [r7, #28]
 8029430:	4413      	add	r3, r2
 8029432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029436:	461a      	mov	r2, r3
 8029438:	2301      	movs	r3, #1
 802943a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 802943c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802943e:	6878      	ldr	r0, [r7, #4]
 8029440:	f000 fec2 	bl	802a1c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8029444:	693b      	ldr	r3, [r7, #16]
 8029446:	f003 0308 	and.w	r3, r3, #8
 802944a:	2b00      	cmp	r3, #0
 802944c:	d00c      	beq.n	8029468 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 802944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029450:	015a      	lsls	r2, r3, #5
 8029452:	69fb      	ldr	r3, [r7, #28]
 8029454:	4413      	add	r3, r2
 8029456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802945a:	461a      	mov	r2, r3
 802945c:	2308      	movs	r3, #8
 802945e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8029460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8029462:	6878      	ldr	r0, [r7, #4]
 8029464:	f000 ff98 	bl	802a398 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8029468:	693b      	ldr	r3, [r7, #16]
 802946a:	f003 0310 	and.w	r3, r3, #16
 802946e:	2b00      	cmp	r3, #0
 8029470:	d008      	beq.n	8029484 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8029472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029474:	015a      	lsls	r2, r3, #5
 8029476:	69fb      	ldr	r3, [r7, #28]
 8029478:	4413      	add	r3, r2
 802947a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802947e:	461a      	mov	r2, r3
 8029480:	2310      	movs	r3, #16
 8029482:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8029484:	693b      	ldr	r3, [r7, #16]
 8029486:	f003 0302 	and.w	r3, r3, #2
 802948a:	2b00      	cmp	r3, #0
 802948c:	d030      	beq.n	80294f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 802948e:	6a3b      	ldr	r3, [r7, #32]
 8029490:	695b      	ldr	r3, [r3, #20]
 8029492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029496:	2b80      	cmp	r3, #128	; 0x80
 8029498:	d109      	bne.n	80294ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 802949a:	69fb      	ldr	r3, [r7, #28]
 802949c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80294a0:	685b      	ldr	r3, [r3, #4]
 80294a2:	69fa      	ldr	r2, [r7, #28]
 80294a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80294a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80294ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80294ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80294b0:	4613      	mov	r3, r2
 80294b2:	00db      	lsls	r3, r3, #3
 80294b4:	4413      	add	r3, r2
 80294b6:	009b      	lsls	r3, r3, #2
 80294b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80294bc:	687a      	ldr	r2, [r7, #4]
 80294be:	4413      	add	r3, r2
 80294c0:	3304      	adds	r3, #4
 80294c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80294c4:	697b      	ldr	r3, [r7, #20]
 80294c6:	78db      	ldrb	r3, [r3, #3]
 80294c8:	2b01      	cmp	r3, #1
 80294ca:	d108      	bne.n	80294de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80294cc:	697b      	ldr	r3, [r7, #20]
 80294ce:	2200      	movs	r2, #0
 80294d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80294d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80294d4:	b2db      	uxtb	r3, r3
 80294d6:	4619      	mov	r1, r3
 80294d8:	6878      	ldr	r0, [r7, #4]
 80294da:	f007 fde3 	bl	80310a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80294de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80294e0:	015a      	lsls	r2, r3, #5
 80294e2:	69fb      	ldr	r3, [r7, #28]
 80294e4:	4413      	add	r3, r2
 80294e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80294ea:	461a      	mov	r2, r3
 80294ec:	2302      	movs	r3, #2
 80294ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80294f0:	693b      	ldr	r3, [r7, #16]
 80294f2:	f003 0320 	and.w	r3, r3, #32
 80294f6:	2b00      	cmp	r3, #0
 80294f8:	d008      	beq.n	802950c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80294fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80294fc:	015a      	lsls	r2, r3, #5
 80294fe:	69fb      	ldr	r3, [r7, #28]
 8029500:	4413      	add	r3, r2
 8029502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029506:	461a      	mov	r2, r3
 8029508:	2320      	movs	r3, #32
 802950a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 802950c:	693b      	ldr	r3, [r7, #16]
 802950e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8029512:	2b00      	cmp	r3, #0
 8029514:	d009      	beq.n	802952a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8029516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029518:	015a      	lsls	r2, r3, #5
 802951a:	69fb      	ldr	r3, [r7, #28]
 802951c:	4413      	add	r3, r2
 802951e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029522:	461a      	mov	r2, r3
 8029524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8029528:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 802952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802952c:	3301      	adds	r3, #1
 802952e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8029530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029532:	085b      	lsrs	r3, r3, #1
 8029534:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8029536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029538:	2b00      	cmp	r3, #0
 802953a:	f47f af62 	bne.w	8029402 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 802953e:	687b      	ldr	r3, [r7, #4]
 8029540:	681b      	ldr	r3, [r3, #0]
 8029542:	4618      	mov	r0, r3
 8029544:	f004 ff88 	bl	802e458 <USB_ReadInterrupts>
 8029548:	4603      	mov	r3, r0
 802954a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802954e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8029552:	f040 80db 	bne.w	802970c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8029556:	687b      	ldr	r3, [r7, #4]
 8029558:	681b      	ldr	r3, [r3, #0]
 802955a:	4618      	mov	r0, r3
 802955c:	f004 ffa9 	bl	802e4b2 <USB_ReadDevAllInEpInterrupt>
 8029560:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8029562:	2300      	movs	r3, #0
 8029564:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8029566:	e0cd      	b.n	8029704 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8029568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802956a:	f003 0301 	and.w	r3, r3, #1
 802956e:	2b00      	cmp	r3, #0
 8029570:	f000 80c2 	beq.w	80296f8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8029574:	687b      	ldr	r3, [r7, #4]
 8029576:	681b      	ldr	r3, [r3, #0]
 8029578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802957a:	b2d2      	uxtb	r2, r2
 802957c:	4611      	mov	r1, r2
 802957e:	4618      	mov	r0, r3
 8029580:	f004 ffcf 	bl	802e522 <USB_ReadDevInEPInterrupt>
 8029584:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8029586:	693b      	ldr	r3, [r7, #16]
 8029588:	f003 0301 	and.w	r3, r3, #1
 802958c:	2b00      	cmp	r3, #0
 802958e:	d057      	beq.n	8029640 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8029590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029592:	f003 030f 	and.w	r3, r3, #15
 8029596:	2201      	movs	r2, #1
 8029598:	fa02 f303 	lsl.w	r3, r2, r3
 802959c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 802959e:	69fb      	ldr	r3, [r7, #28]
 80295a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80295a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80295a6:	68fb      	ldr	r3, [r7, #12]
 80295a8:	43db      	mvns	r3, r3
 80295aa:	69f9      	ldr	r1, [r7, #28]
 80295ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80295b0:	4013      	ands	r3, r2
 80295b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80295b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80295b6:	015a      	lsls	r2, r3, #5
 80295b8:	69fb      	ldr	r3, [r7, #28]
 80295ba:	4413      	add	r3, r2
 80295bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80295c0:	461a      	mov	r2, r3
 80295c2:	2301      	movs	r3, #1
 80295c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80295c6:	687b      	ldr	r3, [r7, #4]
 80295c8:	691b      	ldr	r3, [r3, #16]
 80295ca:	2b01      	cmp	r3, #1
 80295cc:	d132      	bne.n	8029634 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80295ce:	6879      	ldr	r1, [r7, #4]
 80295d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80295d2:	4613      	mov	r3, r2
 80295d4:	00db      	lsls	r3, r3, #3
 80295d6:	4413      	add	r3, r2
 80295d8:	009b      	lsls	r3, r3, #2
 80295da:	440b      	add	r3, r1
 80295dc:	334c      	adds	r3, #76	; 0x4c
 80295de:	6819      	ldr	r1, [r3, #0]
 80295e0:	6878      	ldr	r0, [r7, #4]
 80295e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80295e4:	4613      	mov	r3, r2
 80295e6:	00db      	lsls	r3, r3, #3
 80295e8:	4413      	add	r3, r2
 80295ea:	009b      	lsls	r3, r3, #2
 80295ec:	4403      	add	r3, r0
 80295ee:	3348      	adds	r3, #72	; 0x48
 80295f0:	681b      	ldr	r3, [r3, #0]
 80295f2:	4419      	add	r1, r3
 80295f4:	6878      	ldr	r0, [r7, #4]
 80295f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80295f8:	4613      	mov	r3, r2
 80295fa:	00db      	lsls	r3, r3, #3
 80295fc:	4413      	add	r3, r2
 80295fe:	009b      	lsls	r3, r3, #2
 8029600:	4403      	add	r3, r0
 8029602:	334c      	adds	r3, #76	; 0x4c
 8029604:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8029606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029608:	2b00      	cmp	r3, #0
 802960a:	d113      	bne.n	8029634 <HAL_PCD_IRQHandler+0x3a2>
 802960c:	6879      	ldr	r1, [r7, #4]
 802960e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029610:	4613      	mov	r3, r2
 8029612:	00db      	lsls	r3, r3, #3
 8029614:	4413      	add	r3, r2
 8029616:	009b      	lsls	r3, r3, #2
 8029618:	440b      	add	r3, r1
 802961a:	3354      	adds	r3, #84	; 0x54
 802961c:	681b      	ldr	r3, [r3, #0]
 802961e:	2b00      	cmp	r3, #0
 8029620:	d108      	bne.n	8029634 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8029622:	687b      	ldr	r3, [r7, #4]
 8029624:	6818      	ldr	r0, [r3, #0]
 8029626:	687b      	ldr	r3, [r7, #4]
 8029628:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802962c:	461a      	mov	r2, r3
 802962e:	2101      	movs	r1, #1
 8029630:	f004 ffd6 	bl	802e5e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8029634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029636:	b2db      	uxtb	r3, r3
 8029638:	4619      	mov	r1, r3
 802963a:	6878      	ldr	r0, [r7, #4]
 802963c:	f007 fcad 	bl	8030f9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8029640:	693b      	ldr	r3, [r7, #16]
 8029642:	f003 0308 	and.w	r3, r3, #8
 8029646:	2b00      	cmp	r3, #0
 8029648:	d008      	beq.n	802965c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 802964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802964c:	015a      	lsls	r2, r3, #5
 802964e:	69fb      	ldr	r3, [r7, #28]
 8029650:	4413      	add	r3, r2
 8029652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029656:	461a      	mov	r2, r3
 8029658:	2308      	movs	r3, #8
 802965a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 802965c:	693b      	ldr	r3, [r7, #16]
 802965e:	f003 0310 	and.w	r3, r3, #16
 8029662:	2b00      	cmp	r3, #0
 8029664:	d008      	beq.n	8029678 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8029666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029668:	015a      	lsls	r2, r3, #5
 802966a:	69fb      	ldr	r3, [r7, #28]
 802966c:	4413      	add	r3, r2
 802966e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029672:	461a      	mov	r2, r3
 8029674:	2310      	movs	r3, #16
 8029676:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8029678:	693b      	ldr	r3, [r7, #16]
 802967a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802967e:	2b00      	cmp	r3, #0
 8029680:	d008      	beq.n	8029694 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8029682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029684:	015a      	lsls	r2, r3, #5
 8029686:	69fb      	ldr	r3, [r7, #28]
 8029688:	4413      	add	r3, r2
 802968a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802968e:	461a      	mov	r2, r3
 8029690:	2340      	movs	r3, #64	; 0x40
 8029692:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8029694:	693b      	ldr	r3, [r7, #16]
 8029696:	f003 0302 	and.w	r3, r3, #2
 802969a:	2b00      	cmp	r3, #0
 802969c:	d023      	beq.n	80296e6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 802969e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80296a0:	6a38      	ldr	r0, [r7, #32]
 80296a2:	f003 feb7 	bl	802d414 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80296a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80296a8:	4613      	mov	r3, r2
 80296aa:	00db      	lsls	r3, r3, #3
 80296ac:	4413      	add	r3, r2
 80296ae:	009b      	lsls	r3, r3, #2
 80296b0:	3338      	adds	r3, #56	; 0x38
 80296b2:	687a      	ldr	r2, [r7, #4]
 80296b4:	4413      	add	r3, r2
 80296b6:	3304      	adds	r3, #4
 80296b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80296ba:	697b      	ldr	r3, [r7, #20]
 80296bc:	78db      	ldrb	r3, [r3, #3]
 80296be:	2b01      	cmp	r3, #1
 80296c0:	d108      	bne.n	80296d4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80296c2:	697b      	ldr	r3, [r7, #20]
 80296c4:	2200      	movs	r2, #0
 80296c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80296c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80296ca:	b2db      	uxtb	r3, r3
 80296cc:	4619      	mov	r1, r3
 80296ce:	6878      	ldr	r0, [r7, #4]
 80296d0:	f007 fcfa 	bl	80310c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80296d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80296d6:	015a      	lsls	r2, r3, #5
 80296d8:	69fb      	ldr	r3, [r7, #28]
 80296da:	4413      	add	r3, r2
 80296dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80296e0:	461a      	mov	r2, r3
 80296e2:	2302      	movs	r3, #2
 80296e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80296e6:	693b      	ldr	r3, [r7, #16]
 80296e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80296ec:	2b00      	cmp	r3, #0
 80296ee:	d003      	beq.n	80296f8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80296f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80296f2:	6878      	ldr	r0, [r7, #4]
 80296f4:	f000 fcdb 	bl	802a0ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80296f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80296fa:	3301      	adds	r3, #1
 80296fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80296fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029700:	085b      	lsrs	r3, r3, #1
 8029702:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8029704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029706:	2b00      	cmp	r3, #0
 8029708:	f47f af2e 	bne.w	8029568 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 802970c:	687b      	ldr	r3, [r7, #4]
 802970e:	681b      	ldr	r3, [r3, #0]
 8029710:	4618      	mov	r0, r3
 8029712:	f004 fea1 	bl	802e458 <USB_ReadInterrupts>
 8029716:	4603      	mov	r3, r0
 8029718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802971c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8029720:	d122      	bne.n	8029768 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8029722:	69fb      	ldr	r3, [r7, #28]
 8029724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029728:	685b      	ldr	r3, [r3, #4]
 802972a:	69fa      	ldr	r2, [r7, #28]
 802972c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029730:	f023 0301 	bic.w	r3, r3, #1
 8029734:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8029736:	687b      	ldr	r3, [r7, #4]
 8029738:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802973c:	2b01      	cmp	r3, #1
 802973e:	d108      	bne.n	8029752 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8029740:	687b      	ldr	r3, [r7, #4]
 8029742:	2200      	movs	r2, #0
 8029744:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8029748:	2100      	movs	r1, #0
 802974a:	6878      	ldr	r0, [r7, #4]
 802974c:	f000 fec2 	bl	802a4d4 <HAL_PCDEx_LPM_Callback>
 8029750:	e002      	b.n	8029758 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8029752:	6878      	ldr	r0, [r7, #4]
 8029754:	f007 fc98 	bl	8031088 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8029758:	687b      	ldr	r3, [r7, #4]
 802975a:	681b      	ldr	r3, [r3, #0]
 802975c:	695a      	ldr	r2, [r3, #20]
 802975e:	687b      	ldr	r3, [r7, #4]
 8029760:	681b      	ldr	r3, [r3, #0]
 8029762:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8029766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8029768:	687b      	ldr	r3, [r7, #4]
 802976a:	681b      	ldr	r3, [r3, #0]
 802976c:	4618      	mov	r0, r3
 802976e:	f004 fe73 	bl	802e458 <USB_ReadInterrupts>
 8029772:	4603      	mov	r3, r0
 8029774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8029778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802977c:	d112      	bne.n	80297a4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 802977e:	69fb      	ldr	r3, [r7, #28]
 8029780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029784:	689b      	ldr	r3, [r3, #8]
 8029786:	f003 0301 	and.w	r3, r3, #1
 802978a:	2b01      	cmp	r3, #1
 802978c:	d102      	bne.n	8029794 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802978e:	6878      	ldr	r0, [r7, #4]
 8029790:	f007 fc54 	bl	803103c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8029794:	687b      	ldr	r3, [r7, #4]
 8029796:	681b      	ldr	r3, [r3, #0]
 8029798:	695a      	ldr	r2, [r3, #20]
 802979a:	687b      	ldr	r3, [r7, #4]
 802979c:	681b      	ldr	r3, [r3, #0]
 802979e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80297a2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80297a4:	687b      	ldr	r3, [r7, #4]
 80297a6:	681b      	ldr	r3, [r3, #0]
 80297a8:	4618      	mov	r0, r3
 80297aa:	f004 fe55 	bl	802e458 <USB_ReadInterrupts>
 80297ae:	4603      	mov	r3, r0
 80297b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80297b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80297b8:	f040 80b7 	bne.w	802992a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80297bc:	69fb      	ldr	r3, [r7, #28]
 80297be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80297c2:	685b      	ldr	r3, [r3, #4]
 80297c4:	69fa      	ldr	r2, [r7, #28]
 80297c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80297ca:	f023 0301 	bic.w	r3, r3, #1
 80297ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80297d0:	687b      	ldr	r3, [r7, #4]
 80297d2:	681b      	ldr	r3, [r3, #0]
 80297d4:	2110      	movs	r1, #16
 80297d6:	4618      	mov	r0, r3
 80297d8:	f003 fe1c 	bl	802d414 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80297dc:	2300      	movs	r3, #0
 80297de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80297e0:	e046      	b.n	8029870 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80297e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80297e4:	015a      	lsls	r2, r3, #5
 80297e6:	69fb      	ldr	r3, [r7, #28]
 80297e8:	4413      	add	r3, r2
 80297ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80297ee:	461a      	mov	r2, r3
 80297f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80297f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80297f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80297f8:	015a      	lsls	r2, r3, #5
 80297fa:	69fb      	ldr	r3, [r7, #28]
 80297fc:	4413      	add	r3, r2
 80297fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029802:	681b      	ldr	r3, [r3, #0]
 8029804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029806:	0151      	lsls	r1, r2, #5
 8029808:	69fa      	ldr	r2, [r7, #28]
 802980a:	440a      	add	r2, r1
 802980c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8029810:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8029814:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8029816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029818:	015a      	lsls	r2, r3, #5
 802981a:	69fb      	ldr	r3, [r7, #28]
 802981c:	4413      	add	r3, r2
 802981e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029822:	461a      	mov	r2, r3
 8029824:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8029828:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802982c:	015a      	lsls	r2, r3, #5
 802982e:	69fb      	ldr	r3, [r7, #28]
 8029830:	4413      	add	r3, r2
 8029832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029836:	681b      	ldr	r3, [r3, #0]
 8029838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802983a:	0151      	lsls	r1, r2, #5
 802983c:	69fa      	ldr	r2, [r7, #28]
 802983e:	440a      	add	r2, r1
 8029840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8029844:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8029848:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802984a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802984c:	015a      	lsls	r2, r3, #5
 802984e:	69fb      	ldr	r3, [r7, #28]
 8029850:	4413      	add	r3, r2
 8029852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029856:	681b      	ldr	r3, [r3, #0]
 8029858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802985a:	0151      	lsls	r1, r2, #5
 802985c:	69fa      	ldr	r2, [r7, #28]
 802985e:	440a      	add	r2, r1
 8029860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8029864:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8029868:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802986a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802986c:	3301      	adds	r3, #1
 802986e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029870:	687b      	ldr	r3, [r7, #4]
 8029872:	685b      	ldr	r3, [r3, #4]
 8029874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029876:	429a      	cmp	r2, r3
 8029878:	d3b3      	bcc.n	80297e2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 802987a:	69fb      	ldr	r3, [r7, #28]
 802987c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029880:	69db      	ldr	r3, [r3, #28]
 8029882:	69fa      	ldr	r2, [r7, #28]
 8029884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029888:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 802988c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 802988e:	687b      	ldr	r3, [r7, #4]
 8029890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029892:	2b00      	cmp	r3, #0
 8029894:	d016      	beq.n	80298c4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8029896:	69fb      	ldr	r3, [r7, #28]
 8029898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802989c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80298a0:	69fa      	ldr	r2, [r7, #28]
 80298a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80298a6:	f043 030b 	orr.w	r3, r3, #11
 80298aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80298ae:	69fb      	ldr	r3, [r7, #28]
 80298b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80298b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80298b6:	69fa      	ldr	r2, [r7, #28]
 80298b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80298bc:	f043 030b 	orr.w	r3, r3, #11
 80298c0:	6453      	str	r3, [r2, #68]	; 0x44
 80298c2:	e015      	b.n	80298f0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80298c4:	69fb      	ldr	r3, [r7, #28]
 80298c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80298ca:	695b      	ldr	r3, [r3, #20]
 80298cc:	69fa      	ldr	r2, [r7, #28]
 80298ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80298d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80298d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80298da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80298dc:	69fb      	ldr	r3, [r7, #28]
 80298de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80298e2:	691b      	ldr	r3, [r3, #16]
 80298e4:	69fa      	ldr	r2, [r7, #28]
 80298e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80298ea:	f043 030b 	orr.w	r3, r3, #11
 80298ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80298f0:	69fb      	ldr	r3, [r7, #28]
 80298f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80298f6:	681b      	ldr	r3, [r3, #0]
 80298f8:	69fa      	ldr	r2, [r7, #28]
 80298fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80298fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8029902:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8029904:	687b      	ldr	r3, [r7, #4]
 8029906:	6818      	ldr	r0, [r3, #0]
 8029908:	687b      	ldr	r3, [r7, #4]
 802990a:	691b      	ldr	r3, [r3, #16]
 802990c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 802990e:	687b      	ldr	r3, [r7, #4]
 8029910:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8029914:	461a      	mov	r2, r3
 8029916:	f004 fe63 	bl	802e5e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 802991a:	687b      	ldr	r3, [r7, #4]
 802991c:	681b      	ldr	r3, [r3, #0]
 802991e:	695a      	ldr	r2, [r3, #20]
 8029920:	687b      	ldr	r3, [r7, #4]
 8029922:	681b      	ldr	r3, [r3, #0]
 8029924:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8029928:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 802992a:	687b      	ldr	r3, [r7, #4]
 802992c:	681b      	ldr	r3, [r3, #0]
 802992e:	4618      	mov	r0, r3
 8029930:	f004 fd92 	bl	802e458 <USB_ReadInterrupts>
 8029934:	4603      	mov	r3, r0
 8029936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802993a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802993e:	d124      	bne.n	802998a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8029940:	687b      	ldr	r3, [r7, #4]
 8029942:	681b      	ldr	r3, [r3, #0]
 8029944:	4618      	mov	r0, r3
 8029946:	f004 fe28 	bl	802e59a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 802994a:	687b      	ldr	r3, [r7, #4]
 802994c:	681b      	ldr	r3, [r3, #0]
 802994e:	4618      	mov	r0, r3
 8029950:	f003 fddd 	bl	802d50e <USB_GetDevSpeed>
 8029954:	4603      	mov	r3, r0
 8029956:	461a      	mov	r2, r3
 8029958:	687b      	ldr	r3, [r7, #4]
 802995a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 802995c:	687b      	ldr	r3, [r7, #4]
 802995e:	681c      	ldr	r4, [r3, #0]
 8029960:	f001 fa0e 	bl	802ad80 <HAL_RCC_GetHCLKFreq>
 8029964:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8029966:	687b      	ldr	r3, [r7, #4]
 8029968:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 802996a:	b2db      	uxtb	r3, r3
 802996c:	461a      	mov	r2, r3
 802996e:	4620      	mov	r0, r4
 8029970:	f003 fadc 	bl	802cf2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8029974:	6878      	ldr	r0, [r7, #4]
 8029976:	f007 fb38 	bl	8030fea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 802997a:	687b      	ldr	r3, [r7, #4]
 802997c:	681b      	ldr	r3, [r3, #0]
 802997e:	695a      	ldr	r2, [r3, #20]
 8029980:	687b      	ldr	r3, [r7, #4]
 8029982:	681b      	ldr	r3, [r3, #0]
 8029984:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8029988:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 802998a:	687b      	ldr	r3, [r7, #4]
 802998c:	681b      	ldr	r3, [r3, #0]
 802998e:	4618      	mov	r0, r3
 8029990:	f004 fd62 	bl	802e458 <USB_ReadInterrupts>
 8029994:	4603      	mov	r3, r0
 8029996:	f003 0308 	and.w	r3, r3, #8
 802999a:	2b08      	cmp	r3, #8
 802999c:	d10a      	bne.n	80299b4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 802999e:	6878      	ldr	r0, [r7, #4]
 80299a0:	f007 fb15 	bl	8030fce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80299a4:	687b      	ldr	r3, [r7, #4]
 80299a6:	681b      	ldr	r3, [r3, #0]
 80299a8:	695a      	ldr	r2, [r3, #20]
 80299aa:	687b      	ldr	r3, [r7, #4]
 80299ac:	681b      	ldr	r3, [r3, #0]
 80299ae:	f002 0208 	and.w	r2, r2, #8
 80299b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80299b4:	687b      	ldr	r3, [r7, #4]
 80299b6:	681b      	ldr	r3, [r3, #0]
 80299b8:	4618      	mov	r0, r3
 80299ba:	f004 fd4d 	bl	802e458 <USB_ReadInterrupts>
 80299be:	4603      	mov	r3, r0
 80299c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80299c4:	2b80      	cmp	r3, #128	; 0x80
 80299c6:	d122      	bne.n	8029a0e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80299c8:	6a3b      	ldr	r3, [r7, #32]
 80299ca:	699b      	ldr	r3, [r3, #24]
 80299cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80299d0:	6a3b      	ldr	r3, [r7, #32]
 80299d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80299d4:	2301      	movs	r3, #1
 80299d6:	627b      	str	r3, [r7, #36]	; 0x24
 80299d8:	e014      	b.n	8029a04 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80299da:	6879      	ldr	r1, [r7, #4]
 80299dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80299de:	4613      	mov	r3, r2
 80299e0:	00db      	lsls	r3, r3, #3
 80299e2:	4413      	add	r3, r2
 80299e4:	009b      	lsls	r3, r3, #2
 80299e6:	440b      	add	r3, r1
 80299e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80299ec:	781b      	ldrb	r3, [r3, #0]
 80299ee:	2b01      	cmp	r3, #1
 80299f0:	d105      	bne.n	80299fe <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80299f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80299f4:	b2db      	uxtb	r3, r3
 80299f6:	4619      	mov	r1, r3
 80299f8:	6878      	ldr	r0, [r7, #4]
 80299fa:	f000 fb27 	bl	802a04c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80299fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029a00:	3301      	adds	r3, #1
 8029a02:	627b      	str	r3, [r7, #36]	; 0x24
 8029a04:	687b      	ldr	r3, [r7, #4]
 8029a06:	685b      	ldr	r3, [r3, #4]
 8029a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029a0a:	429a      	cmp	r2, r3
 8029a0c:	d3e5      	bcc.n	80299da <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8029a0e:	687b      	ldr	r3, [r7, #4]
 8029a10:	681b      	ldr	r3, [r3, #0]
 8029a12:	4618      	mov	r0, r3
 8029a14:	f004 fd20 	bl	802e458 <USB_ReadInterrupts>
 8029a18:	4603      	mov	r3, r0
 8029a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8029a22:	d13b      	bne.n	8029a9c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029a24:	2301      	movs	r3, #1
 8029a26:	627b      	str	r3, [r7, #36]	; 0x24
 8029a28:	e02b      	b.n	8029a82 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8029a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029a2c:	015a      	lsls	r2, r3, #5
 8029a2e:	69fb      	ldr	r3, [r7, #28]
 8029a30:	4413      	add	r3, r2
 8029a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029a36:	681b      	ldr	r3, [r3, #0]
 8029a38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8029a3a:	6879      	ldr	r1, [r7, #4]
 8029a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029a3e:	4613      	mov	r3, r2
 8029a40:	00db      	lsls	r3, r3, #3
 8029a42:	4413      	add	r3, r2
 8029a44:	009b      	lsls	r3, r3, #2
 8029a46:	440b      	add	r3, r1
 8029a48:	3340      	adds	r3, #64	; 0x40
 8029a4a:	781b      	ldrb	r3, [r3, #0]
 8029a4c:	2b01      	cmp	r3, #1
 8029a4e:	d115      	bne.n	8029a7c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8029a50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8029a52:	2b00      	cmp	r3, #0
 8029a54:	da12      	bge.n	8029a7c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8029a56:	6879      	ldr	r1, [r7, #4]
 8029a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029a5a:	4613      	mov	r3, r2
 8029a5c:	00db      	lsls	r3, r3, #3
 8029a5e:	4413      	add	r3, r2
 8029a60:	009b      	lsls	r3, r3, #2
 8029a62:	440b      	add	r3, r1
 8029a64:	333f      	adds	r3, #63	; 0x3f
 8029a66:	2201      	movs	r2, #1
 8029a68:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8029a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029a6c:	b2db      	uxtb	r3, r3
 8029a6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8029a72:	b2db      	uxtb	r3, r3
 8029a74:	4619      	mov	r1, r3
 8029a76:	6878      	ldr	r0, [r7, #4]
 8029a78:	f000 fae8 	bl	802a04c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029a7e:	3301      	adds	r3, #1
 8029a80:	627b      	str	r3, [r7, #36]	; 0x24
 8029a82:	687b      	ldr	r3, [r7, #4]
 8029a84:	685b      	ldr	r3, [r3, #4]
 8029a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029a88:	429a      	cmp	r2, r3
 8029a8a:	d3ce      	bcc.n	8029a2a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8029a8c:	687b      	ldr	r3, [r7, #4]
 8029a8e:	681b      	ldr	r3, [r3, #0]
 8029a90:	695a      	ldr	r2, [r3, #20]
 8029a92:	687b      	ldr	r3, [r7, #4]
 8029a94:	681b      	ldr	r3, [r3, #0]
 8029a96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8029a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8029a9c:	687b      	ldr	r3, [r7, #4]
 8029a9e:	681b      	ldr	r3, [r3, #0]
 8029aa0:	4618      	mov	r0, r3
 8029aa2:	f004 fcd9 	bl	802e458 <USB_ReadInterrupts>
 8029aa6:	4603      	mov	r3, r0
 8029aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8029aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8029ab0:	d155      	bne.n	8029b5e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029ab2:	2301      	movs	r3, #1
 8029ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8029ab6:	e045      	b.n	8029b44 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8029ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029aba:	015a      	lsls	r2, r3, #5
 8029abc:	69fb      	ldr	r3, [r7, #28]
 8029abe:	4413      	add	r3, r2
 8029ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029ac4:	681b      	ldr	r3, [r3, #0]
 8029ac6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8029ac8:	6879      	ldr	r1, [r7, #4]
 8029aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029acc:	4613      	mov	r3, r2
 8029ace:	00db      	lsls	r3, r3, #3
 8029ad0:	4413      	add	r3, r2
 8029ad2:	009b      	lsls	r3, r3, #2
 8029ad4:	440b      	add	r3, r1
 8029ad6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8029ada:	781b      	ldrb	r3, [r3, #0]
 8029adc:	2b01      	cmp	r3, #1
 8029ade:	d12e      	bne.n	8029b3e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8029ae0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8029ae2:	2b00      	cmp	r3, #0
 8029ae4:	da2b      	bge.n	8029b3e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8029ae6:	69bb      	ldr	r3, [r7, #24]
 8029ae8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8029aec:	687b      	ldr	r3, [r7, #4]
 8029aee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8029af2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8029af6:	429a      	cmp	r2, r3
 8029af8:	d121      	bne.n	8029b3e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8029afa:	6879      	ldr	r1, [r7, #4]
 8029afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029afe:	4613      	mov	r3, r2
 8029b00:	00db      	lsls	r3, r3, #3
 8029b02:	4413      	add	r3, r2
 8029b04:	009b      	lsls	r3, r3, #2
 8029b06:	440b      	add	r3, r1
 8029b08:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8029b0c:	2201      	movs	r2, #1
 8029b0e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8029b10:	6a3b      	ldr	r3, [r7, #32]
 8029b12:	699b      	ldr	r3, [r3, #24]
 8029b14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8029b18:	6a3b      	ldr	r3, [r7, #32]
 8029b1a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8029b1c:	6a3b      	ldr	r3, [r7, #32]
 8029b1e:	695b      	ldr	r3, [r3, #20]
 8029b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029b24:	2b00      	cmp	r3, #0
 8029b26:	d10a      	bne.n	8029b3e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8029b28:	69fb      	ldr	r3, [r7, #28]
 8029b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029b2e:	685b      	ldr	r3, [r3, #4]
 8029b30:	69fa      	ldr	r2, [r7, #28]
 8029b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8029b3a:	6053      	str	r3, [r2, #4]
            break;
 8029b3c:	e007      	b.n	8029b4e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029b40:	3301      	adds	r3, #1
 8029b42:	627b      	str	r3, [r7, #36]	; 0x24
 8029b44:	687b      	ldr	r3, [r7, #4]
 8029b46:	685b      	ldr	r3, [r3, #4]
 8029b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029b4a:	429a      	cmp	r2, r3
 8029b4c:	d3b4      	bcc.n	8029ab8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8029b4e:	687b      	ldr	r3, [r7, #4]
 8029b50:	681b      	ldr	r3, [r3, #0]
 8029b52:	695a      	ldr	r2, [r3, #20]
 8029b54:	687b      	ldr	r3, [r7, #4]
 8029b56:	681b      	ldr	r3, [r3, #0]
 8029b58:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8029b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8029b5e:	687b      	ldr	r3, [r7, #4]
 8029b60:	681b      	ldr	r3, [r3, #0]
 8029b62:	4618      	mov	r0, r3
 8029b64:	f004 fc78 	bl	802e458 <USB_ReadInterrupts>
 8029b68:	4603      	mov	r3, r0
 8029b6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8029b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029b72:	d10a      	bne.n	8029b8a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8029b74:	6878      	ldr	r0, [r7, #4]
 8029b76:	f007 fab9 	bl	80310ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8029b7a:	687b      	ldr	r3, [r7, #4]
 8029b7c:	681b      	ldr	r3, [r3, #0]
 8029b7e:	695a      	ldr	r2, [r3, #20]
 8029b80:	687b      	ldr	r3, [r7, #4]
 8029b82:	681b      	ldr	r3, [r3, #0]
 8029b84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8029b88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8029b8a:	687b      	ldr	r3, [r7, #4]
 8029b8c:	681b      	ldr	r3, [r3, #0]
 8029b8e:	4618      	mov	r0, r3
 8029b90:	f004 fc62 	bl	802e458 <USB_ReadInterrupts>
 8029b94:	4603      	mov	r3, r0
 8029b96:	f003 0304 	and.w	r3, r3, #4
 8029b9a:	2b04      	cmp	r3, #4
 8029b9c:	d115      	bne.n	8029bca <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8029b9e:	687b      	ldr	r3, [r7, #4]
 8029ba0:	681b      	ldr	r3, [r3, #0]
 8029ba2:	685b      	ldr	r3, [r3, #4]
 8029ba4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8029ba6:	69bb      	ldr	r3, [r7, #24]
 8029ba8:	f003 0304 	and.w	r3, r3, #4
 8029bac:	2b00      	cmp	r3, #0
 8029bae:	d002      	beq.n	8029bb6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8029bb0:	6878      	ldr	r0, [r7, #4]
 8029bb2:	f007 faa9 	bl	8031108 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8029bb6:	687b      	ldr	r3, [r7, #4]
 8029bb8:	681b      	ldr	r3, [r3, #0]
 8029bba:	6859      	ldr	r1, [r3, #4]
 8029bbc:	687b      	ldr	r3, [r7, #4]
 8029bbe:	681b      	ldr	r3, [r3, #0]
 8029bc0:	69ba      	ldr	r2, [r7, #24]
 8029bc2:	430a      	orrs	r2, r1
 8029bc4:	605a      	str	r2, [r3, #4]
 8029bc6:	e000      	b.n	8029bca <HAL_PCD_IRQHandler+0x938>
      return;
 8029bc8:	bf00      	nop
    }
  }
}
 8029bca:	3734      	adds	r7, #52	; 0x34
 8029bcc:	46bd      	mov	sp, r7
 8029bce:	bd90      	pop	{r4, r7, pc}

08029bd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8029bd0:	b580      	push	{r7, lr}
 8029bd2:	b082      	sub	sp, #8
 8029bd4:	af00      	add	r7, sp, #0
 8029bd6:	6078      	str	r0, [r7, #4]
 8029bd8:	460b      	mov	r3, r1
 8029bda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8029bdc:	687b      	ldr	r3, [r7, #4]
 8029bde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029be2:	2b01      	cmp	r3, #1
 8029be4:	d101      	bne.n	8029bea <HAL_PCD_SetAddress+0x1a>
 8029be6:	2302      	movs	r3, #2
 8029be8:	e013      	b.n	8029c12 <HAL_PCD_SetAddress+0x42>
 8029bea:	687b      	ldr	r3, [r7, #4]
 8029bec:	2201      	movs	r2, #1
 8029bee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8029bf2:	687b      	ldr	r3, [r7, #4]
 8029bf4:	78fa      	ldrb	r2, [r7, #3]
 8029bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8029bfa:	687b      	ldr	r3, [r7, #4]
 8029bfc:	681b      	ldr	r3, [r3, #0]
 8029bfe:	78fa      	ldrb	r2, [r7, #3]
 8029c00:	4611      	mov	r1, r2
 8029c02:	4618      	mov	r0, r3
 8029c04:	f004 fbc0 	bl	802e388 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8029c08:	687b      	ldr	r3, [r7, #4]
 8029c0a:	2200      	movs	r2, #0
 8029c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8029c10:	2300      	movs	r3, #0
}
 8029c12:	4618      	mov	r0, r3
 8029c14:	3708      	adds	r7, #8
 8029c16:	46bd      	mov	sp, r7
 8029c18:	bd80      	pop	{r7, pc}

08029c1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8029c1a:	b580      	push	{r7, lr}
 8029c1c:	b084      	sub	sp, #16
 8029c1e:	af00      	add	r7, sp, #0
 8029c20:	6078      	str	r0, [r7, #4]
 8029c22:	4608      	mov	r0, r1
 8029c24:	4611      	mov	r1, r2
 8029c26:	461a      	mov	r2, r3
 8029c28:	4603      	mov	r3, r0
 8029c2a:	70fb      	strb	r3, [r7, #3]
 8029c2c:	460b      	mov	r3, r1
 8029c2e:	803b      	strh	r3, [r7, #0]
 8029c30:	4613      	mov	r3, r2
 8029c32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8029c34:	2300      	movs	r3, #0
 8029c36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8029c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029c3c:	2b00      	cmp	r3, #0
 8029c3e:	da0f      	bge.n	8029c60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029c40:	78fb      	ldrb	r3, [r7, #3]
 8029c42:	f003 020f 	and.w	r2, r3, #15
 8029c46:	4613      	mov	r3, r2
 8029c48:	00db      	lsls	r3, r3, #3
 8029c4a:	4413      	add	r3, r2
 8029c4c:	009b      	lsls	r3, r3, #2
 8029c4e:	3338      	adds	r3, #56	; 0x38
 8029c50:	687a      	ldr	r2, [r7, #4]
 8029c52:	4413      	add	r3, r2
 8029c54:	3304      	adds	r3, #4
 8029c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8029c58:	68fb      	ldr	r3, [r7, #12]
 8029c5a:	2201      	movs	r2, #1
 8029c5c:	705a      	strb	r2, [r3, #1]
 8029c5e:	e00f      	b.n	8029c80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029c60:	78fb      	ldrb	r3, [r7, #3]
 8029c62:	f003 020f 	and.w	r2, r3, #15
 8029c66:	4613      	mov	r3, r2
 8029c68:	00db      	lsls	r3, r3, #3
 8029c6a:	4413      	add	r3, r2
 8029c6c:	009b      	lsls	r3, r3, #2
 8029c6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029c72:	687a      	ldr	r2, [r7, #4]
 8029c74:	4413      	add	r3, r2
 8029c76:	3304      	adds	r3, #4
 8029c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8029c7a:	68fb      	ldr	r3, [r7, #12]
 8029c7c:	2200      	movs	r2, #0
 8029c7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8029c80:	78fb      	ldrb	r3, [r7, #3]
 8029c82:	f003 030f 	and.w	r3, r3, #15
 8029c86:	b2da      	uxtb	r2, r3
 8029c88:	68fb      	ldr	r3, [r7, #12]
 8029c8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8029c8c:	883a      	ldrh	r2, [r7, #0]
 8029c8e:	68fb      	ldr	r3, [r7, #12]
 8029c90:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8029c92:	68fb      	ldr	r3, [r7, #12]
 8029c94:	78ba      	ldrb	r2, [r7, #2]
 8029c96:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8029c98:	68fb      	ldr	r3, [r7, #12]
 8029c9a:	785b      	ldrb	r3, [r3, #1]
 8029c9c:	2b00      	cmp	r3, #0
 8029c9e:	d004      	beq.n	8029caa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8029ca0:	68fb      	ldr	r3, [r7, #12]
 8029ca2:	781b      	ldrb	r3, [r3, #0]
 8029ca4:	b29a      	uxth	r2, r3
 8029ca6:	68fb      	ldr	r3, [r7, #12]
 8029ca8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8029caa:	78bb      	ldrb	r3, [r7, #2]
 8029cac:	2b02      	cmp	r3, #2
 8029cae:	d102      	bne.n	8029cb6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8029cb0:	68fb      	ldr	r3, [r7, #12]
 8029cb2:	2200      	movs	r2, #0
 8029cb4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8029cb6:	687b      	ldr	r3, [r7, #4]
 8029cb8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029cbc:	2b01      	cmp	r3, #1
 8029cbe:	d101      	bne.n	8029cc4 <HAL_PCD_EP_Open+0xaa>
 8029cc0:	2302      	movs	r3, #2
 8029cc2:	e00e      	b.n	8029ce2 <HAL_PCD_EP_Open+0xc8>
 8029cc4:	687b      	ldr	r3, [r7, #4]
 8029cc6:	2201      	movs	r2, #1
 8029cc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8029ccc:	687b      	ldr	r3, [r7, #4]
 8029cce:	681b      	ldr	r3, [r3, #0]
 8029cd0:	68f9      	ldr	r1, [r7, #12]
 8029cd2:	4618      	mov	r0, r3
 8029cd4:	f003 fc40 	bl	802d558 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8029cd8:	687b      	ldr	r3, [r7, #4]
 8029cda:	2200      	movs	r2, #0
 8029cdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8029ce0:	7afb      	ldrb	r3, [r7, #11]
}
 8029ce2:	4618      	mov	r0, r3
 8029ce4:	3710      	adds	r7, #16
 8029ce6:	46bd      	mov	sp, r7
 8029ce8:	bd80      	pop	{r7, pc}

08029cea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029cea:	b580      	push	{r7, lr}
 8029cec:	b084      	sub	sp, #16
 8029cee:	af00      	add	r7, sp, #0
 8029cf0:	6078      	str	r0, [r7, #4]
 8029cf2:	460b      	mov	r3, r1
 8029cf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8029cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029cfa:	2b00      	cmp	r3, #0
 8029cfc:	da0f      	bge.n	8029d1e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029cfe:	78fb      	ldrb	r3, [r7, #3]
 8029d00:	f003 020f 	and.w	r2, r3, #15
 8029d04:	4613      	mov	r3, r2
 8029d06:	00db      	lsls	r3, r3, #3
 8029d08:	4413      	add	r3, r2
 8029d0a:	009b      	lsls	r3, r3, #2
 8029d0c:	3338      	adds	r3, #56	; 0x38
 8029d0e:	687a      	ldr	r2, [r7, #4]
 8029d10:	4413      	add	r3, r2
 8029d12:	3304      	adds	r3, #4
 8029d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8029d16:	68fb      	ldr	r3, [r7, #12]
 8029d18:	2201      	movs	r2, #1
 8029d1a:	705a      	strb	r2, [r3, #1]
 8029d1c:	e00f      	b.n	8029d3e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029d1e:	78fb      	ldrb	r3, [r7, #3]
 8029d20:	f003 020f 	and.w	r2, r3, #15
 8029d24:	4613      	mov	r3, r2
 8029d26:	00db      	lsls	r3, r3, #3
 8029d28:	4413      	add	r3, r2
 8029d2a:	009b      	lsls	r3, r3, #2
 8029d2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029d30:	687a      	ldr	r2, [r7, #4]
 8029d32:	4413      	add	r3, r2
 8029d34:	3304      	adds	r3, #4
 8029d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8029d38:	68fb      	ldr	r3, [r7, #12]
 8029d3a:	2200      	movs	r2, #0
 8029d3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8029d3e:	78fb      	ldrb	r3, [r7, #3]
 8029d40:	f003 030f 	and.w	r3, r3, #15
 8029d44:	b2da      	uxtb	r2, r3
 8029d46:	68fb      	ldr	r3, [r7, #12]
 8029d48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8029d4a:	687b      	ldr	r3, [r7, #4]
 8029d4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029d50:	2b01      	cmp	r3, #1
 8029d52:	d101      	bne.n	8029d58 <HAL_PCD_EP_Close+0x6e>
 8029d54:	2302      	movs	r3, #2
 8029d56:	e00e      	b.n	8029d76 <HAL_PCD_EP_Close+0x8c>
 8029d58:	687b      	ldr	r3, [r7, #4]
 8029d5a:	2201      	movs	r2, #1
 8029d5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8029d60:	687b      	ldr	r3, [r7, #4]
 8029d62:	681b      	ldr	r3, [r3, #0]
 8029d64:	68f9      	ldr	r1, [r7, #12]
 8029d66:	4618      	mov	r0, r3
 8029d68:	f003 fc7e 	bl	802d668 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8029d6c:	687b      	ldr	r3, [r7, #4]
 8029d6e:	2200      	movs	r2, #0
 8029d70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8029d74:	2300      	movs	r3, #0
}
 8029d76:	4618      	mov	r0, r3
 8029d78:	3710      	adds	r7, #16
 8029d7a:	46bd      	mov	sp, r7
 8029d7c:	bd80      	pop	{r7, pc}

08029d7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8029d7e:	b580      	push	{r7, lr}
 8029d80:	b086      	sub	sp, #24
 8029d82:	af00      	add	r7, sp, #0
 8029d84:	60f8      	str	r0, [r7, #12]
 8029d86:	607a      	str	r2, [r7, #4]
 8029d88:	603b      	str	r3, [r7, #0]
 8029d8a:	460b      	mov	r3, r1
 8029d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029d8e:	7afb      	ldrb	r3, [r7, #11]
 8029d90:	f003 020f 	and.w	r2, r3, #15
 8029d94:	4613      	mov	r3, r2
 8029d96:	00db      	lsls	r3, r3, #3
 8029d98:	4413      	add	r3, r2
 8029d9a:	009b      	lsls	r3, r3, #2
 8029d9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029da0:	68fa      	ldr	r2, [r7, #12]
 8029da2:	4413      	add	r3, r2
 8029da4:	3304      	adds	r3, #4
 8029da6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8029da8:	697b      	ldr	r3, [r7, #20]
 8029daa:	687a      	ldr	r2, [r7, #4]
 8029dac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8029dae:	697b      	ldr	r3, [r7, #20]
 8029db0:	683a      	ldr	r2, [r7, #0]
 8029db2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8029db4:	697b      	ldr	r3, [r7, #20]
 8029db6:	2200      	movs	r2, #0
 8029db8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8029dba:	697b      	ldr	r3, [r7, #20]
 8029dbc:	2200      	movs	r2, #0
 8029dbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8029dc0:	7afb      	ldrb	r3, [r7, #11]
 8029dc2:	f003 030f 	and.w	r3, r3, #15
 8029dc6:	b2da      	uxtb	r2, r3
 8029dc8:	697b      	ldr	r3, [r7, #20]
 8029dca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8029dcc:	68fb      	ldr	r3, [r7, #12]
 8029dce:	691b      	ldr	r3, [r3, #16]
 8029dd0:	2b01      	cmp	r3, #1
 8029dd2:	d102      	bne.n	8029dda <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8029dd4:	687a      	ldr	r2, [r7, #4]
 8029dd6:	697b      	ldr	r3, [r7, #20]
 8029dd8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8029dda:	7afb      	ldrb	r3, [r7, #11]
 8029ddc:	f003 030f 	and.w	r3, r3, #15
 8029de0:	2b00      	cmp	r3, #0
 8029de2:	d109      	bne.n	8029df8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029de4:	68fb      	ldr	r3, [r7, #12]
 8029de6:	6818      	ldr	r0, [r3, #0]
 8029de8:	68fb      	ldr	r3, [r7, #12]
 8029dea:	691b      	ldr	r3, [r3, #16]
 8029dec:	b2db      	uxtb	r3, r3
 8029dee:	461a      	mov	r2, r3
 8029df0:	6979      	ldr	r1, [r7, #20]
 8029df2:	f003 ff5d 	bl	802dcb0 <USB_EP0StartXfer>
 8029df6:	e008      	b.n	8029e0a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029df8:	68fb      	ldr	r3, [r7, #12]
 8029dfa:	6818      	ldr	r0, [r3, #0]
 8029dfc:	68fb      	ldr	r3, [r7, #12]
 8029dfe:	691b      	ldr	r3, [r3, #16]
 8029e00:	b2db      	uxtb	r3, r3
 8029e02:	461a      	mov	r2, r3
 8029e04:	6979      	ldr	r1, [r7, #20]
 8029e06:	f003 fd0b 	bl	802d820 <USB_EPStartXfer>
  }

  return HAL_OK;
 8029e0a:	2300      	movs	r3, #0
}
 8029e0c:	4618      	mov	r0, r3
 8029e0e:	3718      	adds	r7, #24
 8029e10:	46bd      	mov	sp, r7
 8029e12:	bd80      	pop	{r7, pc}

08029e14 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029e14:	b480      	push	{r7}
 8029e16:	b083      	sub	sp, #12
 8029e18:	af00      	add	r7, sp, #0
 8029e1a:	6078      	str	r0, [r7, #4]
 8029e1c:	460b      	mov	r3, r1
 8029e1e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8029e20:	78fb      	ldrb	r3, [r7, #3]
 8029e22:	f003 020f 	and.w	r2, r3, #15
 8029e26:	6879      	ldr	r1, [r7, #4]
 8029e28:	4613      	mov	r3, r2
 8029e2a:	00db      	lsls	r3, r3, #3
 8029e2c:	4413      	add	r3, r2
 8029e2e:	009b      	lsls	r3, r3, #2
 8029e30:	440b      	add	r3, r1
 8029e32:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8029e36:	681b      	ldr	r3, [r3, #0]
}
 8029e38:	4618      	mov	r0, r3
 8029e3a:	370c      	adds	r7, #12
 8029e3c:	46bd      	mov	sp, r7
 8029e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e42:	4770      	bx	lr

08029e44 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8029e44:	b580      	push	{r7, lr}
 8029e46:	b086      	sub	sp, #24
 8029e48:	af00      	add	r7, sp, #0
 8029e4a:	60f8      	str	r0, [r7, #12]
 8029e4c:	607a      	str	r2, [r7, #4]
 8029e4e:	603b      	str	r3, [r7, #0]
 8029e50:	460b      	mov	r3, r1
 8029e52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029e54:	7afb      	ldrb	r3, [r7, #11]
 8029e56:	f003 020f 	and.w	r2, r3, #15
 8029e5a:	4613      	mov	r3, r2
 8029e5c:	00db      	lsls	r3, r3, #3
 8029e5e:	4413      	add	r3, r2
 8029e60:	009b      	lsls	r3, r3, #2
 8029e62:	3338      	adds	r3, #56	; 0x38
 8029e64:	68fa      	ldr	r2, [r7, #12]
 8029e66:	4413      	add	r3, r2
 8029e68:	3304      	adds	r3, #4
 8029e6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8029e6c:	697b      	ldr	r3, [r7, #20]
 8029e6e:	687a      	ldr	r2, [r7, #4]
 8029e70:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8029e72:	697b      	ldr	r3, [r7, #20]
 8029e74:	683a      	ldr	r2, [r7, #0]
 8029e76:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8029e78:	697b      	ldr	r3, [r7, #20]
 8029e7a:	2200      	movs	r2, #0
 8029e7c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8029e7e:	697b      	ldr	r3, [r7, #20]
 8029e80:	2201      	movs	r2, #1
 8029e82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8029e84:	7afb      	ldrb	r3, [r7, #11]
 8029e86:	f003 030f 	and.w	r3, r3, #15
 8029e8a:	b2da      	uxtb	r2, r3
 8029e8c:	697b      	ldr	r3, [r7, #20]
 8029e8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8029e90:	68fb      	ldr	r3, [r7, #12]
 8029e92:	691b      	ldr	r3, [r3, #16]
 8029e94:	2b01      	cmp	r3, #1
 8029e96:	d102      	bne.n	8029e9e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8029e98:	687a      	ldr	r2, [r7, #4]
 8029e9a:	697b      	ldr	r3, [r7, #20]
 8029e9c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8029e9e:	7afb      	ldrb	r3, [r7, #11]
 8029ea0:	f003 030f 	and.w	r3, r3, #15
 8029ea4:	2b00      	cmp	r3, #0
 8029ea6:	d109      	bne.n	8029ebc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029ea8:	68fb      	ldr	r3, [r7, #12]
 8029eaa:	6818      	ldr	r0, [r3, #0]
 8029eac:	68fb      	ldr	r3, [r7, #12]
 8029eae:	691b      	ldr	r3, [r3, #16]
 8029eb0:	b2db      	uxtb	r3, r3
 8029eb2:	461a      	mov	r2, r3
 8029eb4:	6979      	ldr	r1, [r7, #20]
 8029eb6:	f003 fefb 	bl	802dcb0 <USB_EP0StartXfer>
 8029eba:	e008      	b.n	8029ece <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029ebc:	68fb      	ldr	r3, [r7, #12]
 8029ebe:	6818      	ldr	r0, [r3, #0]
 8029ec0:	68fb      	ldr	r3, [r7, #12]
 8029ec2:	691b      	ldr	r3, [r3, #16]
 8029ec4:	b2db      	uxtb	r3, r3
 8029ec6:	461a      	mov	r2, r3
 8029ec8:	6979      	ldr	r1, [r7, #20]
 8029eca:	f003 fca9 	bl	802d820 <USB_EPStartXfer>
  }

  return HAL_OK;
 8029ece:	2300      	movs	r3, #0
}
 8029ed0:	4618      	mov	r0, r3
 8029ed2:	3718      	adds	r7, #24
 8029ed4:	46bd      	mov	sp, r7
 8029ed6:	bd80      	pop	{r7, pc}

08029ed8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029ed8:	b580      	push	{r7, lr}
 8029eda:	b084      	sub	sp, #16
 8029edc:	af00      	add	r7, sp, #0
 8029ede:	6078      	str	r0, [r7, #4]
 8029ee0:	460b      	mov	r3, r1
 8029ee2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8029ee4:	78fb      	ldrb	r3, [r7, #3]
 8029ee6:	f003 020f 	and.w	r2, r3, #15
 8029eea:	687b      	ldr	r3, [r7, #4]
 8029eec:	685b      	ldr	r3, [r3, #4]
 8029eee:	429a      	cmp	r2, r3
 8029ef0:	d901      	bls.n	8029ef6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8029ef2:	2301      	movs	r3, #1
 8029ef4:	e050      	b.n	8029f98 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8029ef6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029efa:	2b00      	cmp	r3, #0
 8029efc:	da0f      	bge.n	8029f1e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029efe:	78fb      	ldrb	r3, [r7, #3]
 8029f00:	f003 020f 	and.w	r2, r3, #15
 8029f04:	4613      	mov	r3, r2
 8029f06:	00db      	lsls	r3, r3, #3
 8029f08:	4413      	add	r3, r2
 8029f0a:	009b      	lsls	r3, r3, #2
 8029f0c:	3338      	adds	r3, #56	; 0x38
 8029f0e:	687a      	ldr	r2, [r7, #4]
 8029f10:	4413      	add	r3, r2
 8029f12:	3304      	adds	r3, #4
 8029f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8029f16:	68fb      	ldr	r3, [r7, #12]
 8029f18:	2201      	movs	r2, #1
 8029f1a:	705a      	strb	r2, [r3, #1]
 8029f1c:	e00d      	b.n	8029f3a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8029f1e:	78fa      	ldrb	r2, [r7, #3]
 8029f20:	4613      	mov	r3, r2
 8029f22:	00db      	lsls	r3, r3, #3
 8029f24:	4413      	add	r3, r2
 8029f26:	009b      	lsls	r3, r3, #2
 8029f28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029f2c:	687a      	ldr	r2, [r7, #4]
 8029f2e:	4413      	add	r3, r2
 8029f30:	3304      	adds	r3, #4
 8029f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8029f34:	68fb      	ldr	r3, [r7, #12]
 8029f36:	2200      	movs	r2, #0
 8029f38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8029f3a:	68fb      	ldr	r3, [r7, #12]
 8029f3c:	2201      	movs	r2, #1
 8029f3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8029f40:	78fb      	ldrb	r3, [r7, #3]
 8029f42:	f003 030f 	and.w	r3, r3, #15
 8029f46:	b2da      	uxtb	r2, r3
 8029f48:	68fb      	ldr	r3, [r7, #12]
 8029f4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8029f4c:	687b      	ldr	r3, [r7, #4]
 8029f4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029f52:	2b01      	cmp	r3, #1
 8029f54:	d101      	bne.n	8029f5a <HAL_PCD_EP_SetStall+0x82>
 8029f56:	2302      	movs	r3, #2
 8029f58:	e01e      	b.n	8029f98 <HAL_PCD_EP_SetStall+0xc0>
 8029f5a:	687b      	ldr	r3, [r7, #4]
 8029f5c:	2201      	movs	r2, #1
 8029f5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8029f62:	687b      	ldr	r3, [r7, #4]
 8029f64:	681b      	ldr	r3, [r3, #0]
 8029f66:	68f9      	ldr	r1, [r7, #12]
 8029f68:	4618      	mov	r0, r3
 8029f6a:	f004 f939 	bl	802e1e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8029f6e:	78fb      	ldrb	r3, [r7, #3]
 8029f70:	f003 030f 	and.w	r3, r3, #15
 8029f74:	2b00      	cmp	r3, #0
 8029f76:	d10a      	bne.n	8029f8e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8029f78:	687b      	ldr	r3, [r7, #4]
 8029f7a:	6818      	ldr	r0, [r3, #0]
 8029f7c:	687b      	ldr	r3, [r7, #4]
 8029f7e:	691b      	ldr	r3, [r3, #16]
 8029f80:	b2d9      	uxtb	r1, r3
 8029f82:	687b      	ldr	r3, [r7, #4]
 8029f84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029f88:	461a      	mov	r2, r3
 8029f8a:	f004 fb29 	bl	802e5e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8029f8e:	687b      	ldr	r3, [r7, #4]
 8029f90:	2200      	movs	r2, #0
 8029f92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8029f96:	2300      	movs	r3, #0
}
 8029f98:	4618      	mov	r0, r3
 8029f9a:	3710      	adds	r7, #16
 8029f9c:	46bd      	mov	sp, r7
 8029f9e:	bd80      	pop	{r7, pc}

08029fa0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029fa0:	b580      	push	{r7, lr}
 8029fa2:	b084      	sub	sp, #16
 8029fa4:	af00      	add	r7, sp, #0
 8029fa6:	6078      	str	r0, [r7, #4]
 8029fa8:	460b      	mov	r3, r1
 8029faa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8029fac:	78fb      	ldrb	r3, [r7, #3]
 8029fae:	f003 020f 	and.w	r2, r3, #15
 8029fb2:	687b      	ldr	r3, [r7, #4]
 8029fb4:	685b      	ldr	r3, [r3, #4]
 8029fb6:	429a      	cmp	r2, r3
 8029fb8:	d901      	bls.n	8029fbe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8029fba:	2301      	movs	r3, #1
 8029fbc:	e042      	b.n	802a044 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8029fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029fc2:	2b00      	cmp	r3, #0
 8029fc4:	da0f      	bge.n	8029fe6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029fc6:	78fb      	ldrb	r3, [r7, #3]
 8029fc8:	f003 020f 	and.w	r2, r3, #15
 8029fcc:	4613      	mov	r3, r2
 8029fce:	00db      	lsls	r3, r3, #3
 8029fd0:	4413      	add	r3, r2
 8029fd2:	009b      	lsls	r3, r3, #2
 8029fd4:	3338      	adds	r3, #56	; 0x38
 8029fd6:	687a      	ldr	r2, [r7, #4]
 8029fd8:	4413      	add	r3, r2
 8029fda:	3304      	adds	r3, #4
 8029fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8029fde:	68fb      	ldr	r3, [r7, #12]
 8029fe0:	2201      	movs	r2, #1
 8029fe2:	705a      	strb	r2, [r3, #1]
 8029fe4:	e00f      	b.n	802a006 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029fe6:	78fb      	ldrb	r3, [r7, #3]
 8029fe8:	f003 020f 	and.w	r2, r3, #15
 8029fec:	4613      	mov	r3, r2
 8029fee:	00db      	lsls	r3, r3, #3
 8029ff0:	4413      	add	r3, r2
 8029ff2:	009b      	lsls	r3, r3, #2
 8029ff4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029ff8:	687a      	ldr	r2, [r7, #4]
 8029ffa:	4413      	add	r3, r2
 8029ffc:	3304      	adds	r3, #4
 8029ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 802a000:	68fb      	ldr	r3, [r7, #12]
 802a002:	2200      	movs	r2, #0
 802a004:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 802a006:	68fb      	ldr	r3, [r7, #12]
 802a008:	2200      	movs	r2, #0
 802a00a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 802a00c:	78fb      	ldrb	r3, [r7, #3]
 802a00e:	f003 030f 	and.w	r3, r3, #15
 802a012:	b2da      	uxtb	r2, r3
 802a014:	68fb      	ldr	r3, [r7, #12]
 802a016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 802a018:	687b      	ldr	r3, [r7, #4]
 802a01a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802a01e:	2b01      	cmp	r3, #1
 802a020:	d101      	bne.n	802a026 <HAL_PCD_EP_ClrStall+0x86>
 802a022:	2302      	movs	r3, #2
 802a024:	e00e      	b.n	802a044 <HAL_PCD_EP_ClrStall+0xa4>
 802a026:	687b      	ldr	r3, [r7, #4]
 802a028:	2201      	movs	r2, #1
 802a02a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 802a02e:	687b      	ldr	r3, [r7, #4]
 802a030:	681b      	ldr	r3, [r3, #0]
 802a032:	68f9      	ldr	r1, [r7, #12]
 802a034:	4618      	mov	r0, r3
 802a036:	f004 f941 	bl	802e2bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 802a03a:	687b      	ldr	r3, [r7, #4]
 802a03c:	2200      	movs	r2, #0
 802a03e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 802a042:	2300      	movs	r3, #0
}
 802a044:	4618      	mov	r0, r3
 802a046:	3710      	adds	r7, #16
 802a048:	46bd      	mov	sp, r7
 802a04a:	bd80      	pop	{r7, pc}

0802a04c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802a04c:	b580      	push	{r7, lr}
 802a04e:	b084      	sub	sp, #16
 802a050:	af00      	add	r7, sp, #0
 802a052:	6078      	str	r0, [r7, #4]
 802a054:	460b      	mov	r3, r1
 802a056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 802a058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a05c:	2b00      	cmp	r3, #0
 802a05e:	da0c      	bge.n	802a07a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802a060:	78fb      	ldrb	r3, [r7, #3]
 802a062:	f003 020f 	and.w	r2, r3, #15
 802a066:	4613      	mov	r3, r2
 802a068:	00db      	lsls	r3, r3, #3
 802a06a:	4413      	add	r3, r2
 802a06c:	009b      	lsls	r3, r3, #2
 802a06e:	3338      	adds	r3, #56	; 0x38
 802a070:	687a      	ldr	r2, [r7, #4]
 802a072:	4413      	add	r3, r2
 802a074:	3304      	adds	r3, #4
 802a076:	60fb      	str	r3, [r7, #12]
 802a078:	e00c      	b.n	802a094 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 802a07a:	78fb      	ldrb	r3, [r7, #3]
 802a07c:	f003 020f 	and.w	r2, r3, #15
 802a080:	4613      	mov	r3, r2
 802a082:	00db      	lsls	r3, r3, #3
 802a084:	4413      	add	r3, r2
 802a086:	009b      	lsls	r3, r3, #2
 802a088:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802a08c:	687a      	ldr	r2, [r7, #4]
 802a08e:	4413      	add	r3, r2
 802a090:	3304      	adds	r3, #4
 802a092:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 802a094:	687b      	ldr	r3, [r7, #4]
 802a096:	681b      	ldr	r3, [r3, #0]
 802a098:	68f9      	ldr	r1, [r7, #12]
 802a09a:	4618      	mov	r0, r3
 802a09c:	f003 ff60 	bl	802df60 <USB_EPStopXfer>
 802a0a0:	4603      	mov	r3, r0
 802a0a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 802a0a4:	7afb      	ldrb	r3, [r7, #11]
}
 802a0a6:	4618      	mov	r0, r3
 802a0a8:	3710      	adds	r7, #16
 802a0aa:	46bd      	mov	sp, r7
 802a0ac:	bd80      	pop	{r7, pc}

0802a0ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 802a0ae:	b580      	push	{r7, lr}
 802a0b0:	b08a      	sub	sp, #40	; 0x28
 802a0b2:	af02      	add	r7, sp, #8
 802a0b4:	6078      	str	r0, [r7, #4]
 802a0b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802a0b8:	687b      	ldr	r3, [r7, #4]
 802a0ba:	681b      	ldr	r3, [r3, #0]
 802a0bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a0be:	697b      	ldr	r3, [r7, #20]
 802a0c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 802a0c2:	683a      	ldr	r2, [r7, #0]
 802a0c4:	4613      	mov	r3, r2
 802a0c6:	00db      	lsls	r3, r3, #3
 802a0c8:	4413      	add	r3, r2
 802a0ca:	009b      	lsls	r3, r3, #2
 802a0cc:	3338      	adds	r3, #56	; 0x38
 802a0ce:	687a      	ldr	r2, [r7, #4]
 802a0d0:	4413      	add	r3, r2
 802a0d2:	3304      	adds	r3, #4
 802a0d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 802a0d6:	68fb      	ldr	r3, [r7, #12]
 802a0d8:	6a1a      	ldr	r2, [r3, #32]
 802a0da:	68fb      	ldr	r3, [r7, #12]
 802a0dc:	699b      	ldr	r3, [r3, #24]
 802a0de:	429a      	cmp	r2, r3
 802a0e0:	d901      	bls.n	802a0e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 802a0e2:	2301      	movs	r3, #1
 802a0e4:	e06c      	b.n	802a1c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 802a0e6:	68fb      	ldr	r3, [r7, #12]
 802a0e8:	699a      	ldr	r2, [r3, #24]
 802a0ea:	68fb      	ldr	r3, [r7, #12]
 802a0ec:	6a1b      	ldr	r3, [r3, #32]
 802a0ee:	1ad3      	subs	r3, r2, r3
 802a0f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 802a0f2:	68fb      	ldr	r3, [r7, #12]
 802a0f4:	68db      	ldr	r3, [r3, #12]
 802a0f6:	69fa      	ldr	r2, [r7, #28]
 802a0f8:	429a      	cmp	r2, r3
 802a0fa:	d902      	bls.n	802a102 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 802a0fc:	68fb      	ldr	r3, [r7, #12]
 802a0fe:	68db      	ldr	r3, [r3, #12]
 802a100:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 802a102:	69fb      	ldr	r3, [r7, #28]
 802a104:	3303      	adds	r3, #3
 802a106:	089b      	lsrs	r3, r3, #2
 802a108:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 802a10a:	e02b      	b.n	802a164 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 802a10c:	68fb      	ldr	r3, [r7, #12]
 802a10e:	699a      	ldr	r2, [r3, #24]
 802a110:	68fb      	ldr	r3, [r7, #12]
 802a112:	6a1b      	ldr	r3, [r3, #32]
 802a114:	1ad3      	subs	r3, r2, r3
 802a116:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 802a118:	68fb      	ldr	r3, [r7, #12]
 802a11a:	68db      	ldr	r3, [r3, #12]
 802a11c:	69fa      	ldr	r2, [r7, #28]
 802a11e:	429a      	cmp	r2, r3
 802a120:	d902      	bls.n	802a128 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 802a122:	68fb      	ldr	r3, [r7, #12]
 802a124:	68db      	ldr	r3, [r3, #12]
 802a126:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 802a128:	69fb      	ldr	r3, [r7, #28]
 802a12a:	3303      	adds	r3, #3
 802a12c:	089b      	lsrs	r3, r3, #2
 802a12e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 802a130:	68fb      	ldr	r3, [r7, #12]
 802a132:	6919      	ldr	r1, [r3, #16]
 802a134:	683b      	ldr	r3, [r7, #0]
 802a136:	b2da      	uxtb	r2, r3
 802a138:	69fb      	ldr	r3, [r7, #28]
 802a13a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 802a13c:	687b      	ldr	r3, [r7, #4]
 802a13e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 802a140:	b2db      	uxtb	r3, r3
 802a142:	9300      	str	r3, [sp, #0]
 802a144:	4603      	mov	r3, r0
 802a146:	6978      	ldr	r0, [r7, #20]
 802a148:	f003 ffb4 	bl	802e0b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 802a14c:	68fb      	ldr	r3, [r7, #12]
 802a14e:	691a      	ldr	r2, [r3, #16]
 802a150:	69fb      	ldr	r3, [r7, #28]
 802a152:	441a      	add	r2, r3
 802a154:	68fb      	ldr	r3, [r7, #12]
 802a156:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 802a158:	68fb      	ldr	r3, [r7, #12]
 802a15a:	6a1a      	ldr	r2, [r3, #32]
 802a15c:	69fb      	ldr	r3, [r7, #28]
 802a15e:	441a      	add	r2, r3
 802a160:	68fb      	ldr	r3, [r7, #12]
 802a162:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 802a164:	683b      	ldr	r3, [r7, #0]
 802a166:	015a      	lsls	r2, r3, #5
 802a168:	693b      	ldr	r3, [r7, #16]
 802a16a:	4413      	add	r3, r2
 802a16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a170:	699b      	ldr	r3, [r3, #24]
 802a172:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 802a174:	69ba      	ldr	r2, [r7, #24]
 802a176:	429a      	cmp	r2, r3
 802a178:	d809      	bhi.n	802a18e <PCD_WriteEmptyTxFifo+0xe0>
 802a17a:	68fb      	ldr	r3, [r7, #12]
 802a17c:	6a1a      	ldr	r2, [r3, #32]
 802a17e:	68fb      	ldr	r3, [r7, #12]
 802a180:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 802a182:	429a      	cmp	r2, r3
 802a184:	d203      	bcs.n	802a18e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 802a186:	68fb      	ldr	r3, [r7, #12]
 802a188:	699b      	ldr	r3, [r3, #24]
 802a18a:	2b00      	cmp	r3, #0
 802a18c:	d1be      	bne.n	802a10c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 802a18e:	68fb      	ldr	r3, [r7, #12]
 802a190:	699a      	ldr	r2, [r3, #24]
 802a192:	68fb      	ldr	r3, [r7, #12]
 802a194:	6a1b      	ldr	r3, [r3, #32]
 802a196:	429a      	cmp	r2, r3
 802a198:	d811      	bhi.n	802a1be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 802a19a:	683b      	ldr	r3, [r7, #0]
 802a19c:	f003 030f 	and.w	r3, r3, #15
 802a1a0:	2201      	movs	r2, #1
 802a1a2:	fa02 f303 	lsl.w	r3, r2, r3
 802a1a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 802a1a8:	693b      	ldr	r3, [r7, #16]
 802a1aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a1ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802a1b0:	68bb      	ldr	r3, [r7, #8]
 802a1b2:	43db      	mvns	r3, r3
 802a1b4:	6939      	ldr	r1, [r7, #16]
 802a1b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a1ba:	4013      	ands	r3, r2
 802a1bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 802a1be:	2300      	movs	r3, #0
}
 802a1c0:	4618      	mov	r0, r3
 802a1c2:	3720      	adds	r7, #32
 802a1c4:	46bd      	mov	sp, r7
 802a1c6:	bd80      	pop	{r7, pc}

0802a1c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 802a1c8:	b580      	push	{r7, lr}
 802a1ca:	b088      	sub	sp, #32
 802a1cc:	af00      	add	r7, sp, #0
 802a1ce:	6078      	str	r0, [r7, #4]
 802a1d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802a1d2:	687b      	ldr	r3, [r7, #4]
 802a1d4:	681b      	ldr	r3, [r3, #0]
 802a1d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a1d8:	69fb      	ldr	r3, [r7, #28]
 802a1da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802a1dc:	69fb      	ldr	r3, [r7, #28]
 802a1de:	333c      	adds	r3, #60	; 0x3c
 802a1e0:	3304      	adds	r3, #4
 802a1e2:	681b      	ldr	r3, [r3, #0]
 802a1e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 802a1e6:	683b      	ldr	r3, [r7, #0]
 802a1e8:	015a      	lsls	r2, r3, #5
 802a1ea:	69bb      	ldr	r3, [r7, #24]
 802a1ec:	4413      	add	r3, r2
 802a1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a1f2:	689b      	ldr	r3, [r3, #8]
 802a1f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 802a1f6:	687b      	ldr	r3, [r7, #4]
 802a1f8:	691b      	ldr	r3, [r3, #16]
 802a1fa:	2b01      	cmp	r3, #1
 802a1fc:	d17b      	bne.n	802a2f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 802a1fe:	693b      	ldr	r3, [r7, #16]
 802a200:	f003 0308 	and.w	r3, r3, #8
 802a204:	2b00      	cmp	r3, #0
 802a206:	d015      	beq.n	802a234 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802a208:	697b      	ldr	r3, [r7, #20]
 802a20a:	4a61      	ldr	r2, [pc, #388]	; (802a390 <PCD_EP_OutXfrComplete_int+0x1c8>)
 802a20c:	4293      	cmp	r3, r2
 802a20e:	f240 80b9 	bls.w	802a384 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 802a212:	693b      	ldr	r3, [r7, #16]
 802a214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802a218:	2b00      	cmp	r3, #0
 802a21a:	f000 80b3 	beq.w	802a384 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 802a21e:	683b      	ldr	r3, [r7, #0]
 802a220:	015a      	lsls	r2, r3, #5
 802a222:	69bb      	ldr	r3, [r7, #24]
 802a224:	4413      	add	r3, r2
 802a226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a22a:	461a      	mov	r2, r3
 802a22c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a230:	6093      	str	r3, [r2, #8]
 802a232:	e0a7      	b.n	802a384 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 802a234:	693b      	ldr	r3, [r7, #16]
 802a236:	f003 0320 	and.w	r3, r3, #32
 802a23a:	2b00      	cmp	r3, #0
 802a23c:	d009      	beq.n	802a252 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 802a23e:	683b      	ldr	r3, [r7, #0]
 802a240:	015a      	lsls	r2, r3, #5
 802a242:	69bb      	ldr	r3, [r7, #24]
 802a244:	4413      	add	r3, r2
 802a246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a24a:	461a      	mov	r2, r3
 802a24c:	2320      	movs	r3, #32
 802a24e:	6093      	str	r3, [r2, #8]
 802a250:	e098      	b.n	802a384 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 802a252:	693b      	ldr	r3, [r7, #16]
 802a254:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802a258:	2b00      	cmp	r3, #0
 802a25a:	f040 8093 	bne.w	802a384 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802a25e:	697b      	ldr	r3, [r7, #20]
 802a260:	4a4b      	ldr	r2, [pc, #300]	; (802a390 <PCD_EP_OutXfrComplete_int+0x1c8>)
 802a262:	4293      	cmp	r3, r2
 802a264:	d90f      	bls.n	802a286 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 802a266:	693b      	ldr	r3, [r7, #16]
 802a268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802a26c:	2b00      	cmp	r3, #0
 802a26e:	d00a      	beq.n	802a286 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 802a270:	683b      	ldr	r3, [r7, #0]
 802a272:	015a      	lsls	r2, r3, #5
 802a274:	69bb      	ldr	r3, [r7, #24]
 802a276:	4413      	add	r3, r2
 802a278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a27c:	461a      	mov	r2, r3
 802a27e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a282:	6093      	str	r3, [r2, #8]
 802a284:	e07e      	b.n	802a384 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 802a286:	683a      	ldr	r2, [r7, #0]
 802a288:	4613      	mov	r3, r2
 802a28a:	00db      	lsls	r3, r3, #3
 802a28c:	4413      	add	r3, r2
 802a28e:	009b      	lsls	r3, r3, #2
 802a290:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802a294:	687a      	ldr	r2, [r7, #4]
 802a296:	4413      	add	r3, r2
 802a298:	3304      	adds	r3, #4
 802a29a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 802a29c:	68fb      	ldr	r3, [r7, #12]
 802a29e:	69da      	ldr	r2, [r3, #28]
 802a2a0:	683b      	ldr	r3, [r7, #0]
 802a2a2:	0159      	lsls	r1, r3, #5
 802a2a4:	69bb      	ldr	r3, [r7, #24]
 802a2a6:	440b      	add	r3, r1
 802a2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a2ac:	691b      	ldr	r3, [r3, #16]
 802a2ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802a2b2:	1ad2      	subs	r2, r2, r3
 802a2b4:	68fb      	ldr	r3, [r7, #12]
 802a2b6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 802a2b8:	683b      	ldr	r3, [r7, #0]
 802a2ba:	2b00      	cmp	r3, #0
 802a2bc:	d114      	bne.n	802a2e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 802a2be:	68fb      	ldr	r3, [r7, #12]
 802a2c0:	699b      	ldr	r3, [r3, #24]
 802a2c2:	2b00      	cmp	r3, #0
 802a2c4:	d109      	bne.n	802a2da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 802a2c6:	687b      	ldr	r3, [r7, #4]
 802a2c8:	6818      	ldr	r0, [r3, #0]
 802a2ca:	687b      	ldr	r3, [r7, #4]
 802a2cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802a2d0:	461a      	mov	r2, r3
 802a2d2:	2101      	movs	r1, #1
 802a2d4:	f004 f984 	bl	802e5e0 <USB_EP0_OutStart>
 802a2d8:	e006      	b.n	802a2e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 802a2da:	68fb      	ldr	r3, [r7, #12]
 802a2dc:	691a      	ldr	r2, [r3, #16]
 802a2de:	68fb      	ldr	r3, [r7, #12]
 802a2e0:	6a1b      	ldr	r3, [r3, #32]
 802a2e2:	441a      	add	r2, r3
 802a2e4:	68fb      	ldr	r3, [r7, #12]
 802a2e6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 802a2e8:	683b      	ldr	r3, [r7, #0]
 802a2ea:	b2db      	uxtb	r3, r3
 802a2ec:	4619      	mov	r1, r3
 802a2ee:	6878      	ldr	r0, [r7, #4]
 802a2f0:	f006 fe38 	bl	8030f64 <HAL_PCD_DataOutStageCallback>
 802a2f4:	e046      	b.n	802a384 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 802a2f6:	697b      	ldr	r3, [r7, #20]
 802a2f8:	4a26      	ldr	r2, [pc, #152]	; (802a394 <PCD_EP_OutXfrComplete_int+0x1cc>)
 802a2fa:	4293      	cmp	r3, r2
 802a2fc:	d124      	bne.n	802a348 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 802a2fe:	693b      	ldr	r3, [r7, #16]
 802a300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802a304:	2b00      	cmp	r3, #0
 802a306:	d00a      	beq.n	802a31e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 802a308:	683b      	ldr	r3, [r7, #0]
 802a30a:	015a      	lsls	r2, r3, #5
 802a30c:	69bb      	ldr	r3, [r7, #24]
 802a30e:	4413      	add	r3, r2
 802a310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a314:	461a      	mov	r2, r3
 802a316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a31a:	6093      	str	r3, [r2, #8]
 802a31c:	e032      	b.n	802a384 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 802a31e:	693b      	ldr	r3, [r7, #16]
 802a320:	f003 0320 	and.w	r3, r3, #32
 802a324:	2b00      	cmp	r3, #0
 802a326:	d008      	beq.n	802a33a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 802a328:	683b      	ldr	r3, [r7, #0]
 802a32a:	015a      	lsls	r2, r3, #5
 802a32c:	69bb      	ldr	r3, [r7, #24]
 802a32e:	4413      	add	r3, r2
 802a330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a334:	461a      	mov	r2, r3
 802a336:	2320      	movs	r3, #32
 802a338:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 802a33a:	683b      	ldr	r3, [r7, #0]
 802a33c:	b2db      	uxtb	r3, r3
 802a33e:	4619      	mov	r1, r3
 802a340:	6878      	ldr	r0, [r7, #4]
 802a342:	f006 fe0f 	bl	8030f64 <HAL_PCD_DataOutStageCallback>
 802a346:	e01d      	b.n	802a384 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 802a348:	683b      	ldr	r3, [r7, #0]
 802a34a:	2b00      	cmp	r3, #0
 802a34c:	d114      	bne.n	802a378 <PCD_EP_OutXfrComplete_int+0x1b0>
 802a34e:	6879      	ldr	r1, [r7, #4]
 802a350:	683a      	ldr	r2, [r7, #0]
 802a352:	4613      	mov	r3, r2
 802a354:	00db      	lsls	r3, r3, #3
 802a356:	4413      	add	r3, r2
 802a358:	009b      	lsls	r3, r3, #2
 802a35a:	440b      	add	r3, r1
 802a35c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 802a360:	681b      	ldr	r3, [r3, #0]
 802a362:	2b00      	cmp	r3, #0
 802a364:	d108      	bne.n	802a378 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 802a366:	687b      	ldr	r3, [r7, #4]
 802a368:	6818      	ldr	r0, [r3, #0]
 802a36a:	687b      	ldr	r3, [r7, #4]
 802a36c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802a370:	461a      	mov	r2, r3
 802a372:	2100      	movs	r1, #0
 802a374:	f004 f934 	bl	802e5e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 802a378:	683b      	ldr	r3, [r7, #0]
 802a37a:	b2db      	uxtb	r3, r3
 802a37c:	4619      	mov	r1, r3
 802a37e:	6878      	ldr	r0, [r7, #4]
 802a380:	f006 fdf0 	bl	8030f64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 802a384:	2300      	movs	r3, #0
}
 802a386:	4618      	mov	r0, r3
 802a388:	3720      	adds	r7, #32
 802a38a:	46bd      	mov	sp, r7
 802a38c:	bd80      	pop	{r7, pc}
 802a38e:	bf00      	nop
 802a390:	4f54300a 	.word	0x4f54300a
 802a394:	4f54310a 	.word	0x4f54310a

0802a398 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 802a398:	b580      	push	{r7, lr}
 802a39a:	b086      	sub	sp, #24
 802a39c:	af00      	add	r7, sp, #0
 802a39e:	6078      	str	r0, [r7, #4]
 802a3a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802a3a2:	687b      	ldr	r3, [r7, #4]
 802a3a4:	681b      	ldr	r3, [r3, #0]
 802a3a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a3a8:	697b      	ldr	r3, [r7, #20]
 802a3aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802a3ac:	697b      	ldr	r3, [r7, #20]
 802a3ae:	333c      	adds	r3, #60	; 0x3c
 802a3b0:	3304      	adds	r3, #4
 802a3b2:	681b      	ldr	r3, [r3, #0]
 802a3b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 802a3b6:	683b      	ldr	r3, [r7, #0]
 802a3b8:	015a      	lsls	r2, r3, #5
 802a3ba:	693b      	ldr	r3, [r7, #16]
 802a3bc:	4413      	add	r3, r2
 802a3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a3c2:	689b      	ldr	r3, [r3, #8]
 802a3c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802a3c6:	68fb      	ldr	r3, [r7, #12]
 802a3c8:	4a15      	ldr	r2, [pc, #84]	; (802a420 <PCD_EP_OutSetupPacket_int+0x88>)
 802a3ca:	4293      	cmp	r3, r2
 802a3cc:	d90e      	bls.n	802a3ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 802a3ce:	68bb      	ldr	r3, [r7, #8]
 802a3d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802a3d4:	2b00      	cmp	r3, #0
 802a3d6:	d009      	beq.n	802a3ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 802a3d8:	683b      	ldr	r3, [r7, #0]
 802a3da:	015a      	lsls	r2, r3, #5
 802a3dc:	693b      	ldr	r3, [r7, #16]
 802a3de:	4413      	add	r3, r2
 802a3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a3e4:	461a      	mov	r2, r3
 802a3e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a3ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 802a3ec:	6878      	ldr	r0, [r7, #4]
 802a3ee:	f006 fda7 	bl	8030f40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 802a3f2:	68fb      	ldr	r3, [r7, #12]
 802a3f4:	4a0a      	ldr	r2, [pc, #40]	; (802a420 <PCD_EP_OutSetupPacket_int+0x88>)
 802a3f6:	4293      	cmp	r3, r2
 802a3f8:	d90c      	bls.n	802a414 <PCD_EP_OutSetupPacket_int+0x7c>
 802a3fa:	687b      	ldr	r3, [r7, #4]
 802a3fc:	691b      	ldr	r3, [r3, #16]
 802a3fe:	2b01      	cmp	r3, #1
 802a400:	d108      	bne.n	802a414 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 802a402:	687b      	ldr	r3, [r7, #4]
 802a404:	6818      	ldr	r0, [r3, #0]
 802a406:	687b      	ldr	r3, [r7, #4]
 802a408:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802a40c:	461a      	mov	r2, r3
 802a40e:	2101      	movs	r1, #1
 802a410:	f004 f8e6 	bl	802e5e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 802a414:	2300      	movs	r3, #0
}
 802a416:	4618      	mov	r0, r3
 802a418:	3718      	adds	r7, #24
 802a41a:	46bd      	mov	sp, r7
 802a41c:	bd80      	pop	{r7, pc}
 802a41e:	bf00      	nop
 802a420:	4f54300a 	.word	0x4f54300a

0802a424 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 802a424:	b480      	push	{r7}
 802a426:	b085      	sub	sp, #20
 802a428:	af00      	add	r7, sp, #0
 802a42a:	6078      	str	r0, [r7, #4]
 802a42c:	460b      	mov	r3, r1
 802a42e:	70fb      	strb	r3, [r7, #3]
 802a430:	4613      	mov	r3, r2
 802a432:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 802a434:	687b      	ldr	r3, [r7, #4]
 802a436:	681b      	ldr	r3, [r3, #0]
 802a438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a43a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 802a43c:	78fb      	ldrb	r3, [r7, #3]
 802a43e:	2b00      	cmp	r3, #0
 802a440:	d107      	bne.n	802a452 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 802a442:	883b      	ldrh	r3, [r7, #0]
 802a444:	0419      	lsls	r1, r3, #16
 802a446:	687b      	ldr	r3, [r7, #4]
 802a448:	681b      	ldr	r3, [r3, #0]
 802a44a:	68ba      	ldr	r2, [r7, #8]
 802a44c:	430a      	orrs	r2, r1
 802a44e:	629a      	str	r2, [r3, #40]	; 0x28
 802a450:	e028      	b.n	802a4a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 802a452:	687b      	ldr	r3, [r7, #4]
 802a454:	681b      	ldr	r3, [r3, #0]
 802a456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a458:	0c1b      	lsrs	r3, r3, #16
 802a45a:	68ba      	ldr	r2, [r7, #8]
 802a45c:	4413      	add	r3, r2
 802a45e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 802a460:	2300      	movs	r3, #0
 802a462:	73fb      	strb	r3, [r7, #15]
 802a464:	e00d      	b.n	802a482 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 802a466:	687b      	ldr	r3, [r7, #4]
 802a468:	681a      	ldr	r2, [r3, #0]
 802a46a:	7bfb      	ldrb	r3, [r7, #15]
 802a46c:	3340      	adds	r3, #64	; 0x40
 802a46e:	009b      	lsls	r3, r3, #2
 802a470:	4413      	add	r3, r2
 802a472:	685b      	ldr	r3, [r3, #4]
 802a474:	0c1b      	lsrs	r3, r3, #16
 802a476:	68ba      	ldr	r2, [r7, #8]
 802a478:	4413      	add	r3, r2
 802a47a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 802a47c:	7bfb      	ldrb	r3, [r7, #15]
 802a47e:	3301      	adds	r3, #1
 802a480:	73fb      	strb	r3, [r7, #15]
 802a482:	7bfa      	ldrb	r2, [r7, #15]
 802a484:	78fb      	ldrb	r3, [r7, #3]
 802a486:	3b01      	subs	r3, #1
 802a488:	429a      	cmp	r2, r3
 802a48a:	d3ec      	bcc.n	802a466 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 802a48c:	883b      	ldrh	r3, [r7, #0]
 802a48e:	0418      	lsls	r0, r3, #16
 802a490:	687b      	ldr	r3, [r7, #4]
 802a492:	6819      	ldr	r1, [r3, #0]
 802a494:	78fb      	ldrb	r3, [r7, #3]
 802a496:	3b01      	subs	r3, #1
 802a498:	68ba      	ldr	r2, [r7, #8]
 802a49a:	4302      	orrs	r2, r0
 802a49c:	3340      	adds	r3, #64	; 0x40
 802a49e:	009b      	lsls	r3, r3, #2
 802a4a0:	440b      	add	r3, r1
 802a4a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 802a4a4:	2300      	movs	r3, #0
}
 802a4a6:	4618      	mov	r0, r3
 802a4a8:	3714      	adds	r7, #20
 802a4aa:	46bd      	mov	sp, r7
 802a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4b0:	4770      	bx	lr

0802a4b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 802a4b2:	b480      	push	{r7}
 802a4b4:	b083      	sub	sp, #12
 802a4b6:	af00      	add	r7, sp, #0
 802a4b8:	6078      	str	r0, [r7, #4]
 802a4ba:	460b      	mov	r3, r1
 802a4bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 802a4be:	687b      	ldr	r3, [r7, #4]
 802a4c0:	681b      	ldr	r3, [r3, #0]
 802a4c2:	887a      	ldrh	r2, [r7, #2]
 802a4c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 802a4c6:	2300      	movs	r3, #0
}
 802a4c8:	4618      	mov	r0, r3
 802a4ca:	370c      	adds	r7, #12
 802a4cc:	46bd      	mov	sp, r7
 802a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4d2:	4770      	bx	lr

0802a4d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 802a4d4:	b480      	push	{r7}
 802a4d6:	b083      	sub	sp, #12
 802a4d8:	af00      	add	r7, sp, #0
 802a4da:	6078      	str	r0, [r7, #4]
 802a4dc:	460b      	mov	r3, r1
 802a4de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 802a4e0:	bf00      	nop
 802a4e2:	370c      	adds	r7, #12
 802a4e4:	46bd      	mov	sp, r7
 802a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4ea:	4770      	bx	lr

0802a4ec <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 802a4ec:	b580      	push	{r7, lr}
 802a4ee:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 802a4f0:	4b06      	ldr	r3, [pc, #24]	; (802a50c <HAL_PWR_PVD_IRQHandler+0x20>)
 802a4f2:	695b      	ldr	r3, [r3, #20]
 802a4f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802a4f8:	2b00      	cmp	r3, #0
 802a4fa:	d005      	beq.n	802a508 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 802a4fc:	f000 f808 	bl	802a510 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 802a500:	4b02      	ldr	r3, [pc, #8]	; (802a50c <HAL_PWR_PVD_IRQHandler+0x20>)
 802a502:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802a506:	615a      	str	r2, [r3, #20]
  }
}
 802a508:	bf00      	nop
 802a50a:	bd80      	pop	{r7, pc}
 802a50c:	40013c00 	.word	0x40013c00

0802a510 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 802a510:	b480      	push	{r7}
 802a512:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 802a514:	bf00      	nop
 802a516:	46bd      	mov	sp, r7
 802a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a51c:	4770      	bx	lr
	...

0802a520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802a520:	b580      	push	{r7, lr}
 802a522:	b086      	sub	sp, #24
 802a524:	af00      	add	r7, sp, #0
 802a526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 802a528:	687b      	ldr	r3, [r7, #4]
 802a52a:	2b00      	cmp	r3, #0
 802a52c:	d101      	bne.n	802a532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802a52e:	2301      	movs	r3, #1
 802a530:	e267      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802a532:	687b      	ldr	r3, [r7, #4]
 802a534:	681b      	ldr	r3, [r3, #0]
 802a536:	f003 0301 	and.w	r3, r3, #1
 802a53a:	2b00      	cmp	r3, #0
 802a53c:	d075      	beq.n	802a62a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802a53e:	4b88      	ldr	r3, [pc, #544]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a540:	689b      	ldr	r3, [r3, #8]
 802a542:	f003 030c 	and.w	r3, r3, #12
 802a546:	2b04      	cmp	r3, #4
 802a548:	d00c      	beq.n	802a564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802a54a:	4b85      	ldr	r3, [pc, #532]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a54c:	689b      	ldr	r3, [r3, #8]
 802a54e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802a552:	2b08      	cmp	r3, #8
 802a554:	d112      	bne.n	802a57c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802a556:	4b82      	ldr	r3, [pc, #520]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a558:	685b      	ldr	r3, [r3, #4]
 802a55a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a55e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802a562:	d10b      	bne.n	802a57c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802a564:	4b7e      	ldr	r3, [pc, #504]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a566:	681b      	ldr	r3, [r3, #0]
 802a568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a56c:	2b00      	cmp	r3, #0
 802a56e:	d05b      	beq.n	802a628 <HAL_RCC_OscConfig+0x108>
 802a570:	687b      	ldr	r3, [r7, #4]
 802a572:	685b      	ldr	r3, [r3, #4]
 802a574:	2b00      	cmp	r3, #0
 802a576:	d157      	bne.n	802a628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 802a578:	2301      	movs	r3, #1
 802a57a:	e242      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802a57c:	687b      	ldr	r3, [r7, #4]
 802a57e:	685b      	ldr	r3, [r3, #4]
 802a580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802a584:	d106      	bne.n	802a594 <HAL_RCC_OscConfig+0x74>
 802a586:	4b76      	ldr	r3, [pc, #472]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a588:	681b      	ldr	r3, [r3, #0]
 802a58a:	4a75      	ldr	r2, [pc, #468]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a58c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a590:	6013      	str	r3, [r2, #0]
 802a592:	e01d      	b.n	802a5d0 <HAL_RCC_OscConfig+0xb0>
 802a594:	687b      	ldr	r3, [r7, #4]
 802a596:	685b      	ldr	r3, [r3, #4]
 802a598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802a59c:	d10c      	bne.n	802a5b8 <HAL_RCC_OscConfig+0x98>
 802a59e:	4b70      	ldr	r3, [pc, #448]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a5a0:	681b      	ldr	r3, [r3, #0]
 802a5a2:	4a6f      	ldr	r2, [pc, #444]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a5a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802a5a8:	6013      	str	r3, [r2, #0]
 802a5aa:	4b6d      	ldr	r3, [pc, #436]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a5ac:	681b      	ldr	r3, [r3, #0]
 802a5ae:	4a6c      	ldr	r2, [pc, #432]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a5b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a5b4:	6013      	str	r3, [r2, #0]
 802a5b6:	e00b      	b.n	802a5d0 <HAL_RCC_OscConfig+0xb0>
 802a5b8:	4b69      	ldr	r3, [pc, #420]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a5ba:	681b      	ldr	r3, [r3, #0]
 802a5bc:	4a68      	ldr	r2, [pc, #416]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a5be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802a5c2:	6013      	str	r3, [r2, #0]
 802a5c4:	4b66      	ldr	r3, [pc, #408]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a5c6:	681b      	ldr	r3, [r3, #0]
 802a5c8:	4a65      	ldr	r2, [pc, #404]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a5ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802a5ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802a5d0:	687b      	ldr	r3, [r7, #4]
 802a5d2:	685b      	ldr	r3, [r3, #4]
 802a5d4:	2b00      	cmp	r3, #0
 802a5d6:	d013      	beq.n	802a600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a5d8:	f7fd fb6c 	bl	8027cb4 <HAL_GetTick>
 802a5dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802a5de:	e008      	b.n	802a5f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802a5e0:	f7fd fb68 	bl	8027cb4 <HAL_GetTick>
 802a5e4:	4602      	mov	r2, r0
 802a5e6:	693b      	ldr	r3, [r7, #16]
 802a5e8:	1ad3      	subs	r3, r2, r3
 802a5ea:	2b64      	cmp	r3, #100	; 0x64
 802a5ec:	d901      	bls.n	802a5f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802a5ee:	2303      	movs	r3, #3
 802a5f0:	e207      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802a5f2:	4b5b      	ldr	r3, [pc, #364]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a5f4:	681b      	ldr	r3, [r3, #0]
 802a5f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a5fa:	2b00      	cmp	r3, #0
 802a5fc:	d0f0      	beq.n	802a5e0 <HAL_RCC_OscConfig+0xc0>
 802a5fe:	e014      	b.n	802a62a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a600:	f7fd fb58 	bl	8027cb4 <HAL_GetTick>
 802a604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802a606:	e008      	b.n	802a61a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802a608:	f7fd fb54 	bl	8027cb4 <HAL_GetTick>
 802a60c:	4602      	mov	r2, r0
 802a60e:	693b      	ldr	r3, [r7, #16]
 802a610:	1ad3      	subs	r3, r2, r3
 802a612:	2b64      	cmp	r3, #100	; 0x64
 802a614:	d901      	bls.n	802a61a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802a616:	2303      	movs	r3, #3
 802a618:	e1f3      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802a61a:	4b51      	ldr	r3, [pc, #324]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a61c:	681b      	ldr	r3, [r3, #0]
 802a61e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a622:	2b00      	cmp	r3, #0
 802a624:	d1f0      	bne.n	802a608 <HAL_RCC_OscConfig+0xe8>
 802a626:	e000      	b.n	802a62a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802a628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802a62a:	687b      	ldr	r3, [r7, #4]
 802a62c:	681b      	ldr	r3, [r3, #0]
 802a62e:	f003 0302 	and.w	r3, r3, #2
 802a632:	2b00      	cmp	r3, #0
 802a634:	d063      	beq.n	802a6fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802a636:	4b4a      	ldr	r3, [pc, #296]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a638:	689b      	ldr	r3, [r3, #8]
 802a63a:	f003 030c 	and.w	r3, r3, #12
 802a63e:	2b00      	cmp	r3, #0
 802a640:	d00b      	beq.n	802a65a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802a642:	4b47      	ldr	r3, [pc, #284]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a644:	689b      	ldr	r3, [r3, #8]
 802a646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802a64a:	2b08      	cmp	r3, #8
 802a64c:	d11c      	bne.n	802a688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802a64e:	4b44      	ldr	r3, [pc, #272]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a650:	685b      	ldr	r3, [r3, #4]
 802a652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a656:	2b00      	cmp	r3, #0
 802a658:	d116      	bne.n	802a688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802a65a:	4b41      	ldr	r3, [pc, #260]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a65c:	681b      	ldr	r3, [r3, #0]
 802a65e:	f003 0302 	and.w	r3, r3, #2
 802a662:	2b00      	cmp	r3, #0
 802a664:	d005      	beq.n	802a672 <HAL_RCC_OscConfig+0x152>
 802a666:	687b      	ldr	r3, [r7, #4]
 802a668:	68db      	ldr	r3, [r3, #12]
 802a66a:	2b01      	cmp	r3, #1
 802a66c:	d001      	beq.n	802a672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802a66e:	2301      	movs	r3, #1
 802a670:	e1c7      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a672:	4b3b      	ldr	r3, [pc, #236]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a674:	681b      	ldr	r3, [r3, #0]
 802a676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802a67a:	687b      	ldr	r3, [r7, #4]
 802a67c:	691b      	ldr	r3, [r3, #16]
 802a67e:	00db      	lsls	r3, r3, #3
 802a680:	4937      	ldr	r1, [pc, #220]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a682:	4313      	orrs	r3, r2
 802a684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802a686:	e03a      	b.n	802a6fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802a688:	687b      	ldr	r3, [r7, #4]
 802a68a:	68db      	ldr	r3, [r3, #12]
 802a68c:	2b00      	cmp	r3, #0
 802a68e:	d020      	beq.n	802a6d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802a690:	4b34      	ldr	r3, [pc, #208]	; (802a764 <HAL_RCC_OscConfig+0x244>)
 802a692:	2201      	movs	r2, #1
 802a694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a696:	f7fd fb0d 	bl	8027cb4 <HAL_GetTick>
 802a69a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a69c:	e008      	b.n	802a6b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802a69e:	f7fd fb09 	bl	8027cb4 <HAL_GetTick>
 802a6a2:	4602      	mov	r2, r0
 802a6a4:	693b      	ldr	r3, [r7, #16]
 802a6a6:	1ad3      	subs	r3, r2, r3
 802a6a8:	2b02      	cmp	r3, #2
 802a6aa:	d901      	bls.n	802a6b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 802a6ac:	2303      	movs	r3, #3
 802a6ae:	e1a8      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a6b0:	4b2b      	ldr	r3, [pc, #172]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a6b2:	681b      	ldr	r3, [r3, #0]
 802a6b4:	f003 0302 	and.w	r3, r3, #2
 802a6b8:	2b00      	cmp	r3, #0
 802a6ba:	d0f0      	beq.n	802a69e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a6bc:	4b28      	ldr	r3, [pc, #160]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a6be:	681b      	ldr	r3, [r3, #0]
 802a6c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802a6c4:	687b      	ldr	r3, [r7, #4]
 802a6c6:	691b      	ldr	r3, [r3, #16]
 802a6c8:	00db      	lsls	r3, r3, #3
 802a6ca:	4925      	ldr	r1, [pc, #148]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a6cc:	4313      	orrs	r3, r2
 802a6ce:	600b      	str	r3, [r1, #0]
 802a6d0:	e015      	b.n	802a6fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802a6d2:	4b24      	ldr	r3, [pc, #144]	; (802a764 <HAL_RCC_OscConfig+0x244>)
 802a6d4:	2200      	movs	r2, #0
 802a6d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a6d8:	f7fd faec 	bl	8027cb4 <HAL_GetTick>
 802a6dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802a6de:	e008      	b.n	802a6f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802a6e0:	f7fd fae8 	bl	8027cb4 <HAL_GetTick>
 802a6e4:	4602      	mov	r2, r0
 802a6e6:	693b      	ldr	r3, [r7, #16]
 802a6e8:	1ad3      	subs	r3, r2, r3
 802a6ea:	2b02      	cmp	r3, #2
 802a6ec:	d901      	bls.n	802a6f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802a6ee:	2303      	movs	r3, #3
 802a6f0:	e187      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802a6f2:	4b1b      	ldr	r3, [pc, #108]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a6f4:	681b      	ldr	r3, [r3, #0]
 802a6f6:	f003 0302 	and.w	r3, r3, #2
 802a6fa:	2b00      	cmp	r3, #0
 802a6fc:	d1f0      	bne.n	802a6e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802a6fe:	687b      	ldr	r3, [r7, #4]
 802a700:	681b      	ldr	r3, [r3, #0]
 802a702:	f003 0308 	and.w	r3, r3, #8
 802a706:	2b00      	cmp	r3, #0
 802a708:	d036      	beq.n	802a778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802a70a:	687b      	ldr	r3, [r7, #4]
 802a70c:	695b      	ldr	r3, [r3, #20]
 802a70e:	2b00      	cmp	r3, #0
 802a710:	d016      	beq.n	802a740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802a712:	4b15      	ldr	r3, [pc, #84]	; (802a768 <HAL_RCC_OscConfig+0x248>)
 802a714:	2201      	movs	r2, #1
 802a716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a718:	f7fd facc 	bl	8027cb4 <HAL_GetTick>
 802a71c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802a71e:	e008      	b.n	802a732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802a720:	f7fd fac8 	bl	8027cb4 <HAL_GetTick>
 802a724:	4602      	mov	r2, r0
 802a726:	693b      	ldr	r3, [r7, #16]
 802a728:	1ad3      	subs	r3, r2, r3
 802a72a:	2b02      	cmp	r3, #2
 802a72c:	d901      	bls.n	802a732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802a72e:	2303      	movs	r3, #3
 802a730:	e167      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802a732:	4b0b      	ldr	r3, [pc, #44]	; (802a760 <HAL_RCC_OscConfig+0x240>)
 802a734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a736:	f003 0302 	and.w	r3, r3, #2
 802a73a:	2b00      	cmp	r3, #0
 802a73c:	d0f0      	beq.n	802a720 <HAL_RCC_OscConfig+0x200>
 802a73e:	e01b      	b.n	802a778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802a740:	4b09      	ldr	r3, [pc, #36]	; (802a768 <HAL_RCC_OscConfig+0x248>)
 802a742:	2200      	movs	r2, #0
 802a744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802a746:	f7fd fab5 	bl	8027cb4 <HAL_GetTick>
 802a74a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802a74c:	e00e      	b.n	802a76c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802a74e:	f7fd fab1 	bl	8027cb4 <HAL_GetTick>
 802a752:	4602      	mov	r2, r0
 802a754:	693b      	ldr	r3, [r7, #16]
 802a756:	1ad3      	subs	r3, r2, r3
 802a758:	2b02      	cmp	r3, #2
 802a75a:	d907      	bls.n	802a76c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 802a75c:	2303      	movs	r3, #3
 802a75e:	e150      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
 802a760:	40023800 	.word	0x40023800
 802a764:	42470000 	.word	0x42470000
 802a768:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802a76c:	4b88      	ldr	r3, [pc, #544]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a76e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a770:	f003 0302 	and.w	r3, r3, #2
 802a774:	2b00      	cmp	r3, #0
 802a776:	d1ea      	bne.n	802a74e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802a778:	687b      	ldr	r3, [r7, #4]
 802a77a:	681b      	ldr	r3, [r3, #0]
 802a77c:	f003 0304 	and.w	r3, r3, #4
 802a780:	2b00      	cmp	r3, #0
 802a782:	f000 8097 	beq.w	802a8b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 802a786:	2300      	movs	r3, #0
 802a788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802a78a:	4b81      	ldr	r3, [pc, #516]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a78e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a792:	2b00      	cmp	r3, #0
 802a794:	d10f      	bne.n	802a7b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802a796:	2300      	movs	r3, #0
 802a798:	60bb      	str	r3, [r7, #8]
 802a79a:	4b7d      	ldr	r3, [pc, #500]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a79e:	4a7c      	ldr	r2, [pc, #496]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a7a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a7a4:	6413      	str	r3, [r2, #64]	; 0x40
 802a7a6:	4b7a      	ldr	r3, [pc, #488]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a7aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a7ae:	60bb      	str	r3, [r7, #8]
 802a7b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802a7b2:	2301      	movs	r3, #1
 802a7b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a7b6:	4b77      	ldr	r3, [pc, #476]	; (802a994 <HAL_RCC_OscConfig+0x474>)
 802a7b8:	681b      	ldr	r3, [r3, #0]
 802a7ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a7be:	2b00      	cmp	r3, #0
 802a7c0:	d118      	bne.n	802a7f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802a7c2:	4b74      	ldr	r3, [pc, #464]	; (802a994 <HAL_RCC_OscConfig+0x474>)
 802a7c4:	681b      	ldr	r3, [r3, #0]
 802a7c6:	4a73      	ldr	r2, [pc, #460]	; (802a994 <HAL_RCC_OscConfig+0x474>)
 802a7c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a7cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802a7ce:	f7fd fa71 	bl	8027cb4 <HAL_GetTick>
 802a7d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a7d4:	e008      	b.n	802a7e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802a7d6:	f7fd fa6d 	bl	8027cb4 <HAL_GetTick>
 802a7da:	4602      	mov	r2, r0
 802a7dc:	693b      	ldr	r3, [r7, #16]
 802a7de:	1ad3      	subs	r3, r2, r3
 802a7e0:	2b02      	cmp	r3, #2
 802a7e2:	d901      	bls.n	802a7e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 802a7e4:	2303      	movs	r3, #3
 802a7e6:	e10c      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a7e8:	4b6a      	ldr	r3, [pc, #424]	; (802a994 <HAL_RCC_OscConfig+0x474>)
 802a7ea:	681b      	ldr	r3, [r3, #0]
 802a7ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a7f0:	2b00      	cmp	r3, #0
 802a7f2:	d0f0      	beq.n	802a7d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802a7f4:	687b      	ldr	r3, [r7, #4]
 802a7f6:	689b      	ldr	r3, [r3, #8]
 802a7f8:	2b01      	cmp	r3, #1
 802a7fa:	d106      	bne.n	802a80a <HAL_RCC_OscConfig+0x2ea>
 802a7fc:	4b64      	ldr	r3, [pc, #400]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a7fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a800:	4a63      	ldr	r2, [pc, #396]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a802:	f043 0301 	orr.w	r3, r3, #1
 802a806:	6713      	str	r3, [r2, #112]	; 0x70
 802a808:	e01c      	b.n	802a844 <HAL_RCC_OscConfig+0x324>
 802a80a:	687b      	ldr	r3, [r7, #4]
 802a80c:	689b      	ldr	r3, [r3, #8]
 802a80e:	2b05      	cmp	r3, #5
 802a810:	d10c      	bne.n	802a82c <HAL_RCC_OscConfig+0x30c>
 802a812:	4b5f      	ldr	r3, [pc, #380]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a816:	4a5e      	ldr	r2, [pc, #376]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a818:	f043 0304 	orr.w	r3, r3, #4
 802a81c:	6713      	str	r3, [r2, #112]	; 0x70
 802a81e:	4b5c      	ldr	r3, [pc, #368]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a822:	4a5b      	ldr	r2, [pc, #364]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a824:	f043 0301 	orr.w	r3, r3, #1
 802a828:	6713      	str	r3, [r2, #112]	; 0x70
 802a82a:	e00b      	b.n	802a844 <HAL_RCC_OscConfig+0x324>
 802a82c:	4b58      	ldr	r3, [pc, #352]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a830:	4a57      	ldr	r2, [pc, #348]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a832:	f023 0301 	bic.w	r3, r3, #1
 802a836:	6713      	str	r3, [r2, #112]	; 0x70
 802a838:	4b55      	ldr	r3, [pc, #340]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a83c:	4a54      	ldr	r2, [pc, #336]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a83e:	f023 0304 	bic.w	r3, r3, #4
 802a842:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802a844:	687b      	ldr	r3, [r7, #4]
 802a846:	689b      	ldr	r3, [r3, #8]
 802a848:	2b00      	cmp	r3, #0
 802a84a:	d015      	beq.n	802a878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a84c:	f7fd fa32 	bl	8027cb4 <HAL_GetTick>
 802a850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a852:	e00a      	b.n	802a86a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802a854:	f7fd fa2e 	bl	8027cb4 <HAL_GetTick>
 802a858:	4602      	mov	r2, r0
 802a85a:	693b      	ldr	r3, [r7, #16]
 802a85c:	1ad3      	subs	r3, r2, r3
 802a85e:	f241 3288 	movw	r2, #5000	; 0x1388
 802a862:	4293      	cmp	r3, r2
 802a864:	d901      	bls.n	802a86a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802a866:	2303      	movs	r3, #3
 802a868:	e0cb      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a86a:	4b49      	ldr	r3, [pc, #292]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a86e:	f003 0302 	and.w	r3, r3, #2
 802a872:	2b00      	cmp	r3, #0
 802a874:	d0ee      	beq.n	802a854 <HAL_RCC_OscConfig+0x334>
 802a876:	e014      	b.n	802a8a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802a878:	f7fd fa1c 	bl	8027cb4 <HAL_GetTick>
 802a87c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802a87e:	e00a      	b.n	802a896 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802a880:	f7fd fa18 	bl	8027cb4 <HAL_GetTick>
 802a884:	4602      	mov	r2, r0
 802a886:	693b      	ldr	r3, [r7, #16]
 802a888:	1ad3      	subs	r3, r2, r3
 802a88a:	f241 3288 	movw	r2, #5000	; 0x1388
 802a88e:	4293      	cmp	r3, r2
 802a890:	d901      	bls.n	802a896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 802a892:	2303      	movs	r3, #3
 802a894:	e0b5      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802a896:	4b3e      	ldr	r3, [pc, #248]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a89a:	f003 0302 	and.w	r3, r3, #2
 802a89e:	2b00      	cmp	r3, #0
 802a8a0:	d1ee      	bne.n	802a880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802a8a2:	7dfb      	ldrb	r3, [r7, #23]
 802a8a4:	2b01      	cmp	r3, #1
 802a8a6:	d105      	bne.n	802a8b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802a8a8:	4b39      	ldr	r3, [pc, #228]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a8ac:	4a38      	ldr	r2, [pc, #224]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a8ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802a8b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802a8b4:	687b      	ldr	r3, [r7, #4]
 802a8b6:	699b      	ldr	r3, [r3, #24]
 802a8b8:	2b00      	cmp	r3, #0
 802a8ba:	f000 80a1 	beq.w	802aa00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802a8be:	4b34      	ldr	r3, [pc, #208]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a8c0:	689b      	ldr	r3, [r3, #8]
 802a8c2:	f003 030c 	and.w	r3, r3, #12
 802a8c6:	2b08      	cmp	r3, #8
 802a8c8:	d05c      	beq.n	802a984 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802a8ca:	687b      	ldr	r3, [r7, #4]
 802a8cc:	699b      	ldr	r3, [r3, #24]
 802a8ce:	2b02      	cmp	r3, #2
 802a8d0:	d141      	bne.n	802a956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802a8d2:	4b31      	ldr	r3, [pc, #196]	; (802a998 <HAL_RCC_OscConfig+0x478>)
 802a8d4:	2200      	movs	r2, #0
 802a8d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a8d8:	f7fd f9ec 	bl	8027cb4 <HAL_GetTick>
 802a8dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a8de:	e008      	b.n	802a8f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802a8e0:	f7fd f9e8 	bl	8027cb4 <HAL_GetTick>
 802a8e4:	4602      	mov	r2, r0
 802a8e6:	693b      	ldr	r3, [r7, #16]
 802a8e8:	1ad3      	subs	r3, r2, r3
 802a8ea:	2b02      	cmp	r3, #2
 802a8ec:	d901      	bls.n	802a8f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 802a8ee:	2303      	movs	r3, #3
 802a8f0:	e087      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a8f2:	4b27      	ldr	r3, [pc, #156]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a8f4:	681b      	ldr	r3, [r3, #0]
 802a8f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a8fa:	2b00      	cmp	r3, #0
 802a8fc:	d1f0      	bne.n	802a8e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802a8fe:	687b      	ldr	r3, [r7, #4]
 802a900:	69da      	ldr	r2, [r3, #28]
 802a902:	687b      	ldr	r3, [r7, #4]
 802a904:	6a1b      	ldr	r3, [r3, #32]
 802a906:	431a      	orrs	r2, r3
 802a908:	687b      	ldr	r3, [r7, #4]
 802a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a90c:	019b      	lsls	r3, r3, #6
 802a90e:	431a      	orrs	r2, r3
 802a910:	687b      	ldr	r3, [r7, #4]
 802a912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a914:	085b      	lsrs	r3, r3, #1
 802a916:	3b01      	subs	r3, #1
 802a918:	041b      	lsls	r3, r3, #16
 802a91a:	431a      	orrs	r2, r3
 802a91c:	687b      	ldr	r3, [r7, #4]
 802a91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a920:	061b      	lsls	r3, r3, #24
 802a922:	491b      	ldr	r1, [pc, #108]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a924:	4313      	orrs	r3, r2
 802a926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802a928:	4b1b      	ldr	r3, [pc, #108]	; (802a998 <HAL_RCC_OscConfig+0x478>)
 802a92a:	2201      	movs	r2, #1
 802a92c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a92e:	f7fd f9c1 	bl	8027cb4 <HAL_GetTick>
 802a932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802a934:	e008      	b.n	802a948 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802a936:	f7fd f9bd 	bl	8027cb4 <HAL_GetTick>
 802a93a:	4602      	mov	r2, r0
 802a93c:	693b      	ldr	r3, [r7, #16]
 802a93e:	1ad3      	subs	r3, r2, r3
 802a940:	2b02      	cmp	r3, #2
 802a942:	d901      	bls.n	802a948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802a944:	2303      	movs	r3, #3
 802a946:	e05c      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802a948:	4b11      	ldr	r3, [pc, #68]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a94a:	681b      	ldr	r3, [r3, #0]
 802a94c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a950:	2b00      	cmp	r3, #0
 802a952:	d0f0      	beq.n	802a936 <HAL_RCC_OscConfig+0x416>
 802a954:	e054      	b.n	802aa00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802a956:	4b10      	ldr	r3, [pc, #64]	; (802a998 <HAL_RCC_OscConfig+0x478>)
 802a958:	2200      	movs	r2, #0
 802a95a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a95c:	f7fd f9aa 	bl	8027cb4 <HAL_GetTick>
 802a960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a962:	e008      	b.n	802a976 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802a964:	f7fd f9a6 	bl	8027cb4 <HAL_GetTick>
 802a968:	4602      	mov	r2, r0
 802a96a:	693b      	ldr	r3, [r7, #16]
 802a96c:	1ad3      	subs	r3, r2, r3
 802a96e:	2b02      	cmp	r3, #2
 802a970:	d901      	bls.n	802a976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802a972:	2303      	movs	r3, #3
 802a974:	e045      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a976:	4b06      	ldr	r3, [pc, #24]	; (802a990 <HAL_RCC_OscConfig+0x470>)
 802a978:	681b      	ldr	r3, [r3, #0]
 802a97a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a97e:	2b00      	cmp	r3, #0
 802a980:	d1f0      	bne.n	802a964 <HAL_RCC_OscConfig+0x444>
 802a982:	e03d      	b.n	802aa00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802a984:	687b      	ldr	r3, [r7, #4]
 802a986:	699b      	ldr	r3, [r3, #24]
 802a988:	2b01      	cmp	r3, #1
 802a98a:	d107      	bne.n	802a99c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 802a98c:	2301      	movs	r3, #1
 802a98e:	e038      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
 802a990:	40023800 	.word	0x40023800
 802a994:	40007000 	.word	0x40007000
 802a998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802a99c:	4b1b      	ldr	r3, [pc, #108]	; (802aa0c <HAL_RCC_OscConfig+0x4ec>)
 802a99e:	685b      	ldr	r3, [r3, #4]
 802a9a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802a9a2:	687b      	ldr	r3, [r7, #4]
 802a9a4:	699b      	ldr	r3, [r3, #24]
 802a9a6:	2b01      	cmp	r3, #1
 802a9a8:	d028      	beq.n	802a9fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802a9aa:	68fb      	ldr	r3, [r7, #12]
 802a9ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802a9b0:	687b      	ldr	r3, [r7, #4]
 802a9b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802a9b4:	429a      	cmp	r2, r3
 802a9b6:	d121      	bne.n	802a9fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802a9b8:	68fb      	ldr	r3, [r7, #12]
 802a9ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802a9be:	687b      	ldr	r3, [r7, #4]
 802a9c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802a9c2:	429a      	cmp	r2, r3
 802a9c4:	d11a      	bne.n	802a9fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802a9c6:	68fa      	ldr	r2, [r7, #12]
 802a9c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 802a9cc:	4013      	ands	r3, r2
 802a9ce:	687a      	ldr	r2, [r7, #4]
 802a9d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802a9d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802a9d4:	4293      	cmp	r3, r2
 802a9d6:	d111      	bne.n	802a9fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802a9d8:	68fb      	ldr	r3, [r7, #12]
 802a9da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802a9de:	687b      	ldr	r3, [r7, #4]
 802a9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a9e2:	085b      	lsrs	r3, r3, #1
 802a9e4:	3b01      	subs	r3, #1
 802a9e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802a9e8:	429a      	cmp	r2, r3
 802a9ea:	d107      	bne.n	802a9fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 802a9ec:	68fb      	ldr	r3, [r7, #12]
 802a9ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802a9f2:	687b      	ldr	r3, [r7, #4]
 802a9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a9f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802a9f8:	429a      	cmp	r2, r3
 802a9fa:	d001      	beq.n	802aa00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 802a9fc:	2301      	movs	r3, #1
 802a9fe:	e000      	b.n	802aa02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 802aa00:	2300      	movs	r3, #0
}
 802aa02:	4618      	mov	r0, r3
 802aa04:	3718      	adds	r7, #24
 802aa06:	46bd      	mov	sp, r7
 802aa08:	bd80      	pop	{r7, pc}
 802aa0a:	bf00      	nop
 802aa0c:	40023800 	.word	0x40023800

0802aa10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802aa10:	b580      	push	{r7, lr}
 802aa12:	b084      	sub	sp, #16
 802aa14:	af00      	add	r7, sp, #0
 802aa16:	6078      	str	r0, [r7, #4]
 802aa18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802aa1a:	687b      	ldr	r3, [r7, #4]
 802aa1c:	2b00      	cmp	r3, #0
 802aa1e:	d101      	bne.n	802aa24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802aa20:	2301      	movs	r3, #1
 802aa22:	e0cc      	b.n	802abbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802aa24:	4b68      	ldr	r3, [pc, #416]	; (802abc8 <HAL_RCC_ClockConfig+0x1b8>)
 802aa26:	681b      	ldr	r3, [r3, #0]
 802aa28:	f003 0307 	and.w	r3, r3, #7
 802aa2c:	683a      	ldr	r2, [r7, #0]
 802aa2e:	429a      	cmp	r2, r3
 802aa30:	d90c      	bls.n	802aa4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802aa32:	4b65      	ldr	r3, [pc, #404]	; (802abc8 <HAL_RCC_ClockConfig+0x1b8>)
 802aa34:	683a      	ldr	r2, [r7, #0]
 802aa36:	b2d2      	uxtb	r2, r2
 802aa38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802aa3a:	4b63      	ldr	r3, [pc, #396]	; (802abc8 <HAL_RCC_ClockConfig+0x1b8>)
 802aa3c:	681b      	ldr	r3, [r3, #0]
 802aa3e:	f003 0307 	and.w	r3, r3, #7
 802aa42:	683a      	ldr	r2, [r7, #0]
 802aa44:	429a      	cmp	r2, r3
 802aa46:	d001      	beq.n	802aa4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802aa48:	2301      	movs	r3, #1
 802aa4a:	e0b8      	b.n	802abbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802aa4c:	687b      	ldr	r3, [r7, #4]
 802aa4e:	681b      	ldr	r3, [r3, #0]
 802aa50:	f003 0302 	and.w	r3, r3, #2
 802aa54:	2b00      	cmp	r3, #0
 802aa56:	d020      	beq.n	802aa9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802aa58:	687b      	ldr	r3, [r7, #4]
 802aa5a:	681b      	ldr	r3, [r3, #0]
 802aa5c:	f003 0304 	and.w	r3, r3, #4
 802aa60:	2b00      	cmp	r3, #0
 802aa62:	d005      	beq.n	802aa70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802aa64:	4b59      	ldr	r3, [pc, #356]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802aa66:	689b      	ldr	r3, [r3, #8]
 802aa68:	4a58      	ldr	r2, [pc, #352]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802aa6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802aa6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802aa70:	687b      	ldr	r3, [r7, #4]
 802aa72:	681b      	ldr	r3, [r3, #0]
 802aa74:	f003 0308 	and.w	r3, r3, #8
 802aa78:	2b00      	cmp	r3, #0
 802aa7a:	d005      	beq.n	802aa88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802aa7c:	4b53      	ldr	r3, [pc, #332]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802aa7e:	689b      	ldr	r3, [r3, #8]
 802aa80:	4a52      	ldr	r2, [pc, #328]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802aa82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802aa86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802aa88:	4b50      	ldr	r3, [pc, #320]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802aa8a:	689b      	ldr	r3, [r3, #8]
 802aa8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802aa90:	687b      	ldr	r3, [r7, #4]
 802aa92:	689b      	ldr	r3, [r3, #8]
 802aa94:	494d      	ldr	r1, [pc, #308]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802aa96:	4313      	orrs	r3, r2
 802aa98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802aa9a:	687b      	ldr	r3, [r7, #4]
 802aa9c:	681b      	ldr	r3, [r3, #0]
 802aa9e:	f003 0301 	and.w	r3, r3, #1
 802aaa2:	2b00      	cmp	r3, #0
 802aaa4:	d044      	beq.n	802ab30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802aaa6:	687b      	ldr	r3, [r7, #4]
 802aaa8:	685b      	ldr	r3, [r3, #4]
 802aaaa:	2b01      	cmp	r3, #1
 802aaac:	d107      	bne.n	802aabe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802aaae:	4b47      	ldr	r3, [pc, #284]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802aab0:	681b      	ldr	r3, [r3, #0]
 802aab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802aab6:	2b00      	cmp	r3, #0
 802aab8:	d119      	bne.n	802aaee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802aaba:	2301      	movs	r3, #1
 802aabc:	e07f      	b.n	802abbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802aabe:	687b      	ldr	r3, [r7, #4]
 802aac0:	685b      	ldr	r3, [r3, #4]
 802aac2:	2b02      	cmp	r3, #2
 802aac4:	d003      	beq.n	802aace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802aac6:	687b      	ldr	r3, [r7, #4]
 802aac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802aaca:	2b03      	cmp	r3, #3
 802aacc:	d107      	bne.n	802aade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802aace:	4b3f      	ldr	r3, [pc, #252]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802aad0:	681b      	ldr	r3, [r3, #0]
 802aad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802aad6:	2b00      	cmp	r3, #0
 802aad8:	d109      	bne.n	802aaee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802aada:	2301      	movs	r3, #1
 802aadc:	e06f      	b.n	802abbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802aade:	4b3b      	ldr	r3, [pc, #236]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802aae0:	681b      	ldr	r3, [r3, #0]
 802aae2:	f003 0302 	and.w	r3, r3, #2
 802aae6:	2b00      	cmp	r3, #0
 802aae8:	d101      	bne.n	802aaee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802aaea:	2301      	movs	r3, #1
 802aaec:	e067      	b.n	802abbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802aaee:	4b37      	ldr	r3, [pc, #220]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802aaf0:	689b      	ldr	r3, [r3, #8]
 802aaf2:	f023 0203 	bic.w	r2, r3, #3
 802aaf6:	687b      	ldr	r3, [r7, #4]
 802aaf8:	685b      	ldr	r3, [r3, #4]
 802aafa:	4934      	ldr	r1, [pc, #208]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802aafc:	4313      	orrs	r3, r2
 802aafe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 802ab00:	f7fd f8d8 	bl	8027cb4 <HAL_GetTick>
 802ab04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802ab06:	e00a      	b.n	802ab1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802ab08:	f7fd f8d4 	bl	8027cb4 <HAL_GetTick>
 802ab0c:	4602      	mov	r2, r0
 802ab0e:	68fb      	ldr	r3, [r7, #12]
 802ab10:	1ad3      	subs	r3, r2, r3
 802ab12:	f241 3288 	movw	r2, #5000	; 0x1388
 802ab16:	4293      	cmp	r3, r2
 802ab18:	d901      	bls.n	802ab1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802ab1a:	2303      	movs	r3, #3
 802ab1c:	e04f      	b.n	802abbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802ab1e:	4b2b      	ldr	r3, [pc, #172]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802ab20:	689b      	ldr	r3, [r3, #8]
 802ab22:	f003 020c 	and.w	r2, r3, #12
 802ab26:	687b      	ldr	r3, [r7, #4]
 802ab28:	685b      	ldr	r3, [r3, #4]
 802ab2a:	009b      	lsls	r3, r3, #2
 802ab2c:	429a      	cmp	r2, r3
 802ab2e:	d1eb      	bne.n	802ab08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802ab30:	4b25      	ldr	r3, [pc, #148]	; (802abc8 <HAL_RCC_ClockConfig+0x1b8>)
 802ab32:	681b      	ldr	r3, [r3, #0]
 802ab34:	f003 0307 	and.w	r3, r3, #7
 802ab38:	683a      	ldr	r2, [r7, #0]
 802ab3a:	429a      	cmp	r2, r3
 802ab3c:	d20c      	bcs.n	802ab58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802ab3e:	4b22      	ldr	r3, [pc, #136]	; (802abc8 <HAL_RCC_ClockConfig+0x1b8>)
 802ab40:	683a      	ldr	r2, [r7, #0]
 802ab42:	b2d2      	uxtb	r2, r2
 802ab44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802ab46:	4b20      	ldr	r3, [pc, #128]	; (802abc8 <HAL_RCC_ClockConfig+0x1b8>)
 802ab48:	681b      	ldr	r3, [r3, #0]
 802ab4a:	f003 0307 	and.w	r3, r3, #7
 802ab4e:	683a      	ldr	r2, [r7, #0]
 802ab50:	429a      	cmp	r2, r3
 802ab52:	d001      	beq.n	802ab58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802ab54:	2301      	movs	r3, #1
 802ab56:	e032      	b.n	802abbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802ab58:	687b      	ldr	r3, [r7, #4]
 802ab5a:	681b      	ldr	r3, [r3, #0]
 802ab5c:	f003 0304 	and.w	r3, r3, #4
 802ab60:	2b00      	cmp	r3, #0
 802ab62:	d008      	beq.n	802ab76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802ab64:	4b19      	ldr	r3, [pc, #100]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802ab66:	689b      	ldr	r3, [r3, #8]
 802ab68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802ab6c:	687b      	ldr	r3, [r7, #4]
 802ab6e:	68db      	ldr	r3, [r3, #12]
 802ab70:	4916      	ldr	r1, [pc, #88]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802ab72:	4313      	orrs	r3, r2
 802ab74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802ab76:	687b      	ldr	r3, [r7, #4]
 802ab78:	681b      	ldr	r3, [r3, #0]
 802ab7a:	f003 0308 	and.w	r3, r3, #8
 802ab7e:	2b00      	cmp	r3, #0
 802ab80:	d009      	beq.n	802ab96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802ab82:	4b12      	ldr	r3, [pc, #72]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802ab84:	689b      	ldr	r3, [r3, #8]
 802ab86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802ab8a:	687b      	ldr	r3, [r7, #4]
 802ab8c:	691b      	ldr	r3, [r3, #16]
 802ab8e:	00db      	lsls	r3, r3, #3
 802ab90:	490e      	ldr	r1, [pc, #56]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802ab92:	4313      	orrs	r3, r2
 802ab94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802ab96:	f000 f82d 	bl	802abf4 <HAL_RCC_GetSysClockFreq>
 802ab9a:	4602      	mov	r2, r0
 802ab9c:	4b0b      	ldr	r3, [pc, #44]	; (802abcc <HAL_RCC_ClockConfig+0x1bc>)
 802ab9e:	689b      	ldr	r3, [r3, #8]
 802aba0:	091b      	lsrs	r3, r3, #4
 802aba2:	f003 030f 	and.w	r3, r3, #15
 802aba6:	490a      	ldr	r1, [pc, #40]	; (802abd0 <HAL_RCC_ClockConfig+0x1c0>)
 802aba8:	5ccb      	ldrb	r3, [r1, r3]
 802abaa:	fa22 f303 	lsr.w	r3, r2, r3
 802abae:	4a09      	ldr	r2, [pc, #36]	; (802abd4 <HAL_RCC_ClockConfig+0x1c4>)
 802abb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802abb2:	4b09      	ldr	r3, [pc, #36]	; (802abd8 <HAL_RCC_ClockConfig+0x1c8>)
 802abb4:	681b      	ldr	r3, [r3, #0]
 802abb6:	4618      	mov	r0, r3
 802abb8:	f7fd f838 	bl	8027c2c <HAL_InitTick>

  return HAL_OK;
 802abbc:	2300      	movs	r3, #0
}
 802abbe:	4618      	mov	r0, r3
 802abc0:	3710      	adds	r7, #16
 802abc2:	46bd      	mov	sp, r7
 802abc4:	bd80      	pop	{r7, pc}
 802abc6:	bf00      	nop
 802abc8:	40023c00 	.word	0x40023c00
 802abcc:	40023800 	.word	0x40023800
 802abd0:	08036dec 	.word	0x08036dec
 802abd4:	20000138 	.word	0x20000138
 802abd8:	2000013c 	.word	0x2000013c

0802abdc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 802abdc:	b480      	push	{r7}
 802abde:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 802abe0:	4b03      	ldr	r3, [pc, #12]	; (802abf0 <HAL_RCC_EnableCSS+0x14>)
 802abe2:	2201      	movs	r2, #1
 802abe4:	601a      	str	r2, [r3, #0]
}
 802abe6:	bf00      	nop
 802abe8:	46bd      	mov	sp, r7
 802abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abee:	4770      	bx	lr
 802abf0:	4247004c 	.word	0x4247004c

0802abf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802abf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802abf8:	b090      	sub	sp, #64	; 0x40
 802abfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 802abfc:	2300      	movs	r3, #0
 802abfe:	637b      	str	r3, [r7, #52]	; 0x34
 802ac00:	2300      	movs	r3, #0
 802ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
 802ac04:	2300      	movs	r3, #0
 802ac06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 802ac08:	2300      	movs	r3, #0
 802ac0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802ac0c:	4b59      	ldr	r3, [pc, #356]	; (802ad74 <HAL_RCC_GetSysClockFreq+0x180>)
 802ac0e:	689b      	ldr	r3, [r3, #8]
 802ac10:	f003 030c 	and.w	r3, r3, #12
 802ac14:	2b08      	cmp	r3, #8
 802ac16:	d00d      	beq.n	802ac34 <HAL_RCC_GetSysClockFreq+0x40>
 802ac18:	2b08      	cmp	r3, #8
 802ac1a:	f200 80a1 	bhi.w	802ad60 <HAL_RCC_GetSysClockFreq+0x16c>
 802ac1e:	2b00      	cmp	r3, #0
 802ac20:	d002      	beq.n	802ac28 <HAL_RCC_GetSysClockFreq+0x34>
 802ac22:	2b04      	cmp	r3, #4
 802ac24:	d003      	beq.n	802ac2e <HAL_RCC_GetSysClockFreq+0x3a>
 802ac26:	e09b      	b.n	802ad60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802ac28:	4b53      	ldr	r3, [pc, #332]	; (802ad78 <HAL_RCC_GetSysClockFreq+0x184>)
 802ac2a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 802ac2c:	e09b      	b.n	802ad66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802ac2e:	4b53      	ldr	r3, [pc, #332]	; (802ad7c <HAL_RCC_GetSysClockFreq+0x188>)
 802ac30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802ac32:	e098      	b.n	802ad66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802ac34:	4b4f      	ldr	r3, [pc, #316]	; (802ad74 <HAL_RCC_GetSysClockFreq+0x180>)
 802ac36:	685b      	ldr	r3, [r3, #4]
 802ac38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802ac3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802ac3e:	4b4d      	ldr	r3, [pc, #308]	; (802ad74 <HAL_RCC_GetSysClockFreq+0x180>)
 802ac40:	685b      	ldr	r3, [r3, #4]
 802ac42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802ac46:	2b00      	cmp	r3, #0
 802ac48:	d028      	beq.n	802ac9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802ac4a:	4b4a      	ldr	r3, [pc, #296]	; (802ad74 <HAL_RCC_GetSysClockFreq+0x180>)
 802ac4c:	685b      	ldr	r3, [r3, #4]
 802ac4e:	099b      	lsrs	r3, r3, #6
 802ac50:	2200      	movs	r2, #0
 802ac52:	623b      	str	r3, [r7, #32]
 802ac54:	627a      	str	r2, [r7, #36]	; 0x24
 802ac56:	6a3b      	ldr	r3, [r7, #32]
 802ac58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 802ac5c:	2100      	movs	r1, #0
 802ac5e:	4b47      	ldr	r3, [pc, #284]	; (802ad7c <HAL_RCC_GetSysClockFreq+0x188>)
 802ac60:	fb03 f201 	mul.w	r2, r3, r1
 802ac64:	2300      	movs	r3, #0
 802ac66:	fb00 f303 	mul.w	r3, r0, r3
 802ac6a:	4413      	add	r3, r2
 802ac6c:	4a43      	ldr	r2, [pc, #268]	; (802ad7c <HAL_RCC_GetSysClockFreq+0x188>)
 802ac6e:	fba0 1202 	umull	r1, r2, r0, r2
 802ac72:	62fa      	str	r2, [r7, #44]	; 0x2c
 802ac74:	460a      	mov	r2, r1
 802ac76:	62ba      	str	r2, [r7, #40]	; 0x28
 802ac78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802ac7a:	4413      	add	r3, r2
 802ac7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802ac7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ac80:	2200      	movs	r2, #0
 802ac82:	61bb      	str	r3, [r7, #24]
 802ac84:	61fa      	str	r2, [r7, #28]
 802ac86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802ac8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802ac8e:	f7f7 ff8b 	bl	8022ba8 <__aeabi_uldivmod>
 802ac92:	4602      	mov	r2, r0
 802ac94:	460b      	mov	r3, r1
 802ac96:	4613      	mov	r3, r2
 802ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
 802ac9a:	e053      	b.n	802ad44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802ac9c:	4b35      	ldr	r3, [pc, #212]	; (802ad74 <HAL_RCC_GetSysClockFreq+0x180>)
 802ac9e:	685b      	ldr	r3, [r3, #4]
 802aca0:	099b      	lsrs	r3, r3, #6
 802aca2:	2200      	movs	r2, #0
 802aca4:	613b      	str	r3, [r7, #16]
 802aca6:	617a      	str	r2, [r7, #20]
 802aca8:	693b      	ldr	r3, [r7, #16]
 802acaa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 802acae:	f04f 0b00 	mov.w	fp, #0
 802acb2:	4652      	mov	r2, sl
 802acb4:	465b      	mov	r3, fp
 802acb6:	f04f 0000 	mov.w	r0, #0
 802acba:	f04f 0100 	mov.w	r1, #0
 802acbe:	0159      	lsls	r1, r3, #5
 802acc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802acc4:	0150      	lsls	r0, r2, #5
 802acc6:	4602      	mov	r2, r0
 802acc8:	460b      	mov	r3, r1
 802acca:	ebb2 080a 	subs.w	r8, r2, sl
 802acce:	eb63 090b 	sbc.w	r9, r3, fp
 802acd2:	f04f 0200 	mov.w	r2, #0
 802acd6:	f04f 0300 	mov.w	r3, #0
 802acda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 802acde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 802ace2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 802ace6:	ebb2 0408 	subs.w	r4, r2, r8
 802acea:	eb63 0509 	sbc.w	r5, r3, r9
 802acee:	f04f 0200 	mov.w	r2, #0
 802acf2:	f04f 0300 	mov.w	r3, #0
 802acf6:	00eb      	lsls	r3, r5, #3
 802acf8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802acfc:	00e2      	lsls	r2, r4, #3
 802acfe:	4614      	mov	r4, r2
 802ad00:	461d      	mov	r5, r3
 802ad02:	eb14 030a 	adds.w	r3, r4, sl
 802ad06:	603b      	str	r3, [r7, #0]
 802ad08:	eb45 030b 	adc.w	r3, r5, fp
 802ad0c:	607b      	str	r3, [r7, #4]
 802ad0e:	f04f 0200 	mov.w	r2, #0
 802ad12:	f04f 0300 	mov.w	r3, #0
 802ad16:	e9d7 4500 	ldrd	r4, r5, [r7]
 802ad1a:	4629      	mov	r1, r5
 802ad1c:	028b      	lsls	r3, r1, #10
 802ad1e:	4621      	mov	r1, r4
 802ad20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 802ad24:	4621      	mov	r1, r4
 802ad26:	028a      	lsls	r2, r1, #10
 802ad28:	4610      	mov	r0, r2
 802ad2a:	4619      	mov	r1, r3
 802ad2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ad2e:	2200      	movs	r2, #0
 802ad30:	60bb      	str	r3, [r7, #8]
 802ad32:	60fa      	str	r2, [r7, #12]
 802ad34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802ad38:	f7f7 ff36 	bl	8022ba8 <__aeabi_uldivmod>
 802ad3c:	4602      	mov	r2, r0
 802ad3e:	460b      	mov	r3, r1
 802ad40:	4613      	mov	r3, r2
 802ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802ad44:	4b0b      	ldr	r3, [pc, #44]	; (802ad74 <HAL_RCC_GetSysClockFreq+0x180>)
 802ad46:	685b      	ldr	r3, [r3, #4]
 802ad48:	0c1b      	lsrs	r3, r3, #16
 802ad4a:	f003 0303 	and.w	r3, r3, #3
 802ad4e:	3301      	adds	r3, #1
 802ad50:	005b      	lsls	r3, r3, #1
 802ad52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 802ad54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ad58:	fbb2 f3f3 	udiv	r3, r2, r3
 802ad5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802ad5e:	e002      	b.n	802ad66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802ad60:	4b05      	ldr	r3, [pc, #20]	; (802ad78 <HAL_RCC_GetSysClockFreq+0x184>)
 802ad62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802ad64:	bf00      	nop
    }
  }
  return sysclockfreq;
 802ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 802ad68:	4618      	mov	r0, r3
 802ad6a:	3740      	adds	r7, #64	; 0x40
 802ad6c:	46bd      	mov	sp, r7
 802ad6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802ad72:	bf00      	nop
 802ad74:	40023800 	.word	0x40023800
 802ad78:	00f42400 	.word	0x00f42400
 802ad7c:	00989680 	.word	0x00989680

0802ad80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802ad80:	b480      	push	{r7}
 802ad82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802ad84:	4b03      	ldr	r3, [pc, #12]	; (802ad94 <HAL_RCC_GetHCLKFreq+0x14>)
 802ad86:	681b      	ldr	r3, [r3, #0]
}
 802ad88:	4618      	mov	r0, r3
 802ad8a:	46bd      	mov	sp, r7
 802ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad90:	4770      	bx	lr
 802ad92:	bf00      	nop
 802ad94:	20000138 	.word	0x20000138

0802ad98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802ad98:	b580      	push	{r7, lr}
 802ad9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802ad9c:	f7ff fff0 	bl	802ad80 <HAL_RCC_GetHCLKFreq>
 802ada0:	4602      	mov	r2, r0
 802ada2:	4b05      	ldr	r3, [pc, #20]	; (802adb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 802ada4:	689b      	ldr	r3, [r3, #8]
 802ada6:	0a9b      	lsrs	r3, r3, #10
 802ada8:	f003 0307 	and.w	r3, r3, #7
 802adac:	4903      	ldr	r1, [pc, #12]	; (802adbc <HAL_RCC_GetPCLK1Freq+0x24>)
 802adae:	5ccb      	ldrb	r3, [r1, r3]
 802adb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 802adb4:	4618      	mov	r0, r3
 802adb6:	bd80      	pop	{r7, pc}
 802adb8:	40023800 	.word	0x40023800
 802adbc:	08036dfc 	.word	0x08036dfc

0802adc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802adc0:	b580      	push	{r7, lr}
 802adc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 802adc4:	f7ff ffdc 	bl	802ad80 <HAL_RCC_GetHCLKFreq>
 802adc8:	4602      	mov	r2, r0
 802adca:	4b05      	ldr	r3, [pc, #20]	; (802ade0 <HAL_RCC_GetPCLK2Freq+0x20>)
 802adcc:	689b      	ldr	r3, [r3, #8]
 802adce:	0b5b      	lsrs	r3, r3, #13
 802add0:	f003 0307 	and.w	r3, r3, #7
 802add4:	4903      	ldr	r1, [pc, #12]	; (802ade4 <HAL_RCC_GetPCLK2Freq+0x24>)
 802add6:	5ccb      	ldrb	r3, [r1, r3]
 802add8:	fa22 f303 	lsr.w	r3, r2, r3
}
 802addc:	4618      	mov	r0, r3
 802adde:	bd80      	pop	{r7, pc}
 802ade0:	40023800 	.word	0x40023800
 802ade4:	08036dfc 	.word	0x08036dfc

0802ade8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 802ade8:	b580      	push	{r7, lr}
 802adea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 802adec:	4b06      	ldr	r3, [pc, #24]	; (802ae08 <HAL_RCC_NMI_IRQHandler+0x20>)
 802adee:	68db      	ldr	r3, [r3, #12]
 802adf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802adf4:	2b80      	cmp	r3, #128	; 0x80
 802adf6:	d104      	bne.n	802ae02 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 802adf8:	f000 f80a 	bl	802ae10 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 802adfc:	4b03      	ldr	r3, [pc, #12]	; (802ae0c <HAL_RCC_NMI_IRQHandler+0x24>)
 802adfe:	2280      	movs	r2, #128	; 0x80
 802ae00:	701a      	strb	r2, [r3, #0]
  }
}
 802ae02:	bf00      	nop
 802ae04:	bd80      	pop	{r7, pc}
 802ae06:	bf00      	nop
 802ae08:	40023800 	.word	0x40023800
 802ae0c:	4002380e 	.word	0x4002380e

0802ae10 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 802ae10:	b480      	push	{r7}
 802ae12:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 802ae14:	bf00      	nop
 802ae16:	46bd      	mov	sp, r7
 802ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae1c:	4770      	bx	lr
	...

0802ae20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 802ae20:	b580      	push	{r7, lr}
 802ae22:	b086      	sub	sp, #24
 802ae24:	af00      	add	r7, sp, #0
 802ae26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802ae28:	2300      	movs	r3, #0
 802ae2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 802ae2c:	2300      	movs	r3, #0
 802ae2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802ae30:	687b      	ldr	r3, [r7, #4]
 802ae32:	681b      	ldr	r3, [r3, #0]
 802ae34:	f003 0301 	and.w	r3, r3, #1
 802ae38:	2b00      	cmp	r3, #0
 802ae3a:	d105      	bne.n	802ae48 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 802ae3c:	687b      	ldr	r3, [r7, #4]
 802ae3e:	681b      	ldr	r3, [r3, #0]
 802ae40:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802ae44:	2b00      	cmp	r3, #0
 802ae46:	d035      	beq.n	802aeb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 802ae48:	4b62      	ldr	r3, [pc, #392]	; (802afd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802ae4a:	2200      	movs	r2, #0
 802ae4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802ae4e:	f7fc ff31 	bl	8027cb4 <HAL_GetTick>
 802ae52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802ae54:	e008      	b.n	802ae68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802ae56:	f7fc ff2d 	bl	8027cb4 <HAL_GetTick>
 802ae5a:	4602      	mov	r2, r0
 802ae5c:	697b      	ldr	r3, [r7, #20]
 802ae5e:	1ad3      	subs	r3, r2, r3
 802ae60:	2b02      	cmp	r3, #2
 802ae62:	d901      	bls.n	802ae68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802ae64:	2303      	movs	r3, #3
 802ae66:	e0b0      	b.n	802afca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802ae68:	4b5b      	ldr	r3, [pc, #364]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802ae6a:	681b      	ldr	r3, [r3, #0]
 802ae6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802ae70:	2b00      	cmp	r3, #0
 802ae72:	d1f0      	bne.n	802ae56 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 802ae74:	687b      	ldr	r3, [r7, #4]
 802ae76:	685b      	ldr	r3, [r3, #4]
 802ae78:	019a      	lsls	r2, r3, #6
 802ae7a:	687b      	ldr	r3, [r7, #4]
 802ae7c:	689b      	ldr	r3, [r3, #8]
 802ae7e:	071b      	lsls	r3, r3, #28
 802ae80:	4955      	ldr	r1, [pc, #340]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802ae82:	4313      	orrs	r3, r2
 802ae84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 802ae88:	4b52      	ldr	r3, [pc, #328]	; (802afd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802ae8a:	2201      	movs	r2, #1
 802ae8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802ae8e:	f7fc ff11 	bl	8027cb4 <HAL_GetTick>
 802ae92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802ae94:	e008      	b.n	802aea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802ae96:	f7fc ff0d 	bl	8027cb4 <HAL_GetTick>
 802ae9a:	4602      	mov	r2, r0
 802ae9c:	697b      	ldr	r3, [r7, #20]
 802ae9e:	1ad3      	subs	r3, r2, r3
 802aea0:	2b02      	cmp	r3, #2
 802aea2:	d901      	bls.n	802aea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802aea4:	2303      	movs	r3, #3
 802aea6:	e090      	b.n	802afca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802aea8:	4b4b      	ldr	r3, [pc, #300]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802aeaa:	681b      	ldr	r3, [r3, #0]
 802aeac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802aeb0:	2b00      	cmp	r3, #0
 802aeb2:	d0f0      	beq.n	802ae96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 802aeb4:	687b      	ldr	r3, [r7, #4]
 802aeb6:	681b      	ldr	r3, [r3, #0]
 802aeb8:	f003 0302 	and.w	r3, r3, #2
 802aebc:	2b00      	cmp	r3, #0
 802aebe:	f000 8083 	beq.w	802afc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 802aec2:	2300      	movs	r3, #0
 802aec4:	60fb      	str	r3, [r7, #12]
 802aec6:	4b44      	ldr	r3, [pc, #272]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802aec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802aeca:	4a43      	ldr	r2, [pc, #268]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802aecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802aed0:	6413      	str	r3, [r2, #64]	; 0x40
 802aed2:	4b41      	ldr	r3, [pc, #260]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802aed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802aed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802aeda:	60fb      	str	r3, [r7, #12]
 802aedc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 802aede:	4b3f      	ldr	r3, [pc, #252]	; (802afdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802aee0:	681b      	ldr	r3, [r3, #0]
 802aee2:	4a3e      	ldr	r2, [pc, #248]	; (802afdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802aee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802aee8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 802aeea:	f7fc fee3 	bl	8027cb4 <HAL_GetTick>
 802aeee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 802aef0:	e008      	b.n	802af04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802aef2:	f7fc fedf 	bl	8027cb4 <HAL_GetTick>
 802aef6:	4602      	mov	r2, r0
 802aef8:	697b      	ldr	r3, [r7, #20]
 802aefa:	1ad3      	subs	r3, r2, r3
 802aefc:	2b02      	cmp	r3, #2
 802aefe:	d901      	bls.n	802af04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 802af00:	2303      	movs	r3, #3
 802af02:	e062      	b.n	802afca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 802af04:	4b35      	ldr	r3, [pc, #212]	; (802afdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802af06:	681b      	ldr	r3, [r3, #0]
 802af08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802af0c:	2b00      	cmp	r3, #0
 802af0e:	d0f0      	beq.n	802aef2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 802af10:	4b31      	ldr	r3, [pc, #196]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802af12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802af14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802af18:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802af1a:	693b      	ldr	r3, [r7, #16]
 802af1c:	2b00      	cmp	r3, #0
 802af1e:	d02f      	beq.n	802af80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 802af20:	687b      	ldr	r3, [r7, #4]
 802af22:	68db      	ldr	r3, [r3, #12]
 802af24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802af28:	693a      	ldr	r2, [r7, #16]
 802af2a:	429a      	cmp	r2, r3
 802af2c:	d028      	beq.n	802af80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802af2e:	4b2a      	ldr	r3, [pc, #168]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802af30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802af32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802af36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 802af38:	4b29      	ldr	r3, [pc, #164]	; (802afe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 802af3a:	2201      	movs	r2, #1
 802af3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 802af3e:	4b28      	ldr	r3, [pc, #160]	; (802afe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 802af40:	2200      	movs	r2, #0
 802af42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 802af44:	4a24      	ldr	r2, [pc, #144]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802af46:	693b      	ldr	r3, [r7, #16]
 802af48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 802af4a:	4b23      	ldr	r3, [pc, #140]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802af4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802af4e:	f003 0301 	and.w	r3, r3, #1
 802af52:	2b01      	cmp	r3, #1
 802af54:	d114      	bne.n	802af80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 802af56:	f7fc fead 	bl	8027cb4 <HAL_GetTick>
 802af5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802af5c:	e00a      	b.n	802af74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802af5e:	f7fc fea9 	bl	8027cb4 <HAL_GetTick>
 802af62:	4602      	mov	r2, r0
 802af64:	697b      	ldr	r3, [r7, #20]
 802af66:	1ad3      	subs	r3, r2, r3
 802af68:	f241 3288 	movw	r2, #5000	; 0x1388
 802af6c:	4293      	cmp	r3, r2
 802af6e:	d901      	bls.n	802af74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 802af70:	2303      	movs	r3, #3
 802af72:	e02a      	b.n	802afca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802af74:	4b18      	ldr	r3, [pc, #96]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802af76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802af78:	f003 0302 	and.w	r3, r3, #2
 802af7c:	2b00      	cmp	r3, #0
 802af7e:	d0ee      	beq.n	802af5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802af80:	687b      	ldr	r3, [r7, #4]
 802af82:	68db      	ldr	r3, [r3, #12]
 802af84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802af88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802af8c:	d10d      	bne.n	802afaa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 802af8e:	4b12      	ldr	r3, [pc, #72]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802af90:	689b      	ldr	r3, [r3, #8]
 802af92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802af96:	687b      	ldr	r3, [r7, #4]
 802af98:	68db      	ldr	r3, [r3, #12]
 802af9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802af9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802afa2:	490d      	ldr	r1, [pc, #52]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802afa4:	4313      	orrs	r3, r2
 802afa6:	608b      	str	r3, [r1, #8]
 802afa8:	e005      	b.n	802afb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 802afaa:	4b0b      	ldr	r3, [pc, #44]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802afac:	689b      	ldr	r3, [r3, #8]
 802afae:	4a0a      	ldr	r2, [pc, #40]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802afb0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 802afb4:	6093      	str	r3, [r2, #8]
 802afb6:	4b08      	ldr	r3, [pc, #32]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802afb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802afba:	687b      	ldr	r3, [r7, #4]
 802afbc:	68db      	ldr	r3, [r3, #12]
 802afbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802afc2:	4905      	ldr	r1, [pc, #20]	; (802afd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802afc4:	4313      	orrs	r3, r2
 802afc6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 802afc8:	2300      	movs	r3, #0
}
 802afca:	4618      	mov	r0, r3
 802afcc:	3718      	adds	r7, #24
 802afce:	46bd      	mov	sp, r7
 802afd0:	bd80      	pop	{r7, pc}
 802afd2:	bf00      	nop
 802afd4:	42470068 	.word	0x42470068
 802afd8:	40023800 	.word	0x40023800
 802afdc:	40007000 	.word	0x40007000
 802afe0:	42470e40 	.word	0x42470e40

0802afe4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 802afe4:	b580      	push	{r7, lr}
 802afe6:	b084      	sub	sp, #16
 802afe8:	af00      	add	r7, sp, #0
 802afea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 802afec:	2301      	movs	r3, #1
 802afee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 802aff0:	687b      	ldr	r3, [r7, #4]
 802aff2:	2b00      	cmp	r3, #0
 802aff4:	d101      	bne.n	802affa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 802aff6:	2301      	movs	r3, #1
 802aff8:	e066      	b.n	802b0c8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 802affa:	687b      	ldr	r3, [r7, #4]
 802affc:	7f5b      	ldrb	r3, [r3, #29]
 802affe:	b2db      	uxtb	r3, r3
 802b000:	2b00      	cmp	r3, #0
 802b002:	d105      	bne.n	802b010 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 802b004:	687b      	ldr	r3, [r7, #4]
 802b006:	2200      	movs	r2, #0
 802b008:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 802b00a:	6878      	ldr	r0, [r7, #4]
 802b00c:	f7fb fc92 	bl	8026934 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 802b010:	687b      	ldr	r3, [r7, #4]
 802b012:	2202      	movs	r2, #2
 802b014:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802b016:	687b      	ldr	r3, [r7, #4]
 802b018:	681b      	ldr	r3, [r3, #0]
 802b01a:	22ca      	movs	r2, #202	; 0xca
 802b01c:	625a      	str	r2, [r3, #36]	; 0x24
 802b01e:	687b      	ldr	r3, [r7, #4]
 802b020:	681b      	ldr	r3, [r3, #0]
 802b022:	2253      	movs	r2, #83	; 0x53
 802b024:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802b026:	6878      	ldr	r0, [r7, #4]
 802b028:	f000 f998 	bl	802b35c <RTC_EnterInitMode>
 802b02c:	4603      	mov	r3, r0
 802b02e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 802b030:	7bfb      	ldrb	r3, [r7, #15]
 802b032:	2b00      	cmp	r3, #0
 802b034:	d12c      	bne.n	802b090 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 802b036:	687b      	ldr	r3, [r7, #4]
 802b038:	681b      	ldr	r3, [r3, #0]
 802b03a:	689b      	ldr	r3, [r3, #8]
 802b03c:	687a      	ldr	r2, [r7, #4]
 802b03e:	6812      	ldr	r2, [r2, #0]
 802b040:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802b044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802b048:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 802b04a:	687b      	ldr	r3, [r7, #4]
 802b04c:	681b      	ldr	r3, [r3, #0]
 802b04e:	6899      	ldr	r1, [r3, #8]
 802b050:	687b      	ldr	r3, [r7, #4]
 802b052:	685a      	ldr	r2, [r3, #4]
 802b054:	687b      	ldr	r3, [r7, #4]
 802b056:	691b      	ldr	r3, [r3, #16]
 802b058:	431a      	orrs	r2, r3
 802b05a:	687b      	ldr	r3, [r7, #4]
 802b05c:	695b      	ldr	r3, [r3, #20]
 802b05e:	431a      	orrs	r2, r3
 802b060:	687b      	ldr	r3, [r7, #4]
 802b062:	681b      	ldr	r3, [r3, #0]
 802b064:	430a      	orrs	r2, r1
 802b066:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 802b068:	687b      	ldr	r3, [r7, #4]
 802b06a:	681b      	ldr	r3, [r3, #0]
 802b06c:	687a      	ldr	r2, [r7, #4]
 802b06e:	68d2      	ldr	r2, [r2, #12]
 802b070:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 802b072:	687b      	ldr	r3, [r7, #4]
 802b074:	681b      	ldr	r3, [r3, #0]
 802b076:	6919      	ldr	r1, [r3, #16]
 802b078:	687b      	ldr	r3, [r7, #4]
 802b07a:	689b      	ldr	r3, [r3, #8]
 802b07c:	041a      	lsls	r2, r3, #16
 802b07e:	687b      	ldr	r3, [r7, #4]
 802b080:	681b      	ldr	r3, [r3, #0]
 802b082:	430a      	orrs	r2, r1
 802b084:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802b086:	6878      	ldr	r0, [r7, #4]
 802b088:	f000 f99f 	bl	802b3ca <RTC_ExitInitMode>
 802b08c:	4603      	mov	r3, r0
 802b08e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 802b090:	7bfb      	ldrb	r3, [r7, #15]
 802b092:	2b00      	cmp	r3, #0
 802b094:	d113      	bne.n	802b0be <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 802b096:	687b      	ldr	r3, [r7, #4]
 802b098:	681b      	ldr	r3, [r3, #0]
 802b09a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802b09c:	687b      	ldr	r3, [r7, #4]
 802b09e:	681b      	ldr	r3, [r3, #0]
 802b0a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802b0a4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 802b0a6:	687b      	ldr	r3, [r7, #4]
 802b0a8:	681b      	ldr	r3, [r3, #0]
 802b0aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 802b0ac:	687b      	ldr	r3, [r7, #4]
 802b0ae:	699a      	ldr	r2, [r3, #24]
 802b0b0:	687b      	ldr	r3, [r7, #4]
 802b0b2:	681b      	ldr	r3, [r3, #0]
 802b0b4:	430a      	orrs	r2, r1
 802b0b6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 802b0b8:	687b      	ldr	r3, [r7, #4]
 802b0ba:	2201      	movs	r2, #1
 802b0bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802b0be:	687b      	ldr	r3, [r7, #4]
 802b0c0:	681b      	ldr	r3, [r3, #0]
 802b0c2:	22ff      	movs	r2, #255	; 0xff
 802b0c4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 802b0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 802b0c8:	4618      	mov	r0, r3
 802b0ca:	3710      	adds	r7, #16
 802b0cc:	46bd      	mov	sp, r7
 802b0ce:	bd80      	pop	{r7, pc}

0802b0d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 802b0d0:	b590      	push	{r4, r7, lr}
 802b0d2:	b087      	sub	sp, #28
 802b0d4:	af00      	add	r7, sp, #0
 802b0d6:	60f8      	str	r0, [r7, #12]
 802b0d8:	60b9      	str	r1, [r7, #8]
 802b0da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 802b0dc:	2300      	movs	r3, #0
 802b0de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 802b0e0:	68fb      	ldr	r3, [r7, #12]
 802b0e2:	7f1b      	ldrb	r3, [r3, #28]
 802b0e4:	2b01      	cmp	r3, #1
 802b0e6:	d101      	bne.n	802b0ec <HAL_RTC_SetTime+0x1c>
 802b0e8:	2302      	movs	r3, #2
 802b0ea:	e087      	b.n	802b1fc <HAL_RTC_SetTime+0x12c>
 802b0ec:	68fb      	ldr	r3, [r7, #12]
 802b0ee:	2201      	movs	r2, #1
 802b0f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 802b0f2:	68fb      	ldr	r3, [r7, #12]
 802b0f4:	2202      	movs	r2, #2
 802b0f6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 802b0f8:	687b      	ldr	r3, [r7, #4]
 802b0fa:	2b00      	cmp	r3, #0
 802b0fc:	d126      	bne.n	802b14c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 802b0fe:	68fb      	ldr	r3, [r7, #12]
 802b100:	681b      	ldr	r3, [r3, #0]
 802b102:	689b      	ldr	r3, [r3, #8]
 802b104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b108:	2b00      	cmp	r3, #0
 802b10a:	d102      	bne.n	802b112 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 802b10c:	68bb      	ldr	r3, [r7, #8]
 802b10e:	2200      	movs	r2, #0
 802b110:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802b112:	68bb      	ldr	r3, [r7, #8]
 802b114:	781b      	ldrb	r3, [r3, #0]
 802b116:	4618      	mov	r0, r3
 802b118:	f000 f97c 	bl	802b414 <RTC_ByteToBcd2>
 802b11c:	4603      	mov	r3, r0
 802b11e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 802b120:	68bb      	ldr	r3, [r7, #8]
 802b122:	785b      	ldrb	r3, [r3, #1]
 802b124:	4618      	mov	r0, r3
 802b126:	f000 f975 	bl	802b414 <RTC_ByteToBcd2>
 802b12a:	4603      	mov	r3, r0
 802b12c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802b12e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 802b130:	68bb      	ldr	r3, [r7, #8]
 802b132:	789b      	ldrb	r3, [r3, #2]
 802b134:	4618      	mov	r0, r3
 802b136:	f000 f96d 	bl	802b414 <RTC_ByteToBcd2>
 802b13a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 802b13c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 802b140:	68bb      	ldr	r3, [r7, #8]
 802b142:	78db      	ldrb	r3, [r3, #3]
 802b144:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802b146:	4313      	orrs	r3, r2
 802b148:	617b      	str	r3, [r7, #20]
 802b14a:	e018      	b.n	802b17e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 802b14c:	68fb      	ldr	r3, [r7, #12]
 802b14e:	681b      	ldr	r3, [r3, #0]
 802b150:	689b      	ldr	r3, [r3, #8]
 802b152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b156:	2b00      	cmp	r3, #0
 802b158:	d102      	bne.n	802b160 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 802b15a:	68bb      	ldr	r3, [r7, #8]
 802b15c:	2200      	movs	r2, #0
 802b15e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802b160:	68bb      	ldr	r3, [r7, #8]
 802b162:	781b      	ldrb	r3, [r3, #0]
 802b164:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 802b166:	68bb      	ldr	r3, [r7, #8]
 802b168:	785b      	ldrb	r3, [r3, #1]
 802b16a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802b16c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 802b16e:	68ba      	ldr	r2, [r7, #8]
 802b170:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 802b172:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 802b174:	68bb      	ldr	r3, [r7, #8]
 802b176:	78db      	ldrb	r3, [r3, #3]
 802b178:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802b17a:	4313      	orrs	r3, r2
 802b17c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802b17e:	68fb      	ldr	r3, [r7, #12]
 802b180:	681b      	ldr	r3, [r3, #0]
 802b182:	22ca      	movs	r2, #202	; 0xca
 802b184:	625a      	str	r2, [r3, #36]	; 0x24
 802b186:	68fb      	ldr	r3, [r7, #12]
 802b188:	681b      	ldr	r3, [r3, #0]
 802b18a:	2253      	movs	r2, #83	; 0x53
 802b18c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802b18e:	68f8      	ldr	r0, [r7, #12]
 802b190:	f000 f8e4 	bl	802b35c <RTC_EnterInitMode>
 802b194:	4603      	mov	r3, r0
 802b196:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 802b198:	7cfb      	ldrb	r3, [r7, #19]
 802b19a:	2b00      	cmp	r3, #0
 802b19c:	d120      	bne.n	802b1e0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 802b19e:	68fb      	ldr	r3, [r7, #12]
 802b1a0:	681a      	ldr	r2, [r3, #0]
 802b1a2:	697b      	ldr	r3, [r7, #20]
 802b1a4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 802b1a8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 802b1ac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 802b1ae:	68fb      	ldr	r3, [r7, #12]
 802b1b0:	681b      	ldr	r3, [r3, #0]
 802b1b2:	689a      	ldr	r2, [r3, #8]
 802b1b4:	68fb      	ldr	r3, [r7, #12]
 802b1b6:	681b      	ldr	r3, [r3, #0]
 802b1b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802b1bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 802b1be:	68fb      	ldr	r3, [r7, #12]
 802b1c0:	681b      	ldr	r3, [r3, #0]
 802b1c2:	6899      	ldr	r1, [r3, #8]
 802b1c4:	68bb      	ldr	r3, [r7, #8]
 802b1c6:	68da      	ldr	r2, [r3, #12]
 802b1c8:	68bb      	ldr	r3, [r7, #8]
 802b1ca:	691b      	ldr	r3, [r3, #16]
 802b1cc:	431a      	orrs	r2, r3
 802b1ce:	68fb      	ldr	r3, [r7, #12]
 802b1d0:	681b      	ldr	r3, [r3, #0]
 802b1d2:	430a      	orrs	r2, r1
 802b1d4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802b1d6:	68f8      	ldr	r0, [r7, #12]
 802b1d8:	f000 f8f7 	bl	802b3ca <RTC_ExitInitMode>
 802b1dc:	4603      	mov	r3, r0
 802b1de:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 802b1e0:	7cfb      	ldrb	r3, [r7, #19]
 802b1e2:	2b00      	cmp	r3, #0
 802b1e4:	d102      	bne.n	802b1ec <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 802b1e6:	68fb      	ldr	r3, [r7, #12]
 802b1e8:	2201      	movs	r2, #1
 802b1ea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802b1ec:	68fb      	ldr	r3, [r7, #12]
 802b1ee:	681b      	ldr	r3, [r3, #0]
 802b1f0:	22ff      	movs	r2, #255	; 0xff
 802b1f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 802b1f4:	68fb      	ldr	r3, [r7, #12]
 802b1f6:	2200      	movs	r2, #0
 802b1f8:	771a      	strb	r2, [r3, #28]

  return status;
 802b1fa:	7cfb      	ldrb	r3, [r7, #19]
}
 802b1fc:	4618      	mov	r0, r3
 802b1fe:	371c      	adds	r7, #28
 802b200:	46bd      	mov	sp, r7
 802b202:	bd90      	pop	{r4, r7, pc}

0802b204 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 802b204:	b590      	push	{r4, r7, lr}
 802b206:	b087      	sub	sp, #28
 802b208:	af00      	add	r7, sp, #0
 802b20a:	60f8      	str	r0, [r7, #12]
 802b20c:	60b9      	str	r1, [r7, #8]
 802b20e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 802b210:	2300      	movs	r3, #0
 802b212:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 802b214:	68fb      	ldr	r3, [r7, #12]
 802b216:	7f1b      	ldrb	r3, [r3, #28]
 802b218:	2b01      	cmp	r3, #1
 802b21a:	d101      	bne.n	802b220 <HAL_RTC_SetDate+0x1c>
 802b21c:	2302      	movs	r3, #2
 802b21e:	e071      	b.n	802b304 <HAL_RTC_SetDate+0x100>
 802b220:	68fb      	ldr	r3, [r7, #12]
 802b222:	2201      	movs	r2, #1
 802b224:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 802b226:	68fb      	ldr	r3, [r7, #12]
 802b228:	2202      	movs	r2, #2
 802b22a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 802b22c:	687b      	ldr	r3, [r7, #4]
 802b22e:	2b00      	cmp	r3, #0
 802b230:	d10e      	bne.n	802b250 <HAL_RTC_SetDate+0x4c>
 802b232:	68bb      	ldr	r3, [r7, #8]
 802b234:	785b      	ldrb	r3, [r3, #1]
 802b236:	f003 0310 	and.w	r3, r3, #16
 802b23a:	2b00      	cmp	r3, #0
 802b23c:	d008      	beq.n	802b250 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 802b23e:	68bb      	ldr	r3, [r7, #8]
 802b240:	785b      	ldrb	r3, [r3, #1]
 802b242:	f023 0310 	bic.w	r3, r3, #16
 802b246:	b2db      	uxtb	r3, r3
 802b248:	330a      	adds	r3, #10
 802b24a:	b2da      	uxtb	r2, r3
 802b24c:	68bb      	ldr	r3, [r7, #8]
 802b24e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 802b250:	687b      	ldr	r3, [r7, #4]
 802b252:	2b00      	cmp	r3, #0
 802b254:	d11c      	bne.n	802b290 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802b256:	68bb      	ldr	r3, [r7, #8]
 802b258:	78db      	ldrb	r3, [r3, #3]
 802b25a:	4618      	mov	r0, r3
 802b25c:	f000 f8da 	bl	802b414 <RTC_ByteToBcd2>
 802b260:	4603      	mov	r3, r0
 802b262:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 802b264:	68bb      	ldr	r3, [r7, #8]
 802b266:	785b      	ldrb	r3, [r3, #1]
 802b268:	4618      	mov	r0, r3
 802b26a:	f000 f8d3 	bl	802b414 <RTC_ByteToBcd2>
 802b26e:	4603      	mov	r3, r0
 802b270:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802b272:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 802b274:	68bb      	ldr	r3, [r7, #8]
 802b276:	789b      	ldrb	r3, [r3, #2]
 802b278:	4618      	mov	r0, r3
 802b27a:	f000 f8cb 	bl	802b414 <RTC_ByteToBcd2>
 802b27e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 802b280:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 802b284:	68bb      	ldr	r3, [r7, #8]
 802b286:	781b      	ldrb	r3, [r3, #0]
 802b288:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802b28a:	4313      	orrs	r3, r2
 802b28c:	617b      	str	r3, [r7, #20]
 802b28e:	e00e      	b.n	802b2ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802b290:	68bb      	ldr	r3, [r7, #8]
 802b292:	78db      	ldrb	r3, [r3, #3]
 802b294:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 802b296:	68bb      	ldr	r3, [r7, #8]
 802b298:	785b      	ldrb	r3, [r3, #1]
 802b29a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802b29c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 802b29e:	68ba      	ldr	r2, [r7, #8]
 802b2a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 802b2a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 802b2a4:	68bb      	ldr	r3, [r7, #8]
 802b2a6:	781b      	ldrb	r3, [r3, #0]
 802b2a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802b2aa:	4313      	orrs	r3, r2
 802b2ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802b2ae:	68fb      	ldr	r3, [r7, #12]
 802b2b0:	681b      	ldr	r3, [r3, #0]
 802b2b2:	22ca      	movs	r2, #202	; 0xca
 802b2b4:	625a      	str	r2, [r3, #36]	; 0x24
 802b2b6:	68fb      	ldr	r3, [r7, #12]
 802b2b8:	681b      	ldr	r3, [r3, #0]
 802b2ba:	2253      	movs	r2, #83	; 0x53
 802b2bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802b2be:	68f8      	ldr	r0, [r7, #12]
 802b2c0:	f000 f84c 	bl	802b35c <RTC_EnterInitMode>
 802b2c4:	4603      	mov	r3, r0
 802b2c6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 802b2c8:	7cfb      	ldrb	r3, [r7, #19]
 802b2ca:	2b00      	cmp	r3, #0
 802b2cc:	d10c      	bne.n	802b2e8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 802b2ce:	68fb      	ldr	r3, [r7, #12]
 802b2d0:	681a      	ldr	r2, [r3, #0]
 802b2d2:	697b      	ldr	r3, [r7, #20]
 802b2d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 802b2d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 802b2dc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802b2de:	68f8      	ldr	r0, [r7, #12]
 802b2e0:	f000 f873 	bl	802b3ca <RTC_ExitInitMode>
 802b2e4:	4603      	mov	r3, r0
 802b2e6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 802b2e8:	7cfb      	ldrb	r3, [r7, #19]
 802b2ea:	2b00      	cmp	r3, #0
 802b2ec:	d102      	bne.n	802b2f4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 802b2ee:	68fb      	ldr	r3, [r7, #12]
 802b2f0:	2201      	movs	r2, #1
 802b2f2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802b2f4:	68fb      	ldr	r3, [r7, #12]
 802b2f6:	681b      	ldr	r3, [r3, #0]
 802b2f8:	22ff      	movs	r2, #255	; 0xff
 802b2fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 802b2fc:	68fb      	ldr	r3, [r7, #12]
 802b2fe:	2200      	movs	r2, #0
 802b300:	771a      	strb	r2, [r3, #28]

  return status;
 802b302:	7cfb      	ldrb	r3, [r7, #19]
}
 802b304:	4618      	mov	r0, r3
 802b306:	371c      	adds	r7, #28
 802b308:	46bd      	mov	sp, r7
 802b30a:	bd90      	pop	{r4, r7, pc}

0802b30c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 802b30c:	b580      	push	{r7, lr}
 802b30e:	b084      	sub	sp, #16
 802b310:	af00      	add	r7, sp, #0
 802b312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802b314:	2300      	movs	r3, #0
 802b316:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 802b318:	687b      	ldr	r3, [r7, #4]
 802b31a:	681b      	ldr	r3, [r3, #0]
 802b31c:	68da      	ldr	r2, [r3, #12]
 802b31e:	687b      	ldr	r3, [r7, #4]
 802b320:	681b      	ldr	r3, [r3, #0]
 802b322:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 802b326:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 802b328:	f7fc fcc4 	bl	8027cb4 <HAL_GetTick>
 802b32c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 802b32e:	e009      	b.n	802b344 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802b330:	f7fc fcc0 	bl	8027cb4 <HAL_GetTick>
 802b334:	4602      	mov	r2, r0
 802b336:	68fb      	ldr	r3, [r7, #12]
 802b338:	1ad3      	subs	r3, r2, r3
 802b33a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b33e:	d901      	bls.n	802b344 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 802b340:	2303      	movs	r3, #3
 802b342:	e007      	b.n	802b354 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 802b344:	687b      	ldr	r3, [r7, #4]
 802b346:	681b      	ldr	r3, [r3, #0]
 802b348:	68db      	ldr	r3, [r3, #12]
 802b34a:	f003 0320 	and.w	r3, r3, #32
 802b34e:	2b00      	cmp	r3, #0
 802b350:	d0ee      	beq.n	802b330 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 802b352:	2300      	movs	r3, #0
}
 802b354:	4618      	mov	r0, r3
 802b356:	3710      	adds	r7, #16
 802b358:	46bd      	mov	sp, r7
 802b35a:	bd80      	pop	{r7, pc}

0802b35c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 802b35c:	b580      	push	{r7, lr}
 802b35e:	b084      	sub	sp, #16
 802b360:	af00      	add	r7, sp, #0
 802b362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802b364:	2300      	movs	r3, #0
 802b366:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 802b368:	2300      	movs	r3, #0
 802b36a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 802b36c:	687b      	ldr	r3, [r7, #4]
 802b36e:	681b      	ldr	r3, [r3, #0]
 802b370:	68db      	ldr	r3, [r3, #12]
 802b372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b376:	2b00      	cmp	r3, #0
 802b378:	d122      	bne.n	802b3c0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 802b37a:	687b      	ldr	r3, [r7, #4]
 802b37c:	681b      	ldr	r3, [r3, #0]
 802b37e:	68da      	ldr	r2, [r3, #12]
 802b380:	687b      	ldr	r3, [r7, #4]
 802b382:	681b      	ldr	r3, [r3, #0]
 802b384:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802b388:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 802b38a:	f7fc fc93 	bl	8027cb4 <HAL_GetTick>
 802b38e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 802b390:	e00c      	b.n	802b3ac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802b392:	f7fc fc8f 	bl	8027cb4 <HAL_GetTick>
 802b396:	4602      	mov	r2, r0
 802b398:	68bb      	ldr	r3, [r7, #8]
 802b39a:	1ad3      	subs	r3, r2, r3
 802b39c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b3a0:	d904      	bls.n	802b3ac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 802b3a2:	687b      	ldr	r3, [r7, #4]
 802b3a4:	2204      	movs	r2, #4
 802b3a6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 802b3a8:	2301      	movs	r3, #1
 802b3aa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 802b3ac:	687b      	ldr	r3, [r7, #4]
 802b3ae:	681b      	ldr	r3, [r3, #0]
 802b3b0:	68db      	ldr	r3, [r3, #12]
 802b3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b3b6:	2b00      	cmp	r3, #0
 802b3b8:	d102      	bne.n	802b3c0 <RTC_EnterInitMode+0x64>
 802b3ba:	7bfb      	ldrb	r3, [r7, #15]
 802b3bc:	2b01      	cmp	r3, #1
 802b3be:	d1e8      	bne.n	802b392 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 802b3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 802b3c2:	4618      	mov	r0, r3
 802b3c4:	3710      	adds	r7, #16
 802b3c6:	46bd      	mov	sp, r7
 802b3c8:	bd80      	pop	{r7, pc}

0802b3ca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 802b3ca:	b580      	push	{r7, lr}
 802b3cc:	b084      	sub	sp, #16
 802b3ce:	af00      	add	r7, sp, #0
 802b3d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802b3d2:	2300      	movs	r3, #0
 802b3d4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 802b3d6:	687b      	ldr	r3, [r7, #4]
 802b3d8:	681b      	ldr	r3, [r3, #0]
 802b3da:	68da      	ldr	r2, [r3, #12]
 802b3dc:	687b      	ldr	r3, [r7, #4]
 802b3de:	681b      	ldr	r3, [r3, #0]
 802b3e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802b3e4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 802b3e6:	687b      	ldr	r3, [r7, #4]
 802b3e8:	681b      	ldr	r3, [r3, #0]
 802b3ea:	689b      	ldr	r3, [r3, #8]
 802b3ec:	f003 0320 	and.w	r3, r3, #32
 802b3f0:	2b00      	cmp	r3, #0
 802b3f2:	d10a      	bne.n	802b40a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 802b3f4:	6878      	ldr	r0, [r7, #4]
 802b3f6:	f7ff ff89 	bl	802b30c <HAL_RTC_WaitForSynchro>
 802b3fa:	4603      	mov	r3, r0
 802b3fc:	2b00      	cmp	r3, #0
 802b3fe:	d004      	beq.n	802b40a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 802b400:	687b      	ldr	r3, [r7, #4]
 802b402:	2204      	movs	r2, #4
 802b404:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 802b406:	2301      	movs	r3, #1
 802b408:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802b40a:	7bfb      	ldrb	r3, [r7, #15]
}
 802b40c:	4618      	mov	r0, r3
 802b40e:	3710      	adds	r7, #16
 802b410:	46bd      	mov	sp, r7
 802b412:	bd80      	pop	{r7, pc}

0802b414 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 802b414:	b480      	push	{r7}
 802b416:	b085      	sub	sp, #20
 802b418:	af00      	add	r7, sp, #0
 802b41a:	4603      	mov	r3, r0
 802b41c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 802b41e:	2300      	movs	r3, #0
 802b420:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 802b422:	e005      	b.n	802b430 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 802b424:	7bfb      	ldrb	r3, [r7, #15]
 802b426:	3301      	adds	r3, #1
 802b428:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 802b42a:	79fb      	ldrb	r3, [r7, #7]
 802b42c:	3b0a      	subs	r3, #10
 802b42e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 802b430:	79fb      	ldrb	r3, [r7, #7]
 802b432:	2b09      	cmp	r3, #9
 802b434:	d8f6      	bhi.n	802b424 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 802b436:	7bfb      	ldrb	r3, [r7, #15]
 802b438:	011b      	lsls	r3, r3, #4
 802b43a:	b2da      	uxtb	r2, r3
 802b43c:	79fb      	ldrb	r3, [r7, #7]
 802b43e:	4313      	orrs	r3, r2
 802b440:	b2db      	uxtb	r3, r3
}
 802b442:	4618      	mov	r0, r3
 802b444:	3714      	adds	r7, #20
 802b446:	46bd      	mov	sp, r7
 802b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b44c:	4770      	bx	lr

0802b44e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802b44e:	b580      	push	{r7, lr}
 802b450:	b082      	sub	sp, #8
 802b452:	af00      	add	r7, sp, #0
 802b454:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802b456:	687b      	ldr	r3, [r7, #4]
 802b458:	2b00      	cmp	r3, #0
 802b45a:	d101      	bne.n	802b460 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802b45c:	2301      	movs	r3, #1
 802b45e:	e07b      	b.n	802b558 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 802b460:	687b      	ldr	r3, [r7, #4]
 802b462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b464:	2b00      	cmp	r3, #0
 802b466:	d108      	bne.n	802b47a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 802b468:	687b      	ldr	r3, [r7, #4]
 802b46a:	685b      	ldr	r3, [r3, #4]
 802b46c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802b470:	d009      	beq.n	802b486 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802b472:	687b      	ldr	r3, [r7, #4]
 802b474:	2200      	movs	r2, #0
 802b476:	61da      	str	r2, [r3, #28]
 802b478:	e005      	b.n	802b486 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 802b47a:	687b      	ldr	r3, [r7, #4]
 802b47c:	2200      	movs	r2, #0
 802b47e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802b480:	687b      	ldr	r3, [r7, #4]
 802b482:	2200      	movs	r2, #0
 802b484:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802b486:	687b      	ldr	r3, [r7, #4]
 802b488:	2200      	movs	r2, #0
 802b48a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802b48c:	687b      	ldr	r3, [r7, #4]
 802b48e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b492:	b2db      	uxtb	r3, r3
 802b494:	2b00      	cmp	r3, #0
 802b496:	d106      	bne.n	802b4a6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802b498:	687b      	ldr	r3, [r7, #4]
 802b49a:	2200      	movs	r2, #0
 802b49c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802b4a0:	6878      	ldr	r0, [r7, #4]
 802b4a2:	f7fb fa71 	bl	8026988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802b4a6:	687b      	ldr	r3, [r7, #4]
 802b4a8:	2202      	movs	r2, #2
 802b4aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802b4ae:	687b      	ldr	r3, [r7, #4]
 802b4b0:	681b      	ldr	r3, [r3, #0]
 802b4b2:	681a      	ldr	r2, [r3, #0]
 802b4b4:	687b      	ldr	r3, [r7, #4]
 802b4b6:	681b      	ldr	r3, [r3, #0]
 802b4b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b4bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 802b4be:	687b      	ldr	r3, [r7, #4]
 802b4c0:	685b      	ldr	r3, [r3, #4]
 802b4c2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 802b4c6:	687b      	ldr	r3, [r7, #4]
 802b4c8:	689b      	ldr	r3, [r3, #8]
 802b4ca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 802b4ce:	431a      	orrs	r2, r3
 802b4d0:	687b      	ldr	r3, [r7, #4]
 802b4d2:	68db      	ldr	r3, [r3, #12]
 802b4d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802b4d8:	431a      	orrs	r2, r3
 802b4da:	687b      	ldr	r3, [r7, #4]
 802b4dc:	691b      	ldr	r3, [r3, #16]
 802b4de:	f003 0302 	and.w	r3, r3, #2
 802b4e2:	431a      	orrs	r2, r3
 802b4e4:	687b      	ldr	r3, [r7, #4]
 802b4e6:	695b      	ldr	r3, [r3, #20]
 802b4e8:	f003 0301 	and.w	r3, r3, #1
 802b4ec:	431a      	orrs	r2, r3
 802b4ee:	687b      	ldr	r3, [r7, #4]
 802b4f0:	699b      	ldr	r3, [r3, #24]
 802b4f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b4f6:	431a      	orrs	r2, r3
 802b4f8:	687b      	ldr	r3, [r7, #4]
 802b4fa:	69db      	ldr	r3, [r3, #28]
 802b4fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802b500:	431a      	orrs	r2, r3
 802b502:	687b      	ldr	r3, [r7, #4]
 802b504:	6a1b      	ldr	r3, [r3, #32]
 802b506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b50a:	ea42 0103 	orr.w	r1, r2, r3
 802b50e:	687b      	ldr	r3, [r7, #4]
 802b510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b512:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 802b516:	687b      	ldr	r3, [r7, #4]
 802b518:	681b      	ldr	r3, [r3, #0]
 802b51a:	430a      	orrs	r2, r1
 802b51c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 802b51e:	687b      	ldr	r3, [r7, #4]
 802b520:	699b      	ldr	r3, [r3, #24]
 802b522:	0c1b      	lsrs	r3, r3, #16
 802b524:	f003 0104 	and.w	r1, r3, #4
 802b528:	687b      	ldr	r3, [r7, #4]
 802b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b52c:	f003 0210 	and.w	r2, r3, #16
 802b530:	687b      	ldr	r3, [r7, #4]
 802b532:	681b      	ldr	r3, [r3, #0]
 802b534:	430a      	orrs	r2, r1
 802b536:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802b538:	687b      	ldr	r3, [r7, #4]
 802b53a:	681b      	ldr	r3, [r3, #0]
 802b53c:	69da      	ldr	r2, [r3, #28]
 802b53e:	687b      	ldr	r3, [r7, #4]
 802b540:	681b      	ldr	r3, [r3, #0]
 802b542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802b546:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802b548:	687b      	ldr	r3, [r7, #4]
 802b54a:	2200      	movs	r2, #0
 802b54c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802b54e:	687b      	ldr	r3, [r7, #4]
 802b550:	2201      	movs	r2, #1
 802b552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 802b556:	2300      	movs	r3, #0
}
 802b558:	4618      	mov	r0, r3
 802b55a:	3708      	adds	r7, #8
 802b55c:	46bd      	mov	sp, r7
 802b55e:	bd80      	pop	{r7, pc}

0802b560 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 802b560:	b480      	push	{r7}
 802b562:	b087      	sub	sp, #28
 802b564:	af00      	add	r7, sp, #0
 802b566:	60f8      	str	r0, [r7, #12]
 802b568:	60b9      	str	r1, [r7, #8]
 802b56a:	607a      	str	r2, [r7, #4]
 802b56c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 802b56e:	2300      	movs	r3, #0
 802b570:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 802b572:	68fb      	ldr	r3, [r7, #12]
 802b574:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802b578:	2b01      	cmp	r3, #1
 802b57a:	d101      	bne.n	802b580 <HAL_SPI_TransmitReceive_IT+0x20>
 802b57c:	2302      	movs	r3, #2
 802b57e:	e075      	b.n	802b66c <HAL_SPI_TransmitReceive_IT+0x10c>
 802b580:	68fb      	ldr	r3, [r7, #12]
 802b582:	2201      	movs	r2, #1
 802b584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 802b588:	68fb      	ldr	r3, [r7, #12]
 802b58a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b58e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 802b590:	68fb      	ldr	r3, [r7, #12]
 802b592:	685b      	ldr	r3, [r3, #4]
 802b594:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802b596:	7dbb      	ldrb	r3, [r7, #22]
 802b598:	2b01      	cmp	r3, #1
 802b59a:	d00d      	beq.n	802b5b8 <HAL_SPI_TransmitReceive_IT+0x58>
 802b59c:	693b      	ldr	r3, [r7, #16]
 802b59e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802b5a2:	d106      	bne.n	802b5b2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802b5a4:	68fb      	ldr	r3, [r7, #12]
 802b5a6:	689b      	ldr	r3, [r3, #8]
 802b5a8:	2b00      	cmp	r3, #0
 802b5aa:	d102      	bne.n	802b5b2 <HAL_SPI_TransmitReceive_IT+0x52>
 802b5ac:	7dbb      	ldrb	r3, [r7, #22]
 802b5ae:	2b04      	cmp	r3, #4
 802b5b0:	d002      	beq.n	802b5b8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 802b5b2:	2302      	movs	r3, #2
 802b5b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 802b5b6:	e054      	b.n	802b662 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 802b5b8:	68bb      	ldr	r3, [r7, #8]
 802b5ba:	2b00      	cmp	r3, #0
 802b5bc:	d005      	beq.n	802b5ca <HAL_SPI_TransmitReceive_IT+0x6a>
 802b5be:	687b      	ldr	r3, [r7, #4]
 802b5c0:	2b00      	cmp	r3, #0
 802b5c2:	d002      	beq.n	802b5ca <HAL_SPI_TransmitReceive_IT+0x6a>
 802b5c4:	887b      	ldrh	r3, [r7, #2]
 802b5c6:	2b00      	cmp	r3, #0
 802b5c8:	d102      	bne.n	802b5d0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 802b5ca:	2301      	movs	r3, #1
 802b5cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 802b5ce:	e048      	b.n	802b662 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802b5d0:	68fb      	ldr	r3, [r7, #12]
 802b5d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b5d6:	b2db      	uxtb	r3, r3
 802b5d8:	2b04      	cmp	r3, #4
 802b5da:	d003      	beq.n	802b5e4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802b5dc:	68fb      	ldr	r3, [r7, #12]
 802b5de:	2205      	movs	r2, #5
 802b5e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802b5e4:	68fb      	ldr	r3, [r7, #12]
 802b5e6:	2200      	movs	r2, #0
 802b5e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 802b5ea:	68fb      	ldr	r3, [r7, #12]
 802b5ec:	68ba      	ldr	r2, [r7, #8]
 802b5ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 802b5f0:	68fb      	ldr	r3, [r7, #12]
 802b5f2:	887a      	ldrh	r2, [r7, #2]
 802b5f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802b5f6:	68fb      	ldr	r3, [r7, #12]
 802b5f8:	887a      	ldrh	r2, [r7, #2]
 802b5fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802b5fc:	68fb      	ldr	r3, [r7, #12]
 802b5fe:	687a      	ldr	r2, [r7, #4]
 802b600:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 802b602:	68fb      	ldr	r3, [r7, #12]
 802b604:	887a      	ldrh	r2, [r7, #2]
 802b606:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 802b608:	68fb      	ldr	r3, [r7, #12]
 802b60a:	887a      	ldrh	r2, [r7, #2]
 802b60c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802b60e:	68fb      	ldr	r3, [r7, #12]
 802b610:	68db      	ldr	r3, [r3, #12]
 802b612:	2b00      	cmp	r3, #0
 802b614:	d006      	beq.n	802b624 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 802b616:	68fb      	ldr	r3, [r7, #12]
 802b618:	4a17      	ldr	r2, [pc, #92]	; (802b678 <HAL_SPI_TransmitReceive_IT+0x118>)
 802b61a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 802b61c:	68fb      	ldr	r3, [r7, #12]
 802b61e:	4a17      	ldr	r2, [pc, #92]	; (802b67c <HAL_SPI_TransmitReceive_IT+0x11c>)
 802b620:	645a      	str	r2, [r3, #68]	; 0x44
 802b622:	e005      	b.n	802b630 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 802b624:	68fb      	ldr	r3, [r7, #12]
 802b626:	4a16      	ldr	r2, [pc, #88]	; (802b680 <HAL_SPI_TransmitReceive_IT+0x120>)
 802b628:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 802b62a:	68fb      	ldr	r3, [r7, #12]
 802b62c:	4a15      	ldr	r2, [pc, #84]	; (802b684 <HAL_SPI_TransmitReceive_IT+0x124>)
 802b62e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802b630:	68fb      	ldr	r3, [r7, #12]
 802b632:	681b      	ldr	r3, [r3, #0]
 802b634:	685a      	ldr	r2, [r3, #4]
 802b636:	68fb      	ldr	r3, [r7, #12]
 802b638:	681b      	ldr	r3, [r3, #0]
 802b63a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 802b63e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802b640:	68fb      	ldr	r3, [r7, #12]
 802b642:	681b      	ldr	r3, [r3, #0]
 802b644:	681b      	ldr	r3, [r3, #0]
 802b646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b64a:	2b40      	cmp	r3, #64	; 0x40
 802b64c:	d008      	beq.n	802b660 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802b64e:	68fb      	ldr	r3, [r7, #12]
 802b650:	681b      	ldr	r3, [r3, #0]
 802b652:	681a      	ldr	r2, [r3, #0]
 802b654:	68fb      	ldr	r3, [r7, #12]
 802b656:	681b      	ldr	r3, [r3, #0]
 802b658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802b65c:	601a      	str	r2, [r3, #0]
 802b65e:	e000      	b.n	802b662 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 802b660:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802b662:	68fb      	ldr	r3, [r7, #12]
 802b664:	2200      	movs	r2, #0
 802b666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802b66a:	7dfb      	ldrb	r3, [r7, #23]
}
 802b66c:	4618      	mov	r0, r3
 802b66e:	371c      	adds	r7, #28
 802b670:	46bd      	mov	sp, r7
 802b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b676:	4770      	bx	lr
 802b678:	0802b999 	.word	0x0802b999
 802b67c:	0802b9f9 	.word	0x0802b9f9
 802b680:	0802b8d5 	.word	0x0802b8d5
 802b684:	0802b939 	.word	0x0802b939

0802b688 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 802b688:	b580      	push	{r7, lr}
 802b68a:	b088      	sub	sp, #32
 802b68c:	af00      	add	r7, sp, #0
 802b68e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 802b690:	687b      	ldr	r3, [r7, #4]
 802b692:	681b      	ldr	r3, [r3, #0]
 802b694:	685b      	ldr	r3, [r3, #4]
 802b696:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 802b698:	687b      	ldr	r3, [r7, #4]
 802b69a:	681b      	ldr	r3, [r3, #0]
 802b69c:	689b      	ldr	r3, [r3, #8]
 802b69e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802b6a0:	69bb      	ldr	r3, [r7, #24]
 802b6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b6a6:	2b00      	cmp	r3, #0
 802b6a8:	d10e      	bne.n	802b6c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 802b6aa:	69bb      	ldr	r3, [r7, #24]
 802b6ac:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802b6b0:	2b00      	cmp	r3, #0
 802b6b2:	d009      	beq.n	802b6c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 802b6b4:	69fb      	ldr	r3, [r7, #28]
 802b6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b6ba:	2b00      	cmp	r3, #0
 802b6bc:	d004      	beq.n	802b6c8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 802b6be:	687b      	ldr	r3, [r7, #4]
 802b6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b6c2:	6878      	ldr	r0, [r7, #4]
 802b6c4:	4798      	blx	r3
    return;
 802b6c6:	e0ce      	b.n	802b866 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 802b6c8:	69bb      	ldr	r3, [r7, #24]
 802b6ca:	f003 0302 	and.w	r3, r3, #2
 802b6ce:	2b00      	cmp	r3, #0
 802b6d0:	d009      	beq.n	802b6e6 <HAL_SPI_IRQHandler+0x5e>
 802b6d2:	69fb      	ldr	r3, [r7, #28]
 802b6d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b6d8:	2b00      	cmp	r3, #0
 802b6da:	d004      	beq.n	802b6e6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 802b6dc:	687b      	ldr	r3, [r7, #4]
 802b6de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b6e0:	6878      	ldr	r0, [r7, #4]
 802b6e2:	4798      	blx	r3
    return;
 802b6e4:	e0bf      	b.n	802b866 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802b6e6:	69bb      	ldr	r3, [r7, #24]
 802b6e8:	f003 0320 	and.w	r3, r3, #32
 802b6ec:	2b00      	cmp	r3, #0
 802b6ee:	d10a      	bne.n	802b706 <HAL_SPI_IRQHandler+0x7e>
 802b6f0:	69bb      	ldr	r3, [r7, #24]
 802b6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b6f6:	2b00      	cmp	r3, #0
 802b6f8:	d105      	bne.n	802b706 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 802b6fa:	69bb      	ldr	r3, [r7, #24]
 802b6fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b700:	2b00      	cmp	r3, #0
 802b702:	f000 80b0 	beq.w	802b866 <HAL_SPI_IRQHandler+0x1de>
 802b706:	69fb      	ldr	r3, [r7, #28]
 802b708:	f003 0320 	and.w	r3, r3, #32
 802b70c:	2b00      	cmp	r3, #0
 802b70e:	f000 80aa 	beq.w	802b866 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802b712:	69bb      	ldr	r3, [r7, #24]
 802b714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b718:	2b00      	cmp	r3, #0
 802b71a:	d023      	beq.n	802b764 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802b71c:	687b      	ldr	r3, [r7, #4]
 802b71e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b722:	b2db      	uxtb	r3, r3
 802b724:	2b03      	cmp	r3, #3
 802b726:	d011      	beq.n	802b74c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802b728:	687b      	ldr	r3, [r7, #4]
 802b72a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b72c:	f043 0204 	orr.w	r2, r3, #4
 802b730:	687b      	ldr	r3, [r7, #4]
 802b732:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b734:	2300      	movs	r3, #0
 802b736:	617b      	str	r3, [r7, #20]
 802b738:	687b      	ldr	r3, [r7, #4]
 802b73a:	681b      	ldr	r3, [r3, #0]
 802b73c:	68db      	ldr	r3, [r3, #12]
 802b73e:	617b      	str	r3, [r7, #20]
 802b740:	687b      	ldr	r3, [r7, #4]
 802b742:	681b      	ldr	r3, [r3, #0]
 802b744:	689b      	ldr	r3, [r3, #8]
 802b746:	617b      	str	r3, [r7, #20]
 802b748:	697b      	ldr	r3, [r7, #20]
 802b74a:	e00b      	b.n	802b764 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b74c:	2300      	movs	r3, #0
 802b74e:	613b      	str	r3, [r7, #16]
 802b750:	687b      	ldr	r3, [r7, #4]
 802b752:	681b      	ldr	r3, [r3, #0]
 802b754:	68db      	ldr	r3, [r3, #12]
 802b756:	613b      	str	r3, [r7, #16]
 802b758:	687b      	ldr	r3, [r7, #4]
 802b75a:	681b      	ldr	r3, [r3, #0]
 802b75c:	689b      	ldr	r3, [r3, #8]
 802b75e:	613b      	str	r3, [r7, #16]
 802b760:	693b      	ldr	r3, [r7, #16]
        return;
 802b762:	e080      	b.n	802b866 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 802b764:	69bb      	ldr	r3, [r7, #24]
 802b766:	f003 0320 	and.w	r3, r3, #32
 802b76a:	2b00      	cmp	r3, #0
 802b76c:	d014      	beq.n	802b798 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802b76e:	687b      	ldr	r3, [r7, #4]
 802b770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b772:	f043 0201 	orr.w	r2, r3, #1
 802b776:	687b      	ldr	r3, [r7, #4]
 802b778:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802b77a:	2300      	movs	r3, #0
 802b77c:	60fb      	str	r3, [r7, #12]
 802b77e:	687b      	ldr	r3, [r7, #4]
 802b780:	681b      	ldr	r3, [r3, #0]
 802b782:	689b      	ldr	r3, [r3, #8]
 802b784:	60fb      	str	r3, [r7, #12]
 802b786:	687b      	ldr	r3, [r7, #4]
 802b788:	681b      	ldr	r3, [r3, #0]
 802b78a:	681a      	ldr	r2, [r3, #0]
 802b78c:	687b      	ldr	r3, [r7, #4]
 802b78e:	681b      	ldr	r3, [r3, #0]
 802b790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b794:	601a      	str	r2, [r3, #0]
 802b796:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 802b798:	69bb      	ldr	r3, [r7, #24]
 802b79a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b79e:	2b00      	cmp	r3, #0
 802b7a0:	d00c      	beq.n	802b7bc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802b7a2:	687b      	ldr	r3, [r7, #4]
 802b7a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b7a6:	f043 0208 	orr.w	r2, r3, #8
 802b7aa:	687b      	ldr	r3, [r7, #4]
 802b7ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 802b7ae:	2300      	movs	r3, #0
 802b7b0:	60bb      	str	r3, [r7, #8]
 802b7b2:	687b      	ldr	r3, [r7, #4]
 802b7b4:	681b      	ldr	r3, [r3, #0]
 802b7b6:	689b      	ldr	r3, [r3, #8]
 802b7b8:	60bb      	str	r3, [r7, #8]
 802b7ba:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802b7bc:	687b      	ldr	r3, [r7, #4]
 802b7be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b7c0:	2b00      	cmp	r3, #0
 802b7c2:	d04f      	beq.n	802b864 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 802b7c4:	687b      	ldr	r3, [r7, #4]
 802b7c6:	681b      	ldr	r3, [r3, #0]
 802b7c8:	685a      	ldr	r2, [r3, #4]
 802b7ca:	687b      	ldr	r3, [r7, #4]
 802b7cc:	681b      	ldr	r3, [r3, #0]
 802b7ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802b7d2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 802b7d4:	687b      	ldr	r3, [r7, #4]
 802b7d6:	2201      	movs	r2, #1
 802b7d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 802b7dc:	69fb      	ldr	r3, [r7, #28]
 802b7de:	f003 0302 	and.w	r3, r3, #2
 802b7e2:	2b00      	cmp	r3, #0
 802b7e4:	d104      	bne.n	802b7f0 <HAL_SPI_IRQHandler+0x168>
 802b7e6:	69fb      	ldr	r3, [r7, #28]
 802b7e8:	f003 0301 	and.w	r3, r3, #1
 802b7ec:	2b00      	cmp	r3, #0
 802b7ee:	d034      	beq.n	802b85a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 802b7f0:	687b      	ldr	r3, [r7, #4]
 802b7f2:	681b      	ldr	r3, [r3, #0]
 802b7f4:	685a      	ldr	r2, [r3, #4]
 802b7f6:	687b      	ldr	r3, [r7, #4]
 802b7f8:	681b      	ldr	r3, [r3, #0]
 802b7fa:	f022 0203 	bic.w	r2, r2, #3
 802b7fe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 802b800:	687b      	ldr	r3, [r7, #4]
 802b802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b804:	2b00      	cmp	r3, #0
 802b806:	d011      	beq.n	802b82c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802b808:	687b      	ldr	r3, [r7, #4]
 802b80a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b80c:	4a17      	ldr	r2, [pc, #92]	; (802b86c <HAL_SPI_IRQHandler+0x1e4>)
 802b80e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 802b810:	687b      	ldr	r3, [r7, #4]
 802b812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b814:	4618      	mov	r0, r3
 802b816:	f7fc fc60 	bl	80280da <HAL_DMA_Abort_IT>
 802b81a:	4603      	mov	r3, r0
 802b81c:	2b00      	cmp	r3, #0
 802b81e:	d005      	beq.n	802b82c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802b820:	687b      	ldr	r3, [r7, #4]
 802b822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b824:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802b828:	687b      	ldr	r3, [r7, #4]
 802b82a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 802b82c:	687b      	ldr	r3, [r7, #4]
 802b82e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b830:	2b00      	cmp	r3, #0
 802b832:	d016      	beq.n	802b862 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802b834:	687b      	ldr	r3, [r7, #4]
 802b836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b838:	4a0c      	ldr	r2, [pc, #48]	; (802b86c <HAL_SPI_IRQHandler+0x1e4>)
 802b83a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 802b83c:	687b      	ldr	r3, [r7, #4]
 802b83e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b840:	4618      	mov	r0, r3
 802b842:	f7fc fc4a 	bl	80280da <HAL_DMA_Abort_IT>
 802b846:	4603      	mov	r3, r0
 802b848:	2b00      	cmp	r3, #0
 802b84a:	d00a      	beq.n	802b862 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802b84c:	687b      	ldr	r3, [r7, #4]
 802b84e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b850:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802b854:	687b      	ldr	r3, [r7, #4]
 802b856:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 802b858:	e003      	b.n	802b862 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 802b85a:	6878      	ldr	r0, [r7, #4]
 802b85c:	f000 f81c 	bl	802b898 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 802b860:	e000      	b.n	802b864 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 802b862:	bf00      	nop
    return;
 802b864:	bf00      	nop
  }
}
 802b866:	3720      	adds	r7, #32
 802b868:	46bd      	mov	sp, r7
 802b86a:	bd80      	pop	{r7, pc}
 802b86c:	0802b8ad 	.word	0x0802b8ad

0802b870 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802b870:	b480      	push	{r7}
 802b872:	b083      	sub	sp, #12
 802b874:	af00      	add	r7, sp, #0
 802b876:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 802b878:	bf00      	nop
 802b87a:	370c      	adds	r7, #12
 802b87c:	46bd      	mov	sp, r7
 802b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b882:	4770      	bx	lr

0802b884 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802b884:	b480      	push	{r7}
 802b886:	b083      	sub	sp, #12
 802b888:	af00      	add	r7, sp, #0
 802b88a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 802b88c:	bf00      	nop
 802b88e:	370c      	adds	r7, #12
 802b890:	46bd      	mov	sp, r7
 802b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b896:	4770      	bx	lr

0802b898 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 802b898:	b480      	push	{r7}
 802b89a:	b083      	sub	sp, #12
 802b89c:	af00      	add	r7, sp, #0
 802b89e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 802b8a0:	bf00      	nop
 802b8a2:	370c      	adds	r7, #12
 802b8a4:	46bd      	mov	sp, r7
 802b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8aa:	4770      	bx	lr

0802b8ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802b8ac:	b580      	push	{r7, lr}
 802b8ae:	b084      	sub	sp, #16
 802b8b0:	af00      	add	r7, sp, #0
 802b8b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802b8b4:	687b      	ldr	r3, [r7, #4]
 802b8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b8b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 802b8ba:	68fb      	ldr	r3, [r7, #12]
 802b8bc:	2200      	movs	r2, #0
 802b8be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 802b8c0:	68fb      	ldr	r3, [r7, #12]
 802b8c2:	2200      	movs	r2, #0
 802b8c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802b8c6:	68f8      	ldr	r0, [r7, #12]
 802b8c8:	f7ff ffe6 	bl	802b898 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802b8cc:	bf00      	nop
 802b8ce:	3710      	adds	r7, #16
 802b8d0:	46bd      	mov	sp, r7
 802b8d2:	bd80      	pop	{r7, pc}

0802b8d4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 802b8d4:	b580      	push	{r7, lr}
 802b8d6:	b082      	sub	sp, #8
 802b8d8:	af00      	add	r7, sp, #0
 802b8da:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 802b8dc:	687b      	ldr	r3, [r7, #4]
 802b8de:	681b      	ldr	r3, [r3, #0]
 802b8e0:	f103 020c 	add.w	r2, r3, #12
 802b8e4:	687b      	ldr	r3, [r7, #4]
 802b8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b8e8:	7812      	ldrb	r2, [r2, #0]
 802b8ea:	b2d2      	uxtb	r2, r2
 802b8ec:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 802b8ee:	687b      	ldr	r3, [r7, #4]
 802b8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b8f2:	1c5a      	adds	r2, r3, #1
 802b8f4:	687b      	ldr	r3, [r7, #4]
 802b8f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 802b8f8:	687b      	ldr	r3, [r7, #4]
 802b8fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b8fc:	b29b      	uxth	r3, r3
 802b8fe:	3b01      	subs	r3, #1
 802b900:	b29a      	uxth	r2, r3
 802b902:	687b      	ldr	r3, [r7, #4]
 802b904:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 802b906:	687b      	ldr	r3, [r7, #4]
 802b908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b90a:	b29b      	uxth	r3, r3
 802b90c:	2b00      	cmp	r3, #0
 802b90e:	d10f      	bne.n	802b930 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 802b910:	687b      	ldr	r3, [r7, #4]
 802b912:	681b      	ldr	r3, [r3, #0]
 802b914:	685a      	ldr	r2, [r3, #4]
 802b916:	687b      	ldr	r3, [r7, #4]
 802b918:	681b      	ldr	r3, [r3, #0]
 802b91a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 802b91e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 802b920:	687b      	ldr	r3, [r7, #4]
 802b922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b924:	b29b      	uxth	r3, r3
 802b926:	2b00      	cmp	r3, #0
 802b928:	d102      	bne.n	802b930 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 802b92a:	6878      	ldr	r0, [r7, #4]
 802b92c:	f000 f95e 	bl	802bbec <SPI_CloseRxTx_ISR>
    }
  }
}
 802b930:	bf00      	nop
 802b932:	3708      	adds	r7, #8
 802b934:	46bd      	mov	sp, r7
 802b936:	bd80      	pop	{r7, pc}

0802b938 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 802b938:	b580      	push	{r7, lr}
 802b93a:	b082      	sub	sp, #8
 802b93c:	af00      	add	r7, sp, #0
 802b93e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802b940:	687b      	ldr	r3, [r7, #4]
 802b942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b944:	687b      	ldr	r3, [r7, #4]
 802b946:	681b      	ldr	r3, [r3, #0]
 802b948:	330c      	adds	r3, #12
 802b94a:	7812      	ldrb	r2, [r2, #0]
 802b94c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 802b94e:	687b      	ldr	r3, [r7, #4]
 802b950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b952:	1c5a      	adds	r2, r3, #1
 802b954:	687b      	ldr	r3, [r7, #4]
 802b956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 802b958:	687b      	ldr	r3, [r7, #4]
 802b95a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b95c:	b29b      	uxth	r3, r3
 802b95e:	3b01      	subs	r3, #1
 802b960:	b29a      	uxth	r2, r3
 802b962:	687b      	ldr	r3, [r7, #4]
 802b964:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 802b966:	687b      	ldr	r3, [r7, #4]
 802b968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b96a:	b29b      	uxth	r3, r3
 802b96c:	2b00      	cmp	r3, #0
 802b96e:	d10f      	bne.n	802b990 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 802b970:	687b      	ldr	r3, [r7, #4]
 802b972:	681b      	ldr	r3, [r3, #0]
 802b974:	685a      	ldr	r2, [r3, #4]
 802b976:	687b      	ldr	r3, [r7, #4]
 802b978:	681b      	ldr	r3, [r3, #0]
 802b97a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802b97e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 802b980:	687b      	ldr	r3, [r7, #4]
 802b982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b984:	b29b      	uxth	r3, r3
 802b986:	2b00      	cmp	r3, #0
 802b988:	d102      	bne.n	802b990 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 802b98a:	6878      	ldr	r0, [r7, #4]
 802b98c:	f000 f92e 	bl	802bbec <SPI_CloseRxTx_ISR>
    }
  }
}
 802b990:	bf00      	nop
 802b992:	3708      	adds	r7, #8
 802b994:	46bd      	mov	sp, r7
 802b996:	bd80      	pop	{r7, pc}

0802b998 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 802b998:	b580      	push	{r7, lr}
 802b99a:	b082      	sub	sp, #8
 802b99c:	af00      	add	r7, sp, #0
 802b99e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 802b9a0:	687b      	ldr	r3, [r7, #4]
 802b9a2:	681b      	ldr	r3, [r3, #0]
 802b9a4:	68da      	ldr	r2, [r3, #12]
 802b9a6:	687b      	ldr	r3, [r7, #4]
 802b9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b9aa:	b292      	uxth	r2, r2
 802b9ac:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 802b9ae:	687b      	ldr	r3, [r7, #4]
 802b9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b9b2:	1c9a      	adds	r2, r3, #2
 802b9b4:	687b      	ldr	r3, [r7, #4]
 802b9b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 802b9b8:	687b      	ldr	r3, [r7, #4]
 802b9ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b9bc:	b29b      	uxth	r3, r3
 802b9be:	3b01      	subs	r3, #1
 802b9c0:	b29a      	uxth	r2, r3
 802b9c2:	687b      	ldr	r3, [r7, #4]
 802b9c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 802b9c6:	687b      	ldr	r3, [r7, #4]
 802b9c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b9ca:	b29b      	uxth	r3, r3
 802b9cc:	2b00      	cmp	r3, #0
 802b9ce:	d10f      	bne.n	802b9f0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 802b9d0:	687b      	ldr	r3, [r7, #4]
 802b9d2:	681b      	ldr	r3, [r3, #0]
 802b9d4:	685a      	ldr	r2, [r3, #4]
 802b9d6:	687b      	ldr	r3, [r7, #4]
 802b9d8:	681b      	ldr	r3, [r3, #0]
 802b9da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b9de:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 802b9e0:	687b      	ldr	r3, [r7, #4]
 802b9e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b9e4:	b29b      	uxth	r3, r3
 802b9e6:	2b00      	cmp	r3, #0
 802b9e8:	d102      	bne.n	802b9f0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 802b9ea:	6878      	ldr	r0, [r7, #4]
 802b9ec:	f000 f8fe 	bl	802bbec <SPI_CloseRxTx_ISR>
    }
  }
}
 802b9f0:	bf00      	nop
 802b9f2:	3708      	adds	r7, #8
 802b9f4:	46bd      	mov	sp, r7
 802b9f6:	bd80      	pop	{r7, pc}

0802b9f8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 802b9f8:	b580      	push	{r7, lr}
 802b9fa:	b082      	sub	sp, #8
 802b9fc:	af00      	add	r7, sp, #0
 802b9fe:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802ba00:	687b      	ldr	r3, [r7, #4]
 802ba02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ba04:	881a      	ldrh	r2, [r3, #0]
 802ba06:	687b      	ldr	r3, [r7, #4]
 802ba08:	681b      	ldr	r3, [r3, #0]
 802ba0a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 802ba0c:	687b      	ldr	r3, [r7, #4]
 802ba0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ba10:	1c9a      	adds	r2, r3, #2
 802ba12:	687b      	ldr	r3, [r7, #4]
 802ba14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 802ba16:	687b      	ldr	r3, [r7, #4]
 802ba18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802ba1a:	b29b      	uxth	r3, r3
 802ba1c:	3b01      	subs	r3, #1
 802ba1e:	b29a      	uxth	r2, r3
 802ba20:	687b      	ldr	r3, [r7, #4]
 802ba22:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 802ba24:	687b      	ldr	r3, [r7, #4]
 802ba26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802ba28:	b29b      	uxth	r3, r3
 802ba2a:	2b00      	cmp	r3, #0
 802ba2c:	d10f      	bne.n	802ba4e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 802ba2e:	687b      	ldr	r3, [r7, #4]
 802ba30:	681b      	ldr	r3, [r3, #0]
 802ba32:	685a      	ldr	r2, [r3, #4]
 802ba34:	687b      	ldr	r3, [r7, #4]
 802ba36:	681b      	ldr	r3, [r3, #0]
 802ba38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802ba3c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 802ba3e:	687b      	ldr	r3, [r7, #4]
 802ba40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802ba42:	b29b      	uxth	r3, r3
 802ba44:	2b00      	cmp	r3, #0
 802ba46:	d102      	bne.n	802ba4e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 802ba48:	6878      	ldr	r0, [r7, #4]
 802ba4a:	f000 f8cf 	bl	802bbec <SPI_CloseRxTx_ISR>
    }
  }
}
 802ba4e:	bf00      	nop
 802ba50:	3708      	adds	r7, #8
 802ba52:	46bd      	mov	sp, r7
 802ba54:	bd80      	pop	{r7, pc}
	...

0802ba58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 802ba58:	b580      	push	{r7, lr}
 802ba5a:	b088      	sub	sp, #32
 802ba5c:	af00      	add	r7, sp, #0
 802ba5e:	60f8      	str	r0, [r7, #12]
 802ba60:	60b9      	str	r1, [r7, #8]
 802ba62:	603b      	str	r3, [r7, #0]
 802ba64:	4613      	mov	r3, r2
 802ba66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 802ba68:	f7fc f924 	bl	8027cb4 <HAL_GetTick>
 802ba6c:	4602      	mov	r2, r0
 802ba6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ba70:	1a9b      	subs	r3, r3, r2
 802ba72:	683a      	ldr	r2, [r7, #0]
 802ba74:	4413      	add	r3, r2
 802ba76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 802ba78:	f7fc f91c 	bl	8027cb4 <HAL_GetTick>
 802ba7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 802ba7e:	4b39      	ldr	r3, [pc, #228]	; (802bb64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 802ba80:	681b      	ldr	r3, [r3, #0]
 802ba82:	015b      	lsls	r3, r3, #5
 802ba84:	0d1b      	lsrs	r3, r3, #20
 802ba86:	69fa      	ldr	r2, [r7, #28]
 802ba88:	fb02 f303 	mul.w	r3, r2, r3
 802ba8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802ba8e:	e054      	b.n	802bb3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 802ba90:	683b      	ldr	r3, [r7, #0]
 802ba92:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ba96:	d050      	beq.n	802bb3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 802ba98:	f7fc f90c 	bl	8027cb4 <HAL_GetTick>
 802ba9c:	4602      	mov	r2, r0
 802ba9e:	69bb      	ldr	r3, [r7, #24]
 802baa0:	1ad3      	subs	r3, r2, r3
 802baa2:	69fa      	ldr	r2, [r7, #28]
 802baa4:	429a      	cmp	r2, r3
 802baa6:	d902      	bls.n	802baae <SPI_WaitFlagStateUntilTimeout+0x56>
 802baa8:	69fb      	ldr	r3, [r7, #28]
 802baaa:	2b00      	cmp	r3, #0
 802baac:	d13d      	bne.n	802bb2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802baae:	68fb      	ldr	r3, [r7, #12]
 802bab0:	681b      	ldr	r3, [r3, #0]
 802bab2:	685a      	ldr	r2, [r3, #4]
 802bab4:	68fb      	ldr	r3, [r7, #12]
 802bab6:	681b      	ldr	r3, [r3, #0]
 802bab8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802babc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802babe:	68fb      	ldr	r3, [r7, #12]
 802bac0:	685b      	ldr	r3, [r3, #4]
 802bac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802bac6:	d111      	bne.n	802baec <SPI_WaitFlagStateUntilTimeout+0x94>
 802bac8:	68fb      	ldr	r3, [r7, #12]
 802baca:	689b      	ldr	r3, [r3, #8]
 802bacc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802bad0:	d004      	beq.n	802badc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802bad2:	68fb      	ldr	r3, [r7, #12]
 802bad4:	689b      	ldr	r3, [r3, #8]
 802bad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802bada:	d107      	bne.n	802baec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802badc:	68fb      	ldr	r3, [r7, #12]
 802bade:	681b      	ldr	r3, [r3, #0]
 802bae0:	681a      	ldr	r2, [r3, #0]
 802bae2:	68fb      	ldr	r3, [r7, #12]
 802bae4:	681b      	ldr	r3, [r3, #0]
 802bae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802baea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802baec:	68fb      	ldr	r3, [r7, #12]
 802baee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802baf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802baf4:	d10f      	bne.n	802bb16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 802baf6:	68fb      	ldr	r3, [r7, #12]
 802baf8:	681b      	ldr	r3, [r3, #0]
 802bafa:	681a      	ldr	r2, [r3, #0]
 802bafc:	68fb      	ldr	r3, [r7, #12]
 802bafe:	681b      	ldr	r3, [r3, #0]
 802bb00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802bb04:	601a      	str	r2, [r3, #0]
 802bb06:	68fb      	ldr	r3, [r7, #12]
 802bb08:	681b      	ldr	r3, [r3, #0]
 802bb0a:	681a      	ldr	r2, [r3, #0]
 802bb0c:	68fb      	ldr	r3, [r7, #12]
 802bb0e:	681b      	ldr	r3, [r3, #0]
 802bb10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802bb14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 802bb16:	68fb      	ldr	r3, [r7, #12]
 802bb18:	2201      	movs	r2, #1
 802bb1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802bb1e:	68fb      	ldr	r3, [r7, #12]
 802bb20:	2200      	movs	r2, #0
 802bb22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 802bb26:	2303      	movs	r3, #3
 802bb28:	e017      	b.n	802bb5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 802bb2a:	697b      	ldr	r3, [r7, #20]
 802bb2c:	2b00      	cmp	r3, #0
 802bb2e:	d101      	bne.n	802bb34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 802bb30:	2300      	movs	r3, #0
 802bb32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 802bb34:	697b      	ldr	r3, [r7, #20]
 802bb36:	3b01      	subs	r3, #1
 802bb38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802bb3a:	68fb      	ldr	r3, [r7, #12]
 802bb3c:	681b      	ldr	r3, [r3, #0]
 802bb3e:	689a      	ldr	r2, [r3, #8]
 802bb40:	68bb      	ldr	r3, [r7, #8]
 802bb42:	4013      	ands	r3, r2
 802bb44:	68ba      	ldr	r2, [r7, #8]
 802bb46:	429a      	cmp	r2, r3
 802bb48:	bf0c      	ite	eq
 802bb4a:	2301      	moveq	r3, #1
 802bb4c:	2300      	movne	r3, #0
 802bb4e:	b2db      	uxtb	r3, r3
 802bb50:	461a      	mov	r2, r3
 802bb52:	79fb      	ldrb	r3, [r7, #7]
 802bb54:	429a      	cmp	r2, r3
 802bb56:	d19b      	bne.n	802ba90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 802bb58:	2300      	movs	r3, #0
}
 802bb5a:	4618      	mov	r0, r3
 802bb5c:	3720      	adds	r7, #32
 802bb5e:	46bd      	mov	sp, r7
 802bb60:	bd80      	pop	{r7, pc}
 802bb62:	bf00      	nop
 802bb64:	20000138 	.word	0x20000138

0802bb68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 802bb68:	b580      	push	{r7, lr}
 802bb6a:	b088      	sub	sp, #32
 802bb6c:	af02      	add	r7, sp, #8
 802bb6e:	60f8      	str	r0, [r7, #12]
 802bb70:	60b9      	str	r1, [r7, #8]
 802bb72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 802bb74:	4b1b      	ldr	r3, [pc, #108]	; (802bbe4 <SPI_EndRxTxTransaction+0x7c>)
 802bb76:	681b      	ldr	r3, [r3, #0]
 802bb78:	4a1b      	ldr	r2, [pc, #108]	; (802bbe8 <SPI_EndRxTxTransaction+0x80>)
 802bb7a:	fba2 2303 	umull	r2, r3, r2, r3
 802bb7e:	0d5b      	lsrs	r3, r3, #21
 802bb80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802bb84:	fb02 f303 	mul.w	r3, r2, r3
 802bb88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802bb8a:	68fb      	ldr	r3, [r7, #12]
 802bb8c:	685b      	ldr	r3, [r3, #4]
 802bb8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802bb92:	d112      	bne.n	802bbba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802bb94:	687b      	ldr	r3, [r7, #4]
 802bb96:	9300      	str	r3, [sp, #0]
 802bb98:	68bb      	ldr	r3, [r7, #8]
 802bb9a:	2200      	movs	r2, #0
 802bb9c:	2180      	movs	r1, #128	; 0x80
 802bb9e:	68f8      	ldr	r0, [r7, #12]
 802bba0:	f7ff ff5a 	bl	802ba58 <SPI_WaitFlagStateUntilTimeout>
 802bba4:	4603      	mov	r3, r0
 802bba6:	2b00      	cmp	r3, #0
 802bba8:	d016      	beq.n	802bbd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802bbaa:	68fb      	ldr	r3, [r7, #12]
 802bbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bbae:	f043 0220 	orr.w	r2, r3, #32
 802bbb2:	68fb      	ldr	r3, [r7, #12]
 802bbb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802bbb6:	2303      	movs	r3, #3
 802bbb8:	e00f      	b.n	802bbda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802bbba:	697b      	ldr	r3, [r7, #20]
 802bbbc:	2b00      	cmp	r3, #0
 802bbbe:	d00a      	beq.n	802bbd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802bbc0:	697b      	ldr	r3, [r7, #20]
 802bbc2:	3b01      	subs	r3, #1
 802bbc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802bbc6:	68fb      	ldr	r3, [r7, #12]
 802bbc8:	681b      	ldr	r3, [r3, #0]
 802bbca:	689b      	ldr	r3, [r3, #8]
 802bbcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bbd0:	2b80      	cmp	r3, #128	; 0x80
 802bbd2:	d0f2      	beq.n	802bbba <SPI_EndRxTxTransaction+0x52>
 802bbd4:	e000      	b.n	802bbd8 <SPI_EndRxTxTransaction+0x70>
        break;
 802bbd6:	bf00      	nop
  }

  return HAL_OK;
 802bbd8:	2300      	movs	r3, #0
}
 802bbda:	4618      	mov	r0, r3
 802bbdc:	3718      	adds	r7, #24
 802bbde:	46bd      	mov	sp, r7
 802bbe0:	bd80      	pop	{r7, pc}
 802bbe2:	bf00      	nop
 802bbe4:	20000138 	.word	0x20000138
 802bbe8:	165e9f81 	.word	0x165e9f81

0802bbec <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 802bbec:	b580      	push	{r7, lr}
 802bbee:	b086      	sub	sp, #24
 802bbf0:	af00      	add	r7, sp, #0
 802bbf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 802bbf4:	4b35      	ldr	r3, [pc, #212]	; (802bccc <SPI_CloseRxTx_ISR+0xe0>)
 802bbf6:	681b      	ldr	r3, [r3, #0]
 802bbf8:	4a35      	ldr	r2, [pc, #212]	; (802bcd0 <SPI_CloseRxTx_ISR+0xe4>)
 802bbfa:	fba2 2303 	umull	r2, r3, r2, r3
 802bbfe:	0a5b      	lsrs	r3, r3, #9
 802bc00:	2264      	movs	r2, #100	; 0x64
 802bc02:	fb02 f303 	mul.w	r3, r2, r3
 802bc06:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802bc08:	f7fc f854 	bl	8027cb4 <HAL_GetTick>
 802bc0c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 802bc0e:	687b      	ldr	r3, [r7, #4]
 802bc10:	681b      	ldr	r3, [r3, #0]
 802bc12:	685a      	ldr	r2, [r3, #4]
 802bc14:	687b      	ldr	r3, [r7, #4]
 802bc16:	681b      	ldr	r3, [r3, #0]
 802bc18:	f022 0220 	bic.w	r2, r2, #32
 802bc1c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 802bc1e:	693b      	ldr	r3, [r7, #16]
 802bc20:	2b00      	cmp	r3, #0
 802bc22:	d106      	bne.n	802bc32 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802bc24:	687b      	ldr	r3, [r7, #4]
 802bc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bc28:	f043 0220 	orr.w	r2, r3, #32
 802bc2c:	687b      	ldr	r3, [r7, #4]
 802bc2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 802bc30:	e009      	b.n	802bc46 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 802bc32:	693b      	ldr	r3, [r7, #16]
 802bc34:	3b01      	subs	r3, #1
 802bc36:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 802bc38:	687b      	ldr	r3, [r7, #4]
 802bc3a:	681b      	ldr	r3, [r3, #0]
 802bc3c:	689b      	ldr	r3, [r3, #8]
 802bc3e:	f003 0302 	and.w	r3, r3, #2
 802bc42:	2b00      	cmp	r3, #0
 802bc44:	d0eb      	beq.n	802bc1e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 802bc46:	697a      	ldr	r2, [r7, #20]
 802bc48:	2164      	movs	r1, #100	; 0x64
 802bc4a:	6878      	ldr	r0, [r7, #4]
 802bc4c:	f7ff ff8c 	bl	802bb68 <SPI_EndRxTxTransaction>
 802bc50:	4603      	mov	r3, r0
 802bc52:	2b00      	cmp	r3, #0
 802bc54:	d005      	beq.n	802bc62 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802bc56:	687b      	ldr	r3, [r7, #4]
 802bc58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bc5a:	f043 0220 	orr.w	r2, r3, #32
 802bc5e:	687b      	ldr	r3, [r7, #4]
 802bc60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802bc62:	687b      	ldr	r3, [r7, #4]
 802bc64:	689b      	ldr	r3, [r3, #8]
 802bc66:	2b00      	cmp	r3, #0
 802bc68:	d10a      	bne.n	802bc80 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802bc6a:	2300      	movs	r3, #0
 802bc6c:	60fb      	str	r3, [r7, #12]
 802bc6e:	687b      	ldr	r3, [r7, #4]
 802bc70:	681b      	ldr	r3, [r3, #0]
 802bc72:	68db      	ldr	r3, [r3, #12]
 802bc74:	60fb      	str	r3, [r7, #12]
 802bc76:	687b      	ldr	r3, [r7, #4]
 802bc78:	681b      	ldr	r3, [r3, #0]
 802bc7a:	689b      	ldr	r3, [r3, #8]
 802bc7c:	60fb      	str	r3, [r7, #12]
 802bc7e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 802bc80:	687b      	ldr	r3, [r7, #4]
 802bc82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bc84:	2b00      	cmp	r3, #0
 802bc86:	d115      	bne.n	802bcb4 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 802bc88:	687b      	ldr	r3, [r7, #4]
 802bc8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802bc8e:	b2db      	uxtb	r3, r3
 802bc90:	2b04      	cmp	r3, #4
 802bc92:	d107      	bne.n	802bca4 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 802bc94:	687b      	ldr	r3, [r7, #4]
 802bc96:	2201      	movs	r2, #1
 802bc98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 802bc9c:	6878      	ldr	r0, [r7, #4]
 802bc9e:	f7ff fde7 	bl	802b870 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 802bca2:	e00e      	b.n	802bcc2 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 802bca4:	687b      	ldr	r3, [r7, #4]
 802bca6:	2201      	movs	r2, #1
 802bca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 802bcac:	6878      	ldr	r0, [r7, #4]
 802bcae:	f7ff fde9 	bl	802b884 <HAL_SPI_TxRxCpltCallback>
}
 802bcb2:	e006      	b.n	802bcc2 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 802bcb4:	687b      	ldr	r3, [r7, #4]
 802bcb6:	2201      	movs	r2, #1
 802bcb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 802bcbc:	6878      	ldr	r0, [r7, #4]
 802bcbe:	f7ff fdeb 	bl	802b898 <HAL_SPI_ErrorCallback>
}
 802bcc2:	bf00      	nop
 802bcc4:	3718      	adds	r7, #24
 802bcc6:	46bd      	mov	sp, r7
 802bcc8:	bd80      	pop	{r7, pc}
 802bcca:	bf00      	nop
 802bccc:	20000138 	.word	0x20000138
 802bcd0:	057619f1 	.word	0x057619f1

0802bcd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802bcd4:	b580      	push	{r7, lr}
 802bcd6:	b082      	sub	sp, #8
 802bcd8:	af00      	add	r7, sp, #0
 802bcda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802bcdc:	687b      	ldr	r3, [r7, #4]
 802bcde:	2b00      	cmp	r3, #0
 802bce0:	d101      	bne.n	802bce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802bce2:	2301      	movs	r3, #1
 802bce4:	e03f      	b.n	802bd66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802bce6:	687b      	ldr	r3, [r7, #4]
 802bce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802bcec:	b2db      	uxtb	r3, r3
 802bcee:	2b00      	cmp	r3, #0
 802bcf0:	d106      	bne.n	802bd00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802bcf2:	687b      	ldr	r3, [r7, #4]
 802bcf4:	2200      	movs	r2, #0
 802bcf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802bcfa:	6878      	ldr	r0, [r7, #4]
 802bcfc:	f7fb fefa 	bl	8027af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802bd00:	687b      	ldr	r3, [r7, #4]
 802bd02:	2224      	movs	r2, #36	; 0x24
 802bd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802bd08:	687b      	ldr	r3, [r7, #4]
 802bd0a:	681b      	ldr	r3, [r3, #0]
 802bd0c:	68da      	ldr	r2, [r3, #12]
 802bd0e:	687b      	ldr	r3, [r7, #4]
 802bd10:	681b      	ldr	r3, [r3, #0]
 802bd12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802bd16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802bd18:	6878      	ldr	r0, [r7, #4]
 802bd1a:	f000 fd7b 	bl	802c814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802bd1e:	687b      	ldr	r3, [r7, #4]
 802bd20:	681b      	ldr	r3, [r3, #0]
 802bd22:	691a      	ldr	r2, [r3, #16]
 802bd24:	687b      	ldr	r3, [r7, #4]
 802bd26:	681b      	ldr	r3, [r3, #0]
 802bd28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802bd2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802bd2e:	687b      	ldr	r3, [r7, #4]
 802bd30:	681b      	ldr	r3, [r3, #0]
 802bd32:	695a      	ldr	r2, [r3, #20]
 802bd34:	687b      	ldr	r3, [r7, #4]
 802bd36:	681b      	ldr	r3, [r3, #0]
 802bd38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802bd3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802bd3e:	687b      	ldr	r3, [r7, #4]
 802bd40:	681b      	ldr	r3, [r3, #0]
 802bd42:	68da      	ldr	r2, [r3, #12]
 802bd44:	687b      	ldr	r3, [r7, #4]
 802bd46:	681b      	ldr	r3, [r3, #0]
 802bd48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802bd4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802bd4e:	687b      	ldr	r3, [r7, #4]
 802bd50:	2200      	movs	r2, #0
 802bd52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 802bd54:	687b      	ldr	r3, [r7, #4]
 802bd56:	2220      	movs	r2, #32
 802bd58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802bd5c:	687b      	ldr	r3, [r7, #4]
 802bd5e:	2220      	movs	r2, #32
 802bd60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802bd64:	2300      	movs	r3, #0
}
 802bd66:	4618      	mov	r0, r3
 802bd68:	3708      	adds	r7, #8
 802bd6a:	46bd      	mov	sp, r7
 802bd6c:	bd80      	pop	{r7, pc}

0802bd6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802bd6e:	b580      	push	{r7, lr}
 802bd70:	b08a      	sub	sp, #40	; 0x28
 802bd72:	af02      	add	r7, sp, #8
 802bd74:	60f8      	str	r0, [r7, #12]
 802bd76:	60b9      	str	r1, [r7, #8]
 802bd78:	603b      	str	r3, [r7, #0]
 802bd7a:	4613      	mov	r3, r2
 802bd7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802bd7e:	2300      	movs	r3, #0
 802bd80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802bd82:	68fb      	ldr	r3, [r7, #12]
 802bd84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802bd88:	b2db      	uxtb	r3, r3
 802bd8a:	2b20      	cmp	r3, #32
 802bd8c:	d17c      	bne.n	802be88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 802bd8e:	68bb      	ldr	r3, [r7, #8]
 802bd90:	2b00      	cmp	r3, #0
 802bd92:	d002      	beq.n	802bd9a <HAL_UART_Transmit+0x2c>
 802bd94:	88fb      	ldrh	r3, [r7, #6]
 802bd96:	2b00      	cmp	r3, #0
 802bd98:	d101      	bne.n	802bd9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802bd9a:	2301      	movs	r3, #1
 802bd9c:	e075      	b.n	802be8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802bd9e:	68fb      	ldr	r3, [r7, #12]
 802bda0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802bda4:	2b01      	cmp	r3, #1
 802bda6:	d101      	bne.n	802bdac <HAL_UART_Transmit+0x3e>
 802bda8:	2302      	movs	r3, #2
 802bdaa:	e06e      	b.n	802be8a <HAL_UART_Transmit+0x11c>
 802bdac:	68fb      	ldr	r3, [r7, #12]
 802bdae:	2201      	movs	r2, #1
 802bdb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802bdb4:	68fb      	ldr	r3, [r7, #12]
 802bdb6:	2200      	movs	r2, #0
 802bdb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802bdba:	68fb      	ldr	r3, [r7, #12]
 802bdbc:	2221      	movs	r2, #33	; 0x21
 802bdbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802bdc2:	f7fb ff77 	bl	8027cb4 <HAL_GetTick>
 802bdc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802bdc8:	68fb      	ldr	r3, [r7, #12]
 802bdca:	88fa      	ldrh	r2, [r7, #6]
 802bdcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802bdce:	68fb      	ldr	r3, [r7, #12]
 802bdd0:	88fa      	ldrh	r2, [r7, #6]
 802bdd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802bdd4:	68fb      	ldr	r3, [r7, #12]
 802bdd6:	689b      	ldr	r3, [r3, #8]
 802bdd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802bddc:	d108      	bne.n	802bdf0 <HAL_UART_Transmit+0x82>
 802bdde:	68fb      	ldr	r3, [r7, #12]
 802bde0:	691b      	ldr	r3, [r3, #16]
 802bde2:	2b00      	cmp	r3, #0
 802bde4:	d104      	bne.n	802bdf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802bde6:	2300      	movs	r3, #0
 802bde8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802bdea:	68bb      	ldr	r3, [r7, #8]
 802bdec:	61bb      	str	r3, [r7, #24]
 802bdee:	e003      	b.n	802bdf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 802bdf0:	68bb      	ldr	r3, [r7, #8]
 802bdf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802bdf4:	2300      	movs	r3, #0
 802bdf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802bdf8:	68fb      	ldr	r3, [r7, #12]
 802bdfa:	2200      	movs	r2, #0
 802bdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 802be00:	e02a      	b.n	802be58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802be02:	683b      	ldr	r3, [r7, #0]
 802be04:	9300      	str	r3, [sp, #0]
 802be06:	697b      	ldr	r3, [r7, #20]
 802be08:	2200      	movs	r2, #0
 802be0a:	2180      	movs	r1, #128	; 0x80
 802be0c:	68f8      	ldr	r0, [r7, #12]
 802be0e:	f000 faf9 	bl	802c404 <UART_WaitOnFlagUntilTimeout>
 802be12:	4603      	mov	r3, r0
 802be14:	2b00      	cmp	r3, #0
 802be16:	d001      	beq.n	802be1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 802be18:	2303      	movs	r3, #3
 802be1a:	e036      	b.n	802be8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 802be1c:	69fb      	ldr	r3, [r7, #28]
 802be1e:	2b00      	cmp	r3, #0
 802be20:	d10b      	bne.n	802be3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802be22:	69bb      	ldr	r3, [r7, #24]
 802be24:	881b      	ldrh	r3, [r3, #0]
 802be26:	461a      	mov	r2, r3
 802be28:	68fb      	ldr	r3, [r7, #12]
 802be2a:	681b      	ldr	r3, [r3, #0]
 802be2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802be30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802be32:	69bb      	ldr	r3, [r7, #24]
 802be34:	3302      	adds	r3, #2
 802be36:	61bb      	str	r3, [r7, #24]
 802be38:	e007      	b.n	802be4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802be3a:	69fb      	ldr	r3, [r7, #28]
 802be3c:	781a      	ldrb	r2, [r3, #0]
 802be3e:	68fb      	ldr	r3, [r7, #12]
 802be40:	681b      	ldr	r3, [r3, #0]
 802be42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 802be44:	69fb      	ldr	r3, [r7, #28]
 802be46:	3301      	adds	r3, #1
 802be48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802be4a:	68fb      	ldr	r3, [r7, #12]
 802be4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802be4e:	b29b      	uxth	r3, r3
 802be50:	3b01      	subs	r3, #1
 802be52:	b29a      	uxth	r2, r3
 802be54:	68fb      	ldr	r3, [r7, #12]
 802be56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 802be58:	68fb      	ldr	r3, [r7, #12]
 802be5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802be5c:	b29b      	uxth	r3, r3
 802be5e:	2b00      	cmp	r3, #0
 802be60:	d1cf      	bne.n	802be02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802be62:	683b      	ldr	r3, [r7, #0]
 802be64:	9300      	str	r3, [sp, #0]
 802be66:	697b      	ldr	r3, [r7, #20]
 802be68:	2200      	movs	r2, #0
 802be6a:	2140      	movs	r1, #64	; 0x40
 802be6c:	68f8      	ldr	r0, [r7, #12]
 802be6e:	f000 fac9 	bl	802c404 <UART_WaitOnFlagUntilTimeout>
 802be72:	4603      	mov	r3, r0
 802be74:	2b00      	cmp	r3, #0
 802be76:	d001      	beq.n	802be7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 802be78:	2303      	movs	r3, #3
 802be7a:	e006      	b.n	802be8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802be7c:	68fb      	ldr	r3, [r7, #12]
 802be7e:	2220      	movs	r2, #32
 802be80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 802be84:	2300      	movs	r3, #0
 802be86:	e000      	b.n	802be8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 802be88:	2302      	movs	r3, #2
  }
}
 802be8a:	4618      	mov	r0, r3
 802be8c:	3720      	adds	r7, #32
 802be8e:	46bd      	mov	sp, r7
 802be90:	bd80      	pop	{r7, pc}
	...

0802be94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802be94:	b580      	push	{r7, lr}
 802be96:	b0ba      	sub	sp, #232	; 0xe8
 802be98:	af00      	add	r7, sp, #0
 802be9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 802be9c:	687b      	ldr	r3, [r7, #4]
 802be9e:	681b      	ldr	r3, [r3, #0]
 802bea0:	681b      	ldr	r3, [r3, #0]
 802bea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802bea6:	687b      	ldr	r3, [r7, #4]
 802bea8:	681b      	ldr	r3, [r3, #0]
 802beaa:	68db      	ldr	r3, [r3, #12]
 802beac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802beb0:	687b      	ldr	r3, [r7, #4]
 802beb2:	681b      	ldr	r3, [r3, #0]
 802beb4:	695b      	ldr	r3, [r3, #20]
 802beb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 802beba:	2300      	movs	r3, #0
 802bebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 802bec0:	2300      	movs	r3, #0
 802bec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802bec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802beca:	f003 030f 	and.w	r3, r3, #15
 802bece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 802bed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802bed6:	2b00      	cmp	r3, #0
 802bed8:	d10f      	bne.n	802befa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802beda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bede:	f003 0320 	and.w	r3, r3, #32
 802bee2:	2b00      	cmp	r3, #0
 802bee4:	d009      	beq.n	802befa <HAL_UART_IRQHandler+0x66>
 802bee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802beea:	f003 0320 	and.w	r3, r3, #32
 802beee:	2b00      	cmp	r3, #0
 802bef0:	d003      	beq.n	802befa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802bef2:	6878      	ldr	r0, [r7, #4]
 802bef4:	f000 fbd3 	bl	802c69e <UART_Receive_IT>
      return;
 802bef8:	e256      	b.n	802c3a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 802befa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802befe:	2b00      	cmp	r3, #0
 802bf00:	f000 80de 	beq.w	802c0c0 <HAL_UART_IRQHandler+0x22c>
 802bf04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802bf08:	f003 0301 	and.w	r3, r3, #1
 802bf0c:	2b00      	cmp	r3, #0
 802bf0e:	d106      	bne.n	802bf1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802bf10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bf14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 802bf18:	2b00      	cmp	r3, #0
 802bf1a:	f000 80d1 	beq.w	802c0c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802bf1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bf22:	f003 0301 	and.w	r3, r3, #1
 802bf26:	2b00      	cmp	r3, #0
 802bf28:	d00b      	beq.n	802bf42 <HAL_UART_IRQHandler+0xae>
 802bf2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bf2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802bf32:	2b00      	cmp	r3, #0
 802bf34:	d005      	beq.n	802bf42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802bf36:	687b      	ldr	r3, [r7, #4]
 802bf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf3a:	f043 0201 	orr.w	r2, r3, #1
 802bf3e:	687b      	ldr	r3, [r7, #4]
 802bf40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802bf42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bf46:	f003 0304 	and.w	r3, r3, #4
 802bf4a:	2b00      	cmp	r3, #0
 802bf4c:	d00b      	beq.n	802bf66 <HAL_UART_IRQHandler+0xd2>
 802bf4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802bf52:	f003 0301 	and.w	r3, r3, #1
 802bf56:	2b00      	cmp	r3, #0
 802bf58:	d005      	beq.n	802bf66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802bf5a:	687b      	ldr	r3, [r7, #4]
 802bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf5e:	f043 0202 	orr.w	r2, r3, #2
 802bf62:	687b      	ldr	r3, [r7, #4]
 802bf64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802bf66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bf6a:	f003 0302 	and.w	r3, r3, #2
 802bf6e:	2b00      	cmp	r3, #0
 802bf70:	d00b      	beq.n	802bf8a <HAL_UART_IRQHandler+0xf6>
 802bf72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802bf76:	f003 0301 	and.w	r3, r3, #1
 802bf7a:	2b00      	cmp	r3, #0
 802bf7c:	d005      	beq.n	802bf8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802bf7e:	687b      	ldr	r3, [r7, #4]
 802bf80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf82:	f043 0204 	orr.w	r2, r3, #4
 802bf86:	687b      	ldr	r3, [r7, #4]
 802bf88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 802bf8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bf8e:	f003 0308 	and.w	r3, r3, #8
 802bf92:	2b00      	cmp	r3, #0
 802bf94:	d011      	beq.n	802bfba <HAL_UART_IRQHandler+0x126>
 802bf96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bf9a:	f003 0320 	and.w	r3, r3, #32
 802bf9e:	2b00      	cmp	r3, #0
 802bfa0:	d105      	bne.n	802bfae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802bfa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802bfa6:	f003 0301 	and.w	r3, r3, #1
 802bfaa:	2b00      	cmp	r3, #0
 802bfac:	d005      	beq.n	802bfba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802bfae:	687b      	ldr	r3, [r7, #4]
 802bfb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bfb2:	f043 0208 	orr.w	r2, r3, #8
 802bfb6:	687b      	ldr	r3, [r7, #4]
 802bfb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802bfba:	687b      	ldr	r3, [r7, #4]
 802bfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bfbe:	2b00      	cmp	r3, #0
 802bfc0:	f000 81ed 	beq.w	802c39e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802bfc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bfc8:	f003 0320 	and.w	r3, r3, #32
 802bfcc:	2b00      	cmp	r3, #0
 802bfce:	d008      	beq.n	802bfe2 <HAL_UART_IRQHandler+0x14e>
 802bfd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bfd4:	f003 0320 	and.w	r3, r3, #32
 802bfd8:	2b00      	cmp	r3, #0
 802bfda:	d002      	beq.n	802bfe2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 802bfdc:	6878      	ldr	r0, [r7, #4]
 802bfde:	f000 fb5e 	bl	802c69e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802bfe2:	687b      	ldr	r3, [r7, #4]
 802bfe4:	681b      	ldr	r3, [r3, #0]
 802bfe6:	695b      	ldr	r3, [r3, #20]
 802bfe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802bfec:	2b40      	cmp	r3, #64	; 0x40
 802bfee:	bf0c      	ite	eq
 802bff0:	2301      	moveq	r3, #1
 802bff2:	2300      	movne	r3, #0
 802bff4:	b2db      	uxtb	r3, r3
 802bff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 802bffa:	687b      	ldr	r3, [r7, #4]
 802bffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bffe:	f003 0308 	and.w	r3, r3, #8
 802c002:	2b00      	cmp	r3, #0
 802c004:	d103      	bne.n	802c00e <HAL_UART_IRQHandler+0x17a>
 802c006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802c00a:	2b00      	cmp	r3, #0
 802c00c:	d04f      	beq.n	802c0ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802c00e:	6878      	ldr	r0, [r7, #4]
 802c010:	f000 fa66 	bl	802c4e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c014:	687b      	ldr	r3, [r7, #4]
 802c016:	681b      	ldr	r3, [r3, #0]
 802c018:	695b      	ldr	r3, [r3, #20]
 802c01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c01e:	2b40      	cmp	r3, #64	; 0x40
 802c020:	d141      	bne.n	802c0a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802c022:	687b      	ldr	r3, [r7, #4]
 802c024:	681b      	ldr	r3, [r3, #0]
 802c026:	3314      	adds	r3, #20
 802c028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c02c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802c030:	e853 3f00 	ldrex	r3, [r3]
 802c034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 802c038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802c03c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802c040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802c044:	687b      	ldr	r3, [r7, #4]
 802c046:	681b      	ldr	r3, [r3, #0]
 802c048:	3314      	adds	r3, #20
 802c04a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 802c04e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802c052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c056:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802c05a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 802c05e:	e841 2300 	strex	r3, r2, [r1]
 802c062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 802c066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c06a:	2b00      	cmp	r3, #0
 802c06c:	d1d9      	bne.n	802c022 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802c06e:	687b      	ldr	r3, [r7, #4]
 802c070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c072:	2b00      	cmp	r3, #0
 802c074:	d013      	beq.n	802c09e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802c076:	687b      	ldr	r3, [r7, #4]
 802c078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c07a:	4a7d      	ldr	r2, [pc, #500]	; (802c270 <HAL_UART_IRQHandler+0x3dc>)
 802c07c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802c07e:	687b      	ldr	r3, [r7, #4]
 802c080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c082:	4618      	mov	r0, r3
 802c084:	f7fc f829 	bl	80280da <HAL_DMA_Abort_IT>
 802c088:	4603      	mov	r3, r0
 802c08a:	2b00      	cmp	r3, #0
 802c08c:	d016      	beq.n	802c0bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802c08e:	687b      	ldr	r3, [r7, #4]
 802c090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c094:	687a      	ldr	r2, [r7, #4]
 802c096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802c098:	4610      	mov	r0, r2
 802c09a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c09c:	e00e      	b.n	802c0bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802c09e:	6878      	ldr	r0, [r7, #4]
 802c0a0:	f000 f99a 	bl	802c3d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c0a4:	e00a      	b.n	802c0bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802c0a6:	6878      	ldr	r0, [r7, #4]
 802c0a8:	f000 f996 	bl	802c3d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c0ac:	e006      	b.n	802c0bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802c0ae:	6878      	ldr	r0, [r7, #4]
 802c0b0:	f000 f992 	bl	802c3d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802c0b4:	687b      	ldr	r3, [r7, #4]
 802c0b6:	2200      	movs	r2, #0
 802c0b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 802c0ba:	e170      	b.n	802c39e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c0bc:	bf00      	nop
    return;
 802c0be:	e16e      	b.n	802c39e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c0c0:	687b      	ldr	r3, [r7, #4]
 802c0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c0c4:	2b01      	cmp	r3, #1
 802c0c6:	f040 814a 	bne.w	802c35e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 802c0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c0ce:	f003 0310 	and.w	r3, r3, #16
 802c0d2:	2b00      	cmp	r3, #0
 802c0d4:	f000 8143 	beq.w	802c35e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 802c0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c0dc:	f003 0310 	and.w	r3, r3, #16
 802c0e0:	2b00      	cmp	r3, #0
 802c0e2:	f000 813c 	beq.w	802c35e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802c0e6:	2300      	movs	r3, #0
 802c0e8:	60bb      	str	r3, [r7, #8]
 802c0ea:	687b      	ldr	r3, [r7, #4]
 802c0ec:	681b      	ldr	r3, [r3, #0]
 802c0ee:	681b      	ldr	r3, [r3, #0]
 802c0f0:	60bb      	str	r3, [r7, #8]
 802c0f2:	687b      	ldr	r3, [r7, #4]
 802c0f4:	681b      	ldr	r3, [r3, #0]
 802c0f6:	685b      	ldr	r3, [r3, #4]
 802c0f8:	60bb      	str	r3, [r7, #8]
 802c0fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c0fc:	687b      	ldr	r3, [r7, #4]
 802c0fe:	681b      	ldr	r3, [r3, #0]
 802c100:	695b      	ldr	r3, [r3, #20]
 802c102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c106:	2b40      	cmp	r3, #64	; 0x40
 802c108:	f040 80b4 	bne.w	802c274 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 802c10c:	687b      	ldr	r3, [r7, #4]
 802c10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c110:	681b      	ldr	r3, [r3, #0]
 802c112:	685b      	ldr	r3, [r3, #4]
 802c114:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 802c118:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 802c11c:	2b00      	cmp	r3, #0
 802c11e:	f000 8140 	beq.w	802c3a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802c122:	687b      	ldr	r3, [r7, #4]
 802c124:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802c126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802c12a:	429a      	cmp	r2, r3
 802c12c:	f080 8139 	bcs.w	802c3a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802c130:	687b      	ldr	r3, [r7, #4]
 802c132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802c136:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 802c138:	687b      	ldr	r3, [r7, #4]
 802c13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c13c:	69db      	ldr	r3, [r3, #28]
 802c13e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c142:	f000 8088 	beq.w	802c256 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802c146:	687b      	ldr	r3, [r7, #4]
 802c148:	681b      	ldr	r3, [r3, #0]
 802c14a:	330c      	adds	r3, #12
 802c14c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802c154:	e853 3f00 	ldrex	r3, [r3]
 802c158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 802c15c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802c160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802c164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802c168:	687b      	ldr	r3, [r7, #4]
 802c16a:	681b      	ldr	r3, [r3, #0]
 802c16c:	330c      	adds	r3, #12
 802c16e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802c172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802c176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c17a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802c17e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802c182:	e841 2300 	strex	r3, r2, [r1]
 802c186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 802c18a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802c18e:	2b00      	cmp	r3, #0
 802c190:	d1d9      	bne.n	802c146 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c192:	687b      	ldr	r3, [r7, #4]
 802c194:	681b      	ldr	r3, [r3, #0]
 802c196:	3314      	adds	r3, #20
 802c198:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c19a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c19c:	e853 3f00 	ldrex	r3, [r3]
 802c1a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802c1a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802c1a4:	f023 0301 	bic.w	r3, r3, #1
 802c1a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802c1ac:	687b      	ldr	r3, [r7, #4]
 802c1ae:	681b      	ldr	r3, [r3, #0]
 802c1b0:	3314      	adds	r3, #20
 802c1b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802c1b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802c1ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c1bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 802c1be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802c1c2:	e841 2300 	strex	r3, r2, [r1]
 802c1c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 802c1c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802c1ca:	2b00      	cmp	r3, #0
 802c1cc:	d1e1      	bne.n	802c192 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802c1ce:	687b      	ldr	r3, [r7, #4]
 802c1d0:	681b      	ldr	r3, [r3, #0]
 802c1d2:	3314      	adds	r3, #20
 802c1d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c1d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c1d8:	e853 3f00 	ldrex	r3, [r3]
 802c1dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 802c1de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802c1e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802c1e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802c1e8:	687b      	ldr	r3, [r7, #4]
 802c1ea:	681b      	ldr	r3, [r3, #0]
 802c1ec:	3314      	adds	r3, #20
 802c1ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802c1f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 802c1f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c1f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802c1f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802c1fa:	e841 2300 	strex	r3, r2, [r1]
 802c1fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 802c200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802c202:	2b00      	cmp	r3, #0
 802c204:	d1e3      	bne.n	802c1ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802c206:	687b      	ldr	r3, [r7, #4]
 802c208:	2220      	movs	r2, #32
 802c20a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c20e:	687b      	ldr	r3, [r7, #4]
 802c210:	2200      	movs	r2, #0
 802c212:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c214:	687b      	ldr	r3, [r7, #4]
 802c216:	681b      	ldr	r3, [r3, #0]
 802c218:	330c      	adds	r3, #12
 802c21a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c21c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c21e:	e853 3f00 	ldrex	r3, [r3]
 802c222:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802c224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c226:	f023 0310 	bic.w	r3, r3, #16
 802c22a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802c22e:	687b      	ldr	r3, [r7, #4]
 802c230:	681b      	ldr	r3, [r3, #0]
 802c232:	330c      	adds	r3, #12
 802c234:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802c238:	65ba      	str	r2, [r7, #88]	; 0x58
 802c23a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c23c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802c23e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802c240:	e841 2300 	strex	r3, r2, [r1]
 802c244:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802c246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c248:	2b00      	cmp	r3, #0
 802c24a:	d1e3      	bne.n	802c214 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 802c24c:	687b      	ldr	r3, [r7, #4]
 802c24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c250:	4618      	mov	r0, r3
 802c252:	f7fb fed2 	bl	8027ffa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802c256:	687b      	ldr	r3, [r7, #4]
 802c258:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802c25a:	687b      	ldr	r3, [r7, #4]
 802c25c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c25e:	b29b      	uxth	r3, r3
 802c260:	1ad3      	subs	r3, r2, r3
 802c262:	b29b      	uxth	r3, r3
 802c264:	4619      	mov	r1, r3
 802c266:	6878      	ldr	r0, [r7, #4]
 802c268:	f000 f8c0 	bl	802c3ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802c26c:	e099      	b.n	802c3a2 <HAL_UART_IRQHandler+0x50e>
 802c26e:	bf00      	nop
 802c270:	0802c5a7 	.word	0x0802c5a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802c274:	687b      	ldr	r3, [r7, #4]
 802c276:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802c278:	687b      	ldr	r3, [r7, #4]
 802c27a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c27c:	b29b      	uxth	r3, r3
 802c27e:	1ad3      	subs	r3, r2, r3
 802c280:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 802c284:	687b      	ldr	r3, [r7, #4]
 802c286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c288:	b29b      	uxth	r3, r3
 802c28a:	2b00      	cmp	r3, #0
 802c28c:	f000 808b 	beq.w	802c3a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 802c290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802c294:	2b00      	cmp	r3, #0
 802c296:	f000 8086 	beq.w	802c3a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802c29a:	687b      	ldr	r3, [r7, #4]
 802c29c:	681b      	ldr	r3, [r3, #0]
 802c29e:	330c      	adds	r3, #12
 802c2a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c2a4:	e853 3f00 	ldrex	r3, [r3]
 802c2a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802c2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c2ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802c2b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802c2b4:	687b      	ldr	r3, [r7, #4]
 802c2b6:	681b      	ldr	r3, [r3, #0]
 802c2b8:	330c      	adds	r3, #12
 802c2ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 802c2be:	647a      	str	r2, [r7, #68]	; 0x44
 802c2c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c2c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802c2c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802c2c6:	e841 2300 	strex	r3, r2, [r1]
 802c2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802c2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c2ce:	2b00      	cmp	r3, #0
 802c2d0:	d1e3      	bne.n	802c29a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c2d2:	687b      	ldr	r3, [r7, #4]
 802c2d4:	681b      	ldr	r3, [r3, #0]
 802c2d6:	3314      	adds	r3, #20
 802c2d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c2dc:	e853 3f00 	ldrex	r3, [r3]
 802c2e0:	623b      	str	r3, [r7, #32]
   return(result);
 802c2e2:	6a3b      	ldr	r3, [r7, #32]
 802c2e4:	f023 0301 	bic.w	r3, r3, #1
 802c2e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802c2ec:	687b      	ldr	r3, [r7, #4]
 802c2ee:	681b      	ldr	r3, [r3, #0]
 802c2f0:	3314      	adds	r3, #20
 802c2f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802c2f6:	633a      	str	r2, [r7, #48]	; 0x30
 802c2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c2fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802c2fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802c2fe:	e841 2300 	strex	r3, r2, [r1]
 802c302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802c304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c306:	2b00      	cmp	r3, #0
 802c308:	d1e3      	bne.n	802c2d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802c30a:	687b      	ldr	r3, [r7, #4]
 802c30c:	2220      	movs	r2, #32
 802c30e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c312:	687b      	ldr	r3, [r7, #4]
 802c314:	2200      	movs	r2, #0
 802c316:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c318:	687b      	ldr	r3, [r7, #4]
 802c31a:	681b      	ldr	r3, [r3, #0]
 802c31c:	330c      	adds	r3, #12
 802c31e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c320:	693b      	ldr	r3, [r7, #16]
 802c322:	e853 3f00 	ldrex	r3, [r3]
 802c326:	60fb      	str	r3, [r7, #12]
   return(result);
 802c328:	68fb      	ldr	r3, [r7, #12]
 802c32a:	f023 0310 	bic.w	r3, r3, #16
 802c32e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802c332:	687b      	ldr	r3, [r7, #4]
 802c334:	681b      	ldr	r3, [r3, #0]
 802c336:	330c      	adds	r3, #12
 802c338:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 802c33c:	61fa      	str	r2, [r7, #28]
 802c33e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c340:	69b9      	ldr	r1, [r7, #24]
 802c342:	69fa      	ldr	r2, [r7, #28]
 802c344:	e841 2300 	strex	r3, r2, [r1]
 802c348:	617b      	str	r3, [r7, #20]
   return(result);
 802c34a:	697b      	ldr	r3, [r7, #20]
 802c34c:	2b00      	cmp	r3, #0
 802c34e:	d1e3      	bne.n	802c318 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802c350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802c354:	4619      	mov	r1, r3
 802c356:	6878      	ldr	r0, [r7, #4]
 802c358:	f000 f848 	bl	802c3ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802c35c:	e023      	b.n	802c3a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802c35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802c366:	2b00      	cmp	r3, #0
 802c368:	d009      	beq.n	802c37e <HAL_UART_IRQHandler+0x4ea>
 802c36a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802c372:	2b00      	cmp	r3, #0
 802c374:	d003      	beq.n	802c37e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802c376:	6878      	ldr	r0, [r7, #4]
 802c378:	f000 f929 	bl	802c5ce <UART_Transmit_IT>
    return;
 802c37c:	e014      	b.n	802c3a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802c37e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c386:	2b00      	cmp	r3, #0
 802c388:	d00e      	beq.n	802c3a8 <HAL_UART_IRQHandler+0x514>
 802c38a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c392:	2b00      	cmp	r3, #0
 802c394:	d008      	beq.n	802c3a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 802c396:	6878      	ldr	r0, [r7, #4]
 802c398:	f000 f969 	bl	802c66e <UART_EndTransmit_IT>
    return;
 802c39c:	e004      	b.n	802c3a8 <HAL_UART_IRQHandler+0x514>
    return;
 802c39e:	bf00      	nop
 802c3a0:	e002      	b.n	802c3a8 <HAL_UART_IRQHandler+0x514>
      return;
 802c3a2:	bf00      	nop
 802c3a4:	e000      	b.n	802c3a8 <HAL_UART_IRQHandler+0x514>
      return;
 802c3a6:	bf00      	nop
  }
}
 802c3a8:	37e8      	adds	r7, #232	; 0xe8
 802c3aa:	46bd      	mov	sp, r7
 802c3ac:	bd80      	pop	{r7, pc}
 802c3ae:	bf00      	nop

0802c3b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 802c3b0:	b480      	push	{r7}
 802c3b2:	b083      	sub	sp, #12
 802c3b4:	af00      	add	r7, sp, #0
 802c3b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 802c3b8:	bf00      	nop
 802c3ba:	370c      	adds	r7, #12
 802c3bc:	46bd      	mov	sp, r7
 802c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c3c2:	4770      	bx	lr

0802c3c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 802c3c4:	b480      	push	{r7}
 802c3c6:	b083      	sub	sp, #12
 802c3c8:	af00      	add	r7, sp, #0
 802c3ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 802c3cc:	bf00      	nop
 802c3ce:	370c      	adds	r7, #12
 802c3d0:	46bd      	mov	sp, r7
 802c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c3d6:	4770      	bx	lr

0802c3d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802c3d8:	b480      	push	{r7}
 802c3da:	b083      	sub	sp, #12
 802c3dc:	af00      	add	r7, sp, #0
 802c3de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 802c3e0:	bf00      	nop
 802c3e2:	370c      	adds	r7, #12
 802c3e4:	46bd      	mov	sp, r7
 802c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c3ea:	4770      	bx	lr

0802c3ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 802c3ec:	b480      	push	{r7}
 802c3ee:	b083      	sub	sp, #12
 802c3f0:	af00      	add	r7, sp, #0
 802c3f2:	6078      	str	r0, [r7, #4]
 802c3f4:	460b      	mov	r3, r1
 802c3f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802c3f8:	bf00      	nop
 802c3fa:	370c      	adds	r7, #12
 802c3fc:	46bd      	mov	sp, r7
 802c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c402:	4770      	bx	lr

0802c404 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 802c404:	b580      	push	{r7, lr}
 802c406:	b090      	sub	sp, #64	; 0x40
 802c408:	af00      	add	r7, sp, #0
 802c40a:	60f8      	str	r0, [r7, #12]
 802c40c:	60b9      	str	r1, [r7, #8]
 802c40e:	603b      	str	r3, [r7, #0]
 802c410:	4613      	mov	r3, r2
 802c412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802c414:	e050      	b.n	802c4b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802c416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c418:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c41c:	d04c      	beq.n	802c4b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 802c41e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c420:	2b00      	cmp	r3, #0
 802c422:	d007      	beq.n	802c434 <UART_WaitOnFlagUntilTimeout+0x30>
 802c424:	f7fb fc46 	bl	8027cb4 <HAL_GetTick>
 802c428:	4602      	mov	r2, r0
 802c42a:	683b      	ldr	r3, [r7, #0]
 802c42c:	1ad3      	subs	r3, r2, r3
 802c42e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c430:	429a      	cmp	r2, r3
 802c432:	d241      	bcs.n	802c4b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802c434:	68fb      	ldr	r3, [r7, #12]
 802c436:	681b      	ldr	r3, [r3, #0]
 802c438:	330c      	adds	r3, #12
 802c43a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c43e:	e853 3f00 	ldrex	r3, [r3]
 802c442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802c444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c446:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802c44a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802c44c:	68fb      	ldr	r3, [r7, #12]
 802c44e:	681b      	ldr	r3, [r3, #0]
 802c450:	330c      	adds	r3, #12
 802c452:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802c454:	637a      	str	r2, [r7, #52]	; 0x34
 802c456:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802c45a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802c45c:	e841 2300 	strex	r3, r2, [r1]
 802c460:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802c462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c464:	2b00      	cmp	r3, #0
 802c466:	d1e5      	bne.n	802c434 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c468:	68fb      	ldr	r3, [r7, #12]
 802c46a:	681b      	ldr	r3, [r3, #0]
 802c46c:	3314      	adds	r3, #20
 802c46e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c470:	697b      	ldr	r3, [r7, #20]
 802c472:	e853 3f00 	ldrex	r3, [r3]
 802c476:	613b      	str	r3, [r7, #16]
   return(result);
 802c478:	693b      	ldr	r3, [r7, #16]
 802c47a:	f023 0301 	bic.w	r3, r3, #1
 802c47e:	63bb      	str	r3, [r7, #56]	; 0x38
 802c480:	68fb      	ldr	r3, [r7, #12]
 802c482:	681b      	ldr	r3, [r3, #0]
 802c484:	3314      	adds	r3, #20
 802c486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802c488:	623a      	str	r2, [r7, #32]
 802c48a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c48c:	69f9      	ldr	r1, [r7, #28]
 802c48e:	6a3a      	ldr	r2, [r7, #32]
 802c490:	e841 2300 	strex	r3, r2, [r1]
 802c494:	61bb      	str	r3, [r7, #24]
   return(result);
 802c496:	69bb      	ldr	r3, [r7, #24]
 802c498:	2b00      	cmp	r3, #0
 802c49a:	d1e5      	bne.n	802c468 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 802c49c:	68fb      	ldr	r3, [r7, #12]
 802c49e:	2220      	movs	r2, #32
 802c4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 802c4a4:	68fb      	ldr	r3, [r7, #12]
 802c4a6:	2220      	movs	r2, #32
 802c4a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 802c4ac:	68fb      	ldr	r3, [r7, #12]
 802c4ae:	2200      	movs	r2, #0
 802c4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 802c4b4:	2303      	movs	r3, #3
 802c4b6:	e00f      	b.n	802c4d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802c4b8:	68fb      	ldr	r3, [r7, #12]
 802c4ba:	681b      	ldr	r3, [r3, #0]
 802c4bc:	681a      	ldr	r2, [r3, #0]
 802c4be:	68bb      	ldr	r3, [r7, #8]
 802c4c0:	4013      	ands	r3, r2
 802c4c2:	68ba      	ldr	r2, [r7, #8]
 802c4c4:	429a      	cmp	r2, r3
 802c4c6:	bf0c      	ite	eq
 802c4c8:	2301      	moveq	r3, #1
 802c4ca:	2300      	movne	r3, #0
 802c4cc:	b2db      	uxtb	r3, r3
 802c4ce:	461a      	mov	r2, r3
 802c4d0:	79fb      	ldrb	r3, [r7, #7]
 802c4d2:	429a      	cmp	r2, r3
 802c4d4:	d09f      	beq.n	802c416 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802c4d6:	2300      	movs	r3, #0
}
 802c4d8:	4618      	mov	r0, r3
 802c4da:	3740      	adds	r7, #64	; 0x40
 802c4dc:	46bd      	mov	sp, r7
 802c4de:	bd80      	pop	{r7, pc}

0802c4e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802c4e0:	b480      	push	{r7}
 802c4e2:	b095      	sub	sp, #84	; 0x54
 802c4e4:	af00      	add	r7, sp, #0
 802c4e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802c4e8:	687b      	ldr	r3, [r7, #4]
 802c4ea:	681b      	ldr	r3, [r3, #0]
 802c4ec:	330c      	adds	r3, #12
 802c4ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c4f2:	e853 3f00 	ldrex	r3, [r3]
 802c4f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802c4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c4fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802c4fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c500:	687b      	ldr	r3, [r7, #4]
 802c502:	681b      	ldr	r3, [r3, #0]
 802c504:	330c      	adds	r3, #12
 802c506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c508:	643a      	str	r2, [r7, #64]	; 0x40
 802c50a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c50c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802c50e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802c510:	e841 2300 	strex	r3, r2, [r1]
 802c514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c518:	2b00      	cmp	r3, #0
 802c51a:	d1e5      	bne.n	802c4e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c51c:	687b      	ldr	r3, [r7, #4]
 802c51e:	681b      	ldr	r3, [r3, #0]
 802c520:	3314      	adds	r3, #20
 802c522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c524:	6a3b      	ldr	r3, [r7, #32]
 802c526:	e853 3f00 	ldrex	r3, [r3]
 802c52a:	61fb      	str	r3, [r7, #28]
   return(result);
 802c52c:	69fb      	ldr	r3, [r7, #28]
 802c52e:	f023 0301 	bic.w	r3, r3, #1
 802c532:	64bb      	str	r3, [r7, #72]	; 0x48
 802c534:	687b      	ldr	r3, [r7, #4]
 802c536:	681b      	ldr	r3, [r3, #0]
 802c538:	3314      	adds	r3, #20
 802c53a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c53c:	62fa      	str	r2, [r7, #44]	; 0x2c
 802c53e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802c542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c544:	e841 2300 	strex	r3, r2, [r1]
 802c548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802c54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c54c:	2b00      	cmp	r3, #0
 802c54e:	d1e5      	bne.n	802c51c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c550:	687b      	ldr	r3, [r7, #4]
 802c552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c554:	2b01      	cmp	r3, #1
 802c556:	d119      	bne.n	802c58c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c558:	687b      	ldr	r3, [r7, #4]
 802c55a:	681b      	ldr	r3, [r3, #0]
 802c55c:	330c      	adds	r3, #12
 802c55e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c560:	68fb      	ldr	r3, [r7, #12]
 802c562:	e853 3f00 	ldrex	r3, [r3]
 802c566:	60bb      	str	r3, [r7, #8]
   return(result);
 802c568:	68bb      	ldr	r3, [r7, #8]
 802c56a:	f023 0310 	bic.w	r3, r3, #16
 802c56e:	647b      	str	r3, [r7, #68]	; 0x44
 802c570:	687b      	ldr	r3, [r7, #4]
 802c572:	681b      	ldr	r3, [r3, #0]
 802c574:	330c      	adds	r3, #12
 802c576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802c578:	61ba      	str	r2, [r7, #24]
 802c57a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c57c:	6979      	ldr	r1, [r7, #20]
 802c57e:	69ba      	ldr	r2, [r7, #24]
 802c580:	e841 2300 	strex	r3, r2, [r1]
 802c584:	613b      	str	r3, [r7, #16]
   return(result);
 802c586:	693b      	ldr	r3, [r7, #16]
 802c588:	2b00      	cmp	r3, #0
 802c58a:	d1e5      	bne.n	802c558 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802c58c:	687b      	ldr	r3, [r7, #4]
 802c58e:	2220      	movs	r2, #32
 802c590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c594:	687b      	ldr	r3, [r7, #4]
 802c596:	2200      	movs	r2, #0
 802c598:	631a      	str	r2, [r3, #48]	; 0x30
}
 802c59a:	bf00      	nop
 802c59c:	3754      	adds	r7, #84	; 0x54
 802c59e:	46bd      	mov	sp, r7
 802c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c5a4:	4770      	bx	lr

0802c5a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802c5a6:	b580      	push	{r7, lr}
 802c5a8:	b084      	sub	sp, #16
 802c5aa:	af00      	add	r7, sp, #0
 802c5ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802c5ae:	687b      	ldr	r3, [r7, #4]
 802c5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c5b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802c5b4:	68fb      	ldr	r3, [r7, #12]
 802c5b6:	2200      	movs	r2, #0
 802c5b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802c5ba:	68fb      	ldr	r3, [r7, #12]
 802c5bc:	2200      	movs	r2, #0
 802c5be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802c5c0:	68f8      	ldr	r0, [r7, #12]
 802c5c2:	f7ff ff09 	bl	802c3d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802c5c6:	bf00      	nop
 802c5c8:	3710      	adds	r7, #16
 802c5ca:	46bd      	mov	sp, r7
 802c5cc:	bd80      	pop	{r7, pc}

0802c5ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802c5ce:	b480      	push	{r7}
 802c5d0:	b085      	sub	sp, #20
 802c5d2:	af00      	add	r7, sp, #0
 802c5d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802c5d6:	687b      	ldr	r3, [r7, #4]
 802c5d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c5dc:	b2db      	uxtb	r3, r3
 802c5de:	2b21      	cmp	r3, #33	; 0x21
 802c5e0:	d13e      	bne.n	802c660 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802c5e2:	687b      	ldr	r3, [r7, #4]
 802c5e4:	689b      	ldr	r3, [r3, #8]
 802c5e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c5ea:	d114      	bne.n	802c616 <UART_Transmit_IT+0x48>
 802c5ec:	687b      	ldr	r3, [r7, #4]
 802c5ee:	691b      	ldr	r3, [r3, #16]
 802c5f0:	2b00      	cmp	r3, #0
 802c5f2:	d110      	bne.n	802c616 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802c5f4:	687b      	ldr	r3, [r7, #4]
 802c5f6:	6a1b      	ldr	r3, [r3, #32]
 802c5f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802c5fa:	68fb      	ldr	r3, [r7, #12]
 802c5fc:	881b      	ldrh	r3, [r3, #0]
 802c5fe:	461a      	mov	r2, r3
 802c600:	687b      	ldr	r3, [r7, #4]
 802c602:	681b      	ldr	r3, [r3, #0]
 802c604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802c608:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802c60a:	687b      	ldr	r3, [r7, #4]
 802c60c:	6a1b      	ldr	r3, [r3, #32]
 802c60e:	1c9a      	adds	r2, r3, #2
 802c610:	687b      	ldr	r3, [r7, #4]
 802c612:	621a      	str	r2, [r3, #32]
 802c614:	e008      	b.n	802c628 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802c616:	687b      	ldr	r3, [r7, #4]
 802c618:	6a1b      	ldr	r3, [r3, #32]
 802c61a:	1c59      	adds	r1, r3, #1
 802c61c:	687a      	ldr	r2, [r7, #4]
 802c61e:	6211      	str	r1, [r2, #32]
 802c620:	781a      	ldrb	r2, [r3, #0]
 802c622:	687b      	ldr	r3, [r7, #4]
 802c624:	681b      	ldr	r3, [r3, #0]
 802c626:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802c628:	687b      	ldr	r3, [r7, #4]
 802c62a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802c62c:	b29b      	uxth	r3, r3
 802c62e:	3b01      	subs	r3, #1
 802c630:	b29b      	uxth	r3, r3
 802c632:	687a      	ldr	r2, [r7, #4]
 802c634:	4619      	mov	r1, r3
 802c636:	84d1      	strh	r1, [r2, #38]	; 0x26
 802c638:	2b00      	cmp	r3, #0
 802c63a:	d10f      	bne.n	802c65c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802c63c:	687b      	ldr	r3, [r7, #4]
 802c63e:	681b      	ldr	r3, [r3, #0]
 802c640:	68da      	ldr	r2, [r3, #12]
 802c642:	687b      	ldr	r3, [r7, #4]
 802c644:	681b      	ldr	r3, [r3, #0]
 802c646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802c64a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802c64c:	687b      	ldr	r3, [r7, #4]
 802c64e:	681b      	ldr	r3, [r3, #0]
 802c650:	68da      	ldr	r2, [r3, #12]
 802c652:	687b      	ldr	r3, [r7, #4]
 802c654:	681b      	ldr	r3, [r3, #0]
 802c656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802c65a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802c65c:	2300      	movs	r3, #0
 802c65e:	e000      	b.n	802c662 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802c660:	2302      	movs	r3, #2
  }
}
 802c662:	4618      	mov	r0, r3
 802c664:	3714      	adds	r7, #20
 802c666:	46bd      	mov	sp, r7
 802c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c66c:	4770      	bx	lr

0802c66e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802c66e:	b580      	push	{r7, lr}
 802c670:	b082      	sub	sp, #8
 802c672:	af00      	add	r7, sp, #0
 802c674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802c676:	687b      	ldr	r3, [r7, #4]
 802c678:	681b      	ldr	r3, [r3, #0]
 802c67a:	68da      	ldr	r2, [r3, #12]
 802c67c:	687b      	ldr	r3, [r7, #4]
 802c67e:	681b      	ldr	r3, [r3, #0]
 802c680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802c684:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802c686:	687b      	ldr	r3, [r7, #4]
 802c688:	2220      	movs	r2, #32
 802c68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802c68e:	6878      	ldr	r0, [r7, #4]
 802c690:	f7ff fe8e 	bl	802c3b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802c694:	2300      	movs	r3, #0
}
 802c696:	4618      	mov	r0, r3
 802c698:	3708      	adds	r7, #8
 802c69a:	46bd      	mov	sp, r7
 802c69c:	bd80      	pop	{r7, pc}

0802c69e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802c69e:	b580      	push	{r7, lr}
 802c6a0:	b08c      	sub	sp, #48	; 0x30
 802c6a2:	af00      	add	r7, sp, #0
 802c6a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802c6a6:	687b      	ldr	r3, [r7, #4]
 802c6a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802c6ac:	b2db      	uxtb	r3, r3
 802c6ae:	2b22      	cmp	r3, #34	; 0x22
 802c6b0:	f040 80ab 	bne.w	802c80a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802c6b4:	687b      	ldr	r3, [r7, #4]
 802c6b6:	689b      	ldr	r3, [r3, #8]
 802c6b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c6bc:	d117      	bne.n	802c6ee <UART_Receive_IT+0x50>
 802c6be:	687b      	ldr	r3, [r7, #4]
 802c6c0:	691b      	ldr	r3, [r3, #16]
 802c6c2:	2b00      	cmp	r3, #0
 802c6c4:	d113      	bne.n	802c6ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802c6c6:	2300      	movs	r3, #0
 802c6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802c6ca:	687b      	ldr	r3, [r7, #4]
 802c6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c6ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802c6d0:	687b      	ldr	r3, [r7, #4]
 802c6d2:	681b      	ldr	r3, [r3, #0]
 802c6d4:	685b      	ldr	r3, [r3, #4]
 802c6d6:	b29b      	uxth	r3, r3
 802c6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c6dc:	b29a      	uxth	r2, r3
 802c6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802c6e2:	687b      	ldr	r3, [r7, #4]
 802c6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c6e6:	1c9a      	adds	r2, r3, #2
 802c6e8:	687b      	ldr	r3, [r7, #4]
 802c6ea:	629a      	str	r2, [r3, #40]	; 0x28
 802c6ec:	e026      	b.n	802c73c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802c6ee:	687b      	ldr	r3, [r7, #4]
 802c6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802c6f4:	2300      	movs	r3, #0
 802c6f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802c6f8:	687b      	ldr	r3, [r7, #4]
 802c6fa:	689b      	ldr	r3, [r3, #8]
 802c6fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c700:	d007      	beq.n	802c712 <UART_Receive_IT+0x74>
 802c702:	687b      	ldr	r3, [r7, #4]
 802c704:	689b      	ldr	r3, [r3, #8]
 802c706:	2b00      	cmp	r3, #0
 802c708:	d10a      	bne.n	802c720 <UART_Receive_IT+0x82>
 802c70a:	687b      	ldr	r3, [r7, #4]
 802c70c:	691b      	ldr	r3, [r3, #16]
 802c70e:	2b00      	cmp	r3, #0
 802c710:	d106      	bne.n	802c720 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802c712:	687b      	ldr	r3, [r7, #4]
 802c714:	681b      	ldr	r3, [r3, #0]
 802c716:	685b      	ldr	r3, [r3, #4]
 802c718:	b2da      	uxtb	r2, r3
 802c71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c71c:	701a      	strb	r2, [r3, #0]
 802c71e:	e008      	b.n	802c732 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802c720:	687b      	ldr	r3, [r7, #4]
 802c722:	681b      	ldr	r3, [r3, #0]
 802c724:	685b      	ldr	r3, [r3, #4]
 802c726:	b2db      	uxtb	r3, r3
 802c728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c72c:	b2da      	uxtb	r2, r3
 802c72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c730:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802c732:	687b      	ldr	r3, [r7, #4]
 802c734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c736:	1c5a      	adds	r2, r3, #1
 802c738:	687b      	ldr	r3, [r7, #4]
 802c73a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 802c73c:	687b      	ldr	r3, [r7, #4]
 802c73e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c740:	b29b      	uxth	r3, r3
 802c742:	3b01      	subs	r3, #1
 802c744:	b29b      	uxth	r3, r3
 802c746:	687a      	ldr	r2, [r7, #4]
 802c748:	4619      	mov	r1, r3
 802c74a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802c74c:	2b00      	cmp	r3, #0
 802c74e:	d15a      	bne.n	802c806 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802c750:	687b      	ldr	r3, [r7, #4]
 802c752:	681b      	ldr	r3, [r3, #0]
 802c754:	68da      	ldr	r2, [r3, #12]
 802c756:	687b      	ldr	r3, [r7, #4]
 802c758:	681b      	ldr	r3, [r3, #0]
 802c75a:	f022 0220 	bic.w	r2, r2, #32
 802c75e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802c760:	687b      	ldr	r3, [r7, #4]
 802c762:	681b      	ldr	r3, [r3, #0]
 802c764:	68da      	ldr	r2, [r3, #12]
 802c766:	687b      	ldr	r3, [r7, #4]
 802c768:	681b      	ldr	r3, [r3, #0]
 802c76a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c76e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802c770:	687b      	ldr	r3, [r7, #4]
 802c772:	681b      	ldr	r3, [r3, #0]
 802c774:	695a      	ldr	r2, [r3, #20]
 802c776:	687b      	ldr	r3, [r7, #4]
 802c778:	681b      	ldr	r3, [r3, #0]
 802c77a:	f022 0201 	bic.w	r2, r2, #1
 802c77e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802c780:	687b      	ldr	r3, [r7, #4]
 802c782:	2220      	movs	r2, #32
 802c784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c788:	687b      	ldr	r3, [r7, #4]
 802c78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c78c:	2b01      	cmp	r3, #1
 802c78e:	d135      	bne.n	802c7fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c790:	687b      	ldr	r3, [r7, #4]
 802c792:	2200      	movs	r2, #0
 802c794:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c796:	687b      	ldr	r3, [r7, #4]
 802c798:	681b      	ldr	r3, [r3, #0]
 802c79a:	330c      	adds	r3, #12
 802c79c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c79e:	697b      	ldr	r3, [r7, #20]
 802c7a0:	e853 3f00 	ldrex	r3, [r3]
 802c7a4:	613b      	str	r3, [r7, #16]
   return(result);
 802c7a6:	693b      	ldr	r3, [r7, #16]
 802c7a8:	f023 0310 	bic.w	r3, r3, #16
 802c7ac:	627b      	str	r3, [r7, #36]	; 0x24
 802c7ae:	687b      	ldr	r3, [r7, #4]
 802c7b0:	681b      	ldr	r3, [r3, #0]
 802c7b2:	330c      	adds	r3, #12
 802c7b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c7b6:	623a      	str	r2, [r7, #32]
 802c7b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c7ba:	69f9      	ldr	r1, [r7, #28]
 802c7bc:	6a3a      	ldr	r2, [r7, #32]
 802c7be:	e841 2300 	strex	r3, r2, [r1]
 802c7c2:	61bb      	str	r3, [r7, #24]
   return(result);
 802c7c4:	69bb      	ldr	r3, [r7, #24]
 802c7c6:	2b00      	cmp	r3, #0
 802c7c8:	d1e5      	bne.n	802c796 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802c7ca:	687b      	ldr	r3, [r7, #4]
 802c7cc:	681b      	ldr	r3, [r3, #0]
 802c7ce:	681b      	ldr	r3, [r3, #0]
 802c7d0:	f003 0310 	and.w	r3, r3, #16
 802c7d4:	2b10      	cmp	r3, #16
 802c7d6:	d10a      	bne.n	802c7ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802c7d8:	2300      	movs	r3, #0
 802c7da:	60fb      	str	r3, [r7, #12]
 802c7dc:	687b      	ldr	r3, [r7, #4]
 802c7de:	681b      	ldr	r3, [r3, #0]
 802c7e0:	681b      	ldr	r3, [r3, #0]
 802c7e2:	60fb      	str	r3, [r7, #12]
 802c7e4:	687b      	ldr	r3, [r7, #4]
 802c7e6:	681b      	ldr	r3, [r3, #0]
 802c7e8:	685b      	ldr	r3, [r3, #4]
 802c7ea:	60fb      	str	r3, [r7, #12]
 802c7ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802c7ee:	687b      	ldr	r3, [r7, #4]
 802c7f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802c7f2:	4619      	mov	r1, r3
 802c7f4:	6878      	ldr	r0, [r7, #4]
 802c7f6:	f7ff fdf9 	bl	802c3ec <HAL_UARTEx_RxEventCallback>
 802c7fa:	e002      	b.n	802c802 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802c7fc:	6878      	ldr	r0, [r7, #4]
 802c7fe:	f7ff fde1 	bl	802c3c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802c802:	2300      	movs	r3, #0
 802c804:	e002      	b.n	802c80c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802c806:	2300      	movs	r3, #0
 802c808:	e000      	b.n	802c80c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802c80a:	2302      	movs	r3, #2
  }
}
 802c80c:	4618      	mov	r0, r3
 802c80e:	3730      	adds	r7, #48	; 0x30
 802c810:	46bd      	mov	sp, r7
 802c812:	bd80      	pop	{r7, pc}

0802c814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802c814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802c818:	b0c0      	sub	sp, #256	; 0x100
 802c81a:	af00      	add	r7, sp, #0
 802c81c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802c820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c824:	681b      	ldr	r3, [r3, #0]
 802c826:	691b      	ldr	r3, [r3, #16]
 802c828:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802c82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c830:	68d9      	ldr	r1, [r3, #12]
 802c832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c836:	681a      	ldr	r2, [r3, #0]
 802c838:	ea40 0301 	orr.w	r3, r0, r1
 802c83c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802c83e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c842:	689a      	ldr	r2, [r3, #8]
 802c844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c848:	691b      	ldr	r3, [r3, #16]
 802c84a:	431a      	orrs	r2, r3
 802c84c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c850:	695b      	ldr	r3, [r3, #20]
 802c852:	431a      	orrs	r2, r3
 802c854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c858:	69db      	ldr	r3, [r3, #28]
 802c85a:	4313      	orrs	r3, r2
 802c85c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802c860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c864:	681b      	ldr	r3, [r3, #0]
 802c866:	68db      	ldr	r3, [r3, #12]
 802c868:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 802c86c:	f021 010c 	bic.w	r1, r1, #12
 802c870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c874:	681a      	ldr	r2, [r3, #0]
 802c876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802c87a:	430b      	orrs	r3, r1
 802c87c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802c87e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c882:	681b      	ldr	r3, [r3, #0]
 802c884:	695b      	ldr	r3, [r3, #20]
 802c886:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802c88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c88e:	6999      	ldr	r1, [r3, #24]
 802c890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c894:	681a      	ldr	r2, [r3, #0]
 802c896:	ea40 0301 	orr.w	r3, r0, r1
 802c89a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802c89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c8a0:	681a      	ldr	r2, [r3, #0]
 802c8a2:	4b8f      	ldr	r3, [pc, #572]	; (802cae0 <UART_SetConfig+0x2cc>)
 802c8a4:	429a      	cmp	r2, r3
 802c8a6:	d005      	beq.n	802c8b4 <UART_SetConfig+0xa0>
 802c8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c8ac:	681a      	ldr	r2, [r3, #0]
 802c8ae:	4b8d      	ldr	r3, [pc, #564]	; (802cae4 <UART_SetConfig+0x2d0>)
 802c8b0:	429a      	cmp	r2, r3
 802c8b2:	d104      	bne.n	802c8be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802c8b4:	f7fe fa84 	bl	802adc0 <HAL_RCC_GetPCLK2Freq>
 802c8b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 802c8bc:	e003      	b.n	802c8c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802c8be:	f7fe fa6b 	bl	802ad98 <HAL_RCC_GetPCLK1Freq>
 802c8c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802c8c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c8ca:	69db      	ldr	r3, [r3, #28]
 802c8cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802c8d0:	f040 810c 	bne.w	802caec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802c8d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c8d8:	2200      	movs	r2, #0
 802c8da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802c8de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 802c8e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 802c8e6:	4622      	mov	r2, r4
 802c8e8:	462b      	mov	r3, r5
 802c8ea:	1891      	adds	r1, r2, r2
 802c8ec:	65b9      	str	r1, [r7, #88]	; 0x58
 802c8ee:	415b      	adcs	r3, r3
 802c8f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 802c8f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802c8f6:	4621      	mov	r1, r4
 802c8f8:	eb12 0801 	adds.w	r8, r2, r1
 802c8fc:	4629      	mov	r1, r5
 802c8fe:	eb43 0901 	adc.w	r9, r3, r1
 802c902:	f04f 0200 	mov.w	r2, #0
 802c906:	f04f 0300 	mov.w	r3, #0
 802c90a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802c90e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802c912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802c916:	4690      	mov	r8, r2
 802c918:	4699      	mov	r9, r3
 802c91a:	4623      	mov	r3, r4
 802c91c:	eb18 0303 	adds.w	r3, r8, r3
 802c920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802c924:	462b      	mov	r3, r5
 802c926:	eb49 0303 	adc.w	r3, r9, r3
 802c92a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802c92e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c932:	685b      	ldr	r3, [r3, #4]
 802c934:	2200      	movs	r2, #0
 802c936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802c93a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802c93e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802c942:	460b      	mov	r3, r1
 802c944:	18db      	adds	r3, r3, r3
 802c946:	653b      	str	r3, [r7, #80]	; 0x50
 802c948:	4613      	mov	r3, r2
 802c94a:	eb42 0303 	adc.w	r3, r2, r3
 802c94e:	657b      	str	r3, [r7, #84]	; 0x54
 802c950:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 802c954:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 802c958:	f7f6 f926 	bl	8022ba8 <__aeabi_uldivmod>
 802c95c:	4602      	mov	r2, r0
 802c95e:	460b      	mov	r3, r1
 802c960:	4b61      	ldr	r3, [pc, #388]	; (802cae8 <UART_SetConfig+0x2d4>)
 802c962:	fba3 2302 	umull	r2, r3, r3, r2
 802c966:	095b      	lsrs	r3, r3, #5
 802c968:	011c      	lsls	r4, r3, #4
 802c96a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c96e:	2200      	movs	r2, #0
 802c970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802c974:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 802c978:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 802c97c:	4642      	mov	r2, r8
 802c97e:	464b      	mov	r3, r9
 802c980:	1891      	adds	r1, r2, r2
 802c982:	64b9      	str	r1, [r7, #72]	; 0x48
 802c984:	415b      	adcs	r3, r3
 802c986:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c988:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802c98c:	4641      	mov	r1, r8
 802c98e:	eb12 0a01 	adds.w	sl, r2, r1
 802c992:	4649      	mov	r1, r9
 802c994:	eb43 0b01 	adc.w	fp, r3, r1
 802c998:	f04f 0200 	mov.w	r2, #0
 802c99c:	f04f 0300 	mov.w	r3, #0
 802c9a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802c9a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802c9a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802c9ac:	4692      	mov	sl, r2
 802c9ae:	469b      	mov	fp, r3
 802c9b0:	4643      	mov	r3, r8
 802c9b2:	eb1a 0303 	adds.w	r3, sl, r3
 802c9b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802c9ba:	464b      	mov	r3, r9
 802c9bc:	eb4b 0303 	adc.w	r3, fp, r3
 802c9c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802c9c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c9c8:	685b      	ldr	r3, [r3, #4]
 802c9ca:	2200      	movs	r2, #0
 802c9cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802c9d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 802c9d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802c9d8:	460b      	mov	r3, r1
 802c9da:	18db      	adds	r3, r3, r3
 802c9dc:	643b      	str	r3, [r7, #64]	; 0x40
 802c9de:	4613      	mov	r3, r2
 802c9e0:	eb42 0303 	adc.w	r3, r2, r3
 802c9e4:	647b      	str	r3, [r7, #68]	; 0x44
 802c9e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802c9ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802c9ee:	f7f6 f8db 	bl	8022ba8 <__aeabi_uldivmod>
 802c9f2:	4602      	mov	r2, r0
 802c9f4:	460b      	mov	r3, r1
 802c9f6:	4611      	mov	r1, r2
 802c9f8:	4b3b      	ldr	r3, [pc, #236]	; (802cae8 <UART_SetConfig+0x2d4>)
 802c9fa:	fba3 2301 	umull	r2, r3, r3, r1
 802c9fe:	095b      	lsrs	r3, r3, #5
 802ca00:	2264      	movs	r2, #100	; 0x64
 802ca02:	fb02 f303 	mul.w	r3, r2, r3
 802ca06:	1acb      	subs	r3, r1, r3
 802ca08:	00db      	lsls	r3, r3, #3
 802ca0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802ca0e:	4b36      	ldr	r3, [pc, #216]	; (802cae8 <UART_SetConfig+0x2d4>)
 802ca10:	fba3 2302 	umull	r2, r3, r3, r2
 802ca14:	095b      	lsrs	r3, r3, #5
 802ca16:	005b      	lsls	r3, r3, #1
 802ca18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802ca1c:	441c      	add	r4, r3
 802ca1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802ca22:	2200      	movs	r2, #0
 802ca24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802ca28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 802ca2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 802ca30:	4642      	mov	r2, r8
 802ca32:	464b      	mov	r3, r9
 802ca34:	1891      	adds	r1, r2, r2
 802ca36:	63b9      	str	r1, [r7, #56]	; 0x38
 802ca38:	415b      	adcs	r3, r3
 802ca3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802ca3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802ca40:	4641      	mov	r1, r8
 802ca42:	1851      	adds	r1, r2, r1
 802ca44:	6339      	str	r1, [r7, #48]	; 0x30
 802ca46:	4649      	mov	r1, r9
 802ca48:	414b      	adcs	r3, r1
 802ca4a:	637b      	str	r3, [r7, #52]	; 0x34
 802ca4c:	f04f 0200 	mov.w	r2, #0
 802ca50:	f04f 0300 	mov.w	r3, #0
 802ca54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 802ca58:	4659      	mov	r1, fp
 802ca5a:	00cb      	lsls	r3, r1, #3
 802ca5c:	4651      	mov	r1, sl
 802ca5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802ca62:	4651      	mov	r1, sl
 802ca64:	00ca      	lsls	r2, r1, #3
 802ca66:	4610      	mov	r0, r2
 802ca68:	4619      	mov	r1, r3
 802ca6a:	4603      	mov	r3, r0
 802ca6c:	4642      	mov	r2, r8
 802ca6e:	189b      	adds	r3, r3, r2
 802ca70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802ca74:	464b      	mov	r3, r9
 802ca76:	460a      	mov	r2, r1
 802ca78:	eb42 0303 	adc.w	r3, r2, r3
 802ca7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802ca80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802ca84:	685b      	ldr	r3, [r3, #4]
 802ca86:	2200      	movs	r2, #0
 802ca88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802ca8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 802ca90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802ca94:	460b      	mov	r3, r1
 802ca96:	18db      	adds	r3, r3, r3
 802ca98:	62bb      	str	r3, [r7, #40]	; 0x28
 802ca9a:	4613      	mov	r3, r2
 802ca9c:	eb42 0303 	adc.w	r3, r2, r3
 802caa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 802caa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802caa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802caaa:	f7f6 f87d 	bl	8022ba8 <__aeabi_uldivmod>
 802caae:	4602      	mov	r2, r0
 802cab0:	460b      	mov	r3, r1
 802cab2:	4b0d      	ldr	r3, [pc, #52]	; (802cae8 <UART_SetConfig+0x2d4>)
 802cab4:	fba3 1302 	umull	r1, r3, r3, r2
 802cab8:	095b      	lsrs	r3, r3, #5
 802caba:	2164      	movs	r1, #100	; 0x64
 802cabc:	fb01 f303 	mul.w	r3, r1, r3
 802cac0:	1ad3      	subs	r3, r2, r3
 802cac2:	00db      	lsls	r3, r3, #3
 802cac4:	3332      	adds	r3, #50	; 0x32
 802cac6:	4a08      	ldr	r2, [pc, #32]	; (802cae8 <UART_SetConfig+0x2d4>)
 802cac8:	fba2 2303 	umull	r2, r3, r2, r3
 802cacc:	095b      	lsrs	r3, r3, #5
 802cace:	f003 0207 	and.w	r2, r3, #7
 802cad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cad6:	681b      	ldr	r3, [r3, #0]
 802cad8:	4422      	add	r2, r4
 802cada:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802cadc:	e106      	b.n	802ccec <UART_SetConfig+0x4d8>
 802cade:	bf00      	nop
 802cae0:	40011000 	.word	0x40011000
 802cae4:	40011400 	.word	0x40011400
 802cae8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802caec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802caf0:	2200      	movs	r2, #0
 802caf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802caf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 802cafa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 802cafe:	4642      	mov	r2, r8
 802cb00:	464b      	mov	r3, r9
 802cb02:	1891      	adds	r1, r2, r2
 802cb04:	6239      	str	r1, [r7, #32]
 802cb06:	415b      	adcs	r3, r3
 802cb08:	627b      	str	r3, [r7, #36]	; 0x24
 802cb0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802cb0e:	4641      	mov	r1, r8
 802cb10:	1854      	adds	r4, r2, r1
 802cb12:	4649      	mov	r1, r9
 802cb14:	eb43 0501 	adc.w	r5, r3, r1
 802cb18:	f04f 0200 	mov.w	r2, #0
 802cb1c:	f04f 0300 	mov.w	r3, #0
 802cb20:	00eb      	lsls	r3, r5, #3
 802cb22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802cb26:	00e2      	lsls	r2, r4, #3
 802cb28:	4614      	mov	r4, r2
 802cb2a:	461d      	mov	r5, r3
 802cb2c:	4643      	mov	r3, r8
 802cb2e:	18e3      	adds	r3, r4, r3
 802cb30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802cb34:	464b      	mov	r3, r9
 802cb36:	eb45 0303 	adc.w	r3, r5, r3
 802cb3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802cb3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cb42:	685b      	ldr	r3, [r3, #4]
 802cb44:	2200      	movs	r2, #0
 802cb46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802cb4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802cb4e:	f04f 0200 	mov.w	r2, #0
 802cb52:	f04f 0300 	mov.w	r3, #0
 802cb56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802cb5a:	4629      	mov	r1, r5
 802cb5c:	008b      	lsls	r3, r1, #2
 802cb5e:	4621      	mov	r1, r4
 802cb60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802cb64:	4621      	mov	r1, r4
 802cb66:	008a      	lsls	r2, r1, #2
 802cb68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802cb6c:	f7f6 f81c 	bl	8022ba8 <__aeabi_uldivmod>
 802cb70:	4602      	mov	r2, r0
 802cb72:	460b      	mov	r3, r1
 802cb74:	4b60      	ldr	r3, [pc, #384]	; (802ccf8 <UART_SetConfig+0x4e4>)
 802cb76:	fba3 2302 	umull	r2, r3, r3, r2
 802cb7a:	095b      	lsrs	r3, r3, #5
 802cb7c:	011c      	lsls	r4, r3, #4
 802cb7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802cb82:	2200      	movs	r2, #0
 802cb84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802cb88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 802cb8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 802cb90:	4642      	mov	r2, r8
 802cb92:	464b      	mov	r3, r9
 802cb94:	1891      	adds	r1, r2, r2
 802cb96:	61b9      	str	r1, [r7, #24]
 802cb98:	415b      	adcs	r3, r3
 802cb9a:	61fb      	str	r3, [r7, #28]
 802cb9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802cba0:	4641      	mov	r1, r8
 802cba2:	1851      	adds	r1, r2, r1
 802cba4:	6139      	str	r1, [r7, #16]
 802cba6:	4649      	mov	r1, r9
 802cba8:	414b      	adcs	r3, r1
 802cbaa:	617b      	str	r3, [r7, #20]
 802cbac:	f04f 0200 	mov.w	r2, #0
 802cbb0:	f04f 0300 	mov.w	r3, #0
 802cbb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802cbb8:	4659      	mov	r1, fp
 802cbba:	00cb      	lsls	r3, r1, #3
 802cbbc:	4651      	mov	r1, sl
 802cbbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802cbc2:	4651      	mov	r1, sl
 802cbc4:	00ca      	lsls	r2, r1, #3
 802cbc6:	4610      	mov	r0, r2
 802cbc8:	4619      	mov	r1, r3
 802cbca:	4603      	mov	r3, r0
 802cbcc:	4642      	mov	r2, r8
 802cbce:	189b      	adds	r3, r3, r2
 802cbd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802cbd4:	464b      	mov	r3, r9
 802cbd6:	460a      	mov	r2, r1
 802cbd8:	eb42 0303 	adc.w	r3, r2, r3
 802cbdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802cbe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cbe4:	685b      	ldr	r3, [r3, #4]
 802cbe6:	2200      	movs	r2, #0
 802cbe8:	67bb      	str	r3, [r7, #120]	; 0x78
 802cbea:	67fa      	str	r2, [r7, #124]	; 0x7c
 802cbec:	f04f 0200 	mov.w	r2, #0
 802cbf0:	f04f 0300 	mov.w	r3, #0
 802cbf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 802cbf8:	4649      	mov	r1, r9
 802cbfa:	008b      	lsls	r3, r1, #2
 802cbfc:	4641      	mov	r1, r8
 802cbfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802cc02:	4641      	mov	r1, r8
 802cc04:	008a      	lsls	r2, r1, #2
 802cc06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802cc0a:	f7f5 ffcd 	bl	8022ba8 <__aeabi_uldivmod>
 802cc0e:	4602      	mov	r2, r0
 802cc10:	460b      	mov	r3, r1
 802cc12:	4611      	mov	r1, r2
 802cc14:	4b38      	ldr	r3, [pc, #224]	; (802ccf8 <UART_SetConfig+0x4e4>)
 802cc16:	fba3 2301 	umull	r2, r3, r3, r1
 802cc1a:	095b      	lsrs	r3, r3, #5
 802cc1c:	2264      	movs	r2, #100	; 0x64
 802cc1e:	fb02 f303 	mul.w	r3, r2, r3
 802cc22:	1acb      	subs	r3, r1, r3
 802cc24:	011b      	lsls	r3, r3, #4
 802cc26:	3332      	adds	r3, #50	; 0x32
 802cc28:	4a33      	ldr	r2, [pc, #204]	; (802ccf8 <UART_SetConfig+0x4e4>)
 802cc2a:	fba2 2303 	umull	r2, r3, r2, r3
 802cc2e:	095b      	lsrs	r3, r3, #5
 802cc30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802cc34:	441c      	add	r4, r3
 802cc36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802cc3a:	2200      	movs	r2, #0
 802cc3c:	673b      	str	r3, [r7, #112]	; 0x70
 802cc3e:	677a      	str	r2, [r7, #116]	; 0x74
 802cc40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 802cc44:	4642      	mov	r2, r8
 802cc46:	464b      	mov	r3, r9
 802cc48:	1891      	adds	r1, r2, r2
 802cc4a:	60b9      	str	r1, [r7, #8]
 802cc4c:	415b      	adcs	r3, r3
 802cc4e:	60fb      	str	r3, [r7, #12]
 802cc50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802cc54:	4641      	mov	r1, r8
 802cc56:	1851      	adds	r1, r2, r1
 802cc58:	6039      	str	r1, [r7, #0]
 802cc5a:	4649      	mov	r1, r9
 802cc5c:	414b      	adcs	r3, r1
 802cc5e:	607b      	str	r3, [r7, #4]
 802cc60:	f04f 0200 	mov.w	r2, #0
 802cc64:	f04f 0300 	mov.w	r3, #0
 802cc68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802cc6c:	4659      	mov	r1, fp
 802cc6e:	00cb      	lsls	r3, r1, #3
 802cc70:	4651      	mov	r1, sl
 802cc72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802cc76:	4651      	mov	r1, sl
 802cc78:	00ca      	lsls	r2, r1, #3
 802cc7a:	4610      	mov	r0, r2
 802cc7c:	4619      	mov	r1, r3
 802cc7e:	4603      	mov	r3, r0
 802cc80:	4642      	mov	r2, r8
 802cc82:	189b      	adds	r3, r3, r2
 802cc84:	66bb      	str	r3, [r7, #104]	; 0x68
 802cc86:	464b      	mov	r3, r9
 802cc88:	460a      	mov	r2, r1
 802cc8a:	eb42 0303 	adc.w	r3, r2, r3
 802cc8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 802cc90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cc94:	685b      	ldr	r3, [r3, #4]
 802cc96:	2200      	movs	r2, #0
 802cc98:	663b      	str	r3, [r7, #96]	; 0x60
 802cc9a:	667a      	str	r2, [r7, #100]	; 0x64
 802cc9c:	f04f 0200 	mov.w	r2, #0
 802cca0:	f04f 0300 	mov.w	r3, #0
 802cca4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802cca8:	4649      	mov	r1, r9
 802ccaa:	008b      	lsls	r3, r1, #2
 802ccac:	4641      	mov	r1, r8
 802ccae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802ccb2:	4641      	mov	r1, r8
 802ccb4:	008a      	lsls	r2, r1, #2
 802ccb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 802ccba:	f7f5 ff75 	bl	8022ba8 <__aeabi_uldivmod>
 802ccbe:	4602      	mov	r2, r0
 802ccc0:	460b      	mov	r3, r1
 802ccc2:	4b0d      	ldr	r3, [pc, #52]	; (802ccf8 <UART_SetConfig+0x4e4>)
 802ccc4:	fba3 1302 	umull	r1, r3, r3, r2
 802ccc8:	095b      	lsrs	r3, r3, #5
 802ccca:	2164      	movs	r1, #100	; 0x64
 802cccc:	fb01 f303 	mul.w	r3, r1, r3
 802ccd0:	1ad3      	subs	r3, r2, r3
 802ccd2:	011b      	lsls	r3, r3, #4
 802ccd4:	3332      	adds	r3, #50	; 0x32
 802ccd6:	4a08      	ldr	r2, [pc, #32]	; (802ccf8 <UART_SetConfig+0x4e4>)
 802ccd8:	fba2 2303 	umull	r2, r3, r2, r3
 802ccdc:	095b      	lsrs	r3, r3, #5
 802ccde:	f003 020f 	and.w	r2, r3, #15
 802cce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cce6:	681b      	ldr	r3, [r3, #0]
 802cce8:	4422      	add	r2, r4
 802ccea:	609a      	str	r2, [r3, #8]
}
 802ccec:	bf00      	nop
 802ccee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802ccf2:	46bd      	mov	sp, r7
 802ccf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802ccf8:	51eb851f 	.word	0x51eb851f

0802ccfc <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 802ccfc:	b480      	push	{r7}
 802ccfe:	b083      	sub	sp, #12
 802cd00:	af00      	add	r7, sp, #0
 802cd02:	6078      	str	r0, [r7, #4]
 802cd04:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 802cd06:	683b      	ldr	r3, [r7, #0]
 802cd08:	681b      	ldr	r3, [r3, #0]
 802cd0a:	2b10      	cmp	r3, #16
 802cd0c:	d11c      	bne.n	802cd48 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 802cd0e:	687b      	ldr	r3, [r7, #4]
 802cd10:	681a      	ldr	r2, [r3, #0]
 802cd12:	4b1f      	ldr	r3, [pc, #124]	; (802cd90 <FSMC_NAND_Init+0x94>)
 802cd14:	4013      	ands	r3, r2
 802cd16:	683a      	ldr	r2, [r7, #0]
 802cd18:	6851      	ldr	r1, [r2, #4]
 802cd1a:	683a      	ldr	r2, [r7, #0]
 802cd1c:	6892      	ldr	r2, [r2, #8]
 802cd1e:	4311      	orrs	r1, r2
 802cd20:	683a      	ldr	r2, [r7, #0]
 802cd22:	68d2      	ldr	r2, [r2, #12]
 802cd24:	4311      	orrs	r1, r2
 802cd26:	683a      	ldr	r2, [r7, #0]
 802cd28:	6912      	ldr	r2, [r2, #16]
 802cd2a:	4311      	orrs	r1, r2
 802cd2c:	683a      	ldr	r2, [r7, #0]
 802cd2e:	6952      	ldr	r2, [r2, #20]
 802cd30:	0252      	lsls	r2, r2, #9
 802cd32:	4311      	orrs	r1, r2
 802cd34:	683a      	ldr	r2, [r7, #0]
 802cd36:	6992      	ldr	r2, [r2, #24]
 802cd38:	0352      	lsls	r2, r2, #13
 802cd3a:	430a      	orrs	r2, r1
 802cd3c:	4313      	orrs	r3, r2
 802cd3e:	f043 0208 	orr.w	r2, r3, #8
 802cd42:	687b      	ldr	r3, [r7, #4]
 802cd44:	601a      	str	r2, [r3, #0]
 802cd46:	e01b      	b.n	802cd80 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 802cd48:	687b      	ldr	r3, [r7, #4]
 802cd4a:	6a1a      	ldr	r2, [r3, #32]
 802cd4c:	4b10      	ldr	r3, [pc, #64]	; (802cd90 <FSMC_NAND_Init+0x94>)
 802cd4e:	4013      	ands	r3, r2
 802cd50:	683a      	ldr	r2, [r7, #0]
 802cd52:	6851      	ldr	r1, [r2, #4]
 802cd54:	683a      	ldr	r2, [r7, #0]
 802cd56:	6892      	ldr	r2, [r2, #8]
 802cd58:	4311      	orrs	r1, r2
 802cd5a:	683a      	ldr	r2, [r7, #0]
 802cd5c:	68d2      	ldr	r2, [r2, #12]
 802cd5e:	4311      	orrs	r1, r2
 802cd60:	683a      	ldr	r2, [r7, #0]
 802cd62:	6912      	ldr	r2, [r2, #16]
 802cd64:	4311      	orrs	r1, r2
 802cd66:	683a      	ldr	r2, [r7, #0]
 802cd68:	6952      	ldr	r2, [r2, #20]
 802cd6a:	0252      	lsls	r2, r2, #9
 802cd6c:	4311      	orrs	r1, r2
 802cd6e:	683a      	ldr	r2, [r7, #0]
 802cd70:	6992      	ldr	r2, [r2, #24]
 802cd72:	0352      	lsls	r2, r2, #13
 802cd74:	430a      	orrs	r2, r1
 802cd76:	4313      	orrs	r3, r2
 802cd78:	f043 0208 	orr.w	r2, r3, #8
 802cd7c:	687b      	ldr	r3, [r7, #4]
 802cd7e:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 802cd80:	2300      	movs	r3, #0
}
 802cd82:	4618      	mov	r0, r3
 802cd84:	370c      	adds	r7, #12
 802cd86:	46bd      	mov	sp, r7
 802cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd8c:	4770      	bx	lr
 802cd8e:	bf00      	nop
 802cd90:	fff00181 	.word	0xfff00181

0802cd94 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 802cd94:	b480      	push	{r7}
 802cd96:	b085      	sub	sp, #20
 802cd98:	af00      	add	r7, sp, #0
 802cd9a:	60f8      	str	r0, [r7, #12]
 802cd9c:	60b9      	str	r1, [r7, #8]
 802cd9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 802cda0:	687b      	ldr	r3, [r7, #4]
 802cda2:	2b10      	cmp	r3, #16
 802cda4:	d112      	bne.n	802cdcc <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 802cda6:	68fb      	ldr	r3, [r7, #12]
 802cda8:	689b      	ldr	r3, [r3, #8]
 802cdaa:	68bb      	ldr	r3, [r7, #8]
 802cdac:	681a      	ldr	r2, [r3, #0]
 802cdae:	68bb      	ldr	r3, [r7, #8]
 802cdb0:	685b      	ldr	r3, [r3, #4]
 802cdb2:	021b      	lsls	r3, r3, #8
 802cdb4:	431a      	orrs	r2, r3
 802cdb6:	68bb      	ldr	r3, [r7, #8]
 802cdb8:	689b      	ldr	r3, [r3, #8]
 802cdba:	041b      	lsls	r3, r3, #16
 802cdbc:	431a      	orrs	r2, r3
 802cdbe:	68bb      	ldr	r3, [r7, #8]
 802cdc0:	68db      	ldr	r3, [r3, #12]
 802cdc2:	061b      	lsls	r3, r3, #24
 802cdc4:	431a      	orrs	r2, r3
 802cdc6:	68fb      	ldr	r3, [r7, #12]
 802cdc8:	609a      	str	r2, [r3, #8]
 802cdca:	e011      	b.n	802cdf0 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 802cdcc:	68fb      	ldr	r3, [r7, #12]
 802cdce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802cdd0:	68bb      	ldr	r3, [r7, #8]
 802cdd2:	681a      	ldr	r2, [r3, #0]
 802cdd4:	68bb      	ldr	r3, [r7, #8]
 802cdd6:	685b      	ldr	r3, [r3, #4]
 802cdd8:	021b      	lsls	r3, r3, #8
 802cdda:	431a      	orrs	r2, r3
 802cddc:	68bb      	ldr	r3, [r7, #8]
 802cdde:	689b      	ldr	r3, [r3, #8]
 802cde0:	041b      	lsls	r3, r3, #16
 802cde2:	431a      	orrs	r2, r3
 802cde4:	68bb      	ldr	r3, [r7, #8]
 802cde6:	68db      	ldr	r3, [r3, #12]
 802cde8:	061b      	lsls	r3, r3, #24
 802cdea:	431a      	orrs	r2, r3
 802cdec:	68fb      	ldr	r3, [r7, #12]
 802cdee:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 802cdf0:	2300      	movs	r3, #0
}
 802cdf2:	4618      	mov	r0, r3
 802cdf4:	3714      	adds	r7, #20
 802cdf6:	46bd      	mov	sp, r7
 802cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cdfc:	4770      	bx	lr

0802cdfe <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 802cdfe:	b480      	push	{r7}
 802ce00:	b085      	sub	sp, #20
 802ce02:	af00      	add	r7, sp, #0
 802ce04:	60f8      	str	r0, [r7, #12]
 802ce06:	60b9      	str	r1, [r7, #8]
 802ce08:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 802ce0a:	687b      	ldr	r3, [r7, #4]
 802ce0c:	2b10      	cmp	r3, #16
 802ce0e:	d112      	bne.n	802ce36 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 802ce10:	68fb      	ldr	r3, [r7, #12]
 802ce12:	68db      	ldr	r3, [r3, #12]
 802ce14:	68bb      	ldr	r3, [r7, #8]
 802ce16:	681a      	ldr	r2, [r3, #0]
 802ce18:	68bb      	ldr	r3, [r7, #8]
 802ce1a:	685b      	ldr	r3, [r3, #4]
 802ce1c:	021b      	lsls	r3, r3, #8
 802ce1e:	431a      	orrs	r2, r3
 802ce20:	68bb      	ldr	r3, [r7, #8]
 802ce22:	689b      	ldr	r3, [r3, #8]
 802ce24:	041b      	lsls	r3, r3, #16
 802ce26:	431a      	orrs	r2, r3
 802ce28:	68bb      	ldr	r3, [r7, #8]
 802ce2a:	68db      	ldr	r3, [r3, #12]
 802ce2c:	061b      	lsls	r3, r3, #24
 802ce2e:	431a      	orrs	r2, r3
 802ce30:	68fb      	ldr	r3, [r7, #12]
 802ce32:	60da      	str	r2, [r3, #12]
 802ce34:	e011      	b.n	802ce5a <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 802ce36:	68fb      	ldr	r3, [r7, #12]
 802ce38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ce3a:	68bb      	ldr	r3, [r7, #8]
 802ce3c:	681a      	ldr	r2, [r3, #0]
 802ce3e:	68bb      	ldr	r3, [r7, #8]
 802ce40:	685b      	ldr	r3, [r3, #4]
 802ce42:	021b      	lsls	r3, r3, #8
 802ce44:	431a      	orrs	r2, r3
 802ce46:	68bb      	ldr	r3, [r7, #8]
 802ce48:	689b      	ldr	r3, [r3, #8]
 802ce4a:	041b      	lsls	r3, r3, #16
 802ce4c:	431a      	orrs	r2, r3
 802ce4e:	68bb      	ldr	r3, [r7, #8]
 802ce50:	68db      	ldr	r3, [r3, #12]
 802ce52:	061b      	lsls	r3, r3, #24
 802ce54:	431a      	orrs	r2, r3
 802ce56:	68fb      	ldr	r3, [r7, #12]
 802ce58:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 802ce5a:	2300      	movs	r3, #0
}
 802ce5c:	4618      	mov	r0, r3
 802ce5e:	3714      	adds	r7, #20
 802ce60:	46bd      	mov	sp, r7
 802ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ce66:	4770      	bx	lr

0802ce68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802ce68:	b084      	sub	sp, #16
 802ce6a:	b580      	push	{r7, lr}
 802ce6c:	b084      	sub	sp, #16
 802ce6e:	af00      	add	r7, sp, #0
 802ce70:	6078      	str	r0, [r7, #4]
 802ce72:	f107 001c 	add.w	r0, r7, #28
 802ce76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802ce7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ce7c:	2b01      	cmp	r3, #1
 802ce7e:	d122      	bne.n	802cec6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802ce80:	687b      	ldr	r3, [r7, #4]
 802ce82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ce84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802ce88:	687b      	ldr	r3, [r7, #4]
 802ce8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802ce8c:	687b      	ldr	r3, [r7, #4]
 802ce8e:	68db      	ldr	r3, [r3, #12]
 802ce90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802ce94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802ce98:	687a      	ldr	r2, [r7, #4]
 802ce9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802ce9c:	687b      	ldr	r3, [r7, #4]
 802ce9e:	68db      	ldr	r3, [r3, #12]
 802cea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802cea4:	687b      	ldr	r3, [r7, #4]
 802cea6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802cea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ceaa:	2b01      	cmp	r3, #1
 802ceac:	d105      	bne.n	802ceba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802ceae:	687b      	ldr	r3, [r7, #4]
 802ceb0:	68db      	ldr	r3, [r3, #12]
 802ceb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802ceb6:	687b      	ldr	r3, [r7, #4]
 802ceb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802ceba:	6878      	ldr	r0, [r7, #4]
 802cebc:	f001 fbee 	bl	802e69c <USB_CoreReset>
 802cec0:	4603      	mov	r3, r0
 802cec2:	73fb      	strb	r3, [r7, #15]
 802cec4:	e01a      	b.n	802cefc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802cec6:	687b      	ldr	r3, [r7, #4]
 802cec8:	68db      	ldr	r3, [r3, #12]
 802ceca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802cece:	687b      	ldr	r3, [r7, #4]
 802ced0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802ced2:	6878      	ldr	r0, [r7, #4]
 802ced4:	f001 fbe2 	bl	802e69c <USB_CoreReset>
 802ced8:	4603      	mov	r3, r0
 802ceda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802cedc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802cede:	2b00      	cmp	r3, #0
 802cee0:	d106      	bne.n	802cef0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802cee2:	687b      	ldr	r3, [r7, #4]
 802cee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cee6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802ceea:	687b      	ldr	r3, [r7, #4]
 802ceec:	639a      	str	r2, [r3, #56]	; 0x38
 802ceee:	e005      	b.n	802cefc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802cef0:	687b      	ldr	r3, [r7, #4]
 802cef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cef4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802cef8:	687b      	ldr	r3, [r7, #4]
 802cefa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802cefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cefe:	2b01      	cmp	r3, #1
 802cf00:	d10b      	bne.n	802cf1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802cf02:	687b      	ldr	r3, [r7, #4]
 802cf04:	689b      	ldr	r3, [r3, #8]
 802cf06:	f043 0206 	orr.w	r2, r3, #6
 802cf0a:	687b      	ldr	r3, [r7, #4]
 802cf0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802cf0e:	687b      	ldr	r3, [r7, #4]
 802cf10:	689b      	ldr	r3, [r3, #8]
 802cf12:	f043 0220 	orr.w	r2, r3, #32
 802cf16:	687b      	ldr	r3, [r7, #4]
 802cf18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802cf1a:	7bfb      	ldrb	r3, [r7, #15]
}
 802cf1c:	4618      	mov	r0, r3
 802cf1e:	3710      	adds	r7, #16
 802cf20:	46bd      	mov	sp, r7
 802cf22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802cf26:	b004      	add	sp, #16
 802cf28:	4770      	bx	lr
	...

0802cf2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 802cf2c:	b480      	push	{r7}
 802cf2e:	b087      	sub	sp, #28
 802cf30:	af00      	add	r7, sp, #0
 802cf32:	60f8      	str	r0, [r7, #12]
 802cf34:	60b9      	str	r1, [r7, #8]
 802cf36:	4613      	mov	r3, r2
 802cf38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 802cf3a:	79fb      	ldrb	r3, [r7, #7]
 802cf3c:	2b02      	cmp	r3, #2
 802cf3e:	d165      	bne.n	802d00c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 802cf40:	68bb      	ldr	r3, [r7, #8]
 802cf42:	4a41      	ldr	r2, [pc, #260]	; (802d048 <USB_SetTurnaroundTime+0x11c>)
 802cf44:	4293      	cmp	r3, r2
 802cf46:	d906      	bls.n	802cf56 <USB_SetTurnaroundTime+0x2a>
 802cf48:	68bb      	ldr	r3, [r7, #8]
 802cf4a:	4a40      	ldr	r2, [pc, #256]	; (802d04c <USB_SetTurnaroundTime+0x120>)
 802cf4c:	4293      	cmp	r3, r2
 802cf4e:	d202      	bcs.n	802cf56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 802cf50:	230f      	movs	r3, #15
 802cf52:	617b      	str	r3, [r7, #20]
 802cf54:	e062      	b.n	802d01c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 802cf56:	68bb      	ldr	r3, [r7, #8]
 802cf58:	4a3c      	ldr	r2, [pc, #240]	; (802d04c <USB_SetTurnaroundTime+0x120>)
 802cf5a:	4293      	cmp	r3, r2
 802cf5c:	d306      	bcc.n	802cf6c <USB_SetTurnaroundTime+0x40>
 802cf5e:	68bb      	ldr	r3, [r7, #8]
 802cf60:	4a3b      	ldr	r2, [pc, #236]	; (802d050 <USB_SetTurnaroundTime+0x124>)
 802cf62:	4293      	cmp	r3, r2
 802cf64:	d202      	bcs.n	802cf6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 802cf66:	230e      	movs	r3, #14
 802cf68:	617b      	str	r3, [r7, #20]
 802cf6a:	e057      	b.n	802d01c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 802cf6c:	68bb      	ldr	r3, [r7, #8]
 802cf6e:	4a38      	ldr	r2, [pc, #224]	; (802d050 <USB_SetTurnaroundTime+0x124>)
 802cf70:	4293      	cmp	r3, r2
 802cf72:	d306      	bcc.n	802cf82 <USB_SetTurnaroundTime+0x56>
 802cf74:	68bb      	ldr	r3, [r7, #8]
 802cf76:	4a37      	ldr	r2, [pc, #220]	; (802d054 <USB_SetTurnaroundTime+0x128>)
 802cf78:	4293      	cmp	r3, r2
 802cf7a:	d202      	bcs.n	802cf82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 802cf7c:	230d      	movs	r3, #13
 802cf7e:	617b      	str	r3, [r7, #20]
 802cf80:	e04c      	b.n	802d01c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 802cf82:	68bb      	ldr	r3, [r7, #8]
 802cf84:	4a33      	ldr	r2, [pc, #204]	; (802d054 <USB_SetTurnaroundTime+0x128>)
 802cf86:	4293      	cmp	r3, r2
 802cf88:	d306      	bcc.n	802cf98 <USB_SetTurnaroundTime+0x6c>
 802cf8a:	68bb      	ldr	r3, [r7, #8]
 802cf8c:	4a32      	ldr	r2, [pc, #200]	; (802d058 <USB_SetTurnaroundTime+0x12c>)
 802cf8e:	4293      	cmp	r3, r2
 802cf90:	d802      	bhi.n	802cf98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 802cf92:	230c      	movs	r3, #12
 802cf94:	617b      	str	r3, [r7, #20]
 802cf96:	e041      	b.n	802d01c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 802cf98:	68bb      	ldr	r3, [r7, #8]
 802cf9a:	4a2f      	ldr	r2, [pc, #188]	; (802d058 <USB_SetTurnaroundTime+0x12c>)
 802cf9c:	4293      	cmp	r3, r2
 802cf9e:	d906      	bls.n	802cfae <USB_SetTurnaroundTime+0x82>
 802cfa0:	68bb      	ldr	r3, [r7, #8]
 802cfa2:	4a2e      	ldr	r2, [pc, #184]	; (802d05c <USB_SetTurnaroundTime+0x130>)
 802cfa4:	4293      	cmp	r3, r2
 802cfa6:	d802      	bhi.n	802cfae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 802cfa8:	230b      	movs	r3, #11
 802cfaa:	617b      	str	r3, [r7, #20]
 802cfac:	e036      	b.n	802d01c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 802cfae:	68bb      	ldr	r3, [r7, #8]
 802cfb0:	4a2a      	ldr	r2, [pc, #168]	; (802d05c <USB_SetTurnaroundTime+0x130>)
 802cfb2:	4293      	cmp	r3, r2
 802cfb4:	d906      	bls.n	802cfc4 <USB_SetTurnaroundTime+0x98>
 802cfb6:	68bb      	ldr	r3, [r7, #8]
 802cfb8:	4a29      	ldr	r2, [pc, #164]	; (802d060 <USB_SetTurnaroundTime+0x134>)
 802cfba:	4293      	cmp	r3, r2
 802cfbc:	d802      	bhi.n	802cfc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 802cfbe:	230a      	movs	r3, #10
 802cfc0:	617b      	str	r3, [r7, #20]
 802cfc2:	e02b      	b.n	802d01c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 802cfc4:	68bb      	ldr	r3, [r7, #8]
 802cfc6:	4a26      	ldr	r2, [pc, #152]	; (802d060 <USB_SetTurnaroundTime+0x134>)
 802cfc8:	4293      	cmp	r3, r2
 802cfca:	d906      	bls.n	802cfda <USB_SetTurnaroundTime+0xae>
 802cfcc:	68bb      	ldr	r3, [r7, #8]
 802cfce:	4a25      	ldr	r2, [pc, #148]	; (802d064 <USB_SetTurnaroundTime+0x138>)
 802cfd0:	4293      	cmp	r3, r2
 802cfd2:	d202      	bcs.n	802cfda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 802cfd4:	2309      	movs	r3, #9
 802cfd6:	617b      	str	r3, [r7, #20]
 802cfd8:	e020      	b.n	802d01c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 802cfda:	68bb      	ldr	r3, [r7, #8]
 802cfdc:	4a21      	ldr	r2, [pc, #132]	; (802d064 <USB_SetTurnaroundTime+0x138>)
 802cfde:	4293      	cmp	r3, r2
 802cfe0:	d306      	bcc.n	802cff0 <USB_SetTurnaroundTime+0xc4>
 802cfe2:	68bb      	ldr	r3, [r7, #8]
 802cfe4:	4a20      	ldr	r2, [pc, #128]	; (802d068 <USB_SetTurnaroundTime+0x13c>)
 802cfe6:	4293      	cmp	r3, r2
 802cfe8:	d802      	bhi.n	802cff0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 802cfea:	2308      	movs	r3, #8
 802cfec:	617b      	str	r3, [r7, #20]
 802cfee:	e015      	b.n	802d01c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 802cff0:	68bb      	ldr	r3, [r7, #8]
 802cff2:	4a1d      	ldr	r2, [pc, #116]	; (802d068 <USB_SetTurnaroundTime+0x13c>)
 802cff4:	4293      	cmp	r3, r2
 802cff6:	d906      	bls.n	802d006 <USB_SetTurnaroundTime+0xda>
 802cff8:	68bb      	ldr	r3, [r7, #8]
 802cffa:	4a1c      	ldr	r2, [pc, #112]	; (802d06c <USB_SetTurnaroundTime+0x140>)
 802cffc:	4293      	cmp	r3, r2
 802cffe:	d202      	bcs.n	802d006 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 802d000:	2307      	movs	r3, #7
 802d002:	617b      	str	r3, [r7, #20]
 802d004:	e00a      	b.n	802d01c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 802d006:	2306      	movs	r3, #6
 802d008:	617b      	str	r3, [r7, #20]
 802d00a:	e007      	b.n	802d01c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 802d00c:	79fb      	ldrb	r3, [r7, #7]
 802d00e:	2b00      	cmp	r3, #0
 802d010:	d102      	bne.n	802d018 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 802d012:	2309      	movs	r3, #9
 802d014:	617b      	str	r3, [r7, #20]
 802d016:	e001      	b.n	802d01c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 802d018:	2309      	movs	r3, #9
 802d01a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 802d01c:	68fb      	ldr	r3, [r7, #12]
 802d01e:	68db      	ldr	r3, [r3, #12]
 802d020:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 802d024:	68fb      	ldr	r3, [r7, #12]
 802d026:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 802d028:	68fb      	ldr	r3, [r7, #12]
 802d02a:	68da      	ldr	r2, [r3, #12]
 802d02c:	697b      	ldr	r3, [r7, #20]
 802d02e:	029b      	lsls	r3, r3, #10
 802d030:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 802d034:	431a      	orrs	r2, r3
 802d036:	68fb      	ldr	r3, [r7, #12]
 802d038:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802d03a:	2300      	movs	r3, #0
}
 802d03c:	4618      	mov	r0, r3
 802d03e:	371c      	adds	r7, #28
 802d040:	46bd      	mov	sp, r7
 802d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d046:	4770      	bx	lr
 802d048:	00d8acbf 	.word	0x00d8acbf
 802d04c:	00e4e1c0 	.word	0x00e4e1c0
 802d050:	00f42400 	.word	0x00f42400
 802d054:	01067380 	.word	0x01067380
 802d058:	011a499f 	.word	0x011a499f
 802d05c:	01312cff 	.word	0x01312cff
 802d060:	014ca43f 	.word	0x014ca43f
 802d064:	016e3600 	.word	0x016e3600
 802d068:	01a6ab1f 	.word	0x01a6ab1f
 802d06c:	01e84800 	.word	0x01e84800

0802d070 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802d070:	b480      	push	{r7}
 802d072:	b083      	sub	sp, #12
 802d074:	af00      	add	r7, sp, #0
 802d076:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802d078:	687b      	ldr	r3, [r7, #4]
 802d07a:	689b      	ldr	r3, [r3, #8]
 802d07c:	f043 0201 	orr.w	r2, r3, #1
 802d080:	687b      	ldr	r3, [r7, #4]
 802d082:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802d084:	2300      	movs	r3, #0
}
 802d086:	4618      	mov	r0, r3
 802d088:	370c      	adds	r7, #12
 802d08a:	46bd      	mov	sp, r7
 802d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d090:	4770      	bx	lr

0802d092 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802d092:	b480      	push	{r7}
 802d094:	b083      	sub	sp, #12
 802d096:	af00      	add	r7, sp, #0
 802d098:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802d09a:	687b      	ldr	r3, [r7, #4]
 802d09c:	689b      	ldr	r3, [r3, #8]
 802d09e:	f023 0201 	bic.w	r2, r3, #1
 802d0a2:	687b      	ldr	r3, [r7, #4]
 802d0a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802d0a6:	2300      	movs	r3, #0
}
 802d0a8:	4618      	mov	r0, r3
 802d0aa:	370c      	adds	r7, #12
 802d0ac:	46bd      	mov	sp, r7
 802d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d0b2:	4770      	bx	lr

0802d0b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802d0b4:	b580      	push	{r7, lr}
 802d0b6:	b084      	sub	sp, #16
 802d0b8:	af00      	add	r7, sp, #0
 802d0ba:	6078      	str	r0, [r7, #4]
 802d0bc:	460b      	mov	r3, r1
 802d0be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802d0c0:	2300      	movs	r3, #0
 802d0c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802d0c4:	687b      	ldr	r3, [r7, #4]
 802d0c6:	68db      	ldr	r3, [r3, #12]
 802d0c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802d0cc:	687b      	ldr	r3, [r7, #4]
 802d0ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802d0d0:	78fb      	ldrb	r3, [r7, #3]
 802d0d2:	2b01      	cmp	r3, #1
 802d0d4:	d115      	bne.n	802d102 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802d0d6:	687b      	ldr	r3, [r7, #4]
 802d0d8:	68db      	ldr	r3, [r3, #12]
 802d0da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802d0de:	687b      	ldr	r3, [r7, #4]
 802d0e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802d0e2:	2001      	movs	r0, #1
 802d0e4:	f7fa fdf2 	bl	8027ccc <HAL_Delay>
      ms++;
 802d0e8:	68fb      	ldr	r3, [r7, #12]
 802d0ea:	3301      	adds	r3, #1
 802d0ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802d0ee:	6878      	ldr	r0, [r7, #4]
 802d0f0:	f001 fa45 	bl	802e57e <USB_GetMode>
 802d0f4:	4603      	mov	r3, r0
 802d0f6:	2b01      	cmp	r3, #1
 802d0f8:	d01e      	beq.n	802d138 <USB_SetCurrentMode+0x84>
 802d0fa:	68fb      	ldr	r3, [r7, #12]
 802d0fc:	2b31      	cmp	r3, #49	; 0x31
 802d0fe:	d9f0      	bls.n	802d0e2 <USB_SetCurrentMode+0x2e>
 802d100:	e01a      	b.n	802d138 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802d102:	78fb      	ldrb	r3, [r7, #3]
 802d104:	2b00      	cmp	r3, #0
 802d106:	d115      	bne.n	802d134 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802d108:	687b      	ldr	r3, [r7, #4]
 802d10a:	68db      	ldr	r3, [r3, #12]
 802d10c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802d110:	687b      	ldr	r3, [r7, #4]
 802d112:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802d114:	2001      	movs	r0, #1
 802d116:	f7fa fdd9 	bl	8027ccc <HAL_Delay>
      ms++;
 802d11a:	68fb      	ldr	r3, [r7, #12]
 802d11c:	3301      	adds	r3, #1
 802d11e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802d120:	6878      	ldr	r0, [r7, #4]
 802d122:	f001 fa2c 	bl	802e57e <USB_GetMode>
 802d126:	4603      	mov	r3, r0
 802d128:	2b00      	cmp	r3, #0
 802d12a:	d005      	beq.n	802d138 <USB_SetCurrentMode+0x84>
 802d12c:	68fb      	ldr	r3, [r7, #12]
 802d12e:	2b31      	cmp	r3, #49	; 0x31
 802d130:	d9f0      	bls.n	802d114 <USB_SetCurrentMode+0x60>
 802d132:	e001      	b.n	802d138 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802d134:	2301      	movs	r3, #1
 802d136:	e005      	b.n	802d144 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802d138:	68fb      	ldr	r3, [r7, #12]
 802d13a:	2b32      	cmp	r3, #50	; 0x32
 802d13c:	d101      	bne.n	802d142 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802d13e:	2301      	movs	r3, #1
 802d140:	e000      	b.n	802d144 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802d142:	2300      	movs	r3, #0
}
 802d144:	4618      	mov	r0, r3
 802d146:	3710      	adds	r7, #16
 802d148:	46bd      	mov	sp, r7
 802d14a:	bd80      	pop	{r7, pc}

0802d14c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802d14c:	b084      	sub	sp, #16
 802d14e:	b580      	push	{r7, lr}
 802d150:	b086      	sub	sp, #24
 802d152:	af00      	add	r7, sp, #0
 802d154:	6078      	str	r0, [r7, #4]
 802d156:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802d15a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802d15e:	2300      	movs	r3, #0
 802d160:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d162:	687b      	ldr	r3, [r7, #4]
 802d164:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 802d166:	2300      	movs	r3, #0
 802d168:	613b      	str	r3, [r7, #16]
 802d16a:	e009      	b.n	802d180 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 802d16c:	687a      	ldr	r2, [r7, #4]
 802d16e:	693b      	ldr	r3, [r7, #16]
 802d170:	3340      	adds	r3, #64	; 0x40
 802d172:	009b      	lsls	r3, r3, #2
 802d174:	4413      	add	r3, r2
 802d176:	2200      	movs	r2, #0
 802d178:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 802d17a:	693b      	ldr	r3, [r7, #16]
 802d17c:	3301      	adds	r3, #1
 802d17e:	613b      	str	r3, [r7, #16]
 802d180:	693b      	ldr	r3, [r7, #16]
 802d182:	2b0e      	cmp	r3, #14
 802d184:	d9f2      	bls.n	802d16c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 802d186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d188:	2b00      	cmp	r3, #0
 802d18a:	d11c      	bne.n	802d1c6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802d18c:	68fb      	ldr	r3, [r7, #12]
 802d18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d192:	685b      	ldr	r3, [r3, #4]
 802d194:	68fa      	ldr	r2, [r7, #12]
 802d196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802d19a:	f043 0302 	orr.w	r3, r3, #2
 802d19e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802d1a0:	687b      	ldr	r3, [r7, #4]
 802d1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d1a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802d1a8:	687b      	ldr	r3, [r7, #4]
 802d1aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802d1ac:	687b      	ldr	r3, [r7, #4]
 802d1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d1b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802d1b4:	687b      	ldr	r3, [r7, #4]
 802d1b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802d1b8:	687b      	ldr	r3, [r7, #4]
 802d1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d1bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802d1c0:	687b      	ldr	r3, [r7, #4]
 802d1c2:	639a      	str	r2, [r3, #56]	; 0x38
 802d1c4:	e00b      	b.n	802d1de <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 802d1c6:	687b      	ldr	r3, [r7, #4]
 802d1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d1ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 802d1ce:	687b      	ldr	r3, [r7, #4]
 802d1d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 802d1d2:	687b      	ldr	r3, [r7, #4]
 802d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d1d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802d1da:	687b      	ldr	r3, [r7, #4]
 802d1dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802d1de:	68fb      	ldr	r3, [r7, #12]
 802d1e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802d1e4:	461a      	mov	r2, r3
 802d1e6:	2300      	movs	r3, #0
 802d1e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 802d1ea:	68fb      	ldr	r3, [r7, #12]
 802d1ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d1f0:	4619      	mov	r1, r3
 802d1f2:	68fb      	ldr	r3, [r7, #12]
 802d1f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d1f8:	461a      	mov	r2, r3
 802d1fa:	680b      	ldr	r3, [r1, #0]
 802d1fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802d1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d200:	2b01      	cmp	r3, #1
 802d202:	d10c      	bne.n	802d21e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 802d204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d206:	2b00      	cmp	r3, #0
 802d208:	d104      	bne.n	802d214 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 802d20a:	2100      	movs	r1, #0
 802d20c:	6878      	ldr	r0, [r7, #4]
 802d20e:	f000 f965 	bl	802d4dc <USB_SetDevSpeed>
 802d212:	e008      	b.n	802d226 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 802d214:	2101      	movs	r1, #1
 802d216:	6878      	ldr	r0, [r7, #4]
 802d218:	f000 f960 	bl	802d4dc <USB_SetDevSpeed>
 802d21c:	e003      	b.n	802d226 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 802d21e:	2103      	movs	r1, #3
 802d220:	6878      	ldr	r0, [r7, #4]
 802d222:	f000 f95b 	bl	802d4dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802d226:	2110      	movs	r1, #16
 802d228:	6878      	ldr	r0, [r7, #4]
 802d22a:	f000 f8f3 	bl	802d414 <USB_FlushTxFifo>
 802d22e:	4603      	mov	r3, r0
 802d230:	2b00      	cmp	r3, #0
 802d232:	d001      	beq.n	802d238 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 802d234:	2301      	movs	r3, #1
 802d236:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802d238:	6878      	ldr	r0, [r7, #4]
 802d23a:	f000 f91f 	bl	802d47c <USB_FlushRxFifo>
 802d23e:	4603      	mov	r3, r0
 802d240:	2b00      	cmp	r3, #0
 802d242:	d001      	beq.n	802d248 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 802d244:	2301      	movs	r3, #1
 802d246:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 802d248:	68fb      	ldr	r3, [r7, #12]
 802d24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d24e:	461a      	mov	r2, r3
 802d250:	2300      	movs	r3, #0
 802d252:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 802d254:	68fb      	ldr	r3, [r7, #12]
 802d256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d25a:	461a      	mov	r2, r3
 802d25c:	2300      	movs	r3, #0
 802d25e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 802d260:	68fb      	ldr	r3, [r7, #12]
 802d262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d266:	461a      	mov	r2, r3
 802d268:	2300      	movs	r3, #0
 802d26a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d26c:	2300      	movs	r3, #0
 802d26e:	613b      	str	r3, [r7, #16]
 802d270:	e043      	b.n	802d2fa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802d272:	693b      	ldr	r3, [r7, #16]
 802d274:	015a      	lsls	r2, r3, #5
 802d276:	68fb      	ldr	r3, [r7, #12]
 802d278:	4413      	add	r3, r2
 802d27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d27e:	681b      	ldr	r3, [r3, #0]
 802d280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d288:	d118      	bne.n	802d2bc <USB_DevInit+0x170>
    {
      if (i == 0U)
 802d28a:	693b      	ldr	r3, [r7, #16]
 802d28c:	2b00      	cmp	r3, #0
 802d28e:	d10a      	bne.n	802d2a6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 802d290:	693b      	ldr	r3, [r7, #16]
 802d292:	015a      	lsls	r2, r3, #5
 802d294:	68fb      	ldr	r3, [r7, #12]
 802d296:	4413      	add	r3, r2
 802d298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d29c:	461a      	mov	r2, r3
 802d29e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802d2a2:	6013      	str	r3, [r2, #0]
 802d2a4:	e013      	b.n	802d2ce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 802d2a6:	693b      	ldr	r3, [r7, #16]
 802d2a8:	015a      	lsls	r2, r3, #5
 802d2aa:	68fb      	ldr	r3, [r7, #12]
 802d2ac:	4413      	add	r3, r2
 802d2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d2b2:	461a      	mov	r2, r3
 802d2b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802d2b8:	6013      	str	r3, [r2, #0]
 802d2ba:	e008      	b.n	802d2ce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 802d2bc:	693b      	ldr	r3, [r7, #16]
 802d2be:	015a      	lsls	r2, r3, #5
 802d2c0:	68fb      	ldr	r3, [r7, #12]
 802d2c2:	4413      	add	r3, r2
 802d2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d2c8:	461a      	mov	r2, r3
 802d2ca:	2300      	movs	r3, #0
 802d2cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 802d2ce:	693b      	ldr	r3, [r7, #16]
 802d2d0:	015a      	lsls	r2, r3, #5
 802d2d2:	68fb      	ldr	r3, [r7, #12]
 802d2d4:	4413      	add	r3, r2
 802d2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d2da:	461a      	mov	r2, r3
 802d2dc:	2300      	movs	r3, #0
 802d2de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 802d2e0:	693b      	ldr	r3, [r7, #16]
 802d2e2:	015a      	lsls	r2, r3, #5
 802d2e4:	68fb      	ldr	r3, [r7, #12]
 802d2e6:	4413      	add	r3, r2
 802d2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d2ec:	461a      	mov	r2, r3
 802d2ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802d2f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d2f4:	693b      	ldr	r3, [r7, #16]
 802d2f6:	3301      	adds	r3, #1
 802d2f8:	613b      	str	r3, [r7, #16]
 802d2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d2fc:	693a      	ldr	r2, [r7, #16]
 802d2fe:	429a      	cmp	r2, r3
 802d300:	d3b7      	bcc.n	802d272 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d302:	2300      	movs	r3, #0
 802d304:	613b      	str	r3, [r7, #16]
 802d306:	e043      	b.n	802d390 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802d308:	693b      	ldr	r3, [r7, #16]
 802d30a:	015a      	lsls	r2, r3, #5
 802d30c:	68fb      	ldr	r3, [r7, #12]
 802d30e:	4413      	add	r3, r2
 802d310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d314:	681b      	ldr	r3, [r3, #0]
 802d316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d31a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d31e:	d118      	bne.n	802d352 <USB_DevInit+0x206>
    {
      if (i == 0U)
 802d320:	693b      	ldr	r3, [r7, #16]
 802d322:	2b00      	cmp	r3, #0
 802d324:	d10a      	bne.n	802d33c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 802d326:	693b      	ldr	r3, [r7, #16]
 802d328:	015a      	lsls	r2, r3, #5
 802d32a:	68fb      	ldr	r3, [r7, #12]
 802d32c:	4413      	add	r3, r2
 802d32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d332:	461a      	mov	r2, r3
 802d334:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802d338:	6013      	str	r3, [r2, #0]
 802d33a:	e013      	b.n	802d364 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 802d33c:	693b      	ldr	r3, [r7, #16]
 802d33e:	015a      	lsls	r2, r3, #5
 802d340:	68fb      	ldr	r3, [r7, #12]
 802d342:	4413      	add	r3, r2
 802d344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d348:	461a      	mov	r2, r3
 802d34a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802d34e:	6013      	str	r3, [r2, #0]
 802d350:	e008      	b.n	802d364 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 802d352:	693b      	ldr	r3, [r7, #16]
 802d354:	015a      	lsls	r2, r3, #5
 802d356:	68fb      	ldr	r3, [r7, #12]
 802d358:	4413      	add	r3, r2
 802d35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d35e:	461a      	mov	r2, r3
 802d360:	2300      	movs	r3, #0
 802d362:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 802d364:	693b      	ldr	r3, [r7, #16]
 802d366:	015a      	lsls	r2, r3, #5
 802d368:	68fb      	ldr	r3, [r7, #12]
 802d36a:	4413      	add	r3, r2
 802d36c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d370:	461a      	mov	r2, r3
 802d372:	2300      	movs	r3, #0
 802d374:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 802d376:	693b      	ldr	r3, [r7, #16]
 802d378:	015a      	lsls	r2, r3, #5
 802d37a:	68fb      	ldr	r3, [r7, #12]
 802d37c:	4413      	add	r3, r2
 802d37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d382:	461a      	mov	r2, r3
 802d384:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802d388:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d38a:	693b      	ldr	r3, [r7, #16]
 802d38c:	3301      	adds	r3, #1
 802d38e:	613b      	str	r3, [r7, #16]
 802d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d392:	693a      	ldr	r2, [r7, #16]
 802d394:	429a      	cmp	r2, r3
 802d396:	d3b7      	bcc.n	802d308 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 802d398:	68fb      	ldr	r3, [r7, #12]
 802d39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d39e:	691b      	ldr	r3, [r3, #16]
 802d3a0:	68fa      	ldr	r2, [r7, #12]
 802d3a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802d3a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802d3aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802d3ac:	687b      	ldr	r3, [r7, #4]
 802d3ae:	2200      	movs	r2, #0
 802d3b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 802d3b2:	687b      	ldr	r3, [r7, #4]
 802d3b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 802d3b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802d3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d3bc:	2b00      	cmp	r3, #0
 802d3be:	d105      	bne.n	802d3cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802d3c0:	687b      	ldr	r3, [r7, #4]
 802d3c2:	699b      	ldr	r3, [r3, #24]
 802d3c4:	f043 0210 	orr.w	r2, r3, #16
 802d3c8:	687b      	ldr	r3, [r7, #4]
 802d3ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 802d3cc:	687b      	ldr	r3, [r7, #4]
 802d3ce:	699a      	ldr	r2, [r3, #24]
 802d3d0:	4b0f      	ldr	r3, [pc, #60]	; (802d410 <USB_DevInit+0x2c4>)
 802d3d2:	4313      	orrs	r3, r2
 802d3d4:	687a      	ldr	r2, [r7, #4]
 802d3d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 802d3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802d3da:	2b00      	cmp	r3, #0
 802d3dc:	d005      	beq.n	802d3ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 802d3de:	687b      	ldr	r3, [r7, #4]
 802d3e0:	699b      	ldr	r3, [r3, #24]
 802d3e2:	f043 0208 	orr.w	r2, r3, #8
 802d3e6:	687b      	ldr	r3, [r7, #4]
 802d3e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 802d3ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d3ec:	2b01      	cmp	r3, #1
 802d3ee:	d107      	bne.n	802d400 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 802d3f0:	687b      	ldr	r3, [r7, #4]
 802d3f2:	699b      	ldr	r3, [r3, #24]
 802d3f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d3f8:	f043 0304 	orr.w	r3, r3, #4
 802d3fc:	687a      	ldr	r2, [r7, #4]
 802d3fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 802d400:	7dfb      	ldrb	r3, [r7, #23]
}
 802d402:	4618      	mov	r0, r3
 802d404:	3718      	adds	r7, #24
 802d406:	46bd      	mov	sp, r7
 802d408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802d40c:	b004      	add	sp, #16
 802d40e:	4770      	bx	lr
 802d410:	803c3800 	.word	0x803c3800

0802d414 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802d414:	b480      	push	{r7}
 802d416:	b085      	sub	sp, #20
 802d418:	af00      	add	r7, sp, #0
 802d41a:	6078      	str	r0, [r7, #4]
 802d41c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802d41e:	2300      	movs	r3, #0
 802d420:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802d422:	68fb      	ldr	r3, [r7, #12]
 802d424:	3301      	adds	r3, #1
 802d426:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802d428:	68fb      	ldr	r3, [r7, #12]
 802d42a:	4a13      	ldr	r2, [pc, #76]	; (802d478 <USB_FlushTxFifo+0x64>)
 802d42c:	4293      	cmp	r3, r2
 802d42e:	d901      	bls.n	802d434 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802d430:	2303      	movs	r3, #3
 802d432:	e01b      	b.n	802d46c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802d434:	687b      	ldr	r3, [r7, #4]
 802d436:	691b      	ldr	r3, [r3, #16]
 802d438:	2b00      	cmp	r3, #0
 802d43a:	daf2      	bge.n	802d422 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802d43c:	2300      	movs	r3, #0
 802d43e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802d440:	683b      	ldr	r3, [r7, #0]
 802d442:	019b      	lsls	r3, r3, #6
 802d444:	f043 0220 	orr.w	r2, r3, #32
 802d448:	687b      	ldr	r3, [r7, #4]
 802d44a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802d44c:	68fb      	ldr	r3, [r7, #12]
 802d44e:	3301      	adds	r3, #1
 802d450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802d452:	68fb      	ldr	r3, [r7, #12]
 802d454:	4a08      	ldr	r2, [pc, #32]	; (802d478 <USB_FlushTxFifo+0x64>)
 802d456:	4293      	cmp	r3, r2
 802d458:	d901      	bls.n	802d45e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802d45a:	2303      	movs	r3, #3
 802d45c:	e006      	b.n	802d46c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802d45e:	687b      	ldr	r3, [r7, #4]
 802d460:	691b      	ldr	r3, [r3, #16]
 802d462:	f003 0320 	and.w	r3, r3, #32
 802d466:	2b20      	cmp	r3, #32
 802d468:	d0f0      	beq.n	802d44c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802d46a:	2300      	movs	r3, #0
}
 802d46c:	4618      	mov	r0, r3
 802d46e:	3714      	adds	r7, #20
 802d470:	46bd      	mov	sp, r7
 802d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d476:	4770      	bx	lr
 802d478:	00030d40 	.word	0x00030d40

0802d47c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802d47c:	b480      	push	{r7}
 802d47e:	b085      	sub	sp, #20
 802d480:	af00      	add	r7, sp, #0
 802d482:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802d484:	2300      	movs	r3, #0
 802d486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802d488:	68fb      	ldr	r3, [r7, #12]
 802d48a:	3301      	adds	r3, #1
 802d48c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802d48e:	68fb      	ldr	r3, [r7, #12]
 802d490:	4a11      	ldr	r2, [pc, #68]	; (802d4d8 <USB_FlushRxFifo+0x5c>)
 802d492:	4293      	cmp	r3, r2
 802d494:	d901      	bls.n	802d49a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802d496:	2303      	movs	r3, #3
 802d498:	e018      	b.n	802d4cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802d49a:	687b      	ldr	r3, [r7, #4]
 802d49c:	691b      	ldr	r3, [r3, #16]
 802d49e:	2b00      	cmp	r3, #0
 802d4a0:	daf2      	bge.n	802d488 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802d4a2:	2300      	movs	r3, #0
 802d4a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802d4a6:	687b      	ldr	r3, [r7, #4]
 802d4a8:	2210      	movs	r2, #16
 802d4aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802d4ac:	68fb      	ldr	r3, [r7, #12]
 802d4ae:	3301      	adds	r3, #1
 802d4b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802d4b2:	68fb      	ldr	r3, [r7, #12]
 802d4b4:	4a08      	ldr	r2, [pc, #32]	; (802d4d8 <USB_FlushRxFifo+0x5c>)
 802d4b6:	4293      	cmp	r3, r2
 802d4b8:	d901      	bls.n	802d4be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802d4ba:	2303      	movs	r3, #3
 802d4bc:	e006      	b.n	802d4cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802d4be:	687b      	ldr	r3, [r7, #4]
 802d4c0:	691b      	ldr	r3, [r3, #16]
 802d4c2:	f003 0310 	and.w	r3, r3, #16
 802d4c6:	2b10      	cmp	r3, #16
 802d4c8:	d0f0      	beq.n	802d4ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802d4ca:	2300      	movs	r3, #0
}
 802d4cc:	4618      	mov	r0, r3
 802d4ce:	3714      	adds	r7, #20
 802d4d0:	46bd      	mov	sp, r7
 802d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d4d6:	4770      	bx	lr
 802d4d8:	00030d40 	.word	0x00030d40

0802d4dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 802d4dc:	b480      	push	{r7}
 802d4de:	b085      	sub	sp, #20
 802d4e0:	af00      	add	r7, sp, #0
 802d4e2:	6078      	str	r0, [r7, #4]
 802d4e4:	460b      	mov	r3, r1
 802d4e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d4e8:	687b      	ldr	r3, [r7, #4]
 802d4ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 802d4ec:	68fb      	ldr	r3, [r7, #12]
 802d4ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d4f2:	681a      	ldr	r2, [r3, #0]
 802d4f4:	78fb      	ldrb	r3, [r7, #3]
 802d4f6:	68f9      	ldr	r1, [r7, #12]
 802d4f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d4fc:	4313      	orrs	r3, r2
 802d4fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 802d500:	2300      	movs	r3, #0
}
 802d502:	4618      	mov	r0, r3
 802d504:	3714      	adds	r7, #20
 802d506:	46bd      	mov	sp, r7
 802d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d50c:	4770      	bx	lr

0802d50e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802d50e:	b480      	push	{r7}
 802d510:	b087      	sub	sp, #28
 802d512:	af00      	add	r7, sp, #0
 802d514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d516:	687b      	ldr	r3, [r7, #4]
 802d518:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 802d51a:	693b      	ldr	r3, [r7, #16]
 802d51c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d520:	689b      	ldr	r3, [r3, #8]
 802d522:	f003 0306 	and.w	r3, r3, #6
 802d526:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 802d528:	68fb      	ldr	r3, [r7, #12]
 802d52a:	2b00      	cmp	r3, #0
 802d52c:	d102      	bne.n	802d534 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 802d52e:	2300      	movs	r3, #0
 802d530:	75fb      	strb	r3, [r7, #23]
 802d532:	e00a      	b.n	802d54a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 802d534:	68fb      	ldr	r3, [r7, #12]
 802d536:	2b02      	cmp	r3, #2
 802d538:	d002      	beq.n	802d540 <USB_GetDevSpeed+0x32>
 802d53a:	68fb      	ldr	r3, [r7, #12]
 802d53c:	2b06      	cmp	r3, #6
 802d53e:	d102      	bne.n	802d546 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 802d540:	2302      	movs	r3, #2
 802d542:	75fb      	strb	r3, [r7, #23]
 802d544:	e001      	b.n	802d54a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 802d546:	230f      	movs	r3, #15
 802d548:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 802d54a:	7dfb      	ldrb	r3, [r7, #23]
}
 802d54c:	4618      	mov	r0, r3
 802d54e:	371c      	adds	r7, #28
 802d550:	46bd      	mov	sp, r7
 802d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d556:	4770      	bx	lr

0802d558 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802d558:	b480      	push	{r7}
 802d55a:	b085      	sub	sp, #20
 802d55c:	af00      	add	r7, sp, #0
 802d55e:	6078      	str	r0, [r7, #4]
 802d560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d562:	687b      	ldr	r3, [r7, #4]
 802d564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802d566:	683b      	ldr	r3, [r7, #0]
 802d568:	781b      	ldrb	r3, [r3, #0]
 802d56a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802d56c:	683b      	ldr	r3, [r7, #0]
 802d56e:	785b      	ldrb	r3, [r3, #1]
 802d570:	2b01      	cmp	r3, #1
 802d572:	d13a      	bne.n	802d5ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 802d574:	68fb      	ldr	r3, [r7, #12]
 802d576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d57a:	69da      	ldr	r2, [r3, #28]
 802d57c:	683b      	ldr	r3, [r7, #0]
 802d57e:	781b      	ldrb	r3, [r3, #0]
 802d580:	f003 030f 	and.w	r3, r3, #15
 802d584:	2101      	movs	r1, #1
 802d586:	fa01 f303 	lsl.w	r3, r1, r3
 802d58a:	b29b      	uxth	r3, r3
 802d58c:	68f9      	ldr	r1, [r7, #12]
 802d58e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d592:	4313      	orrs	r3, r2
 802d594:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 802d596:	68bb      	ldr	r3, [r7, #8]
 802d598:	015a      	lsls	r2, r3, #5
 802d59a:	68fb      	ldr	r3, [r7, #12]
 802d59c:	4413      	add	r3, r2
 802d59e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d5a2:	681b      	ldr	r3, [r3, #0]
 802d5a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d5a8:	2b00      	cmp	r3, #0
 802d5aa:	d155      	bne.n	802d658 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802d5ac:	68bb      	ldr	r3, [r7, #8]
 802d5ae:	015a      	lsls	r2, r3, #5
 802d5b0:	68fb      	ldr	r3, [r7, #12]
 802d5b2:	4413      	add	r3, r2
 802d5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d5b8:	681a      	ldr	r2, [r3, #0]
 802d5ba:	683b      	ldr	r3, [r7, #0]
 802d5bc:	68db      	ldr	r3, [r3, #12]
 802d5be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802d5c2:	683b      	ldr	r3, [r7, #0]
 802d5c4:	791b      	ldrb	r3, [r3, #4]
 802d5c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802d5c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802d5ca:	68bb      	ldr	r3, [r7, #8]
 802d5cc:	059b      	lsls	r3, r3, #22
 802d5ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802d5d0:	4313      	orrs	r3, r2
 802d5d2:	68ba      	ldr	r2, [r7, #8]
 802d5d4:	0151      	lsls	r1, r2, #5
 802d5d6:	68fa      	ldr	r2, [r7, #12]
 802d5d8:	440a      	add	r2, r1
 802d5da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d5de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d5e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802d5e6:	6013      	str	r3, [r2, #0]
 802d5e8:	e036      	b.n	802d658 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 802d5ea:	68fb      	ldr	r3, [r7, #12]
 802d5ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d5f0:	69da      	ldr	r2, [r3, #28]
 802d5f2:	683b      	ldr	r3, [r7, #0]
 802d5f4:	781b      	ldrb	r3, [r3, #0]
 802d5f6:	f003 030f 	and.w	r3, r3, #15
 802d5fa:	2101      	movs	r1, #1
 802d5fc:	fa01 f303 	lsl.w	r3, r1, r3
 802d600:	041b      	lsls	r3, r3, #16
 802d602:	68f9      	ldr	r1, [r7, #12]
 802d604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d608:	4313      	orrs	r3, r2
 802d60a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 802d60c:	68bb      	ldr	r3, [r7, #8]
 802d60e:	015a      	lsls	r2, r3, #5
 802d610:	68fb      	ldr	r3, [r7, #12]
 802d612:	4413      	add	r3, r2
 802d614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d618:	681b      	ldr	r3, [r3, #0]
 802d61a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d61e:	2b00      	cmp	r3, #0
 802d620:	d11a      	bne.n	802d658 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802d622:	68bb      	ldr	r3, [r7, #8]
 802d624:	015a      	lsls	r2, r3, #5
 802d626:	68fb      	ldr	r3, [r7, #12]
 802d628:	4413      	add	r3, r2
 802d62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d62e:	681a      	ldr	r2, [r3, #0]
 802d630:	683b      	ldr	r3, [r7, #0]
 802d632:	68db      	ldr	r3, [r3, #12]
 802d634:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 802d638:	683b      	ldr	r3, [r7, #0]
 802d63a:	791b      	ldrb	r3, [r3, #4]
 802d63c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802d63e:	430b      	orrs	r3, r1
 802d640:	4313      	orrs	r3, r2
 802d642:	68ba      	ldr	r2, [r7, #8]
 802d644:	0151      	lsls	r1, r2, #5
 802d646:	68fa      	ldr	r2, [r7, #12]
 802d648:	440a      	add	r2, r1
 802d64a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d64e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802d656:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 802d658:	2300      	movs	r3, #0
}
 802d65a:	4618      	mov	r0, r3
 802d65c:	3714      	adds	r7, #20
 802d65e:	46bd      	mov	sp, r7
 802d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d664:	4770      	bx	lr
	...

0802d668 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802d668:	b480      	push	{r7}
 802d66a:	b085      	sub	sp, #20
 802d66c:	af00      	add	r7, sp, #0
 802d66e:	6078      	str	r0, [r7, #4]
 802d670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d672:	687b      	ldr	r3, [r7, #4]
 802d674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802d676:	683b      	ldr	r3, [r7, #0]
 802d678:	781b      	ldrb	r3, [r3, #0]
 802d67a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 802d67c:	683b      	ldr	r3, [r7, #0]
 802d67e:	785b      	ldrb	r3, [r3, #1]
 802d680:	2b01      	cmp	r3, #1
 802d682:	d161      	bne.n	802d748 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802d684:	68bb      	ldr	r3, [r7, #8]
 802d686:	015a      	lsls	r2, r3, #5
 802d688:	68fb      	ldr	r3, [r7, #12]
 802d68a:	4413      	add	r3, r2
 802d68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d690:	681b      	ldr	r3, [r3, #0]
 802d692:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d69a:	d11f      	bne.n	802d6dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 802d69c:	68bb      	ldr	r3, [r7, #8]
 802d69e:	015a      	lsls	r2, r3, #5
 802d6a0:	68fb      	ldr	r3, [r7, #12]
 802d6a2:	4413      	add	r3, r2
 802d6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d6a8:	681b      	ldr	r3, [r3, #0]
 802d6aa:	68ba      	ldr	r2, [r7, #8]
 802d6ac:	0151      	lsls	r1, r2, #5
 802d6ae:	68fa      	ldr	r2, [r7, #12]
 802d6b0:	440a      	add	r2, r1
 802d6b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d6b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802d6ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 802d6bc:	68bb      	ldr	r3, [r7, #8]
 802d6be:	015a      	lsls	r2, r3, #5
 802d6c0:	68fb      	ldr	r3, [r7, #12]
 802d6c2:	4413      	add	r3, r2
 802d6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d6c8:	681b      	ldr	r3, [r3, #0]
 802d6ca:	68ba      	ldr	r2, [r7, #8]
 802d6cc:	0151      	lsls	r1, r2, #5
 802d6ce:	68fa      	ldr	r2, [r7, #12]
 802d6d0:	440a      	add	r2, r1
 802d6d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d6d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d6da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802d6dc:	68fb      	ldr	r3, [r7, #12]
 802d6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d6e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802d6e4:	683b      	ldr	r3, [r7, #0]
 802d6e6:	781b      	ldrb	r3, [r3, #0]
 802d6e8:	f003 030f 	and.w	r3, r3, #15
 802d6ec:	2101      	movs	r1, #1
 802d6ee:	fa01 f303 	lsl.w	r3, r1, r3
 802d6f2:	b29b      	uxth	r3, r3
 802d6f4:	43db      	mvns	r3, r3
 802d6f6:	68f9      	ldr	r1, [r7, #12]
 802d6f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d6fc:	4013      	ands	r3, r2
 802d6fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802d700:	68fb      	ldr	r3, [r7, #12]
 802d702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d706:	69da      	ldr	r2, [r3, #28]
 802d708:	683b      	ldr	r3, [r7, #0]
 802d70a:	781b      	ldrb	r3, [r3, #0]
 802d70c:	f003 030f 	and.w	r3, r3, #15
 802d710:	2101      	movs	r1, #1
 802d712:	fa01 f303 	lsl.w	r3, r1, r3
 802d716:	b29b      	uxth	r3, r3
 802d718:	43db      	mvns	r3, r3
 802d71a:	68f9      	ldr	r1, [r7, #12]
 802d71c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d720:	4013      	ands	r3, r2
 802d722:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 802d724:	68bb      	ldr	r3, [r7, #8]
 802d726:	015a      	lsls	r2, r3, #5
 802d728:	68fb      	ldr	r3, [r7, #12]
 802d72a:	4413      	add	r3, r2
 802d72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d730:	681a      	ldr	r2, [r3, #0]
 802d732:	68bb      	ldr	r3, [r7, #8]
 802d734:	0159      	lsls	r1, r3, #5
 802d736:	68fb      	ldr	r3, [r7, #12]
 802d738:	440b      	add	r3, r1
 802d73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d73e:	4619      	mov	r1, r3
 802d740:	4b35      	ldr	r3, [pc, #212]	; (802d818 <USB_DeactivateEndpoint+0x1b0>)
 802d742:	4013      	ands	r3, r2
 802d744:	600b      	str	r3, [r1, #0]
 802d746:	e060      	b.n	802d80a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802d748:	68bb      	ldr	r3, [r7, #8]
 802d74a:	015a      	lsls	r2, r3, #5
 802d74c:	68fb      	ldr	r3, [r7, #12]
 802d74e:	4413      	add	r3, r2
 802d750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d754:	681b      	ldr	r3, [r3, #0]
 802d756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d75a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d75e:	d11f      	bne.n	802d7a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802d760:	68bb      	ldr	r3, [r7, #8]
 802d762:	015a      	lsls	r2, r3, #5
 802d764:	68fb      	ldr	r3, [r7, #12]
 802d766:	4413      	add	r3, r2
 802d768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d76c:	681b      	ldr	r3, [r3, #0]
 802d76e:	68ba      	ldr	r2, [r7, #8]
 802d770:	0151      	lsls	r1, r2, #5
 802d772:	68fa      	ldr	r2, [r7, #12]
 802d774:	440a      	add	r2, r1
 802d776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d77a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802d77e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 802d780:	68bb      	ldr	r3, [r7, #8]
 802d782:	015a      	lsls	r2, r3, #5
 802d784:	68fb      	ldr	r3, [r7, #12]
 802d786:	4413      	add	r3, r2
 802d788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d78c:	681b      	ldr	r3, [r3, #0]
 802d78e:	68ba      	ldr	r2, [r7, #8]
 802d790:	0151      	lsls	r1, r2, #5
 802d792:	68fa      	ldr	r2, [r7, #12]
 802d794:	440a      	add	r2, r1
 802d796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d79a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d79e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802d7a0:	68fb      	ldr	r3, [r7, #12]
 802d7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d7a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802d7a8:	683b      	ldr	r3, [r7, #0]
 802d7aa:	781b      	ldrb	r3, [r3, #0]
 802d7ac:	f003 030f 	and.w	r3, r3, #15
 802d7b0:	2101      	movs	r1, #1
 802d7b2:	fa01 f303 	lsl.w	r3, r1, r3
 802d7b6:	041b      	lsls	r3, r3, #16
 802d7b8:	43db      	mvns	r3, r3
 802d7ba:	68f9      	ldr	r1, [r7, #12]
 802d7bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d7c0:	4013      	ands	r3, r2
 802d7c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802d7c4:	68fb      	ldr	r3, [r7, #12]
 802d7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d7ca:	69da      	ldr	r2, [r3, #28]
 802d7cc:	683b      	ldr	r3, [r7, #0]
 802d7ce:	781b      	ldrb	r3, [r3, #0]
 802d7d0:	f003 030f 	and.w	r3, r3, #15
 802d7d4:	2101      	movs	r1, #1
 802d7d6:	fa01 f303 	lsl.w	r3, r1, r3
 802d7da:	041b      	lsls	r3, r3, #16
 802d7dc:	43db      	mvns	r3, r3
 802d7de:	68f9      	ldr	r1, [r7, #12]
 802d7e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d7e4:	4013      	ands	r3, r2
 802d7e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 802d7e8:	68bb      	ldr	r3, [r7, #8]
 802d7ea:	015a      	lsls	r2, r3, #5
 802d7ec:	68fb      	ldr	r3, [r7, #12]
 802d7ee:	4413      	add	r3, r2
 802d7f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d7f4:	681a      	ldr	r2, [r3, #0]
 802d7f6:	68bb      	ldr	r3, [r7, #8]
 802d7f8:	0159      	lsls	r1, r3, #5
 802d7fa:	68fb      	ldr	r3, [r7, #12]
 802d7fc:	440b      	add	r3, r1
 802d7fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d802:	4619      	mov	r1, r3
 802d804:	4b05      	ldr	r3, [pc, #20]	; (802d81c <USB_DeactivateEndpoint+0x1b4>)
 802d806:	4013      	ands	r3, r2
 802d808:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 802d80a:	2300      	movs	r3, #0
}
 802d80c:	4618      	mov	r0, r3
 802d80e:	3714      	adds	r7, #20
 802d810:	46bd      	mov	sp, r7
 802d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d816:	4770      	bx	lr
 802d818:	ec337800 	.word	0xec337800
 802d81c:	eff37800 	.word	0xeff37800

0802d820 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802d820:	b580      	push	{r7, lr}
 802d822:	b08a      	sub	sp, #40	; 0x28
 802d824:	af02      	add	r7, sp, #8
 802d826:	60f8      	str	r0, [r7, #12]
 802d828:	60b9      	str	r1, [r7, #8]
 802d82a:	4613      	mov	r3, r2
 802d82c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d82e:	68fb      	ldr	r3, [r7, #12]
 802d830:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 802d832:	68bb      	ldr	r3, [r7, #8]
 802d834:	781b      	ldrb	r3, [r3, #0]
 802d836:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 802d838:	68bb      	ldr	r3, [r7, #8]
 802d83a:	785b      	ldrb	r3, [r3, #1]
 802d83c:	2b01      	cmp	r3, #1
 802d83e:	f040 815c 	bne.w	802dafa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802d842:	68bb      	ldr	r3, [r7, #8]
 802d844:	699b      	ldr	r3, [r3, #24]
 802d846:	2b00      	cmp	r3, #0
 802d848:	d132      	bne.n	802d8b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802d84a:	69bb      	ldr	r3, [r7, #24]
 802d84c:	015a      	lsls	r2, r3, #5
 802d84e:	69fb      	ldr	r3, [r7, #28]
 802d850:	4413      	add	r3, r2
 802d852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d856:	691b      	ldr	r3, [r3, #16]
 802d858:	69ba      	ldr	r2, [r7, #24]
 802d85a:	0151      	lsls	r1, r2, #5
 802d85c:	69fa      	ldr	r2, [r7, #28]
 802d85e:	440a      	add	r2, r1
 802d860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d864:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d868:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d86c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802d86e:	69bb      	ldr	r3, [r7, #24]
 802d870:	015a      	lsls	r2, r3, #5
 802d872:	69fb      	ldr	r3, [r7, #28]
 802d874:	4413      	add	r3, r2
 802d876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d87a:	691b      	ldr	r3, [r3, #16]
 802d87c:	69ba      	ldr	r2, [r7, #24]
 802d87e:	0151      	lsls	r1, r2, #5
 802d880:	69fa      	ldr	r2, [r7, #28]
 802d882:	440a      	add	r2, r1
 802d884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d88c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802d88e:	69bb      	ldr	r3, [r7, #24]
 802d890:	015a      	lsls	r2, r3, #5
 802d892:	69fb      	ldr	r3, [r7, #28]
 802d894:	4413      	add	r3, r2
 802d896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d89a:	691b      	ldr	r3, [r3, #16]
 802d89c:	69ba      	ldr	r2, [r7, #24]
 802d89e:	0151      	lsls	r1, r2, #5
 802d8a0:	69fa      	ldr	r2, [r7, #28]
 802d8a2:	440a      	add	r2, r1
 802d8a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d8a8:	0cdb      	lsrs	r3, r3, #19
 802d8aa:	04db      	lsls	r3, r3, #19
 802d8ac:	6113      	str	r3, [r2, #16]
 802d8ae:	e074      	b.n	802d99a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802d8b0:	69bb      	ldr	r3, [r7, #24]
 802d8b2:	015a      	lsls	r2, r3, #5
 802d8b4:	69fb      	ldr	r3, [r7, #28]
 802d8b6:	4413      	add	r3, r2
 802d8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d8bc:	691b      	ldr	r3, [r3, #16]
 802d8be:	69ba      	ldr	r2, [r7, #24]
 802d8c0:	0151      	lsls	r1, r2, #5
 802d8c2:	69fa      	ldr	r2, [r7, #28]
 802d8c4:	440a      	add	r2, r1
 802d8c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d8ca:	0cdb      	lsrs	r3, r3, #19
 802d8cc:	04db      	lsls	r3, r3, #19
 802d8ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802d8d0:	69bb      	ldr	r3, [r7, #24]
 802d8d2:	015a      	lsls	r2, r3, #5
 802d8d4:	69fb      	ldr	r3, [r7, #28]
 802d8d6:	4413      	add	r3, r2
 802d8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d8dc:	691b      	ldr	r3, [r3, #16]
 802d8de:	69ba      	ldr	r2, [r7, #24]
 802d8e0:	0151      	lsls	r1, r2, #5
 802d8e2:	69fa      	ldr	r2, [r7, #28]
 802d8e4:	440a      	add	r2, r1
 802d8e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d8ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d8ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d8f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 802d8f4:	69bb      	ldr	r3, [r7, #24]
 802d8f6:	015a      	lsls	r2, r3, #5
 802d8f8:	69fb      	ldr	r3, [r7, #28]
 802d8fa:	4413      	add	r3, r2
 802d8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d900:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 802d902:	68bb      	ldr	r3, [r7, #8]
 802d904:	6999      	ldr	r1, [r3, #24]
 802d906:	68bb      	ldr	r3, [r7, #8]
 802d908:	68db      	ldr	r3, [r3, #12]
 802d90a:	440b      	add	r3, r1
 802d90c:	1e59      	subs	r1, r3, #1
 802d90e:	68bb      	ldr	r3, [r7, #8]
 802d910:	68db      	ldr	r3, [r3, #12]
 802d912:	fbb1 f3f3 	udiv	r3, r1, r3
 802d916:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 802d918:	4b9d      	ldr	r3, [pc, #628]	; (802db90 <USB_EPStartXfer+0x370>)
 802d91a:	400b      	ands	r3, r1
 802d91c:	69b9      	ldr	r1, [r7, #24]
 802d91e:	0148      	lsls	r0, r1, #5
 802d920:	69f9      	ldr	r1, [r7, #28]
 802d922:	4401      	add	r1, r0
 802d924:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802d928:	4313      	orrs	r3, r2
 802d92a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802d92c:	69bb      	ldr	r3, [r7, #24]
 802d92e:	015a      	lsls	r2, r3, #5
 802d930:	69fb      	ldr	r3, [r7, #28]
 802d932:	4413      	add	r3, r2
 802d934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d938:	691a      	ldr	r2, [r3, #16]
 802d93a:	68bb      	ldr	r3, [r7, #8]
 802d93c:	699b      	ldr	r3, [r3, #24]
 802d93e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802d942:	69b9      	ldr	r1, [r7, #24]
 802d944:	0148      	lsls	r0, r1, #5
 802d946:	69f9      	ldr	r1, [r7, #28]
 802d948:	4401      	add	r1, r0
 802d94a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802d94e:	4313      	orrs	r3, r2
 802d950:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 802d952:	68bb      	ldr	r3, [r7, #8]
 802d954:	791b      	ldrb	r3, [r3, #4]
 802d956:	2b01      	cmp	r3, #1
 802d958:	d11f      	bne.n	802d99a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 802d95a:	69bb      	ldr	r3, [r7, #24]
 802d95c:	015a      	lsls	r2, r3, #5
 802d95e:	69fb      	ldr	r3, [r7, #28]
 802d960:	4413      	add	r3, r2
 802d962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d966:	691b      	ldr	r3, [r3, #16]
 802d968:	69ba      	ldr	r2, [r7, #24]
 802d96a:	0151      	lsls	r1, r2, #5
 802d96c:	69fa      	ldr	r2, [r7, #28]
 802d96e:	440a      	add	r2, r1
 802d970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d974:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 802d978:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 802d97a:	69bb      	ldr	r3, [r7, #24]
 802d97c:	015a      	lsls	r2, r3, #5
 802d97e:	69fb      	ldr	r3, [r7, #28]
 802d980:	4413      	add	r3, r2
 802d982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d986:	691b      	ldr	r3, [r3, #16]
 802d988:	69ba      	ldr	r2, [r7, #24]
 802d98a:	0151      	lsls	r1, r2, #5
 802d98c:	69fa      	ldr	r2, [r7, #28]
 802d98e:	440a      	add	r2, r1
 802d990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d994:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d998:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 802d99a:	79fb      	ldrb	r3, [r7, #7]
 802d99c:	2b01      	cmp	r3, #1
 802d99e:	d14b      	bne.n	802da38 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802d9a0:	68bb      	ldr	r3, [r7, #8]
 802d9a2:	695b      	ldr	r3, [r3, #20]
 802d9a4:	2b00      	cmp	r3, #0
 802d9a6:	d009      	beq.n	802d9bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802d9a8:	69bb      	ldr	r3, [r7, #24]
 802d9aa:	015a      	lsls	r2, r3, #5
 802d9ac:	69fb      	ldr	r3, [r7, #28]
 802d9ae:	4413      	add	r3, r2
 802d9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d9b4:	461a      	mov	r2, r3
 802d9b6:	68bb      	ldr	r3, [r7, #8]
 802d9b8:	695b      	ldr	r3, [r3, #20]
 802d9ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 802d9bc:	68bb      	ldr	r3, [r7, #8]
 802d9be:	791b      	ldrb	r3, [r3, #4]
 802d9c0:	2b01      	cmp	r3, #1
 802d9c2:	d128      	bne.n	802da16 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802d9c4:	69fb      	ldr	r3, [r7, #28]
 802d9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d9ca:	689b      	ldr	r3, [r3, #8]
 802d9cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d9d0:	2b00      	cmp	r3, #0
 802d9d2:	d110      	bne.n	802d9f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802d9d4:	69bb      	ldr	r3, [r7, #24]
 802d9d6:	015a      	lsls	r2, r3, #5
 802d9d8:	69fb      	ldr	r3, [r7, #28]
 802d9da:	4413      	add	r3, r2
 802d9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d9e0:	681b      	ldr	r3, [r3, #0]
 802d9e2:	69ba      	ldr	r2, [r7, #24]
 802d9e4:	0151      	lsls	r1, r2, #5
 802d9e6:	69fa      	ldr	r2, [r7, #28]
 802d9e8:	440a      	add	r2, r1
 802d9ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d9ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d9f2:	6013      	str	r3, [r2, #0]
 802d9f4:	e00f      	b.n	802da16 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802d9f6:	69bb      	ldr	r3, [r7, #24]
 802d9f8:	015a      	lsls	r2, r3, #5
 802d9fa:	69fb      	ldr	r3, [r7, #28]
 802d9fc:	4413      	add	r3, r2
 802d9fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da02:	681b      	ldr	r3, [r3, #0]
 802da04:	69ba      	ldr	r2, [r7, #24]
 802da06:	0151      	lsls	r1, r2, #5
 802da08:	69fa      	ldr	r2, [r7, #28]
 802da0a:	440a      	add	r2, r1
 802da0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802da10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802da14:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802da16:	69bb      	ldr	r3, [r7, #24]
 802da18:	015a      	lsls	r2, r3, #5
 802da1a:	69fb      	ldr	r3, [r7, #28]
 802da1c:	4413      	add	r3, r2
 802da1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da22:	681b      	ldr	r3, [r3, #0]
 802da24:	69ba      	ldr	r2, [r7, #24]
 802da26:	0151      	lsls	r1, r2, #5
 802da28:	69fa      	ldr	r2, [r7, #28]
 802da2a:	440a      	add	r2, r1
 802da2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802da30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802da34:	6013      	str	r3, [r2, #0]
 802da36:	e133      	b.n	802dca0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802da38:	69bb      	ldr	r3, [r7, #24]
 802da3a:	015a      	lsls	r2, r3, #5
 802da3c:	69fb      	ldr	r3, [r7, #28]
 802da3e:	4413      	add	r3, r2
 802da40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da44:	681b      	ldr	r3, [r3, #0]
 802da46:	69ba      	ldr	r2, [r7, #24]
 802da48:	0151      	lsls	r1, r2, #5
 802da4a:	69fa      	ldr	r2, [r7, #28]
 802da4c:	440a      	add	r2, r1
 802da4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802da52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802da56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 802da58:	68bb      	ldr	r3, [r7, #8]
 802da5a:	791b      	ldrb	r3, [r3, #4]
 802da5c:	2b01      	cmp	r3, #1
 802da5e:	d015      	beq.n	802da8c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 802da60:	68bb      	ldr	r3, [r7, #8]
 802da62:	699b      	ldr	r3, [r3, #24]
 802da64:	2b00      	cmp	r3, #0
 802da66:	f000 811b 	beq.w	802dca0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802da6a:	69fb      	ldr	r3, [r7, #28]
 802da6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802da70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802da72:	68bb      	ldr	r3, [r7, #8]
 802da74:	781b      	ldrb	r3, [r3, #0]
 802da76:	f003 030f 	and.w	r3, r3, #15
 802da7a:	2101      	movs	r1, #1
 802da7c:	fa01 f303 	lsl.w	r3, r1, r3
 802da80:	69f9      	ldr	r1, [r7, #28]
 802da82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802da86:	4313      	orrs	r3, r2
 802da88:	634b      	str	r3, [r1, #52]	; 0x34
 802da8a:	e109      	b.n	802dca0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802da8c:	69fb      	ldr	r3, [r7, #28]
 802da8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802da92:	689b      	ldr	r3, [r3, #8]
 802da94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802da98:	2b00      	cmp	r3, #0
 802da9a:	d110      	bne.n	802dabe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802da9c:	69bb      	ldr	r3, [r7, #24]
 802da9e:	015a      	lsls	r2, r3, #5
 802daa0:	69fb      	ldr	r3, [r7, #28]
 802daa2:	4413      	add	r3, r2
 802daa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802daa8:	681b      	ldr	r3, [r3, #0]
 802daaa:	69ba      	ldr	r2, [r7, #24]
 802daac:	0151      	lsls	r1, r2, #5
 802daae:	69fa      	ldr	r2, [r7, #28]
 802dab0:	440a      	add	r2, r1
 802dab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802daba:	6013      	str	r3, [r2, #0]
 802dabc:	e00f      	b.n	802dade <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802dabe:	69bb      	ldr	r3, [r7, #24]
 802dac0:	015a      	lsls	r2, r3, #5
 802dac2:	69fb      	ldr	r3, [r7, #28]
 802dac4:	4413      	add	r3, r2
 802dac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802daca:	681b      	ldr	r3, [r3, #0]
 802dacc:	69ba      	ldr	r2, [r7, #24]
 802dace:	0151      	lsls	r1, r2, #5
 802dad0:	69fa      	ldr	r2, [r7, #28]
 802dad2:	440a      	add	r2, r1
 802dad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802dadc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 802dade:	68bb      	ldr	r3, [r7, #8]
 802dae0:	6919      	ldr	r1, [r3, #16]
 802dae2:	68bb      	ldr	r3, [r7, #8]
 802dae4:	781a      	ldrb	r2, [r3, #0]
 802dae6:	68bb      	ldr	r3, [r7, #8]
 802dae8:	699b      	ldr	r3, [r3, #24]
 802daea:	b298      	uxth	r0, r3
 802daec:	79fb      	ldrb	r3, [r7, #7]
 802daee:	9300      	str	r3, [sp, #0]
 802daf0:	4603      	mov	r3, r0
 802daf2:	68f8      	ldr	r0, [r7, #12]
 802daf4:	f000 fade 	bl	802e0b4 <USB_WritePacket>
 802daf8:	e0d2      	b.n	802dca0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802dafa:	69bb      	ldr	r3, [r7, #24]
 802dafc:	015a      	lsls	r2, r3, #5
 802dafe:	69fb      	ldr	r3, [r7, #28]
 802db00:	4413      	add	r3, r2
 802db02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db06:	691b      	ldr	r3, [r3, #16]
 802db08:	69ba      	ldr	r2, [r7, #24]
 802db0a:	0151      	lsls	r1, r2, #5
 802db0c:	69fa      	ldr	r2, [r7, #28]
 802db0e:	440a      	add	r2, r1
 802db10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802db14:	0cdb      	lsrs	r3, r3, #19
 802db16:	04db      	lsls	r3, r3, #19
 802db18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802db1a:	69bb      	ldr	r3, [r7, #24]
 802db1c:	015a      	lsls	r2, r3, #5
 802db1e:	69fb      	ldr	r3, [r7, #28]
 802db20:	4413      	add	r3, r2
 802db22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db26:	691b      	ldr	r3, [r3, #16]
 802db28:	69ba      	ldr	r2, [r7, #24]
 802db2a:	0151      	lsls	r1, r2, #5
 802db2c:	69fa      	ldr	r2, [r7, #28]
 802db2e:	440a      	add	r2, r1
 802db30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802db34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802db38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802db3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 802db3e:	68bb      	ldr	r3, [r7, #8]
 802db40:	699b      	ldr	r3, [r3, #24]
 802db42:	2b00      	cmp	r3, #0
 802db44:	d126      	bne.n	802db94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 802db46:	69bb      	ldr	r3, [r7, #24]
 802db48:	015a      	lsls	r2, r3, #5
 802db4a:	69fb      	ldr	r3, [r7, #28]
 802db4c:	4413      	add	r3, r2
 802db4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db52:	691a      	ldr	r2, [r3, #16]
 802db54:	68bb      	ldr	r3, [r7, #8]
 802db56:	68db      	ldr	r3, [r3, #12]
 802db58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802db5c:	69b9      	ldr	r1, [r7, #24]
 802db5e:	0148      	lsls	r0, r1, #5
 802db60:	69f9      	ldr	r1, [r7, #28]
 802db62:	4401      	add	r1, r0
 802db64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802db68:	4313      	orrs	r3, r2
 802db6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802db6c:	69bb      	ldr	r3, [r7, #24]
 802db6e:	015a      	lsls	r2, r3, #5
 802db70:	69fb      	ldr	r3, [r7, #28]
 802db72:	4413      	add	r3, r2
 802db74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db78:	691b      	ldr	r3, [r3, #16]
 802db7a:	69ba      	ldr	r2, [r7, #24]
 802db7c:	0151      	lsls	r1, r2, #5
 802db7e:	69fa      	ldr	r2, [r7, #28]
 802db80:	440a      	add	r2, r1
 802db82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802db86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802db8a:	6113      	str	r3, [r2, #16]
 802db8c:	e03a      	b.n	802dc04 <USB_EPStartXfer+0x3e4>
 802db8e:	bf00      	nop
 802db90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 802db94:	68bb      	ldr	r3, [r7, #8]
 802db96:	699a      	ldr	r2, [r3, #24]
 802db98:	68bb      	ldr	r3, [r7, #8]
 802db9a:	68db      	ldr	r3, [r3, #12]
 802db9c:	4413      	add	r3, r2
 802db9e:	1e5a      	subs	r2, r3, #1
 802dba0:	68bb      	ldr	r3, [r7, #8]
 802dba2:	68db      	ldr	r3, [r3, #12]
 802dba4:	fbb2 f3f3 	udiv	r3, r2, r3
 802dba8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 802dbaa:	68bb      	ldr	r3, [r7, #8]
 802dbac:	68db      	ldr	r3, [r3, #12]
 802dbae:	8afa      	ldrh	r2, [r7, #22]
 802dbb0:	fb03 f202 	mul.w	r2, r3, r2
 802dbb4:	68bb      	ldr	r3, [r7, #8]
 802dbb6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 802dbb8:	69bb      	ldr	r3, [r7, #24]
 802dbba:	015a      	lsls	r2, r3, #5
 802dbbc:	69fb      	ldr	r3, [r7, #28]
 802dbbe:	4413      	add	r3, r2
 802dbc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dbc4:	691a      	ldr	r2, [r3, #16]
 802dbc6:	8afb      	ldrh	r3, [r7, #22]
 802dbc8:	04d9      	lsls	r1, r3, #19
 802dbca:	4b38      	ldr	r3, [pc, #224]	; (802dcac <USB_EPStartXfer+0x48c>)
 802dbcc:	400b      	ands	r3, r1
 802dbce:	69b9      	ldr	r1, [r7, #24]
 802dbd0:	0148      	lsls	r0, r1, #5
 802dbd2:	69f9      	ldr	r1, [r7, #28]
 802dbd4:	4401      	add	r1, r0
 802dbd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802dbda:	4313      	orrs	r3, r2
 802dbdc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 802dbde:	69bb      	ldr	r3, [r7, #24]
 802dbe0:	015a      	lsls	r2, r3, #5
 802dbe2:	69fb      	ldr	r3, [r7, #28]
 802dbe4:	4413      	add	r3, r2
 802dbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dbea:	691a      	ldr	r2, [r3, #16]
 802dbec:	68bb      	ldr	r3, [r7, #8]
 802dbee:	69db      	ldr	r3, [r3, #28]
 802dbf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802dbf4:	69b9      	ldr	r1, [r7, #24]
 802dbf6:	0148      	lsls	r0, r1, #5
 802dbf8:	69f9      	ldr	r1, [r7, #28]
 802dbfa:	4401      	add	r1, r0
 802dbfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802dc00:	4313      	orrs	r3, r2
 802dc02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802dc04:	79fb      	ldrb	r3, [r7, #7]
 802dc06:	2b01      	cmp	r3, #1
 802dc08:	d10d      	bne.n	802dc26 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802dc0a:	68bb      	ldr	r3, [r7, #8]
 802dc0c:	691b      	ldr	r3, [r3, #16]
 802dc0e:	2b00      	cmp	r3, #0
 802dc10:	d009      	beq.n	802dc26 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802dc12:	68bb      	ldr	r3, [r7, #8]
 802dc14:	6919      	ldr	r1, [r3, #16]
 802dc16:	69bb      	ldr	r3, [r7, #24]
 802dc18:	015a      	lsls	r2, r3, #5
 802dc1a:	69fb      	ldr	r3, [r7, #28]
 802dc1c:	4413      	add	r3, r2
 802dc1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dc22:	460a      	mov	r2, r1
 802dc24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 802dc26:	68bb      	ldr	r3, [r7, #8]
 802dc28:	791b      	ldrb	r3, [r3, #4]
 802dc2a:	2b01      	cmp	r3, #1
 802dc2c:	d128      	bne.n	802dc80 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802dc2e:	69fb      	ldr	r3, [r7, #28]
 802dc30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802dc34:	689b      	ldr	r3, [r3, #8]
 802dc36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802dc3a:	2b00      	cmp	r3, #0
 802dc3c:	d110      	bne.n	802dc60 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 802dc3e:	69bb      	ldr	r3, [r7, #24]
 802dc40:	015a      	lsls	r2, r3, #5
 802dc42:	69fb      	ldr	r3, [r7, #28]
 802dc44:	4413      	add	r3, r2
 802dc46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dc4a:	681b      	ldr	r3, [r3, #0]
 802dc4c:	69ba      	ldr	r2, [r7, #24]
 802dc4e:	0151      	lsls	r1, r2, #5
 802dc50:	69fa      	ldr	r2, [r7, #28]
 802dc52:	440a      	add	r2, r1
 802dc54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dc58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802dc5c:	6013      	str	r3, [r2, #0]
 802dc5e:	e00f      	b.n	802dc80 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 802dc60:	69bb      	ldr	r3, [r7, #24]
 802dc62:	015a      	lsls	r2, r3, #5
 802dc64:	69fb      	ldr	r3, [r7, #28]
 802dc66:	4413      	add	r3, r2
 802dc68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dc6c:	681b      	ldr	r3, [r3, #0]
 802dc6e:	69ba      	ldr	r2, [r7, #24]
 802dc70:	0151      	lsls	r1, r2, #5
 802dc72:	69fa      	ldr	r2, [r7, #28]
 802dc74:	440a      	add	r2, r1
 802dc76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dc7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802dc7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802dc80:	69bb      	ldr	r3, [r7, #24]
 802dc82:	015a      	lsls	r2, r3, #5
 802dc84:	69fb      	ldr	r3, [r7, #28]
 802dc86:	4413      	add	r3, r2
 802dc88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dc8c:	681b      	ldr	r3, [r3, #0]
 802dc8e:	69ba      	ldr	r2, [r7, #24]
 802dc90:	0151      	lsls	r1, r2, #5
 802dc92:	69fa      	ldr	r2, [r7, #28]
 802dc94:	440a      	add	r2, r1
 802dc96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dc9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802dc9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802dca0:	2300      	movs	r3, #0
}
 802dca2:	4618      	mov	r0, r3
 802dca4:	3720      	adds	r7, #32
 802dca6:	46bd      	mov	sp, r7
 802dca8:	bd80      	pop	{r7, pc}
 802dcaa:	bf00      	nop
 802dcac:	1ff80000 	.word	0x1ff80000

0802dcb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802dcb0:	b480      	push	{r7}
 802dcb2:	b087      	sub	sp, #28
 802dcb4:	af00      	add	r7, sp, #0
 802dcb6:	60f8      	str	r0, [r7, #12]
 802dcb8:	60b9      	str	r1, [r7, #8]
 802dcba:	4613      	mov	r3, r2
 802dcbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dcbe:	68fb      	ldr	r3, [r7, #12]
 802dcc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 802dcc2:	68bb      	ldr	r3, [r7, #8]
 802dcc4:	781b      	ldrb	r3, [r3, #0]
 802dcc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802dcc8:	68bb      	ldr	r3, [r7, #8]
 802dcca:	785b      	ldrb	r3, [r3, #1]
 802dccc:	2b01      	cmp	r3, #1
 802dcce:	f040 80ce 	bne.w	802de6e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802dcd2:	68bb      	ldr	r3, [r7, #8]
 802dcd4:	699b      	ldr	r3, [r3, #24]
 802dcd6:	2b00      	cmp	r3, #0
 802dcd8:	d132      	bne.n	802dd40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802dcda:	693b      	ldr	r3, [r7, #16]
 802dcdc:	015a      	lsls	r2, r3, #5
 802dcde:	697b      	ldr	r3, [r7, #20]
 802dce0:	4413      	add	r3, r2
 802dce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dce6:	691b      	ldr	r3, [r3, #16]
 802dce8:	693a      	ldr	r2, [r7, #16]
 802dcea:	0151      	lsls	r1, r2, #5
 802dcec:	697a      	ldr	r2, [r7, #20]
 802dcee:	440a      	add	r2, r1
 802dcf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dcf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802dcf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802dcfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802dcfe:	693b      	ldr	r3, [r7, #16]
 802dd00:	015a      	lsls	r2, r3, #5
 802dd02:	697b      	ldr	r3, [r7, #20]
 802dd04:	4413      	add	r3, r2
 802dd06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd0a:	691b      	ldr	r3, [r3, #16]
 802dd0c:	693a      	ldr	r2, [r7, #16]
 802dd0e:	0151      	lsls	r1, r2, #5
 802dd10:	697a      	ldr	r2, [r7, #20]
 802dd12:	440a      	add	r2, r1
 802dd14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dd18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802dd1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802dd1e:	693b      	ldr	r3, [r7, #16]
 802dd20:	015a      	lsls	r2, r3, #5
 802dd22:	697b      	ldr	r3, [r7, #20]
 802dd24:	4413      	add	r3, r2
 802dd26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd2a:	691b      	ldr	r3, [r3, #16]
 802dd2c:	693a      	ldr	r2, [r7, #16]
 802dd2e:	0151      	lsls	r1, r2, #5
 802dd30:	697a      	ldr	r2, [r7, #20]
 802dd32:	440a      	add	r2, r1
 802dd34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dd38:	0cdb      	lsrs	r3, r3, #19
 802dd3a:	04db      	lsls	r3, r3, #19
 802dd3c:	6113      	str	r3, [r2, #16]
 802dd3e:	e04e      	b.n	802ddde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802dd40:	693b      	ldr	r3, [r7, #16]
 802dd42:	015a      	lsls	r2, r3, #5
 802dd44:	697b      	ldr	r3, [r7, #20]
 802dd46:	4413      	add	r3, r2
 802dd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd4c:	691b      	ldr	r3, [r3, #16]
 802dd4e:	693a      	ldr	r2, [r7, #16]
 802dd50:	0151      	lsls	r1, r2, #5
 802dd52:	697a      	ldr	r2, [r7, #20]
 802dd54:	440a      	add	r2, r1
 802dd56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dd5a:	0cdb      	lsrs	r3, r3, #19
 802dd5c:	04db      	lsls	r3, r3, #19
 802dd5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802dd60:	693b      	ldr	r3, [r7, #16]
 802dd62:	015a      	lsls	r2, r3, #5
 802dd64:	697b      	ldr	r3, [r7, #20]
 802dd66:	4413      	add	r3, r2
 802dd68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd6c:	691b      	ldr	r3, [r3, #16]
 802dd6e:	693a      	ldr	r2, [r7, #16]
 802dd70:	0151      	lsls	r1, r2, #5
 802dd72:	697a      	ldr	r2, [r7, #20]
 802dd74:	440a      	add	r2, r1
 802dd76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dd7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802dd7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802dd82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 802dd84:	68bb      	ldr	r3, [r7, #8]
 802dd86:	699a      	ldr	r2, [r3, #24]
 802dd88:	68bb      	ldr	r3, [r7, #8]
 802dd8a:	68db      	ldr	r3, [r3, #12]
 802dd8c:	429a      	cmp	r2, r3
 802dd8e:	d903      	bls.n	802dd98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 802dd90:	68bb      	ldr	r3, [r7, #8]
 802dd92:	68da      	ldr	r2, [r3, #12]
 802dd94:	68bb      	ldr	r3, [r7, #8]
 802dd96:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802dd98:	693b      	ldr	r3, [r7, #16]
 802dd9a:	015a      	lsls	r2, r3, #5
 802dd9c:	697b      	ldr	r3, [r7, #20]
 802dd9e:	4413      	add	r3, r2
 802dda0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dda4:	691b      	ldr	r3, [r3, #16]
 802dda6:	693a      	ldr	r2, [r7, #16]
 802dda8:	0151      	lsls	r1, r2, #5
 802ddaa:	697a      	ldr	r2, [r7, #20]
 802ddac:	440a      	add	r2, r1
 802ddae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ddb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802ddb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802ddb8:	693b      	ldr	r3, [r7, #16]
 802ddba:	015a      	lsls	r2, r3, #5
 802ddbc:	697b      	ldr	r3, [r7, #20]
 802ddbe:	4413      	add	r3, r2
 802ddc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ddc4:	691a      	ldr	r2, [r3, #16]
 802ddc6:	68bb      	ldr	r3, [r7, #8]
 802ddc8:	699b      	ldr	r3, [r3, #24]
 802ddca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802ddce:	6939      	ldr	r1, [r7, #16]
 802ddd0:	0148      	lsls	r0, r1, #5
 802ddd2:	6979      	ldr	r1, [r7, #20]
 802ddd4:	4401      	add	r1, r0
 802ddd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802ddda:	4313      	orrs	r3, r2
 802dddc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802ddde:	79fb      	ldrb	r3, [r7, #7]
 802dde0:	2b01      	cmp	r3, #1
 802dde2:	d11e      	bne.n	802de22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802dde4:	68bb      	ldr	r3, [r7, #8]
 802dde6:	695b      	ldr	r3, [r3, #20]
 802dde8:	2b00      	cmp	r3, #0
 802ddea:	d009      	beq.n	802de00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802ddec:	693b      	ldr	r3, [r7, #16]
 802ddee:	015a      	lsls	r2, r3, #5
 802ddf0:	697b      	ldr	r3, [r7, #20]
 802ddf2:	4413      	add	r3, r2
 802ddf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ddf8:	461a      	mov	r2, r3
 802ddfa:	68bb      	ldr	r3, [r7, #8]
 802ddfc:	695b      	ldr	r3, [r3, #20]
 802ddfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802de00:	693b      	ldr	r3, [r7, #16]
 802de02:	015a      	lsls	r2, r3, #5
 802de04:	697b      	ldr	r3, [r7, #20]
 802de06:	4413      	add	r3, r2
 802de08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802de0c:	681b      	ldr	r3, [r3, #0]
 802de0e:	693a      	ldr	r2, [r7, #16]
 802de10:	0151      	lsls	r1, r2, #5
 802de12:	697a      	ldr	r2, [r7, #20]
 802de14:	440a      	add	r2, r1
 802de16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802de1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802de1e:	6013      	str	r3, [r2, #0]
 802de20:	e097      	b.n	802df52 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802de22:	693b      	ldr	r3, [r7, #16]
 802de24:	015a      	lsls	r2, r3, #5
 802de26:	697b      	ldr	r3, [r7, #20]
 802de28:	4413      	add	r3, r2
 802de2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802de2e:	681b      	ldr	r3, [r3, #0]
 802de30:	693a      	ldr	r2, [r7, #16]
 802de32:	0151      	lsls	r1, r2, #5
 802de34:	697a      	ldr	r2, [r7, #20]
 802de36:	440a      	add	r2, r1
 802de38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802de3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802de40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 802de42:	68bb      	ldr	r3, [r7, #8]
 802de44:	699b      	ldr	r3, [r3, #24]
 802de46:	2b00      	cmp	r3, #0
 802de48:	f000 8083 	beq.w	802df52 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802de4c:	697b      	ldr	r3, [r7, #20]
 802de4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802de52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802de54:	68bb      	ldr	r3, [r7, #8]
 802de56:	781b      	ldrb	r3, [r3, #0]
 802de58:	f003 030f 	and.w	r3, r3, #15
 802de5c:	2101      	movs	r1, #1
 802de5e:	fa01 f303 	lsl.w	r3, r1, r3
 802de62:	6979      	ldr	r1, [r7, #20]
 802de64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802de68:	4313      	orrs	r3, r2
 802de6a:	634b      	str	r3, [r1, #52]	; 0x34
 802de6c:	e071      	b.n	802df52 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802de6e:	693b      	ldr	r3, [r7, #16]
 802de70:	015a      	lsls	r2, r3, #5
 802de72:	697b      	ldr	r3, [r7, #20]
 802de74:	4413      	add	r3, r2
 802de76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802de7a:	691b      	ldr	r3, [r3, #16]
 802de7c:	693a      	ldr	r2, [r7, #16]
 802de7e:	0151      	lsls	r1, r2, #5
 802de80:	697a      	ldr	r2, [r7, #20]
 802de82:	440a      	add	r2, r1
 802de84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802de88:	0cdb      	lsrs	r3, r3, #19
 802de8a:	04db      	lsls	r3, r3, #19
 802de8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802de8e:	693b      	ldr	r3, [r7, #16]
 802de90:	015a      	lsls	r2, r3, #5
 802de92:	697b      	ldr	r3, [r7, #20]
 802de94:	4413      	add	r3, r2
 802de96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802de9a:	691b      	ldr	r3, [r3, #16]
 802de9c:	693a      	ldr	r2, [r7, #16]
 802de9e:	0151      	lsls	r1, r2, #5
 802dea0:	697a      	ldr	r2, [r7, #20]
 802dea2:	440a      	add	r2, r1
 802dea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dea8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802deac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802deb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 802deb2:	68bb      	ldr	r3, [r7, #8]
 802deb4:	699b      	ldr	r3, [r3, #24]
 802deb6:	2b00      	cmp	r3, #0
 802deb8:	d003      	beq.n	802dec2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 802deba:	68bb      	ldr	r3, [r7, #8]
 802debc:	68da      	ldr	r2, [r3, #12]
 802debe:	68bb      	ldr	r3, [r7, #8]
 802dec0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 802dec2:	68bb      	ldr	r3, [r7, #8]
 802dec4:	68da      	ldr	r2, [r3, #12]
 802dec6:	68bb      	ldr	r3, [r7, #8]
 802dec8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802deca:	693b      	ldr	r3, [r7, #16]
 802decc:	015a      	lsls	r2, r3, #5
 802dece:	697b      	ldr	r3, [r7, #20]
 802ded0:	4413      	add	r3, r2
 802ded2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ded6:	691b      	ldr	r3, [r3, #16]
 802ded8:	693a      	ldr	r2, [r7, #16]
 802deda:	0151      	lsls	r1, r2, #5
 802dedc:	697a      	ldr	r2, [r7, #20]
 802dede:	440a      	add	r2, r1
 802dee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dee4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802dee8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 802deea:	693b      	ldr	r3, [r7, #16]
 802deec:	015a      	lsls	r2, r3, #5
 802deee:	697b      	ldr	r3, [r7, #20]
 802def0:	4413      	add	r3, r2
 802def2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802def6:	691a      	ldr	r2, [r3, #16]
 802def8:	68bb      	ldr	r3, [r7, #8]
 802defa:	69db      	ldr	r3, [r3, #28]
 802defc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802df00:	6939      	ldr	r1, [r7, #16]
 802df02:	0148      	lsls	r0, r1, #5
 802df04:	6979      	ldr	r1, [r7, #20]
 802df06:	4401      	add	r1, r0
 802df08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802df0c:	4313      	orrs	r3, r2
 802df0e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 802df10:	79fb      	ldrb	r3, [r7, #7]
 802df12:	2b01      	cmp	r3, #1
 802df14:	d10d      	bne.n	802df32 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802df16:	68bb      	ldr	r3, [r7, #8]
 802df18:	691b      	ldr	r3, [r3, #16]
 802df1a:	2b00      	cmp	r3, #0
 802df1c:	d009      	beq.n	802df32 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802df1e:	68bb      	ldr	r3, [r7, #8]
 802df20:	6919      	ldr	r1, [r3, #16]
 802df22:	693b      	ldr	r3, [r7, #16]
 802df24:	015a      	lsls	r2, r3, #5
 802df26:	697b      	ldr	r3, [r7, #20]
 802df28:	4413      	add	r3, r2
 802df2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802df2e:	460a      	mov	r2, r1
 802df30:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802df32:	693b      	ldr	r3, [r7, #16]
 802df34:	015a      	lsls	r2, r3, #5
 802df36:	697b      	ldr	r3, [r7, #20]
 802df38:	4413      	add	r3, r2
 802df3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802df3e:	681b      	ldr	r3, [r3, #0]
 802df40:	693a      	ldr	r2, [r7, #16]
 802df42:	0151      	lsls	r1, r2, #5
 802df44:	697a      	ldr	r2, [r7, #20]
 802df46:	440a      	add	r2, r1
 802df48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802df4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802df50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802df52:	2300      	movs	r3, #0
}
 802df54:	4618      	mov	r0, r3
 802df56:	371c      	adds	r7, #28
 802df58:	46bd      	mov	sp, r7
 802df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802df5e:	4770      	bx	lr

0802df60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802df60:	b480      	push	{r7}
 802df62:	b087      	sub	sp, #28
 802df64:	af00      	add	r7, sp, #0
 802df66:	6078      	str	r0, [r7, #4]
 802df68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802df6a:	2300      	movs	r3, #0
 802df6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 802df6e:	2300      	movs	r3, #0
 802df70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802df72:	687b      	ldr	r3, [r7, #4]
 802df74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802df76:	683b      	ldr	r3, [r7, #0]
 802df78:	785b      	ldrb	r3, [r3, #1]
 802df7a:	2b01      	cmp	r3, #1
 802df7c:	d14a      	bne.n	802e014 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802df7e:	683b      	ldr	r3, [r7, #0]
 802df80:	781b      	ldrb	r3, [r3, #0]
 802df82:	015a      	lsls	r2, r3, #5
 802df84:	693b      	ldr	r3, [r7, #16]
 802df86:	4413      	add	r3, r2
 802df88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802df8c:	681b      	ldr	r3, [r3, #0]
 802df8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802df92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802df96:	f040 8086 	bne.w	802e0a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 802df9a:	683b      	ldr	r3, [r7, #0]
 802df9c:	781b      	ldrb	r3, [r3, #0]
 802df9e:	015a      	lsls	r2, r3, #5
 802dfa0:	693b      	ldr	r3, [r7, #16]
 802dfa2:	4413      	add	r3, r2
 802dfa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dfa8:	681b      	ldr	r3, [r3, #0]
 802dfaa:	683a      	ldr	r2, [r7, #0]
 802dfac:	7812      	ldrb	r2, [r2, #0]
 802dfae:	0151      	lsls	r1, r2, #5
 802dfb0:	693a      	ldr	r2, [r7, #16]
 802dfb2:	440a      	add	r2, r1
 802dfb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dfb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802dfbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 802dfbe:	683b      	ldr	r3, [r7, #0]
 802dfc0:	781b      	ldrb	r3, [r3, #0]
 802dfc2:	015a      	lsls	r2, r3, #5
 802dfc4:	693b      	ldr	r3, [r7, #16]
 802dfc6:	4413      	add	r3, r2
 802dfc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dfcc:	681b      	ldr	r3, [r3, #0]
 802dfce:	683a      	ldr	r2, [r7, #0]
 802dfd0:	7812      	ldrb	r2, [r2, #0]
 802dfd2:	0151      	lsls	r1, r2, #5
 802dfd4:	693a      	ldr	r2, [r7, #16]
 802dfd6:	440a      	add	r2, r1
 802dfd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dfdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802dfe0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 802dfe2:	68fb      	ldr	r3, [r7, #12]
 802dfe4:	3301      	adds	r3, #1
 802dfe6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 802dfe8:	68fb      	ldr	r3, [r7, #12]
 802dfea:	f242 7210 	movw	r2, #10000	; 0x2710
 802dfee:	4293      	cmp	r3, r2
 802dff0:	d902      	bls.n	802dff8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 802dff2:	2301      	movs	r3, #1
 802dff4:	75fb      	strb	r3, [r7, #23]
          break;
 802dff6:	e056      	b.n	802e0a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 802dff8:	683b      	ldr	r3, [r7, #0]
 802dffa:	781b      	ldrb	r3, [r3, #0]
 802dffc:	015a      	lsls	r2, r3, #5
 802dffe:	693b      	ldr	r3, [r7, #16]
 802e000:	4413      	add	r3, r2
 802e002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e006:	681b      	ldr	r3, [r3, #0]
 802e008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e00c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e010:	d0e7      	beq.n	802dfe2 <USB_EPStopXfer+0x82>
 802e012:	e048      	b.n	802e0a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802e014:	683b      	ldr	r3, [r7, #0]
 802e016:	781b      	ldrb	r3, [r3, #0]
 802e018:	015a      	lsls	r2, r3, #5
 802e01a:	693b      	ldr	r3, [r7, #16]
 802e01c:	4413      	add	r3, r2
 802e01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e022:	681b      	ldr	r3, [r3, #0]
 802e024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e02c:	d13b      	bne.n	802e0a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 802e02e:	683b      	ldr	r3, [r7, #0]
 802e030:	781b      	ldrb	r3, [r3, #0]
 802e032:	015a      	lsls	r2, r3, #5
 802e034:	693b      	ldr	r3, [r7, #16]
 802e036:	4413      	add	r3, r2
 802e038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e03c:	681b      	ldr	r3, [r3, #0]
 802e03e:	683a      	ldr	r2, [r7, #0]
 802e040:	7812      	ldrb	r2, [r2, #0]
 802e042:	0151      	lsls	r1, r2, #5
 802e044:	693a      	ldr	r2, [r7, #16]
 802e046:	440a      	add	r2, r1
 802e048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e04c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802e050:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 802e052:	683b      	ldr	r3, [r7, #0]
 802e054:	781b      	ldrb	r3, [r3, #0]
 802e056:	015a      	lsls	r2, r3, #5
 802e058:	693b      	ldr	r3, [r7, #16]
 802e05a:	4413      	add	r3, r2
 802e05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e060:	681b      	ldr	r3, [r3, #0]
 802e062:	683a      	ldr	r2, [r7, #0]
 802e064:	7812      	ldrb	r2, [r2, #0]
 802e066:	0151      	lsls	r1, r2, #5
 802e068:	693a      	ldr	r2, [r7, #16]
 802e06a:	440a      	add	r2, r1
 802e06c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802e074:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 802e076:	68fb      	ldr	r3, [r7, #12]
 802e078:	3301      	adds	r3, #1
 802e07a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 802e07c:	68fb      	ldr	r3, [r7, #12]
 802e07e:	f242 7210 	movw	r2, #10000	; 0x2710
 802e082:	4293      	cmp	r3, r2
 802e084:	d902      	bls.n	802e08c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 802e086:	2301      	movs	r3, #1
 802e088:	75fb      	strb	r3, [r7, #23]
          break;
 802e08a:	e00c      	b.n	802e0a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 802e08c:	683b      	ldr	r3, [r7, #0]
 802e08e:	781b      	ldrb	r3, [r3, #0]
 802e090:	015a      	lsls	r2, r3, #5
 802e092:	693b      	ldr	r3, [r7, #16]
 802e094:	4413      	add	r3, r2
 802e096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e09a:	681b      	ldr	r3, [r3, #0]
 802e09c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e0a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e0a4:	d0e7      	beq.n	802e076 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 802e0a6:	7dfb      	ldrb	r3, [r7, #23]
}
 802e0a8:	4618      	mov	r0, r3
 802e0aa:	371c      	adds	r7, #28
 802e0ac:	46bd      	mov	sp, r7
 802e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e0b2:	4770      	bx	lr

0802e0b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802e0b4:	b480      	push	{r7}
 802e0b6:	b089      	sub	sp, #36	; 0x24
 802e0b8:	af00      	add	r7, sp, #0
 802e0ba:	60f8      	str	r0, [r7, #12]
 802e0bc:	60b9      	str	r1, [r7, #8]
 802e0be:	4611      	mov	r1, r2
 802e0c0:	461a      	mov	r2, r3
 802e0c2:	460b      	mov	r3, r1
 802e0c4:	71fb      	strb	r3, [r7, #7]
 802e0c6:	4613      	mov	r3, r2
 802e0c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e0ca:	68fb      	ldr	r3, [r7, #12]
 802e0cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802e0ce:	68bb      	ldr	r3, [r7, #8]
 802e0d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802e0d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802e0d6:	2b00      	cmp	r3, #0
 802e0d8:	d123      	bne.n	802e122 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802e0da:	88bb      	ldrh	r3, [r7, #4]
 802e0dc:	3303      	adds	r3, #3
 802e0de:	089b      	lsrs	r3, r3, #2
 802e0e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802e0e2:	2300      	movs	r3, #0
 802e0e4:	61bb      	str	r3, [r7, #24]
 802e0e6:	e018      	b.n	802e11a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802e0e8:	79fb      	ldrb	r3, [r7, #7]
 802e0ea:	031a      	lsls	r2, r3, #12
 802e0ec:	697b      	ldr	r3, [r7, #20]
 802e0ee:	4413      	add	r3, r2
 802e0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802e0f4:	461a      	mov	r2, r3
 802e0f6:	69fb      	ldr	r3, [r7, #28]
 802e0f8:	681b      	ldr	r3, [r3, #0]
 802e0fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 802e0fc:	69fb      	ldr	r3, [r7, #28]
 802e0fe:	3301      	adds	r3, #1
 802e100:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802e102:	69fb      	ldr	r3, [r7, #28]
 802e104:	3301      	adds	r3, #1
 802e106:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802e108:	69fb      	ldr	r3, [r7, #28]
 802e10a:	3301      	adds	r3, #1
 802e10c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802e10e:	69fb      	ldr	r3, [r7, #28]
 802e110:	3301      	adds	r3, #1
 802e112:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802e114:	69bb      	ldr	r3, [r7, #24]
 802e116:	3301      	adds	r3, #1
 802e118:	61bb      	str	r3, [r7, #24]
 802e11a:	69ba      	ldr	r2, [r7, #24]
 802e11c:	693b      	ldr	r3, [r7, #16]
 802e11e:	429a      	cmp	r2, r3
 802e120:	d3e2      	bcc.n	802e0e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802e122:	2300      	movs	r3, #0
}
 802e124:	4618      	mov	r0, r3
 802e126:	3724      	adds	r7, #36	; 0x24
 802e128:	46bd      	mov	sp, r7
 802e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e12e:	4770      	bx	lr

0802e130 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802e130:	b480      	push	{r7}
 802e132:	b08b      	sub	sp, #44	; 0x2c
 802e134:	af00      	add	r7, sp, #0
 802e136:	60f8      	str	r0, [r7, #12]
 802e138:	60b9      	str	r1, [r7, #8]
 802e13a:	4613      	mov	r3, r2
 802e13c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e13e:	68fb      	ldr	r3, [r7, #12]
 802e140:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802e142:	68bb      	ldr	r3, [r7, #8]
 802e144:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802e146:	88fb      	ldrh	r3, [r7, #6]
 802e148:	089b      	lsrs	r3, r3, #2
 802e14a:	b29b      	uxth	r3, r3
 802e14c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802e14e:	88fb      	ldrh	r3, [r7, #6]
 802e150:	f003 0303 	and.w	r3, r3, #3
 802e154:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802e156:	2300      	movs	r3, #0
 802e158:	623b      	str	r3, [r7, #32]
 802e15a:	e014      	b.n	802e186 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802e15c:	69bb      	ldr	r3, [r7, #24]
 802e15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802e162:	681a      	ldr	r2, [r3, #0]
 802e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e166:	601a      	str	r2, [r3, #0]
    pDest++;
 802e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e16a:	3301      	adds	r3, #1
 802e16c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802e16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e170:	3301      	adds	r3, #1
 802e172:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e176:	3301      	adds	r3, #1
 802e178:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e17c:	3301      	adds	r3, #1
 802e17e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802e180:	6a3b      	ldr	r3, [r7, #32]
 802e182:	3301      	adds	r3, #1
 802e184:	623b      	str	r3, [r7, #32]
 802e186:	6a3a      	ldr	r2, [r7, #32]
 802e188:	697b      	ldr	r3, [r7, #20]
 802e18a:	429a      	cmp	r2, r3
 802e18c:	d3e6      	bcc.n	802e15c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802e18e:	8bfb      	ldrh	r3, [r7, #30]
 802e190:	2b00      	cmp	r3, #0
 802e192:	d01e      	beq.n	802e1d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802e194:	2300      	movs	r3, #0
 802e196:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802e198:	69bb      	ldr	r3, [r7, #24]
 802e19a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802e19e:	461a      	mov	r2, r3
 802e1a0:	f107 0310 	add.w	r3, r7, #16
 802e1a4:	6812      	ldr	r2, [r2, #0]
 802e1a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802e1a8:	693a      	ldr	r2, [r7, #16]
 802e1aa:	6a3b      	ldr	r3, [r7, #32]
 802e1ac:	b2db      	uxtb	r3, r3
 802e1ae:	00db      	lsls	r3, r3, #3
 802e1b0:	fa22 f303 	lsr.w	r3, r2, r3
 802e1b4:	b2da      	uxtb	r2, r3
 802e1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e1b8:	701a      	strb	r2, [r3, #0]
      i++;
 802e1ba:	6a3b      	ldr	r3, [r7, #32]
 802e1bc:	3301      	adds	r3, #1
 802e1be:	623b      	str	r3, [r7, #32]
      pDest++;
 802e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e1c2:	3301      	adds	r3, #1
 802e1c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802e1c6:	8bfb      	ldrh	r3, [r7, #30]
 802e1c8:	3b01      	subs	r3, #1
 802e1ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802e1cc:	8bfb      	ldrh	r3, [r7, #30]
 802e1ce:	2b00      	cmp	r3, #0
 802e1d0:	d1ea      	bne.n	802e1a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802e1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802e1d4:	4618      	mov	r0, r3
 802e1d6:	372c      	adds	r7, #44	; 0x2c
 802e1d8:	46bd      	mov	sp, r7
 802e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e1de:	4770      	bx	lr

0802e1e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802e1e0:	b480      	push	{r7}
 802e1e2:	b085      	sub	sp, #20
 802e1e4:	af00      	add	r7, sp, #0
 802e1e6:	6078      	str	r0, [r7, #4]
 802e1e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e1ea:	687b      	ldr	r3, [r7, #4]
 802e1ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802e1ee:	683b      	ldr	r3, [r7, #0]
 802e1f0:	781b      	ldrb	r3, [r3, #0]
 802e1f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802e1f4:	683b      	ldr	r3, [r7, #0]
 802e1f6:	785b      	ldrb	r3, [r3, #1]
 802e1f8:	2b01      	cmp	r3, #1
 802e1fa:	d12c      	bne.n	802e256 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 802e1fc:	68bb      	ldr	r3, [r7, #8]
 802e1fe:	015a      	lsls	r2, r3, #5
 802e200:	68fb      	ldr	r3, [r7, #12]
 802e202:	4413      	add	r3, r2
 802e204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e208:	681b      	ldr	r3, [r3, #0]
 802e20a:	2b00      	cmp	r3, #0
 802e20c:	db12      	blt.n	802e234 <USB_EPSetStall+0x54>
 802e20e:	68bb      	ldr	r3, [r7, #8]
 802e210:	2b00      	cmp	r3, #0
 802e212:	d00f      	beq.n	802e234 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 802e214:	68bb      	ldr	r3, [r7, #8]
 802e216:	015a      	lsls	r2, r3, #5
 802e218:	68fb      	ldr	r3, [r7, #12]
 802e21a:	4413      	add	r3, r2
 802e21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e220:	681b      	ldr	r3, [r3, #0]
 802e222:	68ba      	ldr	r2, [r7, #8]
 802e224:	0151      	lsls	r1, r2, #5
 802e226:	68fa      	ldr	r2, [r7, #12]
 802e228:	440a      	add	r2, r1
 802e22a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e22e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802e232:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 802e234:	68bb      	ldr	r3, [r7, #8]
 802e236:	015a      	lsls	r2, r3, #5
 802e238:	68fb      	ldr	r3, [r7, #12]
 802e23a:	4413      	add	r3, r2
 802e23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e240:	681b      	ldr	r3, [r3, #0]
 802e242:	68ba      	ldr	r2, [r7, #8]
 802e244:	0151      	lsls	r1, r2, #5
 802e246:	68fa      	ldr	r2, [r7, #12]
 802e248:	440a      	add	r2, r1
 802e24a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e24e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802e252:	6013      	str	r3, [r2, #0]
 802e254:	e02b      	b.n	802e2ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 802e256:	68bb      	ldr	r3, [r7, #8]
 802e258:	015a      	lsls	r2, r3, #5
 802e25a:	68fb      	ldr	r3, [r7, #12]
 802e25c:	4413      	add	r3, r2
 802e25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e262:	681b      	ldr	r3, [r3, #0]
 802e264:	2b00      	cmp	r3, #0
 802e266:	db12      	blt.n	802e28e <USB_EPSetStall+0xae>
 802e268:	68bb      	ldr	r3, [r7, #8]
 802e26a:	2b00      	cmp	r3, #0
 802e26c:	d00f      	beq.n	802e28e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 802e26e:	68bb      	ldr	r3, [r7, #8]
 802e270:	015a      	lsls	r2, r3, #5
 802e272:	68fb      	ldr	r3, [r7, #12]
 802e274:	4413      	add	r3, r2
 802e276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e27a:	681b      	ldr	r3, [r3, #0]
 802e27c:	68ba      	ldr	r2, [r7, #8]
 802e27e:	0151      	lsls	r1, r2, #5
 802e280:	68fa      	ldr	r2, [r7, #12]
 802e282:	440a      	add	r2, r1
 802e284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e288:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802e28c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 802e28e:	68bb      	ldr	r3, [r7, #8]
 802e290:	015a      	lsls	r2, r3, #5
 802e292:	68fb      	ldr	r3, [r7, #12]
 802e294:	4413      	add	r3, r2
 802e296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e29a:	681b      	ldr	r3, [r3, #0]
 802e29c:	68ba      	ldr	r2, [r7, #8]
 802e29e:	0151      	lsls	r1, r2, #5
 802e2a0:	68fa      	ldr	r2, [r7, #12]
 802e2a2:	440a      	add	r2, r1
 802e2a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e2a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802e2ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802e2ae:	2300      	movs	r3, #0
}
 802e2b0:	4618      	mov	r0, r3
 802e2b2:	3714      	adds	r7, #20
 802e2b4:	46bd      	mov	sp, r7
 802e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e2ba:	4770      	bx	lr

0802e2bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802e2bc:	b480      	push	{r7}
 802e2be:	b085      	sub	sp, #20
 802e2c0:	af00      	add	r7, sp, #0
 802e2c2:	6078      	str	r0, [r7, #4]
 802e2c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e2c6:	687b      	ldr	r3, [r7, #4]
 802e2c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802e2ca:	683b      	ldr	r3, [r7, #0]
 802e2cc:	781b      	ldrb	r3, [r3, #0]
 802e2ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802e2d0:	683b      	ldr	r3, [r7, #0]
 802e2d2:	785b      	ldrb	r3, [r3, #1]
 802e2d4:	2b01      	cmp	r3, #1
 802e2d6:	d128      	bne.n	802e32a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802e2d8:	68bb      	ldr	r3, [r7, #8]
 802e2da:	015a      	lsls	r2, r3, #5
 802e2dc:	68fb      	ldr	r3, [r7, #12]
 802e2de:	4413      	add	r3, r2
 802e2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e2e4:	681b      	ldr	r3, [r3, #0]
 802e2e6:	68ba      	ldr	r2, [r7, #8]
 802e2e8:	0151      	lsls	r1, r2, #5
 802e2ea:	68fa      	ldr	r2, [r7, #12]
 802e2ec:	440a      	add	r2, r1
 802e2ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e2f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802e2f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802e2f8:	683b      	ldr	r3, [r7, #0]
 802e2fa:	791b      	ldrb	r3, [r3, #4]
 802e2fc:	2b03      	cmp	r3, #3
 802e2fe:	d003      	beq.n	802e308 <USB_EPClearStall+0x4c>
 802e300:	683b      	ldr	r3, [r7, #0]
 802e302:	791b      	ldrb	r3, [r3, #4]
 802e304:	2b02      	cmp	r3, #2
 802e306:	d138      	bne.n	802e37a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802e308:	68bb      	ldr	r3, [r7, #8]
 802e30a:	015a      	lsls	r2, r3, #5
 802e30c:	68fb      	ldr	r3, [r7, #12]
 802e30e:	4413      	add	r3, r2
 802e310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e314:	681b      	ldr	r3, [r3, #0]
 802e316:	68ba      	ldr	r2, [r7, #8]
 802e318:	0151      	lsls	r1, r2, #5
 802e31a:	68fa      	ldr	r2, [r7, #12]
 802e31c:	440a      	add	r2, r1
 802e31e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802e326:	6013      	str	r3, [r2, #0]
 802e328:	e027      	b.n	802e37a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802e32a:	68bb      	ldr	r3, [r7, #8]
 802e32c:	015a      	lsls	r2, r3, #5
 802e32e:	68fb      	ldr	r3, [r7, #12]
 802e330:	4413      	add	r3, r2
 802e332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e336:	681b      	ldr	r3, [r3, #0]
 802e338:	68ba      	ldr	r2, [r7, #8]
 802e33a:	0151      	lsls	r1, r2, #5
 802e33c:	68fa      	ldr	r2, [r7, #12]
 802e33e:	440a      	add	r2, r1
 802e340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e344:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802e348:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802e34a:	683b      	ldr	r3, [r7, #0]
 802e34c:	791b      	ldrb	r3, [r3, #4]
 802e34e:	2b03      	cmp	r3, #3
 802e350:	d003      	beq.n	802e35a <USB_EPClearStall+0x9e>
 802e352:	683b      	ldr	r3, [r7, #0]
 802e354:	791b      	ldrb	r3, [r3, #4]
 802e356:	2b02      	cmp	r3, #2
 802e358:	d10f      	bne.n	802e37a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802e35a:	68bb      	ldr	r3, [r7, #8]
 802e35c:	015a      	lsls	r2, r3, #5
 802e35e:	68fb      	ldr	r3, [r7, #12]
 802e360:	4413      	add	r3, r2
 802e362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e366:	681b      	ldr	r3, [r3, #0]
 802e368:	68ba      	ldr	r2, [r7, #8]
 802e36a:	0151      	lsls	r1, r2, #5
 802e36c:	68fa      	ldr	r2, [r7, #12]
 802e36e:	440a      	add	r2, r1
 802e370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802e378:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 802e37a:	2300      	movs	r3, #0
}
 802e37c:	4618      	mov	r0, r3
 802e37e:	3714      	adds	r7, #20
 802e380:	46bd      	mov	sp, r7
 802e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e386:	4770      	bx	lr

0802e388 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 802e388:	b480      	push	{r7}
 802e38a:	b085      	sub	sp, #20
 802e38c:	af00      	add	r7, sp, #0
 802e38e:	6078      	str	r0, [r7, #4]
 802e390:	460b      	mov	r3, r1
 802e392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e394:	687b      	ldr	r3, [r7, #4]
 802e396:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 802e398:	68fb      	ldr	r3, [r7, #12]
 802e39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e39e:	681b      	ldr	r3, [r3, #0]
 802e3a0:	68fa      	ldr	r2, [r7, #12]
 802e3a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802e3a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802e3aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 802e3ac:	68fb      	ldr	r3, [r7, #12]
 802e3ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e3b2:	681a      	ldr	r2, [r3, #0]
 802e3b4:	78fb      	ldrb	r3, [r7, #3]
 802e3b6:	011b      	lsls	r3, r3, #4
 802e3b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 802e3bc:	68f9      	ldr	r1, [r7, #12]
 802e3be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802e3c2:	4313      	orrs	r3, r2
 802e3c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 802e3c6:	2300      	movs	r3, #0
}
 802e3c8:	4618      	mov	r0, r3
 802e3ca:	3714      	adds	r7, #20
 802e3cc:	46bd      	mov	sp, r7
 802e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e3d2:	4770      	bx	lr

0802e3d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 802e3d4:	b480      	push	{r7}
 802e3d6:	b085      	sub	sp, #20
 802e3d8:	af00      	add	r7, sp, #0
 802e3da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e3dc:	687b      	ldr	r3, [r7, #4]
 802e3de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802e3e0:	68fb      	ldr	r3, [r7, #12]
 802e3e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802e3e6:	681b      	ldr	r3, [r3, #0]
 802e3e8:	68fa      	ldr	r2, [r7, #12]
 802e3ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802e3ee:	f023 0303 	bic.w	r3, r3, #3
 802e3f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 802e3f4:	68fb      	ldr	r3, [r7, #12]
 802e3f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e3fa:	685b      	ldr	r3, [r3, #4]
 802e3fc:	68fa      	ldr	r2, [r7, #12]
 802e3fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802e402:	f023 0302 	bic.w	r3, r3, #2
 802e406:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802e408:	2300      	movs	r3, #0
}
 802e40a:	4618      	mov	r0, r3
 802e40c:	3714      	adds	r7, #20
 802e40e:	46bd      	mov	sp, r7
 802e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e414:	4770      	bx	lr

0802e416 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 802e416:	b480      	push	{r7}
 802e418:	b085      	sub	sp, #20
 802e41a:	af00      	add	r7, sp, #0
 802e41c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e41e:	687b      	ldr	r3, [r7, #4]
 802e420:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802e422:	68fb      	ldr	r3, [r7, #12]
 802e424:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802e428:	681b      	ldr	r3, [r3, #0]
 802e42a:	68fa      	ldr	r2, [r7, #12]
 802e42c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802e430:	f023 0303 	bic.w	r3, r3, #3
 802e434:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802e436:	68fb      	ldr	r3, [r7, #12]
 802e438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e43c:	685b      	ldr	r3, [r3, #4]
 802e43e:	68fa      	ldr	r2, [r7, #12]
 802e440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802e444:	f043 0302 	orr.w	r3, r3, #2
 802e448:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802e44a:	2300      	movs	r3, #0
}
 802e44c:	4618      	mov	r0, r3
 802e44e:	3714      	adds	r7, #20
 802e450:	46bd      	mov	sp, r7
 802e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e456:	4770      	bx	lr

0802e458 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802e458:	b480      	push	{r7}
 802e45a:	b085      	sub	sp, #20
 802e45c:	af00      	add	r7, sp, #0
 802e45e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802e460:	687b      	ldr	r3, [r7, #4]
 802e462:	695b      	ldr	r3, [r3, #20]
 802e464:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802e466:	687b      	ldr	r3, [r7, #4]
 802e468:	699b      	ldr	r3, [r3, #24]
 802e46a:	68fa      	ldr	r2, [r7, #12]
 802e46c:	4013      	ands	r3, r2
 802e46e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802e470:	68fb      	ldr	r3, [r7, #12]
}
 802e472:	4618      	mov	r0, r3
 802e474:	3714      	adds	r7, #20
 802e476:	46bd      	mov	sp, r7
 802e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e47c:	4770      	bx	lr

0802e47e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802e47e:	b480      	push	{r7}
 802e480:	b085      	sub	sp, #20
 802e482:	af00      	add	r7, sp, #0
 802e484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e486:	687b      	ldr	r3, [r7, #4]
 802e488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802e48a:	68fb      	ldr	r3, [r7, #12]
 802e48c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e490:	699b      	ldr	r3, [r3, #24]
 802e492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802e494:	68fb      	ldr	r3, [r7, #12]
 802e496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e49a:	69db      	ldr	r3, [r3, #28]
 802e49c:	68ba      	ldr	r2, [r7, #8]
 802e49e:	4013      	ands	r3, r2
 802e4a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 802e4a2:	68bb      	ldr	r3, [r7, #8]
 802e4a4:	0c1b      	lsrs	r3, r3, #16
}
 802e4a6:	4618      	mov	r0, r3
 802e4a8:	3714      	adds	r7, #20
 802e4aa:	46bd      	mov	sp, r7
 802e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e4b0:	4770      	bx	lr

0802e4b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802e4b2:	b480      	push	{r7}
 802e4b4:	b085      	sub	sp, #20
 802e4b6:	af00      	add	r7, sp, #0
 802e4b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e4ba:	687b      	ldr	r3, [r7, #4]
 802e4bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802e4be:	68fb      	ldr	r3, [r7, #12]
 802e4c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e4c4:	699b      	ldr	r3, [r3, #24]
 802e4c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802e4c8:	68fb      	ldr	r3, [r7, #12]
 802e4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e4ce:	69db      	ldr	r3, [r3, #28]
 802e4d0:	68ba      	ldr	r2, [r7, #8]
 802e4d2:	4013      	ands	r3, r2
 802e4d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 802e4d6:	68bb      	ldr	r3, [r7, #8]
 802e4d8:	b29b      	uxth	r3, r3
}
 802e4da:	4618      	mov	r0, r3
 802e4dc:	3714      	adds	r7, #20
 802e4de:	46bd      	mov	sp, r7
 802e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e4e4:	4770      	bx	lr

0802e4e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802e4e6:	b480      	push	{r7}
 802e4e8:	b085      	sub	sp, #20
 802e4ea:	af00      	add	r7, sp, #0
 802e4ec:	6078      	str	r0, [r7, #4]
 802e4ee:	460b      	mov	r3, r1
 802e4f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e4f2:	687b      	ldr	r3, [r7, #4]
 802e4f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 802e4f6:	78fb      	ldrb	r3, [r7, #3]
 802e4f8:	015a      	lsls	r2, r3, #5
 802e4fa:	68fb      	ldr	r3, [r7, #12]
 802e4fc:	4413      	add	r3, r2
 802e4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e502:	689b      	ldr	r3, [r3, #8]
 802e504:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 802e506:	68fb      	ldr	r3, [r7, #12]
 802e508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e50c:	695b      	ldr	r3, [r3, #20]
 802e50e:	68ba      	ldr	r2, [r7, #8]
 802e510:	4013      	ands	r3, r2
 802e512:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802e514:	68bb      	ldr	r3, [r7, #8]
}
 802e516:	4618      	mov	r0, r3
 802e518:	3714      	adds	r7, #20
 802e51a:	46bd      	mov	sp, r7
 802e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e520:	4770      	bx	lr

0802e522 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802e522:	b480      	push	{r7}
 802e524:	b087      	sub	sp, #28
 802e526:	af00      	add	r7, sp, #0
 802e528:	6078      	str	r0, [r7, #4]
 802e52a:	460b      	mov	r3, r1
 802e52c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e52e:	687b      	ldr	r3, [r7, #4]
 802e530:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 802e532:	697b      	ldr	r3, [r7, #20]
 802e534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e538:	691b      	ldr	r3, [r3, #16]
 802e53a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 802e53c:	697b      	ldr	r3, [r7, #20]
 802e53e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e544:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 802e546:	78fb      	ldrb	r3, [r7, #3]
 802e548:	f003 030f 	and.w	r3, r3, #15
 802e54c:	68fa      	ldr	r2, [r7, #12]
 802e54e:	fa22 f303 	lsr.w	r3, r2, r3
 802e552:	01db      	lsls	r3, r3, #7
 802e554:	b2db      	uxtb	r3, r3
 802e556:	693a      	ldr	r2, [r7, #16]
 802e558:	4313      	orrs	r3, r2
 802e55a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 802e55c:	78fb      	ldrb	r3, [r7, #3]
 802e55e:	015a      	lsls	r2, r3, #5
 802e560:	697b      	ldr	r3, [r7, #20]
 802e562:	4413      	add	r3, r2
 802e564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e568:	689b      	ldr	r3, [r3, #8]
 802e56a:	693a      	ldr	r2, [r7, #16]
 802e56c:	4013      	ands	r3, r2
 802e56e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802e570:	68bb      	ldr	r3, [r7, #8]
}
 802e572:	4618      	mov	r0, r3
 802e574:	371c      	adds	r7, #28
 802e576:	46bd      	mov	sp, r7
 802e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e57c:	4770      	bx	lr

0802e57e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802e57e:	b480      	push	{r7}
 802e580:	b083      	sub	sp, #12
 802e582:	af00      	add	r7, sp, #0
 802e584:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802e586:	687b      	ldr	r3, [r7, #4]
 802e588:	695b      	ldr	r3, [r3, #20]
 802e58a:	f003 0301 	and.w	r3, r3, #1
}
 802e58e:	4618      	mov	r0, r3
 802e590:	370c      	adds	r7, #12
 802e592:	46bd      	mov	sp, r7
 802e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e598:	4770      	bx	lr

0802e59a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 802e59a:	b480      	push	{r7}
 802e59c:	b085      	sub	sp, #20
 802e59e:	af00      	add	r7, sp, #0
 802e5a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e5a2:	687b      	ldr	r3, [r7, #4]
 802e5a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 802e5a6:	68fb      	ldr	r3, [r7, #12]
 802e5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e5ac:	681b      	ldr	r3, [r3, #0]
 802e5ae:	68fa      	ldr	r2, [r7, #12]
 802e5b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e5b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802e5b8:	f023 0307 	bic.w	r3, r3, #7
 802e5bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 802e5be:	68fb      	ldr	r3, [r7, #12]
 802e5c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e5c4:	685b      	ldr	r3, [r3, #4]
 802e5c6:	68fa      	ldr	r2, [r7, #12]
 802e5c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802e5cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802e5d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802e5d2:	2300      	movs	r3, #0
}
 802e5d4:	4618      	mov	r0, r3
 802e5d6:	3714      	adds	r7, #20
 802e5d8:	46bd      	mov	sp, r7
 802e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e5de:	4770      	bx	lr

0802e5e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 802e5e0:	b480      	push	{r7}
 802e5e2:	b087      	sub	sp, #28
 802e5e4:	af00      	add	r7, sp, #0
 802e5e6:	60f8      	str	r0, [r7, #12]
 802e5e8:	460b      	mov	r3, r1
 802e5ea:	607a      	str	r2, [r7, #4]
 802e5ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e5ee:	68fb      	ldr	r3, [r7, #12]
 802e5f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802e5f2:	68fb      	ldr	r3, [r7, #12]
 802e5f4:	333c      	adds	r3, #60	; 0x3c
 802e5f6:	3304      	adds	r3, #4
 802e5f8:	681b      	ldr	r3, [r3, #0]
 802e5fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 802e5fc:	693b      	ldr	r3, [r7, #16]
 802e5fe:	4a26      	ldr	r2, [pc, #152]	; (802e698 <USB_EP0_OutStart+0xb8>)
 802e600:	4293      	cmp	r3, r2
 802e602:	d90a      	bls.n	802e61a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802e604:	697b      	ldr	r3, [r7, #20]
 802e606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e60a:	681b      	ldr	r3, [r3, #0]
 802e60c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e614:	d101      	bne.n	802e61a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 802e616:	2300      	movs	r3, #0
 802e618:	e037      	b.n	802e68a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 802e61a:	697b      	ldr	r3, [r7, #20]
 802e61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e620:	461a      	mov	r2, r3
 802e622:	2300      	movs	r3, #0
 802e624:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802e626:	697b      	ldr	r3, [r7, #20]
 802e628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e62c:	691b      	ldr	r3, [r3, #16]
 802e62e:	697a      	ldr	r2, [r7, #20]
 802e630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e634:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802e638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 802e63a:	697b      	ldr	r3, [r7, #20]
 802e63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e640:	691b      	ldr	r3, [r3, #16]
 802e642:	697a      	ldr	r2, [r7, #20]
 802e644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e648:	f043 0318 	orr.w	r3, r3, #24
 802e64c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 802e64e:	697b      	ldr	r3, [r7, #20]
 802e650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e654:	691b      	ldr	r3, [r3, #16]
 802e656:	697a      	ldr	r2, [r7, #20]
 802e658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e65c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 802e660:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 802e662:	7afb      	ldrb	r3, [r7, #11]
 802e664:	2b01      	cmp	r3, #1
 802e666:	d10f      	bne.n	802e688 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 802e668:	697b      	ldr	r3, [r7, #20]
 802e66a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e66e:	461a      	mov	r2, r3
 802e670:	687b      	ldr	r3, [r7, #4]
 802e672:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 802e674:	697b      	ldr	r3, [r7, #20]
 802e676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e67a:	681b      	ldr	r3, [r3, #0]
 802e67c:	697a      	ldr	r2, [r7, #20]
 802e67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e682:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 802e686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802e688:	2300      	movs	r3, #0
}
 802e68a:	4618      	mov	r0, r3
 802e68c:	371c      	adds	r7, #28
 802e68e:	46bd      	mov	sp, r7
 802e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e694:	4770      	bx	lr
 802e696:	bf00      	nop
 802e698:	4f54300a 	.word	0x4f54300a

0802e69c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802e69c:	b480      	push	{r7}
 802e69e:	b085      	sub	sp, #20
 802e6a0:	af00      	add	r7, sp, #0
 802e6a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802e6a4:	2300      	movs	r3, #0
 802e6a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802e6a8:	68fb      	ldr	r3, [r7, #12]
 802e6aa:	3301      	adds	r3, #1
 802e6ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802e6ae:	68fb      	ldr	r3, [r7, #12]
 802e6b0:	4a13      	ldr	r2, [pc, #76]	; (802e700 <USB_CoreReset+0x64>)
 802e6b2:	4293      	cmp	r3, r2
 802e6b4:	d901      	bls.n	802e6ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802e6b6:	2303      	movs	r3, #3
 802e6b8:	e01b      	b.n	802e6f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802e6ba:	687b      	ldr	r3, [r7, #4]
 802e6bc:	691b      	ldr	r3, [r3, #16]
 802e6be:	2b00      	cmp	r3, #0
 802e6c0:	daf2      	bge.n	802e6a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802e6c2:	2300      	movs	r3, #0
 802e6c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802e6c6:	687b      	ldr	r3, [r7, #4]
 802e6c8:	691b      	ldr	r3, [r3, #16]
 802e6ca:	f043 0201 	orr.w	r2, r3, #1
 802e6ce:	687b      	ldr	r3, [r7, #4]
 802e6d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802e6d2:	68fb      	ldr	r3, [r7, #12]
 802e6d4:	3301      	adds	r3, #1
 802e6d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802e6d8:	68fb      	ldr	r3, [r7, #12]
 802e6da:	4a09      	ldr	r2, [pc, #36]	; (802e700 <USB_CoreReset+0x64>)
 802e6dc:	4293      	cmp	r3, r2
 802e6de:	d901      	bls.n	802e6e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802e6e0:	2303      	movs	r3, #3
 802e6e2:	e006      	b.n	802e6f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802e6e4:	687b      	ldr	r3, [r7, #4]
 802e6e6:	691b      	ldr	r3, [r3, #16]
 802e6e8:	f003 0301 	and.w	r3, r3, #1
 802e6ec:	2b01      	cmp	r3, #1
 802e6ee:	d0f0      	beq.n	802e6d2 <USB_CoreReset+0x36>

  return HAL_OK;
 802e6f0:	2300      	movs	r3, #0
}
 802e6f2:	4618      	mov	r0, r3
 802e6f4:	3714      	adds	r7, #20
 802e6f6:	46bd      	mov	sp, r7
 802e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e6fc:	4770      	bx	lr
 802e6fe:	bf00      	nop
 802e700:	00030d40 	.word	0x00030d40

0802e704 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802e704:	b580      	push	{r7, lr}
 802e706:	b084      	sub	sp, #16
 802e708:	af00      	add	r7, sp, #0
 802e70a:	6078      	str	r0, [r7, #4]
 802e70c:	460b      	mov	r3, r1
 802e70e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 802e710:	205c      	movs	r0, #92	; 0x5c
 802e712:	f002 fedb 	bl	80314cc <USBD_static_malloc>
 802e716:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 802e718:	68fb      	ldr	r3, [r7, #12]
 802e71a:	2b00      	cmp	r3, #0
 802e71c:	d109      	bne.n	802e732 <USBD_CDC_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 802e71e:	687b      	ldr	r3, [r7, #4]
 802e720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e724:	687b      	ldr	r3, [r7, #4]
 802e726:	32b0      	adds	r2, #176	; 0xb0
 802e728:	2100      	movs	r1, #0
 802e72a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 802e72e:	2302      	movs	r3, #2
 802e730:	e0ca      	b.n	802e8c8 <USBD_CDC_Init+0x1c4>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 802e732:	225c      	movs	r2, #92	; 0x5c
 802e734:	2100      	movs	r1, #0
 802e736:	68f8      	ldr	r0, [r7, #12]
 802e738:	f003 f871 	bl	803181e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 802e73c:	687b      	ldr	r3, [r7, #4]
 802e73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e742:	687b      	ldr	r3, [r7, #4]
 802e744:	32b0      	adds	r2, #176	; 0xb0
 802e746:	68f9      	ldr	r1, [r7, #12]
 802e748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 802e74c:	687b      	ldr	r3, [r7, #4]
 802e74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e752:	687b      	ldr	r3, [r7, #4]
 802e754:	32b0      	adds	r2, #176	; 0xb0
 802e756:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802e75a:	687b      	ldr	r3, [r7, #4]
 802e75c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802e760:	687b      	ldr	r3, [r7, #4]
 802e762:	7c1b      	ldrb	r3, [r3, #16]
 802e764:	2b00      	cmp	r3, #0
 802e766:	d136      	bne.n	802e7d6 <USBD_CDC_Init+0xd2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 802e768:	4b59      	ldr	r3, [pc, #356]	; (802e8d0 <USBD_CDC_Init+0x1cc>)
 802e76a:	7819      	ldrb	r1, [r3, #0]
 802e76c:	2340      	movs	r3, #64	; 0x40
 802e76e:	2202      	movs	r2, #2
 802e770:	6878      	ldr	r0, [r7, #4]
 802e772:	f002 fd88 	bl	8031286 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 802e776:	4b56      	ldr	r3, [pc, #344]	; (802e8d0 <USBD_CDC_Init+0x1cc>)
 802e778:	781b      	ldrb	r3, [r3, #0]
 802e77a:	f003 020f 	and.w	r2, r3, #15
 802e77e:	6879      	ldr	r1, [r7, #4]
 802e780:	4613      	mov	r3, r2
 802e782:	009b      	lsls	r3, r3, #2
 802e784:	4413      	add	r3, r2
 802e786:	009b      	lsls	r3, r3, #2
 802e788:	440b      	add	r3, r1
 802e78a:	3324      	adds	r3, #36	; 0x24
 802e78c:	2201      	movs	r2, #1
 802e78e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 802e790:	4b50      	ldr	r3, [pc, #320]	; (802e8d4 <USBD_CDC_Init+0x1d0>)
 802e792:	7819      	ldrb	r1, [r3, #0]
 802e794:	2340      	movs	r3, #64	; 0x40
 802e796:	2202      	movs	r2, #2
 802e798:	6878      	ldr	r0, [r7, #4]
 802e79a:	f002 fd74 	bl	8031286 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 802e79e:	4b4d      	ldr	r3, [pc, #308]	; (802e8d4 <USBD_CDC_Init+0x1d0>)
 802e7a0:	781b      	ldrb	r3, [r3, #0]
 802e7a2:	f003 020f 	and.w	r2, r3, #15
 802e7a6:	6879      	ldr	r1, [r7, #4]
 802e7a8:	4613      	mov	r3, r2
 802e7aa:	009b      	lsls	r3, r3, #2
 802e7ac:	4413      	add	r3, r2
 802e7ae:	009b      	lsls	r3, r3, #2
 802e7b0:	440b      	add	r3, r1
 802e7b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802e7b6:	2201      	movs	r2, #1
 802e7b8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 802e7ba:	4b47      	ldr	r3, [pc, #284]	; (802e8d8 <USBD_CDC_Init+0x1d4>)
 802e7bc:	781b      	ldrb	r3, [r3, #0]
 802e7be:	f003 020f 	and.w	r2, r3, #15
 802e7c2:	6879      	ldr	r1, [r7, #4]
 802e7c4:	4613      	mov	r3, r2
 802e7c6:	009b      	lsls	r3, r3, #2
 802e7c8:	4413      	add	r3, r2
 802e7ca:	009b      	lsls	r3, r3, #2
 802e7cc:	440b      	add	r3, r1
 802e7ce:	3326      	adds	r3, #38	; 0x26
 802e7d0:	2210      	movs	r2, #16
 802e7d2:	801a      	strh	r2, [r3, #0]
 802e7d4:	e035      	b.n	802e842 <USBD_CDC_Init+0x13e>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 802e7d6:	4b3e      	ldr	r3, [pc, #248]	; (802e8d0 <USBD_CDC_Init+0x1cc>)
 802e7d8:	7819      	ldrb	r1, [r3, #0]
 802e7da:	2340      	movs	r3, #64	; 0x40
 802e7dc:	2202      	movs	r2, #2
 802e7de:	6878      	ldr	r0, [r7, #4]
 802e7e0:	f002 fd51 	bl	8031286 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 802e7e4:	4b3a      	ldr	r3, [pc, #232]	; (802e8d0 <USBD_CDC_Init+0x1cc>)
 802e7e6:	781b      	ldrb	r3, [r3, #0]
 802e7e8:	f003 020f 	and.w	r2, r3, #15
 802e7ec:	6879      	ldr	r1, [r7, #4]
 802e7ee:	4613      	mov	r3, r2
 802e7f0:	009b      	lsls	r3, r3, #2
 802e7f2:	4413      	add	r3, r2
 802e7f4:	009b      	lsls	r3, r3, #2
 802e7f6:	440b      	add	r3, r1
 802e7f8:	3324      	adds	r3, #36	; 0x24
 802e7fa:	2201      	movs	r2, #1
 802e7fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 802e7fe:	4b35      	ldr	r3, [pc, #212]	; (802e8d4 <USBD_CDC_Init+0x1d0>)
 802e800:	7819      	ldrb	r1, [r3, #0]
 802e802:	2340      	movs	r3, #64	; 0x40
 802e804:	2202      	movs	r2, #2
 802e806:	6878      	ldr	r0, [r7, #4]
 802e808:	f002 fd3d 	bl	8031286 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 802e80c:	4b31      	ldr	r3, [pc, #196]	; (802e8d4 <USBD_CDC_Init+0x1d0>)
 802e80e:	781b      	ldrb	r3, [r3, #0]
 802e810:	f003 020f 	and.w	r2, r3, #15
 802e814:	6879      	ldr	r1, [r7, #4]
 802e816:	4613      	mov	r3, r2
 802e818:	009b      	lsls	r3, r3, #2
 802e81a:	4413      	add	r3, r2
 802e81c:	009b      	lsls	r3, r3, #2
 802e81e:	440b      	add	r3, r1
 802e820:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802e824:	2201      	movs	r2, #1
 802e826:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 802e828:	4b2b      	ldr	r3, [pc, #172]	; (802e8d8 <USBD_CDC_Init+0x1d4>)
 802e82a:	781b      	ldrb	r3, [r3, #0]
 802e82c:	f003 020f 	and.w	r2, r3, #15
 802e830:	6879      	ldr	r1, [r7, #4]
 802e832:	4613      	mov	r3, r2
 802e834:	009b      	lsls	r3, r3, #2
 802e836:	4413      	add	r3, r2
 802e838:	009b      	lsls	r3, r3, #2
 802e83a:	440b      	add	r3, r1
 802e83c:	3326      	adds	r3, #38	; 0x26
 802e83e:	2210      	movs	r2, #16
 802e840:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 802e842:	4b25      	ldr	r3, [pc, #148]	; (802e8d8 <USBD_CDC_Init+0x1d4>)
 802e844:	7819      	ldrb	r1, [r3, #0]
 802e846:	2308      	movs	r3, #8
 802e848:	2203      	movs	r2, #3
 802e84a:	6878      	ldr	r0, [r7, #4]
 802e84c:	f002 fd1b 	bl	8031286 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 802e850:	4b21      	ldr	r3, [pc, #132]	; (802e8d8 <USBD_CDC_Init+0x1d4>)
 802e852:	781b      	ldrb	r3, [r3, #0]
 802e854:	f003 020f 	and.w	r2, r3, #15
 802e858:	6879      	ldr	r1, [r7, #4]
 802e85a:	4613      	mov	r3, r2
 802e85c:	009b      	lsls	r3, r3, #2
 802e85e:	4413      	add	r3, r2
 802e860:	009b      	lsls	r3, r3, #2
 802e862:	440b      	add	r3, r1
 802e864:	3324      	adds	r3, #36	; 0x24
 802e866:	2201      	movs	r2, #1
 802e868:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 802e86a:	68fb      	ldr	r3, [r7, #12]
 802e86c:	2200      	movs	r2, #0
 802e86e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 802e870:	687b      	ldr	r3, [r7, #4]
 802e872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e876:	687a      	ldr	r2, [r7, #4]
 802e878:	33b0      	adds	r3, #176	; 0xb0
 802e87a:	009b      	lsls	r3, r3, #2
 802e87c:	4413      	add	r3, r2
 802e87e:	685b      	ldr	r3, [r3, #4]
 802e880:	681b      	ldr	r3, [r3, #0]
 802e882:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 802e884:	68fb      	ldr	r3, [r7, #12]
 802e886:	2200      	movs	r2, #0
 802e888:	655a      	str	r2, [r3, #84]	; 0x54
  hcdc->RxState = 0U;
 802e88a:	68fb      	ldr	r3, [r7, #12]
 802e88c:	2200      	movs	r2, #0
 802e88e:	659a      	str	r2, [r3, #88]	; 0x58

  if (hcdc->RxBuffer == NULL)
 802e890:	68fb      	ldr	r3, [r7, #12]
 802e892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e894:	2b00      	cmp	r3, #0
 802e896:	d101      	bne.n	802e89c <USBD_CDC_Init+0x198>
  {
    return (uint8_t)USBD_EMEM;
 802e898:	2302      	movs	r3, #2
 802e89a:	e015      	b.n	802e8c8 <USBD_CDC_Init+0x1c4>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802e89c:	687b      	ldr	r3, [r7, #4]
 802e89e:	7c1b      	ldrb	r3, [r3, #16]
 802e8a0:	2b00      	cmp	r3, #0
 802e8a2:	d108      	bne.n	802e8b6 <USBD_CDC_Init+0x1b2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802e8a4:	4b0b      	ldr	r3, [pc, #44]	; (802e8d4 <USBD_CDC_Init+0x1d0>)
 802e8a6:	7819      	ldrb	r1, [r3, #0]
 802e8a8:	68fb      	ldr	r3, [r7, #12]
 802e8aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802e8ac:	2340      	movs	r3, #64	; 0x40
 802e8ae:	6878      	ldr	r0, [r7, #4]
 802e8b0:	f002 fdd8 	bl	8031464 <USBD_LL_PrepareReceive>
 802e8b4:	e007      	b.n	802e8c6 <USBD_CDC_Init+0x1c2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802e8b6:	4b07      	ldr	r3, [pc, #28]	; (802e8d4 <USBD_CDC_Init+0x1d0>)
 802e8b8:	7819      	ldrb	r1, [r3, #0]
 802e8ba:	68fb      	ldr	r3, [r7, #12]
 802e8bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802e8be:	2340      	movs	r3, #64	; 0x40
 802e8c0:	6878      	ldr	r0, [r7, #4]
 802e8c2:	f002 fdcf 	bl	8031464 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802e8c6:	2300      	movs	r3, #0
}
 802e8c8:	4618      	mov	r0, r3
 802e8ca:	3710      	adds	r7, #16
 802e8cc:	46bd      	mov	sp, r7
 802e8ce:	bd80      	pop	{r7, pc}
 802e8d0:	200001cb 	.word	0x200001cb
 802e8d4:	200001cc 	.word	0x200001cc
 802e8d8:	200001cd 	.word	0x200001cd

0802e8dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802e8dc:	b580      	push	{r7, lr}
 802e8de:	b082      	sub	sp, #8
 802e8e0:	af00      	add	r7, sp, #0
 802e8e2:	6078      	str	r0, [r7, #4]
 802e8e4:	460b      	mov	r3, r1
 802e8e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 802e8e8:	4b3a      	ldr	r3, [pc, #232]	; (802e9d4 <USBD_CDC_DeInit+0xf8>)
 802e8ea:	781b      	ldrb	r3, [r3, #0]
 802e8ec:	4619      	mov	r1, r3
 802e8ee:	6878      	ldr	r0, [r7, #4]
 802e8f0:	f002 fcef 	bl	80312d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 802e8f4:	4b37      	ldr	r3, [pc, #220]	; (802e9d4 <USBD_CDC_DeInit+0xf8>)
 802e8f6:	781b      	ldrb	r3, [r3, #0]
 802e8f8:	f003 020f 	and.w	r2, r3, #15
 802e8fc:	6879      	ldr	r1, [r7, #4]
 802e8fe:	4613      	mov	r3, r2
 802e900:	009b      	lsls	r3, r3, #2
 802e902:	4413      	add	r3, r2
 802e904:	009b      	lsls	r3, r3, #2
 802e906:	440b      	add	r3, r1
 802e908:	3324      	adds	r3, #36	; 0x24
 802e90a:	2200      	movs	r2, #0
 802e90c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 802e90e:	4b32      	ldr	r3, [pc, #200]	; (802e9d8 <USBD_CDC_DeInit+0xfc>)
 802e910:	781b      	ldrb	r3, [r3, #0]
 802e912:	4619      	mov	r1, r3
 802e914:	6878      	ldr	r0, [r7, #4]
 802e916:	f002 fcdc 	bl	80312d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 802e91a:	4b2f      	ldr	r3, [pc, #188]	; (802e9d8 <USBD_CDC_DeInit+0xfc>)
 802e91c:	781b      	ldrb	r3, [r3, #0]
 802e91e:	f003 020f 	and.w	r2, r3, #15
 802e922:	6879      	ldr	r1, [r7, #4]
 802e924:	4613      	mov	r3, r2
 802e926:	009b      	lsls	r3, r3, #2
 802e928:	4413      	add	r3, r2
 802e92a:	009b      	lsls	r3, r3, #2
 802e92c:	440b      	add	r3, r1
 802e92e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802e932:	2200      	movs	r2, #0
 802e934:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 802e936:	4b29      	ldr	r3, [pc, #164]	; (802e9dc <USBD_CDC_DeInit+0x100>)
 802e938:	781b      	ldrb	r3, [r3, #0]
 802e93a:	4619      	mov	r1, r3
 802e93c:	6878      	ldr	r0, [r7, #4]
 802e93e:	f002 fcc8 	bl	80312d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 802e942:	4b26      	ldr	r3, [pc, #152]	; (802e9dc <USBD_CDC_DeInit+0x100>)
 802e944:	781b      	ldrb	r3, [r3, #0]
 802e946:	f003 020f 	and.w	r2, r3, #15
 802e94a:	6879      	ldr	r1, [r7, #4]
 802e94c:	4613      	mov	r3, r2
 802e94e:	009b      	lsls	r3, r3, #2
 802e950:	4413      	add	r3, r2
 802e952:	009b      	lsls	r3, r3, #2
 802e954:	440b      	add	r3, r1
 802e956:	3324      	adds	r3, #36	; 0x24
 802e958:	2200      	movs	r2, #0
 802e95a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 802e95c:	4b1f      	ldr	r3, [pc, #124]	; (802e9dc <USBD_CDC_DeInit+0x100>)
 802e95e:	781b      	ldrb	r3, [r3, #0]
 802e960:	f003 020f 	and.w	r2, r3, #15
 802e964:	6879      	ldr	r1, [r7, #4]
 802e966:	4613      	mov	r3, r2
 802e968:	009b      	lsls	r3, r3, #2
 802e96a:	4413      	add	r3, r2
 802e96c:	009b      	lsls	r3, r3, #2
 802e96e:	440b      	add	r3, r1
 802e970:	3326      	adds	r3, #38	; 0x26
 802e972:	2200      	movs	r2, #0
 802e974:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 802e976:	687b      	ldr	r3, [r7, #4]
 802e978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e97c:	687b      	ldr	r3, [r7, #4]
 802e97e:	32b0      	adds	r2, #176	; 0xb0
 802e980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e984:	2b00      	cmp	r3, #0
 802e986:	d01f      	beq.n	802e9c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 802e988:	687b      	ldr	r3, [r7, #4]
 802e98a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e98e:	687a      	ldr	r2, [r7, #4]
 802e990:	33b0      	adds	r3, #176	; 0xb0
 802e992:	009b      	lsls	r3, r3, #2
 802e994:	4413      	add	r3, r2
 802e996:	685b      	ldr	r3, [r3, #4]
 802e998:	685b      	ldr	r3, [r3, #4]
 802e99a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 802e99c:	687b      	ldr	r3, [r7, #4]
 802e99e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e9a2:	687b      	ldr	r3, [r7, #4]
 802e9a4:	32b0      	adds	r2, #176	; 0xb0
 802e9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e9aa:	4618      	mov	r0, r3
 802e9ac:	f002 fd9c 	bl	80314e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 802e9b0:	687b      	ldr	r3, [r7, #4]
 802e9b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e9b6:	687b      	ldr	r3, [r7, #4]
 802e9b8:	32b0      	adds	r2, #176	; 0xb0
 802e9ba:	2100      	movs	r1, #0
 802e9bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 802e9c0:	687b      	ldr	r3, [r7, #4]
 802e9c2:	2200      	movs	r2, #0
 802e9c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 802e9c8:	2300      	movs	r3, #0
}
 802e9ca:	4618      	mov	r0, r3
 802e9cc:	3708      	adds	r7, #8
 802e9ce:	46bd      	mov	sp, r7
 802e9d0:	bd80      	pop	{r7, pc}
 802e9d2:	bf00      	nop
 802e9d4:	200001cb 	.word	0x200001cb
 802e9d8:	200001cc 	.word	0x200001cc
 802e9dc:	200001cd 	.word	0x200001cd

0802e9e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 802e9e0:	b580      	push	{r7, lr}
 802e9e2:	b086      	sub	sp, #24
 802e9e4:	af00      	add	r7, sp, #0
 802e9e6:	6078      	str	r0, [r7, #4]
 802e9e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802e9ea:	687b      	ldr	r3, [r7, #4]
 802e9ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e9f0:	687b      	ldr	r3, [r7, #4]
 802e9f2:	32b0      	adds	r2, #176	; 0xb0
 802e9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e9f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 802e9fa:	2300      	movs	r3, #0
 802e9fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 802e9fe:	2300      	movs	r3, #0
 802ea00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 802ea02:	2300      	movs	r3, #0
 802ea04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 802ea06:	693b      	ldr	r3, [r7, #16]
 802ea08:	2b00      	cmp	r3, #0
 802ea0a:	d101      	bne.n	802ea10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 802ea0c:	2303      	movs	r3, #3
 802ea0e:	e0bf      	b.n	802eb90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802ea10:	683b      	ldr	r3, [r7, #0]
 802ea12:	781b      	ldrb	r3, [r3, #0]
 802ea14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802ea18:	2b00      	cmp	r3, #0
 802ea1a:	d050      	beq.n	802eabe <USBD_CDC_Setup+0xde>
 802ea1c:	2b20      	cmp	r3, #32
 802ea1e:	f040 80af 	bne.w	802eb80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 802ea22:	683b      	ldr	r3, [r7, #0]
 802ea24:	88db      	ldrh	r3, [r3, #6]
 802ea26:	2b00      	cmp	r3, #0
 802ea28:	d03a      	beq.n	802eaa0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 802ea2a:	683b      	ldr	r3, [r7, #0]
 802ea2c:	781b      	ldrb	r3, [r3, #0]
 802ea2e:	b25b      	sxtb	r3, r3
 802ea30:	2b00      	cmp	r3, #0
 802ea32:	da1b      	bge.n	802ea6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802ea34:	687b      	ldr	r3, [r7, #4]
 802ea36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ea3a:	687a      	ldr	r2, [r7, #4]
 802ea3c:	33b0      	adds	r3, #176	; 0xb0
 802ea3e:	009b      	lsls	r3, r3, #2
 802ea40:	4413      	add	r3, r2
 802ea42:	685b      	ldr	r3, [r3, #4]
 802ea44:	689b      	ldr	r3, [r3, #8]
 802ea46:	683a      	ldr	r2, [r7, #0]
 802ea48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 802ea4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802ea4c:	683a      	ldr	r2, [r7, #0]
 802ea4e:	88d2      	ldrh	r2, [r2, #6]
 802ea50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 802ea52:	683b      	ldr	r3, [r7, #0]
 802ea54:	88db      	ldrh	r3, [r3, #6]
 802ea56:	2b07      	cmp	r3, #7
 802ea58:	bf28      	it	cs
 802ea5a:	2307      	movcs	r3, #7
 802ea5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 802ea5e:	693b      	ldr	r3, [r7, #16]
 802ea60:	89fa      	ldrh	r2, [r7, #14]
 802ea62:	4619      	mov	r1, r3
 802ea64:	6878      	ldr	r0, [r7, #4]
 802ea66:	f001 fd79 	bl	803055c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 802ea6a:	e090      	b.n	802eb8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 802ea6c:	683b      	ldr	r3, [r7, #0]
 802ea6e:	785a      	ldrb	r2, [r3, #1]
 802ea70:	693b      	ldr	r3, [r7, #16]
 802ea72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 802ea76:	683b      	ldr	r3, [r7, #0]
 802ea78:	88db      	ldrh	r3, [r3, #6]
 802ea7a:	2b3f      	cmp	r3, #63	; 0x3f
 802ea7c:	d803      	bhi.n	802ea86 <USBD_CDC_Setup+0xa6>
 802ea7e:	683b      	ldr	r3, [r7, #0]
 802ea80:	88db      	ldrh	r3, [r3, #6]
 802ea82:	b2da      	uxtb	r2, r3
 802ea84:	e000      	b.n	802ea88 <USBD_CDC_Setup+0xa8>
 802ea86:	2240      	movs	r2, #64	; 0x40
 802ea88:	693b      	ldr	r3, [r7, #16]
 802ea8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 802ea8e:	6939      	ldr	r1, [r7, #16]
 802ea90:	693b      	ldr	r3, [r7, #16]
 802ea92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ea96:	461a      	mov	r2, r3
 802ea98:	6878      	ldr	r0, [r7, #4]
 802ea9a:	f001 fd8b 	bl	80305b4 <USBD_CtlPrepareRx>
      break;
 802ea9e:	e076      	b.n	802eb8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802eaa0:	687b      	ldr	r3, [r7, #4]
 802eaa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802eaa6:	687a      	ldr	r2, [r7, #4]
 802eaa8:	33b0      	adds	r3, #176	; 0xb0
 802eaaa:	009b      	lsls	r3, r3, #2
 802eaac:	4413      	add	r3, r2
 802eaae:	685b      	ldr	r3, [r3, #4]
 802eab0:	689b      	ldr	r3, [r3, #8]
 802eab2:	683a      	ldr	r2, [r7, #0]
 802eab4:	7850      	ldrb	r0, [r2, #1]
 802eab6:	2200      	movs	r2, #0
 802eab8:	6839      	ldr	r1, [r7, #0]
 802eaba:	4798      	blx	r3
      break;
 802eabc:	e067      	b.n	802eb8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802eabe:	683b      	ldr	r3, [r7, #0]
 802eac0:	785b      	ldrb	r3, [r3, #1]
 802eac2:	2b0b      	cmp	r3, #11
 802eac4:	d851      	bhi.n	802eb6a <USBD_CDC_Setup+0x18a>
 802eac6:	a201      	add	r2, pc, #4	; (adr r2, 802eacc <USBD_CDC_Setup+0xec>)
 802eac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802eacc:	0802eafd 	.word	0x0802eafd
 802ead0:	0802eb79 	.word	0x0802eb79
 802ead4:	0802eb6b 	.word	0x0802eb6b
 802ead8:	0802eb6b 	.word	0x0802eb6b
 802eadc:	0802eb6b 	.word	0x0802eb6b
 802eae0:	0802eb6b 	.word	0x0802eb6b
 802eae4:	0802eb6b 	.word	0x0802eb6b
 802eae8:	0802eb6b 	.word	0x0802eb6b
 802eaec:	0802eb6b 	.word	0x0802eb6b
 802eaf0:	0802eb6b 	.word	0x0802eb6b
 802eaf4:	0802eb27 	.word	0x0802eb27
 802eaf8:	0802eb51 	.word	0x0802eb51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802eafc:	687b      	ldr	r3, [r7, #4]
 802eafe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802eb02:	b2db      	uxtb	r3, r3
 802eb04:	2b03      	cmp	r3, #3
 802eb06:	d107      	bne.n	802eb18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 802eb08:	f107 030a 	add.w	r3, r7, #10
 802eb0c:	2202      	movs	r2, #2
 802eb0e:	4619      	mov	r1, r3
 802eb10:	6878      	ldr	r0, [r7, #4]
 802eb12:	f001 fd23 	bl	803055c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802eb16:	e032      	b.n	802eb7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 802eb18:	6839      	ldr	r1, [r7, #0]
 802eb1a:	6878      	ldr	r0, [r7, #4]
 802eb1c:	f001 fcad 	bl	803047a <USBD_CtlError>
            ret = USBD_FAIL;
 802eb20:	2303      	movs	r3, #3
 802eb22:	75fb      	strb	r3, [r7, #23]
          break;
 802eb24:	e02b      	b.n	802eb7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802eb26:	687b      	ldr	r3, [r7, #4]
 802eb28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802eb2c:	b2db      	uxtb	r3, r3
 802eb2e:	2b03      	cmp	r3, #3
 802eb30:	d107      	bne.n	802eb42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 802eb32:	f107 030d 	add.w	r3, r7, #13
 802eb36:	2201      	movs	r2, #1
 802eb38:	4619      	mov	r1, r3
 802eb3a:	6878      	ldr	r0, [r7, #4]
 802eb3c:	f001 fd0e 	bl	803055c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802eb40:	e01d      	b.n	802eb7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 802eb42:	6839      	ldr	r1, [r7, #0]
 802eb44:	6878      	ldr	r0, [r7, #4]
 802eb46:	f001 fc98 	bl	803047a <USBD_CtlError>
            ret = USBD_FAIL;
 802eb4a:	2303      	movs	r3, #3
 802eb4c:	75fb      	strb	r3, [r7, #23]
          break;
 802eb4e:	e016      	b.n	802eb7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 802eb50:	687b      	ldr	r3, [r7, #4]
 802eb52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802eb56:	b2db      	uxtb	r3, r3
 802eb58:	2b03      	cmp	r3, #3
 802eb5a:	d00f      	beq.n	802eb7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 802eb5c:	6839      	ldr	r1, [r7, #0]
 802eb5e:	6878      	ldr	r0, [r7, #4]
 802eb60:	f001 fc8b 	bl	803047a <USBD_CtlError>
            ret = USBD_FAIL;
 802eb64:	2303      	movs	r3, #3
 802eb66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 802eb68:	e008      	b.n	802eb7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 802eb6a:	6839      	ldr	r1, [r7, #0]
 802eb6c:	6878      	ldr	r0, [r7, #4]
 802eb6e:	f001 fc84 	bl	803047a <USBD_CtlError>
          ret = USBD_FAIL;
 802eb72:	2303      	movs	r3, #3
 802eb74:	75fb      	strb	r3, [r7, #23]
          break;
 802eb76:	e002      	b.n	802eb7e <USBD_CDC_Setup+0x19e>
          break;
 802eb78:	bf00      	nop
 802eb7a:	e008      	b.n	802eb8e <USBD_CDC_Setup+0x1ae>
          break;
 802eb7c:	bf00      	nop
      }
      break;
 802eb7e:	e006      	b.n	802eb8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 802eb80:	6839      	ldr	r1, [r7, #0]
 802eb82:	6878      	ldr	r0, [r7, #4]
 802eb84:	f001 fc79 	bl	803047a <USBD_CtlError>
      ret = USBD_FAIL;
 802eb88:	2303      	movs	r3, #3
 802eb8a:	75fb      	strb	r3, [r7, #23]
      break;
 802eb8c:	bf00      	nop
  }

  return (uint8_t)ret;
 802eb8e:	7dfb      	ldrb	r3, [r7, #23]
}
 802eb90:	4618      	mov	r0, r3
 802eb92:	3718      	adds	r7, #24
 802eb94:	46bd      	mov	sp, r7
 802eb96:	bd80      	pop	{r7, pc}

0802eb98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802eb98:	b580      	push	{r7, lr}
 802eb9a:	b084      	sub	sp, #16
 802eb9c:	af00      	add	r7, sp, #0
 802eb9e:	6078      	str	r0, [r7, #4]
 802eba0:	460b      	mov	r3, r1
 802eba2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 802eba4:	687b      	ldr	r3, [r7, #4]
 802eba6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802ebaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802ebac:	687b      	ldr	r3, [r7, #4]
 802ebae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ebb2:	687b      	ldr	r3, [r7, #4]
 802ebb4:	32b0      	adds	r2, #176	; 0xb0
 802ebb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ebba:	2b00      	cmp	r3, #0
 802ebbc:	d101      	bne.n	802ebc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 802ebbe:	2303      	movs	r3, #3
 802ebc0:	e063      	b.n	802ec8a <USBD_CDC_DataIn+0xf2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ebc2:	687b      	ldr	r3, [r7, #4]
 802ebc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ebc8:	687b      	ldr	r3, [r7, #4]
 802ebca:	32b0      	adds	r2, #176	; 0xb0
 802ebcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ebd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 802ebd2:	78fb      	ldrb	r3, [r7, #3]
 802ebd4:	f003 020f 	and.w	r2, r3, #15
 802ebd8:	6879      	ldr	r1, [r7, #4]
 802ebda:	4613      	mov	r3, r2
 802ebdc:	009b      	lsls	r3, r3, #2
 802ebde:	4413      	add	r3, r2
 802ebe0:	009b      	lsls	r3, r3, #2
 802ebe2:	440b      	add	r3, r1
 802ebe4:	3318      	adds	r3, #24
 802ebe6:	681b      	ldr	r3, [r3, #0]
 802ebe8:	2b00      	cmp	r3, #0
 802ebea:	d02f      	beq.n	802ec4c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 802ebec:	78fb      	ldrb	r3, [r7, #3]
 802ebee:	f003 020f 	and.w	r2, r3, #15
 802ebf2:	6879      	ldr	r1, [r7, #4]
 802ebf4:	4613      	mov	r3, r2
 802ebf6:	009b      	lsls	r3, r3, #2
 802ebf8:	4413      	add	r3, r2
 802ebfa:	009b      	lsls	r3, r3, #2
 802ebfc:	440b      	add	r3, r1
 802ebfe:	3318      	adds	r3, #24
 802ec00:	681a      	ldr	r2, [r3, #0]
 802ec02:	78fb      	ldrb	r3, [r7, #3]
 802ec04:	f003 010f 	and.w	r1, r3, #15
 802ec08:	68f8      	ldr	r0, [r7, #12]
 802ec0a:	460b      	mov	r3, r1
 802ec0c:	00db      	lsls	r3, r3, #3
 802ec0e:	440b      	add	r3, r1
 802ec10:	009b      	lsls	r3, r3, #2
 802ec12:	4403      	add	r3, r0
 802ec14:	3348      	adds	r3, #72	; 0x48
 802ec16:	681b      	ldr	r3, [r3, #0]
 802ec18:	fbb2 f1f3 	udiv	r1, r2, r3
 802ec1c:	fb01 f303 	mul.w	r3, r1, r3
 802ec20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 802ec22:	2b00      	cmp	r3, #0
 802ec24:	d112      	bne.n	802ec4c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 802ec26:	78fb      	ldrb	r3, [r7, #3]
 802ec28:	f003 020f 	and.w	r2, r3, #15
 802ec2c:	6879      	ldr	r1, [r7, #4]
 802ec2e:	4613      	mov	r3, r2
 802ec30:	009b      	lsls	r3, r3, #2
 802ec32:	4413      	add	r3, r2
 802ec34:	009b      	lsls	r3, r3, #2
 802ec36:	440b      	add	r3, r1
 802ec38:	3318      	adds	r3, #24
 802ec3a:	2200      	movs	r2, #0
 802ec3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 802ec3e:	78f9      	ldrb	r1, [r7, #3]
 802ec40:	2300      	movs	r3, #0
 802ec42:	2200      	movs	r2, #0
 802ec44:	6878      	ldr	r0, [r7, #4]
 802ec46:	f002 fbec 	bl	8031422 <USBD_LL_Transmit>
 802ec4a:	e01d      	b.n	802ec88 <USBD_CDC_DataIn+0xf0>
  }
  else
  {
    hcdc->TxState = 0U;
 802ec4c:	68bb      	ldr	r3, [r7, #8]
 802ec4e:	2200      	movs	r2, #0
 802ec50:	655a      	str	r2, [r3, #84]	; 0x54

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 802ec52:	687b      	ldr	r3, [r7, #4]
 802ec54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ec58:	687a      	ldr	r2, [r7, #4]
 802ec5a:	33b0      	adds	r3, #176	; 0xb0
 802ec5c:	009b      	lsls	r3, r3, #2
 802ec5e:	4413      	add	r3, r2
 802ec60:	685b      	ldr	r3, [r3, #4]
 802ec62:	691b      	ldr	r3, [r3, #16]
 802ec64:	2b00      	cmp	r3, #0
 802ec66:	d00f      	beq.n	802ec88 <USBD_CDC_DataIn+0xf0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 802ec68:	687b      	ldr	r3, [r7, #4]
 802ec6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ec6e:	687a      	ldr	r2, [r7, #4]
 802ec70:	33b0      	adds	r3, #176	; 0xb0
 802ec72:	009b      	lsls	r3, r3, #2
 802ec74:	4413      	add	r3, r2
 802ec76:	685b      	ldr	r3, [r3, #4]
 802ec78:	691b      	ldr	r3, [r3, #16]
 802ec7a:	68ba      	ldr	r2, [r7, #8]
 802ec7c:	6c90      	ldr	r0, [r2, #72]	; 0x48
 802ec7e:	68ba      	ldr	r2, [r7, #8]
 802ec80:	f102 0150 	add.w	r1, r2, #80	; 0x50
 802ec84:	78fa      	ldrb	r2, [r7, #3]
 802ec86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 802ec88:	2300      	movs	r3, #0
}
 802ec8a:	4618      	mov	r0, r3
 802ec8c:	3710      	adds	r7, #16
 802ec8e:	46bd      	mov	sp, r7
 802ec90:	bd80      	pop	{r7, pc}

0802ec92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802ec92:	b580      	push	{r7, lr}
 802ec94:	b084      	sub	sp, #16
 802ec96:	af00      	add	r7, sp, #0
 802ec98:	6078      	str	r0, [r7, #4]
 802ec9a:	460b      	mov	r3, r1
 802ec9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ec9e:	687b      	ldr	r3, [r7, #4]
 802eca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802eca4:	687b      	ldr	r3, [r7, #4]
 802eca6:	32b0      	adds	r2, #176	; 0xb0
 802eca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ecac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802ecae:	687b      	ldr	r3, [r7, #4]
 802ecb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ecb4:	687b      	ldr	r3, [r7, #4]
 802ecb6:	32b0      	adds	r2, #176	; 0xb0
 802ecb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ecbc:	2b00      	cmp	r3, #0
 802ecbe:	d101      	bne.n	802ecc4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 802ecc0:	2303      	movs	r3, #3
 802ecc2:	e017      	b.n	802ecf4 <USBD_CDC_DataOut+0x62>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802ecc4:	78fb      	ldrb	r3, [r7, #3]
 802ecc6:	4619      	mov	r1, r3
 802ecc8:	6878      	ldr	r0, [r7, #4]
 802ecca:	f002 fbec 	bl	80314a6 <USBD_LL_GetRxDataSize>
 802ecce:	4602      	mov	r2, r0
 802ecd0:	68fb      	ldr	r3, [r7, #12]
 802ecd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802ecd4:	687b      	ldr	r3, [r7, #4]
 802ecd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ecda:	687a      	ldr	r2, [r7, #4]
 802ecdc:	33b0      	adds	r3, #176	; 0xb0
 802ecde:	009b      	lsls	r3, r3, #2
 802ece0:	4413      	add	r3, r2
 802ece2:	685b      	ldr	r3, [r3, #4]
 802ece4:	68db      	ldr	r3, [r3, #12]
 802ece6:	68fa      	ldr	r2, [r7, #12]
 802ece8:	6c50      	ldr	r0, [r2, #68]	; 0x44
 802ecea:	68fa      	ldr	r2, [r7, #12]
 802ecec:	324c      	adds	r2, #76	; 0x4c
 802ecee:	4611      	mov	r1, r2
 802ecf0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 802ecf2:	2300      	movs	r3, #0
}
 802ecf4:	4618      	mov	r0, r3
 802ecf6:	3710      	adds	r7, #16
 802ecf8:	46bd      	mov	sp, r7
 802ecfa:	bd80      	pop	{r7, pc}

0802ecfc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 802ecfc:	b580      	push	{r7, lr}
 802ecfe:	b084      	sub	sp, #16
 802ed00:	af00      	add	r7, sp, #0
 802ed02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ed04:	687b      	ldr	r3, [r7, #4]
 802ed06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ed0a:	687b      	ldr	r3, [r7, #4]
 802ed0c:	32b0      	adds	r2, #176	; 0xb0
 802ed0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ed12:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 802ed14:	68fb      	ldr	r3, [r7, #12]
 802ed16:	2b00      	cmp	r3, #0
 802ed18:	d101      	bne.n	802ed1e <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 802ed1a:	2303      	movs	r3, #3
 802ed1c:	e025      	b.n	802ed6a <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 802ed1e:	687b      	ldr	r3, [r7, #4]
 802ed20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ed24:	687a      	ldr	r2, [r7, #4]
 802ed26:	33b0      	adds	r3, #176	; 0xb0
 802ed28:	009b      	lsls	r3, r3, #2
 802ed2a:	4413      	add	r3, r2
 802ed2c:	685b      	ldr	r3, [r3, #4]
 802ed2e:	2b00      	cmp	r3, #0
 802ed30:	d01a      	beq.n	802ed68 <USBD_CDC_EP0_RxReady+0x6c>
 802ed32:	68fb      	ldr	r3, [r7, #12]
 802ed34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802ed38:	2bff      	cmp	r3, #255	; 0xff
 802ed3a:	d015      	beq.n	802ed68 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802ed3c:	687b      	ldr	r3, [r7, #4]
 802ed3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ed42:	687a      	ldr	r2, [r7, #4]
 802ed44:	33b0      	adds	r3, #176	; 0xb0
 802ed46:	009b      	lsls	r3, r3, #2
 802ed48:	4413      	add	r3, r2
 802ed4a:	685b      	ldr	r3, [r3, #4]
 802ed4c:	689b      	ldr	r3, [r3, #8]
 802ed4e:	68fa      	ldr	r2, [r7, #12]
 802ed50:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                                     (uint8_t *)hcdc->data,
 802ed54:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 802ed56:	68fa      	ldr	r2, [r7, #12]
 802ed58:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802ed5c:	b292      	uxth	r2, r2
 802ed5e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 802ed60:	68fb      	ldr	r3, [r7, #12]
 802ed62:	22ff      	movs	r2, #255	; 0xff
 802ed64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return (uint8_t)USBD_OK;
 802ed68:	2300      	movs	r3, #0
}
 802ed6a:	4618      	mov	r0, r3
 802ed6c:	3710      	adds	r7, #16
 802ed6e:	46bd      	mov	sp, r7
 802ed70:	bd80      	pop	{r7, pc}
	...

0802ed74 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 802ed74:	b580      	push	{r7, lr}
 802ed76:	b086      	sub	sp, #24
 802ed78:	af00      	add	r7, sp, #0
 802ed7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802ed7c:	2182      	movs	r1, #130	; 0x82
 802ed7e:	4818      	ldr	r0, [pc, #96]	; (802ede0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802ed80:	f000 fd43 	bl	802f80a <USBD_GetEpDesc>
 802ed84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802ed86:	2101      	movs	r1, #1
 802ed88:	4815      	ldr	r0, [pc, #84]	; (802ede0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802ed8a:	f000 fd3e 	bl	802f80a <USBD_GetEpDesc>
 802ed8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802ed90:	2181      	movs	r1, #129	; 0x81
 802ed92:	4813      	ldr	r0, [pc, #76]	; (802ede0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802ed94:	f000 fd39 	bl	802f80a <USBD_GetEpDesc>
 802ed98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802ed9a:	697b      	ldr	r3, [r7, #20]
 802ed9c:	2b00      	cmp	r3, #0
 802ed9e:	d002      	beq.n	802eda6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802eda0:	697b      	ldr	r3, [r7, #20]
 802eda2:	2210      	movs	r2, #16
 802eda4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802eda6:	693b      	ldr	r3, [r7, #16]
 802eda8:	2b00      	cmp	r3, #0
 802edaa:	d006      	beq.n	802edba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802edac:	693b      	ldr	r3, [r7, #16]
 802edae:	2200      	movs	r2, #0
 802edb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802edb4:	711a      	strb	r2, [r3, #4]
 802edb6:	2200      	movs	r2, #0
 802edb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802edba:	68fb      	ldr	r3, [r7, #12]
 802edbc:	2b00      	cmp	r3, #0
 802edbe:	d006      	beq.n	802edce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802edc0:	68fb      	ldr	r3, [r7, #12]
 802edc2:	2200      	movs	r2, #0
 802edc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802edc8:	711a      	strb	r2, [r3, #4]
 802edca:	2200      	movs	r2, #0
 802edcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802edce:	687b      	ldr	r3, [r7, #4]
 802edd0:	2243      	movs	r2, #67	; 0x43
 802edd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802edd4:	4b02      	ldr	r3, [pc, #8]	; (802ede0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 802edd6:	4618      	mov	r0, r3
 802edd8:	3718      	adds	r7, #24
 802edda:	46bd      	mov	sp, r7
 802eddc:	bd80      	pop	{r7, pc}
 802edde:	bf00      	nop
 802ede0:	20000188 	.word	0x20000188

0802ede4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 802ede4:	b580      	push	{r7, lr}
 802ede6:	b086      	sub	sp, #24
 802ede8:	af00      	add	r7, sp, #0
 802edea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802edec:	2182      	movs	r1, #130	; 0x82
 802edee:	4818      	ldr	r0, [pc, #96]	; (802ee50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802edf0:	f000 fd0b 	bl	802f80a <USBD_GetEpDesc>
 802edf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802edf6:	2101      	movs	r1, #1
 802edf8:	4815      	ldr	r0, [pc, #84]	; (802ee50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802edfa:	f000 fd06 	bl	802f80a <USBD_GetEpDesc>
 802edfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802ee00:	2181      	movs	r1, #129	; 0x81
 802ee02:	4813      	ldr	r0, [pc, #76]	; (802ee50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802ee04:	f000 fd01 	bl	802f80a <USBD_GetEpDesc>
 802ee08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802ee0a:	697b      	ldr	r3, [r7, #20]
 802ee0c:	2b00      	cmp	r3, #0
 802ee0e:	d002      	beq.n	802ee16 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 802ee10:	697b      	ldr	r3, [r7, #20]
 802ee12:	2210      	movs	r2, #16
 802ee14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802ee16:	693b      	ldr	r3, [r7, #16]
 802ee18:	2b00      	cmp	r3, #0
 802ee1a:	d006      	beq.n	802ee2a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 802ee1c:	693b      	ldr	r3, [r7, #16]
 802ee1e:	2200      	movs	r2, #0
 802ee20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ee24:	711a      	strb	r2, [r3, #4]
 802ee26:	2200      	movs	r2, #0
 802ee28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802ee2a:	68fb      	ldr	r3, [r7, #12]
 802ee2c:	2b00      	cmp	r3, #0
 802ee2e:	d006      	beq.n	802ee3e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 802ee30:	68fb      	ldr	r3, [r7, #12]
 802ee32:	2200      	movs	r2, #0
 802ee34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ee38:	711a      	strb	r2, [r3, #4]
 802ee3a:	2200      	movs	r2, #0
 802ee3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802ee3e:	687b      	ldr	r3, [r7, #4]
 802ee40:	2243      	movs	r2, #67	; 0x43
 802ee42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802ee44:	4b02      	ldr	r3, [pc, #8]	; (802ee50 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 802ee46:	4618      	mov	r0, r3
 802ee48:	3718      	adds	r7, #24
 802ee4a:	46bd      	mov	sp, r7
 802ee4c:	bd80      	pop	{r7, pc}
 802ee4e:	bf00      	nop
 802ee50:	20000188 	.word	0x20000188

0802ee54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 802ee54:	b580      	push	{r7, lr}
 802ee56:	b086      	sub	sp, #24
 802ee58:	af00      	add	r7, sp, #0
 802ee5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802ee5c:	2182      	movs	r1, #130	; 0x82
 802ee5e:	4818      	ldr	r0, [pc, #96]	; (802eec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802ee60:	f000 fcd3 	bl	802f80a <USBD_GetEpDesc>
 802ee64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802ee66:	2101      	movs	r1, #1
 802ee68:	4815      	ldr	r0, [pc, #84]	; (802eec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802ee6a:	f000 fcce 	bl	802f80a <USBD_GetEpDesc>
 802ee6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802ee70:	2181      	movs	r1, #129	; 0x81
 802ee72:	4813      	ldr	r0, [pc, #76]	; (802eec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802ee74:	f000 fcc9 	bl	802f80a <USBD_GetEpDesc>
 802ee78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802ee7a:	697b      	ldr	r3, [r7, #20]
 802ee7c:	2b00      	cmp	r3, #0
 802ee7e:	d002      	beq.n	802ee86 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802ee80:	697b      	ldr	r3, [r7, #20]
 802ee82:	2210      	movs	r2, #16
 802ee84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802ee86:	693b      	ldr	r3, [r7, #16]
 802ee88:	2b00      	cmp	r3, #0
 802ee8a:	d006      	beq.n	802ee9a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802ee8c:	693b      	ldr	r3, [r7, #16]
 802ee8e:	2200      	movs	r2, #0
 802ee90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ee94:	711a      	strb	r2, [r3, #4]
 802ee96:	2200      	movs	r2, #0
 802ee98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802ee9a:	68fb      	ldr	r3, [r7, #12]
 802ee9c:	2b00      	cmp	r3, #0
 802ee9e:	d006      	beq.n	802eeae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802eea0:	68fb      	ldr	r3, [r7, #12]
 802eea2:	2200      	movs	r2, #0
 802eea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802eea8:	711a      	strb	r2, [r3, #4]
 802eeaa:	2200      	movs	r2, #0
 802eeac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802eeae:	687b      	ldr	r3, [r7, #4]
 802eeb0:	2243      	movs	r2, #67	; 0x43
 802eeb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802eeb4:	4b02      	ldr	r3, [pc, #8]	; (802eec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 802eeb6:	4618      	mov	r0, r3
 802eeb8:	3718      	adds	r7, #24
 802eeba:	46bd      	mov	sp, r7
 802eebc:	bd80      	pop	{r7, pc}
 802eebe:	bf00      	nop
 802eec0:	20000188 	.word	0x20000188

0802eec4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 802eec4:	b480      	push	{r7}
 802eec6:	b083      	sub	sp, #12
 802eec8:	af00      	add	r7, sp, #0
 802eeca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 802eecc:	687b      	ldr	r3, [r7, #4]
 802eece:	220a      	movs	r2, #10
 802eed0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 802eed2:	4b03      	ldr	r3, [pc, #12]	; (802eee0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 802eed4:	4618      	mov	r0, r3
 802eed6:	370c      	adds	r7, #12
 802eed8:	46bd      	mov	sp, r7
 802eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eede:	4770      	bx	lr
 802eee0:	20000144 	.word	0x20000144

0802eee4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 802eee4:	b480      	push	{r7}
 802eee6:	b083      	sub	sp, #12
 802eee8:	af00      	add	r7, sp, #0
 802eeea:	6078      	str	r0, [r7, #4]
 802eeec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 802eeee:	683b      	ldr	r3, [r7, #0]
 802eef0:	2b00      	cmp	r3, #0
 802eef2:	d101      	bne.n	802eef8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 802eef4:	2303      	movs	r3, #3
 802eef6:	e009      	b.n	802ef0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 802eef8:	687b      	ldr	r3, [r7, #4]
 802eefa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802eefe:	687a      	ldr	r2, [r7, #4]
 802ef00:	33b0      	adds	r3, #176	; 0xb0
 802ef02:	009b      	lsls	r3, r3, #2
 802ef04:	4413      	add	r3, r2
 802ef06:	683a      	ldr	r2, [r7, #0]
 802ef08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 802ef0a:	2300      	movs	r3, #0
}
 802ef0c:	4618      	mov	r0, r3
 802ef0e:	370c      	adds	r7, #12
 802ef10:	46bd      	mov	sp, r7
 802ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef16:	4770      	bx	lr

0802ef18 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 802ef18:	b480      	push	{r7}
 802ef1a:	b087      	sub	sp, #28
 802ef1c:	af00      	add	r7, sp, #0
 802ef1e:	60f8      	str	r0, [r7, #12]
 802ef20:	60b9      	str	r1, [r7, #8]
 802ef22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ef24:	68fb      	ldr	r3, [r7, #12]
 802ef26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ef2a:	68fb      	ldr	r3, [r7, #12]
 802ef2c:	32b0      	adds	r2, #176	; 0xb0
 802ef2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ef32:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 802ef34:	697b      	ldr	r3, [r7, #20]
 802ef36:	2b00      	cmp	r3, #0
 802ef38:	d101      	bne.n	802ef3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 802ef3a:	2303      	movs	r3, #3
 802ef3c:	e006      	b.n	802ef4c <USBD_CDC_SetTxBuffer+0x34>
  }

  hcdc->TxBuffer = pbuff;
 802ef3e:	697b      	ldr	r3, [r7, #20]
 802ef40:	68ba      	ldr	r2, [r7, #8]
 802ef42:	649a      	str	r2, [r3, #72]	; 0x48
  hcdc->TxLength = length;
 802ef44:	697b      	ldr	r3, [r7, #20]
 802ef46:	687a      	ldr	r2, [r7, #4]
 802ef48:	651a      	str	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 802ef4a:	2300      	movs	r3, #0
}
 802ef4c:	4618      	mov	r0, r3
 802ef4e:	371c      	adds	r7, #28
 802ef50:	46bd      	mov	sp, r7
 802ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef56:	4770      	bx	lr

0802ef58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 802ef58:	b480      	push	{r7}
 802ef5a:	b085      	sub	sp, #20
 802ef5c:	af00      	add	r7, sp, #0
 802ef5e:	6078      	str	r0, [r7, #4]
 802ef60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ef62:	687b      	ldr	r3, [r7, #4]
 802ef64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ef68:	687b      	ldr	r3, [r7, #4]
 802ef6a:	32b0      	adds	r2, #176	; 0xb0
 802ef6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ef70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 802ef72:	68fb      	ldr	r3, [r7, #12]
 802ef74:	2b00      	cmp	r3, #0
 802ef76:	d101      	bne.n	802ef7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 802ef78:	2303      	movs	r3, #3
 802ef7a:	e003      	b.n	802ef84 <USBD_CDC_SetRxBuffer+0x2c>
  }

  hcdc->RxBuffer = pbuff;
 802ef7c:	68fb      	ldr	r3, [r7, #12]
 802ef7e:	683a      	ldr	r2, [r7, #0]
 802ef80:	645a      	str	r2, [r3, #68]	; 0x44

  return (uint8_t)USBD_OK;
 802ef82:	2300      	movs	r3, #0
}
 802ef84:	4618      	mov	r0, r3
 802ef86:	3714      	adds	r7, #20
 802ef88:	46bd      	mov	sp, r7
 802ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef8e:	4770      	bx	lr

0802ef90 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 802ef90:	b580      	push	{r7, lr}
 802ef92:	b084      	sub	sp, #16
 802ef94:	af00      	add	r7, sp, #0
 802ef96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ef98:	687b      	ldr	r3, [r7, #4]
 802ef9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ef9e:	687b      	ldr	r3, [r7, #4]
 802efa0:	32b0      	adds	r2, #176	; 0xb0
 802efa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802efa6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 802efa8:	2301      	movs	r3, #1
 802efaa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802efac:	687b      	ldr	r3, [r7, #4]
 802efae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802efb2:	687b      	ldr	r3, [r7, #4]
 802efb4:	32b0      	adds	r2, #176	; 0xb0
 802efb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802efba:	2b00      	cmp	r3, #0
 802efbc:	d101      	bne.n	802efc2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 802efbe:	2303      	movs	r3, #3
 802efc0:	e020      	b.n	802f004 <USBD_CDC_TransmitPacket+0x74>
  }

  if (hcdc->TxState == 0U)
 802efc2:	68bb      	ldr	r3, [r7, #8]
 802efc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802efc6:	2b00      	cmp	r3, #0
 802efc8:	d11b      	bne.n	802f002 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 802efca:	68bb      	ldr	r3, [r7, #8]
 802efcc:	2201      	movs	r2, #1
 802efce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 802efd0:	4b0e      	ldr	r3, [pc, #56]	; (802f00c <USBD_CDC_TransmitPacket+0x7c>)
 802efd2:	781b      	ldrb	r3, [r3, #0]
 802efd4:	f003 020f 	and.w	r2, r3, #15
 802efd8:	68bb      	ldr	r3, [r7, #8]
 802efda:	6d19      	ldr	r1, [r3, #80]	; 0x50
 802efdc:	6878      	ldr	r0, [r7, #4]
 802efde:	4613      	mov	r3, r2
 802efe0:	009b      	lsls	r3, r3, #2
 802efe2:	4413      	add	r3, r2
 802efe4:	009b      	lsls	r3, r3, #2
 802efe6:	4403      	add	r3, r0
 802efe8:	3318      	adds	r3, #24
 802efea:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 802efec:	4b07      	ldr	r3, [pc, #28]	; (802f00c <USBD_CDC_TransmitPacket+0x7c>)
 802efee:	7819      	ldrb	r1, [r3, #0]
 802eff0:	68bb      	ldr	r3, [r7, #8]
 802eff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802eff4:	68bb      	ldr	r3, [r7, #8]
 802eff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802eff8:	6878      	ldr	r0, [r7, #4]
 802effa:	f002 fa12 	bl	8031422 <USBD_LL_Transmit>

    ret = USBD_OK;
 802effe:	2300      	movs	r3, #0
 802f000:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 802f002:	7bfb      	ldrb	r3, [r7, #15]
}
 802f004:	4618      	mov	r0, r3
 802f006:	3710      	adds	r7, #16
 802f008:	46bd      	mov	sp, r7
 802f00a:	bd80      	pop	{r7, pc}
 802f00c:	200001cb 	.word	0x200001cb

0802f010 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 802f010:	b580      	push	{r7, lr}
 802f012:	b084      	sub	sp, #16
 802f014:	af00      	add	r7, sp, #0
 802f016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802f018:	687b      	ldr	r3, [r7, #4]
 802f01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f01e:	687b      	ldr	r3, [r7, #4]
 802f020:	32b0      	adds	r2, #176	; 0xb0
 802f022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f026:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802f028:	687b      	ldr	r3, [r7, #4]
 802f02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f02e:	687b      	ldr	r3, [r7, #4]
 802f030:	32b0      	adds	r2, #176	; 0xb0
 802f032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f036:	2b00      	cmp	r3, #0
 802f038:	d101      	bne.n	802f03e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 802f03a:	2303      	movs	r3, #3
 802f03c:	e015      	b.n	802f06a <USBD_CDC_ReceivePacket+0x5a>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802f03e:	687b      	ldr	r3, [r7, #4]
 802f040:	7c1b      	ldrb	r3, [r3, #16]
 802f042:	2b00      	cmp	r3, #0
 802f044:	d108      	bne.n	802f058 <USBD_CDC_ReceivePacket+0x48>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802f046:	4b0b      	ldr	r3, [pc, #44]	; (802f074 <USBD_CDC_ReceivePacket+0x64>)
 802f048:	7819      	ldrb	r1, [r3, #0]
 802f04a:	68fb      	ldr	r3, [r7, #12]
 802f04c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802f04e:	2340      	movs	r3, #64	; 0x40
 802f050:	6878      	ldr	r0, [r7, #4]
 802f052:	f002 fa07 	bl	8031464 <USBD_LL_PrepareReceive>
 802f056:	e007      	b.n	802f068 <USBD_CDC_ReceivePacket+0x58>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802f058:	4b06      	ldr	r3, [pc, #24]	; (802f074 <USBD_CDC_ReceivePacket+0x64>)
 802f05a:	7819      	ldrb	r1, [r3, #0]
 802f05c:	68fb      	ldr	r3, [r7, #12]
 802f05e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802f060:	2340      	movs	r3, #64	; 0x40
 802f062:	6878      	ldr	r0, [r7, #4]
 802f064:	f002 f9fe 	bl	8031464 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802f068:	2300      	movs	r3, #0
}
 802f06a:	4618      	mov	r0, r3
 802f06c:	3710      	adds	r7, #16
 802f06e:	46bd      	mov	sp, r7
 802f070:	bd80      	pop	{r7, pc}
 802f072:	bf00      	nop
 802f074:	200001cc 	.word	0x200001cc

0802f078 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 802f078:	b580      	push	{r7, lr}
 802f07a:	b086      	sub	sp, #24
 802f07c:	af00      	add	r7, sp, #0
 802f07e:	60f8      	str	r0, [r7, #12]
 802f080:	60b9      	str	r1, [r7, #8]
 802f082:	4613      	mov	r3, r2
 802f084:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802f086:	68fb      	ldr	r3, [r7, #12]
 802f088:	2b00      	cmp	r3, #0
 802f08a:	d101      	bne.n	802f090 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 802f08c:	2303      	movs	r3, #3
 802f08e:	e01f      	b.n	802f0d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 802f090:	68fb      	ldr	r3, [r7, #12]
 802f092:	2200      	movs	r2, #0
 802f094:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 802f098:	68fb      	ldr	r3, [r7, #12]
 802f09a:	2200      	movs	r2, #0
 802f09c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 802f0a0:	68fb      	ldr	r3, [r7, #12]
 802f0a2:	2200      	movs	r2, #0
 802f0a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 802f0a8:	68bb      	ldr	r3, [r7, #8]
 802f0aa:	2b00      	cmp	r3, #0
 802f0ac:	d003      	beq.n	802f0b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 802f0ae:	68fb      	ldr	r3, [r7, #12]
 802f0b0:	68ba      	ldr	r2, [r7, #8]
 802f0b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f0b6:	68fb      	ldr	r3, [r7, #12]
 802f0b8:	2201      	movs	r2, #1
 802f0ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 802f0be:	68fb      	ldr	r3, [r7, #12]
 802f0c0:	79fa      	ldrb	r2, [r7, #7]
 802f0c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 802f0c4:	68f8      	ldr	r0, [r7, #12]
 802f0c6:	f002 f82d 	bl	8031124 <USBD_LL_Init>
 802f0ca:	4603      	mov	r3, r0
 802f0cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 802f0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 802f0d0:	4618      	mov	r0, r3
 802f0d2:	3718      	adds	r7, #24
 802f0d4:	46bd      	mov	sp, r7
 802f0d6:	bd80      	pop	{r7, pc}

0802f0d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 802f0d8:	b580      	push	{r7, lr}
 802f0da:	b084      	sub	sp, #16
 802f0dc:	af00      	add	r7, sp, #0
 802f0de:	6078      	str	r0, [r7, #4]
 802f0e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802f0e2:	2300      	movs	r3, #0
 802f0e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 802f0e6:	683b      	ldr	r3, [r7, #0]
 802f0e8:	2b00      	cmp	r3, #0
 802f0ea:	d101      	bne.n	802f0f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 802f0ec:	2303      	movs	r3, #3
 802f0ee:	e025      	b.n	802f13c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 802f0f0:	687b      	ldr	r3, [r7, #4]
 802f0f2:	683a      	ldr	r2, [r7, #0]
 802f0f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 802f0f8:	687b      	ldr	r3, [r7, #4]
 802f0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f0fe:	687b      	ldr	r3, [r7, #4]
 802f100:	32ae      	adds	r2, #174	; 0xae
 802f102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f108:	2b00      	cmp	r3, #0
 802f10a:	d00f      	beq.n	802f12c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 802f10c:	687b      	ldr	r3, [r7, #4]
 802f10e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f112:	687b      	ldr	r3, [r7, #4]
 802f114:	32ae      	adds	r2, #174	; 0xae
 802f116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f11c:	f107 020e 	add.w	r2, r7, #14
 802f120:	4610      	mov	r0, r2
 802f122:	4798      	blx	r3
 802f124:	4602      	mov	r2, r0
 802f126:	687b      	ldr	r3, [r7, #4]
 802f128:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 802f12c:	687b      	ldr	r3, [r7, #4]
 802f12e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 802f132:	1c5a      	adds	r2, r3, #1
 802f134:	687b      	ldr	r3, [r7, #4]
 802f136:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 802f13a:	2300      	movs	r3, #0
}
 802f13c:	4618      	mov	r0, r3
 802f13e:	3710      	adds	r7, #16
 802f140:	46bd      	mov	sp, r7
 802f142:	bd80      	pop	{r7, pc}

0802f144 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 802f144:	b580      	push	{r7, lr}
 802f146:	b082      	sub	sp, #8
 802f148:	af00      	add	r7, sp, #0
 802f14a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 802f14c:	6878      	ldr	r0, [r7, #4]
 802f14e:	f002 f87f 	bl	8031250 <USBD_LL_Start>
 802f152:	4603      	mov	r3, r0
}
 802f154:	4618      	mov	r0, r3
 802f156:	3708      	adds	r7, #8
 802f158:	46bd      	mov	sp, r7
 802f15a:	bd80      	pop	{r7, pc}

0802f15c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 802f15c:	b480      	push	{r7}
 802f15e:	b083      	sub	sp, #12
 802f160:	af00      	add	r7, sp, #0
 802f162:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802f164:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 802f166:	4618      	mov	r0, r3
 802f168:	370c      	adds	r7, #12
 802f16a:	46bd      	mov	sp, r7
 802f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f170:	4770      	bx	lr

0802f172 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802f172:	b580      	push	{r7, lr}
 802f174:	b084      	sub	sp, #16
 802f176:	af00      	add	r7, sp, #0
 802f178:	6078      	str	r0, [r7, #4]
 802f17a:	460b      	mov	r3, r1
 802f17c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802f17e:	2300      	movs	r3, #0
 802f180:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 802f182:	687b      	ldr	r3, [r7, #4]
 802f184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f188:	2b00      	cmp	r3, #0
 802f18a:	d009      	beq.n	802f1a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 802f18c:	687b      	ldr	r3, [r7, #4]
 802f18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f192:	681b      	ldr	r3, [r3, #0]
 802f194:	78fa      	ldrb	r2, [r7, #3]
 802f196:	4611      	mov	r1, r2
 802f198:	6878      	ldr	r0, [r7, #4]
 802f19a:	4798      	blx	r3
 802f19c:	4603      	mov	r3, r0
 802f19e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802f1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 802f1a2:	4618      	mov	r0, r3
 802f1a4:	3710      	adds	r7, #16
 802f1a6:	46bd      	mov	sp, r7
 802f1a8:	bd80      	pop	{r7, pc}

0802f1aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802f1aa:	b580      	push	{r7, lr}
 802f1ac:	b084      	sub	sp, #16
 802f1ae:	af00      	add	r7, sp, #0
 802f1b0:	6078      	str	r0, [r7, #4]
 802f1b2:	460b      	mov	r3, r1
 802f1b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802f1b6:	2300      	movs	r3, #0
 802f1b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 802f1ba:	687b      	ldr	r3, [r7, #4]
 802f1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f1c0:	685b      	ldr	r3, [r3, #4]
 802f1c2:	78fa      	ldrb	r2, [r7, #3]
 802f1c4:	4611      	mov	r1, r2
 802f1c6:	6878      	ldr	r0, [r7, #4]
 802f1c8:	4798      	blx	r3
 802f1ca:	4603      	mov	r3, r0
 802f1cc:	2b00      	cmp	r3, #0
 802f1ce:	d001      	beq.n	802f1d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 802f1d0:	2303      	movs	r3, #3
 802f1d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802f1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 802f1d6:	4618      	mov	r0, r3
 802f1d8:	3710      	adds	r7, #16
 802f1da:	46bd      	mov	sp, r7
 802f1dc:	bd80      	pop	{r7, pc}

0802f1de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 802f1de:	b580      	push	{r7, lr}
 802f1e0:	b084      	sub	sp, #16
 802f1e2:	af00      	add	r7, sp, #0
 802f1e4:	6078      	str	r0, [r7, #4]
 802f1e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 802f1e8:	687b      	ldr	r3, [r7, #4]
 802f1ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f1ee:	6839      	ldr	r1, [r7, #0]
 802f1f0:	4618      	mov	r0, r3
 802f1f2:	f001 f908 	bl	8030406 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802f1f6:	687b      	ldr	r3, [r7, #4]
 802f1f8:	2201      	movs	r2, #1
 802f1fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 802f1fe:	687b      	ldr	r3, [r7, #4]
 802f200:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 802f204:	461a      	mov	r2, r3
 802f206:	687b      	ldr	r3, [r7, #4]
 802f208:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 802f20c:	687b      	ldr	r3, [r7, #4]
 802f20e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802f212:	f003 031f 	and.w	r3, r3, #31
 802f216:	2b02      	cmp	r3, #2
 802f218:	d01a      	beq.n	802f250 <USBD_LL_SetupStage+0x72>
 802f21a:	2b02      	cmp	r3, #2
 802f21c:	d822      	bhi.n	802f264 <USBD_LL_SetupStage+0x86>
 802f21e:	2b00      	cmp	r3, #0
 802f220:	d002      	beq.n	802f228 <USBD_LL_SetupStage+0x4a>
 802f222:	2b01      	cmp	r3, #1
 802f224:	d00a      	beq.n	802f23c <USBD_LL_SetupStage+0x5e>
 802f226:	e01d      	b.n	802f264 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 802f228:	687b      	ldr	r3, [r7, #4]
 802f22a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f22e:	4619      	mov	r1, r3
 802f230:	6878      	ldr	r0, [r7, #4]
 802f232:	f000 fb5f 	bl	802f8f4 <USBD_StdDevReq>
 802f236:	4603      	mov	r3, r0
 802f238:	73fb      	strb	r3, [r7, #15]
      break;
 802f23a:	e020      	b.n	802f27e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 802f23c:	687b      	ldr	r3, [r7, #4]
 802f23e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f242:	4619      	mov	r1, r3
 802f244:	6878      	ldr	r0, [r7, #4]
 802f246:	f000 fbc7 	bl	802f9d8 <USBD_StdItfReq>
 802f24a:	4603      	mov	r3, r0
 802f24c:	73fb      	strb	r3, [r7, #15]
      break;
 802f24e:	e016      	b.n	802f27e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 802f250:	687b      	ldr	r3, [r7, #4]
 802f252:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f256:	4619      	mov	r1, r3
 802f258:	6878      	ldr	r0, [r7, #4]
 802f25a:	f000 fc29 	bl	802fab0 <USBD_StdEPReq>
 802f25e:	4603      	mov	r3, r0
 802f260:	73fb      	strb	r3, [r7, #15]
      break;
 802f262:	e00c      	b.n	802f27e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 802f264:	687b      	ldr	r3, [r7, #4]
 802f266:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802f26a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802f26e:	b2db      	uxtb	r3, r3
 802f270:	4619      	mov	r1, r3
 802f272:	6878      	ldr	r0, [r7, #4]
 802f274:	f002 f84c 	bl	8031310 <USBD_LL_StallEP>
 802f278:	4603      	mov	r3, r0
 802f27a:	73fb      	strb	r3, [r7, #15]
      break;
 802f27c:	bf00      	nop
  }

  return ret;
 802f27e:	7bfb      	ldrb	r3, [r7, #15]
}
 802f280:	4618      	mov	r0, r3
 802f282:	3710      	adds	r7, #16
 802f284:	46bd      	mov	sp, r7
 802f286:	bd80      	pop	{r7, pc}

0802f288 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 802f288:	b580      	push	{r7, lr}
 802f28a:	b086      	sub	sp, #24
 802f28c:	af00      	add	r7, sp, #0
 802f28e:	60f8      	str	r0, [r7, #12]
 802f290:	460b      	mov	r3, r1
 802f292:	607a      	str	r2, [r7, #4]
 802f294:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 802f296:	2300      	movs	r3, #0
 802f298:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 802f29a:	7afb      	ldrb	r3, [r7, #11]
 802f29c:	2b00      	cmp	r3, #0
 802f29e:	d16e      	bne.n	802f37e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 802f2a0:	68fb      	ldr	r3, [r7, #12]
 802f2a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 802f2a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 802f2a8:	68fb      	ldr	r3, [r7, #12]
 802f2aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802f2ae:	2b03      	cmp	r3, #3
 802f2b0:	f040 8098 	bne.w	802f3e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 802f2b4:	693b      	ldr	r3, [r7, #16]
 802f2b6:	689a      	ldr	r2, [r3, #8]
 802f2b8:	693b      	ldr	r3, [r7, #16]
 802f2ba:	68db      	ldr	r3, [r3, #12]
 802f2bc:	429a      	cmp	r2, r3
 802f2be:	d913      	bls.n	802f2e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 802f2c0:	693b      	ldr	r3, [r7, #16]
 802f2c2:	689a      	ldr	r2, [r3, #8]
 802f2c4:	693b      	ldr	r3, [r7, #16]
 802f2c6:	68db      	ldr	r3, [r3, #12]
 802f2c8:	1ad2      	subs	r2, r2, r3
 802f2ca:	693b      	ldr	r3, [r7, #16]
 802f2cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 802f2ce:	693b      	ldr	r3, [r7, #16]
 802f2d0:	68da      	ldr	r2, [r3, #12]
 802f2d2:	693b      	ldr	r3, [r7, #16]
 802f2d4:	689b      	ldr	r3, [r3, #8]
 802f2d6:	4293      	cmp	r3, r2
 802f2d8:	bf28      	it	cs
 802f2da:	4613      	movcs	r3, r2
 802f2dc:	461a      	mov	r2, r3
 802f2de:	6879      	ldr	r1, [r7, #4]
 802f2e0:	68f8      	ldr	r0, [r7, #12]
 802f2e2:	f001 f984 	bl	80305ee <USBD_CtlContinueRx>
 802f2e6:	e07d      	b.n	802f3e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 802f2e8:	68fb      	ldr	r3, [r7, #12]
 802f2ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802f2ee:	f003 031f 	and.w	r3, r3, #31
 802f2f2:	2b02      	cmp	r3, #2
 802f2f4:	d014      	beq.n	802f320 <USBD_LL_DataOutStage+0x98>
 802f2f6:	2b02      	cmp	r3, #2
 802f2f8:	d81d      	bhi.n	802f336 <USBD_LL_DataOutStage+0xae>
 802f2fa:	2b00      	cmp	r3, #0
 802f2fc:	d002      	beq.n	802f304 <USBD_LL_DataOutStage+0x7c>
 802f2fe:	2b01      	cmp	r3, #1
 802f300:	d003      	beq.n	802f30a <USBD_LL_DataOutStage+0x82>
 802f302:	e018      	b.n	802f336 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 802f304:	2300      	movs	r3, #0
 802f306:	75bb      	strb	r3, [r7, #22]
            break;
 802f308:	e018      	b.n	802f33c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 802f30a:	68fb      	ldr	r3, [r7, #12]
 802f30c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 802f310:	b2db      	uxtb	r3, r3
 802f312:	4619      	mov	r1, r3
 802f314:	68f8      	ldr	r0, [r7, #12]
 802f316:	f000 fa5e 	bl	802f7d6 <USBD_CoreFindIF>
 802f31a:	4603      	mov	r3, r0
 802f31c:	75bb      	strb	r3, [r7, #22]
            break;
 802f31e:	e00d      	b.n	802f33c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 802f320:	68fb      	ldr	r3, [r7, #12]
 802f322:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 802f326:	b2db      	uxtb	r3, r3
 802f328:	4619      	mov	r1, r3
 802f32a:	68f8      	ldr	r0, [r7, #12]
 802f32c:	f000 fa60 	bl	802f7f0 <USBD_CoreFindEP>
 802f330:	4603      	mov	r3, r0
 802f332:	75bb      	strb	r3, [r7, #22]
            break;
 802f334:	e002      	b.n	802f33c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 802f336:	2300      	movs	r3, #0
 802f338:	75bb      	strb	r3, [r7, #22]
            break;
 802f33a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 802f33c:	7dbb      	ldrb	r3, [r7, #22]
 802f33e:	2b00      	cmp	r3, #0
 802f340:	d119      	bne.n	802f376 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f342:	68fb      	ldr	r3, [r7, #12]
 802f344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f348:	b2db      	uxtb	r3, r3
 802f34a:	2b03      	cmp	r3, #3
 802f34c:	d113      	bne.n	802f376 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 802f34e:	7dba      	ldrb	r2, [r7, #22]
 802f350:	68fb      	ldr	r3, [r7, #12]
 802f352:	32ae      	adds	r2, #174	; 0xae
 802f354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f358:	691b      	ldr	r3, [r3, #16]
 802f35a:	2b00      	cmp	r3, #0
 802f35c:	d00b      	beq.n	802f376 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 802f35e:	7dba      	ldrb	r2, [r7, #22]
 802f360:	68fb      	ldr	r3, [r7, #12]
 802f362:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 802f366:	7dba      	ldrb	r2, [r7, #22]
 802f368:	68fb      	ldr	r3, [r7, #12]
 802f36a:	32ae      	adds	r2, #174	; 0xae
 802f36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f370:	691b      	ldr	r3, [r3, #16]
 802f372:	68f8      	ldr	r0, [r7, #12]
 802f374:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 802f376:	68f8      	ldr	r0, [r7, #12]
 802f378:	f001 f94a 	bl	8030610 <USBD_CtlSendStatus>
 802f37c:	e032      	b.n	802f3e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 802f37e:	7afb      	ldrb	r3, [r7, #11]
 802f380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802f384:	b2db      	uxtb	r3, r3
 802f386:	4619      	mov	r1, r3
 802f388:	68f8      	ldr	r0, [r7, #12]
 802f38a:	f000 fa31 	bl	802f7f0 <USBD_CoreFindEP>
 802f38e:	4603      	mov	r3, r0
 802f390:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802f392:	7dbb      	ldrb	r3, [r7, #22]
 802f394:	2bff      	cmp	r3, #255	; 0xff
 802f396:	d025      	beq.n	802f3e4 <USBD_LL_DataOutStage+0x15c>
 802f398:	7dbb      	ldrb	r3, [r7, #22]
 802f39a:	2b00      	cmp	r3, #0
 802f39c:	d122      	bne.n	802f3e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f39e:	68fb      	ldr	r3, [r7, #12]
 802f3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f3a4:	b2db      	uxtb	r3, r3
 802f3a6:	2b03      	cmp	r3, #3
 802f3a8:	d117      	bne.n	802f3da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 802f3aa:	7dba      	ldrb	r2, [r7, #22]
 802f3ac:	68fb      	ldr	r3, [r7, #12]
 802f3ae:	32ae      	adds	r2, #174	; 0xae
 802f3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f3b4:	699b      	ldr	r3, [r3, #24]
 802f3b6:	2b00      	cmp	r3, #0
 802f3b8:	d00f      	beq.n	802f3da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 802f3ba:	7dba      	ldrb	r2, [r7, #22]
 802f3bc:	68fb      	ldr	r3, [r7, #12]
 802f3be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 802f3c2:	7dba      	ldrb	r2, [r7, #22]
 802f3c4:	68fb      	ldr	r3, [r7, #12]
 802f3c6:	32ae      	adds	r2, #174	; 0xae
 802f3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f3cc:	699b      	ldr	r3, [r3, #24]
 802f3ce:	7afa      	ldrb	r2, [r7, #11]
 802f3d0:	4611      	mov	r1, r2
 802f3d2:	68f8      	ldr	r0, [r7, #12]
 802f3d4:	4798      	blx	r3
 802f3d6:	4603      	mov	r3, r0
 802f3d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 802f3da:	7dfb      	ldrb	r3, [r7, #23]
 802f3dc:	2b00      	cmp	r3, #0
 802f3de:	d001      	beq.n	802f3e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 802f3e0:	7dfb      	ldrb	r3, [r7, #23]
 802f3e2:	e000      	b.n	802f3e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 802f3e4:	2300      	movs	r3, #0
}
 802f3e6:	4618      	mov	r0, r3
 802f3e8:	3718      	adds	r7, #24
 802f3ea:	46bd      	mov	sp, r7
 802f3ec:	bd80      	pop	{r7, pc}

0802f3ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 802f3ee:	b580      	push	{r7, lr}
 802f3f0:	b086      	sub	sp, #24
 802f3f2:	af00      	add	r7, sp, #0
 802f3f4:	60f8      	str	r0, [r7, #12]
 802f3f6:	460b      	mov	r3, r1
 802f3f8:	607a      	str	r2, [r7, #4]
 802f3fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 802f3fc:	7afb      	ldrb	r3, [r7, #11]
 802f3fe:	2b00      	cmp	r3, #0
 802f400:	d16f      	bne.n	802f4e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 802f402:	68fb      	ldr	r3, [r7, #12]
 802f404:	3314      	adds	r3, #20
 802f406:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802f408:	68fb      	ldr	r3, [r7, #12]
 802f40a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802f40e:	2b02      	cmp	r3, #2
 802f410:	d15a      	bne.n	802f4c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 802f412:	693b      	ldr	r3, [r7, #16]
 802f414:	689a      	ldr	r2, [r3, #8]
 802f416:	693b      	ldr	r3, [r7, #16]
 802f418:	68db      	ldr	r3, [r3, #12]
 802f41a:	429a      	cmp	r2, r3
 802f41c:	d914      	bls.n	802f448 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 802f41e:	693b      	ldr	r3, [r7, #16]
 802f420:	689a      	ldr	r2, [r3, #8]
 802f422:	693b      	ldr	r3, [r7, #16]
 802f424:	68db      	ldr	r3, [r3, #12]
 802f426:	1ad2      	subs	r2, r2, r3
 802f428:	693b      	ldr	r3, [r7, #16]
 802f42a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 802f42c:	693b      	ldr	r3, [r7, #16]
 802f42e:	689b      	ldr	r3, [r3, #8]
 802f430:	461a      	mov	r2, r3
 802f432:	6879      	ldr	r1, [r7, #4]
 802f434:	68f8      	ldr	r0, [r7, #12]
 802f436:	f001 f8ac 	bl	8030592 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802f43a:	2300      	movs	r3, #0
 802f43c:	2200      	movs	r2, #0
 802f43e:	2100      	movs	r1, #0
 802f440:	68f8      	ldr	r0, [r7, #12]
 802f442:	f002 f80f 	bl	8031464 <USBD_LL_PrepareReceive>
 802f446:	e03f      	b.n	802f4c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 802f448:	693b      	ldr	r3, [r7, #16]
 802f44a:	68da      	ldr	r2, [r3, #12]
 802f44c:	693b      	ldr	r3, [r7, #16]
 802f44e:	689b      	ldr	r3, [r3, #8]
 802f450:	429a      	cmp	r2, r3
 802f452:	d11c      	bne.n	802f48e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 802f454:	693b      	ldr	r3, [r7, #16]
 802f456:	685a      	ldr	r2, [r3, #4]
 802f458:	693b      	ldr	r3, [r7, #16]
 802f45a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 802f45c:	429a      	cmp	r2, r3
 802f45e:	d316      	bcc.n	802f48e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 802f460:	693b      	ldr	r3, [r7, #16]
 802f462:	685a      	ldr	r2, [r3, #4]
 802f464:	68fb      	ldr	r3, [r7, #12]
 802f466:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 802f46a:	429a      	cmp	r2, r3
 802f46c:	d20f      	bcs.n	802f48e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 802f46e:	2200      	movs	r2, #0
 802f470:	2100      	movs	r1, #0
 802f472:	68f8      	ldr	r0, [r7, #12]
 802f474:	f001 f88d 	bl	8030592 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802f478:	68fb      	ldr	r3, [r7, #12]
 802f47a:	2200      	movs	r2, #0
 802f47c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802f480:	2300      	movs	r3, #0
 802f482:	2200      	movs	r2, #0
 802f484:	2100      	movs	r1, #0
 802f486:	68f8      	ldr	r0, [r7, #12]
 802f488:	f001 ffec 	bl	8031464 <USBD_LL_PrepareReceive>
 802f48c:	e01c      	b.n	802f4c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f48e:	68fb      	ldr	r3, [r7, #12]
 802f490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f494:	b2db      	uxtb	r3, r3
 802f496:	2b03      	cmp	r3, #3
 802f498:	d10f      	bne.n	802f4ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 802f49a:	68fb      	ldr	r3, [r7, #12]
 802f49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f4a0:	68db      	ldr	r3, [r3, #12]
 802f4a2:	2b00      	cmp	r3, #0
 802f4a4:	d009      	beq.n	802f4ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 802f4a6:	68fb      	ldr	r3, [r7, #12]
 802f4a8:	2200      	movs	r2, #0
 802f4aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 802f4ae:	68fb      	ldr	r3, [r7, #12]
 802f4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f4b4:	68db      	ldr	r3, [r3, #12]
 802f4b6:	68f8      	ldr	r0, [r7, #12]
 802f4b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 802f4ba:	2180      	movs	r1, #128	; 0x80
 802f4bc:	68f8      	ldr	r0, [r7, #12]
 802f4be:	f001 ff27 	bl	8031310 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 802f4c2:	68f8      	ldr	r0, [r7, #12]
 802f4c4:	f001 f8b7 	bl	8030636 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 802f4c8:	68fb      	ldr	r3, [r7, #12]
 802f4ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 802f4ce:	2b00      	cmp	r3, #0
 802f4d0:	d03a      	beq.n	802f548 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 802f4d2:	68f8      	ldr	r0, [r7, #12]
 802f4d4:	f7ff fe42 	bl	802f15c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 802f4d8:	68fb      	ldr	r3, [r7, #12]
 802f4da:	2200      	movs	r2, #0
 802f4dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 802f4e0:	e032      	b.n	802f548 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 802f4e2:	7afb      	ldrb	r3, [r7, #11]
 802f4e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802f4e8:	b2db      	uxtb	r3, r3
 802f4ea:	4619      	mov	r1, r3
 802f4ec:	68f8      	ldr	r0, [r7, #12]
 802f4ee:	f000 f97f 	bl	802f7f0 <USBD_CoreFindEP>
 802f4f2:	4603      	mov	r3, r0
 802f4f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802f4f6:	7dfb      	ldrb	r3, [r7, #23]
 802f4f8:	2bff      	cmp	r3, #255	; 0xff
 802f4fa:	d025      	beq.n	802f548 <USBD_LL_DataInStage+0x15a>
 802f4fc:	7dfb      	ldrb	r3, [r7, #23]
 802f4fe:	2b00      	cmp	r3, #0
 802f500:	d122      	bne.n	802f548 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f502:	68fb      	ldr	r3, [r7, #12]
 802f504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f508:	b2db      	uxtb	r3, r3
 802f50a:	2b03      	cmp	r3, #3
 802f50c:	d11c      	bne.n	802f548 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 802f50e:	7dfa      	ldrb	r2, [r7, #23]
 802f510:	68fb      	ldr	r3, [r7, #12]
 802f512:	32ae      	adds	r2, #174	; 0xae
 802f514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f518:	695b      	ldr	r3, [r3, #20]
 802f51a:	2b00      	cmp	r3, #0
 802f51c:	d014      	beq.n	802f548 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 802f51e:	7dfa      	ldrb	r2, [r7, #23]
 802f520:	68fb      	ldr	r3, [r7, #12]
 802f522:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 802f526:	7dfa      	ldrb	r2, [r7, #23]
 802f528:	68fb      	ldr	r3, [r7, #12]
 802f52a:	32ae      	adds	r2, #174	; 0xae
 802f52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f530:	695b      	ldr	r3, [r3, #20]
 802f532:	7afa      	ldrb	r2, [r7, #11]
 802f534:	4611      	mov	r1, r2
 802f536:	68f8      	ldr	r0, [r7, #12]
 802f538:	4798      	blx	r3
 802f53a:	4603      	mov	r3, r0
 802f53c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 802f53e:	7dbb      	ldrb	r3, [r7, #22]
 802f540:	2b00      	cmp	r3, #0
 802f542:	d001      	beq.n	802f548 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 802f544:	7dbb      	ldrb	r3, [r7, #22]
 802f546:	e000      	b.n	802f54a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 802f548:	2300      	movs	r3, #0
}
 802f54a:	4618      	mov	r0, r3
 802f54c:	3718      	adds	r7, #24
 802f54e:	46bd      	mov	sp, r7
 802f550:	bd80      	pop	{r7, pc}

0802f552 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 802f552:	b580      	push	{r7, lr}
 802f554:	b084      	sub	sp, #16
 802f556:	af00      	add	r7, sp, #0
 802f558:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 802f55a:	2300      	movs	r3, #0
 802f55c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f55e:	687b      	ldr	r3, [r7, #4]
 802f560:	2201      	movs	r2, #1
 802f562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 802f566:	687b      	ldr	r3, [r7, #4]
 802f568:	2200      	movs	r2, #0
 802f56a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 802f56e:	687b      	ldr	r3, [r7, #4]
 802f570:	2200      	movs	r2, #0
 802f572:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802f574:	687b      	ldr	r3, [r7, #4]
 802f576:	2200      	movs	r2, #0
 802f578:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 802f57c:	687b      	ldr	r3, [r7, #4]
 802f57e:	2200      	movs	r2, #0
 802f580:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 802f584:	687b      	ldr	r3, [r7, #4]
 802f586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f58a:	2b00      	cmp	r3, #0
 802f58c:	d014      	beq.n	802f5b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 802f58e:	687b      	ldr	r3, [r7, #4]
 802f590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f594:	685b      	ldr	r3, [r3, #4]
 802f596:	2b00      	cmp	r3, #0
 802f598:	d00e      	beq.n	802f5b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 802f59a:	687b      	ldr	r3, [r7, #4]
 802f59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f5a0:	685b      	ldr	r3, [r3, #4]
 802f5a2:	687a      	ldr	r2, [r7, #4]
 802f5a4:	6852      	ldr	r2, [r2, #4]
 802f5a6:	b2d2      	uxtb	r2, r2
 802f5a8:	4611      	mov	r1, r2
 802f5aa:	6878      	ldr	r0, [r7, #4]
 802f5ac:	4798      	blx	r3
 802f5ae:	4603      	mov	r3, r0
 802f5b0:	2b00      	cmp	r3, #0
 802f5b2:	d001      	beq.n	802f5b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 802f5b4:	2303      	movs	r3, #3
 802f5b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802f5b8:	2340      	movs	r3, #64	; 0x40
 802f5ba:	2200      	movs	r2, #0
 802f5bc:	2100      	movs	r1, #0
 802f5be:	6878      	ldr	r0, [r7, #4]
 802f5c0:	f001 fe61 	bl	8031286 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 802f5c4:	687b      	ldr	r3, [r7, #4]
 802f5c6:	2201      	movs	r2, #1
 802f5c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 802f5cc:	687b      	ldr	r3, [r7, #4]
 802f5ce:	2240      	movs	r2, #64	; 0x40
 802f5d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802f5d4:	2340      	movs	r3, #64	; 0x40
 802f5d6:	2200      	movs	r2, #0
 802f5d8:	2180      	movs	r1, #128	; 0x80
 802f5da:	6878      	ldr	r0, [r7, #4]
 802f5dc:	f001 fe53 	bl	8031286 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 802f5e0:	687b      	ldr	r3, [r7, #4]
 802f5e2:	2201      	movs	r2, #1
 802f5e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802f5e6:	687b      	ldr	r3, [r7, #4]
 802f5e8:	2240      	movs	r2, #64	; 0x40
 802f5ea:	621a      	str	r2, [r3, #32]

  return ret;
 802f5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 802f5ee:	4618      	mov	r0, r3
 802f5f0:	3710      	adds	r7, #16
 802f5f2:	46bd      	mov	sp, r7
 802f5f4:	bd80      	pop	{r7, pc}

0802f5f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 802f5f6:	b480      	push	{r7}
 802f5f8:	b083      	sub	sp, #12
 802f5fa:	af00      	add	r7, sp, #0
 802f5fc:	6078      	str	r0, [r7, #4]
 802f5fe:	460b      	mov	r3, r1
 802f600:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 802f602:	687b      	ldr	r3, [r7, #4]
 802f604:	78fa      	ldrb	r2, [r7, #3]
 802f606:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 802f608:	2300      	movs	r3, #0
}
 802f60a:	4618      	mov	r0, r3
 802f60c:	370c      	adds	r7, #12
 802f60e:	46bd      	mov	sp, r7
 802f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f614:	4770      	bx	lr

0802f616 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 802f616:	b480      	push	{r7}
 802f618:	b083      	sub	sp, #12
 802f61a:	af00      	add	r7, sp, #0
 802f61c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 802f61e:	687b      	ldr	r3, [r7, #4]
 802f620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f624:	b2da      	uxtb	r2, r3
 802f626:	687b      	ldr	r3, [r7, #4]
 802f628:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 802f62c:	687b      	ldr	r3, [r7, #4]
 802f62e:	2204      	movs	r2, #4
 802f630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 802f634:	2300      	movs	r3, #0
}
 802f636:	4618      	mov	r0, r3
 802f638:	370c      	adds	r7, #12
 802f63a:	46bd      	mov	sp, r7
 802f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f640:	4770      	bx	lr

0802f642 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802f642:	b480      	push	{r7}
 802f644:	b083      	sub	sp, #12
 802f646:	af00      	add	r7, sp, #0
 802f648:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802f64a:	687b      	ldr	r3, [r7, #4]
 802f64c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f650:	b2db      	uxtb	r3, r3
 802f652:	2b04      	cmp	r3, #4
 802f654:	d106      	bne.n	802f664 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 802f656:	687b      	ldr	r3, [r7, #4]
 802f658:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 802f65c:	b2da      	uxtb	r2, r3
 802f65e:	687b      	ldr	r3, [r7, #4]
 802f660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 802f664:	2300      	movs	r3, #0
}
 802f666:	4618      	mov	r0, r3
 802f668:	370c      	adds	r7, #12
 802f66a:	46bd      	mov	sp, r7
 802f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f670:	4770      	bx	lr

0802f672 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802f672:	b580      	push	{r7, lr}
 802f674:	b082      	sub	sp, #8
 802f676:	af00      	add	r7, sp, #0
 802f678:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f67a:	687b      	ldr	r3, [r7, #4]
 802f67c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f680:	b2db      	uxtb	r3, r3
 802f682:	2b03      	cmp	r3, #3
 802f684:	d110      	bne.n	802f6a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 802f686:	687b      	ldr	r3, [r7, #4]
 802f688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f68c:	2b00      	cmp	r3, #0
 802f68e:	d00b      	beq.n	802f6a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 802f690:	687b      	ldr	r3, [r7, #4]
 802f692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f696:	69db      	ldr	r3, [r3, #28]
 802f698:	2b00      	cmp	r3, #0
 802f69a:	d005      	beq.n	802f6a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 802f69c:	687b      	ldr	r3, [r7, #4]
 802f69e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f6a2:	69db      	ldr	r3, [r3, #28]
 802f6a4:	6878      	ldr	r0, [r7, #4]
 802f6a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 802f6a8:	2300      	movs	r3, #0
}
 802f6aa:	4618      	mov	r0, r3
 802f6ac:	3708      	adds	r7, #8
 802f6ae:	46bd      	mov	sp, r7
 802f6b0:	bd80      	pop	{r7, pc}

0802f6b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 802f6b2:	b580      	push	{r7, lr}
 802f6b4:	b082      	sub	sp, #8
 802f6b6:	af00      	add	r7, sp, #0
 802f6b8:	6078      	str	r0, [r7, #4]
 802f6ba:	460b      	mov	r3, r1
 802f6bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 802f6be:	687b      	ldr	r3, [r7, #4]
 802f6c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f6c4:	687b      	ldr	r3, [r7, #4]
 802f6c6:	32ae      	adds	r2, #174	; 0xae
 802f6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f6cc:	2b00      	cmp	r3, #0
 802f6ce:	d101      	bne.n	802f6d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 802f6d0:	2303      	movs	r3, #3
 802f6d2:	e01c      	b.n	802f70e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f6d4:	687b      	ldr	r3, [r7, #4]
 802f6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f6da:	b2db      	uxtb	r3, r3
 802f6dc:	2b03      	cmp	r3, #3
 802f6de:	d115      	bne.n	802f70c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 802f6e0:	687b      	ldr	r3, [r7, #4]
 802f6e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f6e6:	687b      	ldr	r3, [r7, #4]
 802f6e8:	32ae      	adds	r2, #174	; 0xae
 802f6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f6ee:	6a1b      	ldr	r3, [r3, #32]
 802f6f0:	2b00      	cmp	r3, #0
 802f6f2:	d00b      	beq.n	802f70c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 802f6f4:	687b      	ldr	r3, [r7, #4]
 802f6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f6fa:	687b      	ldr	r3, [r7, #4]
 802f6fc:	32ae      	adds	r2, #174	; 0xae
 802f6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f702:	6a1b      	ldr	r3, [r3, #32]
 802f704:	78fa      	ldrb	r2, [r7, #3]
 802f706:	4611      	mov	r1, r2
 802f708:	6878      	ldr	r0, [r7, #4]
 802f70a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802f70c:	2300      	movs	r3, #0
}
 802f70e:	4618      	mov	r0, r3
 802f710:	3708      	adds	r7, #8
 802f712:	46bd      	mov	sp, r7
 802f714:	bd80      	pop	{r7, pc}

0802f716 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 802f716:	b580      	push	{r7, lr}
 802f718:	b082      	sub	sp, #8
 802f71a:	af00      	add	r7, sp, #0
 802f71c:	6078      	str	r0, [r7, #4]
 802f71e:	460b      	mov	r3, r1
 802f720:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 802f722:	687b      	ldr	r3, [r7, #4]
 802f724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f728:	687b      	ldr	r3, [r7, #4]
 802f72a:	32ae      	adds	r2, #174	; 0xae
 802f72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f730:	2b00      	cmp	r3, #0
 802f732:	d101      	bne.n	802f738 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 802f734:	2303      	movs	r3, #3
 802f736:	e01c      	b.n	802f772 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f738:	687b      	ldr	r3, [r7, #4]
 802f73a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f73e:	b2db      	uxtb	r3, r3
 802f740:	2b03      	cmp	r3, #3
 802f742:	d115      	bne.n	802f770 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 802f744:	687b      	ldr	r3, [r7, #4]
 802f746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f74a:	687b      	ldr	r3, [r7, #4]
 802f74c:	32ae      	adds	r2, #174	; 0xae
 802f74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f754:	2b00      	cmp	r3, #0
 802f756:	d00b      	beq.n	802f770 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 802f758:	687b      	ldr	r3, [r7, #4]
 802f75a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f75e:	687b      	ldr	r3, [r7, #4]
 802f760:	32ae      	adds	r2, #174	; 0xae
 802f762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f768:	78fa      	ldrb	r2, [r7, #3]
 802f76a:	4611      	mov	r1, r2
 802f76c:	6878      	ldr	r0, [r7, #4]
 802f76e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802f770:	2300      	movs	r3, #0
}
 802f772:	4618      	mov	r0, r3
 802f774:	3708      	adds	r7, #8
 802f776:	46bd      	mov	sp, r7
 802f778:	bd80      	pop	{r7, pc}

0802f77a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 802f77a:	b480      	push	{r7}
 802f77c:	b083      	sub	sp, #12
 802f77e:	af00      	add	r7, sp, #0
 802f780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802f782:	2300      	movs	r3, #0
}
 802f784:	4618      	mov	r0, r3
 802f786:	370c      	adds	r7, #12
 802f788:	46bd      	mov	sp, r7
 802f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f78e:	4770      	bx	lr

0802f790 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 802f790:	b580      	push	{r7, lr}
 802f792:	b084      	sub	sp, #16
 802f794:	af00      	add	r7, sp, #0
 802f796:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 802f798:	2300      	movs	r3, #0
 802f79a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f79c:	687b      	ldr	r3, [r7, #4]
 802f79e:	2201      	movs	r2, #1
 802f7a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 802f7a4:	687b      	ldr	r3, [r7, #4]
 802f7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f7aa:	2b00      	cmp	r3, #0
 802f7ac:	d00e      	beq.n	802f7cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 802f7ae:	687b      	ldr	r3, [r7, #4]
 802f7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f7b4:	685b      	ldr	r3, [r3, #4]
 802f7b6:	687a      	ldr	r2, [r7, #4]
 802f7b8:	6852      	ldr	r2, [r2, #4]
 802f7ba:	b2d2      	uxtb	r2, r2
 802f7bc:	4611      	mov	r1, r2
 802f7be:	6878      	ldr	r0, [r7, #4]
 802f7c0:	4798      	blx	r3
 802f7c2:	4603      	mov	r3, r0
 802f7c4:	2b00      	cmp	r3, #0
 802f7c6:	d001      	beq.n	802f7cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 802f7c8:	2303      	movs	r3, #3
 802f7ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802f7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 802f7ce:	4618      	mov	r0, r3
 802f7d0:	3710      	adds	r7, #16
 802f7d2:	46bd      	mov	sp, r7
 802f7d4:	bd80      	pop	{r7, pc}

0802f7d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 802f7d6:	b480      	push	{r7}
 802f7d8:	b083      	sub	sp, #12
 802f7da:	af00      	add	r7, sp, #0
 802f7dc:	6078      	str	r0, [r7, #4]
 802f7de:	460b      	mov	r3, r1
 802f7e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 802f7e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 802f7e4:	4618      	mov	r0, r3
 802f7e6:	370c      	adds	r7, #12
 802f7e8:	46bd      	mov	sp, r7
 802f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f7ee:	4770      	bx	lr

0802f7f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 802f7f0:	b480      	push	{r7}
 802f7f2:	b083      	sub	sp, #12
 802f7f4:	af00      	add	r7, sp, #0
 802f7f6:	6078      	str	r0, [r7, #4]
 802f7f8:	460b      	mov	r3, r1
 802f7fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 802f7fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 802f7fe:	4618      	mov	r0, r3
 802f800:	370c      	adds	r7, #12
 802f802:	46bd      	mov	sp, r7
 802f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f808:	4770      	bx	lr

0802f80a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 802f80a:	b580      	push	{r7, lr}
 802f80c:	b086      	sub	sp, #24
 802f80e:	af00      	add	r7, sp, #0
 802f810:	6078      	str	r0, [r7, #4]
 802f812:	460b      	mov	r3, r1
 802f814:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 802f816:	687b      	ldr	r3, [r7, #4]
 802f818:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 802f81a:	687b      	ldr	r3, [r7, #4]
 802f81c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 802f81e:	2300      	movs	r3, #0
 802f820:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 802f822:	68fb      	ldr	r3, [r7, #12]
 802f824:	885b      	ldrh	r3, [r3, #2]
 802f826:	b29a      	uxth	r2, r3
 802f828:	68fb      	ldr	r3, [r7, #12]
 802f82a:	781b      	ldrb	r3, [r3, #0]
 802f82c:	b29b      	uxth	r3, r3
 802f82e:	429a      	cmp	r2, r3
 802f830:	d920      	bls.n	802f874 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 802f832:	68fb      	ldr	r3, [r7, #12]
 802f834:	781b      	ldrb	r3, [r3, #0]
 802f836:	b29b      	uxth	r3, r3
 802f838:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 802f83a:	e013      	b.n	802f864 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 802f83c:	f107 030a 	add.w	r3, r7, #10
 802f840:	4619      	mov	r1, r3
 802f842:	6978      	ldr	r0, [r7, #20]
 802f844:	f000 f81b 	bl	802f87e <USBD_GetNextDesc>
 802f848:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802f84a:	697b      	ldr	r3, [r7, #20]
 802f84c:	785b      	ldrb	r3, [r3, #1]
 802f84e:	2b05      	cmp	r3, #5
 802f850:	d108      	bne.n	802f864 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 802f852:	697b      	ldr	r3, [r7, #20]
 802f854:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 802f856:	693b      	ldr	r3, [r7, #16]
 802f858:	789b      	ldrb	r3, [r3, #2]
 802f85a:	78fa      	ldrb	r2, [r7, #3]
 802f85c:	429a      	cmp	r2, r3
 802f85e:	d008      	beq.n	802f872 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 802f860:	2300      	movs	r3, #0
 802f862:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 802f864:	68fb      	ldr	r3, [r7, #12]
 802f866:	885b      	ldrh	r3, [r3, #2]
 802f868:	b29a      	uxth	r2, r3
 802f86a:	897b      	ldrh	r3, [r7, #10]
 802f86c:	429a      	cmp	r2, r3
 802f86e:	d8e5      	bhi.n	802f83c <USBD_GetEpDesc+0x32>
 802f870:	e000      	b.n	802f874 <USBD_GetEpDesc+0x6a>
          break;
 802f872:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 802f874:	693b      	ldr	r3, [r7, #16]
}
 802f876:	4618      	mov	r0, r3
 802f878:	3718      	adds	r7, #24
 802f87a:	46bd      	mov	sp, r7
 802f87c:	bd80      	pop	{r7, pc}

0802f87e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 802f87e:	b480      	push	{r7}
 802f880:	b085      	sub	sp, #20
 802f882:	af00      	add	r7, sp, #0
 802f884:	6078      	str	r0, [r7, #4]
 802f886:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 802f888:	687b      	ldr	r3, [r7, #4]
 802f88a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 802f88c:	683b      	ldr	r3, [r7, #0]
 802f88e:	881a      	ldrh	r2, [r3, #0]
 802f890:	68fb      	ldr	r3, [r7, #12]
 802f892:	781b      	ldrb	r3, [r3, #0]
 802f894:	b29b      	uxth	r3, r3
 802f896:	4413      	add	r3, r2
 802f898:	b29a      	uxth	r2, r3
 802f89a:	683b      	ldr	r3, [r7, #0]
 802f89c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 802f89e:	68fb      	ldr	r3, [r7, #12]
 802f8a0:	781b      	ldrb	r3, [r3, #0]
 802f8a2:	461a      	mov	r2, r3
 802f8a4:	687b      	ldr	r3, [r7, #4]
 802f8a6:	4413      	add	r3, r2
 802f8a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802f8aa:	68fb      	ldr	r3, [r7, #12]
}
 802f8ac:	4618      	mov	r0, r3
 802f8ae:	3714      	adds	r7, #20
 802f8b0:	46bd      	mov	sp, r7
 802f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f8b6:	4770      	bx	lr

0802f8b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 802f8b8:	b480      	push	{r7}
 802f8ba:	b087      	sub	sp, #28
 802f8bc:	af00      	add	r7, sp, #0
 802f8be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 802f8c0:	687b      	ldr	r3, [r7, #4]
 802f8c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 802f8c4:	697b      	ldr	r3, [r7, #20]
 802f8c6:	781b      	ldrb	r3, [r3, #0]
 802f8c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 802f8ca:	697b      	ldr	r3, [r7, #20]
 802f8cc:	3301      	adds	r3, #1
 802f8ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 802f8d0:	697b      	ldr	r3, [r7, #20]
 802f8d2:	781b      	ldrb	r3, [r3, #0]
 802f8d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 802f8d6:	8a3b      	ldrh	r3, [r7, #16]
 802f8d8:	021b      	lsls	r3, r3, #8
 802f8da:	b21a      	sxth	r2, r3
 802f8dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802f8e0:	4313      	orrs	r3, r2
 802f8e2:	b21b      	sxth	r3, r3
 802f8e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 802f8e6:	89fb      	ldrh	r3, [r7, #14]
}
 802f8e8:	4618      	mov	r0, r3
 802f8ea:	371c      	adds	r7, #28
 802f8ec:	46bd      	mov	sp, r7
 802f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f8f2:	4770      	bx	lr

0802f8f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802f8f4:	b580      	push	{r7, lr}
 802f8f6:	b084      	sub	sp, #16
 802f8f8:	af00      	add	r7, sp, #0
 802f8fa:	6078      	str	r0, [r7, #4]
 802f8fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802f8fe:	2300      	movs	r3, #0
 802f900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802f902:	683b      	ldr	r3, [r7, #0]
 802f904:	781b      	ldrb	r3, [r3, #0]
 802f906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802f90a:	2b40      	cmp	r3, #64	; 0x40
 802f90c:	d005      	beq.n	802f91a <USBD_StdDevReq+0x26>
 802f90e:	2b40      	cmp	r3, #64	; 0x40
 802f910:	d857      	bhi.n	802f9c2 <USBD_StdDevReq+0xce>
 802f912:	2b00      	cmp	r3, #0
 802f914:	d00f      	beq.n	802f936 <USBD_StdDevReq+0x42>
 802f916:	2b20      	cmp	r3, #32
 802f918:	d153      	bne.n	802f9c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 802f91a:	687b      	ldr	r3, [r7, #4]
 802f91c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f920:	687b      	ldr	r3, [r7, #4]
 802f922:	32ae      	adds	r2, #174	; 0xae
 802f924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f928:	689b      	ldr	r3, [r3, #8]
 802f92a:	6839      	ldr	r1, [r7, #0]
 802f92c:	6878      	ldr	r0, [r7, #4]
 802f92e:	4798      	blx	r3
 802f930:	4603      	mov	r3, r0
 802f932:	73fb      	strb	r3, [r7, #15]
      break;
 802f934:	e04a      	b.n	802f9cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802f936:	683b      	ldr	r3, [r7, #0]
 802f938:	785b      	ldrb	r3, [r3, #1]
 802f93a:	2b09      	cmp	r3, #9
 802f93c:	d83b      	bhi.n	802f9b6 <USBD_StdDevReq+0xc2>
 802f93e:	a201      	add	r2, pc, #4	; (adr r2, 802f944 <USBD_StdDevReq+0x50>)
 802f940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f944:	0802f999 	.word	0x0802f999
 802f948:	0802f9ad 	.word	0x0802f9ad
 802f94c:	0802f9b7 	.word	0x0802f9b7
 802f950:	0802f9a3 	.word	0x0802f9a3
 802f954:	0802f9b7 	.word	0x0802f9b7
 802f958:	0802f977 	.word	0x0802f977
 802f95c:	0802f96d 	.word	0x0802f96d
 802f960:	0802f9b7 	.word	0x0802f9b7
 802f964:	0802f98f 	.word	0x0802f98f
 802f968:	0802f981 	.word	0x0802f981
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 802f96c:	6839      	ldr	r1, [r7, #0]
 802f96e:	6878      	ldr	r0, [r7, #4]
 802f970:	f000 fa3c 	bl	802fdec <USBD_GetDescriptor>
          break;
 802f974:	e024      	b.n	802f9c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802f976:	6839      	ldr	r1, [r7, #0]
 802f978:	6878      	ldr	r0, [r7, #4]
 802f97a:	f000 fba1 	bl	80300c0 <USBD_SetAddress>
          break;
 802f97e:	e01f      	b.n	802f9c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 802f980:	6839      	ldr	r1, [r7, #0]
 802f982:	6878      	ldr	r0, [r7, #4]
 802f984:	f000 fbe0 	bl	8030148 <USBD_SetConfig>
 802f988:	4603      	mov	r3, r0
 802f98a:	73fb      	strb	r3, [r7, #15]
          break;
 802f98c:	e018      	b.n	802f9c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802f98e:	6839      	ldr	r1, [r7, #0]
 802f990:	6878      	ldr	r0, [r7, #4]
 802f992:	f000 fc83 	bl	803029c <USBD_GetConfig>
          break;
 802f996:	e013      	b.n	802f9c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 802f998:	6839      	ldr	r1, [r7, #0]
 802f99a:	6878      	ldr	r0, [r7, #4]
 802f99c:	f000 fcb4 	bl	8030308 <USBD_GetStatus>
          break;
 802f9a0:	e00e      	b.n	802f9c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 802f9a2:	6839      	ldr	r1, [r7, #0]
 802f9a4:	6878      	ldr	r0, [r7, #4]
 802f9a6:	f000 fce3 	bl	8030370 <USBD_SetFeature>
          break;
 802f9aa:	e009      	b.n	802f9c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 802f9ac:	6839      	ldr	r1, [r7, #0]
 802f9ae:	6878      	ldr	r0, [r7, #4]
 802f9b0:	f000 fd07 	bl	80303c2 <USBD_ClrFeature>
          break;
 802f9b4:	e004      	b.n	802f9c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 802f9b6:	6839      	ldr	r1, [r7, #0]
 802f9b8:	6878      	ldr	r0, [r7, #4]
 802f9ba:	f000 fd5e 	bl	803047a <USBD_CtlError>
          break;
 802f9be:	bf00      	nop
      }
      break;
 802f9c0:	e004      	b.n	802f9cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 802f9c2:	6839      	ldr	r1, [r7, #0]
 802f9c4:	6878      	ldr	r0, [r7, #4]
 802f9c6:	f000 fd58 	bl	803047a <USBD_CtlError>
      break;
 802f9ca:	bf00      	nop
  }

  return ret;
 802f9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 802f9ce:	4618      	mov	r0, r3
 802f9d0:	3710      	adds	r7, #16
 802f9d2:	46bd      	mov	sp, r7
 802f9d4:	bd80      	pop	{r7, pc}
 802f9d6:	bf00      	nop

0802f9d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802f9d8:	b580      	push	{r7, lr}
 802f9da:	b084      	sub	sp, #16
 802f9dc:	af00      	add	r7, sp, #0
 802f9de:	6078      	str	r0, [r7, #4]
 802f9e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802f9e2:	2300      	movs	r3, #0
 802f9e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802f9e6:	683b      	ldr	r3, [r7, #0]
 802f9e8:	781b      	ldrb	r3, [r3, #0]
 802f9ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802f9ee:	2b40      	cmp	r3, #64	; 0x40
 802f9f0:	d005      	beq.n	802f9fe <USBD_StdItfReq+0x26>
 802f9f2:	2b40      	cmp	r3, #64	; 0x40
 802f9f4:	d852      	bhi.n	802fa9c <USBD_StdItfReq+0xc4>
 802f9f6:	2b00      	cmp	r3, #0
 802f9f8:	d001      	beq.n	802f9fe <USBD_StdItfReq+0x26>
 802f9fa:	2b20      	cmp	r3, #32
 802f9fc:	d14e      	bne.n	802fa9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 802f9fe:	687b      	ldr	r3, [r7, #4]
 802fa00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fa04:	b2db      	uxtb	r3, r3
 802fa06:	3b01      	subs	r3, #1
 802fa08:	2b02      	cmp	r3, #2
 802fa0a:	d840      	bhi.n	802fa8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 802fa0c:	683b      	ldr	r3, [r7, #0]
 802fa0e:	889b      	ldrh	r3, [r3, #4]
 802fa10:	b2db      	uxtb	r3, r3
 802fa12:	2b01      	cmp	r3, #1
 802fa14:	d836      	bhi.n	802fa84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 802fa16:	683b      	ldr	r3, [r7, #0]
 802fa18:	889b      	ldrh	r3, [r3, #4]
 802fa1a:	b2db      	uxtb	r3, r3
 802fa1c:	4619      	mov	r1, r3
 802fa1e:	6878      	ldr	r0, [r7, #4]
 802fa20:	f7ff fed9 	bl	802f7d6 <USBD_CoreFindIF>
 802fa24:	4603      	mov	r3, r0
 802fa26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802fa28:	7bbb      	ldrb	r3, [r7, #14]
 802fa2a:	2bff      	cmp	r3, #255	; 0xff
 802fa2c:	d01d      	beq.n	802fa6a <USBD_StdItfReq+0x92>
 802fa2e:	7bbb      	ldrb	r3, [r7, #14]
 802fa30:	2b00      	cmp	r3, #0
 802fa32:	d11a      	bne.n	802fa6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 802fa34:	7bba      	ldrb	r2, [r7, #14]
 802fa36:	687b      	ldr	r3, [r7, #4]
 802fa38:	32ae      	adds	r2, #174	; 0xae
 802fa3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fa3e:	689b      	ldr	r3, [r3, #8]
 802fa40:	2b00      	cmp	r3, #0
 802fa42:	d00f      	beq.n	802fa64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 802fa44:	7bba      	ldrb	r2, [r7, #14]
 802fa46:	687b      	ldr	r3, [r7, #4]
 802fa48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 802fa4c:	7bba      	ldrb	r2, [r7, #14]
 802fa4e:	687b      	ldr	r3, [r7, #4]
 802fa50:	32ae      	adds	r2, #174	; 0xae
 802fa52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fa56:	689b      	ldr	r3, [r3, #8]
 802fa58:	6839      	ldr	r1, [r7, #0]
 802fa5a:	6878      	ldr	r0, [r7, #4]
 802fa5c:	4798      	blx	r3
 802fa5e:	4603      	mov	r3, r0
 802fa60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 802fa62:	e004      	b.n	802fa6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 802fa64:	2303      	movs	r3, #3
 802fa66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 802fa68:	e001      	b.n	802fa6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 802fa6a:	2303      	movs	r3, #3
 802fa6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 802fa6e:	683b      	ldr	r3, [r7, #0]
 802fa70:	88db      	ldrh	r3, [r3, #6]
 802fa72:	2b00      	cmp	r3, #0
 802fa74:	d110      	bne.n	802fa98 <USBD_StdItfReq+0xc0>
 802fa76:	7bfb      	ldrb	r3, [r7, #15]
 802fa78:	2b00      	cmp	r3, #0
 802fa7a:	d10d      	bne.n	802fa98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 802fa7c:	6878      	ldr	r0, [r7, #4]
 802fa7e:	f000 fdc7 	bl	8030610 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 802fa82:	e009      	b.n	802fa98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 802fa84:	6839      	ldr	r1, [r7, #0]
 802fa86:	6878      	ldr	r0, [r7, #4]
 802fa88:	f000 fcf7 	bl	803047a <USBD_CtlError>
          break;
 802fa8c:	e004      	b.n	802fa98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 802fa8e:	6839      	ldr	r1, [r7, #0]
 802fa90:	6878      	ldr	r0, [r7, #4]
 802fa92:	f000 fcf2 	bl	803047a <USBD_CtlError>
          break;
 802fa96:	e000      	b.n	802fa9a <USBD_StdItfReq+0xc2>
          break;
 802fa98:	bf00      	nop
      }
      break;
 802fa9a:	e004      	b.n	802faa6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 802fa9c:	6839      	ldr	r1, [r7, #0]
 802fa9e:	6878      	ldr	r0, [r7, #4]
 802faa0:	f000 fceb 	bl	803047a <USBD_CtlError>
      break;
 802faa4:	bf00      	nop
  }

  return ret;
 802faa6:	7bfb      	ldrb	r3, [r7, #15]
}
 802faa8:	4618      	mov	r0, r3
 802faaa:	3710      	adds	r7, #16
 802faac:	46bd      	mov	sp, r7
 802faae:	bd80      	pop	{r7, pc}

0802fab0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fab0:	b580      	push	{r7, lr}
 802fab2:	b084      	sub	sp, #16
 802fab4:	af00      	add	r7, sp, #0
 802fab6:	6078      	str	r0, [r7, #4]
 802fab8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 802faba:	2300      	movs	r3, #0
 802fabc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 802fabe:	683b      	ldr	r3, [r7, #0]
 802fac0:	889b      	ldrh	r3, [r3, #4]
 802fac2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802fac4:	683b      	ldr	r3, [r7, #0]
 802fac6:	781b      	ldrb	r3, [r3, #0]
 802fac8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802facc:	2b40      	cmp	r3, #64	; 0x40
 802face:	d007      	beq.n	802fae0 <USBD_StdEPReq+0x30>
 802fad0:	2b40      	cmp	r3, #64	; 0x40
 802fad2:	f200 817f 	bhi.w	802fdd4 <USBD_StdEPReq+0x324>
 802fad6:	2b00      	cmp	r3, #0
 802fad8:	d02a      	beq.n	802fb30 <USBD_StdEPReq+0x80>
 802fada:	2b20      	cmp	r3, #32
 802fadc:	f040 817a 	bne.w	802fdd4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 802fae0:	7bbb      	ldrb	r3, [r7, #14]
 802fae2:	4619      	mov	r1, r3
 802fae4:	6878      	ldr	r0, [r7, #4]
 802fae6:	f7ff fe83 	bl	802f7f0 <USBD_CoreFindEP>
 802faea:	4603      	mov	r3, r0
 802faec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802faee:	7b7b      	ldrb	r3, [r7, #13]
 802faf0:	2bff      	cmp	r3, #255	; 0xff
 802faf2:	f000 8174 	beq.w	802fdde <USBD_StdEPReq+0x32e>
 802faf6:	7b7b      	ldrb	r3, [r7, #13]
 802faf8:	2b00      	cmp	r3, #0
 802fafa:	f040 8170 	bne.w	802fdde <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 802fafe:	7b7a      	ldrb	r2, [r7, #13]
 802fb00:	687b      	ldr	r3, [r7, #4]
 802fb02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 802fb06:	7b7a      	ldrb	r2, [r7, #13]
 802fb08:	687b      	ldr	r3, [r7, #4]
 802fb0a:	32ae      	adds	r2, #174	; 0xae
 802fb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fb10:	689b      	ldr	r3, [r3, #8]
 802fb12:	2b00      	cmp	r3, #0
 802fb14:	f000 8163 	beq.w	802fdde <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 802fb18:	7b7a      	ldrb	r2, [r7, #13]
 802fb1a:	687b      	ldr	r3, [r7, #4]
 802fb1c:	32ae      	adds	r2, #174	; 0xae
 802fb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fb22:	689b      	ldr	r3, [r3, #8]
 802fb24:	6839      	ldr	r1, [r7, #0]
 802fb26:	6878      	ldr	r0, [r7, #4]
 802fb28:	4798      	blx	r3
 802fb2a:	4603      	mov	r3, r0
 802fb2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 802fb2e:	e156      	b.n	802fdde <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802fb30:	683b      	ldr	r3, [r7, #0]
 802fb32:	785b      	ldrb	r3, [r3, #1]
 802fb34:	2b03      	cmp	r3, #3
 802fb36:	d008      	beq.n	802fb4a <USBD_StdEPReq+0x9a>
 802fb38:	2b03      	cmp	r3, #3
 802fb3a:	f300 8145 	bgt.w	802fdc8 <USBD_StdEPReq+0x318>
 802fb3e:	2b00      	cmp	r3, #0
 802fb40:	f000 809b 	beq.w	802fc7a <USBD_StdEPReq+0x1ca>
 802fb44:	2b01      	cmp	r3, #1
 802fb46:	d03c      	beq.n	802fbc2 <USBD_StdEPReq+0x112>
 802fb48:	e13e      	b.n	802fdc8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 802fb4a:	687b      	ldr	r3, [r7, #4]
 802fb4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fb50:	b2db      	uxtb	r3, r3
 802fb52:	2b02      	cmp	r3, #2
 802fb54:	d002      	beq.n	802fb5c <USBD_StdEPReq+0xac>
 802fb56:	2b03      	cmp	r3, #3
 802fb58:	d016      	beq.n	802fb88 <USBD_StdEPReq+0xd8>
 802fb5a:	e02c      	b.n	802fbb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802fb5c:	7bbb      	ldrb	r3, [r7, #14]
 802fb5e:	2b00      	cmp	r3, #0
 802fb60:	d00d      	beq.n	802fb7e <USBD_StdEPReq+0xce>
 802fb62:	7bbb      	ldrb	r3, [r7, #14]
 802fb64:	2b80      	cmp	r3, #128	; 0x80
 802fb66:	d00a      	beq.n	802fb7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802fb68:	7bbb      	ldrb	r3, [r7, #14]
 802fb6a:	4619      	mov	r1, r3
 802fb6c:	6878      	ldr	r0, [r7, #4]
 802fb6e:	f001 fbcf 	bl	8031310 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802fb72:	2180      	movs	r1, #128	; 0x80
 802fb74:	6878      	ldr	r0, [r7, #4]
 802fb76:	f001 fbcb 	bl	8031310 <USBD_LL_StallEP>
 802fb7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802fb7c:	e020      	b.n	802fbc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 802fb7e:	6839      	ldr	r1, [r7, #0]
 802fb80:	6878      	ldr	r0, [r7, #4]
 802fb82:	f000 fc7a 	bl	803047a <USBD_CtlError>
              break;
 802fb86:	e01b      	b.n	802fbc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802fb88:	683b      	ldr	r3, [r7, #0]
 802fb8a:	885b      	ldrh	r3, [r3, #2]
 802fb8c:	2b00      	cmp	r3, #0
 802fb8e:	d10e      	bne.n	802fbae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 802fb90:	7bbb      	ldrb	r3, [r7, #14]
 802fb92:	2b00      	cmp	r3, #0
 802fb94:	d00b      	beq.n	802fbae <USBD_StdEPReq+0xfe>
 802fb96:	7bbb      	ldrb	r3, [r7, #14]
 802fb98:	2b80      	cmp	r3, #128	; 0x80
 802fb9a:	d008      	beq.n	802fbae <USBD_StdEPReq+0xfe>
 802fb9c:	683b      	ldr	r3, [r7, #0]
 802fb9e:	88db      	ldrh	r3, [r3, #6]
 802fba0:	2b00      	cmp	r3, #0
 802fba2:	d104      	bne.n	802fbae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 802fba4:	7bbb      	ldrb	r3, [r7, #14]
 802fba6:	4619      	mov	r1, r3
 802fba8:	6878      	ldr	r0, [r7, #4]
 802fbaa:	f001 fbb1 	bl	8031310 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 802fbae:	6878      	ldr	r0, [r7, #4]
 802fbb0:	f000 fd2e 	bl	8030610 <USBD_CtlSendStatus>

              break;
 802fbb4:	e004      	b.n	802fbc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 802fbb6:	6839      	ldr	r1, [r7, #0]
 802fbb8:	6878      	ldr	r0, [r7, #4]
 802fbba:	f000 fc5e 	bl	803047a <USBD_CtlError>
              break;
 802fbbe:	bf00      	nop
          }
          break;
 802fbc0:	e107      	b.n	802fdd2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802fbc2:	687b      	ldr	r3, [r7, #4]
 802fbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fbc8:	b2db      	uxtb	r3, r3
 802fbca:	2b02      	cmp	r3, #2
 802fbcc:	d002      	beq.n	802fbd4 <USBD_StdEPReq+0x124>
 802fbce:	2b03      	cmp	r3, #3
 802fbd0:	d016      	beq.n	802fc00 <USBD_StdEPReq+0x150>
 802fbd2:	e04b      	b.n	802fc6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802fbd4:	7bbb      	ldrb	r3, [r7, #14]
 802fbd6:	2b00      	cmp	r3, #0
 802fbd8:	d00d      	beq.n	802fbf6 <USBD_StdEPReq+0x146>
 802fbda:	7bbb      	ldrb	r3, [r7, #14]
 802fbdc:	2b80      	cmp	r3, #128	; 0x80
 802fbde:	d00a      	beq.n	802fbf6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802fbe0:	7bbb      	ldrb	r3, [r7, #14]
 802fbe2:	4619      	mov	r1, r3
 802fbe4:	6878      	ldr	r0, [r7, #4]
 802fbe6:	f001 fb93 	bl	8031310 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802fbea:	2180      	movs	r1, #128	; 0x80
 802fbec:	6878      	ldr	r0, [r7, #4]
 802fbee:	f001 fb8f 	bl	8031310 <USBD_LL_StallEP>
 802fbf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802fbf4:	e040      	b.n	802fc78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 802fbf6:	6839      	ldr	r1, [r7, #0]
 802fbf8:	6878      	ldr	r0, [r7, #4]
 802fbfa:	f000 fc3e 	bl	803047a <USBD_CtlError>
              break;
 802fbfe:	e03b      	b.n	802fc78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802fc00:	683b      	ldr	r3, [r7, #0]
 802fc02:	885b      	ldrh	r3, [r3, #2]
 802fc04:	2b00      	cmp	r3, #0
 802fc06:	d136      	bne.n	802fc76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 802fc08:	7bbb      	ldrb	r3, [r7, #14]
 802fc0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802fc0e:	2b00      	cmp	r3, #0
 802fc10:	d004      	beq.n	802fc1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 802fc12:	7bbb      	ldrb	r3, [r7, #14]
 802fc14:	4619      	mov	r1, r3
 802fc16:	6878      	ldr	r0, [r7, #4]
 802fc18:	f001 fb99 	bl	803134e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 802fc1c:	6878      	ldr	r0, [r7, #4]
 802fc1e:	f000 fcf7 	bl	8030610 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 802fc22:	7bbb      	ldrb	r3, [r7, #14]
 802fc24:	4619      	mov	r1, r3
 802fc26:	6878      	ldr	r0, [r7, #4]
 802fc28:	f7ff fde2 	bl	802f7f0 <USBD_CoreFindEP>
 802fc2c:	4603      	mov	r3, r0
 802fc2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802fc30:	7b7b      	ldrb	r3, [r7, #13]
 802fc32:	2bff      	cmp	r3, #255	; 0xff
 802fc34:	d01f      	beq.n	802fc76 <USBD_StdEPReq+0x1c6>
 802fc36:	7b7b      	ldrb	r3, [r7, #13]
 802fc38:	2b00      	cmp	r3, #0
 802fc3a:	d11c      	bne.n	802fc76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 802fc3c:	7b7a      	ldrb	r2, [r7, #13]
 802fc3e:	687b      	ldr	r3, [r7, #4]
 802fc40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 802fc44:	7b7a      	ldrb	r2, [r7, #13]
 802fc46:	687b      	ldr	r3, [r7, #4]
 802fc48:	32ae      	adds	r2, #174	; 0xae
 802fc4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fc4e:	689b      	ldr	r3, [r3, #8]
 802fc50:	2b00      	cmp	r3, #0
 802fc52:	d010      	beq.n	802fc76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 802fc54:	7b7a      	ldrb	r2, [r7, #13]
 802fc56:	687b      	ldr	r3, [r7, #4]
 802fc58:	32ae      	adds	r2, #174	; 0xae
 802fc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fc5e:	689b      	ldr	r3, [r3, #8]
 802fc60:	6839      	ldr	r1, [r7, #0]
 802fc62:	6878      	ldr	r0, [r7, #4]
 802fc64:	4798      	blx	r3
 802fc66:	4603      	mov	r3, r0
 802fc68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 802fc6a:	e004      	b.n	802fc76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 802fc6c:	6839      	ldr	r1, [r7, #0]
 802fc6e:	6878      	ldr	r0, [r7, #4]
 802fc70:	f000 fc03 	bl	803047a <USBD_CtlError>
              break;
 802fc74:	e000      	b.n	802fc78 <USBD_StdEPReq+0x1c8>
              break;
 802fc76:	bf00      	nop
          }
          break;
 802fc78:	e0ab      	b.n	802fdd2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 802fc7a:	687b      	ldr	r3, [r7, #4]
 802fc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fc80:	b2db      	uxtb	r3, r3
 802fc82:	2b02      	cmp	r3, #2
 802fc84:	d002      	beq.n	802fc8c <USBD_StdEPReq+0x1dc>
 802fc86:	2b03      	cmp	r3, #3
 802fc88:	d032      	beq.n	802fcf0 <USBD_StdEPReq+0x240>
 802fc8a:	e097      	b.n	802fdbc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802fc8c:	7bbb      	ldrb	r3, [r7, #14]
 802fc8e:	2b00      	cmp	r3, #0
 802fc90:	d007      	beq.n	802fca2 <USBD_StdEPReq+0x1f2>
 802fc92:	7bbb      	ldrb	r3, [r7, #14]
 802fc94:	2b80      	cmp	r3, #128	; 0x80
 802fc96:	d004      	beq.n	802fca2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 802fc98:	6839      	ldr	r1, [r7, #0]
 802fc9a:	6878      	ldr	r0, [r7, #4]
 802fc9c:	f000 fbed 	bl	803047a <USBD_CtlError>
                break;
 802fca0:	e091      	b.n	802fdc6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fca2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802fca6:	2b00      	cmp	r3, #0
 802fca8:	da0b      	bge.n	802fcc2 <USBD_StdEPReq+0x212>
 802fcaa:	7bbb      	ldrb	r3, [r7, #14]
 802fcac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802fcb0:	4613      	mov	r3, r2
 802fcb2:	009b      	lsls	r3, r3, #2
 802fcb4:	4413      	add	r3, r2
 802fcb6:	009b      	lsls	r3, r3, #2
 802fcb8:	3310      	adds	r3, #16
 802fcba:	687a      	ldr	r2, [r7, #4]
 802fcbc:	4413      	add	r3, r2
 802fcbe:	3304      	adds	r3, #4
 802fcc0:	e00b      	b.n	802fcda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802fcc2:	7bbb      	ldrb	r3, [r7, #14]
 802fcc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fcc8:	4613      	mov	r3, r2
 802fcca:	009b      	lsls	r3, r3, #2
 802fccc:	4413      	add	r3, r2
 802fcce:	009b      	lsls	r3, r3, #2
 802fcd0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802fcd4:	687a      	ldr	r2, [r7, #4]
 802fcd6:	4413      	add	r3, r2
 802fcd8:	3304      	adds	r3, #4
 802fcda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 802fcdc:	68bb      	ldr	r3, [r7, #8]
 802fcde:	2200      	movs	r2, #0
 802fce0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802fce2:	68bb      	ldr	r3, [r7, #8]
 802fce4:	2202      	movs	r2, #2
 802fce6:	4619      	mov	r1, r3
 802fce8:	6878      	ldr	r0, [r7, #4]
 802fcea:	f000 fc37 	bl	803055c <USBD_CtlSendData>
              break;
 802fcee:	e06a      	b.n	802fdc6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 802fcf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802fcf4:	2b00      	cmp	r3, #0
 802fcf6:	da11      	bge.n	802fd1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802fcf8:	7bbb      	ldrb	r3, [r7, #14]
 802fcfa:	f003 020f 	and.w	r2, r3, #15
 802fcfe:	6879      	ldr	r1, [r7, #4]
 802fd00:	4613      	mov	r3, r2
 802fd02:	009b      	lsls	r3, r3, #2
 802fd04:	4413      	add	r3, r2
 802fd06:	009b      	lsls	r3, r3, #2
 802fd08:	440b      	add	r3, r1
 802fd0a:	3324      	adds	r3, #36	; 0x24
 802fd0c:	881b      	ldrh	r3, [r3, #0]
 802fd0e:	2b00      	cmp	r3, #0
 802fd10:	d117      	bne.n	802fd42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 802fd12:	6839      	ldr	r1, [r7, #0]
 802fd14:	6878      	ldr	r0, [r7, #4]
 802fd16:	f000 fbb0 	bl	803047a <USBD_CtlError>
                  break;
 802fd1a:	e054      	b.n	802fdc6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802fd1c:	7bbb      	ldrb	r3, [r7, #14]
 802fd1e:	f003 020f 	and.w	r2, r3, #15
 802fd22:	6879      	ldr	r1, [r7, #4]
 802fd24:	4613      	mov	r3, r2
 802fd26:	009b      	lsls	r3, r3, #2
 802fd28:	4413      	add	r3, r2
 802fd2a:	009b      	lsls	r3, r3, #2
 802fd2c:	440b      	add	r3, r1
 802fd2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802fd32:	881b      	ldrh	r3, [r3, #0]
 802fd34:	2b00      	cmp	r3, #0
 802fd36:	d104      	bne.n	802fd42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 802fd38:	6839      	ldr	r1, [r7, #0]
 802fd3a:	6878      	ldr	r0, [r7, #4]
 802fd3c:	f000 fb9d 	bl	803047a <USBD_CtlError>
                  break;
 802fd40:	e041      	b.n	802fdc6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fd42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802fd46:	2b00      	cmp	r3, #0
 802fd48:	da0b      	bge.n	802fd62 <USBD_StdEPReq+0x2b2>
 802fd4a:	7bbb      	ldrb	r3, [r7, #14]
 802fd4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802fd50:	4613      	mov	r3, r2
 802fd52:	009b      	lsls	r3, r3, #2
 802fd54:	4413      	add	r3, r2
 802fd56:	009b      	lsls	r3, r3, #2
 802fd58:	3310      	adds	r3, #16
 802fd5a:	687a      	ldr	r2, [r7, #4]
 802fd5c:	4413      	add	r3, r2
 802fd5e:	3304      	adds	r3, #4
 802fd60:	e00b      	b.n	802fd7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802fd62:	7bbb      	ldrb	r3, [r7, #14]
 802fd64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fd68:	4613      	mov	r3, r2
 802fd6a:	009b      	lsls	r3, r3, #2
 802fd6c:	4413      	add	r3, r2
 802fd6e:	009b      	lsls	r3, r3, #2
 802fd70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802fd74:	687a      	ldr	r2, [r7, #4]
 802fd76:	4413      	add	r3, r2
 802fd78:	3304      	adds	r3, #4
 802fd7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 802fd7c:	7bbb      	ldrb	r3, [r7, #14]
 802fd7e:	2b00      	cmp	r3, #0
 802fd80:	d002      	beq.n	802fd88 <USBD_StdEPReq+0x2d8>
 802fd82:	7bbb      	ldrb	r3, [r7, #14]
 802fd84:	2b80      	cmp	r3, #128	; 0x80
 802fd86:	d103      	bne.n	802fd90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 802fd88:	68bb      	ldr	r3, [r7, #8]
 802fd8a:	2200      	movs	r2, #0
 802fd8c:	601a      	str	r2, [r3, #0]
 802fd8e:	e00e      	b.n	802fdae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 802fd90:	7bbb      	ldrb	r3, [r7, #14]
 802fd92:	4619      	mov	r1, r3
 802fd94:	6878      	ldr	r0, [r7, #4]
 802fd96:	f001 faf9 	bl	803138c <USBD_LL_IsStallEP>
 802fd9a:	4603      	mov	r3, r0
 802fd9c:	2b00      	cmp	r3, #0
 802fd9e:	d003      	beq.n	802fda8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 802fda0:	68bb      	ldr	r3, [r7, #8]
 802fda2:	2201      	movs	r2, #1
 802fda4:	601a      	str	r2, [r3, #0]
 802fda6:	e002      	b.n	802fdae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 802fda8:	68bb      	ldr	r3, [r7, #8]
 802fdaa:	2200      	movs	r2, #0
 802fdac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802fdae:	68bb      	ldr	r3, [r7, #8]
 802fdb0:	2202      	movs	r2, #2
 802fdb2:	4619      	mov	r1, r3
 802fdb4:	6878      	ldr	r0, [r7, #4]
 802fdb6:	f000 fbd1 	bl	803055c <USBD_CtlSendData>
              break;
 802fdba:	e004      	b.n	802fdc6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 802fdbc:	6839      	ldr	r1, [r7, #0]
 802fdbe:	6878      	ldr	r0, [r7, #4]
 802fdc0:	f000 fb5b 	bl	803047a <USBD_CtlError>
              break;
 802fdc4:	bf00      	nop
          }
          break;
 802fdc6:	e004      	b.n	802fdd2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 802fdc8:	6839      	ldr	r1, [r7, #0]
 802fdca:	6878      	ldr	r0, [r7, #4]
 802fdcc:	f000 fb55 	bl	803047a <USBD_CtlError>
          break;
 802fdd0:	bf00      	nop
      }
      break;
 802fdd2:	e005      	b.n	802fde0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 802fdd4:	6839      	ldr	r1, [r7, #0]
 802fdd6:	6878      	ldr	r0, [r7, #4]
 802fdd8:	f000 fb4f 	bl	803047a <USBD_CtlError>
      break;
 802fddc:	e000      	b.n	802fde0 <USBD_StdEPReq+0x330>
      break;
 802fdde:	bf00      	nop
  }

  return ret;
 802fde0:	7bfb      	ldrb	r3, [r7, #15]
}
 802fde2:	4618      	mov	r0, r3
 802fde4:	3710      	adds	r7, #16
 802fde6:	46bd      	mov	sp, r7
 802fde8:	bd80      	pop	{r7, pc}
	...

0802fdec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fdec:	b580      	push	{r7, lr}
 802fdee:	b084      	sub	sp, #16
 802fdf0:	af00      	add	r7, sp, #0
 802fdf2:	6078      	str	r0, [r7, #4]
 802fdf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802fdf6:	2300      	movs	r3, #0
 802fdf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 802fdfa:	2300      	movs	r3, #0
 802fdfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802fdfe:	2300      	movs	r3, #0
 802fe00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 802fe02:	683b      	ldr	r3, [r7, #0]
 802fe04:	885b      	ldrh	r3, [r3, #2]
 802fe06:	0a1b      	lsrs	r3, r3, #8
 802fe08:	b29b      	uxth	r3, r3
 802fe0a:	3b01      	subs	r3, #1
 802fe0c:	2b06      	cmp	r3, #6
 802fe0e:	f200 8128 	bhi.w	8030062 <USBD_GetDescriptor+0x276>
 802fe12:	a201      	add	r2, pc, #4	; (adr r2, 802fe18 <USBD_GetDescriptor+0x2c>)
 802fe14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fe18:	0802fe35 	.word	0x0802fe35
 802fe1c:	0802fe4d 	.word	0x0802fe4d
 802fe20:	0802fe8d 	.word	0x0802fe8d
 802fe24:	08030063 	.word	0x08030063
 802fe28:	08030063 	.word	0x08030063
 802fe2c:	08030003 	.word	0x08030003
 802fe30:	0803002f 	.word	0x0803002f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802fe34:	687b      	ldr	r3, [r7, #4]
 802fe36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fe3a:	681b      	ldr	r3, [r3, #0]
 802fe3c:	687a      	ldr	r2, [r7, #4]
 802fe3e:	7c12      	ldrb	r2, [r2, #16]
 802fe40:	f107 0108 	add.w	r1, r7, #8
 802fe44:	4610      	mov	r0, r2
 802fe46:	4798      	blx	r3
 802fe48:	60f8      	str	r0, [r7, #12]
      break;
 802fe4a:	e112      	b.n	8030072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802fe4c:	687b      	ldr	r3, [r7, #4]
 802fe4e:	7c1b      	ldrb	r3, [r3, #16]
 802fe50:	2b00      	cmp	r3, #0
 802fe52:	d10d      	bne.n	802fe70 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 802fe54:	687b      	ldr	r3, [r7, #4]
 802fe56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fe5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fe5c:	f107 0208 	add.w	r2, r7, #8
 802fe60:	4610      	mov	r0, r2
 802fe62:	4798      	blx	r3
 802fe64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802fe66:	68fb      	ldr	r3, [r7, #12]
 802fe68:	3301      	adds	r3, #1
 802fe6a:	2202      	movs	r2, #2
 802fe6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 802fe6e:	e100      	b.n	8030072 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 802fe70:	687b      	ldr	r3, [r7, #4]
 802fe72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fe76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fe78:	f107 0208 	add.w	r2, r7, #8
 802fe7c:	4610      	mov	r0, r2
 802fe7e:	4798      	blx	r3
 802fe80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802fe82:	68fb      	ldr	r3, [r7, #12]
 802fe84:	3301      	adds	r3, #1
 802fe86:	2202      	movs	r2, #2
 802fe88:	701a      	strb	r2, [r3, #0]
      break;
 802fe8a:	e0f2      	b.n	8030072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 802fe8c:	683b      	ldr	r3, [r7, #0]
 802fe8e:	885b      	ldrh	r3, [r3, #2]
 802fe90:	b2db      	uxtb	r3, r3
 802fe92:	2b05      	cmp	r3, #5
 802fe94:	f200 80ac 	bhi.w	802fff0 <USBD_GetDescriptor+0x204>
 802fe98:	a201      	add	r2, pc, #4	; (adr r2, 802fea0 <USBD_GetDescriptor+0xb4>)
 802fe9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fe9e:	bf00      	nop
 802fea0:	0802feb9 	.word	0x0802feb9
 802fea4:	0802feed 	.word	0x0802feed
 802fea8:	0802ff21 	.word	0x0802ff21
 802feac:	0802ff55 	.word	0x0802ff55
 802feb0:	0802ff89 	.word	0x0802ff89
 802feb4:	0802ffbd 	.word	0x0802ffbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 802feb8:	687b      	ldr	r3, [r7, #4]
 802feba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802febe:	685b      	ldr	r3, [r3, #4]
 802fec0:	2b00      	cmp	r3, #0
 802fec2:	d00b      	beq.n	802fedc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 802fec4:	687b      	ldr	r3, [r7, #4]
 802fec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802feca:	685b      	ldr	r3, [r3, #4]
 802fecc:	687a      	ldr	r2, [r7, #4]
 802fece:	7c12      	ldrb	r2, [r2, #16]
 802fed0:	f107 0108 	add.w	r1, r7, #8
 802fed4:	4610      	mov	r0, r2
 802fed6:	4798      	blx	r3
 802fed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802feda:	e091      	b.n	8030000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802fedc:	6839      	ldr	r1, [r7, #0]
 802fede:	6878      	ldr	r0, [r7, #4]
 802fee0:	f000 facb 	bl	803047a <USBD_CtlError>
            err++;
 802fee4:	7afb      	ldrb	r3, [r7, #11]
 802fee6:	3301      	adds	r3, #1
 802fee8:	72fb      	strb	r3, [r7, #11]
          break;
 802feea:	e089      	b.n	8030000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 802feec:	687b      	ldr	r3, [r7, #4]
 802feee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fef2:	689b      	ldr	r3, [r3, #8]
 802fef4:	2b00      	cmp	r3, #0
 802fef6:	d00b      	beq.n	802ff10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 802fef8:	687b      	ldr	r3, [r7, #4]
 802fefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fefe:	689b      	ldr	r3, [r3, #8]
 802ff00:	687a      	ldr	r2, [r7, #4]
 802ff02:	7c12      	ldrb	r2, [r2, #16]
 802ff04:	f107 0108 	add.w	r1, r7, #8
 802ff08:	4610      	mov	r0, r2
 802ff0a:	4798      	blx	r3
 802ff0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ff0e:	e077      	b.n	8030000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ff10:	6839      	ldr	r1, [r7, #0]
 802ff12:	6878      	ldr	r0, [r7, #4]
 802ff14:	f000 fab1 	bl	803047a <USBD_CtlError>
            err++;
 802ff18:	7afb      	ldrb	r3, [r7, #11]
 802ff1a:	3301      	adds	r3, #1
 802ff1c:	72fb      	strb	r3, [r7, #11]
          break;
 802ff1e:	e06f      	b.n	8030000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 802ff20:	687b      	ldr	r3, [r7, #4]
 802ff22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff26:	68db      	ldr	r3, [r3, #12]
 802ff28:	2b00      	cmp	r3, #0
 802ff2a:	d00b      	beq.n	802ff44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802ff2c:	687b      	ldr	r3, [r7, #4]
 802ff2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff32:	68db      	ldr	r3, [r3, #12]
 802ff34:	687a      	ldr	r2, [r7, #4]
 802ff36:	7c12      	ldrb	r2, [r2, #16]
 802ff38:	f107 0108 	add.w	r1, r7, #8
 802ff3c:	4610      	mov	r0, r2
 802ff3e:	4798      	blx	r3
 802ff40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ff42:	e05d      	b.n	8030000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ff44:	6839      	ldr	r1, [r7, #0]
 802ff46:	6878      	ldr	r0, [r7, #4]
 802ff48:	f000 fa97 	bl	803047a <USBD_CtlError>
            err++;
 802ff4c:	7afb      	ldrb	r3, [r7, #11]
 802ff4e:	3301      	adds	r3, #1
 802ff50:	72fb      	strb	r3, [r7, #11]
          break;
 802ff52:	e055      	b.n	8030000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 802ff54:	687b      	ldr	r3, [r7, #4]
 802ff56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff5a:	691b      	ldr	r3, [r3, #16]
 802ff5c:	2b00      	cmp	r3, #0
 802ff5e:	d00b      	beq.n	802ff78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802ff60:	687b      	ldr	r3, [r7, #4]
 802ff62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff66:	691b      	ldr	r3, [r3, #16]
 802ff68:	687a      	ldr	r2, [r7, #4]
 802ff6a:	7c12      	ldrb	r2, [r2, #16]
 802ff6c:	f107 0108 	add.w	r1, r7, #8
 802ff70:	4610      	mov	r0, r2
 802ff72:	4798      	blx	r3
 802ff74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ff76:	e043      	b.n	8030000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ff78:	6839      	ldr	r1, [r7, #0]
 802ff7a:	6878      	ldr	r0, [r7, #4]
 802ff7c:	f000 fa7d 	bl	803047a <USBD_CtlError>
            err++;
 802ff80:	7afb      	ldrb	r3, [r7, #11]
 802ff82:	3301      	adds	r3, #1
 802ff84:	72fb      	strb	r3, [r7, #11]
          break;
 802ff86:	e03b      	b.n	8030000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 802ff88:	687b      	ldr	r3, [r7, #4]
 802ff8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff8e:	695b      	ldr	r3, [r3, #20]
 802ff90:	2b00      	cmp	r3, #0
 802ff92:	d00b      	beq.n	802ffac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 802ff94:	687b      	ldr	r3, [r7, #4]
 802ff96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff9a:	695b      	ldr	r3, [r3, #20]
 802ff9c:	687a      	ldr	r2, [r7, #4]
 802ff9e:	7c12      	ldrb	r2, [r2, #16]
 802ffa0:	f107 0108 	add.w	r1, r7, #8
 802ffa4:	4610      	mov	r0, r2
 802ffa6:	4798      	blx	r3
 802ffa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ffaa:	e029      	b.n	8030000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ffac:	6839      	ldr	r1, [r7, #0]
 802ffae:	6878      	ldr	r0, [r7, #4]
 802ffb0:	f000 fa63 	bl	803047a <USBD_CtlError>
            err++;
 802ffb4:	7afb      	ldrb	r3, [r7, #11]
 802ffb6:	3301      	adds	r3, #1
 802ffb8:	72fb      	strb	r3, [r7, #11]
          break;
 802ffba:	e021      	b.n	8030000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 802ffbc:	687b      	ldr	r3, [r7, #4]
 802ffbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ffc2:	699b      	ldr	r3, [r3, #24]
 802ffc4:	2b00      	cmp	r3, #0
 802ffc6:	d00b      	beq.n	802ffe0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802ffc8:	687b      	ldr	r3, [r7, #4]
 802ffca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ffce:	699b      	ldr	r3, [r3, #24]
 802ffd0:	687a      	ldr	r2, [r7, #4]
 802ffd2:	7c12      	ldrb	r2, [r2, #16]
 802ffd4:	f107 0108 	add.w	r1, r7, #8
 802ffd8:	4610      	mov	r0, r2
 802ffda:	4798      	blx	r3
 802ffdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ffde:	e00f      	b.n	8030000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ffe0:	6839      	ldr	r1, [r7, #0]
 802ffe2:	6878      	ldr	r0, [r7, #4]
 802ffe4:	f000 fa49 	bl	803047a <USBD_CtlError>
            err++;
 802ffe8:	7afb      	ldrb	r3, [r7, #11]
 802ffea:	3301      	adds	r3, #1
 802ffec:	72fb      	strb	r3, [r7, #11]
          break;
 802ffee:	e007      	b.n	8030000 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 802fff0:	6839      	ldr	r1, [r7, #0]
 802fff2:	6878      	ldr	r0, [r7, #4]
 802fff4:	f000 fa41 	bl	803047a <USBD_CtlError>
          err++;
 802fff8:	7afb      	ldrb	r3, [r7, #11]
 802fffa:	3301      	adds	r3, #1
 802fffc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 802fffe:	bf00      	nop
      }
      break;
 8030000:	e037      	b.n	8030072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8030002:	687b      	ldr	r3, [r7, #4]
 8030004:	7c1b      	ldrb	r3, [r3, #16]
 8030006:	2b00      	cmp	r3, #0
 8030008:	d109      	bne.n	803001e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 803000a:	687b      	ldr	r3, [r7, #4]
 803000c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8030010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030012:	f107 0208 	add.w	r2, r7, #8
 8030016:	4610      	mov	r0, r2
 8030018:	4798      	blx	r3
 803001a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803001c:	e029      	b.n	8030072 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803001e:	6839      	ldr	r1, [r7, #0]
 8030020:	6878      	ldr	r0, [r7, #4]
 8030022:	f000 fa2a 	bl	803047a <USBD_CtlError>
        err++;
 8030026:	7afb      	ldrb	r3, [r7, #11]
 8030028:	3301      	adds	r3, #1
 803002a:	72fb      	strb	r3, [r7, #11]
      break;
 803002c:	e021      	b.n	8030072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803002e:	687b      	ldr	r3, [r7, #4]
 8030030:	7c1b      	ldrb	r3, [r3, #16]
 8030032:	2b00      	cmp	r3, #0
 8030034:	d10d      	bne.n	8030052 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8030036:	687b      	ldr	r3, [r7, #4]
 8030038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803003c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803003e:	f107 0208 	add.w	r2, r7, #8
 8030042:	4610      	mov	r0, r2
 8030044:	4798      	blx	r3
 8030046:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8030048:	68fb      	ldr	r3, [r7, #12]
 803004a:	3301      	adds	r3, #1
 803004c:	2207      	movs	r2, #7
 803004e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8030050:	e00f      	b.n	8030072 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8030052:	6839      	ldr	r1, [r7, #0]
 8030054:	6878      	ldr	r0, [r7, #4]
 8030056:	f000 fa10 	bl	803047a <USBD_CtlError>
        err++;
 803005a:	7afb      	ldrb	r3, [r7, #11]
 803005c:	3301      	adds	r3, #1
 803005e:	72fb      	strb	r3, [r7, #11]
      break;
 8030060:	e007      	b.n	8030072 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8030062:	6839      	ldr	r1, [r7, #0]
 8030064:	6878      	ldr	r0, [r7, #4]
 8030066:	f000 fa08 	bl	803047a <USBD_CtlError>
      err++;
 803006a:	7afb      	ldrb	r3, [r7, #11]
 803006c:	3301      	adds	r3, #1
 803006e:	72fb      	strb	r3, [r7, #11]
      break;
 8030070:	bf00      	nop
  }

  if (err != 0U)
 8030072:	7afb      	ldrb	r3, [r7, #11]
 8030074:	2b00      	cmp	r3, #0
 8030076:	d11e      	bne.n	80300b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8030078:	683b      	ldr	r3, [r7, #0]
 803007a:	88db      	ldrh	r3, [r3, #6]
 803007c:	2b00      	cmp	r3, #0
 803007e:	d016      	beq.n	80300ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8030080:	893b      	ldrh	r3, [r7, #8]
 8030082:	2b00      	cmp	r3, #0
 8030084:	d00e      	beq.n	80300a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8030086:	683b      	ldr	r3, [r7, #0]
 8030088:	88da      	ldrh	r2, [r3, #6]
 803008a:	893b      	ldrh	r3, [r7, #8]
 803008c:	4293      	cmp	r3, r2
 803008e:	bf28      	it	cs
 8030090:	4613      	movcs	r3, r2
 8030092:	b29b      	uxth	r3, r3
 8030094:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8030096:	893b      	ldrh	r3, [r7, #8]
 8030098:	461a      	mov	r2, r3
 803009a:	68f9      	ldr	r1, [r7, #12]
 803009c:	6878      	ldr	r0, [r7, #4]
 803009e:	f000 fa5d 	bl	803055c <USBD_CtlSendData>
 80300a2:	e009      	b.n	80300b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80300a4:	6839      	ldr	r1, [r7, #0]
 80300a6:	6878      	ldr	r0, [r7, #4]
 80300a8:	f000 f9e7 	bl	803047a <USBD_CtlError>
 80300ac:	e004      	b.n	80300b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80300ae:	6878      	ldr	r0, [r7, #4]
 80300b0:	f000 faae 	bl	8030610 <USBD_CtlSendStatus>
 80300b4:	e000      	b.n	80300b8 <USBD_GetDescriptor+0x2cc>
    return;
 80300b6:	bf00      	nop
  }
}
 80300b8:	3710      	adds	r7, #16
 80300ba:	46bd      	mov	sp, r7
 80300bc:	bd80      	pop	{r7, pc}
 80300be:	bf00      	nop

080300c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80300c0:	b580      	push	{r7, lr}
 80300c2:	b084      	sub	sp, #16
 80300c4:	af00      	add	r7, sp, #0
 80300c6:	6078      	str	r0, [r7, #4]
 80300c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80300ca:	683b      	ldr	r3, [r7, #0]
 80300cc:	889b      	ldrh	r3, [r3, #4]
 80300ce:	2b00      	cmp	r3, #0
 80300d0:	d131      	bne.n	8030136 <USBD_SetAddress+0x76>
 80300d2:	683b      	ldr	r3, [r7, #0]
 80300d4:	88db      	ldrh	r3, [r3, #6]
 80300d6:	2b00      	cmp	r3, #0
 80300d8:	d12d      	bne.n	8030136 <USBD_SetAddress+0x76>
 80300da:	683b      	ldr	r3, [r7, #0]
 80300dc:	885b      	ldrh	r3, [r3, #2]
 80300de:	2b7f      	cmp	r3, #127	; 0x7f
 80300e0:	d829      	bhi.n	8030136 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80300e2:	683b      	ldr	r3, [r7, #0]
 80300e4:	885b      	ldrh	r3, [r3, #2]
 80300e6:	b2db      	uxtb	r3, r3
 80300e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80300ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80300ee:	687b      	ldr	r3, [r7, #4]
 80300f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80300f4:	b2db      	uxtb	r3, r3
 80300f6:	2b03      	cmp	r3, #3
 80300f8:	d104      	bne.n	8030104 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80300fa:	6839      	ldr	r1, [r7, #0]
 80300fc:	6878      	ldr	r0, [r7, #4]
 80300fe:	f000 f9bc 	bl	803047a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8030102:	e01d      	b.n	8030140 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8030104:	687b      	ldr	r3, [r7, #4]
 8030106:	7bfa      	ldrb	r2, [r7, #15]
 8030108:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803010c:	7bfb      	ldrb	r3, [r7, #15]
 803010e:	4619      	mov	r1, r3
 8030110:	6878      	ldr	r0, [r7, #4]
 8030112:	f001 f967 	bl	80313e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8030116:	6878      	ldr	r0, [r7, #4]
 8030118:	f000 fa7a 	bl	8030610 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803011c:	7bfb      	ldrb	r3, [r7, #15]
 803011e:	2b00      	cmp	r3, #0
 8030120:	d004      	beq.n	803012c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8030122:	687b      	ldr	r3, [r7, #4]
 8030124:	2202      	movs	r2, #2
 8030126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803012a:	e009      	b.n	8030140 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803012c:	687b      	ldr	r3, [r7, #4]
 803012e:	2201      	movs	r2, #1
 8030130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8030134:	e004      	b.n	8030140 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8030136:	6839      	ldr	r1, [r7, #0]
 8030138:	6878      	ldr	r0, [r7, #4]
 803013a:	f000 f99e 	bl	803047a <USBD_CtlError>
  }
}
 803013e:	bf00      	nop
 8030140:	bf00      	nop
 8030142:	3710      	adds	r7, #16
 8030144:	46bd      	mov	sp, r7
 8030146:	bd80      	pop	{r7, pc}

08030148 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030148:	b580      	push	{r7, lr}
 803014a:	b084      	sub	sp, #16
 803014c:	af00      	add	r7, sp, #0
 803014e:	6078      	str	r0, [r7, #4]
 8030150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8030152:	2300      	movs	r3, #0
 8030154:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8030156:	683b      	ldr	r3, [r7, #0]
 8030158:	885b      	ldrh	r3, [r3, #2]
 803015a:	b2da      	uxtb	r2, r3
 803015c:	4b4e      	ldr	r3, [pc, #312]	; (8030298 <USBD_SetConfig+0x150>)
 803015e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8030160:	4b4d      	ldr	r3, [pc, #308]	; (8030298 <USBD_SetConfig+0x150>)
 8030162:	781b      	ldrb	r3, [r3, #0]
 8030164:	2b01      	cmp	r3, #1
 8030166:	d905      	bls.n	8030174 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8030168:	6839      	ldr	r1, [r7, #0]
 803016a:	6878      	ldr	r0, [r7, #4]
 803016c:	f000 f985 	bl	803047a <USBD_CtlError>
    return USBD_FAIL;
 8030170:	2303      	movs	r3, #3
 8030172:	e08c      	b.n	803028e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8030174:	687b      	ldr	r3, [r7, #4]
 8030176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803017a:	b2db      	uxtb	r3, r3
 803017c:	2b02      	cmp	r3, #2
 803017e:	d002      	beq.n	8030186 <USBD_SetConfig+0x3e>
 8030180:	2b03      	cmp	r3, #3
 8030182:	d029      	beq.n	80301d8 <USBD_SetConfig+0x90>
 8030184:	e075      	b.n	8030272 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8030186:	4b44      	ldr	r3, [pc, #272]	; (8030298 <USBD_SetConfig+0x150>)
 8030188:	781b      	ldrb	r3, [r3, #0]
 803018a:	2b00      	cmp	r3, #0
 803018c:	d020      	beq.n	80301d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803018e:	4b42      	ldr	r3, [pc, #264]	; (8030298 <USBD_SetConfig+0x150>)
 8030190:	781b      	ldrb	r3, [r3, #0]
 8030192:	461a      	mov	r2, r3
 8030194:	687b      	ldr	r3, [r7, #4]
 8030196:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8030198:	4b3f      	ldr	r3, [pc, #252]	; (8030298 <USBD_SetConfig+0x150>)
 803019a:	781b      	ldrb	r3, [r3, #0]
 803019c:	4619      	mov	r1, r3
 803019e:	6878      	ldr	r0, [r7, #4]
 80301a0:	f7fe ffe7 	bl	802f172 <USBD_SetClassConfig>
 80301a4:	4603      	mov	r3, r0
 80301a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80301a8:	7bfb      	ldrb	r3, [r7, #15]
 80301aa:	2b00      	cmp	r3, #0
 80301ac:	d008      	beq.n	80301c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80301ae:	6839      	ldr	r1, [r7, #0]
 80301b0:	6878      	ldr	r0, [r7, #4]
 80301b2:	f000 f962 	bl	803047a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80301b6:	687b      	ldr	r3, [r7, #4]
 80301b8:	2202      	movs	r2, #2
 80301ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80301be:	e065      	b.n	803028c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80301c0:	6878      	ldr	r0, [r7, #4]
 80301c2:	f000 fa25 	bl	8030610 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80301c6:	687b      	ldr	r3, [r7, #4]
 80301c8:	2203      	movs	r2, #3
 80301ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80301ce:	e05d      	b.n	803028c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80301d0:	6878      	ldr	r0, [r7, #4]
 80301d2:	f000 fa1d 	bl	8030610 <USBD_CtlSendStatus>
      break;
 80301d6:	e059      	b.n	803028c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80301d8:	4b2f      	ldr	r3, [pc, #188]	; (8030298 <USBD_SetConfig+0x150>)
 80301da:	781b      	ldrb	r3, [r3, #0]
 80301dc:	2b00      	cmp	r3, #0
 80301de:	d112      	bne.n	8030206 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80301e0:	687b      	ldr	r3, [r7, #4]
 80301e2:	2202      	movs	r2, #2
 80301e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80301e8:	4b2b      	ldr	r3, [pc, #172]	; (8030298 <USBD_SetConfig+0x150>)
 80301ea:	781b      	ldrb	r3, [r3, #0]
 80301ec:	461a      	mov	r2, r3
 80301ee:	687b      	ldr	r3, [r7, #4]
 80301f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80301f2:	4b29      	ldr	r3, [pc, #164]	; (8030298 <USBD_SetConfig+0x150>)
 80301f4:	781b      	ldrb	r3, [r3, #0]
 80301f6:	4619      	mov	r1, r3
 80301f8:	6878      	ldr	r0, [r7, #4]
 80301fa:	f7fe ffd6 	bl	802f1aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80301fe:	6878      	ldr	r0, [r7, #4]
 8030200:	f000 fa06 	bl	8030610 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8030204:	e042      	b.n	803028c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8030206:	4b24      	ldr	r3, [pc, #144]	; (8030298 <USBD_SetConfig+0x150>)
 8030208:	781b      	ldrb	r3, [r3, #0]
 803020a:	461a      	mov	r2, r3
 803020c:	687b      	ldr	r3, [r7, #4]
 803020e:	685b      	ldr	r3, [r3, #4]
 8030210:	429a      	cmp	r2, r3
 8030212:	d02a      	beq.n	803026a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8030214:	687b      	ldr	r3, [r7, #4]
 8030216:	685b      	ldr	r3, [r3, #4]
 8030218:	b2db      	uxtb	r3, r3
 803021a:	4619      	mov	r1, r3
 803021c:	6878      	ldr	r0, [r7, #4]
 803021e:	f7fe ffc4 	bl	802f1aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8030222:	4b1d      	ldr	r3, [pc, #116]	; (8030298 <USBD_SetConfig+0x150>)
 8030224:	781b      	ldrb	r3, [r3, #0]
 8030226:	461a      	mov	r2, r3
 8030228:	687b      	ldr	r3, [r7, #4]
 803022a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 803022c:	4b1a      	ldr	r3, [pc, #104]	; (8030298 <USBD_SetConfig+0x150>)
 803022e:	781b      	ldrb	r3, [r3, #0]
 8030230:	4619      	mov	r1, r3
 8030232:	6878      	ldr	r0, [r7, #4]
 8030234:	f7fe ff9d 	bl	802f172 <USBD_SetClassConfig>
 8030238:	4603      	mov	r3, r0
 803023a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803023c:	7bfb      	ldrb	r3, [r7, #15]
 803023e:	2b00      	cmp	r3, #0
 8030240:	d00f      	beq.n	8030262 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8030242:	6839      	ldr	r1, [r7, #0]
 8030244:	6878      	ldr	r0, [r7, #4]
 8030246:	f000 f918 	bl	803047a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803024a:	687b      	ldr	r3, [r7, #4]
 803024c:	685b      	ldr	r3, [r3, #4]
 803024e:	b2db      	uxtb	r3, r3
 8030250:	4619      	mov	r1, r3
 8030252:	6878      	ldr	r0, [r7, #4]
 8030254:	f7fe ffa9 	bl	802f1aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8030258:	687b      	ldr	r3, [r7, #4]
 803025a:	2202      	movs	r2, #2
 803025c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8030260:	e014      	b.n	803028c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8030262:	6878      	ldr	r0, [r7, #4]
 8030264:	f000 f9d4 	bl	8030610 <USBD_CtlSendStatus>
      break;
 8030268:	e010      	b.n	803028c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803026a:	6878      	ldr	r0, [r7, #4]
 803026c:	f000 f9d0 	bl	8030610 <USBD_CtlSendStatus>
      break;
 8030270:	e00c      	b.n	803028c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8030272:	6839      	ldr	r1, [r7, #0]
 8030274:	6878      	ldr	r0, [r7, #4]
 8030276:	f000 f900 	bl	803047a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803027a:	4b07      	ldr	r3, [pc, #28]	; (8030298 <USBD_SetConfig+0x150>)
 803027c:	781b      	ldrb	r3, [r3, #0]
 803027e:	4619      	mov	r1, r3
 8030280:	6878      	ldr	r0, [r7, #4]
 8030282:	f7fe ff92 	bl	802f1aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8030286:	2303      	movs	r3, #3
 8030288:	73fb      	strb	r3, [r7, #15]
      break;
 803028a:	bf00      	nop
  }

  return ret;
 803028c:	7bfb      	ldrb	r3, [r7, #15]
}
 803028e:	4618      	mov	r0, r3
 8030290:	3710      	adds	r7, #16
 8030292:	46bd      	mov	sp, r7
 8030294:	bd80      	pop	{r7, pc}
 8030296:	bf00      	nop
 8030298:	20005874 	.word	0x20005874

0803029c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803029c:	b580      	push	{r7, lr}
 803029e:	b082      	sub	sp, #8
 80302a0:	af00      	add	r7, sp, #0
 80302a2:	6078      	str	r0, [r7, #4]
 80302a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80302a6:	683b      	ldr	r3, [r7, #0]
 80302a8:	88db      	ldrh	r3, [r3, #6]
 80302aa:	2b01      	cmp	r3, #1
 80302ac:	d004      	beq.n	80302b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80302ae:	6839      	ldr	r1, [r7, #0]
 80302b0:	6878      	ldr	r0, [r7, #4]
 80302b2:	f000 f8e2 	bl	803047a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80302b6:	e023      	b.n	8030300 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80302b8:	687b      	ldr	r3, [r7, #4]
 80302ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80302be:	b2db      	uxtb	r3, r3
 80302c0:	2b02      	cmp	r3, #2
 80302c2:	dc02      	bgt.n	80302ca <USBD_GetConfig+0x2e>
 80302c4:	2b00      	cmp	r3, #0
 80302c6:	dc03      	bgt.n	80302d0 <USBD_GetConfig+0x34>
 80302c8:	e015      	b.n	80302f6 <USBD_GetConfig+0x5a>
 80302ca:	2b03      	cmp	r3, #3
 80302cc:	d00b      	beq.n	80302e6 <USBD_GetConfig+0x4a>
 80302ce:	e012      	b.n	80302f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80302d0:	687b      	ldr	r3, [r7, #4]
 80302d2:	2200      	movs	r2, #0
 80302d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80302d6:	687b      	ldr	r3, [r7, #4]
 80302d8:	3308      	adds	r3, #8
 80302da:	2201      	movs	r2, #1
 80302dc:	4619      	mov	r1, r3
 80302de:	6878      	ldr	r0, [r7, #4]
 80302e0:	f000 f93c 	bl	803055c <USBD_CtlSendData>
        break;
 80302e4:	e00c      	b.n	8030300 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80302e6:	687b      	ldr	r3, [r7, #4]
 80302e8:	3304      	adds	r3, #4
 80302ea:	2201      	movs	r2, #1
 80302ec:	4619      	mov	r1, r3
 80302ee:	6878      	ldr	r0, [r7, #4]
 80302f0:	f000 f934 	bl	803055c <USBD_CtlSendData>
        break;
 80302f4:	e004      	b.n	8030300 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80302f6:	6839      	ldr	r1, [r7, #0]
 80302f8:	6878      	ldr	r0, [r7, #4]
 80302fa:	f000 f8be 	bl	803047a <USBD_CtlError>
        break;
 80302fe:	bf00      	nop
}
 8030300:	bf00      	nop
 8030302:	3708      	adds	r7, #8
 8030304:	46bd      	mov	sp, r7
 8030306:	bd80      	pop	{r7, pc}

08030308 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030308:	b580      	push	{r7, lr}
 803030a:	b082      	sub	sp, #8
 803030c:	af00      	add	r7, sp, #0
 803030e:	6078      	str	r0, [r7, #4]
 8030310:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8030312:	687b      	ldr	r3, [r7, #4]
 8030314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8030318:	b2db      	uxtb	r3, r3
 803031a:	3b01      	subs	r3, #1
 803031c:	2b02      	cmp	r3, #2
 803031e:	d81e      	bhi.n	803035e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8030320:	683b      	ldr	r3, [r7, #0]
 8030322:	88db      	ldrh	r3, [r3, #6]
 8030324:	2b02      	cmp	r3, #2
 8030326:	d004      	beq.n	8030332 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8030328:	6839      	ldr	r1, [r7, #0]
 803032a:	6878      	ldr	r0, [r7, #4]
 803032c:	f000 f8a5 	bl	803047a <USBD_CtlError>
        break;
 8030330:	e01a      	b.n	8030368 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8030332:	687b      	ldr	r3, [r7, #4]
 8030334:	2201      	movs	r2, #1
 8030336:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8030338:	687b      	ldr	r3, [r7, #4]
 803033a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803033e:	2b00      	cmp	r3, #0
 8030340:	d005      	beq.n	803034e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8030342:	687b      	ldr	r3, [r7, #4]
 8030344:	68db      	ldr	r3, [r3, #12]
 8030346:	f043 0202 	orr.w	r2, r3, #2
 803034a:	687b      	ldr	r3, [r7, #4]
 803034c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803034e:	687b      	ldr	r3, [r7, #4]
 8030350:	330c      	adds	r3, #12
 8030352:	2202      	movs	r2, #2
 8030354:	4619      	mov	r1, r3
 8030356:	6878      	ldr	r0, [r7, #4]
 8030358:	f000 f900 	bl	803055c <USBD_CtlSendData>
      break;
 803035c:	e004      	b.n	8030368 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803035e:	6839      	ldr	r1, [r7, #0]
 8030360:	6878      	ldr	r0, [r7, #4]
 8030362:	f000 f88a 	bl	803047a <USBD_CtlError>
      break;
 8030366:	bf00      	nop
  }
}
 8030368:	bf00      	nop
 803036a:	3708      	adds	r7, #8
 803036c:	46bd      	mov	sp, r7
 803036e:	bd80      	pop	{r7, pc}

08030370 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030370:	b580      	push	{r7, lr}
 8030372:	b082      	sub	sp, #8
 8030374:	af00      	add	r7, sp, #0
 8030376:	6078      	str	r0, [r7, #4]
 8030378:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803037a:	683b      	ldr	r3, [r7, #0]
 803037c:	885b      	ldrh	r3, [r3, #2]
 803037e:	2b01      	cmp	r3, #1
 8030380:	d107      	bne.n	8030392 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8030382:	687b      	ldr	r3, [r7, #4]
 8030384:	2201      	movs	r2, #1
 8030386:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803038a:	6878      	ldr	r0, [r7, #4]
 803038c:	f000 f940 	bl	8030610 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8030390:	e013      	b.n	80303ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8030392:	683b      	ldr	r3, [r7, #0]
 8030394:	885b      	ldrh	r3, [r3, #2]
 8030396:	2b02      	cmp	r3, #2
 8030398:	d10b      	bne.n	80303b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803039a:	683b      	ldr	r3, [r7, #0]
 803039c:	889b      	ldrh	r3, [r3, #4]
 803039e:	0a1b      	lsrs	r3, r3, #8
 80303a0:	b29b      	uxth	r3, r3
 80303a2:	b2da      	uxtb	r2, r3
 80303a4:	687b      	ldr	r3, [r7, #4]
 80303a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80303aa:	6878      	ldr	r0, [r7, #4]
 80303ac:	f000 f930 	bl	8030610 <USBD_CtlSendStatus>
}
 80303b0:	e003      	b.n	80303ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80303b2:	6839      	ldr	r1, [r7, #0]
 80303b4:	6878      	ldr	r0, [r7, #4]
 80303b6:	f000 f860 	bl	803047a <USBD_CtlError>
}
 80303ba:	bf00      	nop
 80303bc:	3708      	adds	r7, #8
 80303be:	46bd      	mov	sp, r7
 80303c0:	bd80      	pop	{r7, pc}

080303c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80303c2:	b580      	push	{r7, lr}
 80303c4:	b082      	sub	sp, #8
 80303c6:	af00      	add	r7, sp, #0
 80303c8:	6078      	str	r0, [r7, #4]
 80303ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80303cc:	687b      	ldr	r3, [r7, #4]
 80303ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80303d2:	b2db      	uxtb	r3, r3
 80303d4:	3b01      	subs	r3, #1
 80303d6:	2b02      	cmp	r3, #2
 80303d8:	d80b      	bhi.n	80303f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80303da:	683b      	ldr	r3, [r7, #0]
 80303dc:	885b      	ldrh	r3, [r3, #2]
 80303de:	2b01      	cmp	r3, #1
 80303e0:	d10c      	bne.n	80303fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80303e2:	687b      	ldr	r3, [r7, #4]
 80303e4:	2200      	movs	r2, #0
 80303e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80303ea:	6878      	ldr	r0, [r7, #4]
 80303ec:	f000 f910 	bl	8030610 <USBD_CtlSendStatus>
      }
      break;
 80303f0:	e004      	b.n	80303fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80303f2:	6839      	ldr	r1, [r7, #0]
 80303f4:	6878      	ldr	r0, [r7, #4]
 80303f6:	f000 f840 	bl	803047a <USBD_CtlError>
      break;
 80303fa:	e000      	b.n	80303fe <USBD_ClrFeature+0x3c>
      break;
 80303fc:	bf00      	nop
  }
}
 80303fe:	bf00      	nop
 8030400:	3708      	adds	r7, #8
 8030402:	46bd      	mov	sp, r7
 8030404:	bd80      	pop	{r7, pc}

08030406 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8030406:	b580      	push	{r7, lr}
 8030408:	b084      	sub	sp, #16
 803040a:	af00      	add	r7, sp, #0
 803040c:	6078      	str	r0, [r7, #4]
 803040e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8030410:	683b      	ldr	r3, [r7, #0]
 8030412:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8030414:	68fb      	ldr	r3, [r7, #12]
 8030416:	781a      	ldrb	r2, [r3, #0]
 8030418:	687b      	ldr	r3, [r7, #4]
 803041a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 803041c:	68fb      	ldr	r3, [r7, #12]
 803041e:	3301      	adds	r3, #1
 8030420:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8030422:	68fb      	ldr	r3, [r7, #12]
 8030424:	781a      	ldrb	r2, [r3, #0]
 8030426:	687b      	ldr	r3, [r7, #4]
 8030428:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803042a:	68fb      	ldr	r3, [r7, #12]
 803042c:	3301      	adds	r3, #1
 803042e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8030430:	68f8      	ldr	r0, [r7, #12]
 8030432:	f7ff fa41 	bl	802f8b8 <SWAPBYTE>
 8030436:	4603      	mov	r3, r0
 8030438:	461a      	mov	r2, r3
 803043a:	687b      	ldr	r3, [r7, #4]
 803043c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803043e:	68fb      	ldr	r3, [r7, #12]
 8030440:	3301      	adds	r3, #1
 8030442:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8030444:	68fb      	ldr	r3, [r7, #12]
 8030446:	3301      	adds	r3, #1
 8030448:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803044a:	68f8      	ldr	r0, [r7, #12]
 803044c:	f7ff fa34 	bl	802f8b8 <SWAPBYTE>
 8030450:	4603      	mov	r3, r0
 8030452:	461a      	mov	r2, r3
 8030454:	687b      	ldr	r3, [r7, #4]
 8030456:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8030458:	68fb      	ldr	r3, [r7, #12]
 803045a:	3301      	adds	r3, #1
 803045c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803045e:	68fb      	ldr	r3, [r7, #12]
 8030460:	3301      	adds	r3, #1
 8030462:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8030464:	68f8      	ldr	r0, [r7, #12]
 8030466:	f7ff fa27 	bl	802f8b8 <SWAPBYTE>
 803046a:	4603      	mov	r3, r0
 803046c:	461a      	mov	r2, r3
 803046e:	687b      	ldr	r3, [r7, #4]
 8030470:	80da      	strh	r2, [r3, #6]
}
 8030472:	bf00      	nop
 8030474:	3710      	adds	r7, #16
 8030476:	46bd      	mov	sp, r7
 8030478:	bd80      	pop	{r7, pc}

0803047a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803047a:	b580      	push	{r7, lr}
 803047c:	b082      	sub	sp, #8
 803047e:	af00      	add	r7, sp, #0
 8030480:	6078      	str	r0, [r7, #4]
 8030482:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8030484:	2180      	movs	r1, #128	; 0x80
 8030486:	6878      	ldr	r0, [r7, #4]
 8030488:	f000 ff42 	bl	8031310 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803048c:	2100      	movs	r1, #0
 803048e:	6878      	ldr	r0, [r7, #4]
 8030490:	f000 ff3e 	bl	8031310 <USBD_LL_StallEP>
}
 8030494:	bf00      	nop
 8030496:	3708      	adds	r7, #8
 8030498:	46bd      	mov	sp, r7
 803049a:	bd80      	pop	{r7, pc}

0803049c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803049c:	b580      	push	{r7, lr}
 803049e:	b086      	sub	sp, #24
 80304a0:	af00      	add	r7, sp, #0
 80304a2:	60f8      	str	r0, [r7, #12]
 80304a4:	60b9      	str	r1, [r7, #8]
 80304a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80304a8:	2300      	movs	r3, #0
 80304aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80304ac:	68fb      	ldr	r3, [r7, #12]
 80304ae:	2b00      	cmp	r3, #0
 80304b0:	d036      	beq.n	8030520 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80304b2:	68fb      	ldr	r3, [r7, #12]
 80304b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80304b6:	6938      	ldr	r0, [r7, #16]
 80304b8:	f000 f836 	bl	8030528 <USBD_GetLen>
 80304bc:	4603      	mov	r3, r0
 80304be:	3301      	adds	r3, #1
 80304c0:	b29b      	uxth	r3, r3
 80304c2:	005b      	lsls	r3, r3, #1
 80304c4:	b29a      	uxth	r2, r3
 80304c6:	687b      	ldr	r3, [r7, #4]
 80304c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80304ca:	7dfb      	ldrb	r3, [r7, #23]
 80304cc:	68ba      	ldr	r2, [r7, #8]
 80304ce:	4413      	add	r3, r2
 80304d0:	687a      	ldr	r2, [r7, #4]
 80304d2:	7812      	ldrb	r2, [r2, #0]
 80304d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80304d6:	7dfb      	ldrb	r3, [r7, #23]
 80304d8:	3301      	adds	r3, #1
 80304da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80304dc:	7dfb      	ldrb	r3, [r7, #23]
 80304de:	68ba      	ldr	r2, [r7, #8]
 80304e0:	4413      	add	r3, r2
 80304e2:	2203      	movs	r2, #3
 80304e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80304e6:	7dfb      	ldrb	r3, [r7, #23]
 80304e8:	3301      	adds	r3, #1
 80304ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80304ec:	e013      	b.n	8030516 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80304ee:	7dfb      	ldrb	r3, [r7, #23]
 80304f0:	68ba      	ldr	r2, [r7, #8]
 80304f2:	4413      	add	r3, r2
 80304f4:	693a      	ldr	r2, [r7, #16]
 80304f6:	7812      	ldrb	r2, [r2, #0]
 80304f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80304fa:	693b      	ldr	r3, [r7, #16]
 80304fc:	3301      	adds	r3, #1
 80304fe:	613b      	str	r3, [r7, #16]
    idx++;
 8030500:	7dfb      	ldrb	r3, [r7, #23]
 8030502:	3301      	adds	r3, #1
 8030504:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8030506:	7dfb      	ldrb	r3, [r7, #23]
 8030508:	68ba      	ldr	r2, [r7, #8]
 803050a:	4413      	add	r3, r2
 803050c:	2200      	movs	r2, #0
 803050e:	701a      	strb	r2, [r3, #0]
    idx++;
 8030510:	7dfb      	ldrb	r3, [r7, #23]
 8030512:	3301      	adds	r3, #1
 8030514:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8030516:	693b      	ldr	r3, [r7, #16]
 8030518:	781b      	ldrb	r3, [r3, #0]
 803051a:	2b00      	cmp	r3, #0
 803051c:	d1e7      	bne.n	80304ee <USBD_GetString+0x52>
 803051e:	e000      	b.n	8030522 <USBD_GetString+0x86>
    return;
 8030520:	bf00      	nop
  }
}
 8030522:	3718      	adds	r7, #24
 8030524:	46bd      	mov	sp, r7
 8030526:	bd80      	pop	{r7, pc}

08030528 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8030528:	b480      	push	{r7}
 803052a:	b085      	sub	sp, #20
 803052c:	af00      	add	r7, sp, #0
 803052e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8030530:	2300      	movs	r3, #0
 8030532:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8030534:	687b      	ldr	r3, [r7, #4]
 8030536:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8030538:	e005      	b.n	8030546 <USBD_GetLen+0x1e>
  {
    len++;
 803053a:	7bfb      	ldrb	r3, [r7, #15]
 803053c:	3301      	adds	r3, #1
 803053e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8030540:	68bb      	ldr	r3, [r7, #8]
 8030542:	3301      	adds	r3, #1
 8030544:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8030546:	68bb      	ldr	r3, [r7, #8]
 8030548:	781b      	ldrb	r3, [r3, #0]
 803054a:	2b00      	cmp	r3, #0
 803054c:	d1f5      	bne.n	803053a <USBD_GetLen+0x12>
  }

  return len;
 803054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8030550:	4618      	mov	r0, r3
 8030552:	3714      	adds	r7, #20
 8030554:	46bd      	mov	sp, r7
 8030556:	f85d 7b04 	ldr.w	r7, [sp], #4
 803055a:	4770      	bx	lr

0803055c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803055c:	b580      	push	{r7, lr}
 803055e:	b084      	sub	sp, #16
 8030560:	af00      	add	r7, sp, #0
 8030562:	60f8      	str	r0, [r7, #12]
 8030564:	60b9      	str	r1, [r7, #8]
 8030566:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8030568:	68fb      	ldr	r3, [r7, #12]
 803056a:	2202      	movs	r2, #2
 803056c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8030570:	68fb      	ldr	r3, [r7, #12]
 8030572:	687a      	ldr	r2, [r7, #4]
 8030574:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8030576:	68fb      	ldr	r3, [r7, #12]
 8030578:	687a      	ldr	r2, [r7, #4]
 803057a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803057c:	687b      	ldr	r3, [r7, #4]
 803057e:	68ba      	ldr	r2, [r7, #8]
 8030580:	2100      	movs	r1, #0
 8030582:	68f8      	ldr	r0, [r7, #12]
 8030584:	f000 ff4d 	bl	8031422 <USBD_LL_Transmit>

  return USBD_OK;
 8030588:	2300      	movs	r3, #0
}
 803058a:	4618      	mov	r0, r3
 803058c:	3710      	adds	r7, #16
 803058e:	46bd      	mov	sp, r7
 8030590:	bd80      	pop	{r7, pc}

08030592 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8030592:	b580      	push	{r7, lr}
 8030594:	b084      	sub	sp, #16
 8030596:	af00      	add	r7, sp, #0
 8030598:	60f8      	str	r0, [r7, #12]
 803059a:	60b9      	str	r1, [r7, #8]
 803059c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803059e:	687b      	ldr	r3, [r7, #4]
 80305a0:	68ba      	ldr	r2, [r7, #8]
 80305a2:	2100      	movs	r1, #0
 80305a4:	68f8      	ldr	r0, [r7, #12]
 80305a6:	f000 ff3c 	bl	8031422 <USBD_LL_Transmit>

  return USBD_OK;
 80305aa:	2300      	movs	r3, #0
}
 80305ac:	4618      	mov	r0, r3
 80305ae:	3710      	adds	r7, #16
 80305b0:	46bd      	mov	sp, r7
 80305b2:	bd80      	pop	{r7, pc}

080305b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80305b4:	b580      	push	{r7, lr}
 80305b6:	b084      	sub	sp, #16
 80305b8:	af00      	add	r7, sp, #0
 80305ba:	60f8      	str	r0, [r7, #12]
 80305bc:	60b9      	str	r1, [r7, #8]
 80305be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80305c0:	68fb      	ldr	r3, [r7, #12]
 80305c2:	2203      	movs	r2, #3
 80305c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80305c8:	68fb      	ldr	r3, [r7, #12]
 80305ca:	687a      	ldr	r2, [r7, #4]
 80305cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80305d0:	68fb      	ldr	r3, [r7, #12]
 80305d2:	687a      	ldr	r2, [r7, #4]
 80305d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80305d8:	687b      	ldr	r3, [r7, #4]
 80305da:	68ba      	ldr	r2, [r7, #8]
 80305dc:	2100      	movs	r1, #0
 80305de:	68f8      	ldr	r0, [r7, #12]
 80305e0:	f000 ff40 	bl	8031464 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80305e4:	2300      	movs	r3, #0
}
 80305e6:	4618      	mov	r0, r3
 80305e8:	3710      	adds	r7, #16
 80305ea:	46bd      	mov	sp, r7
 80305ec:	bd80      	pop	{r7, pc}

080305ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80305ee:	b580      	push	{r7, lr}
 80305f0:	b084      	sub	sp, #16
 80305f2:	af00      	add	r7, sp, #0
 80305f4:	60f8      	str	r0, [r7, #12]
 80305f6:	60b9      	str	r1, [r7, #8]
 80305f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80305fa:	687b      	ldr	r3, [r7, #4]
 80305fc:	68ba      	ldr	r2, [r7, #8]
 80305fe:	2100      	movs	r1, #0
 8030600:	68f8      	ldr	r0, [r7, #12]
 8030602:	f000 ff2f 	bl	8031464 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8030606:	2300      	movs	r3, #0
}
 8030608:	4618      	mov	r0, r3
 803060a:	3710      	adds	r7, #16
 803060c:	46bd      	mov	sp, r7
 803060e:	bd80      	pop	{r7, pc}

08030610 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8030610:	b580      	push	{r7, lr}
 8030612:	b082      	sub	sp, #8
 8030614:	af00      	add	r7, sp, #0
 8030616:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8030618:	687b      	ldr	r3, [r7, #4]
 803061a:	2204      	movs	r2, #4
 803061c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8030620:	2300      	movs	r3, #0
 8030622:	2200      	movs	r2, #0
 8030624:	2100      	movs	r1, #0
 8030626:	6878      	ldr	r0, [r7, #4]
 8030628:	f000 fefb 	bl	8031422 <USBD_LL_Transmit>

  return USBD_OK;
 803062c:	2300      	movs	r3, #0
}
 803062e:	4618      	mov	r0, r3
 8030630:	3708      	adds	r7, #8
 8030632:	46bd      	mov	sp, r7
 8030634:	bd80      	pop	{r7, pc}

08030636 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8030636:	b580      	push	{r7, lr}
 8030638:	b082      	sub	sp, #8
 803063a:	af00      	add	r7, sp, #0
 803063c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803063e:	687b      	ldr	r3, [r7, #4]
 8030640:	2205      	movs	r2, #5
 8030642:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8030646:	2300      	movs	r3, #0
 8030648:	2200      	movs	r2, #0
 803064a:	2100      	movs	r1, #0
 803064c:	6878      	ldr	r0, [r7, #4]
 803064e:	f000 ff09 	bl	8031464 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8030652:	2300      	movs	r3, #0
}
 8030654:	4618      	mov	r0, r3
 8030656:	3708      	adds	r7, #8
 8030658:	46bd      	mov	sp, r7
 803065a:	bd80      	pop	{r7, pc}

0803065c <USBD_GetRxCount>:
  * @param  pdev: device instance
  * @param  ep_addr: endpoint address
  * @retval Rx Data blength
  */
uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803065c:	b580      	push	{r7, lr}
 803065e:	b082      	sub	sp, #8
 8030660:	af00      	add	r7, sp, #0
 8030662:	6078      	str	r0, [r7, #4]
 8030664:	460b      	mov	r3, r1
 8030666:	70fb      	strb	r3, [r7, #3]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 8030668:	78fb      	ldrb	r3, [r7, #3]
 803066a:	4619      	mov	r1, r3
 803066c:	6878      	ldr	r0, [r7, #4]
 803066e:	f000 ff1a 	bl	80314a6 <USBD_LL_GetRxDataSize>
 8030672:	4603      	mov	r3, r0
}
 8030674:	4618      	mov	r0, r3
 8030676:	3708      	adds	r7, #8
 8030678:	46bd      	mov	sp, r7
 803067a:	bd80      	pop	{r7, pc}

0803067c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803067c:	b580      	push	{r7, lr}
 803067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8030680:	2201      	movs	r2, #1
 8030682:	4924      	ldr	r1, [pc, #144]	; (8030714 <MX_USB_DEVICE_Init+0x98>)
 8030684:	4824      	ldr	r0, [pc, #144]	; (8030718 <MX_USB_DEVICE_Init+0x9c>)
 8030686:	f7fe fcf7 	bl	802f078 <USBD_Init>
 803068a:	4603      	mov	r3, r0
 803068c:	2b00      	cmp	r3, #0
 803068e:	d001      	beq.n	8030694 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8030690:	f7f3 fe0e 	bl	80242b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8030694:	4921      	ldr	r1, [pc, #132]	; (803071c <MX_USB_DEVICE_Init+0xa0>)
 8030696:	4820      	ldr	r0, [pc, #128]	; (8030718 <MX_USB_DEVICE_Init+0x9c>)
 8030698:	f7fe fd1e 	bl	802f0d8 <USBD_RegisterClass>
 803069c:	4603      	mov	r3, r0
 803069e:	2b00      	cmp	r3, #0
 80306a0:	d001      	beq.n	80306a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80306a2:	f7f3 fe05 	bl	80242b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80306a6:	491e      	ldr	r1, [pc, #120]	; (8030720 <MX_USB_DEVICE_Init+0xa4>)
 80306a8:	481b      	ldr	r0, [pc, #108]	; (8030718 <MX_USB_DEVICE_Init+0x9c>)
 80306aa:	f7fe fc1b 	bl	802eee4 <USBD_CDC_RegisterInterface>
 80306ae:	4603      	mov	r3, r0
 80306b0:	2b00      	cmp	r3, #0
 80306b2:	d001      	beq.n	80306b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80306b4:	f7f3 fdfc 	bl	80242b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80306b8:	4817      	ldr	r0, [pc, #92]	; (8030718 <MX_USB_DEVICE_Init+0x9c>)
 80306ba:	f7fe fd43 	bl	802f144 <USBD_Start>
 80306be:	4603      	mov	r3, r0
 80306c0:	2b00      	cmp	r3, #0
 80306c2:	d001      	beq.n	80306c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80306c4:	f7f3 fdf4 	bl	80242b0 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80306c8:	2200      	movs	r2, #0
 80306ca:	4916      	ldr	r1, [pc, #88]	; (8030724 <MX_USB_DEVICE_Init+0xa8>)
 80306cc:	4816      	ldr	r0, [pc, #88]	; (8030728 <MX_USB_DEVICE_Init+0xac>)
 80306ce:	f7fe fcd3 	bl	802f078 <USBD_Init>
 80306d2:	4603      	mov	r3, r0
 80306d4:	2b00      	cmp	r3, #0
 80306d6:	d001      	beq.n	80306dc <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 80306d8:	f7f3 fdea 	bl	80242b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80306dc:	490f      	ldr	r1, [pc, #60]	; (803071c <MX_USB_DEVICE_Init+0xa0>)
 80306de:	4812      	ldr	r0, [pc, #72]	; (8030728 <MX_USB_DEVICE_Init+0xac>)
 80306e0:	f7fe fcfa 	bl	802f0d8 <USBD_RegisterClass>
 80306e4:	4603      	mov	r3, r0
 80306e6:	2b00      	cmp	r3, #0
 80306e8:	d001      	beq.n	80306ee <MX_USB_DEVICE_Init+0x72>
  {
    Error_Handler();
 80306ea:	f7f3 fde1 	bl	80242b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80306ee:	490f      	ldr	r1, [pc, #60]	; (803072c <MX_USB_DEVICE_Init+0xb0>)
 80306f0:	480d      	ldr	r0, [pc, #52]	; (8030728 <MX_USB_DEVICE_Init+0xac>)
 80306f2:	f7fe fbf7 	bl	802eee4 <USBD_CDC_RegisterInterface>
 80306f6:	4603      	mov	r3, r0
 80306f8:	2b00      	cmp	r3, #0
 80306fa:	d001      	beq.n	8030700 <MX_USB_DEVICE_Init+0x84>
  {
    Error_Handler();
 80306fc:	f7f3 fdd8 	bl	80242b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8030700:	4809      	ldr	r0, [pc, #36]	; (8030728 <MX_USB_DEVICE_Init+0xac>)
 8030702:	f7fe fd1f 	bl	802f144 <USBD_Start>
 8030706:	4603      	mov	r3, r0
 8030708:	2b00      	cmp	r3, #0
 803070a:	d001      	beq.n	8030710 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 803070c:	f7f3 fdd0 	bl	80242b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8030710:	bf00      	nop
 8030712:	bd80      	pop	{r7, pc}
 8030714:	20000228 	.word	0x20000228
 8030718:	20005878 	.word	0x20005878
 803071c:	20000150 	.word	0x20000150
 8030720:	200001e4 	.word	0x200001e4
 8030724:	200001f8 	.word	0x200001f8
 8030728:	20005b54 	.word	0x20005b54
 803072c:	200001d0 	.word	0x200001d0

08030730 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8030730:	b580      	push	{r7, lr}
 8030732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8030734:	2200      	movs	r2, #0
 8030736:	4905      	ldr	r1, [pc, #20]	; (803074c <CDC_Init_FS+0x1c>)
 8030738:	4805      	ldr	r0, [pc, #20]	; (8030750 <CDC_Init_FS+0x20>)
 803073a:	f7fe fbed 	bl	802ef18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803073e:	4905      	ldr	r1, [pc, #20]	; (8030754 <CDC_Init_FS+0x24>)
 8030740:	4803      	ldr	r0, [pc, #12]	; (8030750 <CDC_Init_FS+0x20>)
 8030742:	f7fe fc09 	bl	802ef58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8030746:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8030748:	4618      	mov	r0, r3
 803074a:	bd80      	pop	{r7, pc}
 803074c:	20006630 	.word	0x20006630
 8030750:	20005b54 	.word	0x20005b54
 8030754:	20005e30 	.word	0x20005e30

08030758 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8030758:	b480      	push	{r7}
 803075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803075c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803075e:	4618      	mov	r0, r3
 8030760:	46bd      	mov	sp, r7
 8030762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030766:	4770      	bx	lr

08030768 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8030768:	b480      	push	{r7}
 803076a:	b083      	sub	sp, #12
 803076c:	af00      	add	r7, sp, #0
 803076e:	4603      	mov	r3, r0
 8030770:	6039      	str	r1, [r7, #0]
 8030772:	71fb      	strb	r3, [r7, #7]
 8030774:	4613      	mov	r3, r2
 8030776:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8030778:	79fb      	ldrb	r3, [r7, #7]
 803077a:	2b23      	cmp	r3, #35	; 0x23
 803077c:	d84a      	bhi.n	8030814 <CDC_Control_FS+0xac>
 803077e:	a201      	add	r2, pc, #4	; (adr r2, 8030784 <CDC_Control_FS+0x1c>)
 8030780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030784:	08030815 	.word	0x08030815
 8030788:	08030815 	.word	0x08030815
 803078c:	08030815 	.word	0x08030815
 8030790:	08030815 	.word	0x08030815
 8030794:	08030815 	.word	0x08030815
 8030798:	08030815 	.word	0x08030815
 803079c:	08030815 	.word	0x08030815
 80307a0:	08030815 	.word	0x08030815
 80307a4:	08030815 	.word	0x08030815
 80307a8:	08030815 	.word	0x08030815
 80307ac:	08030815 	.word	0x08030815
 80307b0:	08030815 	.word	0x08030815
 80307b4:	08030815 	.word	0x08030815
 80307b8:	08030815 	.word	0x08030815
 80307bc:	08030815 	.word	0x08030815
 80307c0:	08030815 	.word	0x08030815
 80307c4:	08030815 	.word	0x08030815
 80307c8:	08030815 	.word	0x08030815
 80307cc:	08030815 	.word	0x08030815
 80307d0:	08030815 	.word	0x08030815
 80307d4:	08030815 	.word	0x08030815
 80307d8:	08030815 	.word	0x08030815
 80307dc:	08030815 	.word	0x08030815
 80307e0:	08030815 	.word	0x08030815
 80307e4:	08030815 	.word	0x08030815
 80307e8:	08030815 	.word	0x08030815
 80307ec:	08030815 	.word	0x08030815
 80307f0:	08030815 	.word	0x08030815
 80307f4:	08030815 	.word	0x08030815
 80307f8:	08030815 	.word	0x08030815
 80307fc:	08030815 	.word	0x08030815
 8030800:	08030815 	.word	0x08030815
 8030804:	08030815 	.word	0x08030815
 8030808:	08030815 	.word	0x08030815
 803080c:	08030815 	.word	0x08030815
 8030810:	08030815 	.word	0x08030815
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8030814:	bf00      	nop
  }

  return (USBD_OK);
 8030816:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8030818:	4618      	mov	r0, r3
 803081a:	370c      	adds	r7, #12
 803081c:	46bd      	mov	sp, r7
 803081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030822:	4770      	bx	lr

08030824 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8030824:	b580      	push	{r7, lr}
 8030826:	b082      	sub	sp, #8
 8030828:	af00      	add	r7, sp, #0
 803082a:	6078      	str	r0, [r7, #4]
 803082c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  EP3_OUT_Callback(Buf, *Len);
 803082e:	683b      	ldr	r3, [r7, #0]
 8030830:	681b      	ldr	r3, [r3, #0]
 8030832:	4619      	mov	r1, r3
 8030834:	6878      	ldr	r0, [r7, #4]
 8030836:	f7f2 fc47 	bl	80230c8 <EP3_OUT_Callback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803083a:	6879      	ldr	r1, [r7, #4]
 803083c:	4805      	ldr	r0, [pc, #20]	; (8030854 <CDC_Receive_FS+0x30>)
 803083e:	f7fe fb8b 	bl	802ef58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8030842:	4804      	ldr	r0, [pc, #16]	; (8030854 <CDC_Receive_FS+0x30>)
 8030844:	f7fe fbe4 	bl	802f010 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8030848:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803084a:	4618      	mov	r0, r3
 803084c:	3708      	adds	r7, #8
 803084e:	46bd      	mov	sp, r7
 8030850:	bd80      	pop	{r7, pc}
 8030852:	bf00      	nop
 8030854:	20005b54 	.word	0x20005b54

08030858 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8030858:	b580      	push	{r7, lr}
 803085a:	b084      	sub	sp, #16
 803085c:	af00      	add	r7, sp, #0
 803085e:	6078      	str	r0, [r7, #4]
 8030860:	460b      	mov	r3, r1
 8030862:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8030864:	2300      	movs	r3, #0
 8030866:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  EP1_IN_Callback();
 8030868:	f7f2 fb88 	bl	8022f7c <EP1_IN_Callback>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 803086c:	4b0d      	ldr	r3, [pc, #52]	; (80308a4 <CDC_Transmit_FS+0x4c>)
 803086e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8030872:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8030874:	68bb      	ldr	r3, [r7, #8]
 8030876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8030878:	2b00      	cmp	r3, #0
 803087a:	d001      	beq.n	8030880 <CDC_Transmit_FS+0x28>
    return USBD_BUSY;
 803087c:	2301      	movs	r3, #1
 803087e:	e00d      	b.n	803089c <CDC_Transmit_FS+0x44>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8030880:	887b      	ldrh	r3, [r7, #2]
 8030882:	461a      	mov	r2, r3
 8030884:	6879      	ldr	r1, [r7, #4]
 8030886:	4807      	ldr	r0, [pc, #28]	; (80308a4 <CDC_Transmit_FS+0x4c>)
 8030888:	f7fe fb46 	bl	802ef18 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 803088c:	4805      	ldr	r0, [pc, #20]	; (80308a4 <CDC_Transmit_FS+0x4c>)
 803088e:	f7fe fb7f 	bl	802ef90 <USBD_CDC_TransmitPacket>
 8030892:	4603      	mov	r3, r0
 8030894:	73fb      	strb	r3, [r7, #15]
  EP1_IN_Callback();
 8030896:	f7f2 fb71 	bl	8022f7c <EP1_IN_Callback>
  /* USER CODE END 7 */
  return result;
 803089a:	7bfb      	ldrb	r3, [r7, #15]
}
 803089c:	4618      	mov	r0, r3
 803089e:	3710      	adds	r7, #16
 80308a0:	46bd      	mov	sp, r7
 80308a2:	bd80      	pop	{r7, pc}
 80308a4:	20005b54 	.word	0x20005b54

080308a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80308a8:	b480      	push	{r7}
 80308aa:	b087      	sub	sp, #28
 80308ac:	af00      	add	r7, sp, #0
 80308ae:	60f8      	str	r0, [r7, #12]
 80308b0:	60b9      	str	r1, [r7, #8]
 80308b2:	4613      	mov	r3, r2
 80308b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80308b6:	2300      	movs	r3, #0
 80308b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80308ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80308be:	4618      	mov	r0, r3
 80308c0:	371c      	adds	r7, #28
 80308c2:	46bd      	mov	sp, r7
 80308c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80308c8:	4770      	bx	lr
	...

080308cc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80308cc:	b580      	push	{r7, lr}
 80308ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80308d0:	2200      	movs	r2, #0
 80308d2:	4905      	ldr	r1, [pc, #20]	; (80308e8 <CDC_Init_HS+0x1c>)
 80308d4:	4805      	ldr	r0, [pc, #20]	; (80308ec <CDC_Init_HS+0x20>)
 80308d6:	f7fe fb1f 	bl	802ef18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80308da:	4905      	ldr	r1, [pc, #20]	; (80308f0 <CDC_Init_HS+0x24>)
 80308dc:	4803      	ldr	r0, [pc, #12]	; (80308ec <CDC_Init_HS+0x20>)
 80308de:	f7fe fb3b 	bl	802ef58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80308e2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80308e4:	4618      	mov	r0, r3
 80308e6:	bd80      	pop	{r7, pc}
 80308e8:	20007630 	.word	0x20007630
 80308ec:	20005878 	.word	0x20005878
 80308f0:	20006e30 	.word	0x20006e30

080308f4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80308f4:	b480      	push	{r7}
 80308f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80308f8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80308fa:	4618      	mov	r0, r3
 80308fc:	46bd      	mov	sp, r7
 80308fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030902:	4770      	bx	lr

08030904 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8030904:	b480      	push	{r7}
 8030906:	b083      	sub	sp, #12
 8030908:	af00      	add	r7, sp, #0
 803090a:	4603      	mov	r3, r0
 803090c:	6039      	str	r1, [r7, #0]
 803090e:	71fb      	strb	r3, [r7, #7]
 8030910:	4613      	mov	r3, r2
 8030912:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8030914:	79fb      	ldrb	r3, [r7, #7]
 8030916:	2b23      	cmp	r3, #35	; 0x23
 8030918:	d84a      	bhi.n	80309b0 <CDC_Control_HS+0xac>
 803091a:	a201      	add	r2, pc, #4	; (adr r2, 8030920 <CDC_Control_HS+0x1c>)
 803091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030920:	080309b1 	.word	0x080309b1
 8030924:	080309b1 	.word	0x080309b1
 8030928:	080309b1 	.word	0x080309b1
 803092c:	080309b1 	.word	0x080309b1
 8030930:	080309b1 	.word	0x080309b1
 8030934:	080309b1 	.word	0x080309b1
 8030938:	080309b1 	.word	0x080309b1
 803093c:	080309b1 	.word	0x080309b1
 8030940:	080309b1 	.word	0x080309b1
 8030944:	080309b1 	.word	0x080309b1
 8030948:	080309b1 	.word	0x080309b1
 803094c:	080309b1 	.word	0x080309b1
 8030950:	080309b1 	.word	0x080309b1
 8030954:	080309b1 	.word	0x080309b1
 8030958:	080309b1 	.word	0x080309b1
 803095c:	080309b1 	.word	0x080309b1
 8030960:	080309b1 	.word	0x080309b1
 8030964:	080309b1 	.word	0x080309b1
 8030968:	080309b1 	.word	0x080309b1
 803096c:	080309b1 	.word	0x080309b1
 8030970:	080309b1 	.word	0x080309b1
 8030974:	080309b1 	.word	0x080309b1
 8030978:	080309b1 	.word	0x080309b1
 803097c:	080309b1 	.word	0x080309b1
 8030980:	080309b1 	.word	0x080309b1
 8030984:	080309b1 	.word	0x080309b1
 8030988:	080309b1 	.word	0x080309b1
 803098c:	080309b1 	.word	0x080309b1
 8030990:	080309b1 	.word	0x080309b1
 8030994:	080309b1 	.word	0x080309b1
 8030998:	080309b1 	.word	0x080309b1
 803099c:	080309b1 	.word	0x080309b1
 80309a0:	080309b1 	.word	0x080309b1
 80309a4:	080309b1 	.word	0x080309b1
 80309a8:	080309b1 	.word	0x080309b1
 80309ac:	080309b1 	.word	0x080309b1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80309b0:	bf00      	nop
  }

  return (USBD_OK);
 80309b2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80309b4:	4618      	mov	r0, r3
 80309b6:	370c      	adds	r7, #12
 80309b8:	46bd      	mov	sp, r7
 80309ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80309be:	4770      	bx	lr

080309c0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80309c0:	b580      	push	{r7, lr}
 80309c2:	b082      	sub	sp, #8
 80309c4:	af00      	add	r7, sp, #0
 80309c6:	6078      	str	r0, [r7, #4]
 80309c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  EP3_OUT_Callback(Buf, *Len);
 80309ca:	683b      	ldr	r3, [r7, #0]
 80309cc:	681b      	ldr	r3, [r3, #0]
 80309ce:	4619      	mov	r1, r3
 80309d0:	6878      	ldr	r0, [r7, #4]
 80309d2:	f7f2 fb79 	bl	80230c8 <EP3_OUT_Callback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80309d6:	6879      	ldr	r1, [r7, #4]
 80309d8:	4805      	ldr	r0, [pc, #20]	; (80309f0 <CDC_Receive_HS+0x30>)
 80309da:	f7fe fabd 	bl	802ef58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80309de:	4804      	ldr	r0, [pc, #16]	; (80309f0 <CDC_Receive_HS+0x30>)
 80309e0:	f7fe fb16 	bl	802f010 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80309e4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80309e6:	4618      	mov	r0, r3
 80309e8:	3708      	adds	r7, #8
 80309ea:	46bd      	mov	sp, r7
 80309ec:	bd80      	pop	{r7, pc}
 80309ee:	bf00      	nop
 80309f0:	20005878 	.word	0x20005878

080309f4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80309f4:	b480      	push	{r7}
 80309f6:	b087      	sub	sp, #28
 80309f8:	af00      	add	r7, sp, #0
 80309fa:	60f8      	str	r0, [r7, #12]
 80309fc:	60b9      	str	r1, [r7, #8]
 80309fe:	4613      	mov	r3, r2
 8030a00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8030a02:	2300      	movs	r3, #0
 8030a04:	75fb      	strb	r3, [r7, #23]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  /* USER CODE END 14 */
  return result;
 8030a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8030a0a:	4618      	mov	r0, r3
 8030a0c:	371c      	adds	r7, #28
 8030a0e:	46bd      	mov	sp, r7
 8030a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a14:	4770      	bx	lr
	...

08030a18 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030a18:	b480      	push	{r7}
 8030a1a:	b083      	sub	sp, #12
 8030a1c:	af00      	add	r7, sp, #0
 8030a1e:	4603      	mov	r3, r0
 8030a20:	6039      	str	r1, [r7, #0]
 8030a22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8030a24:	683b      	ldr	r3, [r7, #0]
 8030a26:	2212      	movs	r2, #18
 8030a28:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8030a2a:	4b03      	ldr	r3, [pc, #12]	; (8030a38 <USBD_HS_DeviceDescriptor+0x20>)
}
 8030a2c:	4618      	mov	r0, r3
 8030a2e:	370c      	adds	r7, #12
 8030a30:	46bd      	mov	sp, r7
 8030a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a36:	4770      	bx	lr
 8030a38:	20000244 	.word	0x20000244

08030a3c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030a3c:	b480      	push	{r7}
 8030a3e:	b083      	sub	sp, #12
 8030a40:	af00      	add	r7, sp, #0
 8030a42:	4603      	mov	r3, r0
 8030a44:	6039      	str	r1, [r7, #0]
 8030a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8030a48:	683b      	ldr	r3, [r7, #0]
 8030a4a:	2204      	movs	r2, #4
 8030a4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8030a4e:	4b03      	ldr	r3, [pc, #12]	; (8030a5c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8030a50:	4618      	mov	r0, r3
 8030a52:	370c      	adds	r7, #12
 8030a54:	46bd      	mov	sp, r7
 8030a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a5a:	4770      	bx	lr
 8030a5c:	20000258 	.word	0x20000258

08030a60 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030a60:	b580      	push	{r7, lr}
 8030a62:	b082      	sub	sp, #8
 8030a64:	af00      	add	r7, sp, #0
 8030a66:	4603      	mov	r3, r0
 8030a68:	6039      	str	r1, [r7, #0]
 8030a6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030a6c:	79fb      	ldrb	r3, [r7, #7]
 8030a6e:	2b00      	cmp	r3, #0
 8030a70:	d105      	bne.n	8030a7e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8030a72:	683a      	ldr	r2, [r7, #0]
 8030a74:	4907      	ldr	r1, [pc, #28]	; (8030a94 <USBD_HS_ProductStrDescriptor+0x34>)
 8030a76:	4808      	ldr	r0, [pc, #32]	; (8030a98 <USBD_HS_ProductStrDescriptor+0x38>)
 8030a78:	f7ff fd10 	bl	803049c <USBD_GetString>
 8030a7c:	e004      	b.n	8030a88 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8030a7e:	683a      	ldr	r2, [r7, #0]
 8030a80:	4904      	ldr	r1, [pc, #16]	; (8030a94 <USBD_HS_ProductStrDescriptor+0x34>)
 8030a82:	4805      	ldr	r0, [pc, #20]	; (8030a98 <USBD_HS_ProductStrDescriptor+0x38>)
 8030a84:	f7ff fd0a 	bl	803049c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030a88:	4b02      	ldr	r3, [pc, #8]	; (8030a94 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8030a8a:	4618      	mov	r0, r3
 8030a8c:	3708      	adds	r7, #8
 8030a8e:	46bd      	mov	sp, r7
 8030a90:	bd80      	pop	{r7, pc}
 8030a92:	bf00      	nop
 8030a94:	20007e30 	.word	0x20007e30
 8030a98:	08036da4 	.word	0x08036da4

08030a9c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030a9c:	b580      	push	{r7, lr}
 8030a9e:	b082      	sub	sp, #8
 8030aa0:	af00      	add	r7, sp, #0
 8030aa2:	4603      	mov	r3, r0
 8030aa4:	6039      	str	r1, [r7, #0]
 8030aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8030aa8:	683a      	ldr	r2, [r7, #0]
 8030aaa:	4904      	ldr	r1, [pc, #16]	; (8030abc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8030aac:	4804      	ldr	r0, [pc, #16]	; (8030ac0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8030aae:	f7ff fcf5 	bl	803049c <USBD_GetString>
  return USBD_StrDesc;
 8030ab2:	4b02      	ldr	r3, [pc, #8]	; (8030abc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8030ab4:	4618      	mov	r0, r3
 8030ab6:	3708      	adds	r7, #8
 8030ab8:	46bd      	mov	sp, r7
 8030aba:	bd80      	pop	{r7, pc}
 8030abc:	20007e30 	.word	0x20007e30
 8030ac0:	08036dbc 	.word	0x08036dbc

08030ac4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030ac4:	b580      	push	{r7, lr}
 8030ac6:	b082      	sub	sp, #8
 8030ac8:	af00      	add	r7, sp, #0
 8030aca:	4603      	mov	r3, r0
 8030acc:	6039      	str	r1, [r7, #0]
 8030ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8030ad0:	683b      	ldr	r3, [r7, #0]
 8030ad2:	221a      	movs	r2, #26
 8030ad4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8030ad6:	f000 f8e7 	bl	8030ca8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8030ada:	4b02      	ldr	r3, [pc, #8]	; (8030ae4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8030adc:	4618      	mov	r0, r3
 8030ade:	3708      	adds	r7, #8
 8030ae0:	46bd      	mov	sp, r7
 8030ae2:	bd80      	pop	{r7, pc}
 8030ae4:	2000025c 	.word	0x2000025c

08030ae8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030ae8:	b580      	push	{r7, lr}
 8030aea:	b082      	sub	sp, #8
 8030aec:	af00      	add	r7, sp, #0
 8030aee:	4603      	mov	r3, r0
 8030af0:	6039      	str	r1, [r7, #0]
 8030af2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8030af4:	79fb      	ldrb	r3, [r7, #7]
 8030af6:	2b00      	cmp	r3, #0
 8030af8:	d105      	bne.n	8030b06 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8030afa:	683a      	ldr	r2, [r7, #0]
 8030afc:	4907      	ldr	r1, [pc, #28]	; (8030b1c <USBD_HS_ConfigStrDescriptor+0x34>)
 8030afe:	4808      	ldr	r0, [pc, #32]	; (8030b20 <USBD_HS_ConfigStrDescriptor+0x38>)
 8030b00:	f7ff fccc 	bl	803049c <USBD_GetString>
 8030b04:	e004      	b.n	8030b10 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8030b06:	683a      	ldr	r2, [r7, #0]
 8030b08:	4904      	ldr	r1, [pc, #16]	; (8030b1c <USBD_HS_ConfigStrDescriptor+0x34>)
 8030b0a:	4805      	ldr	r0, [pc, #20]	; (8030b20 <USBD_HS_ConfigStrDescriptor+0x38>)
 8030b0c:	f7ff fcc6 	bl	803049c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030b10:	4b02      	ldr	r3, [pc, #8]	; (8030b1c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8030b12:	4618      	mov	r0, r3
 8030b14:	3708      	adds	r7, #8
 8030b16:	46bd      	mov	sp, r7
 8030b18:	bd80      	pop	{r7, pc}
 8030b1a:	bf00      	nop
 8030b1c:	20007e30 	.word	0x20007e30
 8030b20:	08036dd0 	.word	0x08036dd0

08030b24 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030b24:	b580      	push	{r7, lr}
 8030b26:	b082      	sub	sp, #8
 8030b28:	af00      	add	r7, sp, #0
 8030b2a:	4603      	mov	r3, r0
 8030b2c:	6039      	str	r1, [r7, #0]
 8030b2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030b30:	79fb      	ldrb	r3, [r7, #7]
 8030b32:	2b00      	cmp	r3, #0
 8030b34:	d105      	bne.n	8030b42 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8030b36:	683a      	ldr	r2, [r7, #0]
 8030b38:	4907      	ldr	r1, [pc, #28]	; (8030b58 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8030b3a:	4808      	ldr	r0, [pc, #32]	; (8030b5c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8030b3c:	f7ff fcae 	bl	803049c <USBD_GetString>
 8030b40:	e004      	b.n	8030b4c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8030b42:	683a      	ldr	r2, [r7, #0]
 8030b44:	4904      	ldr	r1, [pc, #16]	; (8030b58 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8030b46:	4805      	ldr	r0, [pc, #20]	; (8030b5c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8030b48:	f7ff fca8 	bl	803049c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030b4c:	4b02      	ldr	r3, [pc, #8]	; (8030b58 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8030b4e:	4618      	mov	r0, r3
 8030b50:	3708      	adds	r7, #8
 8030b52:	46bd      	mov	sp, r7
 8030b54:	bd80      	pop	{r7, pc}
 8030b56:	bf00      	nop
 8030b58:	20007e30 	.word	0x20007e30
 8030b5c:	08036ddc 	.word	0x08036ddc

08030b60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030b60:	b480      	push	{r7}
 8030b62:	b083      	sub	sp, #12
 8030b64:	af00      	add	r7, sp, #0
 8030b66:	4603      	mov	r3, r0
 8030b68:	6039      	str	r1, [r7, #0]
 8030b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8030b6c:	683b      	ldr	r3, [r7, #0]
 8030b6e:	2212      	movs	r2, #18
 8030b70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8030b72:	4b03      	ldr	r3, [pc, #12]	; (8030b80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8030b74:	4618      	mov	r0, r3
 8030b76:	370c      	adds	r7, #12
 8030b78:	46bd      	mov	sp, r7
 8030b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b7e:	4770      	bx	lr
 8030b80:	20000214 	.word	0x20000214

08030b84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030b84:	b480      	push	{r7}
 8030b86:	b083      	sub	sp, #12
 8030b88:	af00      	add	r7, sp, #0
 8030b8a:	4603      	mov	r3, r0
 8030b8c:	6039      	str	r1, [r7, #0]
 8030b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8030b90:	683b      	ldr	r3, [r7, #0]
 8030b92:	2204      	movs	r2, #4
 8030b94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8030b96:	4b03      	ldr	r3, [pc, #12]	; (8030ba4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8030b98:	4618      	mov	r0, r3
 8030b9a:	370c      	adds	r7, #12
 8030b9c:	46bd      	mov	sp, r7
 8030b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030ba2:	4770      	bx	lr
 8030ba4:	20000258 	.word	0x20000258

08030ba8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030ba8:	b580      	push	{r7, lr}
 8030baa:	b082      	sub	sp, #8
 8030bac:	af00      	add	r7, sp, #0
 8030bae:	4603      	mov	r3, r0
 8030bb0:	6039      	str	r1, [r7, #0]
 8030bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030bb4:	79fb      	ldrb	r3, [r7, #7]
 8030bb6:	2b00      	cmp	r3, #0
 8030bb8:	d105      	bne.n	8030bc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8030bba:	683a      	ldr	r2, [r7, #0]
 8030bbc:	4907      	ldr	r1, [pc, #28]	; (8030bdc <USBD_FS_ProductStrDescriptor+0x34>)
 8030bbe:	4808      	ldr	r0, [pc, #32]	; (8030be0 <USBD_FS_ProductStrDescriptor+0x38>)
 8030bc0:	f7ff fc6c 	bl	803049c <USBD_GetString>
 8030bc4:	e004      	b.n	8030bd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8030bc6:	683a      	ldr	r2, [r7, #0]
 8030bc8:	4904      	ldr	r1, [pc, #16]	; (8030bdc <USBD_FS_ProductStrDescriptor+0x34>)
 8030bca:	4805      	ldr	r0, [pc, #20]	; (8030be0 <USBD_FS_ProductStrDescriptor+0x38>)
 8030bcc:	f7ff fc66 	bl	803049c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030bd0:	4b02      	ldr	r3, [pc, #8]	; (8030bdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8030bd2:	4618      	mov	r0, r3
 8030bd4:	3708      	adds	r7, #8
 8030bd6:	46bd      	mov	sp, r7
 8030bd8:	bd80      	pop	{r7, pc}
 8030bda:	bf00      	nop
 8030bdc:	20007e30 	.word	0x20007e30
 8030be0:	08036da4 	.word	0x08036da4

08030be4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030be4:	b580      	push	{r7, lr}
 8030be6:	b082      	sub	sp, #8
 8030be8:	af00      	add	r7, sp, #0
 8030bea:	4603      	mov	r3, r0
 8030bec:	6039      	str	r1, [r7, #0]
 8030bee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8030bf0:	683a      	ldr	r2, [r7, #0]
 8030bf2:	4904      	ldr	r1, [pc, #16]	; (8030c04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8030bf4:	4804      	ldr	r0, [pc, #16]	; (8030c08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8030bf6:	f7ff fc51 	bl	803049c <USBD_GetString>
  return USBD_StrDesc;
 8030bfa:	4b02      	ldr	r3, [pc, #8]	; (8030c04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8030bfc:	4618      	mov	r0, r3
 8030bfe:	3708      	adds	r7, #8
 8030c00:	46bd      	mov	sp, r7
 8030c02:	bd80      	pop	{r7, pc}
 8030c04:	20007e30 	.word	0x20007e30
 8030c08:	08036dbc 	.word	0x08036dbc

08030c0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030c0c:	b580      	push	{r7, lr}
 8030c0e:	b082      	sub	sp, #8
 8030c10:	af00      	add	r7, sp, #0
 8030c12:	4603      	mov	r3, r0
 8030c14:	6039      	str	r1, [r7, #0]
 8030c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8030c18:	683b      	ldr	r3, [r7, #0]
 8030c1a:	221a      	movs	r2, #26
 8030c1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8030c1e:	f000 f843 	bl	8030ca8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8030c22:	4b02      	ldr	r3, [pc, #8]	; (8030c2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8030c24:	4618      	mov	r0, r3
 8030c26:	3708      	adds	r7, #8
 8030c28:	46bd      	mov	sp, r7
 8030c2a:	bd80      	pop	{r7, pc}
 8030c2c:	2000025c 	.word	0x2000025c

08030c30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030c30:	b580      	push	{r7, lr}
 8030c32:	b082      	sub	sp, #8
 8030c34:	af00      	add	r7, sp, #0
 8030c36:	4603      	mov	r3, r0
 8030c38:	6039      	str	r1, [r7, #0]
 8030c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8030c3c:	79fb      	ldrb	r3, [r7, #7]
 8030c3e:	2b00      	cmp	r3, #0
 8030c40:	d105      	bne.n	8030c4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8030c42:	683a      	ldr	r2, [r7, #0]
 8030c44:	4907      	ldr	r1, [pc, #28]	; (8030c64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8030c46:	4808      	ldr	r0, [pc, #32]	; (8030c68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8030c48:	f7ff fc28 	bl	803049c <USBD_GetString>
 8030c4c:	e004      	b.n	8030c58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8030c4e:	683a      	ldr	r2, [r7, #0]
 8030c50:	4904      	ldr	r1, [pc, #16]	; (8030c64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8030c52:	4805      	ldr	r0, [pc, #20]	; (8030c68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8030c54:	f7ff fc22 	bl	803049c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030c58:	4b02      	ldr	r3, [pc, #8]	; (8030c64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8030c5a:	4618      	mov	r0, r3
 8030c5c:	3708      	adds	r7, #8
 8030c5e:	46bd      	mov	sp, r7
 8030c60:	bd80      	pop	{r7, pc}
 8030c62:	bf00      	nop
 8030c64:	20007e30 	.word	0x20007e30
 8030c68:	08036dd0 	.word	0x08036dd0

08030c6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030c6c:	b580      	push	{r7, lr}
 8030c6e:	b082      	sub	sp, #8
 8030c70:	af00      	add	r7, sp, #0
 8030c72:	4603      	mov	r3, r0
 8030c74:	6039      	str	r1, [r7, #0]
 8030c76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030c78:	79fb      	ldrb	r3, [r7, #7]
 8030c7a:	2b00      	cmp	r3, #0
 8030c7c:	d105      	bne.n	8030c8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8030c7e:	683a      	ldr	r2, [r7, #0]
 8030c80:	4907      	ldr	r1, [pc, #28]	; (8030ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8030c82:	4808      	ldr	r0, [pc, #32]	; (8030ca4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8030c84:	f7ff fc0a 	bl	803049c <USBD_GetString>
 8030c88:	e004      	b.n	8030c94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8030c8a:	683a      	ldr	r2, [r7, #0]
 8030c8c:	4904      	ldr	r1, [pc, #16]	; (8030ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8030c8e:	4805      	ldr	r0, [pc, #20]	; (8030ca4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8030c90:	f7ff fc04 	bl	803049c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030c94:	4b02      	ldr	r3, [pc, #8]	; (8030ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8030c96:	4618      	mov	r0, r3
 8030c98:	3708      	adds	r7, #8
 8030c9a:	46bd      	mov	sp, r7
 8030c9c:	bd80      	pop	{r7, pc}
 8030c9e:	bf00      	nop
 8030ca0:	20007e30 	.word	0x20007e30
 8030ca4:	08036ddc 	.word	0x08036ddc

08030ca8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8030ca8:	b580      	push	{r7, lr}
 8030caa:	b084      	sub	sp, #16
 8030cac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8030cae:	68fa      	ldr	r2, [r7, #12]
 8030cb0:	68bb      	ldr	r3, [r7, #8]
 8030cb2:	4413      	add	r3, r2
 8030cb4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8030cb6:	68fb      	ldr	r3, [r7, #12]
 8030cb8:	2b00      	cmp	r3, #0
 8030cba:	d009      	beq.n	8030cd0 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8030cbc:	2208      	movs	r2, #8
 8030cbe:	4906      	ldr	r1, [pc, #24]	; (8030cd8 <Get_SerialNum+0x30>)
 8030cc0:	68f8      	ldr	r0, [r7, #12]
 8030cc2:	f000 f80d 	bl	8030ce0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8030cc6:	2204      	movs	r2, #4
 8030cc8:	4904      	ldr	r1, [pc, #16]	; (8030cdc <Get_SerialNum+0x34>)
 8030cca:	6878      	ldr	r0, [r7, #4]
 8030ccc:	f000 f808 	bl	8030ce0 <IntToUnicode>
  }
}
 8030cd0:	bf00      	nop
 8030cd2:	3710      	adds	r7, #16
 8030cd4:	46bd      	mov	sp, r7
 8030cd6:	bd80      	pop	{r7, pc}
 8030cd8:	2000025e 	.word	0x2000025e
 8030cdc:	2000026e 	.word	0x2000026e

08030ce0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8030ce0:	b480      	push	{r7}
 8030ce2:	b087      	sub	sp, #28
 8030ce4:	af00      	add	r7, sp, #0
 8030ce6:	60f8      	str	r0, [r7, #12]
 8030ce8:	60b9      	str	r1, [r7, #8]
 8030cea:	4613      	mov	r3, r2
 8030cec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8030cee:	2300      	movs	r3, #0
 8030cf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8030cf2:	2300      	movs	r3, #0
 8030cf4:	75fb      	strb	r3, [r7, #23]
 8030cf6:	e027      	b.n	8030d48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8030cf8:	68fb      	ldr	r3, [r7, #12]
 8030cfa:	0f1b      	lsrs	r3, r3, #28
 8030cfc:	2b09      	cmp	r3, #9
 8030cfe:	d80b      	bhi.n	8030d18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8030d00:	68fb      	ldr	r3, [r7, #12]
 8030d02:	0f1b      	lsrs	r3, r3, #28
 8030d04:	b2da      	uxtb	r2, r3
 8030d06:	7dfb      	ldrb	r3, [r7, #23]
 8030d08:	005b      	lsls	r3, r3, #1
 8030d0a:	4619      	mov	r1, r3
 8030d0c:	68bb      	ldr	r3, [r7, #8]
 8030d0e:	440b      	add	r3, r1
 8030d10:	3230      	adds	r2, #48	; 0x30
 8030d12:	b2d2      	uxtb	r2, r2
 8030d14:	701a      	strb	r2, [r3, #0]
 8030d16:	e00a      	b.n	8030d2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8030d18:	68fb      	ldr	r3, [r7, #12]
 8030d1a:	0f1b      	lsrs	r3, r3, #28
 8030d1c:	b2da      	uxtb	r2, r3
 8030d1e:	7dfb      	ldrb	r3, [r7, #23]
 8030d20:	005b      	lsls	r3, r3, #1
 8030d22:	4619      	mov	r1, r3
 8030d24:	68bb      	ldr	r3, [r7, #8]
 8030d26:	440b      	add	r3, r1
 8030d28:	3237      	adds	r2, #55	; 0x37
 8030d2a:	b2d2      	uxtb	r2, r2
 8030d2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8030d2e:	68fb      	ldr	r3, [r7, #12]
 8030d30:	011b      	lsls	r3, r3, #4
 8030d32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8030d34:	7dfb      	ldrb	r3, [r7, #23]
 8030d36:	005b      	lsls	r3, r3, #1
 8030d38:	3301      	adds	r3, #1
 8030d3a:	68ba      	ldr	r2, [r7, #8]
 8030d3c:	4413      	add	r3, r2
 8030d3e:	2200      	movs	r2, #0
 8030d40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8030d42:	7dfb      	ldrb	r3, [r7, #23]
 8030d44:	3301      	adds	r3, #1
 8030d46:	75fb      	strb	r3, [r7, #23]
 8030d48:	7dfa      	ldrb	r2, [r7, #23]
 8030d4a:	79fb      	ldrb	r3, [r7, #7]
 8030d4c:	429a      	cmp	r2, r3
 8030d4e:	d3d3      	bcc.n	8030cf8 <IntToUnicode+0x18>
  }
}
 8030d50:	bf00      	nop
 8030d52:	bf00      	nop
 8030d54:	371c      	adds	r7, #28
 8030d56:	46bd      	mov	sp, r7
 8030d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030d5c:	4770      	bx	lr
	...

08030d60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8030d60:	b580      	push	{r7, lr}
 8030d62:	b08e      	sub	sp, #56	; 0x38
 8030d64:	af00      	add	r7, sp, #0
 8030d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8030d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030d6c:	2200      	movs	r2, #0
 8030d6e:	601a      	str	r2, [r3, #0]
 8030d70:	605a      	str	r2, [r3, #4]
 8030d72:	609a      	str	r2, [r3, #8]
 8030d74:	60da      	str	r2, [r3, #12]
 8030d76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8030d78:	687b      	ldr	r3, [r7, #4]
 8030d7a:	681b      	ldr	r3, [r3, #0]
 8030d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8030d80:	d13b      	bne.n	8030dfa <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8030d82:	2300      	movs	r3, #0
 8030d84:	623b      	str	r3, [r7, #32]
 8030d86:	4b69      	ldr	r3, [pc, #420]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030d8a:	4a68      	ldr	r2, [pc, #416]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030d8c:	f043 0301 	orr.w	r3, r3, #1
 8030d90:	6313      	str	r3, [r2, #48]	; 0x30
 8030d92:	4b66      	ldr	r3, [pc, #408]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030d96:	f003 0301 	and.w	r3, r3, #1
 8030d9a:	623b      	str	r3, [r7, #32]
 8030d9c:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8030d9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8030da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8030da4:	2302      	movs	r3, #2
 8030da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030da8:	2300      	movs	r3, #0
 8030daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030dac:	2303      	movs	r3, #3
 8030dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8030db0:	230a      	movs	r3, #10
 8030db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8030db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030db8:	4619      	mov	r1, r3
 8030dba:	485d      	ldr	r0, [pc, #372]	; (8030f30 <HAL_PCD_MspInit+0x1d0>)
 8030dbc:	f7f7 fd3c 	bl	8028838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8030dc0:	4b5a      	ldr	r3, [pc, #360]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030dc4:	4a59      	ldr	r2, [pc, #356]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030dca:	6353      	str	r3, [r2, #52]	; 0x34
 8030dcc:	2300      	movs	r3, #0
 8030dce:	61fb      	str	r3, [r7, #28]
 8030dd0:	4b56      	ldr	r3, [pc, #344]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030dd4:	4a55      	ldr	r2, [pc, #340]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8030dda:	6453      	str	r3, [r2, #68]	; 0x44
 8030ddc:	4b53      	ldr	r3, [pc, #332]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8030de4:	61fb      	str	r3, [r7, #28]
 8030de6:	69fb      	ldr	r3, [r7, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8030de8:	2200      	movs	r2, #0
 8030dea:	2100      	movs	r1, #0
 8030dec:	2043      	movs	r0, #67	; 0x43
 8030dee:	f7f7 f8c0 	bl	8027f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8030df2:	2043      	movs	r0, #67	; 0x43
 8030df4:	f7f7 f8d9 	bl	8027faa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8030df8:	e094      	b.n	8030f24 <HAL_PCD_MspInit+0x1c4>
  else if(pcdHandle->Instance==USB_OTG_HS)
 8030dfa:	687b      	ldr	r3, [r7, #4]
 8030dfc:	681b      	ldr	r3, [r3, #0]
 8030dfe:	4a4d      	ldr	r2, [pc, #308]	; (8030f34 <HAL_PCD_MspInit+0x1d4>)
 8030e00:	4293      	cmp	r3, r2
 8030e02:	f040 808f 	bne.w	8030f24 <HAL_PCD_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8030e06:	2300      	movs	r3, #0
 8030e08:	61bb      	str	r3, [r7, #24]
 8030e0a:	4b48      	ldr	r3, [pc, #288]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e0e:	4a47      	ldr	r2, [pc, #284]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030e10:	f043 0304 	orr.w	r3, r3, #4
 8030e14:	6313      	str	r3, [r2, #48]	; 0x30
 8030e16:	4b45      	ldr	r3, [pc, #276]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e1a:	f003 0304 	and.w	r3, r3, #4
 8030e1e:	61bb      	str	r3, [r7, #24]
 8030e20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8030e22:	2300      	movs	r3, #0
 8030e24:	617b      	str	r3, [r7, #20]
 8030e26:	4b41      	ldr	r3, [pc, #260]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e2a:	4a40      	ldr	r2, [pc, #256]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030e2c:	f043 0301 	orr.w	r3, r3, #1
 8030e30:	6313      	str	r3, [r2, #48]	; 0x30
 8030e32:	4b3e      	ldr	r3, [pc, #248]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e36:	f003 0301 	and.w	r3, r3, #1
 8030e3a:	617b      	str	r3, [r7, #20]
 8030e3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8030e3e:	2300      	movs	r3, #0
 8030e40:	613b      	str	r3, [r7, #16]
 8030e42:	4b3a      	ldr	r3, [pc, #232]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e46:	4a39      	ldr	r2, [pc, #228]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030e48:	f043 0302 	orr.w	r3, r3, #2
 8030e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8030e4e:	4b37      	ldr	r3, [pc, #220]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e52:	f003 0302 	and.w	r3, r3, #2
 8030e56:	613b      	str	r3, [r7, #16]
 8030e58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8030e5a:	230d      	movs	r3, #13
 8030e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8030e5e:	2302      	movs	r3, #2
 8030e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030e62:	2300      	movs	r3, #0
 8030e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030e66:	2303      	movs	r3, #3
 8030e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8030e6a:	230a      	movs	r3, #10
 8030e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8030e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030e72:	4619      	mov	r1, r3
 8030e74:	4830      	ldr	r0, [pc, #192]	; (8030f38 <HAL_PCD_MspInit+0x1d8>)
 8030e76:	f7f7 fcdf 	bl	8028838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8030e7a:	2328      	movs	r3, #40	; 0x28
 8030e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8030e7e:	2302      	movs	r3, #2
 8030e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030e82:	2300      	movs	r3, #0
 8030e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030e86:	2303      	movs	r3, #3
 8030e88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8030e8a:	230a      	movs	r3, #10
 8030e8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8030e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030e92:	4619      	mov	r1, r3
 8030e94:	4826      	ldr	r0, [pc, #152]	; (8030f30 <HAL_PCD_MspInit+0x1d0>)
 8030e96:	f7f7 fccf 	bl	8028838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8030e9a:	f643 4323 	movw	r3, #15395	; 0x3c23
 8030e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8030ea0:	2302      	movs	r3, #2
 8030ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030ea4:	2300      	movs	r3, #0
 8030ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030ea8:	2303      	movs	r3, #3
 8030eaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8030eac:	230a      	movs	r3, #10
 8030eae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8030eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030eb4:	4619      	mov	r1, r3
 8030eb6:	4821      	ldr	r0, [pc, #132]	; (8030f3c <HAL_PCD_MspInit+0x1dc>)
 8030eb8:	f7f7 fcbe 	bl	8028838 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8030ebc:	2300      	movs	r3, #0
 8030ebe:	60fb      	str	r3, [r7, #12]
 8030ec0:	4b1a      	ldr	r3, [pc, #104]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030ec4:	4a19      	ldr	r2, [pc, #100]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030ec6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8030eca:	6313      	str	r3, [r2, #48]	; 0x30
 8030ecc:	4b17      	ldr	r3, [pc, #92]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8030ed4:	60fb      	str	r3, [r7, #12]
 8030ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8030ed8:	2300      	movs	r3, #0
 8030eda:	60bb      	str	r3, [r7, #8]
 8030edc:	4b13      	ldr	r3, [pc, #76]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030ee0:	4a12      	ldr	r2, [pc, #72]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030ee2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8030ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8030ee8:	4b10      	ldr	r3, [pc, #64]	; (8030f2c <HAL_PCD_MspInit+0x1cc>)
 8030eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030eec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8030ef0:	60bb      	str	r3, [r7, #8]
 8030ef2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 8030ef4:	2200      	movs	r2, #0
 8030ef6:	2100      	movs	r1, #0
 8030ef8:	204a      	movs	r0, #74	; 0x4a
 8030efa:	f7f7 f83a 	bl	8027f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8030efe:	204a      	movs	r0, #74	; 0x4a
 8030f00:	f7f7 f853 	bl	8027faa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8030f04:	2200      	movs	r2, #0
 8030f06:	2100      	movs	r1, #0
 8030f08:	204b      	movs	r0, #75	; 0x4b
 8030f0a:	f7f7 f832 	bl	8027f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8030f0e:	204b      	movs	r0, #75	; 0x4b
 8030f10:	f7f7 f84b 	bl	8027faa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8030f14:	2200      	movs	r2, #0
 8030f16:	2100      	movs	r1, #0
 8030f18:	204d      	movs	r0, #77	; 0x4d
 8030f1a:	f7f7 f82a 	bl	8027f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8030f1e:	204d      	movs	r0, #77	; 0x4d
 8030f20:	f7f7 f843 	bl	8027faa <HAL_NVIC_EnableIRQ>
}
 8030f24:	bf00      	nop
 8030f26:	3738      	adds	r7, #56	; 0x38
 8030f28:	46bd      	mov	sp, r7
 8030f2a:	bd80      	pop	{r7, pc}
 8030f2c:	40023800 	.word	0x40023800
 8030f30:	40020000 	.word	0x40020000
 8030f34:	40040000 	.word	0x40040000
 8030f38:	40020800 	.word	0x40020800
 8030f3c:	40020400 	.word	0x40020400

08030f40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030f40:	b580      	push	{r7, lr}
 8030f42:	b082      	sub	sp, #8
 8030f44:	af00      	add	r7, sp, #0
 8030f46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8030f48:	687b      	ldr	r3, [r7, #4]
 8030f4a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8030f4e:	687b      	ldr	r3, [r7, #4]
 8030f50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030f54:	4619      	mov	r1, r3
 8030f56:	4610      	mov	r0, r2
 8030f58:	f7fe f941 	bl	802f1de <USBD_LL_SetupStage>
}
 8030f5c:	bf00      	nop
 8030f5e:	3708      	adds	r7, #8
 8030f60:	46bd      	mov	sp, r7
 8030f62:	bd80      	pop	{r7, pc}

08030f64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030f64:	b580      	push	{r7, lr}
 8030f66:	b082      	sub	sp, #8
 8030f68:	af00      	add	r7, sp, #0
 8030f6a:	6078      	str	r0, [r7, #4]
 8030f6c:	460b      	mov	r3, r1
 8030f6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8030f70:	687b      	ldr	r3, [r7, #4]
 8030f72:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8030f76:	78fa      	ldrb	r2, [r7, #3]
 8030f78:	6879      	ldr	r1, [r7, #4]
 8030f7a:	4613      	mov	r3, r2
 8030f7c:	00db      	lsls	r3, r3, #3
 8030f7e:	4413      	add	r3, r2
 8030f80:	009b      	lsls	r3, r3, #2
 8030f82:	440b      	add	r3, r1
 8030f84:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8030f88:	681a      	ldr	r2, [r3, #0]
 8030f8a:	78fb      	ldrb	r3, [r7, #3]
 8030f8c:	4619      	mov	r1, r3
 8030f8e:	f7fe f97b 	bl	802f288 <USBD_LL_DataOutStage>
}
 8030f92:	bf00      	nop
 8030f94:	3708      	adds	r7, #8
 8030f96:	46bd      	mov	sp, r7
 8030f98:	bd80      	pop	{r7, pc}

08030f9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030f9a:	b580      	push	{r7, lr}
 8030f9c:	b082      	sub	sp, #8
 8030f9e:	af00      	add	r7, sp, #0
 8030fa0:	6078      	str	r0, [r7, #4]
 8030fa2:	460b      	mov	r3, r1
 8030fa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8030fa6:	687b      	ldr	r3, [r7, #4]
 8030fa8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8030fac:	78fa      	ldrb	r2, [r7, #3]
 8030fae:	6879      	ldr	r1, [r7, #4]
 8030fb0:	4613      	mov	r3, r2
 8030fb2:	00db      	lsls	r3, r3, #3
 8030fb4:	4413      	add	r3, r2
 8030fb6:	009b      	lsls	r3, r3, #2
 8030fb8:	440b      	add	r3, r1
 8030fba:	334c      	adds	r3, #76	; 0x4c
 8030fbc:	681a      	ldr	r2, [r3, #0]
 8030fbe:	78fb      	ldrb	r3, [r7, #3]
 8030fc0:	4619      	mov	r1, r3
 8030fc2:	f7fe fa14 	bl	802f3ee <USBD_LL_DataInStage>
}
 8030fc6:	bf00      	nop
 8030fc8:	3708      	adds	r7, #8
 8030fca:	46bd      	mov	sp, r7
 8030fcc:	bd80      	pop	{r7, pc}

08030fce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030fce:	b580      	push	{r7, lr}
 8030fd0:	b082      	sub	sp, #8
 8030fd2:	af00      	add	r7, sp, #0
 8030fd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8030fd6:	687b      	ldr	r3, [r7, #4]
 8030fd8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8030fdc:	4618      	mov	r0, r3
 8030fde:	f7fe fb48 	bl	802f672 <USBD_LL_SOF>
}
 8030fe2:	bf00      	nop
 8030fe4:	3708      	adds	r7, #8
 8030fe6:	46bd      	mov	sp, r7
 8030fe8:	bd80      	pop	{r7, pc}

08030fea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030fea:	b580      	push	{r7, lr}
 8030fec:	b084      	sub	sp, #16
 8030fee:	af00      	add	r7, sp, #0
 8030ff0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8030ff2:	2301      	movs	r3, #1
 8030ff4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8030ff6:	687b      	ldr	r3, [r7, #4]
 8030ff8:	68db      	ldr	r3, [r3, #12]
 8030ffa:	2b00      	cmp	r3, #0
 8030ffc:	d102      	bne.n	8031004 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8030ffe:	2300      	movs	r3, #0
 8031000:	73fb      	strb	r3, [r7, #15]
 8031002:	e008      	b.n	8031016 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8031004:	687b      	ldr	r3, [r7, #4]
 8031006:	68db      	ldr	r3, [r3, #12]
 8031008:	2b02      	cmp	r3, #2
 803100a:	d102      	bne.n	8031012 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 803100c:	2301      	movs	r3, #1
 803100e:	73fb      	strb	r3, [r7, #15]
 8031010:	e001      	b.n	8031016 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8031012:	f7f3 f94d 	bl	80242b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8031016:	687b      	ldr	r3, [r7, #4]
 8031018:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803101c:	7bfa      	ldrb	r2, [r7, #15]
 803101e:	4611      	mov	r1, r2
 8031020:	4618      	mov	r0, r3
 8031022:	f7fe fae8 	bl	802f5f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8031026:	687b      	ldr	r3, [r7, #4]
 8031028:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803102c:	4618      	mov	r0, r3
 803102e:	f7fe fa90 	bl	802f552 <USBD_LL_Reset>
}
 8031032:	bf00      	nop
 8031034:	3710      	adds	r7, #16
 8031036:	46bd      	mov	sp, r7
 8031038:	bd80      	pop	{r7, pc}
	...

0803103c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803103c:	b580      	push	{r7, lr}
 803103e:	b082      	sub	sp, #8
 8031040:	af00      	add	r7, sp, #0
 8031042:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8031044:	687b      	ldr	r3, [r7, #4]
 8031046:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803104a:	4618      	mov	r0, r3
 803104c:	f7fe fae3 	bl	802f616 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8031050:	687b      	ldr	r3, [r7, #4]
 8031052:	681b      	ldr	r3, [r3, #0]
 8031054:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8031058:	681b      	ldr	r3, [r3, #0]
 803105a:	687a      	ldr	r2, [r7, #4]
 803105c:	6812      	ldr	r2, [r2, #0]
 803105e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8031062:	f043 0301 	orr.w	r3, r3, #1
 8031066:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8031068:	687b      	ldr	r3, [r7, #4]
 803106a:	6a1b      	ldr	r3, [r3, #32]
 803106c:	2b00      	cmp	r3, #0
 803106e:	d005      	beq.n	803107c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8031070:	4b04      	ldr	r3, [pc, #16]	; (8031084 <HAL_PCD_SuspendCallback+0x48>)
 8031072:	691b      	ldr	r3, [r3, #16]
 8031074:	4a03      	ldr	r2, [pc, #12]	; (8031084 <HAL_PCD_SuspendCallback+0x48>)
 8031076:	f043 0306 	orr.w	r3, r3, #6
 803107a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 803107c:	bf00      	nop
 803107e:	3708      	adds	r7, #8
 8031080:	46bd      	mov	sp, r7
 8031082:	bd80      	pop	{r7, pc}
 8031084:	e000ed00 	.word	0xe000ed00

08031088 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031088:	b580      	push	{r7, lr}
 803108a:	b082      	sub	sp, #8
 803108c:	af00      	add	r7, sp, #0
 803108e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8031090:	687b      	ldr	r3, [r7, #4]
 8031092:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8031096:	4618      	mov	r0, r3
 8031098:	f7fe fad3 	bl	802f642 <USBD_LL_Resume>
}
 803109c:	bf00      	nop
 803109e:	3708      	adds	r7, #8
 80310a0:	46bd      	mov	sp, r7
 80310a2:	bd80      	pop	{r7, pc}

080310a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80310a4:	b580      	push	{r7, lr}
 80310a6:	b082      	sub	sp, #8
 80310a8:	af00      	add	r7, sp, #0
 80310aa:	6078      	str	r0, [r7, #4]
 80310ac:	460b      	mov	r3, r1
 80310ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80310b0:	687b      	ldr	r3, [r7, #4]
 80310b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80310b6:	78fa      	ldrb	r2, [r7, #3]
 80310b8:	4611      	mov	r1, r2
 80310ba:	4618      	mov	r0, r3
 80310bc:	f7fe fb2b 	bl	802f716 <USBD_LL_IsoOUTIncomplete>
}
 80310c0:	bf00      	nop
 80310c2:	3708      	adds	r7, #8
 80310c4:	46bd      	mov	sp, r7
 80310c6:	bd80      	pop	{r7, pc}

080310c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80310c8:	b580      	push	{r7, lr}
 80310ca:	b082      	sub	sp, #8
 80310cc:	af00      	add	r7, sp, #0
 80310ce:	6078      	str	r0, [r7, #4]
 80310d0:	460b      	mov	r3, r1
 80310d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80310d4:	687b      	ldr	r3, [r7, #4]
 80310d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80310da:	78fa      	ldrb	r2, [r7, #3]
 80310dc:	4611      	mov	r1, r2
 80310de:	4618      	mov	r0, r3
 80310e0:	f7fe fae7 	bl	802f6b2 <USBD_LL_IsoINIncomplete>
}
 80310e4:	bf00      	nop
 80310e6:	3708      	adds	r7, #8
 80310e8:	46bd      	mov	sp, r7
 80310ea:	bd80      	pop	{r7, pc}

080310ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80310ec:	b580      	push	{r7, lr}
 80310ee:	b082      	sub	sp, #8
 80310f0:	af00      	add	r7, sp, #0
 80310f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80310f4:	687b      	ldr	r3, [r7, #4]
 80310f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80310fa:	4618      	mov	r0, r3
 80310fc:	f7fe fb3d 	bl	802f77a <USBD_LL_DevConnected>
}
 8031100:	bf00      	nop
 8031102:	3708      	adds	r7, #8
 8031104:	46bd      	mov	sp, r7
 8031106:	bd80      	pop	{r7, pc}

08031108 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031108:	b580      	push	{r7, lr}
 803110a:	b082      	sub	sp, #8
 803110c:	af00      	add	r7, sp, #0
 803110e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8031110:	687b      	ldr	r3, [r7, #4]
 8031112:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8031116:	4618      	mov	r0, r3
 8031118:	f7fe fb3a 	bl	802f790 <USBD_LL_DevDisconnected>
}
 803111c:	bf00      	nop
 803111e:	3708      	adds	r7, #8
 8031120:	46bd      	mov	sp, r7
 8031122:	bd80      	pop	{r7, pc}

08031124 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8031124:	b580      	push	{r7, lr}
 8031126:	b082      	sub	sp, #8
 8031128:	af00      	add	r7, sp, #0
 803112a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 803112c:	687b      	ldr	r3, [r7, #4]
 803112e:	781b      	ldrb	r3, [r3, #0]
 8031130:	2b00      	cmp	r3, #0
 8031132:	d13c      	bne.n	80311ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8031134:	4a43      	ldr	r2, [pc, #268]	; (8031244 <USBD_LL_Init+0x120>)
 8031136:	687b      	ldr	r3, [r7, #4]
 8031138:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 803113c:	687b      	ldr	r3, [r7, #4]
 803113e:	4a41      	ldr	r2, [pc, #260]	; (8031244 <USBD_LL_Init+0x120>)
 8031140:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8031144:	4b3f      	ldr	r3, [pc, #252]	; (8031244 <USBD_LL_Init+0x120>)
 8031146:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 803114a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 803114c:	4b3d      	ldr	r3, [pc, #244]	; (8031244 <USBD_LL_Init+0x120>)
 803114e:	2204      	movs	r2, #4
 8031150:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8031152:	4b3c      	ldr	r3, [pc, #240]	; (8031244 <USBD_LL_Init+0x120>)
 8031154:	2202      	movs	r2, #2
 8031156:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8031158:	4b3a      	ldr	r3, [pc, #232]	; (8031244 <USBD_LL_Init+0x120>)
 803115a:	2200      	movs	r2, #0
 803115c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803115e:	4b39      	ldr	r3, [pc, #228]	; (8031244 <USBD_LL_Init+0x120>)
 8031160:	2202      	movs	r2, #2
 8031162:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8031164:	4b37      	ldr	r3, [pc, #220]	; (8031244 <USBD_LL_Init+0x120>)
 8031166:	2200      	movs	r2, #0
 8031168:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 803116a:	4b36      	ldr	r3, [pc, #216]	; (8031244 <USBD_LL_Init+0x120>)
 803116c:	2200      	movs	r2, #0
 803116e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8031170:	4b34      	ldr	r3, [pc, #208]	; (8031244 <USBD_LL_Init+0x120>)
 8031172:	2200      	movs	r2, #0
 8031174:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8031176:	4b33      	ldr	r3, [pc, #204]	; (8031244 <USBD_LL_Init+0x120>)
 8031178:	2200      	movs	r2, #0
 803117a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 803117c:	4b31      	ldr	r3, [pc, #196]	; (8031244 <USBD_LL_Init+0x120>)
 803117e:	2200      	movs	r2, #0
 8031180:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8031182:	4830      	ldr	r0, [pc, #192]	; (8031244 <USBD_LL_Init+0x120>)
 8031184:	f7f7 ff35 	bl	8028ff2 <HAL_PCD_Init>
 8031188:	4603      	mov	r3, r0
 803118a:	2b00      	cmp	r3, #0
 803118c:	d001      	beq.n	8031192 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 803118e:	f7f3 f88f 	bl	80242b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8031192:	2180      	movs	r1, #128	; 0x80
 8031194:	482b      	ldr	r0, [pc, #172]	; (8031244 <USBD_LL_Init+0x120>)
 8031196:	f7f9 f98c 	bl	802a4b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 803119a:	2240      	movs	r2, #64	; 0x40
 803119c:	2100      	movs	r1, #0
 803119e:	4829      	ldr	r0, [pc, #164]	; (8031244 <USBD_LL_Init+0x120>)
 80311a0:	f7f9 f940 	bl	802a424 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80311a4:	2280      	movs	r2, #128	; 0x80
 80311a6:	2101      	movs	r1, #1
 80311a8:	4826      	ldr	r0, [pc, #152]	; (8031244 <USBD_LL_Init+0x120>)
 80311aa:	f7f9 f93b 	bl	802a424 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 80311ae:	687b      	ldr	r3, [r7, #4]
 80311b0:	781b      	ldrb	r3, [r3, #0]
 80311b2:	2b01      	cmp	r3, #1
 80311b4:	d140      	bne.n	8031238 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80311b6:	4a24      	ldr	r2, [pc, #144]	; (8031248 <USBD_LL_Init+0x124>)
 80311b8:	687b      	ldr	r3, [r7, #4]
 80311ba:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80311be:	687b      	ldr	r3, [r7, #4]
 80311c0:	4a21      	ldr	r2, [pc, #132]	; (8031248 <USBD_LL_Init+0x124>)
 80311c2:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80311c6:	4b20      	ldr	r3, [pc, #128]	; (8031248 <USBD_LL_Init+0x124>)
 80311c8:	4a20      	ldr	r2, [pc, #128]	; (803124c <USBD_LL_Init+0x128>)
 80311ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 80311cc:	4b1e      	ldr	r3, [pc, #120]	; (8031248 <USBD_LL_Init+0x124>)
 80311ce:	2206      	movs	r2, #6
 80311d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80311d2:	4b1d      	ldr	r3, [pc, #116]	; (8031248 <USBD_LL_Init+0x124>)
 80311d4:	2200      	movs	r2, #0
 80311d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80311d8:	4b1b      	ldr	r3, [pc, #108]	; (8031248 <USBD_LL_Init+0x124>)
 80311da:	2200      	movs	r2, #0
 80311dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80311de:	4b1a      	ldr	r3, [pc, #104]	; (8031248 <USBD_LL_Init+0x124>)
 80311e0:	2201      	movs	r2, #1
 80311e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80311e4:	4b18      	ldr	r3, [pc, #96]	; (8031248 <USBD_LL_Init+0x124>)
 80311e6:	2200      	movs	r2, #0
 80311e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80311ea:	4b17      	ldr	r3, [pc, #92]	; (8031248 <USBD_LL_Init+0x124>)
 80311ec:	2200      	movs	r2, #0
 80311ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80311f0:	4b15      	ldr	r3, [pc, #84]	; (8031248 <USBD_LL_Init+0x124>)
 80311f2:	2200      	movs	r2, #0
 80311f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80311f6:	4b14      	ldr	r3, [pc, #80]	; (8031248 <USBD_LL_Init+0x124>)
 80311f8:	2200      	movs	r2, #0
 80311fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80311fc:	4b12      	ldr	r3, [pc, #72]	; (8031248 <USBD_LL_Init+0x124>)
 80311fe:	2200      	movs	r2, #0
 8031200:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8031202:	4b11      	ldr	r3, [pc, #68]	; (8031248 <USBD_LL_Init+0x124>)
 8031204:	2200      	movs	r2, #0
 8031206:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8031208:	480f      	ldr	r0, [pc, #60]	; (8031248 <USBD_LL_Init+0x124>)
 803120a:	f7f7 fef2 	bl	8028ff2 <HAL_PCD_Init>
 803120e:	4603      	mov	r3, r0
 8031210:	2b00      	cmp	r3, #0
 8031212:	d001      	beq.n	8031218 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 8031214:	f7f3 f84c 	bl	80242b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8031218:	f44f 7100 	mov.w	r1, #512	; 0x200
 803121c:	480a      	ldr	r0, [pc, #40]	; (8031248 <USBD_LL_Init+0x124>)
 803121e:	f7f9 f948 	bl	802a4b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8031222:	2280      	movs	r2, #128	; 0x80
 8031224:	2100      	movs	r1, #0
 8031226:	4808      	ldr	r0, [pc, #32]	; (8031248 <USBD_LL_Init+0x124>)
 8031228:	f7f9 f8fc 	bl	802a424 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 803122c:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8031230:	2101      	movs	r1, #1
 8031232:	4805      	ldr	r0, [pc, #20]	; (8031248 <USBD_LL_Init+0x124>)
 8031234:	f7f9 f8f6 	bl	802a424 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8031238:	2300      	movs	r3, #0
}
 803123a:	4618      	mov	r0, r3
 803123c:	3708      	adds	r7, #8
 803123e:	46bd      	mov	sp, r7
 8031240:	bd80      	pop	{r7, pc}
 8031242:	bf00      	nop
 8031244:	20008030 	.word	0x20008030
 8031248:	2000853c 	.word	0x2000853c
 803124c:	40040000 	.word	0x40040000

08031250 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8031250:	b580      	push	{r7, lr}
 8031252:	b084      	sub	sp, #16
 8031254:	af00      	add	r7, sp, #0
 8031256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031258:	2300      	movs	r3, #0
 803125a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803125c:	2300      	movs	r3, #0
 803125e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8031260:	687b      	ldr	r3, [r7, #4]
 8031262:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031266:	4618      	mov	r0, r3
 8031268:	f7f7 ffe0 	bl	802922c <HAL_PCD_Start>
 803126c:	4603      	mov	r3, r0
 803126e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031270:	7bfb      	ldrb	r3, [r7, #15]
 8031272:	4618      	mov	r0, r3
 8031274:	f000 f942 	bl	80314fc <USBD_Get_USB_Status>
 8031278:	4603      	mov	r3, r0
 803127a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803127c:	7bbb      	ldrb	r3, [r7, #14]
}
 803127e:	4618      	mov	r0, r3
 8031280:	3710      	adds	r7, #16
 8031282:	46bd      	mov	sp, r7
 8031284:	bd80      	pop	{r7, pc}

08031286 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8031286:	b580      	push	{r7, lr}
 8031288:	b084      	sub	sp, #16
 803128a:	af00      	add	r7, sp, #0
 803128c:	6078      	str	r0, [r7, #4]
 803128e:	4608      	mov	r0, r1
 8031290:	4611      	mov	r1, r2
 8031292:	461a      	mov	r2, r3
 8031294:	4603      	mov	r3, r0
 8031296:	70fb      	strb	r3, [r7, #3]
 8031298:	460b      	mov	r3, r1
 803129a:	70bb      	strb	r3, [r7, #2]
 803129c:	4613      	mov	r3, r2
 803129e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80312a0:	2300      	movs	r3, #0
 80312a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80312a4:	2300      	movs	r3, #0
 80312a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80312a8:	687b      	ldr	r3, [r7, #4]
 80312aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80312ae:	78bb      	ldrb	r3, [r7, #2]
 80312b0:	883a      	ldrh	r2, [r7, #0]
 80312b2:	78f9      	ldrb	r1, [r7, #3]
 80312b4:	f7f8 fcb1 	bl	8029c1a <HAL_PCD_EP_Open>
 80312b8:	4603      	mov	r3, r0
 80312ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80312bc:	7bfb      	ldrb	r3, [r7, #15]
 80312be:	4618      	mov	r0, r3
 80312c0:	f000 f91c 	bl	80314fc <USBD_Get_USB_Status>
 80312c4:	4603      	mov	r3, r0
 80312c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80312c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80312ca:	4618      	mov	r0, r3
 80312cc:	3710      	adds	r7, #16
 80312ce:	46bd      	mov	sp, r7
 80312d0:	bd80      	pop	{r7, pc}

080312d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80312d2:	b580      	push	{r7, lr}
 80312d4:	b084      	sub	sp, #16
 80312d6:	af00      	add	r7, sp, #0
 80312d8:	6078      	str	r0, [r7, #4]
 80312da:	460b      	mov	r3, r1
 80312dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80312de:	2300      	movs	r3, #0
 80312e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80312e2:	2300      	movs	r3, #0
 80312e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80312e6:	687b      	ldr	r3, [r7, #4]
 80312e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80312ec:	78fa      	ldrb	r2, [r7, #3]
 80312ee:	4611      	mov	r1, r2
 80312f0:	4618      	mov	r0, r3
 80312f2:	f7f8 fcfa 	bl	8029cea <HAL_PCD_EP_Close>
 80312f6:	4603      	mov	r3, r0
 80312f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80312fa:	7bfb      	ldrb	r3, [r7, #15]
 80312fc:	4618      	mov	r0, r3
 80312fe:	f000 f8fd 	bl	80314fc <USBD_Get_USB_Status>
 8031302:	4603      	mov	r3, r0
 8031304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031306:	7bbb      	ldrb	r3, [r7, #14]
}
 8031308:	4618      	mov	r0, r3
 803130a:	3710      	adds	r7, #16
 803130c:	46bd      	mov	sp, r7
 803130e:	bd80      	pop	{r7, pc}

08031310 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8031310:	b580      	push	{r7, lr}
 8031312:	b084      	sub	sp, #16
 8031314:	af00      	add	r7, sp, #0
 8031316:	6078      	str	r0, [r7, #4]
 8031318:	460b      	mov	r3, r1
 803131a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803131c:	2300      	movs	r3, #0
 803131e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031320:	2300      	movs	r3, #0
 8031322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8031324:	687b      	ldr	r3, [r7, #4]
 8031326:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803132a:	78fa      	ldrb	r2, [r7, #3]
 803132c:	4611      	mov	r1, r2
 803132e:	4618      	mov	r0, r3
 8031330:	f7f8 fdd2 	bl	8029ed8 <HAL_PCD_EP_SetStall>
 8031334:	4603      	mov	r3, r0
 8031336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031338:	7bfb      	ldrb	r3, [r7, #15]
 803133a:	4618      	mov	r0, r3
 803133c:	f000 f8de 	bl	80314fc <USBD_Get_USB_Status>
 8031340:	4603      	mov	r3, r0
 8031342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031344:	7bbb      	ldrb	r3, [r7, #14]
}
 8031346:	4618      	mov	r0, r3
 8031348:	3710      	adds	r7, #16
 803134a:	46bd      	mov	sp, r7
 803134c:	bd80      	pop	{r7, pc}

0803134e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803134e:	b580      	push	{r7, lr}
 8031350:	b084      	sub	sp, #16
 8031352:	af00      	add	r7, sp, #0
 8031354:	6078      	str	r0, [r7, #4]
 8031356:	460b      	mov	r3, r1
 8031358:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803135a:	2300      	movs	r3, #0
 803135c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803135e:	2300      	movs	r3, #0
 8031360:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8031362:	687b      	ldr	r3, [r7, #4]
 8031364:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031368:	78fa      	ldrb	r2, [r7, #3]
 803136a:	4611      	mov	r1, r2
 803136c:	4618      	mov	r0, r3
 803136e:	f7f8 fe17 	bl	8029fa0 <HAL_PCD_EP_ClrStall>
 8031372:	4603      	mov	r3, r0
 8031374:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031376:	7bfb      	ldrb	r3, [r7, #15]
 8031378:	4618      	mov	r0, r3
 803137a:	f000 f8bf 	bl	80314fc <USBD_Get_USB_Status>
 803137e:	4603      	mov	r3, r0
 8031380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031382:	7bbb      	ldrb	r3, [r7, #14]
}
 8031384:	4618      	mov	r0, r3
 8031386:	3710      	adds	r7, #16
 8031388:	46bd      	mov	sp, r7
 803138a:	bd80      	pop	{r7, pc}

0803138c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803138c:	b480      	push	{r7}
 803138e:	b085      	sub	sp, #20
 8031390:	af00      	add	r7, sp, #0
 8031392:	6078      	str	r0, [r7, #4]
 8031394:	460b      	mov	r3, r1
 8031396:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8031398:	687b      	ldr	r3, [r7, #4]
 803139a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803139e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80313a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80313a4:	2b00      	cmp	r3, #0
 80313a6:	da0b      	bge.n	80313c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80313a8:	78fb      	ldrb	r3, [r7, #3]
 80313aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80313ae:	68f9      	ldr	r1, [r7, #12]
 80313b0:	4613      	mov	r3, r2
 80313b2:	00db      	lsls	r3, r3, #3
 80313b4:	4413      	add	r3, r2
 80313b6:	009b      	lsls	r3, r3, #2
 80313b8:	440b      	add	r3, r1
 80313ba:	333e      	adds	r3, #62	; 0x3e
 80313bc:	781b      	ldrb	r3, [r3, #0]
 80313be:	e00b      	b.n	80313d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80313c0:	78fb      	ldrb	r3, [r7, #3]
 80313c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80313c6:	68f9      	ldr	r1, [r7, #12]
 80313c8:	4613      	mov	r3, r2
 80313ca:	00db      	lsls	r3, r3, #3
 80313cc:	4413      	add	r3, r2
 80313ce:	009b      	lsls	r3, r3, #2
 80313d0:	440b      	add	r3, r1
 80313d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80313d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80313d8:	4618      	mov	r0, r3
 80313da:	3714      	adds	r7, #20
 80313dc:	46bd      	mov	sp, r7
 80313de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80313e2:	4770      	bx	lr

080313e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80313e4:	b580      	push	{r7, lr}
 80313e6:	b084      	sub	sp, #16
 80313e8:	af00      	add	r7, sp, #0
 80313ea:	6078      	str	r0, [r7, #4]
 80313ec:	460b      	mov	r3, r1
 80313ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80313f0:	2300      	movs	r3, #0
 80313f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80313f4:	2300      	movs	r3, #0
 80313f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80313f8:	687b      	ldr	r3, [r7, #4]
 80313fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80313fe:	78fa      	ldrb	r2, [r7, #3]
 8031400:	4611      	mov	r1, r2
 8031402:	4618      	mov	r0, r3
 8031404:	f7f8 fbe4 	bl	8029bd0 <HAL_PCD_SetAddress>
 8031408:	4603      	mov	r3, r0
 803140a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803140c:	7bfb      	ldrb	r3, [r7, #15]
 803140e:	4618      	mov	r0, r3
 8031410:	f000 f874 	bl	80314fc <USBD_Get_USB_Status>
 8031414:	4603      	mov	r3, r0
 8031416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031418:	7bbb      	ldrb	r3, [r7, #14]
}
 803141a:	4618      	mov	r0, r3
 803141c:	3710      	adds	r7, #16
 803141e:	46bd      	mov	sp, r7
 8031420:	bd80      	pop	{r7, pc}

08031422 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8031422:	b580      	push	{r7, lr}
 8031424:	b086      	sub	sp, #24
 8031426:	af00      	add	r7, sp, #0
 8031428:	60f8      	str	r0, [r7, #12]
 803142a:	607a      	str	r2, [r7, #4]
 803142c:	603b      	str	r3, [r7, #0]
 803142e:	460b      	mov	r3, r1
 8031430:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031432:	2300      	movs	r3, #0
 8031434:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031436:	2300      	movs	r3, #0
 8031438:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 803143a:	68fb      	ldr	r3, [r7, #12]
 803143c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8031440:	7af9      	ldrb	r1, [r7, #11]
 8031442:	683b      	ldr	r3, [r7, #0]
 8031444:	687a      	ldr	r2, [r7, #4]
 8031446:	f7f8 fcfd 	bl	8029e44 <HAL_PCD_EP_Transmit>
 803144a:	4603      	mov	r3, r0
 803144c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803144e:	7dfb      	ldrb	r3, [r7, #23]
 8031450:	4618      	mov	r0, r3
 8031452:	f000 f853 	bl	80314fc <USBD_Get_USB_Status>
 8031456:	4603      	mov	r3, r0
 8031458:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803145a:	7dbb      	ldrb	r3, [r7, #22]
}
 803145c:	4618      	mov	r0, r3
 803145e:	3718      	adds	r7, #24
 8031460:	46bd      	mov	sp, r7
 8031462:	bd80      	pop	{r7, pc}

08031464 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8031464:	b580      	push	{r7, lr}
 8031466:	b086      	sub	sp, #24
 8031468:	af00      	add	r7, sp, #0
 803146a:	60f8      	str	r0, [r7, #12]
 803146c:	607a      	str	r2, [r7, #4]
 803146e:	603b      	str	r3, [r7, #0]
 8031470:	460b      	mov	r3, r1
 8031472:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031474:	2300      	movs	r3, #0
 8031476:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031478:	2300      	movs	r3, #0
 803147a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 803147c:	68fb      	ldr	r3, [r7, #12]
 803147e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8031482:	7af9      	ldrb	r1, [r7, #11]
 8031484:	683b      	ldr	r3, [r7, #0]
 8031486:	687a      	ldr	r2, [r7, #4]
 8031488:	f7f8 fc79 	bl	8029d7e <HAL_PCD_EP_Receive>
 803148c:	4603      	mov	r3, r0
 803148e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031490:	7dfb      	ldrb	r3, [r7, #23]
 8031492:	4618      	mov	r0, r3
 8031494:	f000 f832 	bl	80314fc <USBD_Get_USB_Status>
 8031498:	4603      	mov	r3, r0
 803149a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803149c:	7dbb      	ldrb	r3, [r7, #22]
}
 803149e:	4618      	mov	r0, r3
 80314a0:	3718      	adds	r7, #24
 80314a2:	46bd      	mov	sp, r7
 80314a4:	bd80      	pop	{r7, pc}

080314a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80314a6:	b580      	push	{r7, lr}
 80314a8:	b082      	sub	sp, #8
 80314aa:	af00      	add	r7, sp, #0
 80314ac:	6078      	str	r0, [r7, #4]
 80314ae:	460b      	mov	r3, r1
 80314b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80314b2:	687b      	ldr	r3, [r7, #4]
 80314b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80314b8:	78fa      	ldrb	r2, [r7, #3]
 80314ba:	4611      	mov	r1, r2
 80314bc:	4618      	mov	r0, r3
 80314be:	f7f8 fca9 	bl	8029e14 <HAL_PCD_EP_GetRxCount>
 80314c2:	4603      	mov	r3, r0
}
 80314c4:	4618      	mov	r0, r3
 80314c6:	3708      	adds	r7, #8
 80314c8:	46bd      	mov	sp, r7
 80314ca:	bd80      	pop	{r7, pc}

080314cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80314cc:	b480      	push	{r7}
 80314ce:	b083      	sub	sp, #12
 80314d0:	af00      	add	r7, sp, #0
 80314d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80314d4:	4b03      	ldr	r3, [pc, #12]	; (80314e4 <USBD_static_malloc+0x18>)
}
 80314d6:	4618      	mov	r0, r3
 80314d8:	370c      	adds	r7, #12
 80314da:	46bd      	mov	sp, r7
 80314dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80314e0:	4770      	bx	lr
 80314e2:	bf00      	nop
 80314e4:	20008a48 	.word	0x20008a48

080314e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80314e8:	b480      	push	{r7}
 80314ea:	b083      	sub	sp, #12
 80314ec:	af00      	add	r7, sp, #0
 80314ee:	6078      	str	r0, [r7, #4]

}
 80314f0:	bf00      	nop
 80314f2:	370c      	adds	r7, #12
 80314f4:	46bd      	mov	sp, r7
 80314f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80314fa:	4770      	bx	lr

080314fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80314fc:	b480      	push	{r7}
 80314fe:	b085      	sub	sp, #20
 8031500:	af00      	add	r7, sp, #0
 8031502:	4603      	mov	r3, r0
 8031504:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031506:	2300      	movs	r3, #0
 8031508:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 803150a:	79fb      	ldrb	r3, [r7, #7]
 803150c:	2b03      	cmp	r3, #3
 803150e:	d817      	bhi.n	8031540 <USBD_Get_USB_Status+0x44>
 8031510:	a201      	add	r2, pc, #4	; (adr r2, 8031518 <USBD_Get_USB_Status+0x1c>)
 8031512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8031516:	bf00      	nop
 8031518:	08031529 	.word	0x08031529
 803151c:	0803152f 	.word	0x0803152f
 8031520:	08031535 	.word	0x08031535
 8031524:	0803153b 	.word	0x0803153b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8031528:	2300      	movs	r3, #0
 803152a:	73fb      	strb	r3, [r7, #15]
    break;
 803152c:	e00b      	b.n	8031546 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 803152e:	2303      	movs	r3, #3
 8031530:	73fb      	strb	r3, [r7, #15]
    break;
 8031532:	e008      	b.n	8031546 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8031534:	2301      	movs	r3, #1
 8031536:	73fb      	strb	r3, [r7, #15]
    break;
 8031538:	e005      	b.n	8031546 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 803153a:	2303      	movs	r3, #3
 803153c:	73fb      	strb	r3, [r7, #15]
    break;
 803153e:	e002      	b.n	8031546 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8031540:	2303      	movs	r3, #3
 8031542:	73fb      	strb	r3, [r7, #15]
    break;
 8031544:	bf00      	nop
  }
  return usb_status;
 8031546:	7bfb      	ldrb	r3, [r7, #15]
}
 8031548:	4618      	mov	r0, r3
 803154a:	3714      	adds	r7, #20
 803154c:	46bd      	mov	sp, r7
 803154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031552:	4770      	bx	lr

08031554 <std>:
 8031554:	2300      	movs	r3, #0
 8031556:	b510      	push	{r4, lr}
 8031558:	4604      	mov	r4, r0
 803155a:	e9c0 3300 	strd	r3, r3, [r0]
 803155e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8031562:	6083      	str	r3, [r0, #8]
 8031564:	8181      	strh	r1, [r0, #12]
 8031566:	6643      	str	r3, [r0, #100]	; 0x64
 8031568:	81c2      	strh	r2, [r0, #14]
 803156a:	6183      	str	r3, [r0, #24]
 803156c:	4619      	mov	r1, r3
 803156e:	2208      	movs	r2, #8
 8031570:	305c      	adds	r0, #92	; 0x5c
 8031572:	f000 f954 	bl	803181e <memset>
 8031576:	4b0d      	ldr	r3, [pc, #52]	; (80315ac <std+0x58>)
 8031578:	6223      	str	r3, [r4, #32]
 803157a:	4b0d      	ldr	r3, [pc, #52]	; (80315b0 <std+0x5c>)
 803157c:	6263      	str	r3, [r4, #36]	; 0x24
 803157e:	4b0d      	ldr	r3, [pc, #52]	; (80315b4 <std+0x60>)
 8031580:	62a3      	str	r3, [r4, #40]	; 0x28
 8031582:	4b0d      	ldr	r3, [pc, #52]	; (80315b8 <std+0x64>)
 8031584:	62e3      	str	r3, [r4, #44]	; 0x2c
 8031586:	4b0d      	ldr	r3, [pc, #52]	; (80315bc <std+0x68>)
 8031588:	61e4      	str	r4, [r4, #28]
 803158a:	429c      	cmp	r4, r3
 803158c:	d006      	beq.n	803159c <std+0x48>
 803158e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8031592:	4294      	cmp	r4, r2
 8031594:	d002      	beq.n	803159c <std+0x48>
 8031596:	33d0      	adds	r3, #208	; 0xd0
 8031598:	429c      	cmp	r4, r3
 803159a:	d105      	bne.n	80315a8 <std+0x54>
 803159c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80315a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80315a4:	f000 b9b4 	b.w	8031910 <__retarget_lock_init_recursive>
 80315a8:	bd10      	pop	{r4, pc}
 80315aa:	bf00      	nop
 80315ac:	08031799 	.word	0x08031799
 80315b0:	080317bb 	.word	0x080317bb
 80315b4:	080317f3 	.word	0x080317f3
 80315b8:	08031817 	.word	0x08031817
 80315bc:	20008aa8 	.word	0x20008aa8

080315c0 <stdio_exit_handler>:
 80315c0:	4a02      	ldr	r2, [pc, #8]	; (80315cc <stdio_exit_handler+0xc>)
 80315c2:	4903      	ldr	r1, [pc, #12]	; (80315d0 <stdio_exit_handler+0x10>)
 80315c4:	4803      	ldr	r0, [pc, #12]	; (80315d4 <stdio_exit_handler+0x14>)
 80315c6:	f000 b869 	b.w	803169c <_fwalk_sglue>
 80315ca:	bf00      	nop
 80315cc:	20000278 	.word	0x20000278
 80315d0:	08033ef9 	.word	0x08033ef9
 80315d4:	20000288 	.word	0x20000288

080315d8 <cleanup_stdio>:
 80315d8:	6841      	ldr	r1, [r0, #4]
 80315da:	4b0c      	ldr	r3, [pc, #48]	; (803160c <cleanup_stdio+0x34>)
 80315dc:	4299      	cmp	r1, r3
 80315de:	b510      	push	{r4, lr}
 80315e0:	4604      	mov	r4, r0
 80315e2:	d001      	beq.n	80315e8 <cleanup_stdio+0x10>
 80315e4:	f002 fc88 	bl	8033ef8 <_fclose_r>
 80315e8:	68a1      	ldr	r1, [r4, #8]
 80315ea:	4b09      	ldr	r3, [pc, #36]	; (8031610 <cleanup_stdio+0x38>)
 80315ec:	4299      	cmp	r1, r3
 80315ee:	d002      	beq.n	80315f6 <cleanup_stdio+0x1e>
 80315f0:	4620      	mov	r0, r4
 80315f2:	f002 fc81 	bl	8033ef8 <_fclose_r>
 80315f6:	68e1      	ldr	r1, [r4, #12]
 80315f8:	4b06      	ldr	r3, [pc, #24]	; (8031614 <cleanup_stdio+0x3c>)
 80315fa:	4299      	cmp	r1, r3
 80315fc:	d004      	beq.n	8031608 <cleanup_stdio+0x30>
 80315fe:	4620      	mov	r0, r4
 8031600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8031604:	f002 bc78 	b.w	8033ef8 <_fclose_r>
 8031608:	bd10      	pop	{r4, pc}
 803160a:	bf00      	nop
 803160c:	20008aa8 	.word	0x20008aa8
 8031610:	20008b10 	.word	0x20008b10
 8031614:	20008b78 	.word	0x20008b78

08031618 <global_stdio_init.part.0>:
 8031618:	b510      	push	{r4, lr}
 803161a:	4b0b      	ldr	r3, [pc, #44]	; (8031648 <global_stdio_init.part.0+0x30>)
 803161c:	4c0b      	ldr	r4, [pc, #44]	; (803164c <global_stdio_init.part.0+0x34>)
 803161e:	4a0c      	ldr	r2, [pc, #48]	; (8031650 <global_stdio_init.part.0+0x38>)
 8031620:	601a      	str	r2, [r3, #0]
 8031622:	4620      	mov	r0, r4
 8031624:	2200      	movs	r2, #0
 8031626:	2104      	movs	r1, #4
 8031628:	f7ff ff94 	bl	8031554 <std>
 803162c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8031630:	2201      	movs	r2, #1
 8031632:	2109      	movs	r1, #9
 8031634:	f7ff ff8e 	bl	8031554 <std>
 8031638:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 803163c:	2202      	movs	r2, #2
 803163e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8031642:	2112      	movs	r1, #18
 8031644:	f7ff bf86 	b.w	8031554 <std>
 8031648:	20008be0 	.word	0x20008be0
 803164c:	20008aa8 	.word	0x20008aa8
 8031650:	080315c1 	.word	0x080315c1

08031654 <__sfp_lock_acquire>:
 8031654:	4801      	ldr	r0, [pc, #4]	; (803165c <__sfp_lock_acquire+0x8>)
 8031656:	f000 b95d 	b.w	8031914 <__retarget_lock_acquire_recursive>
 803165a:	bf00      	nop
 803165c:	20008bea 	.word	0x20008bea

08031660 <__sfp_lock_release>:
 8031660:	4801      	ldr	r0, [pc, #4]	; (8031668 <__sfp_lock_release+0x8>)
 8031662:	f000 b958 	b.w	8031916 <__retarget_lock_release_recursive>
 8031666:	bf00      	nop
 8031668:	20008bea 	.word	0x20008bea

0803166c <__sinit>:
 803166c:	b510      	push	{r4, lr}
 803166e:	4604      	mov	r4, r0
 8031670:	f7ff fff0 	bl	8031654 <__sfp_lock_acquire>
 8031674:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8031676:	b11b      	cbz	r3, 8031680 <__sinit+0x14>
 8031678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803167c:	f7ff bff0 	b.w	8031660 <__sfp_lock_release>
 8031680:	4b04      	ldr	r3, [pc, #16]	; (8031694 <__sinit+0x28>)
 8031682:	6363      	str	r3, [r4, #52]	; 0x34
 8031684:	4b04      	ldr	r3, [pc, #16]	; (8031698 <__sinit+0x2c>)
 8031686:	681b      	ldr	r3, [r3, #0]
 8031688:	2b00      	cmp	r3, #0
 803168a:	d1f5      	bne.n	8031678 <__sinit+0xc>
 803168c:	f7ff ffc4 	bl	8031618 <global_stdio_init.part.0>
 8031690:	e7f2      	b.n	8031678 <__sinit+0xc>
 8031692:	bf00      	nop
 8031694:	080315d9 	.word	0x080315d9
 8031698:	20008be0 	.word	0x20008be0

0803169c <_fwalk_sglue>:
 803169c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80316a0:	4607      	mov	r7, r0
 80316a2:	4688      	mov	r8, r1
 80316a4:	4614      	mov	r4, r2
 80316a6:	2600      	movs	r6, #0
 80316a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80316ac:	f1b9 0901 	subs.w	r9, r9, #1
 80316b0:	d505      	bpl.n	80316be <_fwalk_sglue+0x22>
 80316b2:	6824      	ldr	r4, [r4, #0]
 80316b4:	2c00      	cmp	r4, #0
 80316b6:	d1f7      	bne.n	80316a8 <_fwalk_sglue+0xc>
 80316b8:	4630      	mov	r0, r6
 80316ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80316be:	89ab      	ldrh	r3, [r5, #12]
 80316c0:	2b01      	cmp	r3, #1
 80316c2:	d907      	bls.n	80316d4 <_fwalk_sglue+0x38>
 80316c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80316c8:	3301      	adds	r3, #1
 80316ca:	d003      	beq.n	80316d4 <_fwalk_sglue+0x38>
 80316cc:	4629      	mov	r1, r5
 80316ce:	4638      	mov	r0, r7
 80316d0:	47c0      	blx	r8
 80316d2:	4306      	orrs	r6, r0
 80316d4:	3568      	adds	r5, #104	; 0x68
 80316d6:	e7e9      	b.n	80316ac <_fwalk_sglue+0x10>

080316d8 <printf>:
 80316d8:	b40f      	push	{r0, r1, r2, r3}
 80316da:	b507      	push	{r0, r1, r2, lr}
 80316dc:	4906      	ldr	r1, [pc, #24]	; (80316f8 <printf+0x20>)
 80316de:	ab04      	add	r3, sp, #16
 80316e0:	6808      	ldr	r0, [r1, #0]
 80316e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80316e6:	6881      	ldr	r1, [r0, #8]
 80316e8:	9301      	str	r3, [sp, #4]
 80316ea:	f000 fc8d 	bl	8032008 <_vfprintf_r>
 80316ee:	b003      	add	sp, #12
 80316f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80316f4:	b004      	add	sp, #16
 80316f6:	4770      	bx	lr
 80316f8:	200003a8 	.word	0x200003a8

080316fc <_puts_r>:
 80316fc:	b530      	push	{r4, r5, lr}
 80316fe:	4605      	mov	r5, r0
 8031700:	b089      	sub	sp, #36	; 0x24
 8031702:	4608      	mov	r0, r1
 8031704:	460c      	mov	r4, r1
 8031706:	f7f0 fd63 	bl	80221d0 <strlen>
 803170a:	4b1e      	ldr	r3, [pc, #120]	; (8031784 <_puts_r+0x88>)
 803170c:	9306      	str	r3, [sp, #24]
 803170e:	2301      	movs	r3, #1
 8031710:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8031714:	9307      	str	r3, [sp, #28]
 8031716:	4418      	add	r0, r3
 8031718:	ab04      	add	r3, sp, #16
 803171a:	9301      	str	r3, [sp, #4]
 803171c:	2302      	movs	r3, #2
 803171e:	9302      	str	r3, [sp, #8]
 8031720:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8031722:	68ac      	ldr	r4, [r5, #8]
 8031724:	9003      	str	r0, [sp, #12]
 8031726:	b913      	cbnz	r3, 803172e <_puts_r+0x32>
 8031728:	4628      	mov	r0, r5
 803172a:	f7ff ff9f 	bl	803166c <__sinit>
 803172e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8031730:	07db      	lsls	r3, r3, #31
 8031732:	d405      	bmi.n	8031740 <_puts_r+0x44>
 8031734:	89a3      	ldrh	r3, [r4, #12]
 8031736:	0598      	lsls	r0, r3, #22
 8031738:	d402      	bmi.n	8031740 <_puts_r+0x44>
 803173a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803173c:	f000 f8ea 	bl	8031914 <__retarget_lock_acquire_recursive>
 8031740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8031744:	0499      	lsls	r1, r3, #18
 8031746:	d406      	bmi.n	8031756 <_puts_r+0x5a>
 8031748:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 803174c:	81a3      	strh	r3, [r4, #12]
 803174e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8031750:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8031754:	6663      	str	r3, [r4, #100]	; 0x64
 8031756:	4628      	mov	r0, r5
 8031758:	aa01      	add	r2, sp, #4
 803175a:	4621      	mov	r1, r4
 803175c:	f002 fcd8 	bl	8034110 <__sfvwrite_r>
 8031760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8031762:	2800      	cmp	r0, #0
 8031764:	bf14      	ite	ne
 8031766:	f04f 35ff 	movne.w	r5, #4294967295
 803176a:	250a      	moveq	r5, #10
 803176c:	07da      	lsls	r2, r3, #31
 803176e:	d405      	bmi.n	803177c <_puts_r+0x80>
 8031770:	89a3      	ldrh	r3, [r4, #12]
 8031772:	059b      	lsls	r3, r3, #22
 8031774:	d402      	bmi.n	803177c <_puts_r+0x80>
 8031776:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8031778:	f000 f8cd 	bl	8031916 <__retarget_lock_release_recursive>
 803177c:	4628      	mov	r0, r5
 803177e:	b009      	add	sp, #36	; 0x24
 8031780:	bd30      	pop	{r4, r5, pc}
 8031782:	bf00      	nop
 8031784:	0803718f 	.word	0x0803718f

08031788 <puts>:
 8031788:	4b02      	ldr	r3, [pc, #8]	; (8031794 <puts+0xc>)
 803178a:	4601      	mov	r1, r0
 803178c:	6818      	ldr	r0, [r3, #0]
 803178e:	f7ff bfb5 	b.w	80316fc <_puts_r>
 8031792:	bf00      	nop
 8031794:	200003a8 	.word	0x200003a8

08031798 <__sread>:
 8031798:	b510      	push	{r4, lr}
 803179a:	460c      	mov	r4, r1
 803179c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80317a0:	f000 f868 	bl	8031874 <_read_r>
 80317a4:	2800      	cmp	r0, #0
 80317a6:	bfab      	itete	ge
 80317a8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80317aa:	89a3      	ldrhlt	r3, [r4, #12]
 80317ac:	181b      	addge	r3, r3, r0
 80317ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80317b2:	bfac      	ite	ge
 80317b4:	6523      	strge	r3, [r4, #80]	; 0x50
 80317b6:	81a3      	strhlt	r3, [r4, #12]
 80317b8:	bd10      	pop	{r4, pc}

080317ba <__swrite>:
 80317ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80317be:	461f      	mov	r7, r3
 80317c0:	898b      	ldrh	r3, [r1, #12]
 80317c2:	05db      	lsls	r3, r3, #23
 80317c4:	4605      	mov	r5, r0
 80317c6:	460c      	mov	r4, r1
 80317c8:	4616      	mov	r6, r2
 80317ca:	d505      	bpl.n	80317d8 <__swrite+0x1e>
 80317cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80317d0:	2302      	movs	r3, #2
 80317d2:	2200      	movs	r2, #0
 80317d4:	f000 f83c 	bl	8031850 <_lseek_r>
 80317d8:	89a3      	ldrh	r3, [r4, #12]
 80317da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80317de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80317e2:	81a3      	strh	r3, [r4, #12]
 80317e4:	4632      	mov	r2, r6
 80317e6:	463b      	mov	r3, r7
 80317e8:	4628      	mov	r0, r5
 80317ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80317ee:	f000 b853 	b.w	8031898 <_write_r>

080317f2 <__sseek>:
 80317f2:	b510      	push	{r4, lr}
 80317f4:	460c      	mov	r4, r1
 80317f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80317fa:	f000 f829 	bl	8031850 <_lseek_r>
 80317fe:	1c43      	adds	r3, r0, #1
 8031800:	89a3      	ldrh	r3, [r4, #12]
 8031802:	bf15      	itete	ne
 8031804:	6520      	strne	r0, [r4, #80]	; 0x50
 8031806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803180a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803180e:	81a3      	strheq	r3, [r4, #12]
 8031810:	bf18      	it	ne
 8031812:	81a3      	strhne	r3, [r4, #12]
 8031814:	bd10      	pop	{r4, pc}

08031816 <__sclose>:
 8031816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803181a:	f000 b809 	b.w	8031830 <_close_r>

0803181e <memset>:
 803181e:	4402      	add	r2, r0
 8031820:	4603      	mov	r3, r0
 8031822:	4293      	cmp	r3, r2
 8031824:	d100      	bne.n	8031828 <memset+0xa>
 8031826:	4770      	bx	lr
 8031828:	f803 1b01 	strb.w	r1, [r3], #1
 803182c:	e7f9      	b.n	8031822 <memset+0x4>
	...

08031830 <_close_r>:
 8031830:	b538      	push	{r3, r4, r5, lr}
 8031832:	4d06      	ldr	r5, [pc, #24]	; (803184c <_close_r+0x1c>)
 8031834:	2300      	movs	r3, #0
 8031836:	4604      	mov	r4, r0
 8031838:	4608      	mov	r0, r1
 803183a:	602b      	str	r3, [r5, #0]
 803183c:	f7f6 f8b0 	bl	80279a0 <_close>
 8031840:	1c43      	adds	r3, r0, #1
 8031842:	d102      	bne.n	803184a <_close_r+0x1a>
 8031844:	682b      	ldr	r3, [r5, #0]
 8031846:	b103      	cbz	r3, 803184a <_close_r+0x1a>
 8031848:	6023      	str	r3, [r4, #0]
 803184a:	bd38      	pop	{r3, r4, r5, pc}
 803184c:	20008be4 	.word	0x20008be4

08031850 <_lseek_r>:
 8031850:	b538      	push	{r3, r4, r5, lr}
 8031852:	4d07      	ldr	r5, [pc, #28]	; (8031870 <_lseek_r+0x20>)
 8031854:	4604      	mov	r4, r0
 8031856:	4608      	mov	r0, r1
 8031858:	4611      	mov	r1, r2
 803185a:	2200      	movs	r2, #0
 803185c:	602a      	str	r2, [r5, #0]
 803185e:	461a      	mov	r2, r3
 8031860:	f7f6 f8c5 	bl	80279ee <_lseek>
 8031864:	1c43      	adds	r3, r0, #1
 8031866:	d102      	bne.n	803186e <_lseek_r+0x1e>
 8031868:	682b      	ldr	r3, [r5, #0]
 803186a:	b103      	cbz	r3, 803186e <_lseek_r+0x1e>
 803186c:	6023      	str	r3, [r4, #0]
 803186e:	bd38      	pop	{r3, r4, r5, pc}
 8031870:	20008be4 	.word	0x20008be4

08031874 <_read_r>:
 8031874:	b538      	push	{r3, r4, r5, lr}
 8031876:	4d07      	ldr	r5, [pc, #28]	; (8031894 <_read_r+0x20>)
 8031878:	4604      	mov	r4, r0
 803187a:	4608      	mov	r0, r1
 803187c:	4611      	mov	r1, r2
 803187e:	2200      	movs	r2, #0
 8031880:	602a      	str	r2, [r5, #0]
 8031882:	461a      	mov	r2, r3
 8031884:	f7f6 f86f 	bl	8027966 <_read>
 8031888:	1c43      	adds	r3, r0, #1
 803188a:	d102      	bne.n	8031892 <_read_r+0x1e>
 803188c:	682b      	ldr	r3, [r5, #0]
 803188e:	b103      	cbz	r3, 8031892 <_read_r+0x1e>
 8031890:	6023      	str	r3, [r4, #0]
 8031892:	bd38      	pop	{r3, r4, r5, pc}
 8031894:	20008be4 	.word	0x20008be4

08031898 <_write_r>:
 8031898:	b538      	push	{r3, r4, r5, lr}
 803189a:	4d07      	ldr	r5, [pc, #28]	; (80318b8 <_write_r+0x20>)
 803189c:	4604      	mov	r4, r0
 803189e:	4608      	mov	r0, r1
 80318a0:	4611      	mov	r1, r2
 80318a2:	2200      	movs	r2, #0
 80318a4:	602a      	str	r2, [r5, #0]
 80318a6:	461a      	mov	r2, r3
 80318a8:	f7f2 fc24 	bl	80240f4 <_write>
 80318ac:	1c43      	adds	r3, r0, #1
 80318ae:	d102      	bne.n	80318b6 <_write_r+0x1e>
 80318b0:	682b      	ldr	r3, [r5, #0]
 80318b2:	b103      	cbz	r3, 80318b6 <_write_r+0x1e>
 80318b4:	6023      	str	r3, [r4, #0]
 80318b6:	bd38      	pop	{r3, r4, r5, pc}
 80318b8:	20008be4 	.word	0x20008be4

080318bc <__errno>:
 80318bc:	4b01      	ldr	r3, [pc, #4]	; (80318c4 <__errno+0x8>)
 80318be:	6818      	ldr	r0, [r3, #0]
 80318c0:	4770      	bx	lr
 80318c2:	bf00      	nop
 80318c4:	200003a8 	.word	0x200003a8

080318c8 <__libc_init_array>:
 80318c8:	b570      	push	{r4, r5, r6, lr}
 80318ca:	4d0d      	ldr	r5, [pc, #52]	; (8031900 <__libc_init_array+0x38>)
 80318cc:	4c0d      	ldr	r4, [pc, #52]	; (8031904 <__libc_init_array+0x3c>)
 80318ce:	1b64      	subs	r4, r4, r5
 80318d0:	10a4      	asrs	r4, r4, #2
 80318d2:	2600      	movs	r6, #0
 80318d4:	42a6      	cmp	r6, r4
 80318d6:	d109      	bne.n	80318ec <__libc_init_array+0x24>
 80318d8:	4d0b      	ldr	r5, [pc, #44]	; (8031908 <__libc_init_array+0x40>)
 80318da:	4c0c      	ldr	r4, [pc, #48]	; (803190c <__libc_init_array+0x44>)
 80318dc:	f004 fbf0 	bl	80360c0 <_init>
 80318e0:	1b64      	subs	r4, r4, r5
 80318e2:	10a4      	asrs	r4, r4, #2
 80318e4:	2600      	movs	r6, #0
 80318e6:	42a6      	cmp	r6, r4
 80318e8:	d105      	bne.n	80318f6 <__libc_init_array+0x2e>
 80318ea:	bd70      	pop	{r4, r5, r6, pc}
 80318ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80318f0:	4798      	blx	r3
 80318f2:	3601      	adds	r6, #1
 80318f4:	e7ee      	b.n	80318d4 <__libc_init_array+0xc>
 80318f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80318fa:	4798      	blx	r3
 80318fc:	3601      	adds	r6, #1
 80318fe:	e7f2      	b.n	80318e6 <__libc_init_array+0x1e>
 8031900:	0803719c 	.word	0x0803719c
 8031904:	0803719c 	.word	0x0803719c
 8031908:	0803719c 	.word	0x0803719c
 803190c:	080371a4 	.word	0x080371a4

08031910 <__retarget_lock_init_recursive>:
 8031910:	4770      	bx	lr

08031912 <__retarget_lock_close_recursive>:
 8031912:	4770      	bx	lr

08031914 <__retarget_lock_acquire_recursive>:
 8031914:	4770      	bx	lr

08031916 <__retarget_lock_release_recursive>:
 8031916:	4770      	bx	lr

08031918 <memcpy>:
 8031918:	440a      	add	r2, r1
 803191a:	4291      	cmp	r1, r2
 803191c:	f100 33ff 	add.w	r3, r0, #4294967295
 8031920:	d100      	bne.n	8031924 <memcpy+0xc>
 8031922:	4770      	bx	lr
 8031924:	b510      	push	{r4, lr}
 8031926:	f811 4b01 	ldrb.w	r4, [r1], #1
 803192a:	f803 4f01 	strb.w	r4, [r3, #1]!
 803192e:	4291      	cmp	r1, r2
 8031930:	d1f9      	bne.n	8031926 <memcpy+0xe>
 8031932:	bd10      	pop	{r4, pc}

08031934 <register_fini>:
 8031934:	4b02      	ldr	r3, [pc, #8]	; (8031940 <register_fini+0xc>)
 8031936:	b113      	cbz	r3, 803193e <register_fini+0xa>
 8031938:	4802      	ldr	r0, [pc, #8]	; (8031944 <register_fini+0x10>)
 803193a:	f000 b805 	b.w	8031948 <atexit>
 803193e:	4770      	bx	lr
 8031940:	00000000 	.word	0x00000000
 8031944:	080345b9 	.word	0x080345b9

08031948 <atexit>:
 8031948:	2300      	movs	r3, #0
 803194a:	4601      	mov	r1, r0
 803194c:	461a      	mov	r2, r3
 803194e:	4618      	mov	r0, r3
 8031950:	f002 be8a 	b.w	8034668 <__register_exitproc>

08031954 <_malloc_trim_r>:
 8031954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031958:	4606      	mov	r6, r0
 803195a:	2008      	movs	r0, #8
 803195c:	460c      	mov	r4, r1
 803195e:	f002 fe3f 	bl	80345e0 <sysconf>
 8031962:	4f23      	ldr	r7, [pc, #140]	; (80319f0 <_malloc_trim_r+0x9c>)
 8031964:	4680      	mov	r8, r0
 8031966:	4630      	mov	r0, r6
 8031968:	f000 fb42 	bl	8031ff0 <__malloc_lock>
 803196c:	68bb      	ldr	r3, [r7, #8]
 803196e:	685d      	ldr	r5, [r3, #4]
 8031970:	f025 0503 	bic.w	r5, r5, #3
 8031974:	1b2c      	subs	r4, r5, r4
 8031976:	3c11      	subs	r4, #17
 8031978:	4444      	add	r4, r8
 803197a:	fbb4 f4f8 	udiv	r4, r4, r8
 803197e:	3c01      	subs	r4, #1
 8031980:	fb08 f404 	mul.w	r4, r8, r4
 8031984:	45a0      	cmp	r8, r4
 8031986:	dd05      	ble.n	8031994 <_malloc_trim_r+0x40>
 8031988:	4630      	mov	r0, r6
 803198a:	f000 fb37 	bl	8031ffc <__malloc_unlock>
 803198e:	2000      	movs	r0, #0
 8031990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8031994:	2100      	movs	r1, #0
 8031996:	4630      	mov	r0, r6
 8031998:	f002 fdfe 	bl	8034598 <_sbrk_r>
 803199c:	68bb      	ldr	r3, [r7, #8]
 803199e:	442b      	add	r3, r5
 80319a0:	4298      	cmp	r0, r3
 80319a2:	d1f1      	bne.n	8031988 <_malloc_trim_r+0x34>
 80319a4:	4261      	negs	r1, r4
 80319a6:	4630      	mov	r0, r6
 80319a8:	f002 fdf6 	bl	8034598 <_sbrk_r>
 80319ac:	3001      	adds	r0, #1
 80319ae:	d110      	bne.n	80319d2 <_malloc_trim_r+0x7e>
 80319b0:	2100      	movs	r1, #0
 80319b2:	4630      	mov	r0, r6
 80319b4:	f002 fdf0 	bl	8034598 <_sbrk_r>
 80319b8:	68ba      	ldr	r2, [r7, #8]
 80319ba:	1a83      	subs	r3, r0, r2
 80319bc:	2b0f      	cmp	r3, #15
 80319be:	dde3      	ble.n	8031988 <_malloc_trim_r+0x34>
 80319c0:	490c      	ldr	r1, [pc, #48]	; (80319f4 <_malloc_trim_r+0xa0>)
 80319c2:	6809      	ldr	r1, [r1, #0]
 80319c4:	1a40      	subs	r0, r0, r1
 80319c6:	490c      	ldr	r1, [pc, #48]	; (80319f8 <_malloc_trim_r+0xa4>)
 80319c8:	f043 0301 	orr.w	r3, r3, #1
 80319cc:	6008      	str	r0, [r1, #0]
 80319ce:	6053      	str	r3, [r2, #4]
 80319d0:	e7da      	b.n	8031988 <_malloc_trim_r+0x34>
 80319d2:	68bb      	ldr	r3, [r7, #8]
 80319d4:	4a08      	ldr	r2, [pc, #32]	; (80319f8 <_malloc_trim_r+0xa4>)
 80319d6:	1b2d      	subs	r5, r5, r4
 80319d8:	f045 0501 	orr.w	r5, r5, #1
 80319dc:	605d      	str	r5, [r3, #4]
 80319de:	6813      	ldr	r3, [r2, #0]
 80319e0:	4630      	mov	r0, r6
 80319e2:	1b1b      	subs	r3, r3, r4
 80319e4:	6013      	str	r3, [r2, #0]
 80319e6:	f000 fb09 	bl	8031ffc <__malloc_unlock>
 80319ea:	2001      	movs	r0, #1
 80319ec:	e7d0      	b.n	8031990 <_malloc_trim_r+0x3c>
 80319ee:	bf00      	nop
 80319f0:	200003b0 	.word	0x200003b0
 80319f4:	200007b8 	.word	0x200007b8
 80319f8:	20008bf0 	.word	0x20008bf0

080319fc <_free_r>:
 80319fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80319fe:	4605      	mov	r5, r0
 8031a00:	460f      	mov	r7, r1
 8031a02:	2900      	cmp	r1, #0
 8031a04:	f000 80b1 	beq.w	8031b6a <_free_r+0x16e>
 8031a08:	f000 faf2 	bl	8031ff0 <__malloc_lock>
 8031a0c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8031a10:	4856      	ldr	r0, [pc, #344]	; (8031b6c <_free_r+0x170>)
 8031a12:	f022 0401 	bic.w	r4, r2, #1
 8031a16:	f1a7 0308 	sub.w	r3, r7, #8
 8031a1a:	eb03 0c04 	add.w	ip, r3, r4
 8031a1e:	6881      	ldr	r1, [r0, #8]
 8031a20:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8031a24:	4561      	cmp	r1, ip
 8031a26:	f026 0603 	bic.w	r6, r6, #3
 8031a2a:	f002 0201 	and.w	r2, r2, #1
 8031a2e:	d11b      	bne.n	8031a68 <_free_r+0x6c>
 8031a30:	4426      	add	r6, r4
 8031a32:	b93a      	cbnz	r2, 8031a44 <_free_r+0x48>
 8031a34:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8031a38:	1a9b      	subs	r3, r3, r2
 8031a3a:	4416      	add	r6, r2
 8031a3c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8031a40:	60ca      	str	r2, [r1, #12]
 8031a42:	6091      	str	r1, [r2, #8]
 8031a44:	f046 0201 	orr.w	r2, r6, #1
 8031a48:	605a      	str	r2, [r3, #4]
 8031a4a:	6083      	str	r3, [r0, #8]
 8031a4c:	4b48      	ldr	r3, [pc, #288]	; (8031b70 <_free_r+0x174>)
 8031a4e:	681b      	ldr	r3, [r3, #0]
 8031a50:	42b3      	cmp	r3, r6
 8031a52:	d804      	bhi.n	8031a5e <_free_r+0x62>
 8031a54:	4b47      	ldr	r3, [pc, #284]	; (8031b74 <_free_r+0x178>)
 8031a56:	4628      	mov	r0, r5
 8031a58:	6819      	ldr	r1, [r3, #0]
 8031a5a:	f7ff ff7b 	bl	8031954 <_malloc_trim_r>
 8031a5e:	4628      	mov	r0, r5
 8031a60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8031a64:	f000 baca 	b.w	8031ffc <__malloc_unlock>
 8031a68:	f8cc 6004 	str.w	r6, [ip, #4]
 8031a6c:	2a00      	cmp	r2, #0
 8031a6e:	d138      	bne.n	8031ae2 <_free_r+0xe6>
 8031a70:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8031a74:	1a5b      	subs	r3, r3, r1
 8031a76:	440c      	add	r4, r1
 8031a78:	6899      	ldr	r1, [r3, #8]
 8031a7a:	f100 0708 	add.w	r7, r0, #8
 8031a7e:	42b9      	cmp	r1, r7
 8031a80:	d031      	beq.n	8031ae6 <_free_r+0xea>
 8031a82:	68df      	ldr	r7, [r3, #12]
 8031a84:	60cf      	str	r7, [r1, #12]
 8031a86:	60b9      	str	r1, [r7, #8]
 8031a88:	eb0c 0106 	add.w	r1, ip, r6
 8031a8c:	6849      	ldr	r1, [r1, #4]
 8031a8e:	07c9      	lsls	r1, r1, #31
 8031a90:	d40b      	bmi.n	8031aaa <_free_r+0xae>
 8031a92:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8031a96:	4434      	add	r4, r6
 8031a98:	bb3a      	cbnz	r2, 8031aea <_free_r+0xee>
 8031a9a:	4e37      	ldr	r6, [pc, #220]	; (8031b78 <_free_r+0x17c>)
 8031a9c:	42b1      	cmp	r1, r6
 8031a9e:	d124      	bne.n	8031aea <_free_r+0xee>
 8031aa0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8031aa4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8031aa8:	2201      	movs	r2, #1
 8031aaa:	f044 0101 	orr.w	r1, r4, #1
 8031aae:	6059      	str	r1, [r3, #4]
 8031ab0:	511c      	str	r4, [r3, r4]
 8031ab2:	2a00      	cmp	r2, #0
 8031ab4:	d1d3      	bne.n	8031a5e <_free_r+0x62>
 8031ab6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8031aba:	d21b      	bcs.n	8031af4 <_free_r+0xf8>
 8031abc:	08e2      	lsrs	r2, r4, #3
 8031abe:	2101      	movs	r1, #1
 8031ac0:	0964      	lsrs	r4, r4, #5
 8031ac2:	40a1      	lsls	r1, r4
 8031ac4:	6844      	ldr	r4, [r0, #4]
 8031ac6:	3201      	adds	r2, #1
 8031ac8:	4321      	orrs	r1, r4
 8031aca:	6041      	str	r1, [r0, #4]
 8031acc:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8031ad0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8031ad4:	3908      	subs	r1, #8
 8031ad6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8031ada:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8031ade:	60e3      	str	r3, [r4, #12]
 8031ae0:	e7bd      	b.n	8031a5e <_free_r+0x62>
 8031ae2:	2200      	movs	r2, #0
 8031ae4:	e7d0      	b.n	8031a88 <_free_r+0x8c>
 8031ae6:	2201      	movs	r2, #1
 8031ae8:	e7ce      	b.n	8031a88 <_free_r+0x8c>
 8031aea:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8031aee:	60ce      	str	r6, [r1, #12]
 8031af0:	60b1      	str	r1, [r6, #8]
 8031af2:	e7da      	b.n	8031aaa <_free_r+0xae>
 8031af4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8031af8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8031afc:	d214      	bcs.n	8031b28 <_free_r+0x12c>
 8031afe:	09a2      	lsrs	r2, r4, #6
 8031b00:	3238      	adds	r2, #56	; 0x38
 8031b02:	1c51      	adds	r1, r2, #1
 8031b04:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8031b08:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8031b0c:	428e      	cmp	r6, r1
 8031b0e:	d125      	bne.n	8031b5c <_free_r+0x160>
 8031b10:	2401      	movs	r4, #1
 8031b12:	1092      	asrs	r2, r2, #2
 8031b14:	fa04 f202 	lsl.w	r2, r4, r2
 8031b18:	6844      	ldr	r4, [r0, #4]
 8031b1a:	4322      	orrs	r2, r4
 8031b1c:	6042      	str	r2, [r0, #4]
 8031b1e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8031b22:	60b3      	str	r3, [r6, #8]
 8031b24:	60cb      	str	r3, [r1, #12]
 8031b26:	e79a      	b.n	8031a5e <_free_r+0x62>
 8031b28:	2a14      	cmp	r2, #20
 8031b2a:	d801      	bhi.n	8031b30 <_free_r+0x134>
 8031b2c:	325b      	adds	r2, #91	; 0x5b
 8031b2e:	e7e8      	b.n	8031b02 <_free_r+0x106>
 8031b30:	2a54      	cmp	r2, #84	; 0x54
 8031b32:	d802      	bhi.n	8031b3a <_free_r+0x13e>
 8031b34:	0b22      	lsrs	r2, r4, #12
 8031b36:	326e      	adds	r2, #110	; 0x6e
 8031b38:	e7e3      	b.n	8031b02 <_free_r+0x106>
 8031b3a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8031b3e:	d802      	bhi.n	8031b46 <_free_r+0x14a>
 8031b40:	0be2      	lsrs	r2, r4, #15
 8031b42:	3277      	adds	r2, #119	; 0x77
 8031b44:	e7dd      	b.n	8031b02 <_free_r+0x106>
 8031b46:	f240 5154 	movw	r1, #1364	; 0x554
 8031b4a:	428a      	cmp	r2, r1
 8031b4c:	bf9a      	itte	ls
 8031b4e:	0ca2      	lsrls	r2, r4, #18
 8031b50:	327c      	addls	r2, #124	; 0x7c
 8031b52:	227e      	movhi	r2, #126	; 0x7e
 8031b54:	e7d5      	b.n	8031b02 <_free_r+0x106>
 8031b56:	6889      	ldr	r1, [r1, #8]
 8031b58:	428e      	cmp	r6, r1
 8031b5a:	d004      	beq.n	8031b66 <_free_r+0x16a>
 8031b5c:	684a      	ldr	r2, [r1, #4]
 8031b5e:	f022 0203 	bic.w	r2, r2, #3
 8031b62:	42a2      	cmp	r2, r4
 8031b64:	d8f7      	bhi.n	8031b56 <_free_r+0x15a>
 8031b66:	68ce      	ldr	r6, [r1, #12]
 8031b68:	e7d9      	b.n	8031b1e <_free_r+0x122>
 8031b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8031b6c:	200003b0 	.word	0x200003b0
 8031b70:	200007bc 	.word	0x200007bc
 8031b74:	20008c20 	.word	0x20008c20
 8031b78:	200003b8 	.word	0x200003b8

08031b7c <_malloc_r>:
 8031b7c:	f101 030b 	add.w	r3, r1, #11
 8031b80:	2b16      	cmp	r3, #22
 8031b82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031b86:	4605      	mov	r5, r0
 8031b88:	d906      	bls.n	8031b98 <_malloc_r+0x1c>
 8031b8a:	f033 0707 	bics.w	r7, r3, #7
 8031b8e:	d504      	bpl.n	8031b9a <_malloc_r+0x1e>
 8031b90:	230c      	movs	r3, #12
 8031b92:	602b      	str	r3, [r5, #0]
 8031b94:	2400      	movs	r4, #0
 8031b96:	e1a3      	b.n	8031ee0 <_malloc_r+0x364>
 8031b98:	2710      	movs	r7, #16
 8031b9a:	42b9      	cmp	r1, r7
 8031b9c:	d8f8      	bhi.n	8031b90 <_malloc_r+0x14>
 8031b9e:	4628      	mov	r0, r5
 8031ba0:	f000 fa26 	bl	8031ff0 <__malloc_lock>
 8031ba4:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8031ba8:	4eaf      	ldr	r6, [pc, #700]	; (8031e68 <_malloc_r+0x2ec>)
 8031baa:	d237      	bcs.n	8031c1c <_malloc_r+0xa0>
 8031bac:	f107 0208 	add.w	r2, r7, #8
 8031bb0:	4432      	add	r2, r6
 8031bb2:	f1a2 0108 	sub.w	r1, r2, #8
 8031bb6:	6854      	ldr	r4, [r2, #4]
 8031bb8:	428c      	cmp	r4, r1
 8031bba:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8031bbe:	d102      	bne.n	8031bc6 <_malloc_r+0x4a>
 8031bc0:	68d4      	ldr	r4, [r2, #12]
 8031bc2:	42a2      	cmp	r2, r4
 8031bc4:	d010      	beq.n	8031be8 <_malloc_r+0x6c>
 8031bc6:	6863      	ldr	r3, [r4, #4]
 8031bc8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8031bcc:	f023 0303 	bic.w	r3, r3, #3
 8031bd0:	60ca      	str	r2, [r1, #12]
 8031bd2:	4423      	add	r3, r4
 8031bd4:	6091      	str	r1, [r2, #8]
 8031bd6:	685a      	ldr	r2, [r3, #4]
 8031bd8:	f042 0201 	orr.w	r2, r2, #1
 8031bdc:	605a      	str	r2, [r3, #4]
 8031bde:	4628      	mov	r0, r5
 8031be0:	f000 fa0c 	bl	8031ffc <__malloc_unlock>
 8031be4:	3408      	adds	r4, #8
 8031be6:	e17b      	b.n	8031ee0 <_malloc_r+0x364>
 8031be8:	3302      	adds	r3, #2
 8031bea:	6934      	ldr	r4, [r6, #16]
 8031bec:	499f      	ldr	r1, [pc, #636]	; (8031e6c <_malloc_r+0x2f0>)
 8031bee:	428c      	cmp	r4, r1
 8031bf0:	d077      	beq.n	8031ce2 <_malloc_r+0x166>
 8031bf2:	6862      	ldr	r2, [r4, #4]
 8031bf4:	f022 0c03 	bic.w	ip, r2, #3
 8031bf8:	ebac 0007 	sub.w	r0, ip, r7
 8031bfc:	280f      	cmp	r0, #15
 8031bfe:	dd48      	ble.n	8031c92 <_malloc_r+0x116>
 8031c00:	19e2      	adds	r2, r4, r7
 8031c02:	f040 0301 	orr.w	r3, r0, #1
 8031c06:	f047 0701 	orr.w	r7, r7, #1
 8031c0a:	6067      	str	r7, [r4, #4]
 8031c0c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8031c10:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8031c14:	6053      	str	r3, [r2, #4]
 8031c16:	f844 000c 	str.w	r0, [r4, ip]
 8031c1a:	e7e0      	b.n	8031bde <_malloc_r+0x62>
 8031c1c:	0a7b      	lsrs	r3, r7, #9
 8031c1e:	d02a      	beq.n	8031c76 <_malloc_r+0xfa>
 8031c20:	2b04      	cmp	r3, #4
 8031c22:	d812      	bhi.n	8031c4a <_malloc_r+0xce>
 8031c24:	09bb      	lsrs	r3, r7, #6
 8031c26:	3338      	adds	r3, #56	; 0x38
 8031c28:	1c5a      	adds	r2, r3, #1
 8031c2a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8031c2e:	f1a2 0c08 	sub.w	ip, r2, #8
 8031c32:	6854      	ldr	r4, [r2, #4]
 8031c34:	4564      	cmp	r4, ip
 8031c36:	d006      	beq.n	8031c46 <_malloc_r+0xca>
 8031c38:	6862      	ldr	r2, [r4, #4]
 8031c3a:	f022 0203 	bic.w	r2, r2, #3
 8031c3e:	1bd0      	subs	r0, r2, r7
 8031c40:	280f      	cmp	r0, #15
 8031c42:	dd1c      	ble.n	8031c7e <_malloc_r+0x102>
 8031c44:	3b01      	subs	r3, #1
 8031c46:	3301      	adds	r3, #1
 8031c48:	e7cf      	b.n	8031bea <_malloc_r+0x6e>
 8031c4a:	2b14      	cmp	r3, #20
 8031c4c:	d801      	bhi.n	8031c52 <_malloc_r+0xd6>
 8031c4e:	335b      	adds	r3, #91	; 0x5b
 8031c50:	e7ea      	b.n	8031c28 <_malloc_r+0xac>
 8031c52:	2b54      	cmp	r3, #84	; 0x54
 8031c54:	d802      	bhi.n	8031c5c <_malloc_r+0xe0>
 8031c56:	0b3b      	lsrs	r3, r7, #12
 8031c58:	336e      	adds	r3, #110	; 0x6e
 8031c5a:	e7e5      	b.n	8031c28 <_malloc_r+0xac>
 8031c5c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8031c60:	d802      	bhi.n	8031c68 <_malloc_r+0xec>
 8031c62:	0bfb      	lsrs	r3, r7, #15
 8031c64:	3377      	adds	r3, #119	; 0x77
 8031c66:	e7df      	b.n	8031c28 <_malloc_r+0xac>
 8031c68:	f240 5254 	movw	r2, #1364	; 0x554
 8031c6c:	4293      	cmp	r3, r2
 8031c6e:	d804      	bhi.n	8031c7a <_malloc_r+0xfe>
 8031c70:	0cbb      	lsrs	r3, r7, #18
 8031c72:	337c      	adds	r3, #124	; 0x7c
 8031c74:	e7d8      	b.n	8031c28 <_malloc_r+0xac>
 8031c76:	233f      	movs	r3, #63	; 0x3f
 8031c78:	e7d6      	b.n	8031c28 <_malloc_r+0xac>
 8031c7a:	237e      	movs	r3, #126	; 0x7e
 8031c7c:	e7d4      	b.n	8031c28 <_malloc_r+0xac>
 8031c7e:	2800      	cmp	r0, #0
 8031c80:	68e1      	ldr	r1, [r4, #12]
 8031c82:	db04      	blt.n	8031c8e <_malloc_r+0x112>
 8031c84:	68a3      	ldr	r3, [r4, #8]
 8031c86:	60d9      	str	r1, [r3, #12]
 8031c88:	608b      	str	r3, [r1, #8]
 8031c8a:	18a3      	adds	r3, r4, r2
 8031c8c:	e7a3      	b.n	8031bd6 <_malloc_r+0x5a>
 8031c8e:	460c      	mov	r4, r1
 8031c90:	e7d0      	b.n	8031c34 <_malloc_r+0xb8>
 8031c92:	2800      	cmp	r0, #0
 8031c94:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8031c98:	db07      	blt.n	8031caa <_malloc_r+0x12e>
 8031c9a:	44a4      	add	ip, r4
 8031c9c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8031ca0:	f043 0301 	orr.w	r3, r3, #1
 8031ca4:	f8cc 3004 	str.w	r3, [ip, #4]
 8031ca8:	e799      	b.n	8031bde <_malloc_r+0x62>
 8031caa:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8031cae:	6870      	ldr	r0, [r6, #4]
 8031cb0:	f080 8095 	bcs.w	8031dde <_malloc_r+0x262>
 8031cb4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8031cb8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8031cbc:	f04f 0c01 	mov.w	ip, #1
 8031cc0:	3201      	adds	r2, #1
 8031cc2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8031cc6:	ea4c 0000 	orr.w	r0, ip, r0
 8031cca:	6070      	str	r0, [r6, #4]
 8031ccc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8031cd0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8031cd4:	3808      	subs	r0, #8
 8031cd6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8031cda:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8031cde:	f8cc 400c 	str.w	r4, [ip, #12]
 8031ce2:	1098      	asrs	r0, r3, #2
 8031ce4:	2201      	movs	r2, #1
 8031ce6:	4082      	lsls	r2, r0
 8031ce8:	6870      	ldr	r0, [r6, #4]
 8031cea:	4290      	cmp	r0, r2
 8031cec:	d326      	bcc.n	8031d3c <_malloc_r+0x1c0>
 8031cee:	4210      	tst	r0, r2
 8031cf0:	d106      	bne.n	8031d00 <_malloc_r+0x184>
 8031cf2:	f023 0303 	bic.w	r3, r3, #3
 8031cf6:	0052      	lsls	r2, r2, #1
 8031cf8:	4210      	tst	r0, r2
 8031cfa:	f103 0304 	add.w	r3, r3, #4
 8031cfe:	d0fa      	beq.n	8031cf6 <_malloc_r+0x17a>
 8031d00:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8031d04:	46c1      	mov	r9, r8
 8031d06:	469e      	mov	lr, r3
 8031d08:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8031d0c:	454c      	cmp	r4, r9
 8031d0e:	f040 80b9 	bne.w	8031e84 <_malloc_r+0x308>
 8031d12:	f10e 0e01 	add.w	lr, lr, #1
 8031d16:	f01e 0f03 	tst.w	lr, #3
 8031d1a:	f109 0908 	add.w	r9, r9, #8
 8031d1e:	d1f3      	bne.n	8031d08 <_malloc_r+0x18c>
 8031d20:	0798      	lsls	r0, r3, #30
 8031d22:	f040 80e3 	bne.w	8031eec <_malloc_r+0x370>
 8031d26:	6873      	ldr	r3, [r6, #4]
 8031d28:	ea23 0302 	bic.w	r3, r3, r2
 8031d2c:	6073      	str	r3, [r6, #4]
 8031d2e:	6870      	ldr	r0, [r6, #4]
 8031d30:	0052      	lsls	r2, r2, #1
 8031d32:	4290      	cmp	r0, r2
 8031d34:	d302      	bcc.n	8031d3c <_malloc_r+0x1c0>
 8031d36:	2a00      	cmp	r2, #0
 8031d38:	f040 80e5 	bne.w	8031f06 <_malloc_r+0x38a>
 8031d3c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8031d40:	f8da 3004 	ldr.w	r3, [sl, #4]
 8031d44:	f023 0903 	bic.w	r9, r3, #3
 8031d48:	45b9      	cmp	r9, r7
 8031d4a:	d304      	bcc.n	8031d56 <_malloc_r+0x1da>
 8031d4c:	eba9 0207 	sub.w	r2, r9, r7
 8031d50:	2a0f      	cmp	r2, #15
 8031d52:	f300 8141 	bgt.w	8031fd8 <_malloc_r+0x45c>
 8031d56:	4b46      	ldr	r3, [pc, #280]	; (8031e70 <_malloc_r+0x2f4>)
 8031d58:	6819      	ldr	r1, [r3, #0]
 8031d5a:	3110      	adds	r1, #16
 8031d5c:	4439      	add	r1, r7
 8031d5e:	2008      	movs	r0, #8
 8031d60:	9101      	str	r1, [sp, #4]
 8031d62:	f002 fc3d 	bl	80345e0 <sysconf>
 8031d66:	4a43      	ldr	r2, [pc, #268]	; (8031e74 <_malloc_r+0x2f8>)
 8031d68:	9901      	ldr	r1, [sp, #4]
 8031d6a:	6813      	ldr	r3, [r2, #0]
 8031d6c:	3301      	adds	r3, #1
 8031d6e:	bf1f      	itttt	ne
 8031d70:	f101 31ff 	addne.w	r1, r1, #4294967295
 8031d74:	1809      	addne	r1, r1, r0
 8031d76:	4243      	negne	r3, r0
 8031d78:	4019      	andne	r1, r3
 8031d7a:	4680      	mov	r8, r0
 8031d7c:	4628      	mov	r0, r5
 8031d7e:	9101      	str	r1, [sp, #4]
 8031d80:	f002 fc0a 	bl	8034598 <_sbrk_r>
 8031d84:	1c42      	adds	r2, r0, #1
 8031d86:	eb0a 0b09 	add.w	fp, sl, r9
 8031d8a:	4604      	mov	r4, r0
 8031d8c:	f000 80f7 	beq.w	8031f7e <_malloc_r+0x402>
 8031d90:	4583      	cmp	fp, r0
 8031d92:	9901      	ldr	r1, [sp, #4]
 8031d94:	4a37      	ldr	r2, [pc, #220]	; (8031e74 <_malloc_r+0x2f8>)
 8031d96:	d902      	bls.n	8031d9e <_malloc_r+0x222>
 8031d98:	45b2      	cmp	sl, r6
 8031d9a:	f040 80f0 	bne.w	8031f7e <_malloc_r+0x402>
 8031d9e:	4b36      	ldr	r3, [pc, #216]	; (8031e78 <_malloc_r+0x2fc>)
 8031da0:	6818      	ldr	r0, [r3, #0]
 8031da2:	45a3      	cmp	fp, r4
 8031da4:	eb00 0e01 	add.w	lr, r0, r1
 8031da8:	f8c3 e000 	str.w	lr, [r3]
 8031dac:	f108 3cff 	add.w	ip, r8, #4294967295
 8031db0:	f040 80ab 	bne.w	8031f0a <_malloc_r+0x38e>
 8031db4:	ea1b 0f0c 	tst.w	fp, ip
 8031db8:	f040 80a7 	bne.w	8031f0a <_malloc_r+0x38e>
 8031dbc:	68b2      	ldr	r2, [r6, #8]
 8031dbe:	4449      	add	r1, r9
 8031dc0:	f041 0101 	orr.w	r1, r1, #1
 8031dc4:	6051      	str	r1, [r2, #4]
 8031dc6:	4a2d      	ldr	r2, [pc, #180]	; (8031e7c <_malloc_r+0x300>)
 8031dc8:	681b      	ldr	r3, [r3, #0]
 8031dca:	6811      	ldr	r1, [r2, #0]
 8031dcc:	428b      	cmp	r3, r1
 8031dce:	bf88      	it	hi
 8031dd0:	6013      	strhi	r3, [r2, #0]
 8031dd2:	4a2b      	ldr	r2, [pc, #172]	; (8031e80 <_malloc_r+0x304>)
 8031dd4:	6811      	ldr	r1, [r2, #0]
 8031dd6:	428b      	cmp	r3, r1
 8031dd8:	bf88      	it	hi
 8031dda:	6013      	strhi	r3, [r2, #0]
 8031ddc:	e0cf      	b.n	8031f7e <_malloc_r+0x402>
 8031dde:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8031de2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8031de6:	d218      	bcs.n	8031e1a <_malloc_r+0x29e>
 8031de8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8031dec:	3238      	adds	r2, #56	; 0x38
 8031dee:	f102 0e01 	add.w	lr, r2, #1
 8031df2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8031df6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8031dfa:	45f0      	cmp	r8, lr
 8031dfc:	d12b      	bne.n	8031e56 <_malloc_r+0x2da>
 8031dfe:	1092      	asrs	r2, r2, #2
 8031e00:	f04f 0c01 	mov.w	ip, #1
 8031e04:	fa0c f202 	lsl.w	r2, ip, r2
 8031e08:	4302      	orrs	r2, r0
 8031e0a:	6072      	str	r2, [r6, #4]
 8031e0c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8031e10:	f8c8 4008 	str.w	r4, [r8, #8]
 8031e14:	f8ce 400c 	str.w	r4, [lr, #12]
 8031e18:	e763      	b.n	8031ce2 <_malloc_r+0x166>
 8031e1a:	2a14      	cmp	r2, #20
 8031e1c:	d801      	bhi.n	8031e22 <_malloc_r+0x2a6>
 8031e1e:	325b      	adds	r2, #91	; 0x5b
 8031e20:	e7e5      	b.n	8031dee <_malloc_r+0x272>
 8031e22:	2a54      	cmp	r2, #84	; 0x54
 8031e24:	d803      	bhi.n	8031e2e <_malloc_r+0x2b2>
 8031e26:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8031e2a:	326e      	adds	r2, #110	; 0x6e
 8031e2c:	e7df      	b.n	8031dee <_malloc_r+0x272>
 8031e2e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8031e32:	d803      	bhi.n	8031e3c <_malloc_r+0x2c0>
 8031e34:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8031e38:	3277      	adds	r2, #119	; 0x77
 8031e3a:	e7d8      	b.n	8031dee <_malloc_r+0x272>
 8031e3c:	f240 5e54 	movw	lr, #1364	; 0x554
 8031e40:	4572      	cmp	r2, lr
 8031e42:	bf9a      	itte	ls
 8031e44:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8031e48:	327c      	addls	r2, #124	; 0x7c
 8031e4a:	227e      	movhi	r2, #126	; 0x7e
 8031e4c:	e7cf      	b.n	8031dee <_malloc_r+0x272>
 8031e4e:	f8de e008 	ldr.w	lr, [lr, #8]
 8031e52:	45f0      	cmp	r8, lr
 8031e54:	d005      	beq.n	8031e62 <_malloc_r+0x2e6>
 8031e56:	f8de 2004 	ldr.w	r2, [lr, #4]
 8031e5a:	f022 0203 	bic.w	r2, r2, #3
 8031e5e:	4562      	cmp	r2, ip
 8031e60:	d8f5      	bhi.n	8031e4e <_malloc_r+0x2d2>
 8031e62:	f8de 800c 	ldr.w	r8, [lr, #12]
 8031e66:	e7d1      	b.n	8031e0c <_malloc_r+0x290>
 8031e68:	200003b0 	.word	0x200003b0
 8031e6c:	200003b8 	.word	0x200003b8
 8031e70:	20008c20 	.word	0x20008c20
 8031e74:	200007b8 	.word	0x200007b8
 8031e78:	20008bf0 	.word	0x20008bf0
 8031e7c:	20008c18 	.word	0x20008c18
 8031e80:	20008c1c 	.word	0x20008c1c
 8031e84:	6860      	ldr	r0, [r4, #4]
 8031e86:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8031e8a:	f020 0003 	bic.w	r0, r0, #3
 8031e8e:	eba0 0a07 	sub.w	sl, r0, r7
 8031e92:	f1ba 0f0f 	cmp.w	sl, #15
 8031e96:	dd12      	ble.n	8031ebe <_malloc_r+0x342>
 8031e98:	68a3      	ldr	r3, [r4, #8]
 8031e9a:	19e2      	adds	r2, r4, r7
 8031e9c:	f047 0701 	orr.w	r7, r7, #1
 8031ea0:	6067      	str	r7, [r4, #4]
 8031ea2:	f8c3 c00c 	str.w	ip, [r3, #12]
 8031ea6:	f8cc 3008 	str.w	r3, [ip, #8]
 8031eaa:	f04a 0301 	orr.w	r3, sl, #1
 8031eae:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8031eb2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8031eb6:	6053      	str	r3, [r2, #4]
 8031eb8:	f844 a000 	str.w	sl, [r4, r0]
 8031ebc:	e68f      	b.n	8031bde <_malloc_r+0x62>
 8031ebe:	f1ba 0f00 	cmp.w	sl, #0
 8031ec2:	db11      	blt.n	8031ee8 <_malloc_r+0x36c>
 8031ec4:	4420      	add	r0, r4
 8031ec6:	6843      	ldr	r3, [r0, #4]
 8031ec8:	f043 0301 	orr.w	r3, r3, #1
 8031ecc:	6043      	str	r3, [r0, #4]
 8031ece:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8031ed2:	4628      	mov	r0, r5
 8031ed4:	f8c3 c00c 	str.w	ip, [r3, #12]
 8031ed8:	f8cc 3008 	str.w	r3, [ip, #8]
 8031edc:	f000 f88e 	bl	8031ffc <__malloc_unlock>
 8031ee0:	4620      	mov	r0, r4
 8031ee2:	b003      	add	sp, #12
 8031ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031ee8:	4664      	mov	r4, ip
 8031eea:	e70f      	b.n	8031d0c <_malloc_r+0x190>
 8031eec:	f858 0908 	ldr.w	r0, [r8], #-8
 8031ef0:	4540      	cmp	r0, r8
 8031ef2:	f103 33ff 	add.w	r3, r3, #4294967295
 8031ef6:	f43f af13 	beq.w	8031d20 <_malloc_r+0x1a4>
 8031efa:	e718      	b.n	8031d2e <_malloc_r+0x1b2>
 8031efc:	3304      	adds	r3, #4
 8031efe:	0052      	lsls	r2, r2, #1
 8031f00:	4210      	tst	r0, r2
 8031f02:	d0fb      	beq.n	8031efc <_malloc_r+0x380>
 8031f04:	e6fc      	b.n	8031d00 <_malloc_r+0x184>
 8031f06:	4673      	mov	r3, lr
 8031f08:	e7fa      	b.n	8031f00 <_malloc_r+0x384>
 8031f0a:	6810      	ldr	r0, [r2, #0]
 8031f0c:	3001      	adds	r0, #1
 8031f0e:	bf1b      	ittet	ne
 8031f10:	eba4 0b0b 	subne.w	fp, r4, fp
 8031f14:	eb0b 020e 	addne.w	r2, fp, lr
 8031f18:	6014      	streq	r4, [r2, #0]
 8031f1a:	601a      	strne	r2, [r3, #0]
 8031f1c:	f014 0b07 	ands.w	fp, r4, #7
 8031f20:	bf1a      	itte	ne
 8031f22:	f1cb 0008 	rsbne	r0, fp, #8
 8031f26:	1824      	addne	r4, r4, r0
 8031f28:	4658      	moveq	r0, fp
 8031f2a:	1862      	adds	r2, r4, r1
 8031f2c:	ea02 010c 	and.w	r1, r2, ip
 8031f30:	4480      	add	r8, r0
 8031f32:	eba8 0801 	sub.w	r8, r8, r1
 8031f36:	ea08 080c 	and.w	r8, r8, ip
 8031f3a:	4641      	mov	r1, r8
 8031f3c:	4628      	mov	r0, r5
 8031f3e:	9201      	str	r2, [sp, #4]
 8031f40:	f002 fb2a 	bl	8034598 <_sbrk_r>
 8031f44:	1c43      	adds	r3, r0, #1
 8031f46:	9a01      	ldr	r2, [sp, #4]
 8031f48:	4b28      	ldr	r3, [pc, #160]	; (8031fec <_malloc_r+0x470>)
 8031f4a:	d107      	bne.n	8031f5c <_malloc_r+0x3e0>
 8031f4c:	f1bb 0f00 	cmp.w	fp, #0
 8031f50:	d023      	beq.n	8031f9a <_malloc_r+0x41e>
 8031f52:	f1ab 0008 	sub.w	r0, fp, #8
 8031f56:	4410      	add	r0, r2
 8031f58:	f04f 0800 	mov.w	r8, #0
 8031f5c:	681a      	ldr	r2, [r3, #0]
 8031f5e:	60b4      	str	r4, [r6, #8]
 8031f60:	1b00      	subs	r0, r0, r4
 8031f62:	4440      	add	r0, r8
 8031f64:	4442      	add	r2, r8
 8031f66:	f040 0001 	orr.w	r0, r0, #1
 8031f6a:	45b2      	cmp	sl, r6
 8031f6c:	601a      	str	r2, [r3, #0]
 8031f6e:	6060      	str	r0, [r4, #4]
 8031f70:	f43f af29 	beq.w	8031dc6 <_malloc_r+0x24a>
 8031f74:	f1b9 0f0f 	cmp.w	r9, #15
 8031f78:	d812      	bhi.n	8031fa0 <_malloc_r+0x424>
 8031f7a:	2301      	movs	r3, #1
 8031f7c:	6063      	str	r3, [r4, #4]
 8031f7e:	68b3      	ldr	r3, [r6, #8]
 8031f80:	685b      	ldr	r3, [r3, #4]
 8031f82:	f023 0303 	bic.w	r3, r3, #3
 8031f86:	42bb      	cmp	r3, r7
 8031f88:	eba3 0207 	sub.w	r2, r3, r7
 8031f8c:	d301      	bcc.n	8031f92 <_malloc_r+0x416>
 8031f8e:	2a0f      	cmp	r2, #15
 8031f90:	dc22      	bgt.n	8031fd8 <_malloc_r+0x45c>
 8031f92:	4628      	mov	r0, r5
 8031f94:	f000 f832 	bl	8031ffc <__malloc_unlock>
 8031f98:	e5fc      	b.n	8031b94 <_malloc_r+0x18>
 8031f9a:	4610      	mov	r0, r2
 8031f9c:	46d8      	mov	r8, fp
 8031f9e:	e7dd      	b.n	8031f5c <_malloc_r+0x3e0>
 8031fa0:	f8da 2004 	ldr.w	r2, [sl, #4]
 8031fa4:	f1a9 090c 	sub.w	r9, r9, #12
 8031fa8:	f029 0907 	bic.w	r9, r9, #7
 8031fac:	f002 0201 	and.w	r2, r2, #1
 8031fb0:	ea42 0209 	orr.w	r2, r2, r9
 8031fb4:	f8ca 2004 	str.w	r2, [sl, #4]
 8031fb8:	2105      	movs	r1, #5
 8031fba:	eb0a 0209 	add.w	r2, sl, r9
 8031fbe:	f1b9 0f0f 	cmp.w	r9, #15
 8031fc2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8031fc6:	f67f aefe 	bls.w	8031dc6 <_malloc_r+0x24a>
 8031fca:	f10a 0108 	add.w	r1, sl, #8
 8031fce:	4628      	mov	r0, r5
 8031fd0:	f7ff fd14 	bl	80319fc <_free_r>
 8031fd4:	4b05      	ldr	r3, [pc, #20]	; (8031fec <_malloc_r+0x470>)
 8031fd6:	e6f6      	b.n	8031dc6 <_malloc_r+0x24a>
 8031fd8:	68b4      	ldr	r4, [r6, #8]
 8031fda:	f047 0301 	orr.w	r3, r7, #1
 8031fde:	4427      	add	r7, r4
 8031fe0:	f042 0201 	orr.w	r2, r2, #1
 8031fe4:	6063      	str	r3, [r4, #4]
 8031fe6:	60b7      	str	r7, [r6, #8]
 8031fe8:	607a      	str	r2, [r7, #4]
 8031fea:	e5f8      	b.n	8031bde <_malloc_r+0x62>
 8031fec:	20008bf0 	.word	0x20008bf0

08031ff0 <__malloc_lock>:
 8031ff0:	4801      	ldr	r0, [pc, #4]	; (8031ff8 <__malloc_lock+0x8>)
 8031ff2:	f7ff bc8f 	b.w	8031914 <__retarget_lock_acquire_recursive>
 8031ff6:	bf00      	nop
 8031ff8:	20008be9 	.word	0x20008be9

08031ffc <__malloc_unlock>:
 8031ffc:	4801      	ldr	r0, [pc, #4]	; (8032004 <__malloc_unlock+0x8>)
 8031ffe:	f7ff bc8a 	b.w	8031916 <__retarget_lock_release_recursive>
 8032002:	bf00      	nop
 8032004:	20008be9 	.word	0x20008be9

08032008 <_vfprintf_r>:
 8032008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803200c:	ed2d 8b04 	vpush	{d8-d9}
 8032010:	b0cf      	sub	sp, #316	; 0x13c
 8032012:	468b      	mov	fp, r1
 8032014:	4691      	mov	r9, r2
 8032016:	461c      	mov	r4, r3
 8032018:	461d      	mov	r5, r3
 803201a:	4682      	mov	sl, r0
 803201c:	f002 fab8 	bl	8034590 <_localeconv_r>
 8032020:	6803      	ldr	r3, [r0, #0]
 8032022:	9313      	str	r3, [sp, #76]	; 0x4c
 8032024:	4618      	mov	r0, r3
 8032026:	f7f0 f8d3 	bl	80221d0 <strlen>
 803202a:	900e      	str	r0, [sp, #56]	; 0x38
 803202c:	f1ba 0f00 	cmp.w	sl, #0
 8032030:	d005      	beq.n	803203e <_vfprintf_r+0x36>
 8032032:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 8032036:	b913      	cbnz	r3, 803203e <_vfprintf_r+0x36>
 8032038:	4650      	mov	r0, sl
 803203a:	f7ff fb17 	bl	803166c <__sinit>
 803203e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8032042:	07d8      	lsls	r0, r3, #31
 8032044:	d407      	bmi.n	8032056 <_vfprintf_r+0x4e>
 8032046:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803204a:	0599      	lsls	r1, r3, #22
 803204c:	d403      	bmi.n	8032056 <_vfprintf_r+0x4e>
 803204e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 8032052:	f7ff fc5f 	bl	8031914 <__retarget_lock_acquire_recursive>
 8032056:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 803205a:	049a      	lsls	r2, r3, #18
 803205c:	d409      	bmi.n	8032072 <_vfprintf_r+0x6a>
 803205e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8032062:	f8ab 300c 	strh.w	r3, [fp, #12]
 8032066:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 803206a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 803206e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
 8032072:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8032076:	071b      	lsls	r3, r3, #28
 8032078:	d502      	bpl.n	8032080 <_vfprintf_r+0x78>
 803207a:	f8db 3010 	ldr.w	r3, [fp, #16]
 803207e:	b9d3      	cbnz	r3, 80320b6 <_vfprintf_r+0xae>
 8032080:	4659      	mov	r1, fp
 8032082:	4650      	mov	r0, sl
 8032084:	f002 f98e 	bl	80343a4 <__swsetup_r>
 8032088:	b1a8      	cbz	r0, 80320b6 <_vfprintf_r+0xae>
 803208a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 803208e:	07df      	lsls	r7, r3, #31
 8032090:	d508      	bpl.n	80320a4 <_vfprintf_r+0x9c>
 8032092:	f04f 33ff 	mov.w	r3, #4294967295
 8032096:	930f      	str	r3, [sp, #60]	; 0x3c
 8032098:	980f      	ldr	r0, [sp, #60]	; 0x3c
 803209a:	b04f      	add	sp, #316	; 0x13c
 803209c:	ecbd 8b04 	vpop	{d8-d9}
 80320a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80320a4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80320a8:	059e      	lsls	r6, r3, #22
 80320aa:	d4f2      	bmi.n	8032092 <_vfprintf_r+0x8a>
 80320ac:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 80320b0:	f7ff fc31 	bl	8031916 <__retarget_lock_release_recursive>
 80320b4:	e7ed      	b.n	8032092 <_vfprintf_r+0x8a>
 80320b6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80320ba:	f003 021a 	and.w	r2, r3, #26
 80320be:	2a0a      	cmp	r2, #10
 80320c0:	d118      	bne.n	80320f4 <_vfprintf_r+0xec>
 80320c2:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 80320c6:	2a00      	cmp	r2, #0
 80320c8:	db14      	blt.n	80320f4 <_vfprintf_r+0xec>
 80320ca:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 80320ce:	07d5      	lsls	r5, r2, #31
 80320d0:	d405      	bmi.n	80320de <_vfprintf_r+0xd6>
 80320d2:	0598      	lsls	r0, r3, #22
 80320d4:	d403      	bmi.n	80320de <_vfprintf_r+0xd6>
 80320d6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 80320da:	f7ff fc1c 	bl	8031916 <__retarget_lock_release_recursive>
 80320de:	4623      	mov	r3, r4
 80320e0:	464a      	mov	r2, r9
 80320e2:	4659      	mov	r1, fp
 80320e4:	4650      	mov	r0, sl
 80320e6:	b04f      	add	sp, #316	; 0x13c
 80320e8:	ecbd 8b04 	vpop	{d8-d9}
 80320ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80320f0:	f001 b9be 	b.w	8033470 <__sbprintf>
 80320f4:	ed9f 7b92 	vldr	d7, [pc, #584]	; 8032340 <_vfprintf_r+0x338>
 80320f8:	2300      	movs	r3, #0
 80320fa:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 80320fe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8032102:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8032106:	ac25      	add	r4, sp, #148	; 0x94
 8032108:	9422      	str	r4, [sp, #136]	; 0x88
 803210a:	9305      	str	r3, [sp, #20]
 803210c:	930a      	str	r3, [sp, #40]	; 0x28
 803210e:	9312      	str	r3, [sp, #72]	; 0x48
 8032110:	9314      	str	r3, [sp, #80]	; 0x50
 8032112:	930f      	str	r3, [sp, #60]	; 0x3c
 8032114:	464b      	mov	r3, r9
 8032116:	461e      	mov	r6, r3
 8032118:	f813 2b01 	ldrb.w	r2, [r3], #1
 803211c:	b10a      	cbz	r2, 8032122 <_vfprintf_r+0x11a>
 803211e:	2a25      	cmp	r2, #37	; 0x25
 8032120:	d1f9      	bne.n	8032116 <_vfprintf_r+0x10e>
 8032122:	ebb6 0709 	subs.w	r7, r6, r9
 8032126:	d00d      	beq.n	8032144 <_vfprintf_r+0x13c>
 8032128:	9b24      	ldr	r3, [sp, #144]	; 0x90
 803212a:	443b      	add	r3, r7
 803212c:	9324      	str	r3, [sp, #144]	; 0x90
 803212e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8032130:	3301      	adds	r3, #1
 8032132:	2b07      	cmp	r3, #7
 8032134:	e9c4 9700 	strd	r9, r7, [r4]
 8032138:	9323      	str	r3, [sp, #140]	; 0x8c
 803213a:	dc79      	bgt.n	8032230 <_vfprintf_r+0x228>
 803213c:	3408      	adds	r4, #8
 803213e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8032140:	443b      	add	r3, r7
 8032142:	930f      	str	r3, [sp, #60]	; 0x3c
 8032144:	7833      	ldrb	r3, [r6, #0]
 8032146:	2b00      	cmp	r3, #0
 8032148:	f001 814e 	beq.w	80333e8 <_vfprintf_r+0x13e0>
 803214c:	2300      	movs	r3, #0
 803214e:	f04f 32ff 	mov.w	r2, #4294967295
 8032152:	3601      	adds	r6, #1
 8032154:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8032158:	9204      	str	r2, [sp, #16]
 803215a:	9310      	str	r3, [sp, #64]	; 0x40
 803215c:	4698      	mov	r8, r3
 803215e:	270a      	movs	r7, #10
 8032160:	212b      	movs	r1, #43	; 0x2b
 8032162:	4633      	mov	r3, r6
 8032164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032168:	9207      	str	r2, [sp, #28]
 803216a:	930b      	str	r3, [sp, #44]	; 0x2c
 803216c:	9b07      	ldr	r3, [sp, #28]
 803216e:	3b20      	subs	r3, #32
 8032170:	2b5a      	cmp	r3, #90	; 0x5a
 8032172:	f200 85c4 	bhi.w	8032cfe <_vfprintf_r+0xcf6>
 8032176:	e8df f013 	tbh	[pc, r3, lsl #1]
 803217a:	007e      	.short	0x007e
 803217c:	05c205c2 	.word	0x05c205c2
 8032180:	05c20086 	.word	0x05c20086
 8032184:	05c205c2 	.word	0x05c205c2
 8032188:	05c20065 	.word	0x05c20065
 803218c:	008905c2 	.word	0x008905c2
 8032190:	05c20093 	.word	0x05c20093
 8032194:	00960090 	.word	0x00960090
 8032198:	00b205c2 	.word	0x00b205c2
 803219c:	00b500b5 	.word	0x00b500b5
 80321a0:	00b500b5 	.word	0x00b500b5
 80321a4:	00b500b5 	.word	0x00b500b5
 80321a8:	00b500b5 	.word	0x00b500b5
 80321ac:	05c200b5 	.word	0x05c200b5
 80321b0:	05c205c2 	.word	0x05c205c2
 80321b4:	05c205c2 	.word	0x05c205c2
 80321b8:	05c205c2 	.word	0x05c205c2
 80321bc:	05c2012a 	.word	0x05c2012a
 80321c0:	00fa00e7 	.word	0x00fa00e7
 80321c4:	012a012a 	.word	0x012a012a
 80321c8:	05c2012a 	.word	0x05c2012a
 80321cc:	05c205c2 	.word	0x05c205c2
 80321d0:	00c505c2 	.word	0x00c505c2
 80321d4:	05c205c2 	.word	0x05c205c2
 80321d8:	05c204a2 	.word	0x05c204a2
 80321dc:	05c205c2 	.word	0x05c205c2
 80321e0:	05c204eb 	.word	0x05c204eb
 80321e4:	05c2050c 	.word	0x05c2050c
 80321e8:	052e05c2 	.word	0x052e05c2
 80321ec:	05c205c2 	.word	0x05c205c2
 80321f0:	05c205c2 	.word	0x05c205c2
 80321f4:	05c205c2 	.word	0x05c205c2
 80321f8:	05c205c2 	.word	0x05c205c2
 80321fc:	05c2012a 	.word	0x05c2012a
 8032200:	00fc00e7 	.word	0x00fc00e7
 8032204:	012a012a 	.word	0x012a012a
 8032208:	00c8012a 	.word	0x00c8012a
 803220c:	00dc00fc 	.word	0x00dc00fc
 8032210:	00d505c2 	.word	0x00d505c2
 8032214:	047d05c2 	.word	0x047d05c2
 8032218:	04da04a4 	.word	0x04da04a4
 803221c:	05c200dc 	.word	0x05c200dc
 8032220:	007c04eb 	.word	0x007c04eb
 8032224:	05c2050e 	.word	0x05c2050e
 8032228:	054d05c2 	.word	0x054d05c2
 803222c:	007c05c2 	.word	0x007c05c2
 8032230:	aa22      	add	r2, sp, #136	; 0x88
 8032232:	4659      	mov	r1, fp
 8032234:	4650      	mov	r0, sl
 8032236:	f001 f95b 	bl	80334f0 <__sprint_r>
 803223a:	2800      	cmp	r0, #0
 803223c:	f040 8135 	bne.w	80324aa <_vfprintf_r+0x4a2>
 8032240:	ac25      	add	r4, sp, #148	; 0x94
 8032242:	e77c      	b.n	803213e <_vfprintf_r+0x136>
 8032244:	4650      	mov	r0, sl
 8032246:	f002 f9a3 	bl	8034590 <_localeconv_r>
 803224a:	6843      	ldr	r3, [r0, #4]
 803224c:	9314      	str	r3, [sp, #80]	; 0x50
 803224e:	4618      	mov	r0, r3
 8032250:	f7ef ffbe 	bl	80221d0 <strlen>
 8032254:	9012      	str	r0, [sp, #72]	; 0x48
 8032256:	4650      	mov	r0, sl
 8032258:	f002 f99a 	bl	8034590 <_localeconv_r>
 803225c:	6883      	ldr	r3, [r0, #8]
 803225e:	930a      	str	r3, [sp, #40]	; 0x28
 8032260:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8032262:	212b      	movs	r1, #43	; 0x2b
 8032264:	b12b      	cbz	r3, 8032272 <_vfprintf_r+0x26a>
 8032266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8032268:	b11b      	cbz	r3, 8032272 <_vfprintf_r+0x26a>
 803226a:	781b      	ldrb	r3, [r3, #0]
 803226c:	b10b      	cbz	r3, 8032272 <_vfprintf_r+0x26a>
 803226e:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8032272:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8032274:	e775      	b.n	8032162 <_vfprintf_r+0x15a>
 8032276:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 803227a:	2b00      	cmp	r3, #0
 803227c:	d1f9      	bne.n	8032272 <_vfprintf_r+0x26a>
 803227e:	2320      	movs	r3, #32
 8032280:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8032284:	e7f5      	b.n	8032272 <_vfprintf_r+0x26a>
 8032286:	f048 0801 	orr.w	r8, r8, #1
 803228a:	e7f2      	b.n	8032272 <_vfprintf_r+0x26a>
 803228c:	f855 3b04 	ldr.w	r3, [r5], #4
 8032290:	9310      	str	r3, [sp, #64]	; 0x40
 8032292:	2b00      	cmp	r3, #0
 8032294:	daed      	bge.n	8032272 <_vfprintf_r+0x26a>
 8032296:	425b      	negs	r3, r3
 8032298:	9310      	str	r3, [sp, #64]	; 0x40
 803229a:	f048 0804 	orr.w	r8, r8, #4
 803229e:	e7e8      	b.n	8032272 <_vfprintf_r+0x26a>
 80322a0:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 80322a4:	e7e5      	b.n	8032272 <_vfprintf_r+0x26a>
 80322a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80322a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80322ac:	9207      	str	r2, [sp, #28]
 80322ae:	2a2a      	cmp	r2, #42	; 0x2a
 80322b0:	d112      	bne.n	80322d8 <_vfprintf_r+0x2d0>
 80322b2:	f855 2b04 	ldr.w	r2, [r5], #4
 80322b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80322b8:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80322bc:	9204      	str	r2, [sp, #16]
 80322be:	e7d8      	b.n	8032272 <_vfprintf_r+0x26a>
 80322c0:	9804      	ldr	r0, [sp, #16]
 80322c2:	fb07 2200 	mla	r2, r7, r0, r2
 80322c6:	9204      	str	r2, [sp, #16]
 80322c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80322cc:	9207      	str	r2, [sp, #28]
 80322ce:	9a07      	ldr	r2, [sp, #28]
 80322d0:	3a30      	subs	r2, #48	; 0x30
 80322d2:	2a09      	cmp	r2, #9
 80322d4:	d9f4      	bls.n	80322c0 <_vfprintf_r+0x2b8>
 80322d6:	e748      	b.n	803216a <_vfprintf_r+0x162>
 80322d8:	2200      	movs	r2, #0
 80322da:	9204      	str	r2, [sp, #16]
 80322dc:	e7f7      	b.n	80322ce <_vfprintf_r+0x2c6>
 80322de:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80322e2:	e7c6      	b.n	8032272 <_vfprintf_r+0x26a>
 80322e4:	2200      	movs	r2, #0
 80322e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80322e8:	9210      	str	r2, [sp, #64]	; 0x40
 80322ea:	9a07      	ldr	r2, [sp, #28]
 80322ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 80322ee:	3a30      	subs	r2, #48	; 0x30
 80322f0:	fb07 2200 	mla	r2, r7, r0, r2
 80322f4:	9210      	str	r2, [sp, #64]	; 0x40
 80322f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80322fa:	9207      	str	r2, [sp, #28]
 80322fc:	3a30      	subs	r2, #48	; 0x30
 80322fe:	2a09      	cmp	r2, #9
 8032300:	d9f3      	bls.n	80322ea <_vfprintf_r+0x2e2>
 8032302:	e732      	b.n	803216a <_vfprintf_r+0x162>
 8032304:	f048 0808 	orr.w	r8, r8, #8
 8032308:	e7b3      	b.n	8032272 <_vfprintf_r+0x26a>
 803230a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 803230c:	781b      	ldrb	r3, [r3, #0]
 803230e:	2b68      	cmp	r3, #104	; 0x68
 8032310:	bf01      	itttt	eq
 8032312:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8032314:	3301      	addeq	r3, #1
 8032316:	930b      	streq	r3, [sp, #44]	; 0x2c
 8032318:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 803231c:	bf18      	it	ne
 803231e:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8032322:	e7a6      	b.n	8032272 <_vfprintf_r+0x26a>
 8032324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8032326:	781b      	ldrb	r3, [r3, #0]
 8032328:	2b6c      	cmp	r3, #108	; 0x6c
 803232a:	d105      	bne.n	8032338 <_vfprintf_r+0x330>
 803232c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 803232e:	3301      	adds	r3, #1
 8032330:	930b      	str	r3, [sp, #44]	; 0x2c
 8032332:	f048 0820 	orr.w	r8, r8, #32
 8032336:	e79c      	b.n	8032272 <_vfprintf_r+0x26a>
 8032338:	f048 0810 	orr.w	r8, r8, #16
 803233c:	e799      	b.n	8032272 <_vfprintf_r+0x26a>
 803233e:	bf00      	nop
	...
 8032348:	462a      	mov	r2, r5
 803234a:	f852 3b04 	ldr.w	r3, [r2], #4
 803234e:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8032352:	2300      	movs	r3, #0
 8032354:	9206      	str	r2, [sp, #24]
 8032356:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 803235a:	2600      	movs	r6, #0
 803235c:	9303      	str	r3, [sp, #12]
 803235e:	2301      	movs	r3, #1
 8032360:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8032364:	9304      	str	r3, [sp, #16]
 8032366:	4635      	mov	r5, r6
 8032368:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 803236c:	e1c6      	b.n	80326fc <_vfprintf_r+0x6f4>
 803236e:	f048 0810 	orr.w	r8, r8, #16
 8032372:	f018 0f20 	tst.w	r8, #32
 8032376:	d012      	beq.n	803239e <_vfprintf_r+0x396>
 8032378:	3507      	adds	r5, #7
 803237a:	f025 0307 	bic.w	r3, r5, #7
 803237e:	461a      	mov	r2, r3
 8032380:	685e      	ldr	r6, [r3, #4]
 8032382:	f852 5b08 	ldr.w	r5, [r2], #8
 8032386:	9206      	str	r2, [sp, #24]
 8032388:	2e00      	cmp	r6, #0
 803238a:	da06      	bge.n	803239a <_vfprintf_r+0x392>
 803238c:	426d      	negs	r5, r5
 803238e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8032392:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8032396:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 803239a:	2301      	movs	r3, #1
 803239c:	e3a2      	b.n	8032ae4 <_vfprintf_r+0xadc>
 803239e:	462b      	mov	r3, r5
 80323a0:	f018 0f10 	tst.w	r8, #16
 80323a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80323a8:	9306      	str	r3, [sp, #24]
 80323aa:	d002      	beq.n	80323b2 <_vfprintf_r+0x3aa>
 80323ac:	4635      	mov	r5, r6
 80323ae:	17f6      	asrs	r6, r6, #31
 80323b0:	e7ea      	b.n	8032388 <_vfprintf_r+0x380>
 80323b2:	f018 0f40 	tst.w	r8, #64	; 0x40
 80323b6:	d003      	beq.n	80323c0 <_vfprintf_r+0x3b8>
 80323b8:	b235      	sxth	r5, r6
 80323ba:	f346 36c0 	sbfx	r6, r6, #15, #1
 80323be:	e7e3      	b.n	8032388 <_vfprintf_r+0x380>
 80323c0:	f418 7f00 	tst.w	r8, #512	; 0x200
 80323c4:	d0f2      	beq.n	80323ac <_vfprintf_r+0x3a4>
 80323c6:	b275      	sxtb	r5, r6
 80323c8:	f346 16c0 	sbfx	r6, r6, #7, #1
 80323cc:	e7dc      	b.n	8032388 <_vfprintf_r+0x380>
 80323ce:	3507      	adds	r5, #7
 80323d0:	f025 0307 	bic.w	r3, r5, #7
 80323d4:	ecb3 7b02 	vldmia	r3!, {d7}
 80323d8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80323dc:	9306      	str	r3, [sp, #24]
 80323de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80323e0:	ee09 3a10 	vmov	s18, r3
 80323e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80323e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80323ea:	ee09 3a90 	vmov	s19, r3
 80323ee:	f04f 32ff 	mov.w	r2, #4294967295
 80323f2:	4b3f      	ldr	r3, [pc, #252]	; (80324f0 <_vfprintf_r+0x4e8>)
 80323f4:	ec51 0b19 	vmov	r0, r1, d9
 80323f8:	f7f0 fb98 	bl	8022b2c <__aeabi_dcmpun>
 80323fc:	bb10      	cbnz	r0, 8032444 <_vfprintf_r+0x43c>
 80323fe:	4b3c      	ldr	r3, [pc, #240]	; (80324f0 <_vfprintf_r+0x4e8>)
 8032400:	ec51 0b19 	vmov	r0, r1, d9
 8032404:	f04f 32ff 	mov.w	r2, #4294967295
 8032408:	f7f0 fb72 	bl	8022af0 <__aeabi_dcmple>
 803240c:	b9d0      	cbnz	r0, 8032444 <_vfprintf_r+0x43c>
 803240e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8032412:	2200      	movs	r2, #0
 8032414:	2300      	movs	r3, #0
 8032416:	f7f0 fb61 	bl	8022adc <__aeabi_dcmplt>
 803241a:	b110      	cbz	r0, 8032422 <_vfprintf_r+0x41a>
 803241c:	232d      	movs	r3, #45	; 0x2d
 803241e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8032422:	4a34      	ldr	r2, [pc, #208]	; (80324f4 <_vfprintf_r+0x4ec>)
 8032424:	4b34      	ldr	r3, [pc, #208]	; (80324f8 <_vfprintf_r+0x4f0>)
 8032426:	9907      	ldr	r1, [sp, #28]
 8032428:	2947      	cmp	r1, #71	; 0x47
 803242a:	bfd4      	ite	le
 803242c:	4691      	movle	r9, r2
 803242e:	4699      	movgt	r9, r3
 8032430:	2100      	movs	r1, #0
 8032432:	2303      	movs	r3, #3
 8032434:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8032438:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 803243c:	2600      	movs	r6, #0
 803243e:	4633      	mov	r3, r6
 8032440:	f001 b80c 	b.w	803345c <_vfprintf_r+0x1454>
 8032444:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8032448:	4610      	mov	r0, r2
 803244a:	4619      	mov	r1, r3
 803244c:	f7f0 fb6e 	bl	8022b2c <__aeabi_dcmpun>
 8032450:	b140      	cbz	r0, 8032464 <_vfprintf_r+0x45c>
 8032452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8032454:	4a29      	ldr	r2, [pc, #164]	; (80324fc <_vfprintf_r+0x4f4>)
 8032456:	2b00      	cmp	r3, #0
 8032458:	bfbc      	itt	lt
 803245a:	232d      	movlt	r3, #45	; 0x2d
 803245c:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8032460:	4b27      	ldr	r3, [pc, #156]	; (8032500 <_vfprintf_r+0x4f8>)
 8032462:	e7e0      	b.n	8032426 <_vfprintf_r+0x41e>
 8032464:	9b07      	ldr	r3, [sp, #28]
 8032466:	f023 0320 	bic.w	r3, r3, #32
 803246a:	2b41      	cmp	r3, #65	; 0x41
 803246c:	9308      	str	r3, [sp, #32]
 803246e:	d12e      	bne.n	80324ce <_vfprintf_r+0x4c6>
 8032470:	2330      	movs	r3, #48	; 0x30
 8032472:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8032476:	9b07      	ldr	r3, [sp, #28]
 8032478:	2b61      	cmp	r3, #97	; 0x61
 803247a:	bf0c      	ite	eq
 803247c:	2378      	moveq	r3, #120	; 0x78
 803247e:	2358      	movne	r3, #88	; 0x58
 8032480:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8032484:	9b04      	ldr	r3, [sp, #16]
 8032486:	2b63      	cmp	r3, #99	; 0x63
 8032488:	f048 0802 	orr.w	r8, r8, #2
 803248c:	dd3a      	ble.n	8032504 <_vfprintf_r+0x4fc>
 803248e:	1c59      	adds	r1, r3, #1
 8032490:	4650      	mov	r0, sl
 8032492:	f7ff fb73 	bl	8031b7c <_malloc_r>
 8032496:	4681      	mov	r9, r0
 8032498:	2800      	cmp	r0, #0
 803249a:	f040 8207 	bne.w	80328ac <_vfprintf_r+0x8a4>
 803249e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80324a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80324a6:	f8ab 300c 	strh.w	r3, [fp, #12]
 80324aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 80324ae:	07d9      	lsls	r1, r3, #31
 80324b0:	d407      	bmi.n	80324c2 <_vfprintf_r+0x4ba>
 80324b2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80324b6:	059a      	lsls	r2, r3, #22
 80324b8:	d403      	bmi.n	80324c2 <_vfprintf_r+0x4ba>
 80324ba:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 80324be:	f7ff fa2a 	bl	8031916 <__retarget_lock_release_recursive>
 80324c2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80324c6:	065b      	lsls	r3, r3, #25
 80324c8:	f57f ade6 	bpl.w	8032098 <_vfprintf_r+0x90>
 80324cc:	e5e1      	b.n	8032092 <_vfprintf_r+0x8a>
 80324ce:	9b04      	ldr	r3, [sp, #16]
 80324d0:	3301      	adds	r3, #1
 80324d2:	f000 81ed 	beq.w	80328b0 <_vfprintf_r+0x8a8>
 80324d6:	9b08      	ldr	r3, [sp, #32]
 80324d8:	2b47      	cmp	r3, #71	; 0x47
 80324da:	f040 81ec 	bne.w	80328b6 <_vfprintf_r+0x8ae>
 80324de:	9b04      	ldr	r3, [sp, #16]
 80324e0:	2b00      	cmp	r3, #0
 80324e2:	f040 81e8 	bne.w	80328b6 <_vfprintf_r+0x8ae>
 80324e6:	9303      	str	r3, [sp, #12]
 80324e8:	2301      	movs	r3, #1
 80324ea:	9304      	str	r3, [sp, #16]
 80324ec:	e00d      	b.n	803250a <_vfprintf_r+0x502>
 80324ee:	bf00      	nop
 80324f0:	7fefffff 	.word	0x7fefffff
 80324f4:	08036e04 	.word	0x08036e04
 80324f8:	08036e08 	.word	0x08036e08
 80324fc:	08036e0c 	.word	0x08036e0c
 8032500:	08036e10 	.word	0x08036e10
 8032504:	9003      	str	r0, [sp, #12]
 8032506:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 803250a:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 803250e:	9311      	str	r3, [sp, #68]	; 0x44
 8032510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8032512:	2b00      	cmp	r3, #0
 8032514:	f280 81d1 	bge.w	80328ba <_vfprintf_r+0x8b2>
 8032518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 803251a:	ee08 3a10 	vmov	s16, r3
 803251e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8032520:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8032524:	ee08 3a90 	vmov	s17, r3
 8032528:	232d      	movs	r3, #45	; 0x2d
 803252a:	9318      	str	r3, [sp, #96]	; 0x60
 803252c:	9b08      	ldr	r3, [sp, #32]
 803252e:	2b41      	cmp	r3, #65	; 0x41
 8032530:	f040 81e1 	bne.w	80328f6 <_vfprintf_r+0x8ee>
 8032534:	eeb0 0a48 	vmov.f32	s0, s16
 8032538:	eef0 0a68 	vmov.f32	s1, s17
 803253c:	a81c      	add	r0, sp, #112	; 0x70
 803253e:	f002 f85b 	bl	80345f8 <frexp>
 8032542:	2200      	movs	r2, #0
 8032544:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8032548:	ec51 0b10 	vmov	r0, r1, d0
 803254c:	f7f0 f854 	bl	80225f8 <__aeabi_dmul>
 8032550:	2200      	movs	r2, #0
 8032552:	2300      	movs	r3, #0
 8032554:	4606      	mov	r6, r0
 8032556:	460f      	mov	r7, r1
 8032558:	f7f0 fab6 	bl	8022ac8 <__aeabi_dcmpeq>
 803255c:	b108      	cbz	r0, 8032562 <_vfprintf_r+0x55a>
 803255e:	2301      	movs	r3, #1
 8032560:	931c      	str	r3, [sp, #112]	; 0x70
 8032562:	4ba7      	ldr	r3, [pc, #668]	; (8032800 <_vfprintf_r+0x7f8>)
 8032564:	4aa7      	ldr	r2, [pc, #668]	; (8032804 <_vfprintf_r+0x7fc>)
 8032566:	9907      	ldr	r1, [sp, #28]
 8032568:	2961      	cmp	r1, #97	; 0x61
 803256a:	bf18      	it	ne
 803256c:	461a      	movne	r2, r3
 803256e:	9b04      	ldr	r3, [sp, #16]
 8032570:	9217      	str	r2, [sp, #92]	; 0x5c
 8032572:	3b01      	subs	r3, #1
 8032574:	9305      	str	r3, [sp, #20]
 8032576:	464d      	mov	r5, r9
 8032578:	4ba3      	ldr	r3, [pc, #652]	; (8032808 <_vfprintf_r+0x800>)
 803257a:	2200      	movs	r2, #0
 803257c:	4630      	mov	r0, r6
 803257e:	4639      	mov	r1, r7
 8032580:	f7f0 f83a 	bl	80225f8 <__aeabi_dmul>
 8032584:	460f      	mov	r7, r1
 8032586:	4606      	mov	r6, r0
 8032588:	f7f0 fae6 	bl	8022b58 <__aeabi_d2iz>
 803258c:	9019      	str	r0, [sp, #100]	; 0x64
 803258e:	f7ef ffc9 	bl	8022524 <__aeabi_i2d>
 8032592:	4602      	mov	r2, r0
 8032594:	460b      	mov	r3, r1
 8032596:	4630      	mov	r0, r6
 8032598:	4639      	mov	r1, r7
 803259a:	f7ef fe75 	bl	8022288 <__aeabi_dsub>
 803259e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80325a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80325a2:	5c9b      	ldrb	r3, [r3, r2]
 80325a4:	f805 3b01 	strb.w	r3, [r5], #1
 80325a8:	9b05      	ldr	r3, [sp, #20]
 80325aa:	9309      	str	r3, [sp, #36]	; 0x24
 80325ac:	1c5a      	adds	r2, r3, #1
 80325ae:	4606      	mov	r6, r0
 80325b0:	460f      	mov	r7, r1
 80325b2:	d007      	beq.n	80325c4 <_vfprintf_r+0x5bc>
 80325b4:	3b01      	subs	r3, #1
 80325b6:	9305      	str	r3, [sp, #20]
 80325b8:	2200      	movs	r2, #0
 80325ba:	2300      	movs	r3, #0
 80325bc:	f7f0 fa84 	bl	8022ac8 <__aeabi_dcmpeq>
 80325c0:	2800      	cmp	r0, #0
 80325c2:	d0d9      	beq.n	8032578 <_vfprintf_r+0x570>
 80325c4:	4b91      	ldr	r3, [pc, #580]	; (803280c <_vfprintf_r+0x804>)
 80325c6:	2200      	movs	r2, #0
 80325c8:	4630      	mov	r0, r6
 80325ca:	4639      	mov	r1, r7
 80325cc:	f7f0 faa4 	bl	8022b18 <__aeabi_dcmpgt>
 80325d0:	b960      	cbnz	r0, 80325ec <_vfprintf_r+0x5e4>
 80325d2:	4b8e      	ldr	r3, [pc, #568]	; (803280c <_vfprintf_r+0x804>)
 80325d4:	2200      	movs	r2, #0
 80325d6:	4630      	mov	r0, r6
 80325d8:	4639      	mov	r1, r7
 80325da:	f7f0 fa75 	bl	8022ac8 <__aeabi_dcmpeq>
 80325de:	2800      	cmp	r0, #0
 80325e0:	f000 8184 	beq.w	80328ec <_vfprintf_r+0x8e4>
 80325e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80325e6:	07da      	lsls	r2, r3, #31
 80325e8:	f140 8180 	bpl.w	80328ec <_vfprintf_r+0x8e4>
 80325ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80325ee:	9520      	str	r5, [sp, #128]	; 0x80
 80325f0:	7bd9      	ldrb	r1, [r3, #15]
 80325f2:	2030      	movs	r0, #48	; 0x30
 80325f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80325f6:	1e53      	subs	r3, r2, #1
 80325f8:	9320      	str	r3, [sp, #128]	; 0x80
 80325fa:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80325fe:	428b      	cmp	r3, r1
 8032600:	f000 8163 	beq.w	80328ca <_vfprintf_r+0x8c2>
 8032604:	2b39      	cmp	r3, #57	; 0x39
 8032606:	bf0b      	itete	eq
 8032608:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 803260a:	3301      	addne	r3, #1
 803260c:	7a9b      	ldrbeq	r3, [r3, #10]
 803260e:	b2db      	uxtbne	r3, r3
 8032610:	f802 3c01 	strb.w	r3, [r2, #-1]
 8032614:	eba5 0309 	sub.w	r3, r5, r9
 8032618:	9305      	str	r3, [sp, #20]
 803261a:	9b08      	ldr	r3, [sp, #32]
 803261c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 803261e:	2b47      	cmp	r3, #71	; 0x47
 8032620:	f040 81b3 	bne.w	803298a <_vfprintf_r+0x982>
 8032624:	1ceb      	adds	r3, r5, #3
 8032626:	db03      	blt.n	8032630 <_vfprintf_r+0x628>
 8032628:	9b04      	ldr	r3, [sp, #16]
 803262a:	42ab      	cmp	r3, r5
 803262c:	f280 81d3 	bge.w	80329d6 <_vfprintf_r+0x9ce>
 8032630:	9b07      	ldr	r3, [sp, #28]
 8032632:	3b02      	subs	r3, #2
 8032634:	9307      	str	r3, [sp, #28]
 8032636:	9907      	ldr	r1, [sp, #28]
 8032638:	f89d 201c 	ldrb.w	r2, [sp, #28]
 803263c:	f021 0120 	bic.w	r1, r1, #32
 8032640:	2941      	cmp	r1, #65	; 0x41
 8032642:	bf08      	it	eq
 8032644:	320f      	addeq	r2, #15
 8032646:	f105 33ff 	add.w	r3, r5, #4294967295
 803264a:	bf06      	itte	eq
 803264c:	b2d2      	uxtbeq	r2, r2
 803264e:	2101      	moveq	r1, #1
 8032650:	2100      	movne	r1, #0
 8032652:	2b00      	cmp	r3, #0
 8032654:	931c      	str	r3, [sp, #112]	; 0x70
 8032656:	bfb8      	it	lt
 8032658:	f1c5 0301 	rsblt	r3, r5, #1
 803265c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8032660:	bfb4      	ite	lt
 8032662:	222d      	movlt	r2, #45	; 0x2d
 8032664:	222b      	movge	r2, #43	; 0x2b
 8032666:	2b09      	cmp	r3, #9
 8032668:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 803266c:	f340 81a6 	ble.w	80329bc <_vfprintf_r+0x9b4>
 8032670:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8032674:	260a      	movs	r6, #10
 8032676:	4602      	mov	r2, r0
 8032678:	fb93 f5f6 	sdiv	r5, r3, r6
 803267c:	fb06 3115 	mls	r1, r6, r5, r3
 8032680:	3130      	adds	r1, #48	; 0x30
 8032682:	f802 1c01 	strb.w	r1, [r2, #-1]
 8032686:	4619      	mov	r1, r3
 8032688:	2963      	cmp	r1, #99	; 0x63
 803268a:	f100 30ff 	add.w	r0, r0, #4294967295
 803268e:	462b      	mov	r3, r5
 8032690:	dcf1      	bgt.n	8032676 <_vfprintf_r+0x66e>
 8032692:	3330      	adds	r3, #48	; 0x30
 8032694:	1e91      	subs	r1, r2, #2
 8032696:	f800 3c01 	strb.w	r3, [r0, #-1]
 803269a:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 803269e:	460b      	mov	r3, r1
 80326a0:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 80326a4:	4283      	cmp	r3, r0
 80326a6:	f0c0 8184 	bcc.w	80329b2 <_vfprintf_r+0x9aa>
 80326aa:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 80326ae:	1a9b      	subs	r3, r3, r2
 80326b0:	4281      	cmp	r1, r0
 80326b2:	bf88      	it	hi
 80326b4:	2300      	movhi	r3, #0
 80326b6:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80326ba:	441a      	add	r2, r3
 80326bc:	ab1e      	add	r3, sp, #120	; 0x78
 80326be:	1ad3      	subs	r3, r2, r3
 80326c0:	9a05      	ldr	r2, [sp, #20]
 80326c2:	9315      	str	r3, [sp, #84]	; 0x54
 80326c4:	2a01      	cmp	r2, #1
 80326c6:	4413      	add	r3, r2
 80326c8:	9304      	str	r3, [sp, #16]
 80326ca:	dc02      	bgt.n	80326d2 <_vfprintf_r+0x6ca>
 80326cc:	f018 0f01 	tst.w	r8, #1
 80326d0:	d003      	beq.n	80326da <_vfprintf_r+0x6d2>
 80326d2:	9b04      	ldr	r3, [sp, #16]
 80326d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80326d6:	4413      	add	r3, r2
 80326d8:	9304      	str	r3, [sp, #16]
 80326da:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 80326de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80326e2:	9311      	str	r3, [sp, #68]	; 0x44
 80326e4:	2300      	movs	r3, #0
 80326e6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80326ea:	461d      	mov	r5, r3
 80326ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80326ee:	b113      	cbz	r3, 80326f6 <_vfprintf_r+0x6ee>
 80326f0:	232d      	movs	r3, #45	; 0x2d
 80326f2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80326f6:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 80326fa:	2600      	movs	r6, #0
 80326fc:	9b04      	ldr	r3, [sp, #16]
 80326fe:	42b3      	cmp	r3, r6
 8032700:	bfb8      	it	lt
 8032702:	4633      	movlt	r3, r6
 8032704:	9311      	str	r3, [sp, #68]	; 0x44
 8032706:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 803270a:	b113      	cbz	r3, 8032712 <_vfprintf_r+0x70a>
 803270c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 803270e:	3301      	adds	r3, #1
 8032710:	9311      	str	r3, [sp, #68]	; 0x44
 8032712:	f018 0302 	ands.w	r3, r8, #2
 8032716:	9317      	str	r3, [sp, #92]	; 0x5c
 8032718:	bf1e      	ittt	ne
 803271a:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 803271c:	3302      	addne	r3, #2
 803271e:	9311      	strne	r3, [sp, #68]	; 0x44
 8032720:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8032724:	9318      	str	r3, [sp, #96]	; 0x60
 8032726:	d11f      	bne.n	8032768 <_vfprintf_r+0x760>
 8032728:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 803272c:	1a9f      	subs	r7, r3, r2
 803272e:	2f00      	cmp	r7, #0
 8032730:	dd1a      	ble.n	8032768 <_vfprintf_r+0x760>
 8032732:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8032736:	4836      	ldr	r0, [pc, #216]	; (8032810 <_vfprintf_r+0x808>)
 8032738:	6020      	str	r0, [r4, #0]
 803273a:	2f10      	cmp	r7, #16
 803273c:	f103 0301 	add.w	r3, r3, #1
 8032740:	f104 0108 	add.w	r1, r4, #8
 8032744:	f300 82ea 	bgt.w	8032d1c <_vfprintf_r+0xd14>
 8032748:	6067      	str	r7, [r4, #4]
 803274a:	2b07      	cmp	r3, #7
 803274c:	4417      	add	r7, r2
 803274e:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8032752:	f340 82f6 	ble.w	8032d42 <_vfprintf_r+0xd3a>
 8032756:	aa22      	add	r2, sp, #136	; 0x88
 8032758:	4659      	mov	r1, fp
 803275a:	4650      	mov	r0, sl
 803275c:	f000 fec8 	bl	80334f0 <__sprint_r>
 8032760:	2800      	cmp	r0, #0
 8032762:	f040 861f 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032766:	ac25      	add	r4, sp, #148	; 0x94
 8032768:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 803276c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 803276e:	b16a      	cbz	r2, 803278c <_vfprintf_r+0x784>
 8032770:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8032774:	6022      	str	r2, [r4, #0]
 8032776:	2201      	movs	r2, #1
 8032778:	4413      	add	r3, r2
 803277a:	9324      	str	r3, [sp, #144]	; 0x90
 803277c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 803277e:	6062      	str	r2, [r4, #4]
 8032780:	4413      	add	r3, r2
 8032782:	2b07      	cmp	r3, #7
 8032784:	9323      	str	r3, [sp, #140]	; 0x8c
 8032786:	f300 82de 	bgt.w	8032d46 <_vfprintf_r+0xd3e>
 803278a:	3408      	adds	r4, #8
 803278c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 803278e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8032790:	b162      	cbz	r2, 80327ac <_vfprintf_r+0x7a4>
 8032792:	aa1b      	add	r2, sp, #108	; 0x6c
 8032794:	6022      	str	r2, [r4, #0]
 8032796:	2202      	movs	r2, #2
 8032798:	4413      	add	r3, r2
 803279a:	9324      	str	r3, [sp, #144]	; 0x90
 803279c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 803279e:	6062      	str	r2, [r4, #4]
 80327a0:	3301      	adds	r3, #1
 80327a2:	2b07      	cmp	r3, #7
 80327a4:	9323      	str	r3, [sp, #140]	; 0x8c
 80327a6:	f300 82d8 	bgt.w	8032d5a <_vfprintf_r+0xd52>
 80327aa:	3408      	adds	r4, #8
 80327ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80327ae:	2b80      	cmp	r3, #128	; 0x80
 80327b0:	d11f      	bne.n	80327f2 <_vfprintf_r+0x7ea>
 80327b2:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80327b6:	1a9f      	subs	r7, r3, r2
 80327b8:	2f00      	cmp	r7, #0
 80327ba:	dd1a      	ble.n	80327f2 <_vfprintf_r+0x7ea>
 80327bc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80327c0:	4814      	ldr	r0, [pc, #80]	; (8032814 <_vfprintf_r+0x80c>)
 80327c2:	6020      	str	r0, [r4, #0]
 80327c4:	2f10      	cmp	r7, #16
 80327c6:	f103 0301 	add.w	r3, r3, #1
 80327ca:	f104 0108 	add.w	r1, r4, #8
 80327ce:	f300 82ce 	bgt.w	8032d6e <_vfprintf_r+0xd66>
 80327d2:	6067      	str	r7, [r4, #4]
 80327d4:	2b07      	cmp	r3, #7
 80327d6:	4417      	add	r7, r2
 80327d8:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80327dc:	f340 82da 	ble.w	8032d94 <_vfprintf_r+0xd8c>
 80327e0:	aa22      	add	r2, sp, #136	; 0x88
 80327e2:	4659      	mov	r1, fp
 80327e4:	4650      	mov	r0, sl
 80327e6:	f000 fe83 	bl	80334f0 <__sprint_r>
 80327ea:	2800      	cmp	r0, #0
 80327ec:	f040 85da 	bne.w	80333a4 <_vfprintf_r+0x139c>
 80327f0:	ac25      	add	r4, sp, #148	; 0x94
 80327f2:	9b04      	ldr	r3, [sp, #16]
 80327f4:	1af6      	subs	r6, r6, r3
 80327f6:	2e00      	cmp	r6, #0
 80327f8:	dd28      	ble.n	803284c <_vfprintf_r+0x844>
 80327fa:	4f06      	ldr	r7, [pc, #24]	; (8032814 <_vfprintf_r+0x80c>)
 80327fc:	e00c      	b.n	8032818 <_vfprintf_r+0x810>
 80327fe:	bf00      	nop
 8032800:	08036e25 	.word	0x08036e25
 8032804:	08036e14 	.word	0x08036e14
 8032808:	40300000 	.word	0x40300000
 803280c:	3fe00000 	.word	0x3fe00000
 8032810:	08036e38 	.word	0x08036e38
 8032814:	08036e48 	.word	0x08036e48
 8032818:	6027      	str	r7, [r4, #0]
 803281a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 803281e:	2e10      	cmp	r6, #16
 8032820:	f103 0301 	add.w	r3, r3, #1
 8032824:	f104 0108 	add.w	r1, r4, #8
 8032828:	f300 82b6 	bgt.w	8032d98 <_vfprintf_r+0xd90>
 803282c:	6066      	str	r6, [r4, #4]
 803282e:	2b07      	cmp	r3, #7
 8032830:	4416      	add	r6, r2
 8032832:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8032836:	f340 82c2 	ble.w	8032dbe <_vfprintf_r+0xdb6>
 803283a:	aa22      	add	r2, sp, #136	; 0x88
 803283c:	4659      	mov	r1, fp
 803283e:	4650      	mov	r0, sl
 8032840:	f000 fe56 	bl	80334f0 <__sprint_r>
 8032844:	2800      	cmp	r0, #0
 8032846:	f040 85ad 	bne.w	80333a4 <_vfprintf_r+0x139c>
 803284a:	ac25      	add	r4, sp, #148	; 0x94
 803284c:	f418 7f80 	tst.w	r8, #256	; 0x100
 8032850:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8032852:	f040 82bb 	bne.w	8032dcc <_vfprintf_r+0xdc4>
 8032856:	9b04      	ldr	r3, [sp, #16]
 8032858:	f8c4 9000 	str.w	r9, [r4]
 803285c:	441e      	add	r6, r3
 803285e:	6063      	str	r3, [r4, #4]
 8032860:	9624      	str	r6, [sp, #144]	; 0x90
 8032862:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8032864:	3301      	adds	r3, #1
 8032866:	2b07      	cmp	r3, #7
 8032868:	9323      	str	r3, [sp, #140]	; 0x8c
 803286a:	f300 82f4 	bgt.w	8032e56 <_vfprintf_r+0xe4e>
 803286e:	3408      	adds	r4, #8
 8032870:	f018 0f04 	tst.w	r8, #4
 8032874:	f040 8578 	bne.w	8033368 <_vfprintf_r+0x1360>
 8032878:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 803287c:	9911      	ldr	r1, [sp, #68]	; 0x44
 803287e:	428a      	cmp	r2, r1
 8032880:	bfac      	ite	ge
 8032882:	189b      	addge	r3, r3, r2
 8032884:	185b      	addlt	r3, r3, r1
 8032886:	930f      	str	r3, [sp, #60]	; 0x3c
 8032888:	9b24      	ldr	r3, [sp, #144]	; 0x90
 803288a:	b13b      	cbz	r3, 803289c <_vfprintf_r+0x894>
 803288c:	aa22      	add	r2, sp, #136	; 0x88
 803288e:	4659      	mov	r1, fp
 8032890:	4650      	mov	r0, sl
 8032892:	f000 fe2d 	bl	80334f0 <__sprint_r>
 8032896:	2800      	cmp	r0, #0
 8032898:	f040 8584 	bne.w	80333a4 <_vfprintf_r+0x139c>
 803289c:	2300      	movs	r3, #0
 803289e:	9323      	str	r3, [sp, #140]	; 0x8c
 80328a0:	9b03      	ldr	r3, [sp, #12]
 80328a2:	2b00      	cmp	r3, #0
 80328a4:	f040 859a 	bne.w	80333dc <_vfprintf_r+0x13d4>
 80328a8:	ac25      	add	r4, sp, #148	; 0x94
 80328aa:	e0ee      	b.n	8032a8a <_vfprintf_r+0xa82>
 80328ac:	9003      	str	r0, [sp, #12]
 80328ae:	e62c      	b.n	803250a <_vfprintf_r+0x502>
 80328b0:	9003      	str	r0, [sp, #12]
 80328b2:	2306      	movs	r3, #6
 80328b4:	e619      	b.n	80324ea <_vfprintf_r+0x4e2>
 80328b6:	9003      	str	r0, [sp, #12]
 80328b8:	e627      	b.n	803250a <_vfprintf_r+0x502>
 80328ba:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 80328be:	2300      	movs	r3, #0
 80328c0:	eeb0 8a47 	vmov.f32	s16, s14
 80328c4:	eef0 8a67 	vmov.f32	s17, s15
 80328c8:	e62f      	b.n	803252a <_vfprintf_r+0x522>
 80328ca:	f802 0c01 	strb.w	r0, [r2, #-1]
 80328ce:	e691      	b.n	80325f4 <_vfprintf_r+0x5ec>
 80328d0:	f803 0b01 	strb.w	r0, [r3], #1
 80328d4:	1aca      	subs	r2, r1, r3
 80328d6:	2a00      	cmp	r2, #0
 80328d8:	dafa      	bge.n	80328d0 <_vfprintf_r+0x8c8>
 80328da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80328dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80328de:	3201      	adds	r2, #1
 80328e0:	f103 0301 	add.w	r3, r3, #1
 80328e4:	bfb8      	it	lt
 80328e6:	2300      	movlt	r3, #0
 80328e8:	441d      	add	r5, r3
 80328ea:	e693      	b.n	8032614 <_vfprintf_r+0x60c>
 80328ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80328ee:	462b      	mov	r3, r5
 80328f0:	18a9      	adds	r1, r5, r2
 80328f2:	2030      	movs	r0, #48	; 0x30
 80328f4:	e7ee      	b.n	80328d4 <_vfprintf_r+0x8cc>
 80328f6:	9b08      	ldr	r3, [sp, #32]
 80328f8:	2b46      	cmp	r3, #70	; 0x46
 80328fa:	d005      	beq.n	8032908 <_vfprintf_r+0x900>
 80328fc:	2b45      	cmp	r3, #69	; 0x45
 80328fe:	d11d      	bne.n	803293c <_vfprintf_r+0x934>
 8032900:	9b04      	ldr	r3, [sp, #16]
 8032902:	1c5d      	adds	r5, r3, #1
 8032904:	2102      	movs	r1, #2
 8032906:	e001      	b.n	803290c <_vfprintf_r+0x904>
 8032908:	9d04      	ldr	r5, [sp, #16]
 803290a:	2103      	movs	r1, #3
 803290c:	ab20      	add	r3, sp, #128	; 0x80
 803290e:	9301      	str	r3, [sp, #4]
 8032910:	ab1d      	add	r3, sp, #116	; 0x74
 8032912:	9300      	str	r3, [sp, #0]
 8032914:	462a      	mov	r2, r5
 8032916:	ab1c      	add	r3, sp, #112	; 0x70
 8032918:	4650      	mov	r0, sl
 803291a:	eeb0 0a48 	vmov.f32	s0, s16
 803291e:	eef0 0a68 	vmov.f32	s1, s17
 8032922:	f001 ff69 	bl	80347f8 <_dtoa_r>
 8032926:	9b08      	ldr	r3, [sp, #32]
 8032928:	2b47      	cmp	r3, #71	; 0x47
 803292a:	4681      	mov	r9, r0
 803292c:	d108      	bne.n	8032940 <_vfprintf_r+0x938>
 803292e:	f018 0f01 	tst.w	r8, #1
 8032932:	d105      	bne.n	8032940 <_vfprintf_r+0x938>
 8032934:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8032936:	eba3 0309 	sub.w	r3, r3, r9
 803293a:	e66d      	b.n	8032618 <_vfprintf_r+0x610>
 803293c:	9d04      	ldr	r5, [sp, #16]
 803293e:	e7e1      	b.n	8032904 <_vfprintf_r+0x8fc>
 8032940:	9b08      	ldr	r3, [sp, #32]
 8032942:	2b46      	cmp	r3, #70	; 0x46
 8032944:	eb09 0605 	add.w	r6, r9, r5
 8032948:	d10f      	bne.n	803296a <_vfprintf_r+0x962>
 803294a:	f899 3000 	ldrb.w	r3, [r9]
 803294e:	2b30      	cmp	r3, #48	; 0x30
 8032950:	d109      	bne.n	8032966 <_vfprintf_r+0x95e>
 8032952:	ec51 0b18 	vmov	r0, r1, d8
 8032956:	2200      	movs	r2, #0
 8032958:	2300      	movs	r3, #0
 803295a:	f7f0 f8b5 	bl	8022ac8 <__aeabi_dcmpeq>
 803295e:	b910      	cbnz	r0, 8032966 <_vfprintf_r+0x95e>
 8032960:	f1c5 0501 	rsb	r5, r5, #1
 8032964:	951c      	str	r5, [sp, #112]	; 0x70
 8032966:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8032968:	441e      	add	r6, r3
 803296a:	ec51 0b18 	vmov	r0, r1, d8
 803296e:	2200      	movs	r2, #0
 8032970:	2300      	movs	r3, #0
 8032972:	f7f0 f8a9 	bl	8022ac8 <__aeabi_dcmpeq>
 8032976:	b100      	cbz	r0, 803297a <_vfprintf_r+0x972>
 8032978:	9620      	str	r6, [sp, #128]	; 0x80
 803297a:	2230      	movs	r2, #48	; 0x30
 803297c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 803297e:	429e      	cmp	r6, r3
 8032980:	d9d8      	bls.n	8032934 <_vfprintf_r+0x92c>
 8032982:	1c59      	adds	r1, r3, #1
 8032984:	9120      	str	r1, [sp, #128]	; 0x80
 8032986:	701a      	strb	r2, [r3, #0]
 8032988:	e7f8      	b.n	803297c <_vfprintf_r+0x974>
 803298a:	9b08      	ldr	r3, [sp, #32]
 803298c:	2b46      	cmp	r3, #70	; 0x46
 803298e:	f47f ae52 	bne.w	8032636 <_vfprintf_r+0x62e>
 8032992:	9a04      	ldr	r2, [sp, #16]
 8032994:	f008 0301 	and.w	r3, r8, #1
 8032998:	2d00      	cmp	r5, #0
 803299a:	ea43 0302 	orr.w	r3, r3, r2
 803299e:	dd29      	ble.n	80329f4 <_vfprintf_r+0x9ec>
 80329a0:	2b00      	cmp	r3, #0
 80329a2:	d034      	beq.n	8032a0e <_vfprintf_r+0xa06>
 80329a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80329a6:	18eb      	adds	r3, r5, r3
 80329a8:	441a      	add	r2, r3
 80329aa:	9204      	str	r2, [sp, #16]
 80329ac:	2366      	movs	r3, #102	; 0x66
 80329ae:	9307      	str	r3, [sp, #28]
 80329b0:	e033      	b.n	8032a1a <_vfprintf_r+0xa12>
 80329b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80329b6:	f805 6f01 	strb.w	r6, [r5, #1]!
 80329ba:	e673      	b.n	80326a4 <_vfprintf_r+0x69c>
 80329bc:	b941      	cbnz	r1, 80329d0 <_vfprintf_r+0x9c8>
 80329be:	2230      	movs	r2, #48	; 0x30
 80329c0:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80329c4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80329c8:	3330      	adds	r3, #48	; 0x30
 80329ca:	f802 3b01 	strb.w	r3, [r2], #1
 80329ce:	e675      	b.n	80326bc <_vfprintf_r+0x6b4>
 80329d0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80329d4:	e7f8      	b.n	80329c8 <_vfprintf_r+0x9c0>
 80329d6:	9b05      	ldr	r3, [sp, #20]
 80329d8:	42ab      	cmp	r3, r5
 80329da:	dd10      	ble.n	80329fe <_vfprintf_r+0x9f6>
 80329dc:	9b05      	ldr	r3, [sp, #20]
 80329de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80329e0:	2d00      	cmp	r5, #0
 80329e2:	4413      	add	r3, r2
 80329e4:	9304      	str	r3, [sp, #16]
 80329e6:	dc10      	bgt.n	8032a0a <_vfprintf_r+0xa02>
 80329e8:	9a04      	ldr	r2, [sp, #16]
 80329ea:	f1c5 0301 	rsb	r3, r5, #1
 80329ee:	441a      	add	r2, r3
 80329f0:	9204      	str	r2, [sp, #16]
 80329f2:	e00a      	b.n	8032a0a <_vfprintf_r+0xa02>
 80329f4:	b16b      	cbz	r3, 8032a12 <_vfprintf_r+0xa0a>
 80329f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80329f8:	9a04      	ldr	r2, [sp, #16]
 80329fa:	3301      	adds	r3, #1
 80329fc:	e7d4      	b.n	80329a8 <_vfprintf_r+0x9a0>
 80329fe:	f018 0f01 	tst.w	r8, #1
 8032a02:	d021      	beq.n	8032a48 <_vfprintf_r+0xa40>
 8032a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8032a06:	18eb      	adds	r3, r5, r3
 8032a08:	9304      	str	r3, [sp, #16]
 8032a0a:	2367      	movs	r3, #103	; 0x67
 8032a0c:	e7cf      	b.n	80329ae <_vfprintf_r+0x9a6>
 8032a0e:	9504      	str	r5, [sp, #16]
 8032a10:	e7cc      	b.n	80329ac <_vfprintf_r+0x9a4>
 8032a12:	2366      	movs	r3, #102	; 0x66
 8032a14:	9307      	str	r3, [sp, #28]
 8032a16:	2301      	movs	r3, #1
 8032a18:	9304      	str	r3, [sp, #16]
 8032a1a:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8032a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8032a20:	d025      	beq.n	8032a6e <_vfprintf_r+0xa66>
 8032a22:	2300      	movs	r3, #0
 8032a24:	2d00      	cmp	r5, #0
 8032a26:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8032a2a:	f77f ae5f 	ble.w	80326ec <_vfprintf_r+0x6e4>
 8032a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8032a30:	781b      	ldrb	r3, [r3, #0]
 8032a32:	2bff      	cmp	r3, #255	; 0xff
 8032a34:	d10a      	bne.n	8032a4c <_vfprintf_r+0xa44>
 8032a36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8032a3a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8032a3c:	4413      	add	r3, r2
 8032a3e:	9a04      	ldr	r2, [sp, #16]
 8032a40:	fb01 2303 	mla	r3, r1, r3, r2
 8032a44:	9304      	str	r3, [sp, #16]
 8032a46:	e651      	b.n	80326ec <_vfprintf_r+0x6e4>
 8032a48:	9504      	str	r5, [sp, #16]
 8032a4a:	e7de      	b.n	8032a0a <_vfprintf_r+0xa02>
 8032a4c:	42ab      	cmp	r3, r5
 8032a4e:	daf2      	bge.n	8032a36 <_vfprintf_r+0xa2e>
 8032a50:	1aed      	subs	r5, r5, r3
 8032a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8032a54:	785b      	ldrb	r3, [r3, #1]
 8032a56:	b133      	cbz	r3, 8032a66 <_vfprintf_r+0xa5e>
 8032a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8032a5a:	3301      	adds	r3, #1
 8032a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8032a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8032a60:	3301      	adds	r3, #1
 8032a62:	930a      	str	r3, [sp, #40]	; 0x28
 8032a64:	e7e3      	b.n	8032a2e <_vfprintf_r+0xa26>
 8032a66:	9b08      	ldr	r3, [sp, #32]
 8032a68:	3301      	adds	r3, #1
 8032a6a:	9308      	str	r3, [sp, #32]
 8032a6c:	e7df      	b.n	8032a2e <_vfprintf_r+0xa26>
 8032a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8032a70:	9308      	str	r3, [sp, #32]
 8032a72:	e63b      	b.n	80326ec <_vfprintf_r+0x6e4>
 8032a74:	1d2b      	adds	r3, r5, #4
 8032a76:	f018 0f20 	tst.w	r8, #32
 8032a7a:	9306      	str	r3, [sp, #24]
 8032a7c:	d00a      	beq.n	8032a94 <_vfprintf_r+0xa8c>
 8032a7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8032a80:	682b      	ldr	r3, [r5, #0]
 8032a82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8032a84:	17d2      	asrs	r2, r2, #31
 8032a86:	e9c3 1200 	strd	r1, r2, [r3]
 8032a8a:	9d06      	ldr	r5, [sp, #24]
 8032a8c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8032a90:	f7ff bb40 	b.w	8032114 <_vfprintf_r+0x10c>
 8032a94:	f018 0f10 	tst.w	r8, #16
 8032a98:	d003      	beq.n	8032aa2 <_vfprintf_r+0xa9a>
 8032a9a:	682b      	ldr	r3, [r5, #0]
 8032a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8032a9e:	601a      	str	r2, [r3, #0]
 8032aa0:	e7f3      	b.n	8032a8a <_vfprintf_r+0xa82>
 8032aa2:	f018 0f40 	tst.w	r8, #64	; 0x40
 8032aa6:	d003      	beq.n	8032ab0 <_vfprintf_r+0xaa8>
 8032aa8:	682b      	ldr	r3, [r5, #0]
 8032aaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8032aac:	801a      	strh	r2, [r3, #0]
 8032aae:	e7ec      	b.n	8032a8a <_vfprintf_r+0xa82>
 8032ab0:	f418 7f00 	tst.w	r8, #512	; 0x200
 8032ab4:	d0f1      	beq.n	8032a9a <_vfprintf_r+0xa92>
 8032ab6:	682b      	ldr	r3, [r5, #0]
 8032ab8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8032aba:	701a      	strb	r2, [r3, #0]
 8032abc:	e7e5      	b.n	8032a8a <_vfprintf_r+0xa82>
 8032abe:	f048 0810 	orr.w	r8, r8, #16
 8032ac2:	f018 0320 	ands.w	r3, r8, #32
 8032ac6:	d01f      	beq.n	8032b08 <_vfprintf_r+0xb00>
 8032ac8:	3507      	adds	r5, #7
 8032aca:	f025 0307 	bic.w	r3, r5, #7
 8032ace:	461a      	mov	r2, r3
 8032ad0:	685e      	ldr	r6, [r3, #4]
 8032ad2:	f852 5b08 	ldr.w	r5, [r2], #8
 8032ad6:	9206      	str	r2, [sp, #24]
 8032ad8:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8032adc:	2300      	movs	r3, #0
 8032ade:	2200      	movs	r2, #0
 8032ae0:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8032ae4:	9a04      	ldr	r2, [sp, #16]
 8032ae6:	3201      	adds	r2, #1
 8032ae8:	f000 848d 	beq.w	8033406 <_vfprintf_r+0x13fe>
 8032aec:	ea55 0206 	orrs.w	r2, r5, r6
 8032af0:	f028 0780 	bic.w	r7, r8, #128	; 0x80
 8032af4:	f040 848c 	bne.w	8033410 <_vfprintf_r+0x1408>
 8032af8:	9a04      	ldr	r2, [sp, #16]
 8032afa:	2a00      	cmp	r2, #0
 8032afc:	f000 80f4 	beq.w	8032ce8 <_vfprintf_r+0xce0>
 8032b00:	2b01      	cmp	r3, #1
 8032b02:	f040 8488 	bne.w	8033416 <_vfprintf_r+0x140e>
 8032b06:	e09e      	b.n	8032c46 <_vfprintf_r+0xc3e>
 8032b08:	462a      	mov	r2, r5
 8032b0a:	f018 0610 	ands.w	r6, r8, #16
 8032b0e:	f852 5b04 	ldr.w	r5, [r2], #4
 8032b12:	9206      	str	r2, [sp, #24]
 8032b14:	d001      	beq.n	8032b1a <_vfprintf_r+0xb12>
 8032b16:	461e      	mov	r6, r3
 8032b18:	e7de      	b.n	8032ad8 <_vfprintf_r+0xad0>
 8032b1a:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8032b1e:	d001      	beq.n	8032b24 <_vfprintf_r+0xb1c>
 8032b20:	b2ad      	uxth	r5, r5
 8032b22:	e7d9      	b.n	8032ad8 <_vfprintf_r+0xad0>
 8032b24:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8032b28:	d0d6      	beq.n	8032ad8 <_vfprintf_r+0xad0>
 8032b2a:	b2ed      	uxtb	r5, r5
 8032b2c:	e7f3      	b.n	8032b16 <_vfprintf_r+0xb0e>
 8032b2e:	462b      	mov	r3, r5
 8032b30:	2278      	movs	r2, #120	; 0x78
 8032b32:	f853 5b04 	ldr.w	r5, [r3], #4
 8032b36:	9306      	str	r3, [sp, #24]
 8032b38:	f647 0330 	movw	r3, #30768	; 0x7830
 8032b3c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8032b40:	4ba0      	ldr	r3, [pc, #640]	; (8032dc4 <_vfprintf_r+0xdbc>)
 8032b42:	9316      	str	r3, [sp, #88]	; 0x58
 8032b44:	2600      	movs	r6, #0
 8032b46:	f048 0802 	orr.w	r8, r8, #2
 8032b4a:	2302      	movs	r3, #2
 8032b4c:	9207      	str	r2, [sp, #28]
 8032b4e:	e7c6      	b.n	8032ade <_vfprintf_r+0xad6>
 8032b50:	462b      	mov	r3, r5
 8032b52:	2500      	movs	r5, #0
 8032b54:	f853 9b04 	ldr.w	r9, [r3], #4
 8032b58:	9306      	str	r3, [sp, #24]
 8032b5a:	9b04      	ldr	r3, [sp, #16]
 8032b5c:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8032b60:	1c5e      	adds	r6, r3, #1
 8032b62:	d010      	beq.n	8032b86 <_vfprintf_r+0xb7e>
 8032b64:	461a      	mov	r2, r3
 8032b66:	4629      	mov	r1, r5
 8032b68:	4648      	mov	r0, r9
 8032b6a:	f7ef fb39 	bl	80221e0 <memchr>
 8032b6e:	9003      	str	r0, [sp, #12]
 8032b70:	2800      	cmp	r0, #0
 8032b72:	f000 80d0 	beq.w	8032d16 <_vfprintf_r+0xd0e>
 8032b76:	eba0 0309 	sub.w	r3, r0, r9
 8032b7a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8032b7e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8032b82:	462e      	mov	r6, r5
 8032b84:	e5ba      	b.n	80326fc <_vfprintf_r+0x6f4>
 8032b86:	4648      	mov	r0, r9
 8032b88:	f7ef fb22 	bl	80221d0 <strlen>
 8032b8c:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8032b90:	e454      	b.n	803243c <_vfprintf_r+0x434>
 8032b92:	f048 0810 	orr.w	r8, r8, #16
 8032b96:	f018 0320 	ands.w	r3, r8, #32
 8032b9a:	d009      	beq.n	8032bb0 <_vfprintf_r+0xba8>
 8032b9c:	3507      	adds	r5, #7
 8032b9e:	f025 0307 	bic.w	r3, r5, #7
 8032ba2:	461a      	mov	r2, r3
 8032ba4:	685e      	ldr	r6, [r3, #4]
 8032ba6:	f852 5b08 	ldr.w	r5, [r2], #8
 8032baa:	9206      	str	r2, [sp, #24]
 8032bac:	2301      	movs	r3, #1
 8032bae:	e796      	b.n	8032ade <_vfprintf_r+0xad6>
 8032bb0:	462a      	mov	r2, r5
 8032bb2:	f018 0610 	ands.w	r6, r8, #16
 8032bb6:	f852 5b04 	ldr.w	r5, [r2], #4
 8032bba:	9206      	str	r2, [sp, #24]
 8032bbc:	d001      	beq.n	8032bc2 <_vfprintf_r+0xbba>
 8032bbe:	461e      	mov	r6, r3
 8032bc0:	e7f4      	b.n	8032bac <_vfprintf_r+0xba4>
 8032bc2:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8032bc6:	d001      	beq.n	8032bcc <_vfprintf_r+0xbc4>
 8032bc8:	b2ad      	uxth	r5, r5
 8032bca:	e7ef      	b.n	8032bac <_vfprintf_r+0xba4>
 8032bcc:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8032bd0:	d0ec      	beq.n	8032bac <_vfprintf_r+0xba4>
 8032bd2:	b2ed      	uxtb	r5, r5
 8032bd4:	e7f3      	b.n	8032bbe <_vfprintf_r+0xbb6>
 8032bd6:	4b7c      	ldr	r3, [pc, #496]	; (8032dc8 <_vfprintf_r+0xdc0>)
 8032bd8:	9316      	str	r3, [sp, #88]	; 0x58
 8032bda:	f018 0320 	ands.w	r3, r8, #32
 8032bde:	d01b      	beq.n	8032c18 <_vfprintf_r+0xc10>
 8032be0:	3507      	adds	r5, #7
 8032be2:	f025 0307 	bic.w	r3, r5, #7
 8032be6:	461a      	mov	r2, r3
 8032be8:	685e      	ldr	r6, [r3, #4]
 8032bea:	f852 5b08 	ldr.w	r5, [r2], #8
 8032bee:	9206      	str	r2, [sp, #24]
 8032bf0:	f018 0f01 	tst.w	r8, #1
 8032bf4:	d00a      	beq.n	8032c0c <_vfprintf_r+0xc04>
 8032bf6:	ea55 0306 	orrs.w	r3, r5, r6
 8032bfa:	d007      	beq.n	8032c0c <_vfprintf_r+0xc04>
 8032bfc:	2330      	movs	r3, #48	; 0x30
 8032bfe:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8032c02:	9b07      	ldr	r3, [sp, #28]
 8032c04:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8032c08:	f048 0802 	orr.w	r8, r8, #2
 8032c0c:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8032c10:	2302      	movs	r3, #2
 8032c12:	e764      	b.n	8032ade <_vfprintf_r+0xad6>
 8032c14:	4b6b      	ldr	r3, [pc, #428]	; (8032dc4 <_vfprintf_r+0xdbc>)
 8032c16:	e7df      	b.n	8032bd8 <_vfprintf_r+0xbd0>
 8032c18:	462a      	mov	r2, r5
 8032c1a:	f018 0610 	ands.w	r6, r8, #16
 8032c1e:	f852 5b04 	ldr.w	r5, [r2], #4
 8032c22:	9206      	str	r2, [sp, #24]
 8032c24:	d001      	beq.n	8032c2a <_vfprintf_r+0xc22>
 8032c26:	461e      	mov	r6, r3
 8032c28:	e7e2      	b.n	8032bf0 <_vfprintf_r+0xbe8>
 8032c2a:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8032c2e:	d001      	beq.n	8032c34 <_vfprintf_r+0xc2c>
 8032c30:	b2ad      	uxth	r5, r5
 8032c32:	e7dd      	b.n	8032bf0 <_vfprintf_r+0xbe8>
 8032c34:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8032c38:	d0da      	beq.n	8032bf0 <_vfprintf_r+0xbe8>
 8032c3a:	b2ed      	uxtb	r5, r5
 8032c3c:	e7f3      	b.n	8032c26 <_vfprintf_r+0xc1e>
 8032c3e:	2d0a      	cmp	r5, #10
 8032c40:	f176 0300 	sbcs.w	r3, r6, #0
 8032c44:	d205      	bcs.n	8032c52 <_vfprintf_r+0xc4a>
 8032c46:	3530      	adds	r5, #48	; 0x30
 8032c48:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 8032c4c:	f20d 1937 	addw	r9, sp, #311	; 0x137
 8032c50:	e3fc      	b.n	803344c <_vfprintf_r+0x1444>
 8032c52:	2300      	movs	r3, #0
 8032c54:	9305      	str	r3, [sp, #20]
 8032c56:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 8032c5a:	f50d 789c 	add.w	r8, sp, #312	; 0x138
 8032c5e:	9303      	str	r3, [sp, #12]
 8032c60:	220a      	movs	r2, #10
 8032c62:	2300      	movs	r3, #0
 8032c64:	4628      	mov	r0, r5
 8032c66:	4631      	mov	r1, r6
 8032c68:	f7ef ff9e 	bl	8022ba8 <__aeabi_uldivmod>
 8032c6c:	9b05      	ldr	r3, [sp, #20]
 8032c6e:	3301      	adds	r3, #1
 8032c70:	9305      	str	r3, [sp, #20]
 8032c72:	9b03      	ldr	r3, [sp, #12]
 8032c74:	3230      	adds	r2, #48	; 0x30
 8032c76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8032c7a:	f108 39ff 	add.w	r9, r8, #4294967295
 8032c7e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8032c82:	b1d3      	cbz	r3, 8032cba <_vfprintf_r+0xcb2>
 8032c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8032c86:	9a05      	ldr	r2, [sp, #20]
 8032c88:	781b      	ldrb	r3, [r3, #0]
 8032c8a:	429a      	cmp	r2, r3
 8032c8c:	d115      	bne.n	8032cba <_vfprintf_r+0xcb2>
 8032c8e:	2aff      	cmp	r2, #255	; 0xff
 8032c90:	d013      	beq.n	8032cba <_vfprintf_r+0xcb2>
 8032c92:	2d0a      	cmp	r5, #10
 8032c94:	f176 0300 	sbcs.w	r3, r6, #0
 8032c98:	d30f      	bcc.n	8032cba <_vfprintf_r+0xcb2>
 8032c9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8032c9c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8032c9e:	eba9 0903 	sub.w	r9, r9, r3
 8032ca2:	461a      	mov	r2, r3
 8032ca4:	4648      	mov	r0, r9
 8032ca6:	f001 fc5a 	bl	803455e <strncpy>
 8032caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8032cac:	785b      	ldrb	r3, [r3, #1]
 8032cae:	b11b      	cbz	r3, 8032cb8 <_vfprintf_r+0xcb0>
 8032cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8032cb2:	3301      	adds	r3, #1
 8032cb4:	930a      	str	r3, [sp, #40]	; 0x28
 8032cb6:	2300      	movs	r3, #0
 8032cb8:	9305      	str	r3, [sp, #20]
 8032cba:	2d0a      	cmp	r5, #10
 8032cbc:	f176 0600 	sbcs.w	r6, r6, #0
 8032cc0:	f0c0 83c4 	bcc.w	803344c <_vfprintf_r+0x1444>
 8032cc4:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 8032cc8:	46c8      	mov	r8, r9
 8032cca:	e7c9      	b.n	8032c60 <_vfprintf_r+0xc58>
 8032ccc:	f005 030f 	and.w	r3, r5, #15
 8032cd0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8032cd2:	092d      	lsrs	r5, r5, #4
 8032cd4:	5cd3      	ldrb	r3, [r2, r3]
 8032cd6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8032cda:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 8032cde:	0936      	lsrs	r6, r6, #4
 8032ce0:	ea55 0306 	orrs.w	r3, r5, r6
 8032ce4:	d1f2      	bne.n	8032ccc <_vfprintf_r+0xcc4>
 8032ce6:	e3b1      	b.n	803344c <_vfprintf_r+0x1444>
 8032ce8:	b933      	cbnz	r3, 8032cf8 <_vfprintf_r+0xcf0>
 8032cea:	f018 0f01 	tst.w	r8, #1
 8032cee:	d003      	beq.n	8032cf8 <_vfprintf_r+0xcf0>
 8032cf0:	2330      	movs	r3, #48	; 0x30
 8032cf2:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8032cf6:	e7a9      	b.n	8032c4c <_vfprintf_r+0xc44>
 8032cf8:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8032cfc:	e3a6      	b.n	803344c <_vfprintf_r+0x1444>
 8032cfe:	9b07      	ldr	r3, [sp, #28]
 8032d00:	2b00      	cmp	r3, #0
 8032d02:	f000 8371 	beq.w	80333e8 <_vfprintf_r+0x13e0>
 8032d06:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8032d0a:	2300      	movs	r3, #0
 8032d0c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8032d10:	9506      	str	r5, [sp, #24]
 8032d12:	f7ff bb22 	b.w	803235a <_vfprintf_r+0x352>
 8032d16:	9e03      	ldr	r6, [sp, #12]
 8032d18:	f7ff bb91 	b.w	803243e <_vfprintf_r+0x436>
 8032d1c:	2010      	movs	r0, #16
 8032d1e:	4402      	add	r2, r0
 8032d20:	2b07      	cmp	r3, #7
 8032d22:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8032d26:	6060      	str	r0, [r4, #4]
 8032d28:	dd08      	ble.n	8032d3c <_vfprintf_r+0xd34>
 8032d2a:	aa22      	add	r2, sp, #136	; 0x88
 8032d2c:	4659      	mov	r1, fp
 8032d2e:	4650      	mov	r0, sl
 8032d30:	f000 fbde 	bl	80334f0 <__sprint_r>
 8032d34:	2800      	cmp	r0, #0
 8032d36:	f040 8335 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032d3a:	a925      	add	r1, sp, #148	; 0x94
 8032d3c:	3f10      	subs	r7, #16
 8032d3e:	460c      	mov	r4, r1
 8032d40:	e4f7      	b.n	8032732 <_vfprintf_r+0x72a>
 8032d42:	460c      	mov	r4, r1
 8032d44:	e510      	b.n	8032768 <_vfprintf_r+0x760>
 8032d46:	aa22      	add	r2, sp, #136	; 0x88
 8032d48:	4659      	mov	r1, fp
 8032d4a:	4650      	mov	r0, sl
 8032d4c:	f000 fbd0 	bl	80334f0 <__sprint_r>
 8032d50:	2800      	cmp	r0, #0
 8032d52:	f040 8327 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032d56:	ac25      	add	r4, sp, #148	; 0x94
 8032d58:	e518      	b.n	803278c <_vfprintf_r+0x784>
 8032d5a:	aa22      	add	r2, sp, #136	; 0x88
 8032d5c:	4659      	mov	r1, fp
 8032d5e:	4650      	mov	r0, sl
 8032d60:	f000 fbc6 	bl	80334f0 <__sprint_r>
 8032d64:	2800      	cmp	r0, #0
 8032d66:	f040 831d 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032d6a:	ac25      	add	r4, sp, #148	; 0x94
 8032d6c:	e51e      	b.n	80327ac <_vfprintf_r+0x7a4>
 8032d6e:	2010      	movs	r0, #16
 8032d70:	4402      	add	r2, r0
 8032d72:	2b07      	cmp	r3, #7
 8032d74:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8032d78:	6060      	str	r0, [r4, #4]
 8032d7a:	dd08      	ble.n	8032d8e <_vfprintf_r+0xd86>
 8032d7c:	aa22      	add	r2, sp, #136	; 0x88
 8032d7e:	4659      	mov	r1, fp
 8032d80:	4650      	mov	r0, sl
 8032d82:	f000 fbb5 	bl	80334f0 <__sprint_r>
 8032d86:	2800      	cmp	r0, #0
 8032d88:	f040 830c 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032d8c:	a925      	add	r1, sp, #148	; 0x94
 8032d8e:	3f10      	subs	r7, #16
 8032d90:	460c      	mov	r4, r1
 8032d92:	e513      	b.n	80327bc <_vfprintf_r+0x7b4>
 8032d94:	460c      	mov	r4, r1
 8032d96:	e52c      	b.n	80327f2 <_vfprintf_r+0x7ea>
 8032d98:	2010      	movs	r0, #16
 8032d9a:	4402      	add	r2, r0
 8032d9c:	2b07      	cmp	r3, #7
 8032d9e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8032da2:	6060      	str	r0, [r4, #4]
 8032da4:	dd08      	ble.n	8032db8 <_vfprintf_r+0xdb0>
 8032da6:	aa22      	add	r2, sp, #136	; 0x88
 8032da8:	4659      	mov	r1, fp
 8032daa:	4650      	mov	r0, sl
 8032dac:	f000 fba0 	bl	80334f0 <__sprint_r>
 8032db0:	2800      	cmp	r0, #0
 8032db2:	f040 82f7 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032db6:	a925      	add	r1, sp, #148	; 0x94
 8032db8:	3e10      	subs	r6, #16
 8032dba:	460c      	mov	r4, r1
 8032dbc:	e52c      	b.n	8032818 <_vfprintf_r+0x810>
 8032dbe:	460c      	mov	r4, r1
 8032dc0:	e544      	b.n	803284c <_vfprintf_r+0x844>
 8032dc2:	bf00      	nop
 8032dc4:	08036e14 	.word	0x08036e14
 8032dc8:	08036e25 	.word	0x08036e25
 8032dcc:	9b07      	ldr	r3, [sp, #28]
 8032dce:	2b65      	cmp	r3, #101	; 0x65
 8032dd0:	f340 8230 	ble.w	8033234 <_vfprintf_r+0x122c>
 8032dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8032dd8:	2200      	movs	r2, #0
 8032dda:	2300      	movs	r3, #0
 8032ddc:	f7ef fe74 	bl	8022ac8 <__aeabi_dcmpeq>
 8032de0:	2800      	cmp	r0, #0
 8032de2:	d068      	beq.n	8032eb6 <_vfprintf_r+0xeae>
 8032de4:	4b6d      	ldr	r3, [pc, #436]	; (8032f9c <_vfprintf_r+0xf94>)
 8032de6:	6023      	str	r3, [r4, #0]
 8032de8:	2301      	movs	r3, #1
 8032dea:	441e      	add	r6, r3
 8032dec:	6063      	str	r3, [r4, #4]
 8032dee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8032df0:	9624      	str	r6, [sp, #144]	; 0x90
 8032df2:	3301      	adds	r3, #1
 8032df4:	2b07      	cmp	r3, #7
 8032df6:	9323      	str	r3, [sp, #140]	; 0x8c
 8032df8:	dc37      	bgt.n	8032e6a <_vfprintf_r+0xe62>
 8032dfa:	3408      	adds	r4, #8
 8032dfc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8032dfe:	9a05      	ldr	r2, [sp, #20]
 8032e00:	4293      	cmp	r3, r2
 8032e02:	db03      	blt.n	8032e0c <_vfprintf_r+0xe04>
 8032e04:	f018 0f01 	tst.w	r8, #1
 8032e08:	f43f ad32 	beq.w	8032870 <_vfprintf_r+0x868>
 8032e0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8032e0e:	6023      	str	r3, [r4, #0]
 8032e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8032e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8032e14:	6063      	str	r3, [r4, #4]
 8032e16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8032e18:	4413      	add	r3, r2
 8032e1a:	9324      	str	r3, [sp, #144]	; 0x90
 8032e1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8032e1e:	3301      	adds	r3, #1
 8032e20:	2b07      	cmp	r3, #7
 8032e22:	9323      	str	r3, [sp, #140]	; 0x8c
 8032e24:	dc2b      	bgt.n	8032e7e <_vfprintf_r+0xe76>
 8032e26:	3408      	adds	r4, #8
 8032e28:	9b05      	ldr	r3, [sp, #20]
 8032e2a:	1e5d      	subs	r5, r3, #1
 8032e2c:	2d00      	cmp	r5, #0
 8032e2e:	f77f ad1f 	ble.w	8032870 <_vfprintf_r+0x868>
 8032e32:	4e5b      	ldr	r6, [pc, #364]	; (8032fa0 <_vfprintf_r+0xf98>)
 8032e34:	2710      	movs	r7, #16
 8032e36:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8032e3a:	2d10      	cmp	r5, #16
 8032e3c:	f103 0301 	add.w	r3, r3, #1
 8032e40:	f104 0108 	add.w	r1, r4, #8
 8032e44:	6026      	str	r6, [r4, #0]
 8032e46:	dc24      	bgt.n	8032e92 <_vfprintf_r+0xe8a>
 8032e48:	6065      	str	r5, [r4, #4]
 8032e4a:	2b07      	cmp	r3, #7
 8032e4c:	4415      	add	r5, r2
 8032e4e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8032e52:	f340 8286 	ble.w	8033362 <_vfprintf_r+0x135a>
 8032e56:	aa22      	add	r2, sp, #136	; 0x88
 8032e58:	4659      	mov	r1, fp
 8032e5a:	4650      	mov	r0, sl
 8032e5c:	f000 fb48 	bl	80334f0 <__sprint_r>
 8032e60:	2800      	cmp	r0, #0
 8032e62:	f040 829f 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032e66:	ac25      	add	r4, sp, #148	; 0x94
 8032e68:	e502      	b.n	8032870 <_vfprintf_r+0x868>
 8032e6a:	aa22      	add	r2, sp, #136	; 0x88
 8032e6c:	4659      	mov	r1, fp
 8032e6e:	4650      	mov	r0, sl
 8032e70:	f000 fb3e 	bl	80334f0 <__sprint_r>
 8032e74:	2800      	cmp	r0, #0
 8032e76:	f040 8295 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032e7a:	ac25      	add	r4, sp, #148	; 0x94
 8032e7c:	e7be      	b.n	8032dfc <_vfprintf_r+0xdf4>
 8032e7e:	aa22      	add	r2, sp, #136	; 0x88
 8032e80:	4659      	mov	r1, fp
 8032e82:	4650      	mov	r0, sl
 8032e84:	f000 fb34 	bl	80334f0 <__sprint_r>
 8032e88:	2800      	cmp	r0, #0
 8032e8a:	f040 828b 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032e8e:	ac25      	add	r4, sp, #148	; 0x94
 8032e90:	e7ca      	b.n	8032e28 <_vfprintf_r+0xe20>
 8032e92:	3210      	adds	r2, #16
 8032e94:	2b07      	cmp	r3, #7
 8032e96:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8032e9a:	6067      	str	r7, [r4, #4]
 8032e9c:	dd08      	ble.n	8032eb0 <_vfprintf_r+0xea8>
 8032e9e:	aa22      	add	r2, sp, #136	; 0x88
 8032ea0:	4659      	mov	r1, fp
 8032ea2:	4650      	mov	r0, sl
 8032ea4:	f000 fb24 	bl	80334f0 <__sprint_r>
 8032ea8:	2800      	cmp	r0, #0
 8032eaa:	f040 827b 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032eae:	a925      	add	r1, sp, #148	; 0x94
 8032eb0:	3d10      	subs	r5, #16
 8032eb2:	460c      	mov	r4, r1
 8032eb4:	e7bf      	b.n	8032e36 <_vfprintf_r+0xe2e>
 8032eb6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8032eb8:	2b00      	cmp	r3, #0
 8032eba:	dc73      	bgt.n	8032fa4 <_vfprintf_r+0xf9c>
 8032ebc:	4b37      	ldr	r3, [pc, #220]	; (8032f9c <_vfprintf_r+0xf94>)
 8032ebe:	6023      	str	r3, [r4, #0]
 8032ec0:	2301      	movs	r3, #1
 8032ec2:	441e      	add	r6, r3
 8032ec4:	6063      	str	r3, [r4, #4]
 8032ec6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8032ec8:	9624      	str	r6, [sp, #144]	; 0x90
 8032eca:	3301      	adds	r3, #1
 8032ecc:	2b07      	cmp	r3, #7
 8032ece:	9323      	str	r3, [sp, #140]	; 0x8c
 8032ed0:	dc3d      	bgt.n	8032f4e <_vfprintf_r+0xf46>
 8032ed2:	3408      	adds	r4, #8
 8032ed4:	9905      	ldr	r1, [sp, #20]
 8032ed6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8032ed8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8032eda:	430b      	orrs	r3, r1
 8032edc:	f008 0101 	and.w	r1, r8, #1
 8032ee0:	430b      	orrs	r3, r1
 8032ee2:	f43f acc5 	beq.w	8032870 <_vfprintf_r+0x868>
 8032ee6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8032ee8:	6023      	str	r3, [r4, #0]
 8032eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8032eec:	6063      	str	r3, [r4, #4]
 8032eee:	441a      	add	r2, r3
 8032ef0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8032ef2:	9224      	str	r2, [sp, #144]	; 0x90
 8032ef4:	3301      	adds	r3, #1
 8032ef6:	2b07      	cmp	r3, #7
 8032ef8:	9323      	str	r3, [sp, #140]	; 0x8c
 8032efa:	dc32      	bgt.n	8032f62 <_vfprintf_r+0xf5a>
 8032efc:	3408      	adds	r4, #8
 8032efe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8032f00:	2d00      	cmp	r5, #0
 8032f02:	da1b      	bge.n	8032f3c <_vfprintf_r+0xf34>
 8032f04:	4e26      	ldr	r6, [pc, #152]	; (8032fa0 <_vfprintf_r+0xf98>)
 8032f06:	426d      	negs	r5, r5
 8032f08:	4623      	mov	r3, r4
 8032f0a:	2710      	movs	r7, #16
 8032f0c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8032f10:	2d10      	cmp	r5, #16
 8032f12:	f102 0201 	add.w	r2, r2, #1
 8032f16:	f104 0408 	add.w	r4, r4, #8
 8032f1a:	601e      	str	r6, [r3, #0]
 8032f1c:	dc2b      	bgt.n	8032f76 <_vfprintf_r+0xf6e>
 8032f1e:	605d      	str	r5, [r3, #4]
 8032f20:	2a07      	cmp	r2, #7
 8032f22:	440d      	add	r5, r1
 8032f24:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8032f28:	dd08      	ble.n	8032f3c <_vfprintf_r+0xf34>
 8032f2a:	aa22      	add	r2, sp, #136	; 0x88
 8032f2c:	4659      	mov	r1, fp
 8032f2e:	4650      	mov	r0, sl
 8032f30:	f000 fade 	bl	80334f0 <__sprint_r>
 8032f34:	2800      	cmp	r0, #0
 8032f36:	f040 8235 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032f3a:	ac25      	add	r4, sp, #148	; 0x94
 8032f3c:	9b05      	ldr	r3, [sp, #20]
 8032f3e:	9a05      	ldr	r2, [sp, #20]
 8032f40:	6063      	str	r3, [r4, #4]
 8032f42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8032f44:	f8c4 9000 	str.w	r9, [r4]
 8032f48:	4413      	add	r3, r2
 8032f4a:	9324      	str	r3, [sp, #144]	; 0x90
 8032f4c:	e489      	b.n	8032862 <_vfprintf_r+0x85a>
 8032f4e:	aa22      	add	r2, sp, #136	; 0x88
 8032f50:	4659      	mov	r1, fp
 8032f52:	4650      	mov	r0, sl
 8032f54:	f000 facc 	bl	80334f0 <__sprint_r>
 8032f58:	2800      	cmp	r0, #0
 8032f5a:	f040 8223 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032f5e:	ac25      	add	r4, sp, #148	; 0x94
 8032f60:	e7b8      	b.n	8032ed4 <_vfprintf_r+0xecc>
 8032f62:	aa22      	add	r2, sp, #136	; 0x88
 8032f64:	4659      	mov	r1, fp
 8032f66:	4650      	mov	r0, sl
 8032f68:	f000 fac2 	bl	80334f0 <__sprint_r>
 8032f6c:	2800      	cmp	r0, #0
 8032f6e:	f040 8219 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032f72:	ac25      	add	r4, sp, #148	; 0x94
 8032f74:	e7c3      	b.n	8032efe <_vfprintf_r+0xef6>
 8032f76:	3110      	adds	r1, #16
 8032f78:	2a07      	cmp	r2, #7
 8032f7a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8032f7e:	605f      	str	r7, [r3, #4]
 8032f80:	dd08      	ble.n	8032f94 <_vfprintf_r+0xf8c>
 8032f82:	aa22      	add	r2, sp, #136	; 0x88
 8032f84:	4659      	mov	r1, fp
 8032f86:	4650      	mov	r0, sl
 8032f88:	f000 fab2 	bl	80334f0 <__sprint_r>
 8032f8c:	2800      	cmp	r0, #0
 8032f8e:	f040 8209 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8032f92:	ac25      	add	r4, sp, #148	; 0x94
 8032f94:	3d10      	subs	r5, #16
 8032f96:	4623      	mov	r3, r4
 8032f98:	e7b8      	b.n	8032f0c <_vfprintf_r+0xf04>
 8032f9a:	bf00      	nop
 8032f9c:	08036e36 	.word	0x08036e36
 8032fa0:	08036e48 	.word	0x08036e48
 8032fa4:	9f05      	ldr	r7, [sp, #20]
 8032fa6:	42af      	cmp	r7, r5
 8032fa8:	bfa8      	it	ge
 8032faa:	462f      	movge	r7, r5
 8032fac:	2f00      	cmp	r7, #0
 8032fae:	dd0a      	ble.n	8032fc6 <_vfprintf_r+0xfbe>
 8032fb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8032fb2:	3301      	adds	r3, #1
 8032fb4:	443e      	add	r6, r7
 8032fb6:	2b07      	cmp	r3, #7
 8032fb8:	e9c4 9700 	strd	r9, r7, [r4]
 8032fbc:	9624      	str	r6, [sp, #144]	; 0x90
 8032fbe:	9323      	str	r3, [sp, #140]	; 0x8c
 8032fc0:	f300 8084 	bgt.w	80330cc <_vfprintf_r+0x10c4>
 8032fc4:	3408      	adds	r4, #8
 8032fc6:	2f00      	cmp	r7, #0
 8032fc8:	bfac      	ite	ge
 8032fca:	1bee      	subge	r6, r5, r7
 8032fcc:	462e      	movlt	r6, r5
 8032fce:	2e00      	cmp	r6, #0
 8032fd0:	dd19      	ble.n	8033006 <_vfprintf_r+0xffe>
 8032fd2:	4f97      	ldr	r7, [pc, #604]	; (8033230 <_vfprintf_r+0x1228>)
 8032fd4:	6027      	str	r7, [r4, #0]
 8032fd6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8032fda:	2e10      	cmp	r6, #16
 8032fdc:	f103 0301 	add.w	r3, r3, #1
 8032fe0:	f104 0108 	add.w	r1, r4, #8
 8032fe4:	dc7c      	bgt.n	80330e0 <_vfprintf_r+0x10d8>
 8032fe6:	6066      	str	r6, [r4, #4]
 8032fe8:	2b07      	cmp	r3, #7
 8032fea:	4416      	add	r6, r2
 8032fec:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8032ff0:	f340 8089 	ble.w	8033106 <_vfprintf_r+0x10fe>
 8032ff4:	aa22      	add	r2, sp, #136	; 0x88
 8032ff6:	4659      	mov	r1, fp
 8032ff8:	4650      	mov	r0, sl
 8032ffa:	f000 fa79 	bl	80334f0 <__sprint_r>
 8032ffe:	2800      	cmp	r0, #0
 8033000:	f040 81d0 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8033004:	ac25      	add	r4, sp, #148	; 0x94
 8033006:	f418 6f80 	tst.w	r8, #1024	; 0x400
 803300a:	444d      	add	r5, r9
 803300c:	d00a      	beq.n	8033024 <_vfprintf_r+0x101c>
 803300e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8033010:	2b00      	cmp	r3, #0
 8033012:	d17a      	bne.n	803310a <_vfprintf_r+0x1102>
 8033014:	9b08      	ldr	r3, [sp, #32]
 8033016:	2b00      	cmp	r3, #0
 8033018:	d17a      	bne.n	8033110 <_vfprintf_r+0x1108>
 803301a:	9b05      	ldr	r3, [sp, #20]
 803301c:	444b      	add	r3, r9
 803301e:	429d      	cmp	r5, r3
 8033020:	bf28      	it	cs
 8033022:	461d      	movcs	r5, r3
 8033024:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8033026:	9a05      	ldr	r2, [sp, #20]
 8033028:	4293      	cmp	r3, r2
 803302a:	db02      	blt.n	8033032 <_vfprintf_r+0x102a>
 803302c:	f018 0f01 	tst.w	r8, #1
 8033030:	d00e      	beq.n	8033050 <_vfprintf_r+0x1048>
 8033032:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8033034:	6023      	str	r3, [r4, #0]
 8033036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8033038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 803303a:	6063      	str	r3, [r4, #4]
 803303c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 803303e:	4413      	add	r3, r2
 8033040:	9324      	str	r3, [sp, #144]	; 0x90
 8033042:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8033044:	3301      	adds	r3, #1
 8033046:	2b07      	cmp	r3, #7
 8033048:	9323      	str	r3, [sp, #140]	; 0x8c
 803304a:	f300 80dc 	bgt.w	8033206 <_vfprintf_r+0x11fe>
 803304e:	3408      	adds	r4, #8
 8033050:	9b05      	ldr	r3, [sp, #20]
 8033052:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8033054:	1b9e      	subs	r6, r3, r6
 8033056:	444b      	add	r3, r9
 8033058:	1b5b      	subs	r3, r3, r5
 803305a:	429e      	cmp	r6, r3
 803305c:	bfa8      	it	ge
 803305e:	461e      	movge	r6, r3
 8033060:	2e00      	cmp	r6, #0
 8033062:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8033064:	dd0a      	ble.n	803307c <_vfprintf_r+0x1074>
 8033066:	4433      	add	r3, r6
 8033068:	9324      	str	r3, [sp, #144]	; 0x90
 803306a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 803306c:	3301      	adds	r3, #1
 803306e:	2b07      	cmp	r3, #7
 8033070:	e9c4 5600 	strd	r5, r6, [r4]
 8033074:	9323      	str	r3, [sp, #140]	; 0x8c
 8033076:	f300 80d0 	bgt.w	803321a <_vfprintf_r+0x1212>
 803307a:	3408      	adds	r4, #8
 803307c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 803307e:	9b05      	ldr	r3, [sp, #20]
 8033080:	2e00      	cmp	r6, #0
 8033082:	eba3 0505 	sub.w	r5, r3, r5
 8033086:	bfa8      	it	ge
 8033088:	1bad      	subge	r5, r5, r6
 803308a:	2d00      	cmp	r5, #0
 803308c:	f77f abf0 	ble.w	8032870 <_vfprintf_r+0x868>
 8033090:	4e67      	ldr	r6, [pc, #412]	; (8033230 <_vfprintf_r+0x1228>)
 8033092:	2710      	movs	r7, #16
 8033094:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8033098:	2d10      	cmp	r5, #16
 803309a:	f103 0301 	add.w	r3, r3, #1
 803309e:	f104 0108 	add.w	r1, r4, #8
 80330a2:	6026      	str	r6, [r4, #0]
 80330a4:	f77f aed0 	ble.w	8032e48 <_vfprintf_r+0xe40>
 80330a8:	3210      	adds	r2, #16
 80330aa:	2b07      	cmp	r3, #7
 80330ac:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80330b0:	6067      	str	r7, [r4, #4]
 80330b2:	dd08      	ble.n	80330c6 <_vfprintf_r+0x10be>
 80330b4:	aa22      	add	r2, sp, #136	; 0x88
 80330b6:	4659      	mov	r1, fp
 80330b8:	4650      	mov	r0, sl
 80330ba:	f000 fa19 	bl	80334f0 <__sprint_r>
 80330be:	2800      	cmp	r0, #0
 80330c0:	f040 8170 	bne.w	80333a4 <_vfprintf_r+0x139c>
 80330c4:	a925      	add	r1, sp, #148	; 0x94
 80330c6:	3d10      	subs	r5, #16
 80330c8:	460c      	mov	r4, r1
 80330ca:	e7e3      	b.n	8033094 <_vfprintf_r+0x108c>
 80330cc:	aa22      	add	r2, sp, #136	; 0x88
 80330ce:	4659      	mov	r1, fp
 80330d0:	4650      	mov	r0, sl
 80330d2:	f000 fa0d 	bl	80334f0 <__sprint_r>
 80330d6:	2800      	cmp	r0, #0
 80330d8:	f040 8164 	bne.w	80333a4 <_vfprintf_r+0x139c>
 80330dc:	ac25      	add	r4, sp, #148	; 0x94
 80330de:	e772      	b.n	8032fc6 <_vfprintf_r+0xfbe>
 80330e0:	2010      	movs	r0, #16
 80330e2:	4402      	add	r2, r0
 80330e4:	2b07      	cmp	r3, #7
 80330e6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80330ea:	6060      	str	r0, [r4, #4]
 80330ec:	dd08      	ble.n	8033100 <_vfprintf_r+0x10f8>
 80330ee:	aa22      	add	r2, sp, #136	; 0x88
 80330f0:	4659      	mov	r1, fp
 80330f2:	4650      	mov	r0, sl
 80330f4:	f000 f9fc 	bl	80334f0 <__sprint_r>
 80330f8:	2800      	cmp	r0, #0
 80330fa:	f040 8153 	bne.w	80333a4 <_vfprintf_r+0x139c>
 80330fe:	a925      	add	r1, sp, #148	; 0x94
 8033100:	3e10      	subs	r6, #16
 8033102:	460c      	mov	r4, r1
 8033104:	e766      	b.n	8032fd4 <_vfprintf_r+0xfcc>
 8033106:	460c      	mov	r4, r1
 8033108:	e77d      	b.n	8033006 <_vfprintf_r+0xffe>
 803310a:	9b08      	ldr	r3, [sp, #32]
 803310c:	2b00      	cmp	r3, #0
 803310e:	d04a      	beq.n	80331a6 <_vfprintf_r+0x119e>
 8033110:	9b08      	ldr	r3, [sp, #32]
 8033112:	3b01      	subs	r3, #1
 8033114:	9308      	str	r3, [sp, #32]
 8033116:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8033118:	6023      	str	r3, [r4, #0]
 803311a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 803311c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 803311e:	6063      	str	r3, [r4, #4]
 8033120:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8033122:	4413      	add	r3, r2
 8033124:	9324      	str	r3, [sp, #144]	; 0x90
 8033126:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8033128:	3301      	adds	r3, #1
 803312a:	2b07      	cmp	r3, #7
 803312c:	9323      	str	r3, [sp, #140]	; 0x8c
 803312e:	dc41      	bgt.n	80331b4 <_vfprintf_r+0x11ac>
 8033130:	3408      	adds	r4, #8
 8033132:	9b05      	ldr	r3, [sp, #20]
 8033134:	eb09 0703 	add.w	r7, r9, r3
 8033138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803313a:	781b      	ldrb	r3, [r3, #0]
 803313c:	1b7f      	subs	r7, r7, r5
 803313e:	429f      	cmp	r7, r3
 8033140:	bfa8      	it	ge
 8033142:	461f      	movge	r7, r3
 8033144:	2f00      	cmp	r7, #0
 8033146:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8033148:	dd09      	ble.n	803315e <_vfprintf_r+0x1156>
 803314a:	443b      	add	r3, r7
 803314c:	9324      	str	r3, [sp, #144]	; 0x90
 803314e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8033150:	3301      	adds	r3, #1
 8033152:	2b07      	cmp	r3, #7
 8033154:	e9c4 5700 	strd	r5, r7, [r4]
 8033158:	9323      	str	r3, [sp, #140]	; 0x8c
 803315a:	dc35      	bgt.n	80331c8 <_vfprintf_r+0x11c0>
 803315c:	3408      	adds	r4, #8
 803315e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8033160:	781e      	ldrb	r6, [r3, #0]
 8033162:	2f00      	cmp	r7, #0
 8033164:	bfa8      	it	ge
 8033166:	1bf6      	subge	r6, r6, r7
 8033168:	2e00      	cmp	r6, #0
 803316a:	dd18      	ble.n	803319e <_vfprintf_r+0x1196>
 803316c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8033170:	482f      	ldr	r0, [pc, #188]	; (8033230 <_vfprintf_r+0x1228>)
 8033172:	6020      	str	r0, [r4, #0]
 8033174:	2e10      	cmp	r6, #16
 8033176:	f103 0301 	add.w	r3, r3, #1
 803317a:	f104 0108 	add.w	r1, r4, #8
 803317e:	dc2d      	bgt.n	80331dc <_vfprintf_r+0x11d4>
 8033180:	6066      	str	r6, [r4, #4]
 8033182:	2b07      	cmp	r3, #7
 8033184:	4416      	add	r6, r2
 8033186:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 803318a:	dd3a      	ble.n	8033202 <_vfprintf_r+0x11fa>
 803318c:	aa22      	add	r2, sp, #136	; 0x88
 803318e:	4659      	mov	r1, fp
 8033190:	4650      	mov	r0, sl
 8033192:	f000 f9ad 	bl	80334f0 <__sprint_r>
 8033196:	2800      	cmp	r0, #0
 8033198:	f040 8104 	bne.w	80333a4 <_vfprintf_r+0x139c>
 803319c:	ac25      	add	r4, sp, #148	; 0x94
 803319e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80331a0:	781b      	ldrb	r3, [r3, #0]
 80331a2:	441d      	add	r5, r3
 80331a4:	e733      	b.n	803300e <_vfprintf_r+0x1006>
 80331a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80331a8:	3b01      	subs	r3, #1
 80331aa:	930a      	str	r3, [sp, #40]	; 0x28
 80331ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80331ae:	3b01      	subs	r3, #1
 80331b0:	9309      	str	r3, [sp, #36]	; 0x24
 80331b2:	e7b0      	b.n	8033116 <_vfprintf_r+0x110e>
 80331b4:	aa22      	add	r2, sp, #136	; 0x88
 80331b6:	4659      	mov	r1, fp
 80331b8:	4650      	mov	r0, sl
 80331ba:	f000 f999 	bl	80334f0 <__sprint_r>
 80331be:	2800      	cmp	r0, #0
 80331c0:	f040 80f0 	bne.w	80333a4 <_vfprintf_r+0x139c>
 80331c4:	ac25      	add	r4, sp, #148	; 0x94
 80331c6:	e7b4      	b.n	8033132 <_vfprintf_r+0x112a>
 80331c8:	aa22      	add	r2, sp, #136	; 0x88
 80331ca:	4659      	mov	r1, fp
 80331cc:	4650      	mov	r0, sl
 80331ce:	f000 f98f 	bl	80334f0 <__sprint_r>
 80331d2:	2800      	cmp	r0, #0
 80331d4:	f040 80e6 	bne.w	80333a4 <_vfprintf_r+0x139c>
 80331d8:	ac25      	add	r4, sp, #148	; 0x94
 80331da:	e7c0      	b.n	803315e <_vfprintf_r+0x1156>
 80331dc:	2010      	movs	r0, #16
 80331de:	4402      	add	r2, r0
 80331e0:	2b07      	cmp	r3, #7
 80331e2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80331e6:	6060      	str	r0, [r4, #4]
 80331e8:	dd08      	ble.n	80331fc <_vfprintf_r+0x11f4>
 80331ea:	aa22      	add	r2, sp, #136	; 0x88
 80331ec:	4659      	mov	r1, fp
 80331ee:	4650      	mov	r0, sl
 80331f0:	f000 f97e 	bl	80334f0 <__sprint_r>
 80331f4:	2800      	cmp	r0, #0
 80331f6:	f040 80d5 	bne.w	80333a4 <_vfprintf_r+0x139c>
 80331fa:	a925      	add	r1, sp, #148	; 0x94
 80331fc:	3e10      	subs	r6, #16
 80331fe:	460c      	mov	r4, r1
 8033200:	e7b4      	b.n	803316c <_vfprintf_r+0x1164>
 8033202:	460c      	mov	r4, r1
 8033204:	e7cb      	b.n	803319e <_vfprintf_r+0x1196>
 8033206:	aa22      	add	r2, sp, #136	; 0x88
 8033208:	4659      	mov	r1, fp
 803320a:	4650      	mov	r0, sl
 803320c:	f000 f970 	bl	80334f0 <__sprint_r>
 8033210:	2800      	cmp	r0, #0
 8033212:	f040 80c7 	bne.w	80333a4 <_vfprintf_r+0x139c>
 8033216:	ac25      	add	r4, sp, #148	; 0x94
 8033218:	e71a      	b.n	8033050 <_vfprintf_r+0x1048>
 803321a:	aa22      	add	r2, sp, #136	; 0x88
 803321c:	4659      	mov	r1, fp
 803321e:	4650      	mov	r0, sl
 8033220:	f000 f966 	bl	80334f0 <__sprint_r>
 8033224:	2800      	cmp	r0, #0
 8033226:	f040 80bd 	bne.w	80333a4 <_vfprintf_r+0x139c>
 803322a:	ac25      	add	r4, sp, #148	; 0x94
 803322c:	e726      	b.n	803307c <_vfprintf_r+0x1074>
 803322e:	bf00      	nop
 8033230:	08036e48 	.word	0x08036e48
 8033234:	9a05      	ldr	r2, [sp, #20]
 8033236:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8033238:	2a01      	cmp	r2, #1
 803323a:	f106 0601 	add.w	r6, r6, #1
 803323e:	f103 0301 	add.w	r3, r3, #1
 8033242:	f104 0508 	add.w	r5, r4, #8
 8033246:	dc02      	bgt.n	803324e <_vfprintf_r+0x1246>
 8033248:	f018 0f01 	tst.w	r8, #1
 803324c:	d07e      	beq.n	803334c <_vfprintf_r+0x1344>
 803324e:	2201      	movs	r2, #1
 8033250:	2b07      	cmp	r3, #7
 8033252:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8033256:	f8c4 9000 	str.w	r9, [r4]
 803325a:	6062      	str	r2, [r4, #4]
 803325c:	dd08      	ble.n	8033270 <_vfprintf_r+0x1268>
 803325e:	aa22      	add	r2, sp, #136	; 0x88
 8033260:	4659      	mov	r1, fp
 8033262:	4650      	mov	r0, sl
 8033264:	f000 f944 	bl	80334f0 <__sprint_r>
 8033268:	2800      	cmp	r0, #0
 803326a:	f040 809b 	bne.w	80333a4 <_vfprintf_r+0x139c>
 803326e:	ad25      	add	r5, sp, #148	; 0x94
 8033270:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8033272:	602b      	str	r3, [r5, #0]
 8033274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8033276:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8033278:	606b      	str	r3, [r5, #4]
 803327a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 803327c:	4413      	add	r3, r2
 803327e:	9324      	str	r3, [sp, #144]	; 0x90
 8033280:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8033282:	3301      	adds	r3, #1
 8033284:	2b07      	cmp	r3, #7
 8033286:	9323      	str	r3, [sp, #140]	; 0x8c
 8033288:	dc32      	bgt.n	80332f0 <_vfprintf_r+0x12e8>
 803328a:	3508      	adds	r5, #8
 803328c:	9b05      	ldr	r3, [sp, #20]
 803328e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8033292:	1e5c      	subs	r4, r3, #1
 8033294:	2200      	movs	r2, #0
 8033296:	2300      	movs	r3, #0
 8033298:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 803329c:	f7ef fc14 	bl	8022ac8 <__aeabi_dcmpeq>
 80332a0:	2800      	cmp	r0, #0
 80332a2:	d12e      	bne.n	8033302 <_vfprintf_r+0x12fa>
 80332a4:	f109 0301 	add.w	r3, r9, #1
 80332a8:	e9c5 3400 	strd	r3, r4, [r5]
 80332ac:	9b05      	ldr	r3, [sp, #20]
 80332ae:	3701      	adds	r7, #1
 80332b0:	3e01      	subs	r6, #1
 80332b2:	441e      	add	r6, r3
 80332b4:	2f07      	cmp	r7, #7
 80332b6:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 80332ba:	dd50      	ble.n	803335e <_vfprintf_r+0x1356>
 80332bc:	aa22      	add	r2, sp, #136	; 0x88
 80332be:	4659      	mov	r1, fp
 80332c0:	4650      	mov	r0, sl
 80332c2:	f000 f915 	bl	80334f0 <__sprint_r>
 80332c6:	2800      	cmp	r0, #0
 80332c8:	d16c      	bne.n	80333a4 <_vfprintf_r+0x139c>
 80332ca:	ad25      	add	r5, sp, #148	; 0x94
 80332cc:	ab1e      	add	r3, sp, #120	; 0x78
 80332ce:	602b      	str	r3, [r5, #0]
 80332d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80332d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80332d4:	606b      	str	r3, [r5, #4]
 80332d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80332d8:	4413      	add	r3, r2
 80332da:	9324      	str	r3, [sp, #144]	; 0x90
 80332dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80332de:	3301      	adds	r3, #1
 80332e0:	2b07      	cmp	r3, #7
 80332e2:	9323      	str	r3, [sp, #140]	; 0x8c
 80332e4:	f73f adb7 	bgt.w	8032e56 <_vfprintf_r+0xe4e>
 80332e8:	f105 0408 	add.w	r4, r5, #8
 80332ec:	f7ff bac0 	b.w	8032870 <_vfprintf_r+0x868>
 80332f0:	aa22      	add	r2, sp, #136	; 0x88
 80332f2:	4659      	mov	r1, fp
 80332f4:	4650      	mov	r0, sl
 80332f6:	f000 f8fb 	bl	80334f0 <__sprint_r>
 80332fa:	2800      	cmp	r0, #0
 80332fc:	d152      	bne.n	80333a4 <_vfprintf_r+0x139c>
 80332fe:	ad25      	add	r5, sp, #148	; 0x94
 8033300:	e7c4      	b.n	803328c <_vfprintf_r+0x1284>
 8033302:	2c00      	cmp	r4, #0
 8033304:	dde2      	ble.n	80332cc <_vfprintf_r+0x12c4>
 8033306:	4e58      	ldr	r6, [pc, #352]	; (8033468 <_vfprintf_r+0x1460>)
 8033308:	2710      	movs	r7, #16
 803330a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 803330e:	2c10      	cmp	r4, #16
 8033310:	f103 0301 	add.w	r3, r3, #1
 8033314:	f105 0108 	add.w	r1, r5, #8
 8033318:	602e      	str	r6, [r5, #0]
 803331a:	dc07      	bgt.n	803332c <_vfprintf_r+0x1324>
 803331c:	606c      	str	r4, [r5, #4]
 803331e:	2b07      	cmp	r3, #7
 8033320:	4414      	add	r4, r2
 8033322:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8033326:	dcc9      	bgt.n	80332bc <_vfprintf_r+0x12b4>
 8033328:	460d      	mov	r5, r1
 803332a:	e7cf      	b.n	80332cc <_vfprintf_r+0x12c4>
 803332c:	3210      	adds	r2, #16
 803332e:	2b07      	cmp	r3, #7
 8033330:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8033334:	606f      	str	r7, [r5, #4]
 8033336:	dd06      	ble.n	8033346 <_vfprintf_r+0x133e>
 8033338:	aa22      	add	r2, sp, #136	; 0x88
 803333a:	4659      	mov	r1, fp
 803333c:	4650      	mov	r0, sl
 803333e:	f000 f8d7 	bl	80334f0 <__sprint_r>
 8033342:	bb78      	cbnz	r0, 80333a4 <_vfprintf_r+0x139c>
 8033344:	a925      	add	r1, sp, #148	; 0x94
 8033346:	3c10      	subs	r4, #16
 8033348:	460d      	mov	r5, r1
 803334a:	e7de      	b.n	803330a <_vfprintf_r+0x1302>
 803334c:	2201      	movs	r2, #1
 803334e:	2b07      	cmp	r3, #7
 8033350:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8033354:	f8c4 9000 	str.w	r9, [r4]
 8033358:	6062      	str	r2, [r4, #4]
 803335a:	ddb7      	ble.n	80332cc <_vfprintf_r+0x12c4>
 803335c:	e7ae      	b.n	80332bc <_vfprintf_r+0x12b4>
 803335e:	3508      	adds	r5, #8
 8033360:	e7b4      	b.n	80332cc <_vfprintf_r+0x12c4>
 8033362:	460c      	mov	r4, r1
 8033364:	f7ff ba84 	b.w	8032870 <_vfprintf_r+0x868>
 8033368:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 803336c:	1a9d      	subs	r5, r3, r2
 803336e:	2d00      	cmp	r5, #0
 8033370:	f77f aa82 	ble.w	8032878 <_vfprintf_r+0x870>
 8033374:	4e3d      	ldr	r6, [pc, #244]	; (803346c <_vfprintf_r+0x1464>)
 8033376:	2710      	movs	r7, #16
 8033378:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 803337c:	2d10      	cmp	r5, #16
 803337e:	f103 0301 	add.w	r3, r3, #1
 8033382:	6026      	str	r6, [r4, #0]
 8033384:	dc18      	bgt.n	80333b8 <_vfprintf_r+0x13b0>
 8033386:	6065      	str	r5, [r4, #4]
 8033388:	2b07      	cmp	r3, #7
 803338a:	4415      	add	r5, r2
 803338c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8033390:	f77f aa72 	ble.w	8032878 <_vfprintf_r+0x870>
 8033394:	aa22      	add	r2, sp, #136	; 0x88
 8033396:	4659      	mov	r1, fp
 8033398:	4650      	mov	r0, sl
 803339a:	f000 f8a9 	bl	80334f0 <__sprint_r>
 803339e:	2800      	cmp	r0, #0
 80333a0:	f43f aa6a 	beq.w	8032878 <_vfprintf_r+0x870>
 80333a4:	9b03      	ldr	r3, [sp, #12]
 80333a6:	2b00      	cmp	r3, #0
 80333a8:	f43f a87f 	beq.w	80324aa <_vfprintf_r+0x4a2>
 80333ac:	4619      	mov	r1, r3
 80333ae:	4650      	mov	r0, sl
 80333b0:	f7fe fb24 	bl	80319fc <_free_r>
 80333b4:	f7ff b879 	b.w	80324aa <_vfprintf_r+0x4a2>
 80333b8:	3210      	adds	r2, #16
 80333ba:	2b07      	cmp	r3, #7
 80333bc:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80333c0:	6067      	str	r7, [r4, #4]
 80333c2:	dc02      	bgt.n	80333ca <_vfprintf_r+0x13c2>
 80333c4:	3408      	adds	r4, #8
 80333c6:	3d10      	subs	r5, #16
 80333c8:	e7d6      	b.n	8033378 <_vfprintf_r+0x1370>
 80333ca:	aa22      	add	r2, sp, #136	; 0x88
 80333cc:	4659      	mov	r1, fp
 80333ce:	4650      	mov	r0, sl
 80333d0:	f000 f88e 	bl	80334f0 <__sprint_r>
 80333d4:	2800      	cmp	r0, #0
 80333d6:	d1e5      	bne.n	80333a4 <_vfprintf_r+0x139c>
 80333d8:	ac25      	add	r4, sp, #148	; 0x94
 80333da:	e7f4      	b.n	80333c6 <_vfprintf_r+0x13be>
 80333dc:	9903      	ldr	r1, [sp, #12]
 80333de:	4650      	mov	r0, sl
 80333e0:	f7fe fb0c 	bl	80319fc <_free_r>
 80333e4:	f7ff ba60 	b.w	80328a8 <_vfprintf_r+0x8a0>
 80333e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80333ea:	b91b      	cbnz	r3, 80333f4 <_vfprintf_r+0x13ec>
 80333ec:	2300      	movs	r3, #0
 80333ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80333f0:	f7ff b85b 	b.w	80324aa <_vfprintf_r+0x4a2>
 80333f4:	aa22      	add	r2, sp, #136	; 0x88
 80333f6:	4659      	mov	r1, fp
 80333f8:	4650      	mov	r0, sl
 80333fa:	f000 f879 	bl	80334f0 <__sprint_r>
 80333fe:	2800      	cmp	r0, #0
 8033400:	d0f4      	beq.n	80333ec <_vfprintf_r+0x13e4>
 8033402:	f7ff b852 	b.w	80324aa <_vfprintf_r+0x4a2>
 8033406:	ea55 0206 	orrs.w	r2, r5, r6
 803340a:	4647      	mov	r7, r8
 803340c:	f43f ab78 	beq.w	8032b00 <_vfprintf_r+0xaf8>
 8033410:	2b01      	cmp	r3, #1
 8033412:	f43f ac14 	beq.w	8032c3e <_vfprintf_r+0xc36>
 8033416:	2b02      	cmp	r3, #2
 8033418:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 803341c:	f43f ac56 	beq.w	8032ccc <_vfprintf_r+0xcc4>
 8033420:	f005 0307 	and.w	r3, r5, #7
 8033424:	08ed      	lsrs	r5, r5, #3
 8033426:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 803342a:	08f6      	lsrs	r6, r6, #3
 803342c:	3330      	adds	r3, #48	; 0x30
 803342e:	ea55 0106 	orrs.w	r1, r5, r6
 8033432:	464a      	mov	r2, r9
 8033434:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8033438:	d1f2      	bne.n	8033420 <_vfprintf_r+0x1418>
 803343a:	07f8      	lsls	r0, r7, #31
 803343c:	d506      	bpl.n	803344c <_vfprintf_r+0x1444>
 803343e:	2b30      	cmp	r3, #48	; 0x30
 8033440:	d004      	beq.n	803344c <_vfprintf_r+0x1444>
 8033442:	2330      	movs	r3, #48	; 0x30
 8033444:	f809 3c01 	strb.w	r3, [r9, #-1]
 8033448:	f1a2 0902 	sub.w	r9, r2, #2
 803344c:	ab4e      	add	r3, sp, #312	; 0x138
 803344e:	eba3 0309 	sub.w	r3, r3, r9
 8033452:	9e04      	ldr	r6, [sp, #16]
 8033454:	9304      	str	r3, [sp, #16]
 8033456:	2300      	movs	r3, #0
 8033458:	46b8      	mov	r8, r7
 803345a:	9303      	str	r3, [sp, #12]
 803345c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8033460:	461d      	mov	r5, r3
 8033462:	f7ff b94b 	b.w	80326fc <_vfprintf_r+0x6f4>
 8033466:	bf00      	nop
 8033468:	08036e48 	.word	0x08036e48
 803346c:	08036e38 	.word	0x08036e38

08033470 <__sbprintf>:
 8033470:	b570      	push	{r4, r5, r6, lr}
 8033472:	460c      	mov	r4, r1
 8033474:	8989      	ldrh	r1, [r1, #12]
 8033476:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 803347a:	f021 0102 	bic.w	r1, r1, #2
 803347e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8033482:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8033484:	911b      	str	r1, [sp, #108]	; 0x6c
 8033486:	89e1      	ldrh	r1, [r4, #14]
 8033488:	f8ad 1016 	strh.w	r1, [sp, #22]
 803348c:	69e1      	ldr	r1, [r4, #28]
 803348e:	9109      	str	r1, [sp, #36]	; 0x24
 8033490:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8033492:	910b      	str	r1, [sp, #44]	; 0x2c
 8033494:	a91c      	add	r1, sp, #112	; 0x70
 8033496:	9102      	str	r1, [sp, #8]
 8033498:	9106      	str	r1, [sp, #24]
 803349a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 803349e:	4606      	mov	r6, r0
 80334a0:	9104      	str	r1, [sp, #16]
 80334a2:	9107      	str	r1, [sp, #28]
 80334a4:	a818      	add	r0, sp, #96	; 0x60
 80334a6:	2100      	movs	r1, #0
 80334a8:	e9cd 3200 	strd	r3, r2, [sp]
 80334ac:	9108      	str	r1, [sp, #32]
 80334ae:	f7fe fa2f 	bl	8031910 <__retarget_lock_init_recursive>
 80334b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80334b6:	a902      	add	r1, sp, #8
 80334b8:	4630      	mov	r0, r6
 80334ba:	f7fe fda5 	bl	8032008 <_vfprintf_r>
 80334be:	1e05      	subs	r5, r0, #0
 80334c0:	db07      	blt.n	80334d2 <__sbprintf+0x62>
 80334c2:	a902      	add	r1, sp, #8
 80334c4:	4630      	mov	r0, r6
 80334c6:	f000 fdfd 	bl	80340c4 <_fflush_r>
 80334ca:	2800      	cmp	r0, #0
 80334cc:	bf18      	it	ne
 80334ce:	f04f 35ff 	movne.w	r5, #4294967295
 80334d2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80334d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80334d8:	065b      	lsls	r3, r3, #25
 80334da:	bf42      	ittt	mi
 80334dc:	89a3      	ldrhmi	r3, [r4, #12]
 80334de:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80334e2:	81a3      	strhmi	r3, [r4, #12]
 80334e4:	f7fe fa15 	bl	8031912 <__retarget_lock_close_recursive>
 80334e8:	4628      	mov	r0, r5
 80334ea:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80334ee:	bd70      	pop	{r4, r5, r6, pc}

080334f0 <__sprint_r>:
 80334f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80334f4:	6893      	ldr	r3, [r2, #8]
 80334f6:	4680      	mov	r8, r0
 80334f8:	460f      	mov	r7, r1
 80334fa:	4614      	mov	r4, r2
 80334fc:	b343      	cbz	r3, 8033550 <__sprint_r+0x60>
 80334fe:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8033500:	049d      	lsls	r5, r3, #18
 8033502:	d522      	bpl.n	803354a <__sprint_r+0x5a>
 8033504:	6815      	ldr	r5, [r2, #0]
 8033506:	3508      	adds	r5, #8
 8033508:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 803350c:	f04f 0900 	mov.w	r9, #0
 8033510:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8033514:	45ca      	cmp	sl, r9
 8033516:	dc0d      	bgt.n	8033534 <__sprint_r+0x44>
 8033518:	68a3      	ldr	r3, [r4, #8]
 803351a:	f026 0603 	bic.w	r6, r6, #3
 803351e:	1b98      	subs	r0, r3, r6
 8033520:	60a0      	str	r0, [r4, #8]
 8033522:	3508      	adds	r5, #8
 8033524:	2800      	cmp	r0, #0
 8033526:	d1ef      	bne.n	8033508 <__sprint_r+0x18>
 8033528:	2300      	movs	r3, #0
 803352a:	60a3      	str	r3, [r4, #8]
 803352c:	2300      	movs	r3, #0
 803352e:	6063      	str	r3, [r4, #4]
 8033530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033534:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8033538:	463a      	mov	r2, r7
 803353a:	4640      	mov	r0, r8
 803353c:	f000 ffcb 	bl	80344d6 <_fputwc_r>
 8033540:	1c43      	adds	r3, r0, #1
 8033542:	d0f1      	beq.n	8033528 <__sprint_r+0x38>
 8033544:	f109 0901 	add.w	r9, r9, #1
 8033548:	e7e4      	b.n	8033514 <__sprint_r+0x24>
 803354a:	f000 fde1 	bl	8034110 <__sfvwrite_r>
 803354e:	e7eb      	b.n	8033528 <__sprint_r+0x38>
 8033550:	4618      	mov	r0, r3
 8033552:	e7eb      	b.n	803352c <__sprint_r+0x3c>

08033554 <_vfiprintf_r>:
 8033554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033558:	ed2d 8b02 	vpush	{d8}
 803355c:	b0bb      	sub	sp, #236	; 0xec
 803355e:	460f      	mov	r7, r1
 8033560:	9201      	str	r2, [sp, #4]
 8033562:	461d      	mov	r5, r3
 8033564:	461c      	mov	r4, r3
 8033566:	4681      	mov	r9, r0
 8033568:	b118      	cbz	r0, 8033572 <_vfiprintf_r+0x1e>
 803356a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 803356c:	b90b      	cbnz	r3, 8033572 <_vfiprintf_r+0x1e>
 803356e:	f7fe f87d 	bl	803166c <__sinit>
 8033572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033574:	07d8      	lsls	r0, r3, #31
 8033576:	d405      	bmi.n	8033584 <_vfiprintf_r+0x30>
 8033578:	89bb      	ldrh	r3, [r7, #12]
 803357a:	0599      	lsls	r1, r3, #22
 803357c:	d402      	bmi.n	8033584 <_vfiprintf_r+0x30>
 803357e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8033580:	f7fe f9c8 	bl	8031914 <__retarget_lock_acquire_recursive>
 8033584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8033588:	049a      	lsls	r2, r3, #18
 803358a:	d406      	bmi.n	803359a <_vfiprintf_r+0x46>
 803358c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8033590:	81bb      	strh	r3, [r7, #12]
 8033592:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033594:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8033598:	667b      	str	r3, [r7, #100]	; 0x64
 803359a:	89bb      	ldrh	r3, [r7, #12]
 803359c:	071e      	lsls	r6, r3, #28
 803359e:	d501      	bpl.n	80335a4 <_vfiprintf_r+0x50>
 80335a0:	693b      	ldr	r3, [r7, #16]
 80335a2:	b9bb      	cbnz	r3, 80335d4 <_vfiprintf_r+0x80>
 80335a4:	4639      	mov	r1, r7
 80335a6:	4648      	mov	r0, r9
 80335a8:	f000 fefc 	bl	80343a4 <__swsetup_r>
 80335ac:	b190      	cbz	r0, 80335d4 <_vfiprintf_r+0x80>
 80335ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80335b0:	07d8      	lsls	r0, r3, #31
 80335b2:	d508      	bpl.n	80335c6 <_vfiprintf_r+0x72>
 80335b4:	f04f 33ff 	mov.w	r3, #4294967295
 80335b8:	9302      	str	r3, [sp, #8]
 80335ba:	9802      	ldr	r0, [sp, #8]
 80335bc:	b03b      	add	sp, #236	; 0xec
 80335be:	ecbd 8b02 	vpop	{d8}
 80335c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80335c6:	89bb      	ldrh	r3, [r7, #12]
 80335c8:	0599      	lsls	r1, r3, #22
 80335ca:	d4f3      	bmi.n	80335b4 <_vfiprintf_r+0x60>
 80335cc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80335ce:	f7fe f9a2 	bl	8031916 <__retarget_lock_release_recursive>
 80335d2:	e7ef      	b.n	80335b4 <_vfiprintf_r+0x60>
 80335d4:	89bb      	ldrh	r3, [r7, #12]
 80335d6:	f003 021a 	and.w	r2, r3, #26
 80335da:	2a0a      	cmp	r2, #10
 80335dc:	d116      	bne.n	803360c <_vfiprintf_r+0xb8>
 80335de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80335e2:	2a00      	cmp	r2, #0
 80335e4:	db12      	blt.n	803360c <_vfiprintf_r+0xb8>
 80335e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80335e8:	07d2      	lsls	r2, r2, #31
 80335ea:	d404      	bmi.n	80335f6 <_vfiprintf_r+0xa2>
 80335ec:	059e      	lsls	r6, r3, #22
 80335ee:	d402      	bmi.n	80335f6 <_vfiprintf_r+0xa2>
 80335f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80335f2:	f7fe f990 	bl	8031916 <__retarget_lock_release_recursive>
 80335f6:	9a01      	ldr	r2, [sp, #4]
 80335f8:	462b      	mov	r3, r5
 80335fa:	4639      	mov	r1, r7
 80335fc:	4648      	mov	r0, r9
 80335fe:	b03b      	add	sp, #236	; 0xec
 8033600:	ecbd 8b02 	vpop	{d8}
 8033604:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033608:	f000 bc36 	b.w	8033e78 <__sbprintf>
 803360c:	2300      	movs	r3, #0
 803360e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8033612:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8033616:	ae11      	add	r6, sp, #68	; 0x44
 8033618:	ee08 3a10 	vmov	s16, r3
 803361c:	960e      	str	r6, [sp, #56]	; 0x38
 803361e:	9307      	str	r3, [sp, #28]
 8033620:	9302      	str	r3, [sp, #8]
 8033622:	9b01      	ldr	r3, [sp, #4]
 8033624:	461d      	mov	r5, r3
 8033626:	f813 2b01 	ldrb.w	r2, [r3], #1
 803362a:	b10a      	cbz	r2, 8033630 <_vfiprintf_r+0xdc>
 803362c:	2a25      	cmp	r2, #37	; 0x25
 803362e:	d1f9      	bne.n	8033624 <_vfiprintf_r+0xd0>
 8033630:	9b01      	ldr	r3, [sp, #4]
 8033632:	ebb5 0803 	subs.w	r8, r5, r3
 8033636:	d00d      	beq.n	8033654 <_vfiprintf_r+0x100>
 8033638:	e9c6 3800 	strd	r3, r8, [r6]
 803363c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 803363e:	4443      	add	r3, r8
 8033640:	9310      	str	r3, [sp, #64]	; 0x40
 8033642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8033644:	3301      	adds	r3, #1
 8033646:	2b07      	cmp	r3, #7
 8033648:	930f      	str	r3, [sp, #60]	; 0x3c
 803364a:	dc76      	bgt.n	803373a <_vfiprintf_r+0x1e6>
 803364c:	3608      	adds	r6, #8
 803364e:	9b02      	ldr	r3, [sp, #8]
 8033650:	4443      	add	r3, r8
 8033652:	9302      	str	r3, [sp, #8]
 8033654:	782b      	ldrb	r3, [r5, #0]
 8033656:	2b00      	cmp	r3, #0
 8033658:	f000 83d0 	beq.w	8033dfc <_vfiprintf_r+0x8a8>
 803365c:	2300      	movs	r3, #0
 803365e:	f04f 32ff 	mov.w	r2, #4294967295
 8033662:	3501      	adds	r5, #1
 8033664:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8033668:	9200      	str	r2, [sp, #0]
 803366a:	9303      	str	r3, [sp, #12]
 803366c:	469a      	mov	sl, r3
 803366e:	462a      	mov	r2, r5
 8033670:	f812 3b01 	ldrb.w	r3, [r2], #1
 8033674:	9201      	str	r2, [sp, #4]
 8033676:	f1a3 0220 	sub.w	r2, r3, #32
 803367a:	2a5a      	cmp	r2, #90	; 0x5a
 803367c:	f200 831c 	bhi.w	8033cb8 <_vfiprintf_r+0x764>
 8033680:	e8df f012 	tbh	[pc, r2, lsl #1]
 8033684:	031a007e 	.word	0x031a007e
 8033688:	0086031a 	.word	0x0086031a
 803368c:	031a031a 	.word	0x031a031a
 8033690:	0065031a 	.word	0x0065031a
 8033694:	031a031a 	.word	0x031a031a
 8033698:	00930089 	.word	0x00930089
 803369c:	0090031a 	.word	0x0090031a
 80336a0:	031a0095 	.word	0x031a0095
 80336a4:	00b300b0 	.word	0x00b300b0
 80336a8:	00b300b3 	.word	0x00b300b3
 80336ac:	00b300b3 	.word	0x00b300b3
 80336b0:	00b300b3 	.word	0x00b300b3
 80336b4:	00b300b3 	.word	0x00b300b3
 80336b8:	031a031a 	.word	0x031a031a
 80336bc:	031a031a 	.word	0x031a031a
 80336c0:	031a031a 	.word	0x031a031a
 80336c4:	031a031a 	.word	0x031a031a
 80336c8:	00dd031a 	.word	0x00dd031a
 80336cc:	031a00eb 	.word	0x031a00eb
 80336d0:	031a031a 	.word	0x031a031a
 80336d4:	031a031a 	.word	0x031a031a
 80336d8:	031a031a 	.word	0x031a031a
 80336dc:	031a031a 	.word	0x031a031a
 80336e0:	013b031a 	.word	0x013b031a
 80336e4:	031a031a 	.word	0x031a031a
 80336e8:	0180031a 	.word	0x0180031a
 80336ec:	025e031a 	.word	0x025e031a
 80336f0:	031a031a 	.word	0x031a031a
 80336f4:	031a027e 	.word	0x031a027e
 80336f8:	031a031a 	.word	0x031a031a
 80336fc:	031a031a 	.word	0x031a031a
 8033700:	031a031a 	.word	0x031a031a
 8033704:	031a031a 	.word	0x031a031a
 8033708:	00dd031a 	.word	0x00dd031a
 803370c:	031a00ed 	.word	0x031a00ed
 8033710:	031a031a 	.word	0x031a031a
 8033714:	00ed00c3 	.word	0x00ed00c3
 8033718:	031a00d7 	.word	0x031a00d7
 803371c:	031a00d0 	.word	0x031a00d0
 8033720:	013d0119 	.word	0x013d0119
 8033724:	00d70172 	.word	0x00d70172
 8033728:	0180031a 	.word	0x0180031a
 803372c:	0260007c 	.word	0x0260007c
 8033730:	031a031a 	.word	0x031a031a
 8033734:	031a029a 	.word	0x031a029a
 8033738:	007c      	.short	0x007c
 803373a:	aa0e      	add	r2, sp, #56	; 0x38
 803373c:	4639      	mov	r1, r7
 803373e:	4648      	mov	r0, r9
 8033740:	f7ff fed6 	bl	80334f0 <__sprint_r>
 8033744:	2800      	cmp	r0, #0
 8033746:	f040 8338 	bne.w	8033dba <_vfiprintf_r+0x866>
 803374a:	ae11      	add	r6, sp, #68	; 0x44
 803374c:	e77f      	b.n	803364e <_vfiprintf_r+0xfa>
 803374e:	4648      	mov	r0, r9
 8033750:	f000 ff1e 	bl	8034590 <_localeconv_r>
 8033754:	6843      	ldr	r3, [r0, #4]
 8033756:	4618      	mov	r0, r3
 8033758:	ee08 3a10 	vmov	s16, r3
 803375c:	f7ee fd38 	bl	80221d0 <strlen>
 8033760:	9007      	str	r0, [sp, #28]
 8033762:	4648      	mov	r0, r9
 8033764:	f000 ff14 	bl	8034590 <_localeconv_r>
 8033768:	6883      	ldr	r3, [r0, #8]
 803376a:	9306      	str	r3, [sp, #24]
 803376c:	9b07      	ldr	r3, [sp, #28]
 803376e:	b12b      	cbz	r3, 803377c <_vfiprintf_r+0x228>
 8033770:	9b06      	ldr	r3, [sp, #24]
 8033772:	b11b      	cbz	r3, 803377c <_vfiprintf_r+0x228>
 8033774:	781b      	ldrb	r3, [r3, #0]
 8033776:	b10b      	cbz	r3, 803377c <_vfiprintf_r+0x228>
 8033778:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 803377c:	9d01      	ldr	r5, [sp, #4]
 803377e:	e776      	b.n	803366e <_vfiprintf_r+0x11a>
 8033780:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8033784:	2b00      	cmp	r3, #0
 8033786:	d1f9      	bne.n	803377c <_vfiprintf_r+0x228>
 8033788:	2320      	movs	r3, #32
 803378a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 803378e:	e7f5      	b.n	803377c <_vfiprintf_r+0x228>
 8033790:	f04a 0a01 	orr.w	sl, sl, #1
 8033794:	e7f2      	b.n	803377c <_vfiprintf_r+0x228>
 8033796:	f854 3b04 	ldr.w	r3, [r4], #4
 803379a:	9303      	str	r3, [sp, #12]
 803379c:	2b00      	cmp	r3, #0
 803379e:	daed      	bge.n	803377c <_vfiprintf_r+0x228>
 80337a0:	425b      	negs	r3, r3
 80337a2:	9303      	str	r3, [sp, #12]
 80337a4:	f04a 0a04 	orr.w	sl, sl, #4
 80337a8:	e7e8      	b.n	803377c <_vfiprintf_r+0x228>
 80337aa:	232b      	movs	r3, #43	; 0x2b
 80337ac:	e7ed      	b.n	803378a <_vfiprintf_r+0x236>
 80337ae:	9a01      	ldr	r2, [sp, #4]
 80337b0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80337b4:	2b2a      	cmp	r3, #42	; 0x2a
 80337b6:	d112      	bne.n	80337de <_vfiprintf_r+0x28a>
 80337b8:	f854 3b04 	ldr.w	r3, [r4], #4
 80337bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80337c0:	e9cd 3200 	strd	r3, r2, [sp]
 80337c4:	e7da      	b.n	803377c <_vfiprintf_r+0x228>
 80337c6:	9b00      	ldr	r3, [sp, #0]
 80337c8:	200a      	movs	r0, #10
 80337ca:	fb00 1303 	mla	r3, r0, r3, r1
 80337ce:	9300      	str	r3, [sp, #0]
 80337d0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80337d4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80337d8:	2909      	cmp	r1, #9
 80337da:	d9f4      	bls.n	80337c6 <_vfiprintf_r+0x272>
 80337dc:	e74a      	b.n	8033674 <_vfiprintf_r+0x120>
 80337de:	2100      	movs	r1, #0
 80337e0:	9100      	str	r1, [sp, #0]
 80337e2:	e7f7      	b.n	80337d4 <_vfiprintf_r+0x280>
 80337e4:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80337e8:	e7c8      	b.n	803377c <_vfiprintf_r+0x228>
 80337ea:	2100      	movs	r1, #0
 80337ec:	9a01      	ldr	r2, [sp, #4]
 80337ee:	9103      	str	r1, [sp, #12]
 80337f0:	9903      	ldr	r1, [sp, #12]
 80337f2:	3b30      	subs	r3, #48	; 0x30
 80337f4:	200a      	movs	r0, #10
 80337f6:	fb00 3301 	mla	r3, r0, r1, r3
 80337fa:	9303      	str	r3, [sp, #12]
 80337fc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8033800:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8033804:	2909      	cmp	r1, #9
 8033806:	d9f3      	bls.n	80337f0 <_vfiprintf_r+0x29c>
 8033808:	e734      	b.n	8033674 <_vfiprintf_r+0x120>
 803380a:	9b01      	ldr	r3, [sp, #4]
 803380c:	781b      	ldrb	r3, [r3, #0]
 803380e:	2b68      	cmp	r3, #104	; 0x68
 8033810:	bf01      	itttt	eq
 8033812:	9b01      	ldreq	r3, [sp, #4]
 8033814:	3301      	addeq	r3, #1
 8033816:	9301      	streq	r3, [sp, #4]
 8033818:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 803381c:	bf18      	it	ne
 803381e:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8033822:	e7ab      	b.n	803377c <_vfiprintf_r+0x228>
 8033824:	9b01      	ldr	r3, [sp, #4]
 8033826:	781b      	ldrb	r3, [r3, #0]
 8033828:	2b6c      	cmp	r3, #108	; 0x6c
 803382a:	d105      	bne.n	8033838 <_vfiprintf_r+0x2e4>
 803382c:	9b01      	ldr	r3, [sp, #4]
 803382e:	3301      	adds	r3, #1
 8033830:	9301      	str	r3, [sp, #4]
 8033832:	f04a 0a20 	orr.w	sl, sl, #32
 8033836:	e7a1      	b.n	803377c <_vfiprintf_r+0x228>
 8033838:	f04a 0a10 	orr.w	sl, sl, #16
 803383c:	e79e      	b.n	803377c <_vfiprintf_r+0x228>
 803383e:	46a0      	mov	r8, r4
 8033840:	f858 3b04 	ldr.w	r3, [r8], #4
 8033844:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8033848:	2300      	movs	r3, #0
 803384a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 803384e:	2201      	movs	r2, #1
 8033850:	9200      	str	r2, [sp, #0]
 8033852:	461d      	mov	r5, r3
 8033854:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 8033858:	e0a9      	b.n	80339ae <_vfiprintf_r+0x45a>
 803385a:	f04a 0a10 	orr.w	sl, sl, #16
 803385e:	f01a 0f20 	tst.w	sl, #32
 8033862:	d011      	beq.n	8033888 <_vfiprintf_r+0x334>
 8033864:	3407      	adds	r4, #7
 8033866:	f024 0307 	bic.w	r3, r4, #7
 803386a:	4698      	mov	r8, r3
 803386c:	685d      	ldr	r5, [r3, #4]
 803386e:	f858 4b08 	ldr.w	r4, [r8], #8
 8033872:	2d00      	cmp	r5, #0
 8033874:	da06      	bge.n	8033884 <_vfiprintf_r+0x330>
 8033876:	4264      	negs	r4, r4
 8033878:	f04f 032d 	mov.w	r3, #45	; 0x2d
 803387c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8033880:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8033884:	2301      	movs	r3, #1
 8033886:	e04a      	b.n	803391e <_vfiprintf_r+0x3ca>
 8033888:	46a0      	mov	r8, r4
 803388a:	f01a 0f10 	tst.w	sl, #16
 803388e:	f858 5b04 	ldr.w	r5, [r8], #4
 8033892:	d002      	beq.n	803389a <_vfiprintf_r+0x346>
 8033894:	462c      	mov	r4, r5
 8033896:	17ed      	asrs	r5, r5, #31
 8033898:	e7eb      	b.n	8033872 <_vfiprintf_r+0x31e>
 803389a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 803389e:	d003      	beq.n	80338a8 <_vfiprintf_r+0x354>
 80338a0:	b22c      	sxth	r4, r5
 80338a2:	f345 35c0 	sbfx	r5, r5, #15, #1
 80338a6:	e7e4      	b.n	8033872 <_vfiprintf_r+0x31e>
 80338a8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80338ac:	d0f2      	beq.n	8033894 <_vfiprintf_r+0x340>
 80338ae:	b26c      	sxtb	r4, r5
 80338b0:	f345 15c0 	sbfx	r5, r5, #7, #1
 80338b4:	e7dd      	b.n	8033872 <_vfiprintf_r+0x31e>
 80338b6:	f01a 0f20 	tst.w	sl, #32
 80338ba:	f104 0804 	add.w	r8, r4, #4
 80338be:	d007      	beq.n	80338d0 <_vfiprintf_r+0x37c>
 80338c0:	9a02      	ldr	r2, [sp, #8]
 80338c2:	6823      	ldr	r3, [r4, #0]
 80338c4:	9902      	ldr	r1, [sp, #8]
 80338c6:	17d2      	asrs	r2, r2, #31
 80338c8:	e9c3 1200 	strd	r1, r2, [r3]
 80338cc:	4644      	mov	r4, r8
 80338ce:	e6a8      	b.n	8033622 <_vfiprintf_r+0xce>
 80338d0:	f01a 0f10 	tst.w	sl, #16
 80338d4:	d003      	beq.n	80338de <_vfiprintf_r+0x38a>
 80338d6:	6823      	ldr	r3, [r4, #0]
 80338d8:	9a02      	ldr	r2, [sp, #8]
 80338da:	601a      	str	r2, [r3, #0]
 80338dc:	e7f6      	b.n	80338cc <_vfiprintf_r+0x378>
 80338de:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80338e2:	d003      	beq.n	80338ec <_vfiprintf_r+0x398>
 80338e4:	6823      	ldr	r3, [r4, #0]
 80338e6:	9a02      	ldr	r2, [sp, #8]
 80338e8:	801a      	strh	r2, [r3, #0]
 80338ea:	e7ef      	b.n	80338cc <_vfiprintf_r+0x378>
 80338ec:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80338f0:	d0f1      	beq.n	80338d6 <_vfiprintf_r+0x382>
 80338f2:	6823      	ldr	r3, [r4, #0]
 80338f4:	9a02      	ldr	r2, [sp, #8]
 80338f6:	701a      	strb	r2, [r3, #0]
 80338f8:	e7e8      	b.n	80338cc <_vfiprintf_r+0x378>
 80338fa:	f04a 0a10 	orr.w	sl, sl, #16
 80338fe:	f01a 0320 	ands.w	r3, sl, #32
 8033902:	d01f      	beq.n	8033944 <_vfiprintf_r+0x3f0>
 8033904:	3407      	adds	r4, #7
 8033906:	f024 0307 	bic.w	r3, r4, #7
 803390a:	4698      	mov	r8, r3
 803390c:	685d      	ldr	r5, [r3, #4]
 803390e:	f858 4b08 	ldr.w	r4, [r8], #8
 8033912:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8033916:	2300      	movs	r3, #0
 8033918:	2200      	movs	r2, #0
 803391a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 803391e:	9a00      	ldr	r2, [sp, #0]
 8033920:	3201      	adds	r2, #1
 8033922:	f000 8278 	beq.w	8033e16 <_vfiprintf_r+0x8c2>
 8033926:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 803392a:	9204      	str	r2, [sp, #16]
 803392c:	ea54 0205 	orrs.w	r2, r4, r5
 8033930:	f040 8277 	bne.w	8033e22 <_vfiprintf_r+0x8ce>
 8033934:	9a00      	ldr	r2, [sp, #0]
 8033936:	2a00      	cmp	r2, #0
 8033938:	f000 81b3 	beq.w	8033ca2 <_vfiprintf_r+0x74e>
 803393c:	2b01      	cmp	r3, #1
 803393e:	f040 8273 	bne.w	8033e28 <_vfiprintf_r+0x8d4>
 8033942:	e151      	b.n	8033be8 <_vfiprintf_r+0x694>
 8033944:	46a0      	mov	r8, r4
 8033946:	f01a 0510 	ands.w	r5, sl, #16
 803394a:	f858 4b04 	ldr.w	r4, [r8], #4
 803394e:	d001      	beq.n	8033954 <_vfiprintf_r+0x400>
 8033950:	461d      	mov	r5, r3
 8033952:	e7de      	b.n	8033912 <_vfiprintf_r+0x3be>
 8033954:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8033958:	d001      	beq.n	803395e <_vfiprintf_r+0x40a>
 803395a:	b2a4      	uxth	r4, r4
 803395c:	e7d9      	b.n	8033912 <_vfiprintf_r+0x3be>
 803395e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8033962:	d0d6      	beq.n	8033912 <_vfiprintf_r+0x3be>
 8033964:	b2e4      	uxtb	r4, r4
 8033966:	e7f3      	b.n	8033950 <_vfiprintf_r+0x3fc>
 8033968:	46a0      	mov	r8, r4
 803396a:	f647 0330 	movw	r3, #30768	; 0x7830
 803396e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8033972:	f858 4b04 	ldr.w	r4, [r8], #4
 8033976:	4b9f      	ldr	r3, [pc, #636]	; (8033bf4 <_vfiprintf_r+0x6a0>)
 8033978:	9305      	str	r3, [sp, #20]
 803397a:	2500      	movs	r5, #0
 803397c:	f04a 0a02 	orr.w	sl, sl, #2
 8033980:	2302      	movs	r3, #2
 8033982:	e7c9      	b.n	8033918 <_vfiprintf_r+0x3c4>
 8033984:	9b00      	ldr	r3, [sp, #0]
 8033986:	46a0      	mov	r8, r4
 8033988:	2500      	movs	r5, #0
 803398a:	1c5c      	adds	r4, r3, #1
 803398c:	f858 bb04 	ldr.w	fp, [r8], #4
 8033990:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 8033994:	f000 80cf 	beq.w	8033b36 <_vfiprintf_r+0x5e2>
 8033998:	461a      	mov	r2, r3
 803399a:	4629      	mov	r1, r5
 803399c:	4658      	mov	r0, fp
 803399e:	f7ee fc1f 	bl	80221e0 <memchr>
 80339a2:	2800      	cmp	r0, #0
 80339a4:	f000 8192 	beq.w	8033ccc <_vfiprintf_r+0x778>
 80339a8:	eba0 030b 	sub.w	r3, r0, fp
 80339ac:	9300      	str	r3, [sp, #0]
 80339ae:	9b00      	ldr	r3, [sp, #0]
 80339b0:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 80339b4:	42ab      	cmp	r3, r5
 80339b6:	bfb8      	it	lt
 80339b8:	462b      	movlt	r3, r5
 80339ba:	9304      	str	r3, [sp, #16]
 80339bc:	b10a      	cbz	r2, 80339c2 <_vfiprintf_r+0x46e>
 80339be:	3301      	adds	r3, #1
 80339c0:	9304      	str	r3, [sp, #16]
 80339c2:	f01a 0302 	ands.w	r3, sl, #2
 80339c6:	9308      	str	r3, [sp, #32]
 80339c8:	bf1e      	ittt	ne
 80339ca:	9b04      	ldrne	r3, [sp, #16]
 80339cc:	3302      	addne	r3, #2
 80339ce:	9304      	strne	r3, [sp, #16]
 80339d0:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80339d4:	9309      	str	r3, [sp, #36]	; 0x24
 80339d6:	d11f      	bne.n	8033a18 <_vfiprintf_r+0x4c4>
 80339d8:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80339dc:	1a9c      	subs	r4, r3, r2
 80339de:	2c00      	cmp	r4, #0
 80339e0:	dd1a      	ble.n	8033a18 <_vfiprintf_r+0x4c4>
 80339e2:	4b85      	ldr	r3, [pc, #532]	; (8033bf8 <_vfiprintf_r+0x6a4>)
 80339e4:	6033      	str	r3, [r6, #0]
 80339e6:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 80339ea:	2c10      	cmp	r4, #16
 80339ec:	f102 0201 	add.w	r2, r2, #1
 80339f0:	f106 0008 	add.w	r0, r6, #8
 80339f4:	f300 816c 	bgt.w	8033cd0 <_vfiprintf_r+0x77c>
 80339f8:	6074      	str	r4, [r6, #4]
 80339fa:	2a07      	cmp	r2, #7
 80339fc:	4464      	add	r4, ip
 80339fe:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8033a02:	f340 8178 	ble.w	8033cf6 <_vfiprintf_r+0x7a2>
 8033a06:	aa0e      	add	r2, sp, #56	; 0x38
 8033a08:	4639      	mov	r1, r7
 8033a0a:	4648      	mov	r0, r9
 8033a0c:	f7ff fd70 	bl	80334f0 <__sprint_r>
 8033a10:	2800      	cmp	r0, #0
 8033a12:	f040 81d2 	bne.w	8033dba <_vfiprintf_r+0x866>
 8033a16:	ae11      	add	r6, sp, #68	; 0x44
 8033a18:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8033a1c:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8033a20:	b160      	cbz	r0, 8033a3c <_vfiprintf_r+0x4e8>
 8033a22:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8033a26:	3201      	adds	r2, #1
 8033a28:	6030      	str	r0, [r6, #0]
 8033a2a:	2001      	movs	r0, #1
 8033a2c:	4401      	add	r1, r0
 8033a2e:	2a07      	cmp	r2, #7
 8033a30:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8033a34:	6070      	str	r0, [r6, #4]
 8033a36:	f300 8160 	bgt.w	8033cfa <_vfiprintf_r+0x7a6>
 8033a3a:	3608      	adds	r6, #8
 8033a3c:	9b08      	ldr	r3, [sp, #32]
 8033a3e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8033a42:	b15b      	cbz	r3, 8033a5c <_vfiprintf_r+0x508>
 8033a44:	a80d      	add	r0, sp, #52	; 0x34
 8033a46:	3201      	adds	r2, #1
 8033a48:	6030      	str	r0, [r6, #0]
 8033a4a:	2002      	movs	r0, #2
 8033a4c:	4401      	add	r1, r0
 8033a4e:	2a07      	cmp	r2, #7
 8033a50:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8033a54:	6070      	str	r0, [r6, #4]
 8033a56:	f300 8159 	bgt.w	8033d0c <_vfiprintf_r+0x7b8>
 8033a5a:	3608      	adds	r6, #8
 8033a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8033a5e:	2b80      	cmp	r3, #128	; 0x80
 8033a60:	d11f      	bne.n	8033aa2 <_vfiprintf_r+0x54e>
 8033a62:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8033a66:	1a9c      	subs	r4, r3, r2
 8033a68:	2c00      	cmp	r4, #0
 8033a6a:	dd1a      	ble.n	8033aa2 <_vfiprintf_r+0x54e>
 8033a6c:	4b63      	ldr	r3, [pc, #396]	; (8033bfc <_vfiprintf_r+0x6a8>)
 8033a6e:	6033      	str	r3, [r6, #0]
 8033a70:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 8033a74:	2c10      	cmp	r4, #16
 8033a76:	f102 0201 	add.w	r2, r2, #1
 8033a7a:	f106 0008 	add.w	r0, r6, #8
 8033a7e:	f300 814e 	bgt.w	8033d1e <_vfiprintf_r+0x7ca>
 8033a82:	6074      	str	r4, [r6, #4]
 8033a84:	2a07      	cmp	r2, #7
 8033a86:	4464      	add	r4, ip
 8033a88:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8033a8c:	f340 815a 	ble.w	8033d44 <_vfiprintf_r+0x7f0>
 8033a90:	aa0e      	add	r2, sp, #56	; 0x38
 8033a92:	4639      	mov	r1, r7
 8033a94:	4648      	mov	r0, r9
 8033a96:	f7ff fd2b 	bl	80334f0 <__sprint_r>
 8033a9a:	2800      	cmp	r0, #0
 8033a9c:	f040 818d 	bne.w	8033dba <_vfiprintf_r+0x866>
 8033aa0:	ae11      	add	r6, sp, #68	; 0x44
 8033aa2:	9b00      	ldr	r3, [sp, #0]
 8033aa4:	1aec      	subs	r4, r5, r3
 8033aa6:	2c00      	cmp	r4, #0
 8033aa8:	dd1b      	ble.n	8033ae2 <_vfiprintf_r+0x58e>
 8033aaa:	4d54      	ldr	r5, [pc, #336]	; (8033bfc <_vfiprintf_r+0x6a8>)
 8033aac:	2310      	movs	r3, #16
 8033aae:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8033ab2:	2c10      	cmp	r4, #16
 8033ab4:	f102 0201 	add.w	r2, r2, #1
 8033ab8:	f106 0008 	add.w	r0, r6, #8
 8033abc:	6035      	str	r5, [r6, #0]
 8033abe:	f300 8143 	bgt.w	8033d48 <_vfiprintf_r+0x7f4>
 8033ac2:	6074      	str	r4, [r6, #4]
 8033ac4:	2a07      	cmp	r2, #7
 8033ac6:	440c      	add	r4, r1
 8033ac8:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8033acc:	f340 814d 	ble.w	8033d6a <_vfiprintf_r+0x816>
 8033ad0:	aa0e      	add	r2, sp, #56	; 0x38
 8033ad2:	4639      	mov	r1, r7
 8033ad4:	4648      	mov	r0, r9
 8033ad6:	f7ff fd0b 	bl	80334f0 <__sprint_r>
 8033ada:	2800      	cmp	r0, #0
 8033adc:	f040 816d 	bne.w	8033dba <_vfiprintf_r+0x866>
 8033ae0:	ae11      	add	r6, sp, #68	; 0x44
 8033ae2:	9b00      	ldr	r3, [sp, #0]
 8033ae4:	9a00      	ldr	r2, [sp, #0]
 8033ae6:	6073      	str	r3, [r6, #4]
 8033ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8033aea:	f8c6 b000 	str.w	fp, [r6]
 8033aee:	4413      	add	r3, r2
 8033af0:	9310      	str	r3, [sp, #64]	; 0x40
 8033af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8033af4:	3301      	adds	r3, #1
 8033af6:	2b07      	cmp	r3, #7
 8033af8:	930f      	str	r3, [sp, #60]	; 0x3c
 8033afa:	f300 8138 	bgt.w	8033d6e <_vfiprintf_r+0x81a>
 8033afe:	f106 0308 	add.w	r3, r6, #8
 8033b02:	f01a 0f04 	tst.w	sl, #4
 8033b06:	f040 813a 	bne.w	8033d7e <_vfiprintf_r+0x82a>
 8033b0a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8033b0e:	9904      	ldr	r1, [sp, #16]
 8033b10:	428a      	cmp	r2, r1
 8033b12:	bfac      	ite	ge
 8033b14:	189b      	addge	r3, r3, r2
 8033b16:	185b      	addlt	r3, r3, r1
 8033b18:	9302      	str	r3, [sp, #8]
 8033b1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8033b1c:	b13b      	cbz	r3, 8033b2e <_vfiprintf_r+0x5da>
 8033b1e:	aa0e      	add	r2, sp, #56	; 0x38
 8033b20:	4639      	mov	r1, r7
 8033b22:	4648      	mov	r0, r9
 8033b24:	f7ff fce4 	bl	80334f0 <__sprint_r>
 8033b28:	2800      	cmp	r0, #0
 8033b2a:	f040 8146 	bne.w	8033dba <_vfiprintf_r+0x866>
 8033b2e:	2300      	movs	r3, #0
 8033b30:	930f      	str	r3, [sp, #60]	; 0x3c
 8033b32:	ae11      	add	r6, sp, #68	; 0x44
 8033b34:	e6ca      	b.n	80338cc <_vfiprintf_r+0x378>
 8033b36:	4658      	mov	r0, fp
 8033b38:	f7ee fb4a 	bl	80221d0 <strlen>
 8033b3c:	9000      	str	r0, [sp, #0]
 8033b3e:	e736      	b.n	80339ae <_vfiprintf_r+0x45a>
 8033b40:	f04a 0a10 	orr.w	sl, sl, #16
 8033b44:	f01a 0320 	ands.w	r3, sl, #32
 8033b48:	d008      	beq.n	8033b5c <_vfiprintf_r+0x608>
 8033b4a:	3407      	adds	r4, #7
 8033b4c:	f024 0307 	bic.w	r3, r4, #7
 8033b50:	4698      	mov	r8, r3
 8033b52:	685d      	ldr	r5, [r3, #4]
 8033b54:	f858 4b08 	ldr.w	r4, [r8], #8
 8033b58:	2301      	movs	r3, #1
 8033b5a:	e6dd      	b.n	8033918 <_vfiprintf_r+0x3c4>
 8033b5c:	46a0      	mov	r8, r4
 8033b5e:	f01a 0510 	ands.w	r5, sl, #16
 8033b62:	f858 4b04 	ldr.w	r4, [r8], #4
 8033b66:	d001      	beq.n	8033b6c <_vfiprintf_r+0x618>
 8033b68:	461d      	mov	r5, r3
 8033b6a:	e7f5      	b.n	8033b58 <_vfiprintf_r+0x604>
 8033b6c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8033b70:	d001      	beq.n	8033b76 <_vfiprintf_r+0x622>
 8033b72:	b2a4      	uxth	r4, r4
 8033b74:	e7f0      	b.n	8033b58 <_vfiprintf_r+0x604>
 8033b76:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8033b7a:	d0ed      	beq.n	8033b58 <_vfiprintf_r+0x604>
 8033b7c:	b2e4      	uxtb	r4, r4
 8033b7e:	e7f3      	b.n	8033b68 <_vfiprintf_r+0x614>
 8033b80:	4a1f      	ldr	r2, [pc, #124]	; (8033c00 <_vfiprintf_r+0x6ac>)
 8033b82:	9205      	str	r2, [sp, #20]
 8033b84:	f01a 0220 	ands.w	r2, sl, #32
 8033b88:	d018      	beq.n	8033bbc <_vfiprintf_r+0x668>
 8033b8a:	3407      	adds	r4, #7
 8033b8c:	f024 0207 	bic.w	r2, r4, #7
 8033b90:	4690      	mov	r8, r2
 8033b92:	6855      	ldr	r5, [r2, #4]
 8033b94:	f858 4b08 	ldr.w	r4, [r8], #8
 8033b98:	f01a 0f01 	tst.w	sl, #1
 8033b9c:	d009      	beq.n	8033bb2 <_vfiprintf_r+0x65e>
 8033b9e:	ea54 0205 	orrs.w	r2, r4, r5
 8033ba2:	bf1f      	itttt	ne
 8033ba4:	2230      	movne	r2, #48	; 0x30
 8033ba6:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 8033baa:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 8033bae:	f04a 0a02 	orrne.w	sl, sl, #2
 8033bb2:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8033bb6:	e6e3      	b.n	8033980 <_vfiprintf_r+0x42c>
 8033bb8:	4a0e      	ldr	r2, [pc, #56]	; (8033bf4 <_vfiprintf_r+0x6a0>)
 8033bba:	e7e2      	b.n	8033b82 <_vfiprintf_r+0x62e>
 8033bbc:	46a0      	mov	r8, r4
 8033bbe:	f01a 0510 	ands.w	r5, sl, #16
 8033bc2:	f858 4b04 	ldr.w	r4, [r8], #4
 8033bc6:	d001      	beq.n	8033bcc <_vfiprintf_r+0x678>
 8033bc8:	4615      	mov	r5, r2
 8033bca:	e7e5      	b.n	8033b98 <_vfiprintf_r+0x644>
 8033bcc:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8033bd0:	d001      	beq.n	8033bd6 <_vfiprintf_r+0x682>
 8033bd2:	b2a4      	uxth	r4, r4
 8033bd4:	e7e0      	b.n	8033b98 <_vfiprintf_r+0x644>
 8033bd6:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8033bda:	d0dd      	beq.n	8033b98 <_vfiprintf_r+0x644>
 8033bdc:	b2e4      	uxtb	r4, r4
 8033bde:	e7f3      	b.n	8033bc8 <_vfiprintf_r+0x674>
 8033be0:	2c0a      	cmp	r4, #10
 8033be2:	f175 0300 	sbcs.w	r3, r5, #0
 8033be6:	d20d      	bcs.n	8033c04 <_vfiprintf_r+0x6b0>
 8033be8:	3430      	adds	r4, #48	; 0x30
 8033bea:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 8033bee:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 8033bf2:	e135      	b.n	8033e60 <_vfiprintf_r+0x90c>
 8033bf4:	08036e14 	.word	0x08036e14
 8033bf8:	08036e58 	.word	0x08036e58
 8033bfc:	08036e68 	.word	0x08036e68
 8033c00:	08036e25 	.word	0x08036e25
 8033c04:	ab3a      	add	r3, sp, #232	; 0xe8
 8033c06:	9308      	str	r3, [sp, #32]
 8033c08:	9b04      	ldr	r3, [sp, #16]
 8033c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8033c0e:	f04f 0a00 	mov.w	sl, #0
 8033c12:	9309      	str	r3, [sp, #36]	; 0x24
 8033c14:	220a      	movs	r2, #10
 8033c16:	2300      	movs	r3, #0
 8033c18:	4620      	mov	r0, r4
 8033c1a:	4629      	mov	r1, r5
 8033c1c:	f7ee ffc4 	bl	8022ba8 <__aeabi_uldivmod>
 8033c20:	9b08      	ldr	r3, [sp, #32]
 8033c22:	3230      	adds	r2, #48	; 0x30
 8033c24:	f103 3bff 	add.w	fp, r3, #4294967295
 8033c28:	f803 2c01 	strb.w	r2, [r3, #-1]
 8033c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8033c2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8033c32:	f10a 0a01 	add.w	sl, sl, #1
 8033c36:	b1d3      	cbz	r3, 8033c6e <_vfiprintf_r+0x71a>
 8033c38:	9b06      	ldr	r3, [sp, #24]
 8033c3a:	781a      	ldrb	r2, [r3, #0]
 8033c3c:	4552      	cmp	r2, sl
 8033c3e:	d116      	bne.n	8033c6e <_vfiprintf_r+0x71a>
 8033c40:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8033c44:	d013      	beq.n	8033c6e <_vfiprintf_r+0x71a>
 8033c46:	2c0a      	cmp	r4, #10
 8033c48:	f175 0200 	sbcs.w	r2, r5, #0
 8033c4c:	d30f      	bcc.n	8033c6e <_vfiprintf_r+0x71a>
 8033c4e:	9b07      	ldr	r3, [sp, #28]
 8033c50:	ebab 0b03 	sub.w	fp, fp, r3
 8033c54:	461a      	mov	r2, r3
 8033c56:	ee18 1a10 	vmov	r1, s16
 8033c5a:	4658      	mov	r0, fp
 8033c5c:	f000 fc7f 	bl	803455e <strncpy>
 8033c60:	9b06      	ldr	r3, [sp, #24]
 8033c62:	785a      	ldrb	r2, [r3, #1]
 8033c64:	b16a      	cbz	r2, 8033c82 <_vfiprintf_r+0x72e>
 8033c66:	3301      	adds	r3, #1
 8033c68:	9306      	str	r3, [sp, #24]
 8033c6a:	f04f 0a00 	mov.w	sl, #0
 8033c6e:	2c0a      	cmp	r4, #10
 8033c70:	f175 0500 	sbcs.w	r5, r5, #0
 8033c74:	f0c0 80f4 	bcc.w	8033e60 <_vfiprintf_r+0x90c>
 8033c78:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8033c7c:	f8cd b020 	str.w	fp, [sp, #32]
 8033c80:	e7c8      	b.n	8033c14 <_vfiprintf_r+0x6c0>
 8033c82:	4692      	mov	sl, r2
 8033c84:	e7f3      	b.n	8033c6e <_vfiprintf_r+0x71a>
 8033c86:	f004 020f 	and.w	r2, r4, #15
 8033c8a:	9b05      	ldr	r3, [sp, #20]
 8033c8c:	0924      	lsrs	r4, r4, #4
 8033c8e:	5c9a      	ldrb	r2, [r3, r2]
 8033c90:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8033c94:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8033c98:	092d      	lsrs	r5, r5, #4
 8033c9a:	ea54 0205 	orrs.w	r2, r4, r5
 8033c9e:	d1f2      	bne.n	8033c86 <_vfiprintf_r+0x732>
 8033ca0:	e0de      	b.n	8033e60 <_vfiprintf_r+0x90c>
 8033ca2:	b933      	cbnz	r3, 8033cb2 <_vfiprintf_r+0x75e>
 8033ca4:	f01a 0f01 	tst.w	sl, #1
 8033ca8:	d003      	beq.n	8033cb2 <_vfiprintf_r+0x75e>
 8033caa:	2330      	movs	r3, #48	; 0x30
 8033cac:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 8033cb0:	e79d      	b.n	8033bee <_vfiprintf_r+0x69a>
 8033cb2:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 8033cb6:	e0d3      	b.n	8033e60 <_vfiprintf_r+0x90c>
 8033cb8:	2b00      	cmp	r3, #0
 8033cba:	f000 809f 	beq.w	8033dfc <_vfiprintf_r+0x8a8>
 8033cbe:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8033cc2:	2300      	movs	r3, #0
 8033cc4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8033cc8:	46a0      	mov	r8, r4
 8033cca:	e5c0      	b.n	803384e <_vfiprintf_r+0x2fa>
 8033ccc:	4605      	mov	r5, r0
 8033cce:	e66e      	b.n	80339ae <_vfiprintf_r+0x45a>
 8033cd0:	2110      	movs	r1, #16
 8033cd2:	6071      	str	r1, [r6, #4]
 8033cd4:	2a07      	cmp	r2, #7
 8033cd6:	4461      	add	r1, ip
 8033cd8:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8033cdc:	dd08      	ble.n	8033cf0 <_vfiprintf_r+0x79c>
 8033cde:	aa0e      	add	r2, sp, #56	; 0x38
 8033ce0:	4639      	mov	r1, r7
 8033ce2:	4648      	mov	r0, r9
 8033ce4:	f7ff fc04 	bl	80334f0 <__sprint_r>
 8033ce8:	2800      	cmp	r0, #0
 8033cea:	d166      	bne.n	8033dba <_vfiprintf_r+0x866>
 8033cec:	4b60      	ldr	r3, [pc, #384]	; (8033e70 <_vfiprintf_r+0x91c>)
 8033cee:	a811      	add	r0, sp, #68	; 0x44
 8033cf0:	3c10      	subs	r4, #16
 8033cf2:	4606      	mov	r6, r0
 8033cf4:	e676      	b.n	80339e4 <_vfiprintf_r+0x490>
 8033cf6:	4606      	mov	r6, r0
 8033cf8:	e68e      	b.n	8033a18 <_vfiprintf_r+0x4c4>
 8033cfa:	aa0e      	add	r2, sp, #56	; 0x38
 8033cfc:	4639      	mov	r1, r7
 8033cfe:	4648      	mov	r0, r9
 8033d00:	f7ff fbf6 	bl	80334f0 <__sprint_r>
 8033d04:	2800      	cmp	r0, #0
 8033d06:	d158      	bne.n	8033dba <_vfiprintf_r+0x866>
 8033d08:	ae11      	add	r6, sp, #68	; 0x44
 8033d0a:	e697      	b.n	8033a3c <_vfiprintf_r+0x4e8>
 8033d0c:	aa0e      	add	r2, sp, #56	; 0x38
 8033d0e:	4639      	mov	r1, r7
 8033d10:	4648      	mov	r0, r9
 8033d12:	f7ff fbed 	bl	80334f0 <__sprint_r>
 8033d16:	2800      	cmp	r0, #0
 8033d18:	d14f      	bne.n	8033dba <_vfiprintf_r+0x866>
 8033d1a:	ae11      	add	r6, sp, #68	; 0x44
 8033d1c:	e69e      	b.n	8033a5c <_vfiprintf_r+0x508>
 8033d1e:	2110      	movs	r1, #16
 8033d20:	6071      	str	r1, [r6, #4]
 8033d22:	2a07      	cmp	r2, #7
 8033d24:	4461      	add	r1, ip
 8033d26:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8033d2a:	dd08      	ble.n	8033d3e <_vfiprintf_r+0x7ea>
 8033d2c:	aa0e      	add	r2, sp, #56	; 0x38
 8033d2e:	4639      	mov	r1, r7
 8033d30:	4648      	mov	r0, r9
 8033d32:	f7ff fbdd 	bl	80334f0 <__sprint_r>
 8033d36:	2800      	cmp	r0, #0
 8033d38:	d13f      	bne.n	8033dba <_vfiprintf_r+0x866>
 8033d3a:	4b4e      	ldr	r3, [pc, #312]	; (8033e74 <_vfiprintf_r+0x920>)
 8033d3c:	a811      	add	r0, sp, #68	; 0x44
 8033d3e:	3c10      	subs	r4, #16
 8033d40:	4606      	mov	r6, r0
 8033d42:	e694      	b.n	8033a6e <_vfiprintf_r+0x51a>
 8033d44:	4606      	mov	r6, r0
 8033d46:	e6ac      	b.n	8033aa2 <_vfiprintf_r+0x54e>
 8033d48:	3110      	adds	r1, #16
 8033d4a:	2a07      	cmp	r2, #7
 8033d4c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8033d50:	6073      	str	r3, [r6, #4]
 8033d52:	dd07      	ble.n	8033d64 <_vfiprintf_r+0x810>
 8033d54:	aa0e      	add	r2, sp, #56	; 0x38
 8033d56:	4639      	mov	r1, r7
 8033d58:	4648      	mov	r0, r9
 8033d5a:	f7ff fbc9 	bl	80334f0 <__sprint_r>
 8033d5e:	bb60      	cbnz	r0, 8033dba <_vfiprintf_r+0x866>
 8033d60:	a811      	add	r0, sp, #68	; 0x44
 8033d62:	2310      	movs	r3, #16
 8033d64:	3c10      	subs	r4, #16
 8033d66:	4606      	mov	r6, r0
 8033d68:	e6a1      	b.n	8033aae <_vfiprintf_r+0x55a>
 8033d6a:	4606      	mov	r6, r0
 8033d6c:	e6b9      	b.n	8033ae2 <_vfiprintf_r+0x58e>
 8033d6e:	aa0e      	add	r2, sp, #56	; 0x38
 8033d70:	4639      	mov	r1, r7
 8033d72:	4648      	mov	r0, r9
 8033d74:	f7ff fbbc 	bl	80334f0 <__sprint_r>
 8033d78:	b9f8      	cbnz	r0, 8033dba <_vfiprintf_r+0x866>
 8033d7a:	ab11      	add	r3, sp, #68	; 0x44
 8033d7c:	e6c1      	b.n	8033b02 <_vfiprintf_r+0x5ae>
 8033d7e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8033d82:	1a54      	subs	r4, r2, r1
 8033d84:	2c00      	cmp	r4, #0
 8033d86:	f77f aec0 	ble.w	8033b0a <_vfiprintf_r+0x5b6>
 8033d8a:	4d39      	ldr	r5, [pc, #228]	; (8033e70 <_vfiprintf_r+0x91c>)
 8033d8c:	2610      	movs	r6, #16
 8033d8e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8033d92:	2c10      	cmp	r4, #16
 8033d94:	f102 0201 	add.w	r2, r2, #1
 8033d98:	601d      	str	r5, [r3, #0]
 8033d9a:	dc1d      	bgt.n	8033dd8 <_vfiprintf_r+0x884>
 8033d9c:	605c      	str	r4, [r3, #4]
 8033d9e:	2a07      	cmp	r2, #7
 8033da0:	440c      	add	r4, r1
 8033da2:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8033da6:	f77f aeb0 	ble.w	8033b0a <_vfiprintf_r+0x5b6>
 8033daa:	aa0e      	add	r2, sp, #56	; 0x38
 8033dac:	4639      	mov	r1, r7
 8033dae:	4648      	mov	r0, r9
 8033db0:	f7ff fb9e 	bl	80334f0 <__sprint_r>
 8033db4:	2800      	cmp	r0, #0
 8033db6:	f43f aea8 	beq.w	8033b0a <_vfiprintf_r+0x5b6>
 8033dba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033dbc:	07d9      	lsls	r1, r3, #31
 8033dbe:	d405      	bmi.n	8033dcc <_vfiprintf_r+0x878>
 8033dc0:	89bb      	ldrh	r3, [r7, #12]
 8033dc2:	059a      	lsls	r2, r3, #22
 8033dc4:	d402      	bmi.n	8033dcc <_vfiprintf_r+0x878>
 8033dc6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8033dc8:	f7fd fda5 	bl	8031916 <__retarget_lock_release_recursive>
 8033dcc:	89bb      	ldrh	r3, [r7, #12]
 8033dce:	065b      	lsls	r3, r3, #25
 8033dd0:	f57f abf3 	bpl.w	80335ba <_vfiprintf_r+0x66>
 8033dd4:	f7ff bbee 	b.w	80335b4 <_vfiprintf_r+0x60>
 8033dd8:	3110      	adds	r1, #16
 8033dda:	2a07      	cmp	r2, #7
 8033ddc:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8033de0:	605e      	str	r6, [r3, #4]
 8033de2:	dc02      	bgt.n	8033dea <_vfiprintf_r+0x896>
 8033de4:	3308      	adds	r3, #8
 8033de6:	3c10      	subs	r4, #16
 8033de8:	e7d1      	b.n	8033d8e <_vfiprintf_r+0x83a>
 8033dea:	aa0e      	add	r2, sp, #56	; 0x38
 8033dec:	4639      	mov	r1, r7
 8033dee:	4648      	mov	r0, r9
 8033df0:	f7ff fb7e 	bl	80334f0 <__sprint_r>
 8033df4:	2800      	cmp	r0, #0
 8033df6:	d1e0      	bne.n	8033dba <_vfiprintf_r+0x866>
 8033df8:	ab11      	add	r3, sp, #68	; 0x44
 8033dfa:	e7f4      	b.n	8033de6 <_vfiprintf_r+0x892>
 8033dfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8033dfe:	b913      	cbnz	r3, 8033e06 <_vfiprintf_r+0x8b2>
 8033e00:	2300      	movs	r3, #0
 8033e02:	930f      	str	r3, [sp, #60]	; 0x3c
 8033e04:	e7d9      	b.n	8033dba <_vfiprintf_r+0x866>
 8033e06:	aa0e      	add	r2, sp, #56	; 0x38
 8033e08:	4639      	mov	r1, r7
 8033e0a:	4648      	mov	r0, r9
 8033e0c:	f7ff fb70 	bl	80334f0 <__sprint_r>
 8033e10:	2800      	cmp	r0, #0
 8033e12:	d0f5      	beq.n	8033e00 <_vfiprintf_r+0x8ac>
 8033e14:	e7d1      	b.n	8033dba <_vfiprintf_r+0x866>
 8033e16:	ea54 0205 	orrs.w	r2, r4, r5
 8033e1a:	f8cd a010 	str.w	sl, [sp, #16]
 8033e1e:	f43f ad8d 	beq.w	803393c <_vfiprintf_r+0x3e8>
 8033e22:	2b01      	cmp	r3, #1
 8033e24:	f43f aedc 	beq.w	8033be0 <_vfiprintf_r+0x68c>
 8033e28:	2b02      	cmp	r3, #2
 8033e2a:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 8033e2e:	f43f af2a 	beq.w	8033c86 <_vfiprintf_r+0x732>
 8033e32:	f004 0207 	and.w	r2, r4, #7
 8033e36:	08e4      	lsrs	r4, r4, #3
 8033e38:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8033e3c:	08ed      	lsrs	r5, r5, #3
 8033e3e:	3230      	adds	r2, #48	; 0x30
 8033e40:	ea54 0005 	orrs.w	r0, r4, r5
 8033e44:	4659      	mov	r1, fp
 8033e46:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8033e4a:	d1f2      	bne.n	8033e32 <_vfiprintf_r+0x8de>
 8033e4c:	9b04      	ldr	r3, [sp, #16]
 8033e4e:	07d8      	lsls	r0, r3, #31
 8033e50:	d506      	bpl.n	8033e60 <_vfiprintf_r+0x90c>
 8033e52:	2a30      	cmp	r2, #48	; 0x30
 8033e54:	d004      	beq.n	8033e60 <_vfiprintf_r+0x90c>
 8033e56:	2230      	movs	r2, #48	; 0x30
 8033e58:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8033e5c:	f1a1 0b02 	sub.w	fp, r1, #2
 8033e60:	ab3a      	add	r3, sp, #232	; 0xe8
 8033e62:	eba3 030b 	sub.w	r3, r3, fp
 8033e66:	9d00      	ldr	r5, [sp, #0]
 8033e68:	f8dd a010 	ldr.w	sl, [sp, #16]
 8033e6c:	9300      	str	r3, [sp, #0]
 8033e6e:	e59e      	b.n	80339ae <_vfiprintf_r+0x45a>
 8033e70:	08036e58 	.word	0x08036e58
 8033e74:	08036e68 	.word	0x08036e68

08033e78 <__sbprintf>:
 8033e78:	b570      	push	{r4, r5, r6, lr}
 8033e7a:	460c      	mov	r4, r1
 8033e7c:	8989      	ldrh	r1, [r1, #12]
 8033e7e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8033e82:	f021 0102 	bic.w	r1, r1, #2
 8033e86:	f8ad 1014 	strh.w	r1, [sp, #20]
 8033e8a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8033e8c:	911b      	str	r1, [sp, #108]	; 0x6c
 8033e8e:	89e1      	ldrh	r1, [r4, #14]
 8033e90:	f8ad 1016 	strh.w	r1, [sp, #22]
 8033e94:	69e1      	ldr	r1, [r4, #28]
 8033e96:	9109      	str	r1, [sp, #36]	; 0x24
 8033e98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8033e9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8033e9c:	a91c      	add	r1, sp, #112	; 0x70
 8033e9e:	9102      	str	r1, [sp, #8]
 8033ea0:	9106      	str	r1, [sp, #24]
 8033ea2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8033ea6:	4606      	mov	r6, r0
 8033ea8:	9104      	str	r1, [sp, #16]
 8033eaa:	9107      	str	r1, [sp, #28]
 8033eac:	a818      	add	r0, sp, #96	; 0x60
 8033eae:	2100      	movs	r1, #0
 8033eb0:	e9cd 3200 	strd	r3, r2, [sp]
 8033eb4:	9108      	str	r1, [sp, #32]
 8033eb6:	f7fd fd2b 	bl	8031910 <__retarget_lock_init_recursive>
 8033eba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8033ebe:	a902      	add	r1, sp, #8
 8033ec0:	4630      	mov	r0, r6
 8033ec2:	f7ff fb47 	bl	8033554 <_vfiprintf_r>
 8033ec6:	1e05      	subs	r5, r0, #0
 8033ec8:	db07      	blt.n	8033eda <__sbprintf+0x62>
 8033eca:	a902      	add	r1, sp, #8
 8033ecc:	4630      	mov	r0, r6
 8033ece:	f000 f8f9 	bl	80340c4 <_fflush_r>
 8033ed2:	2800      	cmp	r0, #0
 8033ed4:	bf18      	it	ne
 8033ed6:	f04f 35ff 	movne.w	r5, #4294967295
 8033eda:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8033ede:	9818      	ldr	r0, [sp, #96]	; 0x60
 8033ee0:	065b      	lsls	r3, r3, #25
 8033ee2:	bf42      	ittt	mi
 8033ee4:	89a3      	ldrhmi	r3, [r4, #12]
 8033ee6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8033eea:	81a3      	strhmi	r3, [r4, #12]
 8033eec:	f7fd fd11 	bl	8031912 <__retarget_lock_close_recursive>
 8033ef0:	4628      	mov	r0, r5
 8033ef2:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8033ef6:	bd70      	pop	{r4, r5, r6, pc}

08033ef8 <_fclose_r>:
 8033ef8:	b570      	push	{r4, r5, r6, lr}
 8033efa:	4606      	mov	r6, r0
 8033efc:	460c      	mov	r4, r1
 8033efe:	b911      	cbnz	r1, 8033f06 <_fclose_r+0xe>
 8033f00:	2500      	movs	r5, #0
 8033f02:	4628      	mov	r0, r5
 8033f04:	bd70      	pop	{r4, r5, r6, pc}
 8033f06:	b118      	cbz	r0, 8033f10 <_fclose_r+0x18>
 8033f08:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8033f0a:	b90b      	cbnz	r3, 8033f10 <_fclose_r+0x18>
 8033f0c:	f7fd fbae 	bl	803166c <__sinit>
 8033f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8033f12:	07d8      	lsls	r0, r3, #31
 8033f14:	d405      	bmi.n	8033f22 <_fclose_r+0x2a>
 8033f16:	89a3      	ldrh	r3, [r4, #12]
 8033f18:	0599      	lsls	r1, r3, #22
 8033f1a:	d402      	bmi.n	8033f22 <_fclose_r+0x2a>
 8033f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8033f1e:	f7fd fcf9 	bl	8031914 <__retarget_lock_acquire_recursive>
 8033f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8033f26:	b93b      	cbnz	r3, 8033f38 <_fclose_r+0x40>
 8033f28:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8033f2a:	f015 0501 	ands.w	r5, r5, #1
 8033f2e:	d1e7      	bne.n	8033f00 <_fclose_r+0x8>
 8033f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8033f32:	f7fd fcf0 	bl	8031916 <__retarget_lock_release_recursive>
 8033f36:	e7e4      	b.n	8033f02 <_fclose_r+0xa>
 8033f38:	4621      	mov	r1, r4
 8033f3a:	4630      	mov	r0, r6
 8033f3c:	f000 f834 	bl	8033fa8 <__sflush_r>
 8033f40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8033f42:	4605      	mov	r5, r0
 8033f44:	b133      	cbz	r3, 8033f54 <_fclose_r+0x5c>
 8033f46:	69e1      	ldr	r1, [r4, #28]
 8033f48:	4630      	mov	r0, r6
 8033f4a:	4798      	blx	r3
 8033f4c:	2800      	cmp	r0, #0
 8033f4e:	bfb8      	it	lt
 8033f50:	f04f 35ff 	movlt.w	r5, #4294967295
 8033f54:	89a3      	ldrh	r3, [r4, #12]
 8033f56:	061a      	lsls	r2, r3, #24
 8033f58:	d503      	bpl.n	8033f62 <_fclose_r+0x6a>
 8033f5a:	6921      	ldr	r1, [r4, #16]
 8033f5c:	4630      	mov	r0, r6
 8033f5e:	f7fd fd4d 	bl	80319fc <_free_r>
 8033f62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8033f64:	b141      	cbz	r1, 8033f78 <_fclose_r+0x80>
 8033f66:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8033f6a:	4299      	cmp	r1, r3
 8033f6c:	d002      	beq.n	8033f74 <_fclose_r+0x7c>
 8033f6e:	4630      	mov	r0, r6
 8033f70:	f7fd fd44 	bl	80319fc <_free_r>
 8033f74:	2300      	movs	r3, #0
 8033f76:	6323      	str	r3, [r4, #48]	; 0x30
 8033f78:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8033f7a:	b121      	cbz	r1, 8033f86 <_fclose_r+0x8e>
 8033f7c:	4630      	mov	r0, r6
 8033f7e:	f7fd fd3d 	bl	80319fc <_free_r>
 8033f82:	2300      	movs	r3, #0
 8033f84:	6463      	str	r3, [r4, #68]	; 0x44
 8033f86:	f7fd fb65 	bl	8031654 <__sfp_lock_acquire>
 8033f8a:	2300      	movs	r3, #0
 8033f8c:	81a3      	strh	r3, [r4, #12]
 8033f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8033f90:	07db      	lsls	r3, r3, #31
 8033f92:	d402      	bmi.n	8033f9a <_fclose_r+0xa2>
 8033f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8033f96:	f7fd fcbe 	bl	8031916 <__retarget_lock_release_recursive>
 8033f9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8033f9c:	f7fd fcb9 	bl	8031912 <__retarget_lock_close_recursive>
 8033fa0:	f7fd fb5e 	bl	8031660 <__sfp_lock_release>
 8033fa4:	e7ad      	b.n	8033f02 <_fclose_r+0xa>
	...

08033fa8 <__sflush_r>:
 8033fa8:	898b      	ldrh	r3, [r1, #12]
 8033faa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8033fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033fb2:	4605      	mov	r5, r0
 8033fb4:	0718      	lsls	r0, r3, #28
 8033fb6:	460c      	mov	r4, r1
 8033fb8:	d45f      	bmi.n	803407a <__sflush_r+0xd2>
 8033fba:	684b      	ldr	r3, [r1, #4]
 8033fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033fc0:	2b00      	cmp	r3, #0
 8033fc2:	818a      	strh	r2, [r1, #12]
 8033fc4:	dc05      	bgt.n	8033fd2 <__sflush_r+0x2a>
 8033fc6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8033fc8:	2b00      	cmp	r3, #0
 8033fca:	dc02      	bgt.n	8033fd2 <__sflush_r+0x2a>
 8033fcc:	2000      	movs	r0, #0
 8033fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8033fd4:	2e00      	cmp	r6, #0
 8033fd6:	d0f9      	beq.n	8033fcc <__sflush_r+0x24>
 8033fd8:	2300      	movs	r3, #0
 8033fda:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8033fde:	682f      	ldr	r7, [r5, #0]
 8033fe0:	69e1      	ldr	r1, [r4, #28]
 8033fe2:	602b      	str	r3, [r5, #0]
 8033fe4:	d036      	beq.n	8034054 <__sflush_r+0xac>
 8033fe6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8033fe8:	89a3      	ldrh	r3, [r4, #12]
 8033fea:	075a      	lsls	r2, r3, #29
 8033fec:	d505      	bpl.n	8033ffa <__sflush_r+0x52>
 8033fee:	6863      	ldr	r3, [r4, #4]
 8033ff0:	1ac0      	subs	r0, r0, r3
 8033ff2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8033ff4:	b10b      	cbz	r3, 8033ffa <__sflush_r+0x52>
 8033ff6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8033ff8:	1ac0      	subs	r0, r0, r3
 8033ffa:	2300      	movs	r3, #0
 8033ffc:	4602      	mov	r2, r0
 8033ffe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8034000:	69e1      	ldr	r1, [r4, #28]
 8034002:	4628      	mov	r0, r5
 8034004:	47b0      	blx	r6
 8034006:	1c43      	adds	r3, r0, #1
 8034008:	89a3      	ldrh	r3, [r4, #12]
 803400a:	d106      	bne.n	803401a <__sflush_r+0x72>
 803400c:	6829      	ldr	r1, [r5, #0]
 803400e:	291d      	cmp	r1, #29
 8034010:	d82f      	bhi.n	8034072 <__sflush_r+0xca>
 8034012:	4a2b      	ldr	r2, [pc, #172]	; (80340c0 <__sflush_r+0x118>)
 8034014:	410a      	asrs	r2, r1
 8034016:	07d6      	lsls	r6, r2, #31
 8034018:	d42b      	bmi.n	8034072 <__sflush_r+0xca>
 803401a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 803401e:	b21b      	sxth	r3, r3
 8034020:	2200      	movs	r2, #0
 8034022:	6062      	str	r2, [r4, #4]
 8034024:	04d9      	lsls	r1, r3, #19
 8034026:	6922      	ldr	r2, [r4, #16]
 8034028:	81a3      	strh	r3, [r4, #12]
 803402a:	6022      	str	r2, [r4, #0]
 803402c:	d504      	bpl.n	8034038 <__sflush_r+0x90>
 803402e:	1c42      	adds	r2, r0, #1
 8034030:	d101      	bne.n	8034036 <__sflush_r+0x8e>
 8034032:	682b      	ldr	r3, [r5, #0]
 8034034:	b903      	cbnz	r3, 8034038 <__sflush_r+0x90>
 8034036:	6520      	str	r0, [r4, #80]	; 0x50
 8034038:	6b21      	ldr	r1, [r4, #48]	; 0x30
 803403a:	602f      	str	r7, [r5, #0]
 803403c:	2900      	cmp	r1, #0
 803403e:	d0c5      	beq.n	8033fcc <__sflush_r+0x24>
 8034040:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8034044:	4299      	cmp	r1, r3
 8034046:	d002      	beq.n	803404e <__sflush_r+0xa6>
 8034048:	4628      	mov	r0, r5
 803404a:	f7fd fcd7 	bl	80319fc <_free_r>
 803404e:	2000      	movs	r0, #0
 8034050:	6320      	str	r0, [r4, #48]	; 0x30
 8034052:	e7bc      	b.n	8033fce <__sflush_r+0x26>
 8034054:	2301      	movs	r3, #1
 8034056:	4628      	mov	r0, r5
 8034058:	47b0      	blx	r6
 803405a:	1c41      	adds	r1, r0, #1
 803405c:	d1c4      	bne.n	8033fe8 <__sflush_r+0x40>
 803405e:	682b      	ldr	r3, [r5, #0]
 8034060:	2b00      	cmp	r3, #0
 8034062:	d0c1      	beq.n	8033fe8 <__sflush_r+0x40>
 8034064:	2b1d      	cmp	r3, #29
 8034066:	d001      	beq.n	803406c <__sflush_r+0xc4>
 8034068:	2b16      	cmp	r3, #22
 803406a:	d101      	bne.n	8034070 <__sflush_r+0xc8>
 803406c:	602f      	str	r7, [r5, #0]
 803406e:	e7ad      	b.n	8033fcc <__sflush_r+0x24>
 8034070:	89a3      	ldrh	r3, [r4, #12]
 8034072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8034076:	81a3      	strh	r3, [r4, #12]
 8034078:	e7a9      	b.n	8033fce <__sflush_r+0x26>
 803407a:	690f      	ldr	r7, [r1, #16]
 803407c:	2f00      	cmp	r7, #0
 803407e:	d0a5      	beq.n	8033fcc <__sflush_r+0x24>
 8034080:	079b      	lsls	r3, r3, #30
 8034082:	680e      	ldr	r6, [r1, #0]
 8034084:	bf08      	it	eq
 8034086:	694b      	ldreq	r3, [r1, #20]
 8034088:	600f      	str	r7, [r1, #0]
 803408a:	bf18      	it	ne
 803408c:	2300      	movne	r3, #0
 803408e:	eba6 0807 	sub.w	r8, r6, r7
 8034092:	608b      	str	r3, [r1, #8]
 8034094:	f1b8 0f00 	cmp.w	r8, #0
 8034098:	dd98      	ble.n	8033fcc <__sflush_r+0x24>
 803409a:	69e1      	ldr	r1, [r4, #28]
 803409c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 803409e:	4643      	mov	r3, r8
 80340a0:	463a      	mov	r2, r7
 80340a2:	4628      	mov	r0, r5
 80340a4:	47b0      	blx	r6
 80340a6:	2800      	cmp	r0, #0
 80340a8:	dc06      	bgt.n	80340b8 <__sflush_r+0x110>
 80340aa:	89a3      	ldrh	r3, [r4, #12]
 80340ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80340b0:	81a3      	strh	r3, [r4, #12]
 80340b2:	f04f 30ff 	mov.w	r0, #4294967295
 80340b6:	e78a      	b.n	8033fce <__sflush_r+0x26>
 80340b8:	4407      	add	r7, r0
 80340ba:	eba8 0800 	sub.w	r8, r8, r0
 80340be:	e7e9      	b.n	8034094 <__sflush_r+0xec>
 80340c0:	dfbffffe 	.word	0xdfbffffe

080340c4 <_fflush_r>:
 80340c4:	b538      	push	{r3, r4, r5, lr}
 80340c6:	460c      	mov	r4, r1
 80340c8:	4605      	mov	r5, r0
 80340ca:	b118      	cbz	r0, 80340d4 <_fflush_r+0x10>
 80340cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80340ce:	b90b      	cbnz	r3, 80340d4 <_fflush_r+0x10>
 80340d0:	f7fd facc 	bl	803166c <__sinit>
 80340d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80340d8:	b1bb      	cbz	r3, 803410a <_fflush_r+0x46>
 80340da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80340dc:	07d0      	lsls	r0, r2, #31
 80340de:	d404      	bmi.n	80340ea <_fflush_r+0x26>
 80340e0:	0599      	lsls	r1, r3, #22
 80340e2:	d402      	bmi.n	80340ea <_fflush_r+0x26>
 80340e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80340e6:	f7fd fc15 	bl	8031914 <__retarget_lock_acquire_recursive>
 80340ea:	4628      	mov	r0, r5
 80340ec:	4621      	mov	r1, r4
 80340ee:	f7ff ff5b 	bl	8033fa8 <__sflush_r>
 80340f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80340f4:	07da      	lsls	r2, r3, #31
 80340f6:	4605      	mov	r5, r0
 80340f8:	d405      	bmi.n	8034106 <_fflush_r+0x42>
 80340fa:	89a3      	ldrh	r3, [r4, #12]
 80340fc:	059b      	lsls	r3, r3, #22
 80340fe:	d402      	bmi.n	8034106 <_fflush_r+0x42>
 8034100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8034102:	f7fd fc08 	bl	8031916 <__retarget_lock_release_recursive>
 8034106:	4628      	mov	r0, r5
 8034108:	bd38      	pop	{r3, r4, r5, pc}
 803410a:	461d      	mov	r5, r3
 803410c:	e7fb      	b.n	8034106 <_fflush_r+0x42>
	...

08034110 <__sfvwrite_r>:
 8034110:	6893      	ldr	r3, [r2, #8]
 8034112:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034116:	4606      	mov	r6, r0
 8034118:	460c      	mov	r4, r1
 803411a:	4691      	mov	r9, r2
 803411c:	b91b      	cbnz	r3, 8034126 <__sfvwrite_r+0x16>
 803411e:	2000      	movs	r0, #0
 8034120:	b003      	add	sp, #12
 8034122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034126:	898b      	ldrh	r3, [r1, #12]
 8034128:	0718      	lsls	r0, r3, #28
 803412a:	d54f      	bpl.n	80341cc <__sfvwrite_r+0xbc>
 803412c:	690b      	ldr	r3, [r1, #16]
 803412e:	2b00      	cmp	r3, #0
 8034130:	d04c      	beq.n	80341cc <__sfvwrite_r+0xbc>
 8034132:	89a3      	ldrh	r3, [r4, #12]
 8034134:	f8d9 8000 	ldr.w	r8, [r9]
 8034138:	f013 0702 	ands.w	r7, r3, #2
 803413c:	d16b      	bne.n	8034216 <__sfvwrite_r+0x106>
 803413e:	f013 0301 	ands.w	r3, r3, #1
 8034142:	f000 809b 	beq.w	803427c <__sfvwrite_r+0x16c>
 8034146:	4638      	mov	r0, r7
 8034148:	46ba      	mov	sl, r7
 803414a:	46bb      	mov	fp, r7
 803414c:	f1bb 0f00 	cmp.w	fp, #0
 8034150:	f000 8102 	beq.w	8034358 <__sfvwrite_r+0x248>
 8034154:	b950      	cbnz	r0, 803416c <__sfvwrite_r+0x5c>
 8034156:	465a      	mov	r2, fp
 8034158:	210a      	movs	r1, #10
 803415a:	4650      	mov	r0, sl
 803415c:	f7ee f840 	bl	80221e0 <memchr>
 8034160:	2800      	cmp	r0, #0
 8034162:	f000 80ff 	beq.w	8034364 <__sfvwrite_r+0x254>
 8034166:	3001      	adds	r0, #1
 8034168:	eba0 070a 	sub.w	r7, r0, sl
 803416c:	6820      	ldr	r0, [r4, #0]
 803416e:	6921      	ldr	r1, [r4, #16]
 8034170:	68a5      	ldr	r5, [r4, #8]
 8034172:	6963      	ldr	r3, [r4, #20]
 8034174:	455f      	cmp	r7, fp
 8034176:	463a      	mov	r2, r7
 8034178:	bf28      	it	cs
 803417a:	465a      	movcs	r2, fp
 803417c:	4288      	cmp	r0, r1
 803417e:	f240 80f4 	bls.w	803436a <__sfvwrite_r+0x25a>
 8034182:	441d      	add	r5, r3
 8034184:	42aa      	cmp	r2, r5
 8034186:	f340 80f0 	ble.w	803436a <__sfvwrite_r+0x25a>
 803418a:	4651      	mov	r1, sl
 803418c:	462a      	mov	r2, r5
 803418e:	f000 f9cc 	bl	803452a <memmove>
 8034192:	6823      	ldr	r3, [r4, #0]
 8034194:	442b      	add	r3, r5
 8034196:	6023      	str	r3, [r4, #0]
 8034198:	4621      	mov	r1, r4
 803419a:	4630      	mov	r0, r6
 803419c:	f7ff ff92 	bl	80340c4 <_fflush_r>
 80341a0:	2800      	cmp	r0, #0
 80341a2:	d166      	bne.n	8034272 <__sfvwrite_r+0x162>
 80341a4:	1b7f      	subs	r7, r7, r5
 80341a6:	f040 80f8 	bne.w	803439a <__sfvwrite_r+0x28a>
 80341aa:	4621      	mov	r1, r4
 80341ac:	4630      	mov	r0, r6
 80341ae:	f7ff ff89 	bl	80340c4 <_fflush_r>
 80341b2:	2800      	cmp	r0, #0
 80341b4:	d15d      	bne.n	8034272 <__sfvwrite_r+0x162>
 80341b6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80341ba:	1b5b      	subs	r3, r3, r5
 80341bc:	44aa      	add	sl, r5
 80341be:	ebab 0b05 	sub.w	fp, fp, r5
 80341c2:	f8c9 3008 	str.w	r3, [r9, #8]
 80341c6:	2b00      	cmp	r3, #0
 80341c8:	d1c0      	bne.n	803414c <__sfvwrite_r+0x3c>
 80341ca:	e7a8      	b.n	803411e <__sfvwrite_r+0xe>
 80341cc:	4621      	mov	r1, r4
 80341ce:	4630      	mov	r0, r6
 80341d0:	f000 f8e8 	bl	80343a4 <__swsetup_r>
 80341d4:	2800      	cmp	r0, #0
 80341d6:	d0ac      	beq.n	8034132 <__sfvwrite_r+0x22>
 80341d8:	f04f 30ff 	mov.w	r0, #4294967295
 80341dc:	e7a0      	b.n	8034120 <__sfvwrite_r+0x10>
 80341de:	e9d8 a500 	ldrd	sl, r5, [r8]
 80341e2:	f108 0808 	add.w	r8, r8, #8
 80341e6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80341ea:	69e1      	ldr	r1, [r4, #28]
 80341ec:	2d00      	cmp	r5, #0
 80341ee:	d0f6      	beq.n	80341de <__sfvwrite_r+0xce>
 80341f0:	42bd      	cmp	r5, r7
 80341f2:	462b      	mov	r3, r5
 80341f4:	4652      	mov	r2, sl
 80341f6:	bf28      	it	cs
 80341f8:	463b      	movcs	r3, r7
 80341fa:	4630      	mov	r0, r6
 80341fc:	47d8      	blx	fp
 80341fe:	2800      	cmp	r0, #0
 8034200:	dd37      	ble.n	8034272 <__sfvwrite_r+0x162>
 8034202:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8034206:	1a1b      	subs	r3, r3, r0
 8034208:	4482      	add	sl, r0
 803420a:	1a2d      	subs	r5, r5, r0
 803420c:	f8c9 3008 	str.w	r3, [r9, #8]
 8034210:	2b00      	cmp	r3, #0
 8034212:	d1e8      	bne.n	80341e6 <__sfvwrite_r+0xd6>
 8034214:	e783      	b.n	803411e <__sfvwrite_r+0xe>
 8034216:	f04f 0a00 	mov.w	sl, #0
 803421a:	4f61      	ldr	r7, [pc, #388]	; (80343a0 <__sfvwrite_r+0x290>)
 803421c:	4655      	mov	r5, sl
 803421e:	e7e2      	b.n	80341e6 <__sfvwrite_r+0xd6>
 8034220:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8034224:	f108 0808 	add.w	r8, r8, #8
 8034228:	6820      	ldr	r0, [r4, #0]
 803422a:	68a2      	ldr	r2, [r4, #8]
 803422c:	f1ba 0f00 	cmp.w	sl, #0
 8034230:	d0f6      	beq.n	8034220 <__sfvwrite_r+0x110>
 8034232:	89a3      	ldrh	r3, [r4, #12]
 8034234:	0599      	lsls	r1, r3, #22
 8034236:	d563      	bpl.n	8034300 <__sfvwrite_r+0x1f0>
 8034238:	4552      	cmp	r2, sl
 803423a:	d836      	bhi.n	80342aa <__sfvwrite_r+0x19a>
 803423c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8034240:	d033      	beq.n	80342aa <__sfvwrite_r+0x19a>
 8034242:	6921      	ldr	r1, [r4, #16]
 8034244:	6965      	ldr	r5, [r4, #20]
 8034246:	eba0 0b01 	sub.w	fp, r0, r1
 803424a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 803424e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8034252:	f10b 0201 	add.w	r2, fp, #1
 8034256:	106d      	asrs	r5, r5, #1
 8034258:	4452      	add	r2, sl
 803425a:	4295      	cmp	r5, r2
 803425c:	bf38      	it	cc
 803425e:	4615      	movcc	r5, r2
 8034260:	055b      	lsls	r3, r3, #21
 8034262:	d53d      	bpl.n	80342e0 <__sfvwrite_r+0x1d0>
 8034264:	4629      	mov	r1, r5
 8034266:	4630      	mov	r0, r6
 8034268:	f7fd fc88 	bl	8031b7c <_malloc_r>
 803426c:	b948      	cbnz	r0, 8034282 <__sfvwrite_r+0x172>
 803426e:	230c      	movs	r3, #12
 8034270:	6033      	str	r3, [r6, #0]
 8034272:	89a3      	ldrh	r3, [r4, #12]
 8034274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8034278:	81a3      	strh	r3, [r4, #12]
 803427a:	e7ad      	b.n	80341d8 <__sfvwrite_r+0xc8>
 803427c:	461f      	mov	r7, r3
 803427e:	469a      	mov	sl, r3
 8034280:	e7d2      	b.n	8034228 <__sfvwrite_r+0x118>
 8034282:	465a      	mov	r2, fp
 8034284:	6921      	ldr	r1, [r4, #16]
 8034286:	9001      	str	r0, [sp, #4]
 8034288:	f7fd fb46 	bl	8031918 <memcpy>
 803428c:	89a2      	ldrh	r2, [r4, #12]
 803428e:	9b01      	ldr	r3, [sp, #4]
 8034290:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8034294:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8034298:	81a2      	strh	r2, [r4, #12]
 803429a:	6123      	str	r3, [r4, #16]
 803429c:	6165      	str	r5, [r4, #20]
 803429e:	445b      	add	r3, fp
 80342a0:	eba5 050b 	sub.w	r5, r5, fp
 80342a4:	6023      	str	r3, [r4, #0]
 80342a6:	4652      	mov	r2, sl
 80342a8:	60a5      	str	r5, [r4, #8]
 80342aa:	4552      	cmp	r2, sl
 80342ac:	bf28      	it	cs
 80342ae:	4652      	movcs	r2, sl
 80342b0:	6820      	ldr	r0, [r4, #0]
 80342b2:	9201      	str	r2, [sp, #4]
 80342b4:	4639      	mov	r1, r7
 80342b6:	f000 f938 	bl	803452a <memmove>
 80342ba:	68a3      	ldr	r3, [r4, #8]
 80342bc:	9a01      	ldr	r2, [sp, #4]
 80342be:	1a9b      	subs	r3, r3, r2
 80342c0:	60a3      	str	r3, [r4, #8]
 80342c2:	6823      	ldr	r3, [r4, #0]
 80342c4:	4413      	add	r3, r2
 80342c6:	4655      	mov	r5, sl
 80342c8:	6023      	str	r3, [r4, #0]
 80342ca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80342ce:	1b5b      	subs	r3, r3, r5
 80342d0:	442f      	add	r7, r5
 80342d2:	ebaa 0a05 	sub.w	sl, sl, r5
 80342d6:	f8c9 3008 	str.w	r3, [r9, #8]
 80342da:	2b00      	cmp	r3, #0
 80342dc:	d1a4      	bne.n	8034228 <__sfvwrite_r+0x118>
 80342de:	e71e      	b.n	803411e <__sfvwrite_r+0xe>
 80342e0:	462a      	mov	r2, r5
 80342e2:	4630      	mov	r0, r6
 80342e4:	f001 fb9e 	bl	8035a24 <_realloc_r>
 80342e8:	4603      	mov	r3, r0
 80342ea:	2800      	cmp	r0, #0
 80342ec:	d1d5      	bne.n	803429a <__sfvwrite_r+0x18a>
 80342ee:	6921      	ldr	r1, [r4, #16]
 80342f0:	4630      	mov	r0, r6
 80342f2:	f7fd fb83 	bl	80319fc <_free_r>
 80342f6:	89a3      	ldrh	r3, [r4, #12]
 80342f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80342fc:	81a3      	strh	r3, [r4, #12]
 80342fe:	e7b6      	b.n	803426e <__sfvwrite_r+0x15e>
 8034300:	6923      	ldr	r3, [r4, #16]
 8034302:	4283      	cmp	r3, r0
 8034304:	d302      	bcc.n	803430c <__sfvwrite_r+0x1fc>
 8034306:	6961      	ldr	r1, [r4, #20]
 8034308:	4551      	cmp	r1, sl
 803430a:	d915      	bls.n	8034338 <__sfvwrite_r+0x228>
 803430c:	4552      	cmp	r2, sl
 803430e:	bf28      	it	cs
 8034310:	4652      	movcs	r2, sl
 8034312:	4639      	mov	r1, r7
 8034314:	4615      	mov	r5, r2
 8034316:	f000 f908 	bl	803452a <memmove>
 803431a:	68a3      	ldr	r3, [r4, #8]
 803431c:	6822      	ldr	r2, [r4, #0]
 803431e:	1b5b      	subs	r3, r3, r5
 8034320:	442a      	add	r2, r5
 8034322:	60a3      	str	r3, [r4, #8]
 8034324:	6022      	str	r2, [r4, #0]
 8034326:	2b00      	cmp	r3, #0
 8034328:	d1cf      	bne.n	80342ca <__sfvwrite_r+0x1ba>
 803432a:	4621      	mov	r1, r4
 803432c:	4630      	mov	r0, r6
 803432e:	f7ff fec9 	bl	80340c4 <_fflush_r>
 8034332:	2800      	cmp	r0, #0
 8034334:	d0c9      	beq.n	80342ca <__sfvwrite_r+0x1ba>
 8034336:	e79c      	b.n	8034272 <__sfvwrite_r+0x162>
 8034338:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 803433c:	459a      	cmp	sl, r3
 803433e:	bf38      	it	cc
 8034340:	4653      	movcc	r3, sl
 8034342:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8034344:	fb93 f3f1 	sdiv	r3, r3, r1
 8034348:	463a      	mov	r2, r7
 803434a:	434b      	muls	r3, r1
 803434c:	4630      	mov	r0, r6
 803434e:	69e1      	ldr	r1, [r4, #28]
 8034350:	47a8      	blx	r5
 8034352:	1e05      	subs	r5, r0, #0
 8034354:	dcb9      	bgt.n	80342ca <__sfvwrite_r+0x1ba>
 8034356:	e78c      	b.n	8034272 <__sfvwrite_r+0x162>
 8034358:	e9d8 ab00 	ldrd	sl, fp, [r8]
 803435c:	2000      	movs	r0, #0
 803435e:	f108 0808 	add.w	r8, r8, #8
 8034362:	e6f3      	b.n	803414c <__sfvwrite_r+0x3c>
 8034364:	f10b 0701 	add.w	r7, fp, #1
 8034368:	e700      	b.n	803416c <__sfvwrite_r+0x5c>
 803436a:	4293      	cmp	r3, r2
 803436c:	dc08      	bgt.n	8034380 <__sfvwrite_r+0x270>
 803436e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8034370:	69e1      	ldr	r1, [r4, #28]
 8034372:	4652      	mov	r2, sl
 8034374:	4630      	mov	r0, r6
 8034376:	47a8      	blx	r5
 8034378:	1e05      	subs	r5, r0, #0
 803437a:	f73f af13 	bgt.w	80341a4 <__sfvwrite_r+0x94>
 803437e:	e778      	b.n	8034272 <__sfvwrite_r+0x162>
 8034380:	4651      	mov	r1, sl
 8034382:	9201      	str	r2, [sp, #4]
 8034384:	f000 f8d1 	bl	803452a <memmove>
 8034388:	9a01      	ldr	r2, [sp, #4]
 803438a:	68a3      	ldr	r3, [r4, #8]
 803438c:	1a9b      	subs	r3, r3, r2
 803438e:	60a3      	str	r3, [r4, #8]
 8034390:	6823      	ldr	r3, [r4, #0]
 8034392:	4413      	add	r3, r2
 8034394:	6023      	str	r3, [r4, #0]
 8034396:	4615      	mov	r5, r2
 8034398:	e704      	b.n	80341a4 <__sfvwrite_r+0x94>
 803439a:	2001      	movs	r0, #1
 803439c:	e70b      	b.n	80341b6 <__sfvwrite_r+0xa6>
 803439e:	bf00      	nop
 80343a0:	7ffffc00 	.word	0x7ffffc00

080343a4 <__swsetup_r>:
 80343a4:	b538      	push	{r3, r4, r5, lr}
 80343a6:	4b2a      	ldr	r3, [pc, #168]	; (8034450 <__swsetup_r+0xac>)
 80343a8:	4605      	mov	r5, r0
 80343aa:	6818      	ldr	r0, [r3, #0]
 80343ac:	460c      	mov	r4, r1
 80343ae:	b118      	cbz	r0, 80343b8 <__swsetup_r+0x14>
 80343b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80343b2:	b90b      	cbnz	r3, 80343b8 <__swsetup_r+0x14>
 80343b4:	f7fd f95a 	bl	803166c <__sinit>
 80343b8:	89a3      	ldrh	r3, [r4, #12]
 80343ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80343be:	0718      	lsls	r0, r3, #28
 80343c0:	d422      	bmi.n	8034408 <__swsetup_r+0x64>
 80343c2:	06d9      	lsls	r1, r3, #27
 80343c4:	d407      	bmi.n	80343d6 <__swsetup_r+0x32>
 80343c6:	2309      	movs	r3, #9
 80343c8:	602b      	str	r3, [r5, #0]
 80343ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80343ce:	81a3      	strh	r3, [r4, #12]
 80343d0:	f04f 30ff 	mov.w	r0, #4294967295
 80343d4:	e034      	b.n	8034440 <__swsetup_r+0x9c>
 80343d6:	0758      	lsls	r0, r3, #29
 80343d8:	d512      	bpl.n	8034400 <__swsetup_r+0x5c>
 80343da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80343dc:	b141      	cbz	r1, 80343f0 <__swsetup_r+0x4c>
 80343de:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80343e2:	4299      	cmp	r1, r3
 80343e4:	d002      	beq.n	80343ec <__swsetup_r+0x48>
 80343e6:	4628      	mov	r0, r5
 80343e8:	f7fd fb08 	bl	80319fc <_free_r>
 80343ec:	2300      	movs	r3, #0
 80343ee:	6323      	str	r3, [r4, #48]	; 0x30
 80343f0:	89a3      	ldrh	r3, [r4, #12]
 80343f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80343f6:	81a3      	strh	r3, [r4, #12]
 80343f8:	2300      	movs	r3, #0
 80343fa:	6063      	str	r3, [r4, #4]
 80343fc:	6923      	ldr	r3, [r4, #16]
 80343fe:	6023      	str	r3, [r4, #0]
 8034400:	89a3      	ldrh	r3, [r4, #12]
 8034402:	f043 0308 	orr.w	r3, r3, #8
 8034406:	81a3      	strh	r3, [r4, #12]
 8034408:	6923      	ldr	r3, [r4, #16]
 803440a:	b94b      	cbnz	r3, 8034420 <__swsetup_r+0x7c>
 803440c:	89a3      	ldrh	r3, [r4, #12]
 803440e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8034412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8034416:	d003      	beq.n	8034420 <__swsetup_r+0x7c>
 8034418:	4621      	mov	r1, r4
 803441a:	4628      	mov	r0, r5
 803441c:	f001 fcf6 	bl	8035e0c <__smakebuf_r>
 8034420:	89a0      	ldrh	r0, [r4, #12]
 8034422:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8034426:	f010 0301 	ands.w	r3, r0, #1
 803442a:	d00a      	beq.n	8034442 <__swsetup_r+0x9e>
 803442c:	2300      	movs	r3, #0
 803442e:	60a3      	str	r3, [r4, #8]
 8034430:	6963      	ldr	r3, [r4, #20]
 8034432:	425b      	negs	r3, r3
 8034434:	61a3      	str	r3, [r4, #24]
 8034436:	6923      	ldr	r3, [r4, #16]
 8034438:	b943      	cbnz	r3, 803444c <__swsetup_r+0xa8>
 803443a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803443e:	d1c4      	bne.n	80343ca <__swsetup_r+0x26>
 8034440:	bd38      	pop	{r3, r4, r5, pc}
 8034442:	0781      	lsls	r1, r0, #30
 8034444:	bf58      	it	pl
 8034446:	6963      	ldrpl	r3, [r4, #20]
 8034448:	60a3      	str	r3, [r4, #8]
 803444a:	e7f4      	b.n	8034436 <__swsetup_r+0x92>
 803444c:	2000      	movs	r0, #0
 803444e:	e7f7      	b.n	8034440 <__swsetup_r+0x9c>
 8034450:	200003a8 	.word	0x200003a8

08034454 <__fputwc>:
 8034454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8034458:	4680      	mov	r8, r0
 803445a:	460e      	mov	r6, r1
 803445c:	4615      	mov	r5, r2
 803445e:	f000 f891 	bl	8034584 <__locale_mb_cur_max>
 8034462:	2801      	cmp	r0, #1
 8034464:	d11c      	bne.n	80344a0 <__fputwc+0x4c>
 8034466:	1e73      	subs	r3, r6, #1
 8034468:	2bfe      	cmp	r3, #254	; 0xfe
 803446a:	d819      	bhi.n	80344a0 <__fputwc+0x4c>
 803446c:	f88d 6004 	strb.w	r6, [sp, #4]
 8034470:	4604      	mov	r4, r0
 8034472:	2700      	movs	r7, #0
 8034474:	f10d 0904 	add.w	r9, sp, #4
 8034478:	42a7      	cmp	r7, r4
 803447a:	d020      	beq.n	80344be <__fputwc+0x6a>
 803447c:	68ab      	ldr	r3, [r5, #8]
 803447e:	f817 1009 	ldrb.w	r1, [r7, r9]
 8034482:	3b01      	subs	r3, #1
 8034484:	2b00      	cmp	r3, #0
 8034486:	60ab      	str	r3, [r5, #8]
 8034488:	da04      	bge.n	8034494 <__fputwc+0x40>
 803448a:	69aa      	ldr	r2, [r5, #24]
 803448c:	4293      	cmp	r3, r2
 803448e:	db1a      	blt.n	80344c6 <__fputwc+0x72>
 8034490:	290a      	cmp	r1, #10
 8034492:	d018      	beq.n	80344c6 <__fputwc+0x72>
 8034494:	682b      	ldr	r3, [r5, #0]
 8034496:	1c5a      	adds	r2, r3, #1
 8034498:	602a      	str	r2, [r5, #0]
 803449a:	7019      	strb	r1, [r3, #0]
 803449c:	3701      	adds	r7, #1
 803449e:	e7eb      	b.n	8034478 <__fputwc+0x24>
 80344a0:	a901      	add	r1, sp, #4
 80344a2:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80344a6:	4632      	mov	r2, r6
 80344a8:	4640      	mov	r0, r8
 80344aa:	f001 fc71 	bl	8035d90 <_wcrtomb_r>
 80344ae:	1c41      	adds	r1, r0, #1
 80344b0:	4604      	mov	r4, r0
 80344b2:	d1de      	bne.n	8034472 <__fputwc+0x1e>
 80344b4:	89ab      	ldrh	r3, [r5, #12]
 80344b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80344ba:	81ab      	strh	r3, [r5, #12]
 80344bc:	4606      	mov	r6, r0
 80344be:	4630      	mov	r0, r6
 80344c0:	b003      	add	sp, #12
 80344c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80344c6:	462a      	mov	r2, r5
 80344c8:	4640      	mov	r0, r8
 80344ca:	f001 fcdb 	bl	8035e84 <__swbuf_r>
 80344ce:	1c42      	adds	r2, r0, #1
 80344d0:	d1e4      	bne.n	803449c <__fputwc+0x48>
 80344d2:	4606      	mov	r6, r0
 80344d4:	e7f3      	b.n	80344be <__fputwc+0x6a>

080344d6 <_fputwc_r>:
 80344d6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80344d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80344da:	4614      	mov	r4, r2
 80344dc:	07da      	lsls	r2, r3, #31
 80344de:	4605      	mov	r5, r0
 80344e0:	d407      	bmi.n	80344f2 <_fputwc_r+0x1c>
 80344e2:	89a3      	ldrh	r3, [r4, #12]
 80344e4:	059b      	lsls	r3, r3, #22
 80344e6:	d404      	bmi.n	80344f2 <_fputwc_r+0x1c>
 80344e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80344ea:	9101      	str	r1, [sp, #4]
 80344ec:	f7fd fa12 	bl	8031914 <__retarget_lock_acquire_recursive>
 80344f0:	9901      	ldr	r1, [sp, #4]
 80344f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80344f6:	0498      	lsls	r0, r3, #18
 80344f8:	d406      	bmi.n	8034508 <_fputwc_r+0x32>
 80344fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80344fe:	81a3      	strh	r3, [r4, #12]
 8034500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8034502:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8034506:	6663      	str	r3, [r4, #100]	; 0x64
 8034508:	4622      	mov	r2, r4
 803450a:	4628      	mov	r0, r5
 803450c:	f7ff ffa2 	bl	8034454 <__fputwc>
 8034510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8034512:	07da      	lsls	r2, r3, #31
 8034514:	4605      	mov	r5, r0
 8034516:	d405      	bmi.n	8034524 <_fputwc_r+0x4e>
 8034518:	89a3      	ldrh	r3, [r4, #12]
 803451a:	059b      	lsls	r3, r3, #22
 803451c:	d402      	bmi.n	8034524 <_fputwc_r+0x4e>
 803451e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8034520:	f7fd f9f9 	bl	8031916 <__retarget_lock_release_recursive>
 8034524:	4628      	mov	r0, r5
 8034526:	b003      	add	sp, #12
 8034528:	bd30      	pop	{r4, r5, pc}

0803452a <memmove>:
 803452a:	4288      	cmp	r0, r1
 803452c:	b510      	push	{r4, lr}
 803452e:	eb01 0402 	add.w	r4, r1, r2
 8034532:	d902      	bls.n	803453a <memmove+0x10>
 8034534:	4284      	cmp	r4, r0
 8034536:	4623      	mov	r3, r4
 8034538:	d807      	bhi.n	803454a <memmove+0x20>
 803453a:	1e43      	subs	r3, r0, #1
 803453c:	42a1      	cmp	r1, r4
 803453e:	d008      	beq.n	8034552 <memmove+0x28>
 8034540:	f811 2b01 	ldrb.w	r2, [r1], #1
 8034544:	f803 2f01 	strb.w	r2, [r3, #1]!
 8034548:	e7f8      	b.n	803453c <memmove+0x12>
 803454a:	4402      	add	r2, r0
 803454c:	4601      	mov	r1, r0
 803454e:	428a      	cmp	r2, r1
 8034550:	d100      	bne.n	8034554 <memmove+0x2a>
 8034552:	bd10      	pop	{r4, pc}
 8034554:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8034558:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803455c:	e7f7      	b.n	803454e <memmove+0x24>

0803455e <strncpy>:
 803455e:	b510      	push	{r4, lr}
 8034560:	3901      	subs	r1, #1
 8034562:	4603      	mov	r3, r0
 8034564:	b132      	cbz	r2, 8034574 <strncpy+0x16>
 8034566:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 803456a:	f803 4b01 	strb.w	r4, [r3], #1
 803456e:	3a01      	subs	r2, #1
 8034570:	2c00      	cmp	r4, #0
 8034572:	d1f7      	bne.n	8034564 <strncpy+0x6>
 8034574:	441a      	add	r2, r3
 8034576:	2100      	movs	r1, #0
 8034578:	4293      	cmp	r3, r2
 803457a:	d100      	bne.n	803457e <strncpy+0x20>
 803457c:	bd10      	pop	{r4, pc}
 803457e:	f803 1b01 	strb.w	r1, [r3], #1
 8034582:	e7f9      	b.n	8034578 <strncpy+0x1a>

08034584 <__locale_mb_cur_max>:
 8034584:	4b01      	ldr	r3, [pc, #4]	; (803458c <__locale_mb_cur_max+0x8>)
 8034586:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 803458a:	4770      	bx	lr
 803458c:	200007c0 	.word	0x200007c0

08034590 <_localeconv_r>:
 8034590:	4800      	ldr	r0, [pc, #0]	; (8034594 <_localeconv_r+0x4>)
 8034592:	4770      	bx	lr
 8034594:	200008b0 	.word	0x200008b0

08034598 <_sbrk_r>:
 8034598:	b538      	push	{r3, r4, r5, lr}
 803459a:	4d06      	ldr	r5, [pc, #24]	; (80345b4 <_sbrk_r+0x1c>)
 803459c:	2300      	movs	r3, #0
 803459e:	4604      	mov	r4, r0
 80345a0:	4608      	mov	r0, r1
 80345a2:	602b      	str	r3, [r5, #0]
 80345a4:	f7f3 fa30 	bl	8027a08 <_sbrk>
 80345a8:	1c43      	adds	r3, r0, #1
 80345aa:	d102      	bne.n	80345b2 <_sbrk_r+0x1a>
 80345ac:	682b      	ldr	r3, [r5, #0]
 80345ae:	b103      	cbz	r3, 80345b2 <_sbrk_r+0x1a>
 80345b0:	6023      	str	r3, [r4, #0]
 80345b2:	bd38      	pop	{r3, r4, r5, pc}
 80345b4:	20008be4 	.word	0x20008be4

080345b8 <__libc_fini_array>:
 80345b8:	b538      	push	{r3, r4, r5, lr}
 80345ba:	4d07      	ldr	r5, [pc, #28]	; (80345d8 <__libc_fini_array+0x20>)
 80345bc:	4c07      	ldr	r4, [pc, #28]	; (80345dc <__libc_fini_array+0x24>)
 80345be:	1b64      	subs	r4, r4, r5
 80345c0:	10a4      	asrs	r4, r4, #2
 80345c2:	b91c      	cbnz	r4, 80345cc <__libc_fini_array+0x14>
 80345c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80345c8:	f001 bd80 	b.w	80360cc <_fini>
 80345cc:	3c01      	subs	r4, #1
 80345ce:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80345d2:	4798      	blx	r3
 80345d4:	e7f5      	b.n	80345c2 <__libc_fini_array+0xa>
 80345d6:	bf00      	nop
 80345d8:	080371a4 	.word	0x080371a4
 80345dc:	080371a8 	.word	0x080371a8

080345e0 <sysconf>:
 80345e0:	2808      	cmp	r0, #8
 80345e2:	b508      	push	{r3, lr}
 80345e4:	d006      	beq.n	80345f4 <sysconf+0x14>
 80345e6:	f7fd f969 	bl	80318bc <__errno>
 80345ea:	2316      	movs	r3, #22
 80345ec:	6003      	str	r3, [r0, #0]
 80345ee:	f04f 30ff 	mov.w	r0, #4294967295
 80345f2:	bd08      	pop	{r3, pc}
 80345f4:	2080      	movs	r0, #128	; 0x80
 80345f6:	e7fc      	b.n	80345f2 <sysconf+0x12>

080345f8 <frexp>:
 80345f8:	b570      	push	{r4, r5, r6, lr}
 80345fa:	2100      	movs	r1, #0
 80345fc:	ec55 4b10 	vmov	r4, r5, d0
 8034600:	6001      	str	r1, [r0, #0]
 8034602:	4916      	ldr	r1, [pc, #88]	; (803465c <frexp+0x64>)
 8034604:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8034608:	428a      	cmp	r2, r1
 803460a:	4606      	mov	r6, r0
 803460c:	462b      	mov	r3, r5
 803460e:	dc22      	bgt.n	8034656 <frexp+0x5e>
 8034610:	ee10 1a10 	vmov	r1, s0
 8034614:	4311      	orrs	r1, r2
 8034616:	d01e      	beq.n	8034656 <frexp+0x5e>
 8034618:	4911      	ldr	r1, [pc, #68]	; (8034660 <frexp+0x68>)
 803461a:	4029      	ands	r1, r5
 803461c:	b969      	cbnz	r1, 803463a <frexp+0x42>
 803461e:	4b11      	ldr	r3, [pc, #68]	; (8034664 <frexp+0x6c>)
 8034620:	2200      	movs	r2, #0
 8034622:	ee10 0a10 	vmov	r0, s0
 8034626:	4629      	mov	r1, r5
 8034628:	f7ed ffe6 	bl	80225f8 <__aeabi_dmul>
 803462c:	460b      	mov	r3, r1
 803462e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8034632:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8034636:	4604      	mov	r4, r0
 8034638:	6031      	str	r1, [r6, #0]
 803463a:	6831      	ldr	r1, [r6, #0]
 803463c:	1512      	asrs	r2, r2, #20
 803463e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8034642:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8034646:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 803464a:	4411      	add	r1, r2
 803464c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8034650:	6031      	str	r1, [r6, #0]
 8034652:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8034656:	ec45 4b10 	vmov	d0, r4, r5
 803465a:	bd70      	pop	{r4, r5, r6, pc}
 803465c:	7fefffff 	.word	0x7fefffff
 8034660:	7ff00000 	.word	0x7ff00000
 8034664:	43500000 	.word	0x43500000

08034668 <__register_exitproc>:
 8034668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803466c:	f8df a074 	ldr.w	sl, [pc, #116]	; 80346e4 <__register_exitproc+0x7c>
 8034670:	4606      	mov	r6, r0
 8034672:	f8da 0000 	ldr.w	r0, [sl]
 8034676:	4698      	mov	r8, r3
 8034678:	460f      	mov	r7, r1
 803467a:	4691      	mov	r9, r2
 803467c:	f7fd f94a 	bl	8031914 <__retarget_lock_acquire_recursive>
 8034680:	4b16      	ldr	r3, [pc, #88]	; (80346dc <__register_exitproc+0x74>)
 8034682:	681c      	ldr	r4, [r3, #0]
 8034684:	b90c      	cbnz	r4, 803468a <__register_exitproc+0x22>
 8034686:	4c16      	ldr	r4, [pc, #88]	; (80346e0 <__register_exitproc+0x78>)
 8034688:	601c      	str	r4, [r3, #0]
 803468a:	6865      	ldr	r5, [r4, #4]
 803468c:	f8da 0000 	ldr.w	r0, [sl]
 8034690:	2d1f      	cmp	r5, #31
 8034692:	dd05      	ble.n	80346a0 <__register_exitproc+0x38>
 8034694:	f7fd f93f 	bl	8031916 <__retarget_lock_release_recursive>
 8034698:	f04f 30ff 	mov.w	r0, #4294967295
 803469c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80346a0:	b19e      	cbz	r6, 80346ca <__register_exitproc+0x62>
 80346a2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80346a6:	2201      	movs	r2, #1
 80346a8:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80346ac:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80346b0:	40aa      	lsls	r2, r5
 80346b2:	4313      	orrs	r3, r2
 80346b4:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80346b8:	2e02      	cmp	r6, #2
 80346ba:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80346be:	bf02      	ittt	eq
 80346c0:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80346c4:	4313      	orreq	r3, r2
 80346c6:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 80346ca:	1c6b      	adds	r3, r5, #1
 80346cc:	3502      	adds	r5, #2
 80346ce:	6063      	str	r3, [r4, #4]
 80346d0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80346d4:	f7fd f91f 	bl	8031916 <__retarget_lock_release_recursive>
 80346d8:	2000      	movs	r0, #0
 80346da:	e7df      	b.n	803469c <__register_exitproc+0x34>
 80346dc:	20008bec 	.word	0x20008bec
 80346e0:	20008c24 	.word	0x20008c24
 80346e4:	200003ac 	.word	0x200003ac

080346e8 <quorem>:
 80346e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80346ec:	6903      	ldr	r3, [r0, #16]
 80346ee:	690c      	ldr	r4, [r1, #16]
 80346f0:	42a3      	cmp	r3, r4
 80346f2:	4607      	mov	r7, r0
 80346f4:	db7e      	blt.n	80347f4 <quorem+0x10c>
 80346f6:	3c01      	subs	r4, #1
 80346f8:	f101 0814 	add.w	r8, r1, #20
 80346fc:	f100 0514 	add.w	r5, r0, #20
 8034700:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8034704:	9301      	str	r3, [sp, #4]
 8034706:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 803470a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803470e:	3301      	adds	r3, #1
 8034710:	429a      	cmp	r2, r3
 8034712:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8034716:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 803471a:	fbb2 f6f3 	udiv	r6, r2, r3
 803471e:	d331      	bcc.n	8034784 <quorem+0x9c>
 8034720:	f04f 0e00 	mov.w	lr, #0
 8034724:	4640      	mov	r0, r8
 8034726:	46ac      	mov	ip, r5
 8034728:	46f2      	mov	sl, lr
 803472a:	f850 2b04 	ldr.w	r2, [r0], #4
 803472e:	b293      	uxth	r3, r2
 8034730:	fb06 e303 	mla	r3, r6, r3, lr
 8034734:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8034738:	0c1a      	lsrs	r2, r3, #16
 803473a:	b29b      	uxth	r3, r3
 803473c:	ebaa 0303 	sub.w	r3, sl, r3
 8034740:	f8dc a000 	ldr.w	sl, [ip]
 8034744:	fa13 f38a 	uxtah	r3, r3, sl
 8034748:	fb06 220e 	mla	r2, r6, lr, r2
 803474c:	9300      	str	r3, [sp, #0]
 803474e:	9b00      	ldr	r3, [sp, #0]
 8034750:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8034754:	b292      	uxth	r2, r2
 8034756:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 803475a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 803475e:	f8bd 3000 	ldrh.w	r3, [sp]
 8034762:	4581      	cmp	r9, r0
 8034764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8034768:	f84c 3b04 	str.w	r3, [ip], #4
 803476c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8034770:	d2db      	bcs.n	803472a <quorem+0x42>
 8034772:	f855 300b 	ldr.w	r3, [r5, fp]
 8034776:	b92b      	cbnz	r3, 8034784 <quorem+0x9c>
 8034778:	9b01      	ldr	r3, [sp, #4]
 803477a:	3b04      	subs	r3, #4
 803477c:	429d      	cmp	r5, r3
 803477e:	461a      	mov	r2, r3
 8034780:	d32c      	bcc.n	80347dc <quorem+0xf4>
 8034782:	613c      	str	r4, [r7, #16]
 8034784:	4638      	mov	r0, r7
 8034786:	f001 f84d 	bl	8035824 <__mcmp>
 803478a:	2800      	cmp	r0, #0
 803478c:	db22      	blt.n	80347d4 <quorem+0xec>
 803478e:	3601      	adds	r6, #1
 8034790:	4629      	mov	r1, r5
 8034792:	2000      	movs	r0, #0
 8034794:	f858 2b04 	ldr.w	r2, [r8], #4
 8034798:	f8d1 c000 	ldr.w	ip, [r1]
 803479c:	b293      	uxth	r3, r2
 803479e:	1ac3      	subs	r3, r0, r3
 80347a0:	0c12      	lsrs	r2, r2, #16
 80347a2:	fa13 f38c 	uxtah	r3, r3, ip
 80347a6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80347aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80347ae:	b29b      	uxth	r3, r3
 80347b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80347b4:	45c1      	cmp	r9, r8
 80347b6:	f841 3b04 	str.w	r3, [r1], #4
 80347ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80347be:	d2e9      	bcs.n	8034794 <quorem+0xac>
 80347c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80347c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80347c8:	b922      	cbnz	r2, 80347d4 <quorem+0xec>
 80347ca:	3b04      	subs	r3, #4
 80347cc:	429d      	cmp	r5, r3
 80347ce:	461a      	mov	r2, r3
 80347d0:	d30a      	bcc.n	80347e8 <quorem+0x100>
 80347d2:	613c      	str	r4, [r7, #16]
 80347d4:	4630      	mov	r0, r6
 80347d6:	b003      	add	sp, #12
 80347d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80347dc:	6812      	ldr	r2, [r2, #0]
 80347de:	3b04      	subs	r3, #4
 80347e0:	2a00      	cmp	r2, #0
 80347e2:	d1ce      	bne.n	8034782 <quorem+0x9a>
 80347e4:	3c01      	subs	r4, #1
 80347e6:	e7c9      	b.n	803477c <quorem+0x94>
 80347e8:	6812      	ldr	r2, [r2, #0]
 80347ea:	3b04      	subs	r3, #4
 80347ec:	2a00      	cmp	r2, #0
 80347ee:	d1f0      	bne.n	80347d2 <quorem+0xea>
 80347f0:	3c01      	subs	r4, #1
 80347f2:	e7eb      	b.n	80347cc <quorem+0xe4>
 80347f4:	2000      	movs	r0, #0
 80347f6:	e7ee      	b.n	80347d6 <quorem+0xee>

080347f8 <_dtoa_r>:
 80347f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80347fc:	ed2d 8b04 	vpush	{d8-d9}
 8034800:	b093      	sub	sp, #76	; 0x4c
 8034802:	ed8d 0b02 	vstr	d0, [sp, #8]
 8034806:	9107      	str	r1, [sp, #28]
 8034808:	6b81      	ldr	r1, [r0, #56]	; 0x38
 803480a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 803480c:	920a      	str	r2, [sp, #40]	; 0x28
 803480e:	ec57 6b10 	vmov	r6, r7, d0
 8034812:	4604      	mov	r4, r0
 8034814:	930d      	str	r3, [sp, #52]	; 0x34
 8034816:	b141      	cbz	r1, 803482a <_dtoa_r+0x32>
 8034818:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 803481a:	604a      	str	r2, [r1, #4]
 803481c:	2301      	movs	r3, #1
 803481e:	4093      	lsls	r3, r2
 8034820:	608b      	str	r3, [r1, #8]
 8034822:	f000 fdf6 	bl	8035412 <_Bfree>
 8034826:	2300      	movs	r3, #0
 8034828:	63a3      	str	r3, [r4, #56]	; 0x38
 803482a:	1e3b      	subs	r3, r7, #0
 803482c:	bfb9      	ittee	lt
 803482e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8034832:	9303      	strlt	r3, [sp, #12]
 8034834:	2300      	movge	r3, #0
 8034836:	602b      	strge	r3, [r5, #0]
 8034838:	f8dd 800c 	ldr.w	r8, [sp, #12]
 803483c:	4ba2      	ldr	r3, [pc, #648]	; (8034ac8 <_dtoa_r+0x2d0>)
 803483e:	bfbc      	itt	lt
 8034840:	2201      	movlt	r2, #1
 8034842:	602a      	strlt	r2, [r5, #0]
 8034844:	ea33 0308 	bics.w	r3, r3, r8
 8034848:	d11b      	bne.n	8034882 <_dtoa_r+0x8a>
 803484a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 803484c:	f242 730f 	movw	r3, #9999	; 0x270f
 8034850:	6013      	str	r3, [r2, #0]
 8034852:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8034856:	4333      	orrs	r3, r6
 8034858:	f000 858f 	beq.w	803537a <_dtoa_r+0xb82>
 803485c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803485e:	b90b      	cbnz	r3, 8034864 <_dtoa_r+0x6c>
 8034860:	4b9a      	ldr	r3, [pc, #616]	; (8034acc <_dtoa_r+0x2d4>)
 8034862:	e027      	b.n	80348b4 <_dtoa_r+0xbc>
 8034864:	4b99      	ldr	r3, [pc, #612]	; (8034acc <_dtoa_r+0x2d4>)
 8034866:	9300      	str	r3, [sp, #0]
 8034868:	3303      	adds	r3, #3
 803486a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 803486c:	6013      	str	r3, [r2, #0]
 803486e:	9800      	ldr	r0, [sp, #0]
 8034870:	b013      	add	sp, #76	; 0x4c
 8034872:	ecbd 8b04 	vpop	{d8-d9}
 8034876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803487a:	4b95      	ldr	r3, [pc, #596]	; (8034ad0 <_dtoa_r+0x2d8>)
 803487c:	9300      	str	r3, [sp, #0]
 803487e:	3308      	adds	r3, #8
 8034880:	e7f3      	b.n	803486a <_dtoa_r+0x72>
 8034882:	ed9d 7b02 	vldr	d7, [sp, #8]
 8034886:	2200      	movs	r2, #0
 8034888:	ec51 0b17 	vmov	r0, r1, d7
 803488c:	eeb0 8a47 	vmov.f32	s16, s14
 8034890:	eef0 8a67 	vmov.f32	s17, s15
 8034894:	2300      	movs	r3, #0
 8034896:	f7ee f917 	bl	8022ac8 <__aeabi_dcmpeq>
 803489a:	4681      	mov	r9, r0
 803489c:	b160      	cbz	r0, 80348b8 <_dtoa_r+0xc0>
 803489e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80348a0:	2301      	movs	r3, #1
 80348a2:	6013      	str	r3, [r2, #0]
 80348a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80348a6:	2b00      	cmp	r3, #0
 80348a8:	f000 8564 	beq.w	8035374 <_dtoa_r+0xb7c>
 80348ac:	4b89      	ldr	r3, [pc, #548]	; (8034ad4 <_dtoa_r+0x2dc>)
 80348ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80348b0:	6013      	str	r3, [r2, #0]
 80348b2:	3b01      	subs	r3, #1
 80348b4:	9300      	str	r3, [sp, #0]
 80348b6:	e7da      	b.n	803486e <_dtoa_r+0x76>
 80348b8:	aa10      	add	r2, sp, #64	; 0x40
 80348ba:	a911      	add	r1, sp, #68	; 0x44
 80348bc:	4620      	mov	r0, r4
 80348be:	eeb0 0a48 	vmov.f32	s0, s16
 80348c2:	eef0 0a68 	vmov.f32	s1, s17
 80348c6:	f001 f853 	bl	8035970 <__d2b>
 80348ca:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80348ce:	4682      	mov	sl, r0
 80348d0:	2d00      	cmp	r5, #0
 80348d2:	d07e      	beq.n	80349d2 <_dtoa_r+0x1da>
 80348d4:	ee18 3a90 	vmov	r3, s17
 80348d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80348dc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80348e0:	ec51 0b18 	vmov	r0, r1, d8
 80348e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80348e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80348ec:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80348f0:	4619      	mov	r1, r3
 80348f2:	2200      	movs	r2, #0
 80348f4:	4b78      	ldr	r3, [pc, #480]	; (8034ad8 <_dtoa_r+0x2e0>)
 80348f6:	f7ed fcc7 	bl	8022288 <__aeabi_dsub>
 80348fa:	a36d      	add	r3, pc, #436	; (adr r3, 8034ab0 <_dtoa_r+0x2b8>)
 80348fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034900:	f7ed fe7a 	bl	80225f8 <__aeabi_dmul>
 8034904:	a36c      	add	r3, pc, #432	; (adr r3, 8034ab8 <_dtoa_r+0x2c0>)
 8034906:	e9d3 2300 	ldrd	r2, r3, [r3]
 803490a:	f7ed fcbf 	bl	802228c <__adddf3>
 803490e:	4606      	mov	r6, r0
 8034910:	4628      	mov	r0, r5
 8034912:	460f      	mov	r7, r1
 8034914:	f7ed fe06 	bl	8022524 <__aeabi_i2d>
 8034918:	a369      	add	r3, pc, #420	; (adr r3, 8034ac0 <_dtoa_r+0x2c8>)
 803491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803491e:	f7ed fe6b 	bl	80225f8 <__aeabi_dmul>
 8034922:	4602      	mov	r2, r0
 8034924:	460b      	mov	r3, r1
 8034926:	4630      	mov	r0, r6
 8034928:	4639      	mov	r1, r7
 803492a:	f7ed fcaf 	bl	802228c <__adddf3>
 803492e:	4606      	mov	r6, r0
 8034930:	460f      	mov	r7, r1
 8034932:	f7ee f911 	bl	8022b58 <__aeabi_d2iz>
 8034936:	2200      	movs	r2, #0
 8034938:	4683      	mov	fp, r0
 803493a:	2300      	movs	r3, #0
 803493c:	4630      	mov	r0, r6
 803493e:	4639      	mov	r1, r7
 8034940:	f7ee f8cc 	bl	8022adc <__aeabi_dcmplt>
 8034944:	b148      	cbz	r0, 803495a <_dtoa_r+0x162>
 8034946:	4658      	mov	r0, fp
 8034948:	f7ed fdec 	bl	8022524 <__aeabi_i2d>
 803494c:	4632      	mov	r2, r6
 803494e:	463b      	mov	r3, r7
 8034950:	f7ee f8ba 	bl	8022ac8 <__aeabi_dcmpeq>
 8034954:	b908      	cbnz	r0, 803495a <_dtoa_r+0x162>
 8034956:	f10b 3bff 	add.w	fp, fp, #4294967295
 803495a:	f1bb 0f16 	cmp.w	fp, #22
 803495e:	d856      	bhi.n	8034a0e <_dtoa_r+0x216>
 8034960:	4b5e      	ldr	r3, [pc, #376]	; (8034adc <_dtoa_r+0x2e4>)
 8034962:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8034966:	e9d3 2300 	ldrd	r2, r3, [r3]
 803496a:	ec51 0b18 	vmov	r0, r1, d8
 803496e:	f7ee f8b5 	bl	8022adc <__aeabi_dcmplt>
 8034972:	2800      	cmp	r0, #0
 8034974:	d04d      	beq.n	8034a12 <_dtoa_r+0x21a>
 8034976:	f10b 3bff 	add.w	fp, fp, #4294967295
 803497a:	2300      	movs	r3, #0
 803497c:	930c      	str	r3, [sp, #48]	; 0x30
 803497e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8034980:	1b5b      	subs	r3, r3, r5
 8034982:	1e5a      	subs	r2, r3, #1
 8034984:	bf45      	ittet	mi
 8034986:	f1c3 0301 	rsbmi	r3, r3, #1
 803498a:	9305      	strmi	r3, [sp, #20]
 803498c:	2300      	movpl	r3, #0
 803498e:	2300      	movmi	r3, #0
 8034990:	9206      	str	r2, [sp, #24]
 8034992:	bf54      	ite	pl
 8034994:	9305      	strpl	r3, [sp, #20]
 8034996:	9306      	strmi	r3, [sp, #24]
 8034998:	f1bb 0f00 	cmp.w	fp, #0
 803499c:	db3b      	blt.n	8034a16 <_dtoa_r+0x21e>
 803499e:	9b06      	ldr	r3, [sp, #24]
 80349a0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80349a4:	445b      	add	r3, fp
 80349a6:	9306      	str	r3, [sp, #24]
 80349a8:	2300      	movs	r3, #0
 80349aa:	9308      	str	r3, [sp, #32]
 80349ac:	9b07      	ldr	r3, [sp, #28]
 80349ae:	2b09      	cmp	r3, #9
 80349b0:	d868      	bhi.n	8034a84 <_dtoa_r+0x28c>
 80349b2:	2b05      	cmp	r3, #5
 80349b4:	bfc4      	itt	gt
 80349b6:	3b04      	subgt	r3, #4
 80349b8:	9307      	strgt	r3, [sp, #28]
 80349ba:	9b07      	ldr	r3, [sp, #28]
 80349bc:	f1a3 0302 	sub.w	r3, r3, #2
 80349c0:	bfcc      	ite	gt
 80349c2:	2500      	movgt	r5, #0
 80349c4:	2501      	movle	r5, #1
 80349c6:	2b03      	cmp	r3, #3
 80349c8:	d867      	bhi.n	8034a9a <_dtoa_r+0x2a2>
 80349ca:	e8df f003 	tbb	[pc, r3]
 80349ce:	3b2e      	.short	0x3b2e
 80349d0:	5939      	.short	0x5939
 80349d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80349d6:	441d      	add	r5, r3
 80349d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80349dc:	2b20      	cmp	r3, #32
 80349de:	bfc1      	itttt	gt
 80349e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80349e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80349e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80349ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80349f0:	bfd6      	itet	le
 80349f2:	f1c3 0320 	rsble	r3, r3, #32
 80349f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80349fa:	fa06 f003 	lslle.w	r0, r6, r3
 80349fe:	f7ed fd81 	bl	8022504 <__aeabi_ui2d>
 8034a02:	2201      	movs	r2, #1
 8034a04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8034a08:	3d01      	subs	r5, #1
 8034a0a:	920e      	str	r2, [sp, #56]	; 0x38
 8034a0c:	e770      	b.n	80348f0 <_dtoa_r+0xf8>
 8034a0e:	2301      	movs	r3, #1
 8034a10:	e7b4      	b.n	803497c <_dtoa_r+0x184>
 8034a12:	900c      	str	r0, [sp, #48]	; 0x30
 8034a14:	e7b3      	b.n	803497e <_dtoa_r+0x186>
 8034a16:	9b05      	ldr	r3, [sp, #20]
 8034a18:	eba3 030b 	sub.w	r3, r3, fp
 8034a1c:	9305      	str	r3, [sp, #20]
 8034a1e:	f1cb 0300 	rsb	r3, fp, #0
 8034a22:	9308      	str	r3, [sp, #32]
 8034a24:	2300      	movs	r3, #0
 8034a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8034a28:	e7c0      	b.n	80349ac <_dtoa_r+0x1b4>
 8034a2a:	2300      	movs	r3, #0
 8034a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8034a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8034a30:	2b00      	cmp	r3, #0
 8034a32:	dc35      	bgt.n	8034aa0 <_dtoa_r+0x2a8>
 8034a34:	2301      	movs	r3, #1
 8034a36:	9301      	str	r3, [sp, #4]
 8034a38:	9304      	str	r3, [sp, #16]
 8034a3a:	461a      	mov	r2, r3
 8034a3c:	920a      	str	r2, [sp, #40]	; 0x28
 8034a3e:	e00b      	b.n	8034a58 <_dtoa_r+0x260>
 8034a40:	2301      	movs	r3, #1
 8034a42:	e7f3      	b.n	8034a2c <_dtoa_r+0x234>
 8034a44:	2300      	movs	r3, #0
 8034a46:	9309      	str	r3, [sp, #36]	; 0x24
 8034a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8034a4a:	445b      	add	r3, fp
 8034a4c:	9301      	str	r3, [sp, #4]
 8034a4e:	3301      	adds	r3, #1
 8034a50:	2b01      	cmp	r3, #1
 8034a52:	9304      	str	r3, [sp, #16]
 8034a54:	bfb8      	it	lt
 8034a56:	2301      	movlt	r3, #1
 8034a58:	2100      	movs	r1, #0
 8034a5a:	2204      	movs	r2, #4
 8034a5c:	f102 0014 	add.w	r0, r2, #20
 8034a60:	4298      	cmp	r0, r3
 8034a62:	d921      	bls.n	8034aa8 <_dtoa_r+0x2b0>
 8034a64:	63e1      	str	r1, [r4, #60]	; 0x3c
 8034a66:	4620      	mov	r0, r4
 8034a68:	f000 fcae 	bl	80353c8 <_Balloc>
 8034a6c:	9000      	str	r0, [sp, #0]
 8034a6e:	2800      	cmp	r0, #0
 8034a70:	d13a      	bne.n	8034ae8 <_dtoa_r+0x2f0>
 8034a72:	4b1b      	ldr	r3, [pc, #108]	; (8034ae0 <_dtoa_r+0x2e8>)
 8034a74:	4602      	mov	r2, r0
 8034a76:	f240 11af 	movw	r1, #431	; 0x1af
 8034a7a:	481a      	ldr	r0, [pc, #104]	; (8034ae4 <_dtoa_r+0x2ec>)
 8034a7c:	f001 fa6e 	bl	8035f5c <__assert_func>
 8034a80:	2301      	movs	r3, #1
 8034a82:	e7e0      	b.n	8034a46 <_dtoa_r+0x24e>
 8034a84:	2501      	movs	r5, #1
 8034a86:	2300      	movs	r3, #0
 8034a88:	9307      	str	r3, [sp, #28]
 8034a8a:	9509      	str	r5, [sp, #36]	; 0x24
 8034a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8034a90:	9301      	str	r3, [sp, #4]
 8034a92:	9304      	str	r3, [sp, #16]
 8034a94:	2200      	movs	r2, #0
 8034a96:	2312      	movs	r3, #18
 8034a98:	e7d0      	b.n	8034a3c <_dtoa_r+0x244>
 8034a9a:	2301      	movs	r3, #1
 8034a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8034a9e:	e7f5      	b.n	8034a8c <_dtoa_r+0x294>
 8034aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8034aa2:	9301      	str	r3, [sp, #4]
 8034aa4:	9304      	str	r3, [sp, #16]
 8034aa6:	e7d7      	b.n	8034a58 <_dtoa_r+0x260>
 8034aa8:	3101      	adds	r1, #1
 8034aaa:	0052      	lsls	r2, r2, #1
 8034aac:	e7d6      	b.n	8034a5c <_dtoa_r+0x264>
 8034aae:	bf00      	nop
 8034ab0:	636f4361 	.word	0x636f4361
 8034ab4:	3fd287a7 	.word	0x3fd287a7
 8034ab8:	8b60c8b3 	.word	0x8b60c8b3
 8034abc:	3fc68a28 	.word	0x3fc68a28
 8034ac0:	509f79fb 	.word	0x509f79fb
 8034ac4:	3fd34413 	.word	0x3fd34413
 8034ac8:	7ff00000 	.word	0x7ff00000
 8034acc:	08036e8b 	.word	0x08036e8b
 8034ad0:	08036e82 	.word	0x08036e82
 8034ad4:	08036e37 	.word	0x08036e37
 8034ad8:	3ff80000 	.word	0x3ff80000
 8034adc:	08036f80 	.word	0x08036f80
 8034ae0:	08036e8f 	.word	0x08036e8f
 8034ae4:	08036ea0 	.word	0x08036ea0
 8034ae8:	9b00      	ldr	r3, [sp, #0]
 8034aea:	63a3      	str	r3, [r4, #56]	; 0x38
 8034aec:	9b04      	ldr	r3, [sp, #16]
 8034aee:	2b0e      	cmp	r3, #14
 8034af0:	f200 80a8 	bhi.w	8034c44 <_dtoa_r+0x44c>
 8034af4:	2d00      	cmp	r5, #0
 8034af6:	f000 80a5 	beq.w	8034c44 <_dtoa_r+0x44c>
 8034afa:	f1bb 0f00 	cmp.w	fp, #0
 8034afe:	dd38      	ble.n	8034b72 <_dtoa_r+0x37a>
 8034b00:	4bbf      	ldr	r3, [pc, #764]	; (8034e00 <_dtoa_r+0x608>)
 8034b02:	f00b 020f 	and.w	r2, fp, #15
 8034b06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8034b0a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8034b0e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8034b12:	ea4f 182b 	mov.w	r8, fp, asr #4
 8034b16:	d019      	beq.n	8034b4c <_dtoa_r+0x354>
 8034b18:	4bba      	ldr	r3, [pc, #744]	; (8034e04 <_dtoa_r+0x60c>)
 8034b1a:	ec51 0b18 	vmov	r0, r1, d8
 8034b1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8034b22:	f7ed fe93 	bl	802284c <__aeabi_ddiv>
 8034b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8034b2a:	f008 080f 	and.w	r8, r8, #15
 8034b2e:	2503      	movs	r5, #3
 8034b30:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8034e04 <_dtoa_r+0x60c>
 8034b34:	f1b8 0f00 	cmp.w	r8, #0
 8034b38:	d10a      	bne.n	8034b50 <_dtoa_r+0x358>
 8034b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8034b3e:	4632      	mov	r2, r6
 8034b40:	463b      	mov	r3, r7
 8034b42:	f7ed fe83 	bl	802284c <__aeabi_ddiv>
 8034b46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8034b4a:	e02b      	b.n	8034ba4 <_dtoa_r+0x3ac>
 8034b4c:	2502      	movs	r5, #2
 8034b4e:	e7ef      	b.n	8034b30 <_dtoa_r+0x338>
 8034b50:	f018 0f01 	tst.w	r8, #1
 8034b54:	d008      	beq.n	8034b68 <_dtoa_r+0x370>
 8034b56:	4630      	mov	r0, r6
 8034b58:	4639      	mov	r1, r7
 8034b5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8034b5e:	f7ed fd4b 	bl	80225f8 <__aeabi_dmul>
 8034b62:	3501      	adds	r5, #1
 8034b64:	4606      	mov	r6, r0
 8034b66:	460f      	mov	r7, r1
 8034b68:	ea4f 0868 	mov.w	r8, r8, asr #1
 8034b6c:	f109 0908 	add.w	r9, r9, #8
 8034b70:	e7e0      	b.n	8034b34 <_dtoa_r+0x33c>
 8034b72:	f000 809f 	beq.w	8034cb4 <_dtoa_r+0x4bc>
 8034b76:	f1cb 0600 	rsb	r6, fp, #0
 8034b7a:	4ba1      	ldr	r3, [pc, #644]	; (8034e00 <_dtoa_r+0x608>)
 8034b7c:	4fa1      	ldr	r7, [pc, #644]	; (8034e04 <_dtoa_r+0x60c>)
 8034b7e:	f006 020f 	and.w	r2, r6, #15
 8034b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8034b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034b8a:	ec51 0b18 	vmov	r0, r1, d8
 8034b8e:	f7ed fd33 	bl	80225f8 <__aeabi_dmul>
 8034b92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8034b96:	1136      	asrs	r6, r6, #4
 8034b98:	2300      	movs	r3, #0
 8034b9a:	2502      	movs	r5, #2
 8034b9c:	2e00      	cmp	r6, #0
 8034b9e:	d17e      	bne.n	8034c9e <_dtoa_r+0x4a6>
 8034ba0:	2b00      	cmp	r3, #0
 8034ba2:	d1d0      	bne.n	8034b46 <_dtoa_r+0x34e>
 8034ba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8034ba6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8034baa:	2b00      	cmp	r3, #0
 8034bac:	f000 8084 	beq.w	8034cb8 <_dtoa_r+0x4c0>
 8034bb0:	4b95      	ldr	r3, [pc, #596]	; (8034e08 <_dtoa_r+0x610>)
 8034bb2:	2200      	movs	r2, #0
 8034bb4:	4640      	mov	r0, r8
 8034bb6:	4649      	mov	r1, r9
 8034bb8:	f7ed ff90 	bl	8022adc <__aeabi_dcmplt>
 8034bbc:	2800      	cmp	r0, #0
 8034bbe:	d07b      	beq.n	8034cb8 <_dtoa_r+0x4c0>
 8034bc0:	9b04      	ldr	r3, [sp, #16]
 8034bc2:	2b00      	cmp	r3, #0
 8034bc4:	d078      	beq.n	8034cb8 <_dtoa_r+0x4c0>
 8034bc6:	9b01      	ldr	r3, [sp, #4]
 8034bc8:	2b00      	cmp	r3, #0
 8034bca:	dd39      	ble.n	8034c40 <_dtoa_r+0x448>
 8034bcc:	4b8f      	ldr	r3, [pc, #572]	; (8034e0c <_dtoa_r+0x614>)
 8034bce:	2200      	movs	r2, #0
 8034bd0:	4640      	mov	r0, r8
 8034bd2:	4649      	mov	r1, r9
 8034bd4:	f7ed fd10 	bl	80225f8 <__aeabi_dmul>
 8034bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8034bdc:	9e01      	ldr	r6, [sp, #4]
 8034bde:	f10b 37ff 	add.w	r7, fp, #4294967295
 8034be2:	3501      	adds	r5, #1
 8034be4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8034be8:	4628      	mov	r0, r5
 8034bea:	f7ed fc9b 	bl	8022524 <__aeabi_i2d>
 8034bee:	4642      	mov	r2, r8
 8034bf0:	464b      	mov	r3, r9
 8034bf2:	f7ed fd01 	bl	80225f8 <__aeabi_dmul>
 8034bf6:	4b86      	ldr	r3, [pc, #536]	; (8034e10 <_dtoa_r+0x618>)
 8034bf8:	2200      	movs	r2, #0
 8034bfa:	f7ed fb47 	bl	802228c <__adddf3>
 8034bfe:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8034c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8034c06:	9303      	str	r3, [sp, #12]
 8034c08:	2e00      	cmp	r6, #0
 8034c0a:	d158      	bne.n	8034cbe <_dtoa_r+0x4c6>
 8034c0c:	4b81      	ldr	r3, [pc, #516]	; (8034e14 <_dtoa_r+0x61c>)
 8034c0e:	2200      	movs	r2, #0
 8034c10:	4640      	mov	r0, r8
 8034c12:	4649      	mov	r1, r9
 8034c14:	f7ed fb38 	bl	8022288 <__aeabi_dsub>
 8034c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8034c1c:	4680      	mov	r8, r0
 8034c1e:	4689      	mov	r9, r1
 8034c20:	f7ed ff7a 	bl	8022b18 <__aeabi_dcmpgt>
 8034c24:	2800      	cmp	r0, #0
 8034c26:	f040 8295 	bne.w	8035154 <_dtoa_r+0x95c>
 8034c2a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8034c2e:	4640      	mov	r0, r8
 8034c30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8034c34:	4649      	mov	r1, r9
 8034c36:	f7ed ff51 	bl	8022adc <__aeabi_dcmplt>
 8034c3a:	2800      	cmp	r0, #0
 8034c3c:	f040 8288 	bne.w	8035150 <_dtoa_r+0x958>
 8034c40:	ed8d 8b02 	vstr	d8, [sp, #8]
 8034c44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8034c46:	2b00      	cmp	r3, #0
 8034c48:	f2c0 814d 	blt.w	8034ee6 <_dtoa_r+0x6ee>
 8034c4c:	f1bb 0f0e 	cmp.w	fp, #14
 8034c50:	f300 8149 	bgt.w	8034ee6 <_dtoa_r+0x6ee>
 8034c54:	4b6a      	ldr	r3, [pc, #424]	; (8034e00 <_dtoa_r+0x608>)
 8034c56:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8034c5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8034c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8034c60:	2b00      	cmp	r3, #0
 8034c62:	f280 80db 	bge.w	8034e1c <_dtoa_r+0x624>
 8034c66:	9b04      	ldr	r3, [sp, #16]
 8034c68:	2b00      	cmp	r3, #0
 8034c6a:	f300 80d7 	bgt.w	8034e1c <_dtoa_r+0x624>
 8034c6e:	f040 826e 	bne.w	803514e <_dtoa_r+0x956>
 8034c72:	4b68      	ldr	r3, [pc, #416]	; (8034e14 <_dtoa_r+0x61c>)
 8034c74:	2200      	movs	r2, #0
 8034c76:	4640      	mov	r0, r8
 8034c78:	4649      	mov	r1, r9
 8034c7a:	f7ed fcbd 	bl	80225f8 <__aeabi_dmul>
 8034c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8034c82:	f7ed ff3f 	bl	8022b04 <__aeabi_dcmpge>
 8034c86:	9e04      	ldr	r6, [sp, #16]
 8034c88:	4637      	mov	r7, r6
 8034c8a:	2800      	cmp	r0, #0
 8034c8c:	f040 8244 	bne.w	8035118 <_dtoa_r+0x920>
 8034c90:	9d00      	ldr	r5, [sp, #0]
 8034c92:	2331      	movs	r3, #49	; 0x31
 8034c94:	f805 3b01 	strb.w	r3, [r5], #1
 8034c98:	f10b 0b01 	add.w	fp, fp, #1
 8034c9c:	e240      	b.n	8035120 <_dtoa_r+0x928>
 8034c9e:	07f2      	lsls	r2, r6, #31
 8034ca0:	d505      	bpl.n	8034cae <_dtoa_r+0x4b6>
 8034ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8034ca6:	f7ed fca7 	bl	80225f8 <__aeabi_dmul>
 8034caa:	3501      	adds	r5, #1
 8034cac:	2301      	movs	r3, #1
 8034cae:	1076      	asrs	r6, r6, #1
 8034cb0:	3708      	adds	r7, #8
 8034cb2:	e773      	b.n	8034b9c <_dtoa_r+0x3a4>
 8034cb4:	2502      	movs	r5, #2
 8034cb6:	e775      	b.n	8034ba4 <_dtoa_r+0x3ac>
 8034cb8:	9e04      	ldr	r6, [sp, #16]
 8034cba:	465f      	mov	r7, fp
 8034cbc:	e792      	b.n	8034be4 <_dtoa_r+0x3ec>
 8034cbe:	9900      	ldr	r1, [sp, #0]
 8034cc0:	4b4f      	ldr	r3, [pc, #316]	; (8034e00 <_dtoa_r+0x608>)
 8034cc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8034cc6:	4431      	add	r1, r6
 8034cc8:	9102      	str	r1, [sp, #8]
 8034cca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8034ccc:	eeb0 9a47 	vmov.f32	s18, s14
 8034cd0:	eef0 9a67 	vmov.f32	s19, s15
 8034cd4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8034cd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8034cdc:	2900      	cmp	r1, #0
 8034cde:	d044      	beq.n	8034d6a <_dtoa_r+0x572>
 8034ce0:	494d      	ldr	r1, [pc, #308]	; (8034e18 <_dtoa_r+0x620>)
 8034ce2:	2000      	movs	r0, #0
 8034ce4:	f7ed fdb2 	bl	802284c <__aeabi_ddiv>
 8034ce8:	ec53 2b19 	vmov	r2, r3, d9
 8034cec:	f7ed facc 	bl	8022288 <__aeabi_dsub>
 8034cf0:	9d00      	ldr	r5, [sp, #0]
 8034cf2:	ec41 0b19 	vmov	d9, r0, r1
 8034cf6:	4649      	mov	r1, r9
 8034cf8:	4640      	mov	r0, r8
 8034cfa:	f7ed ff2d 	bl	8022b58 <__aeabi_d2iz>
 8034cfe:	4606      	mov	r6, r0
 8034d00:	f7ed fc10 	bl	8022524 <__aeabi_i2d>
 8034d04:	4602      	mov	r2, r0
 8034d06:	460b      	mov	r3, r1
 8034d08:	4640      	mov	r0, r8
 8034d0a:	4649      	mov	r1, r9
 8034d0c:	f7ed fabc 	bl	8022288 <__aeabi_dsub>
 8034d10:	3630      	adds	r6, #48	; 0x30
 8034d12:	f805 6b01 	strb.w	r6, [r5], #1
 8034d16:	ec53 2b19 	vmov	r2, r3, d9
 8034d1a:	4680      	mov	r8, r0
 8034d1c:	4689      	mov	r9, r1
 8034d1e:	f7ed fedd 	bl	8022adc <__aeabi_dcmplt>
 8034d22:	2800      	cmp	r0, #0
 8034d24:	d164      	bne.n	8034df0 <_dtoa_r+0x5f8>
 8034d26:	4642      	mov	r2, r8
 8034d28:	464b      	mov	r3, r9
 8034d2a:	4937      	ldr	r1, [pc, #220]	; (8034e08 <_dtoa_r+0x610>)
 8034d2c:	2000      	movs	r0, #0
 8034d2e:	f7ed faab 	bl	8022288 <__aeabi_dsub>
 8034d32:	ec53 2b19 	vmov	r2, r3, d9
 8034d36:	f7ed fed1 	bl	8022adc <__aeabi_dcmplt>
 8034d3a:	2800      	cmp	r0, #0
 8034d3c:	f040 80b5 	bne.w	8034eaa <_dtoa_r+0x6b2>
 8034d40:	9b02      	ldr	r3, [sp, #8]
 8034d42:	429d      	cmp	r5, r3
 8034d44:	f43f af7c 	beq.w	8034c40 <_dtoa_r+0x448>
 8034d48:	4b30      	ldr	r3, [pc, #192]	; (8034e0c <_dtoa_r+0x614>)
 8034d4a:	ec51 0b19 	vmov	r0, r1, d9
 8034d4e:	2200      	movs	r2, #0
 8034d50:	f7ed fc52 	bl	80225f8 <__aeabi_dmul>
 8034d54:	4b2d      	ldr	r3, [pc, #180]	; (8034e0c <_dtoa_r+0x614>)
 8034d56:	ec41 0b19 	vmov	d9, r0, r1
 8034d5a:	2200      	movs	r2, #0
 8034d5c:	4640      	mov	r0, r8
 8034d5e:	4649      	mov	r1, r9
 8034d60:	f7ed fc4a 	bl	80225f8 <__aeabi_dmul>
 8034d64:	4680      	mov	r8, r0
 8034d66:	4689      	mov	r9, r1
 8034d68:	e7c5      	b.n	8034cf6 <_dtoa_r+0x4fe>
 8034d6a:	ec51 0b17 	vmov	r0, r1, d7
 8034d6e:	f7ed fc43 	bl	80225f8 <__aeabi_dmul>
 8034d72:	9b02      	ldr	r3, [sp, #8]
 8034d74:	9d00      	ldr	r5, [sp, #0]
 8034d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8034d78:	ec41 0b19 	vmov	d9, r0, r1
 8034d7c:	4649      	mov	r1, r9
 8034d7e:	4640      	mov	r0, r8
 8034d80:	f7ed feea 	bl	8022b58 <__aeabi_d2iz>
 8034d84:	4606      	mov	r6, r0
 8034d86:	f7ed fbcd 	bl	8022524 <__aeabi_i2d>
 8034d8a:	3630      	adds	r6, #48	; 0x30
 8034d8c:	4602      	mov	r2, r0
 8034d8e:	460b      	mov	r3, r1
 8034d90:	4640      	mov	r0, r8
 8034d92:	4649      	mov	r1, r9
 8034d94:	f7ed fa78 	bl	8022288 <__aeabi_dsub>
 8034d98:	f805 6b01 	strb.w	r6, [r5], #1
 8034d9c:	9b02      	ldr	r3, [sp, #8]
 8034d9e:	429d      	cmp	r5, r3
 8034da0:	4680      	mov	r8, r0
 8034da2:	4689      	mov	r9, r1
 8034da4:	f04f 0200 	mov.w	r2, #0
 8034da8:	d124      	bne.n	8034df4 <_dtoa_r+0x5fc>
 8034daa:	4b1b      	ldr	r3, [pc, #108]	; (8034e18 <_dtoa_r+0x620>)
 8034dac:	ec51 0b19 	vmov	r0, r1, d9
 8034db0:	f7ed fa6c 	bl	802228c <__adddf3>
 8034db4:	4602      	mov	r2, r0
 8034db6:	460b      	mov	r3, r1
 8034db8:	4640      	mov	r0, r8
 8034dba:	4649      	mov	r1, r9
 8034dbc:	f7ed feac 	bl	8022b18 <__aeabi_dcmpgt>
 8034dc0:	2800      	cmp	r0, #0
 8034dc2:	d172      	bne.n	8034eaa <_dtoa_r+0x6b2>
 8034dc4:	ec53 2b19 	vmov	r2, r3, d9
 8034dc8:	4913      	ldr	r1, [pc, #76]	; (8034e18 <_dtoa_r+0x620>)
 8034dca:	2000      	movs	r0, #0
 8034dcc:	f7ed fa5c 	bl	8022288 <__aeabi_dsub>
 8034dd0:	4602      	mov	r2, r0
 8034dd2:	460b      	mov	r3, r1
 8034dd4:	4640      	mov	r0, r8
 8034dd6:	4649      	mov	r1, r9
 8034dd8:	f7ed fe80 	bl	8022adc <__aeabi_dcmplt>
 8034ddc:	2800      	cmp	r0, #0
 8034dde:	f43f af2f 	beq.w	8034c40 <_dtoa_r+0x448>
 8034de2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8034de4:	1e6b      	subs	r3, r5, #1
 8034de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8034de8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8034dec:	2b30      	cmp	r3, #48	; 0x30
 8034dee:	d0f8      	beq.n	8034de2 <_dtoa_r+0x5ea>
 8034df0:	46bb      	mov	fp, r7
 8034df2:	e049      	b.n	8034e88 <_dtoa_r+0x690>
 8034df4:	4b05      	ldr	r3, [pc, #20]	; (8034e0c <_dtoa_r+0x614>)
 8034df6:	f7ed fbff 	bl	80225f8 <__aeabi_dmul>
 8034dfa:	4680      	mov	r8, r0
 8034dfc:	4689      	mov	r9, r1
 8034dfe:	e7bd      	b.n	8034d7c <_dtoa_r+0x584>
 8034e00:	08036f80 	.word	0x08036f80
 8034e04:	08036f58 	.word	0x08036f58
 8034e08:	3ff00000 	.word	0x3ff00000
 8034e0c:	40240000 	.word	0x40240000
 8034e10:	401c0000 	.word	0x401c0000
 8034e14:	40140000 	.word	0x40140000
 8034e18:	3fe00000 	.word	0x3fe00000
 8034e1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8034e20:	9d00      	ldr	r5, [sp, #0]
 8034e22:	4642      	mov	r2, r8
 8034e24:	464b      	mov	r3, r9
 8034e26:	4630      	mov	r0, r6
 8034e28:	4639      	mov	r1, r7
 8034e2a:	f7ed fd0f 	bl	802284c <__aeabi_ddiv>
 8034e2e:	f7ed fe93 	bl	8022b58 <__aeabi_d2iz>
 8034e32:	9001      	str	r0, [sp, #4]
 8034e34:	f7ed fb76 	bl	8022524 <__aeabi_i2d>
 8034e38:	4642      	mov	r2, r8
 8034e3a:	464b      	mov	r3, r9
 8034e3c:	f7ed fbdc 	bl	80225f8 <__aeabi_dmul>
 8034e40:	4602      	mov	r2, r0
 8034e42:	460b      	mov	r3, r1
 8034e44:	4630      	mov	r0, r6
 8034e46:	4639      	mov	r1, r7
 8034e48:	f7ed fa1e 	bl	8022288 <__aeabi_dsub>
 8034e4c:	9e01      	ldr	r6, [sp, #4]
 8034e4e:	9f04      	ldr	r7, [sp, #16]
 8034e50:	3630      	adds	r6, #48	; 0x30
 8034e52:	f805 6b01 	strb.w	r6, [r5], #1
 8034e56:	9e00      	ldr	r6, [sp, #0]
 8034e58:	1bae      	subs	r6, r5, r6
 8034e5a:	42b7      	cmp	r7, r6
 8034e5c:	4602      	mov	r2, r0
 8034e5e:	460b      	mov	r3, r1
 8034e60:	d134      	bne.n	8034ecc <_dtoa_r+0x6d4>
 8034e62:	f7ed fa13 	bl	802228c <__adddf3>
 8034e66:	4642      	mov	r2, r8
 8034e68:	464b      	mov	r3, r9
 8034e6a:	4606      	mov	r6, r0
 8034e6c:	460f      	mov	r7, r1
 8034e6e:	f7ed fe53 	bl	8022b18 <__aeabi_dcmpgt>
 8034e72:	b9c8      	cbnz	r0, 8034ea8 <_dtoa_r+0x6b0>
 8034e74:	4642      	mov	r2, r8
 8034e76:	464b      	mov	r3, r9
 8034e78:	4630      	mov	r0, r6
 8034e7a:	4639      	mov	r1, r7
 8034e7c:	f7ed fe24 	bl	8022ac8 <__aeabi_dcmpeq>
 8034e80:	b110      	cbz	r0, 8034e88 <_dtoa_r+0x690>
 8034e82:	9b01      	ldr	r3, [sp, #4]
 8034e84:	07db      	lsls	r3, r3, #31
 8034e86:	d40f      	bmi.n	8034ea8 <_dtoa_r+0x6b0>
 8034e88:	4651      	mov	r1, sl
 8034e8a:	4620      	mov	r0, r4
 8034e8c:	f000 fac1 	bl	8035412 <_Bfree>
 8034e90:	2300      	movs	r3, #0
 8034e92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8034e94:	702b      	strb	r3, [r5, #0]
 8034e96:	f10b 0301 	add.w	r3, fp, #1
 8034e9a:	6013      	str	r3, [r2, #0]
 8034e9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8034e9e:	2b00      	cmp	r3, #0
 8034ea0:	f43f ace5 	beq.w	803486e <_dtoa_r+0x76>
 8034ea4:	601d      	str	r5, [r3, #0]
 8034ea6:	e4e2      	b.n	803486e <_dtoa_r+0x76>
 8034ea8:	465f      	mov	r7, fp
 8034eaa:	462b      	mov	r3, r5
 8034eac:	461d      	mov	r5, r3
 8034eae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8034eb2:	2a39      	cmp	r2, #57	; 0x39
 8034eb4:	d106      	bne.n	8034ec4 <_dtoa_r+0x6cc>
 8034eb6:	9a00      	ldr	r2, [sp, #0]
 8034eb8:	429a      	cmp	r2, r3
 8034eba:	d1f7      	bne.n	8034eac <_dtoa_r+0x6b4>
 8034ebc:	9900      	ldr	r1, [sp, #0]
 8034ebe:	2230      	movs	r2, #48	; 0x30
 8034ec0:	3701      	adds	r7, #1
 8034ec2:	700a      	strb	r2, [r1, #0]
 8034ec4:	781a      	ldrb	r2, [r3, #0]
 8034ec6:	3201      	adds	r2, #1
 8034ec8:	701a      	strb	r2, [r3, #0]
 8034eca:	e791      	b.n	8034df0 <_dtoa_r+0x5f8>
 8034ecc:	4ba3      	ldr	r3, [pc, #652]	; (803515c <_dtoa_r+0x964>)
 8034ece:	2200      	movs	r2, #0
 8034ed0:	f7ed fb92 	bl	80225f8 <__aeabi_dmul>
 8034ed4:	2200      	movs	r2, #0
 8034ed6:	2300      	movs	r3, #0
 8034ed8:	4606      	mov	r6, r0
 8034eda:	460f      	mov	r7, r1
 8034edc:	f7ed fdf4 	bl	8022ac8 <__aeabi_dcmpeq>
 8034ee0:	2800      	cmp	r0, #0
 8034ee2:	d09e      	beq.n	8034e22 <_dtoa_r+0x62a>
 8034ee4:	e7d0      	b.n	8034e88 <_dtoa_r+0x690>
 8034ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8034ee8:	2a00      	cmp	r2, #0
 8034eea:	f000 80ca 	beq.w	8035082 <_dtoa_r+0x88a>
 8034eee:	9a07      	ldr	r2, [sp, #28]
 8034ef0:	2a01      	cmp	r2, #1
 8034ef2:	f300 80ad 	bgt.w	8035050 <_dtoa_r+0x858>
 8034ef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8034ef8:	2a00      	cmp	r2, #0
 8034efa:	f000 80a5 	beq.w	8035048 <_dtoa_r+0x850>
 8034efe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8034f02:	9e08      	ldr	r6, [sp, #32]
 8034f04:	9d05      	ldr	r5, [sp, #20]
 8034f06:	9a05      	ldr	r2, [sp, #20]
 8034f08:	441a      	add	r2, r3
 8034f0a:	9205      	str	r2, [sp, #20]
 8034f0c:	9a06      	ldr	r2, [sp, #24]
 8034f0e:	2101      	movs	r1, #1
 8034f10:	441a      	add	r2, r3
 8034f12:	4620      	mov	r0, r4
 8034f14:	9206      	str	r2, [sp, #24]
 8034f16:	f000 fb19 	bl	803554c <__i2b>
 8034f1a:	4607      	mov	r7, r0
 8034f1c:	b165      	cbz	r5, 8034f38 <_dtoa_r+0x740>
 8034f1e:	9b06      	ldr	r3, [sp, #24]
 8034f20:	2b00      	cmp	r3, #0
 8034f22:	dd09      	ble.n	8034f38 <_dtoa_r+0x740>
 8034f24:	42ab      	cmp	r3, r5
 8034f26:	9a05      	ldr	r2, [sp, #20]
 8034f28:	bfa8      	it	ge
 8034f2a:	462b      	movge	r3, r5
 8034f2c:	1ad2      	subs	r2, r2, r3
 8034f2e:	9205      	str	r2, [sp, #20]
 8034f30:	9a06      	ldr	r2, [sp, #24]
 8034f32:	1aed      	subs	r5, r5, r3
 8034f34:	1ad3      	subs	r3, r2, r3
 8034f36:	9306      	str	r3, [sp, #24]
 8034f38:	9b08      	ldr	r3, [sp, #32]
 8034f3a:	b1f3      	cbz	r3, 8034f7a <_dtoa_r+0x782>
 8034f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8034f3e:	2b00      	cmp	r3, #0
 8034f40:	f000 80a3 	beq.w	803508a <_dtoa_r+0x892>
 8034f44:	2e00      	cmp	r6, #0
 8034f46:	dd10      	ble.n	8034f6a <_dtoa_r+0x772>
 8034f48:	4639      	mov	r1, r7
 8034f4a:	4632      	mov	r2, r6
 8034f4c:	4620      	mov	r0, r4
 8034f4e:	f000 fbbd 	bl	80356cc <__pow5mult>
 8034f52:	4652      	mov	r2, sl
 8034f54:	4601      	mov	r1, r0
 8034f56:	4607      	mov	r7, r0
 8034f58:	4620      	mov	r0, r4
 8034f5a:	f000 fb0d 	bl	8035578 <__multiply>
 8034f5e:	4651      	mov	r1, sl
 8034f60:	4680      	mov	r8, r0
 8034f62:	4620      	mov	r0, r4
 8034f64:	f000 fa55 	bl	8035412 <_Bfree>
 8034f68:	46c2      	mov	sl, r8
 8034f6a:	9b08      	ldr	r3, [sp, #32]
 8034f6c:	1b9a      	subs	r2, r3, r6
 8034f6e:	d004      	beq.n	8034f7a <_dtoa_r+0x782>
 8034f70:	4651      	mov	r1, sl
 8034f72:	4620      	mov	r0, r4
 8034f74:	f000 fbaa 	bl	80356cc <__pow5mult>
 8034f78:	4682      	mov	sl, r0
 8034f7a:	2101      	movs	r1, #1
 8034f7c:	4620      	mov	r0, r4
 8034f7e:	f000 fae5 	bl	803554c <__i2b>
 8034f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8034f84:	2b00      	cmp	r3, #0
 8034f86:	4606      	mov	r6, r0
 8034f88:	f340 8081 	ble.w	803508e <_dtoa_r+0x896>
 8034f8c:	461a      	mov	r2, r3
 8034f8e:	4601      	mov	r1, r0
 8034f90:	4620      	mov	r0, r4
 8034f92:	f000 fb9b 	bl	80356cc <__pow5mult>
 8034f96:	9b07      	ldr	r3, [sp, #28]
 8034f98:	2b01      	cmp	r3, #1
 8034f9a:	4606      	mov	r6, r0
 8034f9c:	dd7a      	ble.n	8035094 <_dtoa_r+0x89c>
 8034f9e:	f04f 0800 	mov.w	r8, #0
 8034fa2:	6933      	ldr	r3, [r6, #16]
 8034fa4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8034fa8:	6918      	ldr	r0, [r3, #16]
 8034faa:	f000 fa81 	bl	80354b0 <__hi0bits>
 8034fae:	f1c0 0020 	rsb	r0, r0, #32
 8034fb2:	9b06      	ldr	r3, [sp, #24]
 8034fb4:	4418      	add	r0, r3
 8034fb6:	f010 001f 	ands.w	r0, r0, #31
 8034fba:	f000 8094 	beq.w	80350e6 <_dtoa_r+0x8ee>
 8034fbe:	f1c0 0320 	rsb	r3, r0, #32
 8034fc2:	2b04      	cmp	r3, #4
 8034fc4:	f340 8085 	ble.w	80350d2 <_dtoa_r+0x8da>
 8034fc8:	9b05      	ldr	r3, [sp, #20]
 8034fca:	f1c0 001c 	rsb	r0, r0, #28
 8034fce:	4403      	add	r3, r0
 8034fd0:	9305      	str	r3, [sp, #20]
 8034fd2:	9b06      	ldr	r3, [sp, #24]
 8034fd4:	4403      	add	r3, r0
 8034fd6:	4405      	add	r5, r0
 8034fd8:	9306      	str	r3, [sp, #24]
 8034fda:	9b05      	ldr	r3, [sp, #20]
 8034fdc:	2b00      	cmp	r3, #0
 8034fde:	dd05      	ble.n	8034fec <_dtoa_r+0x7f4>
 8034fe0:	4651      	mov	r1, sl
 8034fe2:	461a      	mov	r2, r3
 8034fe4:	4620      	mov	r0, r4
 8034fe6:	f000 fbb1 	bl	803574c <__lshift>
 8034fea:	4682      	mov	sl, r0
 8034fec:	9b06      	ldr	r3, [sp, #24]
 8034fee:	2b00      	cmp	r3, #0
 8034ff0:	dd05      	ble.n	8034ffe <_dtoa_r+0x806>
 8034ff2:	4631      	mov	r1, r6
 8034ff4:	461a      	mov	r2, r3
 8034ff6:	4620      	mov	r0, r4
 8034ff8:	f000 fba8 	bl	803574c <__lshift>
 8034ffc:	4606      	mov	r6, r0
 8034ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8035000:	2b00      	cmp	r3, #0
 8035002:	d072      	beq.n	80350ea <_dtoa_r+0x8f2>
 8035004:	4631      	mov	r1, r6
 8035006:	4650      	mov	r0, sl
 8035008:	f000 fc0c 	bl	8035824 <__mcmp>
 803500c:	2800      	cmp	r0, #0
 803500e:	da6c      	bge.n	80350ea <_dtoa_r+0x8f2>
 8035010:	2300      	movs	r3, #0
 8035012:	4651      	mov	r1, sl
 8035014:	220a      	movs	r2, #10
 8035016:	4620      	mov	r0, r4
 8035018:	f000 fa04 	bl	8035424 <__multadd>
 803501c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803501e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8035022:	4682      	mov	sl, r0
 8035024:	2b00      	cmp	r3, #0
 8035026:	f000 81af 	beq.w	8035388 <_dtoa_r+0xb90>
 803502a:	2300      	movs	r3, #0
 803502c:	4639      	mov	r1, r7
 803502e:	220a      	movs	r2, #10
 8035030:	4620      	mov	r0, r4
 8035032:	f000 f9f7 	bl	8035424 <__multadd>
 8035036:	9b01      	ldr	r3, [sp, #4]
 8035038:	2b00      	cmp	r3, #0
 803503a:	4607      	mov	r7, r0
 803503c:	f300 8096 	bgt.w	803516c <_dtoa_r+0x974>
 8035040:	9b07      	ldr	r3, [sp, #28]
 8035042:	2b02      	cmp	r3, #2
 8035044:	dc59      	bgt.n	80350fa <_dtoa_r+0x902>
 8035046:	e091      	b.n	803516c <_dtoa_r+0x974>
 8035048:	9b10      	ldr	r3, [sp, #64]	; 0x40
 803504a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 803504e:	e758      	b.n	8034f02 <_dtoa_r+0x70a>
 8035050:	9b04      	ldr	r3, [sp, #16]
 8035052:	1e5e      	subs	r6, r3, #1
 8035054:	9b08      	ldr	r3, [sp, #32]
 8035056:	42b3      	cmp	r3, r6
 8035058:	bfbf      	itttt	lt
 803505a:	9b08      	ldrlt	r3, [sp, #32]
 803505c:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 803505e:	9608      	strlt	r6, [sp, #32]
 8035060:	1af3      	sublt	r3, r6, r3
 8035062:	bfb4      	ite	lt
 8035064:	18d2      	addlt	r2, r2, r3
 8035066:	1b9e      	subge	r6, r3, r6
 8035068:	9b04      	ldr	r3, [sp, #16]
 803506a:	bfbc      	itt	lt
 803506c:	920b      	strlt	r2, [sp, #44]	; 0x2c
 803506e:	2600      	movlt	r6, #0
 8035070:	2b00      	cmp	r3, #0
 8035072:	bfb7      	itett	lt
 8035074:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8035078:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 803507c:	1a9d      	sublt	r5, r3, r2
 803507e:	2300      	movlt	r3, #0
 8035080:	e741      	b.n	8034f06 <_dtoa_r+0x70e>
 8035082:	9e08      	ldr	r6, [sp, #32]
 8035084:	9d05      	ldr	r5, [sp, #20]
 8035086:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8035088:	e748      	b.n	8034f1c <_dtoa_r+0x724>
 803508a:	9a08      	ldr	r2, [sp, #32]
 803508c:	e770      	b.n	8034f70 <_dtoa_r+0x778>
 803508e:	9b07      	ldr	r3, [sp, #28]
 8035090:	2b01      	cmp	r3, #1
 8035092:	dc19      	bgt.n	80350c8 <_dtoa_r+0x8d0>
 8035094:	9b02      	ldr	r3, [sp, #8]
 8035096:	b9bb      	cbnz	r3, 80350c8 <_dtoa_r+0x8d0>
 8035098:	9b03      	ldr	r3, [sp, #12]
 803509a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803509e:	b99b      	cbnz	r3, 80350c8 <_dtoa_r+0x8d0>
 80350a0:	9b03      	ldr	r3, [sp, #12]
 80350a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80350a6:	0d1b      	lsrs	r3, r3, #20
 80350a8:	051b      	lsls	r3, r3, #20
 80350aa:	b183      	cbz	r3, 80350ce <_dtoa_r+0x8d6>
 80350ac:	9b05      	ldr	r3, [sp, #20]
 80350ae:	3301      	adds	r3, #1
 80350b0:	9305      	str	r3, [sp, #20]
 80350b2:	9b06      	ldr	r3, [sp, #24]
 80350b4:	3301      	adds	r3, #1
 80350b6:	9306      	str	r3, [sp, #24]
 80350b8:	f04f 0801 	mov.w	r8, #1
 80350bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80350be:	2b00      	cmp	r3, #0
 80350c0:	f47f af6f 	bne.w	8034fa2 <_dtoa_r+0x7aa>
 80350c4:	2001      	movs	r0, #1
 80350c6:	e774      	b.n	8034fb2 <_dtoa_r+0x7ba>
 80350c8:	f04f 0800 	mov.w	r8, #0
 80350cc:	e7f6      	b.n	80350bc <_dtoa_r+0x8c4>
 80350ce:	4698      	mov	r8, r3
 80350d0:	e7f4      	b.n	80350bc <_dtoa_r+0x8c4>
 80350d2:	d082      	beq.n	8034fda <_dtoa_r+0x7e2>
 80350d4:	9a05      	ldr	r2, [sp, #20]
 80350d6:	331c      	adds	r3, #28
 80350d8:	441a      	add	r2, r3
 80350da:	9205      	str	r2, [sp, #20]
 80350dc:	9a06      	ldr	r2, [sp, #24]
 80350de:	441a      	add	r2, r3
 80350e0:	441d      	add	r5, r3
 80350e2:	9206      	str	r2, [sp, #24]
 80350e4:	e779      	b.n	8034fda <_dtoa_r+0x7e2>
 80350e6:	4603      	mov	r3, r0
 80350e8:	e7f4      	b.n	80350d4 <_dtoa_r+0x8dc>
 80350ea:	9b04      	ldr	r3, [sp, #16]
 80350ec:	2b00      	cmp	r3, #0
 80350ee:	dc37      	bgt.n	8035160 <_dtoa_r+0x968>
 80350f0:	9b07      	ldr	r3, [sp, #28]
 80350f2:	2b02      	cmp	r3, #2
 80350f4:	dd34      	ble.n	8035160 <_dtoa_r+0x968>
 80350f6:	9b04      	ldr	r3, [sp, #16]
 80350f8:	9301      	str	r3, [sp, #4]
 80350fa:	9b01      	ldr	r3, [sp, #4]
 80350fc:	b963      	cbnz	r3, 8035118 <_dtoa_r+0x920>
 80350fe:	4631      	mov	r1, r6
 8035100:	2205      	movs	r2, #5
 8035102:	4620      	mov	r0, r4
 8035104:	f000 f98e 	bl	8035424 <__multadd>
 8035108:	4601      	mov	r1, r0
 803510a:	4606      	mov	r6, r0
 803510c:	4650      	mov	r0, sl
 803510e:	f000 fb89 	bl	8035824 <__mcmp>
 8035112:	2800      	cmp	r0, #0
 8035114:	f73f adbc 	bgt.w	8034c90 <_dtoa_r+0x498>
 8035118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803511a:	9d00      	ldr	r5, [sp, #0]
 803511c:	ea6f 0b03 	mvn.w	fp, r3
 8035120:	f04f 0800 	mov.w	r8, #0
 8035124:	4631      	mov	r1, r6
 8035126:	4620      	mov	r0, r4
 8035128:	f000 f973 	bl	8035412 <_Bfree>
 803512c:	2f00      	cmp	r7, #0
 803512e:	f43f aeab 	beq.w	8034e88 <_dtoa_r+0x690>
 8035132:	f1b8 0f00 	cmp.w	r8, #0
 8035136:	d005      	beq.n	8035144 <_dtoa_r+0x94c>
 8035138:	45b8      	cmp	r8, r7
 803513a:	d003      	beq.n	8035144 <_dtoa_r+0x94c>
 803513c:	4641      	mov	r1, r8
 803513e:	4620      	mov	r0, r4
 8035140:	f000 f967 	bl	8035412 <_Bfree>
 8035144:	4639      	mov	r1, r7
 8035146:	4620      	mov	r0, r4
 8035148:	f000 f963 	bl	8035412 <_Bfree>
 803514c:	e69c      	b.n	8034e88 <_dtoa_r+0x690>
 803514e:	2600      	movs	r6, #0
 8035150:	4637      	mov	r7, r6
 8035152:	e7e1      	b.n	8035118 <_dtoa_r+0x920>
 8035154:	46bb      	mov	fp, r7
 8035156:	4637      	mov	r7, r6
 8035158:	e59a      	b.n	8034c90 <_dtoa_r+0x498>
 803515a:	bf00      	nop
 803515c:	40240000 	.word	0x40240000
 8035160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8035162:	2b00      	cmp	r3, #0
 8035164:	f000 80c7 	beq.w	80352f6 <_dtoa_r+0xafe>
 8035168:	9b04      	ldr	r3, [sp, #16]
 803516a:	9301      	str	r3, [sp, #4]
 803516c:	2d00      	cmp	r5, #0
 803516e:	dd05      	ble.n	803517c <_dtoa_r+0x984>
 8035170:	4639      	mov	r1, r7
 8035172:	462a      	mov	r2, r5
 8035174:	4620      	mov	r0, r4
 8035176:	f000 fae9 	bl	803574c <__lshift>
 803517a:	4607      	mov	r7, r0
 803517c:	f1b8 0f00 	cmp.w	r8, #0
 8035180:	d05a      	beq.n	8035238 <_dtoa_r+0xa40>
 8035182:	6879      	ldr	r1, [r7, #4]
 8035184:	4620      	mov	r0, r4
 8035186:	f000 f91f 	bl	80353c8 <_Balloc>
 803518a:	4605      	mov	r5, r0
 803518c:	b920      	cbnz	r0, 8035198 <_dtoa_r+0x9a0>
 803518e:	4b82      	ldr	r3, [pc, #520]	; (8035398 <_dtoa_r+0xba0>)
 8035190:	4602      	mov	r2, r0
 8035192:	f240 21ef 	movw	r1, #751	; 0x2ef
 8035196:	e470      	b.n	8034a7a <_dtoa_r+0x282>
 8035198:	693a      	ldr	r2, [r7, #16]
 803519a:	3202      	adds	r2, #2
 803519c:	0092      	lsls	r2, r2, #2
 803519e:	f107 010c 	add.w	r1, r7, #12
 80351a2:	300c      	adds	r0, #12
 80351a4:	f7fc fbb8 	bl	8031918 <memcpy>
 80351a8:	2201      	movs	r2, #1
 80351aa:	4629      	mov	r1, r5
 80351ac:	4620      	mov	r0, r4
 80351ae:	f000 facd 	bl	803574c <__lshift>
 80351b2:	9b00      	ldr	r3, [sp, #0]
 80351b4:	3301      	adds	r3, #1
 80351b6:	9304      	str	r3, [sp, #16]
 80351b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80351bc:	4413      	add	r3, r2
 80351be:	9308      	str	r3, [sp, #32]
 80351c0:	9b02      	ldr	r3, [sp, #8]
 80351c2:	f003 0301 	and.w	r3, r3, #1
 80351c6:	46b8      	mov	r8, r7
 80351c8:	9306      	str	r3, [sp, #24]
 80351ca:	4607      	mov	r7, r0
 80351cc:	9b04      	ldr	r3, [sp, #16]
 80351ce:	4631      	mov	r1, r6
 80351d0:	3b01      	subs	r3, #1
 80351d2:	4650      	mov	r0, sl
 80351d4:	9301      	str	r3, [sp, #4]
 80351d6:	f7ff fa87 	bl	80346e8 <quorem>
 80351da:	4641      	mov	r1, r8
 80351dc:	9002      	str	r0, [sp, #8]
 80351de:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80351e2:	4650      	mov	r0, sl
 80351e4:	f000 fb1e 	bl	8035824 <__mcmp>
 80351e8:	463a      	mov	r2, r7
 80351ea:	9005      	str	r0, [sp, #20]
 80351ec:	4631      	mov	r1, r6
 80351ee:	4620      	mov	r0, r4
 80351f0:	f000 fb34 	bl	803585c <__mdiff>
 80351f4:	68c2      	ldr	r2, [r0, #12]
 80351f6:	4605      	mov	r5, r0
 80351f8:	bb02      	cbnz	r2, 803523c <_dtoa_r+0xa44>
 80351fa:	4601      	mov	r1, r0
 80351fc:	4650      	mov	r0, sl
 80351fe:	f000 fb11 	bl	8035824 <__mcmp>
 8035202:	4602      	mov	r2, r0
 8035204:	4629      	mov	r1, r5
 8035206:	4620      	mov	r0, r4
 8035208:	9209      	str	r2, [sp, #36]	; 0x24
 803520a:	f000 f902 	bl	8035412 <_Bfree>
 803520e:	9b07      	ldr	r3, [sp, #28]
 8035210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8035212:	9d04      	ldr	r5, [sp, #16]
 8035214:	ea43 0102 	orr.w	r1, r3, r2
 8035218:	9b06      	ldr	r3, [sp, #24]
 803521a:	4319      	orrs	r1, r3
 803521c:	d110      	bne.n	8035240 <_dtoa_r+0xa48>
 803521e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8035222:	d029      	beq.n	8035278 <_dtoa_r+0xa80>
 8035224:	9b05      	ldr	r3, [sp, #20]
 8035226:	2b00      	cmp	r3, #0
 8035228:	dd02      	ble.n	8035230 <_dtoa_r+0xa38>
 803522a:	9b02      	ldr	r3, [sp, #8]
 803522c:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8035230:	9b01      	ldr	r3, [sp, #4]
 8035232:	f883 9000 	strb.w	r9, [r3]
 8035236:	e775      	b.n	8035124 <_dtoa_r+0x92c>
 8035238:	4638      	mov	r0, r7
 803523a:	e7ba      	b.n	80351b2 <_dtoa_r+0x9ba>
 803523c:	2201      	movs	r2, #1
 803523e:	e7e1      	b.n	8035204 <_dtoa_r+0xa0c>
 8035240:	9b05      	ldr	r3, [sp, #20]
 8035242:	2b00      	cmp	r3, #0
 8035244:	db04      	blt.n	8035250 <_dtoa_r+0xa58>
 8035246:	9907      	ldr	r1, [sp, #28]
 8035248:	430b      	orrs	r3, r1
 803524a:	9906      	ldr	r1, [sp, #24]
 803524c:	430b      	orrs	r3, r1
 803524e:	d120      	bne.n	8035292 <_dtoa_r+0xa9a>
 8035250:	2a00      	cmp	r2, #0
 8035252:	dded      	ble.n	8035230 <_dtoa_r+0xa38>
 8035254:	4651      	mov	r1, sl
 8035256:	2201      	movs	r2, #1
 8035258:	4620      	mov	r0, r4
 803525a:	f000 fa77 	bl	803574c <__lshift>
 803525e:	4631      	mov	r1, r6
 8035260:	4682      	mov	sl, r0
 8035262:	f000 fadf 	bl	8035824 <__mcmp>
 8035266:	2800      	cmp	r0, #0
 8035268:	dc03      	bgt.n	8035272 <_dtoa_r+0xa7a>
 803526a:	d1e1      	bne.n	8035230 <_dtoa_r+0xa38>
 803526c:	f019 0f01 	tst.w	r9, #1
 8035270:	d0de      	beq.n	8035230 <_dtoa_r+0xa38>
 8035272:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8035276:	d1d8      	bne.n	803522a <_dtoa_r+0xa32>
 8035278:	9a01      	ldr	r2, [sp, #4]
 803527a:	2339      	movs	r3, #57	; 0x39
 803527c:	7013      	strb	r3, [r2, #0]
 803527e:	462b      	mov	r3, r5
 8035280:	461d      	mov	r5, r3
 8035282:	3b01      	subs	r3, #1
 8035284:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8035288:	2a39      	cmp	r2, #57	; 0x39
 803528a:	d06c      	beq.n	8035366 <_dtoa_r+0xb6e>
 803528c:	3201      	adds	r2, #1
 803528e:	701a      	strb	r2, [r3, #0]
 8035290:	e748      	b.n	8035124 <_dtoa_r+0x92c>
 8035292:	2a00      	cmp	r2, #0
 8035294:	dd07      	ble.n	80352a6 <_dtoa_r+0xaae>
 8035296:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 803529a:	d0ed      	beq.n	8035278 <_dtoa_r+0xa80>
 803529c:	9a01      	ldr	r2, [sp, #4]
 803529e:	f109 0301 	add.w	r3, r9, #1
 80352a2:	7013      	strb	r3, [r2, #0]
 80352a4:	e73e      	b.n	8035124 <_dtoa_r+0x92c>
 80352a6:	9b04      	ldr	r3, [sp, #16]
 80352a8:	9a08      	ldr	r2, [sp, #32]
 80352aa:	f803 9c01 	strb.w	r9, [r3, #-1]
 80352ae:	4293      	cmp	r3, r2
 80352b0:	d043      	beq.n	803533a <_dtoa_r+0xb42>
 80352b2:	4651      	mov	r1, sl
 80352b4:	2300      	movs	r3, #0
 80352b6:	220a      	movs	r2, #10
 80352b8:	4620      	mov	r0, r4
 80352ba:	f000 f8b3 	bl	8035424 <__multadd>
 80352be:	45b8      	cmp	r8, r7
 80352c0:	4682      	mov	sl, r0
 80352c2:	f04f 0300 	mov.w	r3, #0
 80352c6:	f04f 020a 	mov.w	r2, #10
 80352ca:	4641      	mov	r1, r8
 80352cc:	4620      	mov	r0, r4
 80352ce:	d107      	bne.n	80352e0 <_dtoa_r+0xae8>
 80352d0:	f000 f8a8 	bl	8035424 <__multadd>
 80352d4:	4680      	mov	r8, r0
 80352d6:	4607      	mov	r7, r0
 80352d8:	9b04      	ldr	r3, [sp, #16]
 80352da:	3301      	adds	r3, #1
 80352dc:	9304      	str	r3, [sp, #16]
 80352de:	e775      	b.n	80351cc <_dtoa_r+0x9d4>
 80352e0:	f000 f8a0 	bl	8035424 <__multadd>
 80352e4:	4639      	mov	r1, r7
 80352e6:	4680      	mov	r8, r0
 80352e8:	2300      	movs	r3, #0
 80352ea:	220a      	movs	r2, #10
 80352ec:	4620      	mov	r0, r4
 80352ee:	f000 f899 	bl	8035424 <__multadd>
 80352f2:	4607      	mov	r7, r0
 80352f4:	e7f0      	b.n	80352d8 <_dtoa_r+0xae0>
 80352f6:	9b04      	ldr	r3, [sp, #16]
 80352f8:	9301      	str	r3, [sp, #4]
 80352fa:	9d00      	ldr	r5, [sp, #0]
 80352fc:	4631      	mov	r1, r6
 80352fe:	4650      	mov	r0, sl
 8035300:	f7ff f9f2 	bl	80346e8 <quorem>
 8035304:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8035308:	9b00      	ldr	r3, [sp, #0]
 803530a:	f805 9b01 	strb.w	r9, [r5], #1
 803530e:	1aea      	subs	r2, r5, r3
 8035310:	9b01      	ldr	r3, [sp, #4]
 8035312:	4293      	cmp	r3, r2
 8035314:	dd07      	ble.n	8035326 <_dtoa_r+0xb2e>
 8035316:	4651      	mov	r1, sl
 8035318:	2300      	movs	r3, #0
 803531a:	220a      	movs	r2, #10
 803531c:	4620      	mov	r0, r4
 803531e:	f000 f881 	bl	8035424 <__multadd>
 8035322:	4682      	mov	sl, r0
 8035324:	e7ea      	b.n	80352fc <_dtoa_r+0xb04>
 8035326:	9b01      	ldr	r3, [sp, #4]
 8035328:	2b00      	cmp	r3, #0
 803532a:	bfc8      	it	gt
 803532c:	461d      	movgt	r5, r3
 803532e:	9b00      	ldr	r3, [sp, #0]
 8035330:	bfd8      	it	le
 8035332:	2501      	movle	r5, #1
 8035334:	441d      	add	r5, r3
 8035336:	f04f 0800 	mov.w	r8, #0
 803533a:	4651      	mov	r1, sl
 803533c:	2201      	movs	r2, #1
 803533e:	4620      	mov	r0, r4
 8035340:	f000 fa04 	bl	803574c <__lshift>
 8035344:	4631      	mov	r1, r6
 8035346:	4682      	mov	sl, r0
 8035348:	f000 fa6c 	bl	8035824 <__mcmp>
 803534c:	2800      	cmp	r0, #0
 803534e:	dc96      	bgt.n	803527e <_dtoa_r+0xa86>
 8035350:	d102      	bne.n	8035358 <_dtoa_r+0xb60>
 8035352:	f019 0f01 	tst.w	r9, #1
 8035356:	d192      	bne.n	803527e <_dtoa_r+0xa86>
 8035358:	462b      	mov	r3, r5
 803535a:	461d      	mov	r5, r3
 803535c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8035360:	2a30      	cmp	r2, #48	; 0x30
 8035362:	d0fa      	beq.n	803535a <_dtoa_r+0xb62>
 8035364:	e6de      	b.n	8035124 <_dtoa_r+0x92c>
 8035366:	9a00      	ldr	r2, [sp, #0]
 8035368:	429a      	cmp	r2, r3
 803536a:	d189      	bne.n	8035280 <_dtoa_r+0xa88>
 803536c:	f10b 0b01 	add.w	fp, fp, #1
 8035370:	2331      	movs	r3, #49	; 0x31
 8035372:	e796      	b.n	80352a2 <_dtoa_r+0xaaa>
 8035374:	4b09      	ldr	r3, [pc, #36]	; (803539c <_dtoa_r+0xba4>)
 8035376:	f7ff ba9d 	b.w	80348b4 <_dtoa_r+0xbc>
 803537a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803537c:	2b00      	cmp	r3, #0
 803537e:	f47f aa7c 	bne.w	803487a <_dtoa_r+0x82>
 8035382:	4b07      	ldr	r3, [pc, #28]	; (80353a0 <_dtoa_r+0xba8>)
 8035384:	f7ff ba96 	b.w	80348b4 <_dtoa_r+0xbc>
 8035388:	9b01      	ldr	r3, [sp, #4]
 803538a:	2b00      	cmp	r3, #0
 803538c:	dcb5      	bgt.n	80352fa <_dtoa_r+0xb02>
 803538e:	9b07      	ldr	r3, [sp, #28]
 8035390:	2b02      	cmp	r3, #2
 8035392:	f73f aeb2 	bgt.w	80350fa <_dtoa_r+0x902>
 8035396:	e7b0      	b.n	80352fa <_dtoa_r+0xb02>
 8035398:	08036e8f 	.word	0x08036e8f
 803539c:	08036e36 	.word	0x08036e36
 80353a0:	08036e82 	.word	0x08036e82

080353a4 <__ascii_mbtowc>:
 80353a4:	b082      	sub	sp, #8
 80353a6:	b901      	cbnz	r1, 80353aa <__ascii_mbtowc+0x6>
 80353a8:	a901      	add	r1, sp, #4
 80353aa:	b142      	cbz	r2, 80353be <__ascii_mbtowc+0x1a>
 80353ac:	b14b      	cbz	r3, 80353c2 <__ascii_mbtowc+0x1e>
 80353ae:	7813      	ldrb	r3, [r2, #0]
 80353b0:	600b      	str	r3, [r1, #0]
 80353b2:	7812      	ldrb	r2, [r2, #0]
 80353b4:	1e10      	subs	r0, r2, #0
 80353b6:	bf18      	it	ne
 80353b8:	2001      	movne	r0, #1
 80353ba:	b002      	add	sp, #8
 80353bc:	4770      	bx	lr
 80353be:	4610      	mov	r0, r2
 80353c0:	e7fb      	b.n	80353ba <__ascii_mbtowc+0x16>
 80353c2:	f06f 0001 	mvn.w	r0, #1
 80353c6:	e7f8      	b.n	80353ba <__ascii_mbtowc+0x16>

080353c8 <_Balloc>:
 80353c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80353ca:	b570      	push	{r4, r5, r6, lr}
 80353cc:	4605      	mov	r5, r0
 80353ce:	460c      	mov	r4, r1
 80353d0:	b17b      	cbz	r3, 80353f2 <_Balloc+0x2a>
 80353d2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80353d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80353d8:	b9a0      	cbnz	r0, 8035404 <_Balloc+0x3c>
 80353da:	2101      	movs	r1, #1
 80353dc:	fa01 f604 	lsl.w	r6, r1, r4
 80353e0:	1d72      	adds	r2, r6, #5
 80353e2:	0092      	lsls	r2, r2, #2
 80353e4:	4628      	mov	r0, r5
 80353e6:	f000 fdd7 	bl	8035f98 <_calloc_r>
 80353ea:	b148      	cbz	r0, 8035400 <_Balloc+0x38>
 80353ec:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80353f0:	e00b      	b.n	803540a <_Balloc+0x42>
 80353f2:	2221      	movs	r2, #33	; 0x21
 80353f4:	2104      	movs	r1, #4
 80353f6:	f000 fdcf 	bl	8035f98 <_calloc_r>
 80353fa:	6468      	str	r0, [r5, #68]	; 0x44
 80353fc:	2800      	cmp	r0, #0
 80353fe:	d1e8      	bne.n	80353d2 <_Balloc+0xa>
 8035400:	2000      	movs	r0, #0
 8035402:	bd70      	pop	{r4, r5, r6, pc}
 8035404:	6802      	ldr	r2, [r0, #0]
 8035406:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 803540a:	2300      	movs	r3, #0
 803540c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8035410:	e7f7      	b.n	8035402 <_Balloc+0x3a>

08035412 <_Bfree>:
 8035412:	b131      	cbz	r1, 8035422 <_Bfree+0x10>
 8035414:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8035416:	684a      	ldr	r2, [r1, #4]
 8035418:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 803541c:	6008      	str	r0, [r1, #0]
 803541e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8035422:	4770      	bx	lr

08035424 <__multadd>:
 8035424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035428:	690d      	ldr	r5, [r1, #16]
 803542a:	4607      	mov	r7, r0
 803542c:	460c      	mov	r4, r1
 803542e:	461e      	mov	r6, r3
 8035430:	f101 0c14 	add.w	ip, r1, #20
 8035434:	2000      	movs	r0, #0
 8035436:	f8dc 3000 	ldr.w	r3, [ip]
 803543a:	b299      	uxth	r1, r3
 803543c:	fb02 6101 	mla	r1, r2, r1, r6
 8035440:	0c1e      	lsrs	r6, r3, #16
 8035442:	0c0b      	lsrs	r3, r1, #16
 8035444:	fb02 3306 	mla	r3, r2, r6, r3
 8035448:	b289      	uxth	r1, r1
 803544a:	3001      	adds	r0, #1
 803544c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8035450:	4285      	cmp	r5, r0
 8035452:	f84c 1b04 	str.w	r1, [ip], #4
 8035456:	ea4f 4613 	mov.w	r6, r3, lsr #16
 803545a:	dcec      	bgt.n	8035436 <__multadd+0x12>
 803545c:	b30e      	cbz	r6, 80354a2 <__multadd+0x7e>
 803545e:	68a3      	ldr	r3, [r4, #8]
 8035460:	42ab      	cmp	r3, r5
 8035462:	dc19      	bgt.n	8035498 <__multadd+0x74>
 8035464:	6861      	ldr	r1, [r4, #4]
 8035466:	4638      	mov	r0, r7
 8035468:	3101      	adds	r1, #1
 803546a:	f7ff ffad 	bl	80353c8 <_Balloc>
 803546e:	4680      	mov	r8, r0
 8035470:	b928      	cbnz	r0, 803547e <__multadd+0x5a>
 8035472:	4602      	mov	r2, r0
 8035474:	4b0c      	ldr	r3, [pc, #48]	; (80354a8 <__multadd+0x84>)
 8035476:	480d      	ldr	r0, [pc, #52]	; (80354ac <__multadd+0x88>)
 8035478:	21ba      	movs	r1, #186	; 0xba
 803547a:	f000 fd6f 	bl	8035f5c <__assert_func>
 803547e:	6922      	ldr	r2, [r4, #16]
 8035480:	3202      	adds	r2, #2
 8035482:	f104 010c 	add.w	r1, r4, #12
 8035486:	0092      	lsls	r2, r2, #2
 8035488:	300c      	adds	r0, #12
 803548a:	f7fc fa45 	bl	8031918 <memcpy>
 803548e:	4621      	mov	r1, r4
 8035490:	4638      	mov	r0, r7
 8035492:	f7ff ffbe 	bl	8035412 <_Bfree>
 8035496:	4644      	mov	r4, r8
 8035498:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 803549c:	3501      	adds	r5, #1
 803549e:	615e      	str	r6, [r3, #20]
 80354a0:	6125      	str	r5, [r4, #16]
 80354a2:	4620      	mov	r0, r4
 80354a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80354a8:	08036e8f 	.word	0x08036e8f
 80354ac:	08036ef8 	.word	0x08036ef8

080354b0 <__hi0bits>:
 80354b0:	0c03      	lsrs	r3, r0, #16
 80354b2:	041b      	lsls	r3, r3, #16
 80354b4:	b9d3      	cbnz	r3, 80354ec <__hi0bits+0x3c>
 80354b6:	0400      	lsls	r0, r0, #16
 80354b8:	2310      	movs	r3, #16
 80354ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80354be:	bf04      	itt	eq
 80354c0:	0200      	lsleq	r0, r0, #8
 80354c2:	3308      	addeq	r3, #8
 80354c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80354c8:	bf04      	itt	eq
 80354ca:	0100      	lsleq	r0, r0, #4
 80354cc:	3304      	addeq	r3, #4
 80354ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80354d2:	bf04      	itt	eq
 80354d4:	0080      	lsleq	r0, r0, #2
 80354d6:	3302      	addeq	r3, #2
 80354d8:	2800      	cmp	r0, #0
 80354da:	db05      	blt.n	80354e8 <__hi0bits+0x38>
 80354dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80354e0:	f103 0301 	add.w	r3, r3, #1
 80354e4:	bf08      	it	eq
 80354e6:	2320      	moveq	r3, #32
 80354e8:	4618      	mov	r0, r3
 80354ea:	4770      	bx	lr
 80354ec:	2300      	movs	r3, #0
 80354ee:	e7e4      	b.n	80354ba <__hi0bits+0xa>

080354f0 <__lo0bits>:
 80354f0:	6803      	ldr	r3, [r0, #0]
 80354f2:	f013 0207 	ands.w	r2, r3, #7
 80354f6:	d00c      	beq.n	8035512 <__lo0bits+0x22>
 80354f8:	07d9      	lsls	r1, r3, #31
 80354fa:	d422      	bmi.n	8035542 <__lo0bits+0x52>
 80354fc:	079a      	lsls	r2, r3, #30
 80354fe:	bf49      	itett	mi
 8035500:	085b      	lsrmi	r3, r3, #1
 8035502:	089b      	lsrpl	r3, r3, #2
 8035504:	6003      	strmi	r3, [r0, #0]
 8035506:	2201      	movmi	r2, #1
 8035508:	bf5c      	itt	pl
 803550a:	6003      	strpl	r3, [r0, #0]
 803550c:	2202      	movpl	r2, #2
 803550e:	4610      	mov	r0, r2
 8035510:	4770      	bx	lr
 8035512:	b299      	uxth	r1, r3
 8035514:	b909      	cbnz	r1, 803551a <__lo0bits+0x2a>
 8035516:	0c1b      	lsrs	r3, r3, #16
 8035518:	2210      	movs	r2, #16
 803551a:	b2d9      	uxtb	r1, r3
 803551c:	b909      	cbnz	r1, 8035522 <__lo0bits+0x32>
 803551e:	3208      	adds	r2, #8
 8035520:	0a1b      	lsrs	r3, r3, #8
 8035522:	0719      	lsls	r1, r3, #28
 8035524:	bf04      	itt	eq
 8035526:	091b      	lsreq	r3, r3, #4
 8035528:	3204      	addeq	r2, #4
 803552a:	0799      	lsls	r1, r3, #30
 803552c:	bf04      	itt	eq
 803552e:	089b      	lsreq	r3, r3, #2
 8035530:	3202      	addeq	r2, #2
 8035532:	07d9      	lsls	r1, r3, #31
 8035534:	d403      	bmi.n	803553e <__lo0bits+0x4e>
 8035536:	085b      	lsrs	r3, r3, #1
 8035538:	f102 0201 	add.w	r2, r2, #1
 803553c:	d003      	beq.n	8035546 <__lo0bits+0x56>
 803553e:	6003      	str	r3, [r0, #0]
 8035540:	e7e5      	b.n	803550e <__lo0bits+0x1e>
 8035542:	2200      	movs	r2, #0
 8035544:	e7e3      	b.n	803550e <__lo0bits+0x1e>
 8035546:	2220      	movs	r2, #32
 8035548:	e7e1      	b.n	803550e <__lo0bits+0x1e>
	...

0803554c <__i2b>:
 803554c:	b510      	push	{r4, lr}
 803554e:	460c      	mov	r4, r1
 8035550:	2101      	movs	r1, #1
 8035552:	f7ff ff39 	bl	80353c8 <_Balloc>
 8035556:	4602      	mov	r2, r0
 8035558:	b928      	cbnz	r0, 8035566 <__i2b+0x1a>
 803555a:	4b05      	ldr	r3, [pc, #20]	; (8035570 <__i2b+0x24>)
 803555c:	4805      	ldr	r0, [pc, #20]	; (8035574 <__i2b+0x28>)
 803555e:	f240 1145 	movw	r1, #325	; 0x145
 8035562:	f000 fcfb 	bl	8035f5c <__assert_func>
 8035566:	2301      	movs	r3, #1
 8035568:	6144      	str	r4, [r0, #20]
 803556a:	6103      	str	r3, [r0, #16]
 803556c:	bd10      	pop	{r4, pc}
 803556e:	bf00      	nop
 8035570:	08036e8f 	.word	0x08036e8f
 8035574:	08036ef8 	.word	0x08036ef8

08035578 <__multiply>:
 8035578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803557c:	4691      	mov	r9, r2
 803557e:	690a      	ldr	r2, [r1, #16]
 8035580:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8035584:	429a      	cmp	r2, r3
 8035586:	bfb8      	it	lt
 8035588:	460b      	movlt	r3, r1
 803558a:	460c      	mov	r4, r1
 803558c:	bfbc      	itt	lt
 803558e:	464c      	movlt	r4, r9
 8035590:	4699      	movlt	r9, r3
 8035592:	6927      	ldr	r7, [r4, #16]
 8035594:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8035598:	68a3      	ldr	r3, [r4, #8]
 803559a:	6861      	ldr	r1, [r4, #4]
 803559c:	eb07 060a 	add.w	r6, r7, sl
 80355a0:	42b3      	cmp	r3, r6
 80355a2:	b085      	sub	sp, #20
 80355a4:	bfb8      	it	lt
 80355a6:	3101      	addlt	r1, #1
 80355a8:	f7ff ff0e 	bl	80353c8 <_Balloc>
 80355ac:	b930      	cbnz	r0, 80355bc <__multiply+0x44>
 80355ae:	4602      	mov	r2, r0
 80355b0:	4b44      	ldr	r3, [pc, #272]	; (80356c4 <__multiply+0x14c>)
 80355b2:	4845      	ldr	r0, [pc, #276]	; (80356c8 <__multiply+0x150>)
 80355b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80355b8:	f000 fcd0 	bl	8035f5c <__assert_func>
 80355bc:	f100 0514 	add.w	r5, r0, #20
 80355c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80355c4:	462b      	mov	r3, r5
 80355c6:	2200      	movs	r2, #0
 80355c8:	4543      	cmp	r3, r8
 80355ca:	d321      	bcc.n	8035610 <__multiply+0x98>
 80355cc:	f104 0314 	add.w	r3, r4, #20
 80355d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80355d4:	f109 0314 	add.w	r3, r9, #20
 80355d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80355dc:	9202      	str	r2, [sp, #8]
 80355de:	1b3a      	subs	r2, r7, r4
 80355e0:	3a15      	subs	r2, #21
 80355e2:	f022 0203 	bic.w	r2, r2, #3
 80355e6:	3204      	adds	r2, #4
 80355e8:	f104 0115 	add.w	r1, r4, #21
 80355ec:	428f      	cmp	r7, r1
 80355ee:	bf38      	it	cc
 80355f0:	2204      	movcc	r2, #4
 80355f2:	9201      	str	r2, [sp, #4]
 80355f4:	9a02      	ldr	r2, [sp, #8]
 80355f6:	9303      	str	r3, [sp, #12]
 80355f8:	429a      	cmp	r2, r3
 80355fa:	d80c      	bhi.n	8035616 <__multiply+0x9e>
 80355fc:	2e00      	cmp	r6, #0
 80355fe:	dd03      	ble.n	8035608 <__multiply+0x90>
 8035600:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8035604:	2b00      	cmp	r3, #0
 8035606:	d05b      	beq.n	80356c0 <__multiply+0x148>
 8035608:	6106      	str	r6, [r0, #16]
 803560a:	b005      	add	sp, #20
 803560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035610:	f843 2b04 	str.w	r2, [r3], #4
 8035614:	e7d8      	b.n	80355c8 <__multiply+0x50>
 8035616:	f8b3 a000 	ldrh.w	sl, [r3]
 803561a:	f1ba 0f00 	cmp.w	sl, #0
 803561e:	d024      	beq.n	803566a <__multiply+0xf2>
 8035620:	f104 0e14 	add.w	lr, r4, #20
 8035624:	46a9      	mov	r9, r5
 8035626:	f04f 0c00 	mov.w	ip, #0
 803562a:	f85e 2b04 	ldr.w	r2, [lr], #4
 803562e:	f8d9 1000 	ldr.w	r1, [r9]
 8035632:	fa1f fb82 	uxth.w	fp, r2
 8035636:	b289      	uxth	r1, r1
 8035638:	fb0a 110b 	mla	r1, sl, fp, r1
 803563c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8035640:	f8d9 2000 	ldr.w	r2, [r9]
 8035644:	4461      	add	r1, ip
 8035646:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 803564a:	fb0a c20b 	mla	r2, sl, fp, ip
 803564e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8035652:	b289      	uxth	r1, r1
 8035654:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8035658:	4577      	cmp	r7, lr
 803565a:	f849 1b04 	str.w	r1, [r9], #4
 803565e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8035662:	d8e2      	bhi.n	803562a <__multiply+0xb2>
 8035664:	9a01      	ldr	r2, [sp, #4]
 8035666:	f845 c002 	str.w	ip, [r5, r2]
 803566a:	9a03      	ldr	r2, [sp, #12]
 803566c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8035670:	3304      	adds	r3, #4
 8035672:	f1b9 0f00 	cmp.w	r9, #0
 8035676:	d021      	beq.n	80356bc <__multiply+0x144>
 8035678:	6829      	ldr	r1, [r5, #0]
 803567a:	f104 0c14 	add.w	ip, r4, #20
 803567e:	46ae      	mov	lr, r5
 8035680:	f04f 0a00 	mov.w	sl, #0
 8035684:	f8bc b000 	ldrh.w	fp, [ip]
 8035688:	f8be 2002 	ldrh.w	r2, [lr, #2]
 803568c:	fb09 220b 	mla	r2, r9, fp, r2
 8035690:	4452      	add	r2, sl
 8035692:	b289      	uxth	r1, r1
 8035694:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8035698:	f84e 1b04 	str.w	r1, [lr], #4
 803569c:	f85c 1b04 	ldr.w	r1, [ip], #4
 80356a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80356a4:	f8be 1000 	ldrh.w	r1, [lr]
 80356a8:	fb09 110a 	mla	r1, r9, sl, r1
 80356ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80356b0:	4567      	cmp	r7, ip
 80356b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80356b6:	d8e5      	bhi.n	8035684 <__multiply+0x10c>
 80356b8:	9a01      	ldr	r2, [sp, #4]
 80356ba:	50a9      	str	r1, [r5, r2]
 80356bc:	3504      	adds	r5, #4
 80356be:	e799      	b.n	80355f4 <__multiply+0x7c>
 80356c0:	3e01      	subs	r6, #1
 80356c2:	e79b      	b.n	80355fc <__multiply+0x84>
 80356c4:	08036e8f 	.word	0x08036e8f
 80356c8:	08036ef8 	.word	0x08036ef8

080356cc <__pow5mult>:
 80356cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80356d0:	4615      	mov	r5, r2
 80356d2:	f012 0203 	ands.w	r2, r2, #3
 80356d6:	4606      	mov	r6, r0
 80356d8:	460f      	mov	r7, r1
 80356da:	d007      	beq.n	80356ec <__pow5mult+0x20>
 80356dc:	4c1a      	ldr	r4, [pc, #104]	; (8035748 <__pow5mult+0x7c>)
 80356de:	3a01      	subs	r2, #1
 80356e0:	2300      	movs	r3, #0
 80356e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80356e6:	f7ff fe9d 	bl	8035424 <__multadd>
 80356ea:	4607      	mov	r7, r0
 80356ec:	10ad      	asrs	r5, r5, #2
 80356ee:	d027      	beq.n	8035740 <__pow5mult+0x74>
 80356f0:	6c34      	ldr	r4, [r6, #64]	; 0x40
 80356f2:	b944      	cbnz	r4, 8035706 <__pow5mult+0x3a>
 80356f4:	f240 2171 	movw	r1, #625	; 0x271
 80356f8:	4630      	mov	r0, r6
 80356fa:	f7ff ff27 	bl	803554c <__i2b>
 80356fe:	2300      	movs	r3, #0
 8035700:	6430      	str	r0, [r6, #64]	; 0x40
 8035702:	4604      	mov	r4, r0
 8035704:	6003      	str	r3, [r0, #0]
 8035706:	f04f 0900 	mov.w	r9, #0
 803570a:	07eb      	lsls	r3, r5, #31
 803570c:	d50a      	bpl.n	8035724 <__pow5mult+0x58>
 803570e:	4639      	mov	r1, r7
 8035710:	4622      	mov	r2, r4
 8035712:	4630      	mov	r0, r6
 8035714:	f7ff ff30 	bl	8035578 <__multiply>
 8035718:	4639      	mov	r1, r7
 803571a:	4680      	mov	r8, r0
 803571c:	4630      	mov	r0, r6
 803571e:	f7ff fe78 	bl	8035412 <_Bfree>
 8035722:	4647      	mov	r7, r8
 8035724:	106d      	asrs	r5, r5, #1
 8035726:	d00b      	beq.n	8035740 <__pow5mult+0x74>
 8035728:	6820      	ldr	r0, [r4, #0]
 803572a:	b938      	cbnz	r0, 803573c <__pow5mult+0x70>
 803572c:	4622      	mov	r2, r4
 803572e:	4621      	mov	r1, r4
 8035730:	4630      	mov	r0, r6
 8035732:	f7ff ff21 	bl	8035578 <__multiply>
 8035736:	6020      	str	r0, [r4, #0]
 8035738:	f8c0 9000 	str.w	r9, [r0]
 803573c:	4604      	mov	r4, r0
 803573e:	e7e4      	b.n	803570a <__pow5mult+0x3e>
 8035740:	4638      	mov	r0, r7
 8035742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8035746:	bf00      	nop
 8035748:	08037048 	.word	0x08037048

0803574c <__lshift>:
 803574c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8035750:	460c      	mov	r4, r1
 8035752:	6849      	ldr	r1, [r1, #4]
 8035754:	6923      	ldr	r3, [r4, #16]
 8035756:	eb03 1862 	add.w	r8, r3, r2, asr #5
 803575a:	68a3      	ldr	r3, [r4, #8]
 803575c:	4607      	mov	r7, r0
 803575e:	4691      	mov	r9, r2
 8035760:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8035764:	f108 0601 	add.w	r6, r8, #1
 8035768:	42b3      	cmp	r3, r6
 803576a:	db0b      	blt.n	8035784 <__lshift+0x38>
 803576c:	4638      	mov	r0, r7
 803576e:	f7ff fe2b 	bl	80353c8 <_Balloc>
 8035772:	4605      	mov	r5, r0
 8035774:	b948      	cbnz	r0, 803578a <__lshift+0x3e>
 8035776:	4602      	mov	r2, r0
 8035778:	4b28      	ldr	r3, [pc, #160]	; (803581c <__lshift+0xd0>)
 803577a:	4829      	ldr	r0, [pc, #164]	; (8035820 <__lshift+0xd4>)
 803577c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8035780:	f000 fbec 	bl	8035f5c <__assert_func>
 8035784:	3101      	adds	r1, #1
 8035786:	005b      	lsls	r3, r3, #1
 8035788:	e7ee      	b.n	8035768 <__lshift+0x1c>
 803578a:	2300      	movs	r3, #0
 803578c:	f100 0114 	add.w	r1, r0, #20
 8035790:	f100 0210 	add.w	r2, r0, #16
 8035794:	4618      	mov	r0, r3
 8035796:	4553      	cmp	r3, sl
 8035798:	db33      	blt.n	8035802 <__lshift+0xb6>
 803579a:	6920      	ldr	r0, [r4, #16]
 803579c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80357a0:	f104 0314 	add.w	r3, r4, #20
 80357a4:	f019 091f 	ands.w	r9, r9, #31
 80357a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80357ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80357b0:	d02b      	beq.n	803580a <__lshift+0xbe>
 80357b2:	f1c9 0e20 	rsb	lr, r9, #32
 80357b6:	468a      	mov	sl, r1
 80357b8:	2200      	movs	r2, #0
 80357ba:	6818      	ldr	r0, [r3, #0]
 80357bc:	fa00 f009 	lsl.w	r0, r0, r9
 80357c0:	4310      	orrs	r0, r2
 80357c2:	f84a 0b04 	str.w	r0, [sl], #4
 80357c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80357ca:	459c      	cmp	ip, r3
 80357cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80357d0:	d8f3      	bhi.n	80357ba <__lshift+0x6e>
 80357d2:	ebac 0304 	sub.w	r3, ip, r4
 80357d6:	3b15      	subs	r3, #21
 80357d8:	f023 0303 	bic.w	r3, r3, #3
 80357dc:	3304      	adds	r3, #4
 80357de:	f104 0015 	add.w	r0, r4, #21
 80357e2:	4584      	cmp	ip, r0
 80357e4:	bf38      	it	cc
 80357e6:	2304      	movcc	r3, #4
 80357e8:	50ca      	str	r2, [r1, r3]
 80357ea:	b10a      	cbz	r2, 80357f0 <__lshift+0xa4>
 80357ec:	f108 0602 	add.w	r6, r8, #2
 80357f0:	3e01      	subs	r6, #1
 80357f2:	4638      	mov	r0, r7
 80357f4:	612e      	str	r6, [r5, #16]
 80357f6:	4621      	mov	r1, r4
 80357f8:	f7ff fe0b 	bl	8035412 <_Bfree>
 80357fc:	4628      	mov	r0, r5
 80357fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8035802:	f842 0f04 	str.w	r0, [r2, #4]!
 8035806:	3301      	adds	r3, #1
 8035808:	e7c5      	b.n	8035796 <__lshift+0x4a>
 803580a:	3904      	subs	r1, #4
 803580c:	f853 2b04 	ldr.w	r2, [r3], #4
 8035810:	f841 2f04 	str.w	r2, [r1, #4]!
 8035814:	459c      	cmp	ip, r3
 8035816:	d8f9      	bhi.n	803580c <__lshift+0xc0>
 8035818:	e7ea      	b.n	80357f0 <__lshift+0xa4>
 803581a:	bf00      	nop
 803581c:	08036e8f 	.word	0x08036e8f
 8035820:	08036ef8 	.word	0x08036ef8

08035824 <__mcmp>:
 8035824:	b530      	push	{r4, r5, lr}
 8035826:	6902      	ldr	r2, [r0, #16]
 8035828:	690c      	ldr	r4, [r1, #16]
 803582a:	1b12      	subs	r2, r2, r4
 803582c:	d10e      	bne.n	803584c <__mcmp+0x28>
 803582e:	f100 0314 	add.w	r3, r0, #20
 8035832:	3114      	adds	r1, #20
 8035834:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8035838:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 803583c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8035840:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8035844:	42a5      	cmp	r5, r4
 8035846:	d003      	beq.n	8035850 <__mcmp+0x2c>
 8035848:	d305      	bcc.n	8035856 <__mcmp+0x32>
 803584a:	2201      	movs	r2, #1
 803584c:	4610      	mov	r0, r2
 803584e:	bd30      	pop	{r4, r5, pc}
 8035850:	4283      	cmp	r3, r0
 8035852:	d3f3      	bcc.n	803583c <__mcmp+0x18>
 8035854:	e7fa      	b.n	803584c <__mcmp+0x28>
 8035856:	f04f 32ff 	mov.w	r2, #4294967295
 803585a:	e7f7      	b.n	803584c <__mcmp+0x28>

0803585c <__mdiff>:
 803585c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035860:	460c      	mov	r4, r1
 8035862:	4606      	mov	r6, r0
 8035864:	4611      	mov	r1, r2
 8035866:	4620      	mov	r0, r4
 8035868:	4690      	mov	r8, r2
 803586a:	f7ff ffdb 	bl	8035824 <__mcmp>
 803586e:	1e05      	subs	r5, r0, #0
 8035870:	d110      	bne.n	8035894 <__mdiff+0x38>
 8035872:	4629      	mov	r1, r5
 8035874:	4630      	mov	r0, r6
 8035876:	f7ff fda7 	bl	80353c8 <_Balloc>
 803587a:	b930      	cbnz	r0, 803588a <__mdiff+0x2e>
 803587c:	4b3a      	ldr	r3, [pc, #232]	; (8035968 <__mdiff+0x10c>)
 803587e:	4602      	mov	r2, r0
 8035880:	f240 2137 	movw	r1, #567	; 0x237
 8035884:	4839      	ldr	r0, [pc, #228]	; (803596c <__mdiff+0x110>)
 8035886:	f000 fb69 	bl	8035f5c <__assert_func>
 803588a:	2301      	movs	r3, #1
 803588c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8035890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035894:	bfa4      	itt	ge
 8035896:	4643      	movge	r3, r8
 8035898:	46a0      	movge	r8, r4
 803589a:	4630      	mov	r0, r6
 803589c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80358a0:	bfa6      	itte	ge
 80358a2:	461c      	movge	r4, r3
 80358a4:	2500      	movge	r5, #0
 80358a6:	2501      	movlt	r5, #1
 80358a8:	f7ff fd8e 	bl	80353c8 <_Balloc>
 80358ac:	b920      	cbnz	r0, 80358b8 <__mdiff+0x5c>
 80358ae:	4b2e      	ldr	r3, [pc, #184]	; (8035968 <__mdiff+0x10c>)
 80358b0:	4602      	mov	r2, r0
 80358b2:	f240 2145 	movw	r1, #581	; 0x245
 80358b6:	e7e5      	b.n	8035884 <__mdiff+0x28>
 80358b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80358bc:	6926      	ldr	r6, [r4, #16]
 80358be:	60c5      	str	r5, [r0, #12]
 80358c0:	f104 0914 	add.w	r9, r4, #20
 80358c4:	f108 0514 	add.w	r5, r8, #20
 80358c8:	f100 0e14 	add.w	lr, r0, #20
 80358cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80358d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80358d4:	f108 0210 	add.w	r2, r8, #16
 80358d8:	46f2      	mov	sl, lr
 80358da:	2100      	movs	r1, #0
 80358dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80358e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80358e4:	fa11 f88b 	uxtah	r8, r1, fp
 80358e8:	b299      	uxth	r1, r3
 80358ea:	0c1b      	lsrs	r3, r3, #16
 80358ec:	eba8 0801 	sub.w	r8, r8, r1
 80358f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80358f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80358f8:	fa1f f888 	uxth.w	r8, r8
 80358fc:	1419      	asrs	r1, r3, #16
 80358fe:	454e      	cmp	r6, r9
 8035900:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8035904:	f84a 3b04 	str.w	r3, [sl], #4
 8035908:	d8e8      	bhi.n	80358dc <__mdiff+0x80>
 803590a:	1b33      	subs	r3, r6, r4
 803590c:	3b15      	subs	r3, #21
 803590e:	f023 0303 	bic.w	r3, r3, #3
 8035912:	3304      	adds	r3, #4
 8035914:	3415      	adds	r4, #21
 8035916:	42a6      	cmp	r6, r4
 8035918:	bf38      	it	cc
 803591a:	2304      	movcc	r3, #4
 803591c:	441d      	add	r5, r3
 803591e:	4473      	add	r3, lr
 8035920:	469e      	mov	lr, r3
 8035922:	462e      	mov	r6, r5
 8035924:	4566      	cmp	r6, ip
 8035926:	d30e      	bcc.n	8035946 <__mdiff+0xea>
 8035928:	f10c 0203 	add.w	r2, ip, #3
 803592c:	1b52      	subs	r2, r2, r5
 803592e:	f022 0203 	bic.w	r2, r2, #3
 8035932:	3d03      	subs	r5, #3
 8035934:	45ac      	cmp	ip, r5
 8035936:	bf38      	it	cc
 8035938:	2200      	movcc	r2, #0
 803593a:	4413      	add	r3, r2
 803593c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8035940:	b17a      	cbz	r2, 8035962 <__mdiff+0x106>
 8035942:	6107      	str	r7, [r0, #16]
 8035944:	e7a4      	b.n	8035890 <__mdiff+0x34>
 8035946:	f856 8b04 	ldr.w	r8, [r6], #4
 803594a:	fa11 f288 	uxtah	r2, r1, r8
 803594e:	1414      	asrs	r4, r2, #16
 8035950:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8035954:	b292      	uxth	r2, r2
 8035956:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 803595a:	f84e 2b04 	str.w	r2, [lr], #4
 803595e:	1421      	asrs	r1, r4, #16
 8035960:	e7e0      	b.n	8035924 <__mdiff+0xc8>
 8035962:	3f01      	subs	r7, #1
 8035964:	e7ea      	b.n	803593c <__mdiff+0xe0>
 8035966:	bf00      	nop
 8035968:	08036e8f 	.word	0x08036e8f
 803596c:	08036ef8 	.word	0x08036ef8

08035970 <__d2b>:
 8035970:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8035974:	460f      	mov	r7, r1
 8035976:	2101      	movs	r1, #1
 8035978:	ec59 8b10 	vmov	r8, r9, d0
 803597c:	4616      	mov	r6, r2
 803597e:	f7ff fd23 	bl	80353c8 <_Balloc>
 8035982:	4604      	mov	r4, r0
 8035984:	b930      	cbnz	r0, 8035994 <__d2b+0x24>
 8035986:	4602      	mov	r2, r0
 8035988:	4b24      	ldr	r3, [pc, #144]	; (8035a1c <__d2b+0xac>)
 803598a:	4825      	ldr	r0, [pc, #148]	; (8035a20 <__d2b+0xb0>)
 803598c:	f240 310f 	movw	r1, #783	; 0x30f
 8035990:	f000 fae4 	bl	8035f5c <__assert_func>
 8035994:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8035998:	f3c9 0313 	ubfx	r3, r9, #0, #20
 803599c:	bb2d      	cbnz	r5, 80359ea <__d2b+0x7a>
 803599e:	9301      	str	r3, [sp, #4]
 80359a0:	f1b8 0300 	subs.w	r3, r8, #0
 80359a4:	d026      	beq.n	80359f4 <__d2b+0x84>
 80359a6:	4668      	mov	r0, sp
 80359a8:	9300      	str	r3, [sp, #0]
 80359aa:	f7ff fda1 	bl	80354f0 <__lo0bits>
 80359ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80359b2:	b1e8      	cbz	r0, 80359f0 <__d2b+0x80>
 80359b4:	f1c0 0320 	rsb	r3, r0, #32
 80359b8:	fa02 f303 	lsl.w	r3, r2, r3
 80359bc:	430b      	orrs	r3, r1
 80359be:	40c2      	lsrs	r2, r0
 80359c0:	6163      	str	r3, [r4, #20]
 80359c2:	9201      	str	r2, [sp, #4]
 80359c4:	9b01      	ldr	r3, [sp, #4]
 80359c6:	61a3      	str	r3, [r4, #24]
 80359c8:	2b00      	cmp	r3, #0
 80359ca:	bf14      	ite	ne
 80359cc:	2202      	movne	r2, #2
 80359ce:	2201      	moveq	r2, #1
 80359d0:	6122      	str	r2, [r4, #16]
 80359d2:	b1bd      	cbz	r5, 8035a04 <__d2b+0x94>
 80359d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80359d8:	4405      	add	r5, r0
 80359da:	603d      	str	r5, [r7, #0]
 80359dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80359e0:	6030      	str	r0, [r6, #0]
 80359e2:	4620      	mov	r0, r4
 80359e4:	b003      	add	sp, #12
 80359e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80359ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80359ee:	e7d6      	b.n	803599e <__d2b+0x2e>
 80359f0:	6161      	str	r1, [r4, #20]
 80359f2:	e7e7      	b.n	80359c4 <__d2b+0x54>
 80359f4:	a801      	add	r0, sp, #4
 80359f6:	f7ff fd7b 	bl	80354f0 <__lo0bits>
 80359fa:	9b01      	ldr	r3, [sp, #4]
 80359fc:	6163      	str	r3, [r4, #20]
 80359fe:	3020      	adds	r0, #32
 8035a00:	2201      	movs	r2, #1
 8035a02:	e7e5      	b.n	80359d0 <__d2b+0x60>
 8035a04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8035a08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8035a0c:	6038      	str	r0, [r7, #0]
 8035a0e:	6918      	ldr	r0, [r3, #16]
 8035a10:	f7ff fd4e 	bl	80354b0 <__hi0bits>
 8035a14:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8035a18:	e7e2      	b.n	80359e0 <__d2b+0x70>
 8035a1a:	bf00      	nop
 8035a1c:	08036e8f 	.word	0x08036e8f
 8035a20:	08036ef8 	.word	0x08036ef8

08035a24 <_realloc_r>:
 8035a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035a28:	4682      	mov	sl, r0
 8035a2a:	460c      	mov	r4, r1
 8035a2c:	b929      	cbnz	r1, 8035a3a <_realloc_r+0x16>
 8035a2e:	4611      	mov	r1, r2
 8035a30:	b003      	add	sp, #12
 8035a32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035a36:	f7fc b8a1 	b.w	8031b7c <_malloc_r>
 8035a3a:	9201      	str	r2, [sp, #4]
 8035a3c:	f7fc fad8 	bl	8031ff0 <__malloc_lock>
 8035a40:	9a01      	ldr	r2, [sp, #4]
 8035a42:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8035a46:	f102 080b 	add.w	r8, r2, #11
 8035a4a:	f1b8 0f16 	cmp.w	r8, #22
 8035a4e:	d90b      	bls.n	8035a68 <_realloc_r+0x44>
 8035a50:	f038 0807 	bics.w	r8, r8, #7
 8035a54:	d50a      	bpl.n	8035a6c <_realloc_r+0x48>
 8035a56:	230c      	movs	r3, #12
 8035a58:	f8ca 3000 	str.w	r3, [sl]
 8035a5c:	f04f 0b00 	mov.w	fp, #0
 8035a60:	4658      	mov	r0, fp
 8035a62:	b003      	add	sp, #12
 8035a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035a68:	f04f 0810 	mov.w	r8, #16
 8035a6c:	4590      	cmp	r8, r2
 8035a6e:	d3f2      	bcc.n	8035a56 <_realloc_r+0x32>
 8035a70:	f025 0603 	bic.w	r6, r5, #3
 8035a74:	45b0      	cmp	r8, r6
 8035a76:	f1a4 0908 	sub.w	r9, r4, #8
 8035a7a:	f340 8170 	ble.w	8035d5e <_realloc_r+0x33a>
 8035a7e:	499c      	ldr	r1, [pc, #624]	; (8035cf0 <_realloc_r+0x2cc>)
 8035a80:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8035a84:	eb09 0306 	add.w	r3, r9, r6
 8035a88:	459c      	cmp	ip, r3
 8035a8a:	6859      	ldr	r1, [r3, #4]
 8035a8c:	d005      	beq.n	8035a9a <_realloc_r+0x76>
 8035a8e:	f021 0001 	bic.w	r0, r1, #1
 8035a92:	4418      	add	r0, r3
 8035a94:	6840      	ldr	r0, [r0, #4]
 8035a96:	07c7      	lsls	r7, r0, #31
 8035a98:	d447      	bmi.n	8035b2a <_realloc_r+0x106>
 8035a9a:	f021 0103 	bic.w	r1, r1, #3
 8035a9e:	459c      	cmp	ip, r3
 8035aa0:	eb06 0701 	add.w	r7, r6, r1
 8035aa4:	d119      	bne.n	8035ada <_realloc_r+0xb6>
 8035aa6:	f108 0010 	add.w	r0, r8, #16
 8035aaa:	42b8      	cmp	r0, r7
 8035aac:	dc3f      	bgt.n	8035b2e <_realloc_r+0x10a>
 8035aae:	eb09 0308 	add.w	r3, r9, r8
 8035ab2:	4a8f      	ldr	r2, [pc, #572]	; (8035cf0 <_realloc_r+0x2cc>)
 8035ab4:	eba7 0708 	sub.w	r7, r7, r8
 8035ab8:	f047 0701 	orr.w	r7, r7, #1
 8035abc:	6093      	str	r3, [r2, #8]
 8035abe:	605f      	str	r7, [r3, #4]
 8035ac0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8035ac4:	f003 0301 	and.w	r3, r3, #1
 8035ac8:	ea43 0308 	orr.w	r3, r3, r8
 8035acc:	f844 3c04 	str.w	r3, [r4, #-4]
 8035ad0:	4650      	mov	r0, sl
 8035ad2:	f7fc fa93 	bl	8031ffc <__malloc_unlock>
 8035ad6:	46a3      	mov	fp, r4
 8035ad8:	e7c2      	b.n	8035a60 <_realloc_r+0x3c>
 8035ada:	45b8      	cmp	r8, r7
 8035adc:	dc27      	bgt.n	8035b2e <_realloc_r+0x10a>
 8035ade:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8035ae2:	60da      	str	r2, [r3, #12]
 8035ae4:	6093      	str	r3, [r2, #8]
 8035ae6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8035aea:	eba7 0008 	sub.w	r0, r7, r8
 8035aee:	280f      	cmp	r0, #15
 8035af0:	f003 0301 	and.w	r3, r3, #1
 8035af4:	eb09 0207 	add.w	r2, r9, r7
 8035af8:	f240 8133 	bls.w	8035d62 <_realloc_r+0x33e>
 8035afc:	eb09 0108 	add.w	r1, r9, r8
 8035b00:	ea48 0303 	orr.w	r3, r8, r3
 8035b04:	f040 0001 	orr.w	r0, r0, #1
 8035b08:	f8c9 3004 	str.w	r3, [r9, #4]
 8035b0c:	6048      	str	r0, [r1, #4]
 8035b0e:	6853      	ldr	r3, [r2, #4]
 8035b10:	f043 0301 	orr.w	r3, r3, #1
 8035b14:	6053      	str	r3, [r2, #4]
 8035b16:	3108      	adds	r1, #8
 8035b18:	4650      	mov	r0, sl
 8035b1a:	f7fb ff6f 	bl	80319fc <_free_r>
 8035b1e:	4650      	mov	r0, sl
 8035b20:	f7fc fa6c 	bl	8031ffc <__malloc_unlock>
 8035b24:	f109 0b08 	add.w	fp, r9, #8
 8035b28:	e79a      	b.n	8035a60 <_realloc_r+0x3c>
 8035b2a:	2100      	movs	r1, #0
 8035b2c:	460b      	mov	r3, r1
 8035b2e:	07e8      	lsls	r0, r5, #31
 8035b30:	f100 80c6 	bmi.w	8035cc0 <_realloc_r+0x29c>
 8035b34:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8035b38:	eba9 0505 	sub.w	r5, r9, r5
 8035b3c:	6868      	ldr	r0, [r5, #4]
 8035b3e:	f020 0003 	bic.w	r0, r0, #3
 8035b42:	eb00 0b06 	add.w	fp, r0, r6
 8035b46:	2b00      	cmp	r3, #0
 8035b48:	f000 8086 	beq.w	8035c58 <_realloc_r+0x234>
 8035b4c:	459c      	cmp	ip, r3
 8035b4e:	eb01 070b 	add.w	r7, r1, fp
 8035b52:	d149      	bne.n	8035be8 <_realloc_r+0x1c4>
 8035b54:	f108 0310 	add.w	r3, r8, #16
 8035b58:	42bb      	cmp	r3, r7
 8035b5a:	dc7d      	bgt.n	8035c58 <_realloc_r+0x234>
 8035b5c:	46ab      	mov	fp, r5
 8035b5e:	68eb      	ldr	r3, [r5, #12]
 8035b60:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8035b64:	60d3      	str	r3, [r2, #12]
 8035b66:	609a      	str	r2, [r3, #8]
 8035b68:	1f32      	subs	r2, r6, #4
 8035b6a:	2a24      	cmp	r2, #36	; 0x24
 8035b6c:	d837      	bhi.n	8035bde <_realloc_r+0x1ba>
 8035b6e:	2a13      	cmp	r2, #19
 8035b70:	d933      	bls.n	8035bda <_realloc_r+0x1b6>
 8035b72:	6823      	ldr	r3, [r4, #0]
 8035b74:	60ab      	str	r3, [r5, #8]
 8035b76:	6863      	ldr	r3, [r4, #4]
 8035b78:	60eb      	str	r3, [r5, #12]
 8035b7a:	2a1b      	cmp	r2, #27
 8035b7c:	d81b      	bhi.n	8035bb6 <_realloc_r+0x192>
 8035b7e:	3408      	adds	r4, #8
 8035b80:	f105 0310 	add.w	r3, r5, #16
 8035b84:	6822      	ldr	r2, [r4, #0]
 8035b86:	601a      	str	r2, [r3, #0]
 8035b88:	6862      	ldr	r2, [r4, #4]
 8035b8a:	605a      	str	r2, [r3, #4]
 8035b8c:	68a2      	ldr	r2, [r4, #8]
 8035b8e:	609a      	str	r2, [r3, #8]
 8035b90:	eb05 0308 	add.w	r3, r5, r8
 8035b94:	4a56      	ldr	r2, [pc, #344]	; (8035cf0 <_realloc_r+0x2cc>)
 8035b96:	eba7 0708 	sub.w	r7, r7, r8
 8035b9a:	f047 0701 	orr.w	r7, r7, #1
 8035b9e:	6093      	str	r3, [r2, #8]
 8035ba0:	605f      	str	r7, [r3, #4]
 8035ba2:	686b      	ldr	r3, [r5, #4]
 8035ba4:	f003 0301 	and.w	r3, r3, #1
 8035ba8:	ea43 0308 	orr.w	r3, r3, r8
 8035bac:	606b      	str	r3, [r5, #4]
 8035bae:	4650      	mov	r0, sl
 8035bb0:	f7fc fa24 	bl	8031ffc <__malloc_unlock>
 8035bb4:	e754      	b.n	8035a60 <_realloc_r+0x3c>
 8035bb6:	68a3      	ldr	r3, [r4, #8]
 8035bb8:	612b      	str	r3, [r5, #16]
 8035bba:	68e3      	ldr	r3, [r4, #12]
 8035bbc:	616b      	str	r3, [r5, #20]
 8035bbe:	2a24      	cmp	r2, #36	; 0x24
 8035bc0:	bf01      	itttt	eq
 8035bc2:	6923      	ldreq	r3, [r4, #16]
 8035bc4:	61ab      	streq	r3, [r5, #24]
 8035bc6:	6962      	ldreq	r2, [r4, #20]
 8035bc8:	61ea      	streq	r2, [r5, #28]
 8035bca:	bf19      	ittee	ne
 8035bcc:	3410      	addne	r4, #16
 8035bce:	f105 0318 	addne.w	r3, r5, #24
 8035bd2:	f105 0320 	addeq.w	r3, r5, #32
 8035bd6:	3418      	addeq	r4, #24
 8035bd8:	e7d4      	b.n	8035b84 <_realloc_r+0x160>
 8035bda:	465b      	mov	r3, fp
 8035bdc:	e7d2      	b.n	8035b84 <_realloc_r+0x160>
 8035bde:	4621      	mov	r1, r4
 8035be0:	4658      	mov	r0, fp
 8035be2:	f7fe fca2 	bl	803452a <memmove>
 8035be6:	e7d3      	b.n	8035b90 <_realloc_r+0x16c>
 8035be8:	45b8      	cmp	r8, r7
 8035bea:	dc35      	bgt.n	8035c58 <_realloc_r+0x234>
 8035bec:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8035bf0:	4628      	mov	r0, r5
 8035bf2:	60da      	str	r2, [r3, #12]
 8035bf4:	6093      	str	r3, [r2, #8]
 8035bf6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8035bfa:	68eb      	ldr	r3, [r5, #12]
 8035bfc:	60d3      	str	r3, [r2, #12]
 8035bfe:	609a      	str	r2, [r3, #8]
 8035c00:	1f32      	subs	r2, r6, #4
 8035c02:	2a24      	cmp	r2, #36	; 0x24
 8035c04:	d824      	bhi.n	8035c50 <_realloc_r+0x22c>
 8035c06:	2a13      	cmp	r2, #19
 8035c08:	d908      	bls.n	8035c1c <_realloc_r+0x1f8>
 8035c0a:	6823      	ldr	r3, [r4, #0]
 8035c0c:	60ab      	str	r3, [r5, #8]
 8035c0e:	6863      	ldr	r3, [r4, #4]
 8035c10:	60eb      	str	r3, [r5, #12]
 8035c12:	2a1b      	cmp	r2, #27
 8035c14:	d80a      	bhi.n	8035c2c <_realloc_r+0x208>
 8035c16:	3408      	adds	r4, #8
 8035c18:	f105 0010 	add.w	r0, r5, #16
 8035c1c:	6823      	ldr	r3, [r4, #0]
 8035c1e:	6003      	str	r3, [r0, #0]
 8035c20:	6863      	ldr	r3, [r4, #4]
 8035c22:	6043      	str	r3, [r0, #4]
 8035c24:	68a3      	ldr	r3, [r4, #8]
 8035c26:	6083      	str	r3, [r0, #8]
 8035c28:	46a9      	mov	r9, r5
 8035c2a:	e75c      	b.n	8035ae6 <_realloc_r+0xc2>
 8035c2c:	68a3      	ldr	r3, [r4, #8]
 8035c2e:	612b      	str	r3, [r5, #16]
 8035c30:	68e3      	ldr	r3, [r4, #12]
 8035c32:	616b      	str	r3, [r5, #20]
 8035c34:	2a24      	cmp	r2, #36	; 0x24
 8035c36:	bf01      	itttt	eq
 8035c38:	6923      	ldreq	r3, [r4, #16]
 8035c3a:	61ab      	streq	r3, [r5, #24]
 8035c3c:	6963      	ldreq	r3, [r4, #20]
 8035c3e:	61eb      	streq	r3, [r5, #28]
 8035c40:	bf19      	ittee	ne
 8035c42:	3410      	addne	r4, #16
 8035c44:	f105 0018 	addne.w	r0, r5, #24
 8035c48:	f105 0020 	addeq.w	r0, r5, #32
 8035c4c:	3418      	addeq	r4, #24
 8035c4e:	e7e5      	b.n	8035c1c <_realloc_r+0x1f8>
 8035c50:	4621      	mov	r1, r4
 8035c52:	f7fe fc6a 	bl	803452a <memmove>
 8035c56:	e7e7      	b.n	8035c28 <_realloc_r+0x204>
 8035c58:	45d8      	cmp	r8, fp
 8035c5a:	dc31      	bgt.n	8035cc0 <_realloc_r+0x29c>
 8035c5c:	4628      	mov	r0, r5
 8035c5e:	68eb      	ldr	r3, [r5, #12]
 8035c60:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8035c64:	60d3      	str	r3, [r2, #12]
 8035c66:	609a      	str	r2, [r3, #8]
 8035c68:	1f32      	subs	r2, r6, #4
 8035c6a:	2a24      	cmp	r2, #36	; 0x24
 8035c6c:	d824      	bhi.n	8035cb8 <_realloc_r+0x294>
 8035c6e:	2a13      	cmp	r2, #19
 8035c70:	d908      	bls.n	8035c84 <_realloc_r+0x260>
 8035c72:	6823      	ldr	r3, [r4, #0]
 8035c74:	60ab      	str	r3, [r5, #8]
 8035c76:	6863      	ldr	r3, [r4, #4]
 8035c78:	60eb      	str	r3, [r5, #12]
 8035c7a:	2a1b      	cmp	r2, #27
 8035c7c:	d80a      	bhi.n	8035c94 <_realloc_r+0x270>
 8035c7e:	3408      	adds	r4, #8
 8035c80:	f105 0010 	add.w	r0, r5, #16
 8035c84:	6823      	ldr	r3, [r4, #0]
 8035c86:	6003      	str	r3, [r0, #0]
 8035c88:	6863      	ldr	r3, [r4, #4]
 8035c8a:	6043      	str	r3, [r0, #4]
 8035c8c:	68a3      	ldr	r3, [r4, #8]
 8035c8e:	6083      	str	r3, [r0, #8]
 8035c90:	465f      	mov	r7, fp
 8035c92:	e7c9      	b.n	8035c28 <_realloc_r+0x204>
 8035c94:	68a3      	ldr	r3, [r4, #8]
 8035c96:	612b      	str	r3, [r5, #16]
 8035c98:	68e3      	ldr	r3, [r4, #12]
 8035c9a:	616b      	str	r3, [r5, #20]
 8035c9c:	2a24      	cmp	r2, #36	; 0x24
 8035c9e:	bf01      	itttt	eq
 8035ca0:	6923      	ldreq	r3, [r4, #16]
 8035ca2:	61ab      	streq	r3, [r5, #24]
 8035ca4:	6963      	ldreq	r3, [r4, #20]
 8035ca6:	61eb      	streq	r3, [r5, #28]
 8035ca8:	bf19      	ittee	ne
 8035caa:	3410      	addne	r4, #16
 8035cac:	f105 0018 	addne.w	r0, r5, #24
 8035cb0:	f105 0020 	addeq.w	r0, r5, #32
 8035cb4:	3418      	addeq	r4, #24
 8035cb6:	e7e5      	b.n	8035c84 <_realloc_r+0x260>
 8035cb8:	4621      	mov	r1, r4
 8035cba:	f7fe fc36 	bl	803452a <memmove>
 8035cbe:	e7e7      	b.n	8035c90 <_realloc_r+0x26c>
 8035cc0:	4611      	mov	r1, r2
 8035cc2:	4650      	mov	r0, sl
 8035cc4:	f7fb ff5a 	bl	8031b7c <_malloc_r>
 8035cc8:	4683      	mov	fp, r0
 8035cca:	2800      	cmp	r0, #0
 8035ccc:	f43f af6f 	beq.w	8035bae <_realloc_r+0x18a>
 8035cd0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8035cd4:	f023 0301 	bic.w	r3, r3, #1
 8035cd8:	444b      	add	r3, r9
 8035cda:	f1a0 0208 	sub.w	r2, r0, #8
 8035cde:	4293      	cmp	r3, r2
 8035ce0:	d108      	bne.n	8035cf4 <_realloc_r+0x2d0>
 8035ce2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8035ce6:	f027 0703 	bic.w	r7, r7, #3
 8035cea:	4437      	add	r7, r6
 8035cec:	e6fb      	b.n	8035ae6 <_realloc_r+0xc2>
 8035cee:	bf00      	nop
 8035cf0:	200003b0 	.word	0x200003b0
 8035cf4:	1f32      	subs	r2, r6, #4
 8035cf6:	2a24      	cmp	r2, #36	; 0x24
 8035cf8:	d82d      	bhi.n	8035d56 <_realloc_r+0x332>
 8035cfa:	2a13      	cmp	r2, #19
 8035cfc:	d928      	bls.n	8035d50 <_realloc_r+0x32c>
 8035cfe:	6823      	ldr	r3, [r4, #0]
 8035d00:	6003      	str	r3, [r0, #0]
 8035d02:	6863      	ldr	r3, [r4, #4]
 8035d04:	6043      	str	r3, [r0, #4]
 8035d06:	2a1b      	cmp	r2, #27
 8035d08:	d80e      	bhi.n	8035d28 <_realloc_r+0x304>
 8035d0a:	f104 0208 	add.w	r2, r4, #8
 8035d0e:	f100 0308 	add.w	r3, r0, #8
 8035d12:	6811      	ldr	r1, [r2, #0]
 8035d14:	6019      	str	r1, [r3, #0]
 8035d16:	6851      	ldr	r1, [r2, #4]
 8035d18:	6059      	str	r1, [r3, #4]
 8035d1a:	6892      	ldr	r2, [r2, #8]
 8035d1c:	609a      	str	r2, [r3, #8]
 8035d1e:	4621      	mov	r1, r4
 8035d20:	4650      	mov	r0, sl
 8035d22:	f7fb fe6b 	bl	80319fc <_free_r>
 8035d26:	e742      	b.n	8035bae <_realloc_r+0x18a>
 8035d28:	68a3      	ldr	r3, [r4, #8]
 8035d2a:	6083      	str	r3, [r0, #8]
 8035d2c:	68e3      	ldr	r3, [r4, #12]
 8035d2e:	60c3      	str	r3, [r0, #12]
 8035d30:	2a24      	cmp	r2, #36	; 0x24
 8035d32:	bf01      	itttt	eq
 8035d34:	6923      	ldreq	r3, [r4, #16]
 8035d36:	6103      	streq	r3, [r0, #16]
 8035d38:	6961      	ldreq	r1, [r4, #20]
 8035d3a:	6141      	streq	r1, [r0, #20]
 8035d3c:	bf19      	ittee	ne
 8035d3e:	f104 0210 	addne.w	r2, r4, #16
 8035d42:	f100 0310 	addne.w	r3, r0, #16
 8035d46:	f104 0218 	addeq.w	r2, r4, #24
 8035d4a:	f100 0318 	addeq.w	r3, r0, #24
 8035d4e:	e7e0      	b.n	8035d12 <_realloc_r+0x2ee>
 8035d50:	4603      	mov	r3, r0
 8035d52:	4622      	mov	r2, r4
 8035d54:	e7dd      	b.n	8035d12 <_realloc_r+0x2ee>
 8035d56:	4621      	mov	r1, r4
 8035d58:	f7fe fbe7 	bl	803452a <memmove>
 8035d5c:	e7df      	b.n	8035d1e <_realloc_r+0x2fa>
 8035d5e:	4637      	mov	r7, r6
 8035d60:	e6c1      	b.n	8035ae6 <_realloc_r+0xc2>
 8035d62:	431f      	orrs	r7, r3
 8035d64:	f8c9 7004 	str.w	r7, [r9, #4]
 8035d68:	6853      	ldr	r3, [r2, #4]
 8035d6a:	f043 0301 	orr.w	r3, r3, #1
 8035d6e:	6053      	str	r3, [r2, #4]
 8035d70:	e6d5      	b.n	8035b1e <_realloc_r+0xfa>
 8035d72:	bf00      	nop

08035d74 <__ascii_wctomb>:
 8035d74:	b149      	cbz	r1, 8035d8a <__ascii_wctomb+0x16>
 8035d76:	2aff      	cmp	r2, #255	; 0xff
 8035d78:	bf85      	ittet	hi
 8035d7a:	238a      	movhi	r3, #138	; 0x8a
 8035d7c:	6003      	strhi	r3, [r0, #0]
 8035d7e:	700a      	strbls	r2, [r1, #0]
 8035d80:	f04f 30ff 	movhi.w	r0, #4294967295
 8035d84:	bf98      	it	ls
 8035d86:	2001      	movls	r0, #1
 8035d88:	4770      	bx	lr
 8035d8a:	4608      	mov	r0, r1
 8035d8c:	4770      	bx	lr
	...

08035d90 <_wcrtomb_r>:
 8035d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8035d92:	4c09      	ldr	r4, [pc, #36]	; (8035db8 <_wcrtomb_r+0x28>)
 8035d94:	b085      	sub	sp, #20
 8035d96:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8035d9a:	4605      	mov	r5, r0
 8035d9c:	461e      	mov	r6, r3
 8035d9e:	b909      	cbnz	r1, 8035da4 <_wcrtomb_r+0x14>
 8035da0:	460a      	mov	r2, r1
 8035da2:	a901      	add	r1, sp, #4
 8035da4:	47b8      	blx	r7
 8035da6:	1c43      	adds	r3, r0, #1
 8035da8:	bf01      	itttt	eq
 8035daa:	2300      	moveq	r3, #0
 8035dac:	6033      	streq	r3, [r6, #0]
 8035dae:	238a      	moveq	r3, #138	; 0x8a
 8035db0:	602b      	streq	r3, [r5, #0]
 8035db2:	b005      	add	sp, #20
 8035db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8035db6:	bf00      	nop
 8035db8:	200007c0 	.word	0x200007c0

08035dbc <__swhatbuf_r>:
 8035dbc:	b570      	push	{r4, r5, r6, lr}
 8035dbe:	460c      	mov	r4, r1
 8035dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8035dc4:	2900      	cmp	r1, #0
 8035dc6:	b096      	sub	sp, #88	; 0x58
 8035dc8:	4615      	mov	r5, r2
 8035dca:	461e      	mov	r6, r3
 8035dcc:	da07      	bge.n	8035dde <__swhatbuf_r+0x22>
 8035dce:	89a1      	ldrh	r1, [r4, #12]
 8035dd0:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8035dd4:	d017      	beq.n	8035e06 <__swhatbuf_r+0x4a>
 8035dd6:	2100      	movs	r1, #0
 8035dd8:	2340      	movs	r3, #64	; 0x40
 8035dda:	4608      	mov	r0, r1
 8035ddc:	e00f      	b.n	8035dfe <__swhatbuf_r+0x42>
 8035dde:	466a      	mov	r2, sp
 8035de0:	f000 f89a 	bl	8035f18 <_fstat_r>
 8035de4:	2800      	cmp	r0, #0
 8035de6:	dbf2      	blt.n	8035dce <__swhatbuf_r+0x12>
 8035de8:	9901      	ldr	r1, [sp, #4]
 8035dea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8035dee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8035df2:	4259      	negs	r1, r3
 8035df4:	4159      	adcs	r1, r3
 8035df6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8035dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8035dfe:	6031      	str	r1, [r6, #0]
 8035e00:	602b      	str	r3, [r5, #0]
 8035e02:	b016      	add	sp, #88	; 0x58
 8035e04:	bd70      	pop	{r4, r5, r6, pc}
 8035e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8035e0a:	e7e6      	b.n	8035dda <__swhatbuf_r+0x1e>

08035e0c <__smakebuf_r>:
 8035e0c:	898b      	ldrh	r3, [r1, #12]
 8035e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8035e10:	079d      	lsls	r5, r3, #30
 8035e12:	4606      	mov	r6, r0
 8035e14:	460c      	mov	r4, r1
 8035e16:	d507      	bpl.n	8035e28 <__smakebuf_r+0x1c>
 8035e18:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8035e1c:	6023      	str	r3, [r4, #0]
 8035e1e:	6123      	str	r3, [r4, #16]
 8035e20:	2301      	movs	r3, #1
 8035e22:	6163      	str	r3, [r4, #20]
 8035e24:	b002      	add	sp, #8
 8035e26:	bd70      	pop	{r4, r5, r6, pc}
 8035e28:	ab01      	add	r3, sp, #4
 8035e2a:	466a      	mov	r2, sp
 8035e2c:	f7ff ffc6 	bl	8035dbc <__swhatbuf_r>
 8035e30:	9900      	ldr	r1, [sp, #0]
 8035e32:	4605      	mov	r5, r0
 8035e34:	4630      	mov	r0, r6
 8035e36:	f7fb fea1 	bl	8031b7c <_malloc_r>
 8035e3a:	b948      	cbnz	r0, 8035e50 <__smakebuf_r+0x44>
 8035e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035e40:	059a      	lsls	r2, r3, #22
 8035e42:	d4ef      	bmi.n	8035e24 <__smakebuf_r+0x18>
 8035e44:	f023 0303 	bic.w	r3, r3, #3
 8035e48:	f043 0302 	orr.w	r3, r3, #2
 8035e4c:	81a3      	strh	r3, [r4, #12]
 8035e4e:	e7e3      	b.n	8035e18 <__smakebuf_r+0xc>
 8035e50:	89a3      	ldrh	r3, [r4, #12]
 8035e52:	6020      	str	r0, [r4, #0]
 8035e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8035e58:	81a3      	strh	r3, [r4, #12]
 8035e5a:	9b00      	ldr	r3, [sp, #0]
 8035e5c:	6163      	str	r3, [r4, #20]
 8035e5e:	9b01      	ldr	r3, [sp, #4]
 8035e60:	6120      	str	r0, [r4, #16]
 8035e62:	b15b      	cbz	r3, 8035e7c <__smakebuf_r+0x70>
 8035e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8035e68:	4630      	mov	r0, r6
 8035e6a:	f000 f867 	bl	8035f3c <_isatty_r>
 8035e6e:	b128      	cbz	r0, 8035e7c <__smakebuf_r+0x70>
 8035e70:	89a3      	ldrh	r3, [r4, #12]
 8035e72:	f023 0303 	bic.w	r3, r3, #3
 8035e76:	f043 0301 	orr.w	r3, r3, #1
 8035e7a:	81a3      	strh	r3, [r4, #12]
 8035e7c:	89a3      	ldrh	r3, [r4, #12]
 8035e7e:	431d      	orrs	r5, r3
 8035e80:	81a5      	strh	r5, [r4, #12]
 8035e82:	e7cf      	b.n	8035e24 <__smakebuf_r+0x18>

08035e84 <__swbuf_r>:
 8035e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035e86:	460e      	mov	r6, r1
 8035e88:	4614      	mov	r4, r2
 8035e8a:	4605      	mov	r5, r0
 8035e8c:	b118      	cbz	r0, 8035e96 <__swbuf_r+0x12>
 8035e8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8035e90:	b90b      	cbnz	r3, 8035e96 <__swbuf_r+0x12>
 8035e92:	f7fb fbeb 	bl	803166c <__sinit>
 8035e96:	69a3      	ldr	r3, [r4, #24]
 8035e98:	60a3      	str	r3, [r4, #8]
 8035e9a:	89a3      	ldrh	r3, [r4, #12]
 8035e9c:	0719      	lsls	r1, r3, #28
 8035e9e:	d529      	bpl.n	8035ef4 <__swbuf_r+0x70>
 8035ea0:	6923      	ldr	r3, [r4, #16]
 8035ea2:	b33b      	cbz	r3, 8035ef4 <__swbuf_r+0x70>
 8035ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035ea8:	b2f6      	uxtb	r6, r6
 8035eaa:	049a      	lsls	r2, r3, #18
 8035eac:	4637      	mov	r7, r6
 8035eae:	d52a      	bpl.n	8035f06 <__swbuf_r+0x82>
 8035eb0:	6823      	ldr	r3, [r4, #0]
 8035eb2:	6922      	ldr	r2, [r4, #16]
 8035eb4:	1a98      	subs	r0, r3, r2
 8035eb6:	6963      	ldr	r3, [r4, #20]
 8035eb8:	4283      	cmp	r3, r0
 8035eba:	dc04      	bgt.n	8035ec6 <__swbuf_r+0x42>
 8035ebc:	4621      	mov	r1, r4
 8035ebe:	4628      	mov	r0, r5
 8035ec0:	f7fe f900 	bl	80340c4 <_fflush_r>
 8035ec4:	b9e0      	cbnz	r0, 8035f00 <__swbuf_r+0x7c>
 8035ec6:	68a3      	ldr	r3, [r4, #8]
 8035ec8:	3b01      	subs	r3, #1
 8035eca:	60a3      	str	r3, [r4, #8]
 8035ecc:	6823      	ldr	r3, [r4, #0]
 8035ece:	1c5a      	adds	r2, r3, #1
 8035ed0:	6022      	str	r2, [r4, #0]
 8035ed2:	701e      	strb	r6, [r3, #0]
 8035ed4:	6962      	ldr	r2, [r4, #20]
 8035ed6:	1c43      	adds	r3, r0, #1
 8035ed8:	429a      	cmp	r2, r3
 8035eda:	d004      	beq.n	8035ee6 <__swbuf_r+0x62>
 8035edc:	89a3      	ldrh	r3, [r4, #12]
 8035ede:	07db      	lsls	r3, r3, #31
 8035ee0:	d506      	bpl.n	8035ef0 <__swbuf_r+0x6c>
 8035ee2:	2e0a      	cmp	r6, #10
 8035ee4:	d104      	bne.n	8035ef0 <__swbuf_r+0x6c>
 8035ee6:	4621      	mov	r1, r4
 8035ee8:	4628      	mov	r0, r5
 8035eea:	f7fe f8eb 	bl	80340c4 <_fflush_r>
 8035eee:	b938      	cbnz	r0, 8035f00 <__swbuf_r+0x7c>
 8035ef0:	4638      	mov	r0, r7
 8035ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8035ef4:	4621      	mov	r1, r4
 8035ef6:	4628      	mov	r0, r5
 8035ef8:	f7fe fa54 	bl	80343a4 <__swsetup_r>
 8035efc:	2800      	cmp	r0, #0
 8035efe:	d0d1      	beq.n	8035ea4 <__swbuf_r+0x20>
 8035f00:	f04f 37ff 	mov.w	r7, #4294967295
 8035f04:	e7f4      	b.n	8035ef0 <__swbuf_r+0x6c>
 8035f06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8035f0a:	81a3      	strh	r3, [r4, #12]
 8035f0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8035f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8035f12:	6663      	str	r3, [r4, #100]	; 0x64
 8035f14:	e7cc      	b.n	8035eb0 <__swbuf_r+0x2c>
	...

08035f18 <_fstat_r>:
 8035f18:	b538      	push	{r3, r4, r5, lr}
 8035f1a:	4d07      	ldr	r5, [pc, #28]	; (8035f38 <_fstat_r+0x20>)
 8035f1c:	2300      	movs	r3, #0
 8035f1e:	4604      	mov	r4, r0
 8035f20:	4608      	mov	r0, r1
 8035f22:	4611      	mov	r1, r2
 8035f24:	602b      	str	r3, [r5, #0]
 8035f26:	f7f1 fd47 	bl	80279b8 <_fstat>
 8035f2a:	1c43      	adds	r3, r0, #1
 8035f2c:	d102      	bne.n	8035f34 <_fstat_r+0x1c>
 8035f2e:	682b      	ldr	r3, [r5, #0]
 8035f30:	b103      	cbz	r3, 8035f34 <_fstat_r+0x1c>
 8035f32:	6023      	str	r3, [r4, #0]
 8035f34:	bd38      	pop	{r3, r4, r5, pc}
 8035f36:	bf00      	nop
 8035f38:	20008be4 	.word	0x20008be4

08035f3c <_isatty_r>:
 8035f3c:	b538      	push	{r3, r4, r5, lr}
 8035f3e:	4d06      	ldr	r5, [pc, #24]	; (8035f58 <_isatty_r+0x1c>)
 8035f40:	2300      	movs	r3, #0
 8035f42:	4604      	mov	r4, r0
 8035f44:	4608      	mov	r0, r1
 8035f46:	602b      	str	r3, [r5, #0]
 8035f48:	f7f1 fd46 	bl	80279d8 <_isatty>
 8035f4c:	1c43      	adds	r3, r0, #1
 8035f4e:	d102      	bne.n	8035f56 <_isatty_r+0x1a>
 8035f50:	682b      	ldr	r3, [r5, #0]
 8035f52:	b103      	cbz	r3, 8035f56 <_isatty_r+0x1a>
 8035f54:	6023      	str	r3, [r4, #0]
 8035f56:	bd38      	pop	{r3, r4, r5, pc}
 8035f58:	20008be4 	.word	0x20008be4

08035f5c <__assert_func>:
 8035f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8035f5e:	4614      	mov	r4, r2
 8035f60:	461a      	mov	r2, r3
 8035f62:	4b09      	ldr	r3, [pc, #36]	; (8035f88 <__assert_func+0x2c>)
 8035f64:	681b      	ldr	r3, [r3, #0]
 8035f66:	4605      	mov	r5, r0
 8035f68:	68d8      	ldr	r0, [r3, #12]
 8035f6a:	b14c      	cbz	r4, 8035f80 <__assert_func+0x24>
 8035f6c:	4b07      	ldr	r3, [pc, #28]	; (8035f8c <__assert_func+0x30>)
 8035f6e:	9100      	str	r1, [sp, #0]
 8035f70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8035f74:	4906      	ldr	r1, [pc, #24]	; (8035f90 <__assert_func+0x34>)
 8035f76:	462b      	mov	r3, r5
 8035f78:	f000 f844 	bl	8036004 <fiprintf>
 8035f7c:	f000 f854 	bl	8036028 <abort>
 8035f80:	4b04      	ldr	r3, [pc, #16]	; (8035f94 <__assert_func+0x38>)
 8035f82:	461c      	mov	r4, r3
 8035f84:	e7f3      	b.n	8035f6e <__assert_func+0x12>
 8035f86:	bf00      	nop
 8035f88:	200003a8 	.word	0x200003a8
 8035f8c:	08037155 	.word	0x08037155
 8035f90:	08037162 	.word	0x08037162
 8035f94:	08037190 	.word	0x08037190

08035f98 <_calloc_r>:
 8035f98:	b538      	push	{r3, r4, r5, lr}
 8035f9a:	fba1 1502 	umull	r1, r5, r1, r2
 8035f9e:	b92d      	cbnz	r5, 8035fac <_calloc_r+0x14>
 8035fa0:	f7fb fdec 	bl	8031b7c <_malloc_r>
 8035fa4:	4604      	mov	r4, r0
 8035fa6:	b938      	cbnz	r0, 8035fb8 <_calloc_r+0x20>
 8035fa8:	4620      	mov	r0, r4
 8035faa:	bd38      	pop	{r3, r4, r5, pc}
 8035fac:	f7fb fc86 	bl	80318bc <__errno>
 8035fb0:	230c      	movs	r3, #12
 8035fb2:	6003      	str	r3, [r0, #0]
 8035fb4:	2400      	movs	r4, #0
 8035fb6:	e7f7      	b.n	8035fa8 <_calloc_r+0x10>
 8035fb8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8035fbc:	f022 0203 	bic.w	r2, r2, #3
 8035fc0:	3a04      	subs	r2, #4
 8035fc2:	2a24      	cmp	r2, #36	; 0x24
 8035fc4:	d819      	bhi.n	8035ffa <_calloc_r+0x62>
 8035fc6:	2a13      	cmp	r2, #19
 8035fc8:	d915      	bls.n	8035ff6 <_calloc_r+0x5e>
 8035fca:	2a1b      	cmp	r2, #27
 8035fcc:	e9c0 5500 	strd	r5, r5, [r0]
 8035fd0:	d806      	bhi.n	8035fe0 <_calloc_r+0x48>
 8035fd2:	f100 0308 	add.w	r3, r0, #8
 8035fd6:	2200      	movs	r2, #0
 8035fd8:	e9c3 2200 	strd	r2, r2, [r3]
 8035fdc:	609a      	str	r2, [r3, #8]
 8035fde:	e7e3      	b.n	8035fa8 <_calloc_r+0x10>
 8035fe0:	2a24      	cmp	r2, #36	; 0x24
 8035fe2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8035fe6:	bf11      	iteee	ne
 8035fe8:	f100 0310 	addne.w	r3, r0, #16
 8035fec:	6105      	streq	r5, [r0, #16]
 8035fee:	f100 0318 	addeq.w	r3, r0, #24
 8035ff2:	6145      	streq	r5, [r0, #20]
 8035ff4:	e7ef      	b.n	8035fd6 <_calloc_r+0x3e>
 8035ff6:	4603      	mov	r3, r0
 8035ff8:	e7ed      	b.n	8035fd6 <_calloc_r+0x3e>
 8035ffa:	4629      	mov	r1, r5
 8035ffc:	f7fb fc0f 	bl	803181e <memset>
 8036000:	e7d2      	b.n	8035fa8 <_calloc_r+0x10>
	...

08036004 <fiprintf>:
 8036004:	b40e      	push	{r1, r2, r3}
 8036006:	b503      	push	{r0, r1, lr}
 8036008:	4601      	mov	r1, r0
 803600a:	ab03      	add	r3, sp, #12
 803600c:	4805      	ldr	r0, [pc, #20]	; (8036024 <fiprintf+0x20>)
 803600e:	f853 2b04 	ldr.w	r2, [r3], #4
 8036012:	6800      	ldr	r0, [r0, #0]
 8036014:	9301      	str	r3, [sp, #4]
 8036016:	f7fd fa9d 	bl	8033554 <_vfiprintf_r>
 803601a:	b002      	add	sp, #8
 803601c:	f85d eb04 	ldr.w	lr, [sp], #4
 8036020:	b003      	add	sp, #12
 8036022:	4770      	bx	lr
 8036024:	200003a8 	.word	0x200003a8

08036028 <abort>:
 8036028:	b508      	push	{r3, lr}
 803602a:	2006      	movs	r0, #6
 803602c:	f000 f82c 	bl	8036088 <raise>
 8036030:	2001      	movs	r0, #1
 8036032:	f7f1 fc8e 	bl	8027952 <_exit>

08036036 <_raise_r>:
 8036036:	291f      	cmp	r1, #31
 8036038:	b538      	push	{r3, r4, r5, lr}
 803603a:	4604      	mov	r4, r0
 803603c:	460d      	mov	r5, r1
 803603e:	d904      	bls.n	803604a <_raise_r+0x14>
 8036040:	2316      	movs	r3, #22
 8036042:	6003      	str	r3, [r0, #0]
 8036044:	f04f 30ff 	mov.w	r0, #4294967295
 8036048:	bd38      	pop	{r3, r4, r5, pc}
 803604a:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 803604e:	b112      	cbz	r2, 8036056 <_raise_r+0x20>
 8036050:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8036054:	b94b      	cbnz	r3, 803606a <_raise_r+0x34>
 8036056:	4620      	mov	r0, r4
 8036058:	f000 f830 	bl	80360bc <_getpid_r>
 803605c:	462a      	mov	r2, r5
 803605e:	4601      	mov	r1, r0
 8036060:	4620      	mov	r0, r4
 8036062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8036066:	f000 b817 	b.w	8036098 <_kill_r>
 803606a:	2b01      	cmp	r3, #1
 803606c:	d00a      	beq.n	8036084 <_raise_r+0x4e>
 803606e:	1c59      	adds	r1, r3, #1
 8036070:	d103      	bne.n	803607a <_raise_r+0x44>
 8036072:	2316      	movs	r3, #22
 8036074:	6003      	str	r3, [r0, #0]
 8036076:	2001      	movs	r0, #1
 8036078:	e7e6      	b.n	8036048 <_raise_r+0x12>
 803607a:	2400      	movs	r4, #0
 803607c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8036080:	4628      	mov	r0, r5
 8036082:	4798      	blx	r3
 8036084:	2000      	movs	r0, #0
 8036086:	e7df      	b.n	8036048 <_raise_r+0x12>

08036088 <raise>:
 8036088:	4b02      	ldr	r3, [pc, #8]	; (8036094 <raise+0xc>)
 803608a:	4601      	mov	r1, r0
 803608c:	6818      	ldr	r0, [r3, #0]
 803608e:	f7ff bfd2 	b.w	8036036 <_raise_r>
 8036092:	bf00      	nop
 8036094:	200003a8 	.word	0x200003a8

08036098 <_kill_r>:
 8036098:	b538      	push	{r3, r4, r5, lr}
 803609a:	4d07      	ldr	r5, [pc, #28]	; (80360b8 <_kill_r+0x20>)
 803609c:	2300      	movs	r3, #0
 803609e:	4604      	mov	r4, r0
 80360a0:	4608      	mov	r0, r1
 80360a2:	4611      	mov	r1, r2
 80360a4:	602b      	str	r3, [r5, #0]
 80360a6:	f7f1 fc44 	bl	8027932 <_kill>
 80360aa:	1c43      	adds	r3, r0, #1
 80360ac:	d102      	bne.n	80360b4 <_kill_r+0x1c>
 80360ae:	682b      	ldr	r3, [r5, #0]
 80360b0:	b103      	cbz	r3, 80360b4 <_kill_r+0x1c>
 80360b2:	6023      	str	r3, [r4, #0]
 80360b4:	bd38      	pop	{r3, r4, r5, pc}
 80360b6:	bf00      	nop
 80360b8:	20008be4 	.word	0x20008be4

080360bc <_getpid_r>:
 80360bc:	f7f1 bc31 	b.w	8027922 <_getpid>

080360c0 <_init>:
 80360c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80360c2:	bf00      	nop
 80360c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80360c6:	bc08      	pop	{r3}
 80360c8:	469e      	mov	lr, r3
 80360ca:	4770      	bx	lr

080360cc <_fini>:
 80360cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80360ce:	bf00      	nop
 80360d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80360d2:	bc08      	pop	{r3}
 80360d4:	469e      	mov	lr, r3
 80360d6:	4770      	bx	lr
