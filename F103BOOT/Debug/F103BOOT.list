
F103BOOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a60  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002c44  08002c44  00012c44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf4  08002cf4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002cf4  08002cf4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cf4  08002cf4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf4  08002cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000068  08002d64  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00001804  20000254  08002d64  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6be  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e3c  00000000  00000000  0002d792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  000305d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008df  00000000  00000000  00030f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abff  00000000  00000000  000317ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011448  00000000  00000000  0004c3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000950f4  00000000  00000000  0005d836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ec8  00000000  00000000  000f292c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00005194  00000000  00000000  000f47f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  000f9988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	08002c2c 	.word	0x08002c2c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	08002c2c 	.word	0x08002c2c

08000224 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000224:	2300      	movs	r3, #0
{
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	e9cd 3308 	strd	r3, r3, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800022e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000232:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000236:	699a      	ldr	r2, [r3, #24]
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000238:	2403      	movs	r4, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800023a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800023e:	619a      	str	r2, [r3, #24]
 8000240:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000242:	f64f 75ff 	movw	r5, #65535	; 0xffff
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000246:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800024a:	9201      	str	r2, [sp, #4]
 800024c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800024e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000250:	a906      	add	r1, sp, #24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000252:	f042 0210 	orr.w	r2, r2, #16
 8000256:	619a      	str	r2, [r3, #24]
 8000258:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800025a:	4820      	ldr	r0, [pc, #128]	; (80002dc <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800025c:	f002 0210 	and.w	r2, r2, #16
 8000260:	9202      	str	r2, [sp, #8]
 8000262:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000264:	699a      	ldr	r2, [r3, #24]
 8000266:	f042 0204 	orr.w	r2, r2, #4
 800026a:	619a      	str	r2, [r3, #24]
 800026c:	699a      	ldr	r2, [r3, #24]
 800026e:	f002 0204 	and.w	r2, r2, #4
 8000272:	9203      	str	r2, [sp, #12]
 8000274:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000276:	699a      	ldr	r2, [r3, #24]
 8000278:	f042 0208 	orr.w	r2, r2, #8
 800027c:	619a      	str	r2, [r3, #24]
 800027e:	699a      	ldr	r2, [r3, #24]
 8000280:	f002 0208 	and.w	r2, r2, #8
 8000284:	9204      	str	r2, [sp, #16]
 8000286:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000288:	699a      	ldr	r2, [r3, #24]
 800028a:	f042 0220 	orr.w	r2, r2, #32
 800028e:	619a      	str	r2, [r3, #24]
 8000290:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000292:	e9cd 5406 	strd	r5, r4, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000296:	f003 0320 	and.w	r3, r3, #32
 800029a:	9305      	str	r3, [sp, #20]
 800029c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800029e:	f000 fc4b 	bl	8000b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a2:	a906      	add	r1, sp, #24
 80002a4:	480e      	ldr	r0, [pc, #56]	; (80002e0 <MX_GPIO_Init+0xbc>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002a6:	e9cd 5406 	strd	r5, r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002aa:	f000 fc45 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002ae:	f649 13ff 	movw	r3, #39423	; 0x99ff
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b2:	a906      	add	r1, sp, #24
 80002b4:	480b      	ldr	r0, [pc, #44]	; (80002e4 <MX_GPIO_Init+0xc0>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ba:	f000 fc3d 	bl	8000b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002be:	a906      	add	r1, sp, #24
 80002c0:	4809      	ldr	r0, [pc, #36]	; (80002e8 <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002c2:	e9cd 5406 	strd	r5, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c6:	f000 fc37 	bl	8000b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80002ca:	4808      	ldr	r0, [pc, #32]	; (80002ec <MX_GPIO_Init+0xc8>)
 80002cc:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ce:	e9cd 5406 	strd	r5, r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80002d2:	f000 fc31 	bl	8000b38 <HAL_GPIO_Init>

}
 80002d6:	b00b      	add	sp, #44	; 0x2c
 80002d8:	bd30      	pop	{r4, r5, pc}
 80002da:	bf00      	nop
 80002dc:	40011800 	.word	0x40011800
 80002e0:	40011000 	.word	0x40011000
 80002e4:	40010800 	.word	0x40010800
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	40011400 	.word	0x40011400

080002f0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80002f0:	b510      	push	{r4, lr}
 80002f2:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80002f4:	f04f 33ff 	mov.w	r3, #4294967295
 80002f8:	b292      	uxth	r2, r2
 80002fa:	4802      	ldr	r0, [pc, #8]	; (8000304 <_write+0x14>)
 80002fc:	f001 faff 	bl	80018fe <HAL_UART_Transmit>
    return len;
}
 8000300:	4620      	mov	r0, r4
 8000302:	bd10      	pop	{r4, pc}
 8000304:	2000009c 	.word	0x2000009c

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b530      	push	{r4, r5, lr}
 800030a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030c:	2210      	movs	r2, #16
 800030e:	2100      	movs	r1, #0
 8000310:	a80e      	add	r0, sp, #56	; 0x38
 8000312:	f001 fef9 	bl	8002108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000316:	2214      	movs	r2, #20
 8000318:	2100      	movs	r1, #0
 800031a:	a801      	add	r0, sp, #4
 800031c:	f001 fef4 	bl	8002108 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000320:	2218      	movs	r2, #24
 8000322:	2100      	movs	r1, #0
 8000324:	eb0d 0002 	add.w	r0, sp, r2
 8000328:	f001 feee 	bl	8002108 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032c:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800032e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000332:	2209      	movs	r2, #9
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000334:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000336:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033a:	e9cd 5313 	strd	r5, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800033e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000344:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000346:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000348:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	f000 fcf3 	bl	8000d34 <HAL_RCC_OscConfig>
 800034e:	b108      	cbz	r0, 8000354 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000350:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000352:	e7fe      	b.n	8000352 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000364:	4629      	mov	r1, r5
 8000366:	a801      	add	r0, sp, #4
 8000368:	f000 fea6 	bl	80010b8 <HAL_RCC_ClockConfig>
 800036c:	b108      	cbz	r0, 8000372 <SystemClock_Config+0x6a>
 800036e:	b672      	cpsid	i
  while (1)
 8000370:	e7fe      	b.n	8000370 <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000372:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000376:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000378:	9406      	str	r4, [sp, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800037a:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037c:	f000 ff58 	bl	8001230 <HAL_RCCEx_PeriphCLKConfig>
 8000380:	b108      	cbz	r0, 8000386 <SystemClock_Config+0x7e>
 8000382:	b672      	cpsid	i
  while (1)
 8000384:	e7fe      	b.n	8000384 <SystemClock_Config+0x7c>
}
 8000386:	b017      	add	sp, #92	; 0x5c
 8000388:	bd30      	pop	{r4, r5, pc}
	...

0800038c <main>:
{
 800038c:	b508      	push	{r3, lr}
  HAL_Init();
 800038e:	f000 f9c3 	bl	8000718 <HAL_Init>
  SystemClock_Config();
 8000392:	f7ff ffb9 	bl	8000308 <SystemClock_Config>
  MX_GPIO_Init();
 8000396:	f7ff ff45 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800039a:	f000 f913 	bl	80005c4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800039e:	f000 f835 	bl	800040c <MX_RTC_Init>
  printf(VERSION);
 80003a2:	4811      	ldr	r0, [pc, #68]	; (80003e8 <main+0x5c>)
 80003a4:	f001 fdd0 	bl	8001f48 <puts>
  printf("Start application: ");
 80003a8:	4810      	ldr	r0, [pc, #64]	; (80003ec <main+0x60>)
 80003aa:	f001 fd67 	bl	8001e7c <iprintf>
  if (!config->active_image) {
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <main+0x64>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	b983      	cbnz	r3, 80003d6 <main+0x4a>
      printf(" 0\r\n");
 80003b4:	480f      	ldr	r0, [pc, #60]	; (80003f4 <main+0x68>)
 80003b6:	f001 fdc7 	bl	8001f48 <puts>
      jump_addr = *(__IO uint32_t *)(APP1_ADDRESS + 4);
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <main+0x6c>)
 80003bc:	685a      	ldr	r2, [r3, #4]
      sp_addr = *(__IO uint32_t *)APP1_ADDRESS;
 80003be:	6819      	ldr	r1, [r3, #0]
      vt_offset = APP1_ADDRESS_OFFSET;
 80003c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  SCB->VTOR = FLASH_BASE | vt_offset;
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <main+0x70>)
 80003c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80003ca:	6083      	str	r3, [r0, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80003cc:	f381 8808 	msr	MSP, r1
  app();
 80003d0:	4790      	blx	r2
}
 80003d2:	2000      	movs	r0, #0
 80003d4:	bd08      	pop	{r3, pc}
      printf(" 1\r\n");
 80003d6:	480a      	ldr	r0, [pc, #40]	; (8000400 <main+0x74>)
 80003d8:	f001 fdb6 	bl	8001f48 <puts>
      jump_addr = *(__IO uint32_t *)(APP2_ADDRESS + 4);
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <main+0x78>)
 80003de:	685a      	ldr	r2, [r3, #4]
      sp_addr = *(__IO uint32_t *)APP2_ADDRESS;
 80003e0:	6819      	ldr	r1, [r3, #0]
      vt_offset = APP2_ADDRESS_OFFSET;
 80003e2:	f44f 3308 	mov.w	r3, #139264	; 0x22000
 80003e6:	e7ed      	b.n	80003c4 <main+0x38>
 80003e8:	08002c44 	.word	0x08002c44
 80003ec:	08002c69 	.word	0x08002c69
 80003f0:	08003800 	.word	0x08003800
 80003f4:	08002c7d 	.word	0x08002c7d
 80003f8:	08004000 	.word	0x08004000
 80003fc:	e000ed00 	.word	0xe000ed00
 8000400:	08002c81 	.word	0x08002c81
 8000404:	08022000 	.word	0x08022000

08000408 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000408:	b672      	cpsid	i
  while (1)
 800040a:	e7fe      	b.n	800040a <Error_Handler+0x2>

0800040c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800040c:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800040e:	f04f 33ff 	mov.w	r3, #4294967295
  RTC_TimeTypeDef sTime = {0};
 8000412:	2400      	movs	r4, #0
  hrtc.Instance = RTC;
 8000414:	4813      	ldr	r0, [pc, #76]	; (8000464 <MX_RTC_Init+0x58>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000416:	4a14      	ldr	r2, [pc, #80]	; (8000468 <MX_RTC_Init+0x5c>)
  RTC_TimeTypeDef sTime = {0};
 8000418:	f8ad 4000 	strh.w	r4, [sp]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800041c:	e9c0 2300 	strd	r2, r3, [r0]
  RTC_TimeTypeDef sTime = {0};
 8000420:	f88d 4002 	strb.w	r4, [sp, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000424:	9401      	str	r4, [sp, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000426:	6084      	str	r4, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000428:	f001 f954 	bl	80016d4 <HAL_RTC_Init>
 800042c:	b108      	cbz	r0, 8000432 <MX_RTC_Init+0x26>
  {
    Error_Handler();
 800042e:	f7ff ffeb 	bl	8000408 <Error_Handler>
  */
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000432:	2201      	movs	r2, #1
 8000434:	4669      	mov	r1, sp
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <MX_RTC_Init+0x58>)
  sTime.Hours = 0x0;
 8000438:	f8ad 4000 	strh.w	r4, [sp]
  sTime.Seconds = 0x0;
 800043c:	f88d 4002 	strb.w	r4, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000440:	f001 f885 	bl	800154e <HAL_RTC_SetTime>
 8000444:	b108      	cbz	r0, 800044a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000446:	f7ff ffdf 	bl	8000408 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_RTC_Init+0x60>)
  DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.Date = 0x1;
  DateToUpdate.Year = 0x0;

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800044c:	2201      	movs	r2, #1
 800044e:	4805      	ldr	r0, [pc, #20]	; (8000464 <MX_RTC_Init+0x58>)
 8000450:	a901      	add	r1, sp, #4
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000452:	9301      	str	r3, [sp, #4]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000454:	f001 f8cc 	bl	80015f0 <HAL_RTC_SetDate>
 8000458:	b108      	cbz	r0, 800045e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800045a:	f7ff ffd5 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800045e:	b002      	add	sp, #8
 8000460:	bd10      	pop	{r4, pc}
 8000462:	bf00      	nop
 8000464:	20000084 	.word	0x20000084
 8000468:	40002800 	.word	0x40002800
 800046c:	00010101 	.word	0x00010101

08000470 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000470:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <HAL_RTC_MspInit+0x30>)
 8000474:	6802      	ldr	r2, [r0, #0]
 8000476:	429a      	cmp	r2, r3
 8000478:	d10f      	bne.n	800049a <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800047a:	f000 fc45 	bl	8000d08 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_RTC_MspInit+0x34>)
 8000480:	69da      	ldr	r2, [r3, #28]
 8000482:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000486:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000488:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8000494:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <HAL_RTC_MspInit+0x38>)
 8000496:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800049a:	b003      	add	sp, #12
 800049c:	f85d fb04 	ldr.w	pc, [sp], #4
 80004a0:	40002800 	.word	0x40002800
 80004a4:	40021000 	.word	0x40021000
 80004a8:	42420000 	.word	0x42420000

080004ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ac:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <HAL_MspInit+0x6c>)
{
 80004ae:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80004b2:	2001      	movs	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b4:	f042 0201 	orr.w	r2, r2, #1
 80004b8:	619a      	str	r2, [r3, #24]
 80004ba:	699a      	ldr	r2, [r3, #24]
 80004bc:	f002 0201 	and.w	r2, r2, #1
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c4:	69da      	ldr	r2, [r3, #28]
 80004c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004ca:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80004cc:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80004d0:	4611      	mov	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80004da:	f000 f953 	bl	8000784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80004de:	2001      	movs	r0, #1
 80004e0:	f000 f980 	bl	80007e4 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2004      	movs	r0, #4
 80004e8:	4611      	mov	r1, r2
 80004ea:	f000 f94b 	bl	8000784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80004ee:	2004      	movs	r0, #4
 80004f0:	f000 f978 	bl	80007e4 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2005      	movs	r0, #5
 80004f8:	4611      	mov	r1, r2
 80004fa:	f000 f943 	bl	8000784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80004fe:	2005      	movs	r0, #5
 8000500:	f000 f970 	bl	80007e4 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <HAL_MspInit+0x70>)
 8000506:	6853      	ldr	r3, [r2, #4]
 8000508:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	b003      	add	sp, #12
 8000514:	f85d fb04 	ldr.w	pc, [sp], #4
 8000518:	40021000 	.word	0x40021000
 800051c:	40010000 	.word	0x40010000

08000520 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <NMI_Handler>

08000522 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <HardFault_Handler>

08000524 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <MemManage_Handler>

08000526 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <BusFault_Handler>

08000528 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler>

0800052a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052a:	4770      	bx	lr

0800052c <DebugMon_Handler>:
 800052c:	4770      	bx	lr

0800052e <PendSV_Handler>:
 800052e:	4770      	bx	lr

08000530 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000530:	f000 b904 	b.w	800073c <HAL_IncTick>

08000534 <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000534:	f000 bbf0 	b.w	8000d18 <HAL_PWR_PVD_IRQHandler>

08000538 <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)
{
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000538:	f000 ba62 	b.w	8000a00 <HAL_FLASH_IRQHandler>

0800053c <RCC_IRQHandler>:
 800053c:	4770      	bx	lr
	...

08000540 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000540:	4801      	ldr	r0, [pc, #4]	; (8000548 <USART1_IRQHandler+0x8>)
 8000542:	f001 ba8f 	b.w	8001a64 <HAL_UART_IRQHandler>
 8000546:	bf00      	nop
 8000548:	2000009c 	.word	0x2000009c

0800054c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	460d      	mov	r5, r1
 8000550:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000552:	460e      	mov	r6, r1
 8000554:	1b73      	subs	r3, r6, r5
 8000556:	429c      	cmp	r4, r3
 8000558:	dc01      	bgt.n	800055e <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800055a:	4620      	mov	r0, r4
 800055c:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800055e:	f3af 8000 	nop.w
 8000562:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	e7f5      	b.n	8000554 <_read+0x8>

08000568 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	4770      	bx	lr

0800056e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800056e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8000572:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000574:	604b      	str	r3, [r1, #4]
}
 8000576:	4770      	bx	lr

08000578 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000578:	2001      	movs	r0, #1
 800057a:	4770      	bx	lr

0800057c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800057c:	2000      	movs	r0, #0
 800057e:	4770      	bx	lr

08000580 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000580:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <_sbrk+0x30>)
{
 8000582:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000584:	6811      	ldr	r1, [r2, #0]
{
 8000586:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000588:	b909      	cbnz	r1, 800058e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800058a:	490a      	ldr	r1, [pc, #40]	; (80005b4 <_sbrk+0x34>)
 800058c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800058e:	6810      	ldr	r0, [r2, #0]
 8000590:	4909      	ldr	r1, [pc, #36]	; (80005b8 <_sbrk+0x38>)
 8000592:	4c0a      	ldr	r4, [pc, #40]	; (80005bc <_sbrk+0x3c>)
 8000594:	4403      	add	r3, r0
 8000596:	1b09      	subs	r1, r1, r4
 8000598:	428b      	cmp	r3, r1
 800059a:	d906      	bls.n	80005aa <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800059c:	f001 fe02 	bl	80021a4 <__errno>
 80005a0:	230c      	movs	r3, #12
 80005a2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80005a8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80005aa:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80005ac:	e7fc      	b.n	80005a8 <_sbrk+0x28>
 80005ae:	bf00      	nop
 80005b0:	20000098 	.word	0x20000098
 80005b4:	20000258 	.word	0x20000258
 80005b8:	2000c000 	.word	0x2000c000
 80005bc:	00001000 	.word	0x00001000

080005c0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c0:	4770      	bx	lr
	...

080005c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80005c4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80005c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <MX_USART1_UART_Init+0x34>)
 80005ce:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005d4:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005da:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005de:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005e2:	f001 f95d 	bl	80018a0 <HAL_UART_Init>
 80005e6:	b118      	cbz	r0, 80005f0 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80005ec:	f7ff bf0c 	b.w	8000408 <Error_Handler>
}
 80005f0:	bd08      	pop	{r3, pc}
 80005f2:	bf00      	nop
 80005f4:	2000009c 	.word	0x2000009c
 80005f8:	40013800 	.word	0x40013800

080005fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005fc:	b510      	push	{r4, lr}
 80005fe:	4604      	mov	r4, r0
 8000600:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	2210      	movs	r2, #16
 8000604:	2100      	movs	r1, #0
 8000606:	a802      	add	r0, sp, #8
 8000608:	f001 fd7e 	bl	8002108 <memset>
  if(uartHandle->Instance==USART1)
 800060c:	6822      	ldr	r2, [r4, #0]
 800060e:	4b1b      	ldr	r3, [pc, #108]	; (800067c <HAL_UART_MspInit+0x80>)
 8000610:	429a      	cmp	r2, r3
 8000612:	d130      	bne.n	8000676 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000614:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000618:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	4819      	ldr	r0, [pc, #100]	; (8000680 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800061c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000620:	619a      	str	r2, [r3, #24]
 8000622:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8000626:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000630:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	f042 0204 	orr.w	r2, r2, #4
 8000636:	619a      	str	r2, [r3, #24]
 8000638:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f000 fa72 	bl	8000b38 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <HAL_UART_MspInit+0x84>)
 800065a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f000 fa69 	bl	8000b38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000666:	2025      	movs	r0, #37	; 0x25
 8000668:	4622      	mov	r2, r4
 800066a:	4621      	mov	r1, r4
 800066c:	f000 f88a 	bl	8000784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000670:	2025      	movs	r0, #37	; 0x25
 8000672:	f000 f8b7 	bl	80007e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000676:	b006      	add	sp, #24
 8000678:	bd10      	pop	{r4, pc}
 800067a:	bf00      	nop
 800067c:	40013800 	.word	0x40013800
 8000680:	40010800 	.word	0x40010800

08000684 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000684:	f7ff ff9c 	bl	80005c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800068a:	490c      	ldr	r1, [pc, #48]	; (80006bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800068c:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000690:	e002      	b.n	8000698 <LoopCopyDataInit>

08000692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000696:	3304      	adds	r3, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800069c:	d3f9      	bcc.n	8000692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069e:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006a0:	4c09      	ldr	r4, [pc, #36]	; (80006c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a4:	e001      	b.n	80006aa <LoopFillZerobss>

080006a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a8:	3204      	adds	r2, #4

080006aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ac:	d3fb      	bcc.n	80006a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ae:	f001 fd7f 	bl	80021b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b2:	f7ff fe6b 	bl	800038c <main>
  bx lr
 80006b6:	4770      	bx	lr
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006c0:	08002cfc 	.word	0x08002cfc
  ldr r2, =_sbss
 80006c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006c8:	20000254 	.word	0x20000254

080006cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC1_2_IRQHandler>
	...

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <HAL_InitTick+0x3c>)
{
 80006d4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80006e0:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <HAL_InitTick+0x40>)
 80006e2:	6810      	ldr	r0, [r2, #0]
 80006e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80006e8:	f000 f88a 	bl	8000800 <HAL_SYSTICK_Config>
 80006ec:	4604      	mov	r4, r0
 80006ee:	b958      	cbnz	r0, 8000708 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f0:	2d0f      	cmp	r5, #15
 80006f2:	d809      	bhi.n	8000708 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f4:	4602      	mov	r2, r0
 80006f6:	4629      	mov	r1, r5
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295
 80006fc:	f000 f842 	bl	8000784 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000700:	4620      	mov	r0, r4
 8000702:	4b04      	ldr	r3, [pc, #16]	; (8000714 <HAL_InitTick+0x44>)
 8000704:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000706:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000708:	2001      	movs	r0, #1
 800070a:	e7fc      	b.n	8000706 <HAL_InitTick+0x36>
 800070c:	20000004 	.word	0x20000004
 8000710:	20000000 	.word	0x20000000
 8000714:	20000008 	.word	0x20000008

08000718 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000718:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_Init+0x20>)
{
 800071a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	f043 0310 	orr.w	r3, r3, #16
 8000724:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000726:	f000 f81b 	bl	8000760 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800072a:	200f      	movs	r0, #15
 800072c:	f7ff ffd0 	bl	80006d0 <HAL_InitTick>
  HAL_MspInit();
 8000730:	f7ff febc 	bl	80004ac <HAL_MspInit>
}
 8000734:	2000      	movs	r0, #0
 8000736:	bd08      	pop	{r3, pc}
 8000738:	40022000 	.word	0x40022000

0800073c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <HAL_IncTick+0x10>)
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <HAL_IncTick+0x14>)
 8000740:	6811      	ldr	r1, [r2, #0]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	440b      	add	r3, r1
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	200000e4 	.word	0x200000e4
 8000750:	20000004 	.word	0x20000004

08000754 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000754:	4b01      	ldr	r3, [pc, #4]	; (800075c <HAL_GetTick+0x8>)
 8000756:	6818      	ldr	r0, [r3, #0]
}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	200000e4 	.word	0x200000e4

08000760 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000760:	4907      	ldr	r1, [pc, #28]	; (8000780 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000762:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800076e:	0412      	lsls	r2, r2, #16
 8000770:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800077c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000786:	b530      	push	{r4, r5, lr}
 8000788:	68dc      	ldr	r4, [r3, #12]
 800078a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800078e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	2b04      	cmp	r3, #4
 8000796:	bf28      	it	cs
 8000798:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a0:	bf94      	ite	ls
 80007a2:	2400      	movls	r4, #0
 80007a4:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a6:	fa05 f303 	lsl.w	r3, r5, r3
 80007aa:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ae:	40a5      	lsls	r5, r4
 80007b0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80007b6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	bfac      	ite	ge
 80007be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	4a07      	ldrlt	r2, [pc, #28]	; (80007e0 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	bfab      	itete	ge
 80007cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80007da:	bd30      	pop	{r4, r5, pc}
 80007dc:	e000ed00 	.word	0xe000ed00
 80007e0:	e000ed14 	.word	0xe000ed14

080007e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007e4:	2800      	cmp	r0, #0
 80007e6:	db07      	blt.n	80007f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e8:	2301      	movs	r3, #1
 80007ea:	0941      	lsrs	r1, r0, #5
 80007ec:	4a03      	ldr	r2, [pc, #12]	; (80007fc <HAL_NVIC_EnableIRQ+0x18>)
 80007ee:	f000 001f 	and.w	r0, r0, #31
 80007f2:	4083      	lsls	r3, r0
 80007f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000e100 	.word	0xe000e100

08000800 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	3801      	subs	r0, #1
 8000802:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000806:	d20b      	bcs.n	8000820 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000808:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	21f0      	movs	r1, #240	; 0xf0
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000810:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000812:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000816:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000818:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800081e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000820:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000828:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800082c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800082e:	2a02      	cmp	r2, #2
 8000830:	d006      	beq.n	8000840 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000832:	2204      	movs	r2, #4
 8000834:	6382      	str	r2, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8000836:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8000838:	2200      	movs	r2, #0
 800083a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 800083e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000840:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000842:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000844:	6811      	ldr	r1, [r2, #0]
 8000846:	f021 010e 	bic.w	r1, r1, #14
 800084a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800084c:	6811      	ldr	r1, [r2, #0]
 800084e:	f021 0101 	bic.w	r1, r1, #1
 8000852:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000854:	2101      	movs	r1, #1
 8000856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000858:	fa01 f202 	lsl.w	r2, r1, r2
 800085c:	6042      	str	r2, [r0, #4]
  return status; 
 800085e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000860:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 8000864:	e7e8      	b.n	8000838 <HAL_DMA_Abort+0x10>
	...

08000868 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000868:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800086a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800086e:	2b02      	cmp	r3, #2
 8000870:	d003      	beq.n	800087a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000872:	2304      	movs	r3, #4
 8000874:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000876:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000878:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800087a:	6803      	ldr	r3, [r0, #0]
 800087c:	4945      	ldr	r1, [pc, #276]	; (8000994 <HAL_DMA_Abort_IT+0x12c>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	f022 020e 	bic.w	r2, r2, #14
 8000884:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	f022 0201 	bic.w	r2, r2, #1
 800088c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800088e:	4a42      	ldr	r2, [pc, #264]	; (8000998 <HAL_DMA_Abort_IT+0x130>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d944      	bls.n	800091e <HAL_DMA_Abort_IT+0xb6>
 8000894:	428b      	cmp	r3, r1
 8000896:	d03b      	beq.n	8000910 <HAL_DMA_Abort_IT+0xa8>
 8000898:	3114      	adds	r1, #20
 800089a:	428b      	cmp	r3, r1
 800089c:	d03a      	beq.n	8000914 <HAL_DMA_Abort_IT+0xac>
 800089e:	3114      	adds	r1, #20
 80008a0:	428b      	cmp	r3, r1
 80008a2:	d039      	beq.n	8000918 <HAL_DMA_Abort_IT+0xb0>
 80008a4:	3114      	adds	r1, #20
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d026      	beq.n	80008f8 <HAL_DMA_Abort_IT+0x90>
 80008aa:	3114      	adds	r1, #20
 80008ac:	428b      	cmp	r3, r1
 80008ae:	d026      	beq.n	80008fe <HAL_DMA_Abort_IT+0x96>
 80008b0:	3114      	adds	r1, #20
 80008b2:	428b      	cmp	r3, r1
 80008b4:	d026      	beq.n	8000904 <HAL_DMA_Abort_IT+0x9c>
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d027      	beq.n	800090a <HAL_DMA_Abort_IT+0xa2>
 80008ba:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80008be:	4293      	cmp	r3, r2
 80008c0:	d026      	beq.n	8000910 <HAL_DMA_Abort_IT+0xa8>
 80008c2:	3214      	adds	r2, #20
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d025      	beq.n	8000914 <HAL_DMA_Abort_IT+0xac>
 80008c8:	3214      	adds	r2, #20
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d024      	beq.n	8000918 <HAL_DMA_Abort_IT+0xb0>
 80008ce:	3214      	adds	r2, #20
 80008d0:	4293      	cmp	r3, r2
 80008d2:	bf14      	ite	ne
 80008d4:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80008d8:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80008dc:	4a2f      	ldr	r2, [pc, #188]	; (800099c <HAL_DMA_Abort_IT+0x134>)
 80008de:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80008e0:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80008e2:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80008e4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80008e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80008ea:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d04d      	beq.n	800098e <HAL_DMA_Abort_IT+0x126>
      hdma->XferAbortCallback(hdma);
 80008f2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80008f4:	4620      	mov	r0, r4
 80008f6:	e7bf      	b.n	8000878 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	e7ee      	b.n	80008dc <HAL_DMA_Abort_IT+0x74>
 80008fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000902:	e7eb      	b.n	80008dc <HAL_DMA_Abort_IT+0x74>
 8000904:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000908:	e7e8      	b.n	80008dc <HAL_DMA_Abort_IT+0x74>
 800090a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800090e:	e7e5      	b.n	80008dc <HAL_DMA_Abort_IT+0x74>
 8000910:	2301      	movs	r3, #1
 8000912:	e7e3      	b.n	80008dc <HAL_DMA_Abort_IT+0x74>
 8000914:	2310      	movs	r3, #16
 8000916:	e7e1      	b.n	80008dc <HAL_DMA_Abort_IT+0x74>
 8000918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091c:	e7de      	b.n	80008dc <HAL_DMA_Abort_IT+0x74>
 800091e:	428b      	cmp	r3, r1
 8000920:	d02e      	beq.n	8000980 <HAL_DMA_Abort_IT+0x118>
 8000922:	491f      	ldr	r1, [pc, #124]	; (80009a0 <HAL_DMA_Abort_IT+0x138>)
 8000924:	428b      	cmp	r3, r1
 8000926:	d02d      	beq.n	8000984 <HAL_DMA_Abort_IT+0x11c>
 8000928:	3114      	adds	r1, #20
 800092a:	428b      	cmp	r3, r1
 800092c:	d02c      	beq.n	8000988 <HAL_DMA_Abort_IT+0x120>
 800092e:	3114      	adds	r1, #20
 8000930:	428b      	cmp	r3, r1
 8000932:	d019      	beq.n	8000968 <HAL_DMA_Abort_IT+0x100>
 8000934:	3114      	adds	r1, #20
 8000936:	428b      	cmp	r3, r1
 8000938:	d019      	beq.n	800096e <HAL_DMA_Abort_IT+0x106>
 800093a:	3114      	adds	r1, #20
 800093c:	428b      	cmp	r3, r1
 800093e:	d019      	beq.n	8000974 <HAL_DMA_Abort_IT+0x10c>
 8000940:	4293      	cmp	r3, r2
 8000942:	d01a      	beq.n	800097a <HAL_DMA_Abort_IT+0x112>
 8000944:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_DMA_Abort_IT+0x13c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d01a      	beq.n	8000980 <HAL_DMA_Abort_IT+0x118>
 800094a:	3214      	adds	r2, #20
 800094c:	4293      	cmp	r3, r2
 800094e:	d019      	beq.n	8000984 <HAL_DMA_Abort_IT+0x11c>
 8000950:	3214      	adds	r2, #20
 8000952:	4293      	cmp	r3, r2
 8000954:	d018      	beq.n	8000988 <HAL_DMA_Abort_IT+0x120>
 8000956:	3214      	adds	r2, #20
 8000958:	4293      	cmp	r3, r2
 800095a:	bf14      	ite	ne
 800095c:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8000960:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8000964:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <HAL_DMA_Abort_IT+0x140>)
 8000966:	e7ba      	b.n	80008de <HAL_DMA_Abort_IT+0x76>
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	e7fa      	b.n	8000964 <HAL_DMA_Abort_IT+0xfc>
 800096e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000972:	e7f7      	b.n	8000964 <HAL_DMA_Abort_IT+0xfc>
 8000974:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000978:	e7f4      	b.n	8000964 <HAL_DMA_Abort_IT+0xfc>
 800097a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800097e:	e7f1      	b.n	8000964 <HAL_DMA_Abort_IT+0xfc>
 8000980:	2301      	movs	r3, #1
 8000982:	e7ef      	b.n	8000964 <HAL_DMA_Abort_IT+0xfc>
 8000984:	2310      	movs	r3, #16
 8000986:	e7ed      	b.n	8000964 <HAL_DMA_Abort_IT+0xfc>
 8000988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098c:	e7ea      	b.n	8000964 <HAL_DMA_Abort_IT+0xfc>
  HAL_StatusTypeDef status = HAL_OK;
 800098e:	4618      	mov	r0, r3
 8000990:	e772      	b.n	8000878 <HAL_DMA_Abort_IT+0x10>
 8000992:	bf00      	nop
 8000994:	40020008 	.word	0x40020008
 8000998:	40020080 	.word	0x40020080
 800099c:	40020400 	.word	0x40020400
 80009a0:	4002001c 	.word	0x4002001c
 80009a4:	40020408 	.word	0x40020408
 80009a8:	40020000 	.word	0x40020000

080009ac <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80009ac:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <FLASH_SetErrorCode+0x48>)
 80009ae:	68d3      	ldr	r3, [r2, #12]
 80009b0:	f013 0310 	ands.w	r3, r3, #16
 80009b4:	d005      	beq.n	80009c2 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009b6:	4910      	ldr	r1, [pc, #64]	; (80009f8 <FLASH_SetErrorCode+0x4c>)
 80009b8:	69cb      	ldr	r3, [r1, #28]
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80009c0:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80009c2:	68d2      	ldr	r2, [r2, #12]
 80009c4:	0750      	lsls	r0, r2, #29
 80009c6:	d506      	bpl.n	80009d6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80009c8:	490b      	ldr	r1, [pc, #44]	; (80009f8 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80009ca:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80009ce:	69ca      	ldr	r2, [r1, #28]
 80009d0:	f042 0201 	orr.w	r2, r2, #1
 80009d4:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80009d6:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <FLASH_SetErrorCode+0x48>)
 80009d8:	69d1      	ldr	r1, [r2, #28]
 80009da:	07c9      	lsls	r1, r1, #31
 80009dc:	d508      	bpl.n	80009f0 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <FLASH_SetErrorCode+0x4c>)
 80009e0:	69c1      	ldr	r1, [r0, #28]
 80009e2:	f041 0104 	orr.w	r1, r1, #4
 80009e6:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80009e8:	69d1      	ldr	r1, [r2, #28]
 80009ea:	f021 0101 	bic.w	r1, r1, #1
 80009ee:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80009f0:	60d3      	str	r3, [r2, #12]
}  
 80009f2:	4770      	bx	lr
 80009f4:	40022000 	.word	0x40022000
 80009f8:	200000e8 	.word	0x200000e8

080009fc <HAL_FLASH_EndOfOperationCallback>:
}
 80009fc:	4770      	bx	lr

080009fe <HAL_FLASH_OperationErrorCallback>:
 80009fe:	4770      	bx	lr

08000a00 <HAL_FLASH_IRQHandler>:
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a00:	4b42      	ldr	r3, [pc, #264]	; (8000b0c <HAL_FLASH_IRQHandler+0x10c>)
{
 8000a02:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a04:	68da      	ldr	r2, [r3, #12]
 8000a06:	4c42      	ldr	r4, [pc, #264]	; (8000b10 <HAL_FLASH_IRQHandler+0x110>)
 8000a08:	f012 0f10 	tst.w	r2, #16
 8000a0c:	d102      	bne.n	8000a14 <HAL_FLASH_IRQHandler+0x14>
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	075a      	lsls	r2, r3, #29
 8000a12:	d50a      	bpl.n	8000a2a <HAL_FLASH_IRQHandler+0x2a>
    pFlash.Address = 0xFFFFFFFFU;
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
    addresstmp = pFlash.Address;
 8000a18:	68a5      	ldr	r5, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 8000a1a:	60a3      	str	r3, [r4, #8]
    FLASH_SetErrorCode();
 8000a1c:	f7ff ffc6 	bl	80009ac <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8000a20:	4628      	mov	r0, r5
 8000a22:	f7ff ffec 	bl	80009fe <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000a2a:	4d38      	ldr	r5, [pc, #224]	; (8000b0c <HAL_FLASH_IRQHandler+0x10c>)
 8000a2c:	68eb      	ldr	r3, [r5, #12]
 8000a2e:	069b      	lsls	r3, r3, #26
 8000a30:	d518      	bpl.n	8000a64 <HAL_FLASH_IRQHandler+0x64>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000a32:	2320      	movs	r3, #32
 8000a34:	60eb      	str	r3, [r5, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8000a36:	7823      	ldrb	r3, [r4, #0]
 8000a38:	b1a3      	cbz	r3, 8000a64 <HAL_FLASH_IRQHandler+0x64>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8000a3a:	7823      	ldrb	r3, [r4, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d127      	bne.n	8000a90 <HAL_FLASH_IRQHandler+0x90>
        pFlash.DataRemaining--;
 8000a40:	6863      	ldr	r3, [r4, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 8000a46:	6863      	ldr	r3, [r4, #4]
 8000a48:	b1db      	cbz	r3, 8000a82 <HAL_FLASH_IRQHandler+0x82>
          addresstmp = pFlash.Address;
 8000a4a:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8000a4c:	f7ff ffd6 	bl	80009fc <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8000a50:	68a0      	ldr	r0, [r4, #8]
 8000a52:	f500 6000 	add.w	r0, r0, #2048	; 0x800
          pFlash.Address = addresstmp;
 8000a56:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000a58:	692b      	ldr	r3, [r5, #16]
 8000a5a:	f023 0302 	bic.w	r3, r3, #2
 8000a5e:	612b      	str	r3, [r5, #16]
          FLASH_PageErase(addresstmp);
 8000a60:	f000 f858 	bl	8000b14 <FLASH_PageErase>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8000a64:	7823      	ldrb	r3, [r4, #0]
 8000a66:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8000a6a:	b94b      	cbnz	r3, 8000a80 <HAL_FLASH_IRQHandler+0x80>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <HAL_FLASH_IRQHandler+0x10c>)
 8000a6e:	691a      	ldr	r2, [r3, #16]
 8000a70:	f022 0207 	bic.w	r2, r2, #7
 8000a74:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8000a76:	691a      	ldr	r2, [r3, #16]
 8000a78:	f422 52a0 	bic.w	r2, r2, #5120	; 0x1400
 8000a7c:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8000a7e:	7621      	strb	r1, [r4, #24]
}
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8000a82:	f04f 30ff 	mov.w	r0, #4294967295
 8000a86:	60a0      	str	r0, [r4, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000a88:	7023      	strb	r3, [r4, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8000a8a:	f7ff ffb7 	bl	80009fc <HAL_FLASH_EndOfOperationCallback>
 8000a8e:	e7e9      	b.n	8000a64 <HAL_FLASH_IRQHandler+0x64>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8000a90:	7823      	ldrb	r3, [r4, #0]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d109      	bne.n	8000aaa <HAL_FLASH_IRQHandler+0xaa>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000a96:	692b      	ldr	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 8000a98:	2000      	movs	r0, #0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000a9a:	f023 0304 	bic.w	r3, r3, #4
 8000a9e:	612b      	str	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 8000aa0:	f7ff ffac 	bl	80009fc <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	7023      	strb	r3, [r4, #0]
 8000aa8:	e7dc      	b.n	8000a64 <HAL_FLASH_IRQHandler+0x64>
        pFlash.DataRemaining--;
 8000aaa:	6863      	ldr	r3, [r4, #4]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 8000ab0:	6863      	ldr	r3, [r4, #4]
 8000ab2:	b1d3      	cbz	r3, 8000aea <HAL_FLASH_IRQHandler+0xea>
          pFlash.Address += 2U;
 8000ab4:	68a3      	ldr	r3, [r4, #8]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	60a3      	str	r3, [r4, #8]
          addresstmp = pFlash.Address;
 8000aba:	68a6      	ldr	r6, [r4, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 8000abc:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8000ac0:	0c02      	lsrs	r2, r0, #16
 8000ac2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ac6:	0c0b      	lsrs	r3, r1, #16
 8000ac8:	e9c4 2304 	strd	r2, r3, [r4, #16]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000acc:	692b      	ldr	r3, [r5, #16]
 8000ace:	f023 0301 	bic.w	r3, r3, #1
 8000ad2:	612b      	str	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8000ad4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61e3      	str	r3, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000adc:	692b      	ldr	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8000ade:	b292      	uxth	r2, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8000ae6:	8032      	strh	r2, [r6, #0]
}
 8000ae8:	e7bc      	b.n	8000a64 <HAL_FLASH_IRQHandler+0x64>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8000aea:	7823      	ldrb	r3, [r4, #0]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d106      	bne.n	8000afe <HAL_FLASH_IRQHandler+0xfe>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8000af0:	68a0      	ldr	r0, [r4, #8]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8000af2:	f7ff ff83 	bl	80009fc <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	60a3      	str	r3, [r4, #8]
 8000afc:	e7d2      	b.n	8000aa4 <HAL_FLASH_IRQHandler+0xa4>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8000afe:	7823      	ldrb	r3, [r4, #0]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8000b00:	68a0      	ldr	r0, [r4, #8]
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8000b02:	2b04      	cmp	r3, #4
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8000b04:	bf0c      	ite	eq
 8000b06:	3802      	subeq	r0, #2
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8000b08:	3806      	subne	r0, #6
 8000b0a:	e7f2      	b.n	8000af2 <HAL_FLASH_IRQHandler+0xf2>
 8000b0c:	40022000 	.word	0x40022000
 8000b10:	200000e8 	.word	0x200000e8

08000b14 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b14:	2200      	movs	r2, #0
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <FLASH_PageErase+0x1c>)
 8000b18:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <FLASH_PageErase+0x20>)
 8000b1c:	691a      	ldr	r2, [r3, #16]
 8000b1e:	f042 0202 	orr.w	r2, r2, #2
 8000b22:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000b24:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b2c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000b2e:	4770      	bx	lr
 8000b30:	200000e8 	.word	0x200000e8
 8000b34:	40022000 	.word	0x40022000

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b3c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000b3e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b40:	4f6a      	ldr	r7, [pc, #424]	; (8000cec <HAL_GPIO_Init+0x1b4>)
 8000b42:	4b6b      	ldr	r3, [pc, #428]	; (8000cf0 <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b44:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8000cf4 <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 8000b48:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8000cf8 <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4c:	680c      	ldr	r4, [r1, #0]
 8000b4e:	fa34 f506 	lsrs.w	r5, r4, r6
 8000b52:	d102      	bne.n	8000b5a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000b54:	b003      	add	sp, #12
 8000b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000b5a:	f04f 0801 	mov.w	r8, #1
 8000b5e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b62:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 8000b66:	ea38 0404 	bics.w	r4, r8, r4
 8000b6a:	f040 8081 	bne.w	8000c70 <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 8000b6e:	684c      	ldr	r4, [r1, #4]
 8000b70:	2c03      	cmp	r4, #3
 8000b72:	d807      	bhi.n	8000b84 <HAL_GPIO_Init+0x4c>
 8000b74:	3c01      	subs	r4, #1
 8000b76:	2c02      	cmp	r4, #2
 8000b78:	f200 808c 	bhi.w	8000c94 <HAL_GPIO_Init+0x15c>
 8000b7c:	e8df f004 	tbb	[pc, r4]
 8000b80:	a29d      	.short	0xa29d
 8000b82:	a8          	.byte	0xa8
 8000b83:	00          	.byte	0x00
 8000b84:	2c12      	cmp	r4, #18
 8000b86:	f000 80a0 	beq.w	8000cca <HAL_GPIO_Init+0x192>
 8000b8a:	d873      	bhi.n	8000c74 <HAL_GPIO_Init+0x13c>
 8000b8c:	2c11      	cmp	r4, #17
 8000b8e:	f000 8096 	beq.w	8000cbe <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b92:	2dff      	cmp	r5, #255	; 0xff
 8000b94:	bf98      	it	ls
 8000b96:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b98:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b9c:	bf88      	it	hi
 8000b9e:	f100 0a04 	addhi.w	sl, r0, #4
 8000ba2:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ba6:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000baa:	bf88      	it	hi
 8000bac:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bae:	fa09 fb04 	lsl.w	fp, r9, r4
 8000bb2:	ea28 080b 	bic.w	r8, r8, fp
 8000bb6:	fa02 f404 	lsl.w	r4, r2, r4
 8000bba:	ea48 0404 	orr.w	r4, r8, r4
 8000bbe:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc2:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000bc6:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000bca:	d051      	beq.n	8000c70 <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bcc:	69bc      	ldr	r4, [r7, #24]
 8000bce:	f026 0803 	bic.w	r8, r6, #3
 8000bd2:	f044 0401 	orr.w	r4, r4, #1
 8000bd6:	61bc      	str	r4, [r7, #24]
 8000bd8:	69bc      	ldr	r4, [r7, #24]
 8000bda:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000bde:	f004 0401 	and.w	r4, r4, #1
 8000be2:	9401      	str	r4, [sp, #4]
 8000be4:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000be8:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bec:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bee:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000bf2:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bf6:	fa09 f90b 	lsl.w	r9, r9, fp
 8000bfa:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bfe:	4c3f      	ldr	r4, [pc, #252]	; (8000cfc <HAL_GPIO_Init+0x1c4>)
 8000c00:	42a0      	cmp	r0, r4
 8000c02:	d069      	beq.n	8000cd8 <HAL_GPIO_Init+0x1a0>
 8000c04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c08:	42a0      	cmp	r0, r4
 8000c0a:	d067      	beq.n	8000cdc <HAL_GPIO_Init+0x1a4>
 8000c0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c10:	42a0      	cmp	r0, r4
 8000c12:	d065      	beq.n	8000ce0 <HAL_GPIO_Init+0x1a8>
 8000c14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c18:	42a0      	cmp	r0, r4
 8000c1a:	d063      	beq.n	8000ce4 <HAL_GPIO_Init+0x1ac>
 8000c1c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c20:	42a0      	cmp	r0, r4
 8000c22:	d061      	beq.n	8000ce8 <HAL_GPIO_Init+0x1b0>
 8000c24:	4560      	cmp	r0, ip
 8000c26:	bf0c      	ite	eq
 8000c28:	2405      	moveq	r4, #5
 8000c2a:	2406      	movne	r4, #6
 8000c2c:	fa04 f40b 	lsl.w	r4, r4, fp
 8000c30:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000c34:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c38:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c3e:	bf14      	ite	ne
 8000c40:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c42:	43ac      	biceq	r4, r5
 8000c44:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c46:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c48:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c4c:	bf14      	ite	ne
 8000c4e:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c50:	43ac      	biceq	r4, r5
 8000c52:	60dc      	str	r4, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8000c54:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c56:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000c5a:	bf14      	ite	ne
 8000c5c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c5e:	43ac      	biceq	r4, r5
 8000c60:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000c62:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c64:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000c68:	bf14      	ite	ne
 8000c6a:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c6c:	43ac      	biceq	r4, r5
 8000c6e:	601c      	str	r4, [r3, #0]
	position++;
 8000c70:	3601      	adds	r6, #1
 8000c72:	e76b      	b.n	8000b4c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000c74:	4574      	cmp	r4, lr
 8000c76:	d00d      	beq.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000c78:	d818      	bhi.n	8000cac <HAL_GPIO_Init+0x174>
 8000c7a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8000d00 <HAL_GPIO_Init+0x1c8>
 8000c7e:	454c      	cmp	r4, r9
 8000c80:	d008      	beq.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000c82:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000c86:	454c      	cmp	r4, r9
 8000c88:	d004      	beq.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000c8a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000c8e:	454c      	cmp	r4, r9
 8000c90:	f47f af7f 	bne.w	8000b92 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c94:	688a      	ldr	r2, [r1, #8]
 8000c96:	b1ea      	cbz	r2, 8000cd4 <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c98:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000c9a:	bf08      	it	eq
 8000c9c:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca0:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000ca4:	bf18      	it	ne
 8000ca6:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000caa:	e772      	b.n	8000b92 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8000cac:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8000d04 <HAL_GPIO_Init+0x1cc>
 8000cb0:	454c      	cmp	r4, r9
 8000cb2:	d0ef      	beq.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000cb4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000cb8:	e7e9      	b.n	8000c8e <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cba:	68ca      	ldr	r2, [r1, #12]
          break;
 8000cbc:	e769      	b.n	8000b92 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cbe:	68ca      	ldr	r2, [r1, #12]
 8000cc0:	3204      	adds	r2, #4
          break;
 8000cc2:	e766      	b.n	8000b92 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cc4:	68ca      	ldr	r2, [r1, #12]
 8000cc6:	3208      	adds	r2, #8
          break;
 8000cc8:	e763      	b.n	8000b92 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cca:	68ca      	ldr	r2, [r1, #12]
 8000ccc:	320c      	adds	r2, #12
          break;
 8000cce:	e760      	b.n	8000b92 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	e75e      	b.n	8000b92 <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	e75c      	b.n	8000b92 <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd8:	2400      	movs	r4, #0
 8000cda:	e7a7      	b.n	8000c2c <HAL_GPIO_Init+0xf4>
 8000cdc:	2401      	movs	r4, #1
 8000cde:	e7a5      	b.n	8000c2c <HAL_GPIO_Init+0xf4>
 8000ce0:	2402      	movs	r4, #2
 8000ce2:	e7a3      	b.n	8000c2c <HAL_GPIO_Init+0xf4>
 8000ce4:	2403      	movs	r4, #3
 8000ce6:	e7a1      	b.n	8000c2c <HAL_GPIO_Init+0xf4>
 8000ce8:	2404      	movs	r4, #4
 8000cea:	e79f      	b.n	8000c2c <HAL_GPIO_Init+0xf4>
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010400 	.word	0x40010400
 8000cf4:	40011c00 	.word	0x40011c00
 8000cf8:	10220000 	.word	0x10220000
 8000cfc:	40010800 	.word	0x40010800
 8000d00:	10120000 	.word	0x10120000
 8000d04:	10310000 	.word	0x10310000

08000d08 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4b01      	ldr	r3, [pc, #4]	; (8000d10 <HAL_PWR_EnableBkUpAccess+0x8>)
 8000d0c:	621a      	str	r2, [r3, #32]
}
 8000d0e:	4770      	bx	lr
 8000d10:	420e0000 	.word	0x420e0000

08000d14 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8000d14:	4770      	bx	lr
	...

08000d18 <HAL_PWR_PVD_IRQHandler>:
{
 8000d18:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8000d1a:	4c05      	ldr	r4, [pc, #20]	; (8000d30 <HAL_PWR_PVD_IRQHandler+0x18>)
 8000d1c:	6963      	ldr	r3, [r4, #20]
 8000d1e:	03db      	lsls	r3, r3, #15
 8000d20:	d504      	bpl.n	8000d2c <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8000d22:	f7ff fff7 	bl	8000d14 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8000d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d2a:	6163      	str	r3, [r4, #20]
}
 8000d2c:	bd10      	pop	{r4, pc}
 8000d2e:	bf00      	nop
 8000d30:	40010400 	.word	0x40010400

08000d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d38:	4605      	mov	r5, r0
 8000d3a:	b338      	cbz	r0, 8000d8c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d3c:	6803      	ldr	r3, [r0, #0]
 8000d3e:	07db      	lsls	r3, r3, #31
 8000d40:	d410      	bmi.n	8000d64 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d42:	682b      	ldr	r3, [r5, #0]
 8000d44:	079f      	lsls	r7, r3, #30
 8000d46:	d45e      	bmi.n	8000e06 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d48:	682b      	ldr	r3, [r5, #0]
 8000d4a:	0719      	lsls	r1, r3, #28
 8000d4c:	f100 8095 	bmi.w	8000e7a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d50:	682b      	ldr	r3, [r5, #0]
 8000d52:	075a      	lsls	r2, r3, #29
 8000d54:	f100 80c1 	bmi.w	8000eda <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d58:	69e8      	ldr	r0, [r5, #28]
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	f040 812c 	bne.w	8000fb8 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8000d60:	2000      	movs	r0, #0
 8000d62:	e029      	b.n	8000db8 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d64:	4c90      	ldr	r4, [pc, #576]	; (8000fa8 <HAL_RCC_OscConfig+0x274>)
 8000d66:	6863      	ldr	r3, [r4, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d007      	beq.n	8000d80 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d70:	6863      	ldr	r3, [r4, #4]
 8000d72:	f003 030c 	and.w	r3, r3, #12
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d10a      	bne.n	8000d90 <HAL_RCC_OscConfig+0x5c>
 8000d7a:	6863      	ldr	r3, [r4, #4]
 8000d7c:	03de      	lsls	r6, r3, #15
 8000d7e:	d507      	bpl.n	8000d90 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	039c      	lsls	r4, r3, #14
 8000d84:	d5dd      	bpl.n	8000d42 <HAL_RCC_OscConfig+0xe>
 8000d86:	686b      	ldr	r3, [r5, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1da      	bne.n	8000d42 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	e013      	b.n	8000db8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d90:	686b      	ldr	r3, [r5, #4]
 8000d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d96:	d112      	bne.n	8000dbe <HAL_RCC_OscConfig+0x8a>
 8000d98:	6823      	ldr	r3, [r4, #0]
 8000d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000da0:	f7ff fcd8 	bl	8000754 <HAL_GetTick>
 8000da4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	0398      	lsls	r0, r3, #14
 8000daa:	d4ca      	bmi.n	8000d42 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff fcd2 	bl	8000754 <HAL_GetTick>
 8000db0:	1b80      	subs	r0, r0, r6
 8000db2:	2864      	cmp	r0, #100	; 0x64
 8000db4:	d9f7      	bls.n	8000da6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8000db6:	2003      	movs	r0, #3
}
 8000db8:	b002      	add	sp, #8
 8000dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dbe:	b99b      	cbnz	r3, 8000de8 <HAL_RCC_OscConfig+0xb4>
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc6:	6023      	str	r3, [r4, #0]
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fcc0 	bl	8000754 <HAL_GetTick>
 8000dd4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	0399      	lsls	r1, r3, #14
 8000dda:	d5b2      	bpl.n	8000d42 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fcba 	bl	8000754 <HAL_GetTick>
 8000de0:	1b80      	subs	r0, r0, r6
 8000de2:	2864      	cmp	r0, #100	; 0x64
 8000de4:	d9f7      	bls.n	8000dd6 <HAL_RCC_OscConfig+0xa2>
 8000de6:	e7e6      	b.n	8000db6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	d103      	bne.n	8000df8 <HAL_RCC_OscConfig+0xc4>
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df4:	6023      	str	r3, [r4, #0]
 8000df6:	e7cf      	b.n	8000d98 <HAL_RCC_OscConfig+0x64>
 8000df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfc:	6023      	str	r3, [r4, #0]
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e04:	e7cb      	b.n	8000d9e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e06:	4c68      	ldr	r4, [pc, #416]	; (8000fa8 <HAL_RCC_OscConfig+0x274>)
 8000e08:	6863      	ldr	r3, [r4, #4]
 8000e0a:	f013 0f0c 	tst.w	r3, #12
 8000e0e:	d007      	beq.n	8000e20 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e10:	6863      	ldr	r3, [r4, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d110      	bne.n	8000e3c <HAL_RCC_OscConfig+0x108>
 8000e1a:	6863      	ldr	r3, [r4, #4]
 8000e1c:	03da      	lsls	r2, r3, #15
 8000e1e:	d40d      	bmi.n	8000e3c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	079b      	lsls	r3, r3, #30
 8000e24:	d502      	bpl.n	8000e2c <HAL_RCC_OscConfig+0xf8>
 8000e26:	692b      	ldr	r3, [r5, #16]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d1af      	bne.n	8000d8c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	696a      	ldr	r2, [r5, #20]
 8000e30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e34:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e38:	6023      	str	r3, [r4, #0]
 8000e3a:	e785      	b.n	8000d48 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e3c:	692a      	ldr	r2, [r5, #16]
 8000e3e:	4b5b      	ldr	r3, [pc, #364]	; (8000fac <HAL_RCC_OscConfig+0x278>)
 8000e40:	b16a      	cbz	r2, 8000e5e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e46:	f7ff fc85 	bl	8000754 <HAL_GetTick>
 8000e4a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	079f      	lsls	r7, r3, #30
 8000e50:	d4ec      	bmi.n	8000e2c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e52:	f7ff fc7f 	bl	8000754 <HAL_GetTick>
 8000e56:	1b80      	subs	r0, r0, r6
 8000e58:	2802      	cmp	r0, #2
 8000e5a:	d9f7      	bls.n	8000e4c <HAL_RCC_OscConfig+0x118>
 8000e5c:	e7ab      	b.n	8000db6 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8000e5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e60:	f7ff fc78 	bl	8000754 <HAL_GetTick>
 8000e64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	0798      	lsls	r0, r3, #30
 8000e6a:	f57f af6d 	bpl.w	8000d48 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fc71 	bl	8000754 <HAL_GetTick>
 8000e72:	1b80      	subs	r0, r0, r6
 8000e74:	2802      	cmp	r0, #2
 8000e76:	d9f6      	bls.n	8000e66 <HAL_RCC_OscConfig+0x132>
 8000e78:	e79d      	b.n	8000db6 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e7a:	69aa      	ldr	r2, [r5, #24]
 8000e7c:	4e4a      	ldr	r6, [pc, #296]	; (8000fa8 <HAL_RCC_OscConfig+0x274>)
 8000e7e:	4b4b      	ldr	r3, [pc, #300]	; (8000fac <HAL_RCC_OscConfig+0x278>)
 8000e80:	b1e2      	cbz	r2, 8000ebc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000e82:	2201      	movs	r2, #1
 8000e84:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000e88:	f7ff fc64 	bl	8000754 <HAL_GetTick>
 8000e8c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e8e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000e90:	079b      	lsls	r3, r3, #30
 8000e92:	d50d      	bpl.n	8000eb0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e94:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e98:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <HAL_RCC_OscConfig+0x27c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ea0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000ea2:	bf00      	nop
  }
  while (Delay --);
 8000ea4:	9b01      	ldr	r3, [sp, #4]
 8000ea6:	1e5a      	subs	r2, r3, #1
 8000ea8:	9201      	str	r2, [sp, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f9      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x16e>
 8000eae:	e74f      	b.n	8000d50 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fc50 	bl	8000754 <HAL_GetTick>
 8000eb4:	1b00      	subs	r0, r0, r4
 8000eb6:	2802      	cmp	r0, #2
 8000eb8:	d9e9      	bls.n	8000e8e <HAL_RCC_OscConfig+0x15a>
 8000eba:	e77c      	b.n	8000db6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8000ebc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000ec0:	f7ff fc48 	bl	8000754 <HAL_GetTick>
 8000ec4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000ec8:	079f      	lsls	r7, r3, #30
 8000eca:	f57f af41 	bpl.w	8000d50 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ece:	f7ff fc41 	bl	8000754 <HAL_GetTick>
 8000ed2:	1b00      	subs	r0, r0, r4
 8000ed4:	2802      	cmp	r0, #2
 8000ed6:	d9f6      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x192>
 8000ed8:	e76d      	b.n	8000db6 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eda:	4c33      	ldr	r4, [pc, #204]	; (8000fa8 <HAL_RCC_OscConfig+0x274>)
 8000edc:	69e3      	ldr	r3, [r4, #28]
 8000ede:	00d8      	lsls	r0, r3, #3
 8000ee0:	d424      	bmi.n	8000f2c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8000ee2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee4:	69e3      	ldr	r3, [r4, #28]
 8000ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eea:	61e3      	str	r3, [r4, #28]
 8000eec:	69e3      	ldr	r3, [r4, #28]
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef6:	4e2f      	ldr	r6, [pc, #188]	; (8000fb4 <HAL_RCC_OscConfig+0x280>)
 8000ef8:	6833      	ldr	r3, [r6, #0]
 8000efa:	05d9      	lsls	r1, r3, #23
 8000efc:	d518      	bpl.n	8000f30 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000efe:	68eb      	ldr	r3, [r5, #12]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d126      	bne.n	8000f52 <HAL_RCC_OscConfig+0x21e>
 8000f04:	6a23      	ldr	r3, [r4, #32]
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f0c:	f7ff fc22 	bl	8000754 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f10:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f14:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f16:	6a23      	ldr	r3, [r4, #32]
 8000f18:	079b      	lsls	r3, r3, #30
 8000f1a:	d53f      	bpl.n	8000f9c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8000f1c:	2f00      	cmp	r7, #0
 8000f1e:	f43f af1b 	beq.w	8000d58 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f22:	69e3      	ldr	r3, [r4, #28]
 8000f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f28:	61e3      	str	r3, [r4, #28]
 8000f2a:	e715      	b.n	8000d58 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000f2c:	2700      	movs	r7, #0
 8000f2e:	e7e2      	b.n	8000ef6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f30:	6833      	ldr	r3, [r6, #0]
 8000f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f36:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f38:	f7ff fc0c 	bl	8000754 <HAL_GetTick>
 8000f3c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3e:	6833      	ldr	r3, [r6, #0]
 8000f40:	05da      	lsls	r2, r3, #23
 8000f42:	d4dc      	bmi.n	8000efe <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f44:	f7ff fc06 	bl	8000754 <HAL_GetTick>
 8000f48:	eba0 0008 	sub.w	r0, r0, r8
 8000f4c:	2864      	cmp	r0, #100	; 0x64
 8000f4e:	d9f6      	bls.n	8000f3e <HAL_RCC_OscConfig+0x20a>
 8000f50:	e731      	b.n	8000db6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f52:	b9ab      	cbnz	r3, 8000f80 <HAL_RCC_OscConfig+0x24c>
 8000f54:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f56:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	6223      	str	r3, [r4, #32]
 8000f60:	6a23      	ldr	r3, [r4, #32]
 8000f62:	f023 0304 	bic.w	r3, r3, #4
 8000f66:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f68:	f7ff fbf4 	bl	8000754 <HAL_GetTick>
 8000f6c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f6e:	6a23      	ldr	r3, [r4, #32]
 8000f70:	0798      	lsls	r0, r3, #30
 8000f72:	d5d3      	bpl.n	8000f1c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f74:	f7ff fbee 	bl	8000754 <HAL_GetTick>
 8000f78:	1b80      	subs	r0, r0, r6
 8000f7a:	4540      	cmp	r0, r8
 8000f7c:	d9f7      	bls.n	8000f6e <HAL_RCC_OscConfig+0x23a>
 8000f7e:	e71a      	b.n	8000db6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f80:	2b05      	cmp	r3, #5
 8000f82:	6a23      	ldr	r3, [r4, #32]
 8000f84:	d103      	bne.n	8000f8e <HAL_RCC_OscConfig+0x25a>
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	6223      	str	r3, [r4, #32]
 8000f8c:	e7ba      	b.n	8000f04 <HAL_RCC_OscConfig+0x1d0>
 8000f8e:	f023 0301 	bic.w	r3, r3, #1
 8000f92:	6223      	str	r3, [r4, #32]
 8000f94:	6a23      	ldr	r3, [r4, #32]
 8000f96:	f023 0304 	bic.w	r3, r3, #4
 8000f9a:	e7b6      	b.n	8000f0a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fbda 	bl	8000754 <HAL_GetTick>
 8000fa0:	1b80      	subs	r0, r0, r6
 8000fa2:	4540      	cmp	r0, r8
 8000fa4:	d9b7      	bls.n	8000f16 <HAL_RCC_OscConfig+0x1e2>
 8000fa6:	e706      	b.n	8000db6 <HAL_RCC_OscConfig+0x82>
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	42420000 	.word	0x42420000
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fb8:	4c2a      	ldr	r4, [pc, #168]	; (8001064 <HAL_RCC_OscConfig+0x330>)
 8000fba:	6863      	ldr	r3, [r4, #4]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d03e      	beq.n	8001042 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4b28      	ldr	r3, [pc, #160]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8000fc8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000fca:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fcc:	d12c      	bne.n	8001028 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000fce:	f7ff fbc1 	bl	8000754 <HAL_GetTick>
 8000fd2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	0199      	lsls	r1, r3, #6
 8000fd8:	d420      	bmi.n	800101c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fda:	6a2b      	ldr	r3, [r5, #32]
 8000fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe0:	d105      	bne.n	8000fee <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fe2:	6862      	ldr	r2, [r4, #4]
 8000fe4:	68a9      	ldr	r1, [r5, #8]
 8000fe6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000fea:	430a      	orrs	r2, r1
 8000fec:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fee:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000ff0:	6862      	ldr	r2, [r4, #4]
 8000ff2:	430b      	orrs	r3, r1
 8000ff4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000ff8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8000ffa:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ffc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_RCC_OscConfig+0x334>)
 8001000:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001002:	f7ff fba7 	bl	8000754 <HAL_GetTick>
 8001006:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	019a      	lsls	r2, r3, #6
 800100c:	f53f aea8 	bmi.w	8000d60 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001010:	f7ff fba0 	bl	8000754 <HAL_GetTick>
 8001014:	1b40      	subs	r0, r0, r5
 8001016:	2802      	cmp	r0, #2
 8001018:	d9f6      	bls.n	8001008 <HAL_RCC_OscConfig+0x2d4>
 800101a:	e6cc      	b.n	8000db6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101c:	f7ff fb9a 	bl	8000754 <HAL_GetTick>
 8001020:	1b80      	subs	r0, r0, r6
 8001022:	2802      	cmp	r0, #2
 8001024:	d9d6      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x2a0>
 8001026:	e6c6      	b.n	8000db6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001028:	f7ff fb94 	bl	8000754 <HAL_GetTick>
 800102c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	019b      	lsls	r3, r3, #6
 8001032:	f57f ae95 	bpl.w	8000d60 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001036:	f7ff fb8d 	bl	8000754 <HAL_GetTick>
 800103a:	1b40      	subs	r0, r0, r5
 800103c:	2802      	cmp	r0, #2
 800103e:	d9f6      	bls.n	800102e <HAL_RCC_OscConfig+0x2fa>
 8001040:	e6b9      	b.n	8000db6 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001042:	2801      	cmp	r0, #1
 8001044:	f43f aeb8 	beq.w	8000db8 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001048:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104a:	6a2a      	ldr	r2, [r5, #32]
 800104c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001050:	4291      	cmp	r1, r2
 8001052:	f47f ae9b 	bne.w	8000d8c <HAL_RCC_OscConfig+0x58>
 8001056:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001058:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800105c:	4293      	cmp	r3, r2
 800105e:	f43f ae7f 	beq.w	8000d60 <HAL_RCC_OscConfig+0x2c>
 8001062:	e693      	b.n	8000d8c <HAL_RCC_OscConfig+0x58>
 8001064:	40021000 	.word	0x40021000
 8001068:	42420000 	.word	0x42420000

0800106c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <HAL_RCC_GetSysClockFreq+0x38>)
 800106e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001070:	f003 010c 	and.w	r1, r3, #12
 8001074:	2908      	cmp	r1, #8
 8001076:	d112      	bne.n	800109e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 800107a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800107e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001080:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001082:	d509      	bpl.n	8001098 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001084:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001086:	4a09      	ldr	r2, [pc, #36]	; (80010ac <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001088:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800108c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x44>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001092:	fbb0 f0f3 	udiv	r0, r0, r3
 8001096:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_RCC_GetSysClockFreq+0x48>)
 800109a:	4358      	muls	r0, r3
 800109c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800109e:	4803      	ldr	r0, [pc, #12]	; (80010ac <HAL_RCC_GetSysClockFreq+0x40>)
}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	08002c9d 	.word	0x08002c9d
 80010ac:	007a1200 	.word	0x007a1200
 80010b0:	08002cad 	.word	0x08002cad
 80010b4:	003d0900 	.word	0x003d0900

080010b8 <HAL_RCC_ClockConfig>:
{
 80010b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010bc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80010be:	4604      	mov	r4, r0
 80010c0:	b910      	cbnz	r0, 80010c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80010c2:	2001      	movs	r0, #1
}
 80010c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010c8:	4a44      	ldr	r2, [pc, #272]	; (80011dc <HAL_RCC_ClockConfig+0x124>)
 80010ca:	6813      	ldr	r3, [r2, #0]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	428b      	cmp	r3, r1
 80010d2:	d328      	bcc.n	8001126 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d4:	6821      	ldr	r1, [r4, #0]
 80010d6:	078e      	lsls	r6, r1, #30
 80010d8:	d430      	bmi.n	800113c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010da:	07ca      	lsls	r2, r1, #31
 80010dc:	d443      	bmi.n	8001166 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010de:	4a3f      	ldr	r2, [pc, #252]	; (80011dc <HAL_RCC_ClockConfig+0x124>)
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	42ab      	cmp	r3, r5
 80010e8:	d865      	bhi.n	80011b6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ea:	6822      	ldr	r2, [r4, #0]
 80010ec:	4d3c      	ldr	r5, [pc, #240]	; (80011e0 <HAL_RCC_ClockConfig+0x128>)
 80010ee:	f012 0f04 	tst.w	r2, #4
 80010f2:	d16c      	bne.n	80011ce <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f4:	0713      	lsls	r3, r2, #28
 80010f6:	d506      	bpl.n	8001106 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010f8:	686b      	ldr	r3, [r5, #4]
 80010fa:	6922      	ldr	r2, [r4, #16]
 80010fc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001100:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001104:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001106:	f7ff ffb1 	bl	800106c <HAL_RCC_GetSysClockFreq>
 800110a:	686b      	ldr	r3, [r5, #4]
 800110c:	4a35      	ldr	r2, [pc, #212]	; (80011e4 <HAL_RCC_ClockConfig+0x12c>)
 800110e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001112:	5cd3      	ldrb	r3, [r2, r3]
 8001114:	40d8      	lsrs	r0, r3
 8001116:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <HAL_RCC_ClockConfig+0x130>)
 8001118:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <HAL_RCC_ClockConfig+0x134>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	f7ff fad7 	bl	80006d0 <HAL_InitTick>
  return HAL_OK;
 8001122:	2000      	movs	r0, #0
 8001124:	e7ce      	b.n	80010c4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001126:	6813      	ldr	r3, [r2, #0]
 8001128:	f023 0307 	bic.w	r3, r3, #7
 800112c:	430b      	orrs	r3, r1
 800112e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001130:	6813      	ldr	r3, [r2, #0]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	428b      	cmp	r3, r1
 8001138:	d1c3      	bne.n	80010c2 <HAL_RCC_ClockConfig+0xa>
 800113a:	e7cb      	b.n	80010d4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <HAL_RCC_ClockConfig+0x128>)
 800113e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001142:	bf1e      	ittt	ne
 8001144:	685a      	ldrne	r2, [r3, #4]
 8001146:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800114a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800114e:	bf42      	ittt	mi
 8001150:	685a      	ldrmi	r2, [r3, #4]
 8001152:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001156:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	68a0      	ldr	r0, [r4, #8]
 800115c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001160:	4302      	orrs	r2, r0
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	e7b9      	b.n	80010da <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001166:	6862      	ldr	r2, [r4, #4]
 8001168:	4e1d      	ldr	r6, [pc, #116]	; (80011e0 <HAL_RCC_ClockConfig+0x128>)
 800116a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116e:	d11a      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001170:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	d0a5      	beq.n	80010c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001176:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001178:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800117c:	f023 0303 	bic.w	r3, r3, #3
 8001180:	4313      	orrs	r3, r2
 8001182:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001184:	f7ff fae6 	bl	8000754 <HAL_GetTick>
 8001188:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118a:	6873      	ldr	r3, [r6, #4]
 800118c:	6862      	ldr	r2, [r4, #4]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001196:	d0a2      	beq.n	80010de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001198:	f7ff fadc 	bl	8000754 <HAL_GetTick>
 800119c:	1bc0      	subs	r0, r0, r7
 800119e:	4540      	cmp	r0, r8
 80011a0:	d9f3      	bls.n	800118a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80011a2:	2003      	movs	r0, #3
 80011a4:	e78e      	b.n	80010c4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011a6:	2a02      	cmp	r2, #2
 80011a8:	d102      	bne.n	80011b0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011ae:	e7e1      	b.n	8001174 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	f013 0f02 	tst.w	r3, #2
 80011b4:	e7de      	b.n	8001174 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	6813      	ldr	r3, [r2, #0]
 80011b8:	f023 0307 	bic.w	r3, r3, #7
 80011bc:	432b      	orrs	r3, r5
 80011be:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c0:	6813      	ldr	r3, [r2, #0]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	42ab      	cmp	r3, r5
 80011c8:	f47f af7b 	bne.w	80010c2 <HAL_RCC_ClockConfig+0xa>
 80011cc:	e78d      	b.n	80010ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ce:	686b      	ldr	r3, [r5, #4]
 80011d0:	68e1      	ldr	r1, [r4, #12]
 80011d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011d6:	430b      	orrs	r3, r1
 80011d8:	606b      	str	r3, [r5, #4]
 80011da:	e78b      	b.n	80010f4 <HAL_RCC_ClockConfig+0x3c>
 80011dc:	40022000 	.word	0x40022000
 80011e0:	40021000 	.word	0x40021000
 80011e4:	08002c85 	.word	0x08002c85
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000008 	.word	0x20000008

080011f0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_RCC_GetPCLK1Freq+0x14>)
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <HAL_RCC_GetPCLK1Freq+0x18>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
 80011fc:	4a03      	ldr	r2, [pc, #12]	; (800120c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80011fe:	6810      	ldr	r0, [r2, #0]
}
 8001200:	40d8      	lsrs	r0, r3
 8001202:	4770      	bx	lr
 8001204:	40021000 	.word	0x40021000
 8001208:	08002c95 	.word	0x08002c95
 800120c:	20000000 	.word	0x20000000

08001210 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800121e:	6810      	ldr	r0, [r2, #0]
}
 8001220:	40d8      	lsrs	r0, r3
 8001222:	4770      	bx	lr
 8001224:	40021000 	.word	0x40021000
 8001228:	08002c95 	.word	0x08002c95
 800122c:	20000000 	.word	0x20000000

08001230 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001230:	6803      	ldr	r3, [r0, #0]
{
 8001232:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001236:	07d9      	lsls	r1, r3, #31
{
 8001238:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800123a:	d521      	bpl.n	8001280 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800123c:	4c36      	ldr	r4, [pc, #216]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800123e:	69e3      	ldr	r3, [r4, #28]
 8001240:	00da      	lsls	r2, r3, #3
 8001242:	d433      	bmi.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001244:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	69e3      	ldr	r3, [r4, #28]
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	61e3      	str	r3, [r4, #28]
 800124e:	69e3      	ldr	r3, [r4, #28]
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	4f30      	ldr	r7, [pc, #192]	; (800131c <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	d527      	bpl.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001260:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001262:	686a      	ldr	r2, [r5, #4]
 8001264:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001268:	d136      	bne.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800126a:	6a23      	ldr	r3, [r4, #32]
 800126c:	686a      	ldr	r2, [r5, #4]
 800126e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001272:	4313      	orrs	r3, r2
 8001274:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001276:	b11e      	cbz	r6, 8001280 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001278:	69e3      	ldr	r3, [r4, #28]
 800127a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127e:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001280:	6828      	ldr	r0, [r5, #0]
 8001282:	0783      	lsls	r3, r0, #30
 8001284:	d506      	bpl.n	8001294 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001286:	4924      	ldr	r1, [pc, #144]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001288:	68ab      	ldr	r3, [r5, #8]
 800128a:	684a      	ldr	r2, [r1, #4]
 800128c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001290:	431a      	orrs	r2, r3
 8001292:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001294:	f010 0010 	ands.w	r0, r0, #16
 8001298:	d01b      	beq.n	80012d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800129a:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800129c:	6969      	ldr	r1, [r5, #20]
 800129e:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80012a0:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80012a2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012a6:	430b      	orrs	r3, r1
 80012a8:	6053      	str	r3, [r2, #4]
 80012aa:	e012      	b.n	80012d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 80012ac:	2600      	movs	r6, #0
 80012ae:	e7d3      	b.n	8001258 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80012b8:	f7ff fa4c 	bl	8000754 <HAL_GetTick>
 80012bc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	05d8      	lsls	r0, r3, #23
 80012c2:	d4cd      	bmi.n	8001260 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c4:	f7ff fa46 	bl	8000754 <HAL_GetTick>
 80012c8:	eba0 0008 	sub.w	r0, r0, r8
 80012cc:	2864      	cmp	r0, #100	; 0x64
 80012ce:	d9f6      	bls.n	80012be <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 80012d0:	2003      	movs	r0, #3
}
 80012d2:	b002      	add	sp, #8
 80012d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012d8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80012dc:	429a      	cmp	r2, r3
 80012de:	d0c4      	beq.n	800126a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80012e0:	2001      	movs	r0, #1
 80012e2:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012e4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80012e6:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012ea:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012f0:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80012f4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80012f6:	07d9      	lsls	r1, r3, #31
 80012f8:	d5b7      	bpl.n	800126a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80012fa:	f7ff fa2b 	bl	8000754 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012fe:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001302:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001304:	6a23      	ldr	r3, [r4, #32]
 8001306:	079a      	lsls	r2, r3, #30
 8001308:	d4af      	bmi.n	800126a <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130a:	f7ff fa23 	bl	8000754 <HAL_GetTick>
 800130e:	1bc0      	subs	r0, r0, r7
 8001310:	4540      	cmp	r0, r8
 8001312:	d9f7      	bls.n	8001304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001314:	e7dc      	b.n	80012d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	40007000 	.word	0x40007000
 8001320:	42420000 	.word	0x42420000

08001324 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001324:	2808      	cmp	r0, #8
{
 8001326:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8001328:	d80a      	bhi.n	8001340 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 800132a:	2800      	cmp	r0, #0
 800132c:	d043      	beq.n	80013b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 800132e:	3801      	subs	r0, #1
 8001330:	2807      	cmp	r0, #7
 8001332:	d856      	bhi.n	80013e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8001334:	e8df f000 	tbb	[pc, r0]
 8001338:	2755492b 	.word	0x2755492b
 800133c:	27555555 	.word	0x27555555
 8001340:	2810      	cmp	r0, #16
 8001342:	d14e      	bne.n	80013e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8001346:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800134e:	d032      	beq.n	80013b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001350:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8001354:	4825      	ldr	r0, [pc, #148]	; (80013ec <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001356:	03d2      	lsls	r2, r2, #15
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001358:	bf48      	it	mi
 800135a:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800135c:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800135e:	bf41      	itttt	mi
 8001360:	4923      	ldrmi	r1, [pc, #140]	; (80013f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8001362:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001366:	5c89      	ldrbmi	r1, [r1, r2]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001368:	4a22      	ldrmi	r2, [pc, #136]	; (80013f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800136a:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800136c:	bf4c      	ite	mi
 800136e:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001372:	4a21      	ldrpl	r2, [pc, #132]	; (80013f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001374:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001376:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800137a:	d41c      	bmi.n	80013b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 800137c:	2303      	movs	r3, #3
 800137e:	0040      	lsls	r0, r0, #1
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001380:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001384:	e017      	b.n	80013b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
    {
      break;
    }
  }
  return (frequency);
}
 8001386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      frequency = HAL_RCC_GetSysClockFreq();
 800138a:	f7ff be6f 	b.w	800106c <HAL_RCC_GetSysClockFreq>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800138e:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8001394:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001396:	4019      	ands	r1, r3
 8001398:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800139c:	d01e      	beq.n	80013dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800139e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a6:	d107      	bne.n	80013b8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = LSI_VALUE;
 80013a8:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80013ac:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80013ae:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 80013b2:	bf18      	it	ne
 80013b4:	4618      	movne	r0, r3
}
 80013b6:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80013b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80013bc:	d111      	bne.n	80013e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80013be:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80013c0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80013c4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80013c8:	e7f3      	b.n	80013b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80013ca:	f7ff ff21 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80013d6:	3301      	adds	r3, #1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	e7d1      	b.n	8001380 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = LSE_VALUE;
 80013dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013e0:	e7e9      	b.n	80013b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  uint32_t temp_reg = 0U, frequency = 0U;
 80013e2:	2000      	movs	r0, #0
 80013e4:	e7e7      	b.n	80013b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	08002caf 	.word	0x08002caf
 80013f0:	08002cbf 	.word	0x08002cbf
 80013f4:	007a1200 	.word	0x007a1200
 80013f8:	003d0900 	.word	0x003d0900

080013fc <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80013fc:	6803      	ldr	r3, [r0, #0]
{
 80013fe:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001400:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001402:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001404:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8001406:	b295      	uxth	r5, r2
 8001408:	b28c      	uxth	r4, r1
 800140a:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800140c:	bf17      	itett	ne
 800140e:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001410:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001412:	b280      	uxthne	r0, r0
 8001414:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001418:	bf08      	it	eq
 800141a:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 800141e:	bd30      	pop	{r4, r5, pc}

08001420 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001420:	6803      	ldr	r3, [r0, #0]
 8001422:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8001426:	b29b      	uxth	r3, r3
}
 8001428:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800142c:	4770      	bx	lr

0800142e <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 800142e:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001430:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8001432:	f000 000f 	and.w	r0, r0, #15
 8001436:	fb02 0003 	mla	r0, r2, r3, r0
}
 800143a:	b2c0      	uxtb	r0, r0
 800143c:	4770      	bx	lr

0800143e <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800143e:	b530      	push	{r4, r5, lr}
  year = 2000U + nYear;

  if (nMonth < 3U)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001440:	2517      	movs	r5, #23
 8001442:	2309      	movs	r3, #9
 8001444:	434d      	muls	r5, r1
  if (nMonth < 3U)
 8001446:	2902      	cmp	r1, #2
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001448:	fbb5 f5f3 	udiv	r5, r5, r3
  year = 2000U + nYear;
 800144c:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
  if (nMonth < 3U)
 8001450:	d817      	bhi.n	8001482 <RTC_WeekDayNum+0x44>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001452:	f200 73cf 	addw	r3, r0, #1999	; 0x7cf
 8001456:	1d10      	adds	r0, r2, #4
 8001458:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800145c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001460:	4420      	add	r0, r4
 8001462:	4428      	add	r0, r5
 8001464:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8001468:	4410      	add	r0, r2
 800146a:	2264      	movs	r2, #100	; 0x64
 800146c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001470:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001472:	2307      	movs	r3, #7
 8001474:	fbb0 f3f3 	udiv	r3, r0, r3
 8001478:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800147c:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 800147e:	b2c0      	uxtb	r0, r0
 8001480:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001482:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001486:	fbb4 f3f3 	udiv	r3, r4, r3
 800148a:	1c90      	adds	r0, r2, #2
 800148c:	4420      	add	r0, r4
 800148e:	4428      	add	r0, r5
 8001490:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8001494:	4418      	add	r0, r3
 8001496:	2364      	movs	r3, #100	; 0x64
 8001498:	fbb4 f4f3 	udiv	r4, r4, r3
 800149c:	1b00      	subs	r0, r0, r4
 800149e:	e7e8      	b.n	8001472 <RTC_WeekDayNum+0x34>

080014a0 <RTC_EnterInitMode>:
{
 80014a0:	b538      	push	{r3, r4, r5, lr}
 80014a2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80014a4:	f7ff f956 	bl	8000754 <HAL_GetTick>
 80014a8:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	0692      	lsls	r2, r2, #26
 80014b0:	d505      	bpl.n	80014be <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 80014b2:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	f042 0210 	orr.w	r2, r2, #16
 80014ba:	605a      	str	r2, [r3, #4]
}
 80014bc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80014be:	f7ff f949 	bl	8000754 <HAL_GetTick>
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80014c8:	d9ef      	bls.n	80014aa <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80014ca:	2003      	movs	r0, #3
 80014cc:	e7f6      	b.n	80014bc <RTC_EnterInitMode+0x1c>

080014ce <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014ce:	6802      	ldr	r2, [r0, #0]
{
 80014d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014d2:	6853      	ldr	r3, [r2, #4]
{
 80014d4:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014d6:	f023 0310 	bic.w	r3, r3, #16
 80014da:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80014dc:	f7ff f93a 	bl	8000754 <HAL_GetTick>
 80014e0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	069b      	lsls	r3, r3, #26
 80014e8:	d501      	bpl.n	80014ee <RTC_ExitInitMode+0x20>
  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
}
 80014ec:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80014ee:	f7ff f931 	bl	8000754 <HAL_GetTick>
 80014f2:	1b40      	subs	r0, r0, r5
 80014f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80014f8:	d9f3      	bls.n	80014e2 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80014fa:	2003      	movs	r0, #3
 80014fc:	e7f6      	b.n	80014ec <RTC_ExitInitMode+0x1e>

080014fe <RTC_WriteTimeCounter>:
{
 80014fe:	b538      	push	{r3, r4, r5, lr}
 8001500:	4605      	mov	r5, r0
 8001502:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001504:	f7ff ffcc 	bl	80014a0 <RTC_EnterInitMode>
 8001508:	b958      	cbnz	r0, 8001522 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800150a:	682b      	ldr	r3, [r5, #0]
 800150c:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800150e:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001510:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001512:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001514:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001516:	f7ff ffda 	bl	80014ce <RTC_ExitInitMode>
    status = HAL_ERROR;
 800151a:	3800      	subs	r0, #0
 800151c:	bf18      	it	ne
 800151e:	2001      	movne	r0, #1
}
 8001520:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8001522:	2001      	movs	r0, #1
 8001524:	e7fc      	b.n	8001520 <RTC_WriteTimeCounter+0x22>

08001526 <RTC_WriteAlarmCounter>:
{
 8001526:	b538      	push	{r3, r4, r5, lr}
 8001528:	4605      	mov	r5, r0
 800152a:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800152c:	f7ff ffb8 	bl	80014a0 <RTC_EnterInitMode>
 8001530:	b958      	cbnz	r0, 800154a <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001532:	682b      	ldr	r3, [r5, #0]
 8001534:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001536:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001538:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800153a:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800153c:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800153e:	f7ff ffc6 	bl	80014ce <RTC_ExitInitMode>
    status = HAL_ERROR;
 8001542:	3800      	subs	r0, #0
 8001544:	bf18      	it	ne
 8001546:	2001      	movne	r0, #1
}
 8001548:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 800154a:	2001      	movs	r0, #1
 800154c:	e7fc      	b.n	8001548 <RTC_WriteAlarmCounter+0x22>

0800154e <HAL_RTC_SetTime>:
{
 800154e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8001550:	4604      	mov	r4, r0
 8001552:	b1e0      	cbz	r0, 800158e <HAL_RTC_SetTime+0x40>
 8001554:	b1d9      	cbz	r1, 800158e <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8001556:	7c03      	ldrb	r3, [r0, #16]
 8001558:	2502      	movs	r5, #2
 800155a:	2b01      	cmp	r3, #1
 800155c:	d045      	beq.n	80015ea <HAL_RTC_SetTime+0x9c>
 800155e:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001560:	7445      	strb	r5, [r0, #17]
  __HAL_LOCK(hrtc);
 8001562:	7403      	strb	r3, [r0, #16]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001564:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001566:	784e      	ldrb	r6, [r1, #1]
                              ((uint32_t)sTime->Seconds));
 8001568:	788f      	ldrb	r7, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 800156a:	b992      	cbnz	r2, 8001592 <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 800156c:	233c      	movs	r3, #60	; 0x3c
 800156e:	435e      	muls	r6, r3
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001570:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001574:	fb03 6600 	mla	r6, r3, r0, r6
 8001578:	443e      	add	r6, r7
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800157a:	4631      	mov	r1, r6
 800157c:	4620      	mov	r0, r4
 800157e:	f7ff ffbe 	bl	80014fe <RTC_WriteTimeCounter>
 8001582:	4605      	mov	r5, r0
 8001584:	b1b8      	cbz	r0, 80015b6 <HAL_RTC_SetTime+0x68>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001586:	2304      	movs	r3, #4
 8001588:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 800158a:	2300      	movs	r3, #0
 800158c:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 800158e:	2501      	movs	r5, #1
 8001590:	e02b      	b.n	80015ea <HAL_RTC_SetTime+0x9c>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001592:	f7ff ff4c 	bl	800142e <RTC_Bcd2ToByte>
 8001596:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001598:	4630      	mov	r0, r6
 800159a:	f7ff ff48 	bl	800142e <RTC_Bcd2ToByte>
 800159e:	233c      	movs	r3, #60	; 0x3c
 80015a0:	fb03 f100 	mul.w	r1, r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80015a4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80015a8:	4638      	mov	r0, r7
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80015aa:	fb03 1105 	mla	r1, r3, r5, r1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80015ae:	f7ff ff3e 	bl	800142e <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80015b2:	1846      	adds	r6, r0, r1
 80015b4:	e7e1      	b.n	800157a <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80015b6:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80015b8:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80015ba:	6853      	ldr	r3, [r2, #4]
 80015bc:	f023 0305 	bic.w	r3, r3, #5
 80015c0:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80015c2:	f7ff ff2d 	bl	8001420 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 80015c6:	4286      	cmp	r6, r0
 80015c8:	d90b      	bls.n	80015e2 <HAL_RTC_SetTime+0x94>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80015ca:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80015ce:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff ffa7 	bl	8001526 <RTC_WriteAlarmCounter>
 80015d8:	b118      	cbz	r0, 80015e2 <HAL_RTC_SetTime+0x94>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80015da:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 80015dc:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80015de:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 80015e0:	e7d5      	b.n	800158e <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 80015e2:	2301      	movs	r3, #1
 80015e4:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80015e6:	2300      	movs	r3, #0
 80015e8:	7423      	strb	r3, [r4, #16]
}
 80015ea:	4628      	mov	r0, r5
 80015ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080015f0 <HAL_RTC_SetDate>:
{
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 80015f4:	4604      	mov	r4, r0
 80015f6:	b348      	cbz	r0, 800164c <HAL_RTC_SetDate+0x5c>
 80015f8:	b341      	cbz	r1, 800164c <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 80015fa:	7c03      	ldrb	r3, [r0, #16]
 80015fc:	2002      	movs	r0, #2
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d047      	beq.n	8001692 <HAL_RTC_SetDate+0xa2>
 8001602:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001604:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 8001606:	7423      	strb	r3, [r4, #16]
  if (Format == RTC_FORMAT_BIN)
 8001608:	78c8      	ldrb	r0, [r1, #3]
 800160a:	bb0a      	cbnz	r2, 8001650 <HAL_RTC_SetDate+0x60>
    hrtc->DateToUpdate.Year  = sDate->Year;
 800160c:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800160e:	784b      	ldrb	r3, [r1, #1]
 8001610:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001612:	788a      	ldrb	r2, [r1, #2]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001614:	7b61      	ldrb	r1, [r4, #13]
 8001616:	7be0      	ldrb	r0, [r4, #15]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001618:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800161a:	f7ff ff10 	bl	800143e <RTC_WeekDayNum>
 800161e:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001620:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001622:	4620      	mov	r0, r4
 8001624:	f7ff feea 	bl	80013fc <RTC_ReadTimeCounter>
  if (hours > 24U)
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_RTC_SetDate+0xa4>)
 800162a:	4298      	cmp	r0, r3
 800162c:	d92d      	bls.n	800168a <HAL_RTC_SetDate+0x9a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800162e:	4d1a      	ldr	r5, [pc, #104]	; (8001698 <HAL_RTC_SetDate+0xa8>)
 8001630:	fbb0 f2f5 	udiv	r2, r0, r5
 8001634:	fb05 0512 	mls	r5, r5, r2, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001638:	4620      	mov	r0, r4
 800163a:	4629      	mov	r1, r5
 800163c:	f7ff ff5f 	bl	80014fe <RTC_WriteTimeCounter>
 8001640:	4606      	mov	r6, r0
 8001642:	b188      	cbz	r0, 8001668 <HAL_RTC_SetDate+0x78>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001644:	2304      	movs	r3, #4
 8001646:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8001648:	2300      	movs	r3, #0
 800164a:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 800164c:	2001      	movs	r0, #1
 800164e:	e020      	b.n	8001692 <HAL_RTC_SetDate+0xa2>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001650:	f7ff feed 	bl	800142e <RTC_Bcd2ToByte>
 8001654:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001656:	7848      	ldrb	r0, [r1, #1]
 8001658:	f7ff fee9 	bl	800142e <RTC_Bcd2ToByte>
 800165c:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800165e:	7888      	ldrb	r0, [r1, #2]
 8001660:	f7ff fee5 	bl	800142e <RTC_Bcd2ToByte>
 8001664:	4602      	mov	r2, r0
 8001666:	e7d5      	b.n	8001614 <HAL_RTC_SetDate+0x24>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001668:	4620      	mov	r0, r4
 800166a:	f7ff fed9 	bl	8001420 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 800166e:	4285      	cmp	r5, r0
 8001670:	d90b      	bls.n	800168a <HAL_RTC_SetDate+0x9a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001672:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001676:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff ff53 	bl	8001526 <RTC_WriteAlarmCounter>
 8001680:	b118      	cbz	r0, 800168a <HAL_RTC_SetDate+0x9a>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001682:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8001684:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001686:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8001688:	e7e0      	b.n	800164c <HAL_RTC_SetDate+0x5c>
  hrtc->State = HAL_RTC_STATE_READY ;
 800168a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 800168c:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 800168e:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8001690:	7420      	strb	r0, [r4, #16]
}
 8001692:	bd70      	pop	{r4, r5, r6, pc}
 8001694:	00015f8f 	.word	0x00015f8f
 8001698:	00015180 	.word	0x00015180

0800169c <HAL_RTC_WaitForSynchro>:
{
 800169c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800169e:	4604      	mov	r4, r0
 80016a0:	b1a8      	cbz	r0, 80016ce <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80016a2:	6802      	ldr	r2, [r0, #0]
 80016a4:	6853      	ldr	r3, [r2, #4]
 80016a6:	f023 0308 	bic.w	r3, r3, #8
 80016aa:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80016ac:	f7ff f852 	bl	8000754 <HAL_GetTick>
 80016b0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	071b      	lsls	r3, r3, #28
 80016b8:	d501      	bpl.n	80016be <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80016ba:	2000      	movs	r0, #0
}
 80016bc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80016be:	f7ff f849 	bl	8000754 <HAL_GetTick>
 80016c2:	1b40      	subs	r0, r0, r5
 80016c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80016c8:	d9f3      	bls.n	80016b2 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80016ca:	2003      	movs	r0, #3
 80016cc:	e7f6      	b.n	80016bc <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 80016ce:	2001      	movs	r0, #1
 80016d0:	e7f4      	b.n	80016bc <HAL_RTC_WaitForSynchro+0x20>
	...

080016d4 <HAL_RTC_Init>:
{
 80016d4:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 80016d6:	4604      	mov	r4, r0
 80016d8:	b170      	cbz	r0, 80016f8 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80016da:	7c43      	ldrb	r3, [r0, #17]
 80016dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016e0:	b913      	cbnz	r3, 80016e8 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80016e2:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 80016e4:	f7fe fec4 	bl	8000470 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80016e8:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80016ea:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 80016ec:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80016ee:	f7ff ffd5 	bl	800169c <HAL_RTC_WaitForSynchro>
 80016f2:	b118      	cbz	r0, 80016fc <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80016f4:	2304      	movs	r3, #4
 80016f6:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
 80016fa:	e02f      	b.n	800175c <HAL_RTC_Init+0x88>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff fecf 	bl	80014a0 <RTC_EnterInitMode>
 8001702:	2800      	cmp	r0, #0
 8001704:	d1f6      	bne.n	80016f4 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001706:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001708:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800170a:	6853      	ldr	r3, [r2, #4]
 800170c:	f023 0307 	bic.w	r3, r3, #7
 8001710:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001712:	4a13      	ldr	r2, [pc, #76]	; (8001760 <HAL_RTC_Init+0x8c>)
 8001714:	b119      	cbz	r1, 800171e <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001716:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800171e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001720:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001724:	430b      	orrs	r3, r1
 8001726:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001728:	6860      	ldr	r0, [r4, #4]
 800172a:	1c43      	adds	r3, r0, #1
 800172c:	d105      	bne.n	800173a <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff fdf8 	bl	8001324 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8001734:	2800      	cmp	r0, #0
 8001736:	d0dd      	beq.n	80016f4 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8001738:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8001740:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8001742:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8001744:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff fec1 	bl	80014ce <RTC_ExitInitMode>
 800174c:	2301      	movs	r3, #1
 800174e:	b110      	cbz	r0, 8001756 <HAL_RTC_Init+0x82>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001750:	2204      	movs	r2, #4
 8001752:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8001754:	e7d0      	b.n	80016f8 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001756:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001758:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800175a:	7463      	strb	r3, [r4, #17]
}
 800175c:	bd10      	pop	{r4, pc}
 800175e:	bf00      	nop
 8001760:	40006c00 	.word	0x40006c00

08001764 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001764:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001766:	f102 030c 	add.w	r3, r2, #12
 800176a:	e853 3f00 	ldrex	r3, [r3]
 800176e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001772:	320c      	adds	r2, #12
 8001774:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8001778:	6802      	ldr	r2, [r0, #0]
 800177a:	2900      	cmp	r1, #0
 800177c:	d1f2      	bne.n	8001764 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800177e:	f102 0314 	add.w	r3, r2, #20
 8001782:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001786:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800178a:	f102 0c14 	add.w	ip, r2, #20
 800178e:	e84c 3100 	strex	r1, r3, [ip]
 8001792:	2900      	cmp	r1, #0
 8001794:	d1f3      	bne.n	800177e <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001796:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10b      	bne.n	80017b4 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800179c:	f102 030c 	add.w	r3, r2, #12
 80017a0:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017a4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017a8:	f102 0c0c 	add.w	ip, r2, #12
 80017ac:	e84c 3100 	strex	r1, r3, [ip]
 80017b0:	2900      	cmp	r1, #0
 80017b2:	d1f3      	bne.n	800179c <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80017b4:	2320      	movs	r3, #32
 80017b6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017ba:	2300      	movs	r3, #0
 80017bc:	6303      	str	r3, [r0, #48]	; 0x30
}
 80017be:	4770      	bx	lr

080017c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017c0:	b510      	push	{r4, lr}
 80017c2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017c4:	6803      	ldr	r3, [r0, #0]
 80017c6:	68c1      	ldr	r1, [r0, #12]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80017ce:	430a      	orrs	r2, r1
 80017d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017d2:	6882      	ldr	r2, [r0, #8]
 80017d4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80017d6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017d8:	4302      	orrs	r2, r0
 80017da:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80017dc:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80017e0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017e4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80017e6:	430a      	orrs	r2, r1
 80017e8:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	69a1      	ldr	r1, [r4, #24]
 80017ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80017f2:	430a      	orrs	r2, r1
 80017f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <UART_SetConfig+0x70>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d115      	bne.n	8001828 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80017fc:	f7ff fd08 	bl	8001210 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001800:	2319      	movs	r3, #25
 8001802:	4343      	muls	r3, r0
 8001804:	6862      	ldr	r2, [r4, #4]
 8001806:	6820      	ldr	r0, [r4, #0]
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	fbb3 f3f2 	udiv	r3, r3, r2
 800180e:	2264      	movs	r2, #100	; 0x64
 8001810:	fbb3 f1f2 	udiv	r1, r3, r2
 8001814:	fb02 3311 	mls	r3, r2, r1, r3
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	3332      	adds	r3, #50	; 0x32
 800181c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001820:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001824:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8001826:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001828:	f7ff fce2 	bl	80011f0 <HAL_RCC_GetPCLK1Freq>
 800182c:	e7e8      	b.n	8001800 <UART_SetConfig+0x40>
 800182e:	bf00      	nop
 8001830:	40013800 	.word	0x40013800

08001834 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001836:	4604      	mov	r4, r0
 8001838:	460e      	mov	r6, r1
 800183a:	4617      	mov	r7, r2
 800183c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800183e:	6822      	ldr	r2, [r4, #0]
 8001840:	6813      	ldr	r3, [r2, #0]
 8001842:	ea36 0303 	bics.w	r3, r6, r3
 8001846:	d101      	bne.n	800184c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001848:	2000      	movs	r0, #0
 800184a:	e028      	b.n	800189e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800184c:	1c6b      	adds	r3, r5, #1
 800184e:	d0f7      	beq.n	8001840 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001850:	b125      	cbz	r5, 800185c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8001852:	f7fe ff7f 	bl	8000754 <HAL_GetTick>
 8001856:	1bc0      	subs	r0, r0, r7
 8001858:	4285      	cmp	r5, r0
 800185a:	d2f0      	bcs.n	800183e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800185c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800185e:	f102 030c 	add.w	r3, r2, #12
 8001862:	e853 3f00 	ldrex	r3, [r3]
 8001866:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800186a:	320c      	adds	r2, #12
 800186c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8001870:	6821      	ldr	r1, [r4, #0]
 8001872:	2800      	cmp	r0, #0
 8001874:	d1f2      	bne.n	800185c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001876:	f101 0314 	add.w	r3, r1, #20
 800187a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800187e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001882:	f101 0014 	add.w	r0, r1, #20
 8001886:	e840 3200 	strex	r2, r3, [r0]
 800188a:	2a00      	cmp	r2, #0
 800188c:	d1f3      	bne.n	8001876 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800188e:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8001890:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8001892:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8001896:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 800189a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800189e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018a0 <HAL_UART_Init>:
{
 80018a0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80018a2:	4604      	mov	r4, r0
 80018a4:	b348      	cbz	r0, 80018fa <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80018a6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80018aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018ae:	b91b      	cbnz	r3, 80018b8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80018b0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80018b4:	f7fe fea2 	bl	80005fc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80018b8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80018ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80018bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80018c0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80018c2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80018c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018c8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80018ca:	f7ff ff79 	bl	80017c0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018ce:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018d0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018e0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018e8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80018ea:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ec:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80018ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80018f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80018f6:	6360      	str	r0, [r4, #52]	; 0x34
}
 80018f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018fa:	2001      	movs	r0, #1
 80018fc:	e7fc      	b.n	80018f8 <HAL_UART_Init+0x58>

080018fe <HAL_UART_Transmit>:
{
 80018fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001902:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001904:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001908:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800190a:	2b20      	cmp	r3, #32
{
 800190c:	460e      	mov	r6, r1
 800190e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001910:	d13c      	bne.n	800198c <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8001912:	2900      	cmp	r1, #0
 8001914:	d03c      	beq.n	8001990 <HAL_UART_Transmit+0x92>
 8001916:	2a00      	cmp	r2, #0
 8001918:	d03a      	beq.n	8001990 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800191a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800191c:	2500      	movs	r5, #0
 800191e:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001920:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8001924:	f7fe ff16 	bl	8000754 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001928:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800192a:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800192c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8001930:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001932:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001934:	d103      	bne.n	800193e <HAL_UART_Transmit+0x40>
 8001936:	6923      	ldr	r3, [r4, #16]
 8001938:	b90b      	cbnz	r3, 800193e <HAL_UART_Transmit+0x40>
 800193a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800193c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800193e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001940:	b29b      	uxth	r3, r3
 8001942:	b953      	cbnz	r3, 800195a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001944:	464b      	mov	r3, r9
 8001946:	4642      	mov	r2, r8
 8001948:	2140      	movs	r1, #64	; 0x40
 800194a:	4620      	mov	r0, r4
 800194c:	f7ff ff72 	bl	8001834 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001950:	b950      	cbnz	r0, 8001968 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8001952:	2320      	movs	r3, #32
 8001954:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8001958:	e007      	b.n	800196a <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800195a:	464b      	mov	r3, r9
 800195c:	4642      	mov	r2, r8
 800195e:	2180      	movs	r1, #128	; 0x80
 8001960:	4620      	mov	r0, r4
 8001962:	f7ff ff67 	bl	8001834 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001966:	b110      	cbz	r0, 800196e <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8001968:	2003      	movs	r0, #3
}
 800196a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800196e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001970:	b94e      	cbnz	r6, 8001986 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001972:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001976:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800197a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800197c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800197e:	3901      	subs	r1, #1
 8001980:	b289      	uxth	r1, r1
 8001982:	84e1      	strh	r1, [r4, #38]	; 0x26
 8001984:	e7db      	b.n	800193e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001986:	f816 3b01 	ldrb.w	r3, [r6], #1
 800198a:	e7f6      	b.n	800197a <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 800198c:	2002      	movs	r0, #2
 800198e:	e7ec      	b.n	800196a <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8001990:	2001      	movs	r0, #1
 8001992:	e7ea      	b.n	800196a <HAL_UART_Transmit+0x6c>

08001994 <HAL_UART_TxCpltCallback>:
 8001994:	4770      	bx	lr

08001996 <HAL_UART_RxCpltCallback>:
 8001996:	4770      	bx	lr

08001998 <HAL_UART_ErrorCallback>:
 8001998:	4770      	bx	lr

0800199a <UART_DMAAbortOnError>:
{
 800199a:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800199c:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800199e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80019a0:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80019a2:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80019a4:	f7ff fff8 	bl	8001998 <HAL_UART_ErrorCallback>
}
 80019a8:	bd08      	pop	{r3, pc}

080019aa <HAL_UARTEx_RxEventCallback>:
}
 80019aa:	4770      	bx	lr

080019ac <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80019ac:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80019b0:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80019b2:	2b22      	cmp	r3, #34	; 0x22
 80019b4:	d142      	bne.n	8001a3c <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019b6:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80019b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ba:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80019be:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019c0:	d13f      	bne.n	8001a42 <UART_Receive_IT.isra.0+0x96>
 80019c2:	6901      	ldr	r1, [r0, #16]
 80019c4:	2900      	cmp	r1, #0
 80019c6:	d13f      	bne.n	8001a48 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80019c8:	6852      	ldr	r2, [r2, #4]
 80019ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019ce:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80019d2:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80019d4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29b      	uxth	r3, r3
 80019da:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d12d      	bne.n	8001a3c <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80019e0:	6802      	ldr	r2, [r0, #0]
 80019e2:	68d1      	ldr	r1, [r2, #12]
 80019e4:	f021 0120 	bic.w	r1, r1, #32
 80019e8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80019ea:	68d1      	ldr	r1, [r2, #12]
 80019ec:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80019f0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80019f2:	6951      	ldr	r1, [r2, #20]
 80019f4:	f021 0101 	bic.w	r1, r1, #1
 80019f8:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80019fa:	2220      	movs	r2, #32
 80019fc:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a00:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a02:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001a04:	2a01      	cmp	r2, #1
 8001a06:	6802      	ldr	r2, [r0, #0]
 8001a08:	d128      	bne.n	8001a5c <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a0a:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a0c:	f102 030c 	add.w	r3, r2, #12
 8001a10:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a14:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a18:	f102 0c0c 	add.w	ip, r2, #12
 8001a1c:	e84c 3100 	strex	r1, r3, [ip]
 8001a20:	2900      	cmp	r1, #0
 8001a22:	d1f3      	bne.n	8001a0c <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	06db      	lsls	r3, r3, #27
 8001a28:	d505      	bpl.n	8001a36 <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001a2a:	9101      	str	r1, [sp, #4]
 8001a2c:	6813      	ldr	r3, [r2, #0]
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	6853      	ldr	r3, [r2, #4]
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001a36:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001a38:	f7ff ffb7 	bl	80019aa <HAL_UARTEx_RxEventCallback>
}
 8001a3c:	b003      	add	sp, #12
 8001a3e:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a42:	b939      	cbnz	r1, 8001a54 <UART_Receive_IT.isra.0+0xa8>
 8001a44:	6901      	ldr	r1, [r0, #16]
 8001a46:	b929      	cbnz	r1, 8001a54 <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a48:	6852      	ldr	r2, [r2, #4]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8001a4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a50:	3301      	adds	r3, #1
 8001a52:	e7be      	b.n	80019d2 <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a54:	6852      	ldr	r2, [r2, #4]
 8001a56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a5a:	e7f7      	b.n	8001a4c <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8001a5c:	f7ff ff9b 	bl	8001996 <HAL_UART_RxCpltCallback>
 8001a60:	e7ec      	b.n	8001a3c <UART_Receive_IT.isra.0+0x90>
	...

08001a64 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a64:	6803      	ldr	r3, [r0, #0]
{
 8001a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a68:	681a      	ldr	r2, [r3, #0]
{
 8001a6a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001a6c:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a6e:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a70:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001a72:	d108      	bne.n	8001a86 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a74:	0696      	lsls	r6, r2, #26
 8001a76:	d568      	bpl.n	8001b4a <HAL_UART_IRQHandler+0xe6>
 8001a78:	068d      	lsls	r5, r1, #26
 8001a7a:	d566      	bpl.n	8001b4a <HAL_UART_IRQHandler+0xe6>
}
 8001a7c:	b002      	add	sp, #8
 8001a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001a82:	f7ff bf93 	b.w	80019ac <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001a86:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a8a:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8001a8e:	4305      	orrs	r5, r0
 8001a90:	d05b      	beq.n	8001b4a <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a92:	07d6      	lsls	r6, r2, #31
 8001a94:	d505      	bpl.n	8001aa2 <HAL_UART_IRQHandler+0x3e>
 8001a96:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a98:	bf42      	ittt	mi
 8001a9a:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8001a9c:	f043 0301 	orrmi.w	r3, r3, #1
 8001aa0:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001aa2:	0753      	lsls	r3, r2, #29
 8001aa4:	d504      	bpl.n	8001ab0 <HAL_UART_IRQHandler+0x4c>
 8001aa6:	b118      	cbz	r0, 8001ab0 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001aa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ab0:	0796      	lsls	r6, r2, #30
 8001ab2:	d504      	bpl.n	8001abe <HAL_UART_IRQHandler+0x5a>
 8001ab4:	b118      	cbz	r0, 8001abe <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ab6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001abe:	0715      	lsls	r5, r2, #28
 8001ac0:	d507      	bpl.n	8001ad2 <HAL_UART_IRQHandler+0x6e>
 8001ac2:	f001 0320 	and.w	r3, r1, #32
 8001ac6:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ac8:	bf1e      	ittt	ne
 8001aca:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8001acc:	f043 0308 	orrne.w	r3, r3, #8
 8001ad0:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ad2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d032      	beq.n	8001b3e <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ad8:	0692      	lsls	r2, r2, #26
 8001ada:	d504      	bpl.n	8001ae6 <HAL_UART_IRQHandler+0x82>
 8001adc:	068b      	lsls	r3, r1, #26
 8001ade:	d502      	bpl.n	8001ae6 <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7ff ff63 	bl	80019ac <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ae6:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8001ae8:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001aea:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001aec:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001af2:	f002 0208 	and.w	r2, r2, #8
 8001af6:	ea53 0502 	orrs.w	r5, r3, r2
 8001afa:	d022      	beq.n	8001b42 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8001afc:	f7ff fe32 	bl	8001764 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b00:	6973      	ldr	r3, [r6, #20]
 8001b02:	065e      	lsls	r6, r3, #25
 8001b04:	d518      	bpl.n	8001b38 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b06:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b08:	f102 0314 	add.w	r3, r2, #20
 8001b0c:	e853 3f00 	ldrex	r3, [r3]
 8001b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b14:	3214      	adds	r2, #20
 8001b16:	e842 3100 	strex	r1, r3, [r2]
 8001b1a:	2900      	cmp	r1, #0
 8001b1c:	d1f3      	bne.n	8001b06 <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8001b1e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001b20:	b150      	cbz	r0, 8001b38 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b22:	4b74      	ldr	r3, [pc, #464]	; (8001cf4 <HAL_UART_IRQHandler+0x290>)
 8001b24:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b26:	f7fe fe9f 	bl	8000868 <HAL_DMA_Abort_IT>
 8001b2a:	b140      	cbz	r0, 8001b3e <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b2c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001b2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8001b30:	b002      	add	sp, #8
 8001b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b36:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7ff ff2d 	bl	8001998 <HAL_UART_ErrorCallback>
}
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001b42:	f7ff ff29 	bl	8001998 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b46:	6465      	str	r5, [r4, #68]	; 0x44
 8001b48:	e7f9      	b.n	8001b3e <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001b4c:	2801      	cmp	r0, #1
 8001b4e:	f040 8094 	bne.w	8001c7a <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001b52:	06d5      	lsls	r5, r2, #27
 8001b54:	f140 8091 	bpl.w	8001c7a <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001b58:	06c8      	lsls	r0, r1, #27
 8001b5a:	f140 808e 	bpl.w	8001c7a <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	9201      	str	r2, [sp, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	9201      	str	r2, [sp, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	9201      	str	r2, [sp, #4]
 8001b6a:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	0652      	lsls	r2, r2, #25
 8001b70:	d54d      	bpl.n	8001c0e <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b72:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001b74:	680a      	ldr	r2, [r1, #0]
 8001b76:	6852      	ldr	r2, [r2, #4]
 8001b78:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8001b7a:	2a00      	cmp	r2, #0
 8001b7c:	d0df      	beq.n	8001b3e <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001b7e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8001b80:	4290      	cmp	r0, r2
 8001b82:	d9dc      	bls.n	8001b3e <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8001b84:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b86:	698a      	ldr	r2, [r1, #24]
 8001b88:	2a20      	cmp	r2, #32
 8001b8a:	d036      	beq.n	8001bfa <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b8c:	f103 020c 	add.w	r2, r3, #12
 8001b90:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b98:	f103 000c 	add.w	r0, r3, #12
 8001b9c:	e840 2100 	strex	r1, r2, [r0]
 8001ba0:	2900      	cmp	r1, #0
 8001ba2:	d1f3      	bne.n	8001b8c <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ba4:	f103 0214 	add.w	r2, r3, #20
 8001ba8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bac:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bb0:	f103 0014 	add.w	r0, r3, #20
 8001bb4:	e840 2100 	strex	r1, r2, [r0]
 8001bb8:	2900      	cmp	r1, #0
 8001bba:	d1f3      	bne.n	8001ba4 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bbc:	f103 0214 	add.w	r2, r3, #20
 8001bc0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bc8:	f103 0014 	add.w	r0, r3, #20
 8001bcc:	e840 2100 	strex	r1, r2, [r0]
 8001bd0:	2900      	cmp	r1, #0
 8001bd2:	d1f3      	bne.n	8001bbc <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bda:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bdc:	f103 020c 	add.w	r2, r3, #12
 8001be0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001be4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001be8:	f103 000c 	add.w	r0, r3, #12
 8001bec:	e840 2100 	strex	r1, r2, [r0]
 8001bf0:	2900      	cmp	r1, #0
 8001bf2:	d1f3      	bne.n	8001bdc <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001bf4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001bf6:	f7fe fe17 	bl	8000828 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001bfe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001c00:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8001c02:	1ac9      	subs	r1, r1, r3
 8001c04:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c06:	4620      	mov	r0, r4
 8001c08:	f7ff fecf 	bl	80019aa <HAL_UARTEx_RxEventCallback>
 8001c0c:	e797      	b.n	8001b3e <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c0e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8001c10:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c12:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8001c14:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c16:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	d090      	beq.n	8001b3e <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c1c:	1a89      	subs	r1, r1, r2
 8001c1e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8001c20:	2900      	cmp	r1, #0
 8001c22:	d08c      	beq.n	8001b3e <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c24:	f103 020c 	add.w	r2, r3, #12
 8001c28:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c30:	f103 050c 	add.w	r5, r3, #12
 8001c34:	e845 2000 	strex	r0, r2, [r5]
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	d1f3      	bne.n	8001c24 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c3c:	f103 0214 	add.w	r2, r3, #20
 8001c40:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c44:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c48:	f103 0514 	add.w	r5, r3, #20
 8001c4c:	e845 2000 	strex	r0, r2, [r5]
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d1f3      	bne.n	8001c3c <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8001c54:	2220      	movs	r2, #32
 8001c56:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c5a:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c5c:	f103 020c 	add.w	r2, r3, #12
 8001c60:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c64:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c68:	f103 050c 	add.w	r5, r3, #12
 8001c6c:	e845 2000 	strex	r0, r2, [r5]
 8001c70:	2800      	cmp	r0, #0
 8001c72:	d1f3      	bne.n	8001c5c <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001c74:	2302      	movs	r3, #2
 8001c76:	6363      	str	r3, [r4, #52]	; 0x34
 8001c78:	e7c5      	b.n	8001c06 <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c7a:	0616      	lsls	r6, r2, #24
 8001c7c:	d528      	bpl.n	8001cd0 <HAL_UART_IRQHandler+0x26c>
 8001c7e:	060d      	lsls	r5, r1, #24
 8001c80:	d526      	bpl.n	8001cd0 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c82:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001c86:	2a21      	cmp	r2, #33	; 0x21
 8001c88:	f47f af59 	bne.w	8001b3e <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c8c:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001c8e:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c90:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001c94:	d117      	bne.n	8001cc6 <HAL_UART_IRQHandler+0x262>
 8001c96:	6921      	ldr	r1, [r4, #16]
 8001c98:	b9a9      	cbnz	r1, 8001cc6 <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c9a:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001c9e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001ca2:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001ca4:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001ca6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001ca8:	3a01      	subs	r2, #1
 8001caa:	b292      	uxth	r2, r2
 8001cac:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001cae:	2a00      	cmp	r2, #0
 8001cb0:	f47f af45 	bne.w	8001b3e <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cba:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	e73b      	b.n	8001b3e <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001cc6:	1c51      	adds	r1, r2, #1
 8001cc8:	6221      	str	r1, [r4, #32]
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	e7ea      	b.n	8001ca6 <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cd0:	0650      	lsls	r0, r2, #25
 8001cd2:	f57f af34 	bpl.w	8001b3e <HAL_UART_IRQHandler+0xda>
 8001cd6:	064a      	lsls	r2, r1, #25
 8001cd8:	f57f af31 	bpl.w	8001b3e <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001cdc:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001cde:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ce4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8001cec:	f7ff fe52 	bl	8001994 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8001cf0:	e725      	b.n	8001b3e <HAL_UART_IRQHandler+0xda>
 8001cf2:	bf00      	nop
 8001cf4:	0800199b 	.word	0x0800199b

08001cf8 <std>:
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	b510      	push	{r4, lr}
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8001d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d06:	6083      	str	r3, [r0, #8]
 8001d08:	8181      	strh	r1, [r0, #12]
 8001d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8001d0c:	81c2      	strh	r2, [r0, #14]
 8001d0e:	6183      	str	r3, [r0, #24]
 8001d10:	4619      	mov	r1, r3
 8001d12:	2208      	movs	r2, #8
 8001d14:	305c      	adds	r0, #92	; 0x5c
 8001d16:	f000 f9f7 	bl	8002108 <memset>
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <std+0x58>)
 8001d1c:	6224      	str	r4, [r4, #32]
 8001d1e:	6263      	str	r3, [r4, #36]	; 0x24
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <std+0x5c>)
 8001d22:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <std+0x60>)
 8001d26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <std+0x64>)
 8001d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <std+0x68>)
 8001d2e:	429c      	cmp	r4, r3
 8001d30:	d006      	beq.n	8001d40 <std+0x48>
 8001d32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001d36:	4294      	cmp	r4, r2
 8001d38:	d002      	beq.n	8001d40 <std+0x48>
 8001d3a:	33d0      	adds	r3, #208	; 0xd0
 8001d3c:	429c      	cmp	r4, r3
 8001d3e:	d105      	bne.n	8001d4c <std+0x54>
 8001d40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d48:	f000 ba56 	b.w	80021f8 <__retarget_lock_init_recursive>
 8001d4c:	bd10      	pop	{r4, pc}
 8001d4e:	bf00      	nop
 8001d50:	08001f59 	.word	0x08001f59
 8001d54:	08001f7b 	.word	0x08001f7b
 8001d58:	08001fb3 	.word	0x08001fb3
 8001d5c:	08001fd7 	.word	0x08001fd7
 8001d60:	20000108 	.word	0x20000108

08001d64 <stdio_exit_handler>:
 8001d64:	4a02      	ldr	r2, [pc, #8]	; (8001d70 <stdio_exit_handler+0xc>)
 8001d66:	4903      	ldr	r1, [pc, #12]	; (8001d74 <stdio_exit_handler+0x10>)
 8001d68:	4803      	ldr	r0, [pc, #12]	; (8001d78 <stdio_exit_handler+0x14>)
 8001d6a:	f000 b869 	b.w	8001e40 <_fwalk_sglue>
 8001d6e:	bf00      	nop
 8001d70:	2000000c 	.word	0x2000000c
 8001d74:	08002a99 	.word	0x08002a99
 8001d78:	20000018 	.word	0x20000018

08001d7c <cleanup_stdio>:
 8001d7c:	6841      	ldr	r1, [r0, #4]
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <cleanup_stdio+0x34>)
 8001d80:	b510      	push	{r4, lr}
 8001d82:	4299      	cmp	r1, r3
 8001d84:	4604      	mov	r4, r0
 8001d86:	d001      	beq.n	8001d8c <cleanup_stdio+0x10>
 8001d88:	f000 fe86 	bl	8002a98 <_fflush_r>
 8001d8c:	68a1      	ldr	r1, [r4, #8]
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <cleanup_stdio+0x38>)
 8001d90:	4299      	cmp	r1, r3
 8001d92:	d002      	beq.n	8001d9a <cleanup_stdio+0x1e>
 8001d94:	4620      	mov	r0, r4
 8001d96:	f000 fe7f 	bl	8002a98 <_fflush_r>
 8001d9a:	68e1      	ldr	r1, [r4, #12]
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <cleanup_stdio+0x3c>)
 8001d9e:	4299      	cmp	r1, r3
 8001da0:	d004      	beq.n	8001dac <cleanup_stdio+0x30>
 8001da2:	4620      	mov	r0, r4
 8001da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001da8:	f000 be76 	b.w	8002a98 <_fflush_r>
 8001dac:	bd10      	pop	{r4, pc}
 8001dae:	bf00      	nop
 8001db0:	20000108 	.word	0x20000108
 8001db4:	20000170 	.word	0x20000170
 8001db8:	200001d8 	.word	0x200001d8

08001dbc <global_stdio_init.part.0>:
 8001dbc:	b510      	push	{r4, lr}
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <global_stdio_init.part.0+0x30>)
 8001dc0:	4c0b      	ldr	r4, [pc, #44]	; (8001df0 <global_stdio_init.part.0+0x34>)
 8001dc2:	4a0c      	ldr	r2, [pc, #48]	; (8001df4 <global_stdio_init.part.0+0x38>)
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	2104      	movs	r1, #4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f7ff ff94 	bl	8001cf8 <std>
 8001dd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2109      	movs	r1, #9
 8001dd8:	f7ff ff8e 	bl	8001cf8 <std>
 8001ddc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001de0:	2202      	movs	r2, #2
 8001de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001de6:	2112      	movs	r1, #18
 8001de8:	f7ff bf86 	b.w	8001cf8 <std>
 8001dec:	20000240 	.word	0x20000240
 8001df0:	20000108 	.word	0x20000108
 8001df4:	08001d65 	.word	0x08001d65

08001df8 <__sfp_lock_acquire>:
 8001df8:	4801      	ldr	r0, [pc, #4]	; (8001e00 <__sfp_lock_acquire+0x8>)
 8001dfa:	f000 b9fe 	b.w	80021fa <__retarget_lock_acquire_recursive>
 8001dfe:	bf00      	nop
 8001e00:	20000249 	.word	0x20000249

08001e04 <__sfp_lock_release>:
 8001e04:	4801      	ldr	r0, [pc, #4]	; (8001e0c <__sfp_lock_release+0x8>)
 8001e06:	f000 b9f9 	b.w	80021fc <__retarget_lock_release_recursive>
 8001e0a:	bf00      	nop
 8001e0c:	20000249 	.word	0x20000249

08001e10 <__sinit>:
 8001e10:	b510      	push	{r4, lr}
 8001e12:	4604      	mov	r4, r0
 8001e14:	f7ff fff0 	bl	8001df8 <__sfp_lock_acquire>
 8001e18:	6a23      	ldr	r3, [r4, #32]
 8001e1a:	b11b      	cbz	r3, 8001e24 <__sinit+0x14>
 8001e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e20:	f7ff bff0 	b.w	8001e04 <__sfp_lock_release>
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <__sinit+0x28>)
 8001e26:	6223      	str	r3, [r4, #32]
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <__sinit+0x2c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f5      	bne.n	8001e1c <__sinit+0xc>
 8001e30:	f7ff ffc4 	bl	8001dbc <global_stdio_init.part.0>
 8001e34:	e7f2      	b.n	8001e1c <__sinit+0xc>
 8001e36:	bf00      	nop
 8001e38:	08001d7d 	.word	0x08001d7d
 8001e3c:	20000240 	.word	0x20000240

08001e40 <_fwalk_sglue>:
 8001e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e44:	4607      	mov	r7, r0
 8001e46:	4688      	mov	r8, r1
 8001e48:	4614      	mov	r4, r2
 8001e4a:	2600      	movs	r6, #0
 8001e4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e50:	f1b9 0901 	subs.w	r9, r9, #1
 8001e54:	d505      	bpl.n	8001e62 <_fwalk_sglue+0x22>
 8001e56:	6824      	ldr	r4, [r4, #0]
 8001e58:	2c00      	cmp	r4, #0
 8001e5a:	d1f7      	bne.n	8001e4c <_fwalk_sglue+0xc>
 8001e5c:	4630      	mov	r0, r6
 8001e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e62:	89ab      	ldrh	r3, [r5, #12]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d907      	bls.n	8001e78 <_fwalk_sglue+0x38>
 8001e68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	d003      	beq.n	8001e78 <_fwalk_sglue+0x38>
 8001e70:	4629      	mov	r1, r5
 8001e72:	4638      	mov	r0, r7
 8001e74:	47c0      	blx	r8
 8001e76:	4306      	orrs	r6, r0
 8001e78:	3568      	adds	r5, #104	; 0x68
 8001e7a:	e7e9      	b.n	8001e50 <_fwalk_sglue+0x10>

08001e7c <iprintf>:
 8001e7c:	b40f      	push	{r0, r1, r2, r3}
 8001e7e:	b507      	push	{r0, r1, r2, lr}
 8001e80:	4906      	ldr	r1, [pc, #24]	; (8001e9c <iprintf+0x20>)
 8001e82:	ab04      	add	r3, sp, #16
 8001e84:	6808      	ldr	r0, [r1, #0]
 8001e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e8a:	6881      	ldr	r1, [r0, #8]
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	f000 fad3 	bl	8002438 <_vfiprintf_r>
 8001e92:	b003      	add	sp, #12
 8001e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e98:	b004      	add	sp, #16
 8001e9a:	4770      	bx	lr
 8001e9c:	20000064 	.word	0x20000064

08001ea0 <_puts_r>:
 8001ea0:	6a03      	ldr	r3, [r0, #32]
 8001ea2:	b570      	push	{r4, r5, r6, lr}
 8001ea4:	4605      	mov	r5, r0
 8001ea6:	460e      	mov	r6, r1
 8001ea8:	6884      	ldr	r4, [r0, #8]
 8001eaa:	b90b      	cbnz	r3, 8001eb0 <_puts_r+0x10>
 8001eac:	f7ff ffb0 	bl	8001e10 <__sinit>
 8001eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001eb2:	07db      	lsls	r3, r3, #31
 8001eb4:	d405      	bmi.n	8001ec2 <_puts_r+0x22>
 8001eb6:	89a3      	ldrh	r3, [r4, #12]
 8001eb8:	0598      	lsls	r0, r3, #22
 8001eba:	d402      	bmi.n	8001ec2 <_puts_r+0x22>
 8001ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ebe:	f000 f99c 	bl	80021fa <__retarget_lock_acquire_recursive>
 8001ec2:	89a3      	ldrh	r3, [r4, #12]
 8001ec4:	0719      	lsls	r1, r3, #28
 8001ec6:	d513      	bpl.n	8001ef0 <_puts_r+0x50>
 8001ec8:	6923      	ldr	r3, [r4, #16]
 8001eca:	b18b      	cbz	r3, 8001ef0 <_puts_r+0x50>
 8001ecc:	3e01      	subs	r6, #1
 8001ece:	68a3      	ldr	r3, [r4, #8]
 8001ed0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60a3      	str	r3, [r4, #8]
 8001ed8:	b9e9      	cbnz	r1, 8001f16 <_puts_r+0x76>
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da2e      	bge.n	8001f3c <_puts_r+0x9c>
 8001ede:	4622      	mov	r2, r4
 8001ee0:	210a      	movs	r1, #10
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	f000 f87b 	bl	8001fde <__swbuf_r>
 8001ee8:	3001      	adds	r0, #1
 8001eea:	d007      	beq.n	8001efc <_puts_r+0x5c>
 8001eec:	250a      	movs	r5, #10
 8001eee:	e007      	b.n	8001f00 <_puts_r+0x60>
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	4628      	mov	r0, r5
 8001ef4:	f000 f8b0 	bl	8002058 <__swsetup_r>
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d0e7      	beq.n	8001ecc <_puts_r+0x2c>
 8001efc:	f04f 35ff 	mov.w	r5, #4294967295
 8001f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f02:	07da      	lsls	r2, r3, #31
 8001f04:	d405      	bmi.n	8001f12 <_puts_r+0x72>
 8001f06:	89a3      	ldrh	r3, [r4, #12]
 8001f08:	059b      	lsls	r3, r3, #22
 8001f0a:	d402      	bmi.n	8001f12 <_puts_r+0x72>
 8001f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f0e:	f000 f975 	bl	80021fc <__retarget_lock_release_recursive>
 8001f12:	4628      	mov	r0, r5
 8001f14:	bd70      	pop	{r4, r5, r6, pc}
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da04      	bge.n	8001f24 <_puts_r+0x84>
 8001f1a:	69a2      	ldr	r2, [r4, #24]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dc06      	bgt.n	8001f2e <_puts_r+0x8e>
 8001f20:	290a      	cmp	r1, #10
 8001f22:	d004      	beq.n	8001f2e <_puts_r+0x8e>
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	6022      	str	r2, [r4, #0]
 8001f2a:	7019      	strb	r1, [r3, #0]
 8001f2c:	e7cf      	b.n	8001ece <_puts_r+0x2e>
 8001f2e:	4622      	mov	r2, r4
 8001f30:	4628      	mov	r0, r5
 8001f32:	f000 f854 	bl	8001fde <__swbuf_r>
 8001f36:	3001      	adds	r0, #1
 8001f38:	d1c9      	bne.n	8001ece <_puts_r+0x2e>
 8001f3a:	e7df      	b.n	8001efc <_puts_r+0x5c>
 8001f3c:	250a      	movs	r5, #10
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	6022      	str	r2, [r4, #0]
 8001f44:	701d      	strb	r5, [r3, #0]
 8001f46:	e7db      	b.n	8001f00 <_puts_r+0x60>

08001f48 <puts>:
 8001f48:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <puts+0xc>)
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	f7ff bfa7 	b.w	8001ea0 <_puts_r>
 8001f52:	bf00      	nop
 8001f54:	20000064 	.word	0x20000064

08001f58 <__sread>:
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	460c      	mov	r4, r1
 8001f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f60:	f000 f8fc 	bl	800215c <_read_r>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	bfab      	itete	ge
 8001f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8001f6c:	181b      	addge	r3, r3, r0
 8001f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f72:	bfac      	ite	ge
 8001f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f76:	81a3      	strhlt	r3, [r4, #12]
 8001f78:	bd10      	pop	{r4, pc}

08001f7a <__swrite>:
 8001f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f7e:	461f      	mov	r7, r3
 8001f80:	898b      	ldrh	r3, [r1, #12]
 8001f82:	4605      	mov	r5, r0
 8001f84:	05db      	lsls	r3, r3, #23
 8001f86:	460c      	mov	r4, r1
 8001f88:	4616      	mov	r6, r2
 8001f8a:	d505      	bpl.n	8001f98 <__swrite+0x1e>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f94:	f000 f8d0 	bl	8002138 <_lseek_r>
 8001f98:	89a3      	ldrh	r3, [r4, #12]
 8001f9a:	4632      	mov	r2, r6
 8001f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fa0:	81a3      	strh	r3, [r4, #12]
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fae:	f000 b8e7 	b.w	8002180 <_write_r>

08001fb2 <__sseek>:
 8001fb2:	b510      	push	{r4, lr}
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fba:	f000 f8bd 	bl	8002138 <_lseek_r>
 8001fbe:	1c43      	adds	r3, r0, #1
 8001fc0:	89a3      	ldrh	r3, [r4, #12]
 8001fc2:	bf15      	itete	ne
 8001fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001fce:	81a3      	strheq	r3, [r4, #12]
 8001fd0:	bf18      	it	ne
 8001fd2:	81a3      	strhne	r3, [r4, #12]
 8001fd4:	bd10      	pop	{r4, pc}

08001fd6 <__sclose>:
 8001fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fda:	f000 b89d 	b.w	8002118 <_close_r>

08001fde <__swbuf_r>:
 8001fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe0:	460e      	mov	r6, r1
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	4605      	mov	r5, r0
 8001fe6:	b118      	cbz	r0, 8001ff0 <__swbuf_r+0x12>
 8001fe8:	6a03      	ldr	r3, [r0, #32]
 8001fea:	b90b      	cbnz	r3, 8001ff0 <__swbuf_r+0x12>
 8001fec:	f7ff ff10 	bl	8001e10 <__sinit>
 8001ff0:	69a3      	ldr	r3, [r4, #24]
 8001ff2:	60a3      	str	r3, [r4, #8]
 8001ff4:	89a3      	ldrh	r3, [r4, #12]
 8001ff6:	071a      	lsls	r2, r3, #28
 8001ff8:	d525      	bpl.n	8002046 <__swbuf_r+0x68>
 8001ffa:	6923      	ldr	r3, [r4, #16]
 8001ffc:	b31b      	cbz	r3, 8002046 <__swbuf_r+0x68>
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	6922      	ldr	r2, [r4, #16]
 8002002:	b2f6      	uxtb	r6, r6
 8002004:	1a98      	subs	r0, r3, r2
 8002006:	6963      	ldr	r3, [r4, #20]
 8002008:	4637      	mov	r7, r6
 800200a:	4283      	cmp	r3, r0
 800200c:	dc04      	bgt.n	8002018 <__swbuf_r+0x3a>
 800200e:	4621      	mov	r1, r4
 8002010:	4628      	mov	r0, r5
 8002012:	f000 fd41 	bl	8002a98 <_fflush_r>
 8002016:	b9e0      	cbnz	r0, 8002052 <__swbuf_r+0x74>
 8002018:	68a3      	ldr	r3, [r4, #8]
 800201a:	3b01      	subs	r3, #1
 800201c:	60a3      	str	r3, [r4, #8]
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	6022      	str	r2, [r4, #0]
 8002024:	701e      	strb	r6, [r3, #0]
 8002026:	6962      	ldr	r2, [r4, #20]
 8002028:	1c43      	adds	r3, r0, #1
 800202a:	429a      	cmp	r2, r3
 800202c:	d004      	beq.n	8002038 <__swbuf_r+0x5a>
 800202e:	89a3      	ldrh	r3, [r4, #12]
 8002030:	07db      	lsls	r3, r3, #31
 8002032:	d506      	bpl.n	8002042 <__swbuf_r+0x64>
 8002034:	2e0a      	cmp	r6, #10
 8002036:	d104      	bne.n	8002042 <__swbuf_r+0x64>
 8002038:	4621      	mov	r1, r4
 800203a:	4628      	mov	r0, r5
 800203c:	f000 fd2c 	bl	8002a98 <_fflush_r>
 8002040:	b938      	cbnz	r0, 8002052 <__swbuf_r+0x74>
 8002042:	4638      	mov	r0, r7
 8002044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002046:	4621      	mov	r1, r4
 8002048:	4628      	mov	r0, r5
 800204a:	f000 f805 	bl	8002058 <__swsetup_r>
 800204e:	2800      	cmp	r0, #0
 8002050:	d0d5      	beq.n	8001ffe <__swbuf_r+0x20>
 8002052:	f04f 37ff 	mov.w	r7, #4294967295
 8002056:	e7f4      	b.n	8002042 <__swbuf_r+0x64>

08002058 <__swsetup_r>:
 8002058:	b538      	push	{r3, r4, r5, lr}
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <__swsetup_r+0xac>)
 800205c:	4605      	mov	r5, r0
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	460c      	mov	r4, r1
 8002062:	b118      	cbz	r0, 800206c <__swsetup_r+0x14>
 8002064:	6a03      	ldr	r3, [r0, #32]
 8002066:	b90b      	cbnz	r3, 800206c <__swsetup_r+0x14>
 8002068:	f7ff fed2 	bl	8001e10 <__sinit>
 800206c:	89a3      	ldrh	r3, [r4, #12]
 800206e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002072:	0718      	lsls	r0, r3, #28
 8002074:	d422      	bmi.n	80020bc <__swsetup_r+0x64>
 8002076:	06d9      	lsls	r1, r3, #27
 8002078:	d407      	bmi.n	800208a <__swsetup_r+0x32>
 800207a:	2309      	movs	r3, #9
 800207c:	602b      	str	r3, [r5, #0]
 800207e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002082:	f04f 30ff 	mov.w	r0, #4294967295
 8002086:	81a3      	strh	r3, [r4, #12]
 8002088:	e034      	b.n	80020f4 <__swsetup_r+0x9c>
 800208a:	0758      	lsls	r0, r3, #29
 800208c:	d512      	bpl.n	80020b4 <__swsetup_r+0x5c>
 800208e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002090:	b141      	cbz	r1, 80020a4 <__swsetup_r+0x4c>
 8002092:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002096:	4299      	cmp	r1, r3
 8002098:	d002      	beq.n	80020a0 <__swsetup_r+0x48>
 800209a:	4628      	mov	r0, r5
 800209c:	f000 f8b0 	bl	8002200 <_free_r>
 80020a0:	2300      	movs	r3, #0
 80020a2:	6363      	str	r3, [r4, #52]	; 0x34
 80020a4:	89a3      	ldrh	r3, [r4, #12]
 80020a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80020aa:	81a3      	strh	r3, [r4, #12]
 80020ac:	2300      	movs	r3, #0
 80020ae:	6063      	str	r3, [r4, #4]
 80020b0:	6923      	ldr	r3, [r4, #16]
 80020b2:	6023      	str	r3, [r4, #0]
 80020b4:	89a3      	ldrh	r3, [r4, #12]
 80020b6:	f043 0308 	orr.w	r3, r3, #8
 80020ba:	81a3      	strh	r3, [r4, #12]
 80020bc:	6923      	ldr	r3, [r4, #16]
 80020be:	b94b      	cbnz	r3, 80020d4 <__swsetup_r+0x7c>
 80020c0:	89a3      	ldrh	r3, [r4, #12]
 80020c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ca:	d003      	beq.n	80020d4 <__swsetup_r+0x7c>
 80020cc:	4621      	mov	r1, r4
 80020ce:	4628      	mov	r0, r5
 80020d0:	f000 fd2f 	bl	8002b32 <__smakebuf_r>
 80020d4:	89a0      	ldrh	r0, [r4, #12]
 80020d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020da:	f010 0301 	ands.w	r3, r0, #1
 80020de:	d00a      	beq.n	80020f6 <__swsetup_r+0x9e>
 80020e0:	2300      	movs	r3, #0
 80020e2:	60a3      	str	r3, [r4, #8]
 80020e4:	6963      	ldr	r3, [r4, #20]
 80020e6:	425b      	negs	r3, r3
 80020e8:	61a3      	str	r3, [r4, #24]
 80020ea:	6923      	ldr	r3, [r4, #16]
 80020ec:	b943      	cbnz	r3, 8002100 <__swsetup_r+0xa8>
 80020ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80020f2:	d1c4      	bne.n	800207e <__swsetup_r+0x26>
 80020f4:	bd38      	pop	{r3, r4, r5, pc}
 80020f6:	0781      	lsls	r1, r0, #30
 80020f8:	bf58      	it	pl
 80020fa:	6963      	ldrpl	r3, [r4, #20]
 80020fc:	60a3      	str	r3, [r4, #8]
 80020fe:	e7f4      	b.n	80020ea <__swsetup_r+0x92>
 8002100:	2000      	movs	r0, #0
 8002102:	e7f7      	b.n	80020f4 <__swsetup_r+0x9c>
 8002104:	20000064 	.word	0x20000064

08002108 <memset>:
 8002108:	4603      	mov	r3, r0
 800210a:	4402      	add	r2, r0
 800210c:	4293      	cmp	r3, r2
 800210e:	d100      	bne.n	8002112 <memset+0xa>
 8002110:	4770      	bx	lr
 8002112:	f803 1b01 	strb.w	r1, [r3], #1
 8002116:	e7f9      	b.n	800210c <memset+0x4>

08002118 <_close_r>:
 8002118:	b538      	push	{r3, r4, r5, lr}
 800211a:	2300      	movs	r3, #0
 800211c:	4d05      	ldr	r5, [pc, #20]	; (8002134 <_close_r+0x1c>)
 800211e:	4604      	mov	r4, r0
 8002120:	4608      	mov	r0, r1
 8002122:	602b      	str	r3, [r5, #0]
 8002124:	f7fe fa20 	bl	8000568 <_close>
 8002128:	1c43      	adds	r3, r0, #1
 800212a:	d102      	bne.n	8002132 <_close_r+0x1a>
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	b103      	cbz	r3, 8002132 <_close_r+0x1a>
 8002130:	6023      	str	r3, [r4, #0]
 8002132:	bd38      	pop	{r3, r4, r5, pc}
 8002134:	20000244 	.word	0x20000244

08002138 <_lseek_r>:
 8002138:	b538      	push	{r3, r4, r5, lr}
 800213a:	4604      	mov	r4, r0
 800213c:	4608      	mov	r0, r1
 800213e:	4611      	mov	r1, r2
 8002140:	2200      	movs	r2, #0
 8002142:	4d05      	ldr	r5, [pc, #20]	; (8002158 <_lseek_r+0x20>)
 8002144:	602a      	str	r2, [r5, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	f7fe fa18 	bl	800057c <_lseek>
 800214c:	1c43      	adds	r3, r0, #1
 800214e:	d102      	bne.n	8002156 <_lseek_r+0x1e>
 8002150:	682b      	ldr	r3, [r5, #0]
 8002152:	b103      	cbz	r3, 8002156 <_lseek_r+0x1e>
 8002154:	6023      	str	r3, [r4, #0]
 8002156:	bd38      	pop	{r3, r4, r5, pc}
 8002158:	20000244 	.word	0x20000244

0800215c <_read_r>:
 800215c:	b538      	push	{r3, r4, r5, lr}
 800215e:	4604      	mov	r4, r0
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	2200      	movs	r2, #0
 8002166:	4d05      	ldr	r5, [pc, #20]	; (800217c <_read_r+0x20>)
 8002168:	602a      	str	r2, [r5, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	f7fe f9ee 	bl	800054c <_read>
 8002170:	1c43      	adds	r3, r0, #1
 8002172:	d102      	bne.n	800217a <_read_r+0x1e>
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	b103      	cbz	r3, 800217a <_read_r+0x1e>
 8002178:	6023      	str	r3, [r4, #0]
 800217a:	bd38      	pop	{r3, r4, r5, pc}
 800217c:	20000244 	.word	0x20000244

08002180 <_write_r>:
 8002180:	b538      	push	{r3, r4, r5, lr}
 8002182:	4604      	mov	r4, r0
 8002184:	4608      	mov	r0, r1
 8002186:	4611      	mov	r1, r2
 8002188:	2200      	movs	r2, #0
 800218a:	4d05      	ldr	r5, [pc, #20]	; (80021a0 <_write_r+0x20>)
 800218c:	602a      	str	r2, [r5, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	f7fe f8ae 	bl	80002f0 <_write>
 8002194:	1c43      	adds	r3, r0, #1
 8002196:	d102      	bne.n	800219e <_write_r+0x1e>
 8002198:	682b      	ldr	r3, [r5, #0]
 800219a:	b103      	cbz	r3, 800219e <_write_r+0x1e>
 800219c:	6023      	str	r3, [r4, #0]
 800219e:	bd38      	pop	{r3, r4, r5, pc}
 80021a0:	20000244 	.word	0x20000244

080021a4 <__errno>:
 80021a4:	4b01      	ldr	r3, [pc, #4]	; (80021ac <__errno+0x8>)
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000064 	.word	0x20000064

080021b0 <__libc_init_array>:
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	2600      	movs	r6, #0
 80021b4:	4d0c      	ldr	r5, [pc, #48]	; (80021e8 <__libc_init_array+0x38>)
 80021b6:	4c0d      	ldr	r4, [pc, #52]	; (80021ec <__libc_init_array+0x3c>)
 80021b8:	1b64      	subs	r4, r4, r5
 80021ba:	10a4      	asrs	r4, r4, #2
 80021bc:	42a6      	cmp	r6, r4
 80021be:	d109      	bne.n	80021d4 <__libc_init_array+0x24>
 80021c0:	f000 fd34 	bl	8002c2c <_init>
 80021c4:	2600      	movs	r6, #0
 80021c6:	4d0a      	ldr	r5, [pc, #40]	; (80021f0 <__libc_init_array+0x40>)
 80021c8:	4c0a      	ldr	r4, [pc, #40]	; (80021f4 <__libc_init_array+0x44>)
 80021ca:	1b64      	subs	r4, r4, r5
 80021cc:	10a4      	asrs	r4, r4, #2
 80021ce:	42a6      	cmp	r6, r4
 80021d0:	d105      	bne.n	80021de <__libc_init_array+0x2e>
 80021d2:	bd70      	pop	{r4, r5, r6, pc}
 80021d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021d8:	4798      	blx	r3
 80021da:	3601      	adds	r6, #1
 80021dc:	e7ee      	b.n	80021bc <__libc_init_array+0xc>
 80021de:	f855 3b04 	ldr.w	r3, [r5], #4
 80021e2:	4798      	blx	r3
 80021e4:	3601      	adds	r6, #1
 80021e6:	e7f2      	b.n	80021ce <__libc_init_array+0x1e>
 80021e8:	08002cf4 	.word	0x08002cf4
 80021ec:	08002cf4 	.word	0x08002cf4
 80021f0:	08002cf4 	.word	0x08002cf4
 80021f4:	08002cf8 	.word	0x08002cf8

080021f8 <__retarget_lock_init_recursive>:
 80021f8:	4770      	bx	lr

080021fa <__retarget_lock_acquire_recursive>:
 80021fa:	4770      	bx	lr

080021fc <__retarget_lock_release_recursive>:
 80021fc:	4770      	bx	lr
	...

08002200 <_free_r>:
 8002200:	b538      	push	{r3, r4, r5, lr}
 8002202:	4605      	mov	r5, r0
 8002204:	2900      	cmp	r1, #0
 8002206:	d040      	beq.n	800228a <_free_r+0x8a>
 8002208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800220c:	1f0c      	subs	r4, r1, #4
 800220e:	2b00      	cmp	r3, #0
 8002210:	bfb8      	it	lt
 8002212:	18e4      	addlt	r4, r4, r3
 8002214:	f000 f8dc 	bl	80023d0 <__malloc_lock>
 8002218:	4a1c      	ldr	r2, [pc, #112]	; (800228c <_free_r+0x8c>)
 800221a:	6813      	ldr	r3, [r2, #0]
 800221c:	b933      	cbnz	r3, 800222c <_free_r+0x2c>
 800221e:	6063      	str	r3, [r4, #4]
 8002220:	6014      	str	r4, [r2, #0]
 8002222:	4628      	mov	r0, r5
 8002224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002228:	f000 b8d8 	b.w	80023dc <__malloc_unlock>
 800222c:	42a3      	cmp	r3, r4
 800222e:	d908      	bls.n	8002242 <_free_r+0x42>
 8002230:	6820      	ldr	r0, [r4, #0]
 8002232:	1821      	adds	r1, r4, r0
 8002234:	428b      	cmp	r3, r1
 8002236:	bf01      	itttt	eq
 8002238:	6819      	ldreq	r1, [r3, #0]
 800223a:	685b      	ldreq	r3, [r3, #4]
 800223c:	1809      	addeq	r1, r1, r0
 800223e:	6021      	streq	r1, [r4, #0]
 8002240:	e7ed      	b.n	800221e <_free_r+0x1e>
 8002242:	461a      	mov	r2, r3
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	b10b      	cbz	r3, 800224c <_free_r+0x4c>
 8002248:	42a3      	cmp	r3, r4
 800224a:	d9fa      	bls.n	8002242 <_free_r+0x42>
 800224c:	6811      	ldr	r1, [r2, #0]
 800224e:	1850      	adds	r0, r2, r1
 8002250:	42a0      	cmp	r0, r4
 8002252:	d10b      	bne.n	800226c <_free_r+0x6c>
 8002254:	6820      	ldr	r0, [r4, #0]
 8002256:	4401      	add	r1, r0
 8002258:	1850      	adds	r0, r2, r1
 800225a:	4283      	cmp	r3, r0
 800225c:	6011      	str	r1, [r2, #0]
 800225e:	d1e0      	bne.n	8002222 <_free_r+0x22>
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4408      	add	r0, r1
 8002266:	6010      	str	r0, [r2, #0]
 8002268:	6053      	str	r3, [r2, #4]
 800226a:	e7da      	b.n	8002222 <_free_r+0x22>
 800226c:	d902      	bls.n	8002274 <_free_r+0x74>
 800226e:	230c      	movs	r3, #12
 8002270:	602b      	str	r3, [r5, #0]
 8002272:	e7d6      	b.n	8002222 <_free_r+0x22>
 8002274:	6820      	ldr	r0, [r4, #0]
 8002276:	1821      	adds	r1, r4, r0
 8002278:	428b      	cmp	r3, r1
 800227a:	bf01      	itttt	eq
 800227c:	6819      	ldreq	r1, [r3, #0]
 800227e:	685b      	ldreq	r3, [r3, #4]
 8002280:	1809      	addeq	r1, r1, r0
 8002282:	6021      	streq	r1, [r4, #0]
 8002284:	6063      	str	r3, [r4, #4]
 8002286:	6054      	str	r4, [r2, #4]
 8002288:	e7cb      	b.n	8002222 <_free_r+0x22>
 800228a:	bd38      	pop	{r3, r4, r5, pc}
 800228c:	2000024c 	.word	0x2000024c

08002290 <sbrk_aligned>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	4e0e      	ldr	r6, [pc, #56]	; (80022cc <sbrk_aligned+0x3c>)
 8002294:	460c      	mov	r4, r1
 8002296:	6831      	ldr	r1, [r6, #0]
 8002298:	4605      	mov	r5, r0
 800229a:	b911      	cbnz	r1, 80022a2 <sbrk_aligned+0x12>
 800229c:	f000 fca8 	bl	8002bf0 <_sbrk_r>
 80022a0:	6030      	str	r0, [r6, #0]
 80022a2:	4621      	mov	r1, r4
 80022a4:	4628      	mov	r0, r5
 80022a6:	f000 fca3 	bl	8002bf0 <_sbrk_r>
 80022aa:	1c43      	adds	r3, r0, #1
 80022ac:	d00a      	beq.n	80022c4 <sbrk_aligned+0x34>
 80022ae:	1cc4      	adds	r4, r0, #3
 80022b0:	f024 0403 	bic.w	r4, r4, #3
 80022b4:	42a0      	cmp	r0, r4
 80022b6:	d007      	beq.n	80022c8 <sbrk_aligned+0x38>
 80022b8:	1a21      	subs	r1, r4, r0
 80022ba:	4628      	mov	r0, r5
 80022bc:	f000 fc98 	bl	8002bf0 <_sbrk_r>
 80022c0:	3001      	adds	r0, #1
 80022c2:	d101      	bne.n	80022c8 <sbrk_aligned+0x38>
 80022c4:	f04f 34ff 	mov.w	r4, #4294967295
 80022c8:	4620      	mov	r0, r4
 80022ca:	bd70      	pop	{r4, r5, r6, pc}
 80022cc:	20000250 	.word	0x20000250

080022d0 <_malloc_r>:
 80022d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022d4:	1ccd      	adds	r5, r1, #3
 80022d6:	f025 0503 	bic.w	r5, r5, #3
 80022da:	3508      	adds	r5, #8
 80022dc:	2d0c      	cmp	r5, #12
 80022de:	bf38      	it	cc
 80022e0:	250c      	movcc	r5, #12
 80022e2:	2d00      	cmp	r5, #0
 80022e4:	4607      	mov	r7, r0
 80022e6:	db01      	blt.n	80022ec <_malloc_r+0x1c>
 80022e8:	42a9      	cmp	r1, r5
 80022ea:	d905      	bls.n	80022f8 <_malloc_r+0x28>
 80022ec:	230c      	movs	r3, #12
 80022ee:	2600      	movs	r6, #0
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4630      	mov	r0, r6
 80022f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80023cc <_malloc_r+0xfc>
 80022fc:	f000 f868 	bl	80023d0 <__malloc_lock>
 8002300:	f8d8 3000 	ldr.w	r3, [r8]
 8002304:	461c      	mov	r4, r3
 8002306:	bb5c      	cbnz	r4, 8002360 <_malloc_r+0x90>
 8002308:	4629      	mov	r1, r5
 800230a:	4638      	mov	r0, r7
 800230c:	f7ff ffc0 	bl	8002290 <sbrk_aligned>
 8002310:	1c43      	adds	r3, r0, #1
 8002312:	4604      	mov	r4, r0
 8002314:	d155      	bne.n	80023c2 <_malloc_r+0xf2>
 8002316:	f8d8 4000 	ldr.w	r4, [r8]
 800231a:	4626      	mov	r6, r4
 800231c:	2e00      	cmp	r6, #0
 800231e:	d145      	bne.n	80023ac <_malloc_r+0xdc>
 8002320:	2c00      	cmp	r4, #0
 8002322:	d048      	beq.n	80023b6 <_malloc_r+0xe6>
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	4631      	mov	r1, r6
 8002328:	4638      	mov	r0, r7
 800232a:	eb04 0903 	add.w	r9, r4, r3
 800232e:	f000 fc5f 	bl	8002bf0 <_sbrk_r>
 8002332:	4581      	cmp	r9, r0
 8002334:	d13f      	bne.n	80023b6 <_malloc_r+0xe6>
 8002336:	6821      	ldr	r1, [r4, #0]
 8002338:	4638      	mov	r0, r7
 800233a:	1a6d      	subs	r5, r5, r1
 800233c:	4629      	mov	r1, r5
 800233e:	f7ff ffa7 	bl	8002290 <sbrk_aligned>
 8002342:	3001      	adds	r0, #1
 8002344:	d037      	beq.n	80023b6 <_malloc_r+0xe6>
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	442b      	add	r3, r5
 800234a:	6023      	str	r3, [r4, #0]
 800234c:	f8d8 3000 	ldr.w	r3, [r8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d038      	beq.n	80023c6 <_malloc_r+0xf6>
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	42a2      	cmp	r2, r4
 8002358:	d12b      	bne.n	80023b2 <_malloc_r+0xe2>
 800235a:	2200      	movs	r2, #0
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	e00f      	b.n	8002380 <_malloc_r+0xb0>
 8002360:	6822      	ldr	r2, [r4, #0]
 8002362:	1b52      	subs	r2, r2, r5
 8002364:	d41f      	bmi.n	80023a6 <_malloc_r+0xd6>
 8002366:	2a0b      	cmp	r2, #11
 8002368:	d917      	bls.n	800239a <_malloc_r+0xca>
 800236a:	1961      	adds	r1, r4, r5
 800236c:	42a3      	cmp	r3, r4
 800236e:	6025      	str	r5, [r4, #0]
 8002370:	bf18      	it	ne
 8002372:	6059      	strne	r1, [r3, #4]
 8002374:	6863      	ldr	r3, [r4, #4]
 8002376:	bf08      	it	eq
 8002378:	f8c8 1000 	streq.w	r1, [r8]
 800237c:	5162      	str	r2, [r4, r5]
 800237e:	604b      	str	r3, [r1, #4]
 8002380:	4638      	mov	r0, r7
 8002382:	f104 060b 	add.w	r6, r4, #11
 8002386:	f000 f829 	bl	80023dc <__malloc_unlock>
 800238a:	f026 0607 	bic.w	r6, r6, #7
 800238e:	1d23      	adds	r3, r4, #4
 8002390:	1af2      	subs	r2, r6, r3
 8002392:	d0ae      	beq.n	80022f2 <_malloc_r+0x22>
 8002394:	1b9b      	subs	r3, r3, r6
 8002396:	50a3      	str	r3, [r4, r2]
 8002398:	e7ab      	b.n	80022f2 <_malloc_r+0x22>
 800239a:	42a3      	cmp	r3, r4
 800239c:	6862      	ldr	r2, [r4, #4]
 800239e:	d1dd      	bne.n	800235c <_malloc_r+0x8c>
 80023a0:	f8c8 2000 	str.w	r2, [r8]
 80023a4:	e7ec      	b.n	8002380 <_malloc_r+0xb0>
 80023a6:	4623      	mov	r3, r4
 80023a8:	6864      	ldr	r4, [r4, #4]
 80023aa:	e7ac      	b.n	8002306 <_malloc_r+0x36>
 80023ac:	4634      	mov	r4, r6
 80023ae:	6876      	ldr	r6, [r6, #4]
 80023b0:	e7b4      	b.n	800231c <_malloc_r+0x4c>
 80023b2:	4613      	mov	r3, r2
 80023b4:	e7cc      	b.n	8002350 <_malloc_r+0x80>
 80023b6:	230c      	movs	r3, #12
 80023b8:	4638      	mov	r0, r7
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	f000 f80e 	bl	80023dc <__malloc_unlock>
 80023c0:	e797      	b.n	80022f2 <_malloc_r+0x22>
 80023c2:	6025      	str	r5, [r4, #0]
 80023c4:	e7dc      	b.n	8002380 <_malloc_r+0xb0>
 80023c6:	605b      	str	r3, [r3, #4]
 80023c8:	deff      	udf	#255	; 0xff
 80023ca:	bf00      	nop
 80023cc:	2000024c 	.word	0x2000024c

080023d0 <__malloc_lock>:
 80023d0:	4801      	ldr	r0, [pc, #4]	; (80023d8 <__malloc_lock+0x8>)
 80023d2:	f7ff bf12 	b.w	80021fa <__retarget_lock_acquire_recursive>
 80023d6:	bf00      	nop
 80023d8:	20000248 	.word	0x20000248

080023dc <__malloc_unlock>:
 80023dc:	4801      	ldr	r0, [pc, #4]	; (80023e4 <__malloc_unlock+0x8>)
 80023de:	f7ff bf0d 	b.w	80021fc <__retarget_lock_release_recursive>
 80023e2:	bf00      	nop
 80023e4:	20000248 	.word	0x20000248

080023e8 <__sfputc_r>:
 80023e8:	6893      	ldr	r3, [r2, #8]
 80023ea:	b410      	push	{r4}
 80023ec:	3b01      	subs	r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	6093      	str	r3, [r2, #8]
 80023f2:	da07      	bge.n	8002404 <__sfputc_r+0x1c>
 80023f4:	6994      	ldr	r4, [r2, #24]
 80023f6:	42a3      	cmp	r3, r4
 80023f8:	db01      	blt.n	80023fe <__sfputc_r+0x16>
 80023fa:	290a      	cmp	r1, #10
 80023fc:	d102      	bne.n	8002404 <__sfputc_r+0x1c>
 80023fe:	bc10      	pop	{r4}
 8002400:	f7ff bded 	b.w	8001fde <__swbuf_r>
 8002404:	6813      	ldr	r3, [r2, #0]
 8002406:	1c58      	adds	r0, r3, #1
 8002408:	6010      	str	r0, [r2, #0]
 800240a:	7019      	strb	r1, [r3, #0]
 800240c:	4608      	mov	r0, r1
 800240e:	bc10      	pop	{r4}
 8002410:	4770      	bx	lr

08002412 <__sfputs_r>:
 8002412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002414:	4606      	mov	r6, r0
 8002416:	460f      	mov	r7, r1
 8002418:	4614      	mov	r4, r2
 800241a:	18d5      	adds	r5, r2, r3
 800241c:	42ac      	cmp	r4, r5
 800241e:	d101      	bne.n	8002424 <__sfputs_r+0x12>
 8002420:	2000      	movs	r0, #0
 8002422:	e007      	b.n	8002434 <__sfputs_r+0x22>
 8002424:	463a      	mov	r2, r7
 8002426:	4630      	mov	r0, r6
 8002428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800242c:	f7ff ffdc 	bl	80023e8 <__sfputc_r>
 8002430:	1c43      	adds	r3, r0, #1
 8002432:	d1f3      	bne.n	800241c <__sfputs_r+0xa>
 8002434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002438 <_vfiprintf_r>:
 8002438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800243c:	460d      	mov	r5, r1
 800243e:	4614      	mov	r4, r2
 8002440:	4698      	mov	r8, r3
 8002442:	4606      	mov	r6, r0
 8002444:	b09d      	sub	sp, #116	; 0x74
 8002446:	b118      	cbz	r0, 8002450 <_vfiprintf_r+0x18>
 8002448:	6a03      	ldr	r3, [r0, #32]
 800244a:	b90b      	cbnz	r3, 8002450 <_vfiprintf_r+0x18>
 800244c:	f7ff fce0 	bl	8001e10 <__sinit>
 8002450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002452:	07d9      	lsls	r1, r3, #31
 8002454:	d405      	bmi.n	8002462 <_vfiprintf_r+0x2a>
 8002456:	89ab      	ldrh	r3, [r5, #12]
 8002458:	059a      	lsls	r2, r3, #22
 800245a:	d402      	bmi.n	8002462 <_vfiprintf_r+0x2a>
 800245c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800245e:	f7ff fecc 	bl	80021fa <__retarget_lock_acquire_recursive>
 8002462:	89ab      	ldrh	r3, [r5, #12]
 8002464:	071b      	lsls	r3, r3, #28
 8002466:	d501      	bpl.n	800246c <_vfiprintf_r+0x34>
 8002468:	692b      	ldr	r3, [r5, #16]
 800246a:	b99b      	cbnz	r3, 8002494 <_vfiprintf_r+0x5c>
 800246c:	4629      	mov	r1, r5
 800246e:	4630      	mov	r0, r6
 8002470:	f7ff fdf2 	bl	8002058 <__swsetup_r>
 8002474:	b170      	cbz	r0, 8002494 <_vfiprintf_r+0x5c>
 8002476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002478:	07dc      	lsls	r4, r3, #31
 800247a:	d504      	bpl.n	8002486 <_vfiprintf_r+0x4e>
 800247c:	f04f 30ff 	mov.w	r0, #4294967295
 8002480:	b01d      	add	sp, #116	; 0x74
 8002482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002486:	89ab      	ldrh	r3, [r5, #12]
 8002488:	0598      	lsls	r0, r3, #22
 800248a:	d4f7      	bmi.n	800247c <_vfiprintf_r+0x44>
 800248c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800248e:	f7ff feb5 	bl	80021fc <__retarget_lock_release_recursive>
 8002492:	e7f3      	b.n	800247c <_vfiprintf_r+0x44>
 8002494:	2300      	movs	r3, #0
 8002496:	9309      	str	r3, [sp, #36]	; 0x24
 8002498:	2320      	movs	r3, #32
 800249a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800249e:	2330      	movs	r3, #48	; 0x30
 80024a0:	f04f 0901 	mov.w	r9, #1
 80024a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80024a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002658 <_vfiprintf_r+0x220>
 80024ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024b0:	4623      	mov	r3, r4
 80024b2:	469a      	mov	sl, r3
 80024b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024b8:	b10a      	cbz	r2, 80024be <_vfiprintf_r+0x86>
 80024ba:	2a25      	cmp	r2, #37	; 0x25
 80024bc:	d1f9      	bne.n	80024b2 <_vfiprintf_r+0x7a>
 80024be:	ebba 0b04 	subs.w	fp, sl, r4
 80024c2:	d00b      	beq.n	80024dc <_vfiprintf_r+0xa4>
 80024c4:	465b      	mov	r3, fp
 80024c6:	4622      	mov	r2, r4
 80024c8:	4629      	mov	r1, r5
 80024ca:	4630      	mov	r0, r6
 80024cc:	f7ff ffa1 	bl	8002412 <__sfputs_r>
 80024d0:	3001      	adds	r0, #1
 80024d2:	f000 80a9 	beq.w	8002628 <_vfiprintf_r+0x1f0>
 80024d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024d8:	445a      	add	r2, fp
 80024da:	9209      	str	r2, [sp, #36]	; 0x24
 80024dc:	f89a 3000 	ldrb.w	r3, [sl]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80a1 	beq.w	8002628 <_vfiprintf_r+0x1f0>
 80024e6:	2300      	movs	r3, #0
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024f0:	f10a 0a01 	add.w	sl, sl, #1
 80024f4:	9304      	str	r3, [sp, #16]
 80024f6:	9307      	str	r3, [sp, #28]
 80024f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024fc:	931a      	str	r3, [sp, #104]	; 0x68
 80024fe:	4654      	mov	r4, sl
 8002500:	2205      	movs	r2, #5
 8002502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002506:	4854      	ldr	r0, [pc, #336]	; (8002658 <_vfiprintf_r+0x220>)
 8002508:	f000 fb82 	bl	8002c10 <memchr>
 800250c:	9a04      	ldr	r2, [sp, #16]
 800250e:	b9d8      	cbnz	r0, 8002548 <_vfiprintf_r+0x110>
 8002510:	06d1      	lsls	r1, r2, #27
 8002512:	bf44      	itt	mi
 8002514:	2320      	movmi	r3, #32
 8002516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800251a:	0713      	lsls	r3, r2, #28
 800251c:	bf44      	itt	mi
 800251e:	232b      	movmi	r3, #43	; 0x2b
 8002520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002524:	f89a 3000 	ldrb.w	r3, [sl]
 8002528:	2b2a      	cmp	r3, #42	; 0x2a
 800252a:	d015      	beq.n	8002558 <_vfiprintf_r+0x120>
 800252c:	4654      	mov	r4, sl
 800252e:	2000      	movs	r0, #0
 8002530:	f04f 0c0a 	mov.w	ip, #10
 8002534:	9a07      	ldr	r2, [sp, #28]
 8002536:	4621      	mov	r1, r4
 8002538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800253c:	3b30      	subs	r3, #48	; 0x30
 800253e:	2b09      	cmp	r3, #9
 8002540:	d94d      	bls.n	80025de <_vfiprintf_r+0x1a6>
 8002542:	b1b0      	cbz	r0, 8002572 <_vfiprintf_r+0x13a>
 8002544:	9207      	str	r2, [sp, #28]
 8002546:	e014      	b.n	8002572 <_vfiprintf_r+0x13a>
 8002548:	eba0 0308 	sub.w	r3, r0, r8
 800254c:	fa09 f303 	lsl.w	r3, r9, r3
 8002550:	4313      	orrs	r3, r2
 8002552:	46a2      	mov	sl, r4
 8002554:	9304      	str	r3, [sp, #16]
 8002556:	e7d2      	b.n	80024fe <_vfiprintf_r+0xc6>
 8002558:	9b03      	ldr	r3, [sp, #12]
 800255a:	1d19      	adds	r1, r3, #4
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	9103      	str	r1, [sp, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	bfbb      	ittet	lt
 8002564:	425b      	neglt	r3, r3
 8002566:	f042 0202 	orrlt.w	r2, r2, #2
 800256a:	9307      	strge	r3, [sp, #28]
 800256c:	9307      	strlt	r3, [sp, #28]
 800256e:	bfb8      	it	lt
 8002570:	9204      	strlt	r2, [sp, #16]
 8002572:	7823      	ldrb	r3, [r4, #0]
 8002574:	2b2e      	cmp	r3, #46	; 0x2e
 8002576:	d10c      	bne.n	8002592 <_vfiprintf_r+0x15a>
 8002578:	7863      	ldrb	r3, [r4, #1]
 800257a:	2b2a      	cmp	r3, #42	; 0x2a
 800257c:	d134      	bne.n	80025e8 <_vfiprintf_r+0x1b0>
 800257e:	9b03      	ldr	r3, [sp, #12]
 8002580:	3402      	adds	r4, #2
 8002582:	1d1a      	adds	r2, r3, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	9203      	str	r2, [sp, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	bfb8      	it	lt
 800258c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002590:	9305      	str	r3, [sp, #20]
 8002592:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800265c <_vfiprintf_r+0x224>
 8002596:	2203      	movs	r2, #3
 8002598:	4650      	mov	r0, sl
 800259a:	7821      	ldrb	r1, [r4, #0]
 800259c:	f000 fb38 	bl	8002c10 <memchr>
 80025a0:	b138      	cbz	r0, 80025b2 <_vfiprintf_r+0x17a>
 80025a2:	2240      	movs	r2, #64	; 0x40
 80025a4:	9b04      	ldr	r3, [sp, #16]
 80025a6:	eba0 000a 	sub.w	r0, r0, sl
 80025aa:	4082      	lsls	r2, r0
 80025ac:	4313      	orrs	r3, r2
 80025ae:	3401      	adds	r4, #1
 80025b0:	9304      	str	r3, [sp, #16]
 80025b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025b6:	2206      	movs	r2, #6
 80025b8:	4829      	ldr	r0, [pc, #164]	; (8002660 <_vfiprintf_r+0x228>)
 80025ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025be:	f000 fb27 	bl	8002c10 <memchr>
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d03f      	beq.n	8002646 <_vfiprintf_r+0x20e>
 80025c6:	4b27      	ldr	r3, [pc, #156]	; (8002664 <_vfiprintf_r+0x22c>)
 80025c8:	bb1b      	cbnz	r3, 8002612 <_vfiprintf_r+0x1da>
 80025ca:	9b03      	ldr	r3, [sp, #12]
 80025cc:	3307      	adds	r3, #7
 80025ce:	f023 0307 	bic.w	r3, r3, #7
 80025d2:	3308      	adds	r3, #8
 80025d4:	9303      	str	r3, [sp, #12]
 80025d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025d8:	443b      	add	r3, r7
 80025da:	9309      	str	r3, [sp, #36]	; 0x24
 80025dc:	e768      	b.n	80024b0 <_vfiprintf_r+0x78>
 80025de:	460c      	mov	r4, r1
 80025e0:	2001      	movs	r0, #1
 80025e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80025e6:	e7a6      	b.n	8002536 <_vfiprintf_r+0xfe>
 80025e8:	2300      	movs	r3, #0
 80025ea:	f04f 0c0a 	mov.w	ip, #10
 80025ee:	4619      	mov	r1, r3
 80025f0:	3401      	adds	r4, #1
 80025f2:	9305      	str	r3, [sp, #20]
 80025f4:	4620      	mov	r0, r4
 80025f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025fa:	3a30      	subs	r2, #48	; 0x30
 80025fc:	2a09      	cmp	r2, #9
 80025fe:	d903      	bls.n	8002608 <_vfiprintf_r+0x1d0>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0c6      	beq.n	8002592 <_vfiprintf_r+0x15a>
 8002604:	9105      	str	r1, [sp, #20]
 8002606:	e7c4      	b.n	8002592 <_vfiprintf_r+0x15a>
 8002608:	4604      	mov	r4, r0
 800260a:	2301      	movs	r3, #1
 800260c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002610:	e7f0      	b.n	80025f4 <_vfiprintf_r+0x1bc>
 8002612:	ab03      	add	r3, sp, #12
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	462a      	mov	r2, r5
 8002618:	4630      	mov	r0, r6
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <_vfiprintf_r+0x230>)
 800261c:	a904      	add	r1, sp, #16
 800261e:	f3af 8000 	nop.w
 8002622:	4607      	mov	r7, r0
 8002624:	1c78      	adds	r0, r7, #1
 8002626:	d1d6      	bne.n	80025d6 <_vfiprintf_r+0x19e>
 8002628:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800262a:	07d9      	lsls	r1, r3, #31
 800262c:	d405      	bmi.n	800263a <_vfiprintf_r+0x202>
 800262e:	89ab      	ldrh	r3, [r5, #12]
 8002630:	059a      	lsls	r2, r3, #22
 8002632:	d402      	bmi.n	800263a <_vfiprintf_r+0x202>
 8002634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002636:	f7ff fde1 	bl	80021fc <__retarget_lock_release_recursive>
 800263a:	89ab      	ldrh	r3, [r5, #12]
 800263c:	065b      	lsls	r3, r3, #25
 800263e:	f53f af1d 	bmi.w	800247c <_vfiprintf_r+0x44>
 8002642:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002644:	e71c      	b.n	8002480 <_vfiprintf_r+0x48>
 8002646:	ab03      	add	r3, sp, #12
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	462a      	mov	r2, r5
 800264c:	4630      	mov	r0, r6
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <_vfiprintf_r+0x230>)
 8002650:	a904      	add	r1, sp, #16
 8002652:	f000 f87d 	bl	8002750 <_printf_i>
 8002656:	e7e4      	b.n	8002622 <_vfiprintf_r+0x1ea>
 8002658:	08002cc1 	.word	0x08002cc1
 800265c:	08002cc7 	.word	0x08002cc7
 8002660:	08002ccb 	.word	0x08002ccb
 8002664:	00000000 	.word	0x00000000
 8002668:	08002413 	.word	0x08002413

0800266c <_printf_common>:
 800266c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002670:	4616      	mov	r6, r2
 8002672:	4699      	mov	r9, r3
 8002674:	688a      	ldr	r2, [r1, #8]
 8002676:	690b      	ldr	r3, [r1, #16]
 8002678:	4607      	mov	r7, r0
 800267a:	4293      	cmp	r3, r2
 800267c:	bfb8      	it	lt
 800267e:	4613      	movlt	r3, r2
 8002680:	6033      	str	r3, [r6, #0]
 8002682:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002686:	460c      	mov	r4, r1
 8002688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800268c:	b10a      	cbz	r2, 8002692 <_printf_common+0x26>
 800268e:	3301      	adds	r3, #1
 8002690:	6033      	str	r3, [r6, #0]
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	0699      	lsls	r1, r3, #26
 8002696:	bf42      	ittt	mi
 8002698:	6833      	ldrmi	r3, [r6, #0]
 800269a:	3302      	addmi	r3, #2
 800269c:	6033      	strmi	r3, [r6, #0]
 800269e:	6825      	ldr	r5, [r4, #0]
 80026a0:	f015 0506 	ands.w	r5, r5, #6
 80026a4:	d106      	bne.n	80026b4 <_printf_common+0x48>
 80026a6:	f104 0a19 	add.w	sl, r4, #25
 80026aa:	68e3      	ldr	r3, [r4, #12]
 80026ac:	6832      	ldr	r2, [r6, #0]
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	42ab      	cmp	r3, r5
 80026b2:	dc2b      	bgt.n	800270c <_printf_common+0xa0>
 80026b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026b8:	1e13      	subs	r3, r2, #0
 80026ba:	6822      	ldr	r2, [r4, #0]
 80026bc:	bf18      	it	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	0692      	lsls	r2, r2, #26
 80026c2:	d430      	bmi.n	8002726 <_printf_common+0xba>
 80026c4:	4649      	mov	r1, r9
 80026c6:	4638      	mov	r0, r7
 80026c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026cc:	47c0      	blx	r8
 80026ce:	3001      	adds	r0, #1
 80026d0:	d023      	beq.n	800271a <_printf_common+0xae>
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	6922      	ldr	r2, [r4, #16]
 80026d6:	f003 0306 	and.w	r3, r3, #6
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf14      	ite	ne
 80026de:	2500      	movne	r5, #0
 80026e0:	6833      	ldreq	r3, [r6, #0]
 80026e2:	f04f 0600 	mov.w	r6, #0
 80026e6:	bf08      	it	eq
 80026e8:	68e5      	ldreq	r5, [r4, #12]
 80026ea:	f104 041a 	add.w	r4, r4, #26
 80026ee:	bf08      	it	eq
 80026f0:	1aed      	subeq	r5, r5, r3
 80026f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80026f6:	bf08      	it	eq
 80026f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026fc:	4293      	cmp	r3, r2
 80026fe:	bfc4      	itt	gt
 8002700:	1a9b      	subgt	r3, r3, r2
 8002702:	18ed      	addgt	r5, r5, r3
 8002704:	42b5      	cmp	r5, r6
 8002706:	d11a      	bne.n	800273e <_printf_common+0xd2>
 8002708:	2000      	movs	r0, #0
 800270a:	e008      	b.n	800271e <_printf_common+0xb2>
 800270c:	2301      	movs	r3, #1
 800270e:	4652      	mov	r2, sl
 8002710:	4649      	mov	r1, r9
 8002712:	4638      	mov	r0, r7
 8002714:	47c0      	blx	r8
 8002716:	3001      	adds	r0, #1
 8002718:	d103      	bne.n	8002722 <_printf_common+0xb6>
 800271a:	f04f 30ff 	mov.w	r0, #4294967295
 800271e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002722:	3501      	adds	r5, #1
 8002724:	e7c1      	b.n	80026aa <_printf_common+0x3e>
 8002726:	2030      	movs	r0, #48	; 0x30
 8002728:	18e1      	adds	r1, r4, r3
 800272a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002734:	4422      	add	r2, r4
 8002736:	3302      	adds	r3, #2
 8002738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800273c:	e7c2      	b.n	80026c4 <_printf_common+0x58>
 800273e:	2301      	movs	r3, #1
 8002740:	4622      	mov	r2, r4
 8002742:	4649      	mov	r1, r9
 8002744:	4638      	mov	r0, r7
 8002746:	47c0      	blx	r8
 8002748:	3001      	adds	r0, #1
 800274a:	d0e6      	beq.n	800271a <_printf_common+0xae>
 800274c:	3601      	adds	r6, #1
 800274e:	e7d9      	b.n	8002704 <_printf_common+0x98>

08002750 <_printf_i>:
 8002750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002754:	7e0f      	ldrb	r7, [r1, #24]
 8002756:	4691      	mov	r9, r2
 8002758:	2f78      	cmp	r7, #120	; 0x78
 800275a:	4680      	mov	r8, r0
 800275c:	460c      	mov	r4, r1
 800275e:	469a      	mov	sl, r3
 8002760:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002766:	d807      	bhi.n	8002778 <_printf_i+0x28>
 8002768:	2f62      	cmp	r7, #98	; 0x62
 800276a:	d80a      	bhi.n	8002782 <_printf_i+0x32>
 800276c:	2f00      	cmp	r7, #0
 800276e:	f000 80d5 	beq.w	800291c <_printf_i+0x1cc>
 8002772:	2f58      	cmp	r7, #88	; 0x58
 8002774:	f000 80c1 	beq.w	80028fa <_printf_i+0x1aa>
 8002778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800277c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002780:	e03a      	b.n	80027f8 <_printf_i+0xa8>
 8002782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002786:	2b15      	cmp	r3, #21
 8002788:	d8f6      	bhi.n	8002778 <_printf_i+0x28>
 800278a:	a101      	add	r1, pc, #4	; (adr r1, 8002790 <_printf_i+0x40>)
 800278c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002790:	080027e9 	.word	0x080027e9
 8002794:	080027fd 	.word	0x080027fd
 8002798:	08002779 	.word	0x08002779
 800279c:	08002779 	.word	0x08002779
 80027a0:	08002779 	.word	0x08002779
 80027a4:	08002779 	.word	0x08002779
 80027a8:	080027fd 	.word	0x080027fd
 80027ac:	08002779 	.word	0x08002779
 80027b0:	08002779 	.word	0x08002779
 80027b4:	08002779 	.word	0x08002779
 80027b8:	08002779 	.word	0x08002779
 80027bc:	08002903 	.word	0x08002903
 80027c0:	08002829 	.word	0x08002829
 80027c4:	080028bd 	.word	0x080028bd
 80027c8:	08002779 	.word	0x08002779
 80027cc:	08002779 	.word	0x08002779
 80027d0:	08002925 	.word	0x08002925
 80027d4:	08002779 	.word	0x08002779
 80027d8:	08002829 	.word	0x08002829
 80027dc:	08002779 	.word	0x08002779
 80027e0:	08002779 	.word	0x08002779
 80027e4:	080028c5 	.word	0x080028c5
 80027e8:	682b      	ldr	r3, [r5, #0]
 80027ea:	1d1a      	adds	r2, r3, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	602a      	str	r2, [r5, #0]
 80027f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0a0      	b.n	800293e <_printf_i+0x1ee>
 80027fc:	6820      	ldr	r0, [r4, #0]
 80027fe:	682b      	ldr	r3, [r5, #0]
 8002800:	0607      	lsls	r7, r0, #24
 8002802:	f103 0104 	add.w	r1, r3, #4
 8002806:	6029      	str	r1, [r5, #0]
 8002808:	d501      	bpl.n	800280e <_printf_i+0xbe>
 800280a:	681e      	ldr	r6, [r3, #0]
 800280c:	e003      	b.n	8002816 <_printf_i+0xc6>
 800280e:	0646      	lsls	r6, r0, #25
 8002810:	d5fb      	bpl.n	800280a <_printf_i+0xba>
 8002812:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002816:	2e00      	cmp	r6, #0
 8002818:	da03      	bge.n	8002822 <_printf_i+0xd2>
 800281a:	232d      	movs	r3, #45	; 0x2d
 800281c:	4276      	negs	r6, r6
 800281e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002822:	230a      	movs	r3, #10
 8002824:	4859      	ldr	r0, [pc, #356]	; (800298c <_printf_i+0x23c>)
 8002826:	e012      	b.n	800284e <_printf_i+0xfe>
 8002828:	682b      	ldr	r3, [r5, #0]
 800282a:	6820      	ldr	r0, [r4, #0]
 800282c:	1d19      	adds	r1, r3, #4
 800282e:	6029      	str	r1, [r5, #0]
 8002830:	0605      	lsls	r5, r0, #24
 8002832:	d501      	bpl.n	8002838 <_printf_i+0xe8>
 8002834:	681e      	ldr	r6, [r3, #0]
 8002836:	e002      	b.n	800283e <_printf_i+0xee>
 8002838:	0641      	lsls	r1, r0, #25
 800283a:	d5fb      	bpl.n	8002834 <_printf_i+0xe4>
 800283c:	881e      	ldrh	r6, [r3, #0]
 800283e:	2f6f      	cmp	r7, #111	; 0x6f
 8002840:	bf0c      	ite	eq
 8002842:	2308      	moveq	r3, #8
 8002844:	230a      	movne	r3, #10
 8002846:	4851      	ldr	r0, [pc, #324]	; (800298c <_printf_i+0x23c>)
 8002848:	2100      	movs	r1, #0
 800284a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800284e:	6865      	ldr	r5, [r4, #4]
 8002850:	2d00      	cmp	r5, #0
 8002852:	bfa8      	it	ge
 8002854:	6821      	ldrge	r1, [r4, #0]
 8002856:	60a5      	str	r5, [r4, #8]
 8002858:	bfa4      	itt	ge
 800285a:	f021 0104 	bicge.w	r1, r1, #4
 800285e:	6021      	strge	r1, [r4, #0]
 8002860:	b90e      	cbnz	r6, 8002866 <_printf_i+0x116>
 8002862:	2d00      	cmp	r5, #0
 8002864:	d04b      	beq.n	80028fe <_printf_i+0x1ae>
 8002866:	4615      	mov	r5, r2
 8002868:	fbb6 f1f3 	udiv	r1, r6, r3
 800286c:	fb03 6711 	mls	r7, r3, r1, r6
 8002870:	5dc7      	ldrb	r7, [r0, r7]
 8002872:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002876:	4637      	mov	r7, r6
 8002878:	42bb      	cmp	r3, r7
 800287a:	460e      	mov	r6, r1
 800287c:	d9f4      	bls.n	8002868 <_printf_i+0x118>
 800287e:	2b08      	cmp	r3, #8
 8002880:	d10b      	bne.n	800289a <_printf_i+0x14a>
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	07de      	lsls	r6, r3, #31
 8002886:	d508      	bpl.n	800289a <_printf_i+0x14a>
 8002888:	6923      	ldr	r3, [r4, #16]
 800288a:	6861      	ldr	r1, [r4, #4]
 800288c:	4299      	cmp	r1, r3
 800288e:	bfde      	ittt	le
 8002890:	2330      	movle	r3, #48	; 0x30
 8002892:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002896:	f105 35ff 	addle.w	r5, r5, #4294967295
 800289a:	1b52      	subs	r2, r2, r5
 800289c:	6122      	str	r2, [r4, #16]
 800289e:	464b      	mov	r3, r9
 80028a0:	4621      	mov	r1, r4
 80028a2:	4640      	mov	r0, r8
 80028a4:	f8cd a000 	str.w	sl, [sp]
 80028a8:	aa03      	add	r2, sp, #12
 80028aa:	f7ff fedf 	bl	800266c <_printf_common>
 80028ae:	3001      	adds	r0, #1
 80028b0:	d14a      	bne.n	8002948 <_printf_i+0x1f8>
 80028b2:	f04f 30ff 	mov.w	r0, #4294967295
 80028b6:	b004      	add	sp, #16
 80028b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	f043 0320 	orr.w	r3, r3, #32
 80028c2:	6023      	str	r3, [r4, #0]
 80028c4:	2778      	movs	r7, #120	; 0x78
 80028c6:	4832      	ldr	r0, [pc, #200]	; (8002990 <_printf_i+0x240>)
 80028c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	6829      	ldr	r1, [r5, #0]
 80028d0:	061f      	lsls	r7, r3, #24
 80028d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80028d6:	d402      	bmi.n	80028de <_printf_i+0x18e>
 80028d8:	065f      	lsls	r7, r3, #25
 80028da:	bf48      	it	mi
 80028dc:	b2b6      	uxthmi	r6, r6
 80028de:	07df      	lsls	r7, r3, #31
 80028e0:	bf48      	it	mi
 80028e2:	f043 0320 	orrmi.w	r3, r3, #32
 80028e6:	6029      	str	r1, [r5, #0]
 80028e8:	bf48      	it	mi
 80028ea:	6023      	strmi	r3, [r4, #0]
 80028ec:	b91e      	cbnz	r6, 80028f6 <_printf_i+0x1a6>
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	f023 0320 	bic.w	r3, r3, #32
 80028f4:	6023      	str	r3, [r4, #0]
 80028f6:	2310      	movs	r3, #16
 80028f8:	e7a6      	b.n	8002848 <_printf_i+0xf8>
 80028fa:	4824      	ldr	r0, [pc, #144]	; (800298c <_printf_i+0x23c>)
 80028fc:	e7e4      	b.n	80028c8 <_printf_i+0x178>
 80028fe:	4615      	mov	r5, r2
 8002900:	e7bd      	b.n	800287e <_printf_i+0x12e>
 8002902:	682b      	ldr	r3, [r5, #0]
 8002904:	6826      	ldr	r6, [r4, #0]
 8002906:	1d18      	adds	r0, r3, #4
 8002908:	6961      	ldr	r1, [r4, #20]
 800290a:	6028      	str	r0, [r5, #0]
 800290c:	0635      	lsls	r5, r6, #24
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	d501      	bpl.n	8002916 <_printf_i+0x1c6>
 8002912:	6019      	str	r1, [r3, #0]
 8002914:	e002      	b.n	800291c <_printf_i+0x1cc>
 8002916:	0670      	lsls	r0, r6, #25
 8002918:	d5fb      	bpl.n	8002912 <_printf_i+0x1c2>
 800291a:	8019      	strh	r1, [r3, #0]
 800291c:	2300      	movs	r3, #0
 800291e:	4615      	mov	r5, r2
 8002920:	6123      	str	r3, [r4, #16]
 8002922:	e7bc      	b.n	800289e <_printf_i+0x14e>
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	2100      	movs	r1, #0
 8002928:	1d1a      	adds	r2, r3, #4
 800292a:	602a      	str	r2, [r5, #0]
 800292c:	681d      	ldr	r5, [r3, #0]
 800292e:	6862      	ldr	r2, [r4, #4]
 8002930:	4628      	mov	r0, r5
 8002932:	f000 f96d 	bl	8002c10 <memchr>
 8002936:	b108      	cbz	r0, 800293c <_printf_i+0x1ec>
 8002938:	1b40      	subs	r0, r0, r5
 800293a:	6060      	str	r0, [r4, #4]
 800293c:	6863      	ldr	r3, [r4, #4]
 800293e:	6123      	str	r3, [r4, #16]
 8002940:	2300      	movs	r3, #0
 8002942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002946:	e7aa      	b.n	800289e <_printf_i+0x14e>
 8002948:	462a      	mov	r2, r5
 800294a:	4649      	mov	r1, r9
 800294c:	4640      	mov	r0, r8
 800294e:	6923      	ldr	r3, [r4, #16]
 8002950:	47d0      	blx	sl
 8002952:	3001      	adds	r0, #1
 8002954:	d0ad      	beq.n	80028b2 <_printf_i+0x162>
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	079b      	lsls	r3, r3, #30
 800295a:	d413      	bmi.n	8002984 <_printf_i+0x234>
 800295c:	68e0      	ldr	r0, [r4, #12]
 800295e:	9b03      	ldr	r3, [sp, #12]
 8002960:	4298      	cmp	r0, r3
 8002962:	bfb8      	it	lt
 8002964:	4618      	movlt	r0, r3
 8002966:	e7a6      	b.n	80028b6 <_printf_i+0x166>
 8002968:	2301      	movs	r3, #1
 800296a:	4632      	mov	r2, r6
 800296c:	4649      	mov	r1, r9
 800296e:	4640      	mov	r0, r8
 8002970:	47d0      	blx	sl
 8002972:	3001      	adds	r0, #1
 8002974:	d09d      	beq.n	80028b2 <_printf_i+0x162>
 8002976:	3501      	adds	r5, #1
 8002978:	68e3      	ldr	r3, [r4, #12]
 800297a:	9903      	ldr	r1, [sp, #12]
 800297c:	1a5b      	subs	r3, r3, r1
 800297e:	42ab      	cmp	r3, r5
 8002980:	dcf2      	bgt.n	8002968 <_printf_i+0x218>
 8002982:	e7eb      	b.n	800295c <_printf_i+0x20c>
 8002984:	2500      	movs	r5, #0
 8002986:	f104 0619 	add.w	r6, r4, #25
 800298a:	e7f5      	b.n	8002978 <_printf_i+0x228>
 800298c:	08002cd2 	.word	0x08002cd2
 8002990:	08002ce3 	.word	0x08002ce3

08002994 <__sflush_r>:
 8002994:	898a      	ldrh	r2, [r1, #12]
 8002996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002998:	4605      	mov	r5, r0
 800299a:	0710      	lsls	r0, r2, #28
 800299c:	460c      	mov	r4, r1
 800299e:	d457      	bmi.n	8002a50 <__sflush_r+0xbc>
 80029a0:	684b      	ldr	r3, [r1, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	dc04      	bgt.n	80029b0 <__sflush_r+0x1c>
 80029a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	dc01      	bgt.n	80029b0 <__sflush_r+0x1c>
 80029ac:	2000      	movs	r0, #0
 80029ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029b2:	2e00      	cmp	r6, #0
 80029b4:	d0fa      	beq.n	80029ac <__sflush_r+0x18>
 80029b6:	2300      	movs	r3, #0
 80029b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029bc:	682f      	ldr	r7, [r5, #0]
 80029be:	6a21      	ldr	r1, [r4, #32]
 80029c0:	602b      	str	r3, [r5, #0]
 80029c2:	d032      	beq.n	8002a2a <__sflush_r+0x96>
 80029c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029c6:	89a3      	ldrh	r3, [r4, #12]
 80029c8:	075a      	lsls	r2, r3, #29
 80029ca:	d505      	bpl.n	80029d8 <__sflush_r+0x44>
 80029cc:	6863      	ldr	r3, [r4, #4]
 80029ce:	1ac0      	subs	r0, r0, r3
 80029d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029d2:	b10b      	cbz	r3, 80029d8 <__sflush_r+0x44>
 80029d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029d6:	1ac0      	subs	r0, r0, r3
 80029d8:	2300      	movs	r3, #0
 80029da:	4602      	mov	r2, r0
 80029dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029de:	4628      	mov	r0, r5
 80029e0:	6a21      	ldr	r1, [r4, #32]
 80029e2:	47b0      	blx	r6
 80029e4:	1c43      	adds	r3, r0, #1
 80029e6:	89a3      	ldrh	r3, [r4, #12]
 80029e8:	d106      	bne.n	80029f8 <__sflush_r+0x64>
 80029ea:	6829      	ldr	r1, [r5, #0]
 80029ec:	291d      	cmp	r1, #29
 80029ee:	d82b      	bhi.n	8002a48 <__sflush_r+0xb4>
 80029f0:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <__sflush_r+0x100>)
 80029f2:	410a      	asrs	r2, r1
 80029f4:	07d6      	lsls	r6, r2, #31
 80029f6:	d427      	bmi.n	8002a48 <__sflush_r+0xb4>
 80029f8:	2200      	movs	r2, #0
 80029fa:	6062      	str	r2, [r4, #4]
 80029fc:	6922      	ldr	r2, [r4, #16]
 80029fe:	04d9      	lsls	r1, r3, #19
 8002a00:	6022      	str	r2, [r4, #0]
 8002a02:	d504      	bpl.n	8002a0e <__sflush_r+0x7a>
 8002a04:	1c42      	adds	r2, r0, #1
 8002a06:	d101      	bne.n	8002a0c <__sflush_r+0x78>
 8002a08:	682b      	ldr	r3, [r5, #0]
 8002a0a:	b903      	cbnz	r3, 8002a0e <__sflush_r+0x7a>
 8002a0c:	6560      	str	r0, [r4, #84]	; 0x54
 8002a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a10:	602f      	str	r7, [r5, #0]
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d0ca      	beq.n	80029ac <__sflush_r+0x18>
 8002a16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a1a:	4299      	cmp	r1, r3
 8002a1c:	d002      	beq.n	8002a24 <__sflush_r+0x90>
 8002a1e:	4628      	mov	r0, r5
 8002a20:	f7ff fbee 	bl	8002200 <_free_r>
 8002a24:	2000      	movs	r0, #0
 8002a26:	6360      	str	r0, [r4, #52]	; 0x34
 8002a28:	e7c1      	b.n	80029ae <__sflush_r+0x1a>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	47b0      	blx	r6
 8002a30:	1c41      	adds	r1, r0, #1
 8002a32:	d1c8      	bne.n	80029c6 <__sflush_r+0x32>
 8002a34:	682b      	ldr	r3, [r5, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0c5      	beq.n	80029c6 <__sflush_r+0x32>
 8002a3a:	2b1d      	cmp	r3, #29
 8002a3c:	d001      	beq.n	8002a42 <__sflush_r+0xae>
 8002a3e:	2b16      	cmp	r3, #22
 8002a40:	d101      	bne.n	8002a46 <__sflush_r+0xb2>
 8002a42:	602f      	str	r7, [r5, #0]
 8002a44:	e7b2      	b.n	80029ac <__sflush_r+0x18>
 8002a46:	89a3      	ldrh	r3, [r4, #12]
 8002a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a4c:	81a3      	strh	r3, [r4, #12]
 8002a4e:	e7ae      	b.n	80029ae <__sflush_r+0x1a>
 8002a50:	690f      	ldr	r7, [r1, #16]
 8002a52:	2f00      	cmp	r7, #0
 8002a54:	d0aa      	beq.n	80029ac <__sflush_r+0x18>
 8002a56:	0793      	lsls	r3, r2, #30
 8002a58:	bf18      	it	ne
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	680e      	ldr	r6, [r1, #0]
 8002a5e:	bf08      	it	eq
 8002a60:	694b      	ldreq	r3, [r1, #20]
 8002a62:	1bf6      	subs	r6, r6, r7
 8002a64:	600f      	str	r7, [r1, #0]
 8002a66:	608b      	str	r3, [r1, #8]
 8002a68:	2e00      	cmp	r6, #0
 8002a6a:	dd9f      	ble.n	80029ac <__sflush_r+0x18>
 8002a6c:	4633      	mov	r3, r6
 8002a6e:	463a      	mov	r2, r7
 8002a70:	4628      	mov	r0, r5
 8002a72:	6a21      	ldr	r1, [r4, #32]
 8002a74:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002a78:	47e0      	blx	ip
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	dc06      	bgt.n	8002a8c <__sflush_r+0xf8>
 8002a7e:	89a3      	ldrh	r3, [r4, #12]
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a88:	81a3      	strh	r3, [r4, #12]
 8002a8a:	e790      	b.n	80029ae <__sflush_r+0x1a>
 8002a8c:	4407      	add	r7, r0
 8002a8e:	1a36      	subs	r6, r6, r0
 8002a90:	e7ea      	b.n	8002a68 <__sflush_r+0xd4>
 8002a92:	bf00      	nop
 8002a94:	dfbffffe 	.word	0xdfbffffe

08002a98 <_fflush_r>:
 8002a98:	b538      	push	{r3, r4, r5, lr}
 8002a9a:	690b      	ldr	r3, [r1, #16]
 8002a9c:	4605      	mov	r5, r0
 8002a9e:	460c      	mov	r4, r1
 8002aa0:	b913      	cbnz	r3, 8002aa8 <_fflush_r+0x10>
 8002aa2:	2500      	movs	r5, #0
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	bd38      	pop	{r3, r4, r5, pc}
 8002aa8:	b118      	cbz	r0, 8002ab2 <_fflush_r+0x1a>
 8002aaa:	6a03      	ldr	r3, [r0, #32]
 8002aac:	b90b      	cbnz	r3, 8002ab2 <_fflush_r+0x1a>
 8002aae:	f7ff f9af 	bl	8001e10 <__sinit>
 8002ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f3      	beq.n	8002aa2 <_fflush_r+0xa>
 8002aba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002abc:	07d0      	lsls	r0, r2, #31
 8002abe:	d404      	bmi.n	8002aca <_fflush_r+0x32>
 8002ac0:	0599      	lsls	r1, r3, #22
 8002ac2:	d402      	bmi.n	8002aca <_fflush_r+0x32>
 8002ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ac6:	f7ff fb98 	bl	80021fa <__retarget_lock_acquire_recursive>
 8002aca:	4628      	mov	r0, r5
 8002acc:	4621      	mov	r1, r4
 8002ace:	f7ff ff61 	bl	8002994 <__sflush_r>
 8002ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ad4:	4605      	mov	r5, r0
 8002ad6:	07da      	lsls	r2, r3, #31
 8002ad8:	d4e4      	bmi.n	8002aa4 <_fflush_r+0xc>
 8002ada:	89a3      	ldrh	r3, [r4, #12]
 8002adc:	059b      	lsls	r3, r3, #22
 8002ade:	d4e1      	bmi.n	8002aa4 <_fflush_r+0xc>
 8002ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ae2:	f7ff fb8b 	bl	80021fc <__retarget_lock_release_recursive>
 8002ae6:	e7dd      	b.n	8002aa4 <_fflush_r+0xc>

08002ae8 <__swhatbuf_r>:
 8002ae8:	b570      	push	{r4, r5, r6, lr}
 8002aea:	460c      	mov	r4, r1
 8002aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002af0:	4615      	mov	r5, r2
 8002af2:	2900      	cmp	r1, #0
 8002af4:	461e      	mov	r6, r3
 8002af6:	b096      	sub	sp, #88	; 0x58
 8002af8:	da0c      	bge.n	8002b14 <__swhatbuf_r+0x2c>
 8002afa:	89a3      	ldrh	r3, [r4, #12]
 8002afc:	2100      	movs	r1, #0
 8002afe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b02:	bf0c      	ite	eq
 8002b04:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002b08:	2340      	movne	r3, #64	; 0x40
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	6031      	str	r1, [r6, #0]
 8002b0e:	602b      	str	r3, [r5, #0]
 8002b10:	b016      	add	sp, #88	; 0x58
 8002b12:	bd70      	pop	{r4, r5, r6, pc}
 8002b14:	466a      	mov	r2, sp
 8002b16:	f000 f849 	bl	8002bac <_fstat_r>
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	dbed      	blt.n	8002afa <__swhatbuf_r+0x12>
 8002b1e:	9901      	ldr	r1, [sp, #4]
 8002b20:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002b24:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002b28:	4259      	negs	r1, r3
 8002b2a:	4159      	adcs	r1, r3
 8002b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b30:	e7eb      	b.n	8002b0a <__swhatbuf_r+0x22>

08002b32 <__smakebuf_r>:
 8002b32:	898b      	ldrh	r3, [r1, #12]
 8002b34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b36:	079d      	lsls	r5, r3, #30
 8002b38:	4606      	mov	r6, r0
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	d507      	bpl.n	8002b4e <__smakebuf_r+0x1c>
 8002b3e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b42:	6023      	str	r3, [r4, #0]
 8002b44:	6123      	str	r3, [r4, #16]
 8002b46:	2301      	movs	r3, #1
 8002b48:	6163      	str	r3, [r4, #20]
 8002b4a:	b002      	add	sp, #8
 8002b4c:	bd70      	pop	{r4, r5, r6, pc}
 8002b4e:	466a      	mov	r2, sp
 8002b50:	ab01      	add	r3, sp, #4
 8002b52:	f7ff ffc9 	bl	8002ae8 <__swhatbuf_r>
 8002b56:	9900      	ldr	r1, [sp, #0]
 8002b58:	4605      	mov	r5, r0
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	f7ff fbb8 	bl	80022d0 <_malloc_r>
 8002b60:	b948      	cbnz	r0, 8002b76 <__smakebuf_r+0x44>
 8002b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b66:	059a      	lsls	r2, r3, #22
 8002b68:	d4ef      	bmi.n	8002b4a <__smakebuf_r+0x18>
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	81a3      	strh	r3, [r4, #12]
 8002b74:	e7e3      	b.n	8002b3e <__smakebuf_r+0xc>
 8002b76:	89a3      	ldrh	r3, [r4, #12]
 8002b78:	6020      	str	r0, [r4, #0]
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7e:	81a3      	strh	r3, [r4, #12]
 8002b80:	9b00      	ldr	r3, [sp, #0]
 8002b82:	6120      	str	r0, [r4, #16]
 8002b84:	6163      	str	r3, [r4, #20]
 8002b86:	9b01      	ldr	r3, [sp, #4]
 8002b88:	b15b      	cbz	r3, 8002ba2 <__smakebuf_r+0x70>
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b90:	f000 f81e 	bl	8002bd0 <_isatty_r>
 8002b94:	b128      	cbz	r0, 8002ba2 <__smakebuf_r+0x70>
 8002b96:	89a3      	ldrh	r3, [r4, #12]
 8002b98:	f023 0303 	bic.w	r3, r3, #3
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	81a3      	strh	r3, [r4, #12]
 8002ba2:	89a3      	ldrh	r3, [r4, #12]
 8002ba4:	431d      	orrs	r5, r3
 8002ba6:	81a5      	strh	r5, [r4, #12]
 8002ba8:	e7cf      	b.n	8002b4a <__smakebuf_r+0x18>
	...

08002bac <_fstat_r>:
 8002bac:	b538      	push	{r3, r4, r5, lr}
 8002bae:	2300      	movs	r3, #0
 8002bb0:	4d06      	ldr	r5, [pc, #24]	; (8002bcc <_fstat_r+0x20>)
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	602b      	str	r3, [r5, #0]
 8002bba:	f7fd fcd8 	bl	800056e <_fstat>
 8002bbe:	1c43      	adds	r3, r0, #1
 8002bc0:	d102      	bne.n	8002bc8 <_fstat_r+0x1c>
 8002bc2:	682b      	ldr	r3, [r5, #0]
 8002bc4:	b103      	cbz	r3, 8002bc8 <_fstat_r+0x1c>
 8002bc6:	6023      	str	r3, [r4, #0]
 8002bc8:	bd38      	pop	{r3, r4, r5, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000244 	.word	0x20000244

08002bd0 <_isatty_r>:
 8002bd0:	b538      	push	{r3, r4, r5, lr}
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	4d05      	ldr	r5, [pc, #20]	; (8002bec <_isatty_r+0x1c>)
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	4608      	mov	r0, r1
 8002bda:	602b      	str	r3, [r5, #0]
 8002bdc:	f7fd fccc 	bl	8000578 <_isatty>
 8002be0:	1c43      	adds	r3, r0, #1
 8002be2:	d102      	bne.n	8002bea <_isatty_r+0x1a>
 8002be4:	682b      	ldr	r3, [r5, #0]
 8002be6:	b103      	cbz	r3, 8002bea <_isatty_r+0x1a>
 8002be8:	6023      	str	r3, [r4, #0]
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
 8002bec:	20000244 	.word	0x20000244

08002bf0 <_sbrk_r>:
 8002bf0:	b538      	push	{r3, r4, r5, lr}
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	4d05      	ldr	r5, [pc, #20]	; (8002c0c <_sbrk_r+0x1c>)
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	602b      	str	r3, [r5, #0]
 8002bfc:	f7fd fcc0 	bl	8000580 <_sbrk>
 8002c00:	1c43      	adds	r3, r0, #1
 8002c02:	d102      	bne.n	8002c0a <_sbrk_r+0x1a>
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	b103      	cbz	r3, 8002c0a <_sbrk_r+0x1a>
 8002c08:	6023      	str	r3, [r4, #0]
 8002c0a:	bd38      	pop	{r3, r4, r5, pc}
 8002c0c:	20000244 	.word	0x20000244

08002c10 <memchr>:
 8002c10:	4603      	mov	r3, r0
 8002c12:	b510      	push	{r4, lr}
 8002c14:	b2c9      	uxtb	r1, r1
 8002c16:	4402      	add	r2, r0
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	d101      	bne.n	8002c22 <memchr+0x12>
 8002c1e:	2000      	movs	r0, #0
 8002c20:	e003      	b.n	8002c2a <memchr+0x1a>
 8002c22:	7804      	ldrb	r4, [r0, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	428c      	cmp	r4, r1
 8002c28:	d1f6      	bne.n	8002c18 <memchr+0x8>
 8002c2a:	bd10      	pop	{r4, pc}

08002c2c <_init>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr

08002c38 <_fini>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr
