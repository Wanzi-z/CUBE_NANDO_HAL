
F103Programmer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08022000  08022000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e048  080221e8  080221e8  000021e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000118c  08030230  08030230  00010230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080313bc  080313bc  000208bc  2**0
                  CONTENTS
  4 .ARM          00000008  080313bc  080313bc  000113bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080313c4  080313c4  000208bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080313c4  080313c4  000113c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080313cc  080313cc  000113cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008bc  20000000  080313d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006424  200008c0  08031c8c  000208c0  2**3
                  ALLOC
 10 ._user_heap_stack 00001804  20006ce4  08031c8c  00026ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000208bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000208e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027be6  00000000  00000000  00020928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c4d  00000000  00000000  0004850e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000e955  00000000  00000000  0004f15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a08  00000000  00000000  0005dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000153c  00000000  00000000  0005f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000215ce  00000000  00000000  000609f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002de53  00000000  00000000  00081fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a1dd5  00000000  00000000  000afe15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005580  00000000  00000000  00151bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0015716c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080221e8 <__do_global_dtors_aux>:
 80221e8:	b510      	push	{r4, lr}
 80221ea:	4c05      	ldr	r4, [pc, #20]	; (8022200 <__do_global_dtors_aux+0x18>)
 80221ec:	7823      	ldrb	r3, [r4, #0]
 80221ee:	b933      	cbnz	r3, 80221fe <__do_global_dtors_aux+0x16>
 80221f0:	4b04      	ldr	r3, [pc, #16]	; (8022204 <__do_global_dtors_aux+0x1c>)
 80221f2:	b113      	cbz	r3, 80221fa <__do_global_dtors_aux+0x12>
 80221f4:	4804      	ldr	r0, [pc, #16]	; (8022208 <__do_global_dtors_aux+0x20>)
 80221f6:	f3af 8000 	nop.w
 80221fa:	2301      	movs	r3, #1
 80221fc:	7023      	strb	r3, [r4, #0]
 80221fe:	bd10      	pop	{r4, pc}
 8022200:	200008c0 	.word	0x200008c0
 8022204:	00000000 	.word	0x00000000
 8022208:	08030218 	.word	0x08030218

0802220c <frame_dummy>:
 802220c:	b508      	push	{r3, lr}
 802220e:	4b03      	ldr	r3, [pc, #12]	; (802221c <frame_dummy+0x10>)
 8022210:	b11b      	cbz	r3, 802221a <frame_dummy+0xe>
 8022212:	4903      	ldr	r1, [pc, #12]	; (8022220 <frame_dummy+0x14>)
 8022214:	4803      	ldr	r0, [pc, #12]	; (8022224 <frame_dummy+0x18>)
 8022216:	f3af 8000 	nop.w
 802221a:	bd08      	pop	{r3, pc}
 802221c:	00000000 	.word	0x00000000
 8022220:	200008c4 	.word	0x200008c4
 8022224:	08030218 	.word	0x08030218

08022228 <strlen>:
 8022228:	4603      	mov	r3, r0
 802222a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802222e:	2a00      	cmp	r2, #0
 8022230:	d1fb      	bne.n	802222a <strlen+0x2>
 8022232:	1a18      	subs	r0, r3, r0
 8022234:	3801      	subs	r0, #1
 8022236:	4770      	bx	lr

08022238 <__aeabi_drsub>:
 8022238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 802223c:	e002      	b.n	8022244 <__adddf3>
 802223e:	bf00      	nop

08022240 <__aeabi_dsub>:
 8022240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08022244 <__adddf3>:
 8022244:	b530      	push	{r4, r5, lr}
 8022246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 802224a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 802224e:	ea94 0f05 	teq	r4, r5
 8022252:	bf08      	it	eq
 8022254:	ea90 0f02 	teqeq	r0, r2
 8022258:	bf1f      	itttt	ne
 802225a:	ea54 0c00 	orrsne.w	ip, r4, r0
 802225e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8022262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8022266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 802226a:	f000 80e2 	beq.w	8022432 <__adddf3+0x1ee>
 802226e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8022272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8022276:	bfb8      	it	lt
 8022278:	426d      	neglt	r5, r5
 802227a:	dd0c      	ble.n	8022296 <__adddf3+0x52>
 802227c:	442c      	add	r4, r5
 802227e:	ea80 0202 	eor.w	r2, r0, r2
 8022282:	ea81 0303 	eor.w	r3, r1, r3
 8022286:	ea82 0000 	eor.w	r0, r2, r0
 802228a:	ea83 0101 	eor.w	r1, r3, r1
 802228e:	ea80 0202 	eor.w	r2, r0, r2
 8022292:	ea81 0303 	eor.w	r3, r1, r3
 8022296:	2d36      	cmp	r5, #54	; 0x36
 8022298:	bf88      	it	hi
 802229a:	bd30      	pophi	{r4, r5, pc}
 802229c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80222a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80222a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80222a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80222ac:	d002      	beq.n	80222b4 <__adddf3+0x70>
 80222ae:	4240      	negs	r0, r0
 80222b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80222b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80222b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80222bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80222c0:	d002      	beq.n	80222c8 <__adddf3+0x84>
 80222c2:	4252      	negs	r2, r2
 80222c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80222c8:	ea94 0f05 	teq	r4, r5
 80222cc:	f000 80a7 	beq.w	802241e <__adddf3+0x1da>
 80222d0:	f1a4 0401 	sub.w	r4, r4, #1
 80222d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80222d8:	db0d      	blt.n	80222f6 <__adddf3+0xb2>
 80222da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80222de:	fa22 f205 	lsr.w	r2, r2, r5
 80222e2:	1880      	adds	r0, r0, r2
 80222e4:	f141 0100 	adc.w	r1, r1, #0
 80222e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80222ec:	1880      	adds	r0, r0, r2
 80222ee:	fa43 f305 	asr.w	r3, r3, r5
 80222f2:	4159      	adcs	r1, r3
 80222f4:	e00e      	b.n	8022314 <__adddf3+0xd0>
 80222f6:	f1a5 0520 	sub.w	r5, r5, #32
 80222fa:	f10e 0e20 	add.w	lr, lr, #32
 80222fe:	2a01      	cmp	r2, #1
 8022300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8022304:	bf28      	it	cs
 8022306:	f04c 0c02 	orrcs.w	ip, ip, #2
 802230a:	fa43 f305 	asr.w	r3, r3, r5
 802230e:	18c0      	adds	r0, r0, r3
 8022310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8022314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8022318:	d507      	bpl.n	802232a <__adddf3+0xe6>
 802231a:	f04f 0e00 	mov.w	lr, #0
 802231e:	f1dc 0c00 	rsbs	ip, ip, #0
 8022322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8022326:	eb6e 0101 	sbc.w	r1, lr, r1
 802232a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802232e:	d31b      	bcc.n	8022368 <__adddf3+0x124>
 8022330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8022334:	d30c      	bcc.n	8022350 <__adddf3+0x10c>
 8022336:	0849      	lsrs	r1, r1, #1
 8022338:	ea5f 0030 	movs.w	r0, r0, rrx
 802233c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8022340:	f104 0401 	add.w	r4, r4, #1
 8022344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8022348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 802234c:	f080 809a 	bcs.w	8022484 <__adddf3+0x240>
 8022350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8022354:	bf08      	it	eq
 8022356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 802235a:	f150 0000 	adcs.w	r0, r0, #0
 802235e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8022362:	ea41 0105 	orr.w	r1, r1, r5
 8022366:	bd30      	pop	{r4, r5, pc}
 8022368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 802236c:	4140      	adcs	r0, r0
 802236e:	eb41 0101 	adc.w	r1, r1, r1
 8022372:	3c01      	subs	r4, #1
 8022374:	bf28      	it	cs
 8022376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 802237a:	d2e9      	bcs.n	8022350 <__adddf3+0x10c>
 802237c:	f091 0f00 	teq	r1, #0
 8022380:	bf04      	itt	eq
 8022382:	4601      	moveq	r1, r0
 8022384:	2000      	moveq	r0, #0
 8022386:	fab1 f381 	clz	r3, r1
 802238a:	bf08      	it	eq
 802238c:	3320      	addeq	r3, #32
 802238e:	f1a3 030b 	sub.w	r3, r3, #11
 8022392:	f1b3 0220 	subs.w	r2, r3, #32
 8022396:	da0c      	bge.n	80223b2 <__adddf3+0x16e>
 8022398:	320c      	adds	r2, #12
 802239a:	dd08      	ble.n	80223ae <__adddf3+0x16a>
 802239c:	f102 0c14 	add.w	ip, r2, #20
 80223a0:	f1c2 020c 	rsb	r2, r2, #12
 80223a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80223a8:	fa21 f102 	lsr.w	r1, r1, r2
 80223ac:	e00c      	b.n	80223c8 <__adddf3+0x184>
 80223ae:	f102 0214 	add.w	r2, r2, #20
 80223b2:	bfd8      	it	le
 80223b4:	f1c2 0c20 	rsble	ip, r2, #32
 80223b8:	fa01 f102 	lsl.w	r1, r1, r2
 80223bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80223c0:	bfdc      	itt	le
 80223c2:	ea41 010c 	orrle.w	r1, r1, ip
 80223c6:	4090      	lslle	r0, r2
 80223c8:	1ae4      	subs	r4, r4, r3
 80223ca:	bfa2      	ittt	ge
 80223cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80223d0:	4329      	orrge	r1, r5
 80223d2:	bd30      	popge	{r4, r5, pc}
 80223d4:	ea6f 0404 	mvn.w	r4, r4
 80223d8:	3c1f      	subs	r4, #31
 80223da:	da1c      	bge.n	8022416 <__adddf3+0x1d2>
 80223dc:	340c      	adds	r4, #12
 80223de:	dc0e      	bgt.n	80223fe <__adddf3+0x1ba>
 80223e0:	f104 0414 	add.w	r4, r4, #20
 80223e4:	f1c4 0220 	rsb	r2, r4, #32
 80223e8:	fa20 f004 	lsr.w	r0, r0, r4
 80223ec:	fa01 f302 	lsl.w	r3, r1, r2
 80223f0:	ea40 0003 	orr.w	r0, r0, r3
 80223f4:	fa21 f304 	lsr.w	r3, r1, r4
 80223f8:	ea45 0103 	orr.w	r1, r5, r3
 80223fc:	bd30      	pop	{r4, r5, pc}
 80223fe:	f1c4 040c 	rsb	r4, r4, #12
 8022402:	f1c4 0220 	rsb	r2, r4, #32
 8022406:	fa20 f002 	lsr.w	r0, r0, r2
 802240a:	fa01 f304 	lsl.w	r3, r1, r4
 802240e:	ea40 0003 	orr.w	r0, r0, r3
 8022412:	4629      	mov	r1, r5
 8022414:	bd30      	pop	{r4, r5, pc}
 8022416:	fa21 f004 	lsr.w	r0, r1, r4
 802241a:	4629      	mov	r1, r5
 802241c:	bd30      	pop	{r4, r5, pc}
 802241e:	f094 0f00 	teq	r4, #0
 8022422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8022426:	bf06      	itte	eq
 8022428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 802242c:	3401      	addeq	r4, #1
 802242e:	3d01      	subne	r5, #1
 8022430:	e74e      	b.n	80222d0 <__adddf3+0x8c>
 8022432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8022436:	bf18      	it	ne
 8022438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 802243c:	d029      	beq.n	8022492 <__adddf3+0x24e>
 802243e:	ea94 0f05 	teq	r4, r5
 8022442:	bf08      	it	eq
 8022444:	ea90 0f02 	teqeq	r0, r2
 8022448:	d005      	beq.n	8022456 <__adddf3+0x212>
 802244a:	ea54 0c00 	orrs.w	ip, r4, r0
 802244e:	bf04      	itt	eq
 8022450:	4619      	moveq	r1, r3
 8022452:	4610      	moveq	r0, r2
 8022454:	bd30      	pop	{r4, r5, pc}
 8022456:	ea91 0f03 	teq	r1, r3
 802245a:	bf1e      	ittt	ne
 802245c:	2100      	movne	r1, #0
 802245e:	2000      	movne	r0, #0
 8022460:	bd30      	popne	{r4, r5, pc}
 8022462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8022466:	d105      	bne.n	8022474 <__adddf3+0x230>
 8022468:	0040      	lsls	r0, r0, #1
 802246a:	4149      	adcs	r1, r1
 802246c:	bf28      	it	cs
 802246e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8022472:	bd30      	pop	{r4, r5, pc}
 8022474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8022478:	bf3c      	itt	cc
 802247a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 802247e:	bd30      	popcc	{r4, r5, pc}
 8022480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8022484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8022488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802248c:	f04f 0000 	mov.w	r0, #0
 8022490:	bd30      	pop	{r4, r5, pc}
 8022492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8022496:	bf1a      	itte	ne
 8022498:	4619      	movne	r1, r3
 802249a:	4610      	movne	r0, r2
 802249c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80224a0:	bf1c      	itt	ne
 80224a2:	460b      	movne	r3, r1
 80224a4:	4602      	movne	r2, r0
 80224a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80224aa:	bf06      	itte	eq
 80224ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80224b0:	ea91 0f03 	teqeq	r1, r3
 80224b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80224b8:	bd30      	pop	{r4, r5, pc}
 80224ba:	bf00      	nop

080224bc <__aeabi_ui2d>:
 80224bc:	f090 0f00 	teq	r0, #0
 80224c0:	bf04      	itt	eq
 80224c2:	2100      	moveq	r1, #0
 80224c4:	4770      	bxeq	lr
 80224c6:	b530      	push	{r4, r5, lr}
 80224c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80224cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80224d0:	f04f 0500 	mov.w	r5, #0
 80224d4:	f04f 0100 	mov.w	r1, #0
 80224d8:	e750      	b.n	802237c <__adddf3+0x138>
 80224da:	bf00      	nop

080224dc <__aeabi_i2d>:
 80224dc:	f090 0f00 	teq	r0, #0
 80224e0:	bf04      	itt	eq
 80224e2:	2100      	moveq	r1, #0
 80224e4:	4770      	bxeq	lr
 80224e6:	b530      	push	{r4, r5, lr}
 80224e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80224ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80224f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80224f4:	bf48      	it	mi
 80224f6:	4240      	negmi	r0, r0
 80224f8:	f04f 0100 	mov.w	r1, #0
 80224fc:	e73e      	b.n	802237c <__adddf3+0x138>
 80224fe:	bf00      	nop

08022500 <__aeabi_f2d>:
 8022500:	0042      	lsls	r2, r0, #1
 8022502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8022506:	ea4f 0131 	mov.w	r1, r1, rrx
 802250a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 802250e:	bf1f      	itttt	ne
 8022510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8022514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8022518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 802251c:	4770      	bxne	lr
 802251e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8022522:	bf08      	it	eq
 8022524:	4770      	bxeq	lr
 8022526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 802252a:	bf04      	itt	eq
 802252c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8022530:	4770      	bxeq	lr
 8022532:	b530      	push	{r4, r5, lr}
 8022534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8022538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802253c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8022540:	e71c      	b.n	802237c <__adddf3+0x138>
 8022542:	bf00      	nop

08022544 <__aeabi_ul2d>:
 8022544:	ea50 0201 	orrs.w	r2, r0, r1
 8022548:	bf08      	it	eq
 802254a:	4770      	bxeq	lr
 802254c:	b530      	push	{r4, r5, lr}
 802254e:	f04f 0500 	mov.w	r5, #0
 8022552:	e00a      	b.n	802256a <__aeabi_l2d+0x16>

08022554 <__aeabi_l2d>:
 8022554:	ea50 0201 	orrs.w	r2, r0, r1
 8022558:	bf08      	it	eq
 802255a:	4770      	bxeq	lr
 802255c:	b530      	push	{r4, r5, lr}
 802255e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8022562:	d502      	bpl.n	802256a <__aeabi_l2d+0x16>
 8022564:	4240      	negs	r0, r0
 8022566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802256a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 802256e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8022572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8022576:	f43f aed8 	beq.w	802232a <__adddf3+0xe6>
 802257a:	f04f 0203 	mov.w	r2, #3
 802257e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8022582:	bf18      	it	ne
 8022584:	3203      	addne	r2, #3
 8022586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802258a:	bf18      	it	ne
 802258c:	3203      	addne	r2, #3
 802258e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8022592:	f1c2 0320 	rsb	r3, r2, #32
 8022596:	fa00 fc03 	lsl.w	ip, r0, r3
 802259a:	fa20 f002 	lsr.w	r0, r0, r2
 802259e:	fa01 fe03 	lsl.w	lr, r1, r3
 80225a2:	ea40 000e 	orr.w	r0, r0, lr
 80225a6:	fa21 f102 	lsr.w	r1, r1, r2
 80225aa:	4414      	add	r4, r2
 80225ac:	e6bd      	b.n	802232a <__adddf3+0xe6>
 80225ae:	bf00      	nop

080225b0 <__aeabi_dmul>:
 80225b0:	b570      	push	{r4, r5, r6, lr}
 80225b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80225b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80225ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80225be:	bf1d      	ittte	ne
 80225c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80225c4:	ea94 0f0c 	teqne	r4, ip
 80225c8:	ea95 0f0c 	teqne	r5, ip
 80225cc:	f000 f8de 	bleq	802278c <__aeabi_dmul+0x1dc>
 80225d0:	442c      	add	r4, r5
 80225d2:	ea81 0603 	eor.w	r6, r1, r3
 80225d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80225da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80225de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80225e2:	bf18      	it	ne
 80225e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80225e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80225ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80225f0:	d038      	beq.n	8022664 <__aeabi_dmul+0xb4>
 80225f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80225f6:	f04f 0500 	mov.w	r5, #0
 80225fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80225fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8022602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8022606:	f04f 0600 	mov.w	r6, #0
 802260a:	fbe1 5603 	umlal	r5, r6, r1, r3
 802260e:	f09c 0f00 	teq	ip, #0
 8022612:	bf18      	it	ne
 8022614:	f04e 0e01 	orrne.w	lr, lr, #1
 8022618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 802261c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8022620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8022624:	d204      	bcs.n	8022630 <__aeabi_dmul+0x80>
 8022626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 802262a:	416d      	adcs	r5, r5
 802262c:	eb46 0606 	adc.w	r6, r6, r6
 8022630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8022634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8022638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 802263c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8022640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8022644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8022648:	bf88      	it	hi
 802264a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 802264e:	d81e      	bhi.n	802268e <__aeabi_dmul+0xde>
 8022650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8022654:	bf08      	it	eq
 8022656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 802265a:	f150 0000 	adcs.w	r0, r0, #0
 802265e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8022662:	bd70      	pop	{r4, r5, r6, pc}
 8022664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8022668:	ea46 0101 	orr.w	r1, r6, r1
 802266c:	ea40 0002 	orr.w	r0, r0, r2
 8022670:	ea81 0103 	eor.w	r1, r1, r3
 8022674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8022678:	bfc2      	ittt	gt
 802267a:	ebd4 050c 	rsbsgt	r5, r4, ip
 802267e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8022682:	bd70      	popgt	{r4, r5, r6, pc}
 8022684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8022688:	f04f 0e00 	mov.w	lr, #0
 802268c:	3c01      	subs	r4, #1
 802268e:	f300 80ab 	bgt.w	80227e8 <__aeabi_dmul+0x238>
 8022692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8022696:	bfde      	ittt	le
 8022698:	2000      	movle	r0, #0
 802269a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 802269e:	bd70      	pople	{r4, r5, r6, pc}
 80226a0:	f1c4 0400 	rsb	r4, r4, #0
 80226a4:	3c20      	subs	r4, #32
 80226a6:	da35      	bge.n	8022714 <__aeabi_dmul+0x164>
 80226a8:	340c      	adds	r4, #12
 80226aa:	dc1b      	bgt.n	80226e4 <__aeabi_dmul+0x134>
 80226ac:	f104 0414 	add.w	r4, r4, #20
 80226b0:	f1c4 0520 	rsb	r5, r4, #32
 80226b4:	fa00 f305 	lsl.w	r3, r0, r5
 80226b8:	fa20 f004 	lsr.w	r0, r0, r4
 80226bc:	fa01 f205 	lsl.w	r2, r1, r5
 80226c0:	ea40 0002 	orr.w	r0, r0, r2
 80226c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80226c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80226cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80226d0:	fa21 f604 	lsr.w	r6, r1, r4
 80226d4:	eb42 0106 	adc.w	r1, r2, r6
 80226d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80226dc:	bf08      	it	eq
 80226de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80226e2:	bd70      	pop	{r4, r5, r6, pc}
 80226e4:	f1c4 040c 	rsb	r4, r4, #12
 80226e8:	f1c4 0520 	rsb	r5, r4, #32
 80226ec:	fa00 f304 	lsl.w	r3, r0, r4
 80226f0:	fa20 f005 	lsr.w	r0, r0, r5
 80226f4:	fa01 f204 	lsl.w	r2, r1, r4
 80226f8:	ea40 0002 	orr.w	r0, r0, r2
 80226fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8022700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8022704:	f141 0100 	adc.w	r1, r1, #0
 8022708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802270c:	bf08      	it	eq
 802270e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8022712:	bd70      	pop	{r4, r5, r6, pc}
 8022714:	f1c4 0520 	rsb	r5, r4, #32
 8022718:	fa00 f205 	lsl.w	r2, r0, r5
 802271c:	ea4e 0e02 	orr.w	lr, lr, r2
 8022720:	fa20 f304 	lsr.w	r3, r0, r4
 8022724:	fa01 f205 	lsl.w	r2, r1, r5
 8022728:	ea43 0302 	orr.w	r3, r3, r2
 802272c:	fa21 f004 	lsr.w	r0, r1, r4
 8022730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8022734:	fa21 f204 	lsr.w	r2, r1, r4
 8022738:	ea20 0002 	bic.w	r0, r0, r2
 802273c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8022740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8022744:	bf08      	it	eq
 8022746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802274a:	bd70      	pop	{r4, r5, r6, pc}
 802274c:	f094 0f00 	teq	r4, #0
 8022750:	d10f      	bne.n	8022772 <__aeabi_dmul+0x1c2>
 8022752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8022756:	0040      	lsls	r0, r0, #1
 8022758:	eb41 0101 	adc.w	r1, r1, r1
 802275c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8022760:	bf08      	it	eq
 8022762:	3c01      	subeq	r4, #1
 8022764:	d0f7      	beq.n	8022756 <__aeabi_dmul+0x1a6>
 8022766:	ea41 0106 	orr.w	r1, r1, r6
 802276a:	f095 0f00 	teq	r5, #0
 802276e:	bf18      	it	ne
 8022770:	4770      	bxne	lr
 8022772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8022776:	0052      	lsls	r2, r2, #1
 8022778:	eb43 0303 	adc.w	r3, r3, r3
 802277c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8022780:	bf08      	it	eq
 8022782:	3d01      	subeq	r5, #1
 8022784:	d0f7      	beq.n	8022776 <__aeabi_dmul+0x1c6>
 8022786:	ea43 0306 	orr.w	r3, r3, r6
 802278a:	4770      	bx	lr
 802278c:	ea94 0f0c 	teq	r4, ip
 8022790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8022794:	bf18      	it	ne
 8022796:	ea95 0f0c 	teqne	r5, ip
 802279a:	d00c      	beq.n	80227b6 <__aeabi_dmul+0x206>
 802279c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80227a0:	bf18      	it	ne
 80227a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80227a6:	d1d1      	bne.n	802274c <__aeabi_dmul+0x19c>
 80227a8:	ea81 0103 	eor.w	r1, r1, r3
 80227ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80227b0:	f04f 0000 	mov.w	r0, #0
 80227b4:	bd70      	pop	{r4, r5, r6, pc}
 80227b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80227ba:	bf06      	itte	eq
 80227bc:	4610      	moveq	r0, r2
 80227be:	4619      	moveq	r1, r3
 80227c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80227c4:	d019      	beq.n	80227fa <__aeabi_dmul+0x24a>
 80227c6:	ea94 0f0c 	teq	r4, ip
 80227ca:	d102      	bne.n	80227d2 <__aeabi_dmul+0x222>
 80227cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80227d0:	d113      	bne.n	80227fa <__aeabi_dmul+0x24a>
 80227d2:	ea95 0f0c 	teq	r5, ip
 80227d6:	d105      	bne.n	80227e4 <__aeabi_dmul+0x234>
 80227d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80227dc:	bf1c      	itt	ne
 80227de:	4610      	movne	r0, r2
 80227e0:	4619      	movne	r1, r3
 80227e2:	d10a      	bne.n	80227fa <__aeabi_dmul+0x24a>
 80227e4:	ea81 0103 	eor.w	r1, r1, r3
 80227e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80227ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80227f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80227f4:	f04f 0000 	mov.w	r0, #0
 80227f8:	bd70      	pop	{r4, r5, r6, pc}
 80227fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80227fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8022802:	bd70      	pop	{r4, r5, r6, pc}

08022804 <__aeabi_ddiv>:
 8022804:	b570      	push	{r4, r5, r6, lr}
 8022806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802280a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 802280e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8022812:	bf1d      	ittte	ne
 8022814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8022818:	ea94 0f0c 	teqne	r4, ip
 802281c:	ea95 0f0c 	teqne	r5, ip
 8022820:	f000 f8a7 	bleq	8022972 <__aeabi_ddiv+0x16e>
 8022824:	eba4 0405 	sub.w	r4, r4, r5
 8022828:	ea81 0e03 	eor.w	lr, r1, r3
 802282c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8022830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8022834:	f000 8088 	beq.w	8022948 <__aeabi_ddiv+0x144>
 8022838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 802283c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8022840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8022844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8022848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 802284c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8022850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8022854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8022858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 802285c:	429d      	cmp	r5, r3
 802285e:	bf08      	it	eq
 8022860:	4296      	cmpeq	r6, r2
 8022862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8022866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 802286a:	d202      	bcs.n	8022872 <__aeabi_ddiv+0x6e>
 802286c:	085b      	lsrs	r3, r3, #1
 802286e:	ea4f 0232 	mov.w	r2, r2, rrx
 8022872:	1ab6      	subs	r6, r6, r2
 8022874:	eb65 0503 	sbc.w	r5, r5, r3
 8022878:	085b      	lsrs	r3, r3, #1
 802287a:	ea4f 0232 	mov.w	r2, r2, rrx
 802287e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8022882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8022886:	ebb6 0e02 	subs.w	lr, r6, r2
 802288a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802288e:	bf22      	ittt	cs
 8022890:	1ab6      	subcs	r6, r6, r2
 8022892:	4675      	movcs	r5, lr
 8022894:	ea40 000c 	orrcs.w	r0, r0, ip
 8022898:	085b      	lsrs	r3, r3, #1
 802289a:	ea4f 0232 	mov.w	r2, r2, rrx
 802289e:	ebb6 0e02 	subs.w	lr, r6, r2
 80228a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80228a6:	bf22      	ittt	cs
 80228a8:	1ab6      	subcs	r6, r6, r2
 80228aa:	4675      	movcs	r5, lr
 80228ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80228b0:	085b      	lsrs	r3, r3, #1
 80228b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80228b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80228ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80228be:	bf22      	ittt	cs
 80228c0:	1ab6      	subcs	r6, r6, r2
 80228c2:	4675      	movcs	r5, lr
 80228c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80228c8:	085b      	lsrs	r3, r3, #1
 80228ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80228ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80228d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80228d6:	bf22      	ittt	cs
 80228d8:	1ab6      	subcs	r6, r6, r2
 80228da:	4675      	movcs	r5, lr
 80228dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80228e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80228e4:	d018      	beq.n	8022918 <__aeabi_ddiv+0x114>
 80228e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80228ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80228ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80228f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80228f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80228fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80228fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8022902:	d1c0      	bne.n	8022886 <__aeabi_ddiv+0x82>
 8022904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8022908:	d10b      	bne.n	8022922 <__aeabi_ddiv+0x11e>
 802290a:	ea41 0100 	orr.w	r1, r1, r0
 802290e:	f04f 0000 	mov.w	r0, #0
 8022912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8022916:	e7b6      	b.n	8022886 <__aeabi_ddiv+0x82>
 8022918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802291c:	bf04      	itt	eq
 802291e:	4301      	orreq	r1, r0
 8022920:	2000      	moveq	r0, #0
 8022922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8022926:	bf88      	it	hi
 8022928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 802292c:	f63f aeaf 	bhi.w	802268e <__aeabi_dmul+0xde>
 8022930:	ebb5 0c03 	subs.w	ip, r5, r3
 8022934:	bf04      	itt	eq
 8022936:	ebb6 0c02 	subseq.w	ip, r6, r2
 802293a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 802293e:	f150 0000 	adcs.w	r0, r0, #0
 8022942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8022946:	bd70      	pop	{r4, r5, r6, pc}
 8022948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 802294c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8022950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8022954:	bfc2      	ittt	gt
 8022956:	ebd4 050c 	rsbsgt	r5, r4, ip
 802295a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802295e:	bd70      	popgt	{r4, r5, r6, pc}
 8022960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8022964:	f04f 0e00 	mov.w	lr, #0
 8022968:	3c01      	subs	r4, #1
 802296a:	e690      	b.n	802268e <__aeabi_dmul+0xde>
 802296c:	ea45 0e06 	orr.w	lr, r5, r6
 8022970:	e68d      	b.n	802268e <__aeabi_dmul+0xde>
 8022972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8022976:	ea94 0f0c 	teq	r4, ip
 802297a:	bf08      	it	eq
 802297c:	ea95 0f0c 	teqeq	r5, ip
 8022980:	f43f af3b 	beq.w	80227fa <__aeabi_dmul+0x24a>
 8022984:	ea94 0f0c 	teq	r4, ip
 8022988:	d10a      	bne.n	80229a0 <__aeabi_ddiv+0x19c>
 802298a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 802298e:	f47f af34 	bne.w	80227fa <__aeabi_dmul+0x24a>
 8022992:	ea95 0f0c 	teq	r5, ip
 8022996:	f47f af25 	bne.w	80227e4 <__aeabi_dmul+0x234>
 802299a:	4610      	mov	r0, r2
 802299c:	4619      	mov	r1, r3
 802299e:	e72c      	b.n	80227fa <__aeabi_dmul+0x24a>
 80229a0:	ea95 0f0c 	teq	r5, ip
 80229a4:	d106      	bne.n	80229b4 <__aeabi_ddiv+0x1b0>
 80229a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80229aa:	f43f aefd 	beq.w	80227a8 <__aeabi_dmul+0x1f8>
 80229ae:	4610      	mov	r0, r2
 80229b0:	4619      	mov	r1, r3
 80229b2:	e722      	b.n	80227fa <__aeabi_dmul+0x24a>
 80229b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80229b8:	bf18      	it	ne
 80229ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80229be:	f47f aec5 	bne.w	802274c <__aeabi_dmul+0x19c>
 80229c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80229c6:	f47f af0d 	bne.w	80227e4 <__aeabi_dmul+0x234>
 80229ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80229ce:	f47f aeeb 	bne.w	80227a8 <__aeabi_dmul+0x1f8>
 80229d2:	e712      	b.n	80227fa <__aeabi_dmul+0x24a>

080229d4 <__gedf2>:
 80229d4:	f04f 3cff 	mov.w	ip, #4294967295
 80229d8:	e006      	b.n	80229e8 <__cmpdf2+0x4>
 80229da:	bf00      	nop

080229dc <__ledf2>:
 80229dc:	f04f 0c01 	mov.w	ip, #1
 80229e0:	e002      	b.n	80229e8 <__cmpdf2+0x4>
 80229e2:	bf00      	nop

080229e4 <__cmpdf2>:
 80229e4:	f04f 0c01 	mov.w	ip, #1
 80229e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80229ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80229f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80229f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80229f8:	bf18      	it	ne
 80229fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80229fe:	d01b      	beq.n	8022a38 <__cmpdf2+0x54>
 8022a00:	b001      	add	sp, #4
 8022a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8022a06:	bf0c      	ite	eq
 8022a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8022a0c:	ea91 0f03 	teqne	r1, r3
 8022a10:	bf02      	ittt	eq
 8022a12:	ea90 0f02 	teqeq	r0, r2
 8022a16:	2000      	moveq	r0, #0
 8022a18:	4770      	bxeq	lr
 8022a1a:	f110 0f00 	cmn.w	r0, #0
 8022a1e:	ea91 0f03 	teq	r1, r3
 8022a22:	bf58      	it	pl
 8022a24:	4299      	cmppl	r1, r3
 8022a26:	bf08      	it	eq
 8022a28:	4290      	cmpeq	r0, r2
 8022a2a:	bf2c      	ite	cs
 8022a2c:	17d8      	asrcs	r0, r3, #31
 8022a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8022a32:	f040 0001 	orr.w	r0, r0, #1
 8022a36:	4770      	bx	lr
 8022a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8022a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022a40:	d102      	bne.n	8022a48 <__cmpdf2+0x64>
 8022a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8022a46:	d107      	bne.n	8022a58 <__cmpdf2+0x74>
 8022a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8022a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022a50:	d1d6      	bne.n	8022a00 <__cmpdf2+0x1c>
 8022a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8022a56:	d0d3      	beq.n	8022a00 <__cmpdf2+0x1c>
 8022a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8022a5c:	4770      	bx	lr
 8022a5e:	bf00      	nop

08022a60 <__aeabi_cdrcmple>:
 8022a60:	4684      	mov	ip, r0
 8022a62:	4610      	mov	r0, r2
 8022a64:	4662      	mov	r2, ip
 8022a66:	468c      	mov	ip, r1
 8022a68:	4619      	mov	r1, r3
 8022a6a:	4663      	mov	r3, ip
 8022a6c:	e000      	b.n	8022a70 <__aeabi_cdcmpeq>
 8022a6e:	bf00      	nop

08022a70 <__aeabi_cdcmpeq>:
 8022a70:	b501      	push	{r0, lr}
 8022a72:	f7ff ffb7 	bl	80229e4 <__cmpdf2>
 8022a76:	2800      	cmp	r0, #0
 8022a78:	bf48      	it	mi
 8022a7a:	f110 0f00 	cmnmi.w	r0, #0
 8022a7e:	bd01      	pop	{r0, pc}

08022a80 <__aeabi_dcmpeq>:
 8022a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022a84:	f7ff fff4 	bl	8022a70 <__aeabi_cdcmpeq>
 8022a88:	bf0c      	ite	eq
 8022a8a:	2001      	moveq	r0, #1
 8022a8c:	2000      	movne	r0, #0
 8022a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8022a92:	bf00      	nop

08022a94 <__aeabi_dcmplt>:
 8022a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022a98:	f7ff ffea 	bl	8022a70 <__aeabi_cdcmpeq>
 8022a9c:	bf34      	ite	cc
 8022a9e:	2001      	movcc	r0, #1
 8022aa0:	2000      	movcs	r0, #0
 8022aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8022aa6:	bf00      	nop

08022aa8 <__aeabi_dcmple>:
 8022aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022aac:	f7ff ffe0 	bl	8022a70 <__aeabi_cdcmpeq>
 8022ab0:	bf94      	ite	ls
 8022ab2:	2001      	movls	r0, #1
 8022ab4:	2000      	movhi	r0, #0
 8022ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8022aba:	bf00      	nop

08022abc <__aeabi_dcmpge>:
 8022abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022ac0:	f7ff ffce 	bl	8022a60 <__aeabi_cdrcmple>
 8022ac4:	bf94      	ite	ls
 8022ac6:	2001      	movls	r0, #1
 8022ac8:	2000      	movhi	r0, #0
 8022aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8022ace:	bf00      	nop

08022ad0 <__aeabi_dcmpgt>:
 8022ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022ad4:	f7ff ffc4 	bl	8022a60 <__aeabi_cdrcmple>
 8022ad8:	bf34      	ite	cc
 8022ada:	2001      	movcc	r0, #1
 8022adc:	2000      	movcs	r0, #0
 8022ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8022ae2:	bf00      	nop

08022ae4 <__aeabi_dcmpun>:
 8022ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8022ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022aec:	d102      	bne.n	8022af4 <__aeabi_dcmpun+0x10>
 8022aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8022af2:	d10a      	bne.n	8022b0a <__aeabi_dcmpun+0x26>
 8022af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8022af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022afc:	d102      	bne.n	8022b04 <__aeabi_dcmpun+0x20>
 8022afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8022b02:	d102      	bne.n	8022b0a <__aeabi_dcmpun+0x26>
 8022b04:	f04f 0000 	mov.w	r0, #0
 8022b08:	4770      	bx	lr
 8022b0a:	f04f 0001 	mov.w	r0, #1
 8022b0e:	4770      	bx	lr

08022b10 <__aeabi_d2iz>:
 8022b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8022b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8022b18:	d215      	bcs.n	8022b46 <__aeabi_d2iz+0x36>
 8022b1a:	d511      	bpl.n	8022b40 <__aeabi_d2iz+0x30>
 8022b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8022b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8022b24:	d912      	bls.n	8022b4c <__aeabi_d2iz+0x3c>
 8022b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8022b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8022b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8022b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8022b36:	fa23 f002 	lsr.w	r0, r3, r2
 8022b3a:	bf18      	it	ne
 8022b3c:	4240      	negne	r0, r0
 8022b3e:	4770      	bx	lr
 8022b40:	f04f 0000 	mov.w	r0, #0
 8022b44:	4770      	bx	lr
 8022b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8022b4a:	d105      	bne.n	8022b58 <__aeabi_d2iz+0x48>
 8022b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8022b50:	bf08      	it	eq
 8022b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8022b56:	4770      	bx	lr
 8022b58:	f04f 0000 	mov.w	r0, #0
 8022b5c:	4770      	bx	lr
 8022b5e:	bf00      	nop

08022b60 <__aeabi_uldivmod>:
 8022b60:	b953      	cbnz	r3, 8022b78 <__aeabi_uldivmod+0x18>
 8022b62:	b94a      	cbnz	r2, 8022b78 <__aeabi_uldivmod+0x18>
 8022b64:	2900      	cmp	r1, #0
 8022b66:	bf08      	it	eq
 8022b68:	2800      	cmpeq	r0, #0
 8022b6a:	bf1c      	itt	ne
 8022b6c:	f04f 31ff 	movne.w	r1, #4294967295
 8022b70:	f04f 30ff 	movne.w	r0, #4294967295
 8022b74:	f000 b972 	b.w	8022e5c <__aeabi_idiv0>
 8022b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8022b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8022b80:	f000 f806 	bl	8022b90 <__udivmoddi4>
 8022b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8022b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022b8c:	b004      	add	sp, #16
 8022b8e:	4770      	bx	lr

08022b90 <__udivmoddi4>:
 8022b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022b94:	9e08      	ldr	r6, [sp, #32]
 8022b96:	460d      	mov	r5, r1
 8022b98:	4604      	mov	r4, r0
 8022b9a:	468e      	mov	lr, r1
 8022b9c:	2b00      	cmp	r3, #0
 8022b9e:	d14c      	bne.n	8022c3a <__udivmoddi4+0xaa>
 8022ba0:	428a      	cmp	r2, r1
 8022ba2:	4694      	mov	ip, r2
 8022ba4:	d967      	bls.n	8022c76 <__udivmoddi4+0xe6>
 8022ba6:	fab2 f382 	clz	r3, r2
 8022baa:	b153      	cbz	r3, 8022bc2 <__udivmoddi4+0x32>
 8022bac:	fa02 fc03 	lsl.w	ip, r2, r3
 8022bb0:	f1c3 0220 	rsb	r2, r3, #32
 8022bb4:	fa01 fe03 	lsl.w	lr, r1, r3
 8022bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8022bbc:	ea42 0e0e 	orr.w	lr, r2, lr
 8022bc0:	409c      	lsls	r4, r3
 8022bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8022bc6:	fbbe f1f7 	udiv	r1, lr, r7
 8022bca:	fa1f f58c 	uxth.w	r5, ip
 8022bce:	fb07 ee11 	mls	lr, r7, r1, lr
 8022bd2:	fb01 f005 	mul.w	r0, r1, r5
 8022bd6:	0c22      	lsrs	r2, r4, #16
 8022bd8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8022bdc:	4290      	cmp	r0, r2
 8022bde:	d90a      	bls.n	8022bf6 <__udivmoddi4+0x66>
 8022be0:	eb1c 0202 	adds.w	r2, ip, r2
 8022be4:	f101 3eff 	add.w	lr, r1, #4294967295
 8022be8:	f080 8119 	bcs.w	8022e1e <__udivmoddi4+0x28e>
 8022bec:	4290      	cmp	r0, r2
 8022bee:	f240 8116 	bls.w	8022e1e <__udivmoddi4+0x28e>
 8022bf2:	3902      	subs	r1, #2
 8022bf4:	4462      	add	r2, ip
 8022bf6:	1a12      	subs	r2, r2, r0
 8022bf8:	fbb2 f0f7 	udiv	r0, r2, r7
 8022bfc:	fb07 2210 	mls	r2, r7, r0, r2
 8022c00:	fb00 f505 	mul.w	r5, r0, r5
 8022c04:	b2a4      	uxth	r4, r4
 8022c06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022c0a:	42a5      	cmp	r5, r4
 8022c0c:	d90a      	bls.n	8022c24 <__udivmoddi4+0x94>
 8022c0e:	eb1c 0404 	adds.w	r4, ip, r4
 8022c12:	f100 32ff 	add.w	r2, r0, #4294967295
 8022c16:	f080 8104 	bcs.w	8022e22 <__udivmoddi4+0x292>
 8022c1a:	42a5      	cmp	r5, r4
 8022c1c:	f240 8101 	bls.w	8022e22 <__udivmoddi4+0x292>
 8022c20:	4464      	add	r4, ip
 8022c22:	3802      	subs	r0, #2
 8022c24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8022c28:	2100      	movs	r1, #0
 8022c2a:	1b64      	subs	r4, r4, r5
 8022c2c:	b11e      	cbz	r6, 8022c36 <__udivmoddi4+0xa6>
 8022c2e:	40dc      	lsrs	r4, r3
 8022c30:	2300      	movs	r3, #0
 8022c32:	e9c6 4300 	strd	r4, r3, [r6]
 8022c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c3a:	428b      	cmp	r3, r1
 8022c3c:	d908      	bls.n	8022c50 <__udivmoddi4+0xc0>
 8022c3e:	2e00      	cmp	r6, #0
 8022c40:	f000 80ea 	beq.w	8022e18 <__udivmoddi4+0x288>
 8022c44:	2100      	movs	r1, #0
 8022c46:	e9c6 0500 	strd	r0, r5, [r6]
 8022c4a:	4608      	mov	r0, r1
 8022c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c50:	fab3 f183 	clz	r1, r3
 8022c54:	2900      	cmp	r1, #0
 8022c56:	d148      	bne.n	8022cea <__udivmoddi4+0x15a>
 8022c58:	42ab      	cmp	r3, r5
 8022c5a:	d302      	bcc.n	8022c62 <__udivmoddi4+0xd2>
 8022c5c:	4282      	cmp	r2, r0
 8022c5e:	f200 80f8 	bhi.w	8022e52 <__udivmoddi4+0x2c2>
 8022c62:	1a84      	subs	r4, r0, r2
 8022c64:	eb65 0203 	sbc.w	r2, r5, r3
 8022c68:	2001      	movs	r0, #1
 8022c6a:	4696      	mov	lr, r2
 8022c6c:	2e00      	cmp	r6, #0
 8022c6e:	d0e2      	beq.n	8022c36 <__udivmoddi4+0xa6>
 8022c70:	e9c6 4e00 	strd	r4, lr, [r6]
 8022c74:	e7df      	b.n	8022c36 <__udivmoddi4+0xa6>
 8022c76:	b902      	cbnz	r2, 8022c7a <__udivmoddi4+0xea>
 8022c78:	deff      	udf	#255	; 0xff
 8022c7a:	fab2 f382 	clz	r3, r2
 8022c7e:	2b00      	cmp	r3, #0
 8022c80:	f040 808e 	bne.w	8022da0 <__udivmoddi4+0x210>
 8022c84:	1a88      	subs	r0, r1, r2
 8022c86:	2101      	movs	r1, #1
 8022c88:	0c17      	lsrs	r7, r2, #16
 8022c8a:	fa1f fe82 	uxth.w	lr, r2
 8022c8e:	fbb0 f5f7 	udiv	r5, r0, r7
 8022c92:	fb07 0015 	mls	r0, r7, r5, r0
 8022c96:	0c22      	lsrs	r2, r4, #16
 8022c98:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8022c9c:	fb0e f005 	mul.w	r0, lr, r5
 8022ca0:	4290      	cmp	r0, r2
 8022ca2:	d908      	bls.n	8022cb6 <__udivmoddi4+0x126>
 8022ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8022ca8:	f105 38ff 	add.w	r8, r5, #4294967295
 8022cac:	d202      	bcs.n	8022cb4 <__udivmoddi4+0x124>
 8022cae:	4290      	cmp	r0, r2
 8022cb0:	f200 80cc 	bhi.w	8022e4c <__udivmoddi4+0x2bc>
 8022cb4:	4645      	mov	r5, r8
 8022cb6:	1a12      	subs	r2, r2, r0
 8022cb8:	fbb2 f0f7 	udiv	r0, r2, r7
 8022cbc:	fb07 2210 	mls	r2, r7, r0, r2
 8022cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8022cc4:	b2a4      	uxth	r4, r4
 8022cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022cca:	45a6      	cmp	lr, r4
 8022ccc:	d908      	bls.n	8022ce0 <__udivmoddi4+0x150>
 8022cce:	eb1c 0404 	adds.w	r4, ip, r4
 8022cd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8022cd6:	d202      	bcs.n	8022cde <__udivmoddi4+0x14e>
 8022cd8:	45a6      	cmp	lr, r4
 8022cda:	f200 80b4 	bhi.w	8022e46 <__udivmoddi4+0x2b6>
 8022cde:	4610      	mov	r0, r2
 8022ce0:	eba4 040e 	sub.w	r4, r4, lr
 8022ce4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8022ce8:	e7a0      	b.n	8022c2c <__udivmoddi4+0x9c>
 8022cea:	f1c1 0720 	rsb	r7, r1, #32
 8022cee:	408b      	lsls	r3, r1
 8022cf0:	fa22 fc07 	lsr.w	ip, r2, r7
 8022cf4:	ea4c 0c03 	orr.w	ip, ip, r3
 8022cf8:	fa25 fa07 	lsr.w	sl, r5, r7
 8022cfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8022d00:	fbba f8f9 	udiv	r8, sl, r9
 8022d04:	408d      	lsls	r5, r1
 8022d06:	fa20 f307 	lsr.w	r3, r0, r7
 8022d0a:	fb09 aa18 	mls	sl, r9, r8, sl
 8022d0e:	fa1f fe8c 	uxth.w	lr, ip
 8022d12:	432b      	orrs	r3, r5
 8022d14:	fa00 f501 	lsl.w	r5, r0, r1
 8022d18:	fb08 f00e 	mul.w	r0, r8, lr
 8022d1c:	0c1c      	lsrs	r4, r3, #16
 8022d1e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8022d22:	42a0      	cmp	r0, r4
 8022d24:	fa02 f201 	lsl.w	r2, r2, r1
 8022d28:	d90b      	bls.n	8022d42 <__udivmoddi4+0x1b2>
 8022d2a:	eb1c 0404 	adds.w	r4, ip, r4
 8022d2e:	f108 3aff 	add.w	sl, r8, #4294967295
 8022d32:	f080 8086 	bcs.w	8022e42 <__udivmoddi4+0x2b2>
 8022d36:	42a0      	cmp	r0, r4
 8022d38:	f240 8083 	bls.w	8022e42 <__udivmoddi4+0x2b2>
 8022d3c:	f1a8 0802 	sub.w	r8, r8, #2
 8022d40:	4464      	add	r4, ip
 8022d42:	1a24      	subs	r4, r4, r0
 8022d44:	b298      	uxth	r0, r3
 8022d46:	fbb4 f3f9 	udiv	r3, r4, r9
 8022d4a:	fb09 4413 	mls	r4, r9, r3, r4
 8022d4e:	fb03 fe0e 	mul.w	lr, r3, lr
 8022d52:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8022d56:	45a6      	cmp	lr, r4
 8022d58:	d908      	bls.n	8022d6c <__udivmoddi4+0x1dc>
 8022d5a:	eb1c 0404 	adds.w	r4, ip, r4
 8022d5e:	f103 30ff 	add.w	r0, r3, #4294967295
 8022d62:	d26a      	bcs.n	8022e3a <__udivmoddi4+0x2aa>
 8022d64:	45a6      	cmp	lr, r4
 8022d66:	d968      	bls.n	8022e3a <__udivmoddi4+0x2aa>
 8022d68:	3b02      	subs	r3, #2
 8022d6a:	4464      	add	r4, ip
 8022d6c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8022d70:	fba0 9302 	umull	r9, r3, r0, r2
 8022d74:	eba4 040e 	sub.w	r4, r4, lr
 8022d78:	429c      	cmp	r4, r3
 8022d7a:	46c8      	mov	r8, r9
 8022d7c:	469e      	mov	lr, r3
 8022d7e:	d354      	bcc.n	8022e2a <__udivmoddi4+0x29a>
 8022d80:	d051      	beq.n	8022e26 <__udivmoddi4+0x296>
 8022d82:	2e00      	cmp	r6, #0
 8022d84:	d067      	beq.n	8022e56 <__udivmoddi4+0x2c6>
 8022d86:	ebb5 0308 	subs.w	r3, r5, r8
 8022d8a:	eb64 040e 	sbc.w	r4, r4, lr
 8022d8e:	40cb      	lsrs	r3, r1
 8022d90:	fa04 f707 	lsl.w	r7, r4, r7
 8022d94:	431f      	orrs	r7, r3
 8022d96:	40cc      	lsrs	r4, r1
 8022d98:	e9c6 7400 	strd	r7, r4, [r6]
 8022d9c:	2100      	movs	r1, #0
 8022d9e:	e74a      	b.n	8022c36 <__udivmoddi4+0xa6>
 8022da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8022da4:	f1c3 0020 	rsb	r0, r3, #32
 8022da8:	40c1      	lsrs	r1, r0
 8022daa:	409d      	lsls	r5, r3
 8022dac:	fa24 f000 	lsr.w	r0, r4, r0
 8022db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8022db4:	4328      	orrs	r0, r5
 8022db6:	fbb1 f5f7 	udiv	r5, r1, r7
 8022dba:	fb07 1115 	mls	r1, r7, r5, r1
 8022dbe:	fa1f fe8c 	uxth.w	lr, ip
 8022dc2:	0c02      	lsrs	r2, r0, #16
 8022dc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8022dc8:	fb05 f10e 	mul.w	r1, r5, lr
 8022dcc:	4291      	cmp	r1, r2
 8022dce:	fa04 f403 	lsl.w	r4, r4, r3
 8022dd2:	d908      	bls.n	8022de6 <__udivmoddi4+0x256>
 8022dd4:	eb1c 0202 	adds.w	r2, ip, r2
 8022dd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8022ddc:	d22f      	bcs.n	8022e3e <__udivmoddi4+0x2ae>
 8022dde:	4291      	cmp	r1, r2
 8022de0:	d92d      	bls.n	8022e3e <__udivmoddi4+0x2ae>
 8022de2:	3d02      	subs	r5, #2
 8022de4:	4462      	add	r2, ip
 8022de6:	1a52      	subs	r2, r2, r1
 8022de8:	fbb2 f1f7 	udiv	r1, r2, r7
 8022dec:	fb07 2211 	mls	r2, r7, r1, r2
 8022df0:	b280      	uxth	r0, r0
 8022df2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8022df6:	fb01 f20e 	mul.w	r2, r1, lr
 8022dfa:	4282      	cmp	r2, r0
 8022dfc:	d908      	bls.n	8022e10 <__udivmoddi4+0x280>
 8022dfe:	eb1c 0000 	adds.w	r0, ip, r0
 8022e02:	f101 38ff 	add.w	r8, r1, #4294967295
 8022e06:	d216      	bcs.n	8022e36 <__udivmoddi4+0x2a6>
 8022e08:	4282      	cmp	r2, r0
 8022e0a:	d914      	bls.n	8022e36 <__udivmoddi4+0x2a6>
 8022e0c:	3902      	subs	r1, #2
 8022e0e:	4460      	add	r0, ip
 8022e10:	1a80      	subs	r0, r0, r2
 8022e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8022e16:	e73a      	b.n	8022c8e <__udivmoddi4+0xfe>
 8022e18:	4631      	mov	r1, r6
 8022e1a:	4630      	mov	r0, r6
 8022e1c:	e70b      	b.n	8022c36 <__udivmoddi4+0xa6>
 8022e1e:	4671      	mov	r1, lr
 8022e20:	e6e9      	b.n	8022bf6 <__udivmoddi4+0x66>
 8022e22:	4610      	mov	r0, r2
 8022e24:	e6fe      	b.n	8022c24 <__udivmoddi4+0x94>
 8022e26:	454d      	cmp	r5, r9
 8022e28:	d2ab      	bcs.n	8022d82 <__udivmoddi4+0x1f2>
 8022e2a:	ebb9 0802 	subs.w	r8, r9, r2
 8022e2e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8022e32:	3801      	subs	r0, #1
 8022e34:	e7a5      	b.n	8022d82 <__udivmoddi4+0x1f2>
 8022e36:	4641      	mov	r1, r8
 8022e38:	e7ea      	b.n	8022e10 <__udivmoddi4+0x280>
 8022e3a:	4603      	mov	r3, r0
 8022e3c:	e796      	b.n	8022d6c <__udivmoddi4+0x1dc>
 8022e3e:	4645      	mov	r5, r8
 8022e40:	e7d1      	b.n	8022de6 <__udivmoddi4+0x256>
 8022e42:	46d0      	mov	r8, sl
 8022e44:	e77d      	b.n	8022d42 <__udivmoddi4+0x1b2>
 8022e46:	4464      	add	r4, ip
 8022e48:	3802      	subs	r0, #2
 8022e4a:	e749      	b.n	8022ce0 <__udivmoddi4+0x150>
 8022e4c:	3d02      	subs	r5, #2
 8022e4e:	4462      	add	r2, ip
 8022e50:	e731      	b.n	8022cb6 <__udivmoddi4+0x126>
 8022e52:	4608      	mov	r0, r1
 8022e54:	e70a      	b.n	8022c6c <__udivmoddi4+0xdc>
 8022e56:	4631      	mov	r1, r6
 8022e58:	e6ed      	b.n	8022c36 <__udivmoddi4+0xa6>
 8022e5a:	bf00      	nop

08022e5c <__aeabi_idiv0>:
 8022e5c:	4770      	bx	lr
 8022e5e:	bf00      	nop

08022e60 <cdc_consume>:
{
    return USB_Data_Peek(data);                                 // 查看USB数据
}

static void cdc_consume()
{
 8022e60:	b500      	push	{lr}
 8022e62:	b083      	sub	sp, #12
    uint8_t *data;

    USB_Data_Get(&data);                                        // 获取USB数据
 8022e64:	a801      	add	r0, sp, #4
 8022e66:	f000 f861 	bl	8022f2c <USB_Data_Get>
    USB_DataRx_Sched();                                         // 调度USB数据接收
 8022e6a:	f000 f88f 	bl	8022f8c <USB_DataRx_Sched>
}
 8022e6e:	b003      	add	sp, #12
 8022e70:	f85d fb04 	ldr.w	pc, [sp], #4

08022e74 <cdc_peek>:
{
 8022e74:	b508      	push	{r3, lr}
    return USB_Data_Peek(data);                                 // 查看USB数据
 8022e76:	f000 f83f 	bl	8022ef8 <USB_Data_Peek>
}
 8022e7a:	bd08      	pop	{r3, pc}

08022e7c <cdc_send_ready>:
{
 8022e7c:	b508      	push	{r3, lr}
    return CDC_IsPacketSent();                                  // 返回CDC是否可发送数据的状态
 8022e7e:	f000 f8fb 	bl	8023078 <CDC_IsPacketSent>
}
 8022e82:	bd08      	pop	{r3, pc}

08022e84 <cdc_send>:
{
 8022e84:	b570      	push	{r4, r5, r6, lr}
 8022e86:	4605      	mov	r5, r0
 8022e88:	460e      	mov	r6, r1
    if (!CDC_IsPacketSent())              // 如果之前的CDC发送未完成
 8022e8a:	f000 f8f5 	bl	8023078 <CDC_IsPacketSent>
 8022e8e:	b950      	cbnz	r0, 8022ea6 <cdc_send+0x22>
        DEBUG_PRINT("Wait for previous CDC TX\r\n");  // 打印调试信息，等待上一次CDC发送完成
 8022e90:	480e      	ldr	r0, [pc, #56]	; (8022ecc <cdc_send+0x48>)
 8022e92:	f008 fd47 	bl	802b924 <puts>
    uint32_t timeout = SEND_TIMEOUT;
 8022e96:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
        while (!CDC_IsPacketSent() && --timeout);    // 等待CDC发送完成，或者超时
 8022e9a:	f000 f8ed 	bl	8023078 <CDC_IsPacketSent>
 8022e9e:	b908      	cbnz	r0, 8022ea4 <cdc_send+0x20>
 8022ea0:	3c01      	subs	r4, #1
 8022ea2:	d1fa      	bne.n	8022e9a <cdc_send+0x16>
        if (!timeout)
 8022ea4:	b134      	cbz	r4, 8022eb4 <cdc_send+0x30>
    if (!CDC_Send_DATA(data, len))                              // 发送数据
 8022ea6:	b2f1      	uxtb	r1, r6
 8022ea8:	4628      	mov	r0, r5
 8022eaa:	f000 f8c7 	bl	802303c <CDC_Send_DATA>
 8022eae:	b138      	cbz	r0, 8022ec0 <cdc_send+0x3c>
    return 0;                                                   // 返回成功代码
 8022eb0:	2000      	movs	r0, #0
}
 8022eb2:	bd70      	pop	{r4, r5, r6, pc}
            ERROR_PRINT("Failed to send data, CDC is busy\r\n");   // 打印错误信息，发送超时，CDC忙碌
 8022eb4:	4806      	ldr	r0, [pc, #24]	; (8022ed0 <cdc_send+0x4c>)
 8022eb6:	f008 fd35 	bl	802b924 <puts>
            return -1;                                          // 返回错误代码
 8022eba:	f04f 30ff 	mov.w	r0, #4294967295
 8022ebe:	e7f8      	b.n	8022eb2 <cdc_send+0x2e>
        ERROR_PRINT("Failed to send data\r\n");                  // 打印错误信息，发送数据失败
 8022ec0:	4804      	ldr	r0, [pc, #16]	; (8022ed4 <cdc_send+0x50>)
 8022ec2:	f008 fd2f 	bl	802b924 <puts>
        return -1;                                              // 返回错误代码
 8022ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8022eca:	e7f2      	b.n	8022eb2 <cdc_send+0x2e>
 8022ecc:	0803023c 	.word	0x0803023c
 8022ed0:	08030258 	.word	0x08030258
 8022ed4:	08030284 	.word	0x08030284

08022ed8 <cdc_init>:
    .peek = cdc_peek,
    .consume = cdc_consume,
};

void cdc_init()
{
 8022ed8:	b508      	push	{r3, lr}
    np_comm_register(&cdc_comm_cb);                             // 注册CDC通信回调函数
 8022eda:	4803      	ldr	r0, [pc, #12]	; (8022ee8 <cdc_init+0x10>)
 8022edc:	f002 f9de 	bl	802529c <np_comm_register>

    /* Enable receive of data */
    CDC_Receive_DATA();                                         // 启用数据接收
 8022ee0:	f000 f8c2 	bl	8023068 <CDC_Receive_DATA>
}
 8022ee4:	bd08      	pop	{r3, pc}
 8022ee6:	bf00      	nop
 8022ee8:	20000000 	.word	0x20000000

08022eec <EP1_IN_Callback>:
* Return         : None.
*******************************************************************************/

void EP1_IN_Callback ()
{
  packet_sent = 1;
 8022eec:	4b01      	ldr	r3, [pc, #4]	; (8022ef4 <EP1_IN_Callback+0x8>)
 8022eee:	2201      	movs	r2, #1
 8022ef0:	601a      	str	r2, [r3, #0]
}
 8022ef2:	4770      	bx	lr
 8022ef4:	20000014 	.word	0x20000014

08022ef8 <USB_Data_Peek>:
static packet_t circ_buf[CIRC_BUF_SIZE];
static volatile uint8_t head, size, tail = CIRC_BUF_SIZE - 1;

uint32_t USB_Data_Peek(uint8_t **data)
{
  if (!size)
 8022ef8:	4b09      	ldr	r3, [pc, #36]	; (8022f20 <USB_Data_Peek+0x28>)
 8022efa:	781b      	ldrb	r3, [r3, #0]
 8022efc:	b173      	cbz	r3, 8022f1c <USB_Data_Peek+0x24>
    return 0;

  *data = circ_buf[head].pbuf;
 8022efe:	4909      	ldr	r1, [pc, #36]	; (8022f24 <USB_Data_Peek+0x2c>)
 8022f00:	780b      	ldrb	r3, [r1, #0]
 8022f02:	4a09      	ldr	r2, [pc, #36]	; (8022f28 <USB_Data_Peek+0x30>)
 8022f04:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022f0c:	6003      	str	r3, [r0, #0]

  return circ_buf[head].len;
 8022f0e:	780b      	ldrb	r3, [r1, #0]
 8022f10:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022f14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8022f18:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8022f1a:	4770      	bx	lr
    return 0;
 8022f1c:	2000      	movs	r0, #0
}
 8022f1e:	4770      	bx	lr
 8022f20:	200011e9 	.word	0x200011e9
 8022f24:	200011e8 	.word	0x200011e8
 8022f28:	200008e0 	.word	0x200008e0

08022f2c <USB_Data_Get>:

uint32_t USB_Data_Get(uint8_t **data)
{
  uint32_t len;

  if (!size)
 8022f2c:	4b13      	ldr	r3, [pc, #76]	; (8022f7c <USB_Data_Get+0x50>)
 8022f2e:	781b      	ldrb	r3, [r3, #0]
 8022f30:	b313      	cbz	r3, 8022f78 <USB_Data_Get+0x4c>
    return 0;

  *data = circ_buf[head].pbuf;
 8022f32:	4a13      	ldr	r2, [pc, #76]	; (8022f80 <USB_Data_Get+0x54>)
 8022f34:	7813      	ldrb	r3, [r2, #0]
 8022f36:	4913      	ldr	r1, [pc, #76]	; (8022f84 <USB_Data_Get+0x58>)
 8022f38:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022f3c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022f40:	6003      	str	r3, [r0, #0]
  len = circ_buf[head].len;
 8022f42:	7813      	ldrb	r3, [r2, #0]
 8022f44:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022f48:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022f4c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  head = (head + 1) % CIRC_BUF_SIZE;
 8022f4e:	7813      	ldrb	r3, [r2, #0]
 8022f50:	3301      	adds	r3, #1
 8022f52:	490d      	ldr	r1, [pc, #52]	; (8022f88 <USB_Data_Get+0x5c>)
 8022f54:	fb81 c103 	smull	ip, r1, r1, r3
 8022f58:	f001 0cf0 	and.w	ip, r1, #240	; 0xf0
 8022f5c:	eb0c 1121 	add.w	r1, ip, r1, asr #4
 8022f60:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8022f64:	b2db      	uxtb	r3, r3
 8022f66:	7013      	strb	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8022f68:	b672      	cpsid	i
  __disable_irq();
  size--;
 8022f6a:	4a04      	ldr	r2, [pc, #16]	; (8022f7c <USB_Data_Get+0x50>)
 8022f6c:	7813      	ldrb	r3, [r2, #0]
 8022f6e:	3b01      	subs	r3, #1
 8022f70:	b2db      	uxtb	r3, r3
 8022f72:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8022f74:	b662      	cpsie	i
  __enable_irq();

  return len;
 8022f76:	4770      	bx	lr
    return 0;
 8022f78:	2000      	movs	r0, #0
}
 8022f7a:	4770      	bx	lr
 8022f7c:	200011e9 	.word	0x200011e9
 8022f80:	200011e8 	.word	0x200011e8
 8022f84:	200008e0 	.word	0x200008e0
 8022f88:	78787879 	.word	0x78787879

08022f8c <USB_DataRx_Sched>:
  if (size < CIRC_BUF_SIZE)
	  USBD_CtlReceiveStatus(&hUsbDeviceFS);
}

void USB_DataRx_Sched(void)
{
 8022f8c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8022f8e:	b672      	cpsid	i
  if (size < CIRC_BUF_SIZE)
 8022f90:	4b05      	ldr	r3, [pc, #20]	; (8022fa8 <USB_DataRx_Sched+0x1c>)
 8022f92:	781b      	ldrb	r3, [r3, #0]
 8022f94:	b2db      	uxtb	r3, r3
 8022f96:	2b21      	cmp	r3, #33	; 0x21
 8022f98:	d901      	bls.n	8022f9e <USB_DataRx_Sched+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 8022f9a:	b662      	cpsie	i
  __disable_irq();
  USB_DataRx_Sched_Internal();
  __enable_irq();
}
 8022f9c:	bd08      	pop	{r3, pc}
	  USBD_CtlReceiveStatus(&hUsbDeviceFS);
 8022f9e:	4803      	ldr	r0, [pc, #12]	; (8022fac <USB_DataRx_Sched+0x20>)
 8022fa0:	f008 f963 	bl	802b26a <USBD_CtlReceiveStatus>
 8022fa4:	e7f9      	b.n	8022f9a <USB_DataRx_Sched+0xe>
 8022fa6:	bf00      	nop
 8022fa8:	200011e9 	.word	0x200011e9
 8022fac:	20005804 	.word	0x20005804

08022fb0 <EP3_OUT_Callback>:

void EP3_OUT_Callback(uint8_t **Buf, uint32_t *Len)
{
 8022fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fb2:	4605      	mov	r5, r0
	Receive_length = USBD_GetRxCount(&hUsbDeviceFS, CDC_OUT_EP);
 8022fb4:	2101      	movs	r1, #1
 8022fb6:	481b      	ldr	r0, [pc, #108]	; (8023024 <EP3_OUT_Callback+0x74>)
 8022fb8:	f008 f962 	bl	802b280 <USBD_GetRxCount>
 8022fbc:	4b1a      	ldr	r3, [pc, #104]	; (8023028 <EP3_OUT_Callback+0x78>)
 8022fbe:	6018      	str	r0, [r3, #0]
    if (size < CIRC_BUF_SIZE)
 8022fc0:	4b1a      	ldr	r3, [pc, #104]	; (802302c <EP3_OUT_Callback+0x7c>)
 8022fc2:	781b      	ldrb	r3, [r3, #0]
 8022fc4:	b2db      	uxtb	r3, r3
 8022fc6:	2b21      	cmp	r3, #33	; 0x21
 8022fc8:	d900      	bls.n	8022fcc <EP3_OUT_Callback+0x1c>
        memcpy(circ_buf[tail].pbuf, Buf, Receive_length);
        circ_buf[tail].len = Receive_length;
        size++;
        USB_DataRx_Sched_Internal();
    }
}
 8022fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022fcc:	4604      	mov	r4, r0
        tail = (tail + 1) % CIRC_BUF_SIZE;
 8022fce:	4f18      	ldr	r7, [pc, #96]	; (8023030 <EP3_OUT_Callback+0x80>)
 8022fd0:	783b      	ldrb	r3, [r7, #0]
 8022fd2:	3301      	adds	r3, #1
 8022fd4:	4a17      	ldr	r2, [pc, #92]	; (8023034 <EP3_OUT_Callback+0x84>)
 8022fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8022fda:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 8022fde:	eb01 1222 	add.w	r2, r1, r2, asr #4
 8022fe2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8022fe6:	b2db      	uxtb	r3, r3
 8022fe8:	703b      	strb	r3, [r7, #0]
        memcpy(circ_buf[tail].pbuf, Buf, Receive_length);
 8022fea:	7838      	ldrb	r0, [r7, #0]
 8022fec:	4e12      	ldr	r6, [pc, #72]	; (8023038 <EP3_OUT_Callback+0x88>)
 8022fee:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022ff2:	4622      	mov	r2, r4
 8022ff4:	4629      	mov	r1, r5
 8022ff6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8022ffa:	f008 fd5b 	bl	802bab4 <memcpy>
        circ_buf[tail].len = Receive_length;
 8022ffe:	783b      	ldrb	r3, [r7, #0]
 8023000:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023004:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8023008:	6434      	str	r4, [r6, #64]	; 0x40
        size++;
 802300a:	4a08      	ldr	r2, [pc, #32]	; (802302c <EP3_OUT_Callback+0x7c>)
 802300c:	7813      	ldrb	r3, [r2, #0]
 802300e:	3301      	adds	r3, #1
 8023010:	b2db      	uxtb	r3, r3
 8023012:	7013      	strb	r3, [r2, #0]
  if (size < CIRC_BUF_SIZE)
 8023014:	7813      	ldrb	r3, [r2, #0]
 8023016:	b2db      	uxtb	r3, r3
 8023018:	2b21      	cmp	r3, #33	; 0x21
 802301a:	d8d6      	bhi.n	8022fca <EP3_OUT_Callback+0x1a>
	  USBD_CtlReceiveStatus(&hUsbDeviceFS);
 802301c:	4801      	ldr	r0, [pc, #4]	; (8023024 <EP3_OUT_Callback+0x74>)
 802301e:	f008 f924 	bl	802b26a <USBD_CtlReceiveStatus>
}
 8023022:	e7d2      	b.n	8022fca <EP3_OUT_Callback+0x1a>
 8023024:	20005804 	.word	0x20005804
 8023028:	200008dc 	.word	0x200008dc
 802302c:	200011e9 	.word	0x200011e9
 8023030:	20000010 	.word	0x20000010
 8023034:	78787879 	.word	0x78787879
 8023038:	200008e0 	.word	0x200008e0

0802303c <CDC_Send_DATA>:
* Return         : None.
*******************************************************************************/
uint32_t CDC_Send_DATA(uint8_t *ptrBuffer, uint8_t Send_length)
{
  /*if max buffer is Not reached*/
  if(Send_length <= CDC_DATA_FS_MAX_PACKET_SIZE)
 802303c:	2940      	cmp	r1, #64	; 0x40
 802303e:	d901      	bls.n	8023044 <CDC_Send_DATA+0x8>
	CDC_Transmit_FS((unsigned char*)ptrBuffer, Send_length);
	DEBUG_PRINT("CDC_Send_DATA: %ld\r\n", (unsigned char*)ptrBuffer);
  }
  else
  {
    return 0;
 8023040:	2000      	movs	r0, #0
  }
  return 1;
}
 8023042:	4770      	bx	lr
{
 8023044:	b510      	push	{r4, lr}
 8023046:	4604      	mov	r4, r0
	packet_sent = 0;
 8023048:	4b05      	ldr	r3, [pc, #20]	; (8023060 <CDC_Send_DATA+0x24>)
 802304a:	2200      	movs	r2, #0
 802304c:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)ptrBuffer, Send_length);
 802304e:	f008 f96f 	bl	802b330 <CDC_Transmit_FS>
	DEBUG_PRINT("CDC_Send_DATA: %ld\r\n", (unsigned char*)ptrBuffer);
 8023052:	4621      	mov	r1, r4
 8023054:	4803      	ldr	r0, [pc, #12]	; (8023064 <CDC_Send_DATA+0x28>)
 8023056:	f008 fc0d 	bl	802b874 <printf>
  return 1;
 802305a:	2001      	movs	r0, #1
}
 802305c:	bd10      	pop	{r4, pc}
 802305e:	bf00      	nop
 8023060:	20000014 	.word	0x20000014
 8023064:	080302a0 	.word	0x080302a0

08023068 <CDC_Receive_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Receive_DATA(void)
{
 8023068:	b508      	push	{r3, lr}
  USBD_CtlReceiveStatus(&hUsbDeviceFS);
 802306a:	4802      	ldr	r0, [pc, #8]	; (8023074 <CDC_Receive_DATA+0xc>)
 802306c:	f008 f8fd 	bl	802b26a <USBD_CtlReceiveStatus>
  return 1 ;
}
 8023070:	2001      	movs	r0, #1
 8023072:	bd08      	pop	{r3, pc}
 8023074:	20005804 	.word	0x20005804

08023078 <CDC_IsPacketSent>:
* Output         : None.
* Return         : 1/0.
*******************************************************************************/
int CDC_IsPacketSent(void)
{
  return packet_sent;
 8023078:	4b01      	ldr	r3, [pc, #4]	; (8023080 <CDC_IsPacketSent+0x8>)
 802307a:	6818      	ldr	r0, [r3, #0]
}
 802307c:	4770      	bx	lr
 802307e:	bf00      	nop
 8023080:	20000014 	.word	0x20000014

08023084 <is_external_clock_avail>:

#include "clock.h"
#include <stm32f1xx.h>

bool is_external_clock_avail() {
	return (RCC->CR & RCC_CR_HSERDY_Msk) != RESET;
 8023084:	4b02      	ldr	r3, [pc, #8]	; (8023090 <is_external_clock_avail+0xc>)
 8023086:	6818      	ldr	r0, [r3, #0]
}
 8023088:	f3c0 4040 	ubfx	r0, r0, #17, #1
 802308c:	4770      	bx	lr
 802308e:	bf00      	nop
 8023090:	40021000 	.word	0x40021000

08023094 <flash_page_erase>:

#include <stm32f1xx_hal.h>
#include <stm32f1xx_hal_flash_ex.h>
// 擦除指定页的Flash存储器
int flash_page_erase(uint32_t page_addr)
{
 8023094:	b510      	push	{r4, lr}
 8023096:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8023098:	b672      	cpsid	i

    HAL_FLASH_Unlock();
    status = HAL_FLASHEx_Erase(&Erase_INIT, &PageError);
    HAL_FLASH_Lock();*/
    __disable_irq(); // 关闭中断
    HAL_FLASH_Unlock(); // 解锁Flash存储器
 802309a:	f003 fac1 	bl	8026620 <HAL_FLASH_Unlock>

    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR |
 802309e:	4b08      	ldr	r3, [pc, #32]	; (80230c0 <flash_page_erase+0x2c>)
 80230a0:	2235      	movs	r2, #53	; 0x35
 80230a2:	60da      	str	r2, [r3, #12]
        FLASH_FLAG_WRPERR); // 清除Flash标志位

    status = HAL_FLASHEx_OBGetUserData(page_addr); // 擦除指定页
 80230a4:	4620      	mov	r0, r4
 80230a6:	f003 fb63 	bl	8026770 <HAL_FLASHEx_OBGetUserData>
 80230aa:	b2c4      	uxtb	r4, r0

    HAL_FLASH_Lock(); // 锁定Flash存储器
 80230ac:	f003 fad2 	bl	8026654 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80230b0:	b662      	cpsie	i
    __enable_irq(); // 使能中断

    return status != HAL_OK ? -1 : 0;
 80230b2:	b90c      	cbnz	r4, 80230b8 <flash_page_erase+0x24>
 80230b4:	2000      	movs	r0, #0
}
 80230b6:	bd10      	pop	{r4, pc}
    return status != HAL_OK ? -1 : 0;
 80230b8:	f04f 30ff 	mov.w	r0, #4294967295
 80230bc:	e7fb      	b.n	80230b6 <flash_page_erase+0x22>
 80230be:	bf00      	nop
 80230c0:	40022000 	.word	0x40022000

080230c4 <flash_write>:

// 向Flash存储器写入数据
int flash_write(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 80230c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80230c8:	4605      	mov	r5, r0
 80230ca:	460e      	mov	r6, r1
 80230cc:	4690      	mov	r8, r2
  __ASM volatile ("cpsid i" : : : "memory");
 80230ce:	b672      	cpsid	i
    uint32_t word, count, i;
    int ret = -1;

    __disable_irq(); // 关闭中断
    HAL_FLASH_Unlock(); // 解锁Flash存储器
 80230d0:	f003 faa6 	bl	8026620 <HAL_FLASH_Unlock>

    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR |
 80230d4:	4b0f      	ldr	r3, [pc, #60]	; (8023114 <flash_write+0x50>)
 80230d6:	2235      	movs	r2, #53	; 0x35
 80230d8:	60da      	str	r2, [r3, #12]
        FLASH_FLAG_WRPERR); // 清除Flash标志位

    count = data_len / 4; // 计算需要写入的32位字数
 80230da:	ea4f 0798 	mov.w	r7, r8, lsr #2
    if (data_len % 4)
 80230de:	f018 0f03 	tst.w	r8, #3
 80230e2:	d000      	beq.n	80230e6 <flash_write+0x22>
        count++;
 80230e4:	3701      	adds	r7, #1
    for (i = 0 ; i < count ; i++)
 80230e6:	2400      	movs	r4, #0
 80230e8:	e001      	b.n	80230ee <flash_write+0x2a>
    {
        word = *((uint32_t *)data + i); // 从数据缓冲区中读取32位字
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,addr, word) != HAL_OK) // 写入Flash存储器
            goto Exit;

        addr += 4; // 更新地址，指向下一个32位字
 80230ea:	3504      	adds	r5, #4
    for (i = 0 ; i < count ; i++)
 80230ec:	3401      	adds	r4, #1
 80230ee:	42a7      	cmp	r7, r4
 80230f0:	d90a      	bls.n	8023108 <flash_write+0x44>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,addr, word) != HAL_OK) // 写入Flash存储器
 80230f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80230f6:	2300      	movs	r3, #0
 80230f8:	4629      	mov	r1, r5
 80230fa:	2002      	movs	r0, #2
 80230fc:	f003 fae8 	bl	80266d0 <HAL_FLASH_Program>
 8023100:	2800      	cmp	r0, #0
 8023102:	d0f2      	beq.n	80230ea <flash_write+0x26>
    int ret = -1;
 8023104:	f04f 38ff 	mov.w	r8, #4294967295

    }

    ret = data_len;
Exit:
    HAL_FLASH_Lock(); // 锁定Flash存储器
 8023108:	f003 faa4 	bl	8026654 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 802310c:	b662      	cpsie	i
    __enable_irq(); // 使能中断

    return ret;
}
 802310e:	4640      	mov	r0, r8
 8023110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023114:	40022000 	.word	0x40022000

08023118 <flash_read>:

// 从Flash存储器读取数据
int flash_read(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 8023118:	4684      	mov	ip, r0
    uint32_t i;

    for(i = 0; i < data_len; i++)
 802311a:	2000      	movs	r0, #0
 802311c:	e003      	b.n	8023126 <flash_read+0xe>
        data[i] = *(uint8_t *) (addr + i); // 从Flash存储器中读取字节数据
 802311e:	f810 300c 	ldrb.w	r3, [r0, ip]
 8023122:	540b      	strb	r3, [r1, r0]
    for(i = 0; i < data_len; i++)
 8023124:	3001      	adds	r0, #1
 8023126:	4290      	cmp	r0, r2
 8023128:	d3f9      	bcc.n	802311e <flash_read+0x6>

    return i;
}
 802312a:	4770      	bx	lr

0802312c <HAL_FSMC_MspInit>:
  /* USER CODE END FSMC_Init 2 */
}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 802312c:	b530      	push	{r4, r5, lr}
 802312e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023130:	2300      	movs	r3, #0
 8023132:	9302      	str	r3, [sp, #8]
 8023134:	9303      	str	r3, [sp, #12]
 8023136:	9304      	str	r3, [sp, #16]
 8023138:	9305      	str	r3, [sp, #20]
  if (FSMC_Initialized) {
 802313a:	4b1c      	ldr	r3, [pc, #112]	; (80231ac <HAL_FSMC_MspInit+0x80>)
 802313c:	681b      	ldr	r3, [r3, #0]
 802313e:	b10b      	cbz	r3, 8023144 <HAL_FSMC_MspInit+0x18>
  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8023140:	b007      	add	sp, #28
 8023142:	bd30      	pop	{r4, r5, pc}
  FSMC_Initialized = 1;
 8023144:	4b19      	ldr	r3, [pc, #100]	; (80231ac <HAL_FSMC_MspInit+0x80>)
 8023146:	2201      	movs	r2, #1
 8023148:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 802314a:	4b19      	ldr	r3, [pc, #100]	; (80231b0 <HAL_FSMC_MspInit+0x84>)
 802314c:	695a      	ldr	r2, [r3, #20]
 802314e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023152:	615a      	str	r2, [r3, #20]
 8023154:	695b      	ldr	r3, [r3, #20]
 8023156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802315a:	9301      	str	r3, [sp, #4]
 802315c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 802315e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8023162:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023164:	2502      	movs	r5, #2
 8023166:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8023168:	2403      	movs	r4, #3
 802316a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802316c:	a902      	add	r1, sp, #8
 802316e:	4811      	ldr	r0, [pc, #68]	; (80231b4 <HAL_FSMC_MspInit+0x88>)
 8023170:	f003 fb22 	bl	80267b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8023174:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8023178:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802317a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 802317c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802317e:	4d0e      	ldr	r5, [pc, #56]	; (80231b8 <HAL_FSMC_MspInit+0x8c>)
 8023180:	a902      	add	r1, sp, #8
 8023182:	4628      	mov	r0, r5
 8023184:	f003 fb18 	bl	80267b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8023188:	2340      	movs	r3, #64	; 0x40
 802318a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802318c:	2400      	movs	r4, #0
 802318e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023190:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023192:	a902      	add	r1, sp, #8
 8023194:	4628      	mov	r0, r5
 8023196:	f003 fb0f 	bl	80267b8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 802319a:	4622      	mov	r2, r4
 802319c:	4621      	mov	r1, r4
 802319e:	2030      	movs	r0, #48	; 0x30
 80231a0:	f003 f806 	bl	80261b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 80231a4:	2030      	movs	r0, #48	; 0x30
 80231a6:	f003 f83b 	bl	8026220 <HAL_NVIC_EnableIRQ>
 80231aa:	e7c9      	b.n	8023140 <HAL_FSMC_MspInit+0x14>
 80231ac:	200011ec 	.word	0x200011ec
 80231b0:	40021000 	.word	0x40021000
 80231b4:	40011800 	.word	0x40011800
 80231b8:	40011400 	.word	0x40011400

080231bc <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 80231bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 80231be:	f7ff ffb5 	bl	802312c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80231c2:	bd08      	pop	{r3, pc}

080231c4 <nand_reset>:
    DEBUG_PRINT("Disable ECC value: %d\r\n", fsmc_conf.disable_ecc_value);
}

static void nand_reset()
{
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.reset_cmd;  // 发送复位命令给NAND Flash
 80231c4:	4b02      	ldr	r3, [pc, #8]	; (80231d0 <nand_reset+0xc>)
 80231c6:	7b1a      	ldrb	r2, [r3, #12]
 80231c8:	4b02      	ldr	r3, [pc, #8]	; (80231d4 <nand_reset+0x10>)
 80231ca:	701a      	strb	r2, [r3, #0]
}
 80231cc:	4770      	bx	lr
 80231ce:	bf00      	nop
 80231d0:	20001238 	.word	0x20001238
 80231d4:	70010000 	.word	0x70010000

080231d8 <nand_read_status>:

static uint32_t nand_read_status()
{
    uint32_t data, status;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.status_cmd;  // 发送状态命令给NAND Flash
 80231d8:	4b09      	ldr	r3, [pc, #36]	; (8023200 <nand_read_status+0x28>)
 80231da:	7c5a      	ldrb	r2, [r3, #17]
 80231dc:	4b09      	ldr	r3, [pc, #36]	; (8023204 <nand_read_status+0x2c>)
 80231de:	701a      	strb	r2, [r3, #0]
    data = *(__IO uint8_t *)(Bank_NAND_ADDR);
 80231e0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80231e4:	781b      	ldrb	r3, [r3, #0]
 80231e6:	b2da      	uxtb	r2, r3

    if ((data & NAND_ERROR) == NAND_ERROR)
 80231e8:	f013 0f01 	tst.w	r3, #1
 80231ec:	d104      	bne.n	80231f8 <nand_read_status+0x20>
        status = FLASH_STATUS_ERROR;
    else if ((data & NAND_READY) == NAND_READY)
 80231ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80231f2:	d003      	beq.n	80231fc <nand_read_status+0x24>
        status = FLASH_STATUS_READY;
 80231f4:	2000      	movs	r0, #0
 80231f6:	4770      	bx	lr
        status = FLASH_STATUS_ERROR;
 80231f8:	2002      	movs	r0, #2
 80231fa:	4770      	bx	lr
    else
        status = FLASH_STATUS_BUSY;
 80231fc:	2001      	movs	r0, #1

    return status;  // 返回NAND Flash的状态
}
 80231fe:	4770      	bx	lr
 8023200:	20001238 	.word	0x20001238
 8023204:	70010000 	.word	0x70010000

08023208 <nand_get_status>:

static uint32_t nand_get_status()
{
 8023208:	b510      	push	{r4, lr}
    uint32_t status, timeout = 0x1000000;

    status = nand_read_status();
 802320a:	f7ff ffe5 	bl	80231d8 <nand_read_status>
    uint32_t status, timeout = 0x1000000;
 802320e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000

    /* 等待NAND操作完成或超时发生 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8023212:	2801      	cmp	r0, #1
 8023214:	d104      	bne.n	8023220 <nand_get_status+0x18>
 8023216:	b11c      	cbz	r4, 8023220 <nand_get_status+0x18>
    {
        status = nand_read_status();
 8023218:	f7ff ffde 	bl	80231d8 <nand_read_status>
        timeout --;
 802321c:	3c01      	subs	r4, #1
 802321e:	e7f8      	b.n	8023212 <nand_get_status+0xa>
    }

    if (!timeout)
 8023220:	b104      	cbz	r4, 8023224 <nand_get_status+0x1c>
        status = FLASH_STATUS_TIMEOUT;

    return status;  // 返回NAND Flash的最终状态
}
 8023222:	bd10      	pop	{r4, pc}
        status = FLASH_STATUS_TIMEOUT;
 8023224:	2003      	movs	r0, #3
    return status;  // 返回NAND Flash的最终状态
 8023226:	e7fc      	b.n	8023222 <nand_get_status+0x1a>

08023228 <nand_read_id>:
// 从NAND Flash读取ID
static void nand_read_id(chip_id_t *nand_id)
{
    uint32_t data = 0;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_id_cmd;  // 发送读取ID的命令给NAND Flash
 8023228:	4b0c      	ldr	r3, [pc, #48]	; (802325c <nand_read_id+0x34>)
 802322a:	7ada      	ldrb	r2, [r3, #11]
 802322c:	4b0c      	ldr	r3, [pc, #48]	; (8023260 <nand_read_id+0x38>)
 802322e:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023230:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8023234:	2200      	movs	r2, #0
 8023236:	701a      	strb	r2, [r3, #0]

    /* 从NAND Flash读取ID的序列 */
    data = *(__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA);
 8023238:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 802323c:	6813      	ldr	r3, [r2, #0]
    nand_id->maker_id   = ADDR_1st_CYCLE(data);  // 读取制造商ID
 802323e:	7003      	strb	r3, [r0, #0]
    nand_id->device_id  = ADDR_2nd_CYCLE(data);  // 读取设备ID
 8023240:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8023244:	7041      	strb	r1, [r0, #1]
    nand_id->third_id   = ADDR_3rd_CYCLE(data);  // 读取第三个ID
 8023246:	f3c3 4107 	ubfx	r1, r3, #16, #8
 802324a:	7081      	strb	r1, [r0, #2]
    nand_id->fourth_id  = ADDR_4th_CYCLE(data);  // 读取第四个ID
 802324c:	0e1b      	lsrs	r3, r3, #24
 802324e:	70c3      	strb	r3, [r0, #3]

    data = *((__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA) + 1);
 8023250:	6853      	ldr	r3, [r2, #4]
    nand_id->fifth_id   = ADDR_1st_CYCLE(data);  // 读取第五个ID
 8023252:	7103      	strb	r3, [r0, #4]
    nand_id->sixth_id   = ADDR_2nd_CYCLE(data);  // 读取第六个ID
 8023254:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023258:	7143      	strb	r3, [r0, #5]
}
 802325a:	4770      	bx	lr
 802325c:	20001238 	.word	0x20001238
 8023260:	70010000 	.word	0x70010000

08023264 <nand_write_page_async>:

// 异步方式写入NAND Flash的页数据
static void nand_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8023264:	b410      	push	{r4}
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write1_cmd;  // 发送写入命令给NAND Flash
 8023266:	4b2f      	ldr	r3, [pc, #188]	; (8023324 <nand_write_page_async+0xc0>)
 8023268:	f893 c00d 	ldrb.w	ip, [r3, #13]
 802326c:	4c2e      	ldr	r4, [pc, #184]	; (8023328 <nand_write_page_async+0xc4>)
 802326e:	f884 c000 	strb.w	ip, [r4]

    switch (fsmc_conf.col_cycles)
 8023272:	79db      	ldrb	r3, [r3, #7]
 8023274:	3b01      	subs	r3, #1
 8023276:	2b03      	cmp	r3, #3
 8023278:	d806      	bhi.n	8023288 <nand_write_page_async+0x24>
 802327a:	e8df f003 	tbb	[pc, r3]
 802327e:	0e02      	.short	0x0e02
 8023280:	1913      	.short	0x1913
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023282:	4b2a      	ldr	r3, [pc, #168]	; (802332c <nand_write_page_async+0xc8>)
 8023284:	2400      	movs	r4, #0
 8023286:	701c      	strb	r4, [r3, #0]
        break;
    default:
        break;
    }

    switch (fsmc_conf.row_cycles)
 8023288:	4b26      	ldr	r3, [pc, #152]	; (8023324 <nand_write_page_async+0xc0>)
 802328a:	799b      	ldrb	r3, [r3, #6]
 802328c:	3b01      	subs	r3, #1
 802328e:	2b03      	cmp	r3, #3
 8023290:	d818      	bhi.n	80232c4 <nand_write_page_async+0x60>
 8023292:	e8df f003 	tbb	[pc, r3]
 8023296:	1914      	.short	0x1914
 8023298:	2a20      	.short	0x2a20
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 802329a:	4b24      	ldr	r3, [pc, #144]	; (802332c <nand_write_page_async+0xc8>)
 802329c:	2400      	movs	r4, #0
 802329e:	701c      	strb	r4, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 80232a0:	701c      	strb	r4, [r3, #0]
        break;
 80232a2:	e7f1      	b.n	8023288 <nand_write_page_async+0x24>
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 80232a4:	4b21      	ldr	r3, [pc, #132]	; (802332c <nand_write_page_async+0xc8>)
 80232a6:	2400      	movs	r4, #0
 80232a8:	701c      	strb	r4, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 80232aa:	701c      	strb	r4, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 80232ac:	701c      	strb	r4, [r3, #0]
        break;
 80232ae:	e7eb      	b.n	8023288 <nand_write_page_async+0x24>
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 80232b0:	4b1e      	ldr	r3, [pc, #120]	; (802332c <nand_write_page_async+0xc8>)
 80232b2:	2400      	movs	r4, #0
 80232b4:	701c      	strb	r4, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 80232b6:	701c      	strb	r4, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 80232b8:	701c      	strb	r4, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 80232ba:	701c      	strb	r4, [r3, #0]
        break;
 80232bc:	e7e4      	b.n	8023288 <nand_write_page_async+0x24>
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80232be:	b2c9      	uxtb	r1, r1
 80232c0:	4b1a      	ldr	r3, [pc, #104]	; (802332c <nand_write_page_async+0xc8>)
 80232c2:	7019      	strb	r1, [r3, #0]
{
 80232c4:	2300      	movs	r3, #0
 80232c6:	e023      	b.n	8023310 <nand_write_page_async+0xac>
        break;
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80232c8:	b2cc      	uxtb	r4, r1
 80232ca:	4b18      	ldr	r3, [pc, #96]	; (802332c <nand_write_page_async+0xc8>)
 80232cc:	701c      	strb	r4, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80232ce:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80232d2:	7019      	strb	r1, [r3, #0]
        break;
 80232d4:	e7f6      	b.n	80232c4 <nand_write_page_async+0x60>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80232d6:	b2cc      	uxtb	r4, r1
 80232d8:	4b14      	ldr	r3, [pc, #80]	; (802332c <nand_write_page_async+0xc8>)
 80232da:	701c      	strb	r4, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80232dc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80232e0:	701c      	strb	r4, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 80232e2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80232e6:	7019      	strb	r1, [r3, #0]
        break;
 80232e8:	e7ec      	b.n	80232c4 <nand_write_page_async+0x60>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80232ea:	b2cc      	uxtb	r4, r1
 80232ec:	4b0f      	ldr	r3, [pc, #60]	; (802332c <nand_write_page_async+0xc8>)
 80232ee:	701c      	strb	r4, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80232f0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80232f4:	701c      	strb	r4, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 80232f6:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80232fa:	701c      	strb	r4, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 80232fc:	0e09      	lsrs	r1, r1, #24
 80232fe:	7019      	strb	r1, [r3, #0]
        break;
 8023300:	e7e0      	b.n	80232c4 <nand_write_page_async+0x60>
    default:
        break;
    }

    for(i = 0; i < page_size; i++)
        *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = buf[i];  // 逐字节写入数据到NAND Flash的数据区
 8023302:	f810 c003 	ldrb.w	ip, [r0, r3]
 8023306:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 802330a:	f881 c000 	strb.w	ip, [r1]
    for(i = 0; i < page_size; i++)
 802330e:	3301      	adds	r3, #1
 8023310:	4293      	cmp	r3, r2
 8023312:	d3f6      	bcc.n	8023302 <nand_write_page_async+0x9e>

    if (fsmc_conf.write2_cmd != UNDEFINED_CMD)
 8023314:	4b03      	ldr	r3, [pc, #12]	; (8023324 <nand_write_page_async+0xc0>)
 8023316:	7b9b      	ldrb	r3, [r3, #14]
 8023318:	2bff      	cmp	r3, #255	; 0xff
 802331a:	d001      	beq.n	8023320 <nand_write_page_async+0xbc>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write2_cmd;  // 发送写入命令2给NAND Flash
 802331c:	4a02      	ldr	r2, [pc, #8]	; (8023328 <nand_write_page_async+0xc4>)
 802331e:	7013      	strb	r3, [r2, #0]
}
 8023320:	bc10      	pop	{r4}
 8023322:	4770      	bx	lr
 8023324:	20001238 	.word	0x20001238
 8023328:	70010000 	.word	0x70010000
 802332c:	70020000 	.word	0x70020000

08023330 <nand_read_data>:

// 从NAND Flash读取数据
static uint32_t nand_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 8023330:	b538      	push	{r3, r4, r5, lr}
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read1_cmd;  // 发送读取命令给NAND Flash
 8023332:	4c36      	ldr	r4, [pc, #216]	; (802340c <nand_read_data+0xdc>)
 8023334:	f894 c008 	ldrb.w	ip, [r4, #8]
 8023338:	4d35      	ldr	r5, [pc, #212]	; (8023410 <nand_read_data+0xe0>)
 802333a:	f885 c000 	strb.w	ip, [r5]

    switch (fsmc_conf.col_cycles)
 802333e:	f894 c007 	ldrb.w	ip, [r4, #7]
 8023342:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023346:	f1bc 0f03 	cmp.w	ip, #3
 802334a:	d806      	bhi.n	802335a <nand_read_data+0x2a>
 802334c:	e8df f00c 	tbb	[pc, ip]
 8023350:	1f150e02 	.word	0x1f150e02
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8023354:	b2d2      	uxtb	r2, r2
 8023356:	4c2f      	ldr	r4, [pc, #188]	; (8023414 <nand_read_data+0xe4>)
 8023358:	7022      	strb	r2, [r4, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page_offset);
    default:
        break;
    }

    switch (fsmc_conf.row_cycles)
 802335a:	4a2c      	ldr	r2, [pc, #176]	; (802340c <nand_read_data+0xdc>)
 802335c:	7992      	ldrb	r2, [r2, #6]
 802335e:	3a01      	subs	r2, #1
 8023360:	2a03      	cmp	r2, #3
 8023362:	d823      	bhi.n	80233ac <nand_read_data+0x7c>
 8023364:	e8df f002 	tbb	[pc, r2]
 8023368:	3b312a1f 	.word	0x3b312a1f
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 802336c:	b2d5      	uxtb	r5, r2
 802336e:	4c29      	ldr	r4, [pc, #164]	; (8023414 <nand_read_data+0xe4>)
 8023370:	7025      	strb	r5, [r4, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8023372:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023376:	7022      	strb	r2, [r4, #0]
        break;
 8023378:	e7ef      	b.n	802335a <nand_read_data+0x2a>
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 802337a:	b2d5      	uxtb	r5, r2
 802337c:	4c25      	ldr	r4, [pc, #148]	; (8023414 <nand_read_data+0xe4>)
 802337e:	7025      	strb	r5, [r4, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8023380:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8023384:	7025      	strb	r5, [r4, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 8023386:	f3c2 4207 	ubfx	r2, r2, #16, #8
 802338a:	7022      	strb	r2, [r4, #0]
        break;
 802338c:	e7e5      	b.n	802335a <nand_read_data+0x2a>
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 802338e:	b2d5      	uxtb	r5, r2
 8023390:	4c20      	ldr	r4, [pc, #128]	; (8023414 <nand_read_data+0xe4>)
 8023392:	7025      	strb	r5, [r4, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8023394:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8023398:	7025      	strb	r5, [r4, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 802339a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 802339e:	7025      	strb	r5, [r4, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page_offset);
 80233a0:	0e12      	lsrs	r2, r2, #24
 80233a2:	7022      	strb	r2, [r4, #0]
 80233a4:	e7d9      	b.n	802335a <nand_read_data+0x2a>
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80233a6:	b2c9      	uxtb	r1, r1
 80233a8:	4a1a      	ldr	r2, [pc, #104]	; (8023414 <nand_read_data+0xe4>)
 80233aa:	7011      	strb	r1, [r2, #0]
        break;
    default:
        break;
    }

    if (fsmc_conf.read2_cmd != UNDEFINED_CMD)
 80233ac:	4a17      	ldr	r2, [pc, #92]	; (802340c <nand_read_data+0xdc>)
 80233ae:	7a52      	ldrb	r2, [r2, #9]
 80233b0:	2aff      	cmp	r2, #255	; 0xff
 80233b2:	d001      	beq.n	80233b8 <nand_read_data+0x88>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read2_cmd;  // 发送读取命令2给NAND Flash
 80233b4:	4916      	ldr	r1, [pc, #88]	; (8023410 <nand_read_data+0xe0>)
 80233b6:	700a      	strb	r2, [r1, #0]
{
 80233b8:	2200      	movs	r2, #0
 80233ba:	e021      	b.n	8023400 <nand_read_data+0xd0>
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80233bc:	b2cc      	uxtb	r4, r1
 80233be:	4a15      	ldr	r2, [pc, #84]	; (8023414 <nand_read_data+0xe4>)
 80233c0:	7014      	strb	r4, [r2, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80233c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80233c6:	7011      	strb	r1, [r2, #0]
        break;
 80233c8:	e7f0      	b.n	80233ac <nand_read_data+0x7c>
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80233ca:	b2cc      	uxtb	r4, r1
 80233cc:	4a11      	ldr	r2, [pc, #68]	; (8023414 <nand_read_data+0xe4>)
 80233ce:	7014      	strb	r4, [r2, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80233d0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80233d4:	7014      	strb	r4, [r2, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 80233d6:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80233da:	7011      	strb	r1, [r2, #0]
        break;
 80233dc:	e7e6      	b.n	80233ac <nand_read_data+0x7c>
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80233de:	b2cc      	uxtb	r4, r1
 80233e0:	4a0c      	ldr	r2, [pc, #48]	; (8023414 <nand_read_data+0xe4>)
 80233e2:	7014      	strb	r4, [r2, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80233e4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80233e8:	7014      	strb	r4, [r2, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 80233ea:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80233ee:	7014      	strb	r4, [r2, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 80233f0:	0e09      	lsrs	r1, r1, #24
 80233f2:	7011      	strb	r1, [r2, #0]
        break;
 80233f4:	e7da      	b.n	80233ac <nand_read_data+0x7c>

    for (i = 0; i < data_size; i++)
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 80233f6:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80233fa:	7809      	ldrb	r1, [r1, #0]
 80233fc:	5481      	strb	r1, [r0, r2]
    for (i = 0; i < data_size; i++)
 80233fe:	3201      	adds	r2, #1
 8023400:	429a      	cmp	r2, r3
 8023402:	d3f8      	bcc.n	80233f6 <nand_read_data+0xc6>

    return nand_get_status();  // 获取NAND Flash的状态
 8023404:	f7ff ff00 	bl	8023208 <nand_get_status>
}
 8023408:	bd38      	pop	{r3, r4, r5, pc}
 802340a:	bf00      	nop
 802340c:	20001238 	.word	0x20001238
 8023410:	70010000 	.word	0x70010000
 8023414:	70020000 	.word	0x70020000

08023418 <nand_read_page>:

// 从NAND Flash读取数据页
static uint32_t nand_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8023418:	b508      	push	{r3, lr}
 802341a:	4613      	mov	r3, r2
    return nand_read_data(buf, page, 0, page_size);
 802341c:	2200      	movs	r2, #0
 802341e:	f7ff ff87 	bl	8023330 <nand_read_data>
}
 8023422:	bd08      	pop	{r3, pc}

08023424 <nand_read_spare_data>:

// 从NAND Flash读取备用数据
static uint32_t nand_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 8023424:	b510      	push	{r4, lr}
    uint32_t i;

    if (fsmc_conf.read_spare_cmd == UNDEFINED_CMD)
 8023426:	4c3a      	ldr	r4, [pc, #232]	; (8023510 <nand_read_spare_data+0xec>)
 8023428:	f894 c00a 	ldrb.w	ip, [r4, #10]
 802342c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023430:	d06c      	beq.n	802350c <nand_read_spare_data+0xe8>
        return FLASH_STATUS_INVALID_CMD;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_spare_cmd;  // 发送读取备用数据命令给NAND Flash
 8023432:	4c38      	ldr	r4, [pc, #224]	; (8023514 <nand_read_spare_data+0xf0>)
 8023434:	f884 c000 	strb.w	ip, [r4]

    switch (fsmc_conf.col_cycles)
 8023438:	4c35      	ldr	r4, [pc, #212]	; (8023510 <nand_read_spare_data+0xec>)
 802343a:	f894 c007 	ldrb.w	ip, [r4, #7]
 802343e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023442:	f1bc 0f03 	cmp.w	ip, #3
 8023446:	d806      	bhi.n	8023456 <nand_read_spare_data+0x32>
 8023448:	e8df f00c 	tbb	[pc, ip]
 802344c:	24170e02 	.word	0x24170e02
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023450:	b2d2      	uxtb	r2, r2
 8023452:	4c31      	ldr	r4, [pc, #196]	; (8023518 <nand_read_spare_data+0xf4>)
 8023454:	7022      	strb	r2, [r4, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(offset);  // 发送列地址的第4个周期
    default:
        break;
    }

    switch (fsmc_conf.row_cycles)
 8023456:	4a2e      	ldr	r2, [pc, #184]	; (8023510 <nand_read_spare_data+0xec>)
 8023458:	7992      	ldrb	r2, [r2, #6]
 802345a:	3a01      	subs	r2, #1
 802345c:	2a03      	cmp	r2, #3
 802345e:	d82c      	bhi.n	80234ba <nand_read_spare_data+0x96>
 8023460:	e8df f002 	tbb	[pc, r2]
 8023464:	3e342d28 	.word	0x3e342d28
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023468:	fa5f fc82 	uxtb.w	ip, r2
 802346c:	4c2a      	ldr	r4, [pc, #168]	; (8023518 <nand_read_spare_data+0xf4>)
 802346e:	f884 c000 	strb.w	ip, [r4]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8023472:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023476:	7022      	strb	r2, [r4, #0]
        break;
 8023478:	e7ed      	b.n	8023456 <nand_read_spare_data+0x32>
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 802347a:	fa5f fc82 	uxtb.w	ip, r2
 802347e:	4c26      	ldr	r4, [pc, #152]	; (8023518 <nand_read_spare_data+0xf4>)
 8023480:	f884 c000 	strb.w	ip, [r4]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8023484:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8023488:	f884 c000 	strb.w	ip, [r4]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 802348c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8023490:	7022      	strb	r2, [r4, #0]
        break;
 8023492:	e7e0      	b.n	8023456 <nand_read_spare_data+0x32>
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023494:	fa5f fc82 	uxtb.w	ip, r2
 8023498:	4c1f      	ldr	r4, [pc, #124]	; (8023518 <nand_read_spare_data+0xf4>)
 802349a:	f884 c000 	strb.w	ip, [r4]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 802349e:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 80234a2:	f884 c000 	strb.w	ip, [r4]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 80234a6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80234aa:	f884 c000 	strb.w	ip, [r4]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(offset);  // 发送列地址的第4个周期
 80234ae:	0e12      	lsrs	r2, r2, #24
 80234b0:	7022      	strb	r2, [r4, #0]
 80234b2:	e7d0      	b.n	8023456 <nand_read_spare_data+0x32>
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80234b4:	b2c9      	uxtb	r1, r1
 80234b6:	4a18      	ldr	r2, [pc, #96]	; (8023518 <nand_read_spare_data+0xf4>)
 80234b8:	7011      	strb	r1, [r2, #0]
{
 80234ba:	2200      	movs	r2, #0
 80234bc:	e021      	b.n	8023502 <nand_read_spare_data+0xde>
        break;
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80234be:	b2cc      	uxtb	r4, r1
 80234c0:	4a15      	ldr	r2, [pc, #84]	; (8023518 <nand_read_spare_data+0xf4>)
 80234c2:	7014      	strb	r4, [r2, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80234c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80234c8:	7011      	strb	r1, [r2, #0]
        break;
 80234ca:	e7f6      	b.n	80234ba <nand_read_spare_data+0x96>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80234cc:	b2cc      	uxtb	r4, r1
 80234ce:	4a12      	ldr	r2, [pc, #72]	; (8023518 <nand_read_spare_data+0xf4>)
 80234d0:	7014      	strb	r4, [r2, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80234d2:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80234d6:	7014      	strb	r4, [r2, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80234d8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80234dc:	7011      	strb	r1, [r2, #0]
        break;
 80234de:	e7ec      	b.n	80234ba <nand_read_spare_data+0x96>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80234e0:	b2cc      	uxtb	r4, r1
 80234e2:	4a0d      	ldr	r2, [pc, #52]	; (8023518 <nand_read_spare_data+0xf4>)
 80234e4:	7014      	strb	r4, [r2, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80234e6:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80234ea:	7014      	strb	r4, [r2, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80234ec:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80234f0:	7014      	strb	r4, [r2, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 80234f2:	0e09      	lsrs	r1, r1, #24
 80234f4:	7011      	strb	r1, [r2, #0]
        break;
 80234f6:	e7e0      	b.n	80234ba <nand_read_spare_data+0x96>
    default:
        break;
    }

    for (i = 0; i < data_size; i++)
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 80234f8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80234fc:	7809      	ldrb	r1, [r1, #0]
 80234fe:	5481      	strb	r1, [r0, r2]
    for (i = 0; i < data_size; i++)
 8023500:	3201      	adds	r2, #1
 8023502:	429a      	cmp	r2, r3
 8023504:	d3f8      	bcc.n	80234f8 <nand_read_spare_data+0xd4>

    return nand_get_status();  // 获取NAND Flash的状态
 8023506:	f7ff fe7f 	bl	8023208 <nand_get_status>
}
 802350a:	bd10      	pop	{r4, pc}
        return FLASH_STATUS_INVALID_CMD;
 802350c:	2004      	movs	r0, #4
 802350e:	e7fc      	b.n	802350a <nand_read_spare_data+0xe6>
 8023510:	20001238 	.word	0x20001238
 8023514:	70010000 	.word	0x70010000
 8023518:	70020000 	.word	0x70020000

0802351c <nand_erase_block>:

// 擦除NAND Flash的块
static uint32_t nand_erase_block(uint32_t page)
{
 802351c:	b508      	push	{r3, lr}
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase1_cmd;  // 发送擦除命令1给NAND Flash
 802351e:	4b1a      	ldr	r3, [pc, #104]	; (8023588 <nand_erase_block+0x6c>)
 8023520:	7bd9      	ldrb	r1, [r3, #15]
 8023522:	4a1a      	ldr	r2, [pc, #104]	; (802358c <nand_erase_block+0x70>)
 8023524:	7011      	strb	r1, [r2, #0]

    switch (fsmc_conf.row_cycles)
 8023526:	799b      	ldrb	r3, [r3, #6]
 8023528:	3b01      	subs	r3, #1
 802352a:	2b03      	cmp	r3, #3
 802352c:	d806      	bhi.n	802353c <nand_erase_block+0x20>
 802352e:	e8df f003 	tbb	[pc, r3]
 8023532:	0e02      	.short	0x0e02
 8023534:	1f15      	.short	0x1f15
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023536:	b2c0      	uxtb	r0, r0
 8023538:	4b15      	ldr	r3, [pc, #84]	; (8023590 <nand_erase_block+0x74>)
 802353a:	7018      	strb	r0, [r3, #0]
        break;
    default:
        break;
    }

    if (fsmc_conf.erase2_cmd != UNDEFINED_CMD)
 802353c:	4b12      	ldr	r3, [pc, #72]	; (8023588 <nand_erase_block+0x6c>)
 802353e:	7c1b      	ldrb	r3, [r3, #16]
 8023540:	2bff      	cmp	r3, #255	; 0xff
 8023542:	d001      	beq.n	8023548 <nand_erase_block+0x2c>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase2_cmd;  // 发送擦除命令2给NAND Flash
 8023544:	4a11      	ldr	r2, [pc, #68]	; (802358c <nand_erase_block+0x70>)
 8023546:	7013      	strb	r3, [r2, #0]

    return nand_get_status();  // 获取NAND Flash的状态
 8023548:	f7ff fe5e 	bl	8023208 <nand_get_status>
}
 802354c:	bd08      	pop	{r3, pc}
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 802354e:	b2c2      	uxtb	r2, r0
 8023550:	4b0f      	ldr	r3, [pc, #60]	; (8023590 <nand_erase_block+0x74>)
 8023552:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023554:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023558:	7018      	strb	r0, [r3, #0]
        break;
 802355a:	e7ef      	b.n	802353c <nand_erase_block+0x20>
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 802355c:	b2c2      	uxtb	r2, r0
 802355e:	4b0c      	ldr	r3, [pc, #48]	; (8023590 <nand_erase_block+0x74>)
 8023560:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023562:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8023566:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023568:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802356c:	7018      	strb	r0, [r3, #0]
        break;
 802356e:	e7e5      	b.n	802353c <nand_erase_block+0x20>
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023570:	b2c2      	uxtb	r2, r0
 8023572:	4b07      	ldr	r3, [pc, #28]	; (8023590 <nand_erase_block+0x74>)
 8023574:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023576:	f3c0 2207 	ubfx	r2, r0, #8, #8
 802357a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 802357c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8023580:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 8023582:	0e00      	lsrs	r0, r0, #24
 8023584:	7018      	strb	r0, [r3, #0]
        break;
 8023586:	e7d9      	b.n	802353c <nand_erase_block+0x20>
 8023588:	20001238 	.word	0x20001238
 802358c:	70010000 	.word	0x70010000
 8023590:	70020000 	.word	0x70020000

08023594 <nand_is_bb_supported>:

// 检查是否支持坏块
static inline bool nand_is_bb_supported()
{
    return true;
}
 8023594:	2001      	movs	r0, #1
 8023596:	4770      	bx	lr

08023598 <nand_enable_hw_ecc>:
// 启用或禁用硬件ECC
static uint32_t nand_enable_hw_ecc(bool enable)
{
    uint8_t enable_ecc;

    if (fsmc_conf.set_features_cmd == UNDEFINED_CMD)
 8023598:	4b0c      	ldr	r3, [pc, #48]	; (80235cc <nand_enable_hw_ecc+0x34>)
 802359a:	7c9b      	ldrb	r3, [r3, #18]
 802359c:	2bff      	cmp	r3, #255	; 0xff
 802359e:	d013      	beq.n	80235c8 <nand_enable_hw_ecc+0x30>
        return FLASH_STATUS_INVALID_CMD;

    enable_ecc = enable ? fsmc_conf.enable_ecc_value : fsmc_conf.disable_ecc_value;
 80235a0:	b178      	cbz	r0, 80235c2 <nand_enable_hw_ecc+0x2a>
 80235a2:	4a0a      	ldr	r2, [pc, #40]	; (80235cc <nand_enable_hw_ecc+0x34>)
 80235a4:	7d11      	ldrb	r1, [r2, #20]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.set_features_cmd;  // 发送设置特性命令给NAND Flash
 80235a6:	4a0a      	ldr	r2, [pc, #40]	; (80235d0 <nand_enable_hw_ecc+0x38>)
 80235a8:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = fsmc_conf.enable_ecc_addr;  // 发送使能ECC地址
 80235aa:	4b08      	ldr	r3, [pc, #32]	; (80235cc <nand_enable_hw_ecc+0x34>)
 80235ac:	7cda      	ldrb	r2, [r3, #19]
 80235ae:	4b09      	ldr	r3, [pc, #36]	; (80235d4 <nand_enable_hw_ecc+0x3c>)
 80235b0:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = enable_ecc;  // 发送使能ECC的值
 80235b2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80235b6:	7019      	strb	r1, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 80235b8:	2000      	movs	r0, #0
 80235ba:	7018      	strb	r0, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 80235bc:	7018      	strb	r0, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 80235be:	7018      	strb	r0, [r3, #0]

    return 0;
 80235c0:	4770      	bx	lr
    enable_ecc = enable ? fsmc_conf.enable_ecc_value : fsmc_conf.disable_ecc_value;
 80235c2:	4a02      	ldr	r2, [pc, #8]	; (80235cc <nand_enable_hw_ecc+0x34>)
 80235c4:	7d51      	ldrb	r1, [r2, #21]
 80235c6:	e7ee      	b.n	80235a6 <nand_enable_hw_ecc+0xe>
        return FLASH_STATUS_INVALID_CMD;
 80235c8:	2004      	movs	r0, #4
}
 80235ca:	4770      	bx	lr
 80235cc:	20001238 	.word	0x20001238
 80235d0:	70010000 	.word	0x70010000
 80235d4:	70020000 	.word	0x70020000

080235d8 <nand_uninit>:
{
 80235d8:	b508      	push	{r3, lr}
	  if (FSMC_DeInitialized) {
 80235da:	4b0d      	ldr	r3, [pc, #52]	; (8023610 <nand_uninit+0x38>)
 80235dc:	681b      	ldr	r3, [r3, #0]
 80235de:	b103      	cbz	r3, 80235e2 <nand_uninit+0xa>
}
 80235e0:	bd08      	pop	{r3, pc}
	  FSMC_DeInitialized = 1;
 80235e2:	4b0b      	ldr	r3, [pc, #44]	; (8023610 <nand_uninit+0x38>)
 80235e4:	2201      	movs	r2, #1
 80235e6:	601a      	str	r2, [r3, #0]
	  __HAL_RCC_FSMC_CLK_DISABLE();
 80235e8:	4a0a      	ldr	r2, [pc, #40]	; (8023614 <nand_uninit+0x3c>)
 80235ea:	6953      	ldr	r3, [r2, #20]
 80235ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80235f0:	6153      	str	r3, [r2, #20]
	  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80235f2:	f64f 7180 	movw	r1, #65408	; 0xff80
 80235f6:	4808      	ldr	r0, [pc, #32]	; (8023618 <nand_uninit+0x40>)
 80235f8:	f003 f9fe 	bl	80269f8 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80235fc:	f64d 71f3 	movw	r1, #57331	; 0xdff3
 8023600:	4806      	ldr	r0, [pc, #24]	; (802361c <nand_uninit+0x44>)
 8023602:	f003 f9f9 	bl	80269f8 <HAL_GPIO_DeInit>
	  HAL_NVIC_DisableIRQ(FSMC_IRQn);
 8023606:	2030      	movs	r0, #48	; 0x30
 8023608:	f002 fe18 	bl	802623c <HAL_NVIC_DisableIRQ>
 802360c:	e7e8      	b.n	80235e0 <nand_uninit+0x8>
 802360e:	bf00      	nop
 8023610:	20001230 	.word	0x20001230
 8023614:	40021000 	.word	0x40021000
 8023618:	40011800 	.word	0x40011800
 802361c:	40011400 	.word	0x40011400

08023620 <nand_gpio_init>:
{
 8023620:	b530      	push	{r4, r5, lr}
 8023622:	b087      	sub	sp, #28
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023624:	2300      	movs	r3, #0
 8023626:	9302      	str	r3, [sp, #8]
 8023628:	9303      	str	r3, [sp, #12]
 802362a:	9304      	str	r3, [sp, #16]
 802362c:	9305      	str	r3, [sp, #20]
	  if (FSMC_Initialized) {
 802362e:	4b1c      	ldr	r3, [pc, #112]	; (80236a0 <nand_gpio_init+0x80>)
 8023630:	681b      	ldr	r3, [r3, #0]
 8023632:	b10b      	cbz	r3, 8023638 <nand_gpio_init+0x18>
}
 8023634:	b007      	add	sp, #28
 8023636:	bd30      	pop	{r4, r5, pc}
	  FSMC_Initialized = 1;
 8023638:	4b19      	ldr	r3, [pc, #100]	; (80236a0 <nand_gpio_init+0x80>)
 802363a:	2201      	movs	r2, #1
 802363c:	601a      	str	r2, [r3, #0]
	  __HAL_RCC_FSMC_CLK_ENABLE();
 802363e:	4b19      	ldr	r3, [pc, #100]	; (80236a4 <nand_gpio_init+0x84>)
 8023640:	695a      	ldr	r2, [r3, #20]
 8023642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023646:	615a      	str	r2, [r3, #20]
 8023648:	695b      	ldr	r3, [r3, #20]
 802364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802364e:	9301      	str	r3, [sp, #4]
 8023650:	9b01      	ldr	r3, [sp, #4]
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8023652:	f64f 7380 	movw	r3, #65408	; 0xff80
 8023656:	9302      	str	r3, [sp, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023658:	2502      	movs	r5, #2
 802365a:	9503      	str	r5, [sp, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 802365c:	2403      	movs	r4, #3
 802365e:	9405      	str	r4, [sp, #20]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8023660:	a902      	add	r1, sp, #8
 8023662:	4811      	ldr	r0, [pc, #68]	; (80236a8 <nand_gpio_init+0x88>)
 8023664:	f003 f8a8 	bl	80267b8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8023668:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 802366c:	9302      	str	r3, [sp, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802366e:	9503      	str	r5, [sp, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8023670:	9405      	str	r4, [sp, #20]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023672:	4d0e      	ldr	r5, [pc, #56]	; (80236ac <nand_gpio_init+0x8c>)
 8023674:	a902      	add	r1, sp, #8
 8023676:	4628      	mov	r0, r5
 8023678:	f003 f89e 	bl	80267b8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 802367c:	2340      	movs	r3, #64	; 0x40
 802367e:	9302      	str	r3, [sp, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023680:	2400      	movs	r4, #0
 8023682:	9403      	str	r4, [sp, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023684:	9404      	str	r4, [sp, #16]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023686:	a902      	add	r1, sp, #8
 8023688:	4628      	mov	r0, r5
 802368a:	f003 f895 	bl	80267b8 <HAL_GPIO_Init>
	  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 802368e:	4622      	mov	r2, r4
 8023690:	4621      	mov	r1, r4
 8023692:	2030      	movs	r0, #48	; 0x30
 8023694:	f002 fd8c 	bl	80261b0 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8023698:	2030      	movs	r0, #48	; 0x30
 802369a:	f002 fdc1 	bl	8026220 <HAL_NVIC_EnableIRQ>
 802369e:	e7c9      	b.n	8023634 <nand_gpio_init+0x14>
 80236a0:	20001234 	.word	0x20001234
 80236a4:	40021000 	.word	0x40021000
 80236a8:	40011800 	.word	0x40011800
 80236ac:	40011400 	.word	0x40011400

080236b0 <nand_fsmc_init>:
{
 80236b0:	b510      	push	{r4, lr}
 80236b2:	b088      	sub	sp, #32
    FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80236b4:	2300      	movs	r3, #0
 80236b6:	9304      	str	r3, [sp, #16]
 80236b8:	9305      	str	r3, [sp, #20]
 80236ba:	9306      	str	r3, [sp, #24]
 80236bc:	9307      	str	r3, [sp, #28]
    FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80236be:	9300      	str	r3, [sp, #0]
 80236c0:	9301      	str	r3, [sp, #4]
 80236c2:	9302      	str	r3, [sp, #8]
 80236c4:	9303      	str	r3, [sp, #12]
    hnand1.Instance = FSMC_NAND_DEVICE;
 80236c6:	4816      	ldr	r0, [pc, #88]	; (8023720 <nand_fsmc_init+0x70>)
 80236c8:	4a16      	ldr	r2, [pc, #88]	; (8023724 <nand_fsmc_init+0x74>)
 80236ca:	6002      	str	r2, [r0, #0]
    hnand1.Init.NandBank = FSMC_NAND_BANK2;
 80236cc:	2210      	movs	r2, #16
 80236ce:	6042      	str	r2, [r0, #4]
    hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 80236d0:	2102      	movs	r1, #2
 80236d2:	6081      	str	r1, [r0, #8]
    hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_16;
 80236d4:	60c2      	str	r2, [r0, #12]
    hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 80236d6:	6103      	str	r3, [r0, #16]
    hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80236d8:	6143      	str	r3, [r0, #20]
    hnand1.Init.TCLRSetupTime = fsmc_conf.clr_setup_time;
 80236da:	4b13      	ldr	r3, [pc, #76]	; (8023728 <nand_fsmc_init+0x78>)
 80236dc:	791a      	ldrb	r2, [r3, #4]
 80236de:	6182      	str	r2, [r0, #24]
    hnand1.Init.TARSetupTime = fsmc_conf.ar_setup_time;
 80236e0:	795a      	ldrb	r2, [r3, #5]
 80236e2:	61c2      	str	r2, [r0, #28]
    hnand1.Config.ExtraCommandEnable = ENABLE;
 80236e4:	2201      	movs	r2, #1
 80236e6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    ComSpaceTiming.SetupTime = fsmc_conf.setup_time;  // 设置时序参数
 80236ea:	781c      	ldrb	r4, [r3, #0]
 80236ec:	9404      	str	r4, [sp, #16]
    ComSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 80236ee:	7859      	ldrb	r1, [r3, #1]
 80236f0:	9105      	str	r1, [sp, #20]
    ComSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 80236f2:	789a      	ldrb	r2, [r3, #2]
 80236f4:	9206      	str	r2, [sp, #24]
    ComSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 80236f6:	78db      	ldrb	r3, [r3, #3]
 80236f8:	9307      	str	r3, [sp, #28]
    AttSpaceTiming.SetupTime = fsmc_conf.setup_time;
 80236fa:	9400      	str	r4, [sp, #0]
    AttSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 80236fc:	9101      	str	r1, [sp, #4]
    AttSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 80236fe:	9202      	str	r2, [sp, #8]
    AttSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 8023700:	9303      	str	r3, [sp, #12]
    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8023702:	466a      	mov	r2, sp
 8023704:	a904      	add	r1, sp, #16
 8023706:	f003 fa11 	bl	8026b2c <HAL_NAND_Init>
 802370a:	b930      	cbnz	r0, 802371a <nand_fsmc_init+0x6a>
     __HAL_AFIO_FSMCNADV_DISCONNECTED();
 802370c:	4a07      	ldr	r2, [pc, #28]	; (802372c <nand_fsmc_init+0x7c>)
 802370e:	69d3      	ldr	r3, [r2, #28]
 8023710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8023714:	61d3      	str	r3, [r2, #28]
}
 8023716:	b008      	add	sp, #32
 8023718:	bd10      	pop	{r4, pc}
      Error_Handler( );
 802371a:	f000 f9a1 	bl	8023a60 <Error_Handler>
 802371e:	e7f5      	b.n	802370c <nand_fsmc_init+0x5c>
 8023720:	200011f0 	.word	0x200011f0
 8023724:	a0000060 	.word	0xa0000060
 8023728:	20001238 	.word	0x20001238
 802372c:	40010000 	.word	0x40010000

08023730 <nand_print_fsmc_info>:
{
 8023730:	b510      	push	{r4, lr}
    DEBUG_PRINT("Setup time: %d\r\n", fsmc_conf.setup_time);
 8023732:	4c2d      	ldr	r4, [pc, #180]	; (80237e8 <nand_print_fsmc_info+0xb8>)
 8023734:	7821      	ldrb	r1, [r4, #0]
 8023736:	482d      	ldr	r0, [pc, #180]	; (80237ec <nand_print_fsmc_info+0xbc>)
 8023738:	f008 f89c 	bl	802b874 <printf>
    DEBUG_PRINT("Wait setup time: %d\r\n", fsmc_conf.wait_setup_time);
 802373c:	7861      	ldrb	r1, [r4, #1]
 802373e:	482c      	ldr	r0, [pc, #176]	; (80237f0 <nand_print_fsmc_info+0xc0>)
 8023740:	f008 f898 	bl	802b874 <printf>
    DEBUG_PRINT("Hold setup time: %d\r\n", fsmc_conf.hold_setup_time);
 8023744:	78a1      	ldrb	r1, [r4, #2]
 8023746:	482b      	ldr	r0, [pc, #172]	; (80237f4 <nand_print_fsmc_info+0xc4>)
 8023748:	f008 f894 	bl	802b874 <printf>
    DEBUG_PRINT("HiZ setup time: %d\r\n", fsmc_conf.hi_z_setup_time);
 802374c:	78e1      	ldrb	r1, [r4, #3]
 802374e:	482a      	ldr	r0, [pc, #168]	; (80237f8 <nand_print_fsmc_info+0xc8>)
 8023750:	f008 f890 	bl	802b874 <printf>
    DEBUG_PRINT("CLR setup time: %d\r\n", fsmc_conf.clr_setup_time);
 8023754:	7921      	ldrb	r1, [r4, #4]
 8023756:	4829      	ldr	r0, [pc, #164]	; (80237fc <nand_print_fsmc_info+0xcc>)
 8023758:	f008 f88c 	bl	802b874 <printf>
    DEBUG_PRINT("AR setup time: %d\r\n", fsmc_conf.ar_setup_time);
 802375c:	7961      	ldrb	r1, [r4, #5]
 802375e:	4828      	ldr	r0, [pc, #160]	; (8023800 <nand_print_fsmc_info+0xd0>)
 8023760:	f008 f888 	bl	802b874 <printf>
    DEBUG_PRINT("Row cycles: %d\r\n", fsmc_conf.row_cycles);
 8023764:	79a1      	ldrb	r1, [r4, #6]
 8023766:	4827      	ldr	r0, [pc, #156]	; (8023804 <nand_print_fsmc_info+0xd4>)
 8023768:	f008 f884 	bl	802b874 <printf>
    DEBUG_PRINT("Col. cycles: %d\r\n", fsmc_conf.col_cycles);
 802376c:	79e1      	ldrb	r1, [r4, #7]
 802376e:	4826      	ldr	r0, [pc, #152]	; (8023808 <nand_print_fsmc_info+0xd8>)
 8023770:	f008 f880 	bl	802b874 <printf>
    DEBUG_PRINT("Read command 1: %d\r\n", fsmc_conf.read1_cmd);
 8023774:	7a21      	ldrb	r1, [r4, #8]
 8023776:	4825      	ldr	r0, [pc, #148]	; (802380c <nand_print_fsmc_info+0xdc>)
 8023778:	f008 f87c 	bl	802b874 <printf>
    DEBUG_PRINT("Read command 2: %d\r\n", fsmc_conf.read2_cmd);
 802377c:	7a61      	ldrb	r1, [r4, #9]
 802377e:	4824      	ldr	r0, [pc, #144]	; (8023810 <nand_print_fsmc_info+0xe0>)
 8023780:	f008 f878 	bl	802b874 <printf>
    DEBUG_PRINT("Read spare command: %d\r\n", fsmc_conf.read_spare_cmd);    
 8023784:	7aa1      	ldrb	r1, [r4, #10]
 8023786:	4823      	ldr	r0, [pc, #140]	; (8023814 <nand_print_fsmc_info+0xe4>)
 8023788:	f008 f874 	bl	802b874 <printf>
    DEBUG_PRINT("Read ID command: %d\r\n", fsmc_conf.read_id_cmd);
 802378c:	7ae1      	ldrb	r1, [r4, #11]
 802378e:	4822      	ldr	r0, [pc, #136]	; (8023818 <nand_print_fsmc_info+0xe8>)
 8023790:	f008 f870 	bl	802b874 <printf>
    DEBUG_PRINT("Reset command: %d\r\n", fsmc_conf.reset_cmd);
 8023794:	7b21      	ldrb	r1, [r4, #12]
 8023796:	4821      	ldr	r0, [pc, #132]	; (802381c <nand_print_fsmc_info+0xec>)
 8023798:	f008 f86c 	bl	802b874 <printf>
    DEBUG_PRINT("Write 1 command: %d\r\n", fsmc_conf.write1_cmd);
 802379c:	7b61      	ldrb	r1, [r4, #13]
 802379e:	4820      	ldr	r0, [pc, #128]	; (8023820 <nand_print_fsmc_info+0xf0>)
 80237a0:	f008 f868 	bl	802b874 <printf>
    DEBUG_PRINT("Write 2 command: %d\r\n", fsmc_conf.write2_cmd);
 80237a4:	7ba1      	ldrb	r1, [r4, #14]
 80237a6:	481f      	ldr	r0, [pc, #124]	; (8023824 <nand_print_fsmc_info+0xf4>)
 80237a8:	f008 f864 	bl	802b874 <printf>
    DEBUG_PRINT("Erase 1 command: %d\r\n", fsmc_conf.erase1_cmd);
 80237ac:	7be1      	ldrb	r1, [r4, #15]
 80237ae:	481e      	ldr	r0, [pc, #120]	; (8023828 <nand_print_fsmc_info+0xf8>)
 80237b0:	f008 f860 	bl	802b874 <printf>
    DEBUG_PRINT("Erase 2 command: %d\r\n", fsmc_conf.erase2_cmd);
 80237b4:	7c21      	ldrb	r1, [r4, #16]
 80237b6:	481d      	ldr	r0, [pc, #116]	; (802382c <nand_print_fsmc_info+0xfc>)
 80237b8:	f008 f85c 	bl	802b874 <printf>
    DEBUG_PRINT("Status command: %d\r\n", fsmc_conf.status_cmd);
 80237bc:	7c61      	ldrb	r1, [r4, #17]
 80237be:	481c      	ldr	r0, [pc, #112]	; (8023830 <nand_print_fsmc_info+0x100>)
 80237c0:	f008 f858 	bl	802b874 <printf>
    DEBUG_PRINT("Set feature command: %d\r\n", fsmc_conf.set_features_cmd);
 80237c4:	7ca1      	ldrb	r1, [r4, #18]
 80237c6:	481b      	ldr	r0, [pc, #108]	; (8023834 <nand_print_fsmc_info+0x104>)
 80237c8:	f008 f854 	bl	802b874 <printf>
    DEBUG_PRINT("Enable ECC address: %d\r\n", fsmc_conf.enable_ecc_addr);
 80237cc:	7ce1      	ldrb	r1, [r4, #19]
 80237ce:	481a      	ldr	r0, [pc, #104]	; (8023838 <nand_print_fsmc_info+0x108>)
 80237d0:	f008 f850 	bl	802b874 <printf>
    DEBUG_PRINT("Enable ECC value: %d\r\n", fsmc_conf.enable_ecc_value);
 80237d4:	7d21      	ldrb	r1, [r4, #20]
 80237d6:	4819      	ldr	r0, [pc, #100]	; (802383c <nand_print_fsmc_info+0x10c>)
 80237d8:	f008 f84c 	bl	802b874 <printf>
    DEBUG_PRINT("Disable ECC value: %d\r\n", fsmc_conf.disable_ecc_value);
 80237dc:	7d61      	ldrb	r1, [r4, #21]
 80237de:	4818      	ldr	r0, [pc, #96]	; (8023840 <nand_print_fsmc_info+0x110>)
 80237e0:	f008 f848 	bl	802b874 <printf>
}
 80237e4:	bd10      	pop	{r4, pc}
 80237e6:	bf00      	nop
 80237e8:	20001238 	.word	0x20001238
 80237ec:	080302b8 	.word	0x080302b8
 80237f0:	080302cc 	.word	0x080302cc
 80237f4:	080302e4 	.word	0x080302e4
 80237f8:	080302fc 	.word	0x080302fc
 80237fc:	08030314 	.word	0x08030314
 8023800:	0803032c 	.word	0x0803032c
 8023804:	08030340 	.word	0x08030340
 8023808:	08030354 	.word	0x08030354
 802380c:	08030368 	.word	0x08030368
 8023810:	08030380 	.word	0x08030380
 8023814:	08030398 	.word	0x08030398
 8023818:	080303b4 	.word	0x080303b4
 802381c:	080303cc 	.word	0x080303cc
 8023820:	080303e0 	.word	0x080303e0
 8023824:	080303f8 	.word	0x080303f8
 8023828:	08030410 	.word	0x08030410
 802382c:	08030428 	.word	0x08030428
 8023830:	08030440 	.word	0x08030440
 8023834:	08030458 	.word	0x08030458
 8023838:	08030474 	.word	0x08030474
 802383c:	08030490 	.word	0x08030490
 8023840:	080304a8 	.word	0x080304a8

08023844 <nand_init>:
    if (conf_size < sizeof(fsmc_conf_t))
 8023844:	2915      	cmp	r1, #21
 8023846:	d91a      	bls.n	802387e <nand_init+0x3a>
{
 8023848:	b510      	push	{r4, lr}
 802384a:	4684      	mov	ip, r0
    fsmc_conf = *(fsmc_conf_t *)conf;  // 从传入的配置结构体中获取配置参数
 802384c:	4c0d      	ldr	r4, [pc, #52]	; (8023884 <nand_init+0x40>)
 802384e:	6800      	ldr	r0, [r0, #0]
 8023850:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023854:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8023858:	f8dc 300c 	ldr.w	r3, [ip, #12]
 802385c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802385e:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8023862:	6020      	str	r0, [r4, #0]
 8023864:	f8bc 3014 	ldrh.w	r3, [ip, #20]
 8023868:	80a3      	strh	r3, [r4, #4]
    nand_gpio_init();  // 初始化GPIO引脚
 802386a:	f7ff fed9 	bl	8023620 <nand_gpio_init>
    nand_fsmc_init();  // 初始化FSMC NAND Flash
 802386e:	f7ff ff1f 	bl	80236b0 <nand_fsmc_init>
    nand_print_fsmc_info();  // 打印FSMC的配置信息
 8023872:	f7ff ff5d 	bl	8023730 <nand_print_fsmc_info>
    nand_reset();  // 复位NAND Flash
 8023876:	f7ff fca5 	bl	80231c4 <nand_reset>
    return 0;
 802387a:	2000      	movs	r0, #0
}
 802387c:	bd10      	pop	{r4, pc}
        return -1;
 802387e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8023882:	4770      	bx	lr
 8023884:	20001238 	.word	0x20001238

08023888 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8023888:	b5f0      	push	{r4, r5, r6, r7, lr}
 802388a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802388c:	2300      	movs	r3, #0
 802388e:	9306      	str	r3, [sp, #24]
 8023890:	9307      	str	r3, [sp, #28]
 8023892:	9308      	str	r3, [sp, #32]
 8023894:	9309      	str	r3, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8023896:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802389a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802389e:	699a      	ldr	r2, [r3, #24]
 80238a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80238a4:	619a      	str	r2, [r3, #24]
 80238a6:	699a      	ldr	r2, [r3, #24]
 80238a8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80238ac:	9201      	str	r2, [sp, #4]
 80238ae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80238b0:	699a      	ldr	r2, [r3, #24]
 80238b2:	f042 0210 	orr.w	r2, r2, #16
 80238b6:	619a      	str	r2, [r3, #24]
 80238b8:	699a      	ldr	r2, [r3, #24]
 80238ba:	f002 0210 	and.w	r2, r2, #16
 80238be:	9202      	str	r2, [sp, #8]
 80238c0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80238c2:	699a      	ldr	r2, [r3, #24]
 80238c4:	f042 0204 	orr.w	r2, r2, #4
 80238c8:	619a      	str	r2, [r3, #24]
 80238ca:	699a      	ldr	r2, [r3, #24]
 80238cc:	f002 0204 	and.w	r2, r2, #4
 80238d0:	9203      	str	r2, [sp, #12]
 80238d2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80238d4:	699a      	ldr	r2, [r3, #24]
 80238d6:	f042 0208 	orr.w	r2, r2, #8
 80238da:	619a      	str	r2, [r3, #24]
 80238dc:	699a      	ldr	r2, [r3, #24]
 80238de:	f002 0208 	and.w	r2, r2, #8
 80238e2:	9204      	str	r2, [sp, #16]
 80238e4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80238e6:	699a      	ldr	r2, [r3, #24]
 80238e8:	f042 0220 	orr.w	r2, r2, #32
 80238ec:	619a      	str	r2, [r3, #24]
 80238ee:	699b      	ldr	r3, [r3, #24]
 80238f0:	f003 0320 	and.w	r3, r3, #32
 80238f4:	9305      	str	r3, [sp, #20]
 80238f6:	9b05      	ldr	r3, [sp, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|YELLOW_Pin|SPI1_CS_Pin, GPIO_PIN_SET);
 80238f8:	4d20      	ldr	r5, [pc, #128]	; (802397c <MX_GPIO_Init+0xf4>)
 80238fa:	2201      	movs	r2, #1
 80238fc:	2113      	movs	r1, #19
 80238fe:	4628      	mov	r0, r5
 8023900:	f003 f90e 	bl	8026b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8023904:	237f      	movs	r3, #127	; 0x7f
 8023906:	9306      	str	r3, [sp, #24]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023908:	2403      	movs	r4, #3
 802390a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802390c:	a906      	add	r1, sp, #24
 802390e:	481c      	ldr	r0, [pc, #112]	; (8023980 <MX_GPIO_Init+0xf8>)
 8023910:	f002 ff52 	bl	80267b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8023914:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8023918:	9706      	str	r7, [sp, #24]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802391a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802391c:	a906      	add	r1, sp, #24
 802391e:	4819      	ldr	r0, [pc, #100]	; (8023984 <MX_GPIO_Init+0xfc>)
 8023920:	f002 ff4a 	bl	80267b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RED_Pin|YELLOW_Pin;
 8023924:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023926:	2601      	movs	r6, #1
 8023928:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 802392a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 802392c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802392e:	a906      	add	r1, sp, #24
 8023930:	4628      	mov	r0, r5
 8023932:	f002 ff41 	bl	80267b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_15;
 8023936:	f248 130c 	movw	r3, #33036	; 0x810c
 802393a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802393c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802393e:	a906      	add	r1, sp, #24
 8023940:	4628      	mov	r0, r5
 8023942:	f002 ff39 	bl	80267b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8023946:	2310      	movs	r3, #16
 8023948:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802394a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 802394c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802394e:	2302      	movs	r3, #2
 8023950:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8023952:	a906      	add	r1, sp, #24
 8023954:	4628      	mov	r0, r5
 8023956:	f002 ff2f 	bl	80267b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 802395a:	9706      	str	r7, [sp, #24]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802395c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802395e:	a906      	add	r1, sp, #24
 8023960:	4809      	ldr	r0, [pc, #36]	; (8023988 <MX_GPIO_Init+0x100>)
 8023962:	f002 ff29 	bl	80267b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8023966:	f242 030c 	movw	r3, #8204	; 0x200c
 802396a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802396c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802396e:	a906      	add	r1, sp, #24
 8023970:	4806      	ldr	r0, [pc, #24]	; (802398c <MX_GPIO_Init+0x104>)
 8023972:	f002 ff21 	bl	80267b8 <HAL_GPIO_Init>

}
 8023976:	b00b      	add	sp, #44	; 0x2c
 8023978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802397a:	bf00      	nop
 802397c:	40010800 	.word	0x40010800
 8023980:	40011800 	.word	0x40011800
 8023984:	40011000 	.word	0x40011000
 8023988:	40010c00 	.word	0x40010c00
 802398c:	40011400 	.word	0x40011400

08023990 <jtag_init>:
 */

#include <stm32f1xx.h>

void jtag_init()
{
 8023990:	b508      	push	{r3, lr}
    /* Enable JTAG in low power mode */
    HAL_DBGMCU_EnableDBGSleepMode();
 8023992:	f002 fbe3 	bl	802615c <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8023996:	f002 fbf1 	bl	802617c <HAL_DBGMCU_EnableDBGStandbyMode>
    HAL_DBGMCU_EnableDBGStopMode();
 802399a:	f002 fbe7 	bl	802616c <HAL_DBGMCU_EnableDBGStopMode>
}
 802399e:	bd08      	pop	{r3, pc}

080239a0 <led_set>:

    HAL_GPIO_WritePin(GPIOA, RED_Pin|YELLOW_Pin, GPIO_PIN_RESET); // 将引脚0和引脚1的状态置为低电平
}

static void led_set(GPIO_TypeDef *gpiox, uint16_t pin, bool on)
{
 80239a0:	b508      	push	{r3, lr}
    if (on)
 80239a2:	b11a      	cbz	r2, 80239ac <led_set+0xc>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_SET); // 设置引脚为高电平
 80239a4:	2201      	movs	r2, #1
 80239a6:	f003 f8bb 	bl	8026b20 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
}
 80239aa:	bd08      	pop	{r3, pc}
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
 80239ac:	2200      	movs	r2, #0
 80239ae:	f003 f8b7 	bl	8026b20 <HAL_GPIO_WritePin>
}
 80239b2:	e7fa      	b.n	80239aa <led_set+0xa>

080239b4 <led_init>:
{
 80239b4:	b570      	push	{r4, r5, r6, lr}
 80239b6:	b086      	sub	sp, #24
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80239b8:	2400      	movs	r4, #0
 80239ba:	9402      	str	r4, [sp, #8]
 80239bc:	9403      	str	r4, [sp, #12]
 80239be:	9404      	str	r4, [sp, #16]
 80239c0:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE(); // 初始化GPIOE时钟
 80239c2:	4b15      	ldr	r3, [pc, #84]	; (8023a18 <led_init+0x64>)
 80239c4:	699a      	ldr	r2, [r3, #24]
 80239c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80239ca:	619a      	str	r2, [r3, #24]
 80239cc:	699a      	ldr	r2, [r3, #24]
 80239ce:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80239d2:	9200      	str	r2, [sp, #0]
 80239d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE(); // 初始化GPIOC时钟
 80239d6:	699a      	ldr	r2, [r3, #24]
 80239d8:	f042 0210 	orr.w	r2, r2, #16
 80239dc:	619a      	str	r2, [r3, #24]
 80239de:	699b      	ldr	r3, [r3, #24]
 80239e0:	f003 0310 	and.w	r3, r3, #16
 80239e4:	9301      	str	r3, [sp, #4]
 80239e6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_WritePin(GPIOA, RED_Pin|YELLOW_Pin, GPIO_PIN_SET);
 80239e8:	4d0c      	ldr	r5, [pc, #48]	; (8023a1c <led_init+0x68>)
 80239ea:	2201      	movs	r2, #1
 80239ec:	2103      	movs	r1, #3
 80239ee:	4628      	mov	r0, r5
 80239f0:	f003 f896 	bl	8026b20 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = RED_Pin|YELLOW_Pin;
 80239f4:	2603      	movs	r6, #3
 80239f6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80239f8:	2301      	movs	r3, #1
 80239fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80239fc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80239fe:	2302      	movs	r3, #2
 8023a00:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023a02:	a902      	add	r1, sp, #8
 8023a04:	4628      	mov	r0, r5
 8023a06:	f002 fed7 	bl	80267b8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, RED_Pin|YELLOW_Pin, GPIO_PIN_RESET); // 将引脚0和引脚1的状态置为低电平
 8023a0a:	4622      	mov	r2, r4
 8023a0c:	4631      	mov	r1, r6
 8023a0e:	4628      	mov	r0, r5
 8023a10:	f003 f886 	bl	8026b20 <HAL_GPIO_WritePin>
}
 8023a14:	b006      	add	sp, #24
 8023a16:	bd70      	pop	{r4, r5, r6, pc}
 8023a18:	40021000 	.word	0x40021000
 8023a1c:	40010800 	.word	0x40010800

08023a20 <led_wr_set>:

void led_wr_set(bool on)
{
 8023a20:	b508      	push	{r3, lr}
 8023a22:	4602      	mov	r2, r0
    led_set(GPIOA, RED_Pin, on); // 设置引脚LED1的状态
 8023a24:	2101      	movs	r1, #1
 8023a26:	4802      	ldr	r0, [pc, #8]	; (8023a30 <led_wr_set+0x10>)
 8023a28:	f7ff ffba 	bl	80239a0 <led_set>
}
 8023a2c:	bd08      	pop	{r3, pc}
 8023a2e:	bf00      	nop
 8023a30:	40010800 	.word	0x40010800

08023a34 <led_rd_set>:

void led_rd_set(bool on)
{
 8023a34:	b508      	push	{r3, lr}
 8023a36:	4602      	mov	r2, r0
    led_set(GPIOA, YELLOW_Pin, on); // 设置引脚LED2的状态
 8023a38:	2102      	movs	r1, #2
 8023a3a:	4802      	ldr	r0, [pc, #8]	; (8023a44 <led_rd_set+0x10>)
 8023a3c:	f7ff ffb0 	bl	80239a0 <led_set>
}
 8023a40:	bd08      	pop	{r3, pc}
 8023a42:	bf00      	nop
 8023a44:	40010800 	.word	0x40010800

08023a48 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8023a48:	b510      	push	{r4, lr}
 8023a4a:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8023a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8023a50:	b292      	uxth	r2, r2
 8023a52:	4802      	ldr	r0, [pc, #8]	; (8023a5c <_write+0x14>)
 8023a54:	f005 fb7c 	bl	8029150 <HAL_UART_Transmit>
    return len;
}
 8023a58:	4620      	mov	r0, r4
 8023a5a:	bd10      	pop	{r4, pc}
 8023a5c:	20005790 	.word	0x20005790

08023a60 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8023a60:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8023a62:	e7fe      	b.n	8023a62 <Error_Handler+0x2>

08023a64 <SystemClock_Config>:
{
 8023a64:	b500      	push	{lr}
 8023a66:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8023a68:	2228      	movs	r2, #40	; 0x28
 8023a6a:	2100      	movs	r1, #0
 8023a6c:	a80c      	add	r0, sp, #48	; 0x30
 8023a6e:	f007 ffa4 	bl	802b9ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8023a72:	2300      	movs	r3, #0
 8023a74:	9307      	str	r3, [sp, #28]
 8023a76:	9308      	str	r3, [sp, #32]
 8023a78:	9309      	str	r3, [sp, #36]	; 0x24
 8023a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8023a7c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8023a7e:	9301      	str	r3, [sp, #4]
 8023a80:	9302      	str	r3, [sp, #8]
 8023a82:	9303      	str	r3, [sp, #12]
 8023a84:	9304      	str	r3, [sp, #16]
 8023a86:	9305      	str	r3, [sp, #20]
 8023a88:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8023a8a:	2309      	movs	r3, #9
 8023a8c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8023a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023a92:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8023a94:	2201      	movs	r2, #1
 8023a96:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8023a98:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8023a9a:	2202      	movs	r2, #2
 8023a9c:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8023a9e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8023aa0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8023aa4:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8023aa6:	a80c      	add	r0, sp, #48	; 0x30
 8023aa8:	f004 f936 	bl	8027d18 <HAL_RCC_OscConfig>
 8023aac:	b9d8      	cbnz	r0, 8023ae6 <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8023aae:	230f      	movs	r3, #15
 8023ab0:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8023ab2:	2102      	movs	r1, #2
 8023ab4:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8023ab6:	2300      	movs	r3, #0
 8023ab8:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8023aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8023abe:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8023ac0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8023ac2:	a807      	add	r0, sp, #28
 8023ac4:	f004 fb5a 	bl	802817c <HAL_RCC_ClockConfig>
 8023ac8:	b978      	cbnz	r0, 8023aea <SystemClock_Config+0x86>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8023aca:	2311      	movs	r3, #17
 8023acc:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8023ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8023ad2:	9302      	str	r3, [sp, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8023ad4:	2300      	movs	r3, #0
 8023ad6:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8023ad8:	a801      	add	r0, sp, #4
 8023ada:	f004 fc2b 	bl	8028334 <HAL_RCCEx_PeriphCLKConfig>
 8023ade:	b930      	cbnz	r0, 8023aee <SystemClock_Config+0x8a>
}
 8023ae0:	b017      	add	sp, #92	; 0x5c
 8023ae2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8023ae6:	f7ff ffbb 	bl	8023a60 <Error_Handler>
    Error_Handler();
 8023aea:	f7ff ffb9 	bl	8023a60 <Error_Handler>
    Error_Handler();
 8023aee:	f7ff ffb7 	bl	8023a60 <Error_Handler>
	...

08023af4 <main>:
{
 8023af4:	b508      	push	{r3, lr}
  HAL_Init();
 8023af6:	f002 fb0d 	bl	8026114 <HAL_Init>
  SystemClock_Config();
 8023afa:	f7ff ffb3 	bl	8023a64 <SystemClock_Config>
  MX_GPIO_Init();
 8023afe:	f7ff fec3 	bl	8023888 <MX_GPIO_Init>
  MX_RTC_Init();
 8023b02:	f001 fbd1 	bl	80252a8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8023b06:	f002 fa5b 	bl	8025fc0 <MX_USART1_UART_Init>
  printf("\r\nNAND programmer ver: %d.%d.%d\r\n", SW_VERSION_MAJOR,
 8023b0a:	2300      	movs	r3, #0
 8023b0c:	2205      	movs	r2, #5
 8023b0e:	2103      	movs	r1, #3
 8023b10:	481a      	ldr	r0, [pc, #104]	; (8023b7c <main+0x88>)
 8023b12:	f007 feaf 	bl	802b874 <printf>
  if (!is_external_clock_avail())
 8023b16:	f7ff fab5 	bl	8023084 <is_external_clock_avail>
 8023b1a:	b358      	cbz	r0, 8023b74 <main+0x80>
  printf("JTAG init...");
 8023b1c:	4818      	ldr	r0, [pc, #96]	; (8023b80 <main+0x8c>)
 8023b1e:	f007 fea9 	bl	802b874 <printf>
  jtag_init();
 8023b22:	f7ff ff35 	bl	8023990 <jtag_init>
  printf("done.\r\n");
 8023b26:	4c17      	ldr	r4, [pc, #92]	; (8023b84 <main+0x90>)
 8023b28:	4620      	mov	r0, r4
 8023b2a:	f007 fefb 	bl	802b924 <puts>
  printf("LED init...");
 8023b2e:	4816      	ldr	r0, [pc, #88]	; (8023b88 <main+0x94>)
 8023b30:	f007 fea0 	bl	802b874 <printf>
  led_init();
 8023b34:	f7ff ff3e 	bl	80239b4 <led_init>
  printf("done.\r\n");
 8023b38:	4620      	mov	r0, r4
 8023b3a:	f007 fef3 	bl	802b924 <puts>
  printf("USB init...");
 8023b3e:	4813      	ldr	r0, [pc, #76]	; (8023b8c <main+0x98>)
 8023b40:	f007 fe98 	bl	802b874 <printf>
  MX_USB_DEVICE_Init();
 8023b44:	f007 fba0 	bl	802b288 <MX_USB_DEVICE_Init>
  printf("done.\r\n");
 8023b48:	4620      	mov	r0, r4
 8023b4a:	f007 feeb 	bl	802b924 <puts>
  printf("CDC init...");
 8023b4e:	4810      	ldr	r0, [pc, #64]	; (8023b90 <main+0x9c>)
 8023b50:	f007 fe90 	bl	802b874 <printf>
  cdc_init();
 8023b54:	f7ff f9c0 	bl	8022ed8 <cdc_init>
  printf("done.\r\n");
 8023b58:	4620      	mov	r0, r4
 8023b5a:	f007 fee3 	bl	802b924 <puts>
  printf("Programmer init...");
 8023b5e:	480d      	ldr	r0, [pc, #52]	; (8023b94 <main+0xa0>)
 8023b60:	f007 fe88 	bl	802b874 <printf>
  np_init();
 8023b64:	f001 fb86 	bl	8025274 <np_init>
  printf("done.\r\n");
 8023b68:	4620      	mov	r0, r4
 8023b6a:	f007 fedb 	bl	802b924 <puts>
  np_handler();
 8023b6e:	f001 fb89 	bl	8025284 <np_handler>
  while (1)
 8023b72:	e7fc      	b.n	8023b6e <main+0x7a>
      printf("External clock not detected. Fallback to internal clock.\r\n");
 8023b74:	4808      	ldr	r0, [pc, #32]	; (8023b98 <main+0xa4>)
 8023b76:	f007 fed5 	bl	802b924 <puts>
 8023b7a:	e7cf      	b.n	8023b1c <main+0x28>
 8023b7c:	080304c0 	.word	0x080304c0
 8023b80:	08030520 	.word	0x08030520
 8023b84:	08030530 	.word	0x08030530
 8023b88:	08030538 	.word	0x08030538
 8023b8c:	08030544 	.word	0x08030544
 8023b90:	08030550 	.word	0x08030550
 8023b94:	0803055c 	.word	0x0803055c
 8023b98:	080304e4 	.word	0x080304e4

08023b9c <nand_bad_block_table_init>:

static uint32_t nand_bad_block_table_count; // NAND 坏块表中的块计数
static uint32_t nand_bad_block_table[NAND_BAD_BLOCK_TABLE_SIZE]; // NAND 坏块表

void nand_bad_block_table_init()
{
 8023b9c:	b508      	push	{r3, lr}
    memset(nand_bad_block_table, 0, sizeof(nand_bad_block_table)); // 初始化 NAND 坏块表为 0
 8023b9e:	2250      	movs	r2, #80	; 0x50
 8023ba0:	2100      	movs	r1, #0
 8023ba2:	4803      	ldr	r0, [pc, #12]	; (8023bb0 <nand_bad_block_table_init+0x14>)
 8023ba4:	f007 ff09 	bl	802b9ba <memset>
    nand_bad_block_table_count = 0; // 初始化 NAND 坏块计数为 0
 8023ba8:	4b02      	ldr	r3, [pc, #8]	; (8023bb4 <nand_bad_block_table_init+0x18>)
 8023baa:	2200      	movs	r2, #0
 8023bac:	601a      	str	r2, [r3, #0]
}
 8023bae:	bd08      	pop	{r3, pc}
 8023bb0:	20001250 	.word	0x20001250
 8023bb4:	200012a0 	.word	0x200012a0

08023bb8 <nand_bad_block_table_add>:

int nand_bad_block_table_add(uint32_t page)
{
    if (nand_bad_block_table_count == NAND_BAD_BLOCK_TABLE_SIZE)
 8023bb8:	4b07      	ldr	r3, [pc, #28]	; (8023bd8 <nand_bad_block_table_add+0x20>)
 8023bba:	681b      	ldr	r3, [r3, #0]
 8023bbc:	2b14      	cmp	r3, #20
 8023bbe:	d007      	beq.n	8023bd0 <nand_bad_block_table_add+0x18>
        return -1; // 坏块表已满，无法添加

    nand_bad_block_table[nand_bad_block_table_count++] = page; // 在坏块表末尾添加新的块
 8023bc0:	1c59      	adds	r1, r3, #1
 8023bc2:	4a05      	ldr	r2, [pc, #20]	; (8023bd8 <nand_bad_block_table_add+0x20>)
 8023bc4:	6011      	str	r1, [r2, #0]
 8023bc6:	4a05      	ldr	r2, [pc, #20]	; (8023bdc <nand_bad_block_table_add+0x24>)
 8023bc8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return 0; // 添加成功
 8023bcc:	2000      	movs	r0, #0
 8023bce:	4770      	bx	lr
        return -1; // 坏块表已满，无法添加
 8023bd0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8023bd4:	4770      	bx	lr
 8023bd6:	bf00      	nop
 8023bd8:	200012a0 	.word	0x200012a0
 8023bdc:	20001250 	.word	0x20001250

08023be0 <nand_bad_block_table_lookup>:

bool nand_bad_block_table_lookup(uint32_t page)
{
    uint32_t i;

    for (i = 0; i < nand_bad_block_table_count; i++)
 8023be0:	2300      	movs	r3, #0
 8023be2:	e000      	b.n	8023be6 <nand_bad_block_table_lookup+0x6>
 8023be4:	3301      	adds	r3, #1
 8023be6:	4a06      	ldr	r2, [pc, #24]	; (8023c00 <nand_bad_block_table_lookup+0x20>)
 8023be8:	6812      	ldr	r2, [r2, #0]
 8023bea:	429a      	cmp	r2, r3
 8023bec:	d906      	bls.n	8023bfc <nand_bad_block_table_lookup+0x1c>
    {
        if (nand_bad_block_table[i] == page)
 8023bee:	4a05      	ldr	r2, [pc, #20]	; (8023c04 <nand_bad_block_table_lookup+0x24>)
 8023bf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8023bf4:	4282      	cmp	r2, r0
 8023bf6:	d1f5      	bne.n	8023be4 <nand_bad_block_table_lookup+0x4>
            return true; // 在坏块表中找到了对应的块
 8023bf8:	2001      	movs	r0, #1
    }

    return false; // 在坏块表中未找到对应的块
}
 8023bfa:	4770      	bx	lr
    return false; // 在坏块表中未找到对应的块
 8023bfc:	2000      	movs	r0, #0
 8023bfe:	4770      	bx	lr
 8023c00:	200012a0 	.word	0x200012a0
 8023c04:	20001250 	.word	0x20001250

08023c08 <nand_bad_block_table_iter_alloc>:

void *nand_bad_block_table_iter_alloc(uint32_t *page)
{
    if (!nand_bad_block_table_count)
 8023c08:	4b04      	ldr	r3, [pc, #16]	; (8023c1c <nand_bad_block_table_iter_alloc+0x14>)
 8023c0a:	681b      	ldr	r3, [r3, #0]
 8023c0c:	b123      	cbz	r3, 8023c18 <nand_bad_block_table_iter_alloc+0x10>
        return NULL; // 坏块表为空，无法进行迭代

    *page = nand_bad_block_table[0]; // 将坏块表的第一个块赋值给 page
 8023c0e:	4b04      	ldr	r3, [pc, #16]	; (8023c20 <nand_bad_block_table_iter_alloc+0x18>)
 8023c10:	681a      	ldr	r2, [r3, #0]
 8023c12:	6002      	str	r2, [r0, #0]

    return &nand_bad_block_table[0]; // 返回坏块表的第一个块的地址作为迭代器
 8023c14:	4618      	mov	r0, r3
 8023c16:	4770      	bx	lr
        return NULL; // 坏块表为空，无法进行迭代
 8023c18:	2000      	movs	r0, #0
}
 8023c1a:	4770      	bx	lr
 8023c1c:	200012a0 	.word	0x200012a0
 8023c20:	20001250 	.word	0x20001250

08023c24 <nand_bad_block_table_iter_next>:

void *nand_bad_block_table_iter_next(void *iter, uint32_t *page)
{
    uint32_t *bbt_iter = iter;

    if (!bbt_iter)
 8023c24:	4602      	mov	r2, r0
 8023c26:	b160      	cbz	r0, 8023c42 <nand_bad_block_table_iter_next+0x1e>
{
 8023c28:	b410      	push	{r4}
       return NULL; // 无效的迭代器，无法进行下一次迭代

    bbt_iter++; // 迭代器指向下一个块
 8023c2a:	3004      	adds	r0, #4

    if (bbt_iter - &nand_bad_block_table[0] >= nand_bad_block_table_count)
 8023c2c:	4b06      	ldr	r3, [pc, #24]	; (8023c48 <nand_bad_block_table_iter_next+0x24>)
 8023c2e:	1ac3      	subs	r3, r0, r3
 8023c30:	4c06      	ldr	r4, [pc, #24]	; (8023c4c <nand_bad_block_table_iter_next+0x28>)
 8023c32:	6824      	ldr	r4, [r4, #0]
 8023c34:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
 8023c38:	d904      	bls.n	8023c44 <nand_bad_block_table_iter_next+0x20>
        return NULL; // 已达到坏块表的末尾，无法进行下一次迭代

    *page = *bbt_iter; // 将当前迭代的块赋值给 page
 8023c3a:	6853      	ldr	r3, [r2, #4]
 8023c3c:	600b      	str	r3, [r1, #0]

    return bbt_iter; // 返回下一次迭代的迭代器
}
 8023c3e:	bc10      	pop	{r4}
 8023c40:	4770      	bx	lr
 8023c42:	4770      	bx	lr
        return NULL; // 已达到坏块表的末尾，无法进行下一次迭代
 8023c44:	2000      	movs	r0, #0
 8023c46:	e7fa      	b.n	8023c3e <nand_bad_block_table_iter_next+0x1a>
 8023c48:	20001250 	.word	0x20001250
 8023c4c:	200012a0 	.word	0x200012a0

08023c50 <np_send_ok_status>:
static flash_hal_t *hal[] = { &hal_fsmc, &hal_spi_nor, &hal_spi_nand };

uint8_t np_packet_send_buf[NP_PACKET_BUF_SIZE];

static int np_send_ok_status()
{
 8023c50:	b500      	push	{lr}
 8023c52:	b083      	sub	sp, #12
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_OK };
 8023c54:	2301      	movs	r3, #1
 8023c56:	f88d 3004 	strb.w	r3, [sp, #4]
 8023c5a:	2300      	movs	r3, #0
 8023c5c:	f88d 3005 	strb.w	r3, [sp, #5]
    size_t len = sizeof(status);

    if (np_comm_cb)
 8023c60:	4b05      	ldr	r3, [pc, #20]	; (8023c78 <np_send_ok_status+0x28>)
 8023c62:	681b      	ldr	r3, [r3, #0]
 8023c64:	b11b      	cbz	r3, 8023c6e <np_send_ok_status+0x1e>
        np_comm_cb->send((uint8_t *)&status, len);
 8023c66:	681b      	ldr	r3, [r3, #0]
 8023c68:	2102      	movs	r1, #2
 8023c6a:	a801      	add	r0, sp, #4
 8023c6c:	4798      	blx	r3

    return 0;
}
 8023c6e:	2000      	movs	r0, #0
 8023c70:	b003      	add	sp, #12
 8023c72:	f85d fb04 	ldr.w	pc, [sp], #4
 8023c76:	bf00      	nop
 8023c78:	200012a4 	.word	0x200012a4

08023c7c <np_send_error>:

static int np_send_error(uint8_t err_code)
{
 8023c7c:	b500      	push	{lr}
 8023c7e:	b083      	sub	sp, #12
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_ERROR };
 8023c80:	4b09      	ldr	r3, [pc, #36]	; (8023ca8 <np_send_error+0x2c>)
 8023c82:	881b      	ldrh	r3, [r3, #0]
 8023c84:	f8ad 3004 	strh.w	r3, [sp, #4]
    np_resp_err_t err_status = { status, err_code };
 8023c88:	f8ad 3000 	strh.w	r3, [sp]
 8023c8c:	f88d 0002 	strb.w	r0, [sp, #2]
    size_t len = sizeof(err_status);

    if (np_comm_cb)
 8023c90:	4b06      	ldr	r3, [pc, #24]	; (8023cac <np_send_error+0x30>)
 8023c92:	681b      	ldr	r3, [r3, #0]
 8023c94:	b11b      	cbz	r3, 8023c9e <np_send_error+0x22>
        np_comm_cb->send((uint8_t *)&err_status, len);
 8023c96:	681b      	ldr	r3, [r3, #0]
 8023c98:	2103      	movs	r1, #3
 8023c9a:	4668      	mov	r0, sp
 8023c9c:	4798      	blx	r3

    return 0;
}
 8023c9e:	2000      	movs	r0, #0
 8023ca0:	b003      	add	sp, #12
 8023ca2:	f85d fb04 	ldr.w	pc, [sp], #4
 8023ca6:	bf00      	nop
 8023ca8:	08030230 	.word	0x08030230
 8023cac:	200012a4 	.word	0x200012a4

08023cb0 <np_send_bad_block_info>:

static int np_send_bad_block_info(uint64_t addr, uint32_t size, bool is_skipped)
{
 8023cb0:	b500      	push	{lr}
 8023cb2:	b087      	sub	sp, #28
    uint8_t info = is_skipped ? NP_STATUS_BB_SKIP : NP_STATUS_BB;
 8023cb4:	b1d3      	cbz	r3, 8023cec <np_send_bad_block_info+0x3c>
 8023cb6:	2304      	movs	r3, #4
    np_resp_t resp_header = { NP_RESP_STATUS, info };
 8023cb8:	f04f 0c01 	mov.w	ip, #1
 8023cbc:	f88d c014 	strb.w	ip, [sp, #20]
 8023cc0:	f88d 3015 	strb.w	r3, [sp, #21]
    np_resp_bad_block_t bad_block = { resp_header, addr, size };
 8023cc4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8023cc8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8023ccc:	f8cd 0006 	str.w	r0, [sp, #6]
 8023cd0:	f8cd 100a 	str.w	r1, [sp, #10]
 8023cd4:	f8cd 200e 	str.w	r2, [sp, #14]

    if (np_comm_cb->send((uint8_t *)&bad_block, sizeof(bad_block)))
 8023cd8:	4b07      	ldr	r3, [pc, #28]	; (8023cf8 <np_send_bad_block_info+0x48>)
 8023cda:	681b      	ldr	r3, [r3, #0]
 8023cdc:	681b      	ldr	r3, [r3, #0]
 8023cde:	210e      	movs	r1, #14
 8023ce0:	a801      	add	r0, sp, #4
 8023ce2:	4798      	blx	r3
 8023ce4:	b920      	cbnz	r0, 8023cf0 <np_send_bad_block_info+0x40>
        return -1;

    return 0;
}
 8023ce6:	b007      	add	sp, #28
 8023ce8:	f85d fb04 	ldr.w	pc, [sp], #4
    uint8_t info = is_skipped ? NP_STATUS_BB_SKIP : NP_STATUS_BB;
 8023cec:	2302      	movs	r3, #2
 8023cee:	e7e3      	b.n	8023cb8 <np_send_bad_block_info+0x8>
        return -1;
 8023cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8023cf4:	e7f7      	b.n	8023ce6 <np_send_bad_block_info+0x36>
 8023cf6:	bf00      	nop
 8023cf8:	200012a4 	.word	0x200012a4

08023cfc <np_send_progress>:

static int np_send_progress(uint64_t progress)
{
 8023cfc:	b500      	push	{lr}
 8023cfe:	b085      	sub	sp, #20
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_PROGRESS };
 8023d00:	4b0b      	ldr	r3, [pc, #44]	; (8023d30 <np_send_progress+0x34>)
 8023d02:	889b      	ldrh	r3, [r3, #4]
 8023d04:	f8ad 300c 	strh.w	r3, [sp, #12]
    np_resp_progress_t resp_progress = { resp_header, progress };
 8023d08:	f8ad 3000 	strh.w	r3, [sp]
 8023d0c:	f8cd 0002 	str.w	r0, [sp, #2]
 8023d10:	f8cd 1006 	str.w	r1, [sp, #6]

    if (np_comm_cb->send((uint8_t *)&resp_progress, sizeof(resp_progress)))
 8023d14:	4b07      	ldr	r3, [pc, #28]	; (8023d34 <np_send_progress+0x38>)
 8023d16:	681b      	ldr	r3, [r3, #0]
 8023d18:	681b      	ldr	r3, [r3, #0]
 8023d1a:	210a      	movs	r1, #10
 8023d1c:	4668      	mov	r0, sp
 8023d1e:	4798      	blx	r3
 8023d20:	b910      	cbnz	r0, 8023d28 <np_send_progress+0x2c>
        return -1;

    return 0;
}
 8023d22:	b005      	add	sp, #20
 8023d24:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
 8023d28:	f04f 30ff 	mov.w	r0, #4294967295
 8023d2c:	e7f9      	b.n	8023d22 <np_send_progress+0x26>
 8023d2e:	bf00      	nop
 8023d30:	08030230 	.word	0x08030230
 8023d34:	200012a4 	.word	0x200012a4

08023d38 <np_send_write_ack>:

    return ret;
}

static int np_send_write_ack(uint64_t bytes_ack)
{
 8023d38:	b500      	push	{lr}
 8023d3a:	b085      	sub	sp, #20
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_WRITE_ACK };
 8023d3c:	4b0b      	ldr	r3, [pc, #44]	; (8023d6c <np_send_write_ack+0x34>)
 8023d3e:	891b      	ldrh	r3, [r3, #8]
 8023d40:	f8ad 300c 	strh.w	r3, [sp, #12]
    np_resp_write_ack_t write_ack = { resp_header, bytes_ack };
 8023d44:	f8ad 3000 	strh.w	r3, [sp]
 8023d48:	f8cd 0002 	str.w	r0, [sp, #2]
 8023d4c:	f8cd 1006 	str.w	r1, [sp, #6]

    if (np_comm_cb->send((uint8_t *)&write_ack, sizeof(write_ack)))
 8023d50:	4b07      	ldr	r3, [pc, #28]	; (8023d70 <np_send_write_ack+0x38>)
 8023d52:	681b      	ldr	r3, [r3, #0]
 8023d54:	681b      	ldr	r3, [r3, #0]
 8023d56:	210a      	movs	r1, #10
 8023d58:	4668      	mov	r0, sp
 8023d5a:	4798      	blx	r3
 8023d5c:	b910      	cbnz	r0, 8023d64 <np_send_write_ack+0x2c>
        return -1;

    return 0;
}
 8023d5e:	b005      	add	sp, #20
 8023d60:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
 8023d64:	f04f 30ff 	mov.w	r0, #4294967295
 8023d68:	e7f9      	b.n	8023d5e <np_send_write_ack+0x26>
 8023d6a:	bf00      	nop
 8023d6c:	08030230 	.word	0x08030230
 8023d70:	200012a4 	.word	0x200012a4

08023d74 <np_fill_chip_info>:

    return ret;
}

static void np_fill_chip_info(np_conf_cmd_t *conf_cmd, np_prog_t *prog)
{
 8023d74:	b430      	push	{r4, r5}
    prog->chip_info.page_size = conf_cmd->page_size;
 8023d76:	f8d0 2002 	ldr.w	r2, [r0, #2]
 8023d7a:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
 8023d7e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    prog->chip_info.block_size = conf_cmd->block_size;
 8023d82:	f8d0 2006 	ldr.w	r2, [r0, #6]
 8023d86:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
    prog->chip_info.total_size = conf_cmd->total_size;
 8023d8a:	f8d0 500a 	ldr.w	r5, [r0, #10]
 8023d8e:	f8d0 400e 	ldr.w	r4, [r0, #14]
 8023d92:	f242 2230 	movw	r2, #8752	; 0x2230
 8023d96:	eb01 0c02 	add.w	ip, r1, r2
 8023d9a:	508d      	str	r5, [r1, r2]
 8023d9c:	f8cc 4004 	str.w	r4, [ip, #4]
    prog->chip_info.spare_size = conf_cmd->spare_size;
 8023da0:	f8d0 2012 	ldr.w	r2, [r0, #18]
 8023da4:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
    prog->chip_info.bb_mark_off = conf_cmd->bb_mark_off;
 8023da8:	7d82      	ldrb	r2, [r0, #22]
 8023daa:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
    prog->chip_is_conf = 1;
 8023dae:	2301      	movs	r3, #1
 8023db0:	638b      	str	r3, [r1, #56]	; 0x38
}
 8023db2:	bc30      	pop	{r4, r5}
 8023db4:	4770      	bx	lr

08023db6 <np_cmd_is_valid>:
};

static bool np_cmd_is_valid(np_cmd_code_t code)
{
    return code >= 0 && code < NP_CMD_NAND_LAST;
}
 8023db6:	280c      	cmp	r0, #12
 8023db8:	bf8c      	ite	hi
 8023dba:	2000      	movhi	r0, #0
 8023dbc:	2001      	movls	r0, #1
 8023dbe:	4770      	bx	lr

08023dc0 <np_print_chip_info>:
{
 8023dc0:	b538      	push	{r3, r4, r5, lr}
 8023dc2:	4604      	mov	r4, r0
    DEBUG_PRINT("Page size: %lu\r\n", prog->chip_info.page_size);
 8023dc4:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
 8023dc8:	f8d5 1228 	ldr.w	r1, [r5, #552]	; 0x228
 8023dcc:	480c      	ldr	r0, [pc, #48]	; (8023e00 <np_print_chip_info+0x40>)
 8023dce:	f007 fd51 	bl	802b874 <printf>
    DEBUG_PRINT("Block size: %lu\r\n", prog->chip_info.block_size);
 8023dd2:	f8d5 122c 	ldr.w	r1, [r5, #556]	; 0x22c
 8023dd6:	480b      	ldr	r0, [pc, #44]	; (8023e04 <np_print_chip_info+0x44>)
 8023dd8:	f007 fd4c 	bl	802b874 <printf>
    DEBUG_PRINT("Total size: %" PRIx64 "\r\n", prog->chip_info.total_size);
 8023ddc:	f504 5008 	add.w	r0, r4, #8704	; 0x2200
 8023de0:	e9d0 230c 	ldrd	r2, r3, [r0, #48]	; 0x30
 8023de4:	4808      	ldr	r0, [pc, #32]	; (8023e08 <np_print_chip_info+0x48>)
 8023de6:	f007 fd45 	bl	802b874 <printf>
    DEBUG_PRINT("Spare size: %lu\r\n", prog->chip_info.spare_size);    
 8023dea:	f8d5 1238 	ldr.w	r1, [r5, #568]	; 0x238
 8023dee:	4807      	ldr	r0, [pc, #28]	; (8023e0c <np_print_chip_info+0x4c>)
 8023df0:	f007 fd40 	bl	802b874 <printf>
    DEBUG_PRINT("Bad block mark offset: %d\r\n", prog->chip_info.bb_mark_off);
 8023df4:	f895 123c 	ldrb.w	r1, [r5, #572]	; 0x23c
 8023df8:	4805      	ldr	r0, [pc, #20]	; (8023e10 <np_print_chip_info+0x50>)
 8023dfa:	f007 fd3b 	bl	802b874 <printf>
}
 8023dfe:	bd38      	pop	{r3, r4, r5, pc}
 8023e00:	08030570 	.word	0x08030570
 8023e04:	08030584 	.word	0x08030584
 8023e08:	08030598 	.word	0x08030598
 8023e0c:	080305ac 	.word	0x080305ac
 8023e10:	080305c0 	.word	0x080305c0

08023e14 <np_cmd_nand_write_end>:
{
 8023e14:	b508      	push	{r3, lr}
    prog->addr_is_set = 0;
 8023e16:	2300      	movs	r3, #0
 8023e18:	6303      	str	r3, [r0, #48]	; 0x30
    if (prog->page.offset)
 8023e1a:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 8023e1e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
 8023e22:	b911      	cbnz	r1, 8023e2a <np_cmd_nand_write_end+0x16>
    return np_send_ok_status();
 8023e24:	f7ff ff14 	bl	8023c50 <np_send_ok_status>
}
 8023e28:	bd08      	pop	{r3, pc}
        ERROR_PRINT("Data of 0x%lx length was not written\r\n",
 8023e2a:	4803      	ldr	r0, [pc, #12]	; (8023e38 <np_cmd_nand_write_end+0x24>)
 8023e2c:	f007 fd22 	bl	802b874 <printf>
        return NP_ERR_NAND_WR;
 8023e30:	f06f 0066 	mvn.w	r0, #102	; 0x66
 8023e34:	e7f8      	b.n	8023e28 <np_cmd_nand_write_end+0x14>
 8023e36:	bf00      	nop
 8023e38:	080305dc 	.word	0x080305dc

08023e3c <np_read_bad_block_info_from_page>:
{
 8023e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023e40:	4604      	mov	r4, r0
 8023e42:	4690      	mov	r8, r2
 8023e44:	469a      	mov	sl, r3
    uint64_t addr = block * prog->chip_info.block_size;
 8023e46:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8023e4a:	f8d3 522c 	ldr.w	r5, [r3, #556]	; 0x22c
 8023e4e:	fb01 f505 	mul.w	r5, r1, r5
 8023e52:	2700      	movs	r7, #0
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8023e54:	f8d3 0228 	ldr.w	r0, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off];
 8023e58:	f893 223c 	ldrb.w	r2, [r3, #572]	; 0x23c
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8023e5c:	4410      	add	r0, r2
 8023e5e:	3038      	adds	r0, #56	; 0x38
 8023e60:	4420      	add	r0, r4
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8023e62:	f893 1241 	ldrb.w	r1, [r3, #577]	; 0x241
 8023e66:	4b25      	ldr	r3, [pc, #148]	; (8023efc <np_read_bad_block_info_from_page+0xc0>)
 8023e68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8023e6c:	695e      	ldr	r6, [r3, #20]
 8023e6e:	2301      	movs	r3, #1
 8023e70:	4641      	mov	r1, r8
 8023e72:	3004      	adds	r0, #4
 8023e74:	47b0      	blx	r6
    if (status == FLASH_STATUS_INVALID_CMD)
 8023e76:	2804      	cmp	r0, #4
 8023e78:	d00a      	beq.n	8023e90 <np_read_bad_block_info_from_page+0x54>
    switch (status)
 8023e7a:	2802      	cmp	r0, #2
 8023e7c:	d01b      	beq.n	8023eb6 <np_read_bad_block_info_from_page+0x7a>
 8023e7e:	2803      	cmp	r0, #3
 8023e80:	d022      	beq.n	8023ec8 <np_read_bad_block_info_from_page+0x8c>
 8023e82:	b348      	cbz	r0, 8023ed8 <np_read_bad_block_info_from_page+0x9c>
        ERROR_PRINT("Unknown NAND status\r\n");
 8023e84:	481e      	ldr	r0, [pc, #120]	; (8023f00 <np_read_bad_block_info_from_page+0xc4>)
 8023e86:	f007 fd4d 	bl	802b924 <puts>
        return NP_ERR_NAND_RD;
 8023e8a:	f06f 0067 	mvn.w	r0, #103	; 0x67
 8023e8e:	e019      	b.n	8023ec4 <np_read_bad_block_info_from_page+0x88>
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8023e90:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8023e94:	f893 1241 	ldrb.w	r1, [r3, #577]	; 0x241
 8023e98:	4a18      	ldr	r2, [pc, #96]	; (8023efc <np_read_bad_block_info_from_page+0xc0>)
 8023e9a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8023e9e:	f8d2 9010 	ldr.w	r9, [r2, #16]
            prog->chip_info.page_size + prog->chip_info.spare_size);
 8023ea2:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8023ea6:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8023eaa:	441a      	add	r2, r3
 8023eac:	4641      	mov	r1, r8
 8023eae:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8023eb2:	47c8      	blx	r9
 8023eb4:	e7e1      	b.n	8023e7a <np_read_bad_block_info_from_page+0x3e>
        ERROR_PRINT("NAND read bad block info error at 0x%" PRIx64 "\r\n",
 8023eb6:	462a      	mov	r2, r5
 8023eb8:	463b      	mov	r3, r7
 8023eba:	4812      	ldr	r0, [pc, #72]	; (8023f04 <np_read_bad_block_info_from_page+0xc8>)
 8023ebc:	f007 fcda 	bl	802b874 <printf>
        return NP_ERR_NAND_RD;
 8023ec0:	f06f 0067 	mvn.w	r0, #103	; 0x67
}
 8023ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ERROR_PRINT("NAND read timeout at 0x%" PRIx64 "\r\n", addr);
 8023ec8:	462a      	mov	r2, r5
 8023eca:	463b      	mov	r3, r7
 8023ecc:	480e      	ldr	r0, [pc, #56]	; (8023f08 <np_read_bad_block_info_from_page+0xcc>)
 8023ece:	f007 fcd1 	bl	802b874 <printf>
        return NP_ERR_NAND_RD;
 8023ed2:	f06f 0067 	mvn.w	r0, #103	; 0x67
 8023ed6:	e7f5      	b.n	8023ec4 <np_read_bad_block_info_from_page+0x88>
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8023ed8:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8023edc:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8023ee0:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8023ee4:	4413      	add	r3, r2
 8023ee6:	441c      	add	r4, r3
 8023ee8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8023eec:	3bff      	subs	r3, #255	; 0xff
 8023eee:	bf18      	it	ne
 8023ef0:	2301      	movne	r3, #1
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8023ef2:	f88a 3000 	strb.w	r3, [sl]
    return 0;
 8023ef6:	2000      	movs	r0, #0
 8023ef8:	e7e4      	b.n	8023ec4 <np_read_bad_block_info_from_page+0x88>
 8023efa:	bf00      	nop
 8023efc:	08030f9c 	.word	0x08030f9c
 8023f00:	08030668 	.word	0x08030668
 8023f04:	0803060c 	.word	0x0803060c
 8023f08:	08030640 	.word	0x08030640

08023f0c <_np_cmd_read_bad_blocks>:
{
 8023f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023f10:	b083      	sub	sp, #12
 8023f12:	4606      	mov	r6, r0
 8023f14:	460f      	mov	r7, r1
    if (!hal[prog->hal]->is_bb_supported())
 8023f16:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8023f1a:	f893 2241 	ldrb.w	r2, [r3, #577]	; 0x241
 8023f1e:	4b28      	ldr	r3, [pc, #160]	; (8023fc0 <_np_cmd_read_bad_blocks+0xb4>)
 8023f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023f24:	6a1b      	ldr	r3, [r3, #32]
 8023f26:	4798      	blx	r3
 8023f28:	2800      	cmp	r0, #0
 8023f2a:	d042      	beq.n	8023fb2 <_np_cmd_read_bad_blocks+0xa6>
    block_num = prog->chip_info.total_size / prog->chip_info.block_size;
 8023f2c:	f506 5108 	add.w	r1, r6, #8704	; 0x2200
 8023f30:	3130      	adds	r1, #48	; 0x30
 8023f32:	f506 5800 	add.w	r8, r6, #8192	; 0x2000
 8023f36:	f8d8 522c 	ldr.w	r5, [r8, #556]	; 0x22c
 8023f3a:	2400      	movs	r4, #0
 8023f3c:	462a      	mov	r2, r5
 8023f3e:	4623      	mov	r3, r4
 8023f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023f44:	f7fe fe0c 	bl	8022b60 <__aeabi_uldivmod>
 8023f48:	4681      	mov	r9, r0
    page_num = prog->chip_info.block_size / prog->chip_info.page_size;
 8023f4a:	f8d8 3228 	ldr.w	r3, [r8, #552]	; 0x228
 8023f4e:	fbb5 f8f3 	udiv	r8, r5, r3
    for (block = 0; block < block_num; block++)
 8023f52:	e00f      	b.n	8023f74 <_np_cmd_read_bad_blocks+0x68>
            np_send_progress(page);
 8023f54:	4628      	mov	r0, r5
 8023f56:	2100      	movs	r1, #0
 8023f58:	f7ff fed0 	bl	8023cfc <np_send_progress>
 8023f5c:	e010      	b.n	8023f80 <_np_cmd_read_bad_blocks+0x74>
        if (!is_bad && (ret = np_read_bad_block_info_from_page(prog, block,
 8023f5e:	f10d 0307 	add.w	r3, sp, #7
 8023f62:	1c6a      	adds	r2, r5, #1
 8023f64:	4621      	mov	r1, r4
 8023f66:	4630      	mov	r0, r6
 8023f68:	f7ff ff68 	bl	8023e3c <np_read_bad_block_info_from_page>
 8023f6c:	4603      	mov	r3, r0
 8023f6e:	b1a0      	cbz	r0, 8023f9a <_np_cmd_read_bad_blocks+0x8e>
 8023f70:	e022      	b.n	8023fb8 <_np_cmd_read_bad_blocks+0xac>
    for (block = 0; block < block_num; block++)
 8023f72:	3401      	adds	r4, #1
 8023f74:	454c      	cmp	r4, r9
 8023f76:	d21c      	bcs.n	8023fb2 <_np_cmd_read_bad_blocks+0xa6>
        page = block * page_num;
 8023f78:	fb08 f504 	mul.w	r5, r8, r4
        if (send_progress)
 8023f7c:	2f00      	cmp	r7, #0
 8023f7e:	d1e9      	bne.n	8023f54 <_np_cmd_read_bad_blocks+0x48>
        if ((ret = np_read_bad_block_info_from_page(prog, block, page,
 8023f80:	f10d 0307 	add.w	r3, sp, #7
 8023f84:	462a      	mov	r2, r5
 8023f86:	4621      	mov	r1, r4
 8023f88:	4630      	mov	r0, r6
 8023f8a:	f7ff ff57 	bl	8023e3c <np_read_bad_block_info_from_page>
 8023f8e:	4603      	mov	r3, r0
 8023f90:	b990      	cbnz	r0, 8023fb8 <_np_cmd_read_bad_blocks+0xac>
        if (!is_bad && (ret = np_read_bad_block_info_from_page(prog, block,
 8023f92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8023f96:	2b00      	cmp	r3, #0
 8023f98:	d0e1      	beq.n	8023f5e <_np_cmd_read_bad_blocks+0x52>
        if (is_bad && nand_bad_block_table_add(page))
 8023f9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8023f9e:	2b00      	cmp	r3, #0
 8023fa0:	d0e7      	beq.n	8023f72 <_np_cmd_read_bad_blocks+0x66>
 8023fa2:	4628      	mov	r0, r5
 8023fa4:	f7ff fe08 	bl	8023bb8 <nand_bad_block_table_add>
 8023fa8:	2800      	cmp	r0, #0
 8023faa:	d0e2      	beq.n	8023f72 <_np_cmd_read_bad_blocks+0x66>
            return NP_ERR_BBT_OVERFLOW;
 8023fac:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8023fb0:	e002      	b.n	8023fb8 <_np_cmd_read_bad_blocks+0xac>
    prog->bb_is_read = 1;
 8023fb2:	2301      	movs	r3, #1
 8023fb4:	6373      	str	r3, [r6, #52]	; 0x34
    return 0;
 8023fb6:	2300      	movs	r3, #0
}
 8023fb8:	4618      	mov	r0, r3
 8023fba:	b003      	add	sp, #12
 8023fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023fc0:	08030f9c 	.word	0x08030f9c

08023fc4 <np_cmd_version_get>:
{
 8023fc4:	b500      	push	{lr}
 8023fc6:	b083      	sub	sp, #12
    DEBUG_PRINT("Read version command\r\n");
 8023fc8:	480d      	ldr	r0, [pc, #52]	; (8024000 <np_cmd_version_get+0x3c>)
 8023fca:	f007 fcab 	bl	802b924 <puts>
    resp.header.code = NP_RESP_DATA;
 8023fce:	2300      	movs	r3, #0
 8023fd0:	f88d 3000 	strb.w	r3, [sp]
    resp.header.info = resp_len - sizeof(resp.header);
 8023fd4:	2204      	movs	r2, #4
 8023fd6:	f88d 2001 	strb.w	r2, [sp, #1]
    resp.version.major = SW_VERSION_MAJOR;
 8023fda:	2203      	movs	r2, #3
 8023fdc:	f88d 2002 	strb.w	r2, [sp, #2]
    resp.version.minor = SW_VERSION_MINOR;
 8023fe0:	2205      	movs	r2, #5
 8023fe2:	f88d 2003 	strb.w	r2, [sp, #3]
    resp.version.build = SW_VERSION_BUILD;
 8023fe6:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (np_comm_cb)
 8023fea:	4b06      	ldr	r3, [pc, #24]	; (8024004 <np_cmd_version_get+0x40>)
 8023fec:	681b      	ldr	r3, [r3, #0]
 8023fee:	b11b      	cbz	r3, 8023ff8 <np_cmd_version_get+0x34>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8023ff0:	681b      	ldr	r3, [r3, #0]
 8023ff2:	2106      	movs	r1, #6
 8023ff4:	4668      	mov	r0, sp
 8023ff6:	4798      	blx	r3
}
 8023ff8:	2000      	movs	r0, #0
 8023ffa:	b003      	add	sp, #12
 8023ffc:	f85d fb04 	ldr.w	pc, [sp], #4
 8024000:	08030684 	.word	0x08030684
 8024004:	200012a4 	.word	0x200012a4

08024008 <np_cmd_handler>:

static int np_cmd_handler(np_prog_t *prog)
{
 8024008:	b538      	push	{r3, r4, r5, lr}
    np_cmd_t *cmd;

    if (prog->rx_buf_len < sizeof(np_cmd_t))
 802400a:	6841      	ldr	r1, [r0, #4]
 802400c:	b1c1      	cbz	r1, 8024040 <np_cmd_handler+0x38>
 802400e:	4604      	mov	r4, r0
    {
        ERROR_PRINT("Wrong buffer length for command %lu\r\n",
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
    }
    cmd = (np_cmd_t *)prog->rx_buf;
 8024010:	6803      	ldr	r3, [r0, #0]

    if (!np_cmd_is_valid(cmd->code))
 8024012:	781d      	ldrb	r5, [r3, #0]
 8024014:	4628      	mov	r0, r5
 8024016:	f7ff fece 	bl	8023db6 <np_cmd_is_valid>
 802401a:	b1b8      	cbz	r0, 802404c <np_cmd_handler+0x44>
    {
        ERROR_PRINT("Invalid cmd code %d\r\n", cmd->code);
        return NP_ERR_CMD_INVALID;
    }

    if (!prog->chip_is_conf && cmd_handler[cmd->code].is_chip_cmd)
 802401c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802401e:	b933      	cbnz	r3, 802402e <np_cmd_handler+0x26>
 8024020:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8024024:	4b10      	ldr	r3, [pc, #64]	; (8024068 <np_cmd_handler+0x60>)
 8024026:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802402a:	791b      	ldrb	r3, [r3, #4]
 802402c:	b9ab      	cbnz	r3, 802405a <np_cmd_handler+0x52>
    {
        ERROR_PRINT("Chip is not configured\r\n");
        return NP_ERR_CHIP_NOT_CONF;
    }

    return cmd_handler[cmd->code].exec(prog);
 802402e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024032:	4b0d      	ldr	r3, [pc, #52]	; (8024068 <np_cmd_handler+0x60>)
 8024034:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8024038:	689b      	ldr	r3, [r3, #8]
 802403a:	4620      	mov	r0, r4
 802403c:	4798      	blx	r3
}
 802403e:	bd38      	pop	{r3, r4, r5, pc}
        ERROR_PRINT("Wrong buffer length for command %lu\r\n",
 8024040:	480a      	ldr	r0, [pc, #40]	; (802406c <np_cmd_handler+0x64>)
 8024042:	f007 fc17 	bl	802b874 <printf>
        return NP_ERR_LEN_INVALID;
 8024046:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 802404a:	e7f8      	b.n	802403e <np_cmd_handler+0x36>
        ERROR_PRINT("Invalid cmd code %d\r\n", cmd->code);
 802404c:	4629      	mov	r1, r5
 802404e:	4808      	ldr	r0, [pc, #32]	; (8024070 <np_cmd_handler+0x68>)
 8024050:	f007 fc10 	bl	802b874 <printf>
        return NP_ERR_CMD_INVALID;
 8024054:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 8024058:	e7f1      	b.n	802403e <np_cmd_handler+0x36>
        ERROR_PRINT("Chip is not configured\r\n");
 802405a:	4806      	ldr	r0, [pc, #24]	; (8024074 <np_cmd_handler+0x6c>)
 802405c:	f007 fc62 	bl	802b924 <puts>
        return NP_ERR_CHIP_NOT_CONF;
 8024060:	f06f 0069 	mvn.w	r0, #105	; 0x69
 8024064:	e7eb      	b.n	802403e <np_cmd_handler+0x36>
 8024066:	bf00      	nop
 8024068:	08030f00 	.word	0x08030f00
 802406c:	0803069c 	.word	0x0803069c
 8024070:	080306cc 	.word	0x080306cc
 8024074:	080306ec 	.word	0x080306ec

08024078 <np_packet_handler>:

static void np_packet_handler(np_prog_t *prog)
{
 8024078:	b538      	push	{r3, r4, r5, lr}
 802407a:	4605      	mov	r5, r0
    int ret;

    do
    {
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 802407c:	4b0b      	ldr	r3, [pc, #44]	; (80240ac <np_packet_handler+0x34>)
 802407e:	681b      	ldr	r3, [r3, #0]
 8024080:	689b      	ldr	r3, [r3, #8]
 8024082:	4628      	mov	r0, r5
 8024084:	4798      	blx	r3
 8024086:	6068      	str	r0, [r5, #4]
        if (!prog->rx_buf_len)
 8024088:	b170      	cbz	r0, 80240a8 <np_packet_handler+0x30>
            break;

        ret = np_cmd_handler(prog);
 802408a:	4628      	mov	r0, r5
 802408c:	f7ff ffbc 	bl	8024008 <np_cmd_handler>
 8024090:	4604      	mov	r4, r0

        np_comm_cb->consume();
 8024092:	4b06      	ldr	r3, [pc, #24]	; (80240ac <np_packet_handler+0x34>)
 8024094:	681b      	ldr	r3, [r3, #0]
 8024096:	68db      	ldr	r3, [r3, #12]
 8024098:	4798      	blx	r3

        if (ret < 0)
 802409a:	2c00      	cmp	r4, #0
 802409c:	daee      	bge.n	802407c <np_packet_handler+0x4>
            np_send_error(-ret);
 802409e:	4264      	negs	r4, r4
 80240a0:	b2e0      	uxtb	r0, r4
 80240a2:	f7ff fdeb 	bl	8023c7c <np_send_error>
 80240a6:	e7e9      	b.n	802407c <np_packet_handler+0x4>
    }
    while (1);
}
 80240a8:	bd38      	pop	{r3, r4, r5, pc}
 80240aa:	bf00      	nop
 80240ac:	200012a4 	.word	0x200012a4

080240b0 <np_cmd_fw_update_start>:
{
 80240b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80240b4:	b084      	sub	sp, #16
    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 80240b6:	6841      	ldr	r1, [r0, #4]
 80240b8:	2911      	cmp	r1, #17
 80240ba:	d950      	bls.n	802415e <np_cmd_fw_update_start+0xae>
 80240bc:	4604      	mov	r4, r0
    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 80240be:	6803      	ldr	r3, [r0, #0]
    addr = write_start_cmd->addr;
 80240c0:	f8d3 5001 	ldr.w	r5, [r3, #1]
 80240c4:	f8d3 8005 	ldr.w	r8, [r3, #5]
    len = write_start_cmd->len;
 80240c8:	f8d3 6009 	ldr.w	r6, [r3, #9]
 80240cc:	f8d3 700d 	ldr.w	r7, [r3, #13]
    DEBUG_PRINT("Write at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n", addr,
 80240d0:	9600      	str	r6, [sp, #0]
 80240d2:	9701      	str	r7, [sp, #4]
 80240d4:	462a      	mov	r2, r5
 80240d6:	4643      	mov	r3, r8
 80240d8:	4839      	ldr	r0, [pc, #228]	; (80241c0 <np_cmd_fw_update_start+0x110>)
 80240da:	f007 fbcb 	bl	802b874 <printf>
    prog->base_addr = FLASH_START_ADDR;
 80240de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80240e2:	2300      	movs	r3, #0
 80240e4:	e9c4 2306 	strd	r2, r3, [r4, #24]
    prog->page_size = FLASH_PAGE_SIZE;
 80240e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80240ec:	6223      	str	r3, [r4, #32]
    prog->block_size = FLASH_BLOCK_SIZE;
 80240ee:	6263      	str	r3, [r4, #36]	; 0x24
    prog->total_size = FLASH_SIZE;
 80240f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80240f4:	2300      	movs	r3, #0
 80240f6:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    if (addr + len > prog->base_addr + prog->total_size)
 80240fa:	19ab      	adds	r3, r5, r6
 80240fc:	eb48 0207 	adc.w	r2, r8, r7
 8024100:	4930      	ldr	r1, [pc, #192]	; (80241c4 <np_cmd_fw_update_start+0x114>)
 8024102:	4299      	cmp	r1, r3
 8024104:	f04f 0300 	mov.w	r3, #0
 8024108:	4193      	sbcs	r3, r2
 802410a:	d32e      	bcc.n	802416a <np_cmd_fw_update_start+0xba>
    if (addr % prog->page_size)
 802410c:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8024110:	2b00      	cmp	r3, #0
 8024112:	d138      	bne.n	8024186 <np_cmd_fw_update_start+0xd6>
    if (!len)
 8024114:	ea56 0307 	orrs.w	r3, r6, r7
 8024118:	d040      	beq.n	802419c <np_cmd_fw_update_start+0xec>
    if (len % prog->page_size)
 802411a:	f3c6 030a 	ubfx	r3, r6, #0, #11
 802411e:	2b00      	cmp	r3, #0
 8024120:	d142      	bne.n	80241a8 <np_cmd_fw_update_start+0xf8>
    prog->addr = addr;
 8024122:	60a5      	str	r5, [r4, #8]
 8024124:	f8c4 800c 	str.w	r8, [r4, #12]
    prog->len = len;
 8024128:	6126      	str	r6, [r4, #16]
 802412a:	6167      	str	r7, [r4, #20]
    prog->addr_is_set = 1;
 802412c:	2301      	movs	r3, #1
 802412e:	6323      	str	r3, [r4, #48]	; 0x30
    prog->page.page = addr / prog->page_size;
 8024130:	0aed      	lsrs	r5, r5, #11
 8024132:	ea45 5548 	orr.w	r5, r5, r8, lsl #21
 8024136:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 802413a:	f8c3 51fc 	str.w	r5, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 802413e:	2200      	movs	r2, #0
 8024140:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    prog->bytes_written = 0;
 8024144:	f504 5408 	add.w	r4, r4, #8704	; 0x2200
 8024148:	2200      	movs	r2, #0
 802414a:	2300      	movs	r3, #0
 802414c:	e9c4 2302 	strd	r2, r3, [r4, #8]
    prog->bytes_ack = 0;
 8024150:	e9c4 2304 	strd	r2, r3, [r4, #16]
    return np_send_ok_status();
 8024154:	f7ff fd7c 	bl	8023c50 <np_send_ok_status>
}
 8024158:	b004      	add	sp, #16
 802415a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ERROR_PRINT("Wrong buffer length for write start command %lu\r\n",
 802415e:	481a      	ldr	r0, [pc, #104]	; (80241c8 <np_cmd_fw_update_start+0x118>)
 8024160:	f007 fb88 	bl	802b874 <printf>
        return NP_ERR_LEN_INVALID;
 8024164:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 8024168:	e7f6      	b.n	8024158 <np_cmd_fw_update_start+0xa8>
        ERROR_PRINT("Write address 0x%" PRIx64 "+0x%" PRIx64
 802416a:	4a16      	ldr	r2, [pc, #88]	; (80241c4 <np_cmd_fw_update_start+0x114>)
 802416c:	2300      	movs	r3, #0
 802416e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024172:	9600      	str	r6, [sp, #0]
 8024174:	9701      	str	r7, [sp, #4]
 8024176:	462a      	mov	r2, r5
 8024178:	4643      	mov	r3, r8
 802417a:	4814      	ldr	r0, [pc, #80]	; (80241cc <np_cmd_fw_update_start+0x11c>)
 802417c:	f007 fb7a 	bl	802b874 <printf>
        return NP_ERR_ADDR_EXCEEDED;
 8024180:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8024184:	e7e8      	b.n	8024158 <np_cmd_fw_update_start+0xa8>
        ERROR_PRINT("Address 0x%" PRIx64
 8024186:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802418a:	9300      	str	r3, [sp, #0]
 802418c:	462a      	mov	r2, r5
 802418e:	4643      	mov	r3, r8
 8024190:	480f      	ldr	r0, [pc, #60]	; (80241d0 <np_cmd_fw_update_start+0x120>)
 8024192:	f007 fb6f 	bl	802b874 <printf>
        return NP_ERR_ADDR_NOT_ALIGN;
 8024196:	f06f 0065 	mvn.w	r0, #101	; 0x65
 802419a:	e7dd      	b.n	8024158 <np_cmd_fw_update_start+0xa8>
        ERROR_PRINT("Length is 0\r\n");
 802419c:	480d      	ldr	r0, [pc, #52]	; (80241d4 <np_cmd_fw_update_start+0x124>)
 802419e:	f007 fbc1 	bl	802b924 <puts>
        return NP_ERR_LEN_INVALID;
 80241a2:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 80241a6:	e7d7      	b.n	8024158 <np_cmd_fw_update_start+0xa8>
        ERROR_PRINT("Length 0x%" PRIx64
 80241a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80241ac:	9300      	str	r3, [sp, #0]
 80241ae:	4632      	mov	r2, r6
 80241b0:	463b      	mov	r3, r7
 80241b2:	4809      	ldr	r0, [pc, #36]	; (80241d8 <np_cmd_fw_update_start+0x128>)
 80241b4:	f007 fb5e 	bl	802b874 <printf>
        return NP_ERR_LEN_NOT_ALIGN;
 80241b8:	f06f 006d 	mvn.w	r0, #109	; 0x6d
 80241bc:	e7cc      	b.n	8024158 <np_cmd_fw_update_start+0xa8>
 80241be:	bf00      	nop
 80241c0:	08030748 	.word	0x08030748
 80241c4:	08040000 	.word	0x08040000
 80241c8:	0803070c 	.word	0x0803070c
 80241cc:	08030770 	.word	0x08030770
 80241d0:	080307b4 	.word	0x080307b4
 80241d4:	080307f0 	.word	0x080307f0
 80241d8:	08030804 	.word	0x08030804

080241dc <np_cmd_nand_conf>:
{
 80241dc:	b538      	push	{r3, r4, r5, lr}
 80241de:	4604      	mov	r4, r0
    DEBUG_PRINT("Chip configure command\r\n");
 80241e0:	4818      	ldr	r0, [pc, #96]	; (8024244 <np_cmd_nand_conf+0x68>)
 80241e2:	f007 fb9f 	bl	802b924 <puts>
    if (prog->rx_buf_len < sizeof(np_conf_cmd_t))
 80241e6:	6861      	ldr	r1, [r4, #4]
 80241e8:	2916      	cmp	r1, #22
 80241ea:	d91d      	bls.n	8024228 <np_cmd_nand_conf+0x4c>
    conf_cmd = (np_conf_cmd_t *)prog->rx_buf;
 80241ec:	6825      	ldr	r5, [r4, #0]
    np_fill_chip_info(conf_cmd, prog);
 80241ee:	4621      	mov	r1, r4
 80241f0:	4628      	mov	r0, r5
 80241f2:	f7ff fdbf 	bl	8023d74 <np_fill_chip_info>
    np_print_chip_info(prog);
 80241f6:	4620      	mov	r0, r4
 80241f8:	f7ff fde2 	bl	8023dc0 <np_print_chip_info>
    prog->hal = conf_cmd->hal;
 80241fc:	786b      	ldrb	r3, [r5, #1]
 80241fe:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8024202:	f882 3241 	strb.w	r3, [r2, #577]	; 0x241
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8024206:	4a10      	ldr	r2, [pc, #64]	; (8024248 <np_cmd_nand_conf+0x6c>)
 8024208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802420c:	681b      	ldr	r3, [r3, #0]
        prog->rx_buf_len - sizeof(np_conf_cmd_t)))
 802420e:	6861      	ldr	r1, [r4, #4]
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8024210:	3917      	subs	r1, #23
 8024212:	f105 0017 	add.w	r0, r5, #23
 8024216:	4798      	blx	r3
 8024218:	b960      	cbnz	r0, 8024234 <np_cmd_nand_conf+0x58>
    nand_bad_block_table_init();
 802421a:	f7ff fcbf 	bl	8023b9c <nand_bad_block_table_init>
    prog->bb_is_read = 0;
 802421e:	2300      	movs	r3, #0
 8024220:	6363      	str	r3, [r4, #52]	; 0x34
    return np_send_ok_status();
 8024222:	f7ff fd15 	bl	8023c50 <np_send_ok_status>
}
 8024226:	bd38      	pop	{r3, r4, r5, pc}
        ERROR_PRINT("Wrong buffer length for configuration command %lu\r\n",
 8024228:	4808      	ldr	r0, [pc, #32]	; (802424c <np_cmd_nand_conf+0x70>)
 802422a:	f007 fb23 	bl	802b874 <printf>
        return NP_ERR_LEN_INVALID;
 802422e:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 8024232:	e7f8      	b.n	8024226 <np_cmd_nand_conf+0x4a>
        ERROR_PRINT("Wrong buffer length for hal configuration command %lu\r\n",
 8024234:	6861      	ldr	r1, [r4, #4]
 8024236:	4806      	ldr	r0, [pc, #24]	; (8024250 <np_cmd_nand_conf+0x74>)
 8024238:	f007 fb1c 	bl	802b874 <printf>
        return NP_ERR_LEN_INVALID;
 802423c:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 8024240:	e7f1      	b.n	8024226 <np_cmd_nand_conf+0x4a>
 8024242:	bf00      	nop
 8024244:	08030840 	.word	0x08030840
 8024248:	08030f9c 	.word	0x08030f9c
 802424c:	08030858 	.word	0x08030858
 8024250:	08030894 	.word	0x08030894

08024254 <np_cmd_nand_write_start>:
{
 8024254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024258:	b085      	sub	sp, #20
    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 802425a:	6841      	ldr	r1, [r0, #4]
 802425c:	2911      	cmp	r1, #17
 802425e:	f240 8090 	bls.w	8024382 <np_cmd_nand_write_start+0x12e>
 8024262:	4604      	mov	r4, r0
    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 8024264:	6806      	ldr	r6, [r0, #0]
    if (hal[prog->hal]->enable_hw_ecc)
 8024266:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 802426a:	f893 2241 	ldrb.w	r2, [r3, #577]	; 0x241
 802426e:	4b6b      	ldr	r3, [pc, #428]	; (802441c <np_cmd_nand_write_start+0x1c8>)
 8024270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024276:	b11b      	cbz	r3, 8024280 <np_cmd_nand_write_start+0x2c>
        hal[prog->hal]->enable_hw_ecc(write_start_cmd->flags.enable_hw_ecc);
 8024278:	7c70      	ldrb	r0, [r6, #17]
 802427a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 802427e:	4798      	blx	r3
    addr = write_start_cmd->addr;
 8024280:	f8d6 5001 	ldr.w	r5, [r6, #1]
 8024284:	f8d6 9005 	ldr.w	r9, [r6, #5]
    len = write_start_cmd->len;
 8024288:	f8d6 7009 	ldr.w	r7, [r6, #9]
 802428c:	f8d6 800d 	ldr.w	r8, [r6, #13]
    DEBUG_PRINT("Write at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n",
 8024290:	9700      	str	r7, [sp, #0]
 8024292:	f8cd 8004 	str.w	r8, [sp, #4]
 8024296:	462a      	mov	r2, r5
 8024298:	464b      	mov	r3, r9
 802429a:	4861      	ldr	r0, [pc, #388]	; (8024420 <np_cmd_nand_write_start+0x1cc>)
 802429c:	f007 faea 	bl	802b874 <printf>
    if (write_start_cmd->flags.inc_spare)
 80242a0:	7c73      	ldrb	r3, [r6, #17]
 80242a2:	f013 0f02 	tst.w	r3, #2
 80242a6:	d072      	beq.n	802438e <np_cmd_nand_write_start+0x13a>
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 80242a8:	f504 5108 	add.w	r1, r4, #8704	; 0x2200
 80242ac:	3130      	adds	r1, #48	; 0x30
 80242ae:	f504 5b00 	add.w	fp, r4, #8192	; 0x2000
 80242b2:	f8db a228 	ldr.w	sl, [fp, #552]	; 0x228
 80242b6:	4652      	mov	r2, sl
 80242b8:	2300      	movs	r3, #0
 80242ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80242be:	f7fe fc4f 	bl	8022b60 <__aeabi_uldivmod>
        pages_in_block = prog->chip_info.block_size /
 80242c2:	f8db 322c 	ldr.w	r3, [fp, #556]	; 0x22c
 80242c6:	fbb3 f3fa 	udiv	r3, r3, sl
            prog->chip_info.spare_size;
 80242ca:	f8db 2238 	ldr.w	r2, [fp, #568]	; 0x238
        prog->page_size = prog->chip_info.page_size +
 80242ce:	4452      	add	r2, sl
 80242d0:	6222      	str	r2, [r4, #32]
        prog->block_size = pages_in_block * prog->page_size;
 80242d2:	fb02 f303 	mul.w	r3, r2, r3
 80242d6:	6263      	str	r3, [r4, #36]	; 0x24
        prog->total_size = (uint64_t)pages * prog->page_size;
 80242d8:	fba0 0202 	umull	r0, r2, r0, r2
 80242dc:	62a0      	str	r0, [r4, #40]	; 0x28
 80242de:	62e2      	str	r2, [r4, #44]	; 0x2c
    if (addr + len > prog->total_size)
 80242e0:	19e8      	adds	r0, r5, r7
 80242e2:	eb49 0308 	adc.w	r3, r9, r8
 80242e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80242e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80242ea:	4281      	cmp	r1, r0
 80242ec:	eb72 0303 	sbcs.w	r3, r2, r3
 80242f0:	d35d      	bcc.n	80243ae <np_cmd_nand_write_start+0x15a>
    if (addr % prog->page_size)
 80242f2:	f8d4 a020 	ldr.w	sl, [r4, #32]
 80242f6:	f04f 0b00 	mov.w	fp, #0
 80242fa:	4652      	mov	r2, sl
 80242fc:	465b      	mov	r3, fp
 80242fe:	4628      	mov	r0, r5
 8024300:	4649      	mov	r1, r9
 8024302:	f7fe fc2d 	bl	8022b60 <__aeabi_uldivmod>
 8024306:	4313      	orrs	r3, r2
 8024308:	d15e      	bne.n	80243c8 <np_cmd_nand_write_start+0x174>
    if (!len)
 802430a:	ea57 0308 	orrs.w	r3, r7, r8
 802430e:	d065      	beq.n	80243dc <np_cmd_nand_write_start+0x188>
    if (len % prog->page_size)
 8024310:	4652      	mov	r2, sl
 8024312:	465b      	mov	r3, fp
 8024314:	4638      	mov	r0, r7
 8024316:	4641      	mov	r1, r8
 8024318:	f7fe fc22 	bl	8022b60 <__aeabi_uldivmod>
 802431c:	4313      	orrs	r3, r2
 802431e:	d163      	bne.n	80243e8 <np_cmd_nand_write_start+0x194>
    prog->skip_bb = write_start_cmd->flags.skip_bb;
 8024320:	7c73      	ldrb	r3, [r6, #17]
 8024322:	f003 0301 	and.w	r3, r3, #1
 8024326:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 802432a:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
    if (prog->skip_bb && !prog->bb_is_read &&
 802432e:	b113      	cbz	r3, 8024336 <np_cmd_nand_write_start+0xe2>
 8024330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024332:	2b00      	cmp	r3, #0
 8024334:	d062      	beq.n	80243fc <np_cmd_nand_write_start+0x1a8>
    if (prog->page_size > sizeof(prog->page.buf))
 8024336:	6a21      	ldr	r1, [r4, #32]
 8024338:	f5b1 5f07 	cmp.w	r1, #8640	; 0x21c0
 802433c:	d865      	bhi.n	802440a <np_cmd_nand_write_start+0x1b6>
    prog->addr = addr;
 802433e:	60a5      	str	r5, [r4, #8]
 8024340:	f8c4 900c 	str.w	r9, [r4, #12]
    prog->len = len;
 8024344:	6127      	str	r7, [r4, #16]
 8024346:	f8c4 8014 	str.w	r8, [r4, #20]
    prog->addr_is_set = 1;
 802434a:	2301      	movs	r3, #1
 802434c:	6323      	str	r3, [r4, #48]	; 0x30
    prog->page.page = addr / prog->page_size;
 802434e:	2600      	movs	r6, #0
 8024350:	460a      	mov	r2, r1
 8024352:	4633      	mov	r3, r6
 8024354:	4628      	mov	r0, r5
 8024356:	4649      	mov	r1, r9
 8024358:	f7fe fc02 	bl	8022b60 <__aeabi_uldivmod>
 802435c:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8024360:	f8c3 01fc 	str.w	r0, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 8024364:	f8c3 6200 	str.w	r6, [r3, #512]	; 0x200
    prog->bytes_written = 0;
 8024368:	f504 5408 	add.w	r4, r4, #8704	; 0x2200
 802436c:	2200      	movs	r2, #0
 802436e:	2300      	movs	r3, #0
 8024370:	e9c4 2302 	strd	r2, r3, [r4, #8]
    prog->bytes_ack = 0;
 8024374:	e9c4 2304 	strd	r2, r3, [r4, #16]
    return np_send_ok_status();
 8024378:	f7ff fc6a 	bl	8023c50 <np_send_ok_status>
}
 802437c:	b005      	add	sp, #20
 802437e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ERROR_PRINT("Wrong buffer length for write start command %lu\r\n",
 8024382:	4828      	ldr	r0, [pc, #160]	; (8024424 <np_cmd_nand_write_start+0x1d0>)
 8024384:	f007 fa76 	bl	802b874 <printf>
        return NP_ERR_LEN_INVALID;
 8024388:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 802438c:	e7f6      	b.n	802437c <np_cmd_nand_write_start+0x128>
        prog->page_size = prog->chip_info.page_size;
 802438e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8024392:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8024396:	6222      	str	r2, [r4, #32]
        prog->block_size = prog->chip_info.block_size;
 8024398:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 802439c:	6263      	str	r3, [r4, #36]	; 0x24
        prog->total_size = prog->chip_info.total_size;
 802439e:	f504 5308 	add.w	r3, r4, #8704	; 0x2200
 80243a2:	3330      	adds	r3, #48	; 0x30
 80243a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243a8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 80243ac:	e798      	b.n	80242e0 <np_cmd_nand_write_start+0x8c>
        ERROR_PRINT("Write address 0x%" PRIx64 "+0x%" PRIx64
 80243ae:	9102      	str	r1, [sp, #8]
 80243b0:	9203      	str	r2, [sp, #12]
 80243b2:	9700      	str	r7, [sp, #0]
 80243b4:	f8cd 8004 	str.w	r8, [sp, #4]
 80243b8:	462a      	mov	r2, r5
 80243ba:	464b      	mov	r3, r9
 80243bc:	481a      	ldr	r0, [pc, #104]	; (8024428 <np_cmd_nand_write_start+0x1d4>)
 80243be:	f007 fa59 	bl	802b874 <printf>
        return NP_ERR_ADDR_EXCEEDED;
 80243c2:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80243c6:	e7d9      	b.n	802437c <np_cmd_nand_write_start+0x128>
        ERROR_PRINT("Address 0x%" PRIx64
 80243c8:	f8cd a000 	str.w	sl, [sp]
 80243cc:	462a      	mov	r2, r5
 80243ce:	464b      	mov	r3, r9
 80243d0:	4816      	ldr	r0, [pc, #88]	; (802442c <np_cmd_nand_write_start+0x1d8>)
 80243d2:	f007 fa4f 	bl	802b874 <printf>
        return NP_ERR_ADDR_NOT_ALIGN;
 80243d6:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80243da:	e7cf      	b.n	802437c <np_cmd_nand_write_start+0x128>
        ERROR_PRINT("Length is 0\r\n");
 80243dc:	4814      	ldr	r0, [pc, #80]	; (8024430 <np_cmd_nand_write_start+0x1dc>)
 80243de:	f007 faa1 	bl	802b924 <puts>
        return NP_ERR_LEN_INVALID;
 80243e2:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 80243e6:	e7c9      	b.n	802437c <np_cmd_nand_write_start+0x128>
        ERROR_PRINT("Length 0x%" PRIx64
 80243e8:	f8cd a000 	str.w	sl, [sp]
 80243ec:	463a      	mov	r2, r7
 80243ee:	4643      	mov	r3, r8
 80243f0:	4810      	ldr	r0, [pc, #64]	; (8024434 <np_cmd_nand_write_start+0x1e0>)
 80243f2:	f007 fa3f 	bl	802b874 <printf>
        return NP_ERR_LEN_NOT_ALIGN;
 80243f6:	f06f 006d 	mvn.w	r0, #109	; 0x6d
 80243fa:	e7bf      	b.n	802437c <np_cmd_nand_write_start+0x128>
        (ret = _np_cmd_read_bad_blocks(prog, false)))
 80243fc:	2100      	movs	r1, #0
 80243fe:	4620      	mov	r0, r4
 8024400:	f7ff fd84 	bl	8023f0c <_np_cmd_read_bad_blocks>
    if (prog->skip_bb && !prog->bb_is_read &&
 8024404:	2800      	cmp	r0, #0
 8024406:	d096      	beq.n	8024336 <np_cmd_nand_write_start+0xe2>
 8024408:	e7b8      	b.n	802437c <np_cmd_nand_write_start+0x128>
        ERROR_PRINT("Page size 0x%lx"
 802440a:	f44f 5207 	mov.w	r2, #8640	; 0x21c0
 802440e:	480a      	ldr	r0, [pc, #40]	; (8024438 <np_cmd_nand_write_start+0x1e4>)
 8024410:	f007 fa30 	bl	802b874 <printf>
        return NP_ERR_BUF_OVERFLOW;
 8024414:	f06f 006c 	mvn.w	r0, #108	; 0x6c
 8024418:	e7b0      	b.n	802437c <np_cmd_nand_write_start+0x128>
 802441a:	bf00      	nop
 802441c:	08030f9c 	.word	0x08030f9c
 8024420:	08030748 	.word	0x08030748
 8024424:	0803070c 	.word	0x0803070c
 8024428:	080308d4 	.word	0x080308d4
 802442c:	080307b4 	.word	0x080307b4
 8024430:	080307f0 	.word	0x080307f0
 8024434:	08030804 	.word	0x08030804
 8024438:	08030918 	.word	0x08030918

0802443c <np_nand_handle_status>:
{
 802443c:	b510      	push	{r4, lr}
 802443e:	4604      	mov	r4, r0
    switch (hal[prog->hal]->read_status())
 8024440:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8024444:	f893 2241 	ldrb.w	r2, [r3, #577]	; 0x241
 8024448:	4b21      	ldr	r3, [pc, #132]	; (80244d0 <np_nand_handle_status+0x94>)
 802444a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802444e:	69db      	ldr	r3, [r3, #28]
 8024450:	4798      	blx	r3
 8024452:	2801      	cmp	r0, #1
 8024454:	d01e      	beq.n	8024494 <np_nand_handle_status+0x58>
 8024456:	2802      	cmp	r0, #2
 8024458:	d00d      	beq.n	8024476 <np_nand_handle_status+0x3a>
 802445a:	b198      	cbz	r0, 8024484 <np_nand_handle_status+0x48>
        ERROR_PRINT("Unknown NAND status\r\n");
 802445c:	481d      	ldr	r0, [pc, #116]	; (80244d4 <np_nand_handle_status+0x98>)
 802445e:	f007 fa61 	bl	802b924 <puts>
        prog->nand_wr_in_progress = 0;
 8024462:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 8024466:	2300      	movs	r3, #0
 8024468:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
        prog->nand_timeout = 0;
 802446c:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
        return -1;
 8024470:	f04f 30ff 	mov.w	r0, #4294967295
 8024474:	e00d      	b.n	8024492 <np_nand_handle_status+0x56>
        if (np_send_bad_block_info(prog->addr, prog->block_size, false))
 8024476:	2300      	movs	r3, #0
 8024478:	6a62      	ldr	r2, [r4, #36]	; 0x24
 802447a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 802447e:	f7ff fc17 	bl	8023cb0 <np_send_bad_block_info>
 8024482:	bb10      	cbnz	r0, 80244ca <np_nand_handle_status+0x8e>
        prog->nand_wr_in_progress = 0;
 8024484:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 8024488:	2000      	movs	r0, #0
 802448a:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
        prog->nand_timeout = 0;
 802448e:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
}
 8024492:	bd10      	pop	{r4, pc}
        if (++prog->nand_timeout == NP_NAND_TIMEOUT)
 8024494:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8024498:	f8d2 3220 	ldr.w	r3, [r2, #544]	; 0x220
 802449c:	3301      	adds	r3, #1
 802449e:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
 80244a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80244a6:	d001      	beq.n	80244ac <np_nand_handle_status+0x70>
    return 0;
 80244a8:	2000      	movs	r0, #0
 80244aa:	e7f2      	b.n	8024492 <np_nand_handle_status+0x56>
            ERROR_PRINT("NAND write timeout at 0x%" PRIx64 "\r\n", prog->addr);
 80244ac:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80244b0:	4809      	ldr	r0, [pc, #36]	; (80244d8 <np_nand_handle_status+0x9c>)
 80244b2:	f007 f9df 	bl	802b874 <printf>
            prog->nand_wr_in_progress = 0;
 80244b6:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 80244ba:	2300      	movs	r3, #0
 80244bc:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
            prog->nand_timeout = 0;
 80244c0:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
            return -1;
 80244c4:	f04f 30ff 	mov.w	r0, #4294967295
 80244c8:	e7e3      	b.n	8024492 <np_nand_handle_status+0x56>
            return -1;
 80244ca:	f04f 30ff 	mov.w	r0, #4294967295
 80244ce:	e7e0      	b.n	8024492 <np_nand_handle_status+0x56>
 80244d0:	08030f9c 	.word	0x08030f9c
 80244d4:	08030668 	.word	0x08030668
 80244d8:	08030950 	.word	0x08030950

080244dc <np_nand_handler>:

static void np_nand_handler(np_prog_t *prog)
{
 80244dc:	b508      	push	{r3, lr}
    if (prog->nand_wr_in_progress)
 80244de:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 80244e2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80244e6:	b903      	cbnz	r3, 80244ea <np_nand_handler+0xe>
    {
        if (np_nand_handle_status(prog))
            np_send_error(NP_ERR_NAND_WR);
    }
}
 80244e8:	bd08      	pop	{r3, pc}
        if (np_nand_handle_status(prog))
 80244ea:	f7ff ffa7 	bl	802443c <np_nand_handle_status>
 80244ee:	2800      	cmp	r0, #0
 80244f0:	d0fa      	beq.n	80244e8 <np_nand_handler+0xc>
            np_send_error(NP_ERR_NAND_WR);
 80244f2:	2099      	movs	r0, #153	; 0x99
 80244f4:	f7ff fbc2 	bl	8023c7c <np_send_error>
}
 80244f8:	e7f6      	b.n	80244e8 <np_nand_handler+0xc>
	...

080244fc <np_nand_write>:
{   
 80244fc:	b530      	push	{r4, r5, lr}
 80244fe:	b083      	sub	sp, #12
 8024500:	4604      	mov	r4, r0
    if (prog->nand_wr_in_progress)
 8024502:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8024506:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 802450a:	b163      	cbz	r3, 8024526 <np_nand_write+0x2a>
        DEBUG_PRINT("Wait for previous NAND write\r\n");
 802450c:	4815      	ldr	r0, [pc, #84]	; (8024564 <np_nand_write+0x68>)
 802450e:	f007 fa09 	bl	802b924 <puts>
            if (np_nand_handle_status(prog))
 8024512:	4620      	mov	r0, r4
 8024514:	f7ff ff92 	bl	802443c <np_nand_handle_status>
 8024518:	bb00      	cbnz	r0, 802455c <np_nand_write+0x60>
        while (prog->nand_wr_in_progress);
 802451a:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 802451e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8024522:	2b00      	cmp	r3, #0
 8024524:	d1f5      	bne.n	8024512 <np_nand_write+0x16>
    DEBUG_PRINT("NAND write at 0x%" PRIx64 " %lu bytes\r\n", prog->addr,
 8024526:	6a23      	ldr	r3, [r4, #32]
 8024528:	9300      	str	r3, [sp, #0]
 802452a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 802452e:	480e      	ldr	r0, [pc, #56]	; (8024568 <np_nand_write+0x6c>)
 8024530:	f007 f9a0 	bl	802b874 <printf>
    hal[prog->hal]->write_page_async(prog->page.buf, prog->page.page,
 8024534:	f504 5500 	add.w	r5, r4, #8192	; 0x2000
 8024538:	f895 2241 	ldrb.w	r2, [r5, #577]	; 0x241
 802453c:	4b0b      	ldr	r3, [pc, #44]	; (802456c <np_nand_write+0x70>)
 802453e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024542:	699b      	ldr	r3, [r3, #24]
 8024544:	6a22      	ldr	r2, [r4, #32]
 8024546:	f8d5 11fc 	ldr.w	r1, [r5, #508]	; 0x1fc
 802454a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 802454e:	4798      	blx	r3
    prog->nand_wr_in_progress = 1;
 8024550:	2301      	movs	r3, #1
 8024552:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
    return 0;
 8024556:	2000      	movs	r0, #0
}
 8024558:	b003      	add	sp, #12
 802455a:	bd30      	pop	{r4, r5, pc}
                return -1;
 802455c:	f04f 30ff 	mov.w	r0, #4294967295
 8024560:	e7fa      	b.n	8024558 <np_nand_write+0x5c>
 8024562:	bf00      	nop
 8024564:	08030978 	.word	0x08030978
 8024568:	08030998 	.word	0x08030998
 802456c:	08030f9c 	.word	0x08030f9c

08024570 <np_nand_read>:
{
 8024570:	b570      	push	{r4, r5, r6, lr}
 8024572:	4605      	mov	r5, r0
 8024574:	460c      	mov	r4, r1
 8024576:	4610      	mov	r0, r2
    status = hal[prog->hal]->read_page(page->buf, page->page, page_size);
 8024578:	9a05      	ldr	r2, [sp, #20]
 802457a:	f502 5c00 	add.w	ip, r2, #8192	; 0x2000
 802457e:	f89c 1241 	ldrb.w	r1, [ip, #577]	; 0x241
 8024582:	4a14      	ldr	r2, [pc, #80]	; (80245d4 <np_nand_read+0x64>)
 8024584:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8024588:	6916      	ldr	r6, [r2, #16]
 802458a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
 802458e:	461a      	mov	r2, r3
 8024590:	f8d1 11c0 	ldr.w	r1, [r1, #448]	; 0x1c0
 8024594:	47b0      	blx	r6
    switch (status)
 8024596:	2802      	cmp	r0, #2
 8024598:	d008      	beq.n	80245ac <np_nand_read+0x3c>
 802459a:	2803      	cmp	r0, #3
 802459c:	d010      	beq.n	80245c0 <np_nand_read+0x50>
 802459e:	b1b0      	cbz	r0, 80245ce <np_nand_read+0x5e>
        ERROR_PRINT("Unknown NAND status\r\n");
 80245a0:	480d      	ldr	r0, [pc, #52]	; (80245d8 <np_nand_read+0x68>)
 80245a2:	f007 f9bf 	bl	802b924 <puts>
        return -1;
 80245a6:	f04f 30ff 	mov.w	r0, #4294967295
 80245aa:	e011      	b.n	80245d0 <np_nand_read+0x60>
        if (np_send_bad_block_info(addr, block_size, false))
 80245ac:	2300      	movs	r3, #0
 80245ae:	9a04      	ldr	r2, [sp, #16]
 80245b0:	4628      	mov	r0, r5
 80245b2:	4621      	mov	r1, r4
 80245b4:	f7ff fb7c 	bl	8023cb0 <np_send_bad_block_info>
 80245b8:	b150      	cbz	r0, 80245d0 <np_nand_read+0x60>
            return -1;
 80245ba:	f04f 30ff 	mov.w	r0, #4294967295
 80245be:	e007      	b.n	80245d0 <np_nand_read+0x60>
        ERROR_PRINT("NAND write timeout at 0x%" PRIx64 "\r\n", addr);
 80245c0:	462a      	mov	r2, r5
 80245c2:	4623      	mov	r3, r4
 80245c4:	4805      	ldr	r0, [pc, #20]	; (80245dc <np_nand_read+0x6c>)
 80245c6:	f007 f955 	bl	802b874 <printf>
    return 0;
 80245ca:	2000      	movs	r0, #0
        break;
 80245cc:	e000      	b.n	80245d0 <np_nand_read+0x60>
    switch (status)
 80245ce:	2000      	movs	r0, #0
}
 80245d0:	bd70      	pop	{r4, r5, r6, pc}
 80245d2:	bf00      	nop
 80245d4:	08030f9c 	.word	0x08030f9c
 80245d8:	08030668 	.word	0x08030668
 80245dc:	08030950 	.word	0x08030950

080245e0 <np_nand_erase>:
{
 80245e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80245e4:	4605      	mov	r5, r0
 80245e6:	460c      	mov	r4, r1
    uint64_t addr = page * prog->chip_info.page_size;
 80245e8:	f500 5600 	add.w	r6, r0, #8192	; 0x2000
 80245ec:	f8d6 7228 	ldr.w	r7, [r6, #552]	; 0x228
 80245f0:	fb01 f707 	mul.w	r7, r1, r7
 80245f4:	f04f 0800 	mov.w	r8, #0
    DEBUG_PRINT("NAND erase at 0x%" PRIx64 "\r\n", addr);
 80245f8:	463a      	mov	r2, r7
 80245fa:	4643      	mov	r3, r8
 80245fc:	4816      	ldr	r0, [pc, #88]	; (8024658 <np_nand_erase+0x78>)
 80245fe:	f007 f939 	bl	802b874 <printf>
    status = hal[prog->hal]->erase_block(page);
 8024602:	f896 2241 	ldrb.w	r2, [r6, #577]	; 0x241
 8024606:	4b15      	ldr	r3, [pc, #84]	; (802465c <np_nand_erase+0x7c>)
 8024608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802460c:	68db      	ldr	r3, [r3, #12]
 802460e:	4620      	mov	r0, r4
 8024610:	4798      	blx	r3
    switch (status)
 8024612:	2802      	cmp	r0, #2
 8024614:	d008      	beq.n	8024628 <np_nand_erase+0x48>
 8024616:	2803      	cmp	r0, #3
 8024618:	d013      	beq.n	8024642 <np_nand_erase+0x62>
 802461a:	b1c8      	cbz	r0, 8024650 <np_nand_erase+0x70>
        ERROR_PRINT("Unknown NAND status\r\n");
 802461c:	4810      	ldr	r0, [pc, #64]	; (8024660 <np_nand_erase+0x80>)
 802461e:	f007 f981 	bl	802b924 <puts>
        return -1;
 8024622:	f04f 30ff 	mov.w	r0, #4294967295
 8024626:	e014      	b.n	8024652 <np_nand_erase+0x72>
        if (np_send_bad_block_info(addr, prog->chip_info.block_size, false))
 8024628:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 802462c:	2300      	movs	r3, #0
 802462e:	f8d5 222c 	ldr.w	r2, [r5, #556]	; 0x22c
 8024632:	4638      	mov	r0, r7
 8024634:	4641      	mov	r1, r8
 8024636:	f7ff fb3b 	bl	8023cb0 <np_send_bad_block_info>
 802463a:	b150      	cbz	r0, 8024652 <np_nand_erase+0x72>
            return -1;
 802463c:	f04f 30ff 	mov.w	r0, #4294967295
 8024640:	e007      	b.n	8024652 <np_nand_erase+0x72>
        ERROR_PRINT("NAND erase timeout at 0x%" PRIx64 "\r\n", addr);
 8024642:	463a      	mov	r2, r7
 8024644:	4643      	mov	r3, r8
 8024646:	4807      	ldr	r0, [pc, #28]	; (8024664 <np_nand_erase+0x84>)
 8024648:	f007 f914 	bl	802b874 <printf>
    return 0;
 802464c:	2000      	movs	r0, #0
        break;
 802464e:	e000      	b.n	8024652 <np_nand_erase+0x72>
    switch (status)
 8024650:	2000      	movs	r0, #0
}
 8024652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024656:	bf00      	nop
 8024658:	080309bc 	.word	0x080309bc
 802465c:	08030f9c 	.word	0x08030f9c
 8024660:	08030668 	.word	0x08030668
 8024664:	080309d4 	.word	0x080309d4

08024668 <_np_cmd_nand_read_id>:
{
 8024668:	b510      	push	{r4, lr}
 802466a:	b086      	sub	sp, #24
 802466c:	4604      	mov	r4, r0
    DEBUG_PRINT("Read ID command\r\n");
 802466e:	4818      	ldr	r0, [pc, #96]	; (80246d0 <_np_cmd_nand_read_id+0x68>)
 8024670:	f007 f958 	bl	802b924 <puts>
    resp.header.code = NP_RESP_DATA;
 8024674:	2300      	movs	r3, #0
 8024676:	f88d 3010 	strb.w	r3, [sp, #16]
    resp.header.info = resp_len - sizeof(resp.header);
 802467a:	2306      	movs	r3, #6
 802467c:	f88d 3011 	strb.w	r3, [sp, #17]
    hal[prog->hal]->read_id(&resp.nand_id);
 8024680:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 8024684:	f894 2241 	ldrb.w	r2, [r4, #577]	; 0x241
 8024688:	4b12      	ldr	r3, [pc, #72]	; (80246d4 <_np_cmd_nand_read_id+0x6c>)
 802468a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802468e:	689b      	ldr	r3, [r3, #8]
 8024690:	f10d 0012 	add.w	r0, sp, #18
 8024694:	4798      	blx	r3
    if (np_comm_cb)
 8024696:	4b10      	ldr	r3, [pc, #64]	; (80246d8 <_np_cmd_nand_read_id+0x70>)
 8024698:	681b      	ldr	r3, [r3, #0]
 802469a:	b11b      	cbz	r3, 80246a4 <_np_cmd_nand_read_id+0x3c>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 802469c:	681b      	ldr	r3, [r3, #0]
 802469e:	2108      	movs	r1, #8
 80246a0:	a804      	add	r0, sp, #16
 80246a2:	4798      	blx	r3
        resp.nand_id.fourth_id, resp.nand_id.fifth_id, resp.nand_id.sixth_id);
 80246a4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80246a8:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80246ac:	f89d 1017 	ldrb.w	r1, [sp, #23]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 80246b0:	9102      	str	r1, [sp, #8]
 80246b2:	9201      	str	r2, [sp, #4]
 80246b4:	9300      	str	r3, [sp, #0]
 80246b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80246ba:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80246be:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80246c2:	4806      	ldr	r0, [pc, #24]	; (80246dc <_np_cmd_nand_read_id+0x74>)
 80246c4:	f007 f8d6 	bl	802b874 <printf>
}
 80246c8:	2000      	movs	r0, #0
 80246ca:	b006      	add	sp, #24
 80246cc:	bd10      	pop	{r4, pc}
 80246ce:	bf00      	nop
 80246d0:	080309fc 	.word	0x080309fc
 80246d4:	08030f9c 	.word	0x08030f9c
 80246d8:	200012a4 	.word	0x200012a4
 80246dc:	08030a10 	.word	0x08030a10

080246e0 <np_cmd_nand_read_id>:
{
 80246e0:	b510      	push	{r4, lr}
 80246e2:	4604      	mov	r4, r0
    led_rd_set(true);
 80246e4:	2001      	movs	r0, #1
 80246e6:	f7ff f9a5 	bl	8023a34 <led_rd_set>
    ret = _np_cmd_nand_read_id(prog);
 80246ea:	4620      	mov	r0, r4
 80246ec:	f7ff ffbc 	bl	8024668 <_np_cmd_nand_read_id>
 80246f0:	4604      	mov	r4, r0
    led_rd_set(false);
 80246f2:	2000      	movs	r0, #0
 80246f4:	f7ff f99e 	bl	8023a34 <led_rd_set>
}
 80246f8:	4620      	mov	r0, r4
 80246fa:	bd10      	pop	{r4, pc}

080246fc <np_send_bad_blocks>:
{
 80246fc:	b570      	push	{r4, r5, r6, lr}
 80246fe:	b082      	sub	sp, #8
 8024700:	4606      	mov	r6, r0
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 8024702:	a801      	add	r0, sp, #4
 8024704:	f7ff fa80 	bl	8023c08 <nand_bad_block_table_iter_alloc>
 8024708:	4604      	mov	r4, r0
 802470a:	e004      	b.n	8024716 <np_send_bad_blocks+0x1a>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
 802470c:	a901      	add	r1, sp, #4
 802470e:	4620      	mov	r0, r4
 8024710:	f7ff fa88 	bl	8023c24 <nand_bad_block_table_iter_next>
 8024714:	4604      	mov	r4, r0
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 8024716:	b18c      	cbz	r4, 802473c <np_send_bad_blocks+0x40>
        if (np_send_bad_block_info(page * prog->chip_info.page_size,
 8024718:	f506 5200 	add.w	r2, r6, #8192	; 0x2000
 802471c:	f8d2 5228 	ldr.w	r5, [r2, #552]	; 0x228
 8024720:	2100      	movs	r1, #0
 8024722:	460b      	mov	r3, r1
 8024724:	f8d2 222c 	ldr.w	r2, [r2, #556]	; 0x22c
 8024728:	9801      	ldr	r0, [sp, #4]
 802472a:	fb05 f000 	mul.w	r0, r5, r0
 802472e:	f7ff fabf 	bl	8023cb0 <np_send_bad_block_info>
 8024732:	2800      	cmp	r0, #0
 8024734:	d0ea      	beq.n	802470c <np_send_bad_blocks+0x10>
            return -1;
 8024736:	f04f 30ff 	mov.w	r0, #4294967295
 802473a:	e000      	b.n	802473e <np_send_bad_blocks+0x42>
    return 0;
 802473c:	2000      	movs	r0, #0
}
 802473e:	b002      	add	sp, #8
 8024740:	bd70      	pop	{r4, r5, r6, pc}

08024742 <np_cmd_read_bad_blocks>:
{
 8024742:	b538      	push	{r3, r4, r5, lr}
 8024744:	4605      	mov	r5, r0
    led_rd_set(true);
 8024746:	2001      	movs	r0, #1
 8024748:	f7ff f974 	bl	8023a34 <led_rd_set>
    nand_bad_block_table_init();  
 802474c:	f7ff fa26 	bl	8023b9c <nand_bad_block_table_init>
    ret = _np_cmd_read_bad_blocks(prog, true);
 8024750:	2101      	movs	r1, #1
 8024752:	4628      	mov	r0, r5
 8024754:	f7ff fbda 	bl	8023f0c <_np_cmd_read_bad_blocks>
 8024758:	4604      	mov	r4, r0
    led_rd_set(false);
 802475a:	2000      	movs	r0, #0
 802475c:	f7ff f96a 	bl	8023a34 <led_rd_set>
    if (ret || (ret = np_send_bad_blocks(prog)))
 8024760:	b10c      	cbz	r4, 8024766 <np_cmd_read_bad_blocks+0x24>
}
 8024762:	4620      	mov	r0, r4
 8024764:	bd38      	pop	{r3, r4, r5, pc}
    if (ret || (ret = np_send_bad_blocks(prog)))
 8024766:	4628      	mov	r0, r5
 8024768:	f7ff ffc8 	bl	80246fc <np_send_bad_blocks>
 802476c:	4604      	mov	r4, r0
 802476e:	2800      	cmp	r0, #0
 8024770:	d1f7      	bne.n	8024762 <np_cmd_read_bad_blocks+0x20>
    return np_send_ok_status();
 8024772:	f7ff fa6d 	bl	8023c50 <np_send_ok_status>
 8024776:	4604      	mov	r4, r0
 8024778:	e7f3      	b.n	8024762 <np_cmd_read_bad_blocks+0x20>
	...

0802477c <np_cmd_fw_update_data>:
{
 802477c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024780:	b082      	sub	sp, #8
    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 8024782:	6841      	ldr	r1, [r0, #4]
 8024784:	2901      	cmp	r1, #1
 8024786:	d971      	bls.n	802486c <np_cmd_fw_update_data+0xf0>
 8024788:	4604      	mov	r4, r0
    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 802478a:	6803      	ldr	r3, [r0, #0]
    len = write_data_cmd->len;
 802478c:	785e      	ldrb	r6, [r3, #1]
 802478e:	2700      	movs	r7, #0
 8024790:	4635      	mov	r5, r6
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 8024792:	1cb2      	adds	r2, r6, #2
 8024794:	2a40      	cmp	r2, #64	; 0x40
 8024796:	d86f      	bhi.n	8024878 <np_cmd_fw_update_data+0xfc>
    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 8024798:	2f00      	cmp	r7, #0
 802479a:	bf08      	it	eq
 802479c:	428a      	cmpeq	r2, r1
 802479e:	d173      	bne.n	8024888 <np_cmd_fw_update_data+0x10c>
    if (!prog->addr_is_set)
 80247a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80247a2:	2a00      	cmp	r2, #0
 80247a4:	d077      	beq.n	8024896 <np_cmd_fw_update_data+0x11a>
    if (prog->page.offset + len > prog->page_size)
 80247a6:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 80247aa:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
 80247ae:	1982      	adds	r2, r0, r6
 80247b0:	f147 0c00 	adc.w	ip, r7, #0
 80247b4:	6a21      	ldr	r1, [r4, #32]
 80247b6:	4291      	cmp	r1, r2
 80247b8:	f04f 0200 	mov.w	r2, #0
 80247bc:	eb72 020c 	sbcs.w	r2, r2, ip
 80247c0:	d200      	bcs.n	80247c4 <np_cmd_fw_update_data+0x48>
        write_len = prog->page_size - prog->page.offset;
 80247c2:	1a0e      	subs	r6, r1, r0
    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 80247c4:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 80247c8:	f103 0802 	add.w	r8, r3, #2
 80247cc:	4632      	mov	r2, r6
 80247ce:	4641      	mov	r1, r8
 80247d0:	4448      	add	r0, r9
 80247d2:	f007 f96f 	bl	802bab4 <memcpy>
    prog->page.offset += write_len;
 80247d6:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 80247da:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80247de:	4433      	add	r3, r6
 80247e0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    if (prog->page.offset == prog->page_size)
 80247e4:	6a22      	ldr	r2, [r4, #32]
 80247e6:	4293      	cmp	r3, r2
 80247e8:	d05b      	beq.n	80248a2 <np_cmd_fw_update_data+0x126>
    bytes_left = len - write_len;
 80247ea:	ebb5 0a06 	subs.w	sl, r5, r6
 80247ee:	f167 0700 	sbc.w	r7, r7, #0
    if (bytes_left)
 80247f2:	ea5a 0707 	orrs.w	r7, sl, r7
 80247f6:	f040 808a 	bne.w	802490e <np_cmd_fw_update_data+0x192>
    prog->bytes_written += len;
 80247fa:	f242 2210 	movw	r2, #8720	; 0x2210
 80247fe:	18a3      	adds	r3, r4, r2
 8024800:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8024804:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8024808:	1828      	adds	r0, r5, r0
 802480a:	f141 0100 	adc.w	r1, r1, #0
 802480e:	f843 0c08 	str.w	r0, [r3, #-8]
 8024812:	f843 1c04 	str.w	r1, [r3, #-4]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8024816:	58a2      	ldr	r2, [r4, r2]
 8024818:	685b      	ldr	r3, [r3, #4]
 802481a:	1a82      	subs	r2, r0, r2
 802481c:	eb61 0303 	sbc.w	r3, r1, r3
 8024820:	6a25      	ldr	r5, [r4, #32]
 8024822:	42aa      	cmp	r2, r5
 8024824:	f173 0300 	sbcs.w	r3, r3, #0
 8024828:	d205      	bcs.n	8024836 <np_cmd_fw_update_data+0xba>
        prog->bytes_written == prog->len)
 802482a:	6922      	ldr	r2, [r4, #16]
 802482c:	6963      	ldr	r3, [r4, #20]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 802482e:	4299      	cmp	r1, r3
 8024830:	bf08      	it	eq
 8024832:	4290      	cmpeq	r0, r2
 8024834:	d10a      	bne.n	802484c <np_cmd_fw_update_data+0xd0>
        if (np_send_write_ack(prog->bytes_written))
 8024836:	f7ff fa7f 	bl	8023d38 <np_send_write_ack>
 802483a:	2800      	cmp	r0, #0
 802483c:	f040 8083 	bne.w	8024946 <np_cmd_fw_update_data+0x1ca>
        prog->bytes_ack = prog->bytes_written;
 8024840:	f504 5308 	add.w	r3, r4, #8704	; 0x2200
 8024844:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024848:	e9c3 0104 	strd	r0, r1, [r3, #16]
    if (prog->bytes_written > prog->len)
 802484c:	f504 5308 	add.w	r3, r4, #8704	; 0x2200
 8024850:	689a      	ldr	r2, [r3, #8]
 8024852:	3310      	adds	r3, #16
 8024854:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8024858:	6920      	ldr	r0, [r4, #16]
 802485a:	6961      	ldr	r1, [r4, #20]
 802485c:	4290      	cmp	r0, r2
 802485e:	eb71 0403 	sbcs.w	r4, r1, r3
 8024862:	d362      	bcc.n	802492a <np_cmd_fw_update_data+0x1ae>
    return 0;
 8024864:	2000      	movs	r0, #0
}
 8024866:	b002      	add	sp, #8
 8024868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ERROR_PRINT("Wrong buffer length for write data command %lu\r\n",
 802486c:	4837      	ldr	r0, [pc, #220]	; (802494c <np_cmd_fw_update_data+0x1d0>)
 802486e:	f007 f801 	bl	802b874 <printf>
        return NP_ERR_LEN_INVALID;
 8024872:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 8024876:	e7f6      	b.n	8024866 <np_cmd_fw_update_data+0xea>
        ERROR_PRINT("Data size is wrong 0x%" PRIx64 "\r\n", len);
 8024878:	4632      	mov	r2, r6
 802487a:	463b      	mov	r3, r7
 802487c:	4834      	ldr	r0, [pc, #208]	; (8024950 <np_cmd_fw_update_data+0x1d4>)
 802487e:	f006 fff9 	bl	802b874 <printf>
        return NP_ERR_CMD_DATA_SIZE;
 8024882:	f06f 006a 	mvn.w	r0, #106	; 0x6a
 8024886:	e7ee      	b.n	8024866 <np_cmd_fw_update_data+0xea>
        ERROR_PRINT("Buffer len 0x%lx is bigger then command 0x%" PRIx64 "\r\n",
 8024888:	463b      	mov	r3, r7
 802488a:	4832      	ldr	r0, [pc, #200]	; (8024954 <np_cmd_fw_update_data+0x1d8>)
 802488c:	f006 fff2 	bl	802b874 <printf>
        return NP_ERR_CMD_DATA_SIZE;
 8024890:	f06f 006a 	mvn.w	r0, #106	; 0x6a
 8024894:	e7e7      	b.n	8024866 <np_cmd_fw_update_data+0xea>
        ERROR_PRINT("Write address is not set\r\n");
 8024896:	4830      	ldr	r0, [pc, #192]	; (8024958 <np_cmd_fw_update_data+0x1dc>)
 8024898:	f007 f844 	bl	802b924 <puts>
        return NP_ERR_ADDR_INVALID;
 802489c:	f06f 0064 	mvn.w	r0, #100	; 0x64
 80248a0:	e7e1      	b.n	8024866 <np_cmd_fw_update_data+0xea>
        if (prog->addr >= prog->base_addr + prog->total_size)
 80248a2:	68a0      	ldr	r0, [r4, #8]
 80248a4:	68e3      	ldr	r3, [r4, #12]
 80248a6:	69a1      	ldr	r1, [r4, #24]
 80248a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80248aa:	1889      	adds	r1, r1, r2
 80248ac:	69e2      	ldr	r2, [r4, #28]
 80248ae:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 80248b2:	eb42 0c0c 	adc.w	ip, r2, ip
 80248b6:	4288      	cmp	r0, r1
 80248b8:	eb73 020c 	sbcs.w	r2, r3, ip
 80248bc:	d21d      	bcs.n	80248fa <np_cmd_fw_update_data+0x17e>
        if (flash_page_erase((uint32_t)prog->addr) < 0)
 80248be:	f7fe fbe9 	bl	8023094 <flash_page_erase>
 80248c2:	2800      	cmp	r0, #0
 80248c4:	db39      	blt.n	802493a <np_cmd_fw_update_data+0x1be>
        if (flash_write((uint32_t)prog->addr, prog->page.buf,
 80248c6:	6a22      	ldr	r2, [r4, #32]
 80248c8:	4649      	mov	r1, r9
 80248ca:	68a0      	ldr	r0, [r4, #8]
 80248cc:	f7fe fbfa 	bl	80230c4 <flash_write>
 80248d0:	2800      	cmp	r0, #0
 80248d2:	db35      	blt.n	8024940 <np_cmd_fw_update_data+0x1c4>
        prog->addr += prog->page_size;
 80248d4:	6a21      	ldr	r1, [r4, #32]
 80248d6:	68a3      	ldr	r3, [r4, #8]
 80248d8:	68e2      	ldr	r2, [r4, #12]
 80248da:	185b      	adds	r3, r3, r1
 80248dc:	f142 0200 	adc.w	r2, r2, #0
 80248e0:	60a3      	str	r3, [r4, #8]
 80248e2:	60e2      	str	r2, [r4, #12]
        prog->page.page++;
 80248e4:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 80248e8:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 80248ec:	3201      	adds	r2, #1
 80248ee:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
        prog->page.offset = 0;
 80248f2:	2200      	movs	r2, #0
 80248f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80248f8:	e777      	b.n	80247ea <np_cmd_fw_update_data+0x6e>
            ERROR_PRINT("Write address 0x%" PRIx64
 80248fa:	9100      	str	r1, [sp, #0]
 80248fc:	f8cd c004 	str.w	ip, [sp, #4]
 8024900:	4602      	mov	r2, r0
 8024902:	4816      	ldr	r0, [pc, #88]	; (802495c <np_cmd_fw_update_data+0x1e0>)
 8024904:	f006 ffb6 	bl	802b874 <printf>
            return NP_ERR_ADDR_EXCEEDED;
 8024908:	f06f 0063 	mvn.w	r0, #99	; 0x63
 802490c:	e7ab      	b.n	8024866 <np_cmd_fw_update_data+0xea>
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 802490e:	4652      	mov	r2, sl
 8024910:	eb08 0106 	add.w	r1, r8, r6
 8024914:	4648      	mov	r0, r9
 8024916:	f007 f8cd 	bl	802bab4 <memcpy>
        prog->page.offset += bytes_left;
 802491a:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 802491e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8024922:	4453      	add	r3, sl
 8024924:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 8024928:	e767      	b.n	80247fa <np_cmd_fw_update_data+0x7e>
        ERROR_PRINT("Actual write data length 0x%" PRIx64
 802492a:	9000      	str	r0, [sp, #0]
 802492c:	9101      	str	r1, [sp, #4]
 802492e:	480c      	ldr	r0, [pc, #48]	; (8024960 <np_cmd_fw_update_data+0x1e4>)
 8024930:	f006 ffa0 	bl	802b874 <printf>
        return NP_ERR_LEN_EXCEEDED;
 8024934:	f06f 006e 	mvn.w	r0, #110	; 0x6e
 8024938:	e795      	b.n	8024866 <np_cmd_fw_update_data+0xea>
            return NP_ERR_INTERNAL;
 802493a:	f04f 30ff 	mov.w	r0, #4294967295
 802493e:	e792      	b.n	8024866 <np_cmd_fw_update_data+0xea>
            return NP_ERR_INTERNAL;
 8024940:	f04f 30ff 	mov.w	r0, #4294967295
 8024944:	e78f      	b.n	8024866 <np_cmd_fw_update_data+0xea>
            return -1;
 8024946:	f04f 30ff 	mov.w	r0, #4294967295
 802494a:	e78c      	b.n	8024866 <np_cmd_fw_update_data+0xea>
 802494c:	08030a3c 	.word	0x08030a3c
 8024950:	08030a74 	.word	0x08030a74
 8024954:	08030a98 	.word	0x08030a98
 8024958:	08030ad0 	.word	0x08030ad0
 802495c:	08030af4 	.word	0x08030af4
 8024960:	08030b34 	.word	0x08030b34

08024964 <np_boot_config_write>:
{
 8024964:	b510      	push	{r4, lr}
 8024966:	4604      	mov	r4, r0
    if (flash_page_erase(BOOT_CONFIG_ADDR) < 0)
 8024968:	4809      	ldr	r0, [pc, #36]	; (8024990 <np_boot_config_write+0x2c>)
 802496a:	f7fe fb93 	bl	8023094 <flash_page_erase>
 802496e:	2800      	cmp	r0, #0
 8024970:	db08      	blt.n	8024984 <np_boot_config_write+0x20>
    if (flash_write(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 8024972:	2201      	movs	r2, #1
 8024974:	4621      	mov	r1, r4
 8024976:	4806      	ldr	r0, [pc, #24]	; (8024990 <np_boot_config_write+0x2c>)
 8024978:	f7fe fba4 	bl	80230c4 <flash_write>
 802497c:	2800      	cmp	r0, #0
 802497e:	db04      	blt.n	802498a <np_boot_config_write+0x26>
    return 0;
 8024980:	2000      	movs	r0, #0
}
 8024982:	bd10      	pop	{r4, pc}
        return -1;
 8024984:	f04f 30ff 	mov.w	r0, #4294967295
 8024988:	e7fb      	b.n	8024982 <np_boot_config_write+0x1e>
        return -1;
 802498a:	f04f 30ff 	mov.w	r0, #4294967295
 802498e:	e7f8      	b.n	8024982 <np_boot_config_write+0x1e>
 8024990:	08003800 	.word	0x08003800

08024994 <np_boot_config_read>:
{
 8024994:	b508      	push	{r3, lr}
 8024996:	4601      	mov	r1, r0
    if (flash_read(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 8024998:	2201      	movs	r2, #1
 802499a:	4805      	ldr	r0, [pc, #20]	; (80249b0 <np_boot_config_read+0x1c>)
 802499c:	f7fe fbbc 	bl	8023118 <flash_read>
 80249a0:	2800      	cmp	r0, #0
 80249a2:	db01      	blt.n	80249a8 <np_boot_config_read+0x14>
    return 0;
 80249a4:	2000      	movs	r0, #0
}
 80249a6:	bd08      	pop	{r3, pc}
        return -1;
 80249a8:	f04f 30ff 	mov.w	r0, #4294967295
 80249ac:	e7fb      	b.n	80249a6 <np_boot_config_read+0x12>
 80249ae:	bf00      	nop
 80249b0:	08003800 	.word	0x08003800

080249b4 <np_cmd_fw_update_end>:
{
 80249b4:	b510      	push	{r4, lr}
 80249b6:	b082      	sub	sp, #8
    prog->addr_is_set = 0;
 80249b8:	2300      	movs	r3, #0
 80249ba:	6303      	str	r3, [r0, #48]	; 0x30
    if (prog->page.offset)
 80249bc:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 80249c0:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80249c4:	b9d9      	cbnz	r1, 80249fe <np_cmd_fw_update_end+0x4a>
 80249c6:	4604      	mov	r4, r0
    if (np_boot_config_read(&boot_config))
 80249c8:	a801      	add	r0, sp, #4
 80249ca:	f7ff ffe3 	bl	8024994 <np_boot_config_read>
 80249ce:	bb18      	cbnz	r0, 8024a18 <np_cmd_fw_update_end+0x64>
    if (prog->active_image == 0xff)
 80249d0:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 80249d4:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 80249d8:	2bff      	cmp	r3, #255	; 0xff
 80249da:	d016      	beq.n	8024a0a <np_cmd_fw_update_end+0x56>
    boot_config.active_image = prog->active_image ? 0 : 1;
 80249dc:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 80249e0:	f894 3240 	ldrb.w	r3, [r4, #576]	; 0x240
 80249e4:	fab3 f383 	clz	r3, r3
 80249e8:	095b      	lsrs	r3, r3, #5
 80249ea:	f88d 3004 	strb.w	r3, [sp, #4]
    if (np_boot_config_write(&boot_config))
 80249ee:	a801      	add	r0, sp, #4
 80249f0:	f7ff ffb8 	bl	8024964 <np_boot_config_write>
 80249f4:	b998      	cbnz	r0, 8024a1e <np_cmd_fw_update_end+0x6a>
    return np_send_ok_status();
 80249f6:	f7ff f92b 	bl	8023c50 <np_send_ok_status>
}
 80249fa:	b002      	add	sp, #8
 80249fc:	bd10      	pop	{r4, pc}
        ERROR_PRINT("Data of 0x%lx length was not written\r\n",
 80249fe:	4809      	ldr	r0, [pc, #36]	; (8024a24 <np_cmd_fw_update_end+0x70>)
 8024a00:	f006 ff38 	bl	802b874 <printf>
        return NP_ERR_NAND_WR;
 8024a04:	f06f 0066 	mvn.w	r0, #102	; 0x66
 8024a08:	e7f7      	b.n	80249fa <np_cmd_fw_update_end+0x46>
        prog->active_image = boot_config.active_image;
 8024a0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8024a0e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8024a12:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 8024a16:	e7e1      	b.n	80249dc <np_cmd_fw_update_end+0x28>
        return NP_ERR_INTERNAL;
 8024a18:	f04f 30ff 	mov.w	r0, #4294967295
 8024a1c:	e7ed      	b.n	80249fa <np_cmd_fw_update_end+0x46>
        return NP_ERR_INTERNAL;
 8024a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8024a22:	e7ea      	b.n	80249fa <np_cmd_fw_update_end+0x46>
 8024a24:	080305dc 	.word	0x080305dc

08024a28 <np_cmd_fw_update>:
{
 8024a28:	b510      	push	{r4, lr}
 8024a2a:	4604      	mov	r4, r0
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8024a2c:	6803      	ldr	r3, [r0, #0]
    switch (cmd->code)
 8024a2e:	781b      	ldrb	r3, [r3, #0]
 8024a30:	2b0b      	cmp	r3, #11
 8024a32:	d013      	beq.n	8024a5c <np_cmd_fw_update+0x34>
 8024a34:	2b0c      	cmp	r3, #12
 8024a36:	d015      	beq.n	8024a64 <np_cmd_fw_update+0x3c>
 8024a38:	2b0a      	cmp	r3, #10
 8024a3a:	d002      	beq.n	8024a42 <np_cmd_fw_update+0x1a>
 8024a3c:	2400      	movs	r4, #0
}
 8024a3e:	4620      	mov	r0, r4
 8024a40:	bd10      	pop	{r4, pc}
        led_wr_set(true);
 8024a42:	2001      	movs	r0, #1
 8024a44:	f7fe ffec 	bl	8023a20 <led_wr_set>
        ret = np_cmd_fw_update_start(prog);
 8024a48:	4620      	mov	r0, r4
 8024a4a:	f7ff fb31 	bl	80240b0 <np_cmd_fw_update_start>
 8024a4e:	4604      	mov	r4, r0
    if (ret < 0)
 8024a50:	2c00      	cmp	r4, #0
 8024a52:	daf4      	bge.n	8024a3e <np_cmd_fw_update+0x16>
        led_wr_set(false);
 8024a54:	2000      	movs	r0, #0
 8024a56:	f7fe ffe3 	bl	8023a20 <led_wr_set>
 8024a5a:	e7f0      	b.n	8024a3e <np_cmd_fw_update+0x16>
        ret = np_cmd_fw_update_data(prog);
 8024a5c:	f7ff fe8e 	bl	802477c <np_cmd_fw_update_data>
 8024a60:	4604      	mov	r4, r0
        break;
 8024a62:	e7f5      	b.n	8024a50 <np_cmd_fw_update+0x28>
        ret = np_cmd_fw_update_end(prog);
 8024a64:	f7ff ffa6 	bl	80249b4 <np_cmd_fw_update_end>
 8024a68:	4604      	mov	r4, r0
        led_wr_set(false);
 8024a6a:	2000      	movs	r0, #0
 8024a6c:	f7fe ffd8 	bl	8023a20 <led_wr_set>
        break;
 8024a70:	e7ee      	b.n	8024a50 <np_cmd_fw_update+0x28>
	...

08024a74 <np_cmd_active_image_get>:
{
 8024a74:	b510      	push	{r4, lr}
 8024a76:	b082      	sub	sp, #8
 8024a78:	4604      	mov	r4, r0
    DEBUG_PRINT("Get active image command\r\n");
 8024a7a:	4817      	ldr	r0, [pc, #92]	; (8024ad8 <np_cmd_active_image_get+0x64>)
 8024a7c:	f006 ff52 	bl	802b924 <puts>
    if (prog->active_image == 0xff)
 8024a80:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8024a84:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8024a88:	2bff      	cmp	r3, #255	; 0xff
 8024a8a:	d015      	beq.n	8024ab8 <np_cmd_active_image_get+0x44>
    resp.header.code = NP_RESP_DATA;
 8024a8c:	2300      	movs	r3, #0
 8024a8e:	f88d 3000 	strb.w	r3, [sp]
    resp.header.info = resp_len - sizeof(resp.header);
 8024a92:	2301      	movs	r3, #1
 8024a94:	f88d 3001 	strb.w	r3, [sp, #1]
    resp.active_image = prog->active_image;
 8024a98:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 8024a9c:	f894 3240 	ldrb.w	r3, [r4, #576]	; 0x240
 8024aa0:	f88d 3002 	strb.w	r3, [sp, #2]
    if (np_comm_cb)
 8024aa4:	4b0d      	ldr	r3, [pc, #52]	; (8024adc <np_cmd_active_image_get+0x68>)
 8024aa6:	681b      	ldr	r3, [r3, #0]
 8024aa8:	b1a3      	cbz	r3, 8024ad4 <np_cmd_active_image_get+0x60>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8024aaa:	681b      	ldr	r3, [r3, #0]
 8024aac:	2103      	movs	r1, #3
 8024aae:	4668      	mov	r0, sp
 8024ab0:	4798      	blx	r3
    return 0;
 8024ab2:	2000      	movs	r0, #0
}
 8024ab4:	b002      	add	sp, #8
 8024ab6:	bd10      	pop	{r4, pc}
        if (np_boot_config_read(&boot_config))
 8024ab8:	a801      	add	r0, sp, #4
 8024aba:	f7ff ff6b 	bl	8024994 <np_boot_config_read>
 8024abe:	b930      	cbnz	r0, 8024ace <np_cmd_active_image_get+0x5a>
        prog->active_image = boot_config.active_image;
 8024ac0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8024ac4:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8024ac8:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 8024acc:	e7de      	b.n	8024a8c <np_cmd_active_image_get+0x18>
            return NP_ERR_INTERNAL;
 8024ace:	f04f 30ff 	mov.w	r0, #4294967295
 8024ad2:	e7ef      	b.n	8024ab4 <np_cmd_active_image_get+0x40>
    return 0;
 8024ad4:	2000      	movs	r0, #0
 8024ad6:	e7ed      	b.n	8024ab4 <np_cmd_active_image_get+0x40>
 8024ad8:	08030b74 	.word	0x08030b74
 8024adc:	200012a4 	.word	0x200012a4

08024ae0 <np_cmd_nand_write_data>:
{
 8024ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024ae4:	b083      	sub	sp, #12
    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 8024ae6:	6841      	ldr	r1, [r0, #4]
 8024ae8:	2901      	cmp	r1, #1
 8024aea:	d963      	bls.n	8024bb4 <np_cmd_nand_write_data+0xd4>
 8024aec:	4604      	mov	r4, r0
    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 8024aee:	6807      	ldr	r7, [r0, #0]
    len = write_data_cmd->len;
 8024af0:	787d      	ldrb	r5, [r7, #1]
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 8024af2:	1caa      	adds	r2, r5, #2
 8024af4:	2a40      	cmp	r2, #64	; 0x40
 8024af6:	d863      	bhi.n	8024bc0 <np_cmd_nand_write_data+0xe0>
    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 8024af8:	4291      	cmp	r1, r2
 8024afa:	d168      	bne.n	8024bce <np_cmd_nand_write_data+0xee>
    if (!prog->addr_is_set)
 8024afc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8024afe:	2b00      	cmp	r3, #0
 8024b00:	d06b      	beq.n	8024bda <np_cmd_nand_write_data+0xfa>
    if (prog->page.offset + len > prog->page_size)
 8024b02:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8024b06:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8024b0a:	1943      	adds	r3, r0, r5
 8024b0c:	6a26      	ldr	r6, [r4, #32]
 8024b0e:	42b3      	cmp	r3, r6
 8024b10:	d969      	bls.n	8024be6 <np_cmd_nand_write_data+0x106>
        write_len = prog->page_size - prog->page.offset;
 8024b12:	1a36      	subs	r6, r6, r0
    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 8024b14:	f104 083c 	add.w	r8, r4, #60	; 0x3c
 8024b18:	3702      	adds	r7, #2
 8024b1a:	4632      	mov	r2, r6
 8024b1c:	4639      	mov	r1, r7
 8024b1e:	4440      	add	r0, r8
 8024b20:	f006 ffc8 	bl	802bab4 <memcpy>
    prog->page.offset += write_len;
 8024b24:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8024b28:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8024b2c:	4433      	add	r3, r6
 8024b2e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    if (prog->page.offset == prog->page_size)
 8024b32:	6a22      	ldr	r2, [r4, #32]
 8024b34:	4293      	cmp	r3, r2
 8024b36:	d06a      	beq.n	8024c0e <np_cmd_nand_write_data+0x12e>
    if (bytes_left)
 8024b38:	ebb5 0906 	subs.w	r9, r5, r6
 8024b3c:	f040 80aa 	bne.w	8024c94 <np_cmd_nand_write_data+0x1b4>
    prog->bytes_written += len;
 8024b40:	f242 2210 	movw	r2, #8720	; 0x2210
 8024b44:	18a3      	adds	r3, r4, r2
 8024b46:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8024b4a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8024b4e:	1828      	adds	r0, r5, r0
 8024b50:	f141 0100 	adc.w	r1, r1, #0
 8024b54:	f843 0c08 	str.w	r0, [r3, #-8]
 8024b58:	f843 1c04 	str.w	r1, [r3, #-4]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8024b5c:	58a2      	ldr	r2, [r4, r2]
 8024b5e:	685b      	ldr	r3, [r3, #4]
 8024b60:	1a82      	subs	r2, r0, r2
 8024b62:	eb61 0303 	sbc.w	r3, r1, r3
 8024b66:	6a25      	ldr	r5, [r4, #32]
 8024b68:	42aa      	cmp	r2, r5
 8024b6a:	f173 0300 	sbcs.w	r3, r3, #0
 8024b6e:	d205      	bcs.n	8024b7c <np_cmd_nand_write_data+0x9c>
        prog->bytes_written == prog->len)
 8024b70:	6922      	ldr	r2, [r4, #16]
 8024b72:	6963      	ldr	r3, [r4, #20]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8024b74:	4299      	cmp	r1, r3
 8024b76:	bf08      	it	eq
 8024b78:	4290      	cmpeq	r0, r2
 8024b7a:	d10a      	bne.n	8024b92 <np_cmd_nand_write_data+0xb2>
        if (np_send_write_ack(prog->bytes_written))
 8024b7c:	f7ff f8dc 	bl	8023d38 <np_send_write_ack>
 8024b80:	2800      	cmp	r0, #0
 8024b82:	f040 809f 	bne.w	8024cc4 <np_cmd_nand_write_data+0x1e4>
        prog->bytes_ack = prog->bytes_written;
 8024b86:	f504 5308 	add.w	r3, r4, #8704	; 0x2200
 8024b8a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024b8e:	e9c3 0104 	strd	r0, r1, [r3, #16]
    if (prog->bytes_written > prog->len)
 8024b92:	f504 5308 	add.w	r3, r4, #8704	; 0x2200
 8024b96:	689a      	ldr	r2, [r3, #8]
 8024b98:	3310      	adds	r3, #16
 8024b9a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8024b9e:	6920      	ldr	r0, [r4, #16]
 8024ba0:	6961      	ldr	r1, [r4, #20]
 8024ba2:	4290      	cmp	r0, r2
 8024ba4:	eb71 0403 	sbcs.w	r4, r1, r3
 8024ba8:	f0c0 8081 	bcc.w	8024cae <np_cmd_nand_write_data+0x1ce>
    return 0;
 8024bac:	2000      	movs	r0, #0
}
 8024bae:	b003      	add	sp, #12
 8024bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ERROR_PRINT("Wrong buffer length for write data command %lu\r\n",
 8024bb4:	4845      	ldr	r0, [pc, #276]	; (8024ccc <np_cmd_nand_write_data+0x1ec>)
 8024bb6:	f006 fe5d 	bl	802b874 <printf>
        return NP_ERR_LEN_INVALID;
 8024bba:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 8024bbe:	e7f6      	b.n	8024bae <np_cmd_nand_write_data+0xce>
        ERROR_PRINT("Data size is wrong 0x%lx\r\n", len);
 8024bc0:	4629      	mov	r1, r5
 8024bc2:	4843      	ldr	r0, [pc, #268]	; (8024cd0 <np_cmd_nand_write_data+0x1f0>)
 8024bc4:	f006 fe56 	bl	802b874 <printf>
        return NP_ERR_CMD_DATA_SIZE;
 8024bc8:	f06f 006a 	mvn.w	r0, #106	; 0x6a
 8024bcc:	e7ef      	b.n	8024bae <np_cmd_nand_write_data+0xce>
        ERROR_PRINT("Buffer len 0x%lx is bigger then command 0x%lx\r\n",
 8024bce:	4841      	ldr	r0, [pc, #260]	; (8024cd4 <np_cmd_nand_write_data+0x1f4>)
 8024bd0:	f006 fe50 	bl	802b874 <printf>
        return NP_ERR_CMD_DATA_SIZE;
 8024bd4:	f06f 006a 	mvn.w	r0, #106	; 0x6a
 8024bd8:	e7e9      	b.n	8024bae <np_cmd_nand_write_data+0xce>
        ERROR_PRINT("Write address is not set\r\n");
 8024bda:	483f      	ldr	r0, [pc, #252]	; (8024cd8 <np_cmd_nand_write_data+0x1f8>)
 8024bdc:	f006 fea2 	bl	802b924 <puts>
        return NP_ERR_ADDR_INVALID;
 8024be0:	f06f 0064 	mvn.w	r0, #100	; 0x64
 8024be4:	e7e3      	b.n	8024bae <np_cmd_nand_write_data+0xce>
        write_len = len;
 8024be6:	462e      	mov	r6, r5
 8024be8:	e794      	b.n	8024b14 <np_cmd_nand_write_data+0x34>
            prog->addr += prog->block_size;
 8024bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024bec:	68a2      	ldr	r2, [r4, #8]
 8024bee:	68e1      	ldr	r1, [r4, #12]
 8024bf0:	18d2      	adds	r2, r2, r3
 8024bf2:	f141 0100 	adc.w	r1, r1, #0
 8024bf6:	60a2      	str	r2, [r4, #8]
 8024bf8:	60e1      	str	r1, [r4, #12]
            prog->page.page += prog->block_size / prog->page_size;
 8024bfa:	6a22      	ldr	r2, [r4, #32]
 8024bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8024c00:	f504 5100 	add.w	r1, r4, #8192	; 0x2000
 8024c04:	f8d1 21fc 	ldr.w	r2, [r1, #508]	; 0x1fc
 8024c08:	441a      	add	r2, r3
 8024c0a:	f8c1 21fc 	str.w	r2, [r1, #508]	; 0x1fc
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 8024c0e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8024c12:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8024c16:	b1b3      	cbz	r3, 8024c46 <np_cmd_nand_write_data+0x166>
 8024c18:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8024c1c:	f8d3 01fc 	ldr.w	r0, [r3, #508]	; 0x1fc
 8024c20:	f7fe ffde 	bl	8023be0 <nand_bad_block_table_lookup>
 8024c24:	b178      	cbz	r0, 8024c46 <np_cmd_nand_write_data+0x166>
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", prog->addr);
 8024c26:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8024c2a:	482c      	ldr	r0, [pc, #176]	; (8024cdc <np_cmd_nand_write_data+0x1fc>)
 8024c2c:	f006 fe22 	bl	802b874 <printf>
            if (np_send_bad_block_info(prog->addr, prog->block_size, true))
 8024c30:	2301      	movs	r3, #1
 8024c32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8024c34:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8024c38:	f7ff f83a 	bl	8023cb0 <np_send_bad_block_info>
 8024c3c:	2800      	cmp	r0, #0
 8024c3e:	d0d4      	beq.n	8024bea <np_cmd_nand_write_data+0x10a>
                return -1;
 8024c40:	f04f 30ff 	mov.w	r0, #4294967295
 8024c44:	e7b3      	b.n	8024bae <np_cmd_nand_write_data+0xce>
        if (prog->addr >= prog->total_size)
 8024c46:	68a2      	ldr	r2, [r4, #8]
 8024c48:	68e3      	ldr	r3, [r4, #12]
 8024c4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8024c4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8024c4e:	4282      	cmp	r2, r0
 8024c50:	eb73 0c01 	sbcs.w	ip, r3, r1
 8024c54:	d216      	bcs.n	8024c84 <np_cmd_nand_write_data+0x1a4>
        if (np_nand_write(prog))
 8024c56:	4620      	mov	r0, r4
 8024c58:	f7ff fc50 	bl	80244fc <np_nand_write>
 8024c5c:	bb78      	cbnz	r0, 8024cbe <np_cmd_nand_write_data+0x1de>
        prog->addr += prog->page_size;
 8024c5e:	6a21      	ldr	r1, [r4, #32]
 8024c60:	68a3      	ldr	r3, [r4, #8]
 8024c62:	68e2      	ldr	r2, [r4, #12]
 8024c64:	185b      	adds	r3, r3, r1
 8024c66:	f142 0200 	adc.w	r2, r2, #0
 8024c6a:	60a3      	str	r3, [r4, #8]
 8024c6c:	60e2      	str	r2, [r4, #12]
        prog->page.page++;
 8024c6e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8024c72:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 8024c76:	3201      	adds	r2, #1
 8024c78:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
        prog->page.offset = 0;
 8024c7c:	2200      	movs	r2, #0
 8024c7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8024c82:	e759      	b.n	8024b38 <np_cmd_nand_write_data+0x58>
            ERROR_PRINT("Write address 0x%" PRIx64
 8024c84:	9000      	str	r0, [sp, #0]
 8024c86:	9101      	str	r1, [sp, #4]
 8024c88:	4815      	ldr	r0, [pc, #84]	; (8024ce0 <np_cmd_nand_write_data+0x200>)
 8024c8a:	f006 fdf3 	bl	802b874 <printf>
            return NP_ERR_ADDR_EXCEEDED;
 8024c8e:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8024c92:	e78c      	b.n	8024bae <np_cmd_nand_write_data+0xce>
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8024c94:	464a      	mov	r2, r9
 8024c96:	19b9      	adds	r1, r7, r6
 8024c98:	4640      	mov	r0, r8
 8024c9a:	f006 ff0b 	bl	802bab4 <memcpy>
        prog->page.offset += bytes_left;
 8024c9e:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8024ca2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8024ca6:	444b      	add	r3, r9
 8024ca8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 8024cac:	e748      	b.n	8024b40 <np_cmd_nand_write_data+0x60>
        ERROR_PRINT("Actual write data length 0x%" PRIx64
 8024cae:	9000      	str	r0, [sp, #0]
 8024cb0:	9101      	str	r1, [sp, #4]
 8024cb2:	480c      	ldr	r0, [pc, #48]	; (8024ce4 <np_cmd_nand_write_data+0x204>)
 8024cb4:	f006 fdde 	bl	802b874 <printf>
        return NP_ERR_LEN_EXCEEDED;
 8024cb8:	f06f 006e 	mvn.w	r0, #110	; 0x6e
 8024cbc:	e777      	b.n	8024bae <np_cmd_nand_write_data+0xce>
            return NP_ERR_NAND_WR;
 8024cbe:	f06f 0066 	mvn.w	r0, #102	; 0x66
 8024cc2:	e774      	b.n	8024bae <np_cmd_nand_write_data+0xce>
            return -1;
 8024cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8024cc8:	e771      	b.n	8024bae <np_cmd_nand_write_data+0xce>
 8024cca:	bf00      	nop
 8024ccc:	08030a3c 	.word	0x08030a3c
 8024cd0:	08030b90 	.word	0x08030b90
 8024cd4:	08030bb4 	.word	0x08030bb4
 8024cd8:	08030ad0 	.word	0x08030ad0
 8024cdc:	08030bec 	.word	0x08030bec
 8024ce0:	08030c0c 	.word	0x08030c0c
 8024ce4:	08030b34 	.word	0x08030b34

08024ce8 <np_cmd_nand_write>:
{
 8024ce8:	b510      	push	{r4, lr}
 8024cea:	4604      	mov	r4, r0
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8024cec:	6803      	ldr	r3, [r0, #0]
    switch (cmd->code)
 8024cee:	781b      	ldrb	r3, [r3, #0]
 8024cf0:	2b04      	cmp	r3, #4
 8024cf2:	d013      	beq.n	8024d1c <np_cmd_nand_write+0x34>
 8024cf4:	2b05      	cmp	r3, #5
 8024cf6:	d015      	beq.n	8024d24 <np_cmd_nand_write+0x3c>
 8024cf8:	2b03      	cmp	r3, #3
 8024cfa:	d002      	beq.n	8024d02 <np_cmd_nand_write+0x1a>
 8024cfc:	2400      	movs	r4, #0
}
 8024cfe:	4620      	mov	r0, r4
 8024d00:	bd10      	pop	{r4, pc}
        led_wr_set(true);
 8024d02:	2001      	movs	r0, #1
 8024d04:	f7fe fe8c 	bl	8023a20 <led_wr_set>
        ret = np_cmd_nand_write_start(prog);
 8024d08:	4620      	mov	r0, r4
 8024d0a:	f7ff faa3 	bl	8024254 <np_cmd_nand_write_start>
 8024d0e:	4604      	mov	r4, r0
    if (ret < 0)
 8024d10:	2c00      	cmp	r4, #0
 8024d12:	daf4      	bge.n	8024cfe <np_cmd_nand_write+0x16>
        led_wr_set(false);
 8024d14:	2000      	movs	r0, #0
 8024d16:	f7fe fe83 	bl	8023a20 <led_wr_set>
 8024d1a:	e7f0      	b.n	8024cfe <np_cmd_nand_write+0x16>
        ret = np_cmd_nand_write_data(prog);
 8024d1c:	f7ff fee0 	bl	8024ae0 <np_cmd_nand_write_data>
 8024d20:	4604      	mov	r4, r0
        break;
 8024d22:	e7f5      	b.n	8024d10 <np_cmd_nand_write+0x28>
        ret = np_cmd_nand_write_end(prog);
 8024d24:	f7ff f876 	bl	8023e14 <np_cmd_nand_write_end>
 8024d28:	4604      	mov	r4, r0
        led_wr_set(false);
 8024d2a:	2000      	movs	r0, #0
 8024d2c:	f7fe fe78 	bl	8023a20 <led_wr_set>
        break;
 8024d30:	e7ee      	b.n	8024d10 <np_cmd_nand_write+0x28>
	...

08024d34 <_np_cmd_nand_read>:
{
 8024d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d38:	b08b      	sub	sp, #44	; 0x2c
 8024d3a:	9008      	str	r0, [sp, #32]
    if (prog->rx_buf_len < sizeof(np_read_cmd_t))
 8024d3c:	6841      	ldr	r1, [r0, #4]
 8024d3e:	2911      	cmp	r1, #17
 8024d40:	d967      	bls.n	8024e12 <_np_cmd_nand_read+0xde>
    read_cmd = (np_read_cmd_t *)prog->rx_buf;
 8024d42:	9f08      	ldr	r7, [sp, #32]
 8024d44:	f8d7 b000 	ldr.w	fp, [r7]
    addr = read_cmd->addr;
 8024d48:	f8db 8001 	ldr.w	r8, [fp, #1]
 8024d4c:	f8db 9005 	ldr.w	r9, [fp, #5]
    len = read_cmd->len;
 8024d50:	f8db 5009 	ldr.w	r5, [fp, #9]
 8024d54:	f8db 600d 	ldr.w	r6, [fp, #13]
    skip_bb = read_cmd->flags.skip_bb;
 8024d58:	f89b 3011 	ldrb.w	r3, [fp, #17]
 8024d5c:	f003 0201 	and.w	r2, r3, #1
 8024d60:	9207      	str	r2, [sp, #28]
    inc_spare = read_cmd->flags.inc_spare;
 8024d62:	f3c3 0440 	ubfx	r4, r3, #1, #1
    DEBUG_PRINT("Read at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n", addr,
 8024d66:	9500      	str	r5, [sp, #0]
 8024d68:	9601      	str	r6, [sp, #4]
 8024d6a:	4642      	mov	r2, r8
 8024d6c:	464b      	mov	r3, r9
 8024d6e:	4897      	ldr	r0, [pc, #604]	; (8024fcc <_np_cmd_nand_read+0x298>)
 8024d70:	f006 fd80 	bl	802b874 <printf>
    if (inc_spare)
 8024d74:	2c00      	cmp	r4, #0
 8024d76:	d052      	beq.n	8024e1e <_np_cmd_nand_read+0xea>
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8024d78:	f507 5108 	add.w	r1, r7, #8704	; 0x2200
 8024d7c:	3130      	adds	r1, #48	; 0x30
 8024d7e:	f507 5400 	add.w	r4, r7, #8192	; 0x2000
 8024d82:	f8d4 7228 	ldr.w	r7, [r4, #552]	; 0x228
 8024d86:	463a      	mov	r2, r7
 8024d88:	2300      	movs	r3, #0
 8024d8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024d8e:	f7fd fee7 	bl	8022b60 <__aeabi_uldivmod>
        pages_in_block = prog->chip_info.block_size /
 8024d92:	f8d4 322c 	ldr.w	r3, [r4, #556]	; 0x22c
 8024d96:	fbb3 f3f7 	udiv	r3, r3, r7
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8024d9a:	f8d4 2238 	ldr.w	r2, [r4, #568]	; 0x238
 8024d9e:	4417      	add	r7, r2
        block_size = pages_in_block * page_size;
 8024da0:	fb07 f303 	mul.w	r3, r7, r3
 8024da4:	9306      	str	r3, [sp, #24]
        total_size = (uint64_t)pages * page_size;
 8024da6:	fba0 3a07 	umull	r3, sl, r0, r7
 8024daa:	9305      	str	r3, [sp, #20]
    if (addr + len > total_size)
 8024dac:	eb18 0205 	adds.w	r2, r8, r5
 8024db0:	eb49 0306 	adc.w	r3, r9, r6
 8024db4:	9905      	ldr	r1, [sp, #20]
 8024db6:	4291      	cmp	r1, r2
 8024db8:	eb7a 0303 	sbcs.w	r3, sl, r3
 8024dbc:	d33f      	bcc.n	8024e3e <_np_cmd_nand_read+0x10a>
    if (addr % page_size)
 8024dbe:	2400      	movs	r4, #0
 8024dc0:	9709      	str	r7, [sp, #36]	; 0x24
 8024dc2:	463a      	mov	r2, r7
 8024dc4:	4623      	mov	r3, r4
 8024dc6:	4640      	mov	r0, r8
 8024dc8:	4649      	mov	r1, r9
 8024dca:	f7fd fec9 	bl	8022b60 <__aeabi_uldivmod>
 8024dce:	4313      	orrs	r3, r2
 8024dd0:	d142      	bne.n	8024e58 <_np_cmd_nand_read+0x124>
    if (!len)
 8024dd2:	ea55 0306 	orrs.w	r3, r5, r6
 8024dd6:	d048      	beq.n	8024e6a <_np_cmd_nand_read+0x136>
    if (len % page_size)
 8024dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024dda:	4623      	mov	r3, r4
 8024ddc:	4628      	mov	r0, r5
 8024dde:	4631      	mov	r1, r6
 8024de0:	f7fd febe 	bl	8022b60 <__aeabi_uldivmod>
 8024de4:	4313      	orrs	r3, r2
 8024de6:	d146      	bne.n	8024e76 <_np_cmd_nand_read+0x142>
    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 8024de8:	9b07      	ldr	r3, [sp, #28]
 8024dea:	b11b      	cbz	r3, 8024df4 <_np_cmd_nand_read+0xc0>
 8024dec:	9b08      	ldr	r3, [sp, #32]
 8024dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024df0:	2b00      	cmp	r3, #0
 8024df2:	d049      	beq.n	8024e88 <_np_cmd_nand_read+0x154>
    page.page = addr / page_size;
 8024df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024df6:	4623      	mov	r3, r4
 8024df8:	4640      	mov	r0, r8
 8024dfa:	4649      	mov	r1, r9
 8024dfc:	f7fd feb0 	bl	8022b60 <__aeabi_uldivmod>
 8024e00:	4a73      	ldr	r2, [pc, #460]	; (8024fd0 <_np_cmd_nand_read+0x29c>)
 8024e02:	f8c2 01c0 	str.w	r0, [r2, #448]	; 0x1c0
    page.offset = 0;
 8024e06:	2300      	movs	r3, #0
 8024e08:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
    resp->code = NP_RESP_DATA;
 8024e0c:	4a71      	ldr	r2, [pc, #452]	; (8024fd4 <_np_cmd_nand_read+0x2a0>)
 8024e0e:	7013      	strb	r3, [r2, #0]
    while (len)
 8024e10:	e05a      	b.n	8024ec8 <_np_cmd_nand_read+0x194>
        ERROR_PRINT("Wrong buffer length for read command %lu\r\n",
 8024e12:	4871      	ldr	r0, [pc, #452]	; (8024fd8 <_np_cmd_nand_read+0x2a4>)
 8024e14:	f006 fd2e 	bl	802b874 <printf>
        return NP_ERR_LEN_INVALID;
 8024e18:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 8024e1c:	e0d3      	b.n	8024fc6 <_np_cmd_nand_read+0x292>
        page_size = prog->chip_info.page_size;
 8024e1e:	9908      	ldr	r1, [sp, #32]
 8024e20:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
 8024e24:	f8d3 7228 	ldr.w	r7, [r3, #552]	; 0x228
        block_size = prog->chip_info.block_size;
 8024e28:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8024e2c:	9306      	str	r3, [sp, #24]
        total_size = prog->chip_info.total_size;
 8024e2e:	f242 2330 	movw	r3, #8752	; 0x2230
 8024e32:	18ca      	adds	r2, r1, r3
 8024e34:	58cb      	ldr	r3, [r1, r3]
 8024e36:	9305      	str	r3, [sp, #20]
 8024e38:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8024e3c:	e7b6      	b.n	8024dac <_np_cmd_nand_read+0x78>
        ERROR_PRINT("Read address 0x%" PRIx64 "+0x%" PRIx64
 8024e3e:	9102      	str	r1, [sp, #8]
 8024e40:	f8cd a00c 	str.w	sl, [sp, #12]
 8024e44:	9500      	str	r5, [sp, #0]
 8024e46:	9601      	str	r6, [sp, #4]
 8024e48:	4642      	mov	r2, r8
 8024e4a:	464b      	mov	r3, r9
 8024e4c:	4863      	ldr	r0, [pc, #396]	; (8024fdc <_np_cmd_nand_read+0x2a8>)
 8024e4e:	f006 fd11 	bl	802b874 <printf>
        return NP_ERR_ADDR_EXCEEDED;
 8024e52:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8024e56:	e0b6      	b.n	8024fc6 <_np_cmd_nand_read+0x292>
        ERROR_PRINT("Read address 0x%" PRIx64
 8024e58:	9700      	str	r7, [sp, #0]
 8024e5a:	4642      	mov	r2, r8
 8024e5c:	464b      	mov	r3, r9
 8024e5e:	4860      	ldr	r0, [pc, #384]	; (8024fe0 <_np_cmd_nand_read+0x2ac>)
 8024e60:	f006 fd08 	bl	802b874 <printf>
        return NP_ERR_ADDR_NOT_ALIGN;
 8024e64:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8024e68:	e0ad      	b.n	8024fc6 <_np_cmd_nand_read+0x292>
        ERROR_PRINT("Length is 0\r\n");
 8024e6a:	485e      	ldr	r0, [pc, #376]	; (8024fe4 <_np_cmd_nand_read+0x2b0>)
 8024e6c:	f006 fd5a 	bl	802b924 <puts>
        return NP_ERR_LEN_INVALID;
 8024e70:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 8024e74:	e0a7      	b.n	8024fc6 <_np_cmd_nand_read+0x292>
        ERROR_PRINT("Read length 0x%" PRIx64
 8024e76:	9700      	str	r7, [sp, #0]
 8024e78:	462a      	mov	r2, r5
 8024e7a:	4633      	mov	r3, r6
 8024e7c:	485a      	ldr	r0, [pc, #360]	; (8024fe8 <_np_cmd_nand_read+0x2b4>)
 8024e7e:	f006 fcf9 	bl	802b874 <printf>
        return NP_ERR_LEN_NOT_ALIGN;
 8024e82:	f06f 006d 	mvn.w	r0, #109	; 0x6d
 8024e86:	e09e      	b.n	8024fc6 <_np_cmd_nand_read+0x292>
    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 8024e88:	2100      	movs	r1, #0
 8024e8a:	9808      	ldr	r0, [sp, #32]
 8024e8c:	f7ff f83e 	bl	8023f0c <_np_cmd_read_bad_blocks>
 8024e90:	2800      	cmp	r0, #0
 8024e92:	d0af      	beq.n	8024df4 <_np_cmd_nand_read+0xc0>
 8024e94:	e097      	b.n	8024fc6 <_np_cmd_nand_read+0x292>
            ERROR_PRINT("Read address 0x%" PRIx64
 8024e96:	9b05      	ldr	r3, [sp, #20]
 8024e98:	9300      	str	r3, [sp, #0]
 8024e9a:	f8cd a004 	str.w	sl, [sp, #4]
 8024e9e:	4642      	mov	r2, r8
 8024ea0:	464b      	mov	r3, r9
 8024ea2:	4852      	ldr	r0, [pc, #328]	; (8024fec <_np_cmd_nand_read+0x2b8>)
 8024ea4:	f006 fce6 	bl	802b874 <printf>
            return NP_ERR_ADDR_EXCEEDED;
 8024ea8:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8024eac:	e08b      	b.n	8024fc6 <_np_cmd_nand_read+0x292>
            addr += block_size;
 8024eae:	9b06      	ldr	r3, [sp, #24]
 8024eb0:	eb13 0808 	adds.w	r8, r3, r8
 8024eb4:	f149 0900 	adc.w	r9, r9, #0
            page.page += block_size / page_size;
 8024eb8:	fbb3 f2f7 	udiv	r2, r3, r7
 8024ebc:	4944      	ldr	r1, [pc, #272]	; (8024fd0 <_np_cmd_nand_read+0x29c>)
 8024ebe:	f8d1 31c0 	ldr.w	r3, [r1, #448]	; 0x1c0
 8024ec2:	4413      	add	r3, r2
 8024ec4:	f8c1 31c0 	str.w	r3, [r1, #448]	; 0x1c0
    while (len)
 8024ec8:	ea55 0306 	orrs.w	r3, r5, r6
 8024ecc:	d074      	beq.n	8024fb8 <_np_cmd_nand_read+0x284>
        if (addr >= total_size)
 8024ece:	9b05      	ldr	r3, [sp, #20]
 8024ed0:	4598      	cmp	r8, r3
 8024ed2:	eb79 030a 	sbcs.w	r3, r9, sl
 8024ed6:	d2de      	bcs.n	8024e96 <_np_cmd_nand_read+0x162>
        if (skip_bb && nand_bad_block_table_lookup(page.page))
 8024ed8:	9b07      	ldr	r3, [sp, #28]
 8024eda:	b303      	cbz	r3, 8024f1e <_np_cmd_nand_read+0x1ea>
 8024edc:	4b3c      	ldr	r3, [pc, #240]	; (8024fd0 <_np_cmd_nand_read+0x29c>)
 8024ede:	f8d3 01c0 	ldr.w	r0, [r3, #448]	; 0x1c0
 8024ee2:	f7fe fe7d 	bl	8023be0 <nand_bad_block_table_lookup>
 8024ee6:	b1d0      	cbz	r0, 8024f1e <_np_cmd_nand_read+0x1ea>
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", addr);
 8024ee8:	4642      	mov	r2, r8
 8024eea:	464b      	mov	r3, r9
 8024eec:	4840      	ldr	r0, [pc, #256]	; (8024ff0 <_np_cmd_nand_read+0x2bc>)
 8024eee:	f006 fcc1 	bl	802b874 <printf>
            if (np_send_bad_block_info(addr, block_size, true))
 8024ef2:	2301      	movs	r3, #1
 8024ef4:	9a06      	ldr	r2, [sp, #24]
 8024ef6:	4640      	mov	r0, r8
 8024ef8:	4649      	mov	r1, r9
 8024efa:	f7fe fed9 	bl	8023cb0 <np_send_bad_block_info>
 8024efe:	2800      	cmp	r0, #0
 8024f00:	d15c      	bne.n	8024fbc <_np_cmd_nand_read+0x288>
            if (read_cmd->len == total_size)
 8024f02:	f8db 2009 	ldr.w	r2, [fp, #9]
 8024f06:	f8db 300d 	ldr.w	r3, [fp, #13]
 8024f0a:	9905      	ldr	r1, [sp, #20]
 8024f0c:	4553      	cmp	r3, sl
 8024f0e:	bf08      	it	eq
 8024f10:	428a      	cmpeq	r2, r1
 8024f12:	d1cc      	bne.n	8024eae <_np_cmd_nand_read+0x17a>
                len -= block_size;
 8024f14:	9b06      	ldr	r3, [sp, #24]
 8024f16:	1aed      	subs	r5, r5, r3
 8024f18:	f166 0600 	sbc.w	r6, r6, #0
 8024f1c:	e7c7      	b.n	8024eae <_np_cmd_nand_read+0x17a>
        if (np_nand_read(addr, &page, page_size, block_size, prog))
 8024f1e:	9b08      	ldr	r3, [sp, #32]
 8024f20:	9301      	str	r3, [sp, #4]
 8024f22:	9b06      	ldr	r3, [sp, #24]
 8024f24:	9300      	str	r3, [sp, #0]
 8024f26:	463b      	mov	r3, r7
 8024f28:	4a32      	ldr	r2, [pc, #200]	; (8024ff4 <_np_cmd_nand_read+0x2c0>)
 8024f2a:	4640      	mov	r0, r8
 8024f2c:	4649      	mov	r1, r9
 8024f2e:	f7ff fb1f 	bl	8024570 <np_nand_read>
 8024f32:	b300      	cbz	r0, 8024f76 <_np_cmd_nand_read+0x242>
            return NP_ERR_NAND_RD;
 8024f34:	f06f 0067 	mvn.w	r0, #103	; 0x67
 8024f38:	e045      	b.n	8024fc6 <_np_cmd_nand_read+0x292>
            memcpy(resp->data, page.buf + page.offset, send_len);
 8024f3a:	4622      	mov	r2, r4
 8024f3c:	492d      	ldr	r1, [pc, #180]	; (8024ff4 <_np_cmd_nand_read+0x2c0>)
 8024f3e:	4419      	add	r1, r3
 8024f40:	482d      	ldr	r0, [pc, #180]	; (8024ff8 <_np_cmd_nand_read+0x2c4>)
 8024f42:	f006 fdb7 	bl	802bab4 <memcpy>
            while (!np_comm_cb->send_ready());
 8024f46:	4b2d      	ldr	r3, [pc, #180]	; (8024ffc <_np_cmd_nand_read+0x2c8>)
 8024f48:	681b      	ldr	r3, [r3, #0]
 8024f4a:	685b      	ldr	r3, [r3, #4]
 8024f4c:	4798      	blx	r3
 8024f4e:	2800      	cmp	r0, #0
 8024f50:	d0f9      	beq.n	8024f46 <_np_cmd_nand_read+0x212>
            resp->info = send_len;
 8024f52:	4820      	ldr	r0, [pc, #128]	; (8024fd4 <_np_cmd_nand_read+0x2a0>)
 8024f54:	7044      	strb	r4, [r0, #1]
            if (np_comm_cb->send(np_packet_send_buf,
 8024f56:	4b29      	ldr	r3, [pc, #164]	; (8024ffc <_np_cmd_nand_read+0x2c8>)
 8024f58:	681b      	ldr	r3, [r3, #0]
 8024f5a:	681b      	ldr	r3, [r3, #0]
 8024f5c:	1ca1      	adds	r1, r4, #2
 8024f5e:	4798      	blx	r3
 8024f60:	bb78      	cbnz	r0, 8024fc2 <_np_cmd_nand_read+0x28e>
            page.offset += send_len;
 8024f62:	4a1b      	ldr	r2, [pc, #108]	; (8024fd0 <_np_cmd_nand_read+0x29c>)
 8024f64:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
 8024f68:	4423      	add	r3, r4
 8024f6a:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
            len -= send_len;
 8024f6e:	1b2c      	subs	r4, r5, r4
 8024f70:	4625      	mov	r5, r4
 8024f72:	f166 0600 	sbc.w	r6, r6, #0
        while (page.offset < page_size && len)
 8024f76:	4b16      	ldr	r3, [pc, #88]	; (8024fd0 <_np_cmd_nand_read+0x29c>)
 8024f78:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8024f7c:	42bb      	cmp	r3, r7
 8024f7e:	d20c      	bcs.n	8024f9a <_np_cmd_nand_read+0x266>
 8024f80:	ea55 0206 	orrs.w	r2, r5, r6
 8024f84:	d009      	beq.n	8024f9a <_np_cmd_nand_read+0x266>
            if (page_size - page.offset >= tx_data_len)
 8024f86:	1afc      	subs	r4, r7, r3
 8024f88:	2c3d      	cmp	r4, #61	; 0x3d
 8024f8a:	d900      	bls.n	8024f8e <_np_cmd_nand_read+0x25a>
                send_len = tx_data_len;
 8024f8c:	243e      	movs	r4, #62	; 0x3e
            if (send_len > len)
 8024f8e:	42a5      	cmp	r5, r4
 8024f90:	f176 0200 	sbcs.w	r2, r6, #0
 8024f94:	d2d1      	bcs.n	8024f3a <_np_cmd_nand_read+0x206>
                send_len = len;
 8024f96:	462c      	mov	r4, r5
 8024f98:	e7cf      	b.n	8024f3a <_np_cmd_nand_read+0x206>
        addr += page_size;
 8024f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f9c:	eb13 0808 	adds.w	r8, r3, r8
 8024fa0:	f149 0900 	adc.w	r9, r9, #0
        page.offset = 0;
 8024fa4:	4b0a      	ldr	r3, [pc, #40]	; (8024fd0 <_np_cmd_nand_read+0x29c>)
 8024fa6:	2200      	movs	r2, #0
 8024fa8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
        page.page++;
 8024fac:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 8024fb0:	3201      	adds	r2, #1
 8024fb2:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
 8024fb6:	e787      	b.n	8024ec8 <_np_cmd_nand_read+0x194>
    return 0;
 8024fb8:	2000      	movs	r0, #0
 8024fba:	e004      	b.n	8024fc6 <_np_cmd_nand_read+0x292>
                return -1;
 8024fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8024fc0:	e001      	b.n	8024fc6 <_np_cmd_nand_read+0x292>
                return -1;
 8024fc2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8024fc6:	b00b      	add	sp, #44	; 0x2c
 8024fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fcc:	08030c7c 	.word	0x08030c7c
 8024fd0:	200032e8 	.word	0x200032e8
 8024fd4:	200012a8 	.word	0x200012a8
 8024fd8:	08030c48 	.word	0x08030c48
 8024fdc:	08030ca4 	.word	0x08030ca4
 8024fe0:	08030ce8 	.word	0x08030ce8
 8024fe4:	080307f0 	.word	0x080307f0
 8024fe8:	08030d28 	.word	0x08030d28
 8024fec:	08030d68 	.word	0x08030d68
 8024ff0:	08030bec 	.word	0x08030bec
 8024ff4:	200012e8 	.word	0x200012e8
 8024ff8:	200012aa 	.word	0x200012aa
 8024ffc:	200012a4 	.word	0x200012a4

08025000 <np_cmd_nand_read>:
{
 8025000:	b510      	push	{r4, lr}
 8025002:	4604      	mov	r4, r0
    led_rd_set(true);
 8025004:	2001      	movs	r0, #1
 8025006:	f7fe fd15 	bl	8023a34 <led_rd_set>
    ret = _np_cmd_nand_read(prog);
 802500a:	4620      	mov	r0, r4
 802500c:	f7ff fe92 	bl	8024d34 <_np_cmd_nand_read>
 8025010:	4604      	mov	r4, r0
    led_rd_set(false);
 8025012:	2000      	movs	r0, #0
 8025014:	f7fe fd0e 	bl	8023a34 <led_rd_set>
}
 8025018:	4620      	mov	r0, r4
 802501a:	bd10      	pop	{r4, pc}

0802501c <_np_cmd_nand_erase>:
{
 802501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025020:	b08d      	sub	sp, #52	; 0x34
 8025022:	900a      	str	r0, [sp, #40]	; 0x28
    if (prog->rx_buf_len < sizeof(np_erase_cmd_t))
 8025024:	6841      	ldr	r1, [r0, #4]
 8025026:	2911      	cmp	r1, #17
 8025028:	d970      	bls.n	802510c <_np_cmd_nand_erase+0xf0>
    erase_cmd = (np_erase_cmd_t *)prog->rx_buf;
 802502a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802502c:	682b      	ldr	r3, [r5, #0]
 802502e:	9309      	str	r3, [sp, #36]	; 0x24
    total_len = len = erase_cmd->len;
 8025030:	f8d3 2009 	ldr.w	r2, [r3, #9]
 8025034:	9205      	str	r2, [sp, #20]
 8025036:	f8d3 100d 	ldr.w	r1, [r3, #13]
 802503a:	9106      	str	r1, [sp, #24]
    addr = erase_cmd->addr;
 802503c:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8025040:	f8d3 7005 	ldr.w	r7, [r3, #5]
    skip_bb = erase_cmd->flags.skip_bb;
 8025044:	7c5e      	ldrb	r6, [r3, #17]
 8025046:	f006 0301 	and.w	r3, r6, #1
 802504a:	9307      	str	r3, [sp, #28]
    inc_spare = erase_cmd->flags.inc_spare;
 802504c:	f3c6 0640 	ubfx	r6, r6, #1, #1
    DEBUG_PRINT("Erase at 0x%" PRIx64 " %" PRIx64 " bytes command\r\n", addr,
 8025050:	9200      	str	r2, [sp, #0]
 8025052:	9101      	str	r1, [sp, #4]
 8025054:	4622      	mov	r2, r4
 8025056:	463b      	mov	r3, r7
 8025058:	4877      	ldr	r0, [pc, #476]	; (8025238 <_np_cmd_nand_erase+0x21c>)
 802505a:	f006 fc0b 	bl	802b874 <printf>
    pages_in_block = prog->chip_info.block_size / prog->chip_info.page_size;
 802505e:	462a      	mov	r2, r5
 8025060:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
 8025064:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8025068:	910b      	str	r1, [sp, #44]	; 0x2c
 802506a:	f8d3 5228 	ldr.w	r5, [r3, #552]	; 0x228
 802506e:	fbb1 f8f5 	udiv	r8, r1, r5
 8025072:	f8cd 8020 	str.w	r8, [sp, #32]
    if (inc_spare)
 8025076:	2e00      	cmp	r6, #0
 8025078:	d04e      	beq.n	8025118 <_np_cmd_nand_erase+0xfc>
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 802507a:	4616      	mov	r6, r2
 802507c:	f502 5108 	add.w	r1, r2, #8704	; 0x2200
 8025080:	3130      	adds	r1, #48	; 0x30
 8025082:	462a      	mov	r2, r5
 8025084:	2300      	movs	r3, #0
 8025086:	e9d1 0100 	ldrd	r0, r1, [r1]
 802508a:	f7fd fd69 	bl	8022b60 <__aeabi_uldivmod>
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 802508e:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 8025092:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8025096:	441d      	add	r5, r3
        block_size = pages_in_block * page_size;
 8025098:	fb05 f308 	mul.w	r3, r5, r8
 802509c:	930b      	str	r3, [sp, #44]	; 0x2c
        total_size = (uint64_t)pages * page_size;
 802509e:	fba0 b305 	umull	fp, r3, r0, r5
 80250a2:	9304      	str	r3, [sp, #16]
    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 80250a4:	9b07      	ldr	r3, [sp, #28]
 80250a6:	b11b      	cbz	r3, 80250b0 <_np_cmd_nand_erase+0x94>
 80250a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80250aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80250ac:	2b00      	cmp	r3, #0
 80250ae:	d03c      	beq.n	802512a <_np_cmd_nand_erase+0x10e>
    if (addr % block_size)
 80250b0:	f04f 0800 	mov.w	r8, #0
 80250b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80250b6:	4616      	mov	r6, r2
 80250b8:	4643      	mov	r3, r8
 80250ba:	4620      	mov	r0, r4
 80250bc:	4639      	mov	r1, r7
 80250be:	f7fd fd4f 	bl	8022b60 <__aeabi_uldivmod>
 80250c2:	4313      	orrs	r3, r2
 80250c4:	d138      	bne.n	8025138 <_np_cmd_nand_erase+0x11c>
    if (!len)
 80250c6:	9b05      	ldr	r3, [sp, #20]
 80250c8:	9a06      	ldr	r2, [sp, #24]
 80250ca:	4313      	orrs	r3, r2
 80250cc:	d03d      	beq.n	802514a <_np_cmd_nand_erase+0x12e>
    if (len % block_size)
 80250ce:	4632      	mov	r2, r6
 80250d0:	4643      	mov	r3, r8
 80250d2:	9805      	ldr	r0, [sp, #20]
 80250d4:	9906      	ldr	r1, [sp, #24]
 80250d6:	f7fd fd43 	bl	8022b60 <__aeabi_uldivmod>
 80250da:	4313      	orrs	r3, r2
 80250dc:	d13b      	bne.n	8025156 <_np_cmd_nand_erase+0x13a>
    if (addr + len > total_size)
 80250de:	9b05      	ldr	r3, [sp, #20]
 80250e0:	191a      	adds	r2, r3, r4
 80250e2:	9b06      	ldr	r3, [sp, #24]
 80250e4:	eb47 0303 	adc.w	r3, r7, r3
 80250e8:	4593      	cmp	fp, r2
 80250ea:	9a04      	ldr	r2, [sp, #16]
 80250ec:	eb72 0303 	sbcs.w	r3, r2, r3
 80250f0:	d33b      	bcc.n	802516a <_np_cmd_nand_erase+0x14e>
    page = addr / page_size;
 80250f2:	f04f 0a00 	mov.w	sl, #0
 80250f6:	462a      	mov	r2, r5
 80250f8:	4653      	mov	r3, sl
 80250fa:	4620      	mov	r0, r4
 80250fc:	4639      	mov	r1, r7
 80250fe:	f7fd fd2f 	bl	8022b60 <__aeabi_uldivmod>
 8025102:	4681      	mov	r9, r0
    total_len = len = erase_cmd->len;
 8025104:	9d05      	ldr	r5, [sp, #20]
 8025106:	f8dd 8018 	ldr.w	r8, [sp, #24]
    while (len)
 802510a:	e06f      	b.n	80251ec <_np_cmd_nand_erase+0x1d0>
        ERROR_PRINT("Wrong buffer length for erase command %lu\r\n",
 802510c:	484b      	ldr	r0, [pc, #300]	; (802523c <_np_cmd_nand_erase+0x220>)
 802510e:	f006 fbb1 	bl	802b874 <printf>
        return NP_ERR_LEN_INVALID;
 8025112:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 8025116:	e08c      	b.n	8025232 <_np_cmd_nand_erase+0x216>
        total_size = prog->chip_info.total_size;
 8025118:	f242 2330 	movw	r3, #8752	; 0x2230
 802511c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802511e:	18ca      	adds	r2, r1, r3
 8025120:	f851 b003 	ldr.w	fp, [r1, r3]
 8025124:	6853      	ldr	r3, [r2, #4]
 8025126:	9304      	str	r3, [sp, #16]
 8025128:	e7bc      	b.n	80250a4 <_np_cmd_nand_erase+0x88>
    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 802512a:	2100      	movs	r1, #0
 802512c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802512e:	f7fe feed 	bl	8023f0c <_np_cmd_read_bad_blocks>
 8025132:	2800      	cmp	r0, #0
 8025134:	d0bc      	beq.n	80250b0 <_np_cmd_nand_erase+0x94>
 8025136:	e07c      	b.n	8025232 <_np_cmd_nand_erase+0x216>
        ERROR_PRINT("Address 0x%" PRIx64
 8025138:	9600      	str	r6, [sp, #0]
 802513a:	4622      	mov	r2, r4
 802513c:	463b      	mov	r3, r7
 802513e:	4840      	ldr	r0, [pc, #256]	; (8025240 <_np_cmd_nand_erase+0x224>)
 8025140:	f006 fb98 	bl	802b874 <printf>
        return NP_ERR_ADDR_NOT_ALIGN;
 8025144:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8025148:	e073      	b.n	8025232 <_np_cmd_nand_erase+0x216>
        ERROR_PRINT("Length is 0\r\n");
 802514a:	483e      	ldr	r0, [pc, #248]	; (8025244 <_np_cmd_nand_erase+0x228>)
 802514c:	f006 fbea 	bl	802b924 <puts>
        return NP_ERR_LEN_INVALID;
 8025150:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 8025154:	e06d      	b.n	8025232 <_np_cmd_nand_erase+0x216>
        ERROR_PRINT("Length 0x%" PRIx64
 8025156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025158:	9300      	str	r3, [sp, #0]
 802515a:	9a05      	ldr	r2, [sp, #20]
 802515c:	9b06      	ldr	r3, [sp, #24]
 802515e:	483a      	ldr	r0, [pc, #232]	; (8025248 <_np_cmd_nand_erase+0x22c>)
 8025160:	f006 fb88 	bl	802b874 <printf>
        return NP_ERR_LEN_NOT_ALIGN;
 8025164:	f06f 006d 	mvn.w	r0, #109	; 0x6d
 8025168:	e063      	b.n	8025232 <_np_cmd_nand_erase+0x216>
        ERROR_PRINT("Erase address exceded 0x%" PRIx64 "+0x%" PRIx64
 802516a:	f8cd b008 	str.w	fp, [sp, #8]
 802516e:	9203      	str	r2, [sp, #12]
 8025170:	9b05      	ldr	r3, [sp, #20]
 8025172:	9300      	str	r3, [sp, #0]
 8025174:	9b06      	ldr	r3, [sp, #24]
 8025176:	9301      	str	r3, [sp, #4]
 8025178:	4622      	mov	r2, r4
 802517a:	463b      	mov	r3, r7
 802517c:	4833      	ldr	r0, [pc, #204]	; (802524c <_np_cmd_nand_erase+0x230>)
 802517e:	f006 fb79 	bl	802b874 <printf>
        return NP_ERR_ADDR_EXCEEDED;
 8025182:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8025186:	e054      	b.n	8025232 <_np_cmd_nand_erase+0x216>
            ERROR_PRINT("Erase address 0x%" PRIx64
 8025188:	f8cd b000 	str.w	fp, [sp]
 802518c:	9b04      	ldr	r3, [sp, #16]
 802518e:	9301      	str	r3, [sp, #4]
 8025190:	4622      	mov	r2, r4
 8025192:	463b      	mov	r3, r7
 8025194:	482e      	ldr	r0, [pc, #184]	; (8025250 <_np_cmd_nand_erase+0x234>)
 8025196:	f006 fb6d 	bl	802b874 <printf>
            return NP_ERR_ADDR_EXCEEDED;
 802519a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 802519e:	e048      	b.n	8025232 <_np_cmd_nand_erase+0x216>
        if (skip_bb && (is_bad = nand_bad_block_table_lookup(page)))
 80251a0:	4648      	mov	r0, r9
 80251a2:	f7fe fd1d 	bl	8023be0 <nand_bad_block_table_lookup>
 80251a6:	4682      	mov	sl, r0
 80251a8:	b358      	cbz	r0, 8025202 <_np_cmd_nand_erase+0x1e6>
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", addr);
 80251aa:	4622      	mov	r2, r4
 80251ac:	463b      	mov	r3, r7
 80251ae:	4829      	ldr	r0, [pc, #164]	; (8025254 <_np_cmd_nand_erase+0x238>)
 80251b0:	f006 fb60 	bl	802b874 <printf>
            if (np_send_bad_block_info(addr, block_size, true))
 80251b4:	2301      	movs	r3, #1
 80251b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80251b8:	4620      	mov	r0, r4
 80251ba:	4639      	mov	r1, r7
 80251bc:	f7fe fd78 	bl	8023cb0 <np_send_bad_block_info>
 80251c0:	b1f8      	cbz	r0, 8025202 <_np_cmd_nand_erase+0x1e6>
                return -1;
 80251c2:	f04f 30ff 	mov.w	r0, #4294967295
 80251c6:	e034      	b.n	8025232 <_np_cmd_nand_erase+0x216>
        if (!is_bad && np_nand_erase(prog, page))
 80251c8:	4649      	mov	r1, r9
 80251ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80251cc:	f7ff fa08 	bl	80245e0 <np_nand_erase>
 80251d0:	b1d0      	cbz	r0, 8025208 <_np_cmd_nand_erase+0x1ec>
            return NP_ERR_NAND_ERASE;
 80251d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80251d6:	e02c      	b.n	8025232 <_np_cmd_nand_erase+0x216>
            len -= block_size;
 80251d8:	1bad      	subs	r5, r5, r6
 80251da:	f168 0800 	sbc.w	r8, r8, #0
        np_send_progress(total_len - len);
 80251de:	9b05      	ldr	r3, [sp, #20]
 80251e0:	1b58      	subs	r0, r3, r5
 80251e2:	9b06      	ldr	r3, [sp, #24]
 80251e4:	eb63 0108 	sbc.w	r1, r3, r8
 80251e8:	f7fe fd88 	bl	8023cfc <np_send_progress>
    while (len)
 80251ec:	ea55 0308 	orrs.w	r3, r5, r8
 80251f0:	d01d      	beq.n	802522e <_np_cmd_nand_erase+0x212>
        if (addr >= total_size)
 80251f2:	455c      	cmp	r4, fp
 80251f4:	9b04      	ldr	r3, [sp, #16]
 80251f6:	eb77 0303 	sbcs.w	r3, r7, r3
 80251fa:	d2c5      	bcs.n	8025188 <_np_cmd_nand_erase+0x16c>
        if (skip_bb && (is_bad = nand_bad_block_table_lookup(page)))
 80251fc:	9b07      	ldr	r3, [sp, #28]
 80251fe:	2b00      	cmp	r3, #0
 8025200:	d1ce      	bne.n	80251a0 <_np_cmd_nand_erase+0x184>
        if (!is_bad && np_nand_erase(prog, page))
 8025202:	f1ba 0f00 	cmp.w	sl, #0
 8025206:	d0df      	beq.n	80251c8 <_np_cmd_nand_erase+0x1ac>
        addr += block_size;
 8025208:	1934      	adds	r4, r6, r4
 802520a:	f147 0700 	adc.w	r7, r7, #0
        page += pages_in_block;
 802520e:	9b08      	ldr	r3, [sp, #32]
 8025210:	4499      	add	r9, r3
        if (!is_bad || (is_bad && erase_cmd->len == total_size))
 8025212:	f1ba 0f00 	cmp.w	sl, #0
 8025216:	d0df      	beq.n	80251d8 <_np_cmd_nand_erase+0x1bc>
 8025218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802521a:	f8d3 2009 	ldr.w	r2, [r3, #9]
 802521e:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8025222:	9904      	ldr	r1, [sp, #16]
 8025224:	428b      	cmp	r3, r1
 8025226:	bf08      	it	eq
 8025228:	455a      	cmpeq	r2, fp
 802522a:	d1d8      	bne.n	80251de <_np_cmd_nand_erase+0x1c2>
 802522c:	e7d4      	b.n	80251d8 <_np_cmd_nand_erase+0x1bc>
    return np_send_ok_status();
 802522e:	f7fe fd0f 	bl	8023c50 <np_send_ok_status>
}
 8025232:	b00d      	add	sp, #52	; 0x34
 8025234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025238:	08030dd8 	.word	0x08030dd8
 802523c:	08030da4 	.word	0x08030da4
 8025240:	08030e00 	.word	0x08030e00
 8025244:	080307f0 	.word	0x080307f0
 8025248:	08030e3c 	.word	0x08030e3c
 802524c:	08030e78 	.word	0x08030e78
 8025250:	08030ec4 	.word	0x08030ec4
 8025254:	08030bec 	.word	0x08030bec

08025258 <np_cmd_nand_erase>:
{
 8025258:	b510      	push	{r4, lr}
 802525a:	4604      	mov	r4, r0
    led_wr_set(true);
 802525c:	2001      	movs	r0, #1
 802525e:	f7fe fbdf 	bl	8023a20 <led_wr_set>
    ret = _np_cmd_nand_erase(prog);
 8025262:	4620      	mov	r0, r4
 8025264:	f7ff feda 	bl	802501c <_np_cmd_nand_erase>
 8025268:	4604      	mov	r4, r0
    led_wr_set(false);
 802526a:	2000      	movs	r0, #0
 802526c:	f7fe fbd8 	bl	8023a20 <led_wr_set>
}
 8025270:	4620      	mov	r0, r4
 8025272:	bd10      	pop	{r4, pc}

08025274 <np_init>:

void np_init()
{
    prog.active_image = 0xff;
 8025274:	4b02      	ldr	r3, [pc, #8]	; (8025280 <np_init+0xc>)
 8025276:	22ff      	movs	r2, #255	; 0xff
 8025278:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
}
 802527c:	4770      	bx	lr
 802527e:	bf00      	nop
 8025280:	200054b0 	.word	0x200054b0

08025284 <np_handler>:

void np_handler()
{
 8025284:	b510      	push	{r4, lr}
    np_packet_handler(&prog);
 8025286:	4c04      	ldr	r4, [pc, #16]	; (8025298 <np_handler+0x14>)
 8025288:	4620      	mov	r0, r4
 802528a:	f7fe fef5 	bl	8024078 <np_packet_handler>
    np_nand_handler(&prog);
 802528e:	4620      	mov	r0, r4
 8025290:	f7ff f924 	bl	80244dc <np_nand_handler>
}
 8025294:	bd10      	pop	{r4, pc}
 8025296:	bf00      	nop
 8025298:	200034b0 	.word	0x200034b0

0802529c <np_comm_register>:

int np_comm_register(np_comm_cb_t *cb)
{
    np_comm_cb = cb;
 802529c:	4b01      	ldr	r3, [pc, #4]	; (80252a4 <np_comm_register+0x8>)
 802529e:	6018      	str	r0, [r3, #0]

    return 0;
}
 80252a0:	2000      	movs	r0, #0
 80252a2:	4770      	bx	lr
 80252a4:	200012a4 	.word	0x200012a4

080252a8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80252a8:	b500      	push	{lr}
 80252aa:	b083      	sub	sp, #12

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80252ac:	2300      	movs	r3, #0
 80252ae:	f8ad 3004 	strh.w	r3, [sp, #4]
 80252b2:	f88d 3006 	strb.w	r3, [sp, #6]
  RTC_DateTypeDef DateToUpdate = {0};
 80252b6:	9300      	str	r3, [sp, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80252b8:	4819      	ldr	r0, [pc, #100]	; (8025320 <MX_RTC_Init+0x78>)
 80252ba:	4b1a      	ldr	r3, [pc, #104]	; (8025324 <MX_RTC_Init+0x7c>)
 80252bc:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80252be:	f04f 33ff 	mov.w	r3, #4294967295
 80252c2:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80252c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80252c8:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80252ca:	f003 fb0b 	bl	80288e4 <HAL_RTC_Init>
 80252ce:	b9f0      	cbnz	r0, 802530e <MX_RTC_Init+0x66>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80252d0:	2300      	movs	r3, #0
 80252d2:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 80252d6:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 80252da:	f88d 3006 	strb.w	r3, [sp, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80252de:	2201      	movs	r2, #1
 80252e0:	a901      	add	r1, sp, #4
 80252e2:	480f      	ldr	r0, [pc, #60]	; (8025320 <MX_RTC_Init+0x78>)
 80252e4:	f003 f9f9 	bl	80286da <HAL_RTC_SetTime>
 80252e8:	b9a0      	cbnz	r0, 8025314 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80252ea:	2201      	movs	r2, #1
 80252ec:	f88d 2000 	strb.w	r2, [sp]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80252f0:	f88d 2001 	strb.w	r2, [sp, #1]
  DateToUpdate.Date = 0x1;
 80252f4:	f88d 2002 	strb.w	r2, [sp, #2]
  DateToUpdate.Year = 0x0;
 80252f8:	2300      	movs	r3, #0
 80252fa:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80252fe:	4669      	mov	r1, sp
 8025300:	4807      	ldr	r0, [pc, #28]	; (8025320 <MX_RTC_Init+0x78>)
 8025302:	f003 fa4b 	bl	802879c <HAL_RTC_SetDate>
 8025306:	b940      	cbnz	r0, 802531a <MX_RTC_Init+0x72>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8025308:	b003      	add	sp, #12
 802530a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 802530e:	f7fe fba7 	bl	8023a60 <Error_Handler>
 8025312:	e7dd      	b.n	80252d0 <MX_RTC_Init+0x28>
    Error_Handler();
 8025314:	f7fe fba4 	bl	8023a60 <Error_Handler>
 8025318:	e7e7      	b.n	80252ea <MX_RTC_Init+0x42>
    Error_Handler();
 802531a:	f7fe fba1 	bl	8023a60 <Error_Handler>
}
 802531e:	e7f3      	b.n	8025308 <MX_RTC_Init+0x60>
 8025320:	200056f8 	.word	0x200056f8
 8025324:	40002800 	.word	0x40002800

08025328 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8025328:	6802      	ldr	r2, [r0, #0]
 802532a:	4b14      	ldr	r3, [pc, #80]	; (802537c <HAL_RTC_MspInit+0x54>)
 802532c:	429a      	cmp	r2, r3
 802532e:	d000      	beq.n	8025332 <HAL_RTC_MspInit+0xa>
 8025330:	4770      	bx	lr
{
 8025332:	b500      	push	{lr}
 8025334:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8025336:	f002 fcc1 	bl	8027cbc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 802533a:	4b11      	ldr	r3, [pc, #68]	; (8025380 <HAL_RTC_MspInit+0x58>)
 802533c:	69da      	ldr	r2, [r3, #28]
 802533e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8025342:	61da      	str	r2, [r3, #28]
 8025344:	69db      	ldr	r3, [r3, #28]
 8025346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802534a:	9301      	str	r3, [sp, #4]
 802534c:	9b01      	ldr	r3, [sp, #4]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 802534e:	4b0d      	ldr	r3, [pc, #52]	; (8025384 <HAL_RTC_MspInit+0x5c>)
 8025350:	2201      	movs	r2, #1
 8025352:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8025356:	2200      	movs	r2, #0
 8025358:	4611      	mov	r1, r2
 802535a:	2003      	movs	r0, #3
 802535c:	f000 ff28 	bl	80261b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8025360:	2003      	movs	r0, #3
 8025362:	f000 ff5d 	bl	8026220 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 4, 0);
 8025366:	2200      	movs	r2, #0
 8025368:	2104      	movs	r1, #4
 802536a:	2029      	movs	r0, #41	; 0x29
 802536c:	f000 ff20 	bl	80261b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8025370:	2029      	movs	r0, #41	; 0x29
 8025372:	f000 ff55 	bl	8026220 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8025376:	b003      	add	sp, #12
 8025378:	f85d fb04 	ldr.w	pc, [sp], #4
 802537c:	40002800 	.word	0x40002800
 8025380:	40021000 	.word	0x40021000
 8025384:	42420000 	.word	0x42420000

08025388 <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8025388:	b530      	push	{r4, r5, lr}
 802538a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802538c:	2300      	movs	r3, #0
 802538e:	9302      	str	r3, [sp, #8]
 8025390:	9303      	str	r3, [sp, #12]
 8025392:	9304      	str	r3, [sp, #16]
 8025394:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 8025396:	6802      	ldr	r2, [r0, #0]
 8025398:	4b1a      	ldr	r3, [pc, #104]	; (8025404 <HAL_SPI_MspInit+0x7c>)
 802539a:	429a      	cmp	r2, r3
 802539c:	d001      	beq.n	80253a2 <HAL_SPI_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 802539e:	b007      	add	sp, #28
 80253a0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80253a2:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80253a6:	699a      	ldr	r2, [r3, #24]
 80253a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80253ac:	619a      	str	r2, [r3, #24]
 80253ae:	699a      	ldr	r2, [r3, #24]
 80253b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80253b4:	9200      	str	r2, [sp, #0]
 80253b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80253b8:	699a      	ldr	r2, [r3, #24]
 80253ba:	f042 0204 	orr.w	r2, r2, #4
 80253be:	619a      	str	r2, [r3, #24]
 80253c0:	699b      	ldr	r3, [r3, #24]
 80253c2:	f003 0304 	and.w	r3, r3, #4
 80253c6:	9301      	str	r3, [sp, #4]
 80253c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 80253ca:	23a0      	movs	r3, #160	; 0xa0
 80253cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80253ce:	2302      	movs	r3, #2
 80253d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80253d2:	2303      	movs	r3, #3
 80253d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80253d6:	4d0c      	ldr	r5, [pc, #48]	; (8025408 <HAL_SPI_MspInit+0x80>)
 80253d8:	a902      	add	r1, sp, #8
 80253da:	4628      	mov	r0, r5
 80253dc:	f001 f9ec 	bl	80267b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80253e0:	2340      	movs	r3, #64	; 0x40
 80253e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80253e4:	2400      	movs	r4, #0
 80253e6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80253e8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 80253ea:	a902      	add	r1, sp, #8
 80253ec:	4628      	mov	r0, r5
 80253ee:	f001 f9e3 	bl	80267b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80253f2:	4622      	mov	r2, r4
 80253f4:	4621      	mov	r1, r4
 80253f6:	2023      	movs	r0, #35	; 0x23
 80253f8:	f000 feda 	bl	80261b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80253fc:	2023      	movs	r0, #35	; 0x23
 80253fe:	f000 ff0f 	bl	8026220 <HAL_NVIC_EnableIRQ>
}
 8025402:	e7cc      	b.n	802539e <HAL_SPI_MspInit+0x16>
 8025404:	40013000 	.word	0x40013000
 8025408:	40010800 	.word	0x40010800

0802540c <spi_flash_get_baud_rate_prescaler>:
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
}

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 802540c:	4b1d      	ldr	r3, [pc, #116]	; (8025484 <spi_flash_get_baud_rate_prescaler+0x78>)
 802540e:	681b      	ldr	r3, [r3, #0]

    if (spi_freq_khz >= system_clock_khz / 2)
 8025410:	4a1d      	ldr	r2, [pc, #116]	; (8025488 <spi_flash_get_baud_rate_prescaler+0x7c>)
 8025412:	fba2 1203 	umull	r1, r2, r2, r3
 8025416:	ebb0 1fd2 	cmp.w	r0, r2, lsr #7
 802541a:	d225      	bcs.n	8025468 <spi_flash_get_baud_rate_prescaler+0x5c>
        return SPI_BAUDRATEPRESCALER_2;
    else if (spi_freq_khz >= system_clock_khz / 4)
 802541c:	4a1a      	ldr	r2, [pc, #104]	; (8025488 <spi_flash_get_baud_rate_prescaler+0x7c>)
 802541e:	fba2 1203 	umull	r1, r2, r2, r3
 8025422:	ebb0 2f12 	cmp.w	r0, r2, lsr #8
 8025426:	d221      	bcs.n	802546c <spi_flash_get_baud_rate_prescaler+0x60>
        return SPI_BAUDRATEPRESCALER_4;
    else if (spi_freq_khz >= system_clock_khz / 8)
 8025428:	4a17      	ldr	r2, [pc, #92]	; (8025488 <spi_flash_get_baud_rate_prescaler+0x7c>)
 802542a:	fba2 1203 	umull	r1, r2, r2, r3
 802542e:	ebb0 2f52 	cmp.w	r0, r2, lsr #9
 8025432:	d21d      	bcs.n	8025470 <spi_flash_get_baud_rate_prescaler+0x64>
        return SPI_BAUDRATEPRESCALER_8;
    else if (spi_freq_khz >= system_clock_khz / 16)
 8025434:	4a14      	ldr	r2, [pc, #80]	; (8025488 <spi_flash_get_baud_rate_prescaler+0x7c>)
 8025436:	fba2 1203 	umull	r1, r2, r2, r3
 802543a:	ebb0 2f92 	cmp.w	r0, r2, lsr #10
 802543e:	d219      	bcs.n	8025474 <spi_flash_get_baud_rate_prescaler+0x68>
        return SPI_BAUDRATEPRESCALER_16;
    else if (spi_freq_khz >= system_clock_khz / 32)
 8025440:	4a11      	ldr	r2, [pc, #68]	; (8025488 <spi_flash_get_baud_rate_prescaler+0x7c>)
 8025442:	fba2 1203 	umull	r1, r2, r2, r3
 8025446:	ebb0 2fd2 	cmp.w	r0, r2, lsr #11
 802544a:	d215      	bcs.n	8025478 <spi_flash_get_baud_rate_prescaler+0x6c>
        return SPI_BAUDRATEPRESCALER_32;
    else if (spi_freq_khz >= system_clock_khz / 64)
 802544c:	4a0e      	ldr	r2, [pc, #56]	; (8025488 <spi_flash_get_baud_rate_prescaler+0x7c>)
 802544e:	fba2 1203 	umull	r1, r2, r2, r3
 8025452:	ebb0 3f12 	cmp.w	r0, r2, lsr #12
 8025456:	d211      	bcs.n	802547c <spi_flash_get_baud_rate_prescaler+0x70>
        return SPI_BAUDRATEPRESCALER_64;
    else if (spi_freq_khz >= system_clock_khz / 128)
 8025458:	4a0b      	ldr	r2, [pc, #44]	; (8025488 <spi_flash_get_baud_rate_prescaler+0x7c>)
 802545a:	fba2 2303 	umull	r2, r3, r2, r3
 802545e:	ebb0 3f53 	cmp.w	r0, r3, lsr #13
 8025462:	d30d      	bcc.n	8025480 <spi_flash_get_baud_rate_prescaler+0x74>
        return SPI_BAUDRATEPRESCALER_128;
 8025464:	2030      	movs	r0, #48	; 0x30
 8025466:	4770      	bx	lr
        return SPI_BAUDRATEPRESCALER_2;
 8025468:	2000      	movs	r0, #0
 802546a:	4770      	bx	lr
        return SPI_BAUDRATEPRESCALER_4;
 802546c:	2008      	movs	r0, #8
 802546e:	4770      	bx	lr
        return SPI_BAUDRATEPRESCALER_8;
 8025470:	2010      	movs	r0, #16
 8025472:	4770      	bx	lr
        return SPI_BAUDRATEPRESCALER_16;
 8025474:	2018      	movs	r0, #24
 8025476:	4770      	bx	lr
        return SPI_BAUDRATEPRESCALER_32;
 8025478:	2020      	movs	r0, #32
 802547a:	4770      	bx	lr
        return SPI_BAUDRATEPRESCALER_64;
 802547c:	2028      	movs	r0, #40	; 0x28
 802547e:	4770      	bx	lr
    else
        return SPI_BAUDRATEPRESCALER_256;
 8025480:	2038      	movs	r0, #56	; 0x38
}
 8025482:	4770      	bx	lr
 8025484:	20000090 	.word	0x20000090
 8025488:	10624dd3 	.word	0x10624dd3

0802548c <spi_flash_is_bb_supported>:

// 检查是否支持坏块检测
static inline bool spi_flash_is_bb_supported()
{
    return true;
}
 802548c:	2001      	movs	r0, #1
 802548e:	4770      	bx	lr

08025490 <spi_flash_send_byte>:
{
 8025490:	b500      	push	{lr}
 8025492:	b085      	sub	sp, #20
 8025494:	f88d 0007 	strb.w	r0, [sp, #7]
    HAL_SPI_TransmitReceive_IT(&hspi1,&byte,&rx_byte,1);
 8025498:	2301      	movs	r3, #1
 802549a:	f10d 020f 	add.w	r2, sp, #15
 802549e:	f10d 0107 	add.w	r1, sp, #7
 80254a2:	4804      	ldr	r0, [pc, #16]	; (80254b4 <spi_flash_send_byte+0x24>)
 80254a4:	f003 fb72 	bl	8028b8c <HAL_SPI_TransmitReceive_IT>
}
 80254a8:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80254ac:	b005      	add	sp, #20
 80254ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80254b2:	bf00      	nop
 80254b4:	2000570c 	.word	0x2000570c

080254b8 <spi_flash_get_feature>:
{
 80254b8:	b570      	push	{r4, r5, r6, lr}
 80254ba:	4605      	mov	r5, r0
 80254bc:	460c      	mov	r4, r1
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 80254be:	4e0b      	ldr	r6, [pc, #44]	; (80254ec <spi_flash_get_feature+0x34>)
 80254c0:	2200      	movs	r2, #0
 80254c2:	2110      	movs	r1, #16
 80254c4:	4630      	mov	r0, r6
 80254c6:	f001 fb2b 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(_SPI_NAND_OP_GET_FEATURE);  // 发送获取特征的操作码
 80254ca:	200f      	movs	r0, #15
 80254cc:	f7ff ffe0 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 80254d0:	4628      	mov	r0, r5
 80254d2:	f7ff ffdd 	bl	8025490 <spi_flash_send_byte>
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 80254d6:	20ff      	movs	r0, #255	; 0xff
 80254d8:	f7ff ffda 	bl	8025490 <spi_flash_send_byte>
    *data = spi_flash_read_byte();  // 读取一个字节的数据
 80254dc:	7020      	strb	r0, [r4, #0]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 80254de:	2201      	movs	r2, #1
 80254e0:	2110      	movs	r1, #16
 80254e2:	4630      	mov	r0, r6
 80254e4:	f001 fb1c 	bl	8026b20 <HAL_GPIO_WritePin>
}
 80254e8:	bd70      	pop	{r4, r5, r6, pc}
 80254ea:	bf00      	nop
 80254ec:	40010800 	.word	0x40010800

080254f0 <spi_flash_read_status>:
{
 80254f0:	b500      	push	{lr}
 80254f2:	b083      	sub	sp, #12
        spi_flash_get_feature(_SPI_NAND_ADDR_STATUS, &status);  // 获取状态
 80254f4:	f10d 0107 	add.w	r1, sp, #7
 80254f8:	20c0      	movs	r0, #192	; 0xc0
 80254fa:	f7ff ffdd 	bl	80254b8 <spi_flash_get_feature>
    } while((status & _SPI_NAND_VAL_OIP) && timeout);
 80254fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8025502:	f013 0f01 	tst.w	r3, #1
 8025506:	d1f5      	bne.n	80254f4 <spi_flash_read_status+0x4>
    switch(flash_last_operation){
 8025508:	4a10      	ldr	r2, [pc, #64]	; (802554c <spi_flash_read_status+0x5c>)
 802550a:	6810      	ldr	r0, [r2, #0]
 802550c:	2802      	cmp	r0, #2
 802550e:	d00c      	beq.n	802552a <spi_flash_read_status+0x3a>
 8025510:	2803      	cmp	r0, #3
 8025512:	d00f      	beq.n	8025534 <spi_flash_read_status+0x44>
 8025514:	2801      	cmp	r0, #1
 8025516:	d003      	beq.n	8025520 <spi_flash_read_status+0x30>
 8025518:	2000      	movs	r0, #0
}
 802551a:	b003      	add	sp, #12
 802551c:	f85d fb04 	ldr.w	pc, [sp], #4
            if(status & _SPI_NAND_VAL_ERASE_FAIL)
 8025520:	f013 0f04 	tst.w	r3, #4
 8025524:	d10e      	bne.n	8025544 <spi_flash_read_status+0x54>
    return FLASH_STATUS_READY;
 8025526:	2000      	movs	r0, #0
 8025528:	e7f7      	b.n	802551a <spi_flash_read_status+0x2a>
            if(status & _SPI_NAND_VAL_PROGRAM_FAIL)
 802552a:	f013 0f08 	tst.w	r3, #8
 802552e:	d1f4      	bne.n	802551a <spi_flash_read_status+0x2a>
    return FLASH_STATUS_READY;
 8025530:	2000      	movs	r0, #0
 8025532:	e7f2      	b.n	802551a <spi_flash_read_status+0x2a>
            if((status & spi_conf.ecc_err_bits_mask) == spi_conf.ecc_err_bits_state)
 8025534:	4a06      	ldr	r2, [pc, #24]	; (8025550 <spi_flash_read_status+0x60>)
 8025536:	7991      	ldrb	r1, [r2, #6]
 8025538:	400b      	ands	r3, r1
 802553a:	79d2      	ldrb	r2, [r2, #7]
 802553c:	4293      	cmp	r3, r2
 802553e:	d003      	beq.n	8025548 <spi_flash_read_status+0x58>
    return FLASH_STATUS_READY;
 8025540:	2000      	movs	r0, #0
 8025542:	e7ea      	b.n	802551a <spi_flash_read_status+0x2a>
                return FLASH_STATUS_ERROR;
 8025544:	2002      	movs	r0, #2
 8025546:	e7e8      	b.n	802551a <spi_flash_read_status+0x2a>
                return FLASH_STATUS_ERROR;
 8025548:	2002      	movs	r0, #2
 802554a:	e7e6      	b.n	802551a <spi_flash_read_status+0x2a>
 802554c:	20005768 	.word	0x20005768
 8025550:	2000576c 	.word	0x2000576c

08025554 <spi_flash_set_feature>:
{
 8025554:	b570      	push	{r4, r5, r6, lr}
 8025556:	4605      	mov	r5, r0
 8025558:	460c      	mov	r4, r1
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 802555a:	4e0a      	ldr	r6, [pc, #40]	; (8025584 <spi_flash_set_feature+0x30>)
 802555c:	2200      	movs	r2, #0
 802555e:	2110      	movs	r1, #16
 8025560:	4630      	mov	r0, r6
 8025562:	f001 fadd 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(_SPI_NAND_OP_SET_FEATURE);  // 发送设置特征的操作码
 8025566:	201f      	movs	r0, #31
 8025568:	f7ff ff92 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 802556c:	4628      	mov	r0, r5
 802556e:	f7ff ff8f 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(data);  // 发送数据
 8025572:	4620      	mov	r0, r4
 8025574:	f7ff ff8c 	bl	8025490 <spi_flash_send_byte>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025578:	2201      	movs	r2, #1
 802557a:	2110      	movs	r1, #16
 802557c:	4630      	mov	r0, r6
 802557e:	f001 facf 	bl	8026b20 <HAL_GPIO_WritePin>
}
 8025582:	bd70      	pop	{r4, r5, r6, pc}
 8025584:	40010800 	.word	0x40010800

08025588 <spi_flash_select_die_cmd>:
{
 8025588:	b530      	push	{r4, r5, lr}
 802558a:	b083      	sub	sp, #12
 802558c:	4604      	mov	r4, r0
    switch(spi_conf.die_select_type) {
 802558e:	4b19      	ldr	r3, [pc, #100]	; (80255f4 <spi_flash_select_die_cmd+0x6c>)
 8025590:	7a9b      	ldrb	r3, [r3, #10]
 8025592:	2b01      	cmp	r3, #1
 8025594:	d003      	beq.n	802559e <spi_flash_select_die_cmd+0x16>
 8025596:	2b02      	cmp	r3, #2
 8025598:	d013      	beq.n	80255c2 <spi_flash_select_die_cmd+0x3a>
}
 802559a:	b003      	add	sp, #12
 802559c:	bd30      	pop	{r4, r5, pc}
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 802559e:	4d16      	ldr	r5, [pc, #88]	; (80255f8 <spi_flash_select_die_cmd+0x70>)
 80255a0:	2200      	movs	r2, #0
 80255a2:	2110      	movs	r1, #16
 80255a4:	4628      	mov	r0, r5
 80255a6:	f001 fabb 	bl	8026b20 <HAL_GPIO_WritePin>
        spi_flash_send_byte(_SPI_NAND_OP_DIE_SELECT);  // 发送选择芯片的指令
 80255aa:	20c2      	movs	r0, #194	; 0xc2
 80255ac:	f7ff ff70 	bl	8025490 <spi_flash_send_byte>
        spi_flash_send_byte(die);  // 发送芯片编号
 80255b0:	b2e0      	uxtb	r0, r4
 80255b2:	f7ff ff6d 	bl	8025490 <spi_flash_send_byte>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 80255b6:	2201      	movs	r2, #1
 80255b8:	2110      	movs	r1, #16
 80255ba:	4628      	mov	r0, r5
 80255bc:	f001 fab0 	bl	8026b20 <HAL_GPIO_WritePin>
}
 80255c0:	e7eb      	b.n	802559a <spi_flash_select_die_cmd+0x12>
        spi_flash_get_feature(_SPI_NAND_ADDR_FEATURE_4, &feature);  // 读取 Flash 的特征值
 80255c2:	f10d 0107 	add.w	r1, sp, #7
 80255c6:	20d0      	movs	r0, #208	; 0xd0
 80255c8:	f7ff ff76 	bl	80254b8 <spi_flash_get_feature>
        if(die == 0) {
 80255cc:	b95c      	cbnz	r4, 80255e6 <spi_flash_select_die_cmd+0x5e>
            feature &= ~(0x40);  // 清除特征值中的某位
 80255ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80255d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80255d6:	f88d 3007 	strb.w	r3, [sp, #7]
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
 80255da:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80255de:	20d0      	movs	r0, #208	; 0xd0
 80255e0:	f7ff ffb8 	bl	8025554 <spi_flash_set_feature>
}
 80255e4:	e7d9      	b.n	802559a <spi_flash_select_die_cmd+0x12>
            feature |= 0x40;  // 设置特征值中的某位
 80255e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80255ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80255ee:	f88d 3007 	strb.w	r3, [sp, #7]
 80255f2:	e7f2      	b.n	80255da <spi_flash_select_die_cmd+0x52>
 80255f4:	2000576c 	.word	0x2000576c
 80255f8:	40010800 	.word	0x40010800

080255fc <spi_flash_select_die>:
{
 80255fc:	b508      	push	{r3, lr}
    if(spi_conf.die_select_type) {
 80255fe:	4b0a      	ldr	r3, [pc, #40]	; (8025628 <spi_flash_select_die+0x2c>)
 8025600:	7a9b      	ldrb	r3, [r3, #10]
 8025602:	b143      	cbz	r3, 8025616 <spi_flash_select_die+0x1a>
        if(!spi_conf.plane_select_have)
 8025604:	4b08      	ldr	r3, [pc, #32]	; (8025628 <spi_flash_select_die+0x2c>)
 8025606:	7a5b      	ldrb	r3, [r3, #9]
 8025608:	b933      	cbnz	r3, 8025618 <spi_flash_select_die+0x1c>
            die = ((page >> 16) & 0xff);  // 计算芯片编号
 802560a:	f3c0 4007 	ubfx	r0, r0, #16, #8
        if (current_die != die) {
 802560e:	4b07      	ldr	r3, [pc, #28]	; (802562c <spi_flash_select_die+0x30>)
 8025610:	681b      	ldr	r3, [r3, #0]
 8025612:	4283      	cmp	r3, r0
 8025614:	d103      	bne.n	802561e <spi_flash_select_die+0x22>
}
 8025616:	bd08      	pop	{r3, pc}
            die = ((page >> 17) & 0xff);  // 计算芯片编号
 8025618:	f3c0 4047 	ubfx	r0, r0, #17, #8
 802561c:	e7f7      	b.n	802560e <spi_flash_select_die+0x12>
            current_die = die;
 802561e:	4b03      	ldr	r3, [pc, #12]	; (802562c <spi_flash_select_die+0x30>)
 8025620:	6018      	str	r0, [r3, #0]
            spi_flash_select_die_cmd(die);  // 选择芯片
 8025622:	f7ff ffb1 	bl	8025588 <spi_flash_select_die_cmd>
}
 8025626:	e7f6      	b.n	8025616 <spi_flash_select_die+0x1a>
 8025628:	2000576c 	.word	0x2000576c
 802562c:	20005764 	.word	0x20005764

08025630 <spi_flash_program_load>:
{
 8025630:	b570      	push	{r4, r5, r6, lr}
 8025632:	4606      	mov	r6, r0
 8025634:	460d      	mov	r5, r1
 8025636:	4614      	mov	r4, r2
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8025638:	2200      	movs	r2, #0
 802563a:	2110      	movs	r1, #16
 802563c:	4813      	ldr	r0, [pc, #76]	; (802568c <spi_flash_program_load+0x5c>)
 802563e:	f001 fa6f 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_LOAD_SINGLE);  // 发送写入数据的指令
 8025642:	2002      	movs	r0, #2
 8025644:	f7ff ff24 	bl	8025490 <spi_flash_send_byte>
    if(spi_conf.plane_select_have) {
 8025648:	4b11      	ldr	r3, [pc, #68]	; (8025690 <spi_flash_program_load+0x60>)
 802564a:	7a5b      	ldrb	r3, [r3, #9]
 802564c:	b173      	cbz	r3, 802566c <spi_flash_program_load+0x3c>
        if((page >> 6)& (0x1))
 802564e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8025652:	d007      	beq.n	8025664 <spi_flash_program_load+0x34>
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) | (0x10));  // 发送地址的第二个字节
 8025654:	2010      	movs	r0, #16
 8025656:	f7ff ff1b 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));  // 发送地址的第一个字节
 802565a:	2000      	movs	r0, #0
 802565c:	f7ff ff18 	bl	8025490 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8025660:	2400      	movs	r4, #0
 8025662:	e00b      	b.n	802567c <spi_flash_program_load+0x4c>
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) & (0xef));  // 发送地址的第二个字节
 8025664:	2000      	movs	r0, #0
 8025666:	f7ff ff13 	bl	8025490 <spi_flash_send_byte>
 802566a:	e7f6      	b.n	802565a <spi_flash_program_load+0x2a>
        spi_flash_send_byte(ADDR_2nd_CYCLE(addr));  // 发送地址的第二个字节
 802566c:	2000      	movs	r0, #0
 802566e:	f7ff ff0f 	bl	8025490 <spi_flash_send_byte>
 8025672:	e7f2      	b.n	802565a <spi_flash_program_load+0x2a>
        spi_flash_send_byte(buf[i]);  // 逐字节写入数据
 8025674:	5d30      	ldrb	r0, [r6, r4]
 8025676:	f7ff ff0b 	bl	8025490 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 802567a:	3401      	adds	r4, #1
 802567c:	42ac      	cmp	r4, r5
 802567e:	d3f9      	bcc.n	8025674 <spi_flash_program_load+0x44>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025680:	2201      	movs	r2, #1
 8025682:	2110      	movs	r1, #16
 8025684:	4801      	ldr	r0, [pc, #4]	; (802568c <spi_flash_program_load+0x5c>)
 8025686:	f001 fa4b 	bl	8026b20 <HAL_GPIO_WritePin>
}
 802568a:	bd70      	pop	{r4, r5, r6, pc}
 802568c:	40010800 	.word	0x40010800
 8025690:	2000576c 	.word	0x2000576c

08025694 <spi_flash_write_enable>:
{
 8025694:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8025696:	4c07      	ldr	r4, [pc, #28]	; (80256b4 <spi_flash_write_enable+0x20>)
 8025698:	2200      	movs	r2, #0
 802569a:	2110      	movs	r1, #16
 802569c:	4620      	mov	r0, r4
 802569e:	f001 fa3f 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(_SPI_NAND_OP_WRITE_ENABLE);  // 发送写使能指令
 80256a2:	2006      	movs	r0, #6
 80256a4:	f7ff fef4 	bl	8025490 <spi_flash_send_byte>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 80256a8:	2201      	movs	r2, #1
 80256aa:	2110      	movs	r1, #16
 80256ac:	4620      	mov	r0, r4
 80256ae:	f001 fa37 	bl	8026b20 <HAL_GPIO_WritePin>
}
 80256b2:	bd10      	pop	{r4, pc}
 80256b4:	40010800 	.word	0x40010800

080256b8 <spi_flash_write_page_async>:
{
 80256b8:	b570      	push	{r4, r5, r6, lr}
 80256ba:	4605      	mov	r5, r0
 80256bc:	460c      	mov	r4, r1
 80256be:	4616      	mov	r6, r2
    spi_flash_select_die(page);  // 选择闪存芯片
 80256c0:	4608      	mov	r0, r1
 80256c2:	f7ff ff9b 	bl	80255fc <spi_flash_select_die>
    spi_flash_program_load(buf, page_size, page);  // 加载数据到写入缓冲区
 80256c6:	4622      	mov	r2, r4
 80256c8:	4631      	mov	r1, r6
 80256ca:	4628      	mov	r0, r5
 80256cc:	f7ff ffb0 	bl	8025630 <spi_flash_program_load>
    spi_flash_write_enable();  // 使能写入
 80256d0:	f7ff ffe0 	bl	8025694 <spi_flash_write_enable>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 80256d4:	4d0e      	ldr	r5, [pc, #56]	; (8025710 <spi_flash_write_page_async+0x58>)
 80256d6:	2200      	movs	r2, #0
 80256d8:	2110      	movs	r1, #16
 80256da:	4628      	mov	r0, r5
 80256dc:	f001 fa20 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_EXECUTE);  // 发送写入执行命令
 80256e0:	2010      	movs	r0, #16
 80256e2:	f7ff fed5 	bl	8025490 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_WRITE;  // 记录上一次操作为写入
 80256e6:	4b0b      	ldr	r3, [pc, #44]	; (8025714 <spi_flash_write_page_async+0x5c>)
 80256e8:	2202      	movs	r2, #2
 80256ea:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 80256ec:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80256f0:	f7ff fece 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 80256f4:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80256f8:	f7ff feca 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 80256fc:	b2e0      	uxtb	r0, r4
 80256fe:	f7ff fec7 	bl	8025490 <spi_flash_send_byte>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025702:	2201      	movs	r2, #1
 8025704:	2110      	movs	r1, #16
 8025706:	4628      	mov	r0, r5
 8025708:	f001 fa0a 	bl	8026b20 <HAL_GPIO_WritePin>
}
 802570c:	bd70      	pop	{r4, r5, r6, pc}
 802570e:	bf00      	nop
 8025710:	40010800 	.word	0x40010800
 8025714:	20005768 	.word	0x20005768

08025718 <spi_flash_read_spare_data>:
{
 8025718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802571c:	4606      	mov	r6, r0
 802571e:	460c      	mov	r4, r1
 8025720:	4691      	mov	r9, r2
 8025722:	461d      	mov	r5, r3
    spi_flash_select_die(page);  // 选择闪存芯片
 8025724:	4608      	mov	r0, r1
 8025726:	f7ff ff69 	bl	80255fc <spi_flash_select_die>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 802572a:	4f31      	ldr	r7, [pc, #196]	; (80257f0 <spi_flash_read_spare_data+0xd8>)
 802572c:	2200      	movs	r2, #0
 802572e:	2110      	movs	r1, #16
 8025730:	4638      	mov	r0, r7
 8025732:	f001 f9f5 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 8025736:	2013      	movs	r0, #19
 8025738:	f7ff feaa 	bl	8025490 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_SPARE;  // 记录上一次操作为备用
 802573c:	4b2d      	ldr	r3, [pc, #180]	; (80257f4 <spi_flash_read_spare_data+0xdc>)
 802573e:	2204      	movs	r2, #4
 8025740:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8025742:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8025746:	f7ff fea3 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 802574a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802574e:	f7ff fe9f 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8025752:	b2e0      	uxtb	r0, r4
 8025754:	f7ff fe9c 	bl	8025490 <spi_flash_send_byte>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025758:	2201      	movs	r2, #1
 802575a:	2110      	movs	r1, #16
 802575c:	4638      	mov	r0, r7
 802575e:	f001 f9df 	bl	8026b20 <HAL_GPIO_WritePin>
    status = spi_flash_read_status();  // 读取状态寄存器的值
 8025762:	f7ff fec5 	bl	80254f0 <spi_flash_read_status>
 8025766:	4680      	mov	r8, r0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8025768:	2200      	movs	r2, #0
 802576a:	2110      	movs	r1, #16
 802576c:	4638      	mov	r0, r7
 802576e:	f001 f9d7 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8025772:	2003      	movs	r0, #3
 8025774:	f7ff fe8c 	bl	8025490 <spi_flash_send_byte>
    if (spi_conf.read_dummy_prepend)
 8025778:	4b1f      	ldr	r3, [pc, #124]	; (80257f8 <spi_flash_read_spare_data+0xe0>)
 802577a:	7a1b      	ldrb	r3, [r3, #8]
 802577c:	b9ab      	cbnz	r3, 80257aa <spi_flash_read_spare_data+0x92>
    offset += spi_conf.spare_offset;
 802577e:	4b1e      	ldr	r3, [pc, #120]	; (80257f8 <spi_flash_read_spare_data+0xe0>)
 8025780:	681f      	ldr	r7, [r3, #0]
 8025782:	444f      	add	r7, r9
    if (spi_conf.plane_select_have) {
 8025784:	7a5b      	ldrb	r3, [r3, #9]
 8025786:	b1db      	cbz	r3, 80257c0 <spi_flash_read_spare_data+0xa8>
        if ((page >> 6) & (0x1))
 8025788:	f014 0f40 	tst.w	r4, #64	; 0x40
 802578c:	d011      	beq.n	80257b2 <spi_flash_read_spare_data+0x9a>
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) | (0x10));  // 发送地址的第二个周期
 802578e:	f3c7 2007 	ubfx	r0, r7, #8, #8
 8025792:	f040 0010 	orr.w	r0, r0, #16
 8025796:	f7ff fe7b 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(offset));  // 发送地址的第一个周期
 802579a:	b2f8      	uxtb	r0, r7
 802579c:	f7ff fe78 	bl	8025490 <spi_flash_send_byte>
    if (!spi_conf.read_dummy_prepend)
 80257a0:	4b15      	ldr	r3, [pc, #84]	; (80257f8 <spi_flash_read_spare_data+0xe0>)
 80257a2:	7a1b      	ldrb	r3, [r3, #8]
 80257a4:	b18b      	cbz	r3, 80257ca <spi_flash_read_spare_data+0xb2>
{
 80257a6:	2400      	movs	r4, #0
 80257a8:	e018      	b.n	80257dc <spi_flash_read_spare_data+0xc4>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 80257aa:	20ff      	movs	r0, #255	; 0xff
 80257ac:	f7ff fe70 	bl	8025490 <spi_flash_send_byte>
 80257b0:	e7e5      	b.n	802577e <spi_flash_read_spare_data+0x66>
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) & (0xef));  // 发送地址的第二个周期
 80257b2:	f3c7 2007 	ubfx	r0, r7, #8, #8
 80257b6:	f000 00ef 	and.w	r0, r0, #239	; 0xef
 80257ba:	f7ff fe69 	bl	8025490 <spi_flash_send_byte>
 80257be:	e7ec      	b.n	802579a <spi_flash_read_spare_data+0x82>
        spi_flash_send_byte(ADDR_2nd_CYCLE(offset));  // 发送地址的第二个周期
 80257c0:	f3c7 2007 	ubfx	r0, r7, #8, #8
 80257c4:	f7ff fe64 	bl	8025490 <spi_flash_send_byte>
 80257c8:	e7e7      	b.n	802579a <spi_flash_read_spare_data+0x82>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 80257ca:	20ff      	movs	r0, #255	; 0xff
 80257cc:	f7ff fe60 	bl	8025490 <spi_flash_send_byte>
 80257d0:	e7e9      	b.n	80257a6 <spi_flash_read_spare_data+0x8e>
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 80257d2:	20ff      	movs	r0, #255	; 0xff
 80257d4:	f7ff fe5c 	bl	8025490 <spi_flash_send_byte>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 80257d8:	5530      	strb	r0, [r6, r4]
    for (uint32_t i = 0; i < data_size; i++)
 80257da:	3401      	adds	r4, #1
 80257dc:	42ac      	cmp	r4, r5
 80257de:	d3f8      	bcc.n	80257d2 <spi_flash_read_spare_data+0xba>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 80257e0:	2201      	movs	r2, #1
 80257e2:	2110      	movs	r1, #16
 80257e4:	4802      	ldr	r0, [pc, #8]	; (80257f0 <spi_flash_read_spare_data+0xd8>)
 80257e6:	f001 f99b 	bl	8026b20 <HAL_GPIO_WritePin>
}
 80257ea:	4640      	mov	r0, r8
 80257ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80257f0:	40010800 	.word	0x40010800
 80257f4:	20005768 	.word	0x20005768
 80257f8:	2000576c 	.word	0x2000576c

080257fc <spi_flash_load_page_into_cache>:
{
 80257fc:	b538      	push	{r3, r4, r5, lr}
 80257fe:	4604      	mov	r4, r0
    spi_flash_select_die(page);  // 选择闪存芯片
 8025800:	f7ff fefc 	bl	80255fc <spi_flash_select_die>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8025804:	4d0f      	ldr	r5, [pc, #60]	; (8025844 <spi_flash_load_page_into_cache+0x48>)
 8025806:	2200      	movs	r2, #0
 8025808:	2110      	movs	r1, #16
 802580a:	4628      	mov	r0, r5
 802580c:	f001 f988 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 8025810:	2013      	movs	r0, #19
 8025812:	f7ff fe3d 	bl	8025490 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_READ;  // 记录上一次操作为读取
 8025816:	4b0c      	ldr	r3, [pc, #48]	; (8025848 <spi_flash_load_page_into_cache+0x4c>)
 8025818:	2203      	movs	r2, #3
 802581a:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 802581c:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8025820:	f7ff fe36 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8025824:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8025828:	f7ff fe32 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 802582c:	b2e0      	uxtb	r0, r4
 802582e:	f7ff fe2f 	bl	8025490 <spi_flash_send_byte>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025832:	2201      	movs	r2, #1
 8025834:	2110      	movs	r1, #16
 8025836:	4628      	mov	r0, r5
 8025838:	f001 f972 	bl	8026b20 <HAL_GPIO_WritePin>
    return spi_flash_read_status();  // 读取状态寄存器的值
 802583c:	f7ff fe58 	bl	80254f0 <spi_flash_read_status>
}
 8025840:	bd38      	pop	{r3, r4, r5, pc}
 8025842:	bf00      	nop
 8025844:	40010800 	.word	0x40010800
 8025848:	20005768 	.word	0x20005768

0802584c <spi_flash_read_page>:
{
 802584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802584e:	4606      	mov	r6, r0
 8025850:	460c      	mov	r4, r1
 8025852:	4615      	mov	r5, r2
    uint32_t status = spi_flash_load_page_into_cache(page);  // 将页面数据加载到缓存中
 8025854:	4608      	mov	r0, r1
 8025856:	f7ff ffd1 	bl	80257fc <spi_flash_load_page_into_cache>
 802585a:	4607      	mov	r7, r0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 802585c:	2200      	movs	r2, #0
 802585e:	2110      	movs	r1, #16
 8025860:	481b      	ldr	r0, [pc, #108]	; (80258d0 <spi_flash_read_page+0x84>)
 8025862:	f001 f95d 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8025866:	2003      	movs	r0, #3
 8025868:	f7ff fe12 	bl	8025490 <spi_flash_send_byte>
    if (spi_conf.read_dummy_prepend)
 802586c:	4b19      	ldr	r3, [pc, #100]	; (80258d4 <spi_flash_read_page+0x88>)
 802586e:	7a1b      	ldrb	r3, [r3, #8]
 8025870:	b983      	cbnz	r3, 8025894 <spi_flash_read_page+0x48>
    if (spi_conf.plane_select_have) {
 8025872:	4b18      	ldr	r3, [pc, #96]	; (80258d4 <spi_flash_read_page+0x88>)
 8025874:	7a5b      	ldrb	r3, [r3, #9]
 8025876:	b1ab      	cbz	r3, 80258a4 <spi_flash_read_page+0x58>
        if ((page >> 6) & (0x1))
 8025878:	f014 0f40 	tst.w	r4, #64	; 0x40
 802587c:	d00e      	beq.n	802589c <spi_flash_read_page+0x50>
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) | (0x10));  // 发送地址的第二个周期
 802587e:	2010      	movs	r0, #16
 8025880:	f7ff fe06 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(data_offset));  // 发送地址的第一个周期
 8025884:	2000      	movs	r0, #0
 8025886:	f7ff fe03 	bl	8025490 <spi_flash_send_byte>
    if (!spi_conf.read_dummy_prepend)
 802588a:	4b12      	ldr	r3, [pc, #72]	; (80258d4 <spi_flash_read_page+0x88>)
 802588c:	7a1b      	ldrb	r3, [r3, #8]
 802588e:	b16b      	cbz	r3, 80258ac <spi_flash_read_page+0x60>
{
 8025890:	2400      	movs	r4, #0
 8025892:	e014      	b.n	80258be <spi_flash_read_page+0x72>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8025894:	20ff      	movs	r0, #255	; 0xff
 8025896:	f7ff fdfb 	bl	8025490 <spi_flash_send_byte>
 802589a:	e7ea      	b.n	8025872 <spi_flash_read_page+0x26>
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) & (0xef));  // 发送地址的第二个周期
 802589c:	2000      	movs	r0, #0
 802589e:	f7ff fdf7 	bl	8025490 <spi_flash_send_byte>
 80258a2:	e7ef      	b.n	8025884 <spi_flash_read_page+0x38>
        spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset));  // 发送地址的第二个周期
 80258a4:	2000      	movs	r0, #0
 80258a6:	f7ff fdf3 	bl	8025490 <spi_flash_send_byte>
 80258aa:	e7eb      	b.n	8025884 <spi_flash_read_page+0x38>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 80258ac:	20ff      	movs	r0, #255	; 0xff
 80258ae:	f7ff fdef 	bl	8025490 <spi_flash_send_byte>
 80258b2:	e7ed      	b.n	8025890 <spi_flash_read_page+0x44>
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 80258b4:	20ff      	movs	r0, #255	; 0xff
 80258b6:	f7ff fdeb 	bl	8025490 <spi_flash_send_byte>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 80258ba:	5530      	strb	r0, [r6, r4]
    for (uint32_t i = 0; i < data_size; i++)
 80258bc:	3401      	adds	r4, #1
 80258be:	42ac      	cmp	r4, r5
 80258c0:	d3f8      	bcc.n	80258b4 <spi_flash_read_page+0x68>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 80258c2:	2201      	movs	r2, #1
 80258c4:	2110      	movs	r1, #16
 80258c6:	4802      	ldr	r0, [pc, #8]	; (80258d0 <spi_flash_read_page+0x84>)
 80258c8:	f001 f92a 	bl	8026b20 <HAL_GPIO_WritePin>
}
 80258cc:	4638      	mov	r0, r7
 80258ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80258d0:	40010800 	.word	0x40010800
 80258d4:	2000576c 	.word	0x2000576c

080258d8 <spi_flash_erase_block>:
{
 80258d8:	b570      	push	{r4, r5, r6, lr}
 80258da:	4604      	mov	r4, r0
    spi_flash_select_die(page);  // 选择闪存芯片
 80258dc:	f7ff fe8e 	bl	80255fc <spi_flash_select_die>
    spi_flash_write_enable();  // 使能写入
 80258e0:	f7ff fed8 	bl	8025694 <spi_flash_write_enable>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 80258e4:	4d0f      	ldr	r5, [pc, #60]	; (8025924 <spi_flash_erase_block+0x4c>)
 80258e6:	2200      	movs	r2, #0
 80258e8:	2110      	movs	r1, #16
 80258ea:	4628      	mov	r0, r5
 80258ec:	f001 f918 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(_SPI_NAND_OP_BLOCK_ERASE);  // 发送块擦除命令
 80258f0:	20d8      	movs	r0, #216	; 0xd8
 80258f2:	f7ff fdcd 	bl	8025490 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_ERASE;  // 记录上一次操作为擦除
 80258f6:	2601      	movs	r6, #1
 80258f8:	4b0b      	ldr	r3, [pc, #44]	; (8025928 <spi_flash_erase_block+0x50>)
 80258fa:	601e      	str	r6, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 80258fc:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8025900:	f7ff fdc6 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8025904:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8025908:	f7ff fdc2 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 802590c:	b2e0      	uxtb	r0, r4
 802590e:	f7ff fdbf 	bl	8025490 <spi_flash_send_byte>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025912:	4632      	mov	r2, r6
 8025914:	2110      	movs	r1, #16
 8025916:	4628      	mov	r0, r5
 8025918:	f001 f902 	bl	8026b20 <HAL_GPIO_WritePin>
    return spi_flash_read_status();  // 读取状态寄存器的值
 802591c:	f7ff fde8 	bl	80254f0 <spi_flash_read_status>
}
 8025920:	bd70      	pop	{r4, r5, r6, pc}
 8025922:	bf00      	nop
 8025924:	40010800 	.word	0x40010800
 8025928:	20005768 	.word	0x20005768

0802592c <spi_flash_read_id>:
{
 802592c:	b538      	push	{r3, r4, r5, lr}
 802592e:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8025930:	4d14      	ldr	r5, [pc, #80]	; (8025984 <spi_flash_read_id+0x58>)
 8025932:	2200      	movs	r2, #0
 8025934:	2110      	movs	r1, #16
 8025936:	4628      	mov	r0, r5
 8025938:	f001 f8f2 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(_SPI_NAND_OP_READ_ID);  // 发送读取 ID 的指令
 802593c:	209f      	movs	r0, #159	; 0x9f
 802593e:	f7ff fda7 	bl	8025490 <spi_flash_send_byte>
    spi_flash_send_byte(_SPI_NAND_ADDR_MANUFACTURE_ID);  // 发送读取厂商ID的指令
 8025942:	2000      	movs	r0, #0
 8025944:	f7ff fda4 	bl	8025490 <spi_flash_send_byte>
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025948:	20ff      	movs	r0, #255	; 0xff
 802594a:	f7ff fda1 	bl	8025490 <spi_flash_send_byte>
    chip_id->maker_id = spi_flash_read_byte();  // 读取厂商ID
 802594e:	7020      	strb	r0, [r4, #0]
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025950:	20ff      	movs	r0, #255	; 0xff
 8025952:	f7ff fd9d 	bl	8025490 <spi_flash_send_byte>
    chip_id->device_id = spi_flash_read_byte();  // 读取设备ID
 8025956:	7060      	strb	r0, [r4, #1]
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025958:	20ff      	movs	r0, #255	; 0xff
 802595a:	f7ff fd99 	bl	8025490 <spi_flash_send_byte>
    chip_id->third_id = spi_flash_read_byte();  // 读取第三个ID
 802595e:	70a0      	strb	r0, [r4, #2]
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025960:	20ff      	movs	r0, #255	; 0xff
 8025962:	f7ff fd95 	bl	8025490 <spi_flash_send_byte>
    chip_id->fourth_id = spi_flash_read_byte();  // 读取第四个ID
 8025966:	70e0      	strb	r0, [r4, #3]
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025968:	20ff      	movs	r0, #255	; 0xff
 802596a:	f7ff fd91 	bl	8025490 <spi_flash_send_byte>
    chip_id->fifth_id = spi_flash_read_byte();  // 读取第五个ID
 802596e:	7120      	strb	r0, [r4, #4]
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025970:	20ff      	movs	r0, #255	; 0xff
 8025972:	f7ff fd8d 	bl	8025490 <spi_flash_send_byte>
    chip_id->sixth_id = spi_flash_read_byte();  // 读取第六个ID
 8025976:	7160      	strb	r0, [r4, #5]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025978:	2201      	movs	r2, #1
 802597a:	2110      	movs	r1, #16
 802597c:	4628      	mov	r0, r5
 802597e:	f001 f8cf 	bl	8026b20 <HAL_GPIO_WritePin>
}
 8025982:	bd38      	pop	{r3, r4, r5, pc}
 8025984:	40010800 	.word	0x40010800

08025988 <spi_flash_gpio_uninit>:
{
 8025988:	b508      	push	{r3, lr}
	  if(spiHandle->Instance==SPI1)
 802598a:	6802      	ldr	r2, [r0, #0]
 802598c:	4b08      	ldr	r3, [pc, #32]	; (80259b0 <spi_flash_gpio_uninit+0x28>)
 802598e:	429a      	cmp	r2, r3
 8025990:	d000      	beq.n	8025994 <spi_flash_gpio_uninit+0xc>
}
 8025992:	bd08      	pop	{r3, pc}
	    __HAL_RCC_SPI1_CLK_DISABLE();
 8025994:	4a07      	ldr	r2, [pc, #28]	; (80259b4 <spi_flash_gpio_uninit+0x2c>)
 8025996:	6993      	ldr	r3, [r2, #24]
 8025998:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802599c:	6193      	str	r3, [r2, #24]
	    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 802599e:	21e0      	movs	r1, #224	; 0xe0
 80259a0:	4805      	ldr	r0, [pc, #20]	; (80259b8 <spi_flash_gpio_uninit+0x30>)
 80259a2:	f001 f829 	bl	80269f8 <HAL_GPIO_DeInit>
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80259a6:	2023      	movs	r0, #35	; 0x23
 80259a8:	f000 fc48 	bl	802623c <HAL_NVIC_DisableIRQ>
}
 80259ac:	e7f1      	b.n	8025992 <spi_flash_gpio_uninit+0xa>
 80259ae:	bf00      	nop
 80259b0:	40013000 	.word	0x40013000
 80259b4:	40021000 	.word	0x40021000
 80259b8:	40010800 	.word	0x40010800

080259bc <spi_flash_uninit>:
{
 80259bc:	b510      	push	{r4, lr}
    spi_flash_gpio_uninit(&hspi1);
 80259be:	4c05      	ldr	r4, [pc, #20]	; (80259d4 <spi_flash_uninit+0x18>)
 80259c0:	4620      	mov	r0, r4
 80259c2:	f7ff ffe1 	bl	8025988 <spi_flash_gpio_uninit>
    __HAL_SPI_DISABLE(&hspi1);
 80259c6:	6822      	ldr	r2, [r4, #0]
 80259c8:	6813      	ldr	r3, [r2, #0]
 80259ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80259ce:	6013      	str	r3, [r2, #0]
}
 80259d0:	bd10      	pop	{r4, pc}
 80259d2:	bf00      	nop
 80259d4:	2000570c 	.word	0x2000570c

080259d8 <spi_flash_init>:
    if (conf_size < sizeof(spi_conf_t))
 80259d8:	290e      	cmp	r1, #14
 80259da:	d934      	bls.n	8025a46 <spi_flash_init+0x6e>
{
 80259dc:	b570      	push	{r4, r5, r6, lr}
 80259de:	4603      	mov	r3, r0
    spi_conf = *(spi_conf_t *)conf;
 80259e0:	4e1a      	ldr	r6, [pc, #104]	; (8025a4c <spi_flash_init+0x74>)
 80259e2:	4634      	mov	r4, r6
 80259e4:	6800      	ldr	r0, [r0, #0]
 80259e6:	6859      	ldr	r1, [r3, #4]
 80259e8:	689a      	ldr	r2, [r3, #8]
 80259ea:	c407      	stmia	r4!, {r0, r1, r2}
 80259ec:	899a      	ldrh	r2, [r3, #12]
 80259ee:	7b9b      	ldrb	r3, [r3, #14]
 80259f0:	8022      	strh	r2, [r4, #0]
 80259f2:	70a3      	strb	r3, [r4, #2]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 80259f4:	2201      	movs	r2, #1
 80259f6:	2110      	movs	r1, #16
 80259f8:	4815      	ldr	r0, [pc, #84]	; (8025a50 <spi_flash_init+0x78>)
 80259fa:	f001 f891 	bl	8026b20 <HAL_GPIO_WritePin>
    hspi1.Instance = SPI1;
 80259fe:	4c15      	ldr	r4, [pc, #84]	; (8025a54 <spi_flash_init+0x7c>)
 8025a00:	4b15      	ldr	r3, [pc, #84]	; (8025a58 <spi_flash_init+0x80>)
 8025a02:	6023      	str	r3, [r4, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8025a04:	f44f 7382 	mov.w	r3, #260	; 0x104
 8025a08:	6063      	str	r3, [r4, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8025a0a:	2500      	movs	r5, #0
 8025a0c:	60a5      	str	r5, [r4, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8025a0e:	60e5      	str	r5, [r4, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8025a10:	2302      	movs	r3, #2
 8025a12:	6123      	str	r3, [r4, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8025a14:	2301      	movs	r3, #1
 8025a16:	6163      	str	r3, [r4, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8025a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025a1c:	61a3      	str	r3, [r4, #24]
    	spi_flash_get_baud_rate_prescaler(spi_conf.freq);
 8025a1e:	f8d6 000b 	ldr.w	r0, [r6, #11]
 8025a22:	f7ff fcf3 	bl	802540c <spi_flash_get_baud_rate_prescaler>
    hspi1.Init.BaudRatePrescaler =
 8025a26:	61e0      	str	r0, [r4, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8025a28:	6225      	str	r5, [r4, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8025a2a:	6265      	str	r5, [r4, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8025a2c:	62a5      	str	r5, [r4, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8025a2e:	230a      	movs	r3, #10
 8025a30:	62e3      	str	r3, [r4, #44]	; 0x2c
    HAL_SPI_Init(&hspi1)  ;
 8025a32:	4620      	mov	r0, r4
 8025a34:	f003 f84e 	bl	8028ad4 <HAL_SPI_Init>
    __HAL_SPI_ENABLE(&hspi1);
 8025a38:	6822      	ldr	r2, [r4, #0]
 8025a3a:	6813      	ldr	r3, [r2, #0]
 8025a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025a40:	6013      	str	r3, [r2, #0]
    return 0;
 8025a42:	4628      	mov	r0, r5
}
 8025a44:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8025a46:	f04f 30ff 	mov.w	r0, #4294967295
}
 8025a4a:	4770      	bx	lr
 8025a4c:	2000576c 	.word	0x2000576c
 8025a50:	40010800 	.word	0x40010800
 8025a54:	2000570c 	.word	0x2000570c
 8025a58:	40013000 	.word	0x40013000

08025a5c <spi_flash_get_baud_rate_prescaler>:
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
}

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 8025a5c:	4b1d      	ldr	r3, [pc, #116]	; (8025ad4 <spi_flash_get_baud_rate_prescaler+0x78>)
 8025a5e:	681b      	ldr	r3, [r3, #0]

    if (spi_freq_khz >= system_clock_khz / 2)
 8025a60:	4a1d      	ldr	r2, [pc, #116]	; (8025ad8 <spi_flash_get_baud_rate_prescaler+0x7c>)
 8025a62:	fba2 1203 	umull	r1, r2, r2, r3
 8025a66:	ebb0 1fd2 	cmp.w	r0, r2, lsr #7
 8025a6a:	d225      	bcs.n	8025ab8 <spi_flash_get_baud_rate_prescaler+0x5c>
    	return SPI_BAUDRATEPRESCALER_2;
    else if (spi_freq_khz >= system_clock_khz / 4)
 8025a6c:	4a1a      	ldr	r2, [pc, #104]	; (8025ad8 <spi_flash_get_baud_rate_prescaler+0x7c>)
 8025a6e:	fba2 1203 	umull	r1, r2, r2, r3
 8025a72:	ebb0 2f12 	cmp.w	r0, r2, lsr #8
 8025a76:	d221      	bcs.n	8025abc <spi_flash_get_baud_rate_prescaler+0x60>
    	return SPI_BAUDRATEPRESCALER_4;
    else if (spi_freq_khz >= system_clock_khz / 8)
 8025a78:	4a17      	ldr	r2, [pc, #92]	; (8025ad8 <spi_flash_get_baud_rate_prescaler+0x7c>)
 8025a7a:	fba2 1203 	umull	r1, r2, r2, r3
 8025a7e:	ebb0 2f52 	cmp.w	r0, r2, lsr #9
 8025a82:	d21d      	bcs.n	8025ac0 <spi_flash_get_baud_rate_prescaler+0x64>
    	return SPI_BAUDRATEPRESCALER_8;
    else if (spi_freq_khz >= system_clock_khz / 16)
 8025a84:	4a14      	ldr	r2, [pc, #80]	; (8025ad8 <spi_flash_get_baud_rate_prescaler+0x7c>)
 8025a86:	fba2 1203 	umull	r1, r2, r2, r3
 8025a8a:	ebb0 2f92 	cmp.w	r0, r2, lsr #10
 8025a8e:	d219      	bcs.n	8025ac4 <spi_flash_get_baud_rate_prescaler+0x68>
    	return SPI_BAUDRATEPRESCALER_16;
    else if (spi_freq_khz >= system_clock_khz / 32)
 8025a90:	4a11      	ldr	r2, [pc, #68]	; (8025ad8 <spi_flash_get_baud_rate_prescaler+0x7c>)
 8025a92:	fba2 1203 	umull	r1, r2, r2, r3
 8025a96:	ebb0 2fd2 	cmp.w	r0, r2, lsr #11
 8025a9a:	d215      	bcs.n	8025ac8 <spi_flash_get_baud_rate_prescaler+0x6c>
    	return SPI_BAUDRATEPRESCALER_32;
    else if (spi_freq_khz >= system_clock_khz / 64)
 8025a9c:	4a0e      	ldr	r2, [pc, #56]	; (8025ad8 <spi_flash_get_baud_rate_prescaler+0x7c>)
 8025a9e:	fba2 1203 	umull	r1, r2, r2, r3
 8025aa2:	ebb0 3f12 	cmp.w	r0, r2, lsr #12
 8025aa6:	d211      	bcs.n	8025acc <spi_flash_get_baud_rate_prescaler+0x70>
    	return SPI_BAUDRATEPRESCALER_64;
    else if (spi_freq_khz >= system_clock_khz / 128)
 8025aa8:	4a0b      	ldr	r2, [pc, #44]	; (8025ad8 <spi_flash_get_baud_rate_prescaler+0x7c>)
 8025aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8025aae:	ebb0 3f53 	cmp.w	r0, r3, lsr #13
 8025ab2:	d30d      	bcc.n	8025ad0 <spi_flash_get_baud_rate_prescaler+0x74>
    	return SPI_BAUDRATEPRESCALER_128;
 8025ab4:	2030      	movs	r0, #48	; 0x30
 8025ab6:	4770      	bx	lr
    	return SPI_BAUDRATEPRESCALER_2;
 8025ab8:	2000      	movs	r0, #0
 8025aba:	4770      	bx	lr
    	return SPI_BAUDRATEPRESCALER_4;
 8025abc:	2008      	movs	r0, #8
 8025abe:	4770      	bx	lr
    	return SPI_BAUDRATEPRESCALER_8;
 8025ac0:	2010      	movs	r0, #16
 8025ac2:	4770      	bx	lr
    	return SPI_BAUDRATEPRESCALER_16;
 8025ac4:	2018      	movs	r0, #24
 8025ac6:	4770      	bx	lr
    	return SPI_BAUDRATEPRESCALER_32;
 8025ac8:	2020      	movs	r0, #32
 8025aca:	4770      	bx	lr
    	return SPI_BAUDRATEPRESCALER_64;
 8025acc:	2028      	movs	r0, #40	; 0x28
 8025ace:	4770      	bx	lr
    else
    	return SPI_BAUDRATEPRESCALER_256;
 8025ad0:	2038      	movs	r0, #56	; 0x38
}
 8025ad2:	4770      	bx	lr
 8025ad4:	20000090 	.word	0x20000090
 8025ad8:	10624dd3 	.word	0x10624dd3

08025adc <spi_flash_read_spare_data>:

static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page,
    uint32_t offset, uint32_t data_size)
{
    return FLASH_STATUS_INVALID_CMD;
}
 8025adc:	2004      	movs	r0, #4
 8025ade:	4770      	bx	lr

08025ae0 <spi_flash_is_bb_supported>:
}

static inline bool spi_flash_is_bb_supported()
{
    return false;
}
 8025ae0:	2000      	movs	r0, #0
 8025ae2:	4770      	bx	lr

08025ae4 <spi_flash_send_byte>:
{
 8025ae4:	b500      	push	{lr}
 8025ae6:	b085      	sub	sp, #20
 8025ae8:	f88d 0007 	strb.w	r0, [sp, #7]
    HAL_SPI_TransmitReceive_IT(&hspi1,&byte,&rx_byte,1);
 8025aec:	2301      	movs	r3, #1
 8025aee:	f10d 020f 	add.w	r2, sp, #15
 8025af2:	f10d 0107 	add.w	r1, sp, #7
 8025af6:	4804      	ldr	r0, [pc, #16]	; (8025b08 <spi_flash_send_byte+0x24>)
 8025af8:	f003 f848 	bl	8028b8c <HAL_SPI_TransmitReceive_IT>
}
 8025afc:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8025b00:	b005      	add	sp, #20
 8025b02:	f85d fb04 	ldr.w	pc, [sp], #4
 8025b06:	bf00      	nop
 8025b08:	2000570c 	.word	0x2000570c

08025b0c <spi_flash_read_status>:
{
 8025b0c:	b510      	push	{r4, lr}
   	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8025b0e:	2200      	movs	r2, #0
 8025b10:	2110      	movs	r1, #16
 8025b12:	4814      	ldr	r0, [pc, #80]	; (8025b64 <spi_flash_read_status+0x58>)
 8025b14:	f001 f804 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(spi_conf.status_cmd);
 8025b18:	4c13      	ldr	r4, [pc, #76]	; (8025b68 <spi_flash_read_status+0x5c>)
 8025b1a:	79a0      	ldrb	r0, [r4, #6]
 8025b1c:	f7ff ffe2 	bl	8025ae4 <spi_flash_send_byte>
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025b20:	20a5      	movs	r0, #165	; 0xa5
 8025b22:	f7ff ffdf 	bl	8025ae4 <spi_flash_send_byte>
    if (spi_conf.busy_state == 1 && (status & (1 << spi_conf.busy_bit)))
 8025b26:	7a23      	ldrb	r3, [r4, #8]
 8025b28:	2b01      	cmp	r3, #1
 8025b2a:	d008      	beq.n	8025b3e <spi_flash_read_status+0x32>
    else if (spi_conf.busy_state == 0 && !(status & (1 << spi_conf.busy_bit)))
 8025b2c:	b97b      	cbnz	r3, 8025b4e <spi_flash_read_status+0x42>
 8025b2e:	4b0e      	ldr	r3, [pc, #56]	; (8025b68 <spi_flash_read_status+0x5c>)
 8025b30:	79db      	ldrb	r3, [r3, #7]
 8025b32:	4118      	asrs	r0, r3
 8025b34:	f010 0f01 	tst.w	r0, #1
 8025b38:	d011      	beq.n	8025b5e <spi_flash_read_status+0x52>
    uint32_t flash_status = FLASH_STATUS_READY;
 8025b3a:	2400      	movs	r4, #0
 8025b3c:	e008      	b.n	8025b50 <spi_flash_read_status+0x44>
    if (spi_conf.busy_state == 1 && (status & (1 << spi_conf.busy_bit)))
 8025b3e:	79e2      	ldrb	r2, [r4, #7]
 8025b40:	fa40 f202 	asr.w	r2, r0, r2
 8025b44:	f012 0f01 	tst.w	r2, #1
 8025b48:	d0f0      	beq.n	8025b2c <spi_flash_read_status+0x20>
        flash_status = FLASH_STATUS_BUSY;
 8025b4a:	2401      	movs	r4, #1
 8025b4c:	e000      	b.n	8025b50 <spi_flash_read_status+0x44>
    uint32_t flash_status = FLASH_STATUS_READY;
 8025b4e:	2400      	movs	r4, #0
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025b50:	2201      	movs	r2, #1
 8025b52:	2110      	movs	r1, #16
 8025b54:	4803      	ldr	r0, [pc, #12]	; (8025b64 <spi_flash_read_status+0x58>)
 8025b56:	f000 ffe3 	bl	8026b20 <HAL_GPIO_WritePin>
}
 8025b5a:	4620      	mov	r0, r4
 8025b5c:	bd10      	pop	{r4, pc}
        flash_status = FLASH_STATUS_BUSY;
 8025b5e:	2401      	movs	r4, #1
 8025b60:	e7f6      	b.n	8025b50 <spi_flash_read_status+0x44>
 8025b62:	bf00      	nop
 8025b64:	40010800 	.word	0x40010800
 8025b68:	2000577c 	.word	0x2000577c

08025b6c <spi_flash_get_status>:
{
 8025b6c:	b510      	push	{r4, lr}
    status = spi_flash_read_status();
 8025b6e:	f7ff ffcd 	bl	8025b0c <spi_flash_read_status>
    uint32_t status, timeout = 0x1000000;
 8025b72:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
    while (status == FLASH_STATUS_BUSY && timeout)
 8025b76:	2801      	cmp	r0, #1
 8025b78:	d104      	bne.n	8025b84 <spi_flash_get_status+0x18>
 8025b7a:	b11c      	cbz	r4, 8025b84 <spi_flash_get_status+0x18>
        status = spi_flash_read_status();
 8025b7c:	f7ff ffc6 	bl	8025b0c <spi_flash_read_status>
        timeout --;
 8025b80:	3c01      	subs	r4, #1
 8025b82:	e7f8      	b.n	8025b76 <spi_flash_get_status+0xa>
    if (!timeout)
 8025b84:	b104      	cbz	r4, 8025b88 <spi_flash_get_status+0x1c>
}
 8025b86:	bd10      	pop	{r4, pc}
        status = FLASH_STATUS_TIMEOUT;
 8025b88:	2003      	movs	r0, #3
    return status;
 8025b8a:	e7fc      	b.n	8025b86 <spi_flash_get_status+0x1a>

08025b8c <spi_flash_write_enable>:
    if (spi_conf.write_en_cmd == UNDEFINED_CMD)
 8025b8c:	4b0a      	ldr	r3, [pc, #40]	; (8025bb8 <spi_flash_write_enable+0x2c>)
 8025b8e:	791b      	ldrb	r3, [r3, #4]
 8025b90:	2bff      	cmp	r3, #255	; 0xff
 8025b92:	d010      	beq.n	8025bb6 <spi_flash_write_enable+0x2a>
{
 8025b94:	b510      	push	{r4, lr}
   	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8025b96:	4c09      	ldr	r4, [pc, #36]	; (8025bbc <spi_flash_write_enable+0x30>)
 8025b98:	2200      	movs	r2, #0
 8025b9a:	2110      	movs	r1, #16
 8025b9c:	4620      	mov	r0, r4
 8025b9e:	f000 ffbf 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(spi_conf.write_en_cmd);
 8025ba2:	4b05      	ldr	r3, [pc, #20]	; (8025bb8 <spi_flash_write_enable+0x2c>)
 8025ba4:	7918      	ldrb	r0, [r3, #4]
 8025ba6:	f7ff ff9d 	bl	8025ae4 <spi_flash_send_byte>
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025baa:	2201      	movs	r2, #1
 8025bac:	2110      	movs	r1, #16
 8025bae:	4620      	mov	r0, r4
 8025bb0:	f000 ffb6 	bl	8026b20 <HAL_GPIO_WritePin>
}
 8025bb4:	bd10      	pop	{r4, pc}
 8025bb6:	4770      	bx	lr
 8025bb8:	2000577c 	.word	0x2000577c
 8025bbc:	40010800 	.word	0x40010800

08025bc0 <spi_flash_write_page_async>:
{
 8025bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025bc2:	4606      	mov	r6, r0
 8025bc4:	460c      	mov	r4, r1
 8025bc6:	4615      	mov	r5, r2
    spi_flash_write_enable();
 8025bc8:	f7ff ffe0 	bl	8025b8c <spi_flash_write_enable>
   	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8025bcc:	2200      	movs	r2, #0
 8025bce:	2110      	movs	r1, #16
 8025bd0:	4810      	ldr	r0, [pc, #64]	; (8025c14 <spi_flash_write_page_async+0x54>)
 8025bd2:	f000 ffa5 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(spi_conf.write_cmd);
 8025bd6:	4f10      	ldr	r7, [pc, #64]	; (8025c18 <spi_flash_write_page_async+0x58>)
 8025bd8:	78f8      	ldrb	r0, [r7, #3]
 8025bda:	f7ff ff83 	bl	8025ae4 <spi_flash_send_byte>
    page = page << spi_conf.page_offset;
 8025bde:	783b      	ldrb	r3, [r7, #0]
 8025be0:	409c      	lsls	r4, r3
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));
 8025be2:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8025be6:	f7ff ff7d 	bl	8025ae4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));
 8025bea:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8025bee:	f7ff ff79 	bl	8025ae4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));
 8025bf2:	b2e0      	uxtb	r0, r4
 8025bf4:	f7ff ff76 	bl	8025ae4 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8025bf8:	2400      	movs	r4, #0
 8025bfa:	e003      	b.n	8025c04 <spi_flash_write_page_async+0x44>
        spi_flash_send_byte(buf[i]);
 8025bfc:	5d30      	ldrb	r0, [r6, r4]
 8025bfe:	f7ff ff71 	bl	8025ae4 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8025c02:	3401      	adds	r4, #1
 8025c04:	42ac      	cmp	r4, r5
 8025c06:	d3f9      	bcc.n	8025bfc <spi_flash_write_page_async+0x3c>
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025c08:	2201      	movs	r2, #1
 8025c0a:	2110      	movs	r1, #16
 8025c0c:	4801      	ldr	r0, [pc, #4]	; (8025c14 <spi_flash_write_page_async+0x54>)
 8025c0e:	f000 ff87 	bl	8026b20 <HAL_GPIO_WritePin>
}
 8025c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c14:	40010800 	.word	0x40010800
 8025c18:	2000577c 	.word	0x2000577c

08025c1c <spi_flash_read_data>:
{
 8025c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c1e:	4606      	mov	r6, r0
 8025c20:	461d      	mov	r5, r3
    uint32_t i, addr = (page << spi_conf.page_offset) + page_offset;
 8025c22:	4f15      	ldr	r7, [pc, #84]	; (8025c78 <spi_flash_read_data+0x5c>)
 8025c24:	783b      	ldrb	r3, [r7, #0]
 8025c26:	4099      	lsls	r1, r3
 8025c28:	188c      	adds	r4, r1, r2
   	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8025c2a:	2200      	movs	r2, #0
 8025c2c:	2110      	movs	r1, #16
 8025c2e:	4813      	ldr	r0, [pc, #76]	; (8025c7c <spi_flash_read_data+0x60>)
 8025c30:	f000 ff76 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(spi_conf.read_cmd);
 8025c34:	7878      	ldrb	r0, [r7, #1]
 8025c36:	f7ff ff55 	bl	8025ae4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8025c3a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8025c3e:	f7ff ff51 	bl	8025ae4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8025c42:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8025c46:	f7ff ff4d 	bl	8025ae4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 8025c4a:	b2e0      	uxtb	r0, r4
 8025c4c:	f7ff ff4a 	bl	8025ae4 <spi_flash_send_byte>
    spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025c50:	20a5      	movs	r0, #165	; 0xa5
 8025c52:	f7ff ff47 	bl	8025ae4 <spi_flash_send_byte>
    for (i = 0; i < data_size; i++)
 8025c56:	2400      	movs	r4, #0
 8025c58:	e004      	b.n	8025c64 <spi_flash_read_data+0x48>
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025c5a:	20a5      	movs	r0, #165	; 0xa5
 8025c5c:	f7ff ff42 	bl	8025ae4 <spi_flash_send_byte>
    	buf[i] = spi_flash_read_byte();
 8025c60:	5530      	strb	r0, [r6, r4]
    for (i = 0; i < data_size; i++)
 8025c62:	3401      	adds	r4, #1
 8025c64:	42ac      	cmp	r4, r5
 8025c66:	d3f8      	bcc.n	8025c5a <spi_flash_read_data+0x3e>
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025c68:	2201      	movs	r2, #1
 8025c6a:	2110      	movs	r1, #16
 8025c6c:	4803      	ldr	r0, [pc, #12]	; (8025c7c <spi_flash_read_data+0x60>)
 8025c6e:	f000 ff57 	bl	8026b20 <HAL_GPIO_WritePin>
}
 8025c72:	2000      	movs	r0, #0
 8025c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c76:	bf00      	nop
 8025c78:	2000577c 	.word	0x2000577c
 8025c7c:	40010800 	.word	0x40010800

08025c80 <spi_flash_read_page>:
{
 8025c80:	b508      	push	{r3, lr}
 8025c82:	4613      	mov	r3, r2
    return spi_flash_read_data(buf, page, 0, page_size);
 8025c84:	2200      	movs	r2, #0
 8025c86:	f7ff ffc9 	bl	8025c1c <spi_flash_read_data>
}
 8025c8a:	bd08      	pop	{r3, pc}

08025c8c <spi_flash_erase_block>:
{
 8025c8c:	b570      	push	{r4, r5, r6, lr}
    uint32_t addr = page << spi_conf.page_offset;
 8025c8e:	4e11      	ldr	r6, [pc, #68]	; (8025cd4 <spi_flash_erase_block+0x48>)
 8025c90:	7833      	ldrb	r3, [r6, #0]
 8025c92:	fa00 f403 	lsl.w	r4, r0, r3
    spi_flash_write_enable();
 8025c96:	f7ff ff79 	bl	8025b8c <spi_flash_write_enable>
   	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8025c9a:	4d0f      	ldr	r5, [pc, #60]	; (8025cd8 <spi_flash_erase_block+0x4c>)
 8025c9c:	2200      	movs	r2, #0
 8025c9e:	2110      	movs	r1, #16
 8025ca0:	4628      	mov	r0, r5
 8025ca2:	f000 ff3d 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(spi_conf.erase_cmd);
 8025ca6:	7970      	ldrb	r0, [r6, #5]
 8025ca8:	f7ff ff1c 	bl	8025ae4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8025cac:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8025cb0:	f7ff ff18 	bl	8025ae4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8025cb4:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8025cb8:	f7ff ff14 	bl	8025ae4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 8025cbc:	b2e0      	uxtb	r0, r4
 8025cbe:	f7ff ff11 	bl	8025ae4 <spi_flash_send_byte>
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025cc2:	2201      	movs	r2, #1
 8025cc4:	2110      	movs	r1, #16
 8025cc6:	4628      	mov	r0, r5
 8025cc8:	f000 ff2a 	bl	8026b20 <HAL_GPIO_WritePin>
    return spi_flash_get_status();
 8025ccc:	f7ff ff4e 	bl	8025b6c <spi_flash_get_status>
}
 8025cd0:	bd70      	pop	{r4, r5, r6, pc}
 8025cd2:	bf00      	nop
 8025cd4:	2000577c 	.word	0x2000577c
 8025cd8:	40010800 	.word	0x40010800

08025cdc <spi_flash_read_id>:
{
 8025cdc:	b538      	push	{r3, r4, r5, lr}
 8025cde:	4604      	mov	r4, r0
   	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8025ce0:	4d13      	ldr	r5, [pc, #76]	; (8025d30 <spi_flash_read_id+0x54>)
 8025ce2:	2200      	movs	r2, #0
 8025ce4:	2110      	movs	r1, #16
 8025ce6:	4628      	mov	r0, r5
 8025ce8:	f000 ff1a 	bl	8026b20 <HAL_GPIO_WritePin>
    spi_flash_send_byte(spi_conf.read_id_cmd);
 8025cec:	4b11      	ldr	r3, [pc, #68]	; (8025d34 <spi_flash_read_id+0x58>)
 8025cee:	7898      	ldrb	r0, [r3, #2]
 8025cf0:	f7ff fef8 	bl	8025ae4 <spi_flash_send_byte>
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025cf4:	20a5      	movs	r0, #165	; 0xa5
 8025cf6:	f7ff fef5 	bl	8025ae4 <spi_flash_send_byte>
    chip_id->maker_id = spi_flash_read_byte();
 8025cfa:	7020      	strb	r0, [r4, #0]
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025cfc:	20a5      	movs	r0, #165	; 0xa5
 8025cfe:	f7ff fef1 	bl	8025ae4 <spi_flash_send_byte>
    chip_id->device_id = spi_flash_read_byte();
 8025d02:	7060      	strb	r0, [r4, #1]
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025d04:	20a5      	movs	r0, #165	; 0xa5
 8025d06:	f7ff feed 	bl	8025ae4 <spi_flash_send_byte>
    chip_id->third_id = spi_flash_read_byte();
 8025d0a:	70a0      	strb	r0, [r4, #2]
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025d0c:	20a5      	movs	r0, #165	; 0xa5
 8025d0e:	f7ff fee9 	bl	8025ae4 <spi_flash_send_byte>
    chip_id->fourth_id = spi_flash_read_byte();
 8025d12:	70e0      	strb	r0, [r4, #3]
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025d14:	20a5      	movs	r0, #165	; 0xa5
 8025d16:	f7ff fee5 	bl	8025ae4 <spi_flash_send_byte>
    chip_id->fifth_id = spi_flash_read_byte();
 8025d1a:	7120      	strb	r0, [r4, #4]
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8025d1c:	20a5      	movs	r0, #165	; 0xa5
 8025d1e:	f7ff fee1 	bl	8025ae4 <spi_flash_send_byte>
    chip_id->sixth_id = spi_flash_read_byte();
 8025d22:	7160      	strb	r0, [r4, #5]
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025d24:	2201      	movs	r2, #1
 8025d26:	2110      	movs	r1, #16
 8025d28:	4628      	mov	r0, r5
 8025d2a:	f000 fef9 	bl	8026b20 <HAL_GPIO_WritePin>
}
 8025d2e:	bd38      	pop	{r3, r4, r5, pc}
 8025d30:	40010800 	.word	0x40010800
 8025d34:	2000577c 	.word	0x2000577c

08025d38 <spi_flash_gpio_uninit>:
{
 8025d38:	b508      	push	{r3, lr}
	  if(spiHandle->Instance==SPI1)
 8025d3a:	6802      	ldr	r2, [r0, #0]
 8025d3c:	4b08      	ldr	r3, [pc, #32]	; (8025d60 <spi_flash_gpio_uninit+0x28>)
 8025d3e:	429a      	cmp	r2, r3
 8025d40:	d000      	beq.n	8025d44 <spi_flash_gpio_uninit+0xc>
}
 8025d42:	bd08      	pop	{r3, pc}
	    __HAL_RCC_SPI1_CLK_DISABLE();
 8025d44:	4a07      	ldr	r2, [pc, #28]	; (8025d64 <spi_flash_gpio_uninit+0x2c>)
 8025d46:	6993      	ldr	r3, [r2, #24]
 8025d48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025d4c:	6193      	str	r3, [r2, #24]
	    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8025d4e:	21e0      	movs	r1, #224	; 0xe0
 8025d50:	4805      	ldr	r0, [pc, #20]	; (8025d68 <spi_flash_gpio_uninit+0x30>)
 8025d52:	f000 fe51 	bl	80269f8 <HAL_GPIO_DeInit>
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8025d56:	2023      	movs	r0, #35	; 0x23
 8025d58:	f000 fa70 	bl	802623c <HAL_NVIC_DisableIRQ>
}
 8025d5c:	e7f1      	b.n	8025d42 <spi_flash_gpio_uninit+0xa>
 8025d5e:	bf00      	nop
 8025d60:	40013000 	.word	0x40013000
 8025d64:	40021000 	.word	0x40021000
 8025d68:	40010800 	.word	0x40010800

08025d6c <spi_flash_uninit>:
{
 8025d6c:	b510      	push	{r4, lr}
    spi_flash_gpio_uninit(&hspi1);
 8025d6e:	4c05      	ldr	r4, [pc, #20]	; (8025d84 <spi_flash_uninit+0x18>)
 8025d70:	4620      	mov	r0, r4
 8025d72:	f7ff ffe1 	bl	8025d38 <spi_flash_gpio_uninit>
    __HAL_SPI_DISABLE(&hspi1);
 8025d76:	6822      	ldr	r2, [r4, #0]
 8025d78:	6813      	ldr	r3, [r2, #0]
 8025d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025d7e:	6013      	str	r3, [r2, #0]
}
 8025d80:	bd10      	pop	{r4, pc}
 8025d82:	bf00      	nop
 8025d84:	2000570c 	.word	0x2000570c

08025d88 <spi_flash_init>:
	if (conf_size < sizeof(spi_conf_t))
 8025d88:	290c      	cmp	r1, #12
 8025d8a:	d932      	bls.n	8025df2 <spi_flash_init+0x6a>
{
 8025d8c:	b570      	push	{r4, r5, r6, lr}
 8025d8e:	4603      	mov	r3, r0
    spi_conf = *(spi_conf_t *)conf;
 8025d90:	4e19      	ldr	r6, [pc, #100]	; (8025df8 <spi_flash_init+0x70>)
 8025d92:	4634      	mov	r4, r6
 8025d94:	6800      	ldr	r0, [r0, #0]
 8025d96:	6859      	ldr	r1, [r3, #4]
 8025d98:	689a      	ldr	r2, [r3, #8]
 8025d9a:	c407      	stmia	r4!, {r0, r1, r2}
 8025d9c:	7b1b      	ldrb	r3, [r3, #12]
 8025d9e:	7023      	strb	r3, [r4, #0]
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8025da0:	2201      	movs	r2, #1
 8025da2:	2110      	movs	r1, #16
 8025da4:	4815      	ldr	r0, [pc, #84]	; (8025dfc <spi_flash_init+0x74>)
 8025da6:	f000 febb 	bl	8026b20 <HAL_GPIO_WritePin>
    hspi1.Instance = SPI1;
 8025daa:	4c15      	ldr	r4, [pc, #84]	; (8025e00 <spi_flash_init+0x78>)
 8025dac:	4b15      	ldr	r3, [pc, #84]	; (8025e04 <spi_flash_init+0x7c>)
 8025dae:	6023      	str	r3, [r4, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8025db0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8025db4:	6063      	str	r3, [r4, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8025db6:	2500      	movs	r5, #0
 8025db8:	60a5      	str	r5, [r4, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8025dba:	60e5      	str	r5, [r4, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8025dbc:	2302      	movs	r3, #2
 8025dbe:	6123      	str	r3, [r4, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8025dc0:	2301      	movs	r3, #1
 8025dc2:	6163      	str	r3, [r4, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8025dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025dc8:	61a3      	str	r3, [r4, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq);
 8025dca:	f8d6 0009 	ldr.w	r0, [r6, #9]
 8025dce:	f7ff fe45 	bl	8025a5c <spi_flash_get_baud_rate_prescaler>
 8025dd2:	61e0      	str	r0, [r4, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8025dd4:	6225      	str	r5, [r4, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8025dd6:	6265      	str	r5, [r4, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8025dd8:	62a5      	str	r5, [r4, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8025dda:	2307      	movs	r3, #7
 8025ddc:	62e3      	str	r3, [r4, #44]	; 0x2c
    HAL_SPI_Init(&hspi1)  ;
 8025dde:	4620      	mov	r0, r4
 8025de0:	f002 fe78 	bl	8028ad4 <HAL_SPI_Init>
    __HAL_SPI_ENABLE(&hspi1);
 8025de4:	6822      	ldr	r2, [r4, #0]
 8025de6:	6813      	ldr	r3, [r2, #0]
 8025de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025dec:	6013      	str	r3, [r2, #0]
    return 0;
 8025dee:	4628      	mov	r0, r5
}
 8025df0:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8025df2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8025df6:	4770      	bx	lr
 8025df8:	2000577c 	.word	0x2000577c
 8025dfc:	40010800 	.word	0x40010800
 8025e00:	2000570c 	.word	0x2000570c
 8025e04:	40013000 	.word	0x40013000

08025e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8025e08:	b500      	push	{lr}
 8025e0a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8025e0c:	4b1a      	ldr	r3, [pc, #104]	; (8025e78 <HAL_MspInit+0x70>)
 8025e0e:	699a      	ldr	r2, [r3, #24]
 8025e10:	f042 0201 	orr.w	r2, r2, #1
 8025e14:	619a      	str	r2, [r3, #24]
 8025e16:	699a      	ldr	r2, [r3, #24]
 8025e18:	f002 0201 	and.w	r2, r2, #1
 8025e1c:	9200      	str	r2, [sp, #0]
 8025e1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8025e20:	69da      	ldr	r2, [r3, #28]
 8025e22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8025e26:	61da      	str	r2, [r3, #28]
 8025e28:	69db      	ldr	r3, [r3, #28]
 8025e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025e2e:	9301      	str	r3, [sp, #4]
 8025e30:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 4, 0);
 8025e32:	2200      	movs	r2, #0
 8025e34:	2104      	movs	r1, #4
 8025e36:	2001      	movs	r0, #1
 8025e38:	f000 f9ba 	bl	80261b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8025e3c:	2001      	movs	r0, #1
 8025e3e:	f000 f9ef 	bl	8026220 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8025e42:	2200      	movs	r2, #0
 8025e44:	4611      	mov	r1, r2
 8025e46:	2004      	movs	r0, #4
 8025e48:	f000 f9b2 	bl	80261b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8025e4c:	2004      	movs	r0, #4
 8025e4e:	f000 f9e7 	bl	8026220 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8025e52:	2200      	movs	r2, #0
 8025e54:	4611      	mov	r1, r2
 8025e56:	2005      	movs	r0, #5
 8025e58:	f000 f9aa 	bl	80261b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8025e5c:	2005      	movs	r0, #5
 8025e5e:	f000 f9df 	bl	8026220 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8025e62:	4a06      	ldr	r2, [pc, #24]	; (8025e7c <HAL_MspInit+0x74>)
 8025e64:	6853      	ldr	r3, [r2, #4]
 8025e66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8025e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8025e6e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8025e70:	b003      	add	sp, #12
 8025e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8025e76:	bf00      	nop
 8025e78:	40021000 	.word	0x40021000
 8025e7c:	40010000 	.word	0x40010000

08025e80 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8025e80:	e7fe      	b.n	8025e80 <NMI_Handler>

08025e82 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8025e82:	e7fe      	b.n	8025e82 <HardFault_Handler>

08025e84 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8025e84:	e7fe      	b.n	8025e84 <MemManage_Handler>

08025e86 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8025e86:	e7fe      	b.n	8025e86 <BusFault_Handler>

08025e88 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8025e88:	e7fe      	b.n	8025e88 <UsageFault_Handler>

08025e8a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8025e8a:	4770      	bx	lr

08025e8c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8025e8c:	4770      	bx	lr

08025e8e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8025e8e:	4770      	bx	lr

08025e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8025e90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8025e92:	f000 f951 	bl	8026138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8025e96:	bd08      	pop	{r3, pc}

08025e98 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8025e98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8025e9a:	f001 ff17 	bl	8027ccc <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8025e9e:	bd08      	pop	{r3, pc}

08025ea0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8025ea0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8025ea2:	4802      	ldr	r0, [pc, #8]	; (8025eac <RTC_IRQHandler+0xc>)
 8025ea4:	f002 fd78 	bl	8028998 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8025ea8:	bd08      	pop	{r3, pc}
 8025eaa:	bf00      	nop
 8025eac:	200056f8 	.word	0x200056f8

08025eb0 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8025eb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8025eb2:	f000 fb0b 	bl	80264cc <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8025eb6:	bd08      	pop	{r3, pc}

08025eb8 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8025eb8:	4770      	bx	lr
	...

08025ebc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8025ebc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8025ebe:	4802      	ldr	r0, [pc, #8]	; (8025ec8 <USB_HP_CAN1_TX_IRQHandler+0xc>)
 8025ec0:	f001 fcd8 	bl	8027874 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8025ec4:	bd08      	pop	{r3, pc}
 8025ec6:	bf00      	nop
 8025ec8:	200064c8 	.word	0x200064c8

08025ecc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8025ecc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8025ece:	4802      	ldr	r0, [pc, #8]	; (8025ed8 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8025ed0:	f001 fcd0 	bl	8027874 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8025ed4:	bd08      	pop	{r3, pc}
 8025ed6:	bf00      	nop
 8025ed8:	200064c8 	.word	0x200064c8

08025edc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8025edc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8025ede:	4802      	ldr	r0, [pc, #8]	; (8025ee8 <SPI1_IRQHandler+0xc>)
 8025ee0:	f002 ff94 	bl	8028e0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8025ee4:	bd08      	pop	{r3, pc}
 8025ee6:	bf00      	nop
 8025ee8:	2000570c 	.word	0x2000570c

08025eec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8025eec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8025eee:	4802      	ldr	r0, [pc, #8]	; (8025ef8 <USART1_IRQHandler+0xc>)
 8025ef0:	f003 fa1a 	bl	8029328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8025ef4:	bd08      	pop	{r3, pc}
 8025ef6:	bf00      	nop
 8025ef8:	20005790 	.word	0x20005790

08025efc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8025efc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8025efe:	4802      	ldr	r0, [pc, #8]	; (8025f08 <RTC_Alarm_IRQHandler+0xc>)
 8025f00:	f002 fcb8 	bl	8028874 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8025f04:	bd08      	pop	{r3, pc}
 8025f06:	bf00      	nop
 8025f08:	200056f8 	.word	0x200056f8

08025f0c <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8025f0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8025f0e:	4802      	ldr	r0, [pc, #8]	; (8025f18 <FSMC_IRQHandler+0xc>)
 8025f10:	f000 fe3e 	bl	8026b90 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8025f14:	bd08      	pop	{r3, pc}
 8025f16:	bf00      	nop
 8025f18:	200011f0 	.word	0x200011f0

08025f1c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8025f1c:	2001      	movs	r0, #1
 8025f1e:	4770      	bx	lr

08025f20 <_kill>:

int _kill(int pid, int sig)
{
 8025f20:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8025f22:	f005 fd99 	bl	802ba58 <__errno>
 8025f26:	2316      	movs	r3, #22
 8025f28:	6003      	str	r3, [r0, #0]
  return -1;
}
 8025f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8025f2e:	bd08      	pop	{r3, pc}

08025f30 <_exit>:

void _exit (int status)
{
 8025f30:	b508      	push	{r3, lr}
  _kill(status, -1);
 8025f32:	f04f 31ff 	mov.w	r1, #4294967295
 8025f36:	f7ff fff3 	bl	8025f20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8025f3a:	e7fe      	b.n	8025f3a <_exit+0xa>

08025f3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8025f3c:	b570      	push	{r4, r5, r6, lr}
 8025f3e:	460c      	mov	r4, r1
 8025f40:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8025f42:	2500      	movs	r5, #0
 8025f44:	e006      	b.n	8025f54 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8025f46:	f3af 8000 	nop.w
 8025f4a:	4621      	mov	r1, r4
 8025f4c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8025f50:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8025f52:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8025f54:	42b5      	cmp	r5, r6
 8025f56:	dbf6      	blt.n	8025f46 <_read+0xa>
  }

  return len;
}
 8025f58:	4630      	mov	r0, r6
 8025f5a:	bd70      	pop	{r4, r5, r6, pc}

08025f5c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8025f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8025f60:	4770      	bx	lr

08025f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8025f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8025f66:	604b      	str	r3, [r1, #4]
  return 0;
}
 8025f68:	2000      	movs	r0, #0
 8025f6a:	4770      	bx	lr

08025f6c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8025f6c:	2001      	movs	r0, #1
 8025f6e:	4770      	bx	lr

08025f70 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8025f70:	2000      	movs	r0, #0
 8025f72:	4770      	bx	lr

08025f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8025f74:	b510      	push	{r4, lr}
 8025f76:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8025f78:	4a0c      	ldr	r2, [pc, #48]	; (8025fac <_sbrk+0x38>)
 8025f7a:	490d      	ldr	r1, [pc, #52]	; (8025fb0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8025f7c:	480d      	ldr	r0, [pc, #52]	; (8025fb4 <_sbrk+0x40>)
 8025f7e:	6800      	ldr	r0, [r0, #0]
 8025f80:	b140      	cbz	r0, 8025f94 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8025f82:	480c      	ldr	r0, [pc, #48]	; (8025fb4 <_sbrk+0x40>)
 8025f84:	6800      	ldr	r0, [r0, #0]
 8025f86:	4403      	add	r3, r0
 8025f88:	1a52      	subs	r2, r2, r1
 8025f8a:	4293      	cmp	r3, r2
 8025f8c:	d806      	bhi.n	8025f9c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8025f8e:	4a09      	ldr	r2, [pc, #36]	; (8025fb4 <_sbrk+0x40>)
 8025f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8025f92:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8025f94:	4807      	ldr	r0, [pc, #28]	; (8025fb4 <_sbrk+0x40>)
 8025f96:	4c08      	ldr	r4, [pc, #32]	; (8025fb8 <_sbrk+0x44>)
 8025f98:	6004      	str	r4, [r0, #0]
 8025f9a:	e7f2      	b.n	8025f82 <_sbrk+0xe>
    errno = ENOMEM;
 8025f9c:	f005 fd5c 	bl	802ba58 <__errno>
 8025fa0:	230c      	movs	r3, #12
 8025fa2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8025fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8025fa8:	e7f3      	b.n	8025f92 <_sbrk+0x1e>
 8025faa:	bf00      	nop
 8025fac:	2000c000 	.word	0x2000c000
 8025fb0:	00001000 	.word	0x00001000
 8025fb4:	2000578c 	.word	0x2000578c
 8025fb8:	20006ce8 	.word	0x20006ce8

08025fbc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8025fbc:	4770      	bx	lr
	...

08025fc0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8025fc0:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8025fc2:	480a      	ldr	r0, [pc, #40]	; (8025fec <MX_USART1_UART_Init+0x2c>)
 8025fc4:	4b0a      	ldr	r3, [pc, #40]	; (8025ff0 <MX_USART1_UART_Init+0x30>)
 8025fc6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8025fc8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8025fcc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8025fce:	2300      	movs	r3, #0
 8025fd0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8025fd2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8025fd4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8025fd6:	220c      	movs	r2, #12
 8025fd8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8025fda:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8025fdc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8025fde:	f003 f887 	bl	80290f0 <HAL_UART_Init>
 8025fe2:	b900      	cbnz	r0, 8025fe6 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8025fe4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8025fe6:	f7fd fd3b 	bl	8023a60 <Error_Handler>
}
 8025fea:	e7fb      	b.n	8025fe4 <MX_USART1_UART_Init+0x24>
 8025fec:	20005790 	.word	0x20005790
 8025ff0:	40013800 	.word	0x40013800

08025ff4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8025ff4:	b530      	push	{r4, r5, lr}
 8025ff6:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025ff8:	2300      	movs	r3, #0
 8025ffa:	9302      	str	r3, [sp, #8]
 8025ffc:	9303      	str	r3, [sp, #12]
 8025ffe:	9304      	str	r3, [sp, #16]
 8026000:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 8026002:	6802      	ldr	r2, [r0, #0]
 8026004:	4b1b      	ldr	r3, [pc, #108]	; (8026074 <HAL_UART_MspInit+0x80>)
 8026006:	429a      	cmp	r2, r3
 8026008:	d001      	beq.n	802600e <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 802600a:	b007      	add	sp, #28
 802600c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 802600e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8026012:	699a      	ldr	r2, [r3, #24]
 8026014:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8026018:	619a      	str	r2, [r3, #24]
 802601a:	699a      	ldr	r2, [r3, #24]
 802601c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8026020:	9200      	str	r2, [sp, #0]
 8026022:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8026024:	699a      	ldr	r2, [r3, #24]
 8026026:	f042 0204 	orr.w	r2, r2, #4
 802602a:	619a      	str	r2, [r3, #24]
 802602c:	699b      	ldr	r3, [r3, #24]
 802602e:	f003 0304 	and.w	r3, r3, #4
 8026032:	9301      	str	r3, [sp, #4]
 8026034:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8026036:	f44f 7300 	mov.w	r3, #512	; 0x200
 802603a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802603c:	2302      	movs	r3, #2
 802603e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8026040:	2303      	movs	r3, #3
 8026042:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026044:	4d0c      	ldr	r5, [pc, #48]	; (8026078 <HAL_UART_MspInit+0x84>)
 8026046:	a902      	add	r1, sp, #8
 8026048:	4628      	mov	r0, r5
 802604a:	f000 fbb5 	bl	80267b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 802604e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026052:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026054:	2400      	movs	r4, #0
 8026056:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026058:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802605a:	a902      	add	r1, sp, #8
 802605c:	4628      	mov	r0, r5
 802605e:	f000 fbab 	bl	80267b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8026062:	4622      	mov	r2, r4
 8026064:	4621      	mov	r1, r4
 8026066:	2025      	movs	r0, #37	; 0x25
 8026068:	f000 f8a2 	bl	80261b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 802606c:	2025      	movs	r0, #37	; 0x25
 802606e:	f000 f8d7 	bl	8026220 <HAL_NVIC_EnableIRQ>
}
 8026072:	e7ca      	b.n	802600a <HAL_UART_MspInit+0x16>
 8026074:	40013800 	.word	0x40013800
 8026078:	40010800 	.word	0x40010800

0802607c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 802607c:	f7ff ff9e 	bl	8025fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8026080:	480b      	ldr	r0, [pc, #44]	; (80260b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8026082:	490c      	ldr	r1, [pc, #48]	; (80260b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8026084:	4a0c      	ldr	r2, [pc, #48]	; (80260b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8026086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8026088:	e002      	b.n	8026090 <LoopCopyDataInit>

0802608a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802608a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802608c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802608e:	3304      	adds	r3, #4

08026090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8026090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8026092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8026094:	d3f9      	bcc.n	802608a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8026096:	4a09      	ldr	r2, [pc, #36]	; (80260bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8026098:	4c09      	ldr	r4, [pc, #36]	; (80260c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 802609a:	2300      	movs	r3, #0
  b LoopFillZerobss
 802609c:	e001      	b.n	80260a2 <LoopFillZerobss>

0802609e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802609e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80260a0:	3204      	adds	r2, #4

080260a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80260a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80260a4:	d3fb      	bcc.n	802609e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80260a6:	f005 fcdd 	bl	802ba64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80260aa:	f7fd fd23 	bl	8023af4 <main>
  bx lr
 80260ae:	4770      	bx	lr
  ldr r0, =_sdata
 80260b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80260b4:	200008bc 	.word	0x200008bc
  ldr r2, =_sidata
 80260b8:	080313d0 	.word	0x080313d0
  ldr r2, =_sbss
 80260bc:	200008c0 	.word	0x200008c0
  ldr r4, =_ebss
 80260c0:	20006ce4 	.word	0x20006ce4

080260c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80260c4:	e7fe      	b.n	80260c4 <ADC1_2_IRQHandler>
	...

080260c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80260c8:	b510      	push	{r4, lr}
 80260ca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80260cc:	4b0e      	ldr	r3, [pc, #56]	; (8026108 <HAL_InitTick+0x40>)
 80260ce:	781a      	ldrb	r2, [r3, #0]
 80260d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80260d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80260d8:	4a0c      	ldr	r2, [pc, #48]	; (802610c <HAL_InitTick+0x44>)
 80260da:	6810      	ldr	r0, [r2, #0]
 80260dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80260e0:	f000 f8be 	bl	8026260 <HAL_SYSTICK_Config>
 80260e4:	b968      	cbnz	r0, 8026102 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80260e6:	2c0f      	cmp	r4, #15
 80260e8:	d901      	bls.n	80260ee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80260ea:	2001      	movs	r0, #1
 80260ec:	e00a      	b.n	8026104 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80260ee:	2200      	movs	r2, #0
 80260f0:	4621      	mov	r1, r4
 80260f2:	f04f 30ff 	mov.w	r0, #4294967295
 80260f6:	f000 f85b 	bl	80261b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80260fa:	4b05      	ldr	r3, [pc, #20]	; (8026110 <HAL_InitTick+0x48>)
 80260fc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80260fe:	2000      	movs	r0, #0
 8026100:	e000      	b.n	8026104 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8026102:	2001      	movs	r0, #1
}
 8026104:	bd10      	pop	{r4, pc}
 8026106:	bf00      	nop
 8026108:	20000094 	.word	0x20000094
 802610c:	20000090 	.word	0x20000090
 8026110:	20000098 	.word	0x20000098

08026114 <HAL_Init>:
{
 8026114:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8026116:	4a07      	ldr	r2, [pc, #28]	; (8026134 <HAL_Init+0x20>)
 8026118:	6813      	ldr	r3, [r2, #0]
 802611a:	f043 0310 	orr.w	r3, r3, #16
 802611e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8026120:	2003      	movs	r0, #3
 8026122:	f000 f833 	bl	802618c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8026126:	200f      	movs	r0, #15
 8026128:	f7ff ffce 	bl	80260c8 <HAL_InitTick>
  HAL_MspInit();
 802612c:	f7ff fe6c 	bl	8025e08 <HAL_MspInit>
}
 8026130:	2000      	movs	r0, #0
 8026132:	bd08      	pop	{r3, pc}
 8026134:	40022000 	.word	0x40022000

08026138 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8026138:	4a03      	ldr	r2, [pc, #12]	; (8026148 <HAL_IncTick+0x10>)
 802613a:	6811      	ldr	r1, [r2, #0]
 802613c:	4b03      	ldr	r3, [pc, #12]	; (802614c <HAL_IncTick+0x14>)
 802613e:	781b      	ldrb	r3, [r3, #0]
 8026140:	440b      	add	r3, r1
 8026142:	6013      	str	r3, [r2, #0]
}
 8026144:	4770      	bx	lr
 8026146:	bf00      	nop
 8026148:	200057d8 	.word	0x200057d8
 802614c:	20000094 	.word	0x20000094

08026150 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8026150:	4b01      	ldr	r3, [pc, #4]	; (8026158 <HAL_GetTick+0x8>)
 8026152:	6818      	ldr	r0, [r3, #0]
}
 8026154:	4770      	bx	lr
 8026156:	bf00      	nop
 8026158:	200057d8 	.word	0x200057d8

0802615c <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 802615c:	4a02      	ldr	r2, [pc, #8]	; (8026168 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 802615e:	6853      	ldr	r3, [r2, #4]
 8026160:	f043 0301 	orr.w	r3, r3, #1
 8026164:	6053      	str	r3, [r2, #4]
}
 8026166:	4770      	bx	lr
 8026168:	e0042000 	.word	0xe0042000

0802616c <HAL_DBGMCU_EnableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 802616c:	4a02      	ldr	r2, [pc, #8]	; (8026178 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 802616e:	6853      	ldr	r3, [r2, #4]
 8026170:	f043 0302 	orr.w	r3, r3, #2
 8026174:	6053      	str	r3, [r2, #4]
}
 8026176:	4770      	bx	lr
 8026178:	e0042000 	.word	0xe0042000

0802617c <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 802617c:	4a02      	ldr	r2, [pc, #8]	; (8026188 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 802617e:	6853      	ldr	r3, [r2, #4]
 8026180:	f043 0304 	orr.w	r3, r3, #4
 8026184:	6053      	str	r3, [r2, #4]
}
 8026186:	4770      	bx	lr
 8026188:	e0042000 	.word	0xe0042000

0802618c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802618c:	4a07      	ldr	r2, [pc, #28]	; (80261ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 802618e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8026190:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8026194:	041b      	lsls	r3, r3, #16
 8026196:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8026198:	0200      	lsls	r0, r0, #8
 802619a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802619e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80261a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80261a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80261a8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80261aa:	4770      	bx	lr
 80261ac:	e000ed00 	.word	0xe000ed00

080261b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80261b0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80261b2:	4b19      	ldr	r3, [pc, #100]	; (8026218 <HAL_NVIC_SetPriority+0x68>)
 80261b4:	68db      	ldr	r3, [r3, #12]
 80261b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80261ba:	f1c3 0c07 	rsb	ip, r3, #7
 80261be:	f1bc 0f04 	cmp.w	ip, #4
 80261c2:	bf28      	it	cs
 80261c4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80261c8:	f103 0e04 	add.w	lr, r3, #4
 80261cc:	f1be 0f06 	cmp.w	lr, #6
 80261d0:	d918      	bls.n	8026204 <HAL_NVIC_SetPriority+0x54>
 80261d2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80261d4:	f04f 3eff 	mov.w	lr, #4294967295
 80261d8:	fa0e fc0c 	lsl.w	ip, lr, ip
 80261dc:	ea21 010c 	bic.w	r1, r1, ip
 80261e0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80261e2:	fa0e fe03 	lsl.w	lr, lr, r3
 80261e6:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80261ea:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80261ec:	2800      	cmp	r0, #0
 80261ee:	db0b      	blt.n	8026208 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80261f0:	0112      	lsls	r2, r2, #4
 80261f2:	b2d2      	uxtb	r2, r2
 80261f4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80261f8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80261fc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8026200:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8026204:	2300      	movs	r3, #0
 8026206:	e7e5      	b.n	80261d4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026208:	f000 000f 	and.w	r0, r0, #15
 802620c:	0112      	lsls	r2, r2, #4
 802620e:	b2d2      	uxtb	r2, r2
 8026210:	4b02      	ldr	r3, [pc, #8]	; (802621c <HAL_NVIC_SetPriority+0x6c>)
 8026212:	541a      	strb	r2, [r3, r0]
 8026214:	e7f4      	b.n	8026200 <HAL_NVIC_SetPriority+0x50>
 8026216:	bf00      	nop
 8026218:	e000ed00 	.word	0xe000ed00
 802621c:	e000ed14 	.word	0xe000ed14

08026220 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8026220:	2800      	cmp	r0, #0
 8026222:	db07      	blt.n	8026234 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8026224:	f000 021f 	and.w	r2, r0, #31
 8026228:	0940      	lsrs	r0, r0, #5
 802622a:	2301      	movs	r3, #1
 802622c:	4093      	lsls	r3, r2
 802622e:	4a02      	ldr	r2, [pc, #8]	; (8026238 <HAL_NVIC_EnableIRQ+0x18>)
 8026230:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8026234:	4770      	bx	lr
 8026236:	bf00      	nop
 8026238:	e000e100 	.word	0xe000e100

0802623c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 802623c:	2800      	cmp	r0, #0
 802623e:	db0c      	blt.n	802625a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8026240:	f000 021f 	and.w	r2, r0, #31
 8026244:	0940      	lsrs	r0, r0, #5
 8026246:	2301      	movs	r3, #1
 8026248:	4093      	lsls	r3, r2
 802624a:	3020      	adds	r0, #32
 802624c:	4a03      	ldr	r2, [pc, #12]	; (802625c <HAL_NVIC_DisableIRQ+0x20>)
 802624e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8026252:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8026256:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 802625a:	4770      	bx	lr
 802625c:	e000e100 	.word	0xe000e100

08026260 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8026260:	3801      	subs	r0, #1
 8026262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8026266:	d20b      	bcs.n	8026280 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8026268:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 802626c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802626e:	4a05      	ldr	r2, [pc, #20]	; (8026284 <HAL_SYSTICK_Config+0x24>)
 8026270:	21f0      	movs	r1, #240	; 0xf0
 8026272:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8026276:	2000      	movs	r0, #0
 8026278:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802627a:	2207      	movs	r2, #7
 802627c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802627e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8026280:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8026282:	4770      	bx	lr
 8026284:	e000ed00 	.word	0xe000ed00

08026288 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8026288:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802628a:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 802628e:	b2d2      	uxtb	r2, r2
 8026290:	2a02      	cmp	r2, #2
 8026292:	d006      	beq.n	80262a2 <HAL_DMA_Abort+0x1a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8026294:	2204      	movs	r2, #4
 8026296:	6382      	str	r2, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8026298:	2200      	movs	r2, #0
 802629a:	f880 2020 	strb.w	r2, [r0, #32]
    
    return HAL_ERROR;
 802629e:	2001      	movs	r0, #1
 80262a0:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80262a2:	6801      	ldr	r1, [r0, #0]
 80262a4:	680a      	ldr	r2, [r1, #0]
 80262a6:	f022 020e 	bic.w	r2, r2, #14
 80262aa:	600a      	str	r2, [r1, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80262ac:	6801      	ldr	r1, [r0, #0]
 80262ae:	680a      	ldr	r2, [r1, #0]
 80262b0:	f022 0201 	bic.w	r2, r2, #1
 80262b4:	600a      	str	r2, [r1, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80262b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80262b8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80262ba:	2101      	movs	r1, #1
 80262bc:	fa01 f202 	lsl.w	r2, r1, r2
 80262c0:	6042      	str	r2, [r0, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80262c2:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80262c6:	2000      	movs	r0, #0
 80262c8:	f883 0020 	strb.w	r0, [r3, #32]
  
  return status; 
}
 80262cc:	4770      	bx	lr
	...

080262d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80262d0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80262d2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80262d6:	b2db      	uxtb	r3, r3
 80262d8:	2b02      	cmp	r3, #2
 80262da:	d003      	beq.n	80262e4 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80262dc:	2304      	movs	r3, #4
 80262de:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80262e0:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80262e2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80262e4:	6802      	ldr	r2, [r0, #0]
 80262e6:	6813      	ldr	r3, [r2, #0]
 80262e8:	f023 030e 	bic.w	r3, r3, #14
 80262ec:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80262ee:	6802      	ldr	r2, [r0, #0]
 80262f0:	6813      	ldr	r3, [r2, #0]
 80262f2:	f023 0301 	bic.w	r3, r3, #1
 80262f6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80262f8:	6803      	ldr	r3, [r0, #0]
 80262fa:	4a4c      	ldr	r2, [pc, #304]	; (802642c <HAL_DMA_Abort_IT+0x15c>)
 80262fc:	4293      	cmp	r3, r2
 80262fe:	d94e      	bls.n	802639e <HAL_DMA_Abort_IT+0xce>
 8026300:	3a78      	subs	r2, #120	; 0x78
 8026302:	4293      	cmp	r3, r2
 8026304:	d024      	beq.n	8026350 <HAL_DMA_Abort_IT+0x80>
 8026306:	3214      	adds	r2, #20
 8026308:	4293      	cmp	r3, r2
 802630a:	d030      	beq.n	802636e <HAL_DMA_Abort_IT+0x9e>
 802630c:	3214      	adds	r2, #20
 802630e:	4293      	cmp	r3, r2
 8026310:	d02f      	beq.n	8026372 <HAL_DMA_Abort_IT+0xa2>
 8026312:	3214      	adds	r2, #20
 8026314:	4293      	cmp	r3, r2
 8026316:	d02f      	beq.n	8026378 <HAL_DMA_Abort_IT+0xa8>
 8026318:	3214      	adds	r2, #20
 802631a:	4293      	cmp	r3, r2
 802631c:	d02f      	beq.n	802637e <HAL_DMA_Abort_IT+0xae>
 802631e:	3214      	adds	r2, #20
 8026320:	4293      	cmp	r3, r2
 8026322:	d02f      	beq.n	8026384 <HAL_DMA_Abort_IT+0xb4>
 8026324:	3214      	adds	r2, #20
 8026326:	4293      	cmp	r3, r2
 8026328:	d02f      	beq.n	802638a <HAL_DMA_Abort_IT+0xba>
 802632a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 802632e:	4293      	cmp	r3, r2
 8026330:	d02e      	beq.n	8026390 <HAL_DMA_Abort_IT+0xc0>
 8026332:	3214      	adds	r2, #20
 8026334:	4293      	cmp	r3, r2
 8026336:	d02d      	beq.n	8026394 <HAL_DMA_Abort_IT+0xc4>
 8026338:	3214      	adds	r2, #20
 802633a:	4293      	cmp	r3, r2
 802633c:	d02c      	beq.n	8026398 <HAL_DMA_Abort_IT+0xc8>
 802633e:	3214      	adds	r2, #20
 8026340:	4293      	cmp	r3, r2
 8026342:	d002      	beq.n	802634a <HAL_DMA_Abort_IT+0x7a>
 8026344:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8026348:	e003      	b.n	8026352 <HAL_DMA_Abort_IT+0x82>
 802634a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802634e:	e000      	b.n	8026352 <HAL_DMA_Abort_IT+0x82>
 8026350:	2201      	movs	r2, #1
 8026352:	4b37      	ldr	r3, [pc, #220]	; (8026430 <HAL_DMA_Abort_IT+0x160>)
 8026354:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8026356:	2301      	movs	r3, #1
 8026358:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 802635c:	2300      	movs	r3, #0
 802635e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8026362:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8026364:	2b00      	cmp	r3, #0
 8026366:	d05e      	beq.n	8026426 <HAL_DMA_Abort_IT+0x156>
      hdma->XferAbortCallback(hdma);
 8026368:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 802636a:	2000      	movs	r0, #0
 802636c:	e7b9      	b.n	80262e2 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 802636e:	2210      	movs	r2, #16
 8026370:	e7ef      	b.n	8026352 <HAL_DMA_Abort_IT+0x82>
 8026372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8026376:	e7ec      	b.n	8026352 <HAL_DMA_Abort_IT+0x82>
 8026378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802637c:	e7e9      	b.n	8026352 <HAL_DMA_Abort_IT+0x82>
 802637e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8026382:	e7e6      	b.n	8026352 <HAL_DMA_Abort_IT+0x82>
 8026384:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8026388:	e7e3      	b.n	8026352 <HAL_DMA_Abort_IT+0x82>
 802638a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802638e:	e7e0      	b.n	8026352 <HAL_DMA_Abort_IT+0x82>
 8026390:	2201      	movs	r2, #1
 8026392:	e7de      	b.n	8026352 <HAL_DMA_Abort_IT+0x82>
 8026394:	2210      	movs	r2, #16
 8026396:	e7dc      	b.n	8026352 <HAL_DMA_Abort_IT+0x82>
 8026398:	f44f 7280 	mov.w	r2, #256	; 0x100
 802639c:	e7d9      	b.n	8026352 <HAL_DMA_Abort_IT+0x82>
 802639e:	4a25      	ldr	r2, [pc, #148]	; (8026434 <HAL_DMA_Abort_IT+0x164>)
 80263a0:	4293      	cmp	r3, r2
 80263a2:	d024      	beq.n	80263ee <HAL_DMA_Abort_IT+0x11e>
 80263a4:	3214      	adds	r2, #20
 80263a6:	4293      	cmp	r3, r2
 80263a8:	d025      	beq.n	80263f6 <HAL_DMA_Abort_IT+0x126>
 80263aa:	3214      	adds	r2, #20
 80263ac:	4293      	cmp	r3, r2
 80263ae:	d024      	beq.n	80263fa <HAL_DMA_Abort_IT+0x12a>
 80263b0:	3214      	adds	r2, #20
 80263b2:	4293      	cmp	r3, r2
 80263b4:	d024      	beq.n	8026400 <HAL_DMA_Abort_IT+0x130>
 80263b6:	3214      	adds	r2, #20
 80263b8:	4293      	cmp	r3, r2
 80263ba:	d024      	beq.n	8026406 <HAL_DMA_Abort_IT+0x136>
 80263bc:	3214      	adds	r2, #20
 80263be:	4293      	cmp	r3, r2
 80263c0:	d024      	beq.n	802640c <HAL_DMA_Abort_IT+0x13c>
 80263c2:	3214      	adds	r2, #20
 80263c4:	4293      	cmp	r3, r2
 80263c6:	d024      	beq.n	8026412 <HAL_DMA_Abort_IT+0x142>
 80263c8:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80263cc:	4293      	cmp	r3, r2
 80263ce:	d023      	beq.n	8026418 <HAL_DMA_Abort_IT+0x148>
 80263d0:	3214      	adds	r2, #20
 80263d2:	4293      	cmp	r3, r2
 80263d4:	d022      	beq.n	802641c <HAL_DMA_Abort_IT+0x14c>
 80263d6:	3214      	adds	r2, #20
 80263d8:	4293      	cmp	r3, r2
 80263da:	d021      	beq.n	8026420 <HAL_DMA_Abort_IT+0x150>
 80263dc:	3214      	adds	r2, #20
 80263de:	4293      	cmp	r3, r2
 80263e0:	d002      	beq.n	80263e8 <HAL_DMA_Abort_IT+0x118>
 80263e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80263e6:	e003      	b.n	80263f0 <HAL_DMA_Abort_IT+0x120>
 80263e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80263ec:	e000      	b.n	80263f0 <HAL_DMA_Abort_IT+0x120>
 80263ee:	2201      	movs	r2, #1
 80263f0:	4b11      	ldr	r3, [pc, #68]	; (8026438 <HAL_DMA_Abort_IT+0x168>)
 80263f2:	605a      	str	r2, [r3, #4]
 80263f4:	e7af      	b.n	8026356 <HAL_DMA_Abort_IT+0x86>
 80263f6:	2210      	movs	r2, #16
 80263f8:	e7fa      	b.n	80263f0 <HAL_DMA_Abort_IT+0x120>
 80263fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80263fe:	e7f7      	b.n	80263f0 <HAL_DMA_Abort_IT+0x120>
 8026400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8026404:	e7f4      	b.n	80263f0 <HAL_DMA_Abort_IT+0x120>
 8026406:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802640a:	e7f1      	b.n	80263f0 <HAL_DMA_Abort_IT+0x120>
 802640c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8026410:	e7ee      	b.n	80263f0 <HAL_DMA_Abort_IT+0x120>
 8026412:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8026416:	e7eb      	b.n	80263f0 <HAL_DMA_Abort_IT+0x120>
 8026418:	2201      	movs	r2, #1
 802641a:	e7e9      	b.n	80263f0 <HAL_DMA_Abort_IT+0x120>
 802641c:	2210      	movs	r2, #16
 802641e:	e7e7      	b.n	80263f0 <HAL_DMA_Abort_IT+0x120>
 8026420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8026424:	e7e4      	b.n	80263f0 <HAL_DMA_Abort_IT+0x120>
  HAL_StatusTypeDef status = HAL_OK;
 8026426:	2000      	movs	r0, #0
 8026428:	e75b      	b.n	80262e2 <HAL_DMA_Abort_IT+0x12>
 802642a:	bf00      	nop
 802642c:	40020080 	.word	0x40020080
 8026430:	40020400 	.word	0x40020400
 8026434:	40020008 	.word	0x40020008
 8026438:	40020000 	.word	0x40020000

0802643c <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 802643c:	4b04      	ldr	r3, [pc, #16]	; (8026450 <FLASH_Program_HalfWord+0x14>)
 802643e:	2200      	movs	r2, #0
 8026440:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8026442:	4a04      	ldr	r2, [pc, #16]	; (8026454 <FLASH_Program_HalfWord+0x18>)
 8026444:	6913      	ldr	r3, [r2, #16]
 8026446:	f043 0301 	orr.w	r3, r3, #1
 802644a:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 802644c:	8001      	strh	r1, [r0, #0]
}
 802644e:	4770      	bx	lr
 8026450:	200057e0 	.word	0x200057e0
 8026454:	40022000 	.word	0x40022000

08026458 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8026458:	4b19      	ldr	r3, [pc, #100]	; (80264c0 <FLASH_SetErrorCode+0x68>)
 802645a:	68db      	ldr	r3, [r3, #12]
 802645c:	f013 0310 	ands.w	r3, r3, #16
 8026460:	d005      	beq.n	802646e <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8026462:	4a18      	ldr	r2, [pc, #96]	; (80264c4 <FLASH_SetErrorCode+0x6c>)
 8026464:	69d3      	ldr	r3, [r2, #28]
 8026466:	f043 0302 	orr.w	r3, r3, #2
 802646a:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 802646c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 802646e:	4a14      	ldr	r2, [pc, #80]	; (80264c0 <FLASH_SetErrorCode+0x68>)
 8026470:	68d2      	ldr	r2, [r2, #12]
 8026472:	f012 0f04 	tst.w	r2, #4
 8026476:	d006      	beq.n	8026486 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8026478:	4912      	ldr	r1, [pc, #72]	; (80264c4 <FLASH_SetErrorCode+0x6c>)
 802647a:	69ca      	ldr	r2, [r1, #28]
 802647c:	f042 0201 	orr.w	r2, r2, #1
 8026480:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8026482:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8026486:	4a0e      	ldr	r2, [pc, #56]	; (80264c0 <FLASH_SetErrorCode+0x68>)
 8026488:	69d2      	ldr	r2, [r2, #28]
 802648a:	f012 0f01 	tst.w	r2, #1
 802648e:	d009      	beq.n	80264a4 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8026490:	490c      	ldr	r1, [pc, #48]	; (80264c4 <FLASH_SetErrorCode+0x6c>)
 8026492:	69ca      	ldr	r2, [r1, #28]
 8026494:	f042 0204 	orr.w	r2, r2, #4
 8026498:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 802649a:	4909      	ldr	r1, [pc, #36]	; (80264c0 <FLASH_SetErrorCode+0x68>)
 802649c:	69ca      	ldr	r2, [r1, #28]
 802649e:	f022 0201 	bic.w	r2, r2, #1
 80264a2:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80264a4:	f240 1201 	movw	r2, #257	; 0x101
 80264a8:	4293      	cmp	r3, r2
 80264aa:	d002      	beq.n	80264b2 <FLASH_SetErrorCode+0x5a>
 80264ac:	4a04      	ldr	r2, [pc, #16]	; (80264c0 <FLASH_SetErrorCode+0x68>)
 80264ae:	60d3      	str	r3, [r2, #12]
}  
 80264b0:	4770      	bx	lr
  __HAL_FLASH_CLEAR_FLAG(flags);
 80264b2:	4a03      	ldr	r2, [pc, #12]	; (80264c0 <FLASH_SetErrorCode+0x68>)
 80264b4:	69d3      	ldr	r3, [r2, #28]
 80264b6:	f023 0301 	bic.w	r3, r3, #1
 80264ba:	61d3      	str	r3, [r2, #28]
 80264bc:	4770      	bx	lr
 80264be:	bf00      	nop
 80264c0:	40022000 	.word	0x40022000
 80264c4:	200057e0 	.word	0x200057e0

080264c8 <HAL_FLASH_EndOfOperationCallback>:
}
 80264c8:	4770      	bx	lr

080264ca <HAL_FLASH_OperationErrorCallback>:
}
 80264ca:	4770      	bx	lr

080264cc <HAL_FLASH_IRQHandler>:
{
 80264cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80264ce:	4b52      	ldr	r3, [pc, #328]	; (8026618 <HAL_FLASH_IRQHandler+0x14c>)
 80264d0:	68db      	ldr	r3, [r3, #12]
 80264d2:	f013 0f10 	tst.w	r3, #16
 80264d6:	d104      	bne.n	80264e2 <HAL_FLASH_IRQHandler+0x16>
 80264d8:	4b4f      	ldr	r3, [pc, #316]	; (8026618 <HAL_FLASH_IRQHandler+0x14c>)
 80264da:	68db      	ldr	r3, [r3, #12]
 80264dc:	f013 0f04 	tst.w	r3, #4
 80264e0:	d00b      	beq.n	80264fa <HAL_FLASH_IRQHandler+0x2e>
    addresstmp = pFlash.Address;
 80264e2:	4c4e      	ldr	r4, [pc, #312]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 80264e4:	68a5      	ldr	r5, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 80264e6:	f04f 33ff 	mov.w	r3, #4294967295
 80264ea:	60a3      	str	r3, [r4, #8]
    FLASH_SetErrorCode();
 80264ec:	f7ff ffb4 	bl	8026458 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80264f0:	4628      	mov	r0, r5
 80264f2:	f7ff ffea 	bl	80264ca <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80264f6:	2300      	movs	r3, #0
 80264f8:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80264fa:	4b47      	ldr	r3, [pc, #284]	; (8026618 <HAL_FLASH_IRQHandler+0x14c>)
 80264fc:	68db      	ldr	r3, [r3, #12]
 80264fe:	f013 0f20 	tst.w	r3, #32
 8026502:	d02b      	beq.n	802655c <HAL_FLASH_IRQHandler+0x90>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8026504:	4b44      	ldr	r3, [pc, #272]	; (8026618 <HAL_FLASH_IRQHandler+0x14c>)
 8026506:	2220      	movs	r2, #32
 8026508:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 802650a:	4b44      	ldr	r3, [pc, #272]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 802650c:	781b      	ldrb	r3, [r3, #0]
 802650e:	b32b      	cbz	r3, 802655c <HAL_FLASH_IRQHandler+0x90>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8026510:	4b42      	ldr	r3, [pc, #264]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 8026512:	781b      	ldrb	r3, [r3, #0]
 8026514:	b2db      	uxtb	r3, r3
 8026516:	2b01      	cmp	r3, #1
 8026518:	d030      	beq.n	802657c <HAL_FLASH_IRQHandler+0xb0>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 802651a:	4b40      	ldr	r3, [pc, #256]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 802651c:	781b      	ldrb	r3, [r3, #0]
 802651e:	b2db      	uxtb	r3, r3
 8026520:	2b02      	cmp	r3, #2
 8026522:	d04a      	beq.n	80265ba <HAL_FLASH_IRQHandler+0xee>
        pFlash.DataRemaining--;
 8026524:	4b3d      	ldr	r3, [pc, #244]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 8026526:	685a      	ldr	r2, [r3, #4]
 8026528:	3a01      	subs	r2, #1
 802652a:	605a      	str	r2, [r3, #4]
        if(pFlash.DataRemaining != 0U)
 802652c:	685b      	ldr	r3, [r3, #4]
 802652e:	2b00      	cmp	r3, #0
 8026530:	d14f      	bne.n	80265d2 <HAL_FLASH_IRQHandler+0x106>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8026532:	4b3a      	ldr	r3, [pc, #232]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 8026534:	781b      	ldrb	r3, [r3, #0]
 8026536:	b2db      	uxtb	r3, r3
 8026538:	2b03      	cmp	r3, #3
 802653a:	d062      	beq.n	8026602 <HAL_FLASH_IRQHandler+0x136>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 802653c:	4b37      	ldr	r3, [pc, #220]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 802653e:	781b      	ldrb	r3, [r3, #0]
 8026540:	b2db      	uxtb	r3, r3
 8026542:	2b04      	cmp	r3, #4
 8026544:	d062      	beq.n	802660c <HAL_FLASH_IRQHandler+0x140>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8026546:	4b35      	ldr	r3, [pc, #212]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 8026548:	6898      	ldr	r0, [r3, #8]
 802654a:	3806      	subs	r0, #6
 802654c:	f7ff ffbc 	bl	80264c8 <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 8026550:	4b32      	ldr	r3, [pc, #200]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 8026552:	f04f 32ff 	mov.w	r2, #4294967295
 8026556:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8026558:	2200      	movs	r2, #0
 802655a:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 802655c:	4b2f      	ldr	r3, [pc, #188]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 802655e:	781b      	ldrb	r3, [r3, #0]
 8026560:	b95b      	cbnz	r3, 802657a <HAL_FLASH_IRQHandler+0xae>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8026562:	4b2d      	ldr	r3, [pc, #180]	; (8026618 <HAL_FLASH_IRQHandler+0x14c>)
 8026564:	691a      	ldr	r2, [r3, #16]
 8026566:	f022 0207 	bic.w	r2, r2, #7
 802656a:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 802656c:	691a      	ldr	r2, [r3, #16]
 802656e:	f422 52a0 	bic.w	r2, r2, #5120	; 0x1400
 8026572:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8026574:	4b29      	ldr	r3, [pc, #164]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 8026576:	2200      	movs	r2, #0
 8026578:	761a      	strb	r2, [r3, #24]
}
 802657a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pFlash.DataRemaining--;
 802657c:	4b27      	ldr	r3, [pc, #156]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 802657e:	685a      	ldr	r2, [r3, #4]
 8026580:	3a01      	subs	r2, #1
 8026582:	605a      	str	r2, [r3, #4]
        if(pFlash.DataRemaining != 0U)
 8026584:	685b      	ldr	r3, [r3, #4]
 8026586:	b17b      	cbz	r3, 80265a8 <HAL_FLASH_IRQHandler+0xdc>
          addresstmp = pFlash.Address;
 8026588:	4c24      	ldr	r4, [pc, #144]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 802658a:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 802658c:	f7ff ff9c 	bl	80264c8 <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8026590:	68a0      	ldr	r0, [r4, #8]
 8026592:	f500 6000 	add.w	r0, r0, #2048	; 0x800
          pFlash.Address = addresstmp;
 8026596:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8026598:	4a1f      	ldr	r2, [pc, #124]	; (8026618 <HAL_FLASH_IRQHandler+0x14c>)
 802659a:	6913      	ldr	r3, [r2, #16]
 802659c:	f023 0302 	bic.w	r3, r3, #2
 80265a0:	6113      	str	r3, [r2, #16]
          FLASH_PageErase(addresstmp);
 80265a2:	f000 f8f7 	bl	8026794 <FLASH_PageErase>
 80265a6:	e7d9      	b.n	802655c <HAL_FLASH_IRQHandler+0x90>
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80265a8:	4b1c      	ldr	r3, [pc, #112]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 80265aa:	f04f 30ff 	mov.w	r0, #4294967295
 80265ae:	6098      	str	r0, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80265b0:	2200      	movs	r2, #0
 80265b2:	701a      	strb	r2, [r3, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80265b4:	f7ff ff88 	bl	80264c8 <HAL_FLASH_EndOfOperationCallback>
 80265b8:	e7d0      	b.n	802655c <HAL_FLASH_IRQHandler+0x90>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80265ba:	4a17      	ldr	r2, [pc, #92]	; (8026618 <HAL_FLASH_IRQHandler+0x14c>)
 80265bc:	6913      	ldr	r3, [r2, #16]
 80265be:	f023 0304 	bic.w	r3, r3, #4
 80265c2:	6113      	str	r3, [r2, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 80265c4:	2000      	movs	r0, #0
 80265c6:	f7ff ff7f 	bl	80264c8 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80265ca:	4b14      	ldr	r3, [pc, #80]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 80265cc:	2200      	movs	r2, #0
 80265ce:	701a      	strb	r2, [r3, #0]
 80265d0:	e7c4      	b.n	802655c <HAL_FLASH_IRQHandler+0x90>
          pFlash.Address += 2U;
 80265d2:	4b12      	ldr	r3, [pc, #72]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 80265d4:	689a      	ldr	r2, [r3, #8]
 80265d6:	3202      	adds	r2, #2
 80265d8:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 80265da:	6898      	ldr	r0, [r3, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 80265dc:	e9d3 6704 	ldrd	r6, r7, [r3, #16]
 80265e0:	0c34      	lsrs	r4, r6, #16
 80265e2:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80265e6:	0c3d      	lsrs	r5, r7, #16
 80265e8:	e9c3 4504 	strd	r4, r5, [r3, #16]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80265ec:	490a      	ldr	r1, [pc, #40]	; (8026618 <HAL_FLASH_IRQHandler+0x14c>)
 80265ee:	690a      	ldr	r2, [r1, #16]
 80265f0:	f022 0201 	bic.w	r2, r2, #1
 80265f4:	610a      	str	r2, [r1, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80265f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80265fa:	b291      	uxth	r1, r2
 80265fc:	f7ff ff1e 	bl	802643c <FLASH_Program_HalfWord>
 8026600:	e7ac      	b.n	802655c <HAL_FLASH_IRQHandler+0x90>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8026602:	4b06      	ldr	r3, [pc, #24]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 8026604:	6898      	ldr	r0, [r3, #8]
 8026606:	f7ff ff5f 	bl	80264c8 <HAL_FLASH_EndOfOperationCallback>
 802660a:	e7a1      	b.n	8026550 <HAL_FLASH_IRQHandler+0x84>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 802660c:	4b03      	ldr	r3, [pc, #12]	; (802661c <HAL_FLASH_IRQHandler+0x150>)
 802660e:	6898      	ldr	r0, [r3, #8]
 8026610:	3802      	subs	r0, #2
 8026612:	f7ff ff59 	bl	80264c8 <HAL_FLASH_EndOfOperationCallback>
 8026616:	e79b      	b.n	8026550 <HAL_FLASH_IRQHandler+0x84>
 8026618:	40022000 	.word	0x40022000
 802661c:	200057e0 	.word	0x200057e0

08026620 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8026620:	4b0a      	ldr	r3, [pc, #40]	; (802664c <HAL_FLASH_Unlock+0x2c>)
 8026622:	691b      	ldr	r3, [r3, #16]
 8026624:	f013 0f80 	tst.w	r3, #128	; 0x80
 8026628:	d00b      	beq.n	8026642 <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 802662a:	4b08      	ldr	r3, [pc, #32]	; (802664c <HAL_FLASH_Unlock+0x2c>)
 802662c:	4a08      	ldr	r2, [pc, #32]	; (8026650 <HAL_FLASH_Unlock+0x30>)
 802662e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8026630:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8026634:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8026636:	691b      	ldr	r3, [r3, #16]
 8026638:	f013 0f80 	tst.w	r3, #128	; 0x80
 802663c:	d103      	bne.n	8026646 <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 802663e:	2000      	movs	r0, #0
 8026640:	4770      	bx	lr
 8026642:	2000      	movs	r0, #0
 8026644:	4770      	bx	lr
      status = HAL_ERROR;
 8026646:	2001      	movs	r0, #1
}
 8026648:	4770      	bx	lr
 802664a:	bf00      	nop
 802664c:	40022000 	.word	0x40022000
 8026650:	45670123 	.word	0x45670123

08026654 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8026654:	4a03      	ldr	r2, [pc, #12]	; (8026664 <HAL_FLASH_Lock+0x10>)
 8026656:	6913      	ldr	r3, [r2, #16]
 8026658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802665c:	6113      	str	r3, [r2, #16]
}
 802665e:	2000      	movs	r0, #0
 8026660:	4770      	bx	lr
 8026662:	bf00      	nop
 8026664:	40022000 	.word	0x40022000

08026668 <FLASH_WaitForLastOperation>:
{
 8026668:	b538      	push	{r3, r4, r5, lr}
 802666a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 802666c:	f7ff fd70 	bl	8026150 <HAL_GetTick>
 8026670:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8026672:	4b16      	ldr	r3, [pc, #88]	; (80266cc <FLASH_WaitForLastOperation+0x64>)
 8026674:	68db      	ldr	r3, [r3, #12]
 8026676:	f013 0f01 	tst.w	r3, #1
 802667a:	d00a      	beq.n	8026692 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 802667c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8026680:	d0f7      	beq.n	8026672 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8026682:	b124      	cbz	r4, 802668e <FLASH_WaitForLastOperation+0x26>
 8026684:	f7ff fd64 	bl	8026150 <HAL_GetTick>
 8026688:	1b40      	subs	r0, r0, r5
 802668a:	42a0      	cmp	r0, r4
 802668c:	d9f1      	bls.n	8026672 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 802668e:	2003      	movs	r0, #3
 8026690:	e01b      	b.n	80266ca <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8026692:	4b0e      	ldr	r3, [pc, #56]	; (80266cc <FLASH_WaitForLastOperation+0x64>)
 8026694:	68db      	ldr	r3, [r3, #12]
 8026696:	f013 0f20 	tst.w	r3, #32
 802669a:	d002      	beq.n	80266a2 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 802669c:	4b0b      	ldr	r3, [pc, #44]	; (80266cc <FLASH_WaitForLastOperation+0x64>)
 802669e:	2220      	movs	r2, #32
 80266a0:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80266a2:	4b0a      	ldr	r3, [pc, #40]	; (80266cc <FLASH_WaitForLastOperation+0x64>)
 80266a4:	68db      	ldr	r3, [r3, #12]
 80266a6:	f013 0f10 	tst.w	r3, #16
 80266aa:	d10b      	bne.n	80266c4 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80266ac:	4b07      	ldr	r3, [pc, #28]	; (80266cc <FLASH_WaitForLastOperation+0x64>)
 80266ae:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80266b0:	f013 0f01 	tst.w	r3, #1
 80266b4:	d106      	bne.n	80266c4 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80266b6:	4b05      	ldr	r3, [pc, #20]	; (80266cc <FLASH_WaitForLastOperation+0x64>)
 80266b8:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80266ba:	f013 0f04 	tst.w	r3, #4
 80266be:	d101      	bne.n	80266c4 <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 80266c0:	2000      	movs	r0, #0
 80266c2:	e002      	b.n	80266ca <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 80266c4:	f7ff fec8 	bl	8026458 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80266c8:	2001      	movs	r0, #1
}
 80266ca:	bd38      	pop	{r3, r4, r5, pc}
 80266cc:	40022000 	.word	0x40022000

080266d0 <HAL_FLASH_Program>:
{
 80266d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80266d4:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 80266d6:	4b24      	ldr	r3, [pc, #144]	; (8026768 <HAL_FLASH_Program+0x98>)
 80266d8:	7e1b      	ldrb	r3, [r3, #24]
 80266da:	2b01      	cmp	r3, #1
 80266dc:	d041      	beq.n	8026762 <HAL_FLASH_Program+0x92>
 80266de:	4604      	mov	r4, r0
 80266e0:	460f      	mov	r7, r1
 80266e2:	4690      	mov	r8, r2
 80266e4:	4b20      	ldr	r3, [pc, #128]	; (8026768 <HAL_FLASH_Program+0x98>)
 80266e6:	2201      	movs	r2, #1
 80266e8:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80266ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80266ee:	f7ff ffbb 	bl	8026668 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80266f2:	4603      	mov	r3, r0
 80266f4:	bb78      	cbnz	r0, 8026756 <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80266f6:	2c01      	cmp	r4, #1
 80266f8:	d008      	beq.n	802670c <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80266fa:	2c02      	cmp	r4, #2
 80266fc:	d003      	beq.n	8026706 <HAL_FLASH_Program+0x36>
      nbiterations = 4U;
 80266fe:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8026702:	461c      	mov	r4, r3
 8026704:	e007      	b.n	8026716 <HAL_FLASH_Program+0x46>
      nbiterations = 2U;
 8026706:	f04f 0902 	mov.w	r9, #2
 802670a:	e7fa      	b.n	8026702 <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 802670c:	f04f 0901 	mov.w	r9, #1
 8026710:	e7f7      	b.n	8026702 <HAL_FLASH_Program+0x32>
    for (index = 0U; index < nbiterations; index++)
 8026712:	3401      	adds	r4, #1
 8026714:	b2e4      	uxtb	r4, r4
 8026716:	454c      	cmp	r4, r9
 8026718:	d21d      	bcs.n	8026756 <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 802671a:	0121      	lsls	r1, r4, #4
 802671c:	f1c1 0220 	rsb	r2, r1, #32
 8026720:	f1a1 0320 	sub.w	r3, r1, #32
 8026724:	fa28 f101 	lsr.w	r1, r8, r1
 8026728:	fa06 f202 	lsl.w	r2, r6, r2
 802672c:	4311      	orrs	r1, r2
 802672e:	fa26 f303 	lsr.w	r3, r6, r3
 8026732:	4319      	orrs	r1, r3
 8026734:	b289      	uxth	r1, r1
 8026736:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 802673a:	f7ff fe7f 	bl	802643c <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 802673e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8026742:	f7ff ff91 	bl	8026668 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8026746:	4b09      	ldr	r3, [pc, #36]	; (802676c <HAL_FLASH_Program+0x9c>)
 8026748:	691d      	ldr	r5, [r3, #16]
 802674a:	f025 0501 	bic.w	r5, r5, #1
 802674e:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8026750:	4603      	mov	r3, r0
 8026752:	2800      	cmp	r0, #0
 8026754:	d0dd      	beq.n	8026712 <HAL_FLASH_Program+0x42>
  __HAL_UNLOCK(&pFlash);
 8026756:	4a04      	ldr	r2, [pc, #16]	; (8026768 <HAL_FLASH_Program+0x98>)
 8026758:	2100      	movs	r1, #0
 802675a:	7611      	strb	r1, [r2, #24]
}
 802675c:	4618      	mov	r0, r3
 802675e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8026762:	2302      	movs	r3, #2
 8026764:	e7fa      	b.n	802675c <HAL_FLASH_Program+0x8c>
 8026766:	bf00      	nop
 8026768:	200057e0 	.word	0x200057e0
 802676c:	40022000 	.word	0x40022000

08026770 <HAL_FLASHEx_OBGetUserData>:
  */
uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
{
  uint32_t value = 0;
  
  if (DATAAdress == OB_DATA_ADDRESS_DATA0)
 8026770:	4b06      	ldr	r3, [pc, #24]	; (802678c <HAL_FLASHEx_OBGetUserData+0x1c>)
 8026772:	4298      	cmp	r0, r3
 8026774:	d004      	beq.n	8026780 <HAL_FLASHEx_OBGetUserData+0x10>
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
  }
  else
  {
    /* Get value programmed in OB USER Data1 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
 8026776:	4b06      	ldr	r3, [pc, #24]	; (8026790 <HAL_FLASHEx_OBGetUserData+0x20>)
 8026778:	69d8      	ldr	r0, [r3, #28]
 802677a:	f3c0 4087 	ubfx	r0, r0, #18, #8
  }
  
  return value;
}
 802677e:	4770      	bx	lr
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
 8026780:	4b03      	ldr	r3, [pc, #12]	; (8026790 <HAL_FLASHEx_OBGetUserData+0x20>)
 8026782:	69d8      	ldr	r0, [r3, #28]
 8026784:	f3c0 2087 	ubfx	r0, r0, #10, #8
 8026788:	4770      	bx	lr
 802678a:	bf00      	nop
 802678c:	1ffff804 	.word	0x1ffff804
 8026790:	40022000 	.word	0x40022000

08026794 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8026794:	4b06      	ldr	r3, [pc, #24]	; (80267b0 <FLASH_PageErase+0x1c>)
 8026796:	2200      	movs	r2, #0
 8026798:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 802679a:	4b06      	ldr	r3, [pc, #24]	; (80267b4 <FLASH_PageErase+0x20>)
 802679c:	691a      	ldr	r2, [r3, #16]
 802679e:	f042 0202 	orr.w	r2, r2, #2
 80267a2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80267a4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80267a6:	691a      	ldr	r2, [r3, #16]
 80267a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80267ac:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80267ae:	4770      	bx	lr
 80267b0:	200057e0 	.word	0x200057e0
 80267b4:	40022000 	.word	0x40022000

080267b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80267b8:	b570      	push	{r4, r5, r6, lr}
 80267ba:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80267bc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80267be:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80267c0:	e0b0      	b.n	8026924 <HAL_GPIO_Init+0x16c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80267c2:	4d87      	ldr	r5, [pc, #540]	; (80269e0 <HAL_GPIO_Init+0x228>)
 80267c4:	42ab      	cmp	r3, r5
 80267c6:	d010      	beq.n	80267ea <HAL_GPIO_Init+0x32>
 80267c8:	d907      	bls.n	80267da <HAL_GPIO_Init+0x22>
 80267ca:	4d86      	ldr	r5, [pc, #536]	; (80269e4 <HAL_GPIO_Init+0x22c>)
 80267cc:	42ab      	cmp	r3, r5
 80267ce:	d00c      	beq.n	80267ea <HAL_GPIO_Init+0x32>
 80267d0:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 80267d4:	42ab      	cmp	r3, r5
 80267d6:	d008      	beq.n	80267ea <HAL_GPIO_Init+0x32>
 80267d8:	e013      	b.n	8026802 <HAL_GPIO_Init+0x4a>
 80267da:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80267de:	42ab      	cmp	r3, r5
 80267e0:	d003      	beq.n	80267ea <HAL_GPIO_Init+0x32>
 80267e2:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 80267e6:	42ab      	cmp	r3, r5
 80267e8:	d107      	bne.n	80267fa <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80267ea:	688b      	ldr	r3, [r1, #8]
 80267ec:	2b00      	cmp	r3, #0
 80267ee:	d062      	beq.n	80268b6 <HAL_GPIO_Init+0xfe>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80267f0:	2b01      	cmp	r3, #1
 80267f2:	d05b      	beq.n	80268ac <HAL_GPIO_Init+0xf4>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80267f4:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80267f6:	2408      	movs	r4, #8
 80267f8:	e003      	b.n	8026802 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80267fa:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80267fe:	42ab      	cmp	r3, r5
 8026800:	d0f3      	beq.n	80267ea <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8026802:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026806:	d858      	bhi.n	80268ba <HAL_GPIO_Init+0x102>
 8026808:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 802680a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802680e:	d856      	bhi.n	80268be <HAL_GPIO_Init+0x106>
 8026810:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8026814:	6833      	ldr	r3, [r6, #0]
 8026816:	250f      	movs	r5, #15
 8026818:	4095      	lsls	r5, r2
 802681a:	ea23 0305 	bic.w	r3, r3, r5
 802681e:	fa04 f202 	lsl.w	r2, r4, r2
 8026822:	4313      	orrs	r3, r2
 8026824:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8026826:	684b      	ldr	r3, [r1, #4]
 8026828:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 802682c:	d078      	beq.n	8026920 <HAL_GPIO_Init+0x168>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 802682e:	4b6e      	ldr	r3, [pc, #440]	; (80269e8 <HAL_GPIO_Init+0x230>)
 8026830:	699a      	ldr	r2, [r3, #24]
 8026832:	f042 0201 	orr.w	r2, r2, #1
 8026836:	619a      	str	r2, [r3, #24]
 8026838:	699b      	ldr	r3, [r3, #24]
 802683a:	f003 0301 	and.w	r3, r3, #1
 802683e:	9301      	str	r3, [sp, #4]
 8026840:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8026842:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8026846:	1c95      	adds	r5, r2, #2
 8026848:	4b68      	ldr	r3, [pc, #416]	; (80269ec <HAL_GPIO_Init+0x234>)
 802684a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 802684e:	f00c 0503 	and.w	r5, ip, #3
 8026852:	00ad      	lsls	r5, r5, #2
 8026854:	230f      	movs	r3, #15
 8026856:	40ab      	lsls	r3, r5
 8026858:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 802685c:	4b64      	ldr	r3, [pc, #400]	; (80269f0 <HAL_GPIO_Init+0x238>)
 802685e:	4298      	cmp	r0, r3
 8026860:	d033      	beq.n	80268ca <HAL_GPIO_Init+0x112>
 8026862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8026866:	4298      	cmp	r0, r3
 8026868:	f000 8098 	beq.w	802699c <HAL_GPIO_Init+0x1e4>
 802686c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8026870:	4298      	cmp	r0, r3
 8026872:	f000 8095 	beq.w	80269a0 <HAL_GPIO_Init+0x1e8>
 8026876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802687a:	4298      	cmp	r0, r3
 802687c:	f000 8092 	beq.w	80269a4 <HAL_GPIO_Init+0x1ec>
 8026880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8026884:	4298      	cmp	r0, r3
 8026886:	f000 808f 	beq.w	80269a8 <HAL_GPIO_Init+0x1f0>
 802688a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802688e:	4298      	cmp	r0, r3
 8026890:	d019      	beq.n	80268c6 <HAL_GPIO_Init+0x10e>
 8026892:	2306      	movs	r3, #6
 8026894:	e01a      	b.n	80268cc <HAL_GPIO_Init+0x114>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8026896:	68cc      	ldr	r4, [r1, #12]
          break;
 8026898:	e7b3      	b.n	8026802 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 802689a:	68cc      	ldr	r4, [r1, #12]
 802689c:	3404      	adds	r4, #4
          break;
 802689e:	e7b0      	b.n	8026802 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80268a0:	68cc      	ldr	r4, [r1, #12]
 80268a2:	3408      	adds	r4, #8
          break;
 80268a4:	e7ad      	b.n	8026802 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80268a6:	68cc      	ldr	r4, [r1, #12]
 80268a8:	340c      	adds	r4, #12
          break;
 80268aa:	e7aa      	b.n	8026802 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80268ac:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80268ae:	2408      	movs	r4, #8
 80268b0:	e7a7      	b.n	8026802 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80268b2:	2400      	movs	r4, #0
 80268b4:	e7a5      	b.n	8026802 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80268b6:	2404      	movs	r4, #4
 80268b8:	e7a3      	b.n	8026802 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80268ba:	1d06      	adds	r6, r0, #4
 80268bc:	e7a5      	b.n	802680a <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80268be:	f1ac 0208 	sub.w	r2, ip, #8
 80268c2:	0092      	lsls	r2, r2, #2
 80268c4:	e7a6      	b.n	8026814 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80268c6:	2305      	movs	r3, #5
 80268c8:	e000      	b.n	80268cc <HAL_GPIO_Init+0x114>
 80268ca:	2300      	movs	r3, #0
 80268cc:	40ab      	lsls	r3, r5
 80268ce:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 80268d0:	3202      	adds	r2, #2
 80268d2:	4d46      	ldr	r5, [pc, #280]	; (80269ec <HAL_GPIO_Init+0x234>)
 80268d4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80268d8:	684b      	ldr	r3, [r1, #4]
 80268da:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80268de:	d065      	beq.n	80269ac <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80268e0:	4a44      	ldr	r2, [pc, #272]	; (80269f4 <HAL_GPIO_Init+0x23c>)
 80268e2:	6893      	ldr	r3, [r2, #8]
 80268e4:	ea43 030e 	orr.w	r3, r3, lr
 80268e8:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80268ea:	684b      	ldr	r3, [r1, #4]
 80268ec:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80268f0:	d062      	beq.n	80269b8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80268f2:	4a40      	ldr	r2, [pc, #256]	; (80269f4 <HAL_GPIO_Init+0x23c>)
 80268f4:	68d3      	ldr	r3, [r2, #12]
 80268f6:	ea43 030e 	orr.w	r3, r3, lr
 80268fa:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80268fc:	684b      	ldr	r3, [r1, #4]
 80268fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8026902:	d05f      	beq.n	80269c4 <HAL_GPIO_Init+0x20c>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8026904:	4a3b      	ldr	r2, [pc, #236]	; (80269f4 <HAL_GPIO_Init+0x23c>)
 8026906:	6853      	ldr	r3, [r2, #4]
 8026908:	ea43 030e 	orr.w	r3, r3, lr
 802690c:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 802690e:	684b      	ldr	r3, [r1, #4]
 8026910:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8026914:	d05c      	beq.n	80269d0 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8026916:	4a37      	ldr	r2, [pc, #220]	; (80269f4 <HAL_GPIO_Init+0x23c>)
 8026918:	6813      	ldr	r3, [r2, #0]
 802691a:	ea43 030e 	orr.w	r3, r3, lr
 802691e:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8026920:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8026924:	680b      	ldr	r3, [r1, #0]
 8026926:	fa33 f20c 	lsrs.w	r2, r3, ip
 802692a:	d057      	beq.n	80269dc <HAL_GPIO_Init+0x224>
    ioposition = (0x01uL << position);
 802692c:	2201      	movs	r2, #1
 802692e:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8026932:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8026936:	ea32 0303 	bics.w	r3, r2, r3
 802693a:	d1f1      	bne.n	8026920 <HAL_GPIO_Init+0x168>
      switch (GPIO_Init->Mode)
 802693c:	684b      	ldr	r3, [r1, #4]
 802693e:	2b12      	cmp	r3, #18
 8026940:	f63f af3f 	bhi.w	80267c2 <HAL_GPIO_Init+0xa>
 8026944:	2b12      	cmp	r3, #18
 8026946:	f63f af5c 	bhi.w	8026802 <HAL_GPIO_Init+0x4a>
 802694a:	a501      	add	r5, pc, #4	; (adr r5, 8026950 <HAL_GPIO_Init+0x198>)
 802694c:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8026950:	080267eb 	.word	0x080267eb
 8026954:	08026897 	.word	0x08026897
 8026958:	080268a1 	.word	0x080268a1
 802695c:	080268b3 	.word	0x080268b3
 8026960:	08026803 	.word	0x08026803
 8026964:	08026803 	.word	0x08026803
 8026968:	08026803 	.word	0x08026803
 802696c:	08026803 	.word	0x08026803
 8026970:	08026803 	.word	0x08026803
 8026974:	08026803 	.word	0x08026803
 8026978:	08026803 	.word	0x08026803
 802697c:	08026803 	.word	0x08026803
 8026980:	08026803 	.word	0x08026803
 8026984:	08026803 	.word	0x08026803
 8026988:	08026803 	.word	0x08026803
 802698c:	08026803 	.word	0x08026803
 8026990:	08026803 	.word	0x08026803
 8026994:	0802689b 	.word	0x0802689b
 8026998:	080268a7 	.word	0x080268a7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 802699c:	2301      	movs	r3, #1
 802699e:	e795      	b.n	80268cc <HAL_GPIO_Init+0x114>
 80269a0:	2302      	movs	r3, #2
 80269a2:	e793      	b.n	80268cc <HAL_GPIO_Init+0x114>
 80269a4:	2303      	movs	r3, #3
 80269a6:	e791      	b.n	80268cc <HAL_GPIO_Init+0x114>
 80269a8:	2304      	movs	r3, #4
 80269aa:	e78f      	b.n	80268cc <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80269ac:	4a11      	ldr	r2, [pc, #68]	; (80269f4 <HAL_GPIO_Init+0x23c>)
 80269ae:	6893      	ldr	r3, [r2, #8]
 80269b0:	ea23 030e 	bic.w	r3, r3, lr
 80269b4:	6093      	str	r3, [r2, #8]
 80269b6:	e798      	b.n	80268ea <HAL_GPIO_Init+0x132>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80269b8:	4a0e      	ldr	r2, [pc, #56]	; (80269f4 <HAL_GPIO_Init+0x23c>)
 80269ba:	68d3      	ldr	r3, [r2, #12]
 80269bc:	ea23 030e 	bic.w	r3, r3, lr
 80269c0:	60d3      	str	r3, [r2, #12]
 80269c2:	e79b      	b.n	80268fc <HAL_GPIO_Init+0x144>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80269c4:	4a0b      	ldr	r2, [pc, #44]	; (80269f4 <HAL_GPIO_Init+0x23c>)
 80269c6:	6853      	ldr	r3, [r2, #4]
 80269c8:	ea23 030e 	bic.w	r3, r3, lr
 80269cc:	6053      	str	r3, [r2, #4]
 80269ce:	e79e      	b.n	802690e <HAL_GPIO_Init+0x156>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80269d0:	4a08      	ldr	r2, [pc, #32]	; (80269f4 <HAL_GPIO_Init+0x23c>)
 80269d2:	6813      	ldr	r3, [r2, #0]
 80269d4:	ea23 030e 	bic.w	r3, r3, lr
 80269d8:	6013      	str	r3, [r2, #0]
 80269da:	e7a1      	b.n	8026920 <HAL_GPIO_Init+0x168>
  }
}
 80269dc:	b002      	add	sp, #8
 80269de:	bd70      	pop	{r4, r5, r6, pc}
 80269e0:	10220000 	.word	0x10220000
 80269e4:	10310000 	.word	0x10310000
 80269e8:	40021000 	.word	0x40021000
 80269ec:	40010000 	.word	0x40010000
 80269f0:	40010800 	.word	0x40010800
 80269f4:	40010400 	.word	0x40010400

080269f8 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80269f8:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80269fa:	e081      	b.n	8026b00 <HAL_GPIO_DeInit+0x108>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80269fc:	f04f 0e05 	mov.w	lr, #5
 8026a00:	e001      	b.n	8026a06 <HAL_GPIO_DeInit+0xe>
 8026a02:	f04f 0e00 	mov.w	lr, #0
 8026a06:	fa0e f404 	lsl.w	r4, lr, r4
 8026a0a:	4564      	cmp	r4, ip
 8026a0c:	d054      	beq.n	8026ab8 <HAL_GPIO_DeInit+0xc0>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8026a0e:	2bff      	cmp	r3, #255	; 0xff
 8026a10:	d86d      	bhi.n	8026aee <HAL_GPIO_DeInit+0xf6>
 8026a12:	4605      	mov	r5, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8026a14:	2bff      	cmp	r3, #255	; 0xff
 8026a16:	d86c      	bhi.n	8026af2 <HAL_GPIO_DeInit+0xfa>
 8026a18:	ea4f 0e82 	mov.w	lr, r2, lsl #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8026a1c:	682c      	ldr	r4, [r5, #0]
 8026a1e:	f04f 0c0f 	mov.w	ip, #15
 8026a22:	fa0c fc0e 	lsl.w	ip, ip, lr
 8026a26:	ea24 040c 	bic.w	r4, r4, ip
 8026a2a:	f04f 0c04 	mov.w	ip, #4
 8026a2e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8026a32:	ea44 040c 	orr.w	r4, r4, ip
 8026a36:	602c      	str	r4, [r5, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8026a38:	68c4      	ldr	r4, [r0, #12]
 8026a3a:	ea24 0303 	bic.w	r3, r4, r3
 8026a3e:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8026a40:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8026a42:	fa31 f302 	lsrs.w	r3, r1, r2
 8026a46:	d059      	beq.n	8026afc <HAL_GPIO_DeInit+0x104>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8026a48:	2301      	movs	r3, #1
 8026a4a:	4093      	lsls	r3, r2
    if (iocurrent)
 8026a4c:	400b      	ands	r3, r1
 8026a4e:	d0f7      	beq.n	8026a40 <HAL_GPIO_DeInit+0x48>
      tmp = AFIO->EXTICR[position >> 2u];
 8026a50:	0897      	lsrs	r7, r2, #2
 8026a52:	1cbd      	adds	r5, r7, #2
 8026a54:	4c2f      	ldr	r4, [pc, #188]	; (8026b14 <HAL_GPIO_DeInit+0x11c>)
 8026a56:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8026a5a:	f002 0403 	and.w	r4, r2, #3
 8026a5e:	00a4      	lsls	r4, r4, #2
 8026a60:	f04f 0c0f 	mov.w	ip, #15
 8026a64:	fa0c f604 	lsl.w	r6, ip, r4
 8026a68:	ea06 0c05 	and.w	ip, r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8026a6c:	4d2a      	ldr	r5, [pc, #168]	; (8026b18 <HAL_GPIO_DeInit+0x120>)
 8026a6e:	42a8      	cmp	r0, r5
 8026a70:	d0c7      	beq.n	8026a02 <HAL_GPIO_DeInit+0xa>
 8026a72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8026a76:	42a8      	cmp	r0, r5
 8026a78:	d012      	beq.n	8026aa0 <HAL_GPIO_DeInit+0xa8>
 8026a7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8026a7e:	42a8      	cmp	r0, r5
 8026a80:	d011      	beq.n	8026aa6 <HAL_GPIO_DeInit+0xae>
 8026a82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8026a86:	42a8      	cmp	r0, r5
 8026a88:	d010      	beq.n	8026aac <HAL_GPIO_DeInit+0xb4>
 8026a8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8026a8e:	42a8      	cmp	r0, r5
 8026a90:	d00f      	beq.n	8026ab2 <HAL_GPIO_DeInit+0xba>
 8026a92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8026a96:	42a8      	cmp	r0, r5
 8026a98:	d0b0      	beq.n	80269fc <HAL_GPIO_DeInit+0x4>
 8026a9a:	f04f 0e06 	mov.w	lr, #6
 8026a9e:	e7b2      	b.n	8026a06 <HAL_GPIO_DeInit+0xe>
 8026aa0:	f04f 0e01 	mov.w	lr, #1
 8026aa4:	e7af      	b.n	8026a06 <HAL_GPIO_DeInit+0xe>
 8026aa6:	f04f 0e02 	mov.w	lr, #2
 8026aaa:	e7ac      	b.n	8026a06 <HAL_GPIO_DeInit+0xe>
 8026aac:	f04f 0e03 	mov.w	lr, #3
 8026ab0:	e7a9      	b.n	8026a06 <HAL_GPIO_DeInit+0xe>
 8026ab2:	f04f 0e04 	mov.w	lr, #4
 8026ab6:	e7a6      	b.n	8026a06 <HAL_GPIO_DeInit+0xe>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8026ab8:	4c18      	ldr	r4, [pc, #96]	; (8026b1c <HAL_GPIO_DeInit+0x124>)
 8026aba:	6825      	ldr	r5, [r4, #0]
 8026abc:	ea25 0503 	bic.w	r5, r5, r3
 8026ac0:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8026ac2:	6865      	ldr	r5, [r4, #4]
 8026ac4:	ea25 0503 	bic.w	r5, r5, r3
 8026ac8:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8026aca:	68e5      	ldr	r5, [r4, #12]
 8026acc:	ea25 0503 	bic.w	r5, r5, r3
 8026ad0:	60e5      	str	r5, [r4, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8026ad2:	68a5      	ldr	r5, [r4, #8]
 8026ad4:	ea25 0503 	bic.w	r5, r5, r3
 8026ad8:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8026ada:	f8df c038 	ldr.w	ip, [pc, #56]	; 8026b14 <HAL_GPIO_DeInit+0x11c>
 8026ade:	1cbc      	adds	r4, r7, #2
 8026ae0:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8026ae4:	ea25 0506 	bic.w	r5, r5, r6
 8026ae8:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 8026aec:	e78f      	b.n	8026a0e <HAL_GPIO_DeInit+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8026aee:	1d05      	adds	r5, r0, #4
 8026af0:	e790      	b.n	8026a14 <HAL_GPIO_DeInit+0x1c>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8026af2:	f1a2 0e08 	sub.w	lr, r2, #8
 8026af6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8026afa:	e78f      	b.n	8026a1c <HAL_GPIO_DeInit+0x24>
  }
}
 8026afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8026afe:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8026b00:	fa31 f302 	lsrs.w	r3, r1, r2
 8026b04:	d005      	beq.n	8026b12 <HAL_GPIO_DeInit+0x11a>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8026b06:	2301      	movs	r3, #1
 8026b08:	4093      	lsls	r3, r2
    if (iocurrent)
 8026b0a:	400b      	ands	r3, r1
 8026b0c:	d0f7      	beq.n	8026afe <HAL_GPIO_DeInit+0x106>
{
 8026b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026b10:	e79e      	b.n	8026a50 <HAL_GPIO_DeInit+0x58>
 8026b12:	4770      	bx	lr
 8026b14:	40010000 	.word	0x40010000
 8026b18:	40010800 	.word	0x40010800
 8026b1c:	40010400 	.word	0x40010400

08026b20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8026b20:	b10a      	cbz	r2, 8026b26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8026b22:	6101      	str	r1, [r0, #16]
 8026b24:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8026b26:	0409      	lsls	r1, r1, #16
 8026b28:	6101      	str	r1, [r0, #16]
  }
}
 8026b2a:	4770      	bx	lr

08026b2c <HAL_NAND_Init>:
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FSMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FSMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
  /* Check the NAND handle state */
  if (hnand == NULL)
 8026b2c:	b368      	cbz	r0, 8026b8a <HAL_NAND_Init+0x5e>
{
 8026b2e:	b570      	push	{r4, r5, r6, lr}
 8026b30:	460e      	mov	r6, r1
 8026b32:	4615      	mov	r5, r2
 8026b34:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8026b36:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8026b3a:	b1db      	cbz	r3, 8026b74 <HAL_NAND_Init+0x48>
    HAL_NAND_MspInit(hnand);
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FSMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8026b3c:	4621      	mov	r1, r4
 8026b3e:	f851 0b04 	ldr.w	r0, [r1], #4
 8026b42:	f002 fd35 	bl	80295b0 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FSMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8026b46:	6862      	ldr	r2, [r4, #4]
 8026b48:	4631      	mov	r1, r6
 8026b4a:	6820      	ldr	r0, [r4, #0]
 8026b4c:	f002 fd62 	bl	8029614 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FSMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8026b50:	6862      	ldr	r2, [r4, #4]
 8026b52:	4629      	mov	r1, r5
 8026b54:	6820      	ldr	r0, [r4, #0]
 8026b56:	f002 fd7a 	bl	802964e <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FSMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8026b5a:	6863      	ldr	r3, [r4, #4]
 8026b5c:	2b10      	cmp	r3, #16
 8026b5e:	d00e      	beq.n	8026b7e <HAL_NAND_Init+0x52>
 8026b60:	6822      	ldr	r2, [r4, #0]
 8026b62:	6a13      	ldr	r3, [r2, #32]
 8026b64:	f043 0304 	orr.w	r3, r3, #4
 8026b68:	6213      	str	r3, [r2, #32]

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8026b6a:	2301      	movs	r3, #1
 8026b6c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  return HAL_OK;
 8026b70:	2000      	movs	r0, #0
}
 8026b72:	bd70      	pop	{r4, r5, r6, pc}
    hnand->Lock = HAL_UNLOCKED;
 8026b74:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_NAND_MspInit(hnand);
 8026b78:	f7fc fb20 	bl	80231bc <HAL_NAND_MspInit>
 8026b7c:	e7de      	b.n	8026b3c <HAL_NAND_Init+0x10>
  __FSMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8026b7e:	6822      	ldr	r2, [r4, #0]
 8026b80:	6813      	ldr	r3, [r2, #0]
 8026b82:	f043 0304 	orr.w	r3, r3, #4
 8026b86:	6013      	str	r3, [r2, #0]
 8026b88:	e7ef      	b.n	8026b6a <HAL_NAND_Init+0x3e>
    return HAL_ERROR;
 8026b8a:	2001      	movs	r0, #1
}
 8026b8c:	4770      	bx	lr

08026b8e <HAL_NAND_ITCallback>:
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8026b8e:	4770      	bx	lr

08026b90 <HAL_NAND_IRQHandler>:
{
 8026b90:	b510      	push	{r4, lr}
 8026b92:	4604      	mov	r4, r0
  if (__FSMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_RISING_EDGE))
 8026b94:	6843      	ldr	r3, [r0, #4]
 8026b96:	2b10      	cmp	r3, #16
 8026b98:	d020      	beq.n	8026bdc <HAL_NAND_IRQHandler+0x4c>
 8026b9a:	6803      	ldr	r3, [r0, #0]
 8026b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026b9e:	f003 0301 	and.w	r3, r3, #1
 8026ba2:	bb03      	cbnz	r3, 8026be6 <HAL_NAND_IRQHandler+0x56>
  if (__FSMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_LEVEL))
 8026ba4:	6863      	ldr	r3, [r4, #4]
 8026ba6:	2b10      	cmp	r3, #16
 8026ba8:	d02f      	beq.n	8026c0a <HAL_NAND_IRQHandler+0x7a>
 8026baa:	6823      	ldr	r3, [r4, #0]
 8026bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026bae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8026bb2:	2b00      	cmp	r3, #0
 8026bb4:	d12e      	bne.n	8026c14 <HAL_NAND_IRQHandler+0x84>
  if (__FSMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_FALLING_EDGE))
 8026bb6:	6863      	ldr	r3, [r4, #4]
 8026bb8:	2b10      	cmp	r3, #16
 8026bba:	d03d      	beq.n	8026c38 <HAL_NAND_IRQHandler+0xa8>
 8026bbc:	6823      	ldr	r3, [r4, #0]
 8026bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026bc0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8026bc4:	2b00      	cmp	r3, #0
 8026bc6:	d13c      	bne.n	8026c42 <HAL_NAND_IRQHandler+0xb2>
  if (__FSMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_FEMPT))
 8026bc8:	6863      	ldr	r3, [r4, #4]
 8026bca:	2b10      	cmp	r3, #16
 8026bcc:	d04b      	beq.n	8026c66 <HAL_NAND_IRQHandler+0xd6>
 8026bce:	6823      	ldr	r3, [r4, #0]
 8026bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026bd2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8026bd6:	2b00      	cmp	r3, #0
 8026bd8:	d14a      	bne.n	8026c70 <HAL_NAND_IRQHandler+0xe0>
}
 8026bda:	bd10      	pop	{r4, pc}
  if (__FSMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_RISING_EDGE))
 8026bdc:	6803      	ldr	r3, [r0, #0]
 8026bde:	685b      	ldr	r3, [r3, #4]
 8026be0:	f003 0301 	and.w	r3, r3, #1
 8026be4:	e7dd      	b.n	8026ba2 <HAL_NAND_IRQHandler+0x12>
    HAL_NAND_ITCallback(hnand);
 8026be6:	4620      	mov	r0, r4
 8026be8:	f7ff ffd1 	bl	8026b8e <HAL_NAND_ITCallback>
    __FSMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_RISING_EDGE);
 8026bec:	6863      	ldr	r3, [r4, #4]
 8026bee:	2b10      	cmp	r3, #16
 8026bf0:	d005      	beq.n	8026bfe <HAL_NAND_IRQHandler+0x6e>
 8026bf2:	6822      	ldr	r2, [r4, #0]
 8026bf4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8026bf6:	f023 0301 	bic.w	r3, r3, #1
 8026bfa:	6253      	str	r3, [r2, #36]	; 0x24
 8026bfc:	e7d2      	b.n	8026ba4 <HAL_NAND_IRQHandler+0x14>
 8026bfe:	6822      	ldr	r2, [r4, #0]
 8026c00:	6853      	ldr	r3, [r2, #4]
 8026c02:	f023 0301 	bic.w	r3, r3, #1
 8026c06:	6053      	str	r3, [r2, #4]
 8026c08:	e7cc      	b.n	8026ba4 <HAL_NAND_IRQHandler+0x14>
  if (__FSMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_LEVEL))
 8026c0a:	6823      	ldr	r3, [r4, #0]
 8026c0c:	685b      	ldr	r3, [r3, #4]
 8026c0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8026c12:	e7ce      	b.n	8026bb2 <HAL_NAND_IRQHandler+0x22>
    HAL_NAND_ITCallback(hnand);
 8026c14:	4620      	mov	r0, r4
 8026c16:	f7ff ffba 	bl	8026b8e <HAL_NAND_ITCallback>
    __FSMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_LEVEL);
 8026c1a:	6863      	ldr	r3, [r4, #4]
 8026c1c:	2b10      	cmp	r3, #16
 8026c1e:	d005      	beq.n	8026c2c <HAL_NAND_IRQHandler+0x9c>
 8026c20:	6822      	ldr	r2, [r4, #0]
 8026c22:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8026c24:	f023 0302 	bic.w	r3, r3, #2
 8026c28:	6253      	str	r3, [r2, #36]	; 0x24
 8026c2a:	e7c4      	b.n	8026bb6 <HAL_NAND_IRQHandler+0x26>
 8026c2c:	6822      	ldr	r2, [r4, #0]
 8026c2e:	6853      	ldr	r3, [r2, #4]
 8026c30:	f023 0302 	bic.w	r3, r3, #2
 8026c34:	6053      	str	r3, [r2, #4]
 8026c36:	e7be      	b.n	8026bb6 <HAL_NAND_IRQHandler+0x26>
  if (__FSMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_FALLING_EDGE))
 8026c38:	6823      	ldr	r3, [r4, #0]
 8026c3a:	685b      	ldr	r3, [r3, #4]
 8026c3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8026c40:	e7c0      	b.n	8026bc4 <HAL_NAND_IRQHandler+0x34>
    HAL_NAND_ITCallback(hnand);
 8026c42:	4620      	mov	r0, r4
 8026c44:	f7ff ffa3 	bl	8026b8e <HAL_NAND_ITCallback>
    __FSMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_FALLING_EDGE);
 8026c48:	6863      	ldr	r3, [r4, #4]
 8026c4a:	2b10      	cmp	r3, #16
 8026c4c:	d005      	beq.n	8026c5a <HAL_NAND_IRQHandler+0xca>
 8026c4e:	6822      	ldr	r2, [r4, #0]
 8026c50:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8026c52:	f023 0304 	bic.w	r3, r3, #4
 8026c56:	6253      	str	r3, [r2, #36]	; 0x24
 8026c58:	e7b6      	b.n	8026bc8 <HAL_NAND_IRQHandler+0x38>
 8026c5a:	6822      	ldr	r2, [r4, #0]
 8026c5c:	6853      	ldr	r3, [r2, #4]
 8026c5e:	f023 0304 	bic.w	r3, r3, #4
 8026c62:	6053      	str	r3, [r2, #4]
 8026c64:	e7b0      	b.n	8026bc8 <HAL_NAND_IRQHandler+0x38>
  if (__FSMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_FEMPT))
 8026c66:	6823      	ldr	r3, [r4, #0]
 8026c68:	685b      	ldr	r3, [r3, #4]
 8026c6a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8026c6e:	e7b2      	b.n	8026bd6 <HAL_NAND_IRQHandler+0x46>
    HAL_NAND_ITCallback(hnand);
 8026c70:	4620      	mov	r0, r4
 8026c72:	f7ff ff8c 	bl	8026b8e <HAL_NAND_ITCallback>
    __FSMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_FEMPT);
 8026c76:	6863      	ldr	r3, [r4, #4]
 8026c78:	2b10      	cmp	r3, #16
 8026c7a:	d005      	beq.n	8026c88 <HAL_NAND_IRQHandler+0xf8>
 8026c7c:	6822      	ldr	r2, [r4, #0]
 8026c7e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8026c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8026c84:	6253      	str	r3, [r2, #36]	; 0x24
}
 8026c86:	e7a8      	b.n	8026bda <HAL_NAND_IRQHandler+0x4a>
    __FSMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FSMC_FLAG_FEMPT);
 8026c88:	6822      	ldr	r2, [r4, #0]
 8026c8a:	6853      	ldr	r3, [r2, #4]
 8026c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8026c90:	6053      	str	r3, [r2, #4]
 8026c92:	e7a2      	b.n	8026bda <HAL_NAND_IRQHandler+0x4a>

08026c94 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8026c94:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8026c96:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8026c9a:	d044      	beq.n	8026d26 <HAL_PCD_EP_DB_Receive+0x92>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8026c9c:	6804      	ldr	r4, [r0, #0]
 8026c9e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8026ca2:	b29b      	uxth	r3, r3
 8026ca4:	f891 c000 	ldrb.w	ip, [r1]
 8026ca8:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8026cac:	3302      	adds	r3, #2
 8026cae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8026cb2:	f8b4 4400 	ldrh.w	r4, [r4, #1024]	; 0x400
 8026cb6:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8026cba:	698b      	ldr	r3, [r1, #24]
 8026cbc:	42a3      	cmp	r3, r4
 8026cbe:	d328      	bcc.n	8026d12 <HAL_PCD_EP_DB_Receive+0x7e>
    {
      ep->xfer_len -= count;
 8026cc0:	1b1b      	subs	r3, r3, r4
 8026cc2:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8026cc4:	698b      	ldr	r3, [r1, #24]
 8026cc6:	b97b      	cbnz	r3, 8026ce8 <HAL_PCD_EP_DB_Receive+0x54>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8026cc8:	6805      	ldr	r5, [r0, #0]
 8026cca:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8026cce:	b29b      	uxth	r3, r3
 8026cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8026cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026cd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8026cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8026ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026ce4:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8026ce8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8026cec:	d00e      	beq.n	8026d0c <HAL_PCD_EP_DB_Receive+0x78>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8026cee:	6802      	ldr	r2, [r0, #0]
 8026cf0:	780d      	ldrb	r5, [r1, #0]
 8026cf2:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8026cf6:	b29b      	uxth	r3, r3
 8026cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8026cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8026d04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8026d08:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8026d0c:	b924      	cbnz	r4, 8026d18 <HAL_PCD_EP_DB_Receive+0x84>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8026d0e:	4620      	mov	r0, r4
 8026d10:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 8026d12:	2300      	movs	r3, #0
 8026d14:	618b      	str	r3, [r1, #24]
 8026d16:	e7d5      	b.n	8026cc4 <HAL_PCD_EP_DB_Receive+0x30>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8026d18:	4623      	mov	r3, r4
 8026d1a:	890a      	ldrh	r2, [r1, #8]
 8026d1c:	6949      	ldr	r1, [r1, #20]
 8026d1e:	6800      	ldr	r0, [r0, #0]
 8026d20:	f003 fc2f 	bl	802a582 <USB_ReadPMA>
 8026d24:	e7f3      	b.n	8026d0e <HAL_PCD_EP_DB_Receive+0x7a>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8026d26:	6804      	ldr	r4, [r0, #0]
 8026d28:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8026d2c:	b29b      	uxth	r3, r3
 8026d2e:	f891 c000 	ldrb.w	ip, [r1]
 8026d32:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8026d36:	3306      	adds	r3, #6
 8026d38:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8026d3c:	f8b4 4400 	ldrh.w	r4, [r4, #1024]	; 0x400
 8026d40:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8026d44:	698b      	ldr	r3, [r1, #24]
 8026d46:	42a3      	cmp	r3, r4
 8026d48:	d32f      	bcc.n	8026daa <HAL_PCD_EP_DB_Receive+0x116>
      ep->xfer_len -= count;
 8026d4a:	1b1b      	subs	r3, r3, r4
 8026d4c:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8026d4e:	698b      	ldr	r3, [r1, #24]
 8026d50:	b97b      	cbnz	r3, 8026d72 <HAL_PCD_EP_DB_Receive+0xde>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8026d52:	6805      	ldr	r5, [r0, #0]
 8026d54:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8026d58:	b29b      	uxth	r3, r3
 8026d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8026d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026d62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8026d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8026d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026d6e:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8026d72:	f012 0f40 	tst.w	r2, #64	; 0x40
 8026d76:	d10f      	bne.n	8026d98 <HAL_PCD_EP_DB_Receive+0x104>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8026d78:	6802      	ldr	r2, [r0, #0]
 8026d7a:	f891 c000 	ldrb.w	ip, [r1]
 8026d7e:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8026d82:	b29b      	uxth	r3, r3
 8026d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8026d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8026d90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8026d94:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8026d98:	2c00      	cmp	r4, #0
 8026d9a:	d0b8      	beq.n	8026d0e <HAL_PCD_EP_DB_Receive+0x7a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8026d9c:	4623      	mov	r3, r4
 8026d9e:	894a      	ldrh	r2, [r1, #10]
 8026da0:	6949      	ldr	r1, [r1, #20]
 8026da2:	6800      	ldr	r0, [r0, #0]
 8026da4:	f003 fbed 	bl	802a582 <USB_ReadPMA>
 8026da8:	e7b1      	b.n	8026d0e <HAL_PCD_EP_DB_Receive+0x7a>
      ep->xfer_len = 0U;
 8026daa:	2300      	movs	r3, #0
 8026dac:	618b      	str	r3, [r1, #24]
 8026dae:	e7ce      	b.n	8026d4e <HAL_PCD_EP_DB_Receive+0xba>

08026db0 <HAL_PCD_Init>:
{
 8026db0:	b570      	push	{r4, r5, r6, lr}
 8026db2:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8026db4:	2800      	cmp	r0, #0
 8026db6:	f000 8081 	beq.w	8026ebc <HAL_PCD_Init+0x10c>
 8026dba:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8026dbc:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8026dc0:	b1eb      	cbz	r3, 8026dfe <HAL_PCD_Init+0x4e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8026dc2:	2303      	movs	r3, #3
 8026dc4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8026dc8:	6820      	ldr	r0, [r4, #0]
 8026dca:	f002 fc6d 	bl	80296a8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8026dce:	4625      	mov	r5, r4
 8026dd0:	f855 6b10 	ldr.w	r6, [r5], #16
 8026dd4:	46ec      	mov	ip, sp
 8026dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026dd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8026ddc:	682b      	ldr	r3, [r5, #0]
 8026dde:	f8cc 3000 	str.w	r3, [ip]
 8026de2:	1d23      	adds	r3, r4, #4
 8026de4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8026de6:	4630      	mov	r0, r6
 8026de8:	f002 fc4e 	bl	8029688 <USB_CoreInit>
 8026dec:	4605      	mov	r5, r0
 8026dee:	b158      	cbz	r0, 8026e08 <HAL_PCD_Init+0x58>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8026df0:	2302      	movs	r3, #2
 8026df2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8026df6:	2501      	movs	r5, #1
}
 8026df8:	4628      	mov	r0, r5
 8026dfa:	b006      	add	sp, #24
 8026dfc:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8026dfe:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8026e02:	f004 fb57 	bl	802b4b4 <HAL_PCD_MspInit>
 8026e06:	e7dc      	b.n	8026dc2 <HAL_PCD_Init+0x12>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8026e08:	2100      	movs	r1, #0
 8026e0a:	6820      	ldr	r0, [r4, #0]
 8026e0c:	f002 fc56 	bl	80296bc <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026e10:	462b      	mov	r3, r5
 8026e12:	e016      	b.n	8026e42 <HAL_PCD_Init+0x92>
    hpcd->IN_ep[i].is_in = 1U;
 8026e14:	1c5a      	adds	r2, r3, #1
 8026e16:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8026e1a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8026e1e:	2001      	movs	r0, #1
 8026e20:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 8026e22:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8026e26:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8026e2a:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 8026e2e:	2100      	movs	r1, #0
 8026e30:	70c1      	strb	r1, [r0, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8026e32:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8026e36:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8026e3a:	6381      	str	r1, [r0, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8026e3c:	63c1      	str	r1, [r0, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8026e3e:	6401      	str	r1, [r0, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026e40:	b2d3      	uxtb	r3, r2
 8026e42:	6861      	ldr	r1, [r4, #4]
 8026e44:	428b      	cmp	r3, r1
 8026e46:	d3e5      	bcc.n	8026e14 <HAL_PCD_Init+0x64>
 8026e48:	e016      	b.n	8026e78 <HAL_PCD_Init+0xc8>
    hpcd->OUT_ep[i].is_in = 0U;
 8026e4a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8026e4e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8026e52:	2200      	movs	r2, #0
 8026e54:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8026e58:	f883 5168 	strb.w	r5, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8026e5c:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8026e60:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8026e64:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8026e68:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8026e6c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8026e70:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026e74:	3501      	adds	r5, #1
 8026e76:	b2ed      	uxtb	r5, r5
 8026e78:	42a9      	cmp	r1, r5
 8026e7a:	d8e6      	bhi.n	8026e4a <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8026e7c:	4625      	mov	r5, r4
 8026e7e:	f855 6b10 	ldr.w	r6, [r5], #16
 8026e82:	46ec      	mov	ip, sp
 8026e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026e86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8026e8a:	682b      	ldr	r3, [r5, #0]
 8026e8c:	f8cc 3000 	str.w	r3, [ip]
 8026e90:	1d23      	adds	r3, r4, #4
 8026e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8026e94:	4630      	mov	r0, r6
 8026e96:	f002 fc13 	bl	80296c0 <USB_DevInit>
 8026e9a:	4605      	mov	r5, r0
 8026e9c:	b120      	cbz	r0, 8026ea8 <HAL_PCD_Init+0xf8>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8026e9e:	2302      	movs	r3, #2
 8026ea0:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8026ea4:	2501      	movs	r5, #1
 8026ea6:	e7a7      	b.n	8026df8 <HAL_PCD_Init+0x48>
  hpcd->USB_Address = 0U;
 8026ea8:	2300      	movs	r3, #0
 8026eaa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8026eae:	2301      	movs	r3, #1
 8026eb0:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8026eb4:	6820      	ldr	r0, [r4, #0]
 8026eb6:	f002 ff62 	bl	8029d7e <USB_DevDisconnect>
  return HAL_OK;
 8026eba:	e79d      	b.n	8026df8 <HAL_PCD_Init+0x48>
    return HAL_ERROR;
 8026ebc:	2501      	movs	r5, #1
 8026ebe:	e79b      	b.n	8026df8 <HAL_PCD_Init+0x48>

08026ec0 <HAL_PCD_Start>:
{
 8026ec0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8026ec2:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8026ec6:	2b01      	cmp	r3, #1
 8026ec8:	d011      	beq.n	8026eee <HAL_PCD_Start+0x2e>
 8026eca:	4604      	mov	r4, r0
 8026ecc:	2501      	movs	r5, #1
 8026ece:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8026ed2:	6800      	ldr	r0, [r0, #0]
 8026ed4:	f002 fbdf 	bl	8029696 <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8026ed8:	4629      	mov	r1, r5
 8026eda:	4620      	mov	r0, r4
 8026edc:	f004 fc07 	bl	802b6ee <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 8026ee0:	6820      	ldr	r0, [r4, #0]
 8026ee2:	f002 ff4a 	bl	8029d7a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8026ee6:	2000      	movs	r0, #0
 8026ee8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8026eec:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8026eee:	2002      	movs	r0, #2
 8026ef0:	e7fc      	b.n	8026eec <HAL_PCD_Start+0x2c>

08026ef2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8026ef2:	b570      	push	{r4, r5, r6, lr}
 8026ef4:	4605      	mov	r5, r0
 8026ef6:	460c      	mov	r4, r1
 8026ef8:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8026efa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8026efe:	f000 810e 	beq.w	802711e <HAL_PCD_EP_DB_Transmit+0x22c>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8026f02:	6802      	ldr	r2, [r0, #0]
 8026f04:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8026f08:	b29b      	uxth	r3, r3
 8026f0a:	7809      	ldrb	r1, [r1, #0]
 8026f0c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8026f10:	3302      	adds	r3, #2
 8026f12:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8026f16:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 8026f1a:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 8026f1e:	69a3      	ldr	r3, [r4, #24]
 8026f20:	4293      	cmp	r3, r2
 8026f22:	d94e      	bls.n	8026fc2 <HAL_PCD_EP_DB_Transmit+0xd0>
    {
      ep->xfer_len -= TxPctSize;
 8026f24:	1a9b      	subs	r3, r3, r2
 8026f26:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8026f28:	69a3      	ldr	r3, [r4, #24]
 8026f2a:	2b00      	cmp	r3, #0
 8026f2c:	d166      	bne.n	8026ffc <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8026f2e:	7863      	ldrb	r3, [r4, #1]
 8026f30:	2b00      	cmp	r3, #0
 8026f32:	d149      	bne.n	8026fc8 <HAL_PCD_EP_DB_Transmit+0xd6>
 8026f34:	682b      	ldr	r3, [r5, #0]
 8026f36:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8026f3a:	b292      	uxth	r2, r2
 8026f3c:	4413      	add	r3, r2
 8026f3e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8026f42:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8026f46:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8026f4a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8026f4e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8026f52:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8026f56:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8026f5a:	b292      	uxth	r2, r2
 8026f5c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8026f60:	682b      	ldr	r3, [r5, #0]
 8026f62:	7862      	ldrb	r2, [r4, #1]
 8026f64:	2a00      	cmp	r2, #0
 8026f66:	d13c      	bne.n	8026fe2 <HAL_PCD_EP_DB_Transmit+0xf0>
 8026f68:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8026f6c:	b292      	uxth	r2, r2
 8026f6e:	4413      	add	r3, r2
 8026f70:	7822      	ldrb	r2, [r4, #0]
 8026f72:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8026f76:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8026f7a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8026f7e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8026f82:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8026f86:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8026f8a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8026f8e:	b292      	uxth	r2, r2
 8026f90:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8026f94:	7821      	ldrb	r1, [r4, #0]
 8026f96:	4628      	mov	r0, r5
 8026f98:	f004 fac8 	bl	802b52c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8026f9c:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8026fa0:	d041      	beq.n	8027026 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8026fa2:	682a      	ldr	r2, [r5, #0]
 8026fa4:	7821      	ldrb	r1, [r4, #0]
 8026fa6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8026faa:	b29b      	uxth	r3, r3
 8026fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8026fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8026fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026fbc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8026fc0:	e031      	b.n	8027026 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8026fc2:	2300      	movs	r3, #0
 8026fc4:	61a3      	str	r3, [r4, #24]
 8026fc6:	e7af      	b.n	8026f28 <HAL_PCD_EP_DB_Transmit+0x36>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8026fc8:	2b01      	cmp	r3, #1
 8026fca:	d1c9      	bne.n	8026f60 <HAL_PCD_EP_DB_Transmit+0x6e>
 8026fcc:	682b      	ldr	r3, [r5, #0]
 8026fce:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8026fd2:	b292      	uxth	r2, r2
 8026fd4:	4413      	add	r3, r2
 8026fd6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8026fda:	2200      	movs	r2, #0
 8026fdc:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8026fe0:	e7be      	b.n	8026f60 <HAL_PCD_EP_DB_Transmit+0x6e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8026fe2:	2a01      	cmp	r2, #1
 8026fe4:	d1d6      	bne.n	8026f94 <HAL_PCD_EP_DB_Transmit+0xa2>
 8026fe6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8026fea:	b292      	uxth	r2, r2
 8026fec:	4413      	add	r3, r2
 8026fee:	7822      	ldrb	r2, [r4, #0]
 8026ff0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8026ff4:	2200      	movs	r2, #0
 8026ff6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8026ffa:	e7cb      	b.n	8026f94 <HAL_PCD_EP_DB_Transmit+0xa2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8026ffc:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8027000:	d00d      	beq.n	802701e <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8027002:	6828      	ldr	r0, [r5, #0]
 8027004:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8027008:	b29b      	uxth	r3, r3
 802700a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8027012:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8027016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802701a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 802701e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8027022:	2b01      	cmp	r3, #1
 8027024:	d012      	beq.n	802704c <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8027026:	682a      	ldr	r2, [r5, #0]
 8027028:	7821      	ldrb	r1, [r4, #0]
 802702a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 802702e:	b29b      	uxth	r3, r3
 8027030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8027034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8027038:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 802703c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8027040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027044:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8027048:	2000      	movs	r0, #0
 802704a:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 802704c:	6963      	ldr	r3, [r4, #20]
 802704e:	4413      	add	r3, r2
 8027050:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8027052:	69e3      	ldr	r3, [r4, #28]
 8027054:	4413      	add	r3, r2
 8027056:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8027058:	6a21      	ldr	r1, [r4, #32]
 802705a:	6923      	ldr	r3, [r4, #16]
 802705c:	4299      	cmp	r1, r3
 802705e:	d324      	bcc.n	80270aa <HAL_PCD_EP_DB_Transmit+0x1b8>
          ep->xfer_len_db -= len;
 8027060:	1ac9      	subs	r1, r1, r3
 8027062:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8027064:	7862      	ldrb	r2, [r4, #1]
 8027066:	2a00      	cmp	r2, #0
 8027068:	d144      	bne.n	80270f4 <HAL_PCD_EP_DB_Transmit+0x202>
 802706a:	682a      	ldr	r2, [r5, #0]
 802706c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8027070:	b289      	uxth	r1, r1
 8027072:	440a      	add	r2, r1
 8027074:	7821      	ldrb	r1, [r4, #0]
 8027076:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 802707a:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 802707e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8027082:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8027086:	2b3e      	cmp	r3, #62	; 0x3e
 8027088:	d91b      	bls.n	80270c2 <HAL_PCD_EP_DB_Transmit+0x1d0>
 802708a:	0958      	lsrs	r0, r3, #5
 802708c:	f013 0f1f 	tst.w	r3, #31
 8027090:	d100      	bne.n	8027094 <HAL_PCD_EP_DB_Transmit+0x1a2>
 8027092:	3801      	subs	r0, #1
 8027094:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8027098:	b289      	uxth	r1, r1
 802709a:	0280      	lsls	r0, r0, #10
 802709c:	b280      	uxth	r0, r0
 802709e:	4301      	orrs	r1, r0
 80270a0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80270a4:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80270a8:	e026      	b.n	80270f8 <HAL_PCD_EP_DB_Transmit+0x206>
        else if (ep->xfer_len_db == 0U)
 80270aa:	b921      	cbnz	r1, 80270b6 <HAL_PCD_EP_DB_Transmit+0x1c4>
          ep->xfer_fill_db = 0U;
 80270ac:	2300      	movs	r3, #0
 80270ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 80270b2:	4613      	mov	r3, r2
 80270b4:	e7d6      	b.n	8027064 <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 80270b6:	2300      	movs	r3, #0
 80270b8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 80270bc:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 80270be:	460b      	mov	r3, r1
 80270c0:	e7d0      	b.n	8027064 <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80270c2:	b94b      	cbnz	r3, 80270d8 <HAL_PCD_EP_DB_Transmit+0x1e6>
 80270c4:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 80270c8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80270cc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80270d0:	b289      	uxth	r1, r1
 80270d2:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80270d6:	e00f      	b.n	80270f8 <HAL_PCD_EP_DB_Transmit+0x206>
 80270d8:	0859      	lsrs	r1, r3, #1
 80270da:	f013 0f01 	tst.w	r3, #1
 80270de:	d000      	beq.n	80270e2 <HAL_PCD_EP_DB_Transmit+0x1f0>
 80270e0:	3101      	adds	r1, #1
 80270e2:	f8b2 0404 	ldrh.w	r0, [r2, #1028]	; 0x404
 80270e6:	b280      	uxth	r0, r0
 80270e8:	0289      	lsls	r1, r1, #10
 80270ea:	b289      	uxth	r1, r1
 80270ec:	4301      	orrs	r1, r0
 80270ee:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80270f2:	e001      	b.n	80270f8 <HAL_PCD_EP_DB_Transmit+0x206>
 80270f4:	2a01      	cmp	r2, #1
 80270f6:	d006      	beq.n	8027106 <HAL_PCD_EP_DB_Transmit+0x214>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80270f8:	b29b      	uxth	r3, r3
 80270fa:	8922      	ldrh	r2, [r4, #8]
 80270fc:	6961      	ldr	r1, [r4, #20]
 80270fe:	6828      	ldr	r0, [r5, #0]
 8027100:	f002 fe45 	bl	8029d8e <USB_WritePMA>
 8027104:	e78f      	b.n	8027026 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8027106:	682a      	ldr	r2, [r5, #0]
 8027108:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 802710c:	b289      	uxth	r1, r1
 802710e:	440a      	add	r2, r1
 8027110:	7821      	ldrb	r1, [r4, #0]
 8027112:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8027116:	b299      	uxth	r1, r3
 8027118:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 802711c:	e7ec      	b.n	80270f8 <HAL_PCD_EP_DB_Transmit+0x206>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 802711e:	6802      	ldr	r2, [r0, #0]
 8027120:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8027124:	b29b      	uxth	r3, r3
 8027126:	7809      	ldrb	r1, [r1, #0]
 8027128:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 802712c:	3306      	adds	r3, #6
 802712e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8027132:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 8027136:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 802713a:	69a3      	ldr	r3, [r4, #24]
 802713c:	4293      	cmp	r3, r2
 802713e:	d34f      	bcc.n	80271e0 <HAL_PCD_EP_DB_Transmit+0x2ee>
      ep->xfer_len -= TxPctSize;
 8027140:	1a9b      	subs	r3, r3, r2
 8027142:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8027144:	69a3      	ldr	r3, [r4, #24]
 8027146:	2b00      	cmp	r3, #0
 8027148:	d167      	bne.n	802721a <HAL_PCD_EP_DB_Transmit+0x328>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 802714a:	7863      	ldrb	r3, [r4, #1]
 802714c:	2b00      	cmp	r3, #0
 802714e:	d14a      	bne.n	80271e6 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8027150:	682b      	ldr	r3, [r5, #0]
 8027152:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8027156:	b292      	uxth	r2, r2
 8027158:	4413      	add	r3, r2
 802715a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 802715e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8027162:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8027166:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802716a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802716e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8027172:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8027176:	b292      	uxth	r2, r2
 8027178:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 802717c:	682b      	ldr	r3, [r5, #0]
 802717e:	7862      	ldrb	r2, [r4, #1]
 8027180:	2a00      	cmp	r2, #0
 8027182:	d13d      	bne.n	8027200 <HAL_PCD_EP_DB_Transmit+0x30e>
 8027184:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8027188:	b292      	uxth	r2, r2
 802718a:	4413      	add	r3, r2
 802718c:	7822      	ldrb	r2, [r4, #0]
 802718e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8027192:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8027196:	f3c2 0209 	ubfx	r2, r2, #0, #10
 802719a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802719e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80271a2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80271a6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80271aa:	b292      	uxth	r2, r2
 80271ac:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80271b0:	7821      	ldrb	r1, [r4, #0]
 80271b2:	4628      	mov	r0, r5
 80271b4:	f004 f9ba 	bl	802b52c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80271b8:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80271bc:	f47f af33 	bne.w	8027026 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80271c0:	682a      	ldr	r2, [r5, #0]
 80271c2:	7821      	ldrb	r1, [r4, #0]
 80271c4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80271c8:	b29b      	uxth	r3, r3
 80271ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80271ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80271d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80271d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80271da:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80271de:	e722      	b.n	8027026 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 80271e0:	2300      	movs	r3, #0
 80271e2:	61a3      	str	r3, [r4, #24]
 80271e4:	e7ae      	b.n	8027144 <HAL_PCD_EP_DB_Transmit+0x252>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80271e6:	2b01      	cmp	r3, #1
 80271e8:	d1c8      	bne.n	802717c <HAL_PCD_EP_DB_Transmit+0x28a>
 80271ea:	682b      	ldr	r3, [r5, #0]
 80271ec:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80271f0:	b292      	uxth	r2, r2
 80271f2:	4413      	add	r3, r2
 80271f4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80271f8:	2200      	movs	r2, #0
 80271fa:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80271fe:	e7bd      	b.n	802717c <HAL_PCD_EP_DB_Transmit+0x28a>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8027200:	2a01      	cmp	r2, #1
 8027202:	d1d5      	bne.n	80271b0 <HAL_PCD_EP_DB_Transmit+0x2be>
 8027204:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8027208:	b292      	uxth	r2, r2
 802720a:	4413      	add	r3, r2
 802720c:	7822      	ldrb	r2, [r4, #0]
 802720e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8027212:	2200      	movs	r2, #0
 8027214:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8027218:	e7ca      	b.n	80271b0 <HAL_PCD_EP_DB_Transmit+0x2be>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 802721a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 802721e:	d10d      	bne.n	802723c <HAL_PCD_EP_DB_Transmit+0x34a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8027220:	6828      	ldr	r0, [r5, #0]
 8027222:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8027226:	b29b      	uxth	r3, r3
 8027228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802722c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8027230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8027234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027238:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 802723c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8027240:	2b01      	cmp	r3, #1
 8027242:	f47f aef0 	bne.w	8027026 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 8027246:	6963      	ldr	r3, [r4, #20]
 8027248:	4413      	add	r3, r2
 802724a:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 802724c:	69e3      	ldr	r3, [r4, #28]
 802724e:	4413      	add	r3, r2
 8027250:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8027252:	6a21      	ldr	r1, [r4, #32]
 8027254:	6923      	ldr	r3, [r4, #16]
 8027256:	4299      	cmp	r1, r3
 8027258:	d324      	bcc.n	80272a4 <HAL_PCD_EP_DB_Transmit+0x3b2>
          ep->xfer_len_db -= len;
 802725a:	1ac9      	subs	r1, r1, r3
 802725c:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 802725e:	682a      	ldr	r2, [r5, #0]
 8027260:	7861      	ldrb	r1, [r4, #1]
 8027262:	2900      	cmp	r1, #0
 8027264:	d143      	bne.n	80272ee <HAL_PCD_EP_DB_Transmit+0x3fc>
 8027266:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 802726a:	b289      	uxth	r1, r1
 802726c:	440a      	add	r2, r1
 802726e:	7821      	ldrb	r1, [r4, #0]
 8027270:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8027274:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8027278:	f3c1 0109 	ubfx	r1, r1, #0, #10
 802727c:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8027280:	2b3e      	cmp	r3, #62	; 0x3e
 8027282:	d91b      	bls.n	80272bc <HAL_PCD_EP_DB_Transmit+0x3ca>
 8027284:	0958      	lsrs	r0, r3, #5
 8027286:	f013 0f1f 	tst.w	r3, #31
 802728a:	d100      	bne.n	802728e <HAL_PCD_EP_DB_Transmit+0x39c>
 802728c:	3801      	subs	r0, #1
 802728e:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8027292:	b289      	uxth	r1, r1
 8027294:	0280      	lsls	r0, r0, #10
 8027296:	b280      	uxth	r0, r0
 8027298:	4301      	orrs	r1, r0
 802729a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 802729e:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80272a2:	e026      	b.n	80272f2 <HAL_PCD_EP_DB_Transmit+0x400>
        else if (ep->xfer_len_db == 0U)
 80272a4:	b921      	cbnz	r1, 80272b0 <HAL_PCD_EP_DB_Transmit+0x3be>
          ep->xfer_fill_db = 0U;
 80272a6:	2300      	movs	r3, #0
 80272a8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 80272ac:	4613      	mov	r3, r2
 80272ae:	e7d6      	b.n	802725e <HAL_PCD_EP_DB_Transmit+0x36c>
          ep->xfer_len_db = 0U;
 80272b0:	2300      	movs	r3, #0
 80272b2:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 80272b4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 80272b8:	460b      	mov	r3, r1
 80272ba:	e7d0      	b.n	802725e <HAL_PCD_EP_DB_Transmit+0x36c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80272bc:	b94b      	cbnz	r3, 80272d2 <HAL_PCD_EP_DB_Transmit+0x3e0>
 80272be:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 80272c2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80272c6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80272ca:	b289      	uxth	r1, r1
 80272cc:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80272d0:	e00f      	b.n	80272f2 <HAL_PCD_EP_DB_Transmit+0x400>
 80272d2:	0859      	lsrs	r1, r3, #1
 80272d4:	f013 0f01 	tst.w	r3, #1
 80272d8:	d000      	beq.n	80272dc <HAL_PCD_EP_DB_Transmit+0x3ea>
 80272da:	3101      	adds	r1, #1
 80272dc:	f8b2 040c 	ldrh.w	r0, [r2, #1036]	; 0x40c
 80272e0:	b280      	uxth	r0, r0
 80272e2:	0289      	lsls	r1, r1, #10
 80272e4:	b289      	uxth	r1, r1
 80272e6:	4301      	orrs	r1, r0
 80272e8:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80272ec:	e001      	b.n	80272f2 <HAL_PCD_EP_DB_Transmit+0x400>
 80272ee:	2901      	cmp	r1, #1
 80272f0:	d006      	beq.n	8027300 <HAL_PCD_EP_DB_Transmit+0x40e>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80272f2:	b29b      	uxth	r3, r3
 80272f4:	8962      	ldrh	r2, [r4, #10]
 80272f6:	6961      	ldr	r1, [r4, #20]
 80272f8:	6828      	ldr	r0, [r5, #0]
 80272fa:	f002 fd48 	bl	8029d8e <USB_WritePMA>
 80272fe:	e692      	b.n	8027026 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8027300:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8027304:	b289      	uxth	r1, r1
 8027306:	440a      	add	r2, r1
 8027308:	7821      	ldrb	r1, [r4, #0]
 802730a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 802730e:	b299      	uxth	r1, r3
 8027310:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8027314:	e7ed      	b.n	80272f2 <HAL_PCD_EP_DB_Transmit+0x400>

08027316 <PCD_EP_ISR_Handler>:
{
 8027316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802731a:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 802731c:	6828      	ldr	r0, [r5, #0]
 802731e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8027322:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8027326:	f000 828e 	beq.w	8027846 <PCD_EP_ISR_Handler+0x530>
    wIstr = hpcd->Instance->ISTR;
 802732a:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 802732e:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8027330:	f014 040f 	ands.w	r4, r4, #15
 8027334:	f040 80e2 	bne.w	80274fc <PCD_EP_ISR_Handler+0x1e6>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8027338:	f013 0f10 	tst.w	r3, #16
 802733c:	d06b      	beq.n	8027416 <PCD_EP_ISR_Handler+0x100>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 802733e:	8803      	ldrh	r3, [r0, #0]
 8027340:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8027342:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8027346:	f040 809d 	bne.w	8027484 <PCD_EP_ISR_Handler+0x16e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 802734a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 802734e:	d0e5      	beq.n	802731c <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8027350:	8803      	ldrh	r3, [r0, #0]
 8027352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8027356:	051b      	lsls	r3, r3, #20
 8027358:	0d1b      	lsrs	r3, r3, #20
 802735a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802735e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8027360:	6828      	ldr	r0, [r5, #0]
 8027362:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8027366:	b29b      	uxth	r3, r3
 8027368:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 802736c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8027370:	3306      	adds	r3, #6
 8027372:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8027376:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 802737a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802737e:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8027382:	b18b      	cbz	r3, 80273a8 <PCD_EP_ISR_Handler+0x92>
 8027384:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8027388:	b171      	cbz	r1, 80273a8 <PCD_EP_ISR_Handler+0x92>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 802738a:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 802738e:	f003 f8f8 	bl	802a582 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8027392:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8027396:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 802739a:	4413      	add	r3, r2
 802739c:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80273a0:	2100      	movs	r1, #0
 80273a2:	4628      	mov	r0, r5
 80273a4:	f004 f8b6 	bl	802b514 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80273a8:	682a      	ldr	r2, [r5, #0]
 80273aa:	8813      	ldrh	r3, [r2, #0]
 80273ac:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80273ae:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80273b2:	d1b3      	bne.n	802731c <PCD_EP_ISR_Handler+0x6>
 80273b4:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 80273b8:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 80273bc:	d0ae      	beq.n	802731c <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80273be:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80273c2:	b29b      	uxth	r3, r3
 80273c4:	441a      	add	r2, r3
 80273c6:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80273ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80273ce:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 80273d2:	f8d5 3178 	ldr.w	r3, [r5, #376]	; 0x178
 80273d6:	2b3e      	cmp	r3, #62	; 0x3e
 80273d8:	d977      	bls.n	80274ca <PCD_EP_ISR_Handler+0x1b4>
 80273da:	0959      	lsrs	r1, r3, #5
 80273dc:	f013 0f1f 	tst.w	r3, #31
 80273e0:	d100      	bne.n	80273e4 <PCD_EP_ISR_Handler+0xce>
 80273e2:	3901      	subs	r1, #1
 80273e4:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80273e8:	b29b      	uxth	r3, r3
 80273ea:	0289      	lsls	r1, r1, #10
 80273ec:	b289      	uxth	r1, r1
 80273ee:	430b      	orrs	r3, r1
 80273f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80273f4:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80273f8:	682a      	ldr	r2, [r5, #0]
 80273fa:	8813      	ldrh	r3, [r2, #0]
 80273fc:	b29b      	uxth	r3, r3
 80273fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8027402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8027406:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 802740a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802740e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027412:	8013      	strh	r3, [r2, #0]
 8027414:	e782      	b.n	802731c <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8027416:	8803      	ldrh	r3, [r0, #0]
 8027418:	b29b      	uxth	r3, r3
 802741a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 802741e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8027422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8027426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 802742a:	b29b      	uxth	r3, r3
 802742c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 802742e:	682a      	ldr	r2, [r5, #0]
 8027430:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8027434:	b29b      	uxth	r3, r3
 8027436:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 802743a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 802743e:	3302      	adds	r3, #2
 8027440:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8027444:	f8b2 3400 	ldrh.w	r3, [r2, #1024]	; 0x400
 8027448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802744c:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 802744e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8027450:	441a      	add	r2, r3
 8027452:	63ea      	str	r2, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8027454:	2100      	movs	r1, #0
 8027456:	4628      	mov	r0, r5
 8027458:	f004 f868 	bl	802b52c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 802745c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8027460:	2b00      	cmp	r3, #0
 8027462:	f43f af5b 	beq.w	802731c <PCD_EP_ISR_Handler+0x6>
 8027466:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8027468:	2b00      	cmp	r3, #0
 802746a:	f47f af57 	bne.w	802731c <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 802746e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8027472:	682a      	ldr	r2, [r5, #0]
 8027474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027478:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 802747c:	2300      	movs	r3, #0
 802747e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8027482:	e74b      	b.n	802731c <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8027484:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8027488:	b29b      	uxth	r3, r3
 802748a:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 802748e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8027492:	3306      	adds	r3, #6
 8027494:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8027498:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 802749c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80274a0:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80274a4:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80274a8:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80274ac:	f003 f869 	bl	802a582 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80274b0:	682a      	ldr	r2, [r5, #0]
 80274b2:	8813      	ldrh	r3, [r2, #0]
 80274b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80274b8:	051b      	lsls	r3, r3, #20
 80274ba:	0d1b      	lsrs	r3, r3, #20
 80274bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80274c0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80274c2:	4628      	mov	r0, r5
 80274c4:	f004 f81e 	bl	802b504 <HAL_PCD_SetupStageCallback>
 80274c8:	e728      	b.n	802731c <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80274ca:	b94b      	cbnz	r3, 80274e0 <PCD_EP_ISR_Handler+0x1ca>
 80274cc:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80274d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80274d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80274d8:	b29b      	uxth	r3, r3
 80274da:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 80274de:	e78b      	b.n	80273f8 <PCD_EP_ISR_Handler+0xe2>
 80274e0:	0859      	lsrs	r1, r3, #1
 80274e2:	f013 0f01 	tst.w	r3, #1
 80274e6:	d000      	beq.n	80274ea <PCD_EP_ISR_Handler+0x1d4>
 80274e8:	3101      	adds	r1, #1
 80274ea:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80274ee:	b298      	uxth	r0, r3
 80274f0:	028b      	lsls	r3, r1, #10
 80274f2:	b29b      	uxth	r3, r3
 80274f4:	4303      	orrs	r3, r0
 80274f6:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 80274fa:	e77d      	b.n	80273f8 <PCD_EP_ISR_Handler+0xe2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80274fc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8027500:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8027502:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8027506:	d14c      	bne.n	80275a2 <PCD_EP_ISR_Handler+0x28c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8027508:	f016 0f80 	tst.w	r6, #128	; 0x80
 802750c:	f43f af06 	beq.w	802731c <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 8027510:	1c62      	adds	r2, r4, #1
 8027512:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8027516:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 802751a:	6828      	ldr	r0, [r5, #0]
 802751c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8027520:	b29b      	uxth	r3, r3
 8027522:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8027526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802752a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 802752e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8027532:	b29b      	uxth	r3, r3
 8027534:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8027538:	78cb      	ldrb	r3, [r1, #3]
 802753a:	2b01      	cmp	r3, #1
 802753c:	f000 80f2 	beq.w	8027724 <PCD_EP_ISR_Handler+0x40e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8027540:	f416 7f80 	tst.w	r6, #256	; 0x100
 8027544:	f040 817a 	bne.w	802783c <PCD_EP_ISR_Handler+0x526>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8027548:	6828      	ldr	r0, [r5, #0]
 802754a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 802754e:	b29b      	uxth	r3, r3
 8027550:	1c62      	adds	r2, r4, #1
 8027552:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8027556:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 802755a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802755e:	3302      	adds	r3, #2
 8027560:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8027564:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8027568:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 802756c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8027570:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8027574:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8027576:	429a      	cmp	r2, r3
 8027578:	f240 814c 	bls.w	8027814 <PCD_EP_ISR_Handler+0x4fe>
              ep->xfer_len -= TxPctSize;
 802757c:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8027580:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8027584:	1ad2      	subs	r2, r2, r3
 8027586:	643a      	str	r2, [r7, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8027588:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 802758c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8027590:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8027592:	2a00      	cmp	r2, #0
 8027594:	f040 8145 	bne.w	8027822 <PCD_EP_ISR_Handler+0x50c>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8027598:	4631      	mov	r1, r6
 802759a:	4628      	mov	r0, r5
 802759c:	f003 ffc6 	bl	802b52c <HAL_PCD_DataInStageCallback>
 80275a0:	e6bc      	b.n	802731c <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80275a2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80275a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80275aa:	051b      	lsls	r3, r3, #20
 80275ac:	0d1b      	lsrs	r3, r3, #20
 80275ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80275b2:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 80275b6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80275ba:	00c9      	lsls	r1, r1, #3
 80275bc:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80275c0:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 80275c4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80275c8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80275cc:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 80275d0:	2b00      	cmp	r3, #0
 80275d2:	d142      	bne.n	802765a <PCD_EP_ISR_Handler+0x344>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80275d4:	6828      	ldr	r0, [r5, #0]
 80275d6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80275da:	b29b      	uxth	r3, r3
 80275dc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80275e0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80275e4:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80275e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80275ec:	3306      	adds	r3, #6
 80275ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80275f2:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 80275f6:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 80275fa:	bb17      	cbnz	r7, 8027642 <PCD_EP_ISR_Handler+0x32c>
        ep->xfer_count += count;
 80275fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8027600:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8027604:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8027608:	443a      	add	r2, r7
 802760a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 802760e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8027612:	443a      	add	r2, r7
 8027614:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8027618:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 802761c:	b13b      	cbz	r3, 802762e <PCD_EP_ISR_Handler+0x318>
 802761e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8027622:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8027626:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 802762a:	429f      	cmp	r7, r3
 802762c:	d275      	bcs.n	802771a <PCD_EP_ISR_Handler+0x404>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 802762e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8027632:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8027636:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 802763a:	4628      	mov	r0, r5
 802763c:	f003 ff6a 	bl	802b514 <HAL_PCD_DataOutStageCallback>
 8027640:	e762      	b.n	8027508 <PCD_EP_ISR_Handler+0x1f2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8027642:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8027646:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 802764a:	463b      	mov	r3, r7
 802764c:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8027650:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8027654:	f002 ff95 	bl	802a582 <USB_ReadPMA>
 8027658:	e7d0      	b.n	80275fc <PCD_EP_ISR_Handler+0x2e6>
          if (ep->type == EP_TYPE_BULK)
 802765a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 802765e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8027662:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8027666:	2b02      	cmp	r3, #2
 8027668:	d035      	beq.n	80276d6 <PCD_EP_ISR_Handler+0x3c0>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 802766a:	6829      	ldr	r1, [r5, #0]
 802766c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8027670:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8027674:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8027678:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 802767c:	b29b      	uxth	r3, r3
 802767e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8027682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8027686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802768a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 802768e:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8027692:	6828      	ldr	r0, [r5, #0]
 8027694:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8027698:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 802769c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80276a0:	d020      	beq.n	80276e4 <PCD_EP_ISR_Handler+0x3ce>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80276a2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80276a6:	b29b      	uxth	r3, r3
 80276a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80276ac:	3302      	adds	r3, #2
 80276ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80276b2:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 80276b6:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 80276ba:	2f00      	cmp	r7, #0
 80276bc:	d09e      	beq.n	80275fc <PCD_EP_ISR_Handler+0x2e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80276be:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80276c2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80276c6:	463b      	mov	r3, r7
 80276c8:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80276cc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80276d0:	f002 ff57 	bl	802a582 <USB_ReadPMA>
 80276d4:	e792      	b.n	80275fc <PCD_EP_ISR_Handler+0x2e6>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80276d6:	4632      	mov	r2, r6
 80276d8:	4641      	mov	r1, r8
 80276da:	4628      	mov	r0, r5
 80276dc:	f7ff fada 	bl	8026c94 <HAL_PCD_EP_DB_Receive>
 80276e0:	4607      	mov	r7, r0
 80276e2:	e78b      	b.n	80275fc <PCD_EP_ISR_Handler+0x2e6>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80276e4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80276e8:	b29b      	uxth	r3, r3
 80276ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80276ee:	3306      	adds	r3, #6
 80276f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80276f4:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 80276f8:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 80276fc:	2f00      	cmp	r7, #0
 80276fe:	f43f af7d 	beq.w	80275fc <PCD_EP_ISR_Handler+0x2e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8027702:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8027706:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 802770a:	463b      	mov	r3, r7
 802770c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8027710:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8027714:	f002 ff35 	bl	802a582 <USB_ReadPMA>
 8027718:	e770      	b.n	80275fc <PCD_EP_ISR_Handler+0x2e6>
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 802771a:	4641      	mov	r1, r8
 802771c:	6828      	ldr	r0, [r5, #0]
 802771e:	f002 fb49 	bl	8029db4 <USB_EPStartXfer>
 8027722:	e6f1      	b.n	8027508 <PCD_EP_ISR_Handler+0x1f2>
          ep->xfer_len = 0U;
 8027724:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8027728:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 802772c:	2200      	movs	r2, #0
 802772e:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8027730:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8027734:	b1fb      	cbz	r3, 8027776 <PCD_EP_ISR_Handler+0x460>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8027736:	f016 0f40 	tst.w	r6, #64	; 0x40
 802773a:	d037      	beq.n	80277ac <PCD_EP_ISR_Handler+0x496>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 802773c:	784b      	ldrb	r3, [r1, #1]
 802773e:	bb1b      	cbnz	r3, 8027788 <PCD_EP_ISR_Handler+0x472>
 8027740:	682b      	ldr	r3, [r5, #0]
 8027742:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8027746:	b292      	uxth	r2, r2
 8027748:	4413      	add	r3, r2
 802774a:	1c62      	adds	r2, r4, #1
 802774c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8027750:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8027754:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8027758:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802775c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8027760:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8027764:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8027768:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 802776c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8027770:	b292      	uxth	r2, r2
 8027772:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8027776:	3401      	adds	r4, #1
 8027778:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 802777c:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8027780:	4628      	mov	r0, r5
 8027782:	f003 fed3 	bl	802b52c <HAL_PCD_DataInStageCallback>
 8027786:	e5c9      	b.n	802731c <PCD_EP_ISR_Handler+0x6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8027788:	2b01      	cmp	r3, #1
 802778a:	d1f4      	bne.n	8027776 <PCD_EP_ISR_Handler+0x460>
 802778c:	682b      	ldr	r3, [r5, #0]
 802778e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8027792:	b292      	uxth	r2, r2
 8027794:	4413      	add	r3, r2
 8027796:	1c62      	adds	r2, r4, #1
 8027798:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802779c:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 80277a0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80277a4:	2200      	movs	r2, #0
 80277a6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80277aa:	e7e4      	b.n	8027776 <PCD_EP_ISR_Handler+0x460>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80277ac:	682a      	ldr	r2, [r5, #0]
 80277ae:	1c63      	adds	r3, r4, #1
 80277b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80277b4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80277b8:	785b      	ldrb	r3, [r3, #1]
 80277ba:	b9d3      	cbnz	r3, 80277f2 <PCD_EP_ISR_Handler+0x4dc>
 80277bc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80277c0:	b29b      	uxth	r3, r3
 80277c2:	4413      	add	r3, r2
 80277c4:	1c62      	adds	r2, r4, #1
 80277c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80277ca:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 80277ce:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80277d2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80277d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80277da:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80277de:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80277e2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80277e6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80277ea:	b292      	uxth	r2, r2
 80277ec:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80277f0:	e7c1      	b.n	8027776 <PCD_EP_ISR_Handler+0x460>
 80277f2:	2b01      	cmp	r3, #1
 80277f4:	d1bf      	bne.n	8027776 <PCD_EP_ISR_Handler+0x460>
 80277f6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80277fa:	b29b      	uxth	r3, r3
 80277fc:	4413      	add	r3, r2
 80277fe:	1c62      	adds	r2, r4, #1
 8027800:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8027804:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8027808:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 802780c:	2200      	movs	r2, #0
 802780e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8027812:	e7b0      	b.n	8027776 <PCD_EP_ISR_Handler+0x460>
              ep->xfer_len = 0U;
 8027814:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8027818:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 802781c:	2700      	movs	r7, #0
 802781e:	6417      	str	r7, [r2, #64]	; 0x40
 8027820:	e6b2      	b.n	8027588 <PCD_EP_ISR_Handler+0x272>
              ep->xfer_buff += TxPctSize;
 8027822:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8027826:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 802782a:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 802782c:	441e      	add	r6, r3
 802782e:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8027830:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8027832:	4423      	add	r3, r4
 8027834:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8027836:	f002 fabd 	bl	8029db4 <USB_EPStartXfer>
 802783a:	e56f      	b.n	802731c <PCD_EP_ISR_Handler+0x6>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 802783c:	4632      	mov	r2, r6
 802783e:	4628      	mov	r0, r5
 8027840:	f7ff fb57 	bl	8026ef2 <HAL_PCD_EP_DB_Transmit>
 8027844:	e56a      	b.n	802731c <PCD_EP_ISR_Handler+0x6>
}
 8027846:	2000      	movs	r0, #0
 8027848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802784c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 802784c:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8027850:	2b01      	cmp	r3, #1
 8027852:	d00d      	beq.n	8027870 <HAL_PCD_SetAddress+0x24>
{
 8027854:	b510      	push	{r4, lr}
 8027856:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8027858:	2301      	movs	r3, #1
 802785a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 802785e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8027862:	6800      	ldr	r0, [r0, #0]
 8027864:	f002 fa83 	bl	8029d6e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8027868:	2000      	movs	r0, #0
 802786a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 802786e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8027870:	2002      	movs	r0, #2
}
 8027872:	4770      	bx	lr

08027874 <HAL_PCD_IRQHandler>:
{
 8027874:	b510      	push	{r4, lr}
 8027876:	b084      	sub	sp, #16
 8027878:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 802787a:	6800      	ldr	r0, [r0, #0]
 802787c:	f002 fa81 	bl	8029d82 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8027880:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8027884:	d120      	bne.n	80278c8 <HAL_PCD_IRQHandler+0x54>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8027886:	f410 6f80 	tst.w	r0, #1024	; 0x400
 802788a:	d121      	bne.n	80278d0 <HAL_PCD_IRQHandler+0x5c>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 802788c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8027890:	d12f      	bne.n	80278f2 <HAL_PCD_IRQHandler+0x7e>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8027892:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8027896:	d137      	bne.n	8027908 <HAL_PCD_IRQHandler+0x94>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8027898:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 802789c:	d13e      	bne.n	802791c <HAL_PCD_IRQHandler+0xa8>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 802789e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80278a2:	f040 8087 	bne.w	80279b4 <HAL_PCD_IRQHandler+0x140>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80278a6:	f410 7f00 	tst.w	r0, #512	; 0x200
 80278aa:	f040 80ae 	bne.w	8027a0a <HAL_PCD_IRQHandler+0x196>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80278ae:	f410 7f80 	tst.w	r0, #256	; 0x100
 80278b2:	d027      	beq.n	8027904 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80278b4:	6822      	ldr	r2, [r4, #0]
 80278b6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80278ba:	b29b      	uxth	r3, r3
 80278bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80278c0:	b29b      	uxth	r3, r3
 80278c2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80278c6:	e01d      	b.n	8027904 <HAL_PCD_IRQHandler+0x90>
    (void)PCD_EP_ISR_Handler(hpcd);
 80278c8:	4620      	mov	r0, r4
 80278ca:	f7ff fd24 	bl	8027316 <PCD_EP_ISR_Handler>
    return;
 80278ce:	e019      	b.n	8027904 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80278d0:	6822      	ldr	r2, [r4, #0]
 80278d2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80278d6:	b29b      	uxth	r3, r3
 80278d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80278dc:	b29b      	uxth	r3, r3
 80278de:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80278e2:	4620      	mov	r0, r4
 80278e4:	f003 fe33 	bl	802b54e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80278e8:	2100      	movs	r1, #0
 80278ea:	4620      	mov	r0, r4
 80278ec:	f7ff ffae 	bl	802784c <HAL_PCD_SetAddress>
    return;
 80278f0:	e008      	b.n	8027904 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80278f2:	6822      	ldr	r2, [r4, #0]
 80278f4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80278f8:	b29b      	uxth	r3, r3
 80278fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80278fe:	b29b      	uxth	r3, r3
 8027900:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8027904:	b004      	add	sp, #16
 8027906:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8027908:	6822      	ldr	r2, [r4, #0]
 802790a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 802790e:	b29b      	uxth	r3, r3
 8027910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8027914:	b29b      	uxth	r3, r3
 8027916:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 802791a:	e7f3      	b.n	8027904 <HAL_PCD_IRQHandler+0x90>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 802791c:	6822      	ldr	r2, [r4, #0]
 802791e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8027922:	b29b      	uxth	r3, r3
 8027924:	f023 0304 	bic.w	r3, r3, #4
 8027928:	b29b      	uxth	r3, r3
 802792a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 802792e:	6822      	ldr	r2, [r4, #0]
 8027930:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8027934:	b29b      	uxth	r3, r3
 8027936:	f023 0308 	bic.w	r3, r3, #8
 802793a:	b29b      	uxth	r3, r3
 802793c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8027940:	4620      	mov	r0, r4
 8027942:	f003 fe27 	bl	802b594 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8027946:	6822      	ldr	r2, [r4, #0]
 8027948:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 802794c:	b29b      	uxth	r3, r3
 802794e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027952:	b29b      	uxth	r3, r3
 8027954:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8027958:	e7d4      	b.n	8027904 <HAL_PCD_IRQHandler+0x90>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 802795a:	6822      	ldr	r2, [r4, #0]
 802795c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8027960:	aa04      	add	r2, sp, #16
 8027962:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8027966:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 802796a:	3301      	adds	r3, #1
 802796c:	b2db      	uxtb	r3, r3
 802796e:	2b07      	cmp	r3, #7
 8027970:	d9f3      	bls.n	802795a <HAL_PCD_IRQHandler+0xe6>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8027972:	6822      	ldr	r2, [r4, #0]
 8027974:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8027978:	b29b      	uxth	r3, r3
 802797a:	f043 0301 	orr.w	r3, r3, #1
 802797e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8027982:	6822      	ldr	r2, [r4, #0]
 8027984:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8027988:	b29b      	uxth	r3, r3
 802798a:	f023 0301 	bic.w	r3, r3, #1
 802798e:	b29b      	uxth	r3, r3
 8027990:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8027994:	6823      	ldr	r3, [r4, #0]
 8027996:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 802799a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 802799e:	d0f9      	beq.n	8027994 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80279a0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80279a4:	b292      	uxth	r2, r2
 80279a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80279aa:	b292      	uxth	r2, r2
 80279ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    for (i = 0U; i < 8U; i++)
 80279b0:	2300      	movs	r3, #0
 80279b2:	e00b      	b.n	80279cc <HAL_PCD_IRQHandler+0x158>
    for (i = 0U; i < 8U; i++)
 80279b4:	2300      	movs	r3, #0
 80279b6:	e7da      	b.n	802796e <HAL_PCD_IRQHandler+0xfa>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80279b8:	6822      	ldr	r2, [r4, #0]
 80279ba:	a904      	add	r1, sp, #16
 80279bc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80279c0:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 80279c4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 80279c8:	3301      	adds	r3, #1
 80279ca:	b2db      	uxtb	r3, r3
 80279cc:	2b07      	cmp	r3, #7
 80279ce:	d9f3      	bls.n	80279b8 <HAL_PCD_IRQHandler+0x144>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80279d0:	6822      	ldr	r2, [r4, #0]
 80279d2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80279d6:	b29b      	uxth	r3, r3
 80279d8:	f043 0308 	orr.w	r3, r3, #8
 80279dc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80279e0:	6822      	ldr	r2, [r4, #0]
 80279e2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80279e6:	b29b      	uxth	r3, r3
 80279e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80279ec:	b29b      	uxth	r3, r3
 80279ee:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80279f2:	6822      	ldr	r2, [r4, #0]
 80279f4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80279f8:	b29b      	uxth	r3, r3
 80279fa:	f043 0304 	orr.w	r3, r3, #4
 80279fe:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8027a02:	4620      	mov	r0, r4
 8027a04:	f003 fdb6 	bl	802b574 <HAL_PCD_SuspendCallback>
    return;
 8027a08:	e77c      	b.n	8027904 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8027a0a:	6822      	ldr	r2, [r4, #0]
 8027a0c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8027a10:	b29b      	uxth	r3, r3
 8027a12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8027a16:	b29b      	uxth	r3, r3
 8027a18:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8027a1c:	4620      	mov	r0, r4
 8027a1e:	f003 fd90 	bl	802b542 <HAL_PCD_SOFCallback>
    return;
 8027a22:	e76f      	b.n	8027904 <HAL_PCD_IRQHandler+0x90>

08027a24 <HAL_PCD_EP_Open>:
{
 8027a24:	b510      	push	{r4, lr}
 8027a26:	4604      	mov	r4, r0
 8027a28:	4608      	mov	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8027a2a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8027a2e:	d125      	bne.n	8027a7c <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8027a30:	f001 0c07 	and.w	ip, r1, #7
 8027a34:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8027a38:	00c9      	lsls	r1, r1, #3
 8027a3a:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 8027a3e:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 8027a42:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8027a46:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8027a4a:	f04f 0e00 	mov.w	lr, #0
 8027a4e:	f88c e169 	strb.w	lr, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8027a52:	f000 0007 	and.w	r0, r0, #7
 8027a56:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8027a58:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8027a5a:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8027a5c:	2b02      	cmp	r3, #2
 8027a5e:	d01a      	beq.n	8027a96 <HAL_PCD_EP_Open+0x72>
  __HAL_LOCK(hpcd);
 8027a60:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8027a64:	2b01      	cmp	r3, #1
 8027a66:	d019      	beq.n	8027a9c <HAL_PCD_EP_Open+0x78>
 8027a68:	2301      	movs	r3, #1
 8027a6a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8027a6e:	6820      	ldr	r0, [r4, #0]
 8027a70:	f001 fe37 	bl	80296e2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8027a74:	2000      	movs	r0, #0
 8027a76:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8027a7a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8027a7c:	f001 0c07 	and.w	ip, r1, #7
 8027a80:	f10c 0c01 	add.w	ip, ip, #1
 8027a84:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8027a88:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8027a8c:	f04f 0e01 	mov.w	lr, #1
 8027a90:	f881 e001 	strb.w	lr, [r1, #1]
 8027a94:	e7dd      	b.n	8027a52 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 8027a96:	2300      	movs	r3, #0
 8027a98:	710b      	strb	r3, [r1, #4]
 8027a9a:	e7e1      	b.n	8027a60 <HAL_PCD_EP_Open+0x3c>
  __HAL_LOCK(hpcd);
 8027a9c:	2002      	movs	r0, #2
 8027a9e:	e7ec      	b.n	8027a7a <HAL_PCD_EP_Open+0x56>

08027aa0 <HAL_PCD_EP_Close>:
{
 8027aa0:	b510      	push	{r4, lr}
 8027aa2:	4604      	mov	r4, r0
 8027aa4:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8027aa6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8027aaa:	d11f      	bne.n	8027aec <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8027aac:	f001 0207 	and.w	r2, r1, #7
 8027ab0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8027ab4:	00c9      	lsls	r1, r1, #3
 8027ab6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8027aba:	4401      	add	r1, r0
    ep->is_in = 0U;
 8027abc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8027ac0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8027ac4:	2000      	movs	r0, #0
 8027ac6:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8027aca:	f003 0307 	and.w	r3, r3, #7
 8027ace:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8027ad0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8027ad4:	2b01      	cmp	r3, #1
 8027ad6:	d013      	beq.n	8027b00 <HAL_PCD_EP_Close+0x60>
 8027ad8:	2301      	movs	r3, #1
 8027ada:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8027ade:	6820      	ldr	r0, [r4, #0]
 8027ae0:	f001 ffe4 	bl	8029aac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8027ae4:	2000      	movs	r0, #0
 8027ae6:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8027aea:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8027aec:	f001 0207 	and.w	r2, r1, #7
 8027af0:	3201      	adds	r2, #1
 8027af2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8027af6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8027afa:	2001      	movs	r0, #1
 8027afc:	7048      	strb	r0, [r1, #1]
 8027afe:	e7e4      	b.n	8027aca <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8027b00:	2002      	movs	r0, #2
 8027b02:	e7f2      	b.n	8027aea <HAL_PCD_EP_Close+0x4a>

08027b04 <HAL_PCD_EP_Receive>:
{
 8027b04:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8027b06:	f001 0c07 	and.w	ip, r1, #7
 8027b0a:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8027b0e:	00c9      	lsls	r1, r1, #3
 8027b10:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  ep->xfer_buff = pBuf;
 8027b14:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 8027b18:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8027b1c:	f8ce 217c 	str.w	r2, [lr, #380]	; 0x17c
  ep->xfer_len = len;
 8027b20:	f8ce 3180 	str.w	r3, [lr, #384]	; 0x180
  ep->xfer_count = 0U;
 8027b24:	2400      	movs	r4, #0
 8027b26:	f8ce 4184 	str.w	r4, [lr, #388]	; 0x184
  ep->is_in = 0U;
 8027b2a:	f88e 4169 	strb.w	r4, [lr, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8027b2e:	f88e c168 	strb.w	ip, [lr, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8027b32:	4401      	add	r1, r0
 8027b34:	6800      	ldr	r0, [r0, #0]
 8027b36:	f002 f93d 	bl	8029db4 <USB_EPStartXfer>
}
 8027b3a:	4620      	mov	r0, r4
 8027b3c:	bd10      	pop	{r4, pc}

08027b3e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8027b3e:	f001 0107 	and.w	r1, r1, #7
 8027b42:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8027b46:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 8027b4a:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8027b4e:	4770      	bx	lr

08027b50 <HAL_PCD_EP_Transmit>:
{
 8027b50:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8027b52:	f001 0407 	and.w	r4, r1, #7
 8027b56:	f104 0c01 	add.w	ip, r4, #1
 8027b5a:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
  ep->xfer_buff = pBuf;
 8027b5e:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 8027b62:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8027b66:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 8027b6a:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8027b6e:	2201      	movs	r2, #1
 8027b70:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 8027b74:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 8027b78:	2500      	movs	r5, #0
 8027b7a:	f8ce 5044 	str.w	r5, [lr, #68]	; 0x44
  ep->is_in = 1U;
 8027b7e:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 8027b82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8027b84:	f800 4031 	strb.w	r4, [r0, r1, lsl #3]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8027b88:	4619      	mov	r1, r3
 8027b8a:	6800      	ldr	r0, [r0, #0]
 8027b8c:	f002 f912 	bl	8029db4 <USB_EPStartXfer>
}
 8027b90:	4628      	mov	r0, r5
 8027b92:	bd38      	pop	{r3, r4, r5, pc}

08027b94 <HAL_PCD_EP_SetStall>:
{
 8027b94:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8027b96:	f001 0507 	and.w	r5, r1, #7
 8027b9a:	6842      	ldr	r2, [r0, #4]
 8027b9c:	4295      	cmp	r5, r2
 8027b9e:	d831      	bhi.n	8027c04 <HAL_PCD_EP_SetStall+0x70>
 8027ba0:	4604      	mov	r4, r0
 8027ba2:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8027ba4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8027ba8:	d11e      	bne.n	8027be8 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8027baa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8027bae:	00c9      	lsls	r1, r1, #3
 8027bb0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8027bb4:	4401      	add	r1, r0
    ep->is_in = 0U;
 8027bb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8027bba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8027bbe:	2200      	movs	r2, #0
 8027bc0:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8027bc4:	2301      	movs	r3, #1
 8027bc6:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8027bc8:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8027bca:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8027bce:	2b01      	cmp	r3, #1
 8027bd0:	d01a      	beq.n	8027c08 <HAL_PCD_EP_SetStall+0x74>
 8027bd2:	2301      	movs	r3, #1
 8027bd4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8027bd8:	6820      	ldr	r0, [r4, #0]
 8027bda:	f002 f852 	bl	8029c82 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8027bde:	b15d      	cbz	r5, 8027bf8 <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8027be0:	2000      	movs	r0, #0
 8027be2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8027be6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8027be8:	1c6b      	adds	r3, r5, #1
 8027bea:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8027bee:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8027bf2:	2201      	movs	r2, #1
 8027bf4:	704a      	strb	r2, [r1, #1]
 8027bf6:	e7e5      	b.n	8027bc4 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8027bf8:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8027bfc:	6820      	ldr	r0, [r4, #0]
 8027bfe:	f002 f8c4 	bl	8029d8a <USB_EP0_OutStart>
 8027c02:	e7ed      	b.n	8027be0 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8027c04:	2001      	movs	r0, #1
 8027c06:	e7ee      	b.n	8027be6 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8027c08:	2002      	movs	r0, #2
 8027c0a:	e7ec      	b.n	8027be6 <HAL_PCD_EP_SetStall+0x52>

08027c0c <HAL_PCD_EP_ClrStall>:
{
 8027c0c:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8027c0e:	f001 010f 	and.w	r1, r1, #15
 8027c12:	6842      	ldr	r2, [r0, #4]
 8027c14:	4291      	cmp	r1, r2
 8027c16:	d830      	bhi.n	8027c7a <HAL_PCD_EP_ClrStall+0x6e>
{
 8027c18:	b510      	push	{r4, lr}
 8027c1a:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8027c1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8027c20:	d121      	bne.n	8027c66 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8027c22:	f003 0207 	and.w	r2, r3, #7
 8027c26:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8027c2a:	00c9      	lsls	r1, r1, #3
 8027c2c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8027c30:	4401      	add	r1, r0
    ep->is_in = 0U;
 8027c32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8027c36:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8027c3a:	2000      	movs	r0, #0
 8027c3c:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8027c40:	2200      	movs	r2, #0
 8027c42:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8027c44:	f003 0307 	and.w	r3, r3, #7
 8027c48:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8027c4a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8027c4e:	2b01      	cmp	r3, #1
 8027c50:	d015      	beq.n	8027c7e <HAL_PCD_EP_ClrStall+0x72>
 8027c52:	2301      	movs	r3, #1
 8027c54:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8027c58:	6820      	ldr	r0, [r4, #0]
 8027c5a:	f002 f837 	bl	8029ccc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8027c5e:	2000      	movs	r0, #0
 8027c60:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8027c64:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8027c66:	f003 0207 	and.w	r2, r3, #7
 8027c6a:	3201      	adds	r2, #1
 8027c6c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8027c70:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8027c74:	2001      	movs	r0, #1
 8027c76:	7048      	strb	r0, [r1, #1]
 8027c78:	e7e2      	b.n	8027c40 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8027c7a:	2001      	movs	r0, #1
}
 8027c7c:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8027c7e:	2002      	movs	r0, #2
 8027c80:	e7f0      	b.n	8027c64 <HAL_PCD_EP_ClrStall+0x58>

08027c82 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8027c82:	f011 0f80 	tst.w	r1, #128	; 0x80
 8027c86:	d00b      	beq.n	8027ca0 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8027c88:	f001 0107 	and.w	r1, r1, #7
 8027c8c:	3101      	adds	r1, #1
 8027c8e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8027c92:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8027c96:	b952      	cbnz	r2, 8027cae <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8027c98:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8027c9a:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8027c9c:	2000      	movs	r0, #0
 8027c9e:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8027ca0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8027ca4:	00c9      	lsls	r1, r1, #3
 8027ca6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8027caa:	4408      	add	r0, r1
 8027cac:	e7f3      	b.n	8027c96 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8027cae:	2201      	movs	r2, #1
 8027cb0:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8027cb2:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8027cb4:	0c1b      	lsrs	r3, r3, #16
 8027cb6:	8143      	strh	r3, [r0, #10]
 8027cb8:	e7f0      	b.n	8027c9c <HAL_PCDEx_PMAConfig+0x1a>
	...

08027cbc <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8027cbc:	4b01      	ldr	r3, [pc, #4]	; (8027cc4 <HAL_PWR_EnableBkUpAccess+0x8>)
 8027cbe:	2201      	movs	r2, #1
 8027cc0:	621a      	str	r2, [r3, #32]
}
 8027cc2:	4770      	bx	lr
 8027cc4:	420e0000 	.word	0x420e0000

08027cc8 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8027cc8:	4770      	bx	lr
	...

08027ccc <HAL_PWR_PVD_IRQHandler>:
{
 8027ccc:	b508      	push	{r3, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8027cce:	4b06      	ldr	r3, [pc, #24]	; (8027ce8 <HAL_PWR_PVD_IRQHandler+0x1c>)
 8027cd0:	695b      	ldr	r3, [r3, #20]
 8027cd2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8027cd6:	d100      	bne.n	8027cda <HAL_PWR_PVD_IRQHandler+0xe>
}
 8027cd8:	bd08      	pop	{r3, pc}
    HAL_PWR_PVDCallback();
 8027cda:	f7ff fff5 	bl	8027cc8 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8027cde:	4b02      	ldr	r3, [pc, #8]	; (8027ce8 <HAL_PWR_PVD_IRQHandler+0x1c>)
 8027ce0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8027ce4:	615a      	str	r2, [r3, #20]
}
 8027ce6:	e7f7      	b.n	8027cd8 <HAL_PWR_PVD_IRQHandler+0xc>
 8027ce8:	40010400 	.word	0x40010400

08027cec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8027cec:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8027cee:	4b08      	ldr	r3, [pc, #32]	; (8027d10 <RCC_Delay+0x24>)
 8027cf0:	681b      	ldr	r3, [r3, #0]
 8027cf2:	4a08      	ldr	r2, [pc, #32]	; (8027d14 <RCC_Delay+0x28>)
 8027cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8027cf8:	0a5b      	lsrs	r3, r3, #9
 8027cfa:	fb00 f303 	mul.w	r3, r0, r3
 8027cfe:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8027d00:	bf00      	nop
  }
  while (Delay --);
 8027d02:	9b01      	ldr	r3, [sp, #4]
 8027d04:	1e5a      	subs	r2, r3, #1
 8027d06:	9201      	str	r2, [sp, #4]
 8027d08:	2b00      	cmp	r3, #0
 8027d0a:	d1f9      	bne.n	8027d00 <RCC_Delay+0x14>
}
 8027d0c:	b002      	add	sp, #8
 8027d0e:	4770      	bx	lr
 8027d10:	20000090 	.word	0x20000090
 8027d14:	10624dd3 	.word	0x10624dd3

08027d18 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8027d18:	2800      	cmp	r0, #0
 8027d1a:	f000 81f1 	beq.w	8028100 <HAL_RCC_OscConfig+0x3e8>
{
 8027d1e:	b570      	push	{r4, r5, r6, lr}
 8027d20:	b082      	sub	sp, #8
 8027d22:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8027d24:	6803      	ldr	r3, [r0, #0]
 8027d26:	f013 0f01 	tst.w	r3, #1
 8027d2a:	d02c      	beq.n	8027d86 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8027d2c:	4b99      	ldr	r3, [pc, #612]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027d2e:	685b      	ldr	r3, [r3, #4]
 8027d30:	f003 030c 	and.w	r3, r3, #12
 8027d34:	2b04      	cmp	r3, #4
 8027d36:	d01d      	beq.n	8027d74 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8027d38:	4b96      	ldr	r3, [pc, #600]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027d3a:	685b      	ldr	r3, [r3, #4]
 8027d3c:	f003 030c 	and.w	r3, r3, #12
 8027d40:	2b08      	cmp	r3, #8
 8027d42:	d012      	beq.n	8027d6a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8027d44:	6863      	ldr	r3, [r4, #4]
 8027d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027d4a:	d041      	beq.n	8027dd0 <HAL_RCC_OscConfig+0xb8>
 8027d4c:	2b00      	cmp	r3, #0
 8027d4e:	d155      	bne.n	8027dfc <HAL_RCC_OscConfig+0xe4>
 8027d50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027d54:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8027d58:	681a      	ldr	r2, [r3, #0]
 8027d5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8027d5e:	601a      	str	r2, [r3, #0]
 8027d60:	681a      	ldr	r2, [r3, #0]
 8027d62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8027d66:	601a      	str	r2, [r3, #0]
 8027d68:	e037      	b.n	8027dda <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8027d6a:	4b8a      	ldr	r3, [pc, #552]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027d6c:	685b      	ldr	r3, [r3, #4]
 8027d6e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8027d72:	d0e7      	beq.n	8027d44 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027d74:	4b87      	ldr	r3, [pc, #540]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027d76:	681b      	ldr	r3, [r3, #0]
 8027d78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8027d7c:	d003      	beq.n	8027d86 <HAL_RCC_OscConfig+0x6e>
 8027d7e:	6863      	ldr	r3, [r4, #4]
 8027d80:	2b00      	cmp	r3, #0
 8027d82:	f000 81bf 	beq.w	8028104 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8027d86:	6823      	ldr	r3, [r4, #0]
 8027d88:	f013 0f02 	tst.w	r3, #2
 8027d8c:	d075      	beq.n	8027e7a <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8027d8e:	4b81      	ldr	r3, [pc, #516]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027d90:	685b      	ldr	r3, [r3, #4]
 8027d92:	f013 0f0c 	tst.w	r3, #12
 8027d96:	d05f      	beq.n	8027e58 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8027d98:	4b7e      	ldr	r3, [pc, #504]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027d9a:	685b      	ldr	r3, [r3, #4]
 8027d9c:	f003 030c 	and.w	r3, r3, #12
 8027da0:	2b08      	cmp	r3, #8
 8027da2:	d054      	beq.n	8027e4e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8027da4:	6923      	ldr	r3, [r4, #16]
 8027da6:	2b00      	cmp	r3, #0
 8027da8:	f000 808a 	beq.w	8027ec0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8027dac:	4b7a      	ldr	r3, [pc, #488]	; (8027f98 <HAL_RCC_OscConfig+0x280>)
 8027dae:	2201      	movs	r2, #1
 8027db0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8027db2:	f7fe f9cd 	bl	8026150 <HAL_GetTick>
 8027db6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027db8:	4b76      	ldr	r3, [pc, #472]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027dba:	681b      	ldr	r3, [r3, #0]
 8027dbc:	f013 0f02 	tst.w	r3, #2
 8027dc0:	d175      	bne.n	8027eae <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8027dc2:	f7fe f9c5 	bl	8026150 <HAL_GetTick>
 8027dc6:	1b40      	subs	r0, r0, r5
 8027dc8:	2802      	cmp	r0, #2
 8027dca:	d9f5      	bls.n	8027db8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8027dcc:	2003      	movs	r0, #3
 8027dce:	e19e      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8027dd0:	4a70      	ldr	r2, [pc, #448]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027dd2:	6813      	ldr	r3, [r2, #0]
 8027dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027dd8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8027dda:	6863      	ldr	r3, [r4, #4]
 8027ddc:	b343      	cbz	r3, 8027e30 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8027dde:	f7fe f9b7 	bl	8026150 <HAL_GetTick>
 8027de2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027de4:	4b6b      	ldr	r3, [pc, #428]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027de6:	681b      	ldr	r3, [r3, #0]
 8027de8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8027dec:	d1cb      	bne.n	8027d86 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8027dee:	f7fe f9af 	bl	8026150 <HAL_GetTick>
 8027df2:	1b40      	subs	r0, r0, r5
 8027df4:	2864      	cmp	r0, #100	; 0x64
 8027df6:	d9f5      	bls.n	8027de4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8027df8:	2003      	movs	r0, #3
 8027dfa:	e188      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8027dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027e00:	d009      	beq.n	8027e16 <HAL_RCC_OscConfig+0xfe>
 8027e02:	4b64      	ldr	r3, [pc, #400]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027e04:	681a      	ldr	r2, [r3, #0]
 8027e06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8027e0a:	601a      	str	r2, [r3, #0]
 8027e0c:	681a      	ldr	r2, [r3, #0]
 8027e0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8027e12:	601a      	str	r2, [r3, #0]
 8027e14:	e7e1      	b.n	8027dda <HAL_RCC_OscConfig+0xc2>
 8027e16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027e1a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8027e1e:	681a      	ldr	r2, [r3, #0]
 8027e20:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8027e24:	601a      	str	r2, [r3, #0]
 8027e26:	681a      	ldr	r2, [r3, #0]
 8027e28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8027e2c:	601a      	str	r2, [r3, #0]
 8027e2e:	e7d4      	b.n	8027dda <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8027e30:	f7fe f98e 	bl	8026150 <HAL_GetTick>
 8027e34:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8027e36:	4b57      	ldr	r3, [pc, #348]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027e38:	681b      	ldr	r3, [r3, #0]
 8027e3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8027e3e:	d0a2      	beq.n	8027d86 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8027e40:	f7fe f986 	bl	8026150 <HAL_GetTick>
 8027e44:	1b40      	subs	r0, r0, r5
 8027e46:	2864      	cmp	r0, #100	; 0x64
 8027e48:	d9f5      	bls.n	8027e36 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8027e4a:	2003      	movs	r0, #3
 8027e4c:	e15f      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8027e4e:	4b51      	ldr	r3, [pc, #324]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027e50:	685b      	ldr	r3, [r3, #4]
 8027e52:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8027e56:	d1a5      	bne.n	8027da4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8027e58:	4b4e      	ldr	r3, [pc, #312]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027e5a:	681b      	ldr	r3, [r3, #0]
 8027e5c:	f013 0f02 	tst.w	r3, #2
 8027e60:	d003      	beq.n	8027e6a <HAL_RCC_OscConfig+0x152>
 8027e62:	6923      	ldr	r3, [r4, #16]
 8027e64:	2b01      	cmp	r3, #1
 8027e66:	f040 814f 	bne.w	8028108 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027e6a:	4a4a      	ldr	r2, [pc, #296]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027e6c:	6813      	ldr	r3, [r2, #0]
 8027e6e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8027e72:	6961      	ldr	r1, [r4, #20]
 8027e74:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8027e78:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8027e7a:	6823      	ldr	r3, [r4, #0]
 8027e7c:	f013 0f08 	tst.w	r3, #8
 8027e80:	d033      	beq.n	8027eea <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8027e82:	69a3      	ldr	r3, [r4, #24]
 8027e84:	2b00      	cmp	r3, #0
 8027e86:	d05c      	beq.n	8027f42 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8027e88:	4b43      	ldr	r3, [pc, #268]	; (8027f98 <HAL_RCC_OscConfig+0x280>)
 8027e8a:	2201      	movs	r2, #1
 8027e8c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8027e90:	f7fe f95e 	bl	8026150 <HAL_GetTick>
 8027e94:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8027e96:	4b3f      	ldr	r3, [pc, #252]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027e9a:	f013 0f02 	tst.w	r3, #2
 8027e9e:	d121      	bne.n	8027ee4 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8027ea0:	f7fe f956 	bl	8026150 <HAL_GetTick>
 8027ea4:	1b40      	subs	r0, r0, r5
 8027ea6:	2802      	cmp	r0, #2
 8027ea8:	d9f5      	bls.n	8027e96 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8027eaa:	2003      	movs	r0, #3
 8027eac:	e12f      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027eae:	4a39      	ldr	r2, [pc, #228]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027eb0:	6813      	ldr	r3, [r2, #0]
 8027eb2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8027eb6:	6961      	ldr	r1, [r4, #20]
 8027eb8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8027ebc:	6013      	str	r3, [r2, #0]
 8027ebe:	e7dc      	b.n	8027e7a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8027ec0:	4b35      	ldr	r3, [pc, #212]	; (8027f98 <HAL_RCC_OscConfig+0x280>)
 8027ec2:	2200      	movs	r2, #0
 8027ec4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8027ec6:	f7fe f943 	bl	8026150 <HAL_GetTick>
 8027eca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8027ecc:	4b31      	ldr	r3, [pc, #196]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027ece:	681b      	ldr	r3, [r3, #0]
 8027ed0:	f013 0f02 	tst.w	r3, #2
 8027ed4:	d0d1      	beq.n	8027e7a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8027ed6:	f7fe f93b 	bl	8026150 <HAL_GetTick>
 8027eda:	1b40      	subs	r0, r0, r5
 8027edc:	2802      	cmp	r0, #2
 8027ede:	d9f5      	bls.n	8027ecc <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8027ee0:	2003      	movs	r0, #3
 8027ee2:	e114      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8027ee4:	2001      	movs	r0, #1
 8027ee6:	f7ff ff01 	bl	8027cec <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8027eea:	6823      	ldr	r3, [r4, #0]
 8027eec:	f013 0f04 	tst.w	r3, #4
 8027ef0:	f000 8096 	beq.w	8028020 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8027ef4:	4b27      	ldr	r3, [pc, #156]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027ef6:	69db      	ldr	r3, [r3, #28]
 8027ef8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8027efc:	d134      	bne.n	8027f68 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8027efe:	4b25      	ldr	r3, [pc, #148]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027f00:	69da      	ldr	r2, [r3, #28]
 8027f02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8027f06:	61da      	str	r2, [r3, #28]
 8027f08:	69db      	ldr	r3, [r3, #28]
 8027f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027f0e:	9301      	str	r3, [sp, #4]
 8027f10:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8027f12:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027f14:	4b21      	ldr	r3, [pc, #132]	; (8027f9c <HAL_RCC_OscConfig+0x284>)
 8027f16:	681b      	ldr	r3, [r3, #0]
 8027f18:	f413 7f80 	tst.w	r3, #256	; 0x100
 8027f1c:	d026      	beq.n	8027f6c <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8027f1e:	68e3      	ldr	r3, [r4, #12]
 8027f20:	2b01      	cmp	r3, #1
 8027f22:	d03d      	beq.n	8027fa0 <HAL_RCC_OscConfig+0x288>
 8027f24:	2b00      	cmp	r3, #0
 8027f26:	d153      	bne.n	8027fd0 <HAL_RCC_OscConfig+0x2b8>
 8027f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027f2c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8027f30:	6a1a      	ldr	r2, [r3, #32]
 8027f32:	f022 0201 	bic.w	r2, r2, #1
 8027f36:	621a      	str	r2, [r3, #32]
 8027f38:	6a1a      	ldr	r2, [r3, #32]
 8027f3a:	f022 0204 	bic.w	r2, r2, #4
 8027f3e:	621a      	str	r2, [r3, #32]
 8027f40:	e033      	b.n	8027faa <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8027f42:	4b15      	ldr	r3, [pc, #84]	; (8027f98 <HAL_RCC_OscConfig+0x280>)
 8027f44:	2200      	movs	r2, #0
 8027f46:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8027f4a:	f7fe f901 	bl	8026150 <HAL_GetTick>
 8027f4e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8027f50:	4b10      	ldr	r3, [pc, #64]	; (8027f94 <HAL_RCC_OscConfig+0x27c>)
 8027f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027f54:	f013 0f02 	tst.w	r3, #2
 8027f58:	d0c7      	beq.n	8027eea <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8027f5a:	f7fe f8f9 	bl	8026150 <HAL_GetTick>
 8027f5e:	1b40      	subs	r0, r0, r5
 8027f60:	2802      	cmp	r0, #2
 8027f62:	d9f5      	bls.n	8027f50 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8027f64:	2003      	movs	r0, #3
 8027f66:	e0d2      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8027f68:	2500      	movs	r5, #0
 8027f6a:	e7d3      	b.n	8027f14 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8027f6c:	4a0b      	ldr	r2, [pc, #44]	; (8027f9c <HAL_RCC_OscConfig+0x284>)
 8027f6e:	6813      	ldr	r3, [r2, #0]
 8027f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027f74:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8027f76:	f7fe f8eb 	bl	8026150 <HAL_GetTick>
 8027f7a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027f7c:	4b07      	ldr	r3, [pc, #28]	; (8027f9c <HAL_RCC_OscConfig+0x284>)
 8027f7e:	681b      	ldr	r3, [r3, #0]
 8027f80:	f413 7f80 	tst.w	r3, #256	; 0x100
 8027f84:	d1cb      	bne.n	8027f1e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8027f86:	f7fe f8e3 	bl	8026150 <HAL_GetTick>
 8027f8a:	1b80      	subs	r0, r0, r6
 8027f8c:	2864      	cmp	r0, #100	; 0x64
 8027f8e:	d9f5      	bls.n	8027f7c <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8027f90:	2003      	movs	r0, #3
 8027f92:	e0bc      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
 8027f94:	40021000 	.word	0x40021000
 8027f98:	42420000 	.word	0x42420000
 8027f9c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8027fa0:	4a5f      	ldr	r2, [pc, #380]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 8027fa2:	6a13      	ldr	r3, [r2, #32]
 8027fa4:	f043 0301 	orr.w	r3, r3, #1
 8027fa8:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8027faa:	68e3      	ldr	r3, [r4, #12]
 8027fac:	b333      	cbz	r3, 8027ffc <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8027fae:	f7fe f8cf 	bl	8026150 <HAL_GetTick>
 8027fb2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027fb4:	4b5a      	ldr	r3, [pc, #360]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 8027fb6:	6a1b      	ldr	r3, [r3, #32]
 8027fb8:	f013 0f02 	tst.w	r3, #2
 8027fbc:	d12f      	bne.n	802801e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8027fbe:	f7fe f8c7 	bl	8026150 <HAL_GetTick>
 8027fc2:	1b80      	subs	r0, r0, r6
 8027fc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8027fc8:	4298      	cmp	r0, r3
 8027fca:	d9f3      	bls.n	8027fb4 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8027fcc:	2003      	movs	r0, #3
 8027fce:	e09e      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8027fd0:	2b05      	cmp	r3, #5
 8027fd2:	d009      	beq.n	8027fe8 <HAL_RCC_OscConfig+0x2d0>
 8027fd4:	4b52      	ldr	r3, [pc, #328]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 8027fd6:	6a1a      	ldr	r2, [r3, #32]
 8027fd8:	f022 0201 	bic.w	r2, r2, #1
 8027fdc:	621a      	str	r2, [r3, #32]
 8027fde:	6a1a      	ldr	r2, [r3, #32]
 8027fe0:	f022 0204 	bic.w	r2, r2, #4
 8027fe4:	621a      	str	r2, [r3, #32]
 8027fe6:	e7e0      	b.n	8027faa <HAL_RCC_OscConfig+0x292>
 8027fe8:	4b4d      	ldr	r3, [pc, #308]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 8027fea:	6a1a      	ldr	r2, [r3, #32]
 8027fec:	f042 0204 	orr.w	r2, r2, #4
 8027ff0:	621a      	str	r2, [r3, #32]
 8027ff2:	6a1a      	ldr	r2, [r3, #32]
 8027ff4:	f042 0201 	orr.w	r2, r2, #1
 8027ff8:	621a      	str	r2, [r3, #32]
 8027ffa:	e7d6      	b.n	8027faa <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8027ffc:	f7fe f8a8 	bl	8026150 <HAL_GetTick>
 8028000:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8028002:	4b47      	ldr	r3, [pc, #284]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 8028004:	6a1b      	ldr	r3, [r3, #32]
 8028006:	f013 0f02 	tst.w	r3, #2
 802800a:	d008      	beq.n	802801e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802800c:	f7fe f8a0 	bl	8026150 <HAL_GetTick>
 8028010:	1b80      	subs	r0, r0, r6
 8028012:	f241 3388 	movw	r3, #5000	; 0x1388
 8028016:	4298      	cmp	r0, r3
 8028018:	d9f3      	bls.n	8028002 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 802801a:	2003      	movs	r0, #3
 802801c:	e077      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 802801e:	b9e5      	cbnz	r5, 802805a <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8028020:	69e3      	ldr	r3, [r4, #28]
 8028022:	2b00      	cmp	r3, #0
 8028024:	d072      	beq.n	802810c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8028026:	4a3e      	ldr	r2, [pc, #248]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 8028028:	6852      	ldr	r2, [r2, #4]
 802802a:	f002 020c 	and.w	r2, r2, #12
 802802e:	2a08      	cmp	r2, #8
 8028030:	d056      	beq.n	80280e0 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8028032:	2b02      	cmp	r3, #2
 8028034:	d017      	beq.n	8028066 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8028036:	4b3b      	ldr	r3, [pc, #236]	; (8028124 <HAL_RCC_OscConfig+0x40c>)
 8028038:	2200      	movs	r2, #0
 802803a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 802803c:	f7fe f888 	bl	8026150 <HAL_GetTick>
 8028040:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8028042:	4b37      	ldr	r3, [pc, #220]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 8028044:	681b      	ldr	r3, [r3, #0]
 8028046:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 802804a:	d047      	beq.n	80280dc <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802804c:	f7fe f880 	bl	8026150 <HAL_GetTick>
 8028050:	1b00      	subs	r0, r0, r4
 8028052:	2802      	cmp	r0, #2
 8028054:	d9f5      	bls.n	8028042 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8028056:	2003      	movs	r0, #3
 8028058:	e059      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 802805a:	4a31      	ldr	r2, [pc, #196]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 802805c:	69d3      	ldr	r3, [r2, #28]
 802805e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028062:	61d3      	str	r3, [r2, #28]
 8028064:	e7dc      	b.n	8028020 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8028066:	4b2f      	ldr	r3, [pc, #188]	; (8028124 <HAL_RCC_OscConfig+0x40c>)
 8028068:	2200      	movs	r2, #0
 802806a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 802806c:	f7fe f870 	bl	8026150 <HAL_GetTick>
 8028070:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8028072:	4b2b      	ldr	r3, [pc, #172]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 8028074:	681b      	ldr	r3, [r3, #0]
 8028076:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 802807a:	d006      	beq.n	802808a <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802807c:	f7fe f868 	bl	8026150 <HAL_GetTick>
 8028080:	1b40      	subs	r0, r0, r5
 8028082:	2802      	cmp	r0, #2
 8028084:	d9f5      	bls.n	8028072 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8028086:	2003      	movs	r0, #3
 8028088:	e041      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 802808a:	6a23      	ldr	r3, [r4, #32]
 802808c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8028090:	d01a      	beq.n	80280c8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8028092:	4923      	ldr	r1, [pc, #140]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 8028094:	684b      	ldr	r3, [r1, #4]
 8028096:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 802809a:	6a22      	ldr	r2, [r4, #32]
 802809c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802809e:	4302      	orrs	r2, r0
 80280a0:	4313      	orrs	r3, r2
 80280a2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80280a4:	4b1f      	ldr	r3, [pc, #124]	; (8028124 <HAL_RCC_OscConfig+0x40c>)
 80280a6:	2201      	movs	r2, #1
 80280a8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80280aa:	f7fe f851 	bl	8026150 <HAL_GetTick>
 80280ae:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80280b0:	4b1b      	ldr	r3, [pc, #108]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 80280b2:	681b      	ldr	r3, [r3, #0]
 80280b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80280b8:	d10e      	bne.n	80280d8 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80280ba:	f7fe f849 	bl	8026150 <HAL_GetTick>
 80280be:	1b00      	subs	r0, r0, r4
 80280c0:	2802      	cmp	r0, #2
 80280c2:	d9f5      	bls.n	80280b0 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80280c4:	2003      	movs	r0, #3
 80280c6:	e022      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80280c8:	4a15      	ldr	r2, [pc, #84]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 80280ca:	6853      	ldr	r3, [r2, #4]
 80280cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80280d0:	68a1      	ldr	r1, [r4, #8]
 80280d2:	430b      	orrs	r3, r1
 80280d4:	6053      	str	r3, [r2, #4]
 80280d6:	e7dc      	b.n	8028092 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80280d8:	2000      	movs	r0, #0
 80280da:	e018      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
 80280dc:	2000      	movs	r0, #0
 80280de:	e016      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80280e0:	2b01      	cmp	r3, #1
 80280e2:	d016      	beq.n	8028112 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 80280e4:	4b0e      	ldr	r3, [pc, #56]	; (8028120 <HAL_RCC_OscConfig+0x408>)
 80280e6:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80280e8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80280ec:	6a22      	ldr	r2, [r4, #32]
 80280ee:	4291      	cmp	r1, r2
 80280f0:	d111      	bne.n	8028116 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80280f2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80280f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80280f8:	4293      	cmp	r3, r2
 80280fa:	d10e      	bne.n	802811a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 80280fc:	2000      	movs	r0, #0
 80280fe:	e006      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8028100:	2001      	movs	r0, #1
}
 8028102:	4770      	bx	lr
        return HAL_ERROR;
 8028104:	2001      	movs	r0, #1
 8028106:	e002      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8028108:	2001      	movs	r0, #1
 802810a:	e000      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 802810c:	2000      	movs	r0, #0
}
 802810e:	b002      	add	sp, #8
 8028110:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8028112:	2001      	movs	r0, #1
 8028114:	e7fb      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8028116:	2001      	movs	r0, #1
 8028118:	e7f9      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
 802811a:	2001      	movs	r0, #1
 802811c:	e7f7      	b.n	802810e <HAL_RCC_OscConfig+0x3f6>
 802811e:	bf00      	nop
 8028120:	40021000 	.word	0x40021000
 8028124:	42420000 	.word	0x42420000

08028128 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8028128:	4b0f      	ldr	r3, [pc, #60]	; (8028168 <HAL_RCC_GetSysClockFreq+0x40>)
 802812a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 802812c:	f003 020c 	and.w	r2, r3, #12
 8028130:	2a08      	cmp	r2, #8
 8028132:	d001      	beq.n	8028138 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8028134:	480d      	ldr	r0, [pc, #52]	; (802816c <HAL_RCC_GetSysClockFreq+0x44>)
}
 8028136:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8028138:	f3c3 4283 	ubfx	r2, r3, #18, #4
 802813c:	490c      	ldr	r1, [pc, #48]	; (8028170 <HAL_RCC_GetSysClockFreq+0x48>)
 802813e:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8028140:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8028144:	d00b      	beq.n	802815e <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8028146:	4b08      	ldr	r3, [pc, #32]	; (8028168 <HAL_RCC_GetSysClockFreq+0x40>)
 8028148:	685b      	ldr	r3, [r3, #4]
 802814a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 802814e:	4a09      	ldr	r2, [pc, #36]	; (8028174 <HAL_RCC_GetSysClockFreq+0x4c>)
 8028150:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8028152:	4a06      	ldr	r2, [pc, #24]	; (802816c <HAL_RCC_GetSysClockFreq+0x44>)
 8028154:	fb02 f000 	mul.w	r0, r2, r0
 8028158:	fbb0 f0f3 	udiv	r0, r0, r3
 802815c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 802815e:	4b06      	ldr	r3, [pc, #24]	; (8028178 <HAL_RCC_GetSysClockFreq+0x50>)
 8028160:	fb03 f000 	mul.w	r0, r3, r0
 8028164:	4770      	bx	lr
 8028166:	bf00      	nop
 8028168:	40021000 	.word	0x40021000
 802816c:	007a1200 	.word	0x007a1200
 8028170:	08030fc0 	.word	0x08030fc0
 8028174:	08030fd0 	.word	0x08030fd0
 8028178:	003d0900 	.word	0x003d0900

0802817c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 802817c:	2800      	cmp	r0, #0
 802817e:	f000 80a0 	beq.w	80282c2 <HAL_RCC_ClockConfig+0x146>
{
 8028182:	b570      	push	{r4, r5, r6, lr}
 8028184:	460d      	mov	r5, r1
 8028186:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8028188:	4b52      	ldr	r3, [pc, #328]	; (80282d4 <HAL_RCC_ClockConfig+0x158>)
 802818a:	681b      	ldr	r3, [r3, #0]
 802818c:	f003 0307 	and.w	r3, r3, #7
 8028190:	428b      	cmp	r3, r1
 8028192:	d20b      	bcs.n	80281ac <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028194:	4a4f      	ldr	r2, [pc, #316]	; (80282d4 <HAL_RCC_ClockConfig+0x158>)
 8028196:	6813      	ldr	r3, [r2, #0]
 8028198:	f023 0307 	bic.w	r3, r3, #7
 802819c:	430b      	orrs	r3, r1
 802819e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80281a0:	6813      	ldr	r3, [r2, #0]
 80281a2:	f003 0307 	and.w	r3, r3, #7
 80281a6:	428b      	cmp	r3, r1
 80281a8:	f040 808d 	bne.w	80282c6 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80281ac:	6823      	ldr	r3, [r4, #0]
 80281ae:	f013 0f02 	tst.w	r3, #2
 80281b2:	d017      	beq.n	80281e4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80281b4:	f013 0f04 	tst.w	r3, #4
 80281b8:	d004      	beq.n	80281c4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80281ba:	4a47      	ldr	r2, [pc, #284]	; (80282d8 <HAL_RCC_ClockConfig+0x15c>)
 80281bc:	6853      	ldr	r3, [r2, #4]
 80281be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80281c2:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80281c4:	6823      	ldr	r3, [r4, #0]
 80281c6:	f013 0f08 	tst.w	r3, #8
 80281ca:	d004      	beq.n	80281d6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80281cc:	4a42      	ldr	r2, [pc, #264]	; (80282d8 <HAL_RCC_ClockConfig+0x15c>)
 80281ce:	6853      	ldr	r3, [r2, #4]
 80281d0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80281d4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80281d6:	4a40      	ldr	r2, [pc, #256]	; (80282d8 <HAL_RCC_ClockConfig+0x15c>)
 80281d8:	6853      	ldr	r3, [r2, #4]
 80281da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80281de:	68a1      	ldr	r1, [r4, #8]
 80281e0:	430b      	orrs	r3, r1
 80281e2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80281e4:	6823      	ldr	r3, [r4, #0]
 80281e6:	f013 0f01 	tst.w	r3, #1
 80281ea:	d031      	beq.n	8028250 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80281ec:	6863      	ldr	r3, [r4, #4]
 80281ee:	2b01      	cmp	r3, #1
 80281f0:	d020      	beq.n	8028234 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80281f2:	2b02      	cmp	r3, #2
 80281f4:	d025      	beq.n	8028242 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80281f6:	4a38      	ldr	r2, [pc, #224]	; (80282d8 <HAL_RCC_ClockConfig+0x15c>)
 80281f8:	6812      	ldr	r2, [r2, #0]
 80281fa:	f012 0f02 	tst.w	r2, #2
 80281fe:	d064      	beq.n	80282ca <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8028200:	4935      	ldr	r1, [pc, #212]	; (80282d8 <HAL_RCC_ClockConfig+0x15c>)
 8028202:	684a      	ldr	r2, [r1, #4]
 8028204:	f022 0203 	bic.w	r2, r2, #3
 8028208:	4313      	orrs	r3, r2
 802820a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 802820c:	f7fd ffa0 	bl	8026150 <HAL_GetTick>
 8028210:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028212:	4b31      	ldr	r3, [pc, #196]	; (80282d8 <HAL_RCC_ClockConfig+0x15c>)
 8028214:	685b      	ldr	r3, [r3, #4]
 8028216:	f003 030c 	and.w	r3, r3, #12
 802821a:	6862      	ldr	r2, [r4, #4]
 802821c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8028220:	d016      	beq.n	8028250 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8028222:	f7fd ff95 	bl	8026150 <HAL_GetTick>
 8028226:	1b80      	subs	r0, r0, r6
 8028228:	f241 3388 	movw	r3, #5000	; 0x1388
 802822c:	4298      	cmp	r0, r3
 802822e:	d9f0      	bls.n	8028212 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8028230:	2003      	movs	r0, #3
 8028232:	e045      	b.n	80282c0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028234:	4a28      	ldr	r2, [pc, #160]	; (80282d8 <HAL_RCC_ClockConfig+0x15c>)
 8028236:	6812      	ldr	r2, [r2, #0]
 8028238:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 802823c:	d1e0      	bne.n	8028200 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 802823e:	2001      	movs	r0, #1
 8028240:	e03e      	b.n	80282c0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028242:	4a25      	ldr	r2, [pc, #148]	; (80282d8 <HAL_RCC_ClockConfig+0x15c>)
 8028244:	6812      	ldr	r2, [r2, #0]
 8028246:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 802824a:	d1d9      	bne.n	8028200 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 802824c:	2001      	movs	r0, #1
 802824e:	e037      	b.n	80282c0 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8028250:	4b20      	ldr	r3, [pc, #128]	; (80282d4 <HAL_RCC_ClockConfig+0x158>)
 8028252:	681b      	ldr	r3, [r3, #0]
 8028254:	f003 0307 	and.w	r3, r3, #7
 8028258:	42ab      	cmp	r3, r5
 802825a:	d90a      	bls.n	8028272 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 802825c:	4a1d      	ldr	r2, [pc, #116]	; (80282d4 <HAL_RCC_ClockConfig+0x158>)
 802825e:	6813      	ldr	r3, [r2, #0]
 8028260:	f023 0307 	bic.w	r3, r3, #7
 8028264:	432b      	orrs	r3, r5
 8028266:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8028268:	6813      	ldr	r3, [r2, #0]
 802826a:	f003 0307 	and.w	r3, r3, #7
 802826e:	42ab      	cmp	r3, r5
 8028270:	d12d      	bne.n	80282ce <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028272:	6823      	ldr	r3, [r4, #0]
 8028274:	f013 0f04 	tst.w	r3, #4
 8028278:	d006      	beq.n	8028288 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802827a:	4a17      	ldr	r2, [pc, #92]	; (80282d8 <HAL_RCC_ClockConfig+0x15c>)
 802827c:	6853      	ldr	r3, [r2, #4]
 802827e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8028282:	68e1      	ldr	r1, [r4, #12]
 8028284:	430b      	orrs	r3, r1
 8028286:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028288:	6823      	ldr	r3, [r4, #0]
 802828a:	f013 0f08 	tst.w	r3, #8
 802828e:	d007      	beq.n	80282a0 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8028290:	4a11      	ldr	r2, [pc, #68]	; (80282d8 <HAL_RCC_ClockConfig+0x15c>)
 8028292:	6853      	ldr	r3, [r2, #4]
 8028294:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8028298:	6921      	ldr	r1, [r4, #16]
 802829a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 802829e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80282a0:	f7ff ff42 	bl	8028128 <HAL_RCC_GetSysClockFreq>
 80282a4:	4b0c      	ldr	r3, [pc, #48]	; (80282d8 <HAL_RCC_ClockConfig+0x15c>)
 80282a6:	685b      	ldr	r3, [r3, #4]
 80282a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80282ac:	4a0b      	ldr	r2, [pc, #44]	; (80282dc <HAL_RCC_ClockConfig+0x160>)
 80282ae:	5cd3      	ldrb	r3, [r2, r3]
 80282b0:	40d8      	lsrs	r0, r3
 80282b2:	4b0b      	ldr	r3, [pc, #44]	; (80282e0 <HAL_RCC_ClockConfig+0x164>)
 80282b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80282b6:	4b0b      	ldr	r3, [pc, #44]	; (80282e4 <HAL_RCC_ClockConfig+0x168>)
 80282b8:	6818      	ldr	r0, [r3, #0]
 80282ba:	f7fd ff05 	bl	80260c8 <HAL_InitTick>
  return HAL_OK;
 80282be:	2000      	movs	r0, #0
}
 80282c0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80282c2:	2001      	movs	r0, #1
}
 80282c4:	4770      	bx	lr
    return HAL_ERROR;
 80282c6:	2001      	movs	r0, #1
 80282c8:	e7fa      	b.n	80282c0 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80282ca:	2001      	movs	r0, #1
 80282cc:	e7f8      	b.n	80282c0 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 80282ce:	2001      	movs	r0, #1
 80282d0:	e7f6      	b.n	80282c0 <HAL_RCC_ClockConfig+0x144>
 80282d2:	bf00      	nop
 80282d4:	40022000 	.word	0x40022000
 80282d8:	40021000 	.word	0x40021000
 80282dc:	08030fa8 	.word	0x08030fa8
 80282e0:	20000090 	.word	0x20000090
 80282e4:	20000098 	.word	0x20000098

080282e8 <HAL_RCC_GetHCLKFreq>:
}
 80282e8:	4b01      	ldr	r3, [pc, #4]	; (80282f0 <HAL_RCC_GetHCLKFreq+0x8>)
 80282ea:	6818      	ldr	r0, [r3, #0]
 80282ec:	4770      	bx	lr
 80282ee:	bf00      	nop
 80282f0:	20000090 	.word	0x20000090

080282f4 <HAL_RCC_GetPCLK1Freq>:
{
 80282f4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80282f6:	f7ff fff7 	bl	80282e8 <HAL_RCC_GetHCLKFreq>
 80282fa:	4b04      	ldr	r3, [pc, #16]	; (802830c <HAL_RCC_GetPCLK1Freq+0x18>)
 80282fc:	685b      	ldr	r3, [r3, #4]
 80282fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8028302:	4a03      	ldr	r2, [pc, #12]	; (8028310 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8028304:	5cd3      	ldrb	r3, [r2, r3]
}
 8028306:	40d8      	lsrs	r0, r3
 8028308:	bd08      	pop	{r3, pc}
 802830a:	bf00      	nop
 802830c:	40021000 	.word	0x40021000
 8028310:	08030fb8 	.word	0x08030fb8

08028314 <HAL_RCC_GetPCLK2Freq>:
{
 8028314:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8028316:	f7ff ffe7 	bl	80282e8 <HAL_RCC_GetHCLKFreq>
 802831a:	4b04      	ldr	r3, [pc, #16]	; (802832c <HAL_RCC_GetPCLK2Freq+0x18>)
 802831c:	685b      	ldr	r3, [r3, #4]
 802831e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8028322:	4a03      	ldr	r2, [pc, #12]	; (8028330 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8028324:	5cd3      	ldrb	r3, [r2, r3]
}
 8028326:	40d8      	lsrs	r0, r3
 8028328:	bd08      	pop	{r3, pc}
 802832a:	bf00      	nop
 802832c:	40021000 	.word	0x40021000
 8028330:	08030fb8 	.word	0x08030fb8

08028334 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8028334:	b570      	push	{r4, r5, r6, lr}
 8028336:	b082      	sub	sp, #8
 8028338:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 802833a:	6803      	ldr	r3, [r0, #0]
 802833c:	f013 0f01 	tst.w	r3, #1
 8028340:	d036      	beq.n	80283b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8028342:	4b3f      	ldr	r3, [pc, #252]	; (8028440 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8028344:	69db      	ldr	r3, [r3, #28]
 8028346:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 802834a:	d149      	bne.n	80283e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802834c:	4b3c      	ldr	r3, [pc, #240]	; (8028440 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 802834e:	69da      	ldr	r2, [r3, #28]
 8028350:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8028354:	61da      	str	r2, [r3, #28]
 8028356:	69db      	ldr	r3, [r3, #28]
 8028358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802835c:	9301      	str	r3, [sp, #4]
 802835e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8028360:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028362:	4b38      	ldr	r3, [pc, #224]	; (8028444 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8028364:	681b      	ldr	r3, [r3, #0]
 8028366:	f413 7f80 	tst.w	r3, #256	; 0x100
 802836a:	d03b      	beq.n	80283e4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 802836c:	4b34      	ldr	r3, [pc, #208]	; (8028440 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 802836e:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8028370:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8028374:	d013      	beq.n	802839e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8028376:	6862      	ldr	r2, [r4, #4]
 8028378:	f402 7240 	and.w	r2, r2, #768	; 0x300
 802837c:	429a      	cmp	r2, r3
 802837e:	d00e      	beq.n	802839e <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8028380:	4a2f      	ldr	r2, [pc, #188]	; (8028440 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8028382:	6a13      	ldr	r3, [r2, #32]
 8028384:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8028388:	492f      	ldr	r1, [pc, #188]	; (8028448 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 802838a:	2601      	movs	r6, #1
 802838c:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8028390:	2600      	movs	r6, #0
 8028392:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8028396:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8028398:	f013 0f01 	tst.w	r3, #1
 802839c:	d136      	bne.n	802840c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802839e:	4a28      	ldr	r2, [pc, #160]	; (8028440 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80283a0:	6a13      	ldr	r3, [r2, #32]
 80283a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80283a6:	6861      	ldr	r1, [r4, #4]
 80283a8:	430b      	orrs	r3, r1
 80283aa:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80283ac:	2d00      	cmp	r5, #0
 80283ae:	d13e      	bne.n	802842e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80283b0:	6823      	ldr	r3, [r4, #0]
 80283b2:	f013 0f02 	tst.w	r3, #2
 80283b6:	d006      	beq.n	80283c6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80283b8:	4a21      	ldr	r2, [pc, #132]	; (8028440 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80283ba:	6853      	ldr	r3, [r2, #4]
 80283bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80283c0:	68a1      	ldr	r1, [r4, #8]
 80283c2:	430b      	orrs	r3, r1
 80283c4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80283c6:	6823      	ldr	r3, [r4, #0]
 80283c8:	f013 0f10 	tst.w	r3, #16
 80283cc:	d034      	beq.n	8028438 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80283ce:	4a1c      	ldr	r2, [pc, #112]	; (8028440 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80283d0:	6853      	ldr	r3, [r2, #4]
 80283d2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80283d6:	6961      	ldr	r1, [r4, #20]
 80283d8:	430b      	orrs	r3, r1
 80283da:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80283dc:	2000      	movs	r0, #0
 80283de:	e02c      	b.n	802843a <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 80283e0:	2500      	movs	r5, #0
 80283e2:	e7be      	b.n	8028362 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80283e4:	4a17      	ldr	r2, [pc, #92]	; (8028444 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80283e6:	6813      	ldr	r3, [r2, #0]
 80283e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80283ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80283ee:	f7fd feaf 	bl	8026150 <HAL_GetTick>
 80283f2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80283f4:	4b13      	ldr	r3, [pc, #76]	; (8028444 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80283f6:	681b      	ldr	r3, [r3, #0]
 80283f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80283fc:	d1b6      	bne.n	802836c <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80283fe:	f7fd fea7 	bl	8026150 <HAL_GetTick>
 8028402:	1b80      	subs	r0, r0, r6
 8028404:	2864      	cmp	r0, #100	; 0x64
 8028406:	d9f5      	bls.n	80283f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8028408:	2003      	movs	r0, #3
 802840a:	e016      	b.n	802843a <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 802840c:	f7fd fea0 	bl	8026150 <HAL_GetTick>
 8028410:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028412:	4b0b      	ldr	r3, [pc, #44]	; (8028440 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8028414:	6a1b      	ldr	r3, [r3, #32]
 8028416:	f013 0f02 	tst.w	r3, #2
 802841a:	d1c0      	bne.n	802839e <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802841c:	f7fd fe98 	bl	8026150 <HAL_GetTick>
 8028420:	1b80      	subs	r0, r0, r6
 8028422:	f241 3388 	movw	r3, #5000	; 0x1388
 8028426:	4298      	cmp	r0, r3
 8028428:	d9f3      	bls.n	8028412 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 802842a:	2003      	movs	r0, #3
 802842c:	e005      	b.n	802843a <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 802842e:	69d3      	ldr	r3, [r2, #28]
 8028430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028434:	61d3      	str	r3, [r2, #28]
 8028436:	e7bb      	b.n	80283b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8028438:	2000      	movs	r0, #0
}
 802843a:	b002      	add	sp, #8
 802843c:	bd70      	pop	{r4, r5, r6, pc}
 802843e:	bf00      	nop
 8028440:	40021000 	.word	0x40021000
 8028444:	40007000 	.word	0x40007000
 8028448:	42420000 	.word	0x42420000

0802844c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 802844c:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 802844e:	3801      	subs	r0, #1
 8028450:	280f      	cmp	r0, #15
 8028452:	d863      	bhi.n	802851c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8028454:	e8df f000 	tbb	[pc, r0]
 8028458:	2f625735 	.word	0x2f625735
 802845c:	32626262 	.word	0x32626262
 8028460:	62626262 	.word	0x62626262
 8028464:	08626262 	.word	0x08626262
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8028468:	4b2f      	ldr	r3, [pc, #188]	; (8028528 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 802846a:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 802846c:	6818      	ldr	r0, [r3, #0]
 802846e:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8028472:	d054      	beq.n	802851e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8028474:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8028478:	492c      	ldr	r1, [pc, #176]	; (802852c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 802847a:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 802847c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8028480:	d015      	beq.n	80284ae <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8028482:	4b29      	ldr	r3, [pc, #164]	; (8028528 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8028484:	685b      	ldr	r3, [r3, #4]
 8028486:	f3c3 4340 	ubfx	r3, r3, #17, #1
 802848a:	4a29      	ldr	r2, [pc, #164]	; (8028530 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 802848c:	5cd2      	ldrb	r2, [r2, r3]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 802848e:	4b29      	ldr	r3, [pc, #164]	; (8028534 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 8028490:	fbb3 f3f2 	udiv	r3, r3, r2
 8028494:	fb03 f000 	mul.w	r0, r3, r0
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8028498:	4b23      	ldr	r3, [pc, #140]	; (8028528 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 802849a:	685b      	ldr	r3, [r3, #4]
 802849c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80284a0:	d13d      	bne.n	802851e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 80284a2:	0040      	lsls	r0, r0, #1
 80284a4:	4b24      	ldr	r3, [pc, #144]	; (8028538 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80284a6:	fba3 3000 	umull	r3, r0, r3, r0
 80284aa:	0840      	lsrs	r0, r0, #1
 80284ac:	e037      	b.n	802851e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80284ae:	4b23      	ldr	r3, [pc, #140]	; (802853c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 80284b0:	fb03 f000 	mul.w	r0, r3, r0
 80284b4:	e7f0      	b.n	8028498 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80284b6:	f7ff fe37 	bl	8028128 <HAL_RCC_GetSysClockFreq>
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80284ba:	e030      	b.n	802851e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80284bc:	f7ff fe34 	bl	8028128 <HAL_RCC_GetSysClockFreq>
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80284c0:	e02d      	b.n	802851e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80284c2:	4b19      	ldr	r3, [pc, #100]	; (8028528 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80284c4:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80284c6:	f240 3202 	movw	r2, #770	; 0x302
 80284ca:	401a      	ands	r2, r3
 80284cc:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80284d0:	d026      	beq.n	8028520 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80284d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80284d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80284da:	d004      	beq.n	80284e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80284dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80284e0:	d009      	beq.n	80284f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
  uint32_t temp_reg = 0U, frequency = 0U;
 80284e2:	2000      	movs	r0, #0
 80284e4:	e01b      	b.n	802851e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80284e6:	4a10      	ldr	r2, [pc, #64]	; (8028528 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80284e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80284ea:	f012 0f02 	tst.w	r2, #2
 80284ee:	d0f5      	beq.n	80284dc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
        frequency = LSI_VALUE;
 80284f0:	f649 4040 	movw	r0, #40000	; 0x9c40
 80284f4:	e013      	b.n	802851e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80284f6:	4b0c      	ldr	r3, [pc, #48]	; (8028528 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80284f8:	6818      	ldr	r0, [r3, #0]
 80284fa:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80284fe:	d00e      	beq.n	802851e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      {
        frequency = HSE_VALUE / 128U;
 8028500:	f24f 4024 	movw	r0, #62500	; 0xf424
    default:
    {
      break;
    }
  }
  return (frequency);
 8028504:	e00b      	b.n	802851e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8028506:	f7ff ff05 	bl	8028314 <HAL_RCC_GetPCLK2Freq>
 802850a:	4b07      	ldr	r3, [pc, #28]	; (8028528 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 802850c:	685b      	ldr	r3, [r3, #4]
 802850e:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8028512:	3301      	adds	r3, #1
 8028514:	005b      	lsls	r3, r3, #1
 8028516:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 802851a:	e000      	b.n	802851e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  switch (PeriphClk)
 802851c:	2000      	movs	r0, #0
}
 802851e:	bd08      	pop	{r3, pc}
        frequency = LSE_VALUE;
 8028520:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8028524:	e7fb      	b.n	802851e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8028526:	bf00      	nop
 8028528:	40021000 	.word	0x40021000
 802852c:	08030fd4 	.word	0x08030fd4
 8028530:	08030fe4 	.word	0x08030fe4
 8028534:	007a1200 	.word	0x007a1200
 8028538:	aaaaaaab 	.word	0xaaaaaaab
 802853c:	003d0900 	.word	0x003d0900

08028540 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8028540:	b500      	push	{lr}
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8028542:	6803      	ldr	r3, [r0, #0]
 8028544:	6999      	ldr	r1, [r3, #24]
 8028546:	fa1f fe81 	uxth.w	lr, r1
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 802854a:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 802854c:	699a      	ldr	r2, [r3, #24]
 802854e:	fa1f fc82 	uxth.w	ip, r2

  if (high1 != high2)
 8028552:	45e6      	cmp	lr, ip
 8028554:	d005      	beq.n	8028562 <RTC_ReadTimeCounter+0x22>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8028556:	69d8      	ldr	r0, [r3, #28]
 8028558:	b280      	uxth	r0, r0
 802855a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
  }

  return timecounter;
}
 802855e:	f85d fb04 	ldr.w	pc, [sp], #4
    timecounter = (((uint32_t) high1 << 16U) | low);
 8028562:	b280      	uxth	r0, r0
 8028564:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
  return timecounter;
 8028568:	e7f9      	b.n	802855e <RTC_ReadTimeCounter+0x1e>

0802856a <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 802856a:	6803      	ldr	r3, [r0, #0]
 802856c:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 802856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8028570:	b29b      	uxth	r3, r3
}
 8028572:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8028576:	4770      	bx	lr

08028578 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8028578:	0903      	lsrs	r3, r0, #4
 802857a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 802857e:	f000 000f 	and.w	r0, r0, #15
 8028582:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8028586:	b2c0      	uxtb	r0, r0
 8028588:	4770      	bx	lr
	...

0802858c <RTC_WeekDayNum>:
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 802858c:	f500 6cfa 	add.w	ip, r0, #2000	; 0x7d0

  if (nMonth < 3U)
 8028590:	2902      	cmp	r1, #2
 8028592:	d821      	bhi.n	80285d8 <RTC_WeekDayNum+0x4c>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8028594:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8028598:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 802859c:	4b1e      	ldr	r3, [pc, #120]	; (8028618 <RTC_WeekDayNum+0x8c>)
 802859e:	fba3 3101 	umull	r3, r1, r3, r1
 80285a2:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 80285a6:	4463      	add	r3, ip
 80285a8:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 80285ac:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 80285b0:	4a1a      	ldr	r2, [pc, #104]	; (802861c <RTC_WeekDayNum+0x90>)
 80285b2:	fba2 2000 	umull	r2, r0, r2, r0
 80285b6:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 80285ba:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 80285be:	3304      	adds	r3, #4
 80285c0:	4817      	ldr	r0, [pc, #92]	; (8028620 <RTC_WeekDayNum+0x94>)
 80285c2:	fba0 2003 	umull	r2, r0, r0, r3
 80285c6:	1a1a      	subs	r2, r3, r0
 80285c8:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 80285cc:	0880      	lsrs	r0, r0, #2
 80285ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80285d2:	1a18      	subs	r0, r3, r0
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
  }

  return (uint8_t)weekday;
}
 80285d4:	b2c0      	uxtb	r0, r0
 80285d6:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80285d8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80285dc:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 80285e0:	4b0d      	ldr	r3, [pc, #52]	; (8028618 <RTC_WeekDayNum+0x8c>)
 80285e2:	fba3 3101 	umull	r3, r1, r3, r1
 80285e6:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 80285ea:	4463      	add	r3, ip
 80285ec:	eb03 039c 	add.w	r3, r3, ip, lsr #2
 80285f0:	4a0a      	ldr	r2, [pc, #40]	; (802861c <RTC_WeekDayNum+0x90>)
 80285f2:	fba2 120c 	umull	r1, r2, r2, ip
 80285f6:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
 80285fa:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 80285fe:	3302      	adds	r3, #2
 8028600:	4807      	ldr	r0, [pc, #28]	; (8028620 <RTC_WeekDayNum+0x94>)
 8028602:	fba0 2003 	umull	r2, r0, r0, r3
 8028606:	1a1a      	subs	r2, r3, r0
 8028608:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 802860c:	0880      	lsrs	r0, r0, #2
 802860e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8028612:	1a18      	subs	r0, r3, r0
 8028614:	e7de      	b.n	80285d4 <RTC_WeekDayNum+0x48>
 8028616:	bf00      	nop
 8028618:	38e38e39 	.word	0x38e38e39
 802861c:	51eb851f 	.word	0x51eb851f
 8028620:	24924925 	.word	0x24924925

08028624 <RTC_EnterInitMode>:
{
 8028624:	b538      	push	{r3, r4, r5, lr}
 8028626:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8028628:	f7fd fd92 	bl	8026150 <HAL_GetTick>
 802862c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 802862e:	6823      	ldr	r3, [r4, #0]
 8028630:	685a      	ldr	r2, [r3, #4]
 8028632:	f012 0f20 	tst.w	r2, #32
 8028636:	d107      	bne.n	8028648 <RTC_EnterInitMode+0x24>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8028638:	f7fd fd8a 	bl	8026150 <HAL_GetTick>
 802863c:	1b40      	subs	r0, r0, r5
 802863e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8028642:	d9f4      	bls.n	802862e <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8028644:	2003      	movs	r0, #3
 8028646:	e004      	b.n	8028652 <RTC_EnterInitMode+0x2e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8028648:	685a      	ldr	r2, [r3, #4]
 802864a:	f042 0210 	orr.w	r2, r2, #16
 802864e:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8028650:	2000      	movs	r0, #0
}
 8028652:	bd38      	pop	{r3, r4, r5, pc}

08028654 <RTC_ExitInitMode>:
{
 8028654:	b538      	push	{r3, r4, r5, lr}
 8028656:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8028658:	6802      	ldr	r2, [r0, #0]
 802865a:	6853      	ldr	r3, [r2, #4]
 802865c:	f023 0310 	bic.w	r3, r3, #16
 8028660:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8028662:	f7fd fd75 	bl	8026150 <HAL_GetTick>
 8028666:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8028668:	6823      	ldr	r3, [r4, #0]
 802866a:	685b      	ldr	r3, [r3, #4]
 802866c:	f013 0f20 	tst.w	r3, #32
 8028670:	d107      	bne.n	8028682 <RTC_ExitInitMode+0x2e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8028672:	f7fd fd6d 	bl	8026150 <HAL_GetTick>
 8028676:	1b40      	subs	r0, r0, r5
 8028678:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 802867c:	d9f4      	bls.n	8028668 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 802867e:	2003      	movs	r0, #3
 8028680:	e000      	b.n	8028684 <RTC_ExitInitMode+0x30>
  return HAL_OK;
 8028682:	2000      	movs	r0, #0
}
 8028684:	bd38      	pop	{r3, r4, r5, pc}

08028686 <RTC_WriteTimeCounter>:
{
 8028686:	b538      	push	{r3, r4, r5, lr}
 8028688:	4605      	mov	r5, r0
 802868a:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 802868c:	f7ff ffca 	bl	8028624 <RTC_EnterInitMode>
 8028690:	b108      	cbz	r0, 8028696 <RTC_WriteTimeCounter+0x10>
    status = HAL_ERROR;
 8028692:	2001      	movs	r0, #1
}
 8028694:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8028696:	682b      	ldr	r3, [r5, #0]
 8028698:	0c22      	lsrs	r2, r4, #16
 802869a:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 802869c:	682b      	ldr	r3, [r5, #0]
 802869e:	b2a4      	uxth	r4, r4
 80286a0:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80286a2:	4628      	mov	r0, r5
 80286a4:	f7ff ffd6 	bl	8028654 <RTC_ExitInitMode>
 80286a8:	2800      	cmp	r0, #0
 80286aa:	d0f3      	beq.n	8028694 <RTC_WriteTimeCounter+0xe>
      status = HAL_ERROR;
 80286ac:	2001      	movs	r0, #1
 80286ae:	e7f1      	b.n	8028694 <RTC_WriteTimeCounter+0xe>

080286b0 <RTC_WriteAlarmCounter>:
{
 80286b0:	b538      	push	{r3, r4, r5, lr}
 80286b2:	4605      	mov	r5, r0
 80286b4:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80286b6:	f7ff ffb5 	bl	8028624 <RTC_EnterInitMode>
 80286ba:	b108      	cbz	r0, 80286c0 <RTC_WriteAlarmCounter+0x10>
    status = HAL_ERROR;
 80286bc:	2001      	movs	r0, #1
}
 80286be:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80286c0:	682b      	ldr	r3, [r5, #0]
 80286c2:	0c22      	lsrs	r2, r4, #16
 80286c4:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80286c6:	682b      	ldr	r3, [r5, #0]
 80286c8:	b2a4      	uxth	r4, r4
 80286ca:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80286cc:	4628      	mov	r0, r5
 80286ce:	f7ff ffc1 	bl	8028654 <RTC_ExitInitMode>
 80286d2:	2800      	cmp	r0, #0
 80286d4:	d0f3      	beq.n	80286be <RTC_WriteAlarmCounter+0xe>
      status = HAL_ERROR;
 80286d6:	2001      	movs	r0, #1
 80286d8:	e7f1      	b.n	80286be <RTC_WriteAlarmCounter+0xe>

080286da <HAL_RTC_SetTime>:
{
 80286da:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 80286dc:	2800      	cmp	r0, #0
 80286de:	d057      	beq.n	8028790 <HAL_RTC_SetTime+0xb6>
 80286e0:	460d      	mov	r5, r1
 80286e2:	4606      	mov	r6, r0
 80286e4:	2900      	cmp	r1, #0
 80286e6:	d055      	beq.n	8028794 <HAL_RTC_SetTime+0xba>
  __HAL_LOCK(hrtc);
 80286e8:	7c03      	ldrb	r3, [r0, #16]
 80286ea:	2b01      	cmp	r3, #1
 80286ec:	d054      	beq.n	8028798 <HAL_RTC_SetTime+0xbe>
 80286ee:	2301      	movs	r3, #1
 80286f0:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80286f2:	2302      	movs	r3, #2
 80286f4:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 80286f6:	b9ba      	cbnz	r2, 8028728 <HAL_RTC_SetTime+0x4e>
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80286f8:	780b      	ldrb	r3, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 80286fa:	784c      	ldrb	r4, [r1, #1]
 80286fc:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8028700:	00a4      	lsls	r4, r4, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8028702:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8028706:	fb02 4403 	mla	r4, r2, r3, r4
                              ((uint32_t)sTime->Seconds));
 802870a:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 802870c:	441c      	add	r4, r3
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 802870e:	4621      	mov	r1, r4
 8028710:	4630      	mov	r0, r6
 8028712:	f7ff ffb8 	bl	8028686 <RTC_WriteTimeCounter>
 8028716:	4605      	mov	r5, r0
 8028718:	b1c8      	cbz	r0, 802874e <HAL_RTC_SetTime+0x74>
    hrtc->State = HAL_RTC_STATE_ERROR;
 802871a:	2304      	movs	r3, #4
 802871c:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 802871e:	2300      	movs	r3, #0
 8028720:	7433      	strb	r3, [r6, #16]
    return HAL_ERROR;
 8028722:	2501      	movs	r5, #1
}
 8028724:	4628      	mov	r0, r5
 8028726:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8028728:	7808      	ldrb	r0, [r1, #0]
 802872a:	f7ff ff25 	bl	8028578 <RTC_Bcd2ToByte>
 802872e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8028732:	fb03 f400 	mul.w	r4, r3, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8028736:	7868      	ldrb	r0, [r5, #1]
 8028738:	f7ff ff1e 	bl	8028578 <RTC_Bcd2ToByte>
 802873c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8028740:	eb04 0480 	add.w	r4, r4, r0, lsl #2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8028744:	78a8      	ldrb	r0, [r5, #2]
 8028746:	f7ff ff17 	bl	8028578 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 802874a:	4404      	add	r4, r0
 802874c:	e7df      	b.n	802870e <HAL_RTC_SetTime+0x34>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 802874e:	6832      	ldr	r2, [r6, #0]
 8028750:	6853      	ldr	r3, [r2, #4]
 8028752:	f023 0305 	bic.w	r3, r3, #5
 8028756:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8028758:	4630      	mov	r0, r6
 802875a:	f7ff ff06 	bl	802856a <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 802875e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8028762:	d001      	beq.n	8028768 <HAL_RTC_SetTime+0x8e>
      if (counter_alarm < counter_time)
 8028764:	4284      	cmp	r4, r0
 8028766:	d804      	bhi.n	8028772 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 8028768:	2301      	movs	r3, #1
 802876a:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 802876c:	2300      	movs	r3, #0
 802876e:	7433      	strb	r3, [r6, #16]
    return HAL_OK;
 8028770:	e7d8      	b.n	8028724 <HAL_RTC_SetTime+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8028772:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8028776:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 802877a:	4630      	mov	r0, r6
 802877c:	f7ff ff98 	bl	80286b0 <RTC_WriteAlarmCounter>
 8028780:	2800      	cmp	r0, #0
 8028782:	d0f1      	beq.n	8028768 <HAL_RTC_SetTime+0x8e>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8028784:	2304      	movs	r3, #4
 8028786:	7473      	strb	r3, [r6, #17]
          __HAL_UNLOCK(hrtc);
 8028788:	2300      	movs	r3, #0
 802878a:	7433      	strb	r3, [r6, #16]
          return HAL_ERROR;
 802878c:	2501      	movs	r5, #1
 802878e:	e7c9      	b.n	8028724 <HAL_RTC_SetTime+0x4a>
    return HAL_ERROR;
 8028790:	2501      	movs	r5, #1
 8028792:	e7c7      	b.n	8028724 <HAL_RTC_SetTime+0x4a>
 8028794:	2501      	movs	r5, #1
 8028796:	e7c5      	b.n	8028724 <HAL_RTC_SetTime+0x4a>
  __HAL_LOCK(hrtc);
 8028798:	2502      	movs	r5, #2
 802879a:	e7c3      	b.n	8028724 <HAL_RTC_SetTime+0x4a>

0802879c <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 802879c:	2800      	cmp	r0, #0
 802879e:	d05a      	beq.n	8028856 <HAL_RTC_SetDate+0xba>
{
 80287a0:	b538      	push	{r3, r4, r5, lr}
 80287a2:	460d      	mov	r5, r1
 80287a4:	4604      	mov	r4, r0
  if ((hrtc == NULL) || (sDate == NULL))
 80287a6:	2900      	cmp	r1, #0
 80287a8:	d057      	beq.n	802885a <HAL_RTC_SetDate+0xbe>
  __HAL_LOCK(hrtc);
 80287aa:	7c03      	ldrb	r3, [r0, #16]
 80287ac:	2b01      	cmp	r3, #1
 80287ae:	d056      	beq.n	802885e <HAL_RTC_SetDate+0xc2>
 80287b0:	2301      	movs	r3, #1
 80287b2:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80287b4:	2302      	movs	r3, #2
 80287b6:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 80287b8:	b9ba      	cbnz	r2, 80287ea <HAL_RTC_SetDate+0x4e>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80287ba:	78cb      	ldrb	r3, [r1, #3]
 80287bc:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80287be:	784b      	ldrb	r3, [r1, #1]
 80287c0:	7343      	strb	r3, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80287c2:	788b      	ldrb	r3, [r1, #2]
 80287c4:	7383      	strb	r3, [r0, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80287c6:	7ba2      	ldrb	r2, [r4, #14]
 80287c8:	7b61      	ldrb	r1, [r4, #13]
 80287ca:	7be0      	ldrb	r0, [r4, #15]
 80287cc:	f7ff fede 	bl	802858c <RTC_WeekDayNum>
 80287d0:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80287d2:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 80287d4:	4620      	mov	r0, r4
 80287d6:	f7ff feb3 	bl	8028540 <RTC_ReadTimeCounter>
  if (hours > 24U)
 80287da:	4b22      	ldr	r3, [pc, #136]	; (8028864 <HAL_RTC_SetDate+0xc8>)
 80287dc:	4298      	cmp	r0, r3
 80287de:	d811      	bhi.n	8028804 <HAL_RTC_SetDate+0x68>
  hrtc->State = HAL_RTC_STATE_READY ;
 80287e0:	2301      	movs	r3, #1
 80287e2:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 80287e4:	2000      	movs	r0, #0
 80287e6:	7420      	strb	r0, [r4, #16]
}
 80287e8:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80287ea:	78c8      	ldrb	r0, [r1, #3]
 80287ec:	f7ff fec4 	bl	8028578 <RTC_Bcd2ToByte>
 80287f0:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80287f2:	7868      	ldrb	r0, [r5, #1]
 80287f4:	f7ff fec0 	bl	8028578 <RTC_Bcd2ToByte>
 80287f8:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80287fa:	78a8      	ldrb	r0, [r5, #2]
 80287fc:	f7ff febc 	bl	8028578 <RTC_Bcd2ToByte>
 8028800:	73a0      	strb	r0, [r4, #14]
 8028802:	e7e0      	b.n	80287c6 <HAL_RTC_SetDate+0x2a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8028804:	4d18      	ldr	r5, [pc, #96]	; (8028868 <HAL_RTC_SetDate+0xcc>)
 8028806:	fba5 3500 	umull	r3, r5, r5, r0
 802880a:	0c2d      	lsrs	r5, r5, #16
 802880c:	4b17      	ldr	r3, [pc, #92]	; (802886c <HAL_RTC_SetDate+0xd0>)
 802880e:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8028812:	4629      	mov	r1, r5
 8028814:	4620      	mov	r0, r4
 8028816:	f7ff ff36 	bl	8028686 <RTC_WriteTimeCounter>
 802881a:	b128      	cbz	r0, 8028828 <HAL_RTC_SetDate+0x8c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 802881c:	2304      	movs	r3, #4
 802881e:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8028820:	2300      	movs	r3, #0
 8028822:	7423      	strb	r3, [r4, #16]
      return HAL_ERROR;
 8028824:	2001      	movs	r0, #1
 8028826:	e7df      	b.n	80287e8 <HAL_RTC_SetDate+0x4c>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8028828:	4620      	mov	r0, r4
 802882a:	f7ff fe9e 	bl	802856a <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 802882e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8028832:	d0d5      	beq.n	80287e0 <HAL_RTC_SetDate+0x44>
      if (counter_alarm < counter_time)
 8028834:	4285      	cmp	r5, r0
 8028836:	d9d3      	bls.n	80287e0 <HAL_RTC_SetDate+0x44>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8028838:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 802883c:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8028840:	4620      	mov	r0, r4
 8028842:	f7ff ff35 	bl	80286b0 <RTC_WriteAlarmCounter>
 8028846:	2800      	cmp	r0, #0
 8028848:	d0ca      	beq.n	80287e0 <HAL_RTC_SetDate+0x44>
          hrtc->State = HAL_RTC_STATE_ERROR;
 802884a:	2304      	movs	r3, #4
 802884c:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 802884e:	2300      	movs	r3, #0
 8028850:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8028852:	2001      	movs	r0, #1
 8028854:	e7c8      	b.n	80287e8 <HAL_RTC_SetDate+0x4c>
    return HAL_ERROR;
 8028856:	2001      	movs	r0, #1
}
 8028858:	4770      	bx	lr
    return HAL_ERROR;
 802885a:	2001      	movs	r0, #1
 802885c:	e7c4      	b.n	80287e8 <HAL_RTC_SetDate+0x4c>
  __HAL_LOCK(hrtc);
 802885e:	2002      	movs	r0, #2
 8028860:	e7c2      	b.n	80287e8 <HAL_RTC_SetDate+0x4c>
 8028862:	bf00      	nop
 8028864:	00015f8f 	.word	0x00015f8f
 8028868:	c22e4507 	.word	0xc22e4507
 802886c:	00015180 	.word	0x00015180

08028870 <HAL_RTC_AlarmAEventCallback>:
}
 8028870:	4770      	bx	lr
	...

08028874 <HAL_RTC_AlarmIRQHandler>:
{
 8028874:	b510      	push	{r4, lr}
 8028876:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8028878:	6803      	ldr	r3, [r0, #0]
 802887a:	681a      	ldr	r2, [r3, #0]
 802887c:	f012 0f02 	tst.w	r2, #2
 8028880:	d003      	beq.n	802888a <HAL_RTC_AlarmIRQHandler+0x16>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8028882:	685b      	ldr	r3, [r3, #4]
 8028884:	f013 0f02 	tst.w	r3, #2
 8028888:	d106      	bne.n	8028898 <HAL_RTC_AlarmIRQHandler+0x24>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 802888a:	4b07      	ldr	r3, [pc, #28]	; (80288a8 <HAL_RTC_AlarmIRQHandler+0x34>)
 802888c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8028890:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 8028892:	2301      	movs	r3, #1
 8028894:	7463      	strb	r3, [r4, #17]
}
 8028896:	bd10      	pop	{r4, pc}
      HAL_RTC_AlarmAEventCallback(hrtc);
 8028898:	f7ff ffea 	bl	8028870 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 802889c:	6822      	ldr	r2, [r4, #0]
 802889e:	6853      	ldr	r3, [r2, #4]
 80288a0:	f023 0302 	bic.w	r3, r3, #2
 80288a4:	6053      	str	r3, [r2, #4]
 80288a6:	e7f0      	b.n	802888a <HAL_RTC_AlarmIRQHandler+0x16>
 80288a8:	40010400 	.word	0x40010400

080288ac <HAL_RTC_WaitForSynchro>:
  if (hrtc == NULL)
 80288ac:	b1c0      	cbz	r0, 80288e0 <HAL_RTC_WaitForSynchro+0x34>
{
 80288ae:	b538      	push	{r3, r4, r5, lr}
 80288b0:	4605      	mov	r5, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80288b2:	6802      	ldr	r2, [r0, #0]
 80288b4:	6853      	ldr	r3, [r2, #4]
 80288b6:	f023 0308 	bic.w	r3, r3, #8
 80288ba:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80288bc:	f7fd fc48 	bl	8026150 <HAL_GetTick>
 80288c0:	4604      	mov	r4, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80288c2:	682b      	ldr	r3, [r5, #0]
 80288c4:	685b      	ldr	r3, [r3, #4]
 80288c6:	f013 0f08 	tst.w	r3, #8
 80288ca:	d107      	bne.n	80288dc <HAL_RTC_WaitForSynchro+0x30>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80288cc:	f7fd fc40 	bl	8026150 <HAL_GetTick>
 80288d0:	1b00      	subs	r0, r0, r4
 80288d2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80288d6:	d9f4      	bls.n	80288c2 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80288d8:	2003      	movs	r0, #3
 80288da:	e000      	b.n	80288de <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 80288dc:	2000      	movs	r0, #0
}
 80288de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80288e0:	2001      	movs	r0, #1
}
 80288e2:	4770      	bx	lr

080288e4 <HAL_RTC_Init>:
  if (hrtc == NULL)
 80288e4:	2800      	cmp	r0, #0
 80288e6:	d050      	beq.n	802898a <HAL_RTC_Init+0xa6>
{
 80288e8:	b510      	push	{r4, lr}
 80288ea:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80288ec:	7c43      	ldrb	r3, [r0, #17]
 80288ee:	b14b      	cbz	r3, 8028904 <HAL_RTC_Init+0x20>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80288f0:	2302      	movs	r3, #2
 80288f2:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80288f4:	4620      	mov	r0, r4
 80288f6:	f7ff ffd9 	bl	80288ac <HAL_RTC_WaitForSynchro>
 80288fa:	b138      	cbz	r0, 802890c <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 80288fc:	2304      	movs	r3, #4
 80288fe:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8028900:	2001      	movs	r0, #1
}
 8028902:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8028904:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8028906:	f7fc fd0f 	bl	8025328 <HAL_RTC_MspInit>
 802890a:	e7f1      	b.n	80288f0 <HAL_RTC_Init+0xc>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 802890c:	4620      	mov	r0, r4
 802890e:	f7ff fe89 	bl	8028624 <RTC_EnterInitMode>
 8028912:	bb28      	cbnz	r0, 8028960 <HAL_RTC_Init+0x7c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8028914:	6822      	ldr	r2, [r4, #0]
 8028916:	6853      	ldr	r3, [r2, #4]
 8028918:	f023 0307 	bic.w	r3, r3, #7
 802891c:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 802891e:	68a3      	ldr	r3, [r4, #8]
 8028920:	b123      	cbz	r3, 802892c <HAL_RTC_Init+0x48>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8028922:	4a1b      	ldr	r2, [pc, #108]	; (8028990 <HAL_RTC_Init+0xac>)
 8028924:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8028926:	f023 0301 	bic.w	r3, r3, #1
 802892a:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 802892c:	4a18      	ldr	r2, [pc, #96]	; (8028990 <HAL_RTC_Init+0xac>)
 802892e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8028930:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8028934:	68a1      	ldr	r1, [r4, #8]
 8028936:	430b      	orrs	r3, r1
 8028938:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 802893a:	6863      	ldr	r3, [r4, #4]
 802893c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028940:	d012      	beq.n	8028968 <HAL_RTC_Init+0x84>
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8028942:	6822      	ldr	r2, [r4, #0]
 8028944:	f3c3 4103 	ubfx	r1, r3, #16, #4
 8028948:	6091      	str	r1, [r2, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 802894a:	6822      	ldr	r2, [r4, #0]
 802894c:	b29b      	uxth	r3, r3
 802894e:	60d3      	str	r3, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8028950:	4620      	mov	r0, r4
 8028952:	f7ff fe7f 	bl	8028654 <RTC_ExitInitMode>
 8028956:	b188      	cbz	r0, 802897c <HAL_RTC_Init+0x98>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8028958:	2304      	movs	r3, #4
 802895a:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 802895c:	2001      	movs	r0, #1
 802895e:	e7d0      	b.n	8028902 <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8028960:	2304      	movs	r3, #4
 8028962:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8028964:	2001      	movs	r0, #1
 8028966:	e7cc      	b.n	8028902 <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8028968:	2001      	movs	r0, #1
 802896a:	f7ff fd6f 	bl	802844c <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 802896e:	b108      	cbz	r0, 8028974 <HAL_RTC_Init+0x90>
        prescaler = prescaler - 1U;
 8028970:	1e43      	subs	r3, r0, #1
 8028972:	e7e6      	b.n	8028942 <HAL_RTC_Init+0x5e>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8028974:	2304      	movs	r3, #4
 8028976:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 8028978:	2001      	movs	r0, #1
 802897a:	e7c2      	b.n	8028902 <HAL_RTC_Init+0x1e>
    hrtc->DateToUpdate.Year = 0x00U;
 802897c:	2300      	movs	r3, #0
 802897e:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8028980:	2301      	movs	r3, #1
 8028982:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8028984:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8028986:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8028988:	e7bb      	b.n	8028902 <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
 802898a:	2001      	movs	r0, #1
}
 802898c:	4770      	bx	lr
 802898e:	bf00      	nop
 8028990:	40006c00 	.word	0x40006c00

08028994 <HAL_RTCEx_RTCEventCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8028994:	4770      	bx	lr

08028996 <HAL_RTCEx_RTCEventErrorCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8028996:	4770      	bx	lr

08028998 <HAL_RTCEx_RTCIRQHandler>:
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8028998:	6803      	ldr	r3, [r0, #0]
 802899a:	681a      	ldr	r2, [r3, #0]
 802899c:	f012 0f01 	tst.w	r2, #1
 80289a0:	d01c      	beq.n	80289dc <HAL_RTCEx_RTCIRQHandler+0x44>
{
 80289a2:	b510      	push	{r4, lr}
 80289a4:	4604      	mov	r4, r0
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80289a6:	685a      	ldr	r2, [r3, #4]
 80289a8:	f012 0f01 	tst.w	r2, #1
 80289ac:	d010      	beq.n	80289d0 <HAL_RTCEx_RTCIRQHandler+0x38>
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80289ae:	685b      	ldr	r3, [r3, #4]
 80289b0:	f013 0f04 	tst.w	r3, #4
 80289b4:	d00d      	beq.n	80289d2 <HAL_RTCEx_RTCIRQHandler+0x3a>
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80289b6:	f7ff ffee 	bl	8028996 <HAL_RTCEx_RTCEventErrorCallback>
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80289ba:	6823      	ldr	r3, [r4, #0]
 80289bc:	f06f 0204 	mvn.w	r2, #4
 80289c0:	605a      	str	r2, [r3, #4]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80289c2:	2304      	movs	r3, #4
 80289c4:	7463      	strb	r3, [r4, #17]
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80289c6:	6822      	ldr	r2, [r4, #0]
 80289c8:	6853      	ldr	r3, [r2, #4]
 80289ca:	f023 0301 	bic.w	r3, r3, #1
 80289ce:	6053      	str	r3, [r2, #4]
}
 80289d0:	bd10      	pop	{r4, pc}
        HAL_RTCEx_RTCEventCallback(hrtc);
 80289d2:	f7ff ffdf 	bl	8028994 <HAL_RTCEx_RTCEventCallback>
        hrtc->State = HAL_RTC_STATE_READY;
 80289d6:	2301      	movs	r3, #1
 80289d8:	7463      	strb	r3, [r4, #17]
 80289da:	e7f4      	b.n	80289c6 <HAL_RTCEx_RTCIRQHandler+0x2e>
 80289dc:	4770      	bx	lr
	...

080289e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80289e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80289e4:	b082      	sub	sp, #8
 80289e6:	4605      	mov	r5, r0
 80289e8:	4688      	mov	r8, r1
 80289ea:	4617      	mov	r7, r2
 80289ec:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80289ee:	f7fd fbaf 	bl	8026150 <HAL_GetTick>
 80289f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80289f4:	1a1b      	subs	r3, r3, r0
 80289f6:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80289fa:	f7fd fba9 	bl	8026150 <HAL_GetTick>
 80289fe:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8028a00:	4b2a      	ldr	r3, [pc, #168]	; (8028aac <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8028a02:	681b      	ldr	r3, [r3, #0]
 8028a04:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8028a08:	fb09 f303 	mul.w	r3, r9, r3
 8028a0c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028a0e:	682b      	ldr	r3, [r5, #0]
 8028a10:	689c      	ldr	r4, [r3, #8]
 8028a12:	ea38 0404 	bics.w	r4, r8, r4
 8028a16:	bf0c      	ite	eq
 8028a18:	2301      	moveq	r3, #1
 8028a1a:	2300      	movne	r3, #0
 8028a1c:	42bb      	cmp	r3, r7
 8028a1e:	d040      	beq.n	8028aa2 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8028a20:	f1b6 3fff 	cmp.w	r6, #4294967295
 8028a24:	d0f3      	beq.n	8028a0e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8028a26:	f7fd fb93 	bl	8026150 <HAL_GetTick>
 8028a2a:	eba0 000a 	sub.w	r0, r0, sl
 8028a2e:	4548      	cmp	r0, r9
 8028a30:	d20a      	bcs.n	8028a48 <SPI_WaitFlagStateUntilTimeout+0x68>
 8028a32:	f1b9 0f00 	cmp.w	r9, #0
 8028a36:	d007      	beq.n	8028a48 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8028a38:	9a01      	ldr	r2, [sp, #4]
 8028a3a:	b102      	cbz	r2, 8028a3e <SPI_WaitFlagStateUntilTimeout+0x5e>
 8028a3c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8028a3e:	9b01      	ldr	r3, [sp, #4]
 8028a40:	3b01      	subs	r3, #1
 8028a42:	9301      	str	r3, [sp, #4]
 8028a44:	4691      	mov	r9, r2
 8028a46:	e7e2      	b.n	8028a0e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8028a48:	682a      	ldr	r2, [r5, #0]
 8028a4a:	6853      	ldr	r3, [r2, #4]
 8028a4c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8028a50:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028a52:	686b      	ldr	r3, [r5, #4]
 8028a54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028a58:	d00b      	beq.n	8028a72 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8028a5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8028a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028a60:	d014      	beq.n	8028a8c <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8028a62:	2301      	movs	r3, #1
 8028a64:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8028a68:	2300      	movs	r3, #0
 8028a6a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8028a6e:	2003      	movs	r0, #3
 8028a70:	e018      	b.n	8028aa4 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028a72:	68ab      	ldr	r3, [r5, #8]
 8028a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028a78:	d002      	beq.n	8028a80 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028a7e:	d1ec      	bne.n	8028a5a <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8028a80:	682a      	ldr	r2, [r5, #0]
 8028a82:	6813      	ldr	r3, [r2, #0]
 8028a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8028a88:	6013      	str	r3, [r2, #0]
 8028a8a:	e7e6      	b.n	8028a5a <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8028a8c:	682a      	ldr	r2, [r5, #0]
 8028a8e:	6813      	ldr	r3, [r2, #0]
 8028a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8028a94:	6013      	str	r3, [r2, #0]
 8028a96:	682a      	ldr	r2, [r5, #0]
 8028a98:	6813      	ldr	r3, [r2, #0]
 8028a9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8028a9e:	6013      	str	r3, [r2, #0]
 8028aa0:	e7df      	b.n	8028a62 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8028aa2:	2000      	movs	r0, #0
}
 8028aa4:	b002      	add	sp, #8
 8028aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028aaa:	bf00      	nop
 8028aac:	20000090 	.word	0x20000090

08028ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8028ab0:	b510      	push	{r4, lr}
 8028ab2:	b082      	sub	sp, #8
 8028ab4:	4604      	mov	r4, r0
 8028ab6:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028ab8:	9200      	str	r2, [sp, #0]
 8028aba:	2200      	movs	r2, #0
 8028abc:	2180      	movs	r1, #128	; 0x80
 8028abe:	f7ff ff8f 	bl	80289e0 <SPI_WaitFlagStateUntilTimeout>
 8028ac2:	b908      	cbnz	r0, 8028ac8 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8028ac4:	b002      	add	sp, #8
 8028ac6:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028ac8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8028aca:	f043 0320 	orr.w	r3, r3, #32
 8028ace:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8028ad0:	2003      	movs	r0, #3
 8028ad2:	e7f7      	b.n	8028ac4 <SPI_EndRxTxTransaction+0x14>

08028ad4 <HAL_SPI_Init>:
  if (hspi == NULL)
 8028ad4:	2800      	cmp	r0, #0
 8028ad6:	d056      	beq.n	8028b86 <HAL_SPI_Init+0xb2>
{
 8028ad8:	b510      	push	{r4, lr}
 8028ada:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8028adc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8028ade:	b933      	cbnz	r3, 8028aee <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028ae0:	6843      	ldr	r3, [r0, #4]
 8028ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028ae6:	d005      	beq.n	8028af4 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8028ae8:	2300      	movs	r3, #0
 8028aea:	61c3      	str	r3, [r0, #28]
 8028aec:	e002      	b.n	8028af4 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8028aee:	2300      	movs	r3, #0
 8028af0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8028af2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8028af4:	2300      	movs	r3, #0
 8028af6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8028af8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8028afc:	2b00      	cmp	r3, #0
 8028afe:	d03c      	beq.n	8028b7a <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8028b00:	2302      	movs	r3, #2
 8028b02:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8028b06:	6822      	ldr	r2, [r4, #0]
 8028b08:	6813      	ldr	r3, [r2, #0]
 8028b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8028b0e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8028b10:	6863      	ldr	r3, [r4, #4]
 8028b12:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8028b16:	68a2      	ldr	r2, [r4, #8]
 8028b18:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8028b1c:	4313      	orrs	r3, r2
 8028b1e:	68e2      	ldr	r2, [r4, #12]
 8028b20:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8028b24:	4313      	orrs	r3, r2
 8028b26:	6922      	ldr	r2, [r4, #16]
 8028b28:	f002 0202 	and.w	r2, r2, #2
 8028b2c:	4313      	orrs	r3, r2
 8028b2e:	6962      	ldr	r2, [r4, #20]
 8028b30:	f002 0201 	and.w	r2, r2, #1
 8028b34:	4313      	orrs	r3, r2
 8028b36:	69a2      	ldr	r2, [r4, #24]
 8028b38:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8028b3c:	4313      	orrs	r3, r2
 8028b3e:	69e2      	ldr	r2, [r4, #28]
 8028b40:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8028b44:	4313      	orrs	r3, r2
 8028b46:	6a22      	ldr	r2, [r4, #32]
 8028b48:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8028b4c:	4313      	orrs	r3, r2
 8028b4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8028b50:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8028b54:	6821      	ldr	r1, [r4, #0]
 8028b56:	4313      	orrs	r3, r2
 8028b58:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8028b5a:	8b63      	ldrh	r3, [r4, #26]
 8028b5c:	6822      	ldr	r2, [r4, #0]
 8028b5e:	f003 0304 	and.w	r3, r3, #4
 8028b62:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8028b64:	6822      	ldr	r2, [r4, #0]
 8028b66:	69d3      	ldr	r3, [r2, #28]
 8028b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8028b6c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8028b6e:	2000      	movs	r0, #0
 8028b70:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8028b72:	2301      	movs	r3, #1
 8028b74:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8028b78:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8028b7a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8028b7e:	4620      	mov	r0, r4
 8028b80:	f7fc fc02 	bl	8025388 <HAL_SPI_MspInit>
 8028b84:	e7bc      	b.n	8028b00 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8028b86:	2001      	movs	r0, #1
}
 8028b88:	4770      	bx	lr
	...

08028b8c <HAL_SPI_TransmitReceive_IT>:
{
 8028b8c:	4684      	mov	ip, r0
  __HAL_LOCK(hspi);
 8028b8e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8028b92:	2801      	cmp	r0, #1
 8028b94:	d064      	beq.n	8028c60 <HAL_SPI_TransmitReceive_IT+0xd4>
{
 8028b96:	b410      	push	{r4}
  __HAL_LOCK(hspi);
 8028b98:	2001      	movs	r0, #1
 8028b9a:	f88c 0050 	strb.w	r0, [ip, #80]	; 0x50
  tmp_state           = hspi->State;
 8028b9e:	f89c 0051 	ldrb.w	r0, [ip, #81]	; 0x51
 8028ba2:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8028ba4:	f8dc 4004 	ldr.w	r4, [ip, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8028ba8:	2801      	cmp	r0, #1
 8028baa:	d008      	beq.n	8028bbe <HAL_SPI_TransmitReceive_IT+0x32>
 8028bac:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8028bb0:	d144      	bne.n	8028c3c <HAL_SPI_TransmitReceive_IT+0xb0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8028bb2:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8028bb6:	2c00      	cmp	r4, #0
 8028bb8:	d146      	bne.n	8028c48 <HAL_SPI_TransmitReceive_IT+0xbc>
 8028bba:	2804      	cmp	r0, #4
 8028bbc:	d146      	bne.n	8028c4c <HAL_SPI_TransmitReceive_IT+0xc0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028bbe:	2900      	cmp	r1, #0
 8028bc0:	d046      	beq.n	8028c50 <HAL_SPI_TransmitReceive_IT+0xc4>
 8028bc2:	2a00      	cmp	r2, #0
 8028bc4:	d046      	beq.n	8028c54 <HAL_SPI_TransmitReceive_IT+0xc8>
 8028bc6:	2b00      	cmp	r3, #0
 8028bc8:	d046      	beq.n	8028c58 <HAL_SPI_TransmitReceive_IT+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028bca:	f89c 0051 	ldrb.w	r0, [ip, #81]	; 0x51
 8028bce:	b2c0      	uxtb	r0, r0
 8028bd0:	2804      	cmp	r0, #4
 8028bd2:	d002      	beq.n	8028bda <HAL_SPI_TransmitReceive_IT+0x4e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8028bd4:	2005      	movs	r0, #5
 8028bd6:	f88c 0051 	strb.w	r0, [ip, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028bda:	2000      	movs	r0, #0
 8028bdc:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8028be0:	f8cc 1030 	str.w	r1, [ip, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8028be4:	f8ac 3034 	strh.w	r3, [ip, #52]	; 0x34
  hspi->TxXferCount = Size;
 8028be8:	f8ac 3036 	strh.w	r3, [ip, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8028bec:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8028bf0:	f8ac 303c 	strh.w	r3, [ip, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8028bf4:	f8ac 303e 	strh.w	r3, [ip, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8028bf8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8028bfc:	b1bb      	cbz	r3, 8028c2e <HAL_SPI_TransmitReceive_IT+0xa2>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8028bfe:	4b19      	ldr	r3, [pc, #100]	; (8028c64 <HAL_SPI_TransmitReceive_IT+0xd8>)
 8028c00:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8028c04:	4b18      	ldr	r3, [pc, #96]	; (8028c68 <HAL_SPI_TransmitReceive_IT+0xdc>)
 8028c06:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8028c0a:	f8dc 2000 	ldr.w	r2, [ip]
 8028c0e:	6853      	ldr	r3, [r2, #4]
 8028c10:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8028c14:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028c16:	f8dc 3000 	ldr.w	r3, [ip]
 8028c1a:	681a      	ldr	r2, [r3, #0]
 8028c1c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8028c20:	d11c      	bne.n	8028c5c <HAL_SPI_TransmitReceive_IT+0xd0>
    __HAL_SPI_ENABLE(hspi);
 8028c22:	681a      	ldr	r2, [r3, #0]
 8028c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028c28:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8028c2a:	2000      	movs	r0, #0
 8028c2c:	e007      	b.n	8028c3e <HAL_SPI_TransmitReceive_IT+0xb2>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8028c2e:	4b0f      	ldr	r3, [pc, #60]	; (8028c6c <HAL_SPI_TransmitReceive_IT+0xe0>)
 8028c30:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8028c34:	4b0e      	ldr	r3, [pc, #56]	; (8028c70 <HAL_SPI_TransmitReceive_IT+0xe4>)
 8028c36:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
 8028c3a:	e7e6      	b.n	8028c0a <HAL_SPI_TransmitReceive_IT+0x7e>
    errorcode = HAL_BUSY;
 8028c3c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8028c3e:	2300      	movs	r3, #0
 8028c40:	f88c 3050 	strb.w	r3, [ip, #80]	; 0x50
}
 8028c44:	bc10      	pop	{r4}
 8028c46:	4770      	bx	lr
    errorcode = HAL_BUSY;
 8028c48:	2002      	movs	r0, #2
 8028c4a:	e7f8      	b.n	8028c3e <HAL_SPI_TransmitReceive_IT+0xb2>
 8028c4c:	2002      	movs	r0, #2
 8028c4e:	e7f6      	b.n	8028c3e <HAL_SPI_TransmitReceive_IT+0xb2>
    errorcode = HAL_ERROR;
 8028c50:	2001      	movs	r0, #1
 8028c52:	e7f4      	b.n	8028c3e <HAL_SPI_TransmitReceive_IT+0xb2>
 8028c54:	2001      	movs	r0, #1
 8028c56:	e7f2      	b.n	8028c3e <HAL_SPI_TransmitReceive_IT+0xb2>
 8028c58:	2001      	movs	r0, #1
 8028c5a:	e7f0      	b.n	8028c3e <HAL_SPI_TransmitReceive_IT+0xb2>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8028c5c:	2000      	movs	r0, #0
 8028c5e:	e7ee      	b.n	8028c3e <HAL_SPI_TransmitReceive_IT+0xb2>
  __HAL_LOCK(hspi);
 8028c60:	2002      	movs	r0, #2
}
 8028c62:	4770      	bx	lr
 8028c64:	08028dd5 	.word	0x08028dd5
 8028c68:	08028d9d 	.word	0x08028d9d
 8028c6c:	08028d65 	.word	0x08028d65
 8028c70:	08028d2d 	.word	0x08028d2d

08028c74 <HAL_SPI_RxCpltCallback>:
}
 8028c74:	4770      	bx	lr

08028c76 <HAL_SPI_TxRxCpltCallback>:
}
 8028c76:	4770      	bx	lr

08028c78 <HAL_SPI_ErrorCallback>:
}
 8028c78:	4770      	bx	lr
	...

08028c7c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8028c7c:	b510      	push	{r4, lr}
 8028c7e:	b082      	sub	sp, #8
 8028c80:	4604      	mov	r4, r0
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8028c82:	4b28      	ldr	r3, [pc, #160]	; (8028d24 <SPI_CloseRxTx_ISR+0xa8>)
 8028c84:	681b      	ldr	r3, [r3, #0]
 8028c86:	4a28      	ldr	r2, [pc, #160]	; (8028d28 <SPI_CloseRxTx_ISR+0xac>)
 8028c88:	fba2 2303 	umull	r2, r3, r2, r3
 8028c8c:	0a5b      	lsrs	r3, r3, #9
 8028c8e:	2264      	movs	r2, #100	; 0x64
 8028c90:	fb02 f303 	mul.w	r3, r2, r3
 8028c94:	9301      	str	r3, [sp, #4]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8028c96:	f7fd fa5b 	bl	8026150 <HAL_GetTick>
 8028c9a:	4602      	mov	r2, r0

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8028c9c:	6821      	ldr	r1, [r4, #0]
 8028c9e:	684b      	ldr	r3, [r1, #4]
 8028ca0:	f023 0320 	bic.w	r3, r3, #32
 8028ca4:	604b      	str	r3, [r1, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8028ca6:	9b01      	ldr	r3, [sp, #4]
 8028ca8:	b143      	cbz	r3, 8028cbc <SPI_CloseRxTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      break;
    }
    count--;
 8028caa:	9b01      	ldr	r3, [sp, #4]
 8028cac:	3b01      	subs	r3, #1
 8028cae:	9301      	str	r3, [sp, #4]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8028cb0:	6823      	ldr	r3, [r4, #0]
 8028cb2:	689b      	ldr	r3, [r3, #8]
 8028cb4:	f013 0f02 	tst.w	r3, #2
 8028cb8:	d0f5      	beq.n	8028ca6 <SPI_CloseRxTx_ISR+0x2a>
 8028cba:	e003      	b.n	8028cc4 <SPI_CloseRxTx_ISR+0x48>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028cbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8028cbe:	f043 0320 	orr.w	r3, r3, #32
 8028cc2:	6563      	str	r3, [r4, #84]	; 0x54

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8028cc4:	2164      	movs	r1, #100	; 0x64
 8028cc6:	4620      	mov	r0, r4
 8028cc8:	f7ff fef2 	bl	8028ab0 <SPI_EndRxTxTransaction>
 8028ccc:	b118      	cbz	r0, 8028cd6 <SPI_CloseRxTx_ISR+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028cce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8028cd0:	f043 0320 	orr.w	r3, r3, #32
 8028cd4:	6563      	str	r3, [r4, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028cd6:	68a3      	ldr	r3, [r4, #8]
 8028cd8:	b933      	cbnz	r3, 8028ce8 <SPI_CloseRxTx_ISR+0x6c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028cda:	9300      	str	r3, [sp, #0]
 8028cdc:	6823      	ldr	r3, [r4, #0]
 8028cde:	68da      	ldr	r2, [r3, #12]
 8028ce0:	9200      	str	r2, [sp, #0]
 8028ce2:	689b      	ldr	r3, [r3, #8]
 8028ce4:	9300      	str	r3, [sp, #0]
 8028ce6:	9b00      	ldr	r3, [sp, #0]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8028ce8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8028cea:	b99b      	cbnz	r3, 8028d14 <SPI_CloseRxTx_ISR+0x98>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8028cec:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8028cf0:	b2db      	uxtb	r3, r3
 8028cf2:	2b04      	cmp	r3, #4
 8028cf4:	d007      	beq.n	8028d06 <SPI_CloseRxTx_ISR+0x8a>
        HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
      else
      {
        hspi->State = HAL_SPI_STATE_READY;
 8028cf6:	2301      	movs	r3, #1
 8028cf8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->TxRxCpltCallback(hspi);
#else
        HAL_SPI_TxRxCpltCallback(hspi);
 8028cfc:	4620      	mov	r0, r4
 8028cfe:	f7ff ffba 	bl	8028c76 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8028d02:	b002      	add	sp, #8
 8028d04:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8028d06:	2301      	movs	r3, #1
 8028d08:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 8028d0c:	4620      	mov	r0, r4
 8028d0e:	f7ff ffb1 	bl	8028c74 <HAL_SPI_RxCpltCallback>
 8028d12:	e7f6      	b.n	8028d02 <SPI_CloseRxTx_ISR+0x86>
      hspi->State = HAL_SPI_STATE_READY;
 8028d14:	2301      	movs	r3, #1
 8028d16:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8028d1a:	4620      	mov	r0, r4
 8028d1c:	f7ff ffac 	bl	8028c78 <HAL_SPI_ErrorCallback>
}
 8028d20:	e7ef      	b.n	8028d02 <SPI_CloseRxTx_ISR+0x86>
 8028d22:	bf00      	nop
 8028d24:	20000090 	.word	0x20000090
 8028d28:	057619f1 	.word	0x057619f1

08028d2c <SPI_2linesTxISR_8BIT>:
{
 8028d2c:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8028d2e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8028d30:	6803      	ldr	r3, [r0, #0]
 8028d32:	7812      	ldrb	r2, [r2, #0]
 8028d34:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 8028d36:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8028d38:	3301      	adds	r3, #1
 8028d3a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 8028d3c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8028d3e:	b29b      	uxth	r3, r3
 8028d40:	3b01      	subs	r3, #1
 8028d42:	b29b      	uxth	r3, r3
 8028d44:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 8028d46:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8028d48:	b29b      	uxth	r3, r3
 8028d4a:	b93b      	cbnz	r3, 8028d5c <SPI_2linesTxISR_8BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8028d4c:	6802      	ldr	r2, [r0, #0]
 8028d4e:	6853      	ldr	r3, [r2, #4]
 8028d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8028d54:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8028d56:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8028d58:	b29b      	uxth	r3, r3
 8028d5a:	b103      	cbz	r3, 8028d5e <SPI_2linesTxISR_8BIT+0x32>
}
 8028d5c:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8028d5e:	f7ff ff8d 	bl	8028c7c <SPI_CloseRxTx_ISR>
}
 8028d62:	e7fb      	b.n	8028d5c <SPI_2linesTxISR_8BIT+0x30>

08028d64 <SPI_2linesRxISR_8BIT>:
{
 8028d64:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8028d66:	6802      	ldr	r2, [r0, #0]
 8028d68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8028d6a:	7b12      	ldrb	r2, [r2, #12]
 8028d6c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8028d6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8028d70:	3301      	adds	r3, #1
 8028d72:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8028d74:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8028d76:	b29b      	uxth	r3, r3
 8028d78:	3b01      	subs	r3, #1
 8028d7a:	b29b      	uxth	r3, r3
 8028d7c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8028d7e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8028d80:	b29b      	uxth	r3, r3
 8028d82:	b93b      	cbnz	r3, 8028d94 <SPI_2linesRxISR_8BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8028d84:	6802      	ldr	r2, [r0, #0]
 8028d86:	6853      	ldr	r3, [r2, #4]
 8028d88:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8028d8c:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8028d8e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8028d90:	b29b      	uxth	r3, r3
 8028d92:	b103      	cbz	r3, 8028d96 <SPI_2linesRxISR_8BIT+0x32>
}
 8028d94:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8028d96:	f7ff ff71 	bl	8028c7c <SPI_CloseRxTx_ISR>
}
 8028d9a:	e7fb      	b.n	8028d94 <SPI_2linesRxISR_8BIT+0x30>

08028d9c <SPI_2linesTxISR_16BIT>:
{
 8028d9c:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028d9e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8028da0:	6803      	ldr	r3, [r0, #0]
 8028da2:	8812      	ldrh	r2, [r2, #0]
 8028da4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8028da6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8028da8:	3302      	adds	r3, #2
 8028daa:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 8028dac:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8028dae:	b29b      	uxth	r3, r3
 8028db0:	3b01      	subs	r3, #1
 8028db2:	b29b      	uxth	r3, r3
 8028db4:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 8028db6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8028db8:	b29b      	uxth	r3, r3
 8028dba:	b93b      	cbnz	r3, 8028dcc <SPI_2linesTxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8028dbc:	6802      	ldr	r2, [r0, #0]
 8028dbe:	6853      	ldr	r3, [r2, #4]
 8028dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8028dc4:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8028dc6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8028dc8:	b29b      	uxth	r3, r3
 8028dca:	b103      	cbz	r3, 8028dce <SPI_2linesTxISR_16BIT+0x32>
}
 8028dcc:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8028dce:	f7ff ff55 	bl	8028c7c <SPI_CloseRxTx_ISR>
}
 8028dd2:	e7fb      	b.n	8028dcc <SPI_2linesTxISR_16BIT+0x30>

08028dd4 <SPI_2linesRxISR_16BIT>:
{
 8028dd4:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8028dd6:	6803      	ldr	r3, [r0, #0]
 8028dd8:	68da      	ldr	r2, [r3, #12]
 8028dda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8028ddc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8028dde:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8028de0:	3302      	adds	r3, #2
 8028de2:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8028de4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8028de6:	b29b      	uxth	r3, r3
 8028de8:	3b01      	subs	r3, #1
 8028dea:	b29b      	uxth	r3, r3
 8028dec:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8028dee:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8028df0:	b29b      	uxth	r3, r3
 8028df2:	b93b      	cbnz	r3, 8028e04 <SPI_2linesRxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8028df4:	6802      	ldr	r2, [r0, #0]
 8028df6:	6853      	ldr	r3, [r2, #4]
 8028df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8028dfc:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8028dfe:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8028e00:	b29b      	uxth	r3, r3
 8028e02:	b103      	cbz	r3, 8028e06 <SPI_2linesRxISR_16BIT+0x32>
}
 8028e04:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8028e06:	f7ff ff39 	bl	8028c7c <SPI_CloseRxTx_ISR>
}
 8028e0a:	e7fb      	b.n	8028e04 <SPI_2linesRxISR_16BIT+0x30>

08028e0c <HAL_SPI_IRQHandler>:
{
 8028e0c:	b510      	push	{r4, lr}
 8028e0e:	b084      	sub	sp, #16
 8028e10:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8028e12:	6802      	ldr	r2, [r0, #0]
 8028e14:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8028e16:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8028e18:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8028e1c:	2801      	cmp	r0, #1
 8028e1e:	d05a      	beq.n	8028ed6 <HAL_SPI_IRQHandler+0xca>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8028e20:	f013 0f02 	tst.w	r3, #2
 8028e24:	d002      	beq.n	8028e2c <HAL_SPI_IRQHandler+0x20>
 8028e26:	f011 0f80 	tst.w	r1, #128	; 0x80
 8028e2a:	d15b      	bne.n	8028ee4 <HAL_SPI_IRQHandler+0xd8>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8028e2c:	f013 0f60 	tst.w	r3, #96	; 0x60
 8028e30:	d05b      	beq.n	8028eea <HAL_SPI_IRQHandler+0xde>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8028e32:	f011 0f20 	tst.w	r1, #32
 8028e36:	d058      	beq.n	8028eea <HAL_SPI_IRQHandler+0xde>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8028e38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8028e3c:	d00f      	beq.n	8028e5e <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8028e3e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8028e42:	b2c0      	uxtb	r0, r0
 8028e44:	2803      	cmp	r0, #3
 8028e46:	d052      	beq.n	8028eee <HAL_SPI_IRQHandler+0xe2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8028e48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028e4a:	f040 0004 	orr.w	r0, r0, #4
 8028e4e:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028e50:	2000      	movs	r0, #0
 8028e52:	9001      	str	r0, [sp, #4]
 8028e54:	68d0      	ldr	r0, [r2, #12]
 8028e56:	9001      	str	r0, [sp, #4]
 8028e58:	6890      	ldr	r0, [r2, #8]
 8028e5a:	9001      	str	r0, [sp, #4]
 8028e5c:	9801      	ldr	r0, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8028e5e:	f013 0f20 	tst.w	r3, #32
 8028e62:	d00c      	beq.n	8028e7e <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8028e64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8028e66:	f043 0301 	orr.w	r3, r3, #1
 8028e6a:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8028e6c:	2300      	movs	r3, #0
 8028e6e:	9303      	str	r3, [sp, #12]
 8028e70:	6893      	ldr	r3, [r2, #8]
 8028e72:	9303      	str	r3, [sp, #12]
 8028e74:	6813      	ldr	r3, [r2, #0]
 8028e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8028e7a:	6013      	str	r3, [r2, #0]
 8028e7c:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028e7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8028e80:	2b00      	cmp	r3, #0
 8028e82:	d032      	beq.n	8028eea <HAL_SPI_IRQHandler+0xde>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8028e84:	6822      	ldr	r2, [r4, #0]
 8028e86:	6853      	ldr	r3, [r2, #4]
 8028e88:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8028e8c:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8028e8e:	2301      	movs	r3, #1
 8028e90:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8028e94:	f011 0f03 	tst.w	r1, #3
 8028e98:	d031      	beq.n	8028efe <HAL_SPI_IRQHandler+0xf2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8028e9a:	6822      	ldr	r2, [r4, #0]
 8028e9c:	6853      	ldr	r3, [r2, #4]
 8028e9e:	f023 0303 	bic.w	r3, r3, #3
 8028ea2:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8028ea4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8028ea6:	b14b      	cbz	r3, 8028ebc <HAL_SPI_IRQHandler+0xb0>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8028ea8:	4a17      	ldr	r2, [pc, #92]	; (8028f08 <HAL_SPI_IRQHandler+0xfc>)
 8028eaa:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8028eac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8028eae:	f7fd fa0f 	bl	80262d0 <HAL_DMA_Abort_IT>
 8028eb2:	b118      	cbz	r0, 8028ebc <HAL_SPI_IRQHandler+0xb0>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8028eb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8028eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028eba:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8028ebc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8028ebe:	b1a3      	cbz	r3, 8028eea <HAL_SPI_IRQHandler+0xde>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8028ec0:	4a11      	ldr	r2, [pc, #68]	; (8028f08 <HAL_SPI_IRQHandler+0xfc>)
 8028ec2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8028ec4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8028ec6:	f7fd fa03 	bl	80262d0 <HAL_DMA_Abort_IT>
 8028eca:	b170      	cbz	r0, 8028eea <HAL_SPI_IRQHandler+0xde>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8028ecc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8028ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028ed2:	6563      	str	r3, [r4, #84]	; 0x54
 8028ed4:	e009      	b.n	8028eea <HAL_SPI_IRQHandler+0xde>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8028ed6:	f011 0f40 	tst.w	r1, #64	; 0x40
 8028eda:	d0a1      	beq.n	8028e20 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8028edc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028ede:	4620      	mov	r0, r4
 8028ee0:	4798      	blx	r3
    return;
 8028ee2:	e002      	b.n	8028eea <HAL_SPI_IRQHandler+0xde>
    hspi->TxISR(hspi);
 8028ee4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8028ee6:	4620      	mov	r0, r4
 8028ee8:	4798      	blx	r3
}
 8028eea:	b004      	add	sp, #16
 8028eec:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028eee:	2300      	movs	r3, #0
 8028ef0:	9302      	str	r3, [sp, #8]
 8028ef2:	68d3      	ldr	r3, [r2, #12]
 8028ef4:	9302      	str	r3, [sp, #8]
 8028ef6:	6893      	ldr	r3, [r2, #8]
 8028ef8:	9302      	str	r3, [sp, #8]
 8028efa:	9b02      	ldr	r3, [sp, #8]
        return;
 8028efc:	e7f5      	b.n	8028eea <HAL_SPI_IRQHandler+0xde>
        HAL_SPI_ErrorCallback(hspi);
 8028efe:	4620      	mov	r0, r4
 8028f00:	f7ff feba 	bl	8028c78 <HAL_SPI_ErrorCallback>
    return;
 8028f04:	e7f1      	b.n	8028eea <HAL_SPI_IRQHandler+0xde>
 8028f06:	bf00      	nop
 8028f08:	08028f0d 	.word	0x08028f0d

08028f0c <SPI_DMAAbortOnError>:
{
 8028f0c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8028f0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8028f10:	2300      	movs	r3, #0
 8028f12:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8028f14:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8028f16:	f7ff feaf 	bl	8028c78 <HAL_SPI_ErrorCallback>
}
 8028f1a:	bd08      	pop	{r3, pc}

08028f1c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8028f1c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028f1e:	f102 030c 	add.w	r3, r2, #12
 8028f22:	e853 3f00 	ldrex	r3, [r3]
 8028f26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028f2a:	320c      	adds	r2, #12
 8028f2c:	e842 3100 	strex	r1, r3, [r2]
 8028f30:	2900      	cmp	r1, #0
 8028f32:	d1f3      	bne.n	8028f1c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8028f34:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028f36:	f102 0314 	add.w	r3, r2, #20
 8028f3a:	e853 3f00 	ldrex	r3, [r3]
 8028f3e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028f42:	3214      	adds	r2, #20
 8028f44:	e842 3100 	strex	r1, r3, [r2]
 8028f48:	2900      	cmp	r1, #0
 8028f4a:	d1f3      	bne.n	8028f34 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8028f4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8028f4e:	2b01      	cmp	r3, #1
 8028f50:	d005      	beq.n	8028f5e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8028f52:	2320      	movs	r3, #32
 8028f54:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8028f58:	2300      	movs	r3, #0
 8028f5a:	6303      	str	r3, [r0, #48]	; 0x30
}
 8028f5c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8028f5e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028f60:	f102 030c 	add.w	r3, r2, #12
 8028f64:	e853 3f00 	ldrex	r3, [r3]
 8028f68:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028f6c:	320c      	adds	r2, #12
 8028f6e:	e842 3100 	strex	r1, r3, [r2]
 8028f72:	2900      	cmp	r1, #0
 8028f74:	d1f3      	bne.n	8028f5e <UART_EndRxTransfer+0x42>
 8028f76:	e7ec      	b.n	8028f52 <UART_EndRxTransfer+0x36>

08028f78 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8028f78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8028f7c:	b2db      	uxtb	r3, r3
 8028f7e:	2b21      	cmp	r3, #33	; 0x21
 8028f80:	d001      	beq.n	8028f86 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8028f82:	2002      	movs	r0, #2
  }
}
 8028f84:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8028f86:	6883      	ldr	r3, [r0, #8]
 8028f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028f8c:	d017      	beq.n	8028fbe <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8028f8e:	6a03      	ldr	r3, [r0, #32]
 8028f90:	1c5a      	adds	r2, r3, #1
 8028f92:	6202      	str	r2, [r0, #32]
 8028f94:	781a      	ldrb	r2, [r3, #0]
 8028f96:	6803      	ldr	r3, [r0, #0]
 8028f98:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8028f9a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8028f9c:	b29b      	uxth	r3, r3
 8028f9e:	3b01      	subs	r3, #1
 8028fa0:	b29b      	uxth	r3, r3
 8028fa2:	84c3      	strh	r3, [r0, #38]	; 0x26
 8028fa4:	b94b      	cbnz	r3, 8028fba <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8028fa6:	6802      	ldr	r2, [r0, #0]
 8028fa8:	68d3      	ldr	r3, [r2, #12]
 8028faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8028fae:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8028fb0:	6802      	ldr	r2, [r0, #0]
 8028fb2:	68d3      	ldr	r3, [r2, #12]
 8028fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028fb8:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8028fba:	2000      	movs	r0, #0
 8028fbc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8028fbe:	6903      	ldr	r3, [r0, #16]
 8028fc0:	2b00      	cmp	r3, #0
 8028fc2:	d1e4      	bne.n	8028f8e <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8028fc4:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8028fc6:	881b      	ldrh	r3, [r3, #0]
 8028fc8:	6802      	ldr	r2, [r0, #0]
 8028fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028fce:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8028fd0:	6a03      	ldr	r3, [r0, #32]
 8028fd2:	3302      	adds	r3, #2
 8028fd4:	6203      	str	r3, [r0, #32]
 8028fd6:	e7e0      	b.n	8028f9a <UART_Transmit_IT+0x22>

08028fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8028fd8:	b510      	push	{r4, lr}
 8028fda:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8028fdc:	6802      	ldr	r2, [r0, #0]
 8028fde:	6913      	ldr	r3, [r2, #16]
 8028fe0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8028fe4:	68c1      	ldr	r1, [r0, #12]
 8028fe6:	430b      	orrs	r3, r1
 8028fe8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8028fea:	6883      	ldr	r3, [r0, #8]
 8028fec:	6902      	ldr	r2, [r0, #16]
 8028fee:	4313      	orrs	r3, r2
 8028ff0:	6942      	ldr	r2, [r0, #20]
 8028ff2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8028ff4:	6801      	ldr	r1, [r0, #0]
 8028ff6:	68cb      	ldr	r3, [r1, #12]
 8028ff8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8028ffc:	f023 030c 	bic.w	r3, r3, #12
 8029000:	4313      	orrs	r3, r2
 8029002:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8029004:	6802      	ldr	r2, [r0, #0]
 8029006:	6953      	ldr	r3, [r2, #20]
 8029008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802900c:	6981      	ldr	r1, [r0, #24]
 802900e:	430b      	orrs	r3, r1
 8029010:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8029012:	6802      	ldr	r2, [r0, #0]
 8029014:	4b13      	ldr	r3, [pc, #76]	; (8029064 <UART_SetConfig+0x8c>)
 8029016:	429a      	cmp	r2, r3
 8029018:	d020      	beq.n	802905c <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 802901a:	f7ff f96b 	bl	80282f4 <HAL_RCC_GetPCLK1Freq>
 802901e:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8029020:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8029024:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8029028:	6863      	ldr	r3, [r4, #4]
 802902a:	009b      	lsls	r3, r3, #2
 802902c:	fbb2 f2f3 	udiv	r2, r2, r3
 8029030:	480d      	ldr	r0, [pc, #52]	; (8029068 <UART_SetConfig+0x90>)
 8029032:	fba0 3102 	umull	r3, r1, r0, r2
 8029036:	0949      	lsrs	r1, r1, #5
 8029038:	2364      	movs	r3, #100	; 0x64
 802903a:	fb03 2311 	mls	r3, r3, r1, r2
 802903e:	011b      	lsls	r3, r3, #4
 8029040:	3332      	adds	r3, #50	; 0x32
 8029042:	fba0 0303 	umull	r0, r3, r0, r3
 8029046:	095b      	lsrs	r3, r3, #5
 8029048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 802904c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8029050:	f003 030f 	and.w	r3, r3, #15
 8029054:	6821      	ldr	r1, [r4, #0]
 8029056:	4413      	add	r3, r2
 8029058:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 802905a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 802905c:	f7ff f95a 	bl	8028314 <HAL_RCC_GetPCLK2Freq>
 8029060:	4602      	mov	r2, r0
 8029062:	e7dd      	b.n	8029020 <UART_SetConfig+0x48>
 8029064:	40013800 	.word	0x40013800
 8029068:	51eb851f 	.word	0x51eb851f

0802906c <UART_WaitOnFlagUntilTimeout>:
{
 802906c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029070:	4605      	mov	r5, r0
 8029072:	460f      	mov	r7, r1
 8029074:	4616      	mov	r6, r2
 8029076:	4699      	mov	r9, r3
 8029078:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802907c:	682b      	ldr	r3, [r5, #0]
 802907e:	681c      	ldr	r4, [r3, #0]
 8029080:	ea37 0404 	bics.w	r4, r7, r4
 8029084:	bf0c      	ite	eq
 8029086:	2401      	moveq	r4, #1
 8029088:	2400      	movne	r4, #0
 802908a:	42b4      	cmp	r4, r6
 802908c:	d12d      	bne.n	80290ea <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 802908e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8029092:	d0f3      	beq.n	802907c <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8029094:	f1b8 0f00 	cmp.w	r8, #0
 8029098:	d005      	beq.n	80290a6 <UART_WaitOnFlagUntilTimeout+0x3a>
 802909a:	f7fd f859 	bl	8026150 <HAL_GetTick>
 802909e:	eba0 0009 	sub.w	r0, r0, r9
 80290a2:	4540      	cmp	r0, r8
 80290a4:	d9ea      	bls.n	802907c <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80290a6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80290a8:	f102 030c 	add.w	r3, r2, #12
 80290ac:	e853 3f00 	ldrex	r3, [r3]
 80290b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80290b4:	320c      	adds	r2, #12
 80290b6:	e842 3100 	strex	r1, r3, [r2]
 80290ba:	2900      	cmp	r1, #0
 80290bc:	d1f3      	bne.n	80290a6 <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80290be:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80290c0:	f102 0314 	add.w	r3, r2, #20
 80290c4:	e853 3f00 	ldrex	r3, [r3]
 80290c8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80290cc:	3214      	adds	r2, #20
 80290ce:	e842 3100 	strex	r1, r3, [r2]
 80290d2:	2900      	cmp	r1, #0
 80290d4:	d1f3      	bne.n	80290be <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 80290d6:	2320      	movs	r3, #32
 80290d8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80290dc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(huart);
 80290e0:	2300      	movs	r3, #0
 80290e2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 80290e6:	2003      	movs	r0, #3
 80290e8:	e000      	b.n	80290ec <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 80290ea:	2000      	movs	r0, #0
}
 80290ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080290f0 <HAL_UART_Init>:
  if (huart == NULL)
 80290f0:	b360      	cbz	r0, 802914c <HAL_UART_Init+0x5c>
{
 80290f2:	b510      	push	{r4, lr}
 80290f4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80290f6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80290fa:	b313      	cbz	r3, 8029142 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80290fc:	2324      	movs	r3, #36	; 0x24
 80290fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8029102:	6822      	ldr	r2, [r4, #0]
 8029104:	68d3      	ldr	r3, [r2, #12]
 8029106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802910a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 802910c:	4620      	mov	r0, r4
 802910e:	f7ff ff63 	bl	8028fd8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8029112:	6822      	ldr	r2, [r4, #0]
 8029114:	6913      	ldr	r3, [r2, #16]
 8029116:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 802911a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802911c:	6822      	ldr	r2, [r4, #0]
 802911e:	6953      	ldr	r3, [r2, #20]
 8029120:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8029124:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8029126:	6822      	ldr	r2, [r4, #0]
 8029128:	68d3      	ldr	r3, [r2, #12]
 802912a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802912e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029130:	2000      	movs	r0, #0
 8029132:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8029134:	2320      	movs	r3, #32
 8029136:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 802913a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802913e:	6360      	str	r0, [r4, #52]	; 0x34
}
 8029140:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8029142:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8029146:	f7fc ff55 	bl	8025ff4 <HAL_UART_MspInit>
 802914a:	e7d7      	b.n	80290fc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 802914c:	2001      	movs	r0, #1
}
 802914e:	4770      	bx	lr

08029150 <HAL_UART_Transmit>:
{
 8029150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029154:	b082      	sub	sp, #8
 8029156:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8029158:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 802915c:	b2db      	uxtb	r3, r3
 802915e:	2b20      	cmp	r3, #32
 8029160:	d14b      	bne.n	80291fa <HAL_UART_Transmit+0xaa>
 8029162:	4604      	mov	r4, r0
 8029164:	460d      	mov	r5, r1
 8029166:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8029168:	2900      	cmp	r1, #0
 802916a:	d04a      	beq.n	8029202 <HAL_UART_Transmit+0xb2>
 802916c:	b90a      	cbnz	r2, 8029172 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 802916e:	2001      	movs	r0, #1
 8029170:	e044      	b.n	80291fc <HAL_UART_Transmit+0xac>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029172:	2300      	movs	r3, #0
 8029174:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8029176:	2321      	movs	r3, #33	; 0x21
 8029178:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 802917c:	f7fc ffe8 	bl	8026150 <HAL_GetTick>
 8029180:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8029182:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8029186:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802918a:	68a3      	ldr	r3, [r4, #8]
 802918c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029190:	d002      	beq.n	8029198 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8029192:	f04f 0800 	mov.w	r8, #0
 8029196:	e00f      	b.n	80291b8 <HAL_UART_Transmit+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8029198:	6923      	ldr	r3, [r4, #16]
 802919a:	b1fb      	cbz	r3, 80291dc <HAL_UART_Transmit+0x8c>
      pdata16bits = NULL;
 802919c:	f04f 0800 	mov.w	r8, #0
 80291a0:	e00a      	b.n	80291b8 <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80291a2:	f838 3b02 	ldrh.w	r3, [r8], #2
 80291a6:	6822      	ldr	r2, [r4, #0]
 80291a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80291ac:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80291ae:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80291b0:	b292      	uxth	r2, r2
 80291b2:	3a01      	subs	r2, #1
 80291b4:	b292      	uxth	r2, r2
 80291b6:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80291b8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80291ba:	b29b      	uxth	r3, r3
 80291bc:	b18b      	cbz	r3, 80291e2 <HAL_UART_Transmit+0x92>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80291be:	9600      	str	r6, [sp, #0]
 80291c0:	463b      	mov	r3, r7
 80291c2:	2200      	movs	r2, #0
 80291c4:	2180      	movs	r1, #128	; 0x80
 80291c6:	4620      	mov	r0, r4
 80291c8:	f7ff ff50 	bl	802906c <UART_WaitOnFlagUntilTimeout>
 80291cc:	b9d8      	cbnz	r0, 8029206 <HAL_UART_Transmit+0xb6>
      if (pdata8bits == NULL)
 80291ce:	2d00      	cmp	r5, #0
 80291d0:	d0e7      	beq.n	80291a2 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80291d2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80291d6:	6823      	ldr	r3, [r4, #0]
 80291d8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80291da:	e7e8      	b.n	80291ae <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 80291dc:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80291de:	2500      	movs	r5, #0
 80291e0:	e7ea      	b.n	80291b8 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80291e2:	9600      	str	r6, [sp, #0]
 80291e4:	463b      	mov	r3, r7
 80291e6:	2200      	movs	r2, #0
 80291e8:	2140      	movs	r1, #64	; 0x40
 80291ea:	4620      	mov	r0, r4
 80291ec:	f7ff ff3e 	bl	802906c <UART_WaitOnFlagUntilTimeout>
 80291f0:	b958      	cbnz	r0, 802920a <HAL_UART_Transmit+0xba>
    huart->gState = HAL_UART_STATE_READY;
 80291f2:	2320      	movs	r3, #32
 80291f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 80291f8:	e000      	b.n	80291fc <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 80291fa:	2002      	movs	r0, #2
}
 80291fc:	b002      	add	sp, #8
 80291fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8029202:	2001      	movs	r0, #1
 8029204:	e7fa      	b.n	80291fc <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8029206:	2003      	movs	r0, #3
 8029208:	e7f8      	b.n	80291fc <HAL_UART_Transmit+0xac>
      return HAL_TIMEOUT;
 802920a:	2003      	movs	r0, #3
 802920c:	e7f6      	b.n	80291fc <HAL_UART_Transmit+0xac>

0802920e <HAL_UART_TxCpltCallback>:
}
 802920e:	4770      	bx	lr

08029210 <UART_EndTransmit_IT>:
{
 8029210:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8029212:	6801      	ldr	r1, [r0, #0]
 8029214:	68ca      	ldr	r2, [r1, #12]
 8029216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802921a:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 802921c:	2220      	movs	r2, #32
 802921e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8029222:	f7ff fff4 	bl	802920e <HAL_UART_TxCpltCallback>
}
 8029226:	2000      	movs	r0, #0
 8029228:	bd08      	pop	{r3, pc}

0802922a <HAL_UART_RxCpltCallback>:
}
 802922a:	4770      	bx	lr

0802922c <HAL_UART_ErrorCallback>:
}
 802922c:	4770      	bx	lr

0802922e <UART_DMAAbortOnError>:
{
 802922e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8029230:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8029232:	2300      	movs	r3, #0
 8029234:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8029236:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8029238:	f7ff fff8 	bl	802922c <HAL_UART_ErrorCallback>
}
 802923c:	bd08      	pop	{r3, pc}

0802923e <HAL_UARTEx_RxEventCallback>:
}
 802923e:	4770      	bx	lr

08029240 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8029240:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8029244:	b2db      	uxtb	r3, r3
 8029246:	2b22      	cmp	r3, #34	; 0x22
 8029248:	d169      	bne.n	802931e <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802924a:	6883      	ldr	r3, [r0, #8]
 802924c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029250:	d04f      	beq.n	80292f2 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8029252:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8029254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029258:	d004      	beq.n	8029264 <UART_Receive_IT+0x24>
 802925a:	2b00      	cmp	r3, #0
 802925c:	d156      	bne.n	802930c <UART_Receive_IT+0xcc>
 802925e:	6903      	ldr	r3, [r0, #16]
 8029260:	2b00      	cmp	r3, #0
 8029262:	d153      	bne.n	802930c <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8029264:	6803      	ldr	r3, [r0, #0]
 8029266:	685b      	ldr	r3, [r3, #4]
 8029268:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 802926a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802926c:	3301      	adds	r3, #1
 802926e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8029270:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8029272:	b29b      	uxth	r3, r3
 8029274:	3b01      	subs	r3, #1
 8029276:	b29b      	uxth	r3, r3
 8029278:	85c3      	strh	r3, [r0, #46]	; 0x2e
 802927a:	2b00      	cmp	r3, #0
 802927c:	d151      	bne.n	8029322 <UART_Receive_IT+0xe2>
{
 802927e:	b500      	push	{lr}
 8029280:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8029282:	6802      	ldr	r2, [r0, #0]
 8029284:	68d3      	ldr	r3, [r2, #12]
 8029286:	f023 0320 	bic.w	r3, r3, #32
 802928a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802928c:	6802      	ldr	r2, [r0, #0]
 802928e:	68d3      	ldr	r3, [r2, #12]
 8029290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029294:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8029296:	6802      	ldr	r2, [r0, #0]
 8029298:	6953      	ldr	r3, [r2, #20]
 802929a:	f023 0301 	bic.w	r3, r3, #1
 802929e:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80292a0:	2320      	movs	r3, #32
 80292a2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80292a6:	2300      	movs	r3, #0
 80292a8:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80292aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80292ac:	2b01      	cmp	r3, #1
 80292ae:	d133      	bne.n	8029318 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80292b0:	2300      	movs	r3, #0
 80292b2:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80292b4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80292b6:	f102 030c 	add.w	r3, r2, #12
 80292ba:	e853 3f00 	ldrex	r3, [r3]
 80292be:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80292c2:	320c      	adds	r2, #12
 80292c4:	e842 3100 	strex	r1, r3, [r2]
 80292c8:	2900      	cmp	r1, #0
 80292ca:	d1f3      	bne.n	80292b4 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80292cc:	6803      	ldr	r3, [r0, #0]
 80292ce:	681a      	ldr	r2, [r3, #0]
 80292d0:	f012 0f10 	tst.w	r2, #16
 80292d4:	d006      	beq.n	80292e4 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80292d6:	2200      	movs	r2, #0
 80292d8:	9201      	str	r2, [sp, #4]
 80292da:	681a      	ldr	r2, [r3, #0]
 80292dc:	9201      	str	r2, [sp, #4]
 80292de:	685b      	ldr	r3, [r3, #4]
 80292e0:	9301      	str	r3, [sp, #4]
 80292e2:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80292e4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80292e6:	f7ff ffaa 	bl	802923e <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80292ea:	2000      	movs	r0, #0
}
 80292ec:	b003      	add	sp, #12
 80292ee:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80292f2:	6902      	ldr	r2, [r0, #16]
 80292f4:	2a00      	cmp	r2, #0
 80292f6:	d1ac      	bne.n	8029252 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80292f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80292fa:	6803      	ldr	r3, [r0, #0]
 80292fc:	685b      	ldr	r3, [r3, #4]
 80292fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8029302:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8029304:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8029306:	3302      	adds	r3, #2
 8029308:	6283      	str	r3, [r0, #40]	; 0x28
 802930a:	e7b1      	b.n	8029270 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802930c:	6803      	ldr	r3, [r0, #0]
 802930e:	685b      	ldr	r3, [r3, #4]
 8029310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8029314:	7013      	strb	r3, [r2, #0]
 8029316:	e7a8      	b.n	802926a <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8029318:	f7ff ff87 	bl	802922a <HAL_UART_RxCpltCallback>
 802931c:	e7e5      	b.n	80292ea <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 802931e:	2002      	movs	r0, #2
 8029320:	4770      	bx	lr
    return HAL_OK;
 8029322:	2000      	movs	r0, #0
}
 8029324:	4770      	bx	lr
	...

08029328 <HAL_UART_IRQHandler>:
{
 8029328:	b530      	push	{r4, r5, lr}
 802932a:	b083      	sub	sp, #12
 802932c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 802932e:	6802      	ldr	r2, [r0, #0]
 8029330:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8029332:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8029334:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8029336:	f013 050f 	ands.w	r5, r3, #15
 802933a:	d105      	bne.n	8029348 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802933c:	f013 0f20 	tst.w	r3, #32
 8029340:	d002      	beq.n	8029348 <HAL_UART_IRQHandler+0x20>
 8029342:	f010 0f20 	tst.w	r0, #32
 8029346:	d119      	bne.n	802937c <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8029348:	b12d      	cbz	r5, 8029356 <HAL_UART_IRQHandler+0x2e>
 802934a:	f011 0101 	ands.w	r1, r1, #1
 802934e:	d119      	bne.n	8029384 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8029350:	f410 7f90 	tst.w	r0, #288	; 0x120
 8029354:	d116      	bne.n	8029384 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029356:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8029358:	2901      	cmp	r1, #1
 802935a:	d07d      	beq.n	8029458 <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802935c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8029360:	d003      	beq.n	802936a <HAL_UART_IRQHandler+0x42>
 8029362:	f010 0f80 	tst.w	r0, #128	; 0x80
 8029366:	f040 8118 	bne.w	802959a <HAL_UART_IRQHandler+0x272>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802936a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802936e:	d003      	beq.n	8029378 <HAL_UART_IRQHandler+0x50>
 8029370:	f010 0f40 	tst.w	r0, #64	; 0x40
 8029374:	f040 8115 	bne.w	80295a2 <HAL_UART_IRQHandler+0x27a>
}
 8029378:	b003      	add	sp, #12
 802937a:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 802937c:	4620      	mov	r0, r4
 802937e:	f7ff ff5f 	bl	8029240 <UART_Receive_IT>
      return;
 8029382:	e7f9      	b.n	8029378 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8029384:	f013 0f01 	tst.w	r3, #1
 8029388:	d006      	beq.n	8029398 <HAL_UART_IRQHandler+0x70>
 802938a:	f410 7f80 	tst.w	r0, #256	; 0x100
 802938e:	d003      	beq.n	8029398 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8029390:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8029392:	f042 0201 	orr.w	r2, r2, #1
 8029396:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8029398:	f013 0f04 	tst.w	r3, #4
 802939c:	d004      	beq.n	80293a8 <HAL_UART_IRQHandler+0x80>
 802939e:	b119      	cbz	r1, 80293a8 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80293a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80293a2:	f042 0202 	orr.w	r2, r2, #2
 80293a6:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80293a8:	f013 0f02 	tst.w	r3, #2
 80293ac:	d004      	beq.n	80293b8 <HAL_UART_IRQHandler+0x90>
 80293ae:	b119      	cbz	r1, 80293b8 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80293b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80293b2:	f042 0204 	orr.w	r2, r2, #4
 80293b6:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80293b8:	f013 0f08 	tst.w	r3, #8
 80293bc:	d007      	beq.n	80293ce <HAL_UART_IRQHandler+0xa6>
 80293be:	f010 0f20 	tst.w	r0, #32
 80293c2:	d100      	bne.n	80293c6 <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80293c4:	b119      	cbz	r1, 80293ce <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80293c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80293c8:	f042 0208 	orr.w	r2, r2, #8
 80293cc:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80293ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80293d0:	2a00      	cmp	r2, #0
 80293d2:	d0d1      	beq.n	8029378 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80293d4:	f013 0f20 	tst.w	r3, #32
 80293d8:	d002      	beq.n	80293e0 <HAL_UART_IRQHandler+0xb8>
 80293da:	f010 0f20 	tst.w	r0, #32
 80293de:	d129      	bne.n	8029434 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80293e0:	6823      	ldr	r3, [r4, #0]
 80293e2:	695b      	ldr	r3, [r3, #20]
 80293e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80293e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80293ea:	f012 0f08 	tst.w	r2, #8
 80293ee:	d100      	bne.n	80293f2 <HAL_UART_IRQHandler+0xca>
 80293f0:	b363      	cbz	r3, 802944c <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 80293f2:	4620      	mov	r0, r4
 80293f4:	f7ff fd92 	bl	8028f1c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80293f8:	6823      	ldr	r3, [r4, #0]
 80293fa:	695b      	ldr	r3, [r3, #20]
 80293fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029400:	d020      	beq.n	8029444 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029402:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029404:	f102 0314 	add.w	r3, r2, #20
 8029408:	e853 3f00 	ldrex	r3, [r3]
 802940c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029410:	3214      	adds	r2, #20
 8029412:	e842 3100 	strex	r1, r3, [r2]
 8029416:	2900      	cmp	r1, #0
 8029418:	d1f3      	bne.n	8029402 <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 802941a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802941c:	b173      	cbz	r3, 802943c <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802941e:	4a63      	ldr	r2, [pc, #396]	; (80295ac <HAL_UART_IRQHandler+0x284>)
 8029420:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8029422:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8029424:	f7fc ff54 	bl	80262d0 <HAL_DMA_Abort_IT>
 8029428:	2800      	cmp	r0, #0
 802942a:	d0a5      	beq.n	8029378 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802942c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 802942e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8029430:	4798      	blx	r3
 8029432:	e7a1      	b.n	8029378 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8029434:	4620      	mov	r0, r4
 8029436:	f7ff ff03 	bl	8029240 <UART_Receive_IT>
 802943a:	e7d1      	b.n	80293e0 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 802943c:	4620      	mov	r0, r4
 802943e:	f7ff fef5 	bl	802922c <HAL_UART_ErrorCallback>
 8029442:	e799      	b.n	8029378 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8029444:	4620      	mov	r0, r4
 8029446:	f7ff fef1 	bl	802922c <HAL_UART_ErrorCallback>
 802944a:	e795      	b.n	8029378 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 802944c:	4620      	mov	r0, r4
 802944e:	f7ff feed 	bl	802922c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029452:	2300      	movs	r3, #0
 8029454:	6463      	str	r3, [r4, #68]	; 0x44
    return;
 8029456:	e78f      	b.n	8029378 <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8029458:	f013 0f10 	tst.w	r3, #16
 802945c:	f43f af7e 	beq.w	802935c <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8029460:	f010 0f10 	tst.w	r0, #16
 8029464:	f43f af7a 	beq.w	802935c <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8029468:	2300      	movs	r3, #0
 802946a:	9301      	str	r3, [sp, #4]
 802946c:	6813      	ldr	r3, [r2, #0]
 802946e:	9301      	str	r3, [sp, #4]
 8029470:	6853      	ldr	r3, [r2, #4]
 8029472:	9301      	str	r3, [sp, #4]
 8029474:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029476:	6953      	ldr	r3, [r2, #20]
 8029478:	f013 0f40 	tst.w	r3, #64	; 0x40
 802947c:	d051      	beq.n	8029522 <HAL_UART_IRQHandler+0x1fa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 802947e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8029480:	6813      	ldr	r3, [r2, #0]
 8029482:	685b      	ldr	r3, [r3, #4]
 8029484:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8029486:	2b00      	cmp	r3, #0
 8029488:	f43f af76 	beq.w	8029378 <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802948c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 802948e:	4299      	cmp	r1, r3
 8029490:	f67f af72 	bls.w	8029378 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8029494:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8029496:	6993      	ldr	r3, [r2, #24]
 8029498:	2b20      	cmp	r3, #32
 802949a:	d037      	beq.n	802950c <HAL_UART_IRQHandler+0x1e4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802949c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802949e:	f102 030c 	add.w	r3, r2, #12
 80294a2:	e853 3f00 	ldrex	r3, [r3]
 80294a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80294aa:	320c      	adds	r2, #12
 80294ac:	e842 3100 	strex	r1, r3, [r2]
 80294b0:	2900      	cmp	r1, #0
 80294b2:	d1f3      	bne.n	802949c <HAL_UART_IRQHandler+0x174>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80294b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80294b6:	f102 0314 	add.w	r3, r2, #20
 80294ba:	e853 3f00 	ldrex	r3, [r3]
 80294be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80294c2:	3214      	adds	r2, #20
 80294c4:	e842 3100 	strex	r1, r3, [r2]
 80294c8:	2900      	cmp	r1, #0
 80294ca:	d1f3      	bne.n	80294b4 <HAL_UART_IRQHandler+0x18c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80294cc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80294ce:	f102 0314 	add.w	r3, r2, #20
 80294d2:	e853 3f00 	ldrex	r3, [r3]
 80294d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80294da:	3214      	adds	r2, #20
 80294dc:	e842 3100 	strex	r1, r3, [r2]
 80294e0:	2900      	cmp	r1, #0
 80294e2:	d1f3      	bne.n	80294cc <HAL_UART_IRQHandler+0x1a4>
          huart->RxState = HAL_UART_STATE_READY;
 80294e4:	2320      	movs	r3, #32
 80294e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80294ea:	2300      	movs	r3, #0
 80294ec:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80294ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80294f0:	f102 030c 	add.w	r3, r2, #12
 80294f4:	e853 3f00 	ldrex	r3, [r3]
 80294f8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80294fc:	320c      	adds	r2, #12
 80294fe:	e842 3100 	strex	r1, r3, [r2]
 8029502:	2900      	cmp	r1, #0
 8029504:	d1f3      	bne.n	80294ee <HAL_UART_IRQHandler+0x1c6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8029506:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8029508:	f7fc febe 	bl	8026288 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 802950c:	2302      	movs	r3, #2
 802950e:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8029510:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8029512:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8029514:	b29b      	uxth	r3, r3
 8029516:	1ac9      	subs	r1, r1, r3
 8029518:	b289      	uxth	r1, r1
 802951a:	4620      	mov	r0, r4
 802951c:	f7ff fe8f 	bl	802923e <HAL_UARTEx_RxEventCallback>
      return;
 8029520:	e72a      	b.n	8029378 <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8029522:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8029524:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8029526:	b29b      	uxth	r3, r3
 8029528:	1ac9      	subs	r1, r1, r3
 802952a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 802952c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 802952e:	b29b      	uxth	r3, r3
 8029530:	2b00      	cmp	r3, #0
 8029532:	f43f af21 	beq.w	8029378 <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 8029536:	2900      	cmp	r1, #0
 8029538:	f43f af1e 	beq.w	8029378 <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802953c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802953e:	f102 030c 	add.w	r3, r2, #12
 8029542:	e853 3f00 	ldrex	r3, [r3]
 8029546:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802954a:	320c      	adds	r2, #12
 802954c:	e842 3000 	strex	r0, r3, [r2]
 8029550:	2800      	cmp	r0, #0
 8029552:	d1f3      	bne.n	802953c <HAL_UART_IRQHandler+0x214>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029554:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029556:	f102 0314 	add.w	r3, r2, #20
 802955a:	e853 3f00 	ldrex	r3, [r3]
 802955e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029562:	3214      	adds	r2, #20
 8029564:	e842 3000 	strex	r0, r3, [r2]
 8029568:	2800      	cmp	r0, #0
 802956a:	d1f3      	bne.n	8029554 <HAL_UART_IRQHandler+0x22c>
        huart->RxState = HAL_UART_STATE_READY;
 802956c:	2320      	movs	r3, #32
 802956e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029572:	2300      	movs	r3, #0
 8029574:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029576:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029578:	f102 030c 	add.w	r3, r2, #12
 802957c:	e853 3f00 	ldrex	r3, [r3]
 8029580:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029584:	320c      	adds	r2, #12
 8029586:	e842 3000 	strex	r0, r3, [r2]
 802958a:	2800      	cmp	r0, #0
 802958c:	d1f3      	bne.n	8029576 <HAL_UART_IRQHandler+0x24e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 802958e:	2302      	movs	r3, #2
 8029590:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8029592:	4620      	mov	r0, r4
 8029594:	f7ff fe53 	bl	802923e <HAL_UARTEx_RxEventCallback>
      return;
 8029598:	e6ee      	b.n	8029378 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 802959a:	4620      	mov	r0, r4
 802959c:	f7ff fcec 	bl	8028f78 <UART_Transmit_IT>
    return;
 80295a0:	e6ea      	b.n	8029378 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 80295a2:	4620      	mov	r0, r4
 80295a4:	f7ff fe34 	bl	8029210 <UART_EndTransmit_IT>
    return;
 80295a8:	e6e6      	b.n	8029378 <HAL_UART_IRQHandler+0x50>
 80295aa:	bf00      	nop
 80295ac:	0802922f 	.word	0x0802922f

080295b0 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 80295b0:	b410      	push	{r4}
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 80295b2:	680b      	ldr	r3, [r1, #0]
 80295b4:	2b10      	cmp	r3, #16
 80295b6:	d016      	beq.n	80295e6 <FSMC_NAND_Init+0x36>
                                              ((Init->TARSetupTime)  << FSMC_PCRx_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 80295b8:	6a03      	ldr	r3, [r0, #32]
 80295ba:	4a15      	ldr	r2, [pc, #84]	; (8029610 <FSMC_NAND_Init+0x60>)
 80295bc:	401a      	ands	r2, r3
 80295be:	684b      	ldr	r3, [r1, #4]
 80295c0:	688c      	ldr	r4, [r1, #8]
 80295c2:	4323      	orrs	r3, r4
 80295c4:	68cc      	ldr	r4, [r1, #12]
 80295c6:	4323      	orrs	r3, r4
 80295c8:	690c      	ldr	r4, [r1, #16]
 80295ca:	4323      	orrs	r3, r4
 80295cc:	694c      	ldr	r4, [r1, #20]
 80295ce:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 80295d2:	6989      	ldr	r1, [r1, #24]
 80295d4:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 80295d8:	431a      	orrs	r2, r3
 80295da:	f042 0208 	orr.w	r2, r2, #8
 80295de:	6202      	str	r2, [r0, #32]
                                              ((Init->TCLRSetupTime) << FSMC_PCRx_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCRx_TAR_Pos)));
  }

  return HAL_OK;
}
 80295e0:	2000      	movs	r0, #0
 80295e2:	bc10      	pop	{r4}
 80295e4:	4770      	bx	lr
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 80295e6:	6803      	ldr	r3, [r0, #0]
 80295e8:	4a09      	ldr	r2, [pc, #36]	; (8029610 <FSMC_NAND_Init+0x60>)
 80295ea:	401a      	ands	r2, r3
 80295ec:	684b      	ldr	r3, [r1, #4]
 80295ee:	688c      	ldr	r4, [r1, #8]
 80295f0:	4323      	orrs	r3, r4
 80295f2:	68cc      	ldr	r4, [r1, #12]
 80295f4:	4323      	orrs	r3, r4
 80295f6:	690c      	ldr	r4, [r1, #16]
 80295f8:	4323      	orrs	r3, r4
 80295fa:	694c      	ldr	r4, [r1, #20]
 80295fc:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8029600:	6989      	ldr	r1, [r1, #24]
 8029602:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8029606:	431a      	orrs	r2, r3
 8029608:	f042 0208 	orr.w	r2, r2, #8
 802960c:	6002      	str	r2, [r0, #0]
 802960e:	e7e7      	b.n	80295e0 <FSMC_NAND_Init+0x30>
 8029610:	fff00181 	.word	0xfff00181

08029614 <FSMC_NAND_CommonSpace_Timing_Init>:
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8029614:	2a10      	cmp	r2, #16
 8029616:	d00d      	beq.n	8029634 <FSMC_NAND_CommonSpace_Timing_Init+0x20>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEMx_MEMHIZx_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8029618:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802961a:	680b      	ldr	r3, [r1, #0]
 802961c:	684a      	ldr	r2, [r1, #4]
 802961e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8029622:	688a      	ldr	r2, [r1, #8]
 8029624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029628:	68ca      	ldr	r2, [r1, #12]
 802962a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 802962e:	6283      	str	r3, [r0, #40]	; 0x28
                                                ((Timing->HoldSetupTime) << FSMC_PMEMx_MEMHOLDx_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEMx_MEMHIZx_Pos)));
  }

  return HAL_OK;
}
 8029630:	2000      	movs	r0, #0
 8029632:	4770      	bx	lr
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8029634:	6883      	ldr	r3, [r0, #8]
 8029636:	680b      	ldr	r3, [r1, #0]
 8029638:	684a      	ldr	r2, [r1, #4]
 802963a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 802963e:	688a      	ldr	r2, [r1, #8]
 8029640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029644:	68ca      	ldr	r2, [r1, #12]
 8029646:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 802964a:	6083      	str	r3, [r0, #8]
 802964c:	e7f0      	b.n	8029630 <FSMC_NAND_CommonSpace_Timing_Init+0x1c>

0802964e <FSMC_NAND_AttributeSpace_Timing_Init>:
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 802964e:	2a10      	cmp	r2, #16
 8029650:	d00d      	beq.n	802966e <FSMC_NAND_AttributeSpace_Timing_Init+0x20>
                                                ((Timing->HiZSetupTime)  << FSMC_PATTx_ATTHIZx_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8029652:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8029654:	680b      	ldr	r3, [r1, #0]
 8029656:	684a      	ldr	r2, [r1, #4]
 8029658:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 802965c:	688a      	ldr	r2, [r1, #8]
 802965e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029662:	68ca      	ldr	r2, [r1, #12]
 8029664:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8029668:	62c3      	str	r3, [r0, #44]	; 0x2c
                                                ((Timing->HoldSetupTime) << FSMC_PATTx_ATTHOLDx_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATTx_ATTHIZx_Pos)));
  }

  return HAL_OK;
}
 802966a:	2000      	movs	r0, #0
 802966c:	4770      	bx	lr
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 802966e:	68c3      	ldr	r3, [r0, #12]
 8029670:	680b      	ldr	r3, [r1, #0]
 8029672:	684a      	ldr	r2, [r1, #4]
 8029674:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8029678:	688a      	ldr	r2, [r1, #8]
 802967a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802967e:	68ca      	ldr	r2, [r1, #12]
 8029680:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8029684:	60c3      	str	r3, [r0, #12]
 8029686:	e7f0      	b.n	802966a <FSMC_NAND_AttributeSpace_Timing_Init+0x1c>

08029688 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8029688:	b084      	sub	sp, #16
 802968a:	a801      	add	r0, sp, #4
 802968c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8029690:	2000      	movs	r0, #0
 8029692:	b004      	add	sp, #16
 8029694:	4770      	bx	lr

08029696 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8029696:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8029698:	2000      	movs	r0, #0
 802969a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 802969e:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 80296a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80296a6:	4770      	bx	lr

080296a8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80296a8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80296ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80296b0:	045b      	lsls	r3, r3, #17
 80296b2:	0c5b      	lsrs	r3, r3, #17
 80296b4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80296b8:	2000      	movs	r0, #0
 80296ba:	4770      	bx	lr

080296bc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80296bc:	2000      	movs	r0, #0
 80296be:	4770      	bx	lr

080296c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80296c0:	b084      	sub	sp, #16
 80296c2:	4684      	mov	ip, r0
 80296c4:	a801      	add	r0, sp, #4
 80296c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80296ca:	2301      	movs	r3, #1
 80296cc:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80296d0:	2000      	movs	r0, #0
 80296d2:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80296d6:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80296da:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 80296de:	b004      	add	sp, #16
 80296e0:	4770      	bx	lr

080296e2 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80296e2:	b510      	push	{r4, lr}
 80296e4:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80296e6:	f891 c000 	ldrb.w	ip, [r1]
 80296ea:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 80296ee:	b292      	uxth	r2, r2
 80296f0:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80296f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80296f8:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 80296fa:	78c8      	ldrb	r0, [r1, #3]
 80296fc:	2803      	cmp	r0, #3
 80296fe:	d861      	bhi.n	80297c4 <USB_ActivateEndpoint+0xe2>
 8029700:	e8df f000 	tbb	[pc, r0]
 8029704:	58025c55 	.word	0x58025c55
 8029708:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 802970a:	f248 0e80 	movw	lr, #32896	; 0x8080
 802970e:	ea42 020e 	orr.w	r2, r2, lr
 8029712:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8029716:	f891 c000 	ldrb.w	ip, [r1]
 802971a:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 802971e:	b292      	uxth	r2, r2
 8029720:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8029724:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8029728:	ea4c 0202 	orr.w	r2, ip, r2
 802972c:	ea42 020e 	orr.w	r2, r2, lr
 8029730:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 8029734:	7b0a      	ldrb	r2, [r1, #12]
 8029736:	2a00      	cmp	r2, #0
 8029738:	f040 80dc 	bne.w	80298f4 <USB_ActivateEndpoint+0x212>
  {
    if (ep->is_in != 0U)
 802973c:	784a      	ldrb	r2, [r1, #1]
 802973e:	2a00      	cmp	r2, #0
 8029740:	d051      	beq.n	80297e6 <USB_ActivateEndpoint+0x104>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8029742:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8029746:	b292      	uxth	r2, r2
 8029748:	441a      	add	r2, r3
 802974a:	780c      	ldrb	r4, [r1, #0]
 802974c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8029750:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8029754:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8029758:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 802975c:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8029760:	780c      	ldrb	r4, [r1, #0]
 8029762:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029766:	f012 0f40 	tst.w	r2, #64	; 0x40
 802976a:	d00c      	beq.n	8029786 <USB_ActivateEndpoint+0xa4>
 802976c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029770:	b292      	uxth	r2, r2
 8029772:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8029776:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 802977a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802977e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8029782:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8029786:	78ca      	ldrb	r2, [r1, #3]
 8029788:	2a01      	cmp	r2, #1
 802978a:	d01d      	beq.n	80297c8 <USB_ActivateEndpoint+0xe6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 802978c:	7809      	ldrb	r1, [r1, #0]
 802978e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8029792:	b292      	uxth	r2, r2
 8029794:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8029798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802979c:	f082 0220 	eor.w	r2, r2, #32
 80297a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80297a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80297a8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80297ac:	e117      	b.n	80299de <USB_ActivateEndpoint+0x2fc>
      wEpRegVal |= USB_EP_CONTROL;
 80297ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 80297b2:	e7aa      	b.n	802970a <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 80297b4:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80297b8:	2000      	movs	r0, #0
      break;
 80297ba:	e7a6      	b.n	802970a <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80297bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80297c0:	2000      	movs	r0, #0
      break;
 80297c2:	e7a2      	b.n	802970a <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 80297c4:	2001      	movs	r0, #1
 80297c6:	e7a0      	b.n	802970a <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80297c8:	7809      	ldrb	r1, [r1, #0]
 80297ca:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80297ce:	b292      	uxth	r2, r2
 80297d0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80297d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80297d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80297dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80297e0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80297e4:	e0fb      	b.n	80299de <USB_ActivateEndpoint+0x2fc>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80297e6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80297ea:	b292      	uxth	r2, r2
 80297ec:	441a      	add	r2, r3
 80297ee:	780c      	ldrb	r4, [r1, #0]
 80297f0:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80297f4:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 80297f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80297fc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8029800:	f8a2 c408 	strh.w	ip, [r2, #1032]	; 0x408

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8029804:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8029808:	b292      	uxth	r2, r2
 802980a:	441a      	add	r2, r3
 802980c:	780c      	ldrb	r4, [r1, #0]
 802980e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8029812:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	; 0x40c
 8029816:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 802981a:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
 802981e:	690c      	ldr	r4, [r1, #16]
 8029820:	2c3e      	cmp	r4, #62	; 0x3e
 8029822:	d939      	bls.n	8029898 <USB_ActivateEndpoint+0x1b6>
 8029824:	ea4f 1e54 	mov.w	lr, r4, lsr #5
 8029828:	f014 0f1f 	tst.w	r4, #31
 802982c:	d101      	bne.n	8029832 <USB_ActivateEndpoint+0x150>
 802982e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8029832:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	; 0x40c
 8029836:	fa1f fc8c 	uxth.w	ip, ip
 802983a:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 802983e:	fa1f fe8e 	uxth.w	lr, lr
 8029842:	ea4c 0c0e 	orr.w	ip, ip, lr
 8029846:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 802984a:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 802984e:	780c      	ldrb	r4, [r1, #0]
 8029850:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029854:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8029858:	d00c      	beq.n	8029874 <USB_ActivateEndpoint+0x192>
 802985a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 802985e:	b292      	uxth	r2, r2
 8029860:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8029864:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8029868:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 802986c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8029870:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->num == 0U)
 8029874:	7809      	ldrb	r1, [r1, #0]
 8029876:	bb69      	cbnz	r1, 80298d4 <USB_ActivateEndpoint+0x1f2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8029878:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 802987c:	b292      	uxth	r2, r2
 802987e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8029882:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8029886:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 802988a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802988e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8029892:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8029896:	e0a2      	b.n	80299de <USB_ActivateEndpoint+0x2fc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8029898:	b94c      	cbnz	r4, 80298ae <USB_ActivateEndpoint+0x1cc>
 802989a:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 802989e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80298a2:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80298a6:	b2a4      	uxth	r4, r4
 80298a8:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80298ac:	e7cf      	b.n	802984e <USB_ActivateEndpoint+0x16c>
 80298ae:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80298b2:	f014 0f01 	tst.w	r4, #1
 80298b6:	d001      	beq.n	80298bc <USB_ActivateEndpoint+0x1da>
 80298b8:	f10c 0c01 	add.w	ip, ip, #1
 80298bc:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 80298c0:	b2a4      	uxth	r4, r4
 80298c2:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80298c6:	fa1f fc8c 	uxth.w	ip, ip
 80298ca:	ea44 040c 	orr.w	r4, r4, ip
 80298ce:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80298d2:	e7bc      	b.n	802984e <USB_ActivateEndpoint+0x16c>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80298d4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80298d8:	b292      	uxth	r2, r2
 80298da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80298de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80298e2:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80298e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80298ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80298ee:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80298f2:	e074      	b.n	80299de <USB_ActivateEndpoint+0x2fc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80298f4:	78ca      	ldrb	r2, [r1, #3]
 80298f6:	2a02      	cmp	r2, #2
 80298f8:	d072      	beq.n	80299e0 <USB_ActivateEndpoint+0x2fe>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80298fa:	780c      	ldrb	r4, [r1, #0]
 80298fc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029900:	b292      	uxth	r2, r2
 8029902:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8029906:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 802990a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802990e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8029912:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8029916:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 802991a:	b292      	uxth	r2, r2
 802991c:	441a      	add	r2, r3
 802991e:	f891 c000 	ldrb.w	ip, [r1]
 8029922:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8029926:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 802992a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 802992e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8029932:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 8029936:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 802993a:	b292      	uxth	r2, r2
 802993c:	441a      	add	r2, r3
 802993e:	f891 c000 	ldrb.w	ip, [r1]
 8029942:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8029946:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 802994a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 802994e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8029952:	f8a2 c408 	strh.w	ip, [r2, #1032]	; 0x408

    if (ep->is_in == 0U)
 8029956:	784a      	ldrb	r2, [r1, #1]
 8029958:	2a00      	cmp	r2, #0
 802995a:	d150      	bne.n	80299fe <USB_ActivateEndpoint+0x31c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 802995c:	780c      	ldrb	r4, [r1, #0]
 802995e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029962:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8029966:	d00c      	beq.n	8029982 <USB_ActivateEndpoint+0x2a0>
 8029968:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 802996c:	b292      	uxth	r2, r2
 802996e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8029972:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8029976:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 802997a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802997e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8029982:	780c      	ldrb	r4, [r1, #0]
 8029984:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029988:	f012 0f40 	tst.w	r2, #64	; 0x40
 802998c:	d00c      	beq.n	80299a8 <USB_ActivateEndpoint+0x2c6>
 802998e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029992:	b292      	uxth	r2, r2
 8029994:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8029998:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 802999c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80299a0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80299a4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80299a8:	f891 c000 	ldrb.w	ip, [r1]
 80299ac:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80299b0:	b292      	uxth	r2, r2
 80299b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80299b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80299ba:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80299be:	f248 0480 	movw	r4, #32896	; 0x8080
 80299c2:	4322      	orrs	r2, r4
 80299c4:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80299c8:	7809      	ldrb	r1, [r1, #0]
 80299ca:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80299ce:	b292      	uxth	r2, r2
 80299d0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80299d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80299d8:	4322      	orrs	r2, r4
 80299da:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80299de:	bd10      	pop	{r4, pc}
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80299e0:	780c      	ldrb	r4, [r1, #0]
 80299e2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80299e6:	b292      	uxth	r2, r2
 80299e8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80299ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80299f0:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80299f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80299f8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80299fc:	e78b      	b.n	8029916 <USB_ActivateEndpoint+0x234>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80299fe:	780c      	ldrb	r4, [r1, #0]
 8029a00:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029a04:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8029a08:	d00c      	beq.n	8029a24 <USB_ActivateEndpoint+0x342>
 8029a0a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029a0e:	b292      	uxth	r2, r2
 8029a10:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8029a14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8029a18:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8029a1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8029a20:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8029a24:	780c      	ldrb	r4, [r1, #0]
 8029a26:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029a2a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8029a2e:	d00c      	beq.n	8029a4a <USB_ActivateEndpoint+0x368>
 8029a30:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029a34:	b292      	uxth	r2, r2
 8029a36:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8029a3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8029a3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029a42:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8029a46:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8029a4a:	78ca      	ldrb	r2, [r1, #3]
 8029a4c:	2a01      	cmp	r2, #1
 8029a4e:	d01e      	beq.n	8029a8e <USB_ActivateEndpoint+0x3ac>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8029a50:	780c      	ldrb	r4, [r1, #0]
 8029a52:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029a56:	b292      	uxth	r2, r2
 8029a58:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8029a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029a60:	f082 0220 	eor.w	r2, r2, #32
 8029a64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029a68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8029a6c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8029a70:	7809      	ldrb	r1, [r1, #0]
 8029a72:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8029a76:	b292      	uxth	r2, r2
 8029a78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8029a7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8029a80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029a84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8029a88:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8029a8c:	e7a7      	b.n	80299de <USB_ActivateEndpoint+0x2fc>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8029a8e:	780c      	ldrb	r4, [r1, #0]
 8029a90:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8029a94:	b292      	uxth	r2, r2
 8029a96:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8029a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029aa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8029aa6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8029aaa:	e7e1      	b.n	8029a70 <USB_ActivateEndpoint+0x38e>

08029aac <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8029aac:	7b0b      	ldrb	r3, [r1, #12]
 8029aae:	2b00      	cmp	r3, #0
 8029ab0:	d146      	bne.n	8029b40 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8029ab2:	784b      	ldrb	r3, [r1, #1]
 8029ab4:	b313      	cbz	r3, 8029afc <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8029ab6:	780a      	ldrb	r2, [r1, #0]
 8029ab8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029abc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029ac0:	d00c      	beq.n	8029adc <USB_DeactivateEndpoint+0x30>
 8029ac2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029ac6:	b29b      	uxth	r3, r3
 8029ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029ad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8029ad8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8029adc:	780a      	ldrb	r2, [r1, #0]
 8029ade:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029ae2:	b29b      	uxth	r3, r3
 8029ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029af4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8029af8:	2000      	movs	r0, #0
 8029afa:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8029afc:	780a      	ldrb	r2, [r1, #0]
 8029afe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029b02:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8029b06:	d00c      	beq.n	8029b22 <USB_DeactivateEndpoint+0x76>
 8029b08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029b0c:	b29b      	uxth	r3, r3
 8029b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029b16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8029b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029b1e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8029b22:	780a      	ldrb	r2, [r1, #0]
 8029b24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029b28:	b29b      	uxth	r3, r3
 8029b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029b3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8029b3e:	e7db      	b.n	8029af8 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8029b40:	784b      	ldrb	r3, [r1, #1]
 8029b42:	2b00      	cmp	r3, #0
 8029b44:	d14e      	bne.n	8029be4 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8029b46:	780a      	ldrb	r2, [r1, #0]
 8029b48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029b4c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8029b50:	d00c      	beq.n	8029b6c <USB_DeactivateEndpoint+0xc0>
 8029b52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029b56:	b29b      	uxth	r3, r3
 8029b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8029b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029b68:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8029b6c:	780a      	ldrb	r2, [r1, #0]
 8029b6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029b72:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029b76:	d00c      	beq.n	8029b92 <USB_DeactivateEndpoint+0xe6>
 8029b78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029b7c:	b29b      	uxth	r3, r3
 8029b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029b8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8029b8e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8029b92:	780a      	ldrb	r2, [r1, #0]
 8029b94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029b98:	b29b      	uxth	r3, r3
 8029b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029ba6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8029baa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8029bae:	780a      	ldrb	r2, [r1, #0]
 8029bb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029bb4:	b29b      	uxth	r3, r3
 8029bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029bbe:	f248 0c80 	movw	ip, #32896	; 0x8080
 8029bc2:	ea43 030c 	orr.w	r3, r3, ip
 8029bc6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8029bca:	780a      	ldrb	r2, [r1, #0]
 8029bcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029bd0:	b29b      	uxth	r3, r3
 8029bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029bda:	ea43 030c 	orr.w	r3, r3, ip
 8029bde:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8029be2:	e789      	b.n	8029af8 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8029be4:	780a      	ldrb	r2, [r1, #0]
 8029be6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029bea:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8029bee:	d00c      	beq.n	8029c0a <USB_DeactivateEndpoint+0x15e>
 8029bf0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029bf4:	b29b      	uxth	r3, r3
 8029bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029bfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8029c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029c06:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8029c0a:	780a      	ldrb	r2, [r1, #0]
 8029c0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029c10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029c14:	d00c      	beq.n	8029c30 <USB_DeactivateEndpoint+0x184>
 8029c16:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029c1a:	b29b      	uxth	r3, r3
 8029c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029c28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8029c2c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8029c30:	780a      	ldrb	r2, [r1, #0]
 8029c32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029c36:	b29b      	uxth	r3, r3
 8029c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8029c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029c48:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8029c4c:	780a      	ldrb	r2, [r1, #0]
 8029c4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029c52:	b29b      	uxth	r3, r3
 8029c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029c5c:	f248 0c80 	movw	ip, #32896	; 0x8080
 8029c60:	ea43 030c 	orr.w	r3, r3, ip
 8029c64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8029c68:	780a      	ldrb	r2, [r1, #0]
 8029c6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029c6e:	b29b      	uxth	r3, r3
 8029c70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029c78:	ea43 030c 	orr.w	r3, r3, ip
 8029c7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8029c80:	e73a      	b.n	8029af8 <USB_DeactivateEndpoint+0x4c>

08029c82 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8029c82:	784b      	ldrb	r3, [r1, #1]
 8029c84:	b18b      	cbz	r3, 8029caa <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8029c86:	780a      	ldrb	r2, [r1, #0]
 8029c88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029c8c:	b29b      	uxth	r3, r3
 8029c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029c96:	f083 0310 	eor.w	r3, r3, #16
 8029c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029ca2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8029ca6:	2000      	movs	r0, #0
 8029ca8:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8029caa:	780a      	ldrb	r2, [r1, #0]
 8029cac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029cb0:	b29b      	uxth	r3, r3
 8029cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029cba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8029cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029cc6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8029cca:	e7ec      	b.n	8029ca6 <USB_EPSetStall+0x24>

08029ccc <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8029ccc:	7b0b      	ldrb	r3, [r1, #12]
 8029cce:	2b00      	cmp	r3, #0
 8029cd0:	d14b      	bne.n	8029d6a <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8029cd2:	784b      	ldrb	r3, [r1, #1]
 8029cd4:	b333      	cbz	r3, 8029d24 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8029cd6:	780a      	ldrb	r2, [r1, #0]
 8029cd8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029cdc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029ce0:	d00c      	beq.n	8029cfc <USB_EPClearStall+0x30>
 8029ce2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029ce6:	b29b      	uxth	r3, r3
 8029ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8029cf8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8029cfc:	78cb      	ldrb	r3, [r1, #3]
 8029cfe:	2b01      	cmp	r3, #1
 8029d00:	d033      	beq.n	8029d6a <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8029d02:	780a      	ldrb	r2, [r1, #0]
 8029d04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029d08:	b29b      	uxth	r3, r3
 8029d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029d12:	f083 0320 	eor.w	r3, r3, #32
 8029d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029d1e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8029d22:	e022      	b.n	8029d6a <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8029d24:	780a      	ldrb	r2, [r1, #0]
 8029d26:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029d2a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8029d2e:	d00c      	beq.n	8029d4a <USB_EPClearStall+0x7e>
 8029d30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029d34:	b29b      	uxth	r3, r3
 8029d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8029d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029d46:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8029d4a:	780a      	ldrb	r2, [r1, #0]
 8029d4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8029d50:	b29b      	uxth	r3, r3
 8029d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029d5a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8029d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029d66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8029d6a:	2000      	movs	r0, #0
 8029d6c:	4770      	bx	lr

08029d6e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8029d6e:	b911      	cbnz	r1, 8029d76 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8029d70:	2380      	movs	r3, #128	; 0x80
 8029d72:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8029d76:	2000      	movs	r0, #0
 8029d78:	4770      	bx	lr

08029d7a <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8029d7a:	2000      	movs	r0, #0
 8029d7c:	4770      	bx	lr

08029d7e <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8029d7e:	2000      	movs	r0, #0
 8029d80:	4770      	bx	lr

08029d82 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8029d82:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8029d86:	b280      	uxth	r0, r0
 8029d88:	4770      	bx	lr

08029d8a <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8029d8a:	2000      	movs	r0, #0
 8029d8c:	4770      	bx	lr

08029d8e <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8029d8e:	3301      	adds	r3, #1
 8029d90:	085b      	lsrs	r3, r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8029d92:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8029d96:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8029d9a:	e008      	b.n	8029dae <USB_WritePMA+0x20>
  {
    WrVal = pBuf[0];
 8029d9c:	780a      	ldrb	r2, [r1, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8029d9e:	f891 c001 	ldrb.w	ip, [r1, #1]
 8029da2:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 8029da6:	f820 2b04 	strh.w	r2, [r0], #4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8029daa:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8029dac:	3b01      	subs	r3, #1
 8029dae:	2b00      	cmp	r3, #0
 8029db0:	d1f4      	bne.n	8029d9c <USB_WritePMA+0xe>
  }
}
 8029db2:	4770      	bx	lr

08029db4 <USB_EPStartXfer>:
{
 8029db4:	b570      	push	{r4, r5, r6, lr}
 8029db6:	4605      	mov	r5, r0
 8029db8:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8029dba:	784a      	ldrb	r2, [r1, #1]
 8029dbc:	2a01      	cmp	r2, #1
 8029dbe:	d03b      	beq.n	8029e38 <USB_EPStartXfer+0x84>
    if (ep->doublebuffer == 0U)
 8029dc0:	7b0b      	ldrb	r3, [r1, #12]
 8029dc2:	2b00      	cmp	r3, #0
 8029dc4:	f040 82a6 	bne.w	802a314 <USB_EPStartXfer+0x560>
      if (ep->xfer_len > ep->maxpacket)
 8029dc8:	698b      	ldr	r3, [r1, #24]
 8029dca:	690a      	ldr	r2, [r1, #16]
 8029dcc:	4293      	cmp	r3, r2
 8029dce:	f240 8284 	bls.w	802a2da <USB_EPStartXfer+0x526>
        ep->xfer_len -= len;
 8029dd2:	1a9b      	subs	r3, r3, r2
 8029dd4:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8029dd6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8029dda:	b29b      	uxth	r3, r3
 8029ddc:	442b      	add	r3, r5
 8029dde:	7821      	ldrb	r1, [r4, #0]
 8029de0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8029de4:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
 8029de8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8029dec:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8029df0:	2a3e      	cmp	r2, #62	; 0x3e
 8029df2:	f240 8276 	bls.w	802a2e2 <USB_EPStartXfer+0x52e>
 8029df6:	0951      	lsrs	r1, r2, #5
 8029df8:	f012 0f1f 	tst.w	r2, #31
 8029dfc:	d100      	bne.n	8029e00 <USB_EPStartXfer+0x4c>
 8029dfe:	3901      	subs	r1, #1
 8029e00:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8029e04:	b292      	uxth	r2, r2
 8029e06:	0289      	lsls	r1, r1, #10
 8029e08:	b289      	uxth	r1, r1
 8029e0a:	430a      	orrs	r2, r1
 8029e0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029e10:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8029e14:	7822      	ldrb	r2, [r4, #0]
 8029e16:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8029e1a:	b29b      	uxth	r3, r3
 8029e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029e24:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8029e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029e30:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8029e34:	2000      	movs	r0, #0
}
 8029e36:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8029e38:	698e      	ldr	r6, [r1, #24]
 8029e3a:	6909      	ldr	r1, [r1, #16]
 8029e3c:	428e      	cmp	r6, r1
 8029e3e:	d900      	bls.n	8029e42 <USB_EPStartXfer+0x8e>
      len = ep->maxpacket;
 8029e40:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 8029e42:	7b23      	ldrb	r3, [r4, #12]
 8029e44:	b373      	cbz	r3, 8029ea4 <USB_EPStartXfer+0xf0>
      if (ep->type == EP_TYPE_BULK)
 8029e46:	78e3      	ldrb	r3, [r4, #3]
 8029e48:	2b02      	cmp	r3, #2
 8029e4a:	d04d      	beq.n	8029ee8 <USB_EPStartXfer+0x134>
        ep->xfer_len_db -= len;
 8029e4c:	6a23      	ldr	r3, [r4, #32]
 8029e4e:	1b9b      	subs	r3, r3, r6
 8029e50:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8029e52:	7821      	ldrb	r1, [r4, #0]
 8029e54:	f835 3021 	ldrh.w	r3, [r5, r1, lsl #2]
 8029e58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029e5c:	f000 81f5 	beq.w	802a24a <USB_EPStartXfer+0x496>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8029e60:	2a00      	cmp	r2, #0
 8029e62:	f040 81e2 	bne.w	802a22a <USB_EPStartXfer+0x476>
 8029e66:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8029e6a:	b29b      	uxth	r3, r3
 8029e6c:	442b      	add	r3, r5
 8029e6e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8029e72:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8029e76:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8029e7a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8029e7e:	2e3e      	cmp	r6, #62	; 0x3e
 8029e80:	f240 81ba 	bls.w	802a1f8 <USB_EPStartXfer+0x444>
 8029e84:	0971      	lsrs	r1, r6, #5
 8029e86:	f016 0f1f 	tst.w	r6, #31
 8029e8a:	d100      	bne.n	8029e8e <USB_EPStartXfer+0xda>
 8029e8c:	3901      	subs	r1, #1
 8029e8e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8029e92:	b292      	uxth	r2, r2
 8029e94:	0289      	lsls	r1, r1, #10
 8029e96:	b289      	uxth	r1, r1
 8029e98:	430a      	orrs	r2, r1
 8029e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029e9e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8029ea2:	e1cb      	b.n	802a23c <USB_EPStartXfer+0x488>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8029ea4:	b2b6      	uxth	r6, r6
 8029ea6:	4633      	mov	r3, r6
 8029ea8:	88e2      	ldrh	r2, [r4, #6]
 8029eaa:	6961      	ldr	r1, [r4, #20]
 8029eac:	4628      	mov	r0, r5
 8029eae:	f7ff ff6e 	bl	8029d8e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8029eb2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8029eb6:	b29b      	uxth	r3, r3
 8029eb8:	442b      	add	r3, r5
 8029eba:	7822      	ldrb	r2, [r4, #0]
 8029ebc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8029ec0:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8029ec4:	7822      	ldrb	r2, [r4, #0]
 8029ec6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8029eca:	b29b      	uxth	r3, r3
 8029ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029ed4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8029ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029ee0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8029ee4:	2000      	movs	r0, #0
 8029ee6:	e7a6      	b.n	8029e36 <USB_EPStartXfer+0x82>
        if (ep->xfer_len_db > ep->maxpacket)
 8029ee8:	6a23      	ldr	r3, [r4, #32]
 8029eea:	4299      	cmp	r1, r3
 8029eec:	f080 8166 	bcs.w	802a1bc <USB_EPStartXfer+0x408>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8029ef0:	7822      	ldrb	r2, [r4, #0]
 8029ef2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8029ef6:	b29b      	uxth	r3, r3
 8029ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029f00:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8029f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029f08:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8029f0c:	6a23      	ldr	r3, [r4, #32]
 8029f0e:	1b9b      	subs	r3, r3, r6
 8029f10:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8029f12:	7822      	ldrb	r2, [r4, #0]
 8029f14:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8029f18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029f1c:	f000 80a7 	beq.w	802a06e <USB_EPStartXfer+0x2ba>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8029f20:	7863      	ldrb	r3, [r4, #1]
 8029f22:	bbb3      	cbnz	r3, 8029f92 <USB_EPStartXfer+0x1de>
 8029f24:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8029f28:	b29b      	uxth	r3, r3
 8029f2a:	442b      	add	r3, r5
 8029f2c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8029f30:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8029f34:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8029f38:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8029f3c:	2e3e      	cmp	r6, #62	; 0x3e
 8029f3e:	d90f      	bls.n	8029f60 <USB_EPStartXfer+0x1ac>
 8029f40:	0971      	lsrs	r1, r6, #5
 8029f42:	f016 0f1f 	tst.w	r6, #31
 8029f46:	d100      	bne.n	8029f4a <USB_EPStartXfer+0x196>
 8029f48:	3901      	subs	r1, #1
 8029f4a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8029f4e:	b292      	uxth	r2, r2
 8029f50:	0289      	lsls	r1, r1, #10
 8029f52:	b289      	uxth	r1, r1
 8029f54:	430a      	orrs	r2, r1
 8029f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029f5a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8029f5e:	e01a      	b.n	8029f96 <USB_EPStartXfer+0x1e2>
 8029f60:	b94e      	cbnz	r6, 8029f76 <USB_EPStartXfer+0x1c2>
 8029f62:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8029f66:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8029f6a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8029f6e:	b292      	uxth	r2, r2
 8029f70:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8029f74:	e00f      	b.n	8029f96 <USB_EPStartXfer+0x1e2>
 8029f76:	0872      	lsrs	r2, r6, #1
 8029f78:	f016 0f01 	tst.w	r6, #1
 8029f7c:	d000      	beq.n	8029f80 <USB_EPStartXfer+0x1cc>
 8029f7e:	3201      	adds	r2, #1
 8029f80:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
 8029f84:	b289      	uxth	r1, r1
 8029f86:	0292      	lsls	r2, r2, #10
 8029f88:	b292      	uxth	r2, r2
 8029f8a:	430a      	orrs	r2, r1
 8029f8c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8029f90:	e001      	b.n	8029f96 <USB_EPStartXfer+0x1e2>
 8029f92:	2b01      	cmp	r3, #1
 8029f94:	d030      	beq.n	8029ff8 <USB_EPStartXfer+0x244>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8029f96:	b2b3      	uxth	r3, r6
 8029f98:	8962      	ldrh	r2, [r4, #10]
 8029f9a:	6961      	ldr	r1, [r4, #20]
 8029f9c:	4628      	mov	r0, r5
 8029f9e:	f7ff fef6 	bl	8029d8e <USB_WritePMA>
            ep->xfer_buff += len;
 8029fa2:	6963      	ldr	r3, [r4, #20]
 8029fa4:	4433      	add	r3, r6
 8029fa6:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8029fa8:	6a23      	ldr	r3, [r4, #32]
 8029faa:	6922      	ldr	r2, [r4, #16]
 8029fac:	4293      	cmp	r3, r2
 8029fae:	d92d      	bls.n	802a00c <USB_EPStartXfer+0x258>
              ep->xfer_len_db -= len;
 8029fb0:	1b9b      	subs	r3, r3, r6
 8029fb2:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8029fb4:	7863      	ldrb	r3, [r4, #1]
 8029fb6:	2b00      	cmp	r3, #0
 8029fb8:	d145      	bne.n	802a046 <USB_EPStartXfer+0x292>
 8029fba:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8029fbe:	b29b      	uxth	r3, r3
 8029fc0:	442b      	add	r3, r5
 8029fc2:	7822      	ldrb	r2, [r4, #0]
 8029fc4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8029fc8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8029fcc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8029fd0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8029fd4:	2e3e      	cmp	r6, #62	; 0x3e
 8029fd6:	d91d      	bls.n	802a014 <USB_EPStartXfer+0x260>
 8029fd8:	0971      	lsrs	r1, r6, #5
 8029fda:	f016 0f1f 	tst.w	r6, #31
 8029fde:	d100      	bne.n	8029fe2 <USB_EPStartXfer+0x22e>
 8029fe0:	3901      	subs	r1, #1
 8029fe2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8029fe6:	b292      	uxth	r2, r2
 8029fe8:	0289      	lsls	r1, r1, #10
 8029fea:	b289      	uxth	r1, r1
 8029fec:	430a      	orrs	r2, r1
 8029fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029ff2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8029ff6:	e028      	b.n	802a04a <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8029ff8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8029ffc:	b29b      	uxth	r3, r3
 8029ffe:	442b      	add	r3, r5
 802a000:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 802a004:	b2b2      	uxth	r2, r6
 802a006:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a00a:	e7c4      	b.n	8029f96 <USB_EPStartXfer+0x1e2>
              ep->xfer_len_db = 0U;
 802a00c:	2200      	movs	r2, #0
 802a00e:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 802a010:	461e      	mov	r6, r3
 802a012:	e7cf      	b.n	8029fb4 <USB_EPStartXfer+0x200>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 802a014:	b94e      	cbnz	r6, 802a02a <USB_EPStartXfer+0x276>
 802a016:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802a01a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 802a01e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 802a022:	b292      	uxth	r2, r2
 802a024:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a028:	e00f      	b.n	802a04a <USB_EPStartXfer+0x296>
 802a02a:	0872      	lsrs	r2, r6, #1
 802a02c:	f016 0f01 	tst.w	r6, #1
 802a030:	d000      	beq.n	802a034 <USB_EPStartXfer+0x280>
 802a032:	3201      	adds	r2, #1
 802a034:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 802a038:	b289      	uxth	r1, r1
 802a03a:	0292      	lsls	r2, r2, #10
 802a03c:	b292      	uxth	r2, r2
 802a03e:	430a      	orrs	r2, r1
 802a040:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a044:	e001      	b.n	802a04a <USB_EPStartXfer+0x296>
 802a046:	2b01      	cmp	r3, #1
 802a048:	d006      	beq.n	802a058 <USB_EPStartXfer+0x2a4>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802a04a:	b2b3      	uxth	r3, r6
 802a04c:	8922      	ldrh	r2, [r4, #8]
 802a04e:	6961      	ldr	r1, [r4, #20]
 802a050:	4628      	mov	r0, r5
 802a052:	f7ff fe9c 	bl	8029d8e <USB_WritePMA>
 802a056:	e735      	b.n	8029ec4 <USB_EPStartXfer+0x110>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 802a058:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 802a05c:	b29b      	uxth	r3, r3
 802a05e:	442b      	add	r3, r5
 802a060:	7822      	ldrb	r2, [r4, #0]
 802a062:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 802a066:	b2b2      	uxth	r2, r6
 802a068:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a06c:	e7ed      	b.n	802a04a <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 802a06e:	7863      	ldrb	r3, [r4, #1]
 802a070:	bbb3      	cbnz	r3, 802a0e0 <USB_EPStartXfer+0x32c>
 802a072:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 802a076:	b29b      	uxth	r3, r3
 802a078:	442b      	add	r3, r5
 802a07a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 802a07e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802a082:	f3c2 0209 	ubfx	r2, r2, #0, #10
 802a086:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a08a:	2e3e      	cmp	r6, #62	; 0x3e
 802a08c:	d90f      	bls.n	802a0ae <USB_EPStartXfer+0x2fa>
 802a08e:	0971      	lsrs	r1, r6, #5
 802a090:	f016 0f1f 	tst.w	r6, #31
 802a094:	d100      	bne.n	802a098 <USB_EPStartXfer+0x2e4>
 802a096:	3901      	subs	r1, #1
 802a098:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802a09c:	b292      	uxth	r2, r2
 802a09e:	0289      	lsls	r1, r1, #10
 802a0a0:	b289      	uxth	r1, r1
 802a0a2:	430a      	orrs	r2, r1
 802a0a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802a0a8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a0ac:	e01a      	b.n	802a0e4 <USB_EPStartXfer+0x330>
 802a0ae:	b94e      	cbnz	r6, 802a0c4 <USB_EPStartXfer+0x310>
 802a0b0:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802a0b4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 802a0b8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 802a0bc:	b292      	uxth	r2, r2
 802a0be:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a0c2:	e00f      	b.n	802a0e4 <USB_EPStartXfer+0x330>
 802a0c4:	0872      	lsrs	r2, r6, #1
 802a0c6:	f016 0f01 	tst.w	r6, #1
 802a0ca:	d000      	beq.n	802a0ce <USB_EPStartXfer+0x31a>
 802a0cc:	3201      	adds	r2, #1
 802a0ce:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 802a0d2:	b289      	uxth	r1, r1
 802a0d4:	0292      	lsls	r2, r2, #10
 802a0d6:	b292      	uxth	r2, r2
 802a0d8:	430a      	orrs	r2, r1
 802a0da:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a0de:	e001      	b.n	802a0e4 <USB_EPStartXfer+0x330>
 802a0e0:	2b01      	cmp	r3, #1
 802a0e2:	d030      	beq.n	802a146 <USB_EPStartXfer+0x392>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802a0e4:	b2b3      	uxth	r3, r6
 802a0e6:	8922      	ldrh	r2, [r4, #8]
 802a0e8:	6961      	ldr	r1, [r4, #20]
 802a0ea:	4628      	mov	r0, r5
 802a0ec:	f7ff fe4f 	bl	8029d8e <USB_WritePMA>
            ep->xfer_buff += len;
 802a0f0:	6963      	ldr	r3, [r4, #20]
 802a0f2:	4433      	add	r3, r6
 802a0f4:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 802a0f6:	6a23      	ldr	r3, [r4, #32]
 802a0f8:	6922      	ldr	r2, [r4, #16]
 802a0fa:	4293      	cmp	r3, r2
 802a0fc:	d92d      	bls.n	802a15a <USB_EPStartXfer+0x3a6>
              ep->xfer_len_db -= len;
 802a0fe:	1b9b      	subs	r3, r3, r6
 802a100:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 802a102:	7863      	ldrb	r3, [r4, #1]
 802a104:	2b00      	cmp	r3, #0
 802a106:	d145      	bne.n	802a194 <USB_EPStartXfer+0x3e0>
 802a108:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 802a10c:	b29b      	uxth	r3, r3
 802a10e:	442b      	add	r3, r5
 802a110:	7822      	ldrb	r2, [r4, #0]
 802a112:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 802a116:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 802a11a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 802a11e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a122:	2e3e      	cmp	r6, #62	; 0x3e
 802a124:	d91d      	bls.n	802a162 <USB_EPStartXfer+0x3ae>
 802a126:	0971      	lsrs	r1, r6, #5
 802a128:	f016 0f1f 	tst.w	r6, #31
 802a12c:	d100      	bne.n	802a130 <USB_EPStartXfer+0x37c>
 802a12e:	3901      	subs	r1, #1
 802a130:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 802a134:	b292      	uxth	r2, r2
 802a136:	0289      	lsls	r1, r1, #10
 802a138:	b289      	uxth	r1, r1
 802a13a:	430a      	orrs	r2, r1
 802a13c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802a140:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a144:	e028      	b.n	802a198 <USB_EPStartXfer+0x3e4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 802a146:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 802a14a:	b29b      	uxth	r3, r3
 802a14c:	442b      	add	r3, r5
 802a14e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 802a152:	b2b2      	uxth	r2, r6
 802a154:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a158:	e7c4      	b.n	802a0e4 <USB_EPStartXfer+0x330>
              ep->xfer_len_db = 0U;
 802a15a:	2200      	movs	r2, #0
 802a15c:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 802a15e:	461e      	mov	r6, r3
 802a160:	e7cf      	b.n	802a102 <USB_EPStartXfer+0x34e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 802a162:	b94e      	cbnz	r6, 802a178 <USB_EPStartXfer+0x3c4>
 802a164:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 802a168:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 802a16c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 802a170:	b292      	uxth	r2, r2
 802a172:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a176:	e00f      	b.n	802a198 <USB_EPStartXfer+0x3e4>
 802a178:	0872      	lsrs	r2, r6, #1
 802a17a:	f016 0f01 	tst.w	r6, #1
 802a17e:	d000      	beq.n	802a182 <USB_EPStartXfer+0x3ce>
 802a180:	3201      	adds	r2, #1
 802a182:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
 802a186:	b289      	uxth	r1, r1
 802a188:	0292      	lsls	r2, r2, #10
 802a18a:	b292      	uxth	r2, r2
 802a18c:	430a      	orrs	r2, r1
 802a18e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a192:	e001      	b.n	802a198 <USB_EPStartXfer+0x3e4>
 802a194:	2b01      	cmp	r3, #1
 802a196:	d006      	beq.n	802a1a6 <USB_EPStartXfer+0x3f2>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802a198:	b2b3      	uxth	r3, r6
 802a19a:	8962      	ldrh	r2, [r4, #10]
 802a19c:	6961      	ldr	r1, [r4, #20]
 802a19e:	4628      	mov	r0, r5
 802a1a0:	f7ff fdf5 	bl	8029d8e <USB_WritePMA>
 802a1a4:	e68e      	b.n	8029ec4 <USB_EPStartXfer+0x110>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 802a1a6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 802a1aa:	b29b      	uxth	r3, r3
 802a1ac:	442b      	add	r3, r5
 802a1ae:	7822      	ldrb	r2, [r4, #0]
 802a1b0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 802a1b4:	b2b2      	uxth	r2, r6
 802a1b6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a1ba:	e7ed      	b.n	802a198 <USB_EPStartXfer+0x3e4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 802a1bc:	7821      	ldrb	r1, [r4, #0]
 802a1be:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 802a1c2:	b292      	uxth	r2, r2
 802a1c4:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 802a1c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 802a1cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802a1d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802a1d4:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 802a1d8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 802a1dc:	b292      	uxth	r2, r2
 802a1de:	442a      	add	r2, r5
 802a1e0:	7821      	ldrb	r1, [r4, #0]
 802a1e2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 802a1e6:	b29b      	uxth	r3, r3
 802a1e8:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802a1ec:	8922      	ldrh	r2, [r4, #8]
 802a1ee:	6961      	ldr	r1, [r4, #20]
 802a1f0:	4628      	mov	r0, r5
 802a1f2:	f7ff fdcc 	bl	8029d8e <USB_WritePMA>
 802a1f6:	e665      	b.n	8029ec4 <USB_EPStartXfer+0x110>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 802a1f8:	b94e      	cbnz	r6, 802a20e <USB_EPStartXfer+0x45a>
 802a1fa:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 802a1fe:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 802a202:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 802a206:	b292      	uxth	r2, r2
 802a208:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a20c:	e016      	b.n	802a23c <USB_EPStartXfer+0x488>
 802a20e:	0872      	lsrs	r2, r6, #1
 802a210:	f016 0f01 	tst.w	r6, #1
 802a214:	d000      	beq.n	802a218 <USB_EPStartXfer+0x464>
 802a216:	3201      	adds	r2, #1
 802a218:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
 802a21c:	b289      	uxth	r1, r1
 802a21e:	0292      	lsls	r2, r2, #10
 802a220:	b292      	uxth	r2, r2
 802a222:	430a      	orrs	r2, r1
 802a224:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a228:	e008      	b.n	802a23c <USB_EPStartXfer+0x488>
 802a22a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 802a22e:	b29b      	uxth	r3, r3
 802a230:	442b      	add	r3, r5
 802a232:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 802a236:	b2b2      	uxth	r2, r6
 802a238:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802a23c:	b2b3      	uxth	r3, r6
 802a23e:	8962      	ldrh	r2, [r4, #10]
 802a240:	6961      	ldr	r1, [r4, #20]
 802a242:	4628      	mov	r0, r5
 802a244:	f7ff fda3 	bl	8029d8e <USB_WritePMA>
 802a248:	e63c      	b.n	8029ec4 <USB_EPStartXfer+0x110>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 802a24a:	bbb2      	cbnz	r2, 802a2ba <USB_EPStartXfer+0x506>
 802a24c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 802a250:	b29b      	uxth	r3, r3
 802a252:	442b      	add	r3, r5
 802a254:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 802a258:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802a25c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 802a260:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a264:	2e3e      	cmp	r6, #62	; 0x3e
 802a266:	d90f      	bls.n	802a288 <USB_EPStartXfer+0x4d4>
 802a268:	0971      	lsrs	r1, r6, #5
 802a26a:	f016 0f1f 	tst.w	r6, #31
 802a26e:	d100      	bne.n	802a272 <USB_EPStartXfer+0x4be>
 802a270:	3901      	subs	r1, #1
 802a272:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802a276:	b292      	uxth	r2, r2
 802a278:	0289      	lsls	r1, r1, #10
 802a27a:	b289      	uxth	r1, r1
 802a27c:	430a      	orrs	r2, r1
 802a27e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802a282:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a286:	e021      	b.n	802a2cc <USB_EPStartXfer+0x518>
 802a288:	b94e      	cbnz	r6, 802a29e <USB_EPStartXfer+0x4ea>
 802a28a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802a28e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 802a292:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 802a296:	b292      	uxth	r2, r2
 802a298:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a29c:	e016      	b.n	802a2cc <USB_EPStartXfer+0x518>
 802a29e:	0872      	lsrs	r2, r6, #1
 802a2a0:	f016 0f01 	tst.w	r6, #1
 802a2a4:	d000      	beq.n	802a2a8 <USB_EPStartXfer+0x4f4>
 802a2a6:	3201      	adds	r2, #1
 802a2a8:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 802a2ac:	b289      	uxth	r1, r1
 802a2ae:	0292      	lsls	r2, r2, #10
 802a2b0:	b292      	uxth	r2, r2
 802a2b2:	430a      	orrs	r2, r1
 802a2b4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a2b8:	e008      	b.n	802a2cc <USB_EPStartXfer+0x518>
 802a2ba:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 802a2be:	b29b      	uxth	r3, r3
 802a2c0:	442b      	add	r3, r5
 802a2c2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 802a2c6:	b2b2      	uxth	r2, r6
 802a2c8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802a2cc:	b2b3      	uxth	r3, r6
 802a2ce:	8922      	ldrh	r2, [r4, #8]
 802a2d0:	6961      	ldr	r1, [r4, #20]
 802a2d2:	4628      	mov	r0, r5
 802a2d4:	f7ff fd5b 	bl	8029d8e <USB_WritePMA>
 802a2d8:	e5f4      	b.n	8029ec4 <USB_EPStartXfer+0x110>
        ep->xfer_len = 0U;
 802a2da:	2200      	movs	r2, #0
 802a2dc:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 802a2de:	461a      	mov	r2, r3
 802a2e0:	e579      	b.n	8029dd6 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 802a2e2:	b94a      	cbnz	r2, 802a2f8 <USB_EPStartXfer+0x544>
 802a2e4:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 802a2e8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 802a2ec:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 802a2f0:	b292      	uxth	r2, r2
 802a2f2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a2f6:	e58d      	b.n	8029e14 <USB_EPStartXfer+0x60>
 802a2f8:	0851      	lsrs	r1, r2, #1
 802a2fa:	f012 0f01 	tst.w	r2, #1
 802a2fe:	d000      	beq.n	802a302 <USB_EPStartXfer+0x54e>
 802a300:	3101      	adds	r1, #1
 802a302:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 802a306:	b292      	uxth	r2, r2
 802a308:	0289      	lsls	r1, r1, #10
 802a30a:	b289      	uxth	r1, r1
 802a30c:	430a      	orrs	r2, r1
 802a30e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a312:	e57f      	b.n	8029e14 <USB_EPStartXfer+0x60>
      if (ep->type == EP_TYPE_BULK)
 802a314:	78cb      	ldrb	r3, [r1, #3]
 802a316:	2b02      	cmp	r3, #2
 802a318:	d04d      	beq.n	802a3b6 <USB_EPStartXfer+0x602>
      else if (ep->type == EP_TYPE_ISOC)
 802a31a:	2b01      	cmp	r3, #1
 802a31c:	f040 812f 	bne.w	802a57e <USB_EPStartXfer+0x7ca>
        if (ep->xfer_len > ep->maxpacket)
 802a320:	6989      	ldr	r1, [r1, #24]
 802a322:	6923      	ldr	r3, [r4, #16]
 802a324:	4299      	cmp	r1, r3
 802a326:	f240 80e6 	bls.w	802a4f6 <USB_EPStartXfer+0x742>
          ep->xfer_len -= len;
 802a32a:	1ac9      	subs	r1, r1, r3
 802a32c:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 802a32e:	b9f2      	cbnz	r2, 802a36e <USB_EPStartXfer+0x5ba>
 802a330:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 802a334:	b292      	uxth	r2, r2
 802a336:	442a      	add	r2, r5
 802a338:	7821      	ldrb	r1, [r4, #0]
 802a33a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 802a33e:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 802a342:	f3c1 0109 	ubfx	r1, r1, #0, #10
 802a346:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 802a34a:	2b3e      	cmp	r3, #62	; 0x3e
 802a34c:	f240 80d7 	bls.w	802a4fe <USB_EPStartXfer+0x74a>
 802a350:	0958      	lsrs	r0, r3, #5
 802a352:	f013 0f1f 	tst.w	r3, #31
 802a356:	d100      	bne.n	802a35a <USB_EPStartXfer+0x5a6>
 802a358:	3801      	subs	r0, #1
 802a35a:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 802a35e:	b289      	uxth	r1, r1
 802a360:	0280      	lsls	r0, r0, #10
 802a362:	b280      	uxth	r0, r0
 802a364:	4301      	orrs	r1, r0
 802a366:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 802a36a:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 802a36e:	7862      	ldrb	r2, [r4, #1]
 802a370:	2a00      	cmp	r2, #0
 802a372:	f040 80f6 	bne.w	802a562 <USB_EPStartXfer+0x7ae>
 802a376:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 802a37a:	b292      	uxth	r2, r2
 802a37c:	442a      	add	r2, r5
 802a37e:	7821      	ldrb	r1, [r4, #0]
 802a380:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 802a384:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 802a388:	f3c1 0109 	ubfx	r1, r1, #0, #10
 802a38c:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 802a390:	2b3e      	cmp	r3, #62	; 0x3e
 802a392:	f240 80cd 	bls.w	802a530 <USB_EPStartXfer+0x77c>
 802a396:	0959      	lsrs	r1, r3, #5
 802a398:	f013 0f1f 	tst.w	r3, #31
 802a39c:	d100      	bne.n	802a3a0 <USB_EPStartXfer+0x5ec>
 802a39e:	3901      	subs	r1, #1
 802a3a0:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 802a3a4:	b29b      	uxth	r3, r3
 802a3a6:	0289      	lsls	r1, r1, #10
 802a3a8:	b289      	uxth	r1, r1
 802a3aa:	430b      	orrs	r3, r1
 802a3ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802a3b0:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 802a3b4:	e52e      	b.n	8029e14 <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 802a3b6:	b9f2      	cbnz	r2, 802a3f6 <USB_EPStartXfer+0x642>
 802a3b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 802a3bc:	b29b      	uxth	r3, r3
 802a3be:	4403      	add	r3, r0
 802a3c0:	780a      	ldrb	r2, [r1, #0]
 802a3c2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 802a3c6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802a3ca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 802a3ce:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a3d2:	690a      	ldr	r2, [r1, #16]
 802a3d4:	2a3e      	cmp	r2, #62	; 0x3e
 802a3d6:	d931      	bls.n	802a43c <USB_EPStartXfer+0x688>
 802a3d8:	0951      	lsrs	r1, r2, #5
 802a3da:	f012 0f1f 	tst.w	r2, #31
 802a3de:	d100      	bne.n	802a3e2 <USB_EPStartXfer+0x62e>
 802a3e0:	3901      	subs	r1, #1
 802a3e2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802a3e6:	b292      	uxth	r2, r2
 802a3e8:	0289      	lsls	r1, r1, #10
 802a3ea:	b289      	uxth	r1, r1
 802a3ec:	430a      	orrs	r2, r1
 802a3ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802a3f2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a3f6:	7863      	ldrb	r3, [r4, #1]
 802a3f8:	2b00      	cmp	r3, #0
 802a3fa:	d151      	bne.n	802a4a0 <USB_EPStartXfer+0x6ec>
 802a3fc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 802a400:	b29b      	uxth	r3, r3
 802a402:	442b      	add	r3, r5
 802a404:	7822      	ldrb	r2, [r4, #0]
 802a406:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 802a40a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 802a40e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 802a412:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a416:	6922      	ldr	r2, [r4, #16]
 802a418:	2a3e      	cmp	r2, #62	; 0x3e
 802a41a:	d928      	bls.n	802a46e <USB_EPStartXfer+0x6ba>
 802a41c:	0951      	lsrs	r1, r2, #5
 802a41e:	f012 0f1f 	tst.w	r2, #31
 802a422:	d100      	bne.n	802a426 <USB_EPStartXfer+0x672>
 802a424:	3901      	subs	r1, #1
 802a426:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 802a42a:	b292      	uxth	r2, r2
 802a42c:	0289      	lsls	r1, r1, #10
 802a42e:	b289      	uxth	r1, r1
 802a430:	430a      	orrs	r2, r1
 802a432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802a436:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a43a:	e033      	b.n	802a4a4 <USB_EPStartXfer+0x6f0>
 802a43c:	b94a      	cbnz	r2, 802a452 <USB_EPStartXfer+0x69e>
 802a43e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802a442:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 802a446:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 802a44a:	b292      	uxth	r2, r2
 802a44c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a450:	e7d1      	b.n	802a3f6 <USB_EPStartXfer+0x642>
 802a452:	0851      	lsrs	r1, r2, #1
 802a454:	f012 0f01 	tst.w	r2, #1
 802a458:	d000      	beq.n	802a45c <USB_EPStartXfer+0x6a8>
 802a45a:	3101      	adds	r1, #1
 802a45c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 802a460:	b290      	uxth	r0, r2
 802a462:	028a      	lsls	r2, r1, #10
 802a464:	b292      	uxth	r2, r2
 802a466:	4302      	orrs	r2, r0
 802a468:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 802a46c:	e7c3      	b.n	802a3f6 <USB_EPStartXfer+0x642>
 802a46e:	b94a      	cbnz	r2, 802a484 <USB_EPStartXfer+0x6d0>
 802a470:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 802a474:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 802a478:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 802a47c:	b292      	uxth	r2, r2
 802a47e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a482:	e00f      	b.n	802a4a4 <USB_EPStartXfer+0x6f0>
 802a484:	0851      	lsrs	r1, r2, #1
 802a486:	f012 0f01 	tst.w	r2, #1
 802a48a:	d000      	beq.n	802a48e <USB_EPStartXfer+0x6da>
 802a48c:	3101      	adds	r1, #1
 802a48e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 802a492:	b290      	uxth	r0, r2
 802a494:	028a      	lsls	r2, r1, #10
 802a496:	b292      	uxth	r2, r2
 802a498:	4302      	orrs	r2, r0
 802a49a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a49e:	e001      	b.n	802a4a4 <USB_EPStartXfer+0x6f0>
 802a4a0:	2b01      	cmp	r3, #1
 802a4a2:	d01d      	beq.n	802a4e0 <USB_EPStartXfer+0x72c>
        if (ep->xfer_count != 0U)
 802a4a4:	69e3      	ldr	r3, [r4, #28]
 802a4a6:	2b00      	cmp	r3, #0
 802a4a8:	f43f acb4 	beq.w	8029e14 <USB_EPStartXfer+0x60>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 802a4ac:	7822      	ldrb	r2, [r4, #0]
 802a4ae:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 802a4b2:	f244 0340 	movw	r3, #16448	; 0x4040
 802a4b6:	ea03 0001 	and.w	r0, r3, r1
 802a4ba:	438b      	bics	r3, r1
 802a4bc:	d002      	beq.n	802a4c4 <USB_EPStartXfer+0x710>
 802a4be:	2800      	cmp	r0, #0
 802a4c0:	f47f aca8 	bne.w	8029e14 <USB_EPStartXfer+0x60>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 802a4c4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 802a4c8:	b29b      	uxth	r3, r3
 802a4ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802a4ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a4d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802a4d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 802a4da:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 802a4de:	e499      	b.n	8029e14 <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 802a4e0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 802a4e4:	b29b      	uxth	r3, r3
 802a4e6:	442b      	add	r3, r5
 802a4e8:	7822      	ldrb	r2, [r4, #0]
 802a4ea:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 802a4ee:	8a22      	ldrh	r2, [r4, #16]
 802a4f0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 802a4f4:	e7d6      	b.n	802a4a4 <USB_EPStartXfer+0x6f0>
          ep->xfer_len = 0U;
 802a4f6:	2300      	movs	r3, #0
 802a4f8:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 802a4fa:	460b      	mov	r3, r1
 802a4fc:	e717      	b.n	802a32e <USB_EPStartXfer+0x57a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 802a4fe:	b94b      	cbnz	r3, 802a514 <USB_EPStartXfer+0x760>
 802a500:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 802a504:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 802a508:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 802a50c:	b289      	uxth	r1, r1
 802a50e:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 802a512:	e72c      	b.n	802a36e <USB_EPStartXfer+0x5ba>
 802a514:	0859      	lsrs	r1, r3, #1
 802a516:	f013 0f01 	tst.w	r3, #1
 802a51a:	d000      	beq.n	802a51e <USB_EPStartXfer+0x76a>
 802a51c:	3101      	adds	r1, #1
 802a51e:	f8b2 0404 	ldrh.w	r0, [r2, #1028]	; 0x404
 802a522:	b280      	uxth	r0, r0
 802a524:	0289      	lsls	r1, r1, #10
 802a526:	b289      	uxth	r1, r1
 802a528:	4301      	orrs	r1, r0
 802a52a:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 802a52e:	e71e      	b.n	802a36e <USB_EPStartXfer+0x5ba>
 802a530:	b94b      	cbnz	r3, 802a546 <USB_EPStartXfer+0x792>
 802a532:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 802a536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 802a53a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 802a53e:	b29b      	uxth	r3, r3
 802a540:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 802a544:	e466      	b.n	8029e14 <USB_EPStartXfer+0x60>
 802a546:	0859      	lsrs	r1, r3, #1
 802a548:	f013 0f01 	tst.w	r3, #1
 802a54c:	d000      	beq.n	802a550 <USB_EPStartXfer+0x79c>
 802a54e:	3101      	adds	r1, #1
 802a550:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 802a554:	b298      	uxth	r0, r3
 802a556:	028b      	lsls	r3, r1, #10
 802a558:	b29b      	uxth	r3, r3
 802a55a:	4303      	orrs	r3, r0
 802a55c:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 802a560:	e458      	b.n	8029e14 <USB_EPStartXfer+0x60>
 802a562:	2a01      	cmp	r2, #1
 802a564:	f47f ac56 	bne.w	8029e14 <USB_EPStartXfer+0x60>
 802a568:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 802a56c:	b292      	uxth	r2, r2
 802a56e:	442a      	add	r2, r5
 802a570:	7821      	ldrb	r1, [r4, #0]
 802a572:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 802a576:	b29b      	uxth	r3, r3
 802a578:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 802a57c:	e44a      	b.n	8029e14 <USB_EPStartXfer+0x60>
        return HAL_ERROR;
 802a57e:	2001      	movs	r0, #1
 802a580:	e459      	b.n	8029e36 <USB_EPStartXfer+0x82>

0802a582 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 802a582:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 802a584:	085c      	lsrs	r4, r3, #1
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 802a586:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802a58a:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (count = n; count != 0U; count--)
 802a58e:	e007      	b.n	802a5a0 <USB_ReadPMA+0x1e>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 802a590:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802a594:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 802a596:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802a59a:	704a      	strb	r2, [r1, #1]
    pBuf++;
 802a59c:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 802a59e:	3c01      	subs	r4, #1
 802a5a0:	2c00      	cmp	r4, #0
 802a5a2:	d1f5      	bne.n	802a590 <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 802a5a4:	f013 0f01 	tst.w	r3, #1
 802a5a8:	d001      	beq.n	802a5ae <USB_ReadPMA+0x2c>
  {
    RdVal = *pdwVal;
 802a5aa:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802a5ac:	700b      	strb	r3, [r1, #0]
  }
}
 802a5ae:	bc10      	pop	{r4}
 802a5b0:	4770      	bx	lr

0802a5b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 802a5b2:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802a5b4:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 802a5b8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 802a5bc:	b15b      	cbz	r3, 802a5d6 <USBD_CDC_EP0_RxReady+0x24>
 802a5be:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 802a5c2:	28ff      	cmp	r0, #255	; 0xff
 802a5c4:	d007      	beq.n	802a5d6 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 802a5c6:	689b      	ldr	r3, [r3, #8]
 802a5c8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 802a5cc:	4621      	mov	r1, r4
 802a5ce:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 802a5d0:	23ff      	movs	r3, #255	; 0xff
 802a5d2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 802a5d6:	2000      	movs	r0, #0
 802a5d8:	bd10      	pop	{r4, pc}
	...

0802a5dc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 802a5dc:	2343      	movs	r3, #67	; 0x43
 802a5de:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 802a5e0:	4800      	ldr	r0, [pc, #0]	; (802a5e4 <USBD_CDC_GetFSCfgDesc+0x8>)
 802a5e2:	4770      	bx	lr
 802a5e4:	200000d4 	.word	0x200000d4

0802a5e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 802a5e8:	2343      	movs	r3, #67	; 0x43
 802a5ea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 802a5ec:	4800      	ldr	r0, [pc, #0]	; (802a5f0 <USBD_CDC_GetHSCfgDesc+0x8>)
 802a5ee:	4770      	bx	lr
 802a5f0:	20000118 	.word	0x20000118

0802a5f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 802a5f4:	2343      	movs	r3, #67	; 0x43
 802a5f6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 802a5f8:	4800      	ldr	r0, [pc, #0]	; (802a5fc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 802a5fa:	4770      	bx	lr
 802a5fc:	20000168 	.word	0x20000168

0802a600 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 802a600:	230a      	movs	r3, #10
 802a602:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 802a604:	4800      	ldr	r0, [pc, #0]	; (802a608 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 802a606:	4770      	bx	lr
 802a608:	2000015c 	.word	0x2000015c

0802a60c <USBD_CDC_DataOut>:
{
 802a60c:	b538      	push	{r3, r4, r5, lr}
 802a60e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802a610:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802a614:	f001 f860 	bl	802b6d8 <USBD_LL_GetRxDataSize>
 802a618:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 802a61c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 802a620:	b14b      	cbz	r3, 802a636 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802a622:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 802a626:	68db      	ldr	r3, [r3, #12]
 802a628:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 802a62c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 802a630:	4798      	blx	r3
    return USBD_OK;
 802a632:	2000      	movs	r0, #0
}
 802a634:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 802a636:	2002      	movs	r0, #2
 802a638:	e7fc      	b.n	802a634 <USBD_CDC_DataOut+0x28>

0802a63a <USBD_CDC_DataIn>:
{
 802a63a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 802a63c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 802a640:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
  if (pdev->pClassData != NULL)
 802a644:	b1f2      	cbz	r2, 802a684 <USBD_CDC_DataIn+0x4a>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 802a646:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 802a64a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802a64e:	69db      	ldr	r3, [r3, #28]
 802a650:	b14b      	cbz	r3, 802a666 <USBD_CDC_DataIn+0x2c>
 802a652:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 802a656:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 802a65a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802a65c:	fbb3 fcf4 	udiv	ip, r3, r4
 802a660:	fb04 331c 	mls	r3, r4, ip, r3
 802a664:	b123      	cbz	r3, 802a670 <USBD_CDC_DataIn+0x36>
      hcdc->TxState = 0U;
 802a666:	2300      	movs	r3, #0
 802a668:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    return USBD_OK;
 802a66c:	2000      	movs	r0, #0
}
 802a66e:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 802a670:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 802a674:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802a678:	2200      	movs	r2, #0
 802a67a:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 802a67c:	4613      	mov	r3, r2
 802a67e:	f001 f81b 	bl	802b6b8 <USBD_LL_Transmit>
 802a682:	e7f3      	b.n	802a66c <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 802a684:	2002      	movs	r0, #2
 802a686:	e7f2      	b.n	802a66e <USBD_CDC_DataIn+0x34>

0802a688 <USBD_CDC_Setup>:
{
 802a688:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a68a:	b083      	sub	sp, #12
 802a68c:	4606      	mov	r6, r0
 802a68e:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802a690:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 802a694:	2300      	movs	r3, #0
 802a696:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 802a69a:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802a69e:	780b      	ldrb	r3, [r1, #0]
 802a6a0:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 802a6a4:	d027      	beq.n	802a6f6 <USBD_CDC_Setup+0x6e>
 802a6a6:	2d20      	cmp	r5, #32
 802a6a8:	d153      	bne.n	802a752 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 802a6aa:	88ca      	ldrh	r2, [r1, #6]
 802a6ac:	b1da      	cbz	r2, 802a6e6 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 802a6ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 802a6b2:	d00c      	beq.n	802a6ce <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 802a6b4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 802a6b8:	689b      	ldr	r3, [r3, #8]
 802a6ba:	4639      	mov	r1, r7
 802a6bc:	7860      	ldrb	r0, [r4, #1]
 802a6be:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 802a6c0:	88e2      	ldrh	r2, [r4, #6]
 802a6c2:	4639      	mov	r1, r7
 802a6c4:	4630      	mov	r0, r6
 802a6c6:	f000 fd99 	bl	802b1fc <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 802a6ca:	2500      	movs	r5, #0
 802a6cc:	e044      	b.n	802a758 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 802a6ce:	784b      	ldrb	r3, [r1, #1]
 802a6d0:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 802a6d4:	798b      	ldrb	r3, [r1, #6]
 802a6d6:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 802a6da:	88ca      	ldrh	r2, [r1, #6]
 802a6dc:	4639      	mov	r1, r7
 802a6de:	f000 fda2 	bl	802b226 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 802a6e2:	2500      	movs	r5, #0
 802a6e4:	e038      	b.n	802a758 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 802a6e6:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 802a6ea:	689b      	ldr	r3, [r3, #8]
 802a6ec:	2200      	movs	r2, #0
 802a6ee:	7848      	ldrb	r0, [r1, #1]
 802a6f0:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 802a6f2:	2500      	movs	r5, #0
 802a6f4:	e030      	b.n	802a758 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 802a6f6:	784f      	ldrb	r7, [r1, #1]
 802a6f8:	2f0a      	cmp	r7, #10
 802a6fa:	d014      	beq.n	802a726 <USBD_CDC_Setup+0x9e>
 802a6fc:	2f0b      	cmp	r7, #11
 802a6fe:	d020      	beq.n	802a742 <USBD_CDC_Setup+0xba>
 802a700:	b11f      	cbz	r7, 802a70a <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 802a702:	f000 fa6f 	bl	802abe4 <USBD_CtlError>
          ret = USBD_FAIL;
 802a706:	2502      	movs	r5, #2
          break;
 802a708:	e026      	b.n	802a758 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802a70a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802a70e:	2b03      	cmp	r3, #3
 802a710:	d003      	beq.n	802a71a <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 802a712:	f000 fa67 	bl	802abe4 <USBD_CtlError>
            ret = USBD_FAIL;
 802a716:	2502      	movs	r5, #2
 802a718:	e01e      	b.n	802a758 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 802a71a:	2202      	movs	r2, #2
 802a71c:	a901      	add	r1, sp, #4
 802a71e:	f000 fd6d 	bl	802b1fc <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 802a722:	463d      	mov	r5, r7
 802a724:	e018      	b.n	802a758 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802a726:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802a72a:	2b03      	cmp	r3, #3
 802a72c:	d003      	beq.n	802a736 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 802a72e:	f000 fa59 	bl	802abe4 <USBD_CtlError>
            ret = USBD_FAIL;
 802a732:	2502      	movs	r5, #2
 802a734:	e010      	b.n	802a758 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 802a736:	2201      	movs	r2, #1
 802a738:	f10d 0107 	add.w	r1, sp, #7
 802a73c:	f000 fd5e 	bl	802b1fc <USBD_CtlSendData>
 802a740:	e00a      	b.n	802a758 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 802a742:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802a746:	2b03      	cmp	r3, #3
 802a748:	d006      	beq.n	802a758 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 802a74a:	f000 fa4b 	bl	802abe4 <USBD_CtlError>
            ret = USBD_FAIL;
 802a74e:	2502      	movs	r5, #2
 802a750:	e002      	b.n	802a758 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 802a752:	f000 fa47 	bl	802abe4 <USBD_CtlError>
      ret = USBD_FAIL;
 802a756:	2502      	movs	r5, #2
}
 802a758:	4628      	mov	r0, r5
 802a75a:	b003      	add	sp, #12
 802a75c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802a75e <USBD_CDC_DeInit>:
{
 802a75e:	b538      	push	{r3, r4, r5, lr}
 802a760:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 802a762:	2181      	movs	r1, #129	; 0x81
 802a764:	f000 ff71 	bl	802b64a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 802a768:	2500      	movs	r5, #0
 802a76a:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 802a76c:	2101      	movs	r1, #1
 802a76e:	4620      	mov	r0, r4
 802a770:	f000 ff6b 	bl	802b64a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 802a774:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 802a778:	2182      	movs	r1, #130	; 0x82
 802a77a:	4620      	mov	r0, r4
 802a77c:	f000 ff65 	bl	802b64a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 802a780:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 802a782:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 802a786:	b14b      	cbz	r3, 802a79c <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 802a788:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 802a78c:	685b      	ldr	r3, [r3, #4]
 802a78e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 802a790:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 802a794:	f000 ffaa 	bl	802b6ec <USBD_static_free>
    pdev->pClassData = NULL;
 802a798:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 802a79c:	2000      	movs	r0, #0
 802a79e:	bd38      	pop	{r3, r4, r5, pc}

0802a7a0 <USBD_CDC_Init>:
{
 802a7a0:	b570      	push	{r4, r5, r6, lr}
 802a7a2:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802a7a4:	7c03      	ldrb	r3, [r0, #16]
 802a7a6:	bbab      	cbnz	r3, 802a814 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 802a7a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 802a7ac:	2202      	movs	r2, #2
 802a7ae:	2181      	movs	r1, #129	; 0x81
 802a7b0:	f000 ff40 	bl	802b634 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802a7b4:	2501      	movs	r5, #1
 802a7b6:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 802a7b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 802a7bc:	2202      	movs	r2, #2
 802a7be:	4629      	mov	r1, r5
 802a7c0:	4620      	mov	r0, r4
 802a7c2:	f000 ff37 	bl	802b634 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 802a7c6:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 802a7ca:	2308      	movs	r3, #8
 802a7cc:	2203      	movs	r2, #3
 802a7ce:	2182      	movs	r1, #130	; 0x82
 802a7d0:	4620      	mov	r0, r4
 802a7d2:	f000 ff2f 	bl	802b634 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 802a7d6:	2301      	movs	r3, #1
 802a7d8:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 802a7da:	f44f 7007 	mov.w	r0, #540	; 0x21c
 802a7de:	f000 ff81 	bl	802b6e4 <USBD_static_malloc>
 802a7e2:	4605      	mov	r5, r0
 802a7e4:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 802a7e8:	b368      	cbz	r0, 802a846 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 802a7ea:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 802a7ee:	681b      	ldr	r3, [r3, #0]
 802a7f0:	4798      	blx	r3
    hcdc->TxState = 0U;
 802a7f2:	2300      	movs	r3, #0
 802a7f4:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 802a7f8:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 802a7fc:	7c26      	ldrb	r6, [r4, #16]
 802a7fe:	b9ce      	cbnz	r6, 802a834 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802a800:	f44f 7300 	mov.w	r3, #512	; 0x200
 802a804:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 802a808:	2101      	movs	r1, #1
 802a80a:	4620      	mov	r0, r4
 802a80c:	f000 ff5c 	bl	802b6c8 <USBD_LL_PrepareReceive>
}
 802a810:	4630      	mov	r0, r6
 802a812:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 802a814:	2340      	movs	r3, #64	; 0x40
 802a816:	2202      	movs	r2, #2
 802a818:	2181      	movs	r1, #129	; 0x81
 802a81a:	f000 ff0b 	bl	802b634 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802a81e:	2501      	movs	r5, #1
 802a820:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 802a822:	2340      	movs	r3, #64	; 0x40
 802a824:	2202      	movs	r2, #2
 802a826:	4629      	mov	r1, r5
 802a828:	4620      	mov	r0, r4
 802a82a:	f000 ff03 	bl	802b634 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 802a82e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 802a832:	e7ca      	b.n	802a7ca <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802a834:	2340      	movs	r3, #64	; 0x40
 802a836:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 802a83a:	2101      	movs	r1, #1
 802a83c:	4620      	mov	r0, r4
 802a83e:	f000 ff43 	bl	802b6c8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 802a842:	2600      	movs	r6, #0
 802a844:	e7e4      	b.n	802a810 <USBD_CDC_Init+0x70>
    ret = 1U;
 802a846:	2601      	movs	r6, #1
 802a848:	e7e2      	b.n	802a810 <USBD_CDC_Init+0x70>

0802a84a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 802a84a:	b119      	cbz	r1, 802a854 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 802a84c:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 802a850:	2000      	movs	r0, #0
 802a852:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 802a854:	2002      	movs	r0, #2
  }

  return ret;
}
 802a856:	4770      	bx	lr

0802a858 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802a858:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 802a85c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 802a860:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 802a864:	2000      	movs	r0, #0
 802a866:	4770      	bx	lr

0802a868 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802a868:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 802a86c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 802a870:	2000      	movs	r0, #0
 802a872:	4770      	bx	lr

0802a874 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802a874:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 802a878:	b1a2      	cbz	r2, 802a8a4 <USBD_CDC_TransmitPacket+0x30>
{
 802a87a:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 802a87c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 802a880:	b10b      	cbz	r3, 802a886 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 802a882:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 802a884:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 802a886:	2301      	movs	r3, #1
 802a888:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 802a88c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 802a890:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 802a892:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 802a896:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 802a89a:	2181      	movs	r1, #129	; 0x81
 802a89c:	f000 ff0c 	bl	802b6b8 <USBD_LL_Transmit>
      return USBD_OK;
 802a8a0:	2000      	movs	r0, #0
 802a8a2:	e7ef      	b.n	802a884 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 802a8a4:	2002      	movs	r0, #2
}
 802a8a6:	4770      	bx	lr

0802a8a8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802a8a8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 802a8ac:	b192      	cbz	r2, 802a8d4 <USBD_CDC_ReceivePacket+0x2c>
{
 802a8ae:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 802a8b0:	7c03      	ldrb	r3, [r0, #16]
 802a8b2:	b943      	cbnz	r3, 802a8c6 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 802a8b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 802a8b8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 802a8bc:	2101      	movs	r1, #1
 802a8be:	f000 ff03 	bl	802b6c8 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 802a8c2:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 802a8c4:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 802a8c6:	2340      	movs	r3, #64	; 0x40
 802a8c8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 802a8cc:	2101      	movs	r1, #1
 802a8ce:	f000 fefb 	bl	802b6c8 <USBD_LL_PrepareReceive>
 802a8d2:	e7f6      	b.n	802a8c2 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 802a8d4:	2002      	movs	r0, #2
}
 802a8d6:	4770      	bx	lr

0802a8d8 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802a8d8:	b198      	cbz	r0, 802a902 <USBD_Init+0x2a>
{
 802a8da:	b508      	push	{r3, lr}
 802a8dc:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 802a8de:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 802a8e2:	b110      	cbz	r0, 802a8ea <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 802a8e4:	2000      	movs	r0, #0
 802a8e6:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 802a8ea:	b109      	cbz	r1, 802a8f0 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 802a8ec:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802a8f0:	2101      	movs	r1, #1
 802a8f2:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 802a8f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 802a8f8:	4618      	mov	r0, r3
 802a8fa:	f000 fe51 	bl	802b5a0 <USBD_LL_Init>

  return USBD_OK;
 802a8fe:	2000      	movs	r0, #0
}
 802a900:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 802a902:	2002      	movs	r0, #2
}
 802a904:	4770      	bx	lr

0802a906 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 802a906:	b119      	cbz	r1, 802a910 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 802a908:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 802a90c:	2000      	movs	r0, #0
 802a90e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 802a910:	2002      	movs	r0, #2
  }

  return status;
}
 802a912:	4770      	bx	lr

0802a914 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 802a914:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 802a916:	f000 fe85 	bl	802b624 <USBD_LL_Start>

  return USBD_OK;
}
 802a91a:	2000      	movs	r0, #0
 802a91c:	bd08      	pop	{r3, pc}

0802a91e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 802a91e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 802a920:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 802a924:	b12b      	cbz	r3, 802a932 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 802a926:	681b      	ldr	r3, [r3, #0]
 802a928:	4798      	blx	r3
 802a92a:	b900      	cbnz	r0, 802a92e <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 802a92c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 802a92e:	2002      	movs	r0, #2
 802a930:	e7fc      	b.n	802a92c <USBD_SetClassConfig+0xe>
 802a932:	2002      	movs	r0, #2
 802a934:	e7fa      	b.n	802a92c <USBD_SetClassConfig+0xe>

0802a936 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 802a936:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 802a938:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 802a93c:	685b      	ldr	r3, [r3, #4]
 802a93e:	4798      	blx	r3

  return USBD_OK;
}
 802a940:	2000      	movs	r0, #0
 802a942:	bd08      	pop	{r3, pc}

0802a944 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 802a944:	b538      	push	{r3, r4, r5, lr}
 802a946:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 802a948:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 802a94c:	4628      	mov	r0, r5
 802a94e:	f000 f935 	bl	802abbc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802a952:	2301      	movs	r3, #1
 802a954:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 802a958:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 802a95c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 802a960:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 802a964:	f001 031f 	and.w	r3, r1, #31
 802a968:	2b01      	cmp	r3, #1
 802a96a:	d00e      	beq.n	802a98a <USBD_LL_SetupStage+0x46>
 802a96c:	2b02      	cmp	r3, #2
 802a96e:	d011      	beq.n	802a994 <USBD_LL_SetupStage+0x50>
 802a970:	b12b      	cbz	r3, 802a97e <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 802a972:	f001 0180 	and.w	r1, r1, #128	; 0x80
 802a976:	4620      	mov	r0, r4
 802a978:	f000 fe6f 	bl	802b65a <USBD_LL_StallEP>
      break;
 802a97c:	e003      	b.n	802a986 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 802a97e:	4629      	mov	r1, r5
 802a980:	4620      	mov	r0, r4
 802a982:	f000 fac9 	bl	802af18 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 802a986:	2000      	movs	r0, #0
 802a988:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 802a98a:	4629      	mov	r1, r5
 802a98c:	4620      	mov	r0, r4
 802a98e:	f000 faf7 	bl	802af80 <USBD_StdItfReq>
      break;
 802a992:	e7f8      	b.n	802a986 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 802a994:	4629      	mov	r1, r5
 802a996:	4620      	mov	r0, r4
 802a998:	f000 fb22 	bl	802afe0 <USBD_StdEPReq>
      break;
 802a99c:	e7f3      	b.n	802a986 <USBD_LL_SetupStage+0x42>

0802a99e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 802a99e:	b538      	push	{r3, r4, r5, lr}
 802a9a0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 802a9a2:	460d      	mov	r5, r1
 802a9a4:	bb91      	cbnz	r1, 802aa0c <USBD_LL_DataOutStage+0x6e>
 802a9a6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 802a9a8:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 802a9ac:	2a03      	cmp	r2, #3
 802a9ae:	d003      	beq.n	802a9b8 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 802a9b0:	2a05      	cmp	r2, #5
 802a9b2:	d024      	beq.n	802a9fe <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 802a9b4:	4608      	mov	r0, r1
 802a9b6:	e033      	b.n	802aa20 <USBD_LL_DataOutStage+0x82>
      if (pep->rem_length > pep->maxpacket)
 802a9b8:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 802a9bc:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 802a9c0:	4291      	cmp	r1, r2
 802a9c2:	d90d      	bls.n	802a9e0 <USBD_LL_DataOutStage+0x42>
        pep->rem_length -= pep->maxpacket;
 802a9c4:	1a89      	subs	r1, r1, r2
 802a9c6:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 802a9ca:	428a      	cmp	r2, r1
 802a9cc:	d906      	bls.n	802a9dc <USBD_LL_DataOutStage+0x3e>
 802a9ce:	b28a      	uxth	r2, r1
 802a9d0:	4619      	mov	r1, r3
 802a9d2:	4620      	mov	r0, r4
 802a9d4:	f000 fc36 	bl	802b244 <USBD_CtlContinueRx>
  return USBD_OK;
 802a9d8:	4628      	mov	r0, r5
 802a9da:	e021      	b.n	802aa20 <USBD_LL_DataOutStage+0x82>
        USBD_CtlContinueRx(pdev, pdata,
 802a9dc:	b292      	uxth	r2, r2
 802a9de:	e7f7      	b.n	802a9d0 <USBD_LL_DataOutStage+0x32>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 802a9e0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 802a9e4:	691b      	ldr	r3, [r3, #16]
 802a9e6:	b11b      	cbz	r3, 802a9f0 <USBD_LL_DataOutStage+0x52>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 802a9e8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 802a9ec:	2a03      	cmp	r2, #3
 802a9ee:	d004      	beq.n	802a9fa <USBD_LL_DataOutStage+0x5c>
        USBD_CtlSendStatus(pdev);
 802a9f0:	4620      	mov	r0, r4
 802a9f2:	f000 fc2f 	bl	802b254 <USBD_CtlSendStatus>
  return USBD_OK;
 802a9f6:	4628      	mov	r0, r5
 802a9f8:	e012      	b.n	802aa20 <USBD_LL_DataOutStage+0x82>
          pdev->pClass->EP0_RxReady(pdev);
 802a9fa:	4798      	blx	r3
 802a9fc:	e7f8      	b.n	802a9f0 <USBD_LL_DataOutStage+0x52>
        pdev->ep0_state = USBD_EP0_IDLE;
 802a9fe:	2100      	movs	r1, #0
 802aa00:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 802aa04:	f000 fe29 	bl	802b65a <USBD_LL_StallEP>
  return USBD_OK;
 802aa08:	4628      	mov	r0, r5
 802aa0a:	e009      	b.n	802aa20 <USBD_LL_DataOutStage+0x82>
  else if ((pdev->pClass->DataOut != NULL) &&
 802aa0c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 802aa10:	699b      	ldr	r3, [r3, #24]
 802aa12:	b133      	cbz	r3, 802aa22 <USBD_LL_DataOutStage+0x84>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 802aa14:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 802aa18:	2a03      	cmp	r2, #3
 802aa1a:	d104      	bne.n	802aa26 <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 802aa1c:	4798      	blx	r3
  return USBD_OK;
 802aa1e:	2000      	movs	r0, #0
}
 802aa20:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 802aa22:	2002      	movs	r0, #2
 802aa24:	e7fc      	b.n	802aa20 <USBD_LL_DataOutStage+0x82>
 802aa26:	2002      	movs	r0, #2
 802aa28:	e7fa      	b.n	802aa20 <USBD_LL_DataOutStage+0x82>

0802aa2a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 802aa2a:	b538      	push	{r3, r4, r5, lr}
 802aa2c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 802aa2e:	460d      	mov	r5, r1
 802aa30:	2900      	cmp	r1, #0
 802aa32:	d153      	bne.n	802aadc <USBD_LL_DataInStage+0xb2>
 802aa34:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802aa36:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 802aa3a:	2a02      	cmp	r2, #2
 802aa3c:	d00c      	beq.n	802aa58 <USBD_LL_DataInStage+0x2e>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 802aa3e:	2a04      	cmp	r2, #4
 802aa40:	d000      	beq.n	802aa44 <USBD_LL_DataInStage+0x1a>
 802aa42:	b91a      	cbnz	r2, 802aa4c <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 802aa44:	2180      	movs	r1, #128	; 0x80
 802aa46:	4620      	mov	r0, r4
 802aa48:	f000 fe07 	bl	802b65a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 802aa4c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 802aa50:	2b01      	cmp	r3, #1
 802aa52:	d03e      	beq.n	802aad2 <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 802aa54:	4628      	mov	r0, r5
}
 802aa56:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 802aa58:	6a02      	ldr	r2, [r0, #32]
 802aa5a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 802aa5c:	428a      	cmp	r2, r1
 802aa5e:	d81b      	bhi.n	802aa98 <USBD_LL_DataInStage+0x6e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 802aa60:	69c2      	ldr	r2, [r0, #28]
 802aa62:	fbb2 f3f1 	udiv	r3, r2, r1
 802aa66:	fb01 2313 	mls	r3, r1, r3, r2
 802aa6a:	b92b      	cbnz	r3, 802aa78 <USBD_LL_DataInStage+0x4e>
 802aa6c:	4291      	cmp	r1, r2
 802aa6e:	d803      	bhi.n	802aa78 <USBD_LL_DataInStage+0x4e>
            (pep->total_length < pdev->ep0_data_len))
 802aa70:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 802aa74:	429a      	cmp	r2, r3
 802aa76:	d31c      	bcc.n	802aab2 <USBD_LL_DataInStage+0x88>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 802aa78:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 802aa7c:	68db      	ldr	r3, [r3, #12]
 802aa7e:	b11b      	cbz	r3, 802aa88 <USBD_LL_DataInStage+0x5e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 802aa80:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 802aa84:	2a03      	cmp	r2, #3
 802aa86:	d021      	beq.n	802aacc <USBD_LL_DataInStage+0xa2>
          USBD_LL_StallEP(pdev, 0x80U);
 802aa88:	2180      	movs	r1, #128	; 0x80
 802aa8a:	4620      	mov	r0, r4
 802aa8c:	f000 fde5 	bl	802b65a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 802aa90:	4620      	mov	r0, r4
 802aa92:	f000 fbea 	bl	802b26a <USBD_CtlReceiveStatus>
 802aa96:	e7d9      	b.n	802aa4c <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 802aa98:	1a52      	subs	r2, r2, r1
 802aa9a:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 802aa9c:	b292      	uxth	r2, r2
 802aa9e:	4619      	mov	r1, r3
 802aaa0:	f000 fbb9 	bl	802b216 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802aaa4:	2300      	movs	r3, #0
 802aaa6:	461a      	mov	r2, r3
 802aaa8:	4619      	mov	r1, r3
 802aaaa:	4620      	mov	r0, r4
 802aaac:	f000 fe0c 	bl	802b6c8 <USBD_LL_PrepareReceive>
 802aab0:	e7cc      	b.n	802aa4c <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 802aab2:	2200      	movs	r2, #0
 802aab4:	4611      	mov	r1, r2
 802aab6:	f000 fbae 	bl	802b216 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802aaba:	2100      	movs	r1, #0
 802aabc:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802aac0:	460b      	mov	r3, r1
 802aac2:	460a      	mov	r2, r1
 802aac4:	4620      	mov	r0, r4
 802aac6:	f000 fdff 	bl	802b6c8 <USBD_LL_PrepareReceive>
 802aaca:	e7bf      	b.n	802aa4c <USBD_LL_DataInStage+0x22>
            pdev->pClass->EP0_TxSent(pdev);
 802aacc:	4620      	mov	r0, r4
 802aace:	4798      	blx	r3
 802aad0:	e7da      	b.n	802aa88 <USBD_LL_DataInStage+0x5e>
      pdev->dev_test_mode = 0U;
 802aad2:	2300      	movs	r3, #0
 802aad4:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 802aad8:	4628      	mov	r0, r5
 802aada:	e7bc      	b.n	802aa56 <USBD_LL_DataInStage+0x2c>
  else if ((pdev->pClass->DataIn != NULL) &&
 802aadc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 802aae0:	695b      	ldr	r3, [r3, #20]
 802aae2:	b133      	cbz	r3, 802aaf2 <USBD_LL_DataInStage+0xc8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 802aae4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 802aae8:	2a03      	cmp	r2, #3
 802aaea:	d104      	bne.n	802aaf6 <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 802aaec:	4798      	blx	r3
  return USBD_OK;
 802aaee:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 802aaf0:	e7b1      	b.n	802aa56 <USBD_LL_DataInStage+0x2c>
    return USBD_FAIL;
 802aaf2:	2002      	movs	r0, #2
 802aaf4:	e7af      	b.n	802aa56 <USBD_LL_DataInStage+0x2c>
 802aaf6:	2002      	movs	r0, #2
 802aaf8:	e7ad      	b.n	802aa56 <USBD_LL_DataInStage+0x2c>

0802aafa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 802aafa:	b570      	push	{r4, r5, r6, lr}
 802aafc:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802aafe:	2340      	movs	r3, #64	; 0x40
 802ab00:	2200      	movs	r2, #0
 802ab02:	4611      	mov	r1, r2
 802ab04:	f000 fd96 	bl	802b634 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 802ab08:	2501      	movs	r5, #1
 802ab0a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 802ab0e:	2640      	movs	r6, #64	; 0x40
 802ab10:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802ab14:	4633      	mov	r3, r6
 802ab16:	2200      	movs	r2, #0
 802ab18:	2180      	movs	r1, #128	; 0x80
 802ab1a:	4620      	mov	r0, r4
 802ab1c:	f000 fd8a 	bl	802b634 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 802ab20:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802ab22:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802ab24:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 802ab28:	2300      	movs	r3, #0
 802ab2a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 802ab2e:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 802ab30:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 802ab34:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 802ab38:	b12b      	cbz	r3, 802ab46 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 802ab3a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 802ab3e:	685b      	ldr	r3, [r3, #4]
 802ab40:	2100      	movs	r1, #0
 802ab42:	4620      	mov	r0, r4
 802ab44:	4798      	blx	r3
  }

  return USBD_OK;
}
 802ab46:	2000      	movs	r0, #0
 802ab48:	bd70      	pop	{r4, r5, r6, pc}

0802ab4a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 802ab4a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 802ab4c:	2000      	movs	r0, #0
 802ab4e:	4770      	bx	lr

0802ab50 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 802ab50:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802ab54:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 802ab58:	2304      	movs	r3, #4
 802ab5a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 802ab5e:	2000      	movs	r0, #0
 802ab60:	4770      	bx	lr

0802ab62 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802ab62:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802ab66:	2b04      	cmp	r3, #4
 802ab68:	d001      	beq.n	802ab6e <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 802ab6a:	2000      	movs	r0, #0
 802ab6c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 802ab6e:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 802ab72:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 802ab76:	e7f8      	b.n	802ab6a <USBD_LL_Resume+0x8>

0802ab78 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802ab78:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802ab7a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802ab7e:	2b03      	cmp	r3, #3
 802ab80:	d001      	beq.n	802ab86 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 802ab82:	2000      	movs	r0, #0
 802ab84:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 802ab86:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 802ab8a:	69db      	ldr	r3, [r3, #28]
 802ab8c:	2b00      	cmp	r3, #0
 802ab8e:	d0f8      	beq.n	802ab82 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 802ab90:	4798      	blx	r3
 802ab92:	e7f6      	b.n	802ab82 <USBD_LL_SOF+0xa>

0802ab94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 802ab94:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 802ab96:	2000      	movs	r0, #0

  while (*buf != '\0')
 802ab98:	e002      	b.n	802aba0 <USBD_GetLen+0xc>
  {
    len++;
 802ab9a:	3001      	adds	r0, #1
 802ab9c:	b2c0      	uxtb	r0, r0
    buf++;
 802ab9e:	3301      	adds	r3, #1
  while (*buf != '\0')
 802aba0:	781a      	ldrb	r2, [r3, #0]
 802aba2:	2a00      	cmp	r2, #0
 802aba4:	d1f9      	bne.n	802ab9a <USBD_GetLen+0x6>
  }

  return len;
}
 802aba6:	4770      	bx	lr

0802aba8 <USBD_SetFeature>:
{
 802aba8:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 802abaa:	884b      	ldrh	r3, [r1, #2]
 802abac:	2b01      	cmp	r3, #1
 802abae:	d000      	beq.n	802abb2 <USBD_SetFeature+0xa>
}
 802abb0:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 802abb2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 802abb6:	f000 fb4d 	bl	802b254 <USBD_CtlSendStatus>
}
 802abba:	e7f9      	b.n	802abb0 <USBD_SetFeature+0x8>

0802abbc <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 802abbc:	780b      	ldrb	r3, [r1, #0]
 802abbe:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 802abc0:	784b      	ldrb	r3, [r1, #1]
 802abc2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 802abc4:	788b      	ldrb	r3, [r1, #2]
 802abc6:	78ca      	ldrb	r2, [r1, #3]
 802abc8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 802abcc:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 802abce:	790b      	ldrb	r3, [r1, #4]
 802abd0:	794a      	ldrb	r2, [r1, #5]
 802abd2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 802abd6:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 802abd8:	798b      	ldrb	r3, [r1, #6]
 802abda:	79ca      	ldrb	r2, [r1, #7]
 802abdc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 802abe0:	80c3      	strh	r3, [r0, #6]
}
 802abe2:	4770      	bx	lr

0802abe4 <USBD_CtlError>:
{
 802abe4:	b510      	push	{r4, lr}
 802abe6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 802abe8:	2180      	movs	r1, #128	; 0x80
 802abea:	f000 fd36 	bl	802b65a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 802abee:	2100      	movs	r1, #0
 802abf0:	4620      	mov	r0, r4
 802abf2:	f000 fd32 	bl	802b65a <USBD_LL_StallEP>
}
 802abf6:	bd10      	pop	{r4, pc}

0802abf8 <USBD_GetDescriptor>:
{
 802abf8:	b530      	push	{r4, r5, lr}
 802abfa:	b083      	sub	sp, #12
 802abfc:	4605      	mov	r5, r0
 802abfe:	460c      	mov	r4, r1
  uint16_t len = 0U;
 802ac00:	2300      	movs	r3, #0
 802ac02:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 802ac06:	884a      	ldrh	r2, [r1, #2]
 802ac08:	0a13      	lsrs	r3, r2, #8
 802ac0a:	3b01      	subs	r3, #1
 802ac0c:	2b06      	cmp	r3, #6
 802ac0e:	f200 80a4 	bhi.w	802ad5a <USBD_GetDescriptor+0x162>
 802ac12:	e8df f003 	tbb	[pc, r3]
 802ac16:	1804      	.short	0x1804
 802ac18:	86a2a22c 	.word	0x86a2a22c
 802ac1c:	93          	.byte	0x93
 802ac1d:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802ac1e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 802ac22:	681b      	ldr	r3, [r3, #0]
 802ac24:	f10d 0106 	add.w	r1, sp, #6
 802ac28:	7c00      	ldrb	r0, [r0, #16]
 802ac2a:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 802ac2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 802ac30:	b11a      	cbz	r2, 802ac3a <USBD_GetDescriptor+0x42>
 802ac32:	88e3      	ldrh	r3, [r4, #6]
 802ac34:	2b00      	cmp	r3, #0
 802ac36:	f040 8094 	bne.w	802ad62 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 802ac3a:	88e3      	ldrh	r3, [r4, #6]
 802ac3c:	2b00      	cmp	r3, #0
 802ac3e:	f000 809a 	beq.w	802ad76 <USBD_GetDescriptor+0x17e>
}
 802ac42:	b003      	add	sp, #12
 802ac44:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802ac46:	7c03      	ldrb	r3, [r0, #16]
 802ac48:	b943      	cbnz	r3, 802ac5c <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 802ac4a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 802ac4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ac50:	f10d 0006 	add.w	r0, sp, #6
 802ac54:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802ac56:	2302      	movs	r3, #2
 802ac58:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 802ac5a:	e7e7      	b.n	802ac2c <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 802ac5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 802ac60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ac62:	f10d 0006 	add.w	r0, sp, #6
 802ac66:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802ac68:	2302      	movs	r3, #2
 802ac6a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 802ac6c:	e7de      	b.n	802ac2c <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 802ac6e:	b2d2      	uxtb	r2, r2
 802ac70:	2a05      	cmp	r2, #5
 802ac72:	d852      	bhi.n	802ad1a <USBD_GetDescriptor+0x122>
 802ac74:	e8df f002 	tbb	[pc, r2]
 802ac78:	2a1d1003 	.word	0x2a1d1003
 802ac7c:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 802ac7e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 802ac82:	685b      	ldr	r3, [r3, #4]
 802ac84:	b123      	cbz	r3, 802ac90 <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 802ac86:	f10d 0106 	add.w	r1, sp, #6
 802ac8a:	7c00      	ldrb	r0, [r0, #16]
 802ac8c:	4798      	blx	r3
  if (err != 0U)
 802ac8e:	e7cd      	b.n	802ac2c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 802ac90:	4621      	mov	r1, r4
 802ac92:	f7ff ffa7 	bl	802abe4 <USBD_CtlError>
  if (err != 0U)
 802ac96:	e7d4      	b.n	802ac42 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 802ac98:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 802ac9c:	689b      	ldr	r3, [r3, #8]
 802ac9e:	b123      	cbz	r3, 802acaa <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 802aca0:	f10d 0106 	add.w	r1, sp, #6
 802aca4:	7c00      	ldrb	r0, [r0, #16]
 802aca6:	4798      	blx	r3
  if (err != 0U)
 802aca8:	e7c0      	b.n	802ac2c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 802acaa:	4621      	mov	r1, r4
 802acac:	f7ff ff9a 	bl	802abe4 <USBD_CtlError>
  if (err != 0U)
 802acb0:	e7c7      	b.n	802ac42 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 802acb2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 802acb6:	68db      	ldr	r3, [r3, #12]
 802acb8:	b123      	cbz	r3, 802acc4 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802acba:	f10d 0106 	add.w	r1, sp, #6
 802acbe:	7c00      	ldrb	r0, [r0, #16]
 802acc0:	4798      	blx	r3
  if (err != 0U)
 802acc2:	e7b3      	b.n	802ac2c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 802acc4:	4621      	mov	r1, r4
 802acc6:	f7ff ff8d 	bl	802abe4 <USBD_CtlError>
  if (err != 0U)
 802acca:	e7ba      	b.n	802ac42 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 802accc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 802acd0:	691b      	ldr	r3, [r3, #16]
 802acd2:	b123      	cbz	r3, 802acde <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802acd4:	f10d 0106 	add.w	r1, sp, #6
 802acd8:	7c00      	ldrb	r0, [r0, #16]
 802acda:	4798      	blx	r3
  if (err != 0U)
 802acdc:	e7a6      	b.n	802ac2c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 802acde:	4621      	mov	r1, r4
 802ace0:	f7ff ff80 	bl	802abe4 <USBD_CtlError>
  if (err != 0U)
 802ace4:	e7ad      	b.n	802ac42 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 802ace6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 802acea:	695b      	ldr	r3, [r3, #20]
 802acec:	b123      	cbz	r3, 802acf8 <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 802acee:	f10d 0106 	add.w	r1, sp, #6
 802acf2:	7c00      	ldrb	r0, [r0, #16]
 802acf4:	4798      	blx	r3
  if (err != 0U)
 802acf6:	e799      	b.n	802ac2c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 802acf8:	4621      	mov	r1, r4
 802acfa:	f7ff ff73 	bl	802abe4 <USBD_CtlError>
  if (err != 0U)
 802acfe:	e7a0      	b.n	802ac42 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 802ad00:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 802ad04:	699b      	ldr	r3, [r3, #24]
 802ad06:	b123      	cbz	r3, 802ad12 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802ad08:	f10d 0106 	add.w	r1, sp, #6
 802ad0c:	7c00      	ldrb	r0, [r0, #16]
 802ad0e:	4798      	blx	r3
  if (err != 0U)
 802ad10:	e78c      	b.n	802ac2c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 802ad12:	4621      	mov	r1, r4
 802ad14:	f7ff ff66 	bl	802abe4 <USBD_CtlError>
  if (err != 0U)
 802ad18:	e793      	b.n	802ac42 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 802ad1a:	4621      	mov	r1, r4
 802ad1c:	f7ff ff62 	bl	802abe4 <USBD_CtlError>
  if (err != 0U)
 802ad20:	e78f      	b.n	802ac42 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802ad22:	7c03      	ldrb	r3, [r0, #16]
 802ad24:	b933      	cbnz	r3, 802ad34 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 802ad26:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 802ad2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802ad2c:	f10d 0006 	add.w	r0, sp, #6
 802ad30:	4798      	blx	r3
  if (err != 0U)
 802ad32:	e77b      	b.n	802ac2c <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 802ad34:	4621      	mov	r1, r4
 802ad36:	f7ff ff55 	bl	802abe4 <USBD_CtlError>
  if (err != 0U)
 802ad3a:	e782      	b.n	802ac42 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802ad3c:	7c03      	ldrb	r3, [r0, #16]
 802ad3e:	b943      	cbnz	r3, 802ad52 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 802ad40:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 802ad44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ad46:	f10d 0006 	add.w	r0, sp, #6
 802ad4a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 802ad4c:	2307      	movs	r3, #7
 802ad4e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 802ad50:	e76c      	b.n	802ac2c <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 802ad52:	4621      	mov	r1, r4
 802ad54:	f7ff ff46 	bl	802abe4 <USBD_CtlError>
  if (err != 0U)
 802ad58:	e773      	b.n	802ac42 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 802ad5a:	4621      	mov	r1, r4
 802ad5c:	f7ff ff42 	bl	802abe4 <USBD_CtlError>
    return;
 802ad60:	e76f      	b.n	802ac42 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 802ad62:	429a      	cmp	r2, r3
 802ad64:	bf28      	it	cs
 802ad66:	461a      	movcs	r2, r3
 802ad68:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 802ad6c:	4601      	mov	r1, r0
 802ad6e:	4628      	mov	r0, r5
 802ad70:	f000 fa44 	bl	802b1fc <USBD_CtlSendData>
 802ad74:	e761      	b.n	802ac3a <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 802ad76:	4628      	mov	r0, r5
 802ad78:	f000 fa6c 	bl	802b254 <USBD_CtlSendStatus>
 802ad7c:	e761      	b.n	802ac42 <USBD_GetDescriptor+0x4a>

0802ad7e <USBD_SetAddress>:
{
 802ad7e:	b538      	push	{r3, r4, r5, lr}
 802ad80:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 802ad82:	888b      	ldrh	r3, [r1, #4]
 802ad84:	b9f3      	cbnz	r3, 802adc4 <USBD_SetAddress+0x46>
 802ad86:	88cb      	ldrh	r3, [r1, #6]
 802ad88:	b9e3      	cbnz	r3, 802adc4 <USBD_SetAddress+0x46>
 802ad8a:	884b      	ldrh	r3, [r1, #2]
 802ad8c:	2b7f      	cmp	r3, #127	; 0x7f
 802ad8e:	d819      	bhi.n	802adc4 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 802ad90:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802ad94:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802ad98:	2b03      	cmp	r3, #3
 802ad9a:	d00c      	beq.n	802adb6 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 802ad9c:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 802ada0:	4629      	mov	r1, r5
 802ada2:	f000 fc81 	bl	802b6a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 802ada6:	4620      	mov	r0, r4
 802ada8:	f000 fa54 	bl	802b254 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 802adac:	b135      	cbz	r5, 802adbc <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 802adae:	2302      	movs	r3, #2
 802adb0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 802adb4:	e009      	b.n	802adca <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 802adb6:	f7ff ff15 	bl	802abe4 <USBD_CtlError>
 802adba:	e006      	b.n	802adca <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 802adbc:	2301      	movs	r3, #1
 802adbe:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 802adc2:	e002      	b.n	802adca <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 802adc4:	4620      	mov	r0, r4
 802adc6:	f7ff ff0d 	bl	802abe4 <USBD_CtlError>
}
 802adca:	bd38      	pop	{r3, r4, r5, pc}

0802adcc <USBD_SetConfig>:
{
 802adcc:	b538      	push	{r3, r4, r5, lr}
 802adce:	4604      	mov	r4, r0
 802add0:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 802add2:	7889      	ldrb	r1, [r1, #2]
 802add4:	4b28      	ldr	r3, [pc, #160]	; (802ae78 <USBD_SetConfig+0xac>)
 802add6:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 802add8:	2901      	cmp	r1, #1
 802adda:	d80e      	bhi.n	802adfa <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 802addc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802ade0:	2b02      	cmp	r3, #2
 802ade2:	d00e      	beq.n	802ae02 <USBD_SetConfig+0x36>
 802ade4:	2b03      	cmp	r3, #3
 802ade6:	d021      	beq.n	802ae2c <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 802ade8:	4629      	mov	r1, r5
 802adea:	f7ff fefb 	bl	802abe4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 802adee:	4b22      	ldr	r3, [pc, #136]	; (802ae78 <USBD_SetConfig+0xac>)
 802adf0:	7819      	ldrb	r1, [r3, #0]
 802adf2:	4620      	mov	r0, r4
 802adf4:	f7ff fd9f 	bl	802a936 <USBD_ClrClassConfig>
        break;
 802adf8:	e002      	b.n	802ae00 <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 802adfa:	4629      	mov	r1, r5
 802adfc:	f7ff fef2 	bl	802abe4 <USBD_CtlError>
}
 802ae00:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 802ae02:	b181      	cbz	r1, 802ae26 <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 802ae04:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 802ae06:	2303      	movs	r3, #3
 802ae08:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 802ae0c:	f7ff fd87 	bl	802a91e <USBD_SetClassConfig>
 802ae10:	2802      	cmp	r0, #2
 802ae12:	d003      	beq.n	802ae1c <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 802ae14:	4620      	mov	r0, r4
 802ae16:	f000 fa1d 	bl	802b254 <USBD_CtlSendStatus>
 802ae1a:	e7f1      	b.n	802ae00 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 802ae1c:	4629      	mov	r1, r5
 802ae1e:	4620      	mov	r0, r4
 802ae20:	f7ff fee0 	bl	802abe4 <USBD_CtlError>
            return;
 802ae24:	e7ec      	b.n	802ae00 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 802ae26:	f000 fa15 	bl	802b254 <USBD_CtlSendStatus>
 802ae2a:	e7e9      	b.n	802ae00 <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 802ae2c:	b189      	cbz	r1, 802ae52 <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 802ae2e:	6843      	ldr	r3, [r0, #4]
 802ae30:	4299      	cmp	r1, r3
 802ae32:	d01d      	beq.n	802ae70 <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 802ae34:	b2d9      	uxtb	r1, r3
 802ae36:	f7ff fd7e 	bl	802a936 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 802ae3a:	4b0f      	ldr	r3, [pc, #60]	; (802ae78 <USBD_SetConfig+0xac>)
 802ae3c:	7819      	ldrb	r1, [r3, #0]
 802ae3e:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 802ae40:	4620      	mov	r0, r4
 802ae42:	f7ff fd6c 	bl	802a91e <USBD_SetClassConfig>
 802ae46:	2802      	cmp	r0, #2
 802ae48:	d00d      	beq.n	802ae66 <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 802ae4a:	4620      	mov	r0, r4
 802ae4c:	f000 fa02 	bl	802b254 <USBD_CtlSendStatus>
 802ae50:	e7d6      	b.n	802ae00 <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 802ae52:	2302      	movs	r3, #2
 802ae54:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 802ae58:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 802ae5a:	f7ff fd6c 	bl	802a936 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 802ae5e:	4620      	mov	r0, r4
 802ae60:	f000 f9f8 	bl	802b254 <USBD_CtlSendStatus>
 802ae64:	e7cc      	b.n	802ae00 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 802ae66:	4629      	mov	r1, r5
 802ae68:	4620      	mov	r0, r4
 802ae6a:	f7ff febb 	bl	802abe4 <USBD_CtlError>
            return;
 802ae6e:	e7c7      	b.n	802ae00 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 802ae70:	f000 f9f0 	bl	802b254 <USBD_CtlSendStatus>
 802ae74:	e7c4      	b.n	802ae00 <USBD_SetConfig+0x34>
 802ae76:	bf00      	nop
 802ae78:	20005800 	.word	0x20005800

0802ae7c <USBD_GetConfig>:
{
 802ae7c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 802ae7e:	88cb      	ldrh	r3, [r1, #6]
 802ae80:	2b01      	cmp	r3, #1
 802ae82:	d10a      	bne.n	802ae9a <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 802ae84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802ae88:	2b02      	cmp	r3, #2
 802ae8a:	d909      	bls.n	802aea0 <USBD_GetConfig+0x24>
 802ae8c:	2b03      	cmp	r3, #3
 802ae8e:	d109      	bne.n	802aea4 <USBD_GetConfig+0x28>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 802ae90:	2201      	movs	r2, #1
 802ae92:	1d01      	adds	r1, r0, #4
 802ae94:	f000 f9b2 	bl	802b1fc <USBD_CtlSendData>
        break;
 802ae98:	e001      	b.n	802ae9e <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 802ae9a:	f7ff fea3 	bl	802abe4 <USBD_CtlError>
}
 802ae9e:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 802aea0:	b25b      	sxtb	r3, r3
 802aea2:	b913      	cbnz	r3, 802aeaa <USBD_GetConfig+0x2e>
        USBD_CtlError(pdev, req);
 802aea4:	f7ff fe9e 	bl	802abe4 <USBD_CtlError>
}
 802aea8:	e7f9      	b.n	802ae9e <USBD_GetConfig+0x22>
        pdev->dev_default_config = 0U;
 802aeaa:	4601      	mov	r1, r0
 802aeac:	2300      	movs	r3, #0
 802aeae:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 802aeb2:	2201      	movs	r2, #1
 802aeb4:	f000 f9a2 	bl	802b1fc <USBD_CtlSendData>
        break;
 802aeb8:	e7f1      	b.n	802ae9e <USBD_GetConfig+0x22>

0802aeba <USBD_GetStatus>:
{
 802aeba:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 802aebc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802aec0:	3b01      	subs	r3, #1
 802aec2:	2b02      	cmp	r3, #2
 802aec4:	d812      	bhi.n	802aeec <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 802aec6:	88cb      	ldrh	r3, [r1, #6]
 802aec8:	2b02      	cmp	r3, #2
 802aeca:	d10c      	bne.n	802aee6 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 802aecc:	2301      	movs	r3, #1
 802aece:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 802aed0:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 802aed4:	b10b      	cbz	r3, 802aeda <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 802aed6:	2303      	movs	r3, #3
 802aed8:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 802aeda:	2202      	movs	r2, #2
 802aedc:	f100 010c 	add.w	r1, r0, #12
 802aee0:	f000 f98c 	bl	802b1fc <USBD_CtlSendData>
}
 802aee4:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 802aee6:	f7ff fe7d 	bl	802abe4 <USBD_CtlError>
        break;
 802aeea:	e7fb      	b.n	802aee4 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 802aeec:	f7ff fe7a 	bl	802abe4 <USBD_CtlError>
}
 802aef0:	e7f8      	b.n	802aee4 <USBD_GetStatus+0x2a>

0802aef2 <USBD_ClrFeature>:
{
 802aef2:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 802aef4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802aef8:	3b01      	subs	r3, #1
 802aefa:	2b02      	cmp	r3, #2
 802aefc:	d809      	bhi.n	802af12 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 802aefe:	884b      	ldrh	r3, [r1, #2]
 802af00:	2b01      	cmp	r3, #1
 802af02:	d000      	beq.n	802af06 <USBD_ClrFeature+0x14>
}
 802af04:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 802af06:	2300      	movs	r3, #0
 802af08:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 802af0c:	f000 f9a2 	bl	802b254 <USBD_CtlSendStatus>
 802af10:	e7f8      	b.n	802af04 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 802af12:	f7ff fe67 	bl	802abe4 <USBD_CtlError>
}
 802af16:	e7f5      	b.n	802af04 <USBD_ClrFeature+0x12>

0802af18 <USBD_StdDevReq>:
{
 802af18:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802af1a:	780b      	ldrb	r3, [r1, #0]
 802af1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802af20:	2b20      	cmp	r3, #32
 802af22:	d005      	beq.n	802af30 <USBD_StdDevReq+0x18>
 802af24:	2b40      	cmp	r3, #64	; 0x40
 802af26:	d003      	beq.n	802af30 <USBD_StdDevReq+0x18>
 802af28:	b143      	cbz	r3, 802af3c <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 802af2a:	f7ff fe5b 	bl	802abe4 <USBD_CtlError>
      break;
 802af2e:	e003      	b.n	802af38 <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 802af30:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 802af34:	689b      	ldr	r3, [r3, #8]
 802af36:	4798      	blx	r3
}
 802af38:	2000      	movs	r0, #0
 802af3a:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 802af3c:	784b      	ldrb	r3, [r1, #1]
 802af3e:	2b09      	cmp	r3, #9
 802af40:	d81b      	bhi.n	802af7a <USBD_StdDevReq+0x62>
 802af42:	e8df f003 	tbb	[pc, r3]
 802af46:	1711      	.short	0x1711
 802af48:	081a141a 	.word	0x081a141a
 802af4c:	0b0e1a05 	.word	0x0b0e1a05
          USBD_GetDescriptor(pdev, req);
 802af50:	f7ff fe52 	bl	802abf8 <USBD_GetDescriptor>
          break;
 802af54:	e7f0      	b.n	802af38 <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 802af56:	f7ff ff12 	bl	802ad7e <USBD_SetAddress>
          break;
 802af5a:	e7ed      	b.n	802af38 <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 802af5c:	f7ff ff36 	bl	802adcc <USBD_SetConfig>
          break;
 802af60:	e7ea      	b.n	802af38 <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 802af62:	f7ff ff8b 	bl	802ae7c <USBD_GetConfig>
          break;
 802af66:	e7e7      	b.n	802af38 <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 802af68:	f7ff ffa7 	bl	802aeba <USBD_GetStatus>
          break;
 802af6c:	e7e4      	b.n	802af38 <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 802af6e:	f7ff fe1b 	bl	802aba8 <USBD_SetFeature>
          break;
 802af72:	e7e1      	b.n	802af38 <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 802af74:	f7ff ffbd 	bl	802aef2 <USBD_ClrFeature>
          break;
 802af78:	e7de      	b.n	802af38 <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 802af7a:	f7ff fe33 	bl	802abe4 <USBD_CtlError>
          break;
 802af7e:	e7db      	b.n	802af38 <USBD_StdDevReq+0x20>

0802af80 <USBD_StdItfReq>:
{
 802af80:	b538      	push	{r3, r4, r5, lr}
 802af82:	4605      	mov	r5, r0
 802af84:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802af86:	780b      	ldrb	r3, [r1, #0]
 802af88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802af8c:	2b20      	cmp	r3, #32
 802af8e:	d006      	beq.n	802af9e <USBD_StdItfReq+0x1e>
 802af90:	2b40      	cmp	r3, #64	; 0x40
 802af92:	d004      	beq.n	802af9e <USBD_StdItfReq+0x1e>
 802af94:	b11b      	cbz	r3, 802af9e <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 802af96:	f7ff fe25 	bl	802abe4 <USBD_CtlError>
}
 802af9a:	2000      	movs	r0, #0
 802af9c:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 802af9e:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 802afa2:	3b01      	subs	r3, #1
 802afa4:	2b02      	cmp	r3, #2
 802afa6:	d816      	bhi.n	802afd6 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 802afa8:	7923      	ldrb	r3, [r4, #4]
 802afaa:	2b04      	cmp	r3, #4
 802afac:	d80e      	bhi.n	802afcc <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802afae:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 802afb2:	689b      	ldr	r3, [r3, #8]
 802afb4:	4621      	mov	r1, r4
 802afb6:	4628      	mov	r0, r5
 802afb8:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 802afba:	88e3      	ldrh	r3, [r4, #6]
 802afbc:	2b00      	cmp	r3, #0
 802afbe:	d1ec      	bne.n	802af9a <USBD_StdItfReq+0x1a>
 802afc0:	2800      	cmp	r0, #0
 802afc2:	d1ea      	bne.n	802af9a <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 802afc4:	4628      	mov	r0, r5
 802afc6:	f000 f945 	bl	802b254 <USBD_CtlSendStatus>
 802afca:	e7e6      	b.n	802af9a <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 802afcc:	4621      	mov	r1, r4
 802afce:	4628      	mov	r0, r5
 802afd0:	f7ff fe08 	bl	802abe4 <USBD_CtlError>
 802afd4:	e7e1      	b.n	802af9a <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 802afd6:	4621      	mov	r1, r4
 802afd8:	4628      	mov	r0, r5
 802afda:	f7ff fe03 	bl	802abe4 <USBD_CtlError>
          break;
 802afde:	e7dc      	b.n	802af9a <USBD_StdItfReq+0x1a>

0802afe0 <USBD_StdEPReq>:
{
 802afe0:	b570      	push	{r4, r5, r6, lr}
 802afe2:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 802afe4:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802afe6:	780c      	ldrb	r4, [r1, #0]
 802afe8:	f004 0460 	and.w	r4, r4, #96	; 0x60
 802afec:	2c20      	cmp	r4, #32
 802afee:	d007      	beq.n	802b000 <USBD_StdEPReq+0x20>
 802aff0:	b2da      	uxtb	r2, r3
 802aff2:	2c40      	cmp	r4, #64	; 0x40
 802aff4:	d004      	beq.n	802b000 <USBD_StdEPReq+0x20>
 802aff6:	b15c      	cbz	r4, 802b010 <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 802aff8:	f7ff fdf4 	bl	802abe4 <USBD_CtlError>
  return ret;
 802affc:	2400      	movs	r4, #0
      break;
 802affe:	e005      	b.n	802b00c <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 802b000:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 802b004:	689b      	ldr	r3, [r3, #8]
 802b006:	4628      	mov	r0, r5
 802b008:	4798      	blx	r3
  return ret;
 802b00a:	2400      	movs	r4, #0
}
 802b00c:	4620      	mov	r0, r4
 802b00e:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 802b010:	2c20      	cmp	r4, #32
 802b012:	d009      	beq.n	802b028 <USBD_StdEPReq+0x48>
      switch (req->bRequest)
 802b014:	784e      	ldrb	r6, [r1, #1]
 802b016:	2e01      	cmp	r6, #1
 802b018:	d033      	beq.n	802b082 <USBD_StdEPReq+0xa2>
 802b01a:	2e03      	cmp	r6, #3
 802b01c:	d00a      	beq.n	802b034 <USBD_StdEPReq+0x54>
 802b01e:	2e00      	cmp	r6, #0
 802b020:	d055      	beq.n	802b0ce <USBD_StdEPReq+0xee>
          USBD_CtlError(pdev, req);
 802b022:	f7ff fddf 	bl	802abe4 <USBD_CtlError>
          break;
 802b026:	e7f1      	b.n	802b00c <USBD_StdEPReq+0x2c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802b028:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 802b02c:	689b      	ldr	r3, [r3, #8]
 802b02e:	4798      	blx	r3
 802b030:	4604      	mov	r4, r0
        return ret;
 802b032:	e7eb      	b.n	802b00c <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 802b034:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802b038:	2b02      	cmp	r3, #2
 802b03a:	d004      	beq.n	802b046 <USBD_StdEPReq+0x66>
 802b03c:	2b03      	cmp	r3, #3
 802b03e:	d011      	beq.n	802b064 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 802b040:	f7ff fdd0 	bl	802abe4 <USBD_CtlError>
              break;
 802b044:	e7e2      	b.n	802b00c <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802b046:	b10a      	cbz	r2, 802b04c <USBD_StdEPReq+0x6c>
 802b048:	2a80      	cmp	r2, #128	; 0x80
 802b04a:	d103      	bne.n	802b054 <USBD_StdEPReq+0x74>
                USBD_CtlError(pdev, req);
 802b04c:	4628      	mov	r0, r5
 802b04e:	f7ff fdc9 	bl	802abe4 <USBD_CtlError>
 802b052:	e7db      	b.n	802b00c <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 802b054:	4611      	mov	r1, r2
 802b056:	f000 fb00 	bl	802b65a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 802b05a:	2180      	movs	r1, #128	; 0x80
 802b05c:	4628      	mov	r0, r5
 802b05e:	f000 fafc 	bl	802b65a <USBD_LL_StallEP>
 802b062:	e7d3      	b.n	802b00c <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 802b064:	884b      	ldrh	r3, [r1, #2]
 802b066:	b923      	cbnz	r3, 802b072 <USBD_StdEPReq+0x92>
                if ((ep_addr != 0x00U) &&
 802b068:	b11a      	cbz	r2, 802b072 <USBD_StdEPReq+0x92>
 802b06a:	2a80      	cmp	r2, #128	; 0x80
 802b06c:	d001      	beq.n	802b072 <USBD_StdEPReq+0x92>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 802b06e:	88cb      	ldrh	r3, [r1, #6]
 802b070:	b11b      	cbz	r3, 802b07a <USBD_StdEPReq+0x9a>
              USBD_CtlSendStatus(pdev);
 802b072:	4628      	mov	r0, r5
 802b074:	f000 f8ee 	bl	802b254 <USBD_CtlSendStatus>
              break;
 802b078:	e7c8      	b.n	802b00c <USBD_StdEPReq+0x2c>
                  USBD_LL_StallEP(pdev, ep_addr);
 802b07a:	4611      	mov	r1, r2
 802b07c:	f000 faed 	bl	802b65a <USBD_LL_StallEP>
 802b080:	e7f7      	b.n	802b072 <USBD_StdEPReq+0x92>
          switch (pdev->dev_state)
 802b082:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802b086:	2b02      	cmp	r3, #2
 802b088:	d004      	beq.n	802b094 <USBD_StdEPReq+0xb4>
 802b08a:	2b03      	cmp	r3, #3
 802b08c:	d011      	beq.n	802b0b2 <USBD_StdEPReq+0xd2>
              USBD_CtlError(pdev, req);
 802b08e:	f7ff fda9 	bl	802abe4 <USBD_CtlError>
              break;
 802b092:	e7bb      	b.n	802b00c <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802b094:	b10a      	cbz	r2, 802b09a <USBD_StdEPReq+0xba>
 802b096:	2a80      	cmp	r2, #128	; 0x80
 802b098:	d103      	bne.n	802b0a2 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 802b09a:	4628      	mov	r0, r5
 802b09c:	f7ff fda2 	bl	802abe4 <USBD_CtlError>
 802b0a0:	e7b4      	b.n	802b00c <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 802b0a2:	4611      	mov	r1, r2
 802b0a4:	f000 fad9 	bl	802b65a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 802b0a8:	2180      	movs	r1, #128	; 0x80
 802b0aa:	4628      	mov	r0, r5
 802b0ac:	f000 fad5 	bl	802b65a <USBD_LL_StallEP>
 802b0b0:	e7ac      	b.n	802b00c <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 802b0b2:	884b      	ldrh	r3, [r1, #2]
 802b0b4:	2b00      	cmp	r3, #0
 802b0b6:	d1a9      	bne.n	802b00c <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 802b0b8:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 802b0bc:	d103      	bne.n	802b0c6 <USBD_StdEPReq+0xe6>
                USBD_CtlSendStatus(pdev);
 802b0be:	4628      	mov	r0, r5
 802b0c0:	f000 f8c8 	bl	802b254 <USBD_CtlSendStatus>
 802b0c4:	e7a2      	b.n	802b00c <USBD_StdEPReq+0x2c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 802b0c6:	4611      	mov	r1, r2
 802b0c8:	f000 facf 	bl	802b66a <USBD_LL_ClearStallEP>
 802b0cc:	e7f7      	b.n	802b0be <USBD_StdEPReq+0xde>
          switch (pdev->dev_state)
 802b0ce:	f890 029c 	ldrb.w	r0, [r0, #668]	; 0x29c
 802b0d2:	2802      	cmp	r0, #2
 802b0d4:	d006      	beq.n	802b0e4 <USBD_StdEPReq+0x104>
 802b0d6:	2803      	cmp	r0, #3
 802b0d8:	d029      	beq.n	802b12e <USBD_StdEPReq+0x14e>
              USBD_CtlError(pdev, req);
 802b0da:	4628      	mov	r0, r5
 802b0dc:	f7ff fd82 	bl	802abe4 <USBD_CtlError>
  return ret;
 802b0e0:	4634      	mov	r4, r6
              break;
 802b0e2:	e793      	b.n	802b00c <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802b0e4:	b10a      	cbz	r2, 802b0ea <USBD_StdEPReq+0x10a>
 802b0e6:	2a80      	cmp	r2, #128	; 0x80
 802b0e8:	d113      	bne.n	802b112 <USBD_StdEPReq+0x132>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802b0ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 802b0ee:	d115      	bne.n	802b11c <USBD_StdEPReq+0x13c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802b0f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802b0f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802b0f8:	0091      	lsls	r1, r2, #2
 802b0fa:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 802b0fe:	4429      	add	r1, r5
 802b100:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 802b102:	2300      	movs	r3, #0
 802b104:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 802b106:	2202      	movs	r2, #2
 802b108:	4628      	mov	r0, r5
 802b10a:	f000 f877 	bl	802b1fc <USBD_CtlSendData>
  return ret;
 802b10e:	4634      	mov	r4, r6
              break;
 802b110:	e77c      	b.n	802b00c <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 802b112:	4628      	mov	r0, r5
 802b114:	f7ff fd66 	bl	802abe4 <USBD_CtlError>
  return ret;
 802b118:	4634      	mov	r4, r6
                break;
 802b11a:	e777      	b.n	802b00c <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802b11c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 802b120:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802b124:	0091      	lsls	r1, r2, #2
 802b126:	3110      	adds	r1, #16
 802b128:	4429      	add	r1, r5
 802b12a:	3104      	adds	r1, #4
 802b12c:	e7e9      	b.n	802b102 <USBD_StdEPReq+0x122>
              if ((ep_addr & 0x80U) == 0x80U)
 802b12e:	b25b      	sxtb	r3, r3
 802b130:	2b00      	cmp	r3, #0
 802b132:	db1f      	blt.n	802b174 <USBD_StdEPReq+0x194>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802b134:	f002 000f 	and.w	r0, r2, #15
 802b138:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802b13c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 802b140:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 802b144:	b320      	cbz	r0, 802b190 <USBD_StdEPReq+0x1b0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802b146:	2b00      	cmp	r3, #0
 802b148:	db27      	blt.n	802b19a <USBD_StdEPReq+0x1ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802b14a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802b14e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802b152:	009c      	lsls	r4, r3, #2
 802b154:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 802b158:	442c      	add	r4, r5
 802b15a:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 802b15c:	b10a      	cbz	r2, 802b162 <USBD_StdEPReq+0x182>
 802b15e:	2a80      	cmp	r2, #128	; 0x80
 802b160:	d124      	bne.n	802b1ac <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 802b162:	2300      	movs	r3, #0
 802b164:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 802b166:	2202      	movs	r2, #2
 802b168:	4621      	mov	r1, r4
 802b16a:	4628      	mov	r0, r5
 802b16c:	f000 f846 	bl	802b1fc <USBD_CtlSendData>
  return ret;
 802b170:	4634      	mov	r4, r6
              break;
 802b172:	e74b      	b.n	802b00c <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802b174:	f002 000f 	and.w	r0, r2, #15
 802b178:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802b17c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 802b180:	6980      	ldr	r0, [r0, #24]
 802b182:	2800      	cmp	r0, #0
 802b184:	d1df      	bne.n	802b146 <USBD_StdEPReq+0x166>
                  USBD_CtlError(pdev, req);
 802b186:	4628      	mov	r0, r5
 802b188:	f7ff fd2c 	bl	802abe4 <USBD_CtlError>
  return ret;
 802b18c:	4634      	mov	r4, r6
                  break;
 802b18e:	e73d      	b.n	802b00c <USBD_StdEPReq+0x2c>
                  USBD_CtlError(pdev, req);
 802b190:	4628      	mov	r0, r5
 802b192:	f7ff fd27 	bl	802abe4 <USBD_CtlError>
  return ret;
 802b196:	4634      	mov	r4, r6
                  break;
 802b198:	e738      	b.n	802b00c <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802b19a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 802b19e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802b1a2:	009c      	lsls	r4, r3, #2
 802b1a4:	3410      	adds	r4, #16
 802b1a6:	442c      	add	r4, r5
 802b1a8:	3404      	adds	r4, #4
 802b1aa:	e7d7      	b.n	802b15c <USBD_StdEPReq+0x17c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 802b1ac:	4611      	mov	r1, r2
 802b1ae:	4628      	mov	r0, r5
 802b1b0:	f000 fa63 	bl	802b67a <USBD_LL_IsStallEP>
 802b1b4:	b110      	cbz	r0, 802b1bc <USBD_StdEPReq+0x1dc>
                pep->status = 0x0001U;
 802b1b6:	2301      	movs	r3, #1
 802b1b8:	6023      	str	r3, [r4, #0]
 802b1ba:	e7d4      	b.n	802b166 <USBD_StdEPReq+0x186>
                pep->status = 0x0000U;
 802b1bc:	2300      	movs	r3, #0
 802b1be:	6023      	str	r3, [r4, #0]
 802b1c0:	e7d1      	b.n	802b166 <USBD_StdEPReq+0x186>

0802b1c2 <USBD_GetString>:
  if (desc != NULL)
 802b1c2:	b1d0      	cbz	r0, 802b1fa <USBD_GetString+0x38>
{
 802b1c4:	b570      	push	{r4, r5, r6, lr}
 802b1c6:	460d      	mov	r5, r1
 802b1c8:	4616      	mov	r6, r2
 802b1ca:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 802b1cc:	f7ff fce2 	bl	802ab94 <USBD_GetLen>
 802b1d0:	1c43      	adds	r3, r0, #1
 802b1d2:	005b      	lsls	r3, r3, #1
 802b1d4:	b29b      	uxth	r3, r3
 802b1d6:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 802b1d8:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 802b1da:	2303      	movs	r3, #3
 802b1dc:	706b      	strb	r3, [r5, #1]
 802b1de:	2302      	movs	r3, #2
    while (*desc != '\0')
 802b1e0:	e007      	b.n	802b1f2 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 802b1e2:	3401      	adds	r4, #1
 802b1e4:	1c5a      	adds	r2, r3, #1
 802b1e6:	b2d2      	uxtb	r2, r2
 802b1e8:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 802b1ea:	3302      	adds	r3, #2
 802b1ec:	b2db      	uxtb	r3, r3
 802b1ee:	2100      	movs	r1, #0
 802b1f0:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 802b1f2:	7820      	ldrb	r0, [r4, #0]
 802b1f4:	2800      	cmp	r0, #0
 802b1f6:	d1f4      	bne.n	802b1e2 <USBD_GetString+0x20>
}
 802b1f8:	bd70      	pop	{r4, r5, r6, pc}
 802b1fa:	4770      	bx	lr

0802b1fc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 802b1fc:	b508      	push	{r3, lr}
 802b1fe:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 802b200:	2202      	movs	r2, #2
 802b202:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 802b206:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 802b208:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802b20a:	460a      	mov	r2, r1
 802b20c:	2100      	movs	r1, #0
 802b20e:	f000 fa53 	bl	802b6b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 802b212:	2000      	movs	r0, #0
 802b214:	bd08      	pop	{r3, pc}

0802b216 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 802b216:	b508      	push	{r3, lr}
 802b218:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802b21a:	460a      	mov	r2, r1
 802b21c:	2100      	movs	r1, #0
 802b21e:	f000 fa4b 	bl	802b6b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 802b222:	2000      	movs	r0, #0
 802b224:	bd08      	pop	{r3, pc}

0802b226 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 802b226:	b508      	push	{r3, lr}
 802b228:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 802b22a:	2203      	movs	r2, #3
 802b22c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 802b230:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 802b234:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 802b238:	460a      	mov	r2, r1
 802b23a:	2100      	movs	r1, #0
 802b23c:	f000 fa44 	bl	802b6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 802b240:	2000      	movs	r0, #0
 802b242:	bd08      	pop	{r3, pc}

0802b244 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 802b244:	b508      	push	{r3, lr}
 802b246:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 802b248:	460a      	mov	r2, r1
 802b24a:	2100      	movs	r1, #0
 802b24c:	f000 fa3c 	bl	802b6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 802b250:	2000      	movs	r0, #0
 802b252:	bd08      	pop	{r3, pc}

0802b254 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 802b254:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 802b256:	2304      	movs	r3, #4
 802b258:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 802b25c:	2300      	movs	r3, #0
 802b25e:	461a      	mov	r2, r3
 802b260:	4619      	mov	r1, r3
 802b262:	f000 fa29 	bl	802b6b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 802b266:	2000      	movs	r0, #0
 802b268:	bd08      	pop	{r3, pc}

0802b26a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 802b26a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 802b26c:	2305      	movs	r3, #5
 802b26e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802b272:	2300      	movs	r3, #0
 802b274:	461a      	mov	r2, r3
 802b276:	4619      	mov	r1, r3
 802b278:	f000 fa26 	bl	802b6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 802b27c:	2000      	movs	r0, #0
 802b27e:	bd08      	pop	{r3, pc}

0802b280 <USBD_GetRxCount>:
* @param  pdev: device instance
* @param  ep_addr: endpoint address
* @retval Rx Data blength
*/
uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802b280:	b508      	push	{r3, lr}
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 802b282:	f000 fa29 	bl	802b6d8 <USBD_LL_GetRxDataSize>
}
 802b286:	bd08      	pop	{r3, pc}

0802b288 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802b288:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802b28a:	2200      	movs	r2, #0
 802b28c:	490f      	ldr	r1, [pc, #60]	; (802b2cc <MX_USB_DEVICE_Init+0x44>)
 802b28e:	4810      	ldr	r0, [pc, #64]	; (802b2d0 <MX_USB_DEVICE_Init+0x48>)
 802b290:	f7ff fb22 	bl	802a8d8 <USBD_Init>
 802b294:	b970      	cbnz	r0, 802b2b4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 802b296:	490f      	ldr	r1, [pc, #60]	; (802b2d4 <MX_USB_DEVICE_Init+0x4c>)
 802b298:	480d      	ldr	r0, [pc, #52]	; (802b2d0 <MX_USB_DEVICE_Init+0x48>)
 802b29a:	f7ff fb34 	bl	802a906 <USBD_RegisterClass>
 802b29e:	b960      	cbnz	r0, 802b2ba <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 802b2a0:	490d      	ldr	r1, [pc, #52]	; (802b2d8 <MX_USB_DEVICE_Init+0x50>)
 802b2a2:	480b      	ldr	r0, [pc, #44]	; (802b2d0 <MX_USB_DEVICE_Init+0x48>)
 802b2a4:	f7ff fad1 	bl	802a84a <USBD_CDC_RegisterInterface>
 802b2a8:	b950      	cbnz	r0, 802b2c0 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 802b2aa:	4809      	ldr	r0, [pc, #36]	; (802b2d0 <MX_USB_DEVICE_Init+0x48>)
 802b2ac:	f7ff fb32 	bl	802a914 <USBD_Start>
 802b2b0:	b948      	cbnz	r0, 802b2c6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 802b2b2:	bd08      	pop	{r3, pc}
    Error_Handler();
 802b2b4:	f7f8 fbd4 	bl	8023a60 <Error_Handler>
 802b2b8:	e7ed      	b.n	802b296 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 802b2ba:	f7f8 fbd1 	bl	8023a60 <Error_Handler>
 802b2be:	e7ef      	b.n	802b2a0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 802b2c0:	f7f8 fbce 	bl	8023a60 <Error_Handler>
 802b2c4:	e7f1      	b.n	802b2aa <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 802b2c6:	f7f8 fbcb 	bl	8023a60 <Error_Handler>
}
 802b2ca:	e7f2      	b.n	802b2b2 <MX_USB_DEVICE_Init+0x2a>
 802b2cc:	200001bc 	.word	0x200001bc
 802b2d0:	20005804 	.word	0x20005804
 802b2d4:	2000009c 	.word	0x2000009c
 802b2d8:	200001ac 	.word	0x200001ac

0802b2dc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 802b2dc:	2000      	movs	r0, #0
 802b2de:	4770      	bx	lr

0802b2e0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 802b2e0:	2000      	movs	r0, #0
 802b2e2:	4770      	bx	lr

0802b2e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 802b2e4:	b538      	push	{r3, r4, r5, lr}
 802b2e6:	4604      	mov	r4, r0
  /* USER CODE BEGIN 6 */
  EP3_OUT_Callback(Buf, *Len);
 802b2e8:	6809      	ldr	r1, [r1, #0]
 802b2ea:	f7f7 fe61 	bl	8022fb0 <EP3_OUT_Callback>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 802b2ee:	4d05      	ldr	r5, [pc, #20]	; (802b304 <CDC_Receive_FS+0x20>)
 802b2f0:	4621      	mov	r1, r4
 802b2f2:	4628      	mov	r0, r5
 802b2f4:	f7ff fab8 	bl	802a868 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802b2f8:	4628      	mov	r0, r5
 802b2fa:	f7ff fad5 	bl	802a8a8 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
  /* USER CODE END 6 */
}
 802b2fe:	2000      	movs	r0, #0
 802b300:	bd38      	pop	{r3, r4, r5, pc}
 802b302:	bf00      	nop
 802b304:	20005804 	.word	0x20005804

0802b308 <CDC_Init_FS>:
{
 802b308:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 802b30a:	4c06      	ldr	r4, [pc, #24]	; (802b324 <CDC_Init_FS+0x1c>)
 802b30c:	2200      	movs	r2, #0
 802b30e:	4906      	ldr	r1, [pc, #24]	; (802b328 <CDC_Init_FS+0x20>)
 802b310:	4620      	mov	r0, r4
 802b312:	f7ff faa1 	bl	802a858 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 802b316:	4905      	ldr	r1, [pc, #20]	; (802b32c <CDC_Init_FS+0x24>)
 802b318:	4620      	mov	r0, r4
 802b31a:	f7ff faa5 	bl	802a868 <USBD_CDC_SetRxBuffer>
}
 802b31e:	2000      	movs	r0, #0
 802b320:	bd10      	pop	{r4, pc}
 802b322:	bf00      	nop
 802b324:	20005804 	.word	0x20005804
 802b328:	20005ec8 	.word	0x20005ec8
 802b32c:	20005ac8 	.word	0x20005ac8

0802b330 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 802b330:	b570      	push	{r4, r5, r6, lr}
 802b332:	4604      	mov	r4, r0
 802b334:	460d      	mov	r5, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  EP1_IN_Callback ();
 802b336:	f7f7 fdd9 	bl	8022eec <EP1_IN_Callback>

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 802b33a:	4b0b      	ldr	r3, [pc, #44]	; (802b368 <CDC_Transmit_FS+0x38>)
 802b33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 802b340:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 802b344:	b113      	cbz	r3, 802b34c <CDC_Transmit_FS+0x1c>
    return USBD_BUSY;
 802b346:	2401      	movs	r4, #1
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);

  EP1_IN_Callback ();
  /* USER CODE END 7 */
  return result;
}
 802b348:	4620      	mov	r0, r4
 802b34a:	bd70      	pop	{r4, r5, r6, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 802b34c:	4e06      	ldr	r6, [pc, #24]	; (802b368 <CDC_Transmit_FS+0x38>)
 802b34e:	462a      	mov	r2, r5
 802b350:	4621      	mov	r1, r4
 802b352:	4630      	mov	r0, r6
 802b354:	f7ff fa80 	bl	802a858 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802b358:	4630      	mov	r0, r6
 802b35a:	f7ff fa8b 	bl	802a874 <USBD_CDC_TransmitPacket>
 802b35e:	4604      	mov	r4, r0
  EP1_IN_Callback ();
 802b360:	f7f7 fdc4 	bl	8022eec <EP1_IN_Callback>
  return result;
 802b364:	e7f0      	b.n	802b348 <CDC_Transmit_FS+0x18>
 802b366:	bf00      	nop
 802b368:	20005804 	.word	0x20005804

0802b36c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 802b36c:	2312      	movs	r3, #18
 802b36e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 802b370:	4800      	ldr	r0, [pc, #0]	; (802b374 <USBD_FS_DeviceDescriptor+0x8>)
 802b372:	4770      	bx	lr
 802b374:	200001d8 	.word	0x200001d8

0802b378 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802b378:	2304      	movs	r3, #4
 802b37a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 802b37c:	4800      	ldr	r0, [pc, #0]	; (802b380 <USBD_FS_LangIDStrDescriptor+0x8>)
 802b37e:	4770      	bx	lr
 802b380:	200001ec 	.word	0x200001ec

0802b384 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 802b384:	2300      	movs	r3, #0
 802b386:	4293      	cmp	r3, r2
 802b388:	d21e      	bcs.n	802b3c8 <IntToUnicode+0x44>
{
 802b38a:	b500      	push	{lr}
 802b38c:	e010      	b.n	802b3b0 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802b38e:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 802b392:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 802b396:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 802b398:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 802b39c:	f10c 0c01 	add.w	ip, ip, #1
 802b3a0:	f04f 0e00 	mov.w	lr, #0
 802b3a4:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 802b3a8:	3301      	adds	r3, #1
 802b3aa:	b2db      	uxtb	r3, r3
 802b3ac:	4293      	cmp	r3, r2
 802b3ae:	d209      	bcs.n	802b3c4 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 802b3b0:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 802b3b4:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 802b3b8:	d2e9      	bcs.n	802b38e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 802b3ba:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 802b3be:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 802b3c2:	e7e8      	b.n	802b396 <IntToUnicode+0x12>
  }
}
 802b3c4:	f85d fb04 	ldr.w	pc, [sp], #4
 802b3c8:	4770      	bx	lr
	...

0802b3cc <Get_SerialNum>:
{
 802b3cc:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802b3ce:	4b0b      	ldr	r3, [pc, #44]	; (802b3fc <Get_SerialNum+0x30>)
 802b3d0:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 802b3d4:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802b3d8:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 802b3dc:	18c0      	adds	r0, r0, r3
 802b3de:	d100      	bne.n	802b3e2 <Get_SerialNum+0x16>
}
 802b3e0:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802b3e2:	4d07      	ldr	r5, [pc, #28]	; (802b400 <Get_SerialNum+0x34>)
 802b3e4:	2208      	movs	r2, #8
 802b3e6:	1ca9      	adds	r1, r5, #2
 802b3e8:	f7ff ffcc 	bl	802b384 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 802b3ec:	2204      	movs	r2, #4
 802b3ee:	f105 0112 	add.w	r1, r5, #18
 802b3f2:	4620      	mov	r0, r4
 802b3f4:	f7ff ffc6 	bl	802b384 <IntToUnicode>
}
 802b3f8:	e7f2      	b.n	802b3e0 <Get_SerialNum+0x14>
 802b3fa:	bf00      	nop
 802b3fc:	1ffff000 	.word	0x1ffff000
 802b400:	200001f0 	.word	0x200001f0

0802b404 <USBD_FS_SerialStrDescriptor>:
{
 802b404:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 802b406:	231a      	movs	r3, #26
 802b408:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 802b40a:	f7ff ffdf 	bl	802b3cc <Get_SerialNum>
}
 802b40e:	4801      	ldr	r0, [pc, #4]	; (802b414 <USBD_FS_SerialStrDescriptor+0x10>)
 802b410:	bd08      	pop	{r3, pc}
 802b412:	bf00      	nop
 802b414:	200001f0 	.word	0x200001f0

0802b418 <USBD_FS_ProductStrDescriptor>:
{
 802b418:	b508      	push	{r3, lr}
 802b41a:	460a      	mov	r2, r1
  if(speed == 0)
 802b41c:	b928      	cbnz	r0, 802b42a <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802b41e:	4905      	ldr	r1, [pc, #20]	; (802b434 <USBD_FS_ProductStrDescriptor+0x1c>)
 802b420:	4805      	ldr	r0, [pc, #20]	; (802b438 <USBD_FS_ProductStrDescriptor+0x20>)
 802b422:	f7ff fece 	bl	802b1c2 <USBD_GetString>
}
 802b426:	4803      	ldr	r0, [pc, #12]	; (802b434 <USBD_FS_ProductStrDescriptor+0x1c>)
 802b428:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802b42a:	4902      	ldr	r1, [pc, #8]	; (802b434 <USBD_FS_ProductStrDescriptor+0x1c>)
 802b42c:	4802      	ldr	r0, [pc, #8]	; (802b438 <USBD_FS_ProductStrDescriptor+0x20>)
 802b42e:	f7ff fec8 	bl	802b1c2 <USBD_GetString>
 802b432:	e7f8      	b.n	802b426 <USBD_FS_ProductStrDescriptor+0xe>
 802b434:	200062c8 	.word	0x200062c8
 802b438:	08030fe8 	.word	0x08030fe8

0802b43c <USBD_FS_ManufacturerStrDescriptor>:
{
 802b43c:	b510      	push	{r4, lr}
 802b43e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802b440:	4c03      	ldr	r4, [pc, #12]	; (802b450 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 802b442:	4621      	mov	r1, r4
 802b444:	4803      	ldr	r0, [pc, #12]	; (802b454 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 802b446:	f7ff febc 	bl	802b1c2 <USBD_GetString>
}
 802b44a:	4620      	mov	r0, r4
 802b44c:	bd10      	pop	{r4, pc}
 802b44e:	bf00      	nop
 802b450:	200062c8 	.word	0x200062c8
 802b454:	08031000 	.word	0x08031000

0802b458 <USBD_FS_ConfigStrDescriptor>:
{
 802b458:	b508      	push	{r3, lr}
 802b45a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 802b45c:	b928      	cbnz	r0, 802b46a <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802b45e:	4905      	ldr	r1, [pc, #20]	; (802b474 <USBD_FS_ConfigStrDescriptor+0x1c>)
 802b460:	4805      	ldr	r0, [pc, #20]	; (802b478 <USBD_FS_ConfigStrDescriptor+0x20>)
 802b462:	f7ff feae 	bl	802b1c2 <USBD_GetString>
}
 802b466:	4803      	ldr	r0, [pc, #12]	; (802b474 <USBD_FS_ConfigStrDescriptor+0x1c>)
 802b468:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802b46a:	4902      	ldr	r1, [pc, #8]	; (802b474 <USBD_FS_ConfigStrDescriptor+0x1c>)
 802b46c:	4802      	ldr	r0, [pc, #8]	; (802b478 <USBD_FS_ConfigStrDescriptor+0x20>)
 802b46e:	f7ff fea8 	bl	802b1c2 <USBD_GetString>
 802b472:	e7f8      	b.n	802b466 <USBD_FS_ConfigStrDescriptor+0xe>
 802b474:	200062c8 	.word	0x200062c8
 802b478:	08031014 	.word	0x08031014

0802b47c <USBD_FS_InterfaceStrDescriptor>:
{
 802b47c:	b508      	push	{r3, lr}
 802b47e:	460a      	mov	r2, r1
  if(speed == 0)
 802b480:	b928      	cbnz	r0, 802b48e <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802b482:	4905      	ldr	r1, [pc, #20]	; (802b498 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 802b484:	4805      	ldr	r0, [pc, #20]	; (802b49c <USBD_FS_InterfaceStrDescriptor+0x20>)
 802b486:	f7ff fe9c 	bl	802b1c2 <USBD_GetString>
}
 802b48a:	4803      	ldr	r0, [pc, #12]	; (802b498 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 802b48c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802b48e:	4902      	ldr	r1, [pc, #8]	; (802b498 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 802b490:	4802      	ldr	r0, [pc, #8]	; (802b49c <USBD_FS_InterfaceStrDescriptor+0x20>)
 802b492:	f7ff fe96 	bl	802b1c2 <USBD_GetString>
 802b496:	e7f8      	b.n	802b48a <USBD_FS_InterfaceStrDescriptor+0xe>
 802b498:	200062c8 	.word	0x200062c8
 802b49c:	08031020 	.word	0x08031020

0802b4a0 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 802b4a0:	2802      	cmp	r0, #2
 802b4a2:	d805      	bhi.n	802b4b0 <USBD_Get_USB_Status+0x10>
 802b4a4:	e8df f000 	tbb	[pc, r0]
 802b4a8:	0405      	.short	0x0405
 802b4aa:	02          	.byte	0x02
 802b4ab:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 802b4ac:	2001      	movs	r0, #1
    break;
 802b4ae:	4770      	bx	lr
      usb_status = USBD_FAIL;
 802b4b0:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 802b4b2:	4770      	bx	lr

0802b4b4 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 802b4b4:	6802      	ldr	r2, [r0, #0]
 802b4b6:	4b12      	ldr	r3, [pc, #72]	; (802b500 <HAL_PCD_MspInit+0x4c>)
 802b4b8:	429a      	cmp	r2, r3
 802b4ba:	d000      	beq.n	802b4be <HAL_PCD_MspInit+0xa>
 802b4bc:	4770      	bx	lr
{
 802b4be:	b500      	push	{lr}
 802b4c0:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 802b4c2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 802b4c6:	69da      	ldr	r2, [r3, #28]
 802b4c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 802b4cc:	61da      	str	r2, [r3, #28]
 802b4ce:	69db      	ldr	r3, [r3, #28]
 802b4d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802b4d4:	9301      	str	r3, [sp, #4]
 802b4d6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 1, 0);
 802b4d8:	2200      	movs	r2, #0
 802b4da:	2101      	movs	r1, #1
 802b4dc:	2013      	movs	r0, #19
 802b4de:	f7fa fe67 	bl	80261b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 802b4e2:	2013      	movs	r0, #19
 802b4e4:	f7fa fe9c 	bl	8026220 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 802b4e8:	2200      	movs	r2, #0
 802b4ea:	2101      	movs	r1, #1
 802b4ec:	2014      	movs	r0, #20
 802b4ee:	f7fa fe5f 	bl	80261b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 802b4f2:	2014      	movs	r0, #20
 802b4f4:	f7fa fe94 	bl	8026220 <HAL_NVIC_EnableIRQ>
}
 802b4f8:	b003      	add	sp, #12
 802b4fa:	f85d fb04 	ldr.w	pc, [sp], #4
 802b4fe:	bf00      	nop
 802b500:	40005c00 	.word	0x40005c00

0802b504 <HAL_PCD_SetupStageCallback>:
{
 802b504:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802b506:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 802b50a:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 802b50e:	f7ff fa19 	bl	802a944 <USBD_LL_SetupStage>
}
 802b512:	bd08      	pop	{r3, pc}

0802b514 <HAL_PCD_DataOutStageCallback>:
{
 802b514:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 802b516:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 802b51a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 802b51e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 802b522:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 802b526:	f7ff fa3a 	bl	802a99e <USBD_LL_DataOutStage>
}
 802b52a:	bd08      	pop	{r3, pc}

0802b52c <HAL_PCD_DataInStageCallback>:
{
 802b52c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802b52e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 802b532:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 802b536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802b538:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 802b53c:	f7ff fa75 	bl	802aa2a <USBD_LL_DataInStage>
}
 802b540:	bd08      	pop	{r3, pc}

0802b542 <HAL_PCD_SOFCallback>:
{
 802b542:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802b544:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 802b548:	f7ff fb16 	bl	802ab78 <USBD_LL_SOF>
}
 802b54c:	bd08      	pop	{r3, pc}

0802b54e <HAL_PCD_ResetCallback>:
{
 802b54e:	b510      	push	{r4, lr}
 802b550:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 802b552:	6883      	ldr	r3, [r0, #8]
 802b554:	2b02      	cmp	r3, #2
 802b556:	d109      	bne.n	802b56c <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802b558:	2101      	movs	r1, #1
 802b55a:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 802b55e:	f7ff faf4 	bl	802ab4a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802b562:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 802b566:	f7ff fac8 	bl	802aafa <USBD_LL_Reset>
}
 802b56a:	bd10      	pop	{r4, pc}
    Error_Handler();
 802b56c:	f7f8 fa78 	bl	8023a60 <Error_Handler>
 802b570:	e7f2      	b.n	802b558 <HAL_PCD_ResetCallback+0xa>
	...

0802b574 <HAL_PCD_SuspendCallback>:
{
 802b574:	b510      	push	{r4, lr}
 802b576:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 802b578:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 802b57c:	f7ff fae8 	bl	802ab50 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 802b580:	69a3      	ldr	r3, [r4, #24]
 802b582:	b123      	cbz	r3, 802b58e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802b584:	4a02      	ldr	r2, [pc, #8]	; (802b590 <HAL_PCD_SuspendCallback+0x1c>)
 802b586:	6913      	ldr	r3, [r2, #16]
 802b588:	f043 0306 	orr.w	r3, r3, #6
 802b58c:	6113      	str	r3, [r2, #16]
}
 802b58e:	bd10      	pop	{r4, pc}
 802b590:	e000ed00 	.word	0xe000ed00

0802b594 <HAL_PCD_ResumeCallback>:
{
 802b594:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 802b596:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 802b59a:	f7ff fae2 	bl	802ab62 <USBD_LL_Resume>
}
 802b59e:	bd08      	pop	{r3, pc}

0802b5a0 <USBD_LL_Init>:
{
 802b5a0:	b510      	push	{r4, lr}
 802b5a2:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 802b5a4:	481d      	ldr	r0, [pc, #116]	; (802b61c <USBD_LL_Init+0x7c>)
 802b5a6:	f8c0 42ec 	str.w	r4, [r0, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 802b5aa:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 802b5ae:	4b1c      	ldr	r3, [pc, #112]	; (802b620 <USBD_LL_Init+0x80>)
 802b5b0:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 802b5b2:	2308      	movs	r3, #8
 802b5b4:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 802b5b6:	2302      	movs	r3, #2
 802b5b8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 802b5ba:	2300      	movs	r3, #0
 802b5bc:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 802b5be:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 802b5c0:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 802b5c2:	f7fb fbf5 	bl	8026db0 <HAL_PCD_Init>
 802b5c6:	bb30      	cbnz	r0, 802b616 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 802b5c8:	2318      	movs	r3, #24
 802b5ca:	2200      	movs	r2, #0
 802b5cc:	4611      	mov	r1, r2
 802b5ce:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 802b5d2:	f7fc fb56 	bl	8027c82 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 802b5d6:	2358      	movs	r3, #88	; 0x58
 802b5d8:	2200      	movs	r2, #0
 802b5da:	2180      	movs	r1, #128	; 0x80
 802b5dc:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 802b5e0:	f7fc fb4f 	bl	8027c82 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 802b5e4:	23c0      	movs	r3, #192	; 0xc0
 802b5e6:	2200      	movs	r2, #0
 802b5e8:	2181      	movs	r1, #129	; 0x81
 802b5ea:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 802b5ee:	f7fc fb48 	bl	8027c82 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 802b5f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 802b5f6:	2200      	movs	r2, #0
 802b5f8:	2101      	movs	r1, #1
 802b5fa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 802b5fe:	f7fc fb40 	bl	8027c82 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 802b602:	f44f 7380 	mov.w	r3, #256	; 0x100
 802b606:	2200      	movs	r2, #0
 802b608:	2182      	movs	r1, #130	; 0x82
 802b60a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 802b60e:	f7fc fb38 	bl	8027c82 <HAL_PCDEx_PMAConfig>
}
 802b612:	2000      	movs	r0, #0
 802b614:	bd10      	pop	{r4, pc}
    Error_Handler( );
 802b616:	f7f8 fa23 	bl	8023a60 <Error_Handler>
 802b61a:	e7d5      	b.n	802b5c8 <USBD_LL_Init+0x28>
 802b61c:	200064c8 	.word	0x200064c8
 802b620:	40005c00 	.word	0x40005c00

0802b624 <USBD_LL_Start>:
{
 802b624:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 802b626:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 802b62a:	f7fb fc49 	bl	8026ec0 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 802b62e:	f7ff ff37 	bl	802b4a0 <USBD_Get_USB_Status>
}
 802b632:	bd08      	pop	{r3, pc}

0802b634 <USBD_LL_OpenEP>:
{
 802b634:	b508      	push	{r3, lr}
 802b636:	4694      	mov	ip, r2
 802b638:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802b63a:	4663      	mov	r3, ip
 802b63c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 802b640:	f7fc f9f0 	bl	8027a24 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 802b644:	f7ff ff2c 	bl	802b4a0 <USBD_Get_USB_Status>
}
 802b648:	bd08      	pop	{r3, pc}

0802b64a <USBD_LL_CloseEP>:
{
 802b64a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802b64c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 802b650:	f7fc fa26 	bl	8027aa0 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 802b654:	f7ff ff24 	bl	802b4a0 <USBD_Get_USB_Status>
}
 802b658:	bd08      	pop	{r3, pc}

0802b65a <USBD_LL_StallEP>:
{
 802b65a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802b65c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 802b660:	f7fc fa98 	bl	8027b94 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 802b664:	f7ff ff1c 	bl	802b4a0 <USBD_Get_USB_Status>
}
 802b668:	bd08      	pop	{r3, pc}

0802b66a <USBD_LL_ClearStallEP>:
{
 802b66a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802b66c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 802b670:	f7fc facc 	bl	8027c0c <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 802b674:	f7ff ff14 	bl	802b4a0 <USBD_Get_USB_Status>
}
 802b678:	bd08      	pop	{r3, pc}

0802b67a <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 802b67a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 802b67e:	f011 0f80 	tst.w	r1, #128	; 0x80
 802b682:	d108      	bne.n	802b696 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 802b684:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 802b688:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802b68c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 802b690:	f893 016a 	ldrb.w	r0, [r3, #362]	; 0x16a
}
 802b694:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802b696:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 802b69a:	3101      	adds	r1, #1
 802b69c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802b6a0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 802b6a4:	7898      	ldrb	r0, [r3, #2]
 802b6a6:	4770      	bx	lr

0802b6a8 <USBD_LL_SetUSBAddress>:
{
 802b6a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802b6aa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 802b6ae:	f7fc f8cd 	bl	802784c <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 802b6b2:	f7ff fef5 	bl	802b4a0 <USBD_Get_USB_Status>
}
 802b6b6:	bd08      	pop	{r3, pc}

0802b6b8 <USBD_LL_Transmit>:
{
 802b6b8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802b6ba:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 802b6be:	f7fc fa47 	bl	8027b50 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 802b6c2:	f7ff feed 	bl	802b4a0 <USBD_Get_USB_Status>
}
 802b6c6:	bd08      	pop	{r3, pc}

0802b6c8 <USBD_LL_PrepareReceive>:
{
 802b6c8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802b6ca:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 802b6ce:	f7fc fa19 	bl	8027b04 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 802b6d2:	f7ff fee5 	bl	802b4a0 <USBD_Get_USB_Status>
}
 802b6d6:	bd08      	pop	{r3, pc}

0802b6d8 <USBD_LL_GetRxDataSize>:
{
 802b6d8:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 802b6da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 802b6de:	f7fc fa2e 	bl	8027b3e <HAL_PCD_EP_GetRxCount>
}
 802b6e2:	bd08      	pop	{r3, pc}

0802b6e4 <USBD_static_malloc>:
}
 802b6e4:	4800      	ldr	r0, [pc, #0]	; (802b6e8 <USBD_static_malloc+0x4>)
 802b6e6:	4770      	bx	lr
 802b6e8:	200067b8 	.word	0x200067b8

0802b6ec <USBD_static_free>:
}
 802b6ec:	4770      	bx	lr

0802b6ee <HAL_PCDEx_SetConnectionState>:
}
 802b6ee:	4770      	bx	lr

0802b6f0 <std>:
 802b6f0:	2300      	movs	r3, #0
 802b6f2:	b510      	push	{r4, lr}
 802b6f4:	4604      	mov	r4, r0
 802b6f6:	e9c0 3300 	strd	r3, r3, [r0]
 802b6fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b6fe:	6083      	str	r3, [r0, #8]
 802b700:	8181      	strh	r1, [r0, #12]
 802b702:	6643      	str	r3, [r0, #100]	; 0x64
 802b704:	81c2      	strh	r2, [r0, #14]
 802b706:	6183      	str	r3, [r0, #24]
 802b708:	4619      	mov	r1, r3
 802b70a:	2208      	movs	r2, #8
 802b70c:	305c      	adds	r0, #92	; 0x5c
 802b70e:	f000 f954 	bl	802b9ba <memset>
 802b712:	4b0d      	ldr	r3, [pc, #52]	; (802b748 <std+0x58>)
 802b714:	61e4      	str	r4, [r4, #28]
 802b716:	6223      	str	r3, [r4, #32]
 802b718:	4b0c      	ldr	r3, [pc, #48]	; (802b74c <std+0x5c>)
 802b71a:	6263      	str	r3, [r4, #36]	; 0x24
 802b71c:	4b0c      	ldr	r3, [pc, #48]	; (802b750 <std+0x60>)
 802b71e:	62a3      	str	r3, [r4, #40]	; 0x28
 802b720:	4b0c      	ldr	r3, [pc, #48]	; (802b754 <std+0x64>)
 802b722:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b724:	4b0c      	ldr	r3, [pc, #48]	; (802b758 <std+0x68>)
 802b726:	429c      	cmp	r4, r3
 802b728:	d006      	beq.n	802b738 <std+0x48>
 802b72a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802b72e:	4294      	cmp	r4, r2
 802b730:	d002      	beq.n	802b738 <std+0x48>
 802b732:	33d0      	adds	r3, #208	; 0xd0
 802b734:	429c      	cmp	r4, r3
 802b736:	d105      	bne.n	802b744 <std+0x54>
 802b738:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802b73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b740:	f000 b9b4 	b.w	802baac <__retarget_lock_init_recursive>
 802b744:	bd10      	pop	{r4, pc}
 802b746:	bf00      	nop
 802b748:	0802b935 	.word	0x0802b935
 802b74c:	0802b957 	.word	0x0802b957
 802b750:	0802b98f 	.word	0x0802b98f
 802b754:	0802b9b3 	.word	0x0802b9b3
 802b758:	200069d8 	.word	0x200069d8

0802b75c <stdio_exit_handler>:
 802b75c:	4a02      	ldr	r2, [pc, #8]	; (802b768 <stdio_exit_handler+0xc>)
 802b75e:	4903      	ldr	r1, [pc, #12]	; (802b76c <stdio_exit_handler+0x10>)
 802b760:	4803      	ldr	r0, [pc, #12]	; (802b770 <stdio_exit_handler+0x14>)
 802b762:	f000 b869 	b.w	802b838 <_fwalk_sglue>
 802b766:	bf00      	nop
 802b768:	2000020c 	.word	0x2000020c
 802b76c:	0802e05d 	.word	0x0802e05d
 802b770:	20000218 	.word	0x20000218

0802b774 <cleanup_stdio>:
 802b774:	6841      	ldr	r1, [r0, #4]
 802b776:	4b0c      	ldr	r3, [pc, #48]	; (802b7a8 <cleanup_stdio+0x34>)
 802b778:	b510      	push	{r4, lr}
 802b77a:	4299      	cmp	r1, r3
 802b77c:	4604      	mov	r4, r0
 802b77e:	d001      	beq.n	802b784 <cleanup_stdio+0x10>
 802b780:	f002 fc6c 	bl	802e05c <_fclose_r>
 802b784:	68a1      	ldr	r1, [r4, #8]
 802b786:	4b09      	ldr	r3, [pc, #36]	; (802b7ac <cleanup_stdio+0x38>)
 802b788:	4299      	cmp	r1, r3
 802b78a:	d002      	beq.n	802b792 <cleanup_stdio+0x1e>
 802b78c:	4620      	mov	r0, r4
 802b78e:	f002 fc65 	bl	802e05c <_fclose_r>
 802b792:	68e1      	ldr	r1, [r4, #12]
 802b794:	4b06      	ldr	r3, [pc, #24]	; (802b7b0 <cleanup_stdio+0x3c>)
 802b796:	4299      	cmp	r1, r3
 802b798:	d004      	beq.n	802b7a4 <cleanup_stdio+0x30>
 802b79a:	4620      	mov	r0, r4
 802b79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b7a0:	f002 bc5c 	b.w	802e05c <_fclose_r>
 802b7a4:	bd10      	pop	{r4, pc}
 802b7a6:	bf00      	nop
 802b7a8:	200069d8 	.word	0x200069d8
 802b7ac:	20006a40 	.word	0x20006a40
 802b7b0:	20006aa8 	.word	0x20006aa8

0802b7b4 <global_stdio_init.part.0>:
 802b7b4:	b510      	push	{r4, lr}
 802b7b6:	4b0b      	ldr	r3, [pc, #44]	; (802b7e4 <global_stdio_init.part.0+0x30>)
 802b7b8:	4c0b      	ldr	r4, [pc, #44]	; (802b7e8 <global_stdio_init.part.0+0x34>)
 802b7ba:	4a0c      	ldr	r2, [pc, #48]	; (802b7ec <global_stdio_init.part.0+0x38>)
 802b7bc:	4620      	mov	r0, r4
 802b7be:	601a      	str	r2, [r3, #0]
 802b7c0:	2104      	movs	r1, #4
 802b7c2:	2200      	movs	r2, #0
 802b7c4:	f7ff ff94 	bl	802b6f0 <std>
 802b7c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802b7cc:	2201      	movs	r2, #1
 802b7ce:	2109      	movs	r1, #9
 802b7d0:	f7ff ff8e 	bl	802b6f0 <std>
 802b7d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802b7d8:	2202      	movs	r2, #2
 802b7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b7de:	2112      	movs	r1, #18
 802b7e0:	f7ff bf86 	b.w	802b6f0 <std>
 802b7e4:	20006b10 	.word	0x20006b10
 802b7e8:	200069d8 	.word	0x200069d8
 802b7ec:	0802b75d 	.word	0x0802b75d

0802b7f0 <__sfp_lock_acquire>:
 802b7f0:	4801      	ldr	r0, [pc, #4]	; (802b7f8 <__sfp_lock_acquire+0x8>)
 802b7f2:	f000 b95d 	b.w	802bab0 <__retarget_lock_acquire_recursive>
 802b7f6:	bf00      	nop
 802b7f8:	20006b1a 	.word	0x20006b1a

0802b7fc <__sfp_lock_release>:
 802b7fc:	4801      	ldr	r0, [pc, #4]	; (802b804 <__sfp_lock_release+0x8>)
 802b7fe:	f000 b958 	b.w	802bab2 <__retarget_lock_release_recursive>
 802b802:	bf00      	nop
 802b804:	20006b1a 	.word	0x20006b1a

0802b808 <__sinit>:
 802b808:	b510      	push	{r4, lr}
 802b80a:	4604      	mov	r4, r0
 802b80c:	f7ff fff0 	bl	802b7f0 <__sfp_lock_acquire>
 802b810:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b812:	b11b      	cbz	r3, 802b81c <__sinit+0x14>
 802b814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b818:	f7ff bff0 	b.w	802b7fc <__sfp_lock_release>
 802b81c:	4b04      	ldr	r3, [pc, #16]	; (802b830 <__sinit+0x28>)
 802b81e:	6363      	str	r3, [r4, #52]	; 0x34
 802b820:	4b04      	ldr	r3, [pc, #16]	; (802b834 <__sinit+0x2c>)
 802b822:	681b      	ldr	r3, [r3, #0]
 802b824:	2b00      	cmp	r3, #0
 802b826:	d1f5      	bne.n	802b814 <__sinit+0xc>
 802b828:	f7ff ffc4 	bl	802b7b4 <global_stdio_init.part.0>
 802b82c:	e7f2      	b.n	802b814 <__sinit+0xc>
 802b82e:	bf00      	nop
 802b830:	0802b775 	.word	0x0802b775
 802b834:	20006b10 	.word	0x20006b10

0802b838 <_fwalk_sglue>:
 802b838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b83c:	4607      	mov	r7, r0
 802b83e:	4688      	mov	r8, r1
 802b840:	4614      	mov	r4, r2
 802b842:	2600      	movs	r6, #0
 802b844:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b848:	f1b9 0901 	subs.w	r9, r9, #1
 802b84c:	d505      	bpl.n	802b85a <_fwalk_sglue+0x22>
 802b84e:	6824      	ldr	r4, [r4, #0]
 802b850:	2c00      	cmp	r4, #0
 802b852:	d1f7      	bne.n	802b844 <_fwalk_sglue+0xc>
 802b854:	4630      	mov	r0, r6
 802b856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b85a:	89ab      	ldrh	r3, [r5, #12]
 802b85c:	2b01      	cmp	r3, #1
 802b85e:	d907      	bls.n	802b870 <_fwalk_sglue+0x38>
 802b860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b864:	3301      	adds	r3, #1
 802b866:	d003      	beq.n	802b870 <_fwalk_sglue+0x38>
 802b868:	4629      	mov	r1, r5
 802b86a:	4638      	mov	r0, r7
 802b86c:	47c0      	blx	r8
 802b86e:	4306      	orrs	r6, r0
 802b870:	3568      	adds	r5, #104	; 0x68
 802b872:	e7e9      	b.n	802b848 <_fwalk_sglue+0x10>

0802b874 <printf>:
 802b874:	b40f      	push	{r0, r1, r2, r3}
 802b876:	b507      	push	{r0, r1, r2, lr}
 802b878:	4906      	ldr	r1, [pc, #24]	; (802b894 <printf+0x20>)
 802b87a:	ab04      	add	r3, sp, #16
 802b87c:	6808      	ldr	r0, [r1, #0]
 802b87e:	f853 2b04 	ldr.w	r2, [r3], #4
 802b882:	6881      	ldr	r1, [r0, #8]
 802b884:	9301      	str	r3, [sp, #4]
 802b886:	f000 fc8d 	bl	802c1a4 <_vfprintf_r>
 802b88a:	b003      	add	sp, #12
 802b88c:	f85d eb04 	ldr.w	lr, [sp], #4
 802b890:	b004      	add	sp, #16
 802b892:	4770      	bx	lr
 802b894:	20000338 	.word	0x20000338

0802b898 <_puts_r>:
 802b898:	b530      	push	{r4, r5, lr}
 802b89a:	4605      	mov	r5, r0
 802b89c:	b089      	sub	sp, #36	; 0x24
 802b89e:	4608      	mov	r0, r1
 802b8a0:	460c      	mov	r4, r1
 802b8a2:	f7f6 fcc1 	bl	8022228 <strlen>
 802b8a6:	4b1e      	ldr	r3, [pc, #120]	; (802b920 <_puts_r+0x88>)
 802b8a8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802b8ac:	9306      	str	r3, [sp, #24]
 802b8ae:	2301      	movs	r3, #1
 802b8b0:	4418      	add	r0, r3
 802b8b2:	9307      	str	r3, [sp, #28]
 802b8b4:	ab04      	add	r3, sp, #16
 802b8b6:	9301      	str	r3, [sp, #4]
 802b8b8:	2302      	movs	r3, #2
 802b8ba:	9302      	str	r3, [sp, #8]
 802b8bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 802b8be:	68ac      	ldr	r4, [r5, #8]
 802b8c0:	9003      	str	r0, [sp, #12]
 802b8c2:	b913      	cbnz	r3, 802b8ca <_puts_r+0x32>
 802b8c4:	4628      	mov	r0, r5
 802b8c6:	f7ff ff9f 	bl	802b808 <__sinit>
 802b8ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b8cc:	07db      	lsls	r3, r3, #31
 802b8ce:	d405      	bmi.n	802b8dc <_puts_r+0x44>
 802b8d0:	89a3      	ldrh	r3, [r4, #12]
 802b8d2:	0598      	lsls	r0, r3, #22
 802b8d4:	d402      	bmi.n	802b8dc <_puts_r+0x44>
 802b8d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b8d8:	f000 f8ea 	bl	802bab0 <__retarget_lock_acquire_recursive>
 802b8dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b8e0:	0499      	lsls	r1, r3, #18
 802b8e2:	d406      	bmi.n	802b8f2 <_puts_r+0x5a>
 802b8e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802b8e8:	81a3      	strh	r3, [r4, #12]
 802b8ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b8ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802b8f0:	6663      	str	r3, [r4, #100]	; 0x64
 802b8f2:	4628      	mov	r0, r5
 802b8f4:	aa01      	add	r2, sp, #4
 802b8f6:	4621      	mov	r1, r4
 802b8f8:	f002 fcb8 	bl	802e26c <__sfvwrite_r>
 802b8fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b8fe:	2800      	cmp	r0, #0
 802b900:	bf14      	ite	ne
 802b902:	f04f 35ff 	movne.w	r5, #4294967295
 802b906:	250a      	moveq	r5, #10
 802b908:	07da      	lsls	r2, r3, #31
 802b90a:	d405      	bmi.n	802b918 <_puts_r+0x80>
 802b90c:	89a3      	ldrh	r3, [r4, #12]
 802b90e:	059b      	lsls	r3, r3, #22
 802b910:	d402      	bmi.n	802b918 <_puts_r+0x80>
 802b912:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b914:	f000 f8cd 	bl	802bab2 <__retarget_lock_release_recursive>
 802b918:	4628      	mov	r0, r5
 802b91a:	b009      	add	sp, #36	; 0x24
 802b91c:	bd30      	pop	{r4, r5, pc}
 802b91e:	bf00      	nop
 802b920:	080313b7 	.word	0x080313b7

0802b924 <puts>:
 802b924:	4b02      	ldr	r3, [pc, #8]	; (802b930 <puts+0xc>)
 802b926:	4601      	mov	r1, r0
 802b928:	6818      	ldr	r0, [r3, #0]
 802b92a:	f7ff bfb5 	b.w	802b898 <_puts_r>
 802b92e:	bf00      	nop
 802b930:	20000338 	.word	0x20000338

0802b934 <__sread>:
 802b934:	b510      	push	{r4, lr}
 802b936:	460c      	mov	r4, r1
 802b938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b93c:	f000 f868 	bl	802ba10 <_read_r>
 802b940:	2800      	cmp	r0, #0
 802b942:	bfab      	itete	ge
 802b944:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 802b946:	89a3      	ldrhlt	r3, [r4, #12]
 802b948:	181b      	addge	r3, r3, r0
 802b94a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b94e:	bfac      	ite	ge
 802b950:	6523      	strge	r3, [r4, #80]	; 0x50
 802b952:	81a3      	strhlt	r3, [r4, #12]
 802b954:	bd10      	pop	{r4, pc}

0802b956 <__swrite>:
 802b956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b95a:	461f      	mov	r7, r3
 802b95c:	898b      	ldrh	r3, [r1, #12]
 802b95e:	4605      	mov	r5, r0
 802b960:	05db      	lsls	r3, r3, #23
 802b962:	460c      	mov	r4, r1
 802b964:	4616      	mov	r6, r2
 802b966:	d505      	bpl.n	802b974 <__swrite+0x1e>
 802b968:	2302      	movs	r3, #2
 802b96a:	2200      	movs	r2, #0
 802b96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b970:	f000 f83c 	bl	802b9ec <_lseek_r>
 802b974:	89a3      	ldrh	r3, [r4, #12]
 802b976:	4632      	mov	r2, r6
 802b978:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b97c:	81a3      	strh	r3, [r4, #12]
 802b97e:	4628      	mov	r0, r5
 802b980:	463b      	mov	r3, r7
 802b982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b98a:	f000 b853 	b.w	802ba34 <_write_r>

0802b98e <__sseek>:
 802b98e:	b510      	push	{r4, lr}
 802b990:	460c      	mov	r4, r1
 802b992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b996:	f000 f829 	bl	802b9ec <_lseek_r>
 802b99a:	1c43      	adds	r3, r0, #1
 802b99c:	89a3      	ldrh	r3, [r4, #12]
 802b99e:	bf15      	itete	ne
 802b9a0:	6520      	strne	r0, [r4, #80]	; 0x50
 802b9a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b9a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b9aa:	81a3      	strheq	r3, [r4, #12]
 802b9ac:	bf18      	it	ne
 802b9ae:	81a3      	strhne	r3, [r4, #12]
 802b9b0:	bd10      	pop	{r4, pc}

0802b9b2 <__sclose>:
 802b9b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b9b6:	f000 b809 	b.w	802b9cc <_close_r>

0802b9ba <memset>:
 802b9ba:	4603      	mov	r3, r0
 802b9bc:	4402      	add	r2, r0
 802b9be:	4293      	cmp	r3, r2
 802b9c0:	d100      	bne.n	802b9c4 <memset+0xa>
 802b9c2:	4770      	bx	lr
 802b9c4:	f803 1b01 	strb.w	r1, [r3], #1
 802b9c8:	e7f9      	b.n	802b9be <memset+0x4>
	...

0802b9cc <_close_r>:
 802b9cc:	b538      	push	{r3, r4, r5, lr}
 802b9ce:	2300      	movs	r3, #0
 802b9d0:	4d05      	ldr	r5, [pc, #20]	; (802b9e8 <_close_r+0x1c>)
 802b9d2:	4604      	mov	r4, r0
 802b9d4:	4608      	mov	r0, r1
 802b9d6:	602b      	str	r3, [r5, #0]
 802b9d8:	f7fa fac0 	bl	8025f5c <_close>
 802b9dc:	1c43      	adds	r3, r0, #1
 802b9de:	d102      	bne.n	802b9e6 <_close_r+0x1a>
 802b9e0:	682b      	ldr	r3, [r5, #0]
 802b9e2:	b103      	cbz	r3, 802b9e6 <_close_r+0x1a>
 802b9e4:	6023      	str	r3, [r4, #0]
 802b9e6:	bd38      	pop	{r3, r4, r5, pc}
 802b9e8:	20006b14 	.word	0x20006b14

0802b9ec <_lseek_r>:
 802b9ec:	b538      	push	{r3, r4, r5, lr}
 802b9ee:	4604      	mov	r4, r0
 802b9f0:	4608      	mov	r0, r1
 802b9f2:	4611      	mov	r1, r2
 802b9f4:	2200      	movs	r2, #0
 802b9f6:	4d05      	ldr	r5, [pc, #20]	; (802ba0c <_lseek_r+0x20>)
 802b9f8:	602a      	str	r2, [r5, #0]
 802b9fa:	461a      	mov	r2, r3
 802b9fc:	f7fa fab8 	bl	8025f70 <_lseek>
 802ba00:	1c43      	adds	r3, r0, #1
 802ba02:	d102      	bne.n	802ba0a <_lseek_r+0x1e>
 802ba04:	682b      	ldr	r3, [r5, #0]
 802ba06:	b103      	cbz	r3, 802ba0a <_lseek_r+0x1e>
 802ba08:	6023      	str	r3, [r4, #0]
 802ba0a:	bd38      	pop	{r3, r4, r5, pc}
 802ba0c:	20006b14 	.word	0x20006b14

0802ba10 <_read_r>:
 802ba10:	b538      	push	{r3, r4, r5, lr}
 802ba12:	4604      	mov	r4, r0
 802ba14:	4608      	mov	r0, r1
 802ba16:	4611      	mov	r1, r2
 802ba18:	2200      	movs	r2, #0
 802ba1a:	4d05      	ldr	r5, [pc, #20]	; (802ba30 <_read_r+0x20>)
 802ba1c:	602a      	str	r2, [r5, #0]
 802ba1e:	461a      	mov	r2, r3
 802ba20:	f7fa fa8c 	bl	8025f3c <_read>
 802ba24:	1c43      	adds	r3, r0, #1
 802ba26:	d102      	bne.n	802ba2e <_read_r+0x1e>
 802ba28:	682b      	ldr	r3, [r5, #0]
 802ba2a:	b103      	cbz	r3, 802ba2e <_read_r+0x1e>
 802ba2c:	6023      	str	r3, [r4, #0]
 802ba2e:	bd38      	pop	{r3, r4, r5, pc}
 802ba30:	20006b14 	.word	0x20006b14

0802ba34 <_write_r>:
 802ba34:	b538      	push	{r3, r4, r5, lr}
 802ba36:	4604      	mov	r4, r0
 802ba38:	4608      	mov	r0, r1
 802ba3a:	4611      	mov	r1, r2
 802ba3c:	2200      	movs	r2, #0
 802ba3e:	4d05      	ldr	r5, [pc, #20]	; (802ba54 <_write_r+0x20>)
 802ba40:	602a      	str	r2, [r5, #0]
 802ba42:	461a      	mov	r2, r3
 802ba44:	f7f8 f800 	bl	8023a48 <_write>
 802ba48:	1c43      	adds	r3, r0, #1
 802ba4a:	d102      	bne.n	802ba52 <_write_r+0x1e>
 802ba4c:	682b      	ldr	r3, [r5, #0]
 802ba4e:	b103      	cbz	r3, 802ba52 <_write_r+0x1e>
 802ba50:	6023      	str	r3, [r4, #0]
 802ba52:	bd38      	pop	{r3, r4, r5, pc}
 802ba54:	20006b14 	.word	0x20006b14

0802ba58 <__errno>:
 802ba58:	4b01      	ldr	r3, [pc, #4]	; (802ba60 <__errno+0x8>)
 802ba5a:	6818      	ldr	r0, [r3, #0]
 802ba5c:	4770      	bx	lr
 802ba5e:	bf00      	nop
 802ba60:	20000338 	.word	0x20000338

0802ba64 <__libc_init_array>:
 802ba64:	b570      	push	{r4, r5, r6, lr}
 802ba66:	2600      	movs	r6, #0
 802ba68:	4d0c      	ldr	r5, [pc, #48]	; (802ba9c <__libc_init_array+0x38>)
 802ba6a:	4c0d      	ldr	r4, [pc, #52]	; (802baa0 <__libc_init_array+0x3c>)
 802ba6c:	1b64      	subs	r4, r4, r5
 802ba6e:	10a4      	asrs	r4, r4, #2
 802ba70:	42a6      	cmp	r6, r4
 802ba72:	d109      	bne.n	802ba88 <__libc_init_array+0x24>
 802ba74:	f004 fbd0 	bl	8030218 <_init>
 802ba78:	2600      	movs	r6, #0
 802ba7a:	4d0a      	ldr	r5, [pc, #40]	; (802baa4 <__libc_init_array+0x40>)
 802ba7c:	4c0a      	ldr	r4, [pc, #40]	; (802baa8 <__libc_init_array+0x44>)
 802ba7e:	1b64      	subs	r4, r4, r5
 802ba80:	10a4      	asrs	r4, r4, #2
 802ba82:	42a6      	cmp	r6, r4
 802ba84:	d105      	bne.n	802ba92 <__libc_init_array+0x2e>
 802ba86:	bd70      	pop	{r4, r5, r6, pc}
 802ba88:	f855 3b04 	ldr.w	r3, [r5], #4
 802ba8c:	4798      	blx	r3
 802ba8e:	3601      	adds	r6, #1
 802ba90:	e7ee      	b.n	802ba70 <__libc_init_array+0xc>
 802ba92:	f855 3b04 	ldr.w	r3, [r5], #4
 802ba96:	4798      	blx	r3
 802ba98:	3601      	adds	r6, #1
 802ba9a:	e7f2      	b.n	802ba82 <__libc_init_array+0x1e>
 802ba9c:	080313c4 	.word	0x080313c4
 802baa0:	080313c4 	.word	0x080313c4
 802baa4:	080313c4 	.word	0x080313c4
 802baa8:	080313cc 	.word	0x080313cc

0802baac <__retarget_lock_init_recursive>:
 802baac:	4770      	bx	lr

0802baae <__retarget_lock_close_recursive>:
 802baae:	4770      	bx	lr

0802bab0 <__retarget_lock_acquire_recursive>:
 802bab0:	4770      	bx	lr

0802bab2 <__retarget_lock_release_recursive>:
 802bab2:	4770      	bx	lr

0802bab4 <memcpy>:
 802bab4:	440a      	add	r2, r1
 802bab6:	4291      	cmp	r1, r2
 802bab8:	f100 33ff 	add.w	r3, r0, #4294967295
 802babc:	d100      	bne.n	802bac0 <memcpy+0xc>
 802babe:	4770      	bx	lr
 802bac0:	b510      	push	{r4, lr}
 802bac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 802bac6:	4291      	cmp	r1, r2
 802bac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 802bacc:	d1f9      	bne.n	802bac2 <memcpy+0xe>
 802bace:	bd10      	pop	{r4, pc}

0802bad0 <register_fini>:
 802bad0:	4b02      	ldr	r3, [pc, #8]	; (802badc <register_fini+0xc>)
 802bad2:	b113      	cbz	r3, 802bada <register_fini+0xa>
 802bad4:	4802      	ldr	r0, [pc, #8]	; (802bae0 <register_fini+0x10>)
 802bad6:	f000 b805 	b.w	802bae4 <atexit>
 802bada:	4770      	bx	lr
 802badc:	00000000 	.word	0x00000000
 802bae0:	0802e715 	.word	0x0802e715

0802bae4 <atexit>:
 802bae4:	2300      	movs	r3, #0
 802bae6:	4601      	mov	r1, r0
 802bae8:	461a      	mov	r2, r3
 802baea:	4618      	mov	r0, r3
 802baec:	f002 be74 	b.w	802e7d8 <__register_exitproc>

0802baf0 <_malloc_trim_r>:
 802baf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802baf4:	4606      	mov	r6, r0
 802baf6:	2008      	movs	r0, #8
 802baf8:	460c      	mov	r4, r1
 802bafa:	f002 fe1f 	bl	802e73c <sysconf>
 802bafe:	4680      	mov	r8, r0
 802bb00:	4f22      	ldr	r7, [pc, #136]	; (802bb8c <_malloc_trim_r+0x9c>)
 802bb02:	4630      	mov	r0, r6
 802bb04:	f000 fb42 	bl	802c18c <__malloc_lock>
 802bb08:	68bb      	ldr	r3, [r7, #8]
 802bb0a:	685d      	ldr	r5, [r3, #4]
 802bb0c:	f025 0503 	bic.w	r5, r5, #3
 802bb10:	1b2c      	subs	r4, r5, r4
 802bb12:	3c11      	subs	r4, #17
 802bb14:	4444      	add	r4, r8
 802bb16:	fbb4 f4f8 	udiv	r4, r4, r8
 802bb1a:	3c01      	subs	r4, #1
 802bb1c:	fb08 f404 	mul.w	r4, r8, r4
 802bb20:	45a0      	cmp	r8, r4
 802bb22:	dd05      	ble.n	802bb30 <_malloc_trim_r+0x40>
 802bb24:	4630      	mov	r0, r6
 802bb26:	f000 fb37 	bl	802c198 <__malloc_unlock>
 802bb2a:	2000      	movs	r0, #0
 802bb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bb30:	2100      	movs	r1, #0
 802bb32:	4630      	mov	r0, r6
 802bb34:	f002 fdde 	bl	802e6f4 <_sbrk_r>
 802bb38:	68bb      	ldr	r3, [r7, #8]
 802bb3a:	442b      	add	r3, r5
 802bb3c:	4298      	cmp	r0, r3
 802bb3e:	d1f1      	bne.n	802bb24 <_malloc_trim_r+0x34>
 802bb40:	4630      	mov	r0, r6
 802bb42:	4261      	negs	r1, r4
 802bb44:	f002 fdd6 	bl	802e6f4 <_sbrk_r>
 802bb48:	3001      	adds	r0, #1
 802bb4a:	d110      	bne.n	802bb6e <_malloc_trim_r+0x7e>
 802bb4c:	2100      	movs	r1, #0
 802bb4e:	4630      	mov	r0, r6
 802bb50:	f002 fdd0 	bl	802e6f4 <_sbrk_r>
 802bb54:	68ba      	ldr	r2, [r7, #8]
 802bb56:	1a83      	subs	r3, r0, r2
 802bb58:	2b0f      	cmp	r3, #15
 802bb5a:	dde3      	ble.n	802bb24 <_malloc_trim_r+0x34>
 802bb5c:	490c      	ldr	r1, [pc, #48]	; (802bb90 <_malloc_trim_r+0xa0>)
 802bb5e:	f043 0301 	orr.w	r3, r3, #1
 802bb62:	6809      	ldr	r1, [r1, #0]
 802bb64:	6053      	str	r3, [r2, #4]
 802bb66:	1a40      	subs	r0, r0, r1
 802bb68:	490a      	ldr	r1, [pc, #40]	; (802bb94 <_malloc_trim_r+0xa4>)
 802bb6a:	6008      	str	r0, [r1, #0]
 802bb6c:	e7da      	b.n	802bb24 <_malloc_trim_r+0x34>
 802bb6e:	68bb      	ldr	r3, [r7, #8]
 802bb70:	4a08      	ldr	r2, [pc, #32]	; (802bb94 <_malloc_trim_r+0xa4>)
 802bb72:	1b2d      	subs	r5, r5, r4
 802bb74:	f045 0501 	orr.w	r5, r5, #1
 802bb78:	605d      	str	r5, [r3, #4]
 802bb7a:	6813      	ldr	r3, [r2, #0]
 802bb7c:	4630      	mov	r0, r6
 802bb7e:	1b1b      	subs	r3, r3, r4
 802bb80:	6013      	str	r3, [r2, #0]
 802bb82:	f000 fb09 	bl	802c198 <__malloc_unlock>
 802bb86:	2001      	movs	r0, #1
 802bb88:	e7d0      	b.n	802bb2c <_malloc_trim_r+0x3c>
 802bb8a:	bf00      	nop
 802bb8c:	20000340 	.word	0x20000340
 802bb90:	20000748 	.word	0x20000748
 802bb94:	20006b20 	.word	0x20006b20

0802bb98 <_free_r>:
 802bb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bb9a:	4605      	mov	r5, r0
 802bb9c:	460f      	mov	r7, r1
 802bb9e:	2900      	cmp	r1, #0
 802bba0:	f000 80b1 	beq.w	802bd06 <_free_r+0x16e>
 802bba4:	f000 faf2 	bl	802c18c <__malloc_lock>
 802bba8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802bbac:	4856      	ldr	r0, [pc, #344]	; (802bd08 <_free_r+0x170>)
 802bbae:	f022 0401 	bic.w	r4, r2, #1
 802bbb2:	f1a7 0308 	sub.w	r3, r7, #8
 802bbb6:	eb03 0c04 	add.w	ip, r3, r4
 802bbba:	6881      	ldr	r1, [r0, #8]
 802bbbc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802bbc0:	4561      	cmp	r1, ip
 802bbc2:	f026 0603 	bic.w	r6, r6, #3
 802bbc6:	f002 0201 	and.w	r2, r2, #1
 802bbca:	d11b      	bne.n	802bc04 <_free_r+0x6c>
 802bbcc:	4426      	add	r6, r4
 802bbce:	b93a      	cbnz	r2, 802bbe0 <_free_r+0x48>
 802bbd0:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802bbd4:	1a9b      	subs	r3, r3, r2
 802bbd6:	4416      	add	r6, r2
 802bbd8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802bbdc:	60ca      	str	r2, [r1, #12]
 802bbde:	6091      	str	r1, [r2, #8]
 802bbe0:	f046 0201 	orr.w	r2, r6, #1
 802bbe4:	605a      	str	r2, [r3, #4]
 802bbe6:	6083      	str	r3, [r0, #8]
 802bbe8:	4b48      	ldr	r3, [pc, #288]	; (802bd0c <_free_r+0x174>)
 802bbea:	681b      	ldr	r3, [r3, #0]
 802bbec:	42b3      	cmp	r3, r6
 802bbee:	d804      	bhi.n	802bbfa <_free_r+0x62>
 802bbf0:	4b47      	ldr	r3, [pc, #284]	; (802bd10 <_free_r+0x178>)
 802bbf2:	4628      	mov	r0, r5
 802bbf4:	6819      	ldr	r1, [r3, #0]
 802bbf6:	f7ff ff7b 	bl	802baf0 <_malloc_trim_r>
 802bbfa:	4628      	mov	r0, r5
 802bbfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802bc00:	f000 baca 	b.w	802c198 <__malloc_unlock>
 802bc04:	f8cc 6004 	str.w	r6, [ip, #4]
 802bc08:	2a00      	cmp	r2, #0
 802bc0a:	d138      	bne.n	802bc7e <_free_r+0xe6>
 802bc0c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802bc10:	f100 0708 	add.w	r7, r0, #8
 802bc14:	1a5b      	subs	r3, r3, r1
 802bc16:	440c      	add	r4, r1
 802bc18:	6899      	ldr	r1, [r3, #8]
 802bc1a:	42b9      	cmp	r1, r7
 802bc1c:	d031      	beq.n	802bc82 <_free_r+0xea>
 802bc1e:	68df      	ldr	r7, [r3, #12]
 802bc20:	60cf      	str	r7, [r1, #12]
 802bc22:	60b9      	str	r1, [r7, #8]
 802bc24:	eb0c 0106 	add.w	r1, ip, r6
 802bc28:	6849      	ldr	r1, [r1, #4]
 802bc2a:	07c9      	lsls	r1, r1, #31
 802bc2c:	d40b      	bmi.n	802bc46 <_free_r+0xae>
 802bc2e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802bc32:	4434      	add	r4, r6
 802bc34:	bb3a      	cbnz	r2, 802bc86 <_free_r+0xee>
 802bc36:	4e37      	ldr	r6, [pc, #220]	; (802bd14 <_free_r+0x17c>)
 802bc38:	42b1      	cmp	r1, r6
 802bc3a:	d124      	bne.n	802bc86 <_free_r+0xee>
 802bc3c:	2201      	movs	r2, #1
 802bc3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802bc42:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802bc46:	f044 0101 	orr.w	r1, r4, #1
 802bc4a:	6059      	str	r1, [r3, #4]
 802bc4c:	511c      	str	r4, [r3, r4]
 802bc4e:	2a00      	cmp	r2, #0
 802bc50:	d1d3      	bne.n	802bbfa <_free_r+0x62>
 802bc52:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 802bc56:	d21b      	bcs.n	802bc90 <_free_r+0xf8>
 802bc58:	2101      	movs	r1, #1
 802bc5a:	08e2      	lsrs	r2, r4, #3
 802bc5c:	0964      	lsrs	r4, r4, #5
 802bc5e:	40a1      	lsls	r1, r4
 802bc60:	6844      	ldr	r4, [r0, #4]
 802bc62:	3201      	adds	r2, #1
 802bc64:	4321      	orrs	r1, r4
 802bc66:	6041      	str	r1, [r0, #4]
 802bc68:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 802bc6c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 802bc70:	3908      	subs	r1, #8
 802bc72:	e9c3 4102 	strd	r4, r1, [r3, #8]
 802bc76:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 802bc7a:	60e3      	str	r3, [r4, #12]
 802bc7c:	e7bd      	b.n	802bbfa <_free_r+0x62>
 802bc7e:	2200      	movs	r2, #0
 802bc80:	e7d0      	b.n	802bc24 <_free_r+0x8c>
 802bc82:	2201      	movs	r2, #1
 802bc84:	e7ce      	b.n	802bc24 <_free_r+0x8c>
 802bc86:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802bc8a:	60ce      	str	r6, [r1, #12]
 802bc8c:	60b1      	str	r1, [r6, #8]
 802bc8e:	e7da      	b.n	802bc46 <_free_r+0xae>
 802bc90:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 802bc94:	ea4f 2254 	mov.w	r2, r4, lsr #9
 802bc98:	d214      	bcs.n	802bcc4 <_free_r+0x12c>
 802bc9a:	09a2      	lsrs	r2, r4, #6
 802bc9c:	3238      	adds	r2, #56	; 0x38
 802bc9e:	1c51      	adds	r1, r2, #1
 802bca0:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 802bca4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 802bca8:	428e      	cmp	r6, r1
 802bcaa:	d125      	bne.n	802bcf8 <_free_r+0x160>
 802bcac:	2401      	movs	r4, #1
 802bcae:	1092      	asrs	r2, r2, #2
 802bcb0:	fa04 f202 	lsl.w	r2, r4, r2
 802bcb4:	6844      	ldr	r4, [r0, #4]
 802bcb6:	4322      	orrs	r2, r4
 802bcb8:	6042      	str	r2, [r0, #4]
 802bcba:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802bcbe:	60b3      	str	r3, [r6, #8]
 802bcc0:	60cb      	str	r3, [r1, #12]
 802bcc2:	e79a      	b.n	802bbfa <_free_r+0x62>
 802bcc4:	2a14      	cmp	r2, #20
 802bcc6:	d801      	bhi.n	802bccc <_free_r+0x134>
 802bcc8:	325b      	adds	r2, #91	; 0x5b
 802bcca:	e7e8      	b.n	802bc9e <_free_r+0x106>
 802bccc:	2a54      	cmp	r2, #84	; 0x54
 802bcce:	d802      	bhi.n	802bcd6 <_free_r+0x13e>
 802bcd0:	0b22      	lsrs	r2, r4, #12
 802bcd2:	326e      	adds	r2, #110	; 0x6e
 802bcd4:	e7e3      	b.n	802bc9e <_free_r+0x106>
 802bcd6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 802bcda:	d802      	bhi.n	802bce2 <_free_r+0x14a>
 802bcdc:	0be2      	lsrs	r2, r4, #15
 802bcde:	3277      	adds	r2, #119	; 0x77
 802bce0:	e7dd      	b.n	802bc9e <_free_r+0x106>
 802bce2:	f240 5154 	movw	r1, #1364	; 0x554
 802bce6:	428a      	cmp	r2, r1
 802bce8:	bf96      	itet	ls
 802bcea:	0ca2      	lsrls	r2, r4, #18
 802bcec:	227e      	movhi	r2, #126	; 0x7e
 802bcee:	327c      	addls	r2, #124	; 0x7c
 802bcf0:	e7d5      	b.n	802bc9e <_free_r+0x106>
 802bcf2:	6889      	ldr	r1, [r1, #8]
 802bcf4:	428e      	cmp	r6, r1
 802bcf6:	d004      	beq.n	802bd02 <_free_r+0x16a>
 802bcf8:	684a      	ldr	r2, [r1, #4]
 802bcfa:	f022 0203 	bic.w	r2, r2, #3
 802bcfe:	42a2      	cmp	r2, r4
 802bd00:	d8f7      	bhi.n	802bcf2 <_free_r+0x15a>
 802bd02:	68ce      	ldr	r6, [r1, #12]
 802bd04:	e7d9      	b.n	802bcba <_free_r+0x122>
 802bd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bd08:	20000340 	.word	0x20000340
 802bd0c:	2000074c 	.word	0x2000074c
 802bd10:	20006b50 	.word	0x20006b50
 802bd14:	20000348 	.word	0x20000348

0802bd18 <_malloc_r>:
 802bd18:	f101 030b 	add.w	r3, r1, #11
 802bd1c:	2b16      	cmp	r3, #22
 802bd1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bd22:	4605      	mov	r5, r0
 802bd24:	d906      	bls.n	802bd34 <_malloc_r+0x1c>
 802bd26:	f033 0707 	bics.w	r7, r3, #7
 802bd2a:	d504      	bpl.n	802bd36 <_malloc_r+0x1e>
 802bd2c:	230c      	movs	r3, #12
 802bd2e:	602b      	str	r3, [r5, #0]
 802bd30:	2400      	movs	r4, #0
 802bd32:	e1a1      	b.n	802c078 <_malloc_r+0x360>
 802bd34:	2710      	movs	r7, #16
 802bd36:	42b9      	cmp	r1, r7
 802bd38:	d8f8      	bhi.n	802bd2c <_malloc_r+0x14>
 802bd3a:	4628      	mov	r0, r5
 802bd3c:	f000 fa26 	bl	802c18c <__malloc_lock>
 802bd40:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 802bd44:	4eae      	ldr	r6, [pc, #696]	; (802c000 <_malloc_r+0x2e8>)
 802bd46:	d237      	bcs.n	802bdb8 <_malloc_r+0xa0>
 802bd48:	f107 0208 	add.w	r2, r7, #8
 802bd4c:	4432      	add	r2, r6
 802bd4e:	6854      	ldr	r4, [r2, #4]
 802bd50:	f1a2 0108 	sub.w	r1, r2, #8
 802bd54:	428c      	cmp	r4, r1
 802bd56:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802bd5a:	d102      	bne.n	802bd62 <_malloc_r+0x4a>
 802bd5c:	68d4      	ldr	r4, [r2, #12]
 802bd5e:	42a2      	cmp	r2, r4
 802bd60:	d010      	beq.n	802bd84 <_malloc_r+0x6c>
 802bd62:	6863      	ldr	r3, [r4, #4]
 802bd64:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802bd68:	f023 0303 	bic.w	r3, r3, #3
 802bd6c:	60ca      	str	r2, [r1, #12]
 802bd6e:	4423      	add	r3, r4
 802bd70:	6091      	str	r1, [r2, #8]
 802bd72:	685a      	ldr	r2, [r3, #4]
 802bd74:	f042 0201 	orr.w	r2, r2, #1
 802bd78:	605a      	str	r2, [r3, #4]
 802bd7a:	4628      	mov	r0, r5
 802bd7c:	f000 fa0c 	bl	802c198 <__malloc_unlock>
 802bd80:	3408      	adds	r4, #8
 802bd82:	e179      	b.n	802c078 <_malloc_r+0x360>
 802bd84:	3302      	adds	r3, #2
 802bd86:	6934      	ldr	r4, [r6, #16]
 802bd88:	499e      	ldr	r1, [pc, #632]	; (802c004 <_malloc_r+0x2ec>)
 802bd8a:	428c      	cmp	r4, r1
 802bd8c:	d077      	beq.n	802be7e <_malloc_r+0x166>
 802bd8e:	6862      	ldr	r2, [r4, #4]
 802bd90:	f022 0c03 	bic.w	ip, r2, #3
 802bd94:	ebac 0007 	sub.w	r0, ip, r7
 802bd98:	280f      	cmp	r0, #15
 802bd9a:	dd48      	ble.n	802be2e <_malloc_r+0x116>
 802bd9c:	19e2      	adds	r2, r4, r7
 802bd9e:	f040 0301 	orr.w	r3, r0, #1
 802bda2:	f047 0701 	orr.w	r7, r7, #1
 802bda6:	6067      	str	r7, [r4, #4]
 802bda8:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802bdac:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802bdb0:	6053      	str	r3, [r2, #4]
 802bdb2:	f844 000c 	str.w	r0, [r4, ip]
 802bdb6:	e7e0      	b.n	802bd7a <_malloc_r+0x62>
 802bdb8:	0a7b      	lsrs	r3, r7, #9
 802bdba:	d02a      	beq.n	802be12 <_malloc_r+0xfa>
 802bdbc:	2b04      	cmp	r3, #4
 802bdbe:	d812      	bhi.n	802bde6 <_malloc_r+0xce>
 802bdc0:	09bb      	lsrs	r3, r7, #6
 802bdc2:	3338      	adds	r3, #56	; 0x38
 802bdc4:	1c5a      	adds	r2, r3, #1
 802bdc6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802bdca:	6854      	ldr	r4, [r2, #4]
 802bdcc:	f1a2 0c08 	sub.w	ip, r2, #8
 802bdd0:	4564      	cmp	r4, ip
 802bdd2:	d006      	beq.n	802bde2 <_malloc_r+0xca>
 802bdd4:	6862      	ldr	r2, [r4, #4]
 802bdd6:	f022 0203 	bic.w	r2, r2, #3
 802bdda:	1bd0      	subs	r0, r2, r7
 802bddc:	280f      	cmp	r0, #15
 802bdde:	dd1c      	ble.n	802be1a <_malloc_r+0x102>
 802bde0:	3b01      	subs	r3, #1
 802bde2:	3301      	adds	r3, #1
 802bde4:	e7cf      	b.n	802bd86 <_malloc_r+0x6e>
 802bde6:	2b14      	cmp	r3, #20
 802bde8:	d801      	bhi.n	802bdee <_malloc_r+0xd6>
 802bdea:	335b      	adds	r3, #91	; 0x5b
 802bdec:	e7ea      	b.n	802bdc4 <_malloc_r+0xac>
 802bdee:	2b54      	cmp	r3, #84	; 0x54
 802bdf0:	d802      	bhi.n	802bdf8 <_malloc_r+0xe0>
 802bdf2:	0b3b      	lsrs	r3, r7, #12
 802bdf4:	336e      	adds	r3, #110	; 0x6e
 802bdf6:	e7e5      	b.n	802bdc4 <_malloc_r+0xac>
 802bdf8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 802bdfc:	d802      	bhi.n	802be04 <_malloc_r+0xec>
 802bdfe:	0bfb      	lsrs	r3, r7, #15
 802be00:	3377      	adds	r3, #119	; 0x77
 802be02:	e7df      	b.n	802bdc4 <_malloc_r+0xac>
 802be04:	f240 5254 	movw	r2, #1364	; 0x554
 802be08:	4293      	cmp	r3, r2
 802be0a:	d804      	bhi.n	802be16 <_malloc_r+0xfe>
 802be0c:	0cbb      	lsrs	r3, r7, #18
 802be0e:	337c      	adds	r3, #124	; 0x7c
 802be10:	e7d8      	b.n	802bdc4 <_malloc_r+0xac>
 802be12:	233f      	movs	r3, #63	; 0x3f
 802be14:	e7d6      	b.n	802bdc4 <_malloc_r+0xac>
 802be16:	237e      	movs	r3, #126	; 0x7e
 802be18:	e7d4      	b.n	802bdc4 <_malloc_r+0xac>
 802be1a:	2800      	cmp	r0, #0
 802be1c:	68e1      	ldr	r1, [r4, #12]
 802be1e:	db04      	blt.n	802be2a <_malloc_r+0x112>
 802be20:	68a3      	ldr	r3, [r4, #8]
 802be22:	60d9      	str	r1, [r3, #12]
 802be24:	608b      	str	r3, [r1, #8]
 802be26:	18a3      	adds	r3, r4, r2
 802be28:	e7a3      	b.n	802bd72 <_malloc_r+0x5a>
 802be2a:	460c      	mov	r4, r1
 802be2c:	e7d0      	b.n	802bdd0 <_malloc_r+0xb8>
 802be2e:	2800      	cmp	r0, #0
 802be30:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802be34:	db07      	blt.n	802be46 <_malloc_r+0x12e>
 802be36:	44a4      	add	ip, r4
 802be38:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802be3c:	f043 0301 	orr.w	r3, r3, #1
 802be40:	f8cc 3004 	str.w	r3, [ip, #4]
 802be44:	e799      	b.n	802bd7a <_malloc_r+0x62>
 802be46:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 802be4a:	6870      	ldr	r0, [r6, #4]
 802be4c:	f080 8093 	bcs.w	802bf76 <_malloc_r+0x25e>
 802be50:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802be54:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802be58:	f04f 0c01 	mov.w	ip, #1
 802be5c:	fa0c fc0e 	lsl.w	ip, ip, lr
 802be60:	ea4c 0000 	orr.w	r0, ip, r0
 802be64:	3201      	adds	r2, #1
 802be66:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802be6a:	6070      	str	r0, [r6, #4]
 802be6c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802be70:	3808      	subs	r0, #8
 802be72:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802be76:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802be7a:	f8cc 400c 	str.w	r4, [ip, #12]
 802be7e:	2201      	movs	r2, #1
 802be80:	1098      	asrs	r0, r3, #2
 802be82:	4082      	lsls	r2, r0
 802be84:	6870      	ldr	r0, [r6, #4]
 802be86:	4290      	cmp	r0, r2
 802be88:	d326      	bcc.n	802bed8 <_malloc_r+0x1c0>
 802be8a:	4210      	tst	r0, r2
 802be8c:	d106      	bne.n	802be9c <_malloc_r+0x184>
 802be8e:	f023 0303 	bic.w	r3, r3, #3
 802be92:	0052      	lsls	r2, r2, #1
 802be94:	4210      	tst	r0, r2
 802be96:	f103 0304 	add.w	r3, r3, #4
 802be9a:	d0fa      	beq.n	802be92 <_malloc_r+0x17a>
 802be9c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802bea0:	46c1      	mov	r9, r8
 802bea2:	469e      	mov	lr, r3
 802bea4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802bea8:	454c      	cmp	r4, r9
 802beaa:	f040 80b7 	bne.w	802c01c <_malloc_r+0x304>
 802beae:	f10e 0e01 	add.w	lr, lr, #1
 802beb2:	f01e 0f03 	tst.w	lr, #3
 802beb6:	f109 0908 	add.w	r9, r9, #8
 802beba:	d1f3      	bne.n	802bea4 <_malloc_r+0x18c>
 802bebc:	0798      	lsls	r0, r3, #30
 802bebe:	f040 80e1 	bne.w	802c084 <_malloc_r+0x36c>
 802bec2:	6873      	ldr	r3, [r6, #4]
 802bec4:	ea23 0302 	bic.w	r3, r3, r2
 802bec8:	6073      	str	r3, [r6, #4]
 802beca:	6870      	ldr	r0, [r6, #4]
 802becc:	0052      	lsls	r2, r2, #1
 802bece:	4290      	cmp	r0, r2
 802bed0:	d302      	bcc.n	802bed8 <_malloc_r+0x1c0>
 802bed2:	2a00      	cmp	r2, #0
 802bed4:	f040 80e2 	bne.w	802c09c <_malloc_r+0x384>
 802bed8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802bedc:	f8da 3004 	ldr.w	r3, [sl, #4]
 802bee0:	f023 0903 	bic.w	r9, r3, #3
 802bee4:	45b9      	cmp	r9, r7
 802bee6:	d304      	bcc.n	802bef2 <_malloc_r+0x1da>
 802bee8:	eba9 0207 	sub.w	r2, r9, r7
 802beec:	2a0f      	cmp	r2, #15
 802beee:	f300 8140 	bgt.w	802c172 <_malloc_r+0x45a>
 802bef2:	4b45      	ldr	r3, [pc, #276]	; (802c008 <_malloc_r+0x2f0>)
 802bef4:	2008      	movs	r0, #8
 802bef6:	6819      	ldr	r1, [r3, #0]
 802bef8:	eb0a 0b09 	add.w	fp, sl, r9
 802befc:	3110      	adds	r1, #16
 802befe:	4439      	add	r1, r7
 802bf00:	9101      	str	r1, [sp, #4]
 802bf02:	f002 fc1b 	bl	802e73c <sysconf>
 802bf06:	4a41      	ldr	r2, [pc, #260]	; (802c00c <_malloc_r+0x2f4>)
 802bf08:	9901      	ldr	r1, [sp, #4]
 802bf0a:	6813      	ldr	r3, [r2, #0]
 802bf0c:	4680      	mov	r8, r0
 802bf0e:	3301      	adds	r3, #1
 802bf10:	bf1f      	itttt	ne
 802bf12:	f101 31ff 	addne.w	r1, r1, #4294967295
 802bf16:	1809      	addne	r1, r1, r0
 802bf18:	4243      	negne	r3, r0
 802bf1a:	4019      	andne	r1, r3
 802bf1c:	4628      	mov	r0, r5
 802bf1e:	9101      	str	r1, [sp, #4]
 802bf20:	f002 fbe8 	bl	802e6f4 <_sbrk_r>
 802bf24:	1c42      	adds	r2, r0, #1
 802bf26:	4604      	mov	r4, r0
 802bf28:	f000 80f6 	beq.w	802c118 <_malloc_r+0x400>
 802bf2c:	4583      	cmp	fp, r0
 802bf2e:	9901      	ldr	r1, [sp, #4]
 802bf30:	4a36      	ldr	r2, [pc, #216]	; (802c00c <_malloc_r+0x2f4>)
 802bf32:	d902      	bls.n	802bf3a <_malloc_r+0x222>
 802bf34:	45b2      	cmp	sl, r6
 802bf36:	f040 80ef 	bne.w	802c118 <_malloc_r+0x400>
 802bf3a:	4b35      	ldr	r3, [pc, #212]	; (802c010 <_malloc_r+0x2f8>)
 802bf3c:	45a3      	cmp	fp, r4
 802bf3e:	6818      	ldr	r0, [r3, #0]
 802bf40:	f108 3cff 	add.w	ip, r8, #4294967295
 802bf44:	4408      	add	r0, r1
 802bf46:	6018      	str	r0, [r3, #0]
 802bf48:	f040 80aa 	bne.w	802c0a0 <_malloc_r+0x388>
 802bf4c:	ea1b 0f0c 	tst.w	fp, ip
 802bf50:	f040 80a6 	bne.w	802c0a0 <_malloc_r+0x388>
 802bf54:	68b2      	ldr	r2, [r6, #8]
 802bf56:	4449      	add	r1, r9
 802bf58:	f041 0101 	orr.w	r1, r1, #1
 802bf5c:	6051      	str	r1, [r2, #4]
 802bf5e:	4a2d      	ldr	r2, [pc, #180]	; (802c014 <_malloc_r+0x2fc>)
 802bf60:	681b      	ldr	r3, [r3, #0]
 802bf62:	6811      	ldr	r1, [r2, #0]
 802bf64:	428b      	cmp	r3, r1
 802bf66:	bf88      	it	hi
 802bf68:	6013      	strhi	r3, [r2, #0]
 802bf6a:	4a2b      	ldr	r2, [pc, #172]	; (802c018 <_malloc_r+0x300>)
 802bf6c:	6811      	ldr	r1, [r2, #0]
 802bf6e:	428b      	cmp	r3, r1
 802bf70:	bf88      	it	hi
 802bf72:	6013      	strhi	r3, [r2, #0]
 802bf74:	e0d0      	b.n	802c118 <_malloc_r+0x400>
 802bf76:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 802bf7a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802bf7e:	d218      	bcs.n	802bfb2 <_malloc_r+0x29a>
 802bf80:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802bf84:	3238      	adds	r2, #56	; 0x38
 802bf86:	f102 0e01 	add.w	lr, r2, #1
 802bf8a:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802bf8e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802bf92:	45f0      	cmp	r8, lr
 802bf94:	d12b      	bne.n	802bfee <_malloc_r+0x2d6>
 802bf96:	f04f 0c01 	mov.w	ip, #1
 802bf9a:	1092      	asrs	r2, r2, #2
 802bf9c:	fa0c f202 	lsl.w	r2, ip, r2
 802bfa0:	4302      	orrs	r2, r0
 802bfa2:	6072      	str	r2, [r6, #4]
 802bfa4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802bfa8:	f8c8 4008 	str.w	r4, [r8, #8]
 802bfac:	f8ce 400c 	str.w	r4, [lr, #12]
 802bfb0:	e765      	b.n	802be7e <_malloc_r+0x166>
 802bfb2:	2a14      	cmp	r2, #20
 802bfb4:	d801      	bhi.n	802bfba <_malloc_r+0x2a2>
 802bfb6:	325b      	adds	r2, #91	; 0x5b
 802bfb8:	e7e5      	b.n	802bf86 <_malloc_r+0x26e>
 802bfba:	2a54      	cmp	r2, #84	; 0x54
 802bfbc:	d803      	bhi.n	802bfc6 <_malloc_r+0x2ae>
 802bfbe:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802bfc2:	326e      	adds	r2, #110	; 0x6e
 802bfc4:	e7df      	b.n	802bf86 <_malloc_r+0x26e>
 802bfc6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 802bfca:	d803      	bhi.n	802bfd4 <_malloc_r+0x2bc>
 802bfcc:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802bfd0:	3277      	adds	r2, #119	; 0x77
 802bfd2:	e7d8      	b.n	802bf86 <_malloc_r+0x26e>
 802bfd4:	f240 5e54 	movw	lr, #1364	; 0x554
 802bfd8:	4572      	cmp	r2, lr
 802bfda:	bf96      	itet	ls
 802bfdc:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802bfe0:	227e      	movhi	r2, #126	; 0x7e
 802bfe2:	327c      	addls	r2, #124	; 0x7c
 802bfe4:	e7cf      	b.n	802bf86 <_malloc_r+0x26e>
 802bfe6:	f8de e008 	ldr.w	lr, [lr, #8]
 802bfea:	45f0      	cmp	r8, lr
 802bfec:	d005      	beq.n	802bffa <_malloc_r+0x2e2>
 802bfee:	f8de 2004 	ldr.w	r2, [lr, #4]
 802bff2:	f022 0203 	bic.w	r2, r2, #3
 802bff6:	4562      	cmp	r2, ip
 802bff8:	d8f5      	bhi.n	802bfe6 <_malloc_r+0x2ce>
 802bffa:	f8de 800c 	ldr.w	r8, [lr, #12]
 802bffe:	e7d1      	b.n	802bfa4 <_malloc_r+0x28c>
 802c000:	20000340 	.word	0x20000340
 802c004:	20000348 	.word	0x20000348
 802c008:	20006b50 	.word	0x20006b50
 802c00c:	20000748 	.word	0x20000748
 802c010:	20006b20 	.word	0x20006b20
 802c014:	20006b48 	.word	0x20006b48
 802c018:	20006b4c 	.word	0x20006b4c
 802c01c:	6860      	ldr	r0, [r4, #4]
 802c01e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802c022:	f020 0003 	bic.w	r0, r0, #3
 802c026:	eba0 0a07 	sub.w	sl, r0, r7
 802c02a:	f1ba 0f0f 	cmp.w	sl, #15
 802c02e:	dd12      	ble.n	802c056 <_malloc_r+0x33e>
 802c030:	68a3      	ldr	r3, [r4, #8]
 802c032:	19e2      	adds	r2, r4, r7
 802c034:	f047 0701 	orr.w	r7, r7, #1
 802c038:	6067      	str	r7, [r4, #4]
 802c03a:	f8c3 c00c 	str.w	ip, [r3, #12]
 802c03e:	f8cc 3008 	str.w	r3, [ip, #8]
 802c042:	f04a 0301 	orr.w	r3, sl, #1
 802c046:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802c04a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802c04e:	6053      	str	r3, [r2, #4]
 802c050:	f844 a000 	str.w	sl, [r4, r0]
 802c054:	e691      	b.n	802bd7a <_malloc_r+0x62>
 802c056:	f1ba 0f00 	cmp.w	sl, #0
 802c05a:	db11      	blt.n	802c080 <_malloc_r+0x368>
 802c05c:	4420      	add	r0, r4
 802c05e:	6843      	ldr	r3, [r0, #4]
 802c060:	f043 0301 	orr.w	r3, r3, #1
 802c064:	6043      	str	r3, [r0, #4]
 802c066:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802c06a:	4628      	mov	r0, r5
 802c06c:	f8c3 c00c 	str.w	ip, [r3, #12]
 802c070:	f8cc 3008 	str.w	r3, [ip, #8]
 802c074:	f000 f890 	bl	802c198 <__malloc_unlock>
 802c078:	4620      	mov	r0, r4
 802c07a:	b003      	add	sp, #12
 802c07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c080:	4664      	mov	r4, ip
 802c082:	e711      	b.n	802bea8 <_malloc_r+0x190>
 802c084:	f858 0908 	ldr.w	r0, [r8], #-8
 802c088:	3b01      	subs	r3, #1
 802c08a:	4540      	cmp	r0, r8
 802c08c:	f43f af16 	beq.w	802bebc <_malloc_r+0x1a4>
 802c090:	e71b      	b.n	802beca <_malloc_r+0x1b2>
 802c092:	3304      	adds	r3, #4
 802c094:	0052      	lsls	r2, r2, #1
 802c096:	4210      	tst	r0, r2
 802c098:	d0fb      	beq.n	802c092 <_malloc_r+0x37a>
 802c09a:	e6ff      	b.n	802be9c <_malloc_r+0x184>
 802c09c:	4673      	mov	r3, lr
 802c09e:	e7fa      	b.n	802c096 <_malloc_r+0x37e>
 802c0a0:	f8d2 e000 	ldr.w	lr, [r2]
 802c0a4:	f1be 3fff 	cmp.w	lr, #4294967295
 802c0a8:	bf1b      	ittet	ne
 802c0aa:	eba4 0b0b 	subne.w	fp, r4, fp
 802c0ae:	eb0b 0200 	addne.w	r2, fp, r0
 802c0b2:	6014      	streq	r4, [r2, #0]
 802c0b4:	601a      	strne	r2, [r3, #0]
 802c0b6:	f014 0b07 	ands.w	fp, r4, #7
 802c0ba:	bf0e      	itee	eq
 802c0bc:	4658      	moveq	r0, fp
 802c0be:	f1cb 0008 	rsbne	r0, fp, #8
 802c0c2:	1824      	addne	r4, r4, r0
 802c0c4:	1862      	adds	r2, r4, r1
 802c0c6:	ea02 010c 	and.w	r1, r2, ip
 802c0ca:	4480      	add	r8, r0
 802c0cc:	eba8 0801 	sub.w	r8, r8, r1
 802c0d0:	ea08 080c 	and.w	r8, r8, ip
 802c0d4:	4641      	mov	r1, r8
 802c0d6:	4628      	mov	r0, r5
 802c0d8:	9201      	str	r2, [sp, #4]
 802c0da:	f002 fb0b 	bl	802e6f4 <_sbrk_r>
 802c0de:	1c43      	adds	r3, r0, #1
 802c0e0:	9a01      	ldr	r2, [sp, #4]
 802c0e2:	4b29      	ldr	r3, [pc, #164]	; (802c188 <_malloc_r+0x470>)
 802c0e4:	d107      	bne.n	802c0f6 <_malloc_r+0x3de>
 802c0e6:	f1bb 0f00 	cmp.w	fp, #0
 802c0ea:	d023      	beq.n	802c134 <_malloc_r+0x41c>
 802c0ec:	f04f 0800 	mov.w	r8, #0
 802c0f0:	f1ab 0008 	sub.w	r0, fp, #8
 802c0f4:	4410      	add	r0, r2
 802c0f6:	681a      	ldr	r2, [r3, #0]
 802c0f8:	1b00      	subs	r0, r0, r4
 802c0fa:	4440      	add	r0, r8
 802c0fc:	4442      	add	r2, r8
 802c0fe:	f040 0001 	orr.w	r0, r0, #1
 802c102:	45b2      	cmp	sl, r6
 802c104:	60b4      	str	r4, [r6, #8]
 802c106:	601a      	str	r2, [r3, #0]
 802c108:	6060      	str	r0, [r4, #4]
 802c10a:	f43f af28 	beq.w	802bf5e <_malloc_r+0x246>
 802c10e:	f1b9 0f0f 	cmp.w	r9, #15
 802c112:	d812      	bhi.n	802c13a <_malloc_r+0x422>
 802c114:	2301      	movs	r3, #1
 802c116:	6063      	str	r3, [r4, #4]
 802c118:	68b3      	ldr	r3, [r6, #8]
 802c11a:	685b      	ldr	r3, [r3, #4]
 802c11c:	f023 0303 	bic.w	r3, r3, #3
 802c120:	42bb      	cmp	r3, r7
 802c122:	eba3 0207 	sub.w	r2, r3, r7
 802c126:	d301      	bcc.n	802c12c <_malloc_r+0x414>
 802c128:	2a0f      	cmp	r2, #15
 802c12a:	dc22      	bgt.n	802c172 <_malloc_r+0x45a>
 802c12c:	4628      	mov	r0, r5
 802c12e:	f000 f833 	bl	802c198 <__malloc_unlock>
 802c132:	e5fd      	b.n	802bd30 <_malloc_r+0x18>
 802c134:	4610      	mov	r0, r2
 802c136:	46d8      	mov	r8, fp
 802c138:	e7dd      	b.n	802c0f6 <_malloc_r+0x3de>
 802c13a:	2105      	movs	r1, #5
 802c13c:	f8da 2004 	ldr.w	r2, [sl, #4]
 802c140:	f1a9 090c 	sub.w	r9, r9, #12
 802c144:	f029 0907 	bic.w	r9, r9, #7
 802c148:	f002 0201 	and.w	r2, r2, #1
 802c14c:	ea42 0209 	orr.w	r2, r2, r9
 802c150:	f8ca 2004 	str.w	r2, [sl, #4]
 802c154:	f1b9 0f0f 	cmp.w	r9, #15
 802c158:	eb0a 0209 	add.w	r2, sl, r9
 802c15c:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802c160:	f67f aefd 	bls.w	802bf5e <_malloc_r+0x246>
 802c164:	4628      	mov	r0, r5
 802c166:	f10a 0108 	add.w	r1, sl, #8
 802c16a:	f7ff fd15 	bl	802bb98 <_free_r>
 802c16e:	4b06      	ldr	r3, [pc, #24]	; (802c188 <_malloc_r+0x470>)
 802c170:	e6f5      	b.n	802bf5e <_malloc_r+0x246>
 802c172:	68b4      	ldr	r4, [r6, #8]
 802c174:	f047 0301 	orr.w	r3, r7, #1
 802c178:	f042 0201 	orr.w	r2, r2, #1
 802c17c:	4427      	add	r7, r4
 802c17e:	6063      	str	r3, [r4, #4]
 802c180:	60b7      	str	r7, [r6, #8]
 802c182:	607a      	str	r2, [r7, #4]
 802c184:	e5f9      	b.n	802bd7a <_malloc_r+0x62>
 802c186:	bf00      	nop
 802c188:	20006b20 	.word	0x20006b20

0802c18c <__malloc_lock>:
 802c18c:	4801      	ldr	r0, [pc, #4]	; (802c194 <__malloc_lock+0x8>)
 802c18e:	f7ff bc8f 	b.w	802bab0 <__retarget_lock_acquire_recursive>
 802c192:	bf00      	nop
 802c194:	20006b19 	.word	0x20006b19

0802c198 <__malloc_unlock>:
 802c198:	4801      	ldr	r0, [pc, #4]	; (802c1a0 <__malloc_unlock+0x8>)
 802c19a:	f7ff bc8a 	b.w	802bab2 <__retarget_lock_release_recursive>
 802c19e:	bf00      	nop
 802c1a0:	20006b19 	.word	0x20006b19

0802c1a4 <_vfprintf_r>:
 802c1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c1a8:	b0d3      	sub	sp, #332	; 0x14c
 802c1aa:	468a      	mov	sl, r1
 802c1ac:	4691      	mov	r9, r2
 802c1ae:	461c      	mov	r4, r3
 802c1b0:	461d      	mov	r5, r3
 802c1b2:	4683      	mov	fp, r0
 802c1b4:	f002 fa9a 	bl	802e6ec <_localeconv_r>
 802c1b8:	6803      	ldr	r3, [r0, #0]
 802c1ba:	4618      	mov	r0, r3
 802c1bc:	9317      	str	r3, [sp, #92]	; 0x5c
 802c1be:	f7f6 f833 	bl	8022228 <strlen>
 802c1c2:	900f      	str	r0, [sp, #60]	; 0x3c
 802c1c4:	f1bb 0f00 	cmp.w	fp, #0
 802c1c8:	d005      	beq.n	802c1d6 <_vfprintf_r+0x32>
 802c1ca:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 802c1ce:	b913      	cbnz	r3, 802c1d6 <_vfprintf_r+0x32>
 802c1d0:	4658      	mov	r0, fp
 802c1d2:	f7ff fb19 	bl	802b808 <__sinit>
 802c1d6:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 802c1da:	07d8      	lsls	r0, r3, #31
 802c1dc:	d407      	bmi.n	802c1ee <_vfprintf_r+0x4a>
 802c1de:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 802c1e2:	0599      	lsls	r1, r3, #22
 802c1e4:	d403      	bmi.n	802c1ee <_vfprintf_r+0x4a>
 802c1e6:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 802c1ea:	f7ff fc61 	bl	802bab0 <__retarget_lock_acquire_recursive>
 802c1ee:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 802c1f2:	049a      	lsls	r2, r3, #18
 802c1f4:	d409      	bmi.n	802c20a <_vfprintf_r+0x66>
 802c1f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802c1fa:	f8aa 300c 	strh.w	r3, [sl, #12]
 802c1fe:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 802c202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802c206:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 802c20a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 802c20e:	071b      	lsls	r3, r3, #28
 802c210:	d502      	bpl.n	802c218 <_vfprintf_r+0x74>
 802c212:	f8da 3010 	ldr.w	r3, [sl, #16]
 802c216:	b9c3      	cbnz	r3, 802c24a <_vfprintf_r+0xa6>
 802c218:	4651      	mov	r1, sl
 802c21a:	4658      	mov	r0, fp
 802c21c:	f002 f970 	bl	802e500 <__swsetup_r>
 802c220:	b198      	cbz	r0, 802c24a <_vfprintf_r+0xa6>
 802c222:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 802c226:	07df      	lsls	r7, r3, #31
 802c228:	d506      	bpl.n	802c238 <_vfprintf_r+0x94>
 802c22a:	f04f 33ff 	mov.w	r3, #4294967295
 802c22e:	9312      	str	r3, [sp, #72]	; 0x48
 802c230:	9812      	ldr	r0, [sp, #72]	; 0x48
 802c232:	b053      	add	sp, #332	; 0x14c
 802c234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c238:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 802c23c:	059e      	lsls	r6, r3, #22
 802c23e:	d4f4      	bmi.n	802c22a <_vfprintf_r+0x86>
 802c240:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 802c244:	f7ff fc35 	bl	802bab2 <__retarget_lock_release_recursive>
 802c248:	e7ef      	b.n	802c22a <_vfprintf_r+0x86>
 802c24a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 802c24e:	f003 021a 	and.w	r2, r3, #26
 802c252:	2a0a      	cmp	r2, #10
 802c254:	d116      	bne.n	802c284 <_vfprintf_r+0xe0>
 802c256:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 802c25a:	2a00      	cmp	r2, #0
 802c25c:	db12      	blt.n	802c284 <_vfprintf_r+0xe0>
 802c25e:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 802c262:	07d5      	lsls	r5, r2, #31
 802c264:	d405      	bmi.n	802c272 <_vfprintf_r+0xce>
 802c266:	0598      	lsls	r0, r3, #22
 802c268:	d403      	bmi.n	802c272 <_vfprintf_r+0xce>
 802c26a:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 802c26e:	f7ff fc20 	bl	802bab2 <__retarget_lock_release_recursive>
 802c272:	4623      	mov	r3, r4
 802c274:	464a      	mov	r2, r9
 802c276:	4651      	mov	r1, sl
 802c278:	4658      	mov	r0, fp
 802c27a:	b053      	add	sp, #332	; 0x14c
 802c27c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c280:	f001 b9ac 	b.w	802d5dc <__sbprintf>
 802c284:	2300      	movs	r3, #0
 802c286:	2200      	movs	r2, #0
 802c288:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 802c28c:	9309      	str	r3, [sp, #36]	; 0x24
 802c28e:	2300      	movs	r3, #0
 802c290:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 802c294:	2300      	movs	r3, #0
 802c296:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 802c29a:	ac29      	add	r4, sp, #164	; 0xa4
 802c29c:	9426      	str	r4, [sp, #152]	; 0x98
 802c29e:	930d      	str	r3, [sp, #52]	; 0x34
 802c2a0:	9315      	str	r3, [sp, #84]	; 0x54
 802c2a2:	9318      	str	r3, [sp, #96]	; 0x60
 802c2a4:	9312      	str	r3, [sp, #72]	; 0x48
 802c2a6:	464b      	mov	r3, r9
 802c2a8:	461e      	mov	r6, r3
 802c2aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c2ae:	b10a      	cbz	r2, 802c2b4 <_vfprintf_r+0x110>
 802c2b0:	2a25      	cmp	r2, #37	; 0x25
 802c2b2:	d1f9      	bne.n	802c2a8 <_vfprintf_r+0x104>
 802c2b4:	ebb6 0709 	subs.w	r7, r6, r9
 802c2b8:	d00d      	beq.n	802c2d6 <_vfprintf_r+0x132>
 802c2ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802c2bc:	e9c4 9700 	strd	r9, r7, [r4]
 802c2c0:	443b      	add	r3, r7
 802c2c2:	9328      	str	r3, [sp, #160]	; 0xa0
 802c2c4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802c2c6:	3301      	adds	r3, #1
 802c2c8:	2b07      	cmp	r3, #7
 802c2ca:	9327      	str	r3, [sp, #156]	; 0x9c
 802c2cc:	dc79      	bgt.n	802c3c2 <_vfprintf_r+0x21e>
 802c2ce:	3408      	adds	r4, #8
 802c2d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802c2d2:	443b      	add	r3, r7
 802c2d4:	9312      	str	r3, [sp, #72]	; 0x48
 802c2d6:	7833      	ldrb	r3, [r6, #0]
 802c2d8:	2b00      	cmp	r3, #0
 802c2da:	f001 8139 	beq.w	802d550 <_vfprintf_r+0x13ac>
 802c2de:	2300      	movs	r3, #0
 802c2e0:	f04f 32ff 	mov.w	r2, #4294967295
 802c2e4:	4698      	mov	r8, r3
 802c2e6:	270a      	movs	r7, #10
 802c2e8:	212b      	movs	r1, #43	; 0x2b
 802c2ea:	3601      	adds	r6, #1
 802c2ec:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 802c2f0:	9207      	str	r2, [sp, #28]
 802c2f2:	9313      	str	r3, [sp, #76]	; 0x4c
 802c2f4:	4633      	mov	r3, r6
 802c2f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c2fa:	920b      	str	r2, [sp, #44]	; 0x2c
 802c2fc:	930e      	str	r3, [sp, #56]	; 0x38
 802c2fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c300:	3b20      	subs	r3, #32
 802c302:	2b5a      	cmp	r3, #90	; 0x5a
 802c304:	f200 85ae 	bhi.w	802ce64 <_vfprintf_r+0xcc0>
 802c308:	e8df f013 	tbh	[pc, r3, lsl #1]
 802c30c:	05ac007e 	.word	0x05ac007e
 802c310:	008605ac 	.word	0x008605ac
 802c314:	05ac05ac 	.word	0x05ac05ac
 802c318:	006505ac 	.word	0x006505ac
 802c31c:	05ac05ac 	.word	0x05ac05ac
 802c320:	00930089 	.word	0x00930089
 802c324:	009005ac 	.word	0x009005ac
 802c328:	05ac0096 	.word	0x05ac0096
 802c32c:	00b500b2 	.word	0x00b500b2
 802c330:	00b500b5 	.word	0x00b500b5
 802c334:	00b500b5 	.word	0x00b500b5
 802c338:	00b500b5 	.word	0x00b500b5
 802c33c:	00b500b5 	.word	0x00b500b5
 802c340:	05ac05ac 	.word	0x05ac05ac
 802c344:	05ac05ac 	.word	0x05ac05ac
 802c348:	05ac05ac 	.word	0x05ac05ac
 802c34c:	012405ac 	.word	0x012405ac
 802c350:	00e205ac 	.word	0x00e205ac
 802c354:	012400f5 	.word	0x012400f5
 802c358:	01240124 	.word	0x01240124
 802c35c:	05ac05ac 	.word	0x05ac05ac
 802c360:	05ac05ac 	.word	0x05ac05ac
 802c364:	05ac00c5 	.word	0x05ac00c5
 802c368:	048b05ac 	.word	0x048b05ac
 802c36c:	05ac05ac 	.word	0x05ac05ac
 802c370:	04d505ac 	.word	0x04d505ac
 802c374:	04f605ac 	.word	0x04f605ac
 802c378:	05ac05ac 	.word	0x05ac05ac
 802c37c:	05ac0518 	.word	0x05ac0518
 802c380:	05ac05ac 	.word	0x05ac05ac
 802c384:	05ac05ac 	.word	0x05ac05ac
 802c388:	05ac05ac 	.word	0x05ac05ac
 802c38c:	012405ac 	.word	0x012405ac
 802c390:	00e205ac 	.word	0x00e205ac
 802c394:	012400f7 	.word	0x012400f7
 802c398:	01240124 	.word	0x01240124
 802c39c:	00f700c8 	.word	0x00f700c8
 802c3a0:	05ac00dc 	.word	0x05ac00dc
 802c3a4:	05ac00d5 	.word	0x05ac00d5
 802c3a8:	048d0466 	.word	0x048d0466
 802c3ac:	00dc04c4 	.word	0x00dc04c4
 802c3b0:	04d505ac 	.word	0x04d505ac
 802c3b4:	04f8007c 	.word	0x04f8007c
 802c3b8:	05ac05ac 	.word	0x05ac05ac
 802c3bc:	05ac0537 	.word	0x05ac0537
 802c3c0:	007c      	.short	0x007c
 802c3c2:	4651      	mov	r1, sl
 802c3c4:	4658      	mov	r0, fp
 802c3c6:	aa26      	add	r2, sp, #152	; 0x98
 802c3c8:	f001 f948 	bl	802d65c <__sprint_r>
 802c3cc:	2800      	cmp	r0, #0
 802c3ce:	f040 812d 	bne.w	802c62c <_vfprintf_r+0x488>
 802c3d2:	ac29      	add	r4, sp, #164	; 0xa4
 802c3d4:	e77c      	b.n	802c2d0 <_vfprintf_r+0x12c>
 802c3d6:	4658      	mov	r0, fp
 802c3d8:	f002 f988 	bl	802e6ec <_localeconv_r>
 802c3dc:	6843      	ldr	r3, [r0, #4]
 802c3de:	4618      	mov	r0, r3
 802c3e0:	9318      	str	r3, [sp, #96]	; 0x60
 802c3e2:	f7f5 ff21 	bl	8022228 <strlen>
 802c3e6:	9015      	str	r0, [sp, #84]	; 0x54
 802c3e8:	4658      	mov	r0, fp
 802c3ea:	f002 f97f 	bl	802e6ec <_localeconv_r>
 802c3ee:	6883      	ldr	r3, [r0, #8]
 802c3f0:	212b      	movs	r1, #43	; 0x2b
 802c3f2:	930d      	str	r3, [sp, #52]	; 0x34
 802c3f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802c3f6:	b12b      	cbz	r3, 802c404 <_vfprintf_r+0x260>
 802c3f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c3fa:	b11b      	cbz	r3, 802c404 <_vfprintf_r+0x260>
 802c3fc:	781b      	ldrb	r3, [r3, #0]
 802c3fe:	b10b      	cbz	r3, 802c404 <_vfprintf_r+0x260>
 802c400:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 802c404:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 802c406:	e775      	b.n	802c2f4 <_vfprintf_r+0x150>
 802c408:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 802c40c:	2b00      	cmp	r3, #0
 802c40e:	d1f9      	bne.n	802c404 <_vfprintf_r+0x260>
 802c410:	2320      	movs	r3, #32
 802c412:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 802c416:	e7f5      	b.n	802c404 <_vfprintf_r+0x260>
 802c418:	f048 0801 	orr.w	r8, r8, #1
 802c41c:	e7f2      	b.n	802c404 <_vfprintf_r+0x260>
 802c41e:	f855 3b04 	ldr.w	r3, [r5], #4
 802c422:	2b00      	cmp	r3, #0
 802c424:	9313      	str	r3, [sp, #76]	; 0x4c
 802c426:	daed      	bge.n	802c404 <_vfprintf_r+0x260>
 802c428:	425b      	negs	r3, r3
 802c42a:	9313      	str	r3, [sp, #76]	; 0x4c
 802c42c:	f048 0804 	orr.w	r8, r8, #4
 802c430:	e7e8      	b.n	802c404 <_vfprintf_r+0x260>
 802c432:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 802c436:	e7e5      	b.n	802c404 <_vfprintf_r+0x260>
 802c438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802c43a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c43e:	2a2a      	cmp	r2, #42	; 0x2a
 802c440:	920b      	str	r2, [sp, #44]	; 0x2c
 802c442:	d112      	bne.n	802c46a <_vfprintf_r+0x2c6>
 802c444:	f855 2b04 	ldr.w	r2, [r5], #4
 802c448:	930e      	str	r3, [sp, #56]	; 0x38
 802c44a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 802c44e:	9207      	str	r2, [sp, #28]
 802c450:	e7d8      	b.n	802c404 <_vfprintf_r+0x260>
 802c452:	9807      	ldr	r0, [sp, #28]
 802c454:	fb07 2200 	mla	r2, r7, r0, r2
 802c458:	9207      	str	r2, [sp, #28]
 802c45a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c45e:	920b      	str	r2, [sp, #44]	; 0x2c
 802c460:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802c462:	3a30      	subs	r2, #48	; 0x30
 802c464:	2a09      	cmp	r2, #9
 802c466:	d9f4      	bls.n	802c452 <_vfprintf_r+0x2ae>
 802c468:	e748      	b.n	802c2fc <_vfprintf_r+0x158>
 802c46a:	2200      	movs	r2, #0
 802c46c:	9207      	str	r2, [sp, #28]
 802c46e:	e7f7      	b.n	802c460 <_vfprintf_r+0x2bc>
 802c470:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 802c474:	e7c6      	b.n	802c404 <_vfprintf_r+0x260>
 802c476:	2200      	movs	r2, #0
 802c478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802c47a:	9213      	str	r2, [sp, #76]	; 0x4c
 802c47c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802c47e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802c480:	3a30      	subs	r2, #48	; 0x30
 802c482:	fb07 2200 	mla	r2, r7, r0, r2
 802c486:	9213      	str	r2, [sp, #76]	; 0x4c
 802c488:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c48c:	920b      	str	r2, [sp, #44]	; 0x2c
 802c48e:	3a30      	subs	r2, #48	; 0x30
 802c490:	2a09      	cmp	r2, #9
 802c492:	d9f3      	bls.n	802c47c <_vfprintf_r+0x2d8>
 802c494:	e732      	b.n	802c2fc <_vfprintf_r+0x158>
 802c496:	f048 0808 	orr.w	r8, r8, #8
 802c49a:	e7b3      	b.n	802c404 <_vfprintf_r+0x260>
 802c49c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802c49e:	781b      	ldrb	r3, [r3, #0]
 802c4a0:	2b68      	cmp	r3, #104	; 0x68
 802c4a2:	bf01      	itttt	eq
 802c4a4:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 802c4a6:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 802c4aa:	3301      	addeq	r3, #1
 802c4ac:	930e      	streq	r3, [sp, #56]	; 0x38
 802c4ae:	bf18      	it	ne
 802c4b0:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 802c4b4:	e7a6      	b.n	802c404 <_vfprintf_r+0x260>
 802c4b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802c4b8:	781b      	ldrb	r3, [r3, #0]
 802c4ba:	2b6c      	cmp	r3, #108	; 0x6c
 802c4bc:	d105      	bne.n	802c4ca <_vfprintf_r+0x326>
 802c4be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802c4c0:	3301      	adds	r3, #1
 802c4c2:	930e      	str	r3, [sp, #56]	; 0x38
 802c4c4:	f048 0820 	orr.w	r8, r8, #32
 802c4c8:	e79c      	b.n	802c404 <_vfprintf_r+0x260>
 802c4ca:	f048 0810 	orr.w	r8, r8, #16
 802c4ce:	e799      	b.n	802c404 <_vfprintf_r+0x260>
 802c4d0:	462a      	mov	r2, r5
 802c4d2:	f852 3b04 	ldr.w	r3, [r2], #4
 802c4d6:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 802c4da:	2300      	movs	r3, #0
 802c4dc:	920a      	str	r2, [sp, #40]	; 0x28
 802c4de:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 802c4e2:	2700      	movs	r7, #0
 802c4e4:	9308      	str	r3, [sp, #32]
 802c4e6:	2301      	movs	r3, #1
 802c4e8:	463e      	mov	r6, r7
 802c4ea:	463d      	mov	r5, r7
 802c4ec:	9307      	str	r3, [sp, #28]
 802c4ee:	970c      	str	r7, [sp, #48]	; 0x30
 802c4f0:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 802c4f4:	e1b8      	b.n	802c868 <_vfprintf_r+0x6c4>
 802c4f6:	f048 0810 	orr.w	r8, r8, #16
 802c4fa:	f018 0f20 	tst.w	r8, #32
 802c4fe:	d011      	beq.n	802c524 <_vfprintf_r+0x380>
 802c500:	3507      	adds	r5, #7
 802c502:	f025 0307 	bic.w	r3, r5, #7
 802c506:	461a      	mov	r2, r3
 802c508:	f852 5b08 	ldr.w	r5, [r2], #8
 802c50c:	685e      	ldr	r6, [r3, #4]
 802c50e:	920a      	str	r2, [sp, #40]	; 0x28
 802c510:	2e00      	cmp	r6, #0
 802c512:	da05      	bge.n	802c520 <_vfprintf_r+0x37c>
 802c514:	232d      	movs	r3, #45	; 0x2d
 802c516:	426d      	negs	r5, r5
 802c518:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 802c51c:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 802c520:	2301      	movs	r3, #1
 802c522:	e391      	b.n	802cc48 <_vfprintf_r+0xaa4>
 802c524:	462b      	mov	r3, r5
 802c526:	f853 6b04 	ldr.w	r6, [r3], #4
 802c52a:	f018 0f10 	tst.w	r8, #16
 802c52e:	930a      	str	r3, [sp, #40]	; 0x28
 802c530:	d002      	beq.n	802c538 <_vfprintf_r+0x394>
 802c532:	4635      	mov	r5, r6
 802c534:	17f6      	asrs	r6, r6, #31
 802c536:	e7eb      	b.n	802c510 <_vfprintf_r+0x36c>
 802c538:	f018 0f40 	tst.w	r8, #64	; 0x40
 802c53c:	d003      	beq.n	802c546 <_vfprintf_r+0x3a2>
 802c53e:	b235      	sxth	r5, r6
 802c540:	f346 36c0 	sbfx	r6, r6, #15, #1
 802c544:	e7e4      	b.n	802c510 <_vfprintf_r+0x36c>
 802c546:	f418 7f00 	tst.w	r8, #512	; 0x200
 802c54a:	d0f2      	beq.n	802c532 <_vfprintf_r+0x38e>
 802c54c:	b275      	sxtb	r5, r6
 802c54e:	f346 16c0 	sbfx	r6, r6, #7, #1
 802c552:	e7dd      	b.n	802c510 <_vfprintf_r+0x36c>
 802c554:	3507      	adds	r5, #7
 802c556:	f025 0307 	bic.w	r3, r5, #7
 802c55a:	4619      	mov	r1, r3
 802c55c:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 802c560:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 802c564:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 802c568:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 802c56c:	910a      	str	r1, [sp, #40]	; 0x28
 802c56e:	f04f 32ff 	mov.w	r2, #4294967295
 802c572:	4630      	mov	r0, r6
 802c574:	4629      	mov	r1, r5
 802c576:	4b3e      	ldr	r3, [pc, #248]	; (802c670 <_vfprintf_r+0x4cc>)
 802c578:	f7f6 fab4 	bl	8022ae4 <__aeabi_dcmpun>
 802c57c:	bb18      	cbnz	r0, 802c5c6 <_vfprintf_r+0x422>
 802c57e:	f04f 32ff 	mov.w	r2, #4294967295
 802c582:	4630      	mov	r0, r6
 802c584:	4629      	mov	r1, r5
 802c586:	4b3a      	ldr	r3, [pc, #232]	; (802c670 <_vfprintf_r+0x4cc>)
 802c588:	f7f6 fa8e 	bl	8022aa8 <__aeabi_dcmple>
 802c58c:	b9d8      	cbnz	r0, 802c5c6 <_vfprintf_r+0x422>
 802c58e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802c592:	2200      	movs	r2, #0
 802c594:	2300      	movs	r3, #0
 802c596:	f7f6 fa7d 	bl	8022a94 <__aeabi_dcmplt>
 802c59a:	b110      	cbz	r0, 802c5a2 <_vfprintf_r+0x3fe>
 802c59c:	232d      	movs	r3, #45	; 0x2d
 802c59e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 802c5a2:	4a34      	ldr	r2, [pc, #208]	; (802c674 <_vfprintf_r+0x4d0>)
 802c5a4:	4b34      	ldr	r3, [pc, #208]	; (802c678 <_vfprintf_r+0x4d4>)
 802c5a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802c5a8:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 802c5ac:	2947      	cmp	r1, #71	; 0x47
 802c5ae:	bfd4      	ite	le
 802c5b0:	4691      	movle	r9, r2
 802c5b2:	4699      	movgt	r9, r3
 802c5b4:	2303      	movs	r3, #3
 802c5b6:	2100      	movs	r1, #0
 802c5b8:	e9cd 3107 	strd	r3, r1, [sp, #28]
 802c5bc:	2700      	movs	r7, #0
 802c5be:	463e      	mov	r6, r7
 802c5c0:	463b      	mov	r3, r7
 802c5c2:	f001 b803 	b.w	802d5cc <_vfprintf_r+0x1428>
 802c5c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802c5ca:	4610      	mov	r0, r2
 802c5cc:	4619      	mov	r1, r3
 802c5ce:	f7f6 fa89 	bl	8022ae4 <__aeabi_dcmpun>
 802c5d2:	b140      	cbz	r0, 802c5e6 <_vfprintf_r+0x442>
 802c5d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802c5d6:	4a29      	ldr	r2, [pc, #164]	; (802c67c <_vfprintf_r+0x4d8>)
 802c5d8:	2b00      	cmp	r3, #0
 802c5da:	bfbc      	itt	lt
 802c5dc:	232d      	movlt	r3, #45	; 0x2d
 802c5de:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 802c5e2:	4b27      	ldr	r3, [pc, #156]	; (802c680 <_vfprintf_r+0x4dc>)
 802c5e4:	e7df      	b.n	802c5a6 <_vfprintf_r+0x402>
 802c5e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c5e8:	f023 0320 	bic.w	r3, r3, #32
 802c5ec:	2b41      	cmp	r3, #65	; 0x41
 802c5ee:	930c      	str	r3, [sp, #48]	; 0x30
 802c5f0:	d12e      	bne.n	802c650 <_vfprintf_r+0x4ac>
 802c5f2:	2330      	movs	r3, #48	; 0x30
 802c5f4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 802c5f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c5fa:	f048 0802 	orr.w	r8, r8, #2
 802c5fe:	2b61      	cmp	r3, #97	; 0x61
 802c600:	bf0c      	ite	eq
 802c602:	2378      	moveq	r3, #120	; 0x78
 802c604:	2358      	movne	r3, #88	; 0x58
 802c606:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 802c60a:	9b07      	ldr	r3, [sp, #28]
 802c60c:	2b63      	cmp	r3, #99	; 0x63
 802c60e:	dd39      	ble.n	802c684 <_vfprintf_r+0x4e0>
 802c610:	4658      	mov	r0, fp
 802c612:	1c59      	adds	r1, r3, #1
 802c614:	f7ff fb80 	bl	802bd18 <_malloc_r>
 802c618:	4681      	mov	r9, r0
 802c61a:	2800      	cmp	r0, #0
 802c61c:	f040 8200 	bne.w	802ca20 <_vfprintf_r+0x87c>
 802c620:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 802c624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c628:	f8aa 300c 	strh.w	r3, [sl, #12]
 802c62c:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 802c630:	07d9      	lsls	r1, r3, #31
 802c632:	d407      	bmi.n	802c644 <_vfprintf_r+0x4a0>
 802c634:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 802c638:	059a      	lsls	r2, r3, #22
 802c63a:	d403      	bmi.n	802c644 <_vfprintf_r+0x4a0>
 802c63c:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 802c640:	f7ff fa37 	bl	802bab2 <__retarget_lock_release_recursive>
 802c644:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 802c648:	065b      	lsls	r3, r3, #25
 802c64a:	f57f adf1 	bpl.w	802c230 <_vfprintf_r+0x8c>
 802c64e:	e5ec      	b.n	802c22a <_vfprintf_r+0x86>
 802c650:	9b07      	ldr	r3, [sp, #28]
 802c652:	3301      	adds	r3, #1
 802c654:	f000 81e6 	beq.w	802ca24 <_vfprintf_r+0x880>
 802c658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c65a:	2b47      	cmp	r3, #71	; 0x47
 802c65c:	f040 81e5 	bne.w	802ca2a <_vfprintf_r+0x886>
 802c660:	9b07      	ldr	r3, [sp, #28]
 802c662:	2b00      	cmp	r3, #0
 802c664:	f040 81e1 	bne.w	802ca2a <_vfprintf_r+0x886>
 802c668:	9308      	str	r3, [sp, #32]
 802c66a:	2301      	movs	r3, #1
 802c66c:	9307      	str	r3, [sp, #28]
 802c66e:	e00c      	b.n	802c68a <_vfprintf_r+0x4e6>
 802c670:	7fefffff 	.word	0x7fefffff
 802c674:	0803102e 	.word	0x0803102e
 802c678:	08031032 	.word	0x08031032
 802c67c:	08031036 	.word	0x08031036
 802c680:	0803103a 	.word	0x0803103a
 802c684:	9008      	str	r0, [sp, #32]
 802c686:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 802c68a:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 802c68e:	9314      	str	r3, [sp, #80]	; 0x50
 802c690:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 802c694:	1e1d      	subs	r5, r3, #0
 802c696:	bfae      	itee	ge
 802c698:	2300      	movge	r3, #0
 802c69a:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 802c69e:	232d      	movlt	r3, #45	; 0x2d
 802c6a0:	931c      	str	r3, [sp, #112]	; 0x70
 802c6a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c6a4:	2b41      	cmp	r3, #65	; 0x41
 802c6a6:	f040 81d8 	bne.w	802ca5a <_vfprintf_r+0x8b6>
 802c6aa:	4638      	mov	r0, r7
 802c6ac:	aa20      	add	r2, sp, #128	; 0x80
 802c6ae:	4629      	mov	r1, r5
 802c6b0:	f002 f85e 	bl	802e770 <frexp>
 802c6b4:	2200      	movs	r2, #0
 802c6b6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802c6ba:	f7f5 ff79 	bl	80225b0 <__aeabi_dmul>
 802c6be:	2200      	movs	r2, #0
 802c6c0:	2300      	movs	r3, #0
 802c6c2:	4606      	mov	r6, r0
 802c6c4:	460f      	mov	r7, r1
 802c6c6:	f7f6 f9db 	bl	8022a80 <__aeabi_dcmpeq>
 802c6ca:	b108      	cbz	r0, 802c6d0 <_vfprintf_r+0x52c>
 802c6cc:	2301      	movs	r3, #1
 802c6ce:	9320      	str	r3, [sp, #128]	; 0x80
 802c6d0:	4bad      	ldr	r3, [pc, #692]	; (802c988 <_vfprintf_r+0x7e4>)
 802c6d2:	4aae      	ldr	r2, [pc, #696]	; (802c98c <_vfprintf_r+0x7e8>)
 802c6d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802c6d6:	464d      	mov	r5, r9
 802c6d8:	2961      	cmp	r1, #97	; 0x61
 802c6da:	bf18      	it	ne
 802c6dc:	461a      	movne	r2, r3
 802c6de:	9b07      	ldr	r3, [sp, #28]
 802c6e0:	921b      	str	r2, [sp, #108]	; 0x6c
 802c6e2:	3b01      	subs	r3, #1
 802c6e4:	9309      	str	r3, [sp, #36]	; 0x24
 802c6e6:	2200      	movs	r2, #0
 802c6e8:	4ba9      	ldr	r3, [pc, #676]	; (802c990 <_vfprintf_r+0x7ec>)
 802c6ea:	4630      	mov	r0, r6
 802c6ec:	4639      	mov	r1, r7
 802c6ee:	f7f5 ff5f 	bl	80225b0 <__aeabi_dmul>
 802c6f2:	460f      	mov	r7, r1
 802c6f4:	4606      	mov	r6, r0
 802c6f6:	f7f6 fa0b 	bl	8022b10 <__aeabi_d2iz>
 802c6fa:	901d      	str	r0, [sp, #116]	; 0x74
 802c6fc:	f7f5 feee 	bl	80224dc <__aeabi_i2d>
 802c700:	4602      	mov	r2, r0
 802c702:	460b      	mov	r3, r1
 802c704:	4630      	mov	r0, r6
 802c706:	4639      	mov	r1, r7
 802c708:	f7f5 fd9a 	bl	8022240 <__aeabi_dsub>
 802c70c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802c70e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802c710:	4606      	mov	r6, r0
 802c712:	5c9b      	ldrb	r3, [r3, r2]
 802c714:	460f      	mov	r7, r1
 802c716:	f805 3b01 	strb.w	r3, [r5], #1
 802c71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c71c:	1c5a      	adds	r2, r3, #1
 802c71e:	9316      	str	r3, [sp, #88]	; 0x58
 802c720:	d007      	beq.n	802c732 <_vfprintf_r+0x58e>
 802c722:	3b01      	subs	r3, #1
 802c724:	9309      	str	r3, [sp, #36]	; 0x24
 802c726:	2200      	movs	r2, #0
 802c728:	2300      	movs	r3, #0
 802c72a:	f7f6 f9a9 	bl	8022a80 <__aeabi_dcmpeq>
 802c72e:	2800      	cmp	r0, #0
 802c730:	d0d9      	beq.n	802c6e6 <_vfprintf_r+0x542>
 802c732:	2200      	movs	r2, #0
 802c734:	4630      	mov	r0, r6
 802c736:	4639      	mov	r1, r7
 802c738:	4b96      	ldr	r3, [pc, #600]	; (802c994 <_vfprintf_r+0x7f0>)
 802c73a:	f7f6 f9c9 	bl	8022ad0 <__aeabi_dcmpgt>
 802c73e:	b960      	cbnz	r0, 802c75a <_vfprintf_r+0x5b6>
 802c740:	2200      	movs	r2, #0
 802c742:	4630      	mov	r0, r6
 802c744:	4639      	mov	r1, r7
 802c746:	4b93      	ldr	r3, [pc, #588]	; (802c994 <_vfprintf_r+0x7f0>)
 802c748:	f7f6 f99a 	bl	8022a80 <__aeabi_dcmpeq>
 802c74c:	2800      	cmp	r0, #0
 802c74e:	f000 817f 	beq.w	802ca50 <_vfprintf_r+0x8ac>
 802c752:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802c754:	07da      	lsls	r2, r3, #31
 802c756:	f140 817b 	bpl.w	802ca50 <_vfprintf_r+0x8ac>
 802c75a:	2030      	movs	r0, #48	; 0x30
 802c75c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802c75e:	9524      	str	r5, [sp, #144]	; 0x90
 802c760:	7bd9      	ldrb	r1, [r3, #15]
 802c762:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802c764:	1e53      	subs	r3, r2, #1
 802c766:	9324      	str	r3, [sp, #144]	; 0x90
 802c768:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802c76c:	428b      	cmp	r3, r1
 802c76e:	f000 815e 	beq.w	802ca2e <_vfprintf_r+0x88a>
 802c772:	2b39      	cmp	r3, #57	; 0x39
 802c774:	bf0b      	itete	eq
 802c776:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 802c778:	3301      	addne	r3, #1
 802c77a:	7a9b      	ldrbeq	r3, [r3, #10]
 802c77c:	b2db      	uxtbne	r3, r3
 802c77e:	f802 3c01 	strb.w	r3, [r2, #-1]
 802c782:	eba5 0309 	sub.w	r3, r5, r9
 802c786:	9309      	str	r3, [sp, #36]	; 0x24
 802c788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c78a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 802c78c:	2b47      	cmp	r3, #71	; 0x47
 802c78e:	f040 81b3 	bne.w	802caf8 <_vfprintf_r+0x954>
 802c792:	1ceb      	adds	r3, r5, #3
 802c794:	db03      	blt.n	802c79e <_vfprintf_r+0x5fa>
 802c796:	9b07      	ldr	r3, [sp, #28]
 802c798:	42ab      	cmp	r3, r5
 802c79a:	f280 81d3 	bge.w	802cb44 <_vfprintf_r+0x9a0>
 802c79e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c7a0:	3b02      	subs	r3, #2
 802c7a2:	930b      	str	r3, [sp, #44]	; 0x2c
 802c7a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802c7a6:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 802c7aa:	f021 0120 	bic.w	r1, r1, #32
 802c7ae:	2941      	cmp	r1, #65	; 0x41
 802c7b0:	bf08      	it	eq
 802c7b2:	320f      	addeq	r2, #15
 802c7b4:	f105 33ff 	add.w	r3, r5, #4294967295
 802c7b8:	bf06      	itte	eq
 802c7ba:	b2d2      	uxtbeq	r2, r2
 802c7bc:	2101      	moveq	r1, #1
 802c7be:	2100      	movne	r1, #0
 802c7c0:	2b00      	cmp	r3, #0
 802c7c2:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 802c7c6:	bfb4      	ite	lt
 802c7c8:	222d      	movlt	r2, #45	; 0x2d
 802c7ca:	222b      	movge	r2, #43	; 0x2b
 802c7cc:	9320      	str	r3, [sp, #128]	; 0x80
 802c7ce:	bfb8      	it	lt
 802c7d0:	f1c5 0301 	rsblt	r3, r5, #1
 802c7d4:	2b09      	cmp	r3, #9
 802c7d6:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 802c7da:	f340 81a6 	ble.w	802cb2a <_vfprintf_r+0x986>
 802c7de:	260a      	movs	r6, #10
 802c7e0:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 802c7e4:	fb93 f5f6 	sdiv	r5, r3, r6
 802c7e8:	4602      	mov	r2, r0
 802c7ea:	fb06 3115 	mls	r1, r6, r5, r3
 802c7ee:	3130      	adds	r1, #48	; 0x30
 802c7f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 802c7f4:	4619      	mov	r1, r3
 802c7f6:	2963      	cmp	r1, #99	; 0x63
 802c7f8:	462b      	mov	r3, r5
 802c7fa:	f100 30ff 	add.w	r0, r0, #4294967295
 802c7fe:	dcf1      	bgt.n	802c7e4 <_vfprintf_r+0x640>
 802c800:	3330      	adds	r3, #48	; 0x30
 802c802:	1e91      	subs	r1, r2, #2
 802c804:	f800 3c01 	strb.w	r3, [r0, #-1]
 802c808:	460b      	mov	r3, r1
 802c80a:	f10d 0589 	add.w	r5, sp, #137	; 0x89
 802c80e:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 802c812:	4283      	cmp	r3, r0
 802c814:	f0c0 8184 	bcc.w	802cb20 <_vfprintf_r+0x97c>
 802c818:	f10d 0399 	add.w	r3, sp, #153	; 0x99
 802c81c:	1a9b      	subs	r3, r3, r2
 802c81e:	4281      	cmp	r1, r0
 802c820:	bf88      	it	hi
 802c822:	2300      	movhi	r3, #0
 802c824:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 802c828:	441a      	add	r2, r3
 802c82a:	ab22      	add	r3, sp, #136	; 0x88
 802c82c:	1ad3      	subs	r3, r2, r3
 802c82e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802c830:	9319      	str	r3, [sp, #100]	; 0x64
 802c832:	2a01      	cmp	r2, #1
 802c834:	4413      	add	r3, r2
 802c836:	9307      	str	r3, [sp, #28]
 802c838:	dc02      	bgt.n	802c840 <_vfprintf_r+0x69c>
 802c83a:	f018 0f01 	tst.w	r8, #1
 802c83e:	d003      	beq.n	802c848 <_vfprintf_r+0x6a4>
 802c840:	9b07      	ldr	r3, [sp, #28]
 802c842:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802c844:	4413      	add	r3, r2
 802c846:	9307      	str	r3, [sp, #28]
 802c848:	2600      	movs	r6, #0
 802c84a:	4635      	mov	r5, r6
 802c84c:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 802c850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802c854:	9314      	str	r3, [sp, #80]	; 0x50
 802c856:	960c      	str	r6, [sp, #48]	; 0x30
 802c858:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802c85a:	b113      	cbz	r3, 802c862 <_vfprintf_r+0x6be>
 802c85c:	232d      	movs	r3, #45	; 0x2d
 802c85e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 802c862:	2700      	movs	r7, #0
 802c864:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802c868:	9b07      	ldr	r3, [sp, #28]
 802c86a:	42bb      	cmp	r3, r7
 802c86c:	bfb8      	it	lt
 802c86e:	463b      	movlt	r3, r7
 802c870:	9314      	str	r3, [sp, #80]	; 0x50
 802c872:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 802c876:	b113      	cbz	r3, 802c87e <_vfprintf_r+0x6da>
 802c878:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802c87a:	3301      	adds	r3, #1
 802c87c:	9314      	str	r3, [sp, #80]	; 0x50
 802c87e:	f018 0302 	ands.w	r3, r8, #2
 802c882:	931b      	str	r3, [sp, #108]	; 0x6c
 802c884:	bf1e      	ittt	ne
 802c886:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 802c888:	3302      	addne	r3, #2
 802c88a:	9314      	strne	r3, [sp, #80]	; 0x50
 802c88c:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 802c890:	931c      	str	r3, [sp, #112]	; 0x70
 802c892:	d121      	bne.n	802c8d8 <_vfprintf_r+0x734>
 802c894:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 802c898:	1a9b      	subs	r3, r3, r2
 802c89a:	2b00      	cmp	r3, #0
 802c89c:	9316      	str	r3, [sp, #88]	; 0x58
 802c89e:	dd1b      	ble.n	802c8d8 <_vfprintf_r+0x734>
 802c8a0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 802c8a4:	9816      	ldr	r0, [sp, #88]	; 0x58
 802c8a6:	3201      	adds	r2, #1
 802c8a8:	2810      	cmp	r0, #16
 802c8aa:	483b      	ldr	r0, [pc, #236]	; (802c998 <_vfprintf_r+0x7f4>)
 802c8ac:	f104 0108 	add.w	r1, r4, #8
 802c8b0:	6020      	str	r0, [r4, #0]
 802c8b2:	f300 82e6 	bgt.w	802ce82 <_vfprintf_r+0xcde>
 802c8b6:	9816      	ldr	r0, [sp, #88]	; 0x58
 802c8b8:	2a07      	cmp	r2, #7
 802c8ba:	4403      	add	r3, r0
 802c8bc:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 802c8c0:	6060      	str	r0, [r4, #4]
 802c8c2:	f340 82f3 	ble.w	802ceac <_vfprintf_r+0xd08>
 802c8c6:	4651      	mov	r1, sl
 802c8c8:	4658      	mov	r0, fp
 802c8ca:	aa26      	add	r2, sp, #152	; 0x98
 802c8cc:	f000 fec6 	bl	802d65c <__sprint_r>
 802c8d0:	2800      	cmp	r0, #0
 802c8d2:	f040 861b 	bne.w	802d50c <_vfprintf_r+0x1368>
 802c8d6:	ac29      	add	r4, sp, #164	; 0xa4
 802c8d8:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 802c8dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802c8de:	b16a      	cbz	r2, 802c8fc <_vfprintf_r+0x758>
 802c8e0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 802c8e4:	6022      	str	r2, [r4, #0]
 802c8e6:	2201      	movs	r2, #1
 802c8e8:	4413      	add	r3, r2
 802c8ea:	9328      	str	r3, [sp, #160]	; 0xa0
 802c8ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802c8ee:	6062      	str	r2, [r4, #4]
 802c8f0:	4413      	add	r3, r2
 802c8f2:	2b07      	cmp	r3, #7
 802c8f4:	9327      	str	r3, [sp, #156]	; 0x9c
 802c8f6:	f300 82db 	bgt.w	802ceb0 <_vfprintf_r+0xd0c>
 802c8fa:	3408      	adds	r4, #8
 802c8fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802c8fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802c900:	b162      	cbz	r2, 802c91c <_vfprintf_r+0x778>
 802c902:	aa1f      	add	r2, sp, #124	; 0x7c
 802c904:	6022      	str	r2, [r4, #0]
 802c906:	2202      	movs	r2, #2
 802c908:	4413      	add	r3, r2
 802c90a:	9328      	str	r3, [sp, #160]	; 0xa0
 802c90c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802c90e:	6062      	str	r2, [r4, #4]
 802c910:	3301      	adds	r3, #1
 802c912:	2b07      	cmp	r3, #7
 802c914:	9327      	str	r3, [sp, #156]	; 0x9c
 802c916:	f300 82d5 	bgt.w	802cec4 <_vfprintf_r+0xd20>
 802c91a:	3408      	adds	r4, #8
 802c91c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802c91e:	2b80      	cmp	r3, #128	; 0x80
 802c920:	d121      	bne.n	802c966 <_vfprintf_r+0x7c2>
 802c922:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 802c926:	1a9b      	subs	r3, r3, r2
 802c928:	2b00      	cmp	r3, #0
 802c92a:	9316      	str	r3, [sp, #88]	; 0x58
 802c92c:	dd1b      	ble.n	802c966 <_vfprintf_r+0x7c2>
 802c92e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 802c932:	9816      	ldr	r0, [sp, #88]	; 0x58
 802c934:	3201      	adds	r2, #1
 802c936:	2810      	cmp	r0, #16
 802c938:	4818      	ldr	r0, [pc, #96]	; (802c99c <_vfprintf_r+0x7f8>)
 802c93a:	f104 0108 	add.w	r1, r4, #8
 802c93e:	6020      	str	r0, [r4, #0]
 802c940:	f300 82ca 	bgt.w	802ced8 <_vfprintf_r+0xd34>
 802c944:	9816      	ldr	r0, [sp, #88]	; 0x58
 802c946:	2a07      	cmp	r2, #7
 802c948:	4403      	add	r3, r0
 802c94a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 802c94e:	6060      	str	r0, [r4, #4]
 802c950:	f340 82d7 	ble.w	802cf02 <_vfprintf_r+0xd5e>
 802c954:	4651      	mov	r1, sl
 802c956:	4658      	mov	r0, fp
 802c958:	aa26      	add	r2, sp, #152	; 0x98
 802c95a:	f000 fe7f 	bl	802d65c <__sprint_r>
 802c95e:	2800      	cmp	r0, #0
 802c960:	f040 85d4 	bne.w	802d50c <_vfprintf_r+0x1368>
 802c964:	ac29      	add	r4, sp, #164	; 0xa4
 802c966:	9b07      	ldr	r3, [sp, #28]
 802c968:	1aff      	subs	r7, r7, r3
 802c96a:	2f00      	cmp	r7, #0
 802c96c:	dd28      	ble.n	802c9c0 <_vfprintf_r+0x81c>
 802c96e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802c972:	480a      	ldr	r0, [pc, #40]	; (802c99c <_vfprintf_r+0x7f8>)
 802c974:	2f10      	cmp	r7, #16
 802c976:	f103 0301 	add.w	r3, r3, #1
 802c97a:	f104 0108 	add.w	r1, r4, #8
 802c97e:	6020      	str	r0, [r4, #0]
 802c980:	f300 82c1 	bgt.w	802cf06 <_vfprintf_r+0xd62>
 802c984:	e00c      	b.n	802c9a0 <_vfprintf_r+0x7fc>
 802c986:	bf00      	nop
 802c988:	0803104f 	.word	0x0803104f
 802c98c:	0803103e 	.word	0x0803103e
 802c990:	40300000 	.word	0x40300000
 802c994:	3fe00000 	.word	0x3fe00000
 802c998:	08031062 	.word	0x08031062
 802c99c:	08031072 	.word	0x08031072
 802c9a0:	6067      	str	r7, [r4, #4]
 802c9a2:	2b07      	cmp	r3, #7
 802c9a4:	4417      	add	r7, r2
 802c9a6:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 802c9aa:	f340 82bf 	ble.w	802cf2c <_vfprintf_r+0xd88>
 802c9ae:	4651      	mov	r1, sl
 802c9b0:	4658      	mov	r0, fp
 802c9b2:	aa26      	add	r2, sp, #152	; 0x98
 802c9b4:	f000 fe52 	bl	802d65c <__sprint_r>
 802c9b8:	2800      	cmp	r0, #0
 802c9ba:	f040 85a7 	bne.w	802d50c <_vfprintf_r+0x1368>
 802c9be:	ac29      	add	r4, sp, #164	; 0xa4
 802c9c0:	f418 7f80 	tst.w	r8, #256	; 0x100
 802c9c4:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 802c9c6:	f040 82b7 	bne.w	802cf38 <_vfprintf_r+0xd94>
 802c9ca:	9b07      	ldr	r3, [sp, #28]
 802c9cc:	f8c4 9000 	str.w	r9, [r4]
 802c9d0:	441f      	add	r7, r3
 802c9d2:	6063      	str	r3, [r4, #4]
 802c9d4:	9728      	str	r7, [sp, #160]	; 0xa0
 802c9d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802c9d8:	3301      	adds	r3, #1
 802c9da:	2b07      	cmp	r3, #7
 802c9dc:	9327      	str	r3, [sp, #156]	; 0x9c
 802c9de:	f300 82f0 	bgt.w	802cfc2 <_vfprintf_r+0xe1e>
 802c9e2:	3408      	adds	r4, #8
 802c9e4:	f018 0f04 	tst.w	r8, #4
 802c9e8:	f040 8572 	bne.w	802d4d0 <_vfprintf_r+0x132c>
 802c9ec:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
 802c9f0:	9914      	ldr	r1, [sp, #80]	; 0x50
 802c9f2:	428a      	cmp	r2, r1
 802c9f4:	bfac      	ite	ge
 802c9f6:	189b      	addge	r3, r3, r2
 802c9f8:	185b      	addlt	r3, r3, r1
 802c9fa:	9312      	str	r3, [sp, #72]	; 0x48
 802c9fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802c9fe:	b13b      	cbz	r3, 802ca10 <_vfprintf_r+0x86c>
 802ca00:	4651      	mov	r1, sl
 802ca02:	4658      	mov	r0, fp
 802ca04:	aa26      	add	r2, sp, #152	; 0x98
 802ca06:	f000 fe29 	bl	802d65c <__sprint_r>
 802ca0a:	2800      	cmp	r0, #0
 802ca0c:	f040 857e 	bne.w	802d50c <_vfprintf_r+0x1368>
 802ca10:	2300      	movs	r3, #0
 802ca12:	9327      	str	r3, [sp, #156]	; 0x9c
 802ca14:	9b08      	ldr	r3, [sp, #32]
 802ca16:	2b00      	cmp	r3, #0
 802ca18:	f040 8594 	bne.w	802d544 <_vfprintf_r+0x13a0>
 802ca1c:	ac29      	add	r4, sp, #164	; 0xa4
 802ca1e:	e0e6      	b.n	802cbee <_vfprintf_r+0xa4a>
 802ca20:	9008      	str	r0, [sp, #32]
 802ca22:	e632      	b.n	802c68a <_vfprintf_r+0x4e6>
 802ca24:	2306      	movs	r3, #6
 802ca26:	9008      	str	r0, [sp, #32]
 802ca28:	e620      	b.n	802c66c <_vfprintf_r+0x4c8>
 802ca2a:	9008      	str	r0, [sp, #32]
 802ca2c:	e62d      	b.n	802c68a <_vfprintf_r+0x4e6>
 802ca2e:	f802 0c01 	strb.w	r0, [r2, #-1]
 802ca32:	e696      	b.n	802c762 <_vfprintf_r+0x5be>
 802ca34:	f803 0b01 	strb.w	r0, [r3], #1
 802ca38:	1aca      	subs	r2, r1, r3
 802ca3a:	2a00      	cmp	r2, #0
 802ca3c:	dafa      	bge.n	802ca34 <_vfprintf_r+0x890>
 802ca3e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802ca40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802ca42:	3201      	adds	r2, #1
 802ca44:	f103 0301 	add.w	r3, r3, #1
 802ca48:	bfb8      	it	lt
 802ca4a:	2300      	movlt	r3, #0
 802ca4c:	441d      	add	r5, r3
 802ca4e:	e698      	b.n	802c782 <_vfprintf_r+0x5de>
 802ca50:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802ca52:	462b      	mov	r3, r5
 802ca54:	2030      	movs	r0, #48	; 0x30
 802ca56:	18a9      	adds	r1, r5, r2
 802ca58:	e7ee      	b.n	802ca38 <_vfprintf_r+0x894>
 802ca5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802ca5c:	2b46      	cmp	r3, #70	; 0x46
 802ca5e:	d005      	beq.n	802ca6c <_vfprintf_r+0x8c8>
 802ca60:	2b45      	cmp	r3, #69	; 0x45
 802ca62:	d11d      	bne.n	802caa0 <_vfprintf_r+0x8fc>
 802ca64:	9b07      	ldr	r3, [sp, #28]
 802ca66:	1c5e      	adds	r6, r3, #1
 802ca68:	2302      	movs	r3, #2
 802ca6a:	e001      	b.n	802ca70 <_vfprintf_r+0x8cc>
 802ca6c:	2303      	movs	r3, #3
 802ca6e:	9e07      	ldr	r6, [sp, #28]
 802ca70:	aa24      	add	r2, sp, #144	; 0x90
 802ca72:	9204      	str	r2, [sp, #16]
 802ca74:	aa21      	add	r2, sp, #132	; 0x84
 802ca76:	9203      	str	r2, [sp, #12]
 802ca78:	aa20      	add	r2, sp, #128	; 0x80
 802ca7a:	e9cd 6201 	strd	r6, r2, [sp, #4]
 802ca7e:	9300      	str	r3, [sp, #0]
 802ca80:	463a      	mov	r2, r7
 802ca82:	462b      	mov	r3, r5
 802ca84:	4658      	mov	r0, fp
 802ca86:	f001 ff73 	bl	802e970 <_dtoa_r>
 802ca8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802ca8c:	4681      	mov	r9, r0
 802ca8e:	2b47      	cmp	r3, #71	; 0x47
 802ca90:	d108      	bne.n	802caa4 <_vfprintf_r+0x900>
 802ca92:	f018 0f01 	tst.w	r8, #1
 802ca96:	d105      	bne.n	802caa4 <_vfprintf_r+0x900>
 802ca98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802ca9a:	eba3 0309 	sub.w	r3, r3, r9
 802ca9e:	e672      	b.n	802c786 <_vfprintf_r+0x5e2>
 802caa0:	9e07      	ldr	r6, [sp, #28]
 802caa2:	e7e1      	b.n	802ca68 <_vfprintf_r+0x8c4>
 802caa4:	eb09 0306 	add.w	r3, r9, r6
 802caa8:	9309      	str	r3, [sp, #36]	; 0x24
 802caaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802caac:	2b46      	cmp	r3, #70	; 0x46
 802caae:	d111      	bne.n	802cad4 <_vfprintf_r+0x930>
 802cab0:	f899 3000 	ldrb.w	r3, [r9]
 802cab4:	2b30      	cmp	r3, #48	; 0x30
 802cab6:	d109      	bne.n	802cacc <_vfprintf_r+0x928>
 802cab8:	2200      	movs	r2, #0
 802caba:	2300      	movs	r3, #0
 802cabc:	4638      	mov	r0, r7
 802cabe:	4629      	mov	r1, r5
 802cac0:	f7f5 ffde 	bl	8022a80 <__aeabi_dcmpeq>
 802cac4:	b910      	cbnz	r0, 802cacc <_vfprintf_r+0x928>
 802cac6:	f1c6 0601 	rsb	r6, r6, #1
 802caca:	9620      	str	r6, [sp, #128]	; 0x80
 802cacc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cace:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802cad0:	441a      	add	r2, r3
 802cad2:	9209      	str	r2, [sp, #36]	; 0x24
 802cad4:	2200      	movs	r2, #0
 802cad6:	2300      	movs	r3, #0
 802cad8:	4638      	mov	r0, r7
 802cada:	4629      	mov	r1, r5
 802cadc:	f7f5 ffd0 	bl	8022a80 <__aeabi_dcmpeq>
 802cae0:	b108      	cbz	r0, 802cae6 <_vfprintf_r+0x942>
 802cae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cae4:	9324      	str	r3, [sp, #144]	; 0x90
 802cae6:	2230      	movs	r2, #48	; 0x30
 802cae8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802caea:	9909      	ldr	r1, [sp, #36]	; 0x24
 802caec:	4299      	cmp	r1, r3
 802caee:	d9d3      	bls.n	802ca98 <_vfprintf_r+0x8f4>
 802caf0:	1c59      	adds	r1, r3, #1
 802caf2:	9124      	str	r1, [sp, #144]	; 0x90
 802caf4:	701a      	strb	r2, [r3, #0]
 802caf6:	e7f7      	b.n	802cae8 <_vfprintf_r+0x944>
 802caf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802cafa:	2b46      	cmp	r3, #70	; 0x46
 802cafc:	f47f ae52 	bne.w	802c7a4 <_vfprintf_r+0x600>
 802cb00:	9a07      	ldr	r2, [sp, #28]
 802cb02:	f008 0301 	and.w	r3, r8, #1
 802cb06:	2d00      	cmp	r5, #0
 802cb08:	ea43 0302 	orr.w	r3, r3, r2
 802cb0c:	dd29      	ble.n	802cb62 <_vfprintf_r+0x9be>
 802cb0e:	2b00      	cmp	r3, #0
 802cb10:	d034      	beq.n	802cb7c <_vfprintf_r+0x9d8>
 802cb12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802cb14:	18eb      	adds	r3, r5, r3
 802cb16:	441a      	add	r2, r3
 802cb18:	9207      	str	r2, [sp, #28]
 802cb1a:	2366      	movs	r3, #102	; 0x66
 802cb1c:	930b      	str	r3, [sp, #44]	; 0x2c
 802cb1e:	e033      	b.n	802cb88 <_vfprintf_r+0x9e4>
 802cb20:	f813 6b01 	ldrb.w	r6, [r3], #1
 802cb24:	f805 6f01 	strb.w	r6, [r5, #1]!
 802cb28:	e673      	b.n	802c812 <_vfprintf_r+0x66e>
 802cb2a:	b941      	cbnz	r1, 802cb3e <_vfprintf_r+0x99a>
 802cb2c:	2230      	movs	r2, #48	; 0x30
 802cb2e:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 802cb32:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 802cb36:	3330      	adds	r3, #48	; 0x30
 802cb38:	f802 3b01 	strb.w	r3, [r2], #1
 802cb3c:	e675      	b.n	802c82a <_vfprintf_r+0x686>
 802cb3e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 802cb42:	e7f8      	b.n	802cb36 <_vfprintf_r+0x992>
 802cb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cb46:	42ab      	cmp	r3, r5
 802cb48:	dd10      	ble.n	802cb6c <_vfprintf_r+0x9c8>
 802cb4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cb4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802cb4e:	2d00      	cmp	r5, #0
 802cb50:	4413      	add	r3, r2
 802cb52:	9307      	str	r3, [sp, #28]
 802cb54:	dc10      	bgt.n	802cb78 <_vfprintf_r+0x9d4>
 802cb56:	9a07      	ldr	r2, [sp, #28]
 802cb58:	f1c5 0301 	rsb	r3, r5, #1
 802cb5c:	441a      	add	r2, r3
 802cb5e:	9207      	str	r2, [sp, #28]
 802cb60:	e00a      	b.n	802cb78 <_vfprintf_r+0x9d4>
 802cb62:	b16b      	cbz	r3, 802cb80 <_vfprintf_r+0x9dc>
 802cb64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802cb66:	9a07      	ldr	r2, [sp, #28]
 802cb68:	3301      	adds	r3, #1
 802cb6a:	e7d4      	b.n	802cb16 <_vfprintf_r+0x972>
 802cb6c:	f018 0f01 	tst.w	r8, #1
 802cb70:	d01f      	beq.n	802cbb2 <_vfprintf_r+0xa0e>
 802cb72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802cb74:	18eb      	adds	r3, r5, r3
 802cb76:	9307      	str	r3, [sp, #28]
 802cb78:	2367      	movs	r3, #103	; 0x67
 802cb7a:	e7cf      	b.n	802cb1c <_vfprintf_r+0x978>
 802cb7c:	9507      	str	r5, [sp, #28]
 802cb7e:	e7cc      	b.n	802cb1a <_vfprintf_r+0x976>
 802cb80:	2366      	movs	r3, #102	; 0x66
 802cb82:	930b      	str	r3, [sp, #44]	; 0x2c
 802cb84:	2301      	movs	r3, #1
 802cb86:	9307      	str	r3, [sp, #28]
 802cb88:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 802cb8c:	930c      	str	r3, [sp, #48]	; 0x30
 802cb8e:	d021      	beq.n	802cbd4 <_vfprintf_r+0xa30>
 802cb90:	2600      	movs	r6, #0
 802cb92:	2d00      	cmp	r5, #0
 802cb94:	960c      	str	r6, [sp, #48]	; 0x30
 802cb96:	f77f ae5f 	ble.w	802c858 <_vfprintf_r+0x6b4>
 802cb9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802cb9c:	781b      	ldrb	r3, [r3, #0]
 802cb9e:	2bff      	cmp	r3, #255	; 0xff
 802cba0:	d109      	bne.n	802cbb6 <_vfprintf_r+0xa12>
 802cba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802cba4:	9a07      	ldr	r2, [sp, #28]
 802cba6:	9915      	ldr	r1, [sp, #84]	; 0x54
 802cba8:	4433      	add	r3, r6
 802cbaa:	fb01 2303 	mla	r3, r1, r3, r2
 802cbae:	9307      	str	r3, [sp, #28]
 802cbb0:	e652      	b.n	802c858 <_vfprintf_r+0x6b4>
 802cbb2:	9507      	str	r5, [sp, #28]
 802cbb4:	e7e0      	b.n	802cb78 <_vfprintf_r+0x9d4>
 802cbb6:	42ab      	cmp	r3, r5
 802cbb8:	daf3      	bge.n	802cba2 <_vfprintf_r+0x9fe>
 802cbba:	1aed      	subs	r5, r5, r3
 802cbbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802cbbe:	785b      	ldrb	r3, [r3, #1]
 802cbc0:	b133      	cbz	r3, 802cbd0 <_vfprintf_r+0xa2c>
 802cbc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802cbc4:	3301      	adds	r3, #1
 802cbc6:	930c      	str	r3, [sp, #48]	; 0x30
 802cbc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802cbca:	3301      	adds	r3, #1
 802cbcc:	930d      	str	r3, [sp, #52]	; 0x34
 802cbce:	e7e4      	b.n	802cb9a <_vfprintf_r+0x9f6>
 802cbd0:	3601      	adds	r6, #1
 802cbd2:	e7e2      	b.n	802cb9a <_vfprintf_r+0x9f6>
 802cbd4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802cbd6:	e63f      	b.n	802c858 <_vfprintf_r+0x6b4>
 802cbd8:	1d2b      	adds	r3, r5, #4
 802cbda:	f018 0f20 	tst.w	r8, #32
 802cbde:	930a      	str	r3, [sp, #40]	; 0x28
 802cbe0:	d00a      	beq.n	802cbf8 <_vfprintf_r+0xa54>
 802cbe2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802cbe4:	682b      	ldr	r3, [r5, #0]
 802cbe6:	9912      	ldr	r1, [sp, #72]	; 0x48
 802cbe8:	17d2      	asrs	r2, r2, #31
 802cbea:	e9c3 1200 	strd	r1, r2, [r3]
 802cbee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802cbf0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 802cbf4:	f7ff bb57 	b.w	802c2a6 <_vfprintf_r+0x102>
 802cbf8:	f018 0f10 	tst.w	r8, #16
 802cbfc:	d003      	beq.n	802cc06 <_vfprintf_r+0xa62>
 802cbfe:	682b      	ldr	r3, [r5, #0]
 802cc00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802cc02:	601a      	str	r2, [r3, #0]
 802cc04:	e7f3      	b.n	802cbee <_vfprintf_r+0xa4a>
 802cc06:	f018 0f40 	tst.w	r8, #64	; 0x40
 802cc0a:	d003      	beq.n	802cc14 <_vfprintf_r+0xa70>
 802cc0c:	682b      	ldr	r3, [r5, #0]
 802cc0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802cc10:	801a      	strh	r2, [r3, #0]
 802cc12:	e7ec      	b.n	802cbee <_vfprintf_r+0xa4a>
 802cc14:	f418 7f00 	tst.w	r8, #512	; 0x200
 802cc18:	d0f1      	beq.n	802cbfe <_vfprintf_r+0xa5a>
 802cc1a:	682b      	ldr	r3, [r5, #0]
 802cc1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802cc1e:	701a      	strb	r2, [r3, #0]
 802cc20:	e7e5      	b.n	802cbee <_vfprintf_r+0xa4a>
 802cc22:	f048 0810 	orr.w	r8, r8, #16
 802cc26:	f018 0320 	ands.w	r3, r8, #32
 802cc2a:	d020      	beq.n	802cc6e <_vfprintf_r+0xaca>
 802cc2c:	3507      	adds	r5, #7
 802cc2e:	f025 0307 	bic.w	r3, r5, #7
 802cc32:	461a      	mov	r2, r3
 802cc34:	f852 5b08 	ldr.w	r5, [r2], #8
 802cc38:	685e      	ldr	r6, [r3, #4]
 802cc3a:	920a      	str	r2, [sp, #40]	; 0x28
 802cc3c:	2300      	movs	r3, #0
 802cc3e:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 802cc42:	2200      	movs	r2, #0
 802cc44:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 802cc48:	9a07      	ldr	r2, [sp, #28]
 802cc4a:	3201      	adds	r2, #1
 802cc4c:	f000 848f 	beq.w	802d56e <_vfprintf_r+0x13ca>
 802cc50:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 802cc54:	9208      	str	r2, [sp, #32]
 802cc56:	ea55 0206 	orrs.w	r2, r5, r6
 802cc5a:	f040 848e 	bne.w	802d57a <_vfprintf_r+0x13d6>
 802cc5e:	9a07      	ldr	r2, [sp, #28]
 802cc60:	2a00      	cmp	r2, #0
 802cc62:	f000 80f4 	beq.w	802ce4e <_vfprintf_r+0xcaa>
 802cc66:	2b01      	cmp	r3, #1
 802cc68:	f040 848a 	bne.w	802d580 <_vfprintf_r+0x13dc>
 802cc6c:	e09e      	b.n	802cdac <_vfprintf_r+0xc08>
 802cc6e:	462a      	mov	r2, r5
 802cc70:	f852 5b04 	ldr.w	r5, [r2], #4
 802cc74:	f018 0610 	ands.w	r6, r8, #16
 802cc78:	920a      	str	r2, [sp, #40]	; 0x28
 802cc7a:	d001      	beq.n	802cc80 <_vfprintf_r+0xadc>
 802cc7c:	461e      	mov	r6, r3
 802cc7e:	e7dd      	b.n	802cc3c <_vfprintf_r+0xa98>
 802cc80:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 802cc84:	d001      	beq.n	802cc8a <_vfprintf_r+0xae6>
 802cc86:	b2ad      	uxth	r5, r5
 802cc88:	e7d8      	b.n	802cc3c <_vfprintf_r+0xa98>
 802cc8a:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 802cc8e:	d0d5      	beq.n	802cc3c <_vfprintf_r+0xa98>
 802cc90:	b2ed      	uxtb	r5, r5
 802cc92:	e7f3      	b.n	802cc7c <_vfprintf_r+0xad8>
 802cc94:	462b      	mov	r3, r5
 802cc96:	f853 5b04 	ldr.w	r5, [r3], #4
 802cc9a:	2278      	movs	r2, #120	; 0x78
 802cc9c:	930a      	str	r3, [sp, #40]	; 0x28
 802cc9e:	f647 0330 	movw	r3, #30768	; 0x7830
 802cca2:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 802cca6:	4ba2      	ldr	r3, [pc, #648]	; (802cf30 <_vfprintf_r+0xd8c>)
 802cca8:	2600      	movs	r6, #0
 802ccaa:	931a      	str	r3, [sp, #104]	; 0x68
 802ccac:	f048 0802 	orr.w	r8, r8, #2
 802ccb0:	2302      	movs	r3, #2
 802ccb2:	920b      	str	r2, [sp, #44]	; 0x2c
 802ccb4:	e7c5      	b.n	802cc42 <_vfprintf_r+0xa9e>
 802ccb6:	462b      	mov	r3, r5
 802ccb8:	2500      	movs	r5, #0
 802ccba:	f853 9b04 	ldr.w	r9, [r3], #4
 802ccbe:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 802ccc2:	930a      	str	r3, [sp, #40]	; 0x28
 802ccc4:	9b07      	ldr	r3, [sp, #28]
 802ccc6:	1c5e      	adds	r6, r3, #1
 802ccc8:	d010      	beq.n	802ccec <_vfprintf_r+0xb48>
 802ccca:	461a      	mov	r2, r3
 802cccc:	4629      	mov	r1, r5
 802ccce:	4648      	mov	r0, r9
 802ccd0:	f001 fd40 	bl	802e754 <memchr>
 802ccd4:	9008      	str	r0, [sp, #32]
 802ccd6:	2800      	cmp	r0, #0
 802ccd8:	f000 80d0 	beq.w	802ce7c <_vfprintf_r+0xcd8>
 802ccdc:	eba0 0309 	sub.w	r3, r0, r9
 802cce0:	462f      	mov	r7, r5
 802cce2:	462e      	mov	r6, r5
 802cce4:	e9cd 3507 	strd	r3, r5, [sp, #28]
 802cce8:	950c      	str	r5, [sp, #48]	; 0x30
 802ccea:	e5bd      	b.n	802c868 <_vfprintf_r+0x6c4>
 802ccec:	4648      	mov	r0, r9
 802ccee:	f7f5 fa9b 	bl	8022228 <strlen>
 802ccf2:	e9cd 0507 	strd	r0, r5, [sp, #28]
 802ccf6:	e461      	b.n	802c5bc <_vfprintf_r+0x418>
 802ccf8:	f048 0810 	orr.w	r8, r8, #16
 802ccfc:	f018 0320 	ands.w	r3, r8, #32
 802cd00:	d009      	beq.n	802cd16 <_vfprintf_r+0xb72>
 802cd02:	3507      	adds	r5, #7
 802cd04:	f025 0307 	bic.w	r3, r5, #7
 802cd08:	461a      	mov	r2, r3
 802cd0a:	f852 5b08 	ldr.w	r5, [r2], #8
 802cd0e:	685e      	ldr	r6, [r3, #4]
 802cd10:	920a      	str	r2, [sp, #40]	; 0x28
 802cd12:	2301      	movs	r3, #1
 802cd14:	e795      	b.n	802cc42 <_vfprintf_r+0xa9e>
 802cd16:	462a      	mov	r2, r5
 802cd18:	f852 5b04 	ldr.w	r5, [r2], #4
 802cd1c:	f018 0610 	ands.w	r6, r8, #16
 802cd20:	920a      	str	r2, [sp, #40]	; 0x28
 802cd22:	d001      	beq.n	802cd28 <_vfprintf_r+0xb84>
 802cd24:	461e      	mov	r6, r3
 802cd26:	e7f4      	b.n	802cd12 <_vfprintf_r+0xb6e>
 802cd28:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 802cd2c:	d001      	beq.n	802cd32 <_vfprintf_r+0xb8e>
 802cd2e:	b2ad      	uxth	r5, r5
 802cd30:	e7ef      	b.n	802cd12 <_vfprintf_r+0xb6e>
 802cd32:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 802cd36:	d0ec      	beq.n	802cd12 <_vfprintf_r+0xb6e>
 802cd38:	b2ed      	uxtb	r5, r5
 802cd3a:	e7f3      	b.n	802cd24 <_vfprintf_r+0xb80>
 802cd3c:	4b7d      	ldr	r3, [pc, #500]	; (802cf34 <_vfprintf_r+0xd90>)
 802cd3e:	931a      	str	r3, [sp, #104]	; 0x68
 802cd40:	f018 0320 	ands.w	r3, r8, #32
 802cd44:	d01b      	beq.n	802cd7e <_vfprintf_r+0xbda>
 802cd46:	3507      	adds	r5, #7
 802cd48:	f025 0307 	bic.w	r3, r5, #7
 802cd4c:	461a      	mov	r2, r3
 802cd4e:	f852 5b08 	ldr.w	r5, [r2], #8
 802cd52:	685e      	ldr	r6, [r3, #4]
 802cd54:	920a      	str	r2, [sp, #40]	; 0x28
 802cd56:	f018 0f01 	tst.w	r8, #1
 802cd5a:	d00a      	beq.n	802cd72 <_vfprintf_r+0xbce>
 802cd5c:	ea55 0306 	orrs.w	r3, r5, r6
 802cd60:	d007      	beq.n	802cd72 <_vfprintf_r+0xbce>
 802cd62:	2330      	movs	r3, #48	; 0x30
 802cd64:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 802cd68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802cd6a:	f048 0802 	orr.w	r8, r8, #2
 802cd6e:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 802cd72:	2302      	movs	r3, #2
 802cd74:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 802cd78:	e763      	b.n	802cc42 <_vfprintf_r+0xa9e>
 802cd7a:	4b6d      	ldr	r3, [pc, #436]	; (802cf30 <_vfprintf_r+0xd8c>)
 802cd7c:	e7df      	b.n	802cd3e <_vfprintf_r+0xb9a>
 802cd7e:	462a      	mov	r2, r5
 802cd80:	f852 5b04 	ldr.w	r5, [r2], #4
 802cd84:	f018 0610 	ands.w	r6, r8, #16
 802cd88:	920a      	str	r2, [sp, #40]	; 0x28
 802cd8a:	d001      	beq.n	802cd90 <_vfprintf_r+0xbec>
 802cd8c:	461e      	mov	r6, r3
 802cd8e:	e7e2      	b.n	802cd56 <_vfprintf_r+0xbb2>
 802cd90:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 802cd94:	d001      	beq.n	802cd9a <_vfprintf_r+0xbf6>
 802cd96:	b2ad      	uxth	r5, r5
 802cd98:	e7dd      	b.n	802cd56 <_vfprintf_r+0xbb2>
 802cd9a:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 802cd9e:	d0da      	beq.n	802cd56 <_vfprintf_r+0xbb2>
 802cda0:	b2ed      	uxtb	r5, r5
 802cda2:	e7f3      	b.n	802cd8c <_vfprintf_r+0xbe8>
 802cda4:	2d0a      	cmp	r5, #10
 802cda6:	f176 0300 	sbcs.w	r3, r6, #0
 802cdaa:	d205      	bcs.n	802cdb8 <_vfprintf_r+0xc14>
 802cdac:	3530      	adds	r5, #48	; 0x30
 802cdae:	f88d 5147 	strb.w	r5, [sp, #327]	; 0x147
 802cdb2:	f20d 1947 	addw	r9, sp, #327	; 0x147
 802cdb6:	e3ff      	b.n	802d5b8 <_vfprintf_r+0x1414>
 802cdb8:	2300      	movs	r3, #0
 802cdba:	9309      	str	r3, [sp, #36]	; 0x24
 802cdbc:	9b08      	ldr	r3, [sp, #32]
 802cdbe:	af52      	add	r7, sp, #328	; 0x148
 802cdc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802cdc4:	930c      	str	r3, [sp, #48]	; 0x30
 802cdc6:	220a      	movs	r2, #10
 802cdc8:	2300      	movs	r3, #0
 802cdca:	4628      	mov	r0, r5
 802cdcc:	4631      	mov	r1, r6
 802cdce:	f7f5 fec7 	bl	8022b60 <__aeabi_uldivmod>
 802cdd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cdd4:	3230      	adds	r2, #48	; 0x30
 802cdd6:	3301      	adds	r3, #1
 802cdd8:	9309      	str	r3, [sp, #36]	; 0x24
 802cdda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802cddc:	4688      	mov	r8, r1
 802cdde:	9014      	str	r0, [sp, #80]	; 0x50
 802cde0:	f107 39ff 	add.w	r9, r7, #4294967295
 802cde4:	f807 2c01 	strb.w	r2, [r7, #-1]
 802cde8:	b1d3      	cbz	r3, 802ce20 <_vfprintf_r+0xc7c>
 802cdea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802cdec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cdee:	781b      	ldrb	r3, [r3, #0]
 802cdf0:	429a      	cmp	r2, r3
 802cdf2:	d115      	bne.n	802ce20 <_vfprintf_r+0xc7c>
 802cdf4:	2aff      	cmp	r2, #255	; 0xff
 802cdf6:	d013      	beq.n	802ce20 <_vfprintf_r+0xc7c>
 802cdf8:	2d0a      	cmp	r5, #10
 802cdfa:	f176 0300 	sbcs.w	r3, r6, #0
 802cdfe:	d30f      	bcc.n	802ce20 <_vfprintf_r+0xc7c>
 802ce00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802ce02:	9918      	ldr	r1, [sp, #96]	; 0x60
 802ce04:	eba9 0903 	sub.w	r9, r9, r3
 802ce08:	461a      	mov	r2, r3
 802ce0a:	4648      	mov	r0, r9
 802ce0c:	f001 fc54 	bl	802e6b8 <strncpy>
 802ce10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ce12:	785b      	ldrb	r3, [r3, #1]
 802ce14:	b11b      	cbz	r3, 802ce1e <_vfprintf_r+0xc7a>
 802ce16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ce18:	3301      	adds	r3, #1
 802ce1a:	930d      	str	r3, [sp, #52]	; 0x34
 802ce1c:	2300      	movs	r3, #0
 802ce1e:	9309      	str	r3, [sp, #36]	; 0x24
 802ce20:	2d0a      	cmp	r5, #10
 802ce22:	f176 0600 	sbcs.w	r6, r6, #0
 802ce26:	f0c0 83c7 	bcc.w	802d5b8 <_vfprintf_r+0x1414>
 802ce2a:	4646      	mov	r6, r8
 802ce2c:	464f      	mov	r7, r9
 802ce2e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802ce30:	e7c9      	b.n	802cdc6 <_vfprintf_r+0xc22>
 802ce32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802ce34:	f005 030f 	and.w	r3, r5, #15
 802ce38:	5cd3      	ldrb	r3, [r2, r3]
 802ce3a:	092d      	lsrs	r5, r5, #4
 802ce3c:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 802ce40:	0936      	lsrs	r6, r6, #4
 802ce42:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802ce46:	ea55 0306 	orrs.w	r3, r5, r6
 802ce4a:	d1f2      	bne.n	802ce32 <_vfprintf_r+0xc8e>
 802ce4c:	e3b4      	b.n	802d5b8 <_vfprintf_r+0x1414>
 802ce4e:	b933      	cbnz	r3, 802ce5e <_vfprintf_r+0xcba>
 802ce50:	f018 0f01 	tst.w	r8, #1
 802ce54:	d003      	beq.n	802ce5e <_vfprintf_r+0xcba>
 802ce56:	2330      	movs	r3, #48	; 0x30
 802ce58:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 802ce5c:	e7a9      	b.n	802cdb2 <_vfprintf_r+0xc0e>
 802ce5e:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 802ce62:	e3a9      	b.n	802d5b8 <_vfprintf_r+0x1414>
 802ce64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ce66:	2b00      	cmp	r3, #0
 802ce68:	f000 8372 	beq.w	802d550 <_vfprintf_r+0x13ac>
 802ce6c:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 802ce70:	2300      	movs	r3, #0
 802ce72:	950a      	str	r5, [sp, #40]	; 0x28
 802ce74:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 802ce78:	f7ff bb33 	b.w	802c4e2 <_vfprintf_r+0x33e>
 802ce7c:	9f08      	ldr	r7, [sp, #32]
 802ce7e:	f7ff bb9e 	b.w	802c5be <_vfprintf_r+0x41a>
 802ce82:	2010      	movs	r0, #16
 802ce84:	2a07      	cmp	r2, #7
 802ce86:	4403      	add	r3, r0
 802ce88:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 802ce8c:	6060      	str	r0, [r4, #4]
 802ce8e:	dd08      	ble.n	802cea2 <_vfprintf_r+0xcfe>
 802ce90:	4651      	mov	r1, sl
 802ce92:	4658      	mov	r0, fp
 802ce94:	aa26      	add	r2, sp, #152	; 0x98
 802ce96:	f000 fbe1 	bl	802d65c <__sprint_r>
 802ce9a:	2800      	cmp	r0, #0
 802ce9c:	f040 8336 	bne.w	802d50c <_vfprintf_r+0x1368>
 802cea0:	a929      	add	r1, sp, #164	; 0xa4
 802cea2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802cea4:	460c      	mov	r4, r1
 802cea6:	3b10      	subs	r3, #16
 802cea8:	9316      	str	r3, [sp, #88]	; 0x58
 802ceaa:	e4f9      	b.n	802c8a0 <_vfprintf_r+0x6fc>
 802ceac:	460c      	mov	r4, r1
 802ceae:	e513      	b.n	802c8d8 <_vfprintf_r+0x734>
 802ceb0:	4651      	mov	r1, sl
 802ceb2:	4658      	mov	r0, fp
 802ceb4:	aa26      	add	r2, sp, #152	; 0x98
 802ceb6:	f000 fbd1 	bl	802d65c <__sprint_r>
 802ceba:	2800      	cmp	r0, #0
 802cebc:	f040 8326 	bne.w	802d50c <_vfprintf_r+0x1368>
 802cec0:	ac29      	add	r4, sp, #164	; 0xa4
 802cec2:	e51b      	b.n	802c8fc <_vfprintf_r+0x758>
 802cec4:	4651      	mov	r1, sl
 802cec6:	4658      	mov	r0, fp
 802cec8:	aa26      	add	r2, sp, #152	; 0x98
 802ceca:	f000 fbc7 	bl	802d65c <__sprint_r>
 802cece:	2800      	cmp	r0, #0
 802ced0:	f040 831c 	bne.w	802d50c <_vfprintf_r+0x1368>
 802ced4:	ac29      	add	r4, sp, #164	; 0xa4
 802ced6:	e521      	b.n	802c91c <_vfprintf_r+0x778>
 802ced8:	2010      	movs	r0, #16
 802ceda:	2a07      	cmp	r2, #7
 802cedc:	4403      	add	r3, r0
 802cede:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 802cee2:	6060      	str	r0, [r4, #4]
 802cee4:	dd08      	ble.n	802cef8 <_vfprintf_r+0xd54>
 802cee6:	4651      	mov	r1, sl
 802cee8:	4658      	mov	r0, fp
 802ceea:	aa26      	add	r2, sp, #152	; 0x98
 802ceec:	f000 fbb6 	bl	802d65c <__sprint_r>
 802cef0:	2800      	cmp	r0, #0
 802cef2:	f040 830b 	bne.w	802d50c <_vfprintf_r+0x1368>
 802cef6:	a929      	add	r1, sp, #164	; 0xa4
 802cef8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802cefa:	460c      	mov	r4, r1
 802cefc:	3b10      	subs	r3, #16
 802cefe:	9316      	str	r3, [sp, #88]	; 0x58
 802cf00:	e515      	b.n	802c92e <_vfprintf_r+0x78a>
 802cf02:	460c      	mov	r4, r1
 802cf04:	e52f      	b.n	802c966 <_vfprintf_r+0x7c2>
 802cf06:	2010      	movs	r0, #16
 802cf08:	2b07      	cmp	r3, #7
 802cf0a:	4402      	add	r2, r0
 802cf0c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802cf10:	6060      	str	r0, [r4, #4]
 802cf12:	dd08      	ble.n	802cf26 <_vfprintf_r+0xd82>
 802cf14:	4651      	mov	r1, sl
 802cf16:	4658      	mov	r0, fp
 802cf18:	aa26      	add	r2, sp, #152	; 0x98
 802cf1a:	f000 fb9f 	bl	802d65c <__sprint_r>
 802cf1e:	2800      	cmp	r0, #0
 802cf20:	f040 82f4 	bne.w	802d50c <_vfprintf_r+0x1368>
 802cf24:	a929      	add	r1, sp, #164	; 0xa4
 802cf26:	460c      	mov	r4, r1
 802cf28:	3f10      	subs	r7, #16
 802cf2a:	e520      	b.n	802c96e <_vfprintf_r+0x7ca>
 802cf2c:	460c      	mov	r4, r1
 802cf2e:	e547      	b.n	802c9c0 <_vfprintf_r+0x81c>
 802cf30:	0803103e 	.word	0x0803103e
 802cf34:	0803104f 	.word	0x0803104f
 802cf38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802cf3a:	2b65      	cmp	r3, #101	; 0x65
 802cf3c:	f340 822e 	ble.w	802d39c <_vfprintf_r+0x11f8>
 802cf40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802cf44:	2200      	movs	r2, #0
 802cf46:	2300      	movs	r3, #0
 802cf48:	f7f5 fd9a 	bl	8022a80 <__aeabi_dcmpeq>
 802cf4c:	2800      	cmp	r0, #0
 802cf4e:	d068      	beq.n	802d022 <_vfprintf_r+0xe7e>
 802cf50:	4b6d      	ldr	r3, [pc, #436]	; (802d108 <_vfprintf_r+0xf64>)
 802cf52:	6023      	str	r3, [r4, #0]
 802cf54:	2301      	movs	r3, #1
 802cf56:	441f      	add	r7, r3
 802cf58:	6063      	str	r3, [r4, #4]
 802cf5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802cf5c:	9728      	str	r7, [sp, #160]	; 0xa0
 802cf5e:	3301      	adds	r3, #1
 802cf60:	2b07      	cmp	r3, #7
 802cf62:	9327      	str	r3, [sp, #156]	; 0x9c
 802cf64:	dc37      	bgt.n	802cfd6 <_vfprintf_r+0xe32>
 802cf66:	3408      	adds	r4, #8
 802cf68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802cf6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cf6c:	4293      	cmp	r3, r2
 802cf6e:	db03      	blt.n	802cf78 <_vfprintf_r+0xdd4>
 802cf70:	f018 0f01 	tst.w	r8, #1
 802cf74:	f43f ad36 	beq.w	802c9e4 <_vfprintf_r+0x840>
 802cf78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802cf7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802cf7c:	6023      	str	r3, [r4, #0]
 802cf7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802cf80:	6063      	str	r3, [r4, #4]
 802cf82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802cf84:	4413      	add	r3, r2
 802cf86:	9328      	str	r3, [sp, #160]	; 0xa0
 802cf88:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802cf8a:	3301      	adds	r3, #1
 802cf8c:	2b07      	cmp	r3, #7
 802cf8e:	9327      	str	r3, [sp, #156]	; 0x9c
 802cf90:	dc2b      	bgt.n	802cfea <_vfprintf_r+0xe46>
 802cf92:	3408      	adds	r4, #8
 802cf94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cf96:	1e5d      	subs	r5, r3, #1
 802cf98:	2d00      	cmp	r5, #0
 802cf9a:	f77f ad23 	ble.w	802c9e4 <_vfprintf_r+0x840>
 802cf9e:	2710      	movs	r7, #16
 802cfa0:	4e5a      	ldr	r6, [pc, #360]	; (802d10c <_vfprintf_r+0xf68>)
 802cfa2:	2d10      	cmp	r5, #16
 802cfa4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802cfa8:	f104 0108 	add.w	r1, r4, #8
 802cfac:	f103 0301 	add.w	r3, r3, #1
 802cfb0:	6026      	str	r6, [r4, #0]
 802cfb2:	dc24      	bgt.n	802cffe <_vfprintf_r+0xe5a>
 802cfb4:	6065      	str	r5, [r4, #4]
 802cfb6:	2b07      	cmp	r3, #7
 802cfb8:	4415      	add	r5, r2
 802cfba:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 802cfbe:	f340 8284 	ble.w	802d4ca <_vfprintf_r+0x1326>
 802cfc2:	4651      	mov	r1, sl
 802cfc4:	4658      	mov	r0, fp
 802cfc6:	aa26      	add	r2, sp, #152	; 0x98
 802cfc8:	f000 fb48 	bl	802d65c <__sprint_r>
 802cfcc:	2800      	cmp	r0, #0
 802cfce:	f040 829d 	bne.w	802d50c <_vfprintf_r+0x1368>
 802cfd2:	ac29      	add	r4, sp, #164	; 0xa4
 802cfd4:	e506      	b.n	802c9e4 <_vfprintf_r+0x840>
 802cfd6:	4651      	mov	r1, sl
 802cfd8:	4658      	mov	r0, fp
 802cfda:	aa26      	add	r2, sp, #152	; 0x98
 802cfdc:	f000 fb3e 	bl	802d65c <__sprint_r>
 802cfe0:	2800      	cmp	r0, #0
 802cfe2:	f040 8293 	bne.w	802d50c <_vfprintf_r+0x1368>
 802cfe6:	ac29      	add	r4, sp, #164	; 0xa4
 802cfe8:	e7be      	b.n	802cf68 <_vfprintf_r+0xdc4>
 802cfea:	4651      	mov	r1, sl
 802cfec:	4658      	mov	r0, fp
 802cfee:	aa26      	add	r2, sp, #152	; 0x98
 802cff0:	f000 fb34 	bl	802d65c <__sprint_r>
 802cff4:	2800      	cmp	r0, #0
 802cff6:	f040 8289 	bne.w	802d50c <_vfprintf_r+0x1368>
 802cffa:	ac29      	add	r4, sp, #164	; 0xa4
 802cffc:	e7ca      	b.n	802cf94 <_vfprintf_r+0xdf0>
 802cffe:	3210      	adds	r2, #16
 802d000:	2b07      	cmp	r3, #7
 802d002:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802d006:	6067      	str	r7, [r4, #4]
 802d008:	dd08      	ble.n	802d01c <_vfprintf_r+0xe78>
 802d00a:	4651      	mov	r1, sl
 802d00c:	4658      	mov	r0, fp
 802d00e:	aa26      	add	r2, sp, #152	; 0x98
 802d010:	f000 fb24 	bl	802d65c <__sprint_r>
 802d014:	2800      	cmp	r0, #0
 802d016:	f040 8279 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d01a:	a929      	add	r1, sp, #164	; 0xa4
 802d01c:	460c      	mov	r4, r1
 802d01e:	3d10      	subs	r5, #16
 802d020:	e7bf      	b.n	802cfa2 <_vfprintf_r+0xdfe>
 802d022:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802d024:	2b00      	cmp	r3, #0
 802d026:	dc73      	bgt.n	802d110 <_vfprintf_r+0xf6c>
 802d028:	4b37      	ldr	r3, [pc, #220]	; (802d108 <_vfprintf_r+0xf64>)
 802d02a:	6023      	str	r3, [r4, #0]
 802d02c:	2301      	movs	r3, #1
 802d02e:	441f      	add	r7, r3
 802d030:	6063      	str	r3, [r4, #4]
 802d032:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802d034:	9728      	str	r7, [sp, #160]	; 0xa0
 802d036:	3301      	adds	r3, #1
 802d038:	2b07      	cmp	r3, #7
 802d03a:	9327      	str	r3, [sp, #156]	; 0x9c
 802d03c:	dc3d      	bgt.n	802d0ba <_vfprintf_r+0xf16>
 802d03e:	3408      	adds	r4, #8
 802d040:	9909      	ldr	r1, [sp, #36]	; 0x24
 802d042:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802d044:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802d046:	430b      	orrs	r3, r1
 802d048:	f008 0101 	and.w	r1, r8, #1
 802d04c:	430b      	orrs	r3, r1
 802d04e:	f43f acc9 	beq.w	802c9e4 <_vfprintf_r+0x840>
 802d052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802d054:	6023      	str	r3, [r4, #0]
 802d056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802d058:	441a      	add	r2, r3
 802d05a:	6063      	str	r3, [r4, #4]
 802d05c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802d05e:	9228      	str	r2, [sp, #160]	; 0xa0
 802d060:	3301      	adds	r3, #1
 802d062:	2b07      	cmp	r3, #7
 802d064:	9327      	str	r3, [sp, #156]	; 0x9c
 802d066:	dc32      	bgt.n	802d0ce <_vfprintf_r+0xf2a>
 802d068:	3408      	adds	r4, #8
 802d06a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 802d06c:	2d00      	cmp	r5, #0
 802d06e:	da1b      	bge.n	802d0a8 <_vfprintf_r+0xf04>
 802d070:	4623      	mov	r3, r4
 802d072:	2710      	movs	r7, #16
 802d074:	4e25      	ldr	r6, [pc, #148]	; (802d10c <_vfprintf_r+0xf68>)
 802d076:	426d      	negs	r5, r5
 802d078:	2d10      	cmp	r5, #16
 802d07a:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 802d07e:	f104 0408 	add.w	r4, r4, #8
 802d082:	f102 0201 	add.w	r2, r2, #1
 802d086:	601e      	str	r6, [r3, #0]
 802d088:	dc2b      	bgt.n	802d0e2 <_vfprintf_r+0xf3e>
 802d08a:	605d      	str	r5, [r3, #4]
 802d08c:	2a07      	cmp	r2, #7
 802d08e:	440d      	add	r5, r1
 802d090:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 802d094:	dd08      	ble.n	802d0a8 <_vfprintf_r+0xf04>
 802d096:	4651      	mov	r1, sl
 802d098:	4658      	mov	r0, fp
 802d09a:	aa26      	add	r2, sp, #152	; 0x98
 802d09c:	f000 fade 	bl	802d65c <__sprint_r>
 802d0a0:	2800      	cmp	r0, #0
 802d0a2:	f040 8233 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d0a6:	ac29      	add	r4, sp, #164	; 0xa4
 802d0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d0aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802d0ac:	6063      	str	r3, [r4, #4]
 802d0ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802d0b0:	f8c4 9000 	str.w	r9, [r4]
 802d0b4:	4413      	add	r3, r2
 802d0b6:	9328      	str	r3, [sp, #160]	; 0xa0
 802d0b8:	e48d      	b.n	802c9d6 <_vfprintf_r+0x832>
 802d0ba:	4651      	mov	r1, sl
 802d0bc:	4658      	mov	r0, fp
 802d0be:	aa26      	add	r2, sp, #152	; 0x98
 802d0c0:	f000 facc 	bl	802d65c <__sprint_r>
 802d0c4:	2800      	cmp	r0, #0
 802d0c6:	f040 8221 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d0ca:	ac29      	add	r4, sp, #164	; 0xa4
 802d0cc:	e7b8      	b.n	802d040 <_vfprintf_r+0xe9c>
 802d0ce:	4651      	mov	r1, sl
 802d0d0:	4658      	mov	r0, fp
 802d0d2:	aa26      	add	r2, sp, #152	; 0x98
 802d0d4:	f000 fac2 	bl	802d65c <__sprint_r>
 802d0d8:	2800      	cmp	r0, #0
 802d0da:	f040 8217 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d0de:	ac29      	add	r4, sp, #164	; 0xa4
 802d0e0:	e7c3      	b.n	802d06a <_vfprintf_r+0xec6>
 802d0e2:	3110      	adds	r1, #16
 802d0e4:	2a07      	cmp	r2, #7
 802d0e6:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 802d0ea:	605f      	str	r7, [r3, #4]
 802d0ec:	dd08      	ble.n	802d100 <_vfprintf_r+0xf5c>
 802d0ee:	4651      	mov	r1, sl
 802d0f0:	4658      	mov	r0, fp
 802d0f2:	aa26      	add	r2, sp, #152	; 0x98
 802d0f4:	f000 fab2 	bl	802d65c <__sprint_r>
 802d0f8:	2800      	cmp	r0, #0
 802d0fa:	f040 8207 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d0fe:	ac29      	add	r4, sp, #164	; 0xa4
 802d100:	4623      	mov	r3, r4
 802d102:	3d10      	subs	r5, #16
 802d104:	e7b8      	b.n	802d078 <_vfprintf_r+0xed4>
 802d106:	bf00      	nop
 802d108:	08031060 	.word	0x08031060
 802d10c:	08031072 	.word	0x08031072
 802d110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d112:	42ab      	cmp	r3, r5
 802d114:	bfa8      	it	ge
 802d116:	462b      	movge	r3, r5
 802d118:	2b00      	cmp	r3, #0
 802d11a:	9307      	str	r3, [sp, #28]
 802d11c:	dd0a      	ble.n	802d134 <_vfprintf_r+0xf90>
 802d11e:	441f      	add	r7, r3
 802d120:	e9c4 9300 	strd	r9, r3, [r4]
 802d124:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802d126:	9728      	str	r7, [sp, #160]	; 0xa0
 802d128:	3301      	adds	r3, #1
 802d12a:	2b07      	cmp	r3, #7
 802d12c:	9327      	str	r3, [sp, #156]	; 0x9c
 802d12e:	f300 8084 	bgt.w	802d23a <_vfprintf_r+0x1096>
 802d132:	3408      	adds	r4, #8
 802d134:	9b07      	ldr	r3, [sp, #28]
 802d136:	2b00      	cmp	r3, #0
 802d138:	bfb4      	ite	lt
 802d13a:	462f      	movlt	r7, r5
 802d13c:	1aef      	subge	r7, r5, r3
 802d13e:	2f00      	cmp	r7, #0
 802d140:	dd19      	ble.n	802d176 <_vfprintf_r+0xfd2>
 802d142:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802d146:	4894      	ldr	r0, [pc, #592]	; (802d398 <_vfprintf_r+0x11f4>)
 802d148:	2f10      	cmp	r7, #16
 802d14a:	f103 0301 	add.w	r3, r3, #1
 802d14e:	f104 0108 	add.w	r1, r4, #8
 802d152:	6020      	str	r0, [r4, #0]
 802d154:	dc7b      	bgt.n	802d24e <_vfprintf_r+0x10aa>
 802d156:	6067      	str	r7, [r4, #4]
 802d158:	2b07      	cmp	r3, #7
 802d15a:	4417      	add	r7, r2
 802d15c:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 802d160:	f340 8088 	ble.w	802d274 <_vfprintf_r+0x10d0>
 802d164:	4651      	mov	r1, sl
 802d166:	4658      	mov	r0, fp
 802d168:	aa26      	add	r2, sp, #152	; 0x98
 802d16a:	f000 fa77 	bl	802d65c <__sprint_r>
 802d16e:	2800      	cmp	r0, #0
 802d170:	f040 81cc 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d174:	ac29      	add	r4, sp, #164	; 0xa4
 802d176:	f418 6f80 	tst.w	r8, #1024	; 0x400
 802d17a:	444d      	add	r5, r9
 802d17c:	d009      	beq.n	802d192 <_vfprintf_r+0xfee>
 802d17e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802d180:	2b00      	cmp	r3, #0
 802d182:	d179      	bne.n	802d278 <_vfprintf_r+0x10d4>
 802d184:	2e00      	cmp	r6, #0
 802d186:	d179      	bne.n	802d27c <_vfprintf_r+0x10d8>
 802d188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d18a:	444b      	add	r3, r9
 802d18c:	429d      	cmp	r5, r3
 802d18e:	bf28      	it	cs
 802d190:	461d      	movcs	r5, r3
 802d192:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802d194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802d196:	4293      	cmp	r3, r2
 802d198:	db02      	blt.n	802d1a0 <_vfprintf_r+0xffc>
 802d19a:	f018 0f01 	tst.w	r8, #1
 802d19e:	d00e      	beq.n	802d1be <_vfprintf_r+0x101a>
 802d1a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802d1a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802d1a4:	6023      	str	r3, [r4, #0]
 802d1a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802d1a8:	6063      	str	r3, [r4, #4]
 802d1aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802d1ac:	4413      	add	r3, r2
 802d1ae:	9328      	str	r3, [sp, #160]	; 0xa0
 802d1b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802d1b2:	3301      	adds	r3, #1
 802d1b4:	2b07      	cmp	r3, #7
 802d1b6:	9327      	str	r3, [sp, #156]	; 0x9c
 802d1b8:	f300 80da 	bgt.w	802d370 <_vfprintf_r+0x11cc>
 802d1bc:	3408      	adds	r4, #8
 802d1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d1c0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 802d1c2:	1b9e      	subs	r6, r3, r6
 802d1c4:	444b      	add	r3, r9
 802d1c6:	1b5b      	subs	r3, r3, r5
 802d1c8:	429e      	cmp	r6, r3
 802d1ca:	bfa8      	it	ge
 802d1cc:	461e      	movge	r6, r3
 802d1ce:	2e00      	cmp	r6, #0
 802d1d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802d1d2:	dd0a      	ble.n	802d1ea <_vfprintf_r+0x1046>
 802d1d4:	4433      	add	r3, r6
 802d1d6:	9328      	str	r3, [sp, #160]	; 0xa0
 802d1d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802d1da:	e9c4 5600 	strd	r5, r6, [r4]
 802d1de:	3301      	adds	r3, #1
 802d1e0:	2b07      	cmp	r3, #7
 802d1e2:	9327      	str	r3, [sp, #156]	; 0x9c
 802d1e4:	f300 80ce 	bgt.w	802d384 <_vfprintf_r+0x11e0>
 802d1e8:	3408      	adds	r4, #8
 802d1ea:	9d20      	ldr	r5, [sp, #128]	; 0x80
 802d1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d1ee:	2e00      	cmp	r6, #0
 802d1f0:	eba3 0505 	sub.w	r5, r3, r5
 802d1f4:	bfa8      	it	ge
 802d1f6:	1bad      	subge	r5, r5, r6
 802d1f8:	2d00      	cmp	r5, #0
 802d1fa:	f77f abf3 	ble.w	802c9e4 <_vfprintf_r+0x840>
 802d1fe:	2710      	movs	r7, #16
 802d200:	4e65      	ldr	r6, [pc, #404]	; (802d398 <_vfprintf_r+0x11f4>)
 802d202:	2d10      	cmp	r5, #16
 802d204:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802d208:	f104 0108 	add.w	r1, r4, #8
 802d20c:	f103 0301 	add.w	r3, r3, #1
 802d210:	6026      	str	r6, [r4, #0]
 802d212:	f77f aecf 	ble.w	802cfb4 <_vfprintf_r+0xe10>
 802d216:	3210      	adds	r2, #16
 802d218:	2b07      	cmp	r3, #7
 802d21a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802d21e:	6067      	str	r7, [r4, #4]
 802d220:	dd08      	ble.n	802d234 <_vfprintf_r+0x1090>
 802d222:	4651      	mov	r1, sl
 802d224:	4658      	mov	r0, fp
 802d226:	aa26      	add	r2, sp, #152	; 0x98
 802d228:	f000 fa18 	bl	802d65c <__sprint_r>
 802d22c:	2800      	cmp	r0, #0
 802d22e:	f040 816d 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d232:	a929      	add	r1, sp, #164	; 0xa4
 802d234:	460c      	mov	r4, r1
 802d236:	3d10      	subs	r5, #16
 802d238:	e7e3      	b.n	802d202 <_vfprintf_r+0x105e>
 802d23a:	4651      	mov	r1, sl
 802d23c:	4658      	mov	r0, fp
 802d23e:	aa26      	add	r2, sp, #152	; 0x98
 802d240:	f000 fa0c 	bl	802d65c <__sprint_r>
 802d244:	2800      	cmp	r0, #0
 802d246:	f040 8161 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d24a:	ac29      	add	r4, sp, #164	; 0xa4
 802d24c:	e772      	b.n	802d134 <_vfprintf_r+0xf90>
 802d24e:	2010      	movs	r0, #16
 802d250:	2b07      	cmp	r3, #7
 802d252:	4402      	add	r2, r0
 802d254:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802d258:	6060      	str	r0, [r4, #4]
 802d25a:	dd08      	ble.n	802d26e <_vfprintf_r+0x10ca>
 802d25c:	4651      	mov	r1, sl
 802d25e:	4658      	mov	r0, fp
 802d260:	aa26      	add	r2, sp, #152	; 0x98
 802d262:	f000 f9fb 	bl	802d65c <__sprint_r>
 802d266:	2800      	cmp	r0, #0
 802d268:	f040 8150 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d26c:	a929      	add	r1, sp, #164	; 0xa4
 802d26e:	460c      	mov	r4, r1
 802d270:	3f10      	subs	r7, #16
 802d272:	e766      	b.n	802d142 <_vfprintf_r+0xf9e>
 802d274:	460c      	mov	r4, r1
 802d276:	e77e      	b.n	802d176 <_vfprintf_r+0xfd2>
 802d278:	2e00      	cmp	r6, #0
 802d27a:	d049      	beq.n	802d310 <_vfprintf_r+0x116c>
 802d27c:	3e01      	subs	r6, #1
 802d27e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802d280:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802d282:	6023      	str	r3, [r4, #0]
 802d284:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802d286:	6063      	str	r3, [r4, #4]
 802d288:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802d28a:	4413      	add	r3, r2
 802d28c:	9328      	str	r3, [sp, #160]	; 0xa0
 802d28e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802d290:	3301      	adds	r3, #1
 802d292:	2b07      	cmp	r3, #7
 802d294:	9327      	str	r3, [sp, #156]	; 0x9c
 802d296:	dc42      	bgt.n	802d31e <_vfprintf_r+0x117a>
 802d298:	3408      	adds	r4, #8
 802d29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d29c:	444b      	add	r3, r9
 802d29e:	1b5a      	subs	r2, r3, r5
 802d2a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802d2a2:	781b      	ldrb	r3, [r3, #0]
 802d2a4:	429a      	cmp	r2, r3
 802d2a6:	bfa8      	it	ge
 802d2a8:	461a      	movge	r2, r3
 802d2aa:	2a00      	cmp	r2, #0
 802d2ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802d2ae:	9207      	str	r2, [sp, #28]
 802d2b0:	dd09      	ble.n	802d2c6 <_vfprintf_r+0x1122>
 802d2b2:	4413      	add	r3, r2
 802d2b4:	9328      	str	r3, [sp, #160]	; 0xa0
 802d2b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802d2b8:	e9c4 5200 	strd	r5, r2, [r4]
 802d2bc:	3301      	adds	r3, #1
 802d2be:	2b07      	cmp	r3, #7
 802d2c0:	9327      	str	r3, [sp, #156]	; 0x9c
 802d2c2:	dc36      	bgt.n	802d332 <_vfprintf_r+0x118e>
 802d2c4:	3408      	adds	r4, #8
 802d2c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802d2c8:	781f      	ldrb	r7, [r3, #0]
 802d2ca:	9b07      	ldr	r3, [sp, #28]
 802d2cc:	2b00      	cmp	r3, #0
 802d2ce:	bfa8      	it	ge
 802d2d0:	1aff      	subge	r7, r7, r3
 802d2d2:	2f00      	cmp	r7, #0
 802d2d4:	dd18      	ble.n	802d308 <_vfprintf_r+0x1164>
 802d2d6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802d2da:	482f      	ldr	r0, [pc, #188]	; (802d398 <_vfprintf_r+0x11f4>)
 802d2dc:	2f10      	cmp	r7, #16
 802d2de:	f103 0301 	add.w	r3, r3, #1
 802d2e2:	f104 0108 	add.w	r1, r4, #8
 802d2e6:	6020      	str	r0, [r4, #0]
 802d2e8:	dc2d      	bgt.n	802d346 <_vfprintf_r+0x11a2>
 802d2ea:	6067      	str	r7, [r4, #4]
 802d2ec:	2b07      	cmp	r3, #7
 802d2ee:	4417      	add	r7, r2
 802d2f0:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 802d2f4:	dd3a      	ble.n	802d36c <_vfprintf_r+0x11c8>
 802d2f6:	4651      	mov	r1, sl
 802d2f8:	4658      	mov	r0, fp
 802d2fa:	aa26      	add	r2, sp, #152	; 0x98
 802d2fc:	f000 f9ae 	bl	802d65c <__sprint_r>
 802d300:	2800      	cmp	r0, #0
 802d302:	f040 8103 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d306:	ac29      	add	r4, sp, #164	; 0xa4
 802d308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802d30a:	781b      	ldrb	r3, [r3, #0]
 802d30c:	441d      	add	r5, r3
 802d30e:	e736      	b.n	802d17e <_vfprintf_r+0xfda>
 802d310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802d312:	3b01      	subs	r3, #1
 802d314:	930d      	str	r3, [sp, #52]	; 0x34
 802d316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802d318:	3b01      	subs	r3, #1
 802d31a:	930c      	str	r3, [sp, #48]	; 0x30
 802d31c:	e7af      	b.n	802d27e <_vfprintf_r+0x10da>
 802d31e:	4651      	mov	r1, sl
 802d320:	4658      	mov	r0, fp
 802d322:	aa26      	add	r2, sp, #152	; 0x98
 802d324:	f000 f99a 	bl	802d65c <__sprint_r>
 802d328:	2800      	cmp	r0, #0
 802d32a:	f040 80ef 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d32e:	ac29      	add	r4, sp, #164	; 0xa4
 802d330:	e7b3      	b.n	802d29a <_vfprintf_r+0x10f6>
 802d332:	4651      	mov	r1, sl
 802d334:	4658      	mov	r0, fp
 802d336:	aa26      	add	r2, sp, #152	; 0x98
 802d338:	f000 f990 	bl	802d65c <__sprint_r>
 802d33c:	2800      	cmp	r0, #0
 802d33e:	f040 80e5 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d342:	ac29      	add	r4, sp, #164	; 0xa4
 802d344:	e7bf      	b.n	802d2c6 <_vfprintf_r+0x1122>
 802d346:	2010      	movs	r0, #16
 802d348:	2b07      	cmp	r3, #7
 802d34a:	4402      	add	r2, r0
 802d34c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802d350:	6060      	str	r0, [r4, #4]
 802d352:	dd08      	ble.n	802d366 <_vfprintf_r+0x11c2>
 802d354:	4651      	mov	r1, sl
 802d356:	4658      	mov	r0, fp
 802d358:	aa26      	add	r2, sp, #152	; 0x98
 802d35a:	f000 f97f 	bl	802d65c <__sprint_r>
 802d35e:	2800      	cmp	r0, #0
 802d360:	f040 80d4 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d364:	a929      	add	r1, sp, #164	; 0xa4
 802d366:	460c      	mov	r4, r1
 802d368:	3f10      	subs	r7, #16
 802d36a:	e7b4      	b.n	802d2d6 <_vfprintf_r+0x1132>
 802d36c:	460c      	mov	r4, r1
 802d36e:	e7cb      	b.n	802d308 <_vfprintf_r+0x1164>
 802d370:	4651      	mov	r1, sl
 802d372:	4658      	mov	r0, fp
 802d374:	aa26      	add	r2, sp, #152	; 0x98
 802d376:	f000 f971 	bl	802d65c <__sprint_r>
 802d37a:	2800      	cmp	r0, #0
 802d37c:	f040 80c6 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d380:	ac29      	add	r4, sp, #164	; 0xa4
 802d382:	e71c      	b.n	802d1be <_vfprintf_r+0x101a>
 802d384:	4651      	mov	r1, sl
 802d386:	4658      	mov	r0, fp
 802d388:	aa26      	add	r2, sp, #152	; 0x98
 802d38a:	f000 f967 	bl	802d65c <__sprint_r>
 802d38e:	2800      	cmp	r0, #0
 802d390:	f040 80bc 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d394:	ac29      	add	r4, sp, #164	; 0xa4
 802d396:	e728      	b.n	802d1ea <_vfprintf_r+0x1046>
 802d398:	08031072 	.word	0x08031072
 802d39c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802d39e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802d3a0:	2a01      	cmp	r2, #1
 802d3a2:	f107 0701 	add.w	r7, r7, #1
 802d3a6:	f103 0301 	add.w	r3, r3, #1
 802d3aa:	f104 0508 	add.w	r5, r4, #8
 802d3ae:	dc02      	bgt.n	802d3b6 <_vfprintf_r+0x1212>
 802d3b0:	f018 0f01 	tst.w	r8, #1
 802d3b4:	d07e      	beq.n	802d4b4 <_vfprintf_r+0x1310>
 802d3b6:	2201      	movs	r2, #1
 802d3b8:	2b07      	cmp	r3, #7
 802d3ba:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 802d3be:	f8c4 9000 	str.w	r9, [r4]
 802d3c2:	6062      	str	r2, [r4, #4]
 802d3c4:	dd08      	ble.n	802d3d8 <_vfprintf_r+0x1234>
 802d3c6:	4651      	mov	r1, sl
 802d3c8:	4658      	mov	r0, fp
 802d3ca:	aa26      	add	r2, sp, #152	; 0x98
 802d3cc:	f000 f946 	bl	802d65c <__sprint_r>
 802d3d0:	2800      	cmp	r0, #0
 802d3d2:	f040 809b 	bne.w	802d50c <_vfprintf_r+0x1368>
 802d3d6:	ad29      	add	r5, sp, #164	; 0xa4
 802d3d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802d3da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802d3dc:	602b      	str	r3, [r5, #0]
 802d3de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802d3e0:	606b      	str	r3, [r5, #4]
 802d3e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802d3e4:	4413      	add	r3, r2
 802d3e6:	9328      	str	r3, [sp, #160]	; 0xa0
 802d3e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802d3ea:	3301      	adds	r3, #1
 802d3ec:	2b07      	cmp	r3, #7
 802d3ee:	9327      	str	r3, [sp, #156]	; 0x9c
 802d3f0:	dc32      	bgt.n	802d458 <_vfprintf_r+0x12b4>
 802d3f2:	3508      	adds	r5, #8
 802d3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d3f6:	2200      	movs	r2, #0
 802d3f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802d3fc:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
 802d400:	1e5c      	subs	r4, r3, #1
 802d402:	2300      	movs	r3, #0
 802d404:	f7f5 fb3c 	bl	8022a80 <__aeabi_dcmpeq>
 802d408:	2800      	cmp	r0, #0
 802d40a:	d12e      	bne.n	802d46a <_vfprintf_r+0x12c6>
 802d40c:	f109 0301 	add.w	r3, r9, #1
 802d410:	e9c5 3400 	strd	r3, r4, [r5]
 802d414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d416:	3701      	adds	r7, #1
 802d418:	3e01      	subs	r6, #1
 802d41a:	441e      	add	r6, r3
 802d41c:	2f07      	cmp	r7, #7
 802d41e:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
 802d422:	dd50      	ble.n	802d4c6 <_vfprintf_r+0x1322>
 802d424:	4651      	mov	r1, sl
 802d426:	4658      	mov	r0, fp
 802d428:	aa26      	add	r2, sp, #152	; 0x98
 802d42a:	f000 f917 	bl	802d65c <__sprint_r>
 802d42e:	2800      	cmp	r0, #0
 802d430:	d16c      	bne.n	802d50c <_vfprintf_r+0x1368>
 802d432:	ad29      	add	r5, sp, #164	; 0xa4
 802d434:	ab22      	add	r3, sp, #136	; 0x88
 802d436:	602b      	str	r3, [r5, #0]
 802d438:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802d43a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802d43c:	606b      	str	r3, [r5, #4]
 802d43e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802d440:	4413      	add	r3, r2
 802d442:	9328      	str	r3, [sp, #160]	; 0xa0
 802d444:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802d446:	3301      	adds	r3, #1
 802d448:	2b07      	cmp	r3, #7
 802d44a:	9327      	str	r3, [sp, #156]	; 0x9c
 802d44c:	f73f adb9 	bgt.w	802cfc2 <_vfprintf_r+0xe1e>
 802d450:	f105 0408 	add.w	r4, r5, #8
 802d454:	f7ff bac6 	b.w	802c9e4 <_vfprintf_r+0x840>
 802d458:	4651      	mov	r1, sl
 802d45a:	4658      	mov	r0, fp
 802d45c:	aa26      	add	r2, sp, #152	; 0x98
 802d45e:	f000 f8fd 	bl	802d65c <__sprint_r>
 802d462:	2800      	cmp	r0, #0
 802d464:	d152      	bne.n	802d50c <_vfprintf_r+0x1368>
 802d466:	ad29      	add	r5, sp, #164	; 0xa4
 802d468:	e7c4      	b.n	802d3f4 <_vfprintf_r+0x1250>
 802d46a:	2c00      	cmp	r4, #0
 802d46c:	dde2      	ble.n	802d434 <_vfprintf_r+0x1290>
 802d46e:	2710      	movs	r7, #16
 802d470:	4e58      	ldr	r6, [pc, #352]	; (802d5d4 <_vfprintf_r+0x1430>)
 802d472:	2c10      	cmp	r4, #16
 802d474:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802d478:	f105 0108 	add.w	r1, r5, #8
 802d47c:	f103 0301 	add.w	r3, r3, #1
 802d480:	602e      	str	r6, [r5, #0]
 802d482:	dc07      	bgt.n	802d494 <_vfprintf_r+0x12f0>
 802d484:	606c      	str	r4, [r5, #4]
 802d486:	2b07      	cmp	r3, #7
 802d488:	4414      	add	r4, r2
 802d48a:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 802d48e:	dcc9      	bgt.n	802d424 <_vfprintf_r+0x1280>
 802d490:	460d      	mov	r5, r1
 802d492:	e7cf      	b.n	802d434 <_vfprintf_r+0x1290>
 802d494:	3210      	adds	r2, #16
 802d496:	2b07      	cmp	r3, #7
 802d498:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802d49c:	606f      	str	r7, [r5, #4]
 802d49e:	dd06      	ble.n	802d4ae <_vfprintf_r+0x130a>
 802d4a0:	4651      	mov	r1, sl
 802d4a2:	4658      	mov	r0, fp
 802d4a4:	aa26      	add	r2, sp, #152	; 0x98
 802d4a6:	f000 f8d9 	bl	802d65c <__sprint_r>
 802d4aa:	bb78      	cbnz	r0, 802d50c <_vfprintf_r+0x1368>
 802d4ac:	a929      	add	r1, sp, #164	; 0xa4
 802d4ae:	460d      	mov	r5, r1
 802d4b0:	3c10      	subs	r4, #16
 802d4b2:	e7de      	b.n	802d472 <_vfprintf_r+0x12ce>
 802d4b4:	2201      	movs	r2, #1
 802d4b6:	2b07      	cmp	r3, #7
 802d4b8:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 802d4bc:	f8c4 9000 	str.w	r9, [r4]
 802d4c0:	6062      	str	r2, [r4, #4]
 802d4c2:	ddb7      	ble.n	802d434 <_vfprintf_r+0x1290>
 802d4c4:	e7ae      	b.n	802d424 <_vfprintf_r+0x1280>
 802d4c6:	3508      	adds	r5, #8
 802d4c8:	e7b4      	b.n	802d434 <_vfprintf_r+0x1290>
 802d4ca:	460c      	mov	r4, r1
 802d4cc:	f7ff ba8a 	b.w	802c9e4 <_vfprintf_r+0x840>
 802d4d0:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 802d4d4:	1a9d      	subs	r5, r3, r2
 802d4d6:	2d00      	cmp	r5, #0
 802d4d8:	f77f aa88 	ble.w	802c9ec <_vfprintf_r+0x848>
 802d4dc:	2710      	movs	r7, #16
 802d4de:	4e3e      	ldr	r6, [pc, #248]	; (802d5d8 <_vfprintf_r+0x1434>)
 802d4e0:	2d10      	cmp	r5, #16
 802d4e2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802d4e6:	6026      	str	r6, [r4, #0]
 802d4e8:	f103 0301 	add.w	r3, r3, #1
 802d4ec:	dc18      	bgt.n	802d520 <_vfprintf_r+0x137c>
 802d4ee:	6065      	str	r5, [r4, #4]
 802d4f0:	2b07      	cmp	r3, #7
 802d4f2:	4415      	add	r5, r2
 802d4f4:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 802d4f8:	f77f aa78 	ble.w	802c9ec <_vfprintf_r+0x848>
 802d4fc:	4651      	mov	r1, sl
 802d4fe:	4658      	mov	r0, fp
 802d500:	aa26      	add	r2, sp, #152	; 0x98
 802d502:	f000 f8ab 	bl	802d65c <__sprint_r>
 802d506:	2800      	cmp	r0, #0
 802d508:	f43f aa70 	beq.w	802c9ec <_vfprintf_r+0x848>
 802d50c:	9b08      	ldr	r3, [sp, #32]
 802d50e:	2b00      	cmp	r3, #0
 802d510:	f43f a88c 	beq.w	802c62c <_vfprintf_r+0x488>
 802d514:	4619      	mov	r1, r3
 802d516:	4658      	mov	r0, fp
 802d518:	f7fe fb3e 	bl	802bb98 <_free_r>
 802d51c:	f7ff b886 	b.w	802c62c <_vfprintf_r+0x488>
 802d520:	3210      	adds	r2, #16
 802d522:	2b07      	cmp	r3, #7
 802d524:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802d528:	6067      	str	r7, [r4, #4]
 802d52a:	dc02      	bgt.n	802d532 <_vfprintf_r+0x138e>
 802d52c:	3408      	adds	r4, #8
 802d52e:	3d10      	subs	r5, #16
 802d530:	e7d6      	b.n	802d4e0 <_vfprintf_r+0x133c>
 802d532:	4651      	mov	r1, sl
 802d534:	4658      	mov	r0, fp
 802d536:	aa26      	add	r2, sp, #152	; 0x98
 802d538:	f000 f890 	bl	802d65c <__sprint_r>
 802d53c:	2800      	cmp	r0, #0
 802d53e:	d1e5      	bne.n	802d50c <_vfprintf_r+0x1368>
 802d540:	ac29      	add	r4, sp, #164	; 0xa4
 802d542:	e7f4      	b.n	802d52e <_vfprintf_r+0x138a>
 802d544:	4658      	mov	r0, fp
 802d546:	9908      	ldr	r1, [sp, #32]
 802d548:	f7fe fb26 	bl	802bb98 <_free_r>
 802d54c:	f7ff ba66 	b.w	802ca1c <_vfprintf_r+0x878>
 802d550:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802d552:	b91b      	cbnz	r3, 802d55c <_vfprintf_r+0x13b8>
 802d554:	2300      	movs	r3, #0
 802d556:	9327      	str	r3, [sp, #156]	; 0x9c
 802d558:	f7ff b868 	b.w	802c62c <_vfprintf_r+0x488>
 802d55c:	4651      	mov	r1, sl
 802d55e:	4658      	mov	r0, fp
 802d560:	aa26      	add	r2, sp, #152	; 0x98
 802d562:	f000 f87b 	bl	802d65c <__sprint_r>
 802d566:	2800      	cmp	r0, #0
 802d568:	d0f4      	beq.n	802d554 <_vfprintf_r+0x13b0>
 802d56a:	f7ff b85f 	b.w	802c62c <_vfprintf_r+0x488>
 802d56e:	ea55 0206 	orrs.w	r2, r5, r6
 802d572:	f8cd 8020 	str.w	r8, [sp, #32]
 802d576:	f43f ab76 	beq.w	802cc66 <_vfprintf_r+0xac2>
 802d57a:	2b01      	cmp	r3, #1
 802d57c:	f43f ac12 	beq.w	802cda4 <_vfprintf_r+0xc00>
 802d580:	2b02      	cmp	r3, #2
 802d582:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 802d586:	f43f ac54 	beq.w	802ce32 <_vfprintf_r+0xc8e>
 802d58a:	f005 0307 	and.w	r3, r5, #7
 802d58e:	08ed      	lsrs	r5, r5, #3
 802d590:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 802d594:	08f6      	lsrs	r6, r6, #3
 802d596:	3330      	adds	r3, #48	; 0x30
 802d598:	ea55 0106 	orrs.w	r1, r5, r6
 802d59c:	464a      	mov	r2, r9
 802d59e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802d5a2:	d1f2      	bne.n	802d58a <_vfprintf_r+0x13e6>
 802d5a4:	9908      	ldr	r1, [sp, #32]
 802d5a6:	07c8      	lsls	r0, r1, #31
 802d5a8:	d506      	bpl.n	802d5b8 <_vfprintf_r+0x1414>
 802d5aa:	2b30      	cmp	r3, #48	; 0x30
 802d5ac:	d004      	beq.n	802d5b8 <_vfprintf_r+0x1414>
 802d5ae:	2330      	movs	r3, #48	; 0x30
 802d5b0:	f809 3c01 	strb.w	r3, [r9, #-1]
 802d5b4:	f1a2 0902 	sub.w	r9, r2, #2
 802d5b8:	ab52      	add	r3, sp, #328	; 0x148
 802d5ba:	eba3 0309 	sub.w	r3, r3, r9
 802d5be:	9f07      	ldr	r7, [sp, #28]
 802d5c0:	9307      	str	r3, [sp, #28]
 802d5c2:	2300      	movs	r3, #0
 802d5c4:	461e      	mov	r6, r3
 802d5c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802d5ca:	9308      	str	r3, [sp, #32]
 802d5cc:	461d      	mov	r5, r3
 802d5ce:	930c      	str	r3, [sp, #48]	; 0x30
 802d5d0:	f7ff b94a 	b.w	802c868 <_vfprintf_r+0x6c4>
 802d5d4:	08031072 	.word	0x08031072
 802d5d8:	08031062 	.word	0x08031062

0802d5dc <__sbprintf>:
 802d5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d5de:	461f      	mov	r7, r3
 802d5e0:	898b      	ldrh	r3, [r1, #12]
 802d5e2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 802d5e6:	f023 0302 	bic.w	r3, r3, #2
 802d5ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 802d5ee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 802d5f0:	4615      	mov	r5, r2
 802d5f2:	9319      	str	r3, [sp, #100]	; 0x64
 802d5f4:	89cb      	ldrh	r3, [r1, #14]
 802d5f6:	4606      	mov	r6, r0
 802d5f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802d5fc:	69cb      	ldr	r3, [r1, #28]
 802d5fe:	a816      	add	r0, sp, #88	; 0x58
 802d600:	9307      	str	r3, [sp, #28]
 802d602:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 802d604:	460c      	mov	r4, r1
 802d606:	9309      	str	r3, [sp, #36]	; 0x24
 802d608:	ab1a      	add	r3, sp, #104	; 0x68
 802d60a:	9300      	str	r3, [sp, #0]
 802d60c:	9304      	str	r3, [sp, #16]
 802d60e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802d612:	9302      	str	r3, [sp, #8]
 802d614:	9305      	str	r3, [sp, #20]
 802d616:	2300      	movs	r3, #0
 802d618:	9306      	str	r3, [sp, #24]
 802d61a:	f7fe fa47 	bl	802baac <__retarget_lock_init_recursive>
 802d61e:	462a      	mov	r2, r5
 802d620:	463b      	mov	r3, r7
 802d622:	4669      	mov	r1, sp
 802d624:	4630      	mov	r0, r6
 802d626:	f7fe fdbd 	bl	802c1a4 <_vfprintf_r>
 802d62a:	1e05      	subs	r5, r0, #0
 802d62c:	db07      	blt.n	802d63e <__sbprintf+0x62>
 802d62e:	4669      	mov	r1, sp
 802d630:	4630      	mov	r0, r6
 802d632:	f000 fdf5 	bl	802e220 <_fflush_r>
 802d636:	2800      	cmp	r0, #0
 802d638:	bf18      	it	ne
 802d63a:	f04f 35ff 	movne.w	r5, #4294967295
 802d63e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802d642:	9816      	ldr	r0, [sp, #88]	; 0x58
 802d644:	065b      	lsls	r3, r3, #25
 802d646:	bf42      	ittt	mi
 802d648:	89a3      	ldrhmi	r3, [r4, #12]
 802d64a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 802d64e:	81a3      	strhmi	r3, [r4, #12]
 802d650:	f7fe fa2d 	bl	802baae <__retarget_lock_close_recursive>
 802d654:	4628      	mov	r0, r5
 802d656:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 802d65a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802d65c <__sprint_r>:
 802d65c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d660:	6893      	ldr	r3, [r2, #8]
 802d662:	4680      	mov	r8, r0
 802d664:	460f      	mov	r7, r1
 802d666:	4614      	mov	r4, r2
 802d668:	b343      	cbz	r3, 802d6bc <__sprint_r+0x60>
 802d66a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 802d66c:	049d      	lsls	r5, r3, #18
 802d66e:	d522      	bpl.n	802d6b6 <__sprint_r+0x5a>
 802d670:	6815      	ldr	r5, [r2, #0]
 802d672:	3508      	adds	r5, #8
 802d674:	f04f 0900 	mov.w	r9, #0
 802d678:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 802d67c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 802d680:	45ca      	cmp	sl, r9
 802d682:	dc0d      	bgt.n	802d6a0 <__sprint_r+0x44>
 802d684:	68a0      	ldr	r0, [r4, #8]
 802d686:	f026 0603 	bic.w	r6, r6, #3
 802d68a:	1b80      	subs	r0, r0, r6
 802d68c:	60a0      	str	r0, [r4, #8]
 802d68e:	3508      	adds	r5, #8
 802d690:	2800      	cmp	r0, #0
 802d692:	d1ef      	bne.n	802d674 <__sprint_r+0x18>
 802d694:	2300      	movs	r3, #0
 802d696:	60a3      	str	r3, [r4, #8]
 802d698:	2300      	movs	r3, #0
 802d69a:	6063      	str	r3, [r4, #4]
 802d69c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d6a0:	463a      	mov	r2, r7
 802d6a2:	4640      	mov	r0, r8
 802d6a4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802d6a8:	f000 ffc3 	bl	802e632 <_fputwc_r>
 802d6ac:	1c43      	adds	r3, r0, #1
 802d6ae:	d0f1      	beq.n	802d694 <__sprint_r+0x38>
 802d6b0:	f109 0901 	add.w	r9, r9, #1
 802d6b4:	e7e4      	b.n	802d680 <__sprint_r+0x24>
 802d6b6:	f000 fdd9 	bl	802e26c <__sfvwrite_r>
 802d6ba:	e7eb      	b.n	802d694 <__sprint_r+0x38>
 802d6bc:	4618      	mov	r0, r3
 802d6be:	e7eb      	b.n	802d698 <__sprint_r+0x3c>

0802d6c0 <_vfiprintf_r>:
 802d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d6c4:	b0bd      	sub	sp, #244	; 0xf4
 802d6c6:	460f      	mov	r7, r1
 802d6c8:	461d      	mov	r5, r3
 802d6ca:	461c      	mov	r4, r3
 802d6cc:	4681      	mov	r9, r0
 802d6ce:	9202      	str	r2, [sp, #8]
 802d6d0:	b118      	cbz	r0, 802d6da <_vfiprintf_r+0x1a>
 802d6d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 802d6d4:	b90b      	cbnz	r3, 802d6da <_vfiprintf_r+0x1a>
 802d6d6:	f7fe f897 	bl	802b808 <__sinit>
 802d6da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802d6dc:	07d8      	lsls	r0, r3, #31
 802d6de:	d405      	bmi.n	802d6ec <_vfiprintf_r+0x2c>
 802d6e0:	89bb      	ldrh	r3, [r7, #12]
 802d6e2:	0599      	lsls	r1, r3, #22
 802d6e4:	d402      	bmi.n	802d6ec <_vfiprintf_r+0x2c>
 802d6e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802d6e8:	f7fe f9e2 	bl	802bab0 <__retarget_lock_acquire_recursive>
 802d6ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802d6f0:	049a      	lsls	r2, r3, #18
 802d6f2:	d406      	bmi.n	802d702 <_vfiprintf_r+0x42>
 802d6f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802d6f8:	81bb      	strh	r3, [r7, #12]
 802d6fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802d6fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802d700:	667b      	str	r3, [r7, #100]	; 0x64
 802d702:	89bb      	ldrh	r3, [r7, #12]
 802d704:	071e      	lsls	r6, r3, #28
 802d706:	d501      	bpl.n	802d70c <_vfiprintf_r+0x4c>
 802d708:	693b      	ldr	r3, [r7, #16]
 802d70a:	b9ab      	cbnz	r3, 802d738 <_vfiprintf_r+0x78>
 802d70c:	4639      	mov	r1, r7
 802d70e:	4648      	mov	r0, r9
 802d710:	f000 fef6 	bl	802e500 <__swsetup_r>
 802d714:	b180      	cbz	r0, 802d738 <_vfiprintf_r+0x78>
 802d716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802d718:	07d8      	lsls	r0, r3, #31
 802d71a:	d506      	bpl.n	802d72a <_vfiprintf_r+0x6a>
 802d71c:	f04f 33ff 	mov.w	r3, #4294967295
 802d720:	9303      	str	r3, [sp, #12]
 802d722:	9803      	ldr	r0, [sp, #12]
 802d724:	b03d      	add	sp, #244	; 0xf4
 802d726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d72a:	89bb      	ldrh	r3, [r7, #12]
 802d72c:	0599      	lsls	r1, r3, #22
 802d72e:	d4f5      	bmi.n	802d71c <_vfiprintf_r+0x5c>
 802d730:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802d732:	f7fe f9be 	bl	802bab2 <__retarget_lock_release_recursive>
 802d736:	e7f1      	b.n	802d71c <_vfiprintf_r+0x5c>
 802d738:	89bb      	ldrh	r3, [r7, #12]
 802d73a:	f003 021a 	and.w	r2, r3, #26
 802d73e:	2a0a      	cmp	r2, #10
 802d740:	d114      	bne.n	802d76c <_vfiprintf_r+0xac>
 802d742:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802d746:	2a00      	cmp	r2, #0
 802d748:	db10      	blt.n	802d76c <_vfiprintf_r+0xac>
 802d74a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 802d74c:	07d2      	lsls	r2, r2, #31
 802d74e:	d404      	bmi.n	802d75a <_vfiprintf_r+0x9a>
 802d750:	059e      	lsls	r6, r3, #22
 802d752:	d402      	bmi.n	802d75a <_vfiprintf_r+0x9a>
 802d754:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802d756:	f7fe f9ac 	bl	802bab2 <__retarget_lock_release_recursive>
 802d75a:	462b      	mov	r3, r5
 802d75c:	4639      	mov	r1, r7
 802d75e:	4648      	mov	r0, r9
 802d760:	9a02      	ldr	r2, [sp, #8]
 802d762:	b03d      	add	sp, #244	; 0xf4
 802d764:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d768:	f000 bc38 	b.w	802dfdc <__sbprintf>
 802d76c:	2300      	movs	r3, #0
 802d76e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 802d772:	e9cd 3306 	strd	r3, r3, [sp, #24]
 802d776:	e9cd 3308 	strd	r3, r3, [sp, #32]
 802d77a:	ae13      	add	r6, sp, #76	; 0x4c
 802d77c:	9610      	str	r6, [sp, #64]	; 0x40
 802d77e:	9303      	str	r3, [sp, #12]
 802d780:	9b02      	ldr	r3, [sp, #8]
 802d782:	461d      	mov	r5, r3
 802d784:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d788:	b10a      	cbz	r2, 802d78e <_vfiprintf_r+0xce>
 802d78a:	2a25      	cmp	r2, #37	; 0x25
 802d78c:	d1f9      	bne.n	802d782 <_vfiprintf_r+0xc2>
 802d78e:	9b02      	ldr	r3, [sp, #8]
 802d790:	ebb5 0803 	subs.w	r8, r5, r3
 802d794:	d00d      	beq.n	802d7b2 <_vfiprintf_r+0xf2>
 802d796:	e9c6 3800 	strd	r3, r8, [r6]
 802d79a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802d79c:	4443      	add	r3, r8
 802d79e:	9312      	str	r3, [sp, #72]	; 0x48
 802d7a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802d7a2:	3301      	adds	r3, #1
 802d7a4:	2b07      	cmp	r3, #7
 802d7a6:	9311      	str	r3, [sp, #68]	; 0x44
 802d7a8:	dc76      	bgt.n	802d898 <_vfiprintf_r+0x1d8>
 802d7aa:	3608      	adds	r6, #8
 802d7ac:	9b03      	ldr	r3, [sp, #12]
 802d7ae:	4443      	add	r3, r8
 802d7b0:	9303      	str	r3, [sp, #12]
 802d7b2:	782b      	ldrb	r3, [r5, #0]
 802d7b4:	2b00      	cmp	r3, #0
 802d7b6:	f000 83d2 	beq.w	802df5e <_vfiprintf_r+0x89e>
 802d7ba:	2300      	movs	r3, #0
 802d7bc:	f04f 32ff 	mov.w	r2, #4294967295
 802d7c0:	469a      	mov	sl, r3
 802d7c2:	3501      	adds	r5, #1
 802d7c4:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 802d7c8:	9201      	str	r2, [sp, #4]
 802d7ca:	9304      	str	r3, [sp, #16]
 802d7cc:	462a      	mov	r2, r5
 802d7ce:	f812 3b01 	ldrb.w	r3, [r2], #1
 802d7d2:	9202      	str	r2, [sp, #8]
 802d7d4:	f1a3 0220 	sub.w	r2, r3, #32
 802d7d8:	2a5a      	cmp	r2, #90	; 0x5a
 802d7da:	f200 831a 	bhi.w	802de12 <_vfiprintf_r+0x752>
 802d7de:	e8df f012 	tbh	[pc, r2, lsl #1]
 802d7e2:	007d      	.short	0x007d
 802d7e4:	03180318 	.word	0x03180318
 802d7e8:	03180085 	.word	0x03180085
 802d7ec:	03180318 	.word	0x03180318
 802d7f0:	03180065 	.word	0x03180065
 802d7f4:	00880318 	.word	0x00880318
 802d7f8:	03180092 	.word	0x03180092
 802d7fc:	0094008f 	.word	0x0094008f
 802d800:	00af0318 	.word	0x00af0318
 802d804:	00b200b2 	.word	0x00b200b2
 802d808:	00b200b2 	.word	0x00b200b2
 802d80c:	00b200b2 	.word	0x00b200b2
 802d810:	00b200b2 	.word	0x00b200b2
 802d814:	031800b2 	.word	0x031800b2
 802d818:	03180318 	.word	0x03180318
 802d81c:	03180318 	.word	0x03180318
 802d820:	03180318 	.word	0x03180318
 802d824:	03180318 	.word	0x03180318
 802d828:	00ea00dc 	.word	0x00ea00dc
 802d82c:	03180318 	.word	0x03180318
 802d830:	03180318 	.word	0x03180318
 802d834:	03180318 	.word	0x03180318
 802d838:	03180318 	.word	0x03180318
 802d83c:	03180318 	.word	0x03180318
 802d840:	03180139 	.word	0x03180139
 802d844:	03180318 	.word	0x03180318
 802d848:	0318017e 	.word	0x0318017e
 802d84c:	0318025c 	.word	0x0318025c
 802d850:	027c0318 	.word	0x027c0318
 802d854:	03180318 	.word	0x03180318
 802d858:	03180318 	.word	0x03180318
 802d85c:	03180318 	.word	0x03180318
 802d860:	03180318 	.word	0x03180318
 802d864:	03180318 	.word	0x03180318
 802d868:	00ec00dc 	.word	0x00ec00dc
 802d86c:	03180318 	.word	0x03180318
 802d870:	00c20318 	.word	0x00c20318
 802d874:	00d600ec 	.word	0x00d600ec
 802d878:	00cf0318 	.word	0x00cf0318
 802d87c:	01170318 	.word	0x01170318
 802d880:	0170013b 	.word	0x0170013b
 802d884:	031800d6 	.word	0x031800d6
 802d888:	007b017e 	.word	0x007b017e
 802d88c:	0318025e 	.word	0x0318025e
 802d890:	02980318 	.word	0x02980318
 802d894:	007b0318 	.word	0x007b0318
 802d898:	4639      	mov	r1, r7
 802d89a:	4648      	mov	r0, r9
 802d89c:	aa10      	add	r2, sp, #64	; 0x40
 802d89e:	f7ff fedd 	bl	802d65c <__sprint_r>
 802d8a2:	2800      	cmp	r0, #0
 802d8a4:	f040 833a 	bne.w	802df1c <_vfiprintf_r+0x85c>
 802d8a8:	ae13      	add	r6, sp, #76	; 0x4c
 802d8aa:	e77f      	b.n	802d7ac <_vfiprintf_r+0xec>
 802d8ac:	4648      	mov	r0, r9
 802d8ae:	f000 ff1d 	bl	802e6ec <_localeconv_r>
 802d8b2:	6843      	ldr	r3, [r0, #4]
 802d8b4:	4618      	mov	r0, r3
 802d8b6:	9309      	str	r3, [sp, #36]	; 0x24
 802d8b8:	f7f4 fcb6 	bl	8022228 <strlen>
 802d8bc:	9008      	str	r0, [sp, #32]
 802d8be:	4648      	mov	r0, r9
 802d8c0:	f000 ff14 	bl	802e6ec <_localeconv_r>
 802d8c4:	6883      	ldr	r3, [r0, #8]
 802d8c6:	9307      	str	r3, [sp, #28]
 802d8c8:	9b08      	ldr	r3, [sp, #32]
 802d8ca:	b12b      	cbz	r3, 802d8d8 <_vfiprintf_r+0x218>
 802d8cc:	9b07      	ldr	r3, [sp, #28]
 802d8ce:	b11b      	cbz	r3, 802d8d8 <_vfiprintf_r+0x218>
 802d8d0:	781b      	ldrb	r3, [r3, #0]
 802d8d2:	b10b      	cbz	r3, 802d8d8 <_vfiprintf_r+0x218>
 802d8d4:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 802d8d8:	9d02      	ldr	r5, [sp, #8]
 802d8da:	e777      	b.n	802d7cc <_vfiprintf_r+0x10c>
 802d8dc:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 802d8e0:	2b00      	cmp	r3, #0
 802d8e2:	d1f9      	bne.n	802d8d8 <_vfiprintf_r+0x218>
 802d8e4:	2320      	movs	r3, #32
 802d8e6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 802d8ea:	e7f5      	b.n	802d8d8 <_vfiprintf_r+0x218>
 802d8ec:	f04a 0a01 	orr.w	sl, sl, #1
 802d8f0:	e7f2      	b.n	802d8d8 <_vfiprintf_r+0x218>
 802d8f2:	f854 3b04 	ldr.w	r3, [r4], #4
 802d8f6:	2b00      	cmp	r3, #0
 802d8f8:	9304      	str	r3, [sp, #16]
 802d8fa:	daed      	bge.n	802d8d8 <_vfiprintf_r+0x218>
 802d8fc:	425b      	negs	r3, r3
 802d8fe:	9304      	str	r3, [sp, #16]
 802d900:	f04a 0a04 	orr.w	sl, sl, #4
 802d904:	e7e8      	b.n	802d8d8 <_vfiprintf_r+0x218>
 802d906:	232b      	movs	r3, #43	; 0x2b
 802d908:	e7ed      	b.n	802d8e6 <_vfiprintf_r+0x226>
 802d90a:	9a02      	ldr	r2, [sp, #8]
 802d90c:	f812 3b01 	ldrb.w	r3, [r2], #1
 802d910:	2b2a      	cmp	r3, #42	; 0x2a
 802d912:	d112      	bne.n	802d93a <_vfiprintf_r+0x27a>
 802d914:	f854 3b04 	ldr.w	r3, [r4], #4
 802d918:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802d91c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802d920:	e7da      	b.n	802d8d8 <_vfiprintf_r+0x218>
 802d922:	200a      	movs	r0, #10
 802d924:	9b01      	ldr	r3, [sp, #4]
 802d926:	fb00 1303 	mla	r3, r0, r3, r1
 802d92a:	9301      	str	r3, [sp, #4]
 802d92c:	f812 3b01 	ldrb.w	r3, [r2], #1
 802d930:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802d934:	2909      	cmp	r1, #9
 802d936:	d9f4      	bls.n	802d922 <_vfiprintf_r+0x262>
 802d938:	e74b      	b.n	802d7d2 <_vfiprintf_r+0x112>
 802d93a:	2100      	movs	r1, #0
 802d93c:	9101      	str	r1, [sp, #4]
 802d93e:	e7f7      	b.n	802d930 <_vfiprintf_r+0x270>
 802d940:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 802d944:	e7c8      	b.n	802d8d8 <_vfiprintf_r+0x218>
 802d946:	2100      	movs	r1, #0
 802d948:	9a02      	ldr	r2, [sp, #8]
 802d94a:	9104      	str	r1, [sp, #16]
 802d94c:	200a      	movs	r0, #10
 802d94e:	9904      	ldr	r1, [sp, #16]
 802d950:	3b30      	subs	r3, #48	; 0x30
 802d952:	fb00 3301 	mla	r3, r0, r1, r3
 802d956:	9304      	str	r3, [sp, #16]
 802d958:	f812 3b01 	ldrb.w	r3, [r2], #1
 802d95c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802d960:	2909      	cmp	r1, #9
 802d962:	d9f3      	bls.n	802d94c <_vfiprintf_r+0x28c>
 802d964:	e735      	b.n	802d7d2 <_vfiprintf_r+0x112>
 802d966:	9b02      	ldr	r3, [sp, #8]
 802d968:	781b      	ldrb	r3, [r3, #0]
 802d96a:	2b68      	cmp	r3, #104	; 0x68
 802d96c:	bf01      	itttt	eq
 802d96e:	9b02      	ldreq	r3, [sp, #8]
 802d970:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 802d974:	3301      	addeq	r3, #1
 802d976:	9302      	streq	r3, [sp, #8]
 802d978:	bf18      	it	ne
 802d97a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 802d97e:	e7ab      	b.n	802d8d8 <_vfiprintf_r+0x218>
 802d980:	9b02      	ldr	r3, [sp, #8]
 802d982:	781b      	ldrb	r3, [r3, #0]
 802d984:	2b6c      	cmp	r3, #108	; 0x6c
 802d986:	d105      	bne.n	802d994 <_vfiprintf_r+0x2d4>
 802d988:	9b02      	ldr	r3, [sp, #8]
 802d98a:	3301      	adds	r3, #1
 802d98c:	9302      	str	r3, [sp, #8]
 802d98e:	f04a 0a20 	orr.w	sl, sl, #32
 802d992:	e7a1      	b.n	802d8d8 <_vfiprintf_r+0x218>
 802d994:	f04a 0a10 	orr.w	sl, sl, #16
 802d998:	e79e      	b.n	802d8d8 <_vfiprintf_r+0x218>
 802d99a:	46a0      	mov	r8, r4
 802d99c:	f858 3b04 	ldr.w	r3, [r8], #4
 802d9a0:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 802d9a4:	2300      	movs	r3, #0
 802d9a6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 802d9aa:	2201      	movs	r2, #1
 802d9ac:	461d      	mov	r5, r3
 802d9ae:	9201      	str	r2, [sp, #4]
 802d9b0:	f10d 0b8c 	add.w	fp, sp, #140	; 0x8c
 802d9b4:	e0a8      	b.n	802db08 <_vfiprintf_r+0x448>
 802d9b6:	f04a 0a10 	orr.w	sl, sl, #16
 802d9ba:	f01a 0f20 	tst.w	sl, #32
 802d9be:	d010      	beq.n	802d9e2 <_vfiprintf_r+0x322>
 802d9c0:	3407      	adds	r4, #7
 802d9c2:	f024 0307 	bic.w	r3, r4, #7
 802d9c6:	4698      	mov	r8, r3
 802d9c8:	685d      	ldr	r5, [r3, #4]
 802d9ca:	f858 4b08 	ldr.w	r4, [r8], #8
 802d9ce:	2d00      	cmp	r5, #0
 802d9d0:	da05      	bge.n	802d9de <_vfiprintf_r+0x31e>
 802d9d2:	232d      	movs	r3, #45	; 0x2d
 802d9d4:	4264      	negs	r4, r4
 802d9d6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802d9da:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 802d9de:	2301      	movs	r3, #1
 802d9e0:	e04a      	b.n	802da78 <_vfiprintf_r+0x3b8>
 802d9e2:	46a0      	mov	r8, r4
 802d9e4:	f01a 0f10 	tst.w	sl, #16
 802d9e8:	f858 5b04 	ldr.w	r5, [r8], #4
 802d9ec:	d002      	beq.n	802d9f4 <_vfiprintf_r+0x334>
 802d9ee:	462c      	mov	r4, r5
 802d9f0:	17ed      	asrs	r5, r5, #31
 802d9f2:	e7ec      	b.n	802d9ce <_vfiprintf_r+0x30e>
 802d9f4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802d9f8:	d003      	beq.n	802da02 <_vfiprintf_r+0x342>
 802d9fa:	b22c      	sxth	r4, r5
 802d9fc:	f345 35c0 	sbfx	r5, r5, #15, #1
 802da00:	e7e5      	b.n	802d9ce <_vfiprintf_r+0x30e>
 802da02:	f41a 7f00 	tst.w	sl, #512	; 0x200
 802da06:	d0f2      	beq.n	802d9ee <_vfiprintf_r+0x32e>
 802da08:	b26c      	sxtb	r4, r5
 802da0a:	f345 15c0 	sbfx	r5, r5, #7, #1
 802da0e:	e7de      	b.n	802d9ce <_vfiprintf_r+0x30e>
 802da10:	f01a 0f20 	tst.w	sl, #32
 802da14:	f104 0804 	add.w	r8, r4, #4
 802da18:	d007      	beq.n	802da2a <_vfiprintf_r+0x36a>
 802da1a:	9a03      	ldr	r2, [sp, #12]
 802da1c:	6823      	ldr	r3, [r4, #0]
 802da1e:	9903      	ldr	r1, [sp, #12]
 802da20:	17d2      	asrs	r2, r2, #31
 802da22:	e9c3 1200 	strd	r1, r2, [r3]
 802da26:	4644      	mov	r4, r8
 802da28:	e6aa      	b.n	802d780 <_vfiprintf_r+0xc0>
 802da2a:	f01a 0f10 	tst.w	sl, #16
 802da2e:	d003      	beq.n	802da38 <_vfiprintf_r+0x378>
 802da30:	6823      	ldr	r3, [r4, #0]
 802da32:	9a03      	ldr	r2, [sp, #12]
 802da34:	601a      	str	r2, [r3, #0]
 802da36:	e7f6      	b.n	802da26 <_vfiprintf_r+0x366>
 802da38:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802da3c:	d003      	beq.n	802da46 <_vfiprintf_r+0x386>
 802da3e:	6823      	ldr	r3, [r4, #0]
 802da40:	9a03      	ldr	r2, [sp, #12]
 802da42:	801a      	strh	r2, [r3, #0]
 802da44:	e7ef      	b.n	802da26 <_vfiprintf_r+0x366>
 802da46:	f41a 7f00 	tst.w	sl, #512	; 0x200
 802da4a:	d0f1      	beq.n	802da30 <_vfiprintf_r+0x370>
 802da4c:	6823      	ldr	r3, [r4, #0]
 802da4e:	9a03      	ldr	r2, [sp, #12]
 802da50:	701a      	strb	r2, [r3, #0]
 802da52:	e7e8      	b.n	802da26 <_vfiprintf_r+0x366>
 802da54:	f04a 0a10 	orr.w	sl, sl, #16
 802da58:	f01a 0320 	ands.w	r3, sl, #32
 802da5c:	d01f      	beq.n	802da9e <_vfiprintf_r+0x3de>
 802da5e:	3407      	adds	r4, #7
 802da60:	f024 0307 	bic.w	r3, r4, #7
 802da64:	4698      	mov	r8, r3
 802da66:	685d      	ldr	r5, [r3, #4]
 802da68:	f858 4b08 	ldr.w	r4, [r8], #8
 802da6c:	2300      	movs	r3, #0
 802da6e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 802da72:	2200      	movs	r2, #0
 802da74:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 802da78:	9a01      	ldr	r2, [sp, #4]
 802da7a:	3201      	adds	r2, #1
 802da7c:	f000 827c 	beq.w	802df78 <_vfiprintf_r+0x8b8>
 802da80:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 802da84:	9205      	str	r2, [sp, #20]
 802da86:	ea54 0205 	orrs.w	r2, r4, r5
 802da8a:	f040 827b 	bne.w	802df84 <_vfiprintf_r+0x8c4>
 802da8e:	9a01      	ldr	r2, [sp, #4]
 802da90:	2a00      	cmp	r2, #0
 802da92:	f000 81b3 	beq.w	802ddfc <_vfiprintf_r+0x73c>
 802da96:	2b01      	cmp	r3, #1
 802da98:	f040 8277 	bne.w	802df8a <_vfiprintf_r+0x8ca>
 802da9c:	e151      	b.n	802dd42 <_vfiprintf_r+0x682>
 802da9e:	46a0      	mov	r8, r4
 802daa0:	f01a 0510 	ands.w	r5, sl, #16
 802daa4:	f858 4b04 	ldr.w	r4, [r8], #4
 802daa8:	d001      	beq.n	802daae <_vfiprintf_r+0x3ee>
 802daaa:	461d      	mov	r5, r3
 802daac:	e7de      	b.n	802da6c <_vfiprintf_r+0x3ac>
 802daae:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 802dab2:	d001      	beq.n	802dab8 <_vfiprintf_r+0x3f8>
 802dab4:	b2a4      	uxth	r4, r4
 802dab6:	e7d9      	b.n	802da6c <_vfiprintf_r+0x3ac>
 802dab8:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 802dabc:	d0d6      	beq.n	802da6c <_vfiprintf_r+0x3ac>
 802dabe:	b2e4      	uxtb	r4, r4
 802dac0:	e7f3      	b.n	802daaa <_vfiprintf_r+0x3ea>
 802dac2:	f647 0330 	movw	r3, #30768	; 0x7830
 802dac6:	46a0      	mov	r8, r4
 802dac8:	2500      	movs	r5, #0
 802daca:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 802dace:	4ba0      	ldr	r3, [pc, #640]	; (802dd50 <_vfiprintf_r+0x690>)
 802dad0:	f858 4b04 	ldr.w	r4, [r8], #4
 802dad4:	f04a 0a02 	orr.w	sl, sl, #2
 802dad8:	9306      	str	r3, [sp, #24]
 802dada:	2302      	movs	r3, #2
 802dadc:	e7c9      	b.n	802da72 <_vfiprintf_r+0x3b2>
 802dade:	46a0      	mov	r8, r4
 802dae0:	2500      	movs	r5, #0
 802dae2:	9b01      	ldr	r3, [sp, #4]
 802dae4:	f858 bb04 	ldr.w	fp, [r8], #4
 802dae8:	1c5c      	adds	r4, r3, #1
 802daea:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
 802daee:	f000 80cf 	beq.w	802dc90 <_vfiprintf_r+0x5d0>
 802daf2:	461a      	mov	r2, r3
 802daf4:	4629      	mov	r1, r5
 802daf6:	4658      	mov	r0, fp
 802daf8:	f000 fe2c 	bl	802e754 <memchr>
 802dafc:	2800      	cmp	r0, #0
 802dafe:	f000 8192 	beq.w	802de26 <_vfiprintf_r+0x766>
 802db02:	eba0 030b 	sub.w	r3, r0, fp
 802db06:	9301      	str	r3, [sp, #4]
 802db08:	9b01      	ldr	r3, [sp, #4]
 802db0a:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 802db0e:	42ab      	cmp	r3, r5
 802db10:	bfb8      	it	lt
 802db12:	462b      	movlt	r3, r5
 802db14:	9305      	str	r3, [sp, #20]
 802db16:	b10a      	cbz	r2, 802db1c <_vfiprintf_r+0x45c>
 802db18:	3301      	adds	r3, #1
 802db1a:	9305      	str	r3, [sp, #20]
 802db1c:	f01a 0302 	ands.w	r3, sl, #2
 802db20:	930a      	str	r3, [sp, #40]	; 0x28
 802db22:	bf1e      	ittt	ne
 802db24:	9b05      	ldrne	r3, [sp, #20]
 802db26:	3302      	addne	r3, #2
 802db28:	9305      	strne	r3, [sp, #20]
 802db2a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 802db2e:	930b      	str	r3, [sp, #44]	; 0x2c
 802db30:	d11f      	bne.n	802db72 <_vfiprintf_r+0x4b2>
 802db32:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 802db36:	1a9c      	subs	r4, r3, r2
 802db38:	2c00      	cmp	r4, #0
 802db3a:	dd1a      	ble.n	802db72 <_vfiprintf_r+0x4b2>
 802db3c:	4b85      	ldr	r3, [pc, #532]	; (802dd54 <_vfiprintf_r+0x694>)
 802db3e:	2c10      	cmp	r4, #16
 802db40:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 802db44:	f106 0008 	add.w	r0, r6, #8
 802db48:	f102 0201 	add.w	r2, r2, #1
 802db4c:	6033      	str	r3, [r6, #0]
 802db4e:	f300 816c 	bgt.w	802de2a <_vfiprintf_r+0x76a>
 802db52:	6074      	str	r4, [r6, #4]
 802db54:	2a07      	cmp	r2, #7
 802db56:	440c      	add	r4, r1
 802db58:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 802db5c:	f340 817a 	ble.w	802de54 <_vfiprintf_r+0x794>
 802db60:	4639      	mov	r1, r7
 802db62:	4648      	mov	r0, r9
 802db64:	aa10      	add	r2, sp, #64	; 0x40
 802db66:	f7ff fd79 	bl	802d65c <__sprint_r>
 802db6a:	2800      	cmp	r0, #0
 802db6c:	f040 81d6 	bne.w	802df1c <_vfiprintf_r+0x85c>
 802db70:	ae13      	add	r6, sp, #76	; 0x4c
 802db72:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 802db76:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 802db7a:	b160      	cbz	r0, 802db96 <_vfiprintf_r+0x4d6>
 802db7c:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
 802db80:	6030      	str	r0, [r6, #0]
 802db82:	2001      	movs	r0, #1
 802db84:	3201      	adds	r2, #1
 802db86:	4401      	add	r1, r0
 802db88:	2a07      	cmp	r2, #7
 802db8a:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 802db8e:	6070      	str	r0, [r6, #4]
 802db90:	f300 8162 	bgt.w	802de58 <_vfiprintf_r+0x798>
 802db94:	3608      	adds	r6, #8
 802db96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802db98:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 802db9c:	b15b      	cbz	r3, 802dbb6 <_vfiprintf_r+0x4f6>
 802db9e:	a80f      	add	r0, sp, #60	; 0x3c
 802dba0:	6030      	str	r0, [r6, #0]
 802dba2:	2002      	movs	r0, #2
 802dba4:	3201      	adds	r2, #1
 802dba6:	4401      	add	r1, r0
 802dba8:	2a07      	cmp	r2, #7
 802dbaa:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 802dbae:	6070      	str	r0, [r6, #4]
 802dbb0:	f300 815b 	bgt.w	802de6a <_vfiprintf_r+0x7aa>
 802dbb4:	3608      	adds	r6, #8
 802dbb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802dbb8:	2b80      	cmp	r3, #128	; 0x80
 802dbba:	d11f      	bne.n	802dbfc <_vfiprintf_r+0x53c>
 802dbbc:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 802dbc0:	1a9c      	subs	r4, r3, r2
 802dbc2:	2c00      	cmp	r4, #0
 802dbc4:	dd1a      	ble.n	802dbfc <_vfiprintf_r+0x53c>
 802dbc6:	4b64      	ldr	r3, [pc, #400]	; (802dd58 <_vfiprintf_r+0x698>)
 802dbc8:	2c10      	cmp	r4, #16
 802dbca:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 802dbce:	f106 0008 	add.w	r0, r6, #8
 802dbd2:	f102 0201 	add.w	r2, r2, #1
 802dbd6:	6033      	str	r3, [r6, #0]
 802dbd8:	f300 8150 	bgt.w	802de7c <_vfiprintf_r+0x7bc>
 802dbdc:	6074      	str	r4, [r6, #4]
 802dbde:	2a07      	cmp	r2, #7
 802dbe0:	440c      	add	r4, r1
 802dbe2:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 802dbe6:	f340 815e 	ble.w	802dea6 <_vfiprintf_r+0x7e6>
 802dbea:	4639      	mov	r1, r7
 802dbec:	4648      	mov	r0, r9
 802dbee:	aa10      	add	r2, sp, #64	; 0x40
 802dbf0:	f7ff fd34 	bl	802d65c <__sprint_r>
 802dbf4:	2800      	cmp	r0, #0
 802dbf6:	f040 8191 	bne.w	802df1c <_vfiprintf_r+0x85c>
 802dbfa:	ae13      	add	r6, sp, #76	; 0x4c
 802dbfc:	9b01      	ldr	r3, [sp, #4]
 802dbfe:	1aec      	subs	r4, r5, r3
 802dc00:	2c00      	cmp	r4, #0
 802dc02:	dd1b      	ble.n	802dc3c <_vfiprintf_r+0x57c>
 802dc04:	2310      	movs	r3, #16
 802dc06:	4d54      	ldr	r5, [pc, #336]	; (802dd58 <_vfiprintf_r+0x698>)
 802dc08:	2c10      	cmp	r4, #16
 802dc0a:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 802dc0e:	f106 0008 	add.w	r0, r6, #8
 802dc12:	f102 0201 	add.w	r2, r2, #1
 802dc16:	6035      	str	r5, [r6, #0]
 802dc18:	f300 8147 	bgt.w	802deaa <_vfiprintf_r+0x7ea>
 802dc1c:	6074      	str	r4, [r6, #4]
 802dc1e:	2a07      	cmp	r2, #7
 802dc20:	440c      	add	r4, r1
 802dc22:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 802dc26:	f340 8151 	ble.w	802decc <_vfiprintf_r+0x80c>
 802dc2a:	4639      	mov	r1, r7
 802dc2c:	4648      	mov	r0, r9
 802dc2e:	aa10      	add	r2, sp, #64	; 0x40
 802dc30:	f7ff fd14 	bl	802d65c <__sprint_r>
 802dc34:	2800      	cmp	r0, #0
 802dc36:	f040 8171 	bne.w	802df1c <_vfiprintf_r+0x85c>
 802dc3a:	ae13      	add	r6, sp, #76	; 0x4c
 802dc3c:	9b01      	ldr	r3, [sp, #4]
 802dc3e:	9a01      	ldr	r2, [sp, #4]
 802dc40:	6073      	str	r3, [r6, #4]
 802dc42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802dc44:	f8c6 b000 	str.w	fp, [r6]
 802dc48:	4413      	add	r3, r2
 802dc4a:	9312      	str	r3, [sp, #72]	; 0x48
 802dc4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802dc4e:	3301      	adds	r3, #1
 802dc50:	2b07      	cmp	r3, #7
 802dc52:	9311      	str	r3, [sp, #68]	; 0x44
 802dc54:	f300 813c 	bgt.w	802ded0 <_vfiprintf_r+0x810>
 802dc58:	f106 0308 	add.w	r3, r6, #8
 802dc5c:	f01a 0f04 	tst.w	sl, #4
 802dc60:	f040 813e 	bne.w	802dee0 <_vfiprintf_r+0x820>
 802dc64:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 802dc68:	9905      	ldr	r1, [sp, #20]
 802dc6a:	428a      	cmp	r2, r1
 802dc6c:	bfac      	ite	ge
 802dc6e:	189b      	addge	r3, r3, r2
 802dc70:	185b      	addlt	r3, r3, r1
 802dc72:	9303      	str	r3, [sp, #12]
 802dc74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802dc76:	b13b      	cbz	r3, 802dc88 <_vfiprintf_r+0x5c8>
 802dc78:	4639      	mov	r1, r7
 802dc7a:	4648      	mov	r0, r9
 802dc7c:	aa10      	add	r2, sp, #64	; 0x40
 802dc7e:	f7ff fced 	bl	802d65c <__sprint_r>
 802dc82:	2800      	cmp	r0, #0
 802dc84:	f040 814a 	bne.w	802df1c <_vfiprintf_r+0x85c>
 802dc88:	2300      	movs	r3, #0
 802dc8a:	ae13      	add	r6, sp, #76	; 0x4c
 802dc8c:	9311      	str	r3, [sp, #68]	; 0x44
 802dc8e:	e6ca      	b.n	802da26 <_vfiprintf_r+0x366>
 802dc90:	4658      	mov	r0, fp
 802dc92:	f7f4 fac9 	bl	8022228 <strlen>
 802dc96:	9001      	str	r0, [sp, #4]
 802dc98:	e736      	b.n	802db08 <_vfiprintf_r+0x448>
 802dc9a:	f04a 0a10 	orr.w	sl, sl, #16
 802dc9e:	f01a 0320 	ands.w	r3, sl, #32
 802dca2:	d008      	beq.n	802dcb6 <_vfiprintf_r+0x5f6>
 802dca4:	3407      	adds	r4, #7
 802dca6:	f024 0307 	bic.w	r3, r4, #7
 802dcaa:	4698      	mov	r8, r3
 802dcac:	685d      	ldr	r5, [r3, #4]
 802dcae:	f858 4b08 	ldr.w	r4, [r8], #8
 802dcb2:	2301      	movs	r3, #1
 802dcb4:	e6dd      	b.n	802da72 <_vfiprintf_r+0x3b2>
 802dcb6:	46a0      	mov	r8, r4
 802dcb8:	f01a 0510 	ands.w	r5, sl, #16
 802dcbc:	f858 4b04 	ldr.w	r4, [r8], #4
 802dcc0:	d001      	beq.n	802dcc6 <_vfiprintf_r+0x606>
 802dcc2:	461d      	mov	r5, r3
 802dcc4:	e7f5      	b.n	802dcb2 <_vfiprintf_r+0x5f2>
 802dcc6:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 802dcca:	d001      	beq.n	802dcd0 <_vfiprintf_r+0x610>
 802dccc:	b2a4      	uxth	r4, r4
 802dcce:	e7f0      	b.n	802dcb2 <_vfiprintf_r+0x5f2>
 802dcd0:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 802dcd4:	d0ed      	beq.n	802dcb2 <_vfiprintf_r+0x5f2>
 802dcd6:	b2e4      	uxtb	r4, r4
 802dcd8:	e7f3      	b.n	802dcc2 <_vfiprintf_r+0x602>
 802dcda:	4a20      	ldr	r2, [pc, #128]	; (802dd5c <_vfiprintf_r+0x69c>)
 802dcdc:	9206      	str	r2, [sp, #24]
 802dcde:	f01a 0220 	ands.w	r2, sl, #32
 802dce2:	d018      	beq.n	802dd16 <_vfiprintf_r+0x656>
 802dce4:	3407      	adds	r4, #7
 802dce6:	f024 0207 	bic.w	r2, r4, #7
 802dcea:	4690      	mov	r8, r2
 802dcec:	6855      	ldr	r5, [r2, #4]
 802dcee:	f858 4b08 	ldr.w	r4, [r8], #8
 802dcf2:	f01a 0f01 	tst.w	sl, #1
 802dcf6:	d009      	beq.n	802dd0c <_vfiprintf_r+0x64c>
 802dcf8:	ea54 0205 	orrs.w	r2, r4, r5
 802dcfc:	bf1f      	itttt	ne
 802dcfe:	2230      	movne	r2, #48	; 0x30
 802dd00:	f88d 303d 	strbne.w	r3, [sp, #61]	; 0x3d
 802dd04:	f88d 203c 	strbne.w	r2, [sp, #60]	; 0x3c
 802dd08:	f04a 0a02 	orrne.w	sl, sl, #2
 802dd0c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 802dd10:	e6e3      	b.n	802dada <_vfiprintf_r+0x41a>
 802dd12:	4a0f      	ldr	r2, [pc, #60]	; (802dd50 <_vfiprintf_r+0x690>)
 802dd14:	e7e2      	b.n	802dcdc <_vfiprintf_r+0x61c>
 802dd16:	46a0      	mov	r8, r4
 802dd18:	f01a 0510 	ands.w	r5, sl, #16
 802dd1c:	f858 4b04 	ldr.w	r4, [r8], #4
 802dd20:	d001      	beq.n	802dd26 <_vfiprintf_r+0x666>
 802dd22:	4615      	mov	r5, r2
 802dd24:	e7e5      	b.n	802dcf2 <_vfiprintf_r+0x632>
 802dd26:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 802dd2a:	d001      	beq.n	802dd30 <_vfiprintf_r+0x670>
 802dd2c:	b2a4      	uxth	r4, r4
 802dd2e:	e7e0      	b.n	802dcf2 <_vfiprintf_r+0x632>
 802dd30:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 802dd34:	d0dd      	beq.n	802dcf2 <_vfiprintf_r+0x632>
 802dd36:	b2e4      	uxtb	r4, r4
 802dd38:	e7f3      	b.n	802dd22 <_vfiprintf_r+0x662>
 802dd3a:	2c0a      	cmp	r4, #10
 802dd3c:	f175 0300 	sbcs.w	r3, r5, #0
 802dd40:	d20e      	bcs.n	802dd60 <_vfiprintf_r+0x6a0>
 802dd42:	3430      	adds	r4, #48	; 0x30
 802dd44:	f88d 40ef 	strb.w	r4, [sp, #239]	; 0xef
 802dd48:	f10d 0bef 	add.w	fp, sp, #239	; 0xef
 802dd4c:	e139      	b.n	802dfc2 <_vfiprintf_r+0x902>
 802dd4e:	bf00      	nop
 802dd50:	0803103e 	.word	0x0803103e
 802dd54:	08031082 	.word	0x08031082
 802dd58:	08031092 	.word	0x08031092
 802dd5c:	0803104f 	.word	0x0803104f
 802dd60:	f04f 0a00 	mov.w	sl, #0
 802dd64:	ab3c      	add	r3, sp, #240	; 0xf0
 802dd66:	930a      	str	r3, [sp, #40]	; 0x28
 802dd68:	9b05      	ldr	r3, [sp, #20]
 802dd6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802dd6e:	930b      	str	r3, [sp, #44]	; 0x2c
 802dd70:	220a      	movs	r2, #10
 802dd72:	2300      	movs	r3, #0
 802dd74:	4620      	mov	r0, r4
 802dd76:	4629      	mov	r1, r5
 802dd78:	f7f4 fef2 	bl	8022b60 <__aeabi_uldivmod>
 802dd7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802dd7e:	3230      	adds	r2, #48	; 0x30
 802dd80:	f103 3bff 	add.w	fp, r3, #4294967295
 802dd84:	f803 2c01 	strb.w	r2, [r3, #-1]
 802dd88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802dd8a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802dd8e:	f10a 0a01 	add.w	sl, sl, #1
 802dd92:	b1cb      	cbz	r3, 802ddc8 <_vfiprintf_r+0x708>
 802dd94:	9b07      	ldr	r3, [sp, #28]
 802dd96:	781a      	ldrb	r2, [r3, #0]
 802dd98:	4552      	cmp	r2, sl
 802dd9a:	d115      	bne.n	802ddc8 <_vfiprintf_r+0x708>
 802dd9c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802dda0:	d012      	beq.n	802ddc8 <_vfiprintf_r+0x708>
 802dda2:	2c0a      	cmp	r4, #10
 802dda4:	f175 0200 	sbcs.w	r2, r5, #0
 802dda8:	d30e      	bcc.n	802ddc8 <_vfiprintf_r+0x708>
 802ddaa:	9b08      	ldr	r3, [sp, #32]
 802ddac:	9909      	ldr	r1, [sp, #36]	; 0x24
 802ddae:	ebab 0b03 	sub.w	fp, fp, r3
 802ddb2:	461a      	mov	r2, r3
 802ddb4:	4658      	mov	r0, fp
 802ddb6:	f000 fc7f 	bl	802e6b8 <strncpy>
 802ddba:	9b07      	ldr	r3, [sp, #28]
 802ddbc:	785a      	ldrb	r2, [r3, #1]
 802ddbe:	b16a      	cbz	r2, 802dddc <_vfiprintf_r+0x71c>
 802ddc0:	f04f 0a00 	mov.w	sl, #0
 802ddc4:	3301      	adds	r3, #1
 802ddc6:	9307      	str	r3, [sp, #28]
 802ddc8:	2c0a      	cmp	r4, #10
 802ddca:	f175 0500 	sbcs.w	r5, r5, #0
 802ddce:	f0c0 80f8 	bcc.w	802dfc2 <_vfiprintf_r+0x902>
 802ddd2:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 802ddd6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 802ddda:	e7c9      	b.n	802dd70 <_vfiprintf_r+0x6b0>
 802dddc:	4692      	mov	sl, r2
 802ddde:	e7f3      	b.n	802ddc8 <_vfiprintf_r+0x708>
 802dde0:	9b06      	ldr	r3, [sp, #24]
 802dde2:	f004 020f 	and.w	r2, r4, #15
 802dde6:	5c9a      	ldrb	r2, [r3, r2]
 802dde8:	0924      	lsrs	r4, r4, #4
 802ddea:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802ddee:	092d      	lsrs	r5, r5, #4
 802ddf0:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 802ddf4:	ea54 0205 	orrs.w	r2, r4, r5
 802ddf8:	d1f2      	bne.n	802dde0 <_vfiprintf_r+0x720>
 802ddfa:	e0e2      	b.n	802dfc2 <_vfiprintf_r+0x902>
 802ddfc:	b933      	cbnz	r3, 802de0c <_vfiprintf_r+0x74c>
 802ddfe:	f01a 0f01 	tst.w	sl, #1
 802de02:	d003      	beq.n	802de0c <_vfiprintf_r+0x74c>
 802de04:	2330      	movs	r3, #48	; 0x30
 802de06:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 802de0a:	e79d      	b.n	802dd48 <_vfiprintf_r+0x688>
 802de0c:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 802de10:	e0d7      	b.n	802dfc2 <_vfiprintf_r+0x902>
 802de12:	2b00      	cmp	r3, #0
 802de14:	f000 80a3 	beq.w	802df5e <_vfiprintf_r+0x89e>
 802de18:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 802de1c:	2300      	movs	r3, #0
 802de1e:	46a0      	mov	r8, r4
 802de20:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 802de24:	e5c1      	b.n	802d9aa <_vfiprintf_r+0x2ea>
 802de26:	4605      	mov	r5, r0
 802de28:	e66e      	b.n	802db08 <_vfiprintf_r+0x448>
 802de2a:	f04f 0c10 	mov.w	ip, #16
 802de2e:	2a07      	cmp	r2, #7
 802de30:	4461      	add	r1, ip
 802de32:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 802de36:	f8c6 c004 	str.w	ip, [r6, #4]
 802de3a:	dd08      	ble.n	802de4e <_vfiprintf_r+0x78e>
 802de3c:	4639      	mov	r1, r7
 802de3e:	4648      	mov	r0, r9
 802de40:	aa10      	add	r2, sp, #64	; 0x40
 802de42:	f7ff fc0b 	bl	802d65c <__sprint_r>
 802de46:	2800      	cmp	r0, #0
 802de48:	d168      	bne.n	802df1c <_vfiprintf_r+0x85c>
 802de4a:	4b62      	ldr	r3, [pc, #392]	; (802dfd4 <_vfiprintf_r+0x914>)
 802de4c:	a813      	add	r0, sp, #76	; 0x4c
 802de4e:	4606      	mov	r6, r0
 802de50:	3c10      	subs	r4, #16
 802de52:	e674      	b.n	802db3e <_vfiprintf_r+0x47e>
 802de54:	4606      	mov	r6, r0
 802de56:	e68c      	b.n	802db72 <_vfiprintf_r+0x4b2>
 802de58:	4639      	mov	r1, r7
 802de5a:	4648      	mov	r0, r9
 802de5c:	aa10      	add	r2, sp, #64	; 0x40
 802de5e:	f7ff fbfd 	bl	802d65c <__sprint_r>
 802de62:	2800      	cmp	r0, #0
 802de64:	d15a      	bne.n	802df1c <_vfiprintf_r+0x85c>
 802de66:	ae13      	add	r6, sp, #76	; 0x4c
 802de68:	e695      	b.n	802db96 <_vfiprintf_r+0x4d6>
 802de6a:	4639      	mov	r1, r7
 802de6c:	4648      	mov	r0, r9
 802de6e:	aa10      	add	r2, sp, #64	; 0x40
 802de70:	f7ff fbf4 	bl	802d65c <__sprint_r>
 802de74:	2800      	cmp	r0, #0
 802de76:	d151      	bne.n	802df1c <_vfiprintf_r+0x85c>
 802de78:	ae13      	add	r6, sp, #76	; 0x4c
 802de7a:	e69c      	b.n	802dbb6 <_vfiprintf_r+0x4f6>
 802de7c:	f04f 0c10 	mov.w	ip, #16
 802de80:	2a07      	cmp	r2, #7
 802de82:	4461      	add	r1, ip
 802de84:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 802de88:	f8c6 c004 	str.w	ip, [r6, #4]
 802de8c:	dd08      	ble.n	802dea0 <_vfiprintf_r+0x7e0>
 802de8e:	4639      	mov	r1, r7
 802de90:	4648      	mov	r0, r9
 802de92:	aa10      	add	r2, sp, #64	; 0x40
 802de94:	f7ff fbe2 	bl	802d65c <__sprint_r>
 802de98:	2800      	cmp	r0, #0
 802de9a:	d13f      	bne.n	802df1c <_vfiprintf_r+0x85c>
 802de9c:	4b4e      	ldr	r3, [pc, #312]	; (802dfd8 <_vfiprintf_r+0x918>)
 802de9e:	a813      	add	r0, sp, #76	; 0x4c
 802dea0:	4606      	mov	r6, r0
 802dea2:	3c10      	subs	r4, #16
 802dea4:	e690      	b.n	802dbc8 <_vfiprintf_r+0x508>
 802dea6:	4606      	mov	r6, r0
 802dea8:	e6a8      	b.n	802dbfc <_vfiprintf_r+0x53c>
 802deaa:	3110      	adds	r1, #16
 802deac:	2a07      	cmp	r2, #7
 802deae:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 802deb2:	6073      	str	r3, [r6, #4]
 802deb4:	dd07      	ble.n	802dec6 <_vfiprintf_r+0x806>
 802deb6:	4639      	mov	r1, r7
 802deb8:	4648      	mov	r0, r9
 802deba:	aa10      	add	r2, sp, #64	; 0x40
 802debc:	f7ff fbce 	bl	802d65c <__sprint_r>
 802dec0:	bb60      	cbnz	r0, 802df1c <_vfiprintf_r+0x85c>
 802dec2:	2310      	movs	r3, #16
 802dec4:	a813      	add	r0, sp, #76	; 0x4c
 802dec6:	4606      	mov	r6, r0
 802dec8:	3c10      	subs	r4, #16
 802deca:	e69d      	b.n	802dc08 <_vfiprintf_r+0x548>
 802decc:	4606      	mov	r6, r0
 802dece:	e6b5      	b.n	802dc3c <_vfiprintf_r+0x57c>
 802ded0:	4639      	mov	r1, r7
 802ded2:	4648      	mov	r0, r9
 802ded4:	aa10      	add	r2, sp, #64	; 0x40
 802ded6:	f7ff fbc1 	bl	802d65c <__sprint_r>
 802deda:	b9f8      	cbnz	r0, 802df1c <_vfiprintf_r+0x85c>
 802dedc:	ab13      	add	r3, sp, #76	; 0x4c
 802dede:	e6bd      	b.n	802dc5c <_vfiprintf_r+0x59c>
 802dee0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802dee4:	1a54      	subs	r4, r2, r1
 802dee6:	2c00      	cmp	r4, #0
 802dee8:	f77f aebc 	ble.w	802dc64 <_vfiprintf_r+0x5a4>
 802deec:	2610      	movs	r6, #16
 802deee:	4d39      	ldr	r5, [pc, #228]	; (802dfd4 <_vfiprintf_r+0x914>)
 802def0:	2c10      	cmp	r4, #16
 802def2:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 802def6:	601d      	str	r5, [r3, #0]
 802def8:	f102 0201 	add.w	r2, r2, #1
 802defc:	dc1d      	bgt.n	802df3a <_vfiprintf_r+0x87a>
 802defe:	605c      	str	r4, [r3, #4]
 802df00:	2a07      	cmp	r2, #7
 802df02:	440c      	add	r4, r1
 802df04:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 802df08:	f77f aeac 	ble.w	802dc64 <_vfiprintf_r+0x5a4>
 802df0c:	4639      	mov	r1, r7
 802df0e:	4648      	mov	r0, r9
 802df10:	aa10      	add	r2, sp, #64	; 0x40
 802df12:	f7ff fba3 	bl	802d65c <__sprint_r>
 802df16:	2800      	cmp	r0, #0
 802df18:	f43f aea4 	beq.w	802dc64 <_vfiprintf_r+0x5a4>
 802df1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802df1e:	07d9      	lsls	r1, r3, #31
 802df20:	d405      	bmi.n	802df2e <_vfiprintf_r+0x86e>
 802df22:	89bb      	ldrh	r3, [r7, #12]
 802df24:	059a      	lsls	r2, r3, #22
 802df26:	d402      	bmi.n	802df2e <_vfiprintf_r+0x86e>
 802df28:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802df2a:	f7fd fdc2 	bl	802bab2 <__retarget_lock_release_recursive>
 802df2e:	89bb      	ldrh	r3, [r7, #12]
 802df30:	065b      	lsls	r3, r3, #25
 802df32:	f57f abf6 	bpl.w	802d722 <_vfiprintf_r+0x62>
 802df36:	f7ff bbf1 	b.w	802d71c <_vfiprintf_r+0x5c>
 802df3a:	3110      	adds	r1, #16
 802df3c:	2a07      	cmp	r2, #7
 802df3e:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 802df42:	605e      	str	r6, [r3, #4]
 802df44:	dc02      	bgt.n	802df4c <_vfiprintf_r+0x88c>
 802df46:	3308      	adds	r3, #8
 802df48:	3c10      	subs	r4, #16
 802df4a:	e7d1      	b.n	802def0 <_vfiprintf_r+0x830>
 802df4c:	4639      	mov	r1, r7
 802df4e:	4648      	mov	r0, r9
 802df50:	aa10      	add	r2, sp, #64	; 0x40
 802df52:	f7ff fb83 	bl	802d65c <__sprint_r>
 802df56:	2800      	cmp	r0, #0
 802df58:	d1e0      	bne.n	802df1c <_vfiprintf_r+0x85c>
 802df5a:	ab13      	add	r3, sp, #76	; 0x4c
 802df5c:	e7f4      	b.n	802df48 <_vfiprintf_r+0x888>
 802df5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802df60:	b913      	cbnz	r3, 802df68 <_vfiprintf_r+0x8a8>
 802df62:	2300      	movs	r3, #0
 802df64:	9311      	str	r3, [sp, #68]	; 0x44
 802df66:	e7d9      	b.n	802df1c <_vfiprintf_r+0x85c>
 802df68:	4639      	mov	r1, r7
 802df6a:	4648      	mov	r0, r9
 802df6c:	aa10      	add	r2, sp, #64	; 0x40
 802df6e:	f7ff fb75 	bl	802d65c <__sprint_r>
 802df72:	2800      	cmp	r0, #0
 802df74:	d0f5      	beq.n	802df62 <_vfiprintf_r+0x8a2>
 802df76:	e7d1      	b.n	802df1c <_vfiprintf_r+0x85c>
 802df78:	ea54 0205 	orrs.w	r2, r4, r5
 802df7c:	f8cd a014 	str.w	sl, [sp, #20]
 802df80:	f43f ad89 	beq.w	802da96 <_vfiprintf_r+0x3d6>
 802df84:	2b01      	cmp	r3, #1
 802df86:	f43f aed8 	beq.w	802dd3a <_vfiprintf_r+0x67a>
 802df8a:	2b02      	cmp	r3, #2
 802df8c:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 802df90:	f43f af26 	beq.w	802dde0 <_vfiprintf_r+0x720>
 802df94:	f004 0207 	and.w	r2, r4, #7
 802df98:	08e4      	lsrs	r4, r4, #3
 802df9a:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802df9e:	08ed      	lsrs	r5, r5, #3
 802dfa0:	3230      	adds	r2, #48	; 0x30
 802dfa2:	ea54 0005 	orrs.w	r0, r4, r5
 802dfa6:	4659      	mov	r1, fp
 802dfa8:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 802dfac:	d1f2      	bne.n	802df94 <_vfiprintf_r+0x8d4>
 802dfae:	9b05      	ldr	r3, [sp, #20]
 802dfb0:	07d8      	lsls	r0, r3, #31
 802dfb2:	d506      	bpl.n	802dfc2 <_vfiprintf_r+0x902>
 802dfb4:	2a30      	cmp	r2, #48	; 0x30
 802dfb6:	d004      	beq.n	802dfc2 <_vfiprintf_r+0x902>
 802dfb8:	2230      	movs	r2, #48	; 0x30
 802dfba:	f80b 2c01 	strb.w	r2, [fp, #-1]
 802dfbe:	f1a1 0b02 	sub.w	fp, r1, #2
 802dfc2:	ab3c      	add	r3, sp, #240	; 0xf0
 802dfc4:	eba3 030b 	sub.w	r3, r3, fp
 802dfc8:	9d01      	ldr	r5, [sp, #4]
 802dfca:	f8dd a014 	ldr.w	sl, [sp, #20]
 802dfce:	9301      	str	r3, [sp, #4]
 802dfd0:	e59a      	b.n	802db08 <_vfiprintf_r+0x448>
 802dfd2:	bf00      	nop
 802dfd4:	08031082 	.word	0x08031082
 802dfd8:	08031092 	.word	0x08031092

0802dfdc <__sbprintf>:
 802dfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 802dfde:	461f      	mov	r7, r3
 802dfe0:	898b      	ldrh	r3, [r1, #12]
 802dfe2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 802dfe6:	f023 0302 	bic.w	r3, r3, #2
 802dfea:	f8ad 300c 	strh.w	r3, [sp, #12]
 802dfee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 802dff0:	4615      	mov	r5, r2
 802dff2:	9319      	str	r3, [sp, #100]	; 0x64
 802dff4:	89cb      	ldrh	r3, [r1, #14]
 802dff6:	4606      	mov	r6, r0
 802dff8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802dffc:	69cb      	ldr	r3, [r1, #28]
 802dffe:	a816      	add	r0, sp, #88	; 0x58
 802e000:	9307      	str	r3, [sp, #28]
 802e002:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 802e004:	460c      	mov	r4, r1
 802e006:	9309      	str	r3, [sp, #36]	; 0x24
 802e008:	ab1a      	add	r3, sp, #104	; 0x68
 802e00a:	9300      	str	r3, [sp, #0]
 802e00c:	9304      	str	r3, [sp, #16]
 802e00e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802e012:	9302      	str	r3, [sp, #8]
 802e014:	9305      	str	r3, [sp, #20]
 802e016:	2300      	movs	r3, #0
 802e018:	9306      	str	r3, [sp, #24]
 802e01a:	f7fd fd47 	bl	802baac <__retarget_lock_init_recursive>
 802e01e:	462a      	mov	r2, r5
 802e020:	463b      	mov	r3, r7
 802e022:	4669      	mov	r1, sp
 802e024:	4630      	mov	r0, r6
 802e026:	f7ff fb4b 	bl	802d6c0 <_vfiprintf_r>
 802e02a:	1e05      	subs	r5, r0, #0
 802e02c:	db07      	blt.n	802e03e <__sbprintf+0x62>
 802e02e:	4669      	mov	r1, sp
 802e030:	4630      	mov	r0, r6
 802e032:	f000 f8f5 	bl	802e220 <_fflush_r>
 802e036:	2800      	cmp	r0, #0
 802e038:	bf18      	it	ne
 802e03a:	f04f 35ff 	movne.w	r5, #4294967295
 802e03e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802e042:	9816      	ldr	r0, [sp, #88]	; 0x58
 802e044:	065b      	lsls	r3, r3, #25
 802e046:	bf42      	ittt	mi
 802e048:	89a3      	ldrhmi	r3, [r4, #12]
 802e04a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 802e04e:	81a3      	strhmi	r3, [r4, #12]
 802e050:	f7fd fd2d 	bl	802baae <__retarget_lock_close_recursive>
 802e054:	4628      	mov	r0, r5
 802e056:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 802e05a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802e05c <_fclose_r>:
 802e05c:	b570      	push	{r4, r5, r6, lr}
 802e05e:	4606      	mov	r6, r0
 802e060:	460c      	mov	r4, r1
 802e062:	b911      	cbnz	r1, 802e06a <_fclose_r+0xe>
 802e064:	2500      	movs	r5, #0
 802e066:	4628      	mov	r0, r5
 802e068:	bd70      	pop	{r4, r5, r6, pc}
 802e06a:	b118      	cbz	r0, 802e074 <_fclose_r+0x18>
 802e06c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 802e06e:	b90b      	cbnz	r3, 802e074 <_fclose_r+0x18>
 802e070:	f7fd fbca 	bl	802b808 <__sinit>
 802e074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e076:	07d8      	lsls	r0, r3, #31
 802e078:	d405      	bmi.n	802e086 <_fclose_r+0x2a>
 802e07a:	89a3      	ldrh	r3, [r4, #12]
 802e07c:	0599      	lsls	r1, r3, #22
 802e07e:	d402      	bmi.n	802e086 <_fclose_r+0x2a>
 802e080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e082:	f7fd fd15 	bl	802bab0 <__retarget_lock_acquire_recursive>
 802e086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e08a:	b93b      	cbnz	r3, 802e09c <_fclose_r+0x40>
 802e08c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 802e08e:	f015 0501 	ands.w	r5, r5, #1
 802e092:	d1e7      	bne.n	802e064 <_fclose_r+0x8>
 802e094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e096:	f7fd fd0c 	bl	802bab2 <__retarget_lock_release_recursive>
 802e09a:	e7e4      	b.n	802e066 <_fclose_r+0xa>
 802e09c:	4621      	mov	r1, r4
 802e09e:	4630      	mov	r0, r6
 802e0a0:	f000 f834 	bl	802e10c <__sflush_r>
 802e0a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802e0a6:	4605      	mov	r5, r0
 802e0a8:	b133      	cbz	r3, 802e0b8 <_fclose_r+0x5c>
 802e0aa:	4630      	mov	r0, r6
 802e0ac:	69e1      	ldr	r1, [r4, #28]
 802e0ae:	4798      	blx	r3
 802e0b0:	2800      	cmp	r0, #0
 802e0b2:	bfb8      	it	lt
 802e0b4:	f04f 35ff 	movlt.w	r5, #4294967295
 802e0b8:	89a3      	ldrh	r3, [r4, #12]
 802e0ba:	061a      	lsls	r2, r3, #24
 802e0bc:	d503      	bpl.n	802e0c6 <_fclose_r+0x6a>
 802e0be:	4630      	mov	r0, r6
 802e0c0:	6921      	ldr	r1, [r4, #16]
 802e0c2:	f7fd fd69 	bl	802bb98 <_free_r>
 802e0c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802e0c8:	b141      	cbz	r1, 802e0dc <_fclose_r+0x80>
 802e0ca:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802e0ce:	4299      	cmp	r1, r3
 802e0d0:	d002      	beq.n	802e0d8 <_fclose_r+0x7c>
 802e0d2:	4630      	mov	r0, r6
 802e0d4:	f7fd fd60 	bl	802bb98 <_free_r>
 802e0d8:	2300      	movs	r3, #0
 802e0da:	6323      	str	r3, [r4, #48]	; 0x30
 802e0dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802e0de:	b121      	cbz	r1, 802e0ea <_fclose_r+0x8e>
 802e0e0:	4630      	mov	r0, r6
 802e0e2:	f7fd fd59 	bl	802bb98 <_free_r>
 802e0e6:	2300      	movs	r3, #0
 802e0e8:	6463      	str	r3, [r4, #68]	; 0x44
 802e0ea:	f7fd fb81 	bl	802b7f0 <__sfp_lock_acquire>
 802e0ee:	2300      	movs	r3, #0
 802e0f0:	81a3      	strh	r3, [r4, #12]
 802e0f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e0f4:	07db      	lsls	r3, r3, #31
 802e0f6:	d402      	bmi.n	802e0fe <_fclose_r+0xa2>
 802e0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e0fa:	f7fd fcda 	bl	802bab2 <__retarget_lock_release_recursive>
 802e0fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e100:	f7fd fcd5 	bl	802baae <__retarget_lock_close_recursive>
 802e104:	f7fd fb7a 	bl	802b7fc <__sfp_lock_release>
 802e108:	e7ad      	b.n	802e066 <_fclose_r+0xa>
	...

0802e10c <__sflush_r>:
 802e10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e10e:	898b      	ldrh	r3, [r1, #12]
 802e110:	4605      	mov	r5, r0
 802e112:	0718      	lsls	r0, r3, #28
 802e114:	460c      	mov	r4, r1
 802e116:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802e11a:	d45e      	bmi.n	802e1da <__sflush_r+0xce>
 802e11c:	684b      	ldr	r3, [r1, #4]
 802e11e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802e122:	2b00      	cmp	r3, #0
 802e124:	818a      	strh	r2, [r1, #12]
 802e126:	dc04      	bgt.n	802e132 <__sflush_r+0x26>
 802e128:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 802e12a:	2b00      	cmp	r3, #0
 802e12c:	dc01      	bgt.n	802e132 <__sflush_r+0x26>
 802e12e:	2000      	movs	r0, #0
 802e130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e132:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802e134:	2e00      	cmp	r6, #0
 802e136:	d0fa      	beq.n	802e12e <__sflush_r+0x22>
 802e138:	2300      	movs	r3, #0
 802e13a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802e13e:	682f      	ldr	r7, [r5, #0]
 802e140:	69e1      	ldr	r1, [r4, #28]
 802e142:	602b      	str	r3, [r5, #0]
 802e144:	d036      	beq.n	802e1b4 <__sflush_r+0xa8>
 802e146:	6d20      	ldr	r0, [r4, #80]	; 0x50
 802e148:	89a3      	ldrh	r3, [r4, #12]
 802e14a:	075a      	lsls	r2, r3, #29
 802e14c:	d505      	bpl.n	802e15a <__sflush_r+0x4e>
 802e14e:	6863      	ldr	r3, [r4, #4]
 802e150:	1ac0      	subs	r0, r0, r3
 802e152:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802e154:	b10b      	cbz	r3, 802e15a <__sflush_r+0x4e>
 802e156:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802e158:	1ac0      	subs	r0, r0, r3
 802e15a:	2300      	movs	r3, #0
 802e15c:	4602      	mov	r2, r0
 802e15e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802e160:	4628      	mov	r0, r5
 802e162:	69e1      	ldr	r1, [r4, #28]
 802e164:	47b0      	blx	r6
 802e166:	1c43      	adds	r3, r0, #1
 802e168:	89a3      	ldrh	r3, [r4, #12]
 802e16a:	d106      	bne.n	802e17a <__sflush_r+0x6e>
 802e16c:	6829      	ldr	r1, [r5, #0]
 802e16e:	291d      	cmp	r1, #29
 802e170:	d82f      	bhi.n	802e1d2 <__sflush_r+0xc6>
 802e172:	4a2a      	ldr	r2, [pc, #168]	; (802e21c <__sflush_r+0x110>)
 802e174:	410a      	asrs	r2, r1
 802e176:	07d6      	lsls	r6, r2, #31
 802e178:	d42b      	bmi.n	802e1d2 <__sflush_r+0xc6>
 802e17a:	2200      	movs	r2, #0
 802e17c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802e180:	b21b      	sxth	r3, r3
 802e182:	6062      	str	r2, [r4, #4]
 802e184:	6922      	ldr	r2, [r4, #16]
 802e186:	04d9      	lsls	r1, r3, #19
 802e188:	81a3      	strh	r3, [r4, #12]
 802e18a:	6022      	str	r2, [r4, #0]
 802e18c:	d504      	bpl.n	802e198 <__sflush_r+0x8c>
 802e18e:	1c42      	adds	r2, r0, #1
 802e190:	d101      	bne.n	802e196 <__sflush_r+0x8a>
 802e192:	682b      	ldr	r3, [r5, #0]
 802e194:	b903      	cbnz	r3, 802e198 <__sflush_r+0x8c>
 802e196:	6520      	str	r0, [r4, #80]	; 0x50
 802e198:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802e19a:	602f      	str	r7, [r5, #0]
 802e19c:	2900      	cmp	r1, #0
 802e19e:	d0c6      	beq.n	802e12e <__sflush_r+0x22>
 802e1a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802e1a4:	4299      	cmp	r1, r3
 802e1a6:	d002      	beq.n	802e1ae <__sflush_r+0xa2>
 802e1a8:	4628      	mov	r0, r5
 802e1aa:	f7fd fcf5 	bl	802bb98 <_free_r>
 802e1ae:	2000      	movs	r0, #0
 802e1b0:	6320      	str	r0, [r4, #48]	; 0x30
 802e1b2:	e7bd      	b.n	802e130 <__sflush_r+0x24>
 802e1b4:	2301      	movs	r3, #1
 802e1b6:	4628      	mov	r0, r5
 802e1b8:	47b0      	blx	r6
 802e1ba:	1c41      	adds	r1, r0, #1
 802e1bc:	d1c4      	bne.n	802e148 <__sflush_r+0x3c>
 802e1be:	682b      	ldr	r3, [r5, #0]
 802e1c0:	2b00      	cmp	r3, #0
 802e1c2:	d0c1      	beq.n	802e148 <__sflush_r+0x3c>
 802e1c4:	2b1d      	cmp	r3, #29
 802e1c6:	d001      	beq.n	802e1cc <__sflush_r+0xc0>
 802e1c8:	2b16      	cmp	r3, #22
 802e1ca:	d101      	bne.n	802e1d0 <__sflush_r+0xc4>
 802e1cc:	602f      	str	r7, [r5, #0]
 802e1ce:	e7ae      	b.n	802e12e <__sflush_r+0x22>
 802e1d0:	89a3      	ldrh	r3, [r4, #12]
 802e1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e1d6:	81a3      	strh	r3, [r4, #12]
 802e1d8:	e7aa      	b.n	802e130 <__sflush_r+0x24>
 802e1da:	690f      	ldr	r7, [r1, #16]
 802e1dc:	2f00      	cmp	r7, #0
 802e1de:	d0a6      	beq.n	802e12e <__sflush_r+0x22>
 802e1e0:	079b      	lsls	r3, r3, #30
 802e1e2:	bf18      	it	ne
 802e1e4:	2300      	movne	r3, #0
 802e1e6:	680e      	ldr	r6, [r1, #0]
 802e1e8:	bf08      	it	eq
 802e1ea:	694b      	ldreq	r3, [r1, #20]
 802e1ec:	1bf6      	subs	r6, r6, r7
 802e1ee:	600f      	str	r7, [r1, #0]
 802e1f0:	608b      	str	r3, [r1, #8]
 802e1f2:	2e00      	cmp	r6, #0
 802e1f4:	dd9b      	ble.n	802e12e <__sflush_r+0x22>
 802e1f6:	4633      	mov	r3, r6
 802e1f8:	463a      	mov	r2, r7
 802e1fa:	4628      	mov	r0, r5
 802e1fc:	69e1      	ldr	r1, [r4, #28]
 802e1fe:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 802e202:	47e0      	blx	ip
 802e204:	2800      	cmp	r0, #0
 802e206:	dc06      	bgt.n	802e216 <__sflush_r+0x10a>
 802e208:	89a3      	ldrh	r3, [r4, #12]
 802e20a:	f04f 30ff 	mov.w	r0, #4294967295
 802e20e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e212:	81a3      	strh	r3, [r4, #12]
 802e214:	e78c      	b.n	802e130 <__sflush_r+0x24>
 802e216:	4407      	add	r7, r0
 802e218:	1a36      	subs	r6, r6, r0
 802e21a:	e7ea      	b.n	802e1f2 <__sflush_r+0xe6>
 802e21c:	dfbffffe 	.word	0xdfbffffe

0802e220 <_fflush_r>:
 802e220:	b538      	push	{r3, r4, r5, lr}
 802e222:	460c      	mov	r4, r1
 802e224:	4605      	mov	r5, r0
 802e226:	b118      	cbz	r0, 802e230 <_fflush_r+0x10>
 802e228:	6b43      	ldr	r3, [r0, #52]	; 0x34
 802e22a:	b90b      	cbnz	r3, 802e230 <_fflush_r+0x10>
 802e22c:	f7fd faec 	bl	802b808 <__sinit>
 802e230:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802e234:	b1b8      	cbz	r0, 802e266 <_fflush_r+0x46>
 802e236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e238:	07db      	lsls	r3, r3, #31
 802e23a:	d404      	bmi.n	802e246 <_fflush_r+0x26>
 802e23c:	0581      	lsls	r1, r0, #22
 802e23e:	d402      	bmi.n	802e246 <_fflush_r+0x26>
 802e240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e242:	f7fd fc35 	bl	802bab0 <__retarget_lock_acquire_recursive>
 802e246:	4628      	mov	r0, r5
 802e248:	4621      	mov	r1, r4
 802e24a:	f7ff ff5f 	bl	802e10c <__sflush_r>
 802e24e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e250:	4605      	mov	r5, r0
 802e252:	07da      	lsls	r2, r3, #31
 802e254:	d405      	bmi.n	802e262 <_fflush_r+0x42>
 802e256:	89a3      	ldrh	r3, [r4, #12]
 802e258:	059b      	lsls	r3, r3, #22
 802e25a:	d402      	bmi.n	802e262 <_fflush_r+0x42>
 802e25c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e25e:	f7fd fc28 	bl	802bab2 <__retarget_lock_release_recursive>
 802e262:	4628      	mov	r0, r5
 802e264:	bd38      	pop	{r3, r4, r5, pc}
 802e266:	4605      	mov	r5, r0
 802e268:	e7fb      	b.n	802e262 <_fflush_r+0x42>
	...

0802e26c <__sfvwrite_r>:
 802e26c:	6893      	ldr	r3, [r2, #8]
 802e26e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e272:	4606      	mov	r6, r0
 802e274:	460c      	mov	r4, r1
 802e276:	4691      	mov	r9, r2
 802e278:	b91b      	cbnz	r3, 802e282 <__sfvwrite_r+0x16>
 802e27a:	2000      	movs	r0, #0
 802e27c:	b003      	add	sp, #12
 802e27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e282:	898b      	ldrh	r3, [r1, #12]
 802e284:	0718      	lsls	r0, r3, #28
 802e286:	d54f      	bpl.n	802e328 <__sfvwrite_r+0xbc>
 802e288:	690b      	ldr	r3, [r1, #16]
 802e28a:	2b00      	cmp	r3, #0
 802e28c:	d04c      	beq.n	802e328 <__sfvwrite_r+0xbc>
 802e28e:	89a3      	ldrh	r3, [r4, #12]
 802e290:	f8d9 8000 	ldr.w	r8, [r9]
 802e294:	f013 0702 	ands.w	r7, r3, #2
 802e298:	d16b      	bne.n	802e372 <__sfvwrite_r+0x106>
 802e29a:	f013 0301 	ands.w	r3, r3, #1
 802e29e:	f000 809b 	beq.w	802e3d8 <__sfvwrite_r+0x16c>
 802e2a2:	4638      	mov	r0, r7
 802e2a4:	46ba      	mov	sl, r7
 802e2a6:	46bb      	mov	fp, r7
 802e2a8:	f1bb 0f00 	cmp.w	fp, #0
 802e2ac:	f000 8102 	beq.w	802e4b4 <__sfvwrite_r+0x248>
 802e2b0:	b950      	cbnz	r0, 802e2c8 <__sfvwrite_r+0x5c>
 802e2b2:	465a      	mov	r2, fp
 802e2b4:	210a      	movs	r1, #10
 802e2b6:	4650      	mov	r0, sl
 802e2b8:	f000 fa4c 	bl	802e754 <memchr>
 802e2bc:	2800      	cmp	r0, #0
 802e2be:	f000 80ff 	beq.w	802e4c0 <__sfvwrite_r+0x254>
 802e2c2:	3001      	adds	r0, #1
 802e2c4:	eba0 070a 	sub.w	r7, r0, sl
 802e2c8:	6820      	ldr	r0, [r4, #0]
 802e2ca:	6921      	ldr	r1, [r4, #16]
 802e2cc:	455f      	cmp	r7, fp
 802e2ce:	463a      	mov	r2, r7
 802e2d0:	bf28      	it	cs
 802e2d2:	465a      	movcs	r2, fp
 802e2d4:	4288      	cmp	r0, r1
 802e2d6:	68a5      	ldr	r5, [r4, #8]
 802e2d8:	6963      	ldr	r3, [r4, #20]
 802e2da:	f240 80f4 	bls.w	802e4c6 <__sfvwrite_r+0x25a>
 802e2de:	441d      	add	r5, r3
 802e2e0:	42aa      	cmp	r2, r5
 802e2e2:	f340 80f0 	ble.w	802e4c6 <__sfvwrite_r+0x25a>
 802e2e6:	4651      	mov	r1, sl
 802e2e8:	462a      	mov	r2, r5
 802e2ea:	f000 f9cb 	bl	802e684 <memmove>
 802e2ee:	6823      	ldr	r3, [r4, #0]
 802e2f0:	4621      	mov	r1, r4
 802e2f2:	442b      	add	r3, r5
 802e2f4:	4630      	mov	r0, r6
 802e2f6:	6023      	str	r3, [r4, #0]
 802e2f8:	f7ff ff92 	bl	802e220 <_fflush_r>
 802e2fc:	2800      	cmp	r0, #0
 802e2fe:	d166      	bne.n	802e3ce <__sfvwrite_r+0x162>
 802e300:	1b7f      	subs	r7, r7, r5
 802e302:	f040 80f8 	bne.w	802e4f6 <__sfvwrite_r+0x28a>
 802e306:	4621      	mov	r1, r4
 802e308:	4630      	mov	r0, r6
 802e30a:	f7ff ff89 	bl	802e220 <_fflush_r>
 802e30e:	2800      	cmp	r0, #0
 802e310:	d15d      	bne.n	802e3ce <__sfvwrite_r+0x162>
 802e312:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802e316:	44aa      	add	sl, r5
 802e318:	1b5b      	subs	r3, r3, r5
 802e31a:	ebab 0b05 	sub.w	fp, fp, r5
 802e31e:	f8c9 3008 	str.w	r3, [r9, #8]
 802e322:	2b00      	cmp	r3, #0
 802e324:	d1c0      	bne.n	802e2a8 <__sfvwrite_r+0x3c>
 802e326:	e7a8      	b.n	802e27a <__sfvwrite_r+0xe>
 802e328:	4621      	mov	r1, r4
 802e32a:	4630      	mov	r0, r6
 802e32c:	f000 f8e8 	bl	802e500 <__swsetup_r>
 802e330:	2800      	cmp	r0, #0
 802e332:	d0ac      	beq.n	802e28e <__sfvwrite_r+0x22>
 802e334:	f04f 30ff 	mov.w	r0, #4294967295
 802e338:	e7a0      	b.n	802e27c <__sfvwrite_r+0x10>
 802e33a:	e9d8 a500 	ldrd	sl, r5, [r8]
 802e33e:	f108 0808 	add.w	r8, r8, #8
 802e342:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 802e346:	69e1      	ldr	r1, [r4, #28]
 802e348:	2d00      	cmp	r5, #0
 802e34a:	d0f6      	beq.n	802e33a <__sfvwrite_r+0xce>
 802e34c:	42bd      	cmp	r5, r7
 802e34e:	462b      	mov	r3, r5
 802e350:	4652      	mov	r2, sl
 802e352:	bf28      	it	cs
 802e354:	463b      	movcs	r3, r7
 802e356:	4630      	mov	r0, r6
 802e358:	47d8      	blx	fp
 802e35a:	2800      	cmp	r0, #0
 802e35c:	dd37      	ble.n	802e3ce <__sfvwrite_r+0x162>
 802e35e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802e362:	4482      	add	sl, r0
 802e364:	1a1b      	subs	r3, r3, r0
 802e366:	1a2d      	subs	r5, r5, r0
 802e368:	f8c9 3008 	str.w	r3, [r9, #8]
 802e36c:	2b00      	cmp	r3, #0
 802e36e:	d1e8      	bne.n	802e342 <__sfvwrite_r+0xd6>
 802e370:	e783      	b.n	802e27a <__sfvwrite_r+0xe>
 802e372:	f04f 0a00 	mov.w	sl, #0
 802e376:	4f61      	ldr	r7, [pc, #388]	; (802e4fc <__sfvwrite_r+0x290>)
 802e378:	4655      	mov	r5, sl
 802e37a:	e7e2      	b.n	802e342 <__sfvwrite_r+0xd6>
 802e37c:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802e380:	f108 0808 	add.w	r8, r8, #8
 802e384:	6820      	ldr	r0, [r4, #0]
 802e386:	68a2      	ldr	r2, [r4, #8]
 802e388:	f1ba 0f00 	cmp.w	sl, #0
 802e38c:	d0f6      	beq.n	802e37c <__sfvwrite_r+0x110>
 802e38e:	89a3      	ldrh	r3, [r4, #12]
 802e390:	0599      	lsls	r1, r3, #22
 802e392:	d563      	bpl.n	802e45c <__sfvwrite_r+0x1f0>
 802e394:	4552      	cmp	r2, sl
 802e396:	d836      	bhi.n	802e406 <__sfvwrite_r+0x19a>
 802e398:	f413 6f90 	tst.w	r3, #1152	; 0x480
 802e39c:	d033      	beq.n	802e406 <__sfvwrite_r+0x19a>
 802e39e:	6921      	ldr	r1, [r4, #16]
 802e3a0:	6965      	ldr	r5, [r4, #20]
 802e3a2:	eba0 0b01 	sub.w	fp, r0, r1
 802e3a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802e3aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802e3ae:	f10b 0201 	add.w	r2, fp, #1
 802e3b2:	106d      	asrs	r5, r5, #1
 802e3b4:	4452      	add	r2, sl
 802e3b6:	4295      	cmp	r5, r2
 802e3b8:	bf38      	it	cc
 802e3ba:	4615      	movcc	r5, r2
 802e3bc:	055b      	lsls	r3, r3, #21
 802e3be:	d53d      	bpl.n	802e43c <__sfvwrite_r+0x1d0>
 802e3c0:	4629      	mov	r1, r5
 802e3c2:	4630      	mov	r0, r6
 802e3c4:	f7fd fca8 	bl	802bd18 <_malloc_r>
 802e3c8:	b948      	cbnz	r0, 802e3de <__sfvwrite_r+0x172>
 802e3ca:	230c      	movs	r3, #12
 802e3cc:	6033      	str	r3, [r6, #0]
 802e3ce:	89a3      	ldrh	r3, [r4, #12]
 802e3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e3d4:	81a3      	strh	r3, [r4, #12]
 802e3d6:	e7ad      	b.n	802e334 <__sfvwrite_r+0xc8>
 802e3d8:	461f      	mov	r7, r3
 802e3da:	469a      	mov	sl, r3
 802e3dc:	e7d2      	b.n	802e384 <__sfvwrite_r+0x118>
 802e3de:	465a      	mov	r2, fp
 802e3e0:	6921      	ldr	r1, [r4, #16]
 802e3e2:	9001      	str	r0, [sp, #4]
 802e3e4:	f7fd fb66 	bl	802bab4 <memcpy>
 802e3e8:	89a2      	ldrh	r2, [r4, #12]
 802e3ea:	9b01      	ldr	r3, [sp, #4]
 802e3ec:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 802e3f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802e3f4:	81a2      	strh	r2, [r4, #12]
 802e3f6:	4652      	mov	r2, sl
 802e3f8:	6123      	str	r3, [r4, #16]
 802e3fa:	6165      	str	r5, [r4, #20]
 802e3fc:	445b      	add	r3, fp
 802e3fe:	eba5 050b 	sub.w	r5, r5, fp
 802e402:	6023      	str	r3, [r4, #0]
 802e404:	60a5      	str	r5, [r4, #8]
 802e406:	4552      	cmp	r2, sl
 802e408:	bf28      	it	cs
 802e40a:	4652      	movcs	r2, sl
 802e40c:	4655      	mov	r5, sl
 802e40e:	4639      	mov	r1, r7
 802e410:	6820      	ldr	r0, [r4, #0]
 802e412:	9201      	str	r2, [sp, #4]
 802e414:	f000 f936 	bl	802e684 <memmove>
 802e418:	68a3      	ldr	r3, [r4, #8]
 802e41a:	9a01      	ldr	r2, [sp, #4]
 802e41c:	1a9b      	subs	r3, r3, r2
 802e41e:	60a3      	str	r3, [r4, #8]
 802e420:	6823      	ldr	r3, [r4, #0]
 802e422:	4413      	add	r3, r2
 802e424:	6023      	str	r3, [r4, #0]
 802e426:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802e42a:	442f      	add	r7, r5
 802e42c:	1b5b      	subs	r3, r3, r5
 802e42e:	ebaa 0a05 	sub.w	sl, sl, r5
 802e432:	f8c9 3008 	str.w	r3, [r9, #8]
 802e436:	2b00      	cmp	r3, #0
 802e438:	d1a4      	bne.n	802e384 <__sfvwrite_r+0x118>
 802e43a:	e71e      	b.n	802e27a <__sfvwrite_r+0xe>
 802e43c:	462a      	mov	r2, r5
 802e43e:	4630      	mov	r0, r6
 802e440:	f001 fb9a 	bl	802fb78 <_realloc_r>
 802e444:	4603      	mov	r3, r0
 802e446:	2800      	cmp	r0, #0
 802e448:	d1d5      	bne.n	802e3f6 <__sfvwrite_r+0x18a>
 802e44a:	4630      	mov	r0, r6
 802e44c:	6921      	ldr	r1, [r4, #16]
 802e44e:	f7fd fba3 	bl	802bb98 <_free_r>
 802e452:	89a3      	ldrh	r3, [r4, #12]
 802e454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802e458:	81a3      	strh	r3, [r4, #12]
 802e45a:	e7b6      	b.n	802e3ca <__sfvwrite_r+0x15e>
 802e45c:	6923      	ldr	r3, [r4, #16]
 802e45e:	4283      	cmp	r3, r0
 802e460:	d302      	bcc.n	802e468 <__sfvwrite_r+0x1fc>
 802e462:	6961      	ldr	r1, [r4, #20]
 802e464:	4551      	cmp	r1, sl
 802e466:	d915      	bls.n	802e494 <__sfvwrite_r+0x228>
 802e468:	4552      	cmp	r2, sl
 802e46a:	bf28      	it	cs
 802e46c:	4652      	movcs	r2, sl
 802e46e:	4615      	mov	r5, r2
 802e470:	4639      	mov	r1, r7
 802e472:	f000 f907 	bl	802e684 <memmove>
 802e476:	68a3      	ldr	r3, [r4, #8]
 802e478:	6822      	ldr	r2, [r4, #0]
 802e47a:	1b5b      	subs	r3, r3, r5
 802e47c:	442a      	add	r2, r5
 802e47e:	60a3      	str	r3, [r4, #8]
 802e480:	6022      	str	r2, [r4, #0]
 802e482:	2b00      	cmp	r3, #0
 802e484:	d1cf      	bne.n	802e426 <__sfvwrite_r+0x1ba>
 802e486:	4621      	mov	r1, r4
 802e488:	4630      	mov	r0, r6
 802e48a:	f7ff fec9 	bl	802e220 <_fflush_r>
 802e48e:	2800      	cmp	r0, #0
 802e490:	d0c9      	beq.n	802e426 <__sfvwrite_r+0x1ba>
 802e492:	e79c      	b.n	802e3ce <__sfvwrite_r+0x162>
 802e494:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802e498:	459a      	cmp	sl, r3
 802e49a:	bf38      	it	cc
 802e49c:	4653      	movcc	r3, sl
 802e49e:	fb93 f3f1 	sdiv	r3, r3, r1
 802e4a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802e4a4:	434b      	muls	r3, r1
 802e4a6:	463a      	mov	r2, r7
 802e4a8:	4630      	mov	r0, r6
 802e4aa:	69e1      	ldr	r1, [r4, #28]
 802e4ac:	47a8      	blx	r5
 802e4ae:	1e05      	subs	r5, r0, #0
 802e4b0:	dcb9      	bgt.n	802e426 <__sfvwrite_r+0x1ba>
 802e4b2:	e78c      	b.n	802e3ce <__sfvwrite_r+0x162>
 802e4b4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 802e4b8:	2000      	movs	r0, #0
 802e4ba:	f108 0808 	add.w	r8, r8, #8
 802e4be:	e6f3      	b.n	802e2a8 <__sfvwrite_r+0x3c>
 802e4c0:	f10b 0701 	add.w	r7, fp, #1
 802e4c4:	e700      	b.n	802e2c8 <__sfvwrite_r+0x5c>
 802e4c6:	4293      	cmp	r3, r2
 802e4c8:	dc08      	bgt.n	802e4dc <__sfvwrite_r+0x270>
 802e4ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802e4cc:	4652      	mov	r2, sl
 802e4ce:	4630      	mov	r0, r6
 802e4d0:	69e1      	ldr	r1, [r4, #28]
 802e4d2:	47a8      	blx	r5
 802e4d4:	1e05      	subs	r5, r0, #0
 802e4d6:	f73f af13 	bgt.w	802e300 <__sfvwrite_r+0x94>
 802e4da:	e778      	b.n	802e3ce <__sfvwrite_r+0x162>
 802e4dc:	4651      	mov	r1, sl
 802e4de:	9201      	str	r2, [sp, #4]
 802e4e0:	f000 f8d0 	bl	802e684 <memmove>
 802e4e4:	9a01      	ldr	r2, [sp, #4]
 802e4e6:	68a3      	ldr	r3, [r4, #8]
 802e4e8:	4615      	mov	r5, r2
 802e4ea:	1a9b      	subs	r3, r3, r2
 802e4ec:	60a3      	str	r3, [r4, #8]
 802e4ee:	6823      	ldr	r3, [r4, #0]
 802e4f0:	4413      	add	r3, r2
 802e4f2:	6023      	str	r3, [r4, #0]
 802e4f4:	e704      	b.n	802e300 <__sfvwrite_r+0x94>
 802e4f6:	2001      	movs	r0, #1
 802e4f8:	e70b      	b.n	802e312 <__sfvwrite_r+0xa6>
 802e4fa:	bf00      	nop
 802e4fc:	7ffffc00 	.word	0x7ffffc00

0802e500 <__swsetup_r>:
 802e500:	b538      	push	{r3, r4, r5, lr}
 802e502:	4b2a      	ldr	r3, [pc, #168]	; (802e5ac <__swsetup_r+0xac>)
 802e504:	4605      	mov	r5, r0
 802e506:	6818      	ldr	r0, [r3, #0]
 802e508:	460c      	mov	r4, r1
 802e50a:	b118      	cbz	r0, 802e514 <__swsetup_r+0x14>
 802e50c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 802e50e:	b90b      	cbnz	r3, 802e514 <__swsetup_r+0x14>
 802e510:	f7fd f97a 	bl	802b808 <__sinit>
 802e514:	89a3      	ldrh	r3, [r4, #12]
 802e516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e51a:	0718      	lsls	r0, r3, #28
 802e51c:	d422      	bmi.n	802e564 <__swsetup_r+0x64>
 802e51e:	06d9      	lsls	r1, r3, #27
 802e520:	d407      	bmi.n	802e532 <__swsetup_r+0x32>
 802e522:	2309      	movs	r3, #9
 802e524:	602b      	str	r3, [r5, #0]
 802e526:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802e52a:	f04f 30ff 	mov.w	r0, #4294967295
 802e52e:	81a3      	strh	r3, [r4, #12]
 802e530:	e034      	b.n	802e59c <__swsetup_r+0x9c>
 802e532:	0758      	lsls	r0, r3, #29
 802e534:	d512      	bpl.n	802e55c <__swsetup_r+0x5c>
 802e536:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802e538:	b141      	cbz	r1, 802e54c <__swsetup_r+0x4c>
 802e53a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802e53e:	4299      	cmp	r1, r3
 802e540:	d002      	beq.n	802e548 <__swsetup_r+0x48>
 802e542:	4628      	mov	r0, r5
 802e544:	f7fd fb28 	bl	802bb98 <_free_r>
 802e548:	2300      	movs	r3, #0
 802e54a:	6323      	str	r3, [r4, #48]	; 0x30
 802e54c:	89a3      	ldrh	r3, [r4, #12]
 802e54e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802e552:	81a3      	strh	r3, [r4, #12]
 802e554:	2300      	movs	r3, #0
 802e556:	6063      	str	r3, [r4, #4]
 802e558:	6923      	ldr	r3, [r4, #16]
 802e55a:	6023      	str	r3, [r4, #0]
 802e55c:	89a3      	ldrh	r3, [r4, #12]
 802e55e:	f043 0308 	orr.w	r3, r3, #8
 802e562:	81a3      	strh	r3, [r4, #12]
 802e564:	6923      	ldr	r3, [r4, #16]
 802e566:	b94b      	cbnz	r3, 802e57c <__swsetup_r+0x7c>
 802e568:	89a3      	ldrh	r3, [r4, #12]
 802e56a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802e56e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802e572:	d003      	beq.n	802e57c <__swsetup_r+0x7c>
 802e574:	4621      	mov	r1, r4
 802e576:	4628      	mov	r0, r5
 802e578:	f001 fcf4 	bl	802ff64 <__smakebuf_r>
 802e57c:	89a0      	ldrh	r0, [r4, #12]
 802e57e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e582:	f010 0301 	ands.w	r3, r0, #1
 802e586:	d00a      	beq.n	802e59e <__swsetup_r+0x9e>
 802e588:	2300      	movs	r3, #0
 802e58a:	60a3      	str	r3, [r4, #8]
 802e58c:	6963      	ldr	r3, [r4, #20]
 802e58e:	425b      	negs	r3, r3
 802e590:	61a3      	str	r3, [r4, #24]
 802e592:	6923      	ldr	r3, [r4, #16]
 802e594:	b943      	cbnz	r3, 802e5a8 <__swsetup_r+0xa8>
 802e596:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802e59a:	d1c4      	bne.n	802e526 <__swsetup_r+0x26>
 802e59c:	bd38      	pop	{r3, r4, r5, pc}
 802e59e:	0781      	lsls	r1, r0, #30
 802e5a0:	bf58      	it	pl
 802e5a2:	6963      	ldrpl	r3, [r4, #20]
 802e5a4:	60a3      	str	r3, [r4, #8]
 802e5a6:	e7f4      	b.n	802e592 <__swsetup_r+0x92>
 802e5a8:	2000      	movs	r0, #0
 802e5aa:	e7f7      	b.n	802e59c <__swsetup_r+0x9c>
 802e5ac:	20000338 	.word	0x20000338

0802e5b0 <__fputwc>:
 802e5b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802e5b4:	4680      	mov	r8, r0
 802e5b6:	460e      	mov	r6, r1
 802e5b8:	4615      	mov	r5, r2
 802e5ba:	f000 f891 	bl	802e6e0 <__locale_mb_cur_max>
 802e5be:	2801      	cmp	r0, #1
 802e5c0:	4604      	mov	r4, r0
 802e5c2:	d11b      	bne.n	802e5fc <__fputwc+0x4c>
 802e5c4:	1e73      	subs	r3, r6, #1
 802e5c6:	2bfe      	cmp	r3, #254	; 0xfe
 802e5c8:	d818      	bhi.n	802e5fc <__fputwc+0x4c>
 802e5ca:	f88d 6004 	strb.w	r6, [sp, #4]
 802e5ce:	2700      	movs	r7, #0
 802e5d0:	f10d 0904 	add.w	r9, sp, #4
 802e5d4:	42a7      	cmp	r7, r4
 802e5d6:	d020      	beq.n	802e61a <__fputwc+0x6a>
 802e5d8:	68ab      	ldr	r3, [r5, #8]
 802e5da:	f817 1009 	ldrb.w	r1, [r7, r9]
 802e5de:	3b01      	subs	r3, #1
 802e5e0:	2b00      	cmp	r3, #0
 802e5e2:	60ab      	str	r3, [r5, #8]
 802e5e4:	da04      	bge.n	802e5f0 <__fputwc+0x40>
 802e5e6:	69aa      	ldr	r2, [r5, #24]
 802e5e8:	4293      	cmp	r3, r2
 802e5ea:	db1a      	blt.n	802e622 <__fputwc+0x72>
 802e5ec:	290a      	cmp	r1, #10
 802e5ee:	d018      	beq.n	802e622 <__fputwc+0x72>
 802e5f0:	682b      	ldr	r3, [r5, #0]
 802e5f2:	1c5a      	adds	r2, r3, #1
 802e5f4:	602a      	str	r2, [r5, #0]
 802e5f6:	7019      	strb	r1, [r3, #0]
 802e5f8:	3701      	adds	r7, #1
 802e5fa:	e7eb      	b.n	802e5d4 <__fputwc+0x24>
 802e5fc:	4632      	mov	r2, r6
 802e5fe:	4640      	mov	r0, r8
 802e600:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 802e604:	a901      	add	r1, sp, #4
 802e606:	f001 fc6f 	bl	802fee8 <_wcrtomb_r>
 802e60a:	1c42      	adds	r2, r0, #1
 802e60c:	4604      	mov	r4, r0
 802e60e:	d1de      	bne.n	802e5ce <__fputwc+0x1e>
 802e610:	4606      	mov	r6, r0
 802e612:	89ab      	ldrh	r3, [r5, #12]
 802e614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e618:	81ab      	strh	r3, [r5, #12]
 802e61a:	4630      	mov	r0, r6
 802e61c:	b003      	add	sp, #12
 802e61e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802e622:	462a      	mov	r2, r5
 802e624:	4640      	mov	r0, r8
 802e626:	f001 fcd9 	bl	802ffdc <__swbuf_r>
 802e62a:	1c43      	adds	r3, r0, #1
 802e62c:	d1e4      	bne.n	802e5f8 <__fputwc+0x48>
 802e62e:	4606      	mov	r6, r0
 802e630:	e7f3      	b.n	802e61a <__fputwc+0x6a>

0802e632 <_fputwc_r>:
 802e632:	6e53      	ldr	r3, [r2, #100]	; 0x64
 802e634:	b570      	push	{r4, r5, r6, lr}
 802e636:	07db      	lsls	r3, r3, #31
 802e638:	4605      	mov	r5, r0
 802e63a:	460e      	mov	r6, r1
 802e63c:	4614      	mov	r4, r2
 802e63e:	d405      	bmi.n	802e64c <_fputwc_r+0x1a>
 802e640:	8993      	ldrh	r3, [r2, #12]
 802e642:	0598      	lsls	r0, r3, #22
 802e644:	d402      	bmi.n	802e64c <_fputwc_r+0x1a>
 802e646:	6d90      	ldr	r0, [r2, #88]	; 0x58
 802e648:	f7fd fa32 	bl	802bab0 <__retarget_lock_acquire_recursive>
 802e64c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e650:	0499      	lsls	r1, r3, #18
 802e652:	d406      	bmi.n	802e662 <_fputwc_r+0x30>
 802e654:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802e658:	81a3      	strh	r3, [r4, #12]
 802e65a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e65c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802e660:	6663      	str	r3, [r4, #100]	; 0x64
 802e662:	4622      	mov	r2, r4
 802e664:	4628      	mov	r0, r5
 802e666:	4631      	mov	r1, r6
 802e668:	f7ff ffa2 	bl	802e5b0 <__fputwc>
 802e66c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e66e:	4605      	mov	r5, r0
 802e670:	07da      	lsls	r2, r3, #31
 802e672:	d405      	bmi.n	802e680 <_fputwc_r+0x4e>
 802e674:	89a3      	ldrh	r3, [r4, #12]
 802e676:	059b      	lsls	r3, r3, #22
 802e678:	d402      	bmi.n	802e680 <_fputwc_r+0x4e>
 802e67a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e67c:	f7fd fa19 	bl	802bab2 <__retarget_lock_release_recursive>
 802e680:	4628      	mov	r0, r5
 802e682:	bd70      	pop	{r4, r5, r6, pc}

0802e684 <memmove>:
 802e684:	4288      	cmp	r0, r1
 802e686:	b510      	push	{r4, lr}
 802e688:	eb01 0402 	add.w	r4, r1, r2
 802e68c:	d902      	bls.n	802e694 <memmove+0x10>
 802e68e:	4284      	cmp	r4, r0
 802e690:	4623      	mov	r3, r4
 802e692:	d807      	bhi.n	802e6a4 <memmove+0x20>
 802e694:	1e43      	subs	r3, r0, #1
 802e696:	42a1      	cmp	r1, r4
 802e698:	d008      	beq.n	802e6ac <memmove+0x28>
 802e69a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802e69e:	f803 2f01 	strb.w	r2, [r3, #1]!
 802e6a2:	e7f8      	b.n	802e696 <memmove+0x12>
 802e6a4:	4601      	mov	r1, r0
 802e6a6:	4402      	add	r2, r0
 802e6a8:	428a      	cmp	r2, r1
 802e6aa:	d100      	bne.n	802e6ae <memmove+0x2a>
 802e6ac:	bd10      	pop	{r4, pc}
 802e6ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802e6b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802e6b6:	e7f7      	b.n	802e6a8 <memmove+0x24>

0802e6b8 <strncpy>:
 802e6b8:	4603      	mov	r3, r0
 802e6ba:	b510      	push	{r4, lr}
 802e6bc:	3901      	subs	r1, #1
 802e6be:	b132      	cbz	r2, 802e6ce <strncpy+0x16>
 802e6c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802e6c4:	3a01      	subs	r2, #1
 802e6c6:	f803 4b01 	strb.w	r4, [r3], #1
 802e6ca:	2c00      	cmp	r4, #0
 802e6cc:	d1f7      	bne.n	802e6be <strncpy+0x6>
 802e6ce:	2100      	movs	r1, #0
 802e6d0:	441a      	add	r2, r3
 802e6d2:	4293      	cmp	r3, r2
 802e6d4:	d100      	bne.n	802e6d8 <strncpy+0x20>
 802e6d6:	bd10      	pop	{r4, pc}
 802e6d8:	f803 1b01 	strb.w	r1, [r3], #1
 802e6dc:	e7f9      	b.n	802e6d2 <strncpy+0x1a>
	...

0802e6e0 <__locale_mb_cur_max>:
 802e6e0:	4b01      	ldr	r3, [pc, #4]	; (802e6e8 <__locale_mb_cur_max+0x8>)
 802e6e2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 802e6e6:	4770      	bx	lr
 802e6e8:	20000750 	.word	0x20000750

0802e6ec <_localeconv_r>:
 802e6ec:	4800      	ldr	r0, [pc, #0]	; (802e6f0 <_localeconv_r+0x4>)
 802e6ee:	4770      	bx	lr
 802e6f0:	20000840 	.word	0x20000840

0802e6f4 <_sbrk_r>:
 802e6f4:	b538      	push	{r3, r4, r5, lr}
 802e6f6:	2300      	movs	r3, #0
 802e6f8:	4d05      	ldr	r5, [pc, #20]	; (802e710 <_sbrk_r+0x1c>)
 802e6fa:	4604      	mov	r4, r0
 802e6fc:	4608      	mov	r0, r1
 802e6fe:	602b      	str	r3, [r5, #0]
 802e700:	f7f7 fc38 	bl	8025f74 <_sbrk>
 802e704:	1c43      	adds	r3, r0, #1
 802e706:	d102      	bne.n	802e70e <_sbrk_r+0x1a>
 802e708:	682b      	ldr	r3, [r5, #0]
 802e70a:	b103      	cbz	r3, 802e70e <_sbrk_r+0x1a>
 802e70c:	6023      	str	r3, [r4, #0]
 802e70e:	bd38      	pop	{r3, r4, r5, pc}
 802e710:	20006b14 	.word	0x20006b14

0802e714 <__libc_fini_array>:
 802e714:	b538      	push	{r3, r4, r5, lr}
 802e716:	4d07      	ldr	r5, [pc, #28]	; (802e734 <__libc_fini_array+0x20>)
 802e718:	4c07      	ldr	r4, [pc, #28]	; (802e738 <__libc_fini_array+0x24>)
 802e71a:	1b64      	subs	r4, r4, r5
 802e71c:	10a4      	asrs	r4, r4, #2
 802e71e:	b91c      	cbnz	r4, 802e728 <__libc_fini_array+0x14>
 802e720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e724:	f001 bd7e 	b.w	8030224 <_fini>
 802e728:	3c01      	subs	r4, #1
 802e72a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802e72e:	4798      	blx	r3
 802e730:	e7f5      	b.n	802e71e <__libc_fini_array+0xa>
 802e732:	bf00      	nop
 802e734:	080313cc 	.word	0x080313cc
 802e738:	080313d0 	.word	0x080313d0

0802e73c <sysconf>:
 802e73c:	2808      	cmp	r0, #8
 802e73e:	b508      	push	{r3, lr}
 802e740:	d006      	beq.n	802e750 <sysconf+0x14>
 802e742:	f7fd f989 	bl	802ba58 <__errno>
 802e746:	2316      	movs	r3, #22
 802e748:	6003      	str	r3, [r0, #0]
 802e74a:	f04f 30ff 	mov.w	r0, #4294967295
 802e74e:	bd08      	pop	{r3, pc}
 802e750:	2080      	movs	r0, #128	; 0x80
 802e752:	e7fc      	b.n	802e74e <sysconf+0x12>

0802e754 <memchr>:
 802e754:	4603      	mov	r3, r0
 802e756:	b510      	push	{r4, lr}
 802e758:	b2c9      	uxtb	r1, r1
 802e75a:	4402      	add	r2, r0
 802e75c:	4293      	cmp	r3, r2
 802e75e:	4618      	mov	r0, r3
 802e760:	d101      	bne.n	802e766 <memchr+0x12>
 802e762:	2000      	movs	r0, #0
 802e764:	e003      	b.n	802e76e <memchr+0x1a>
 802e766:	7804      	ldrb	r4, [r0, #0]
 802e768:	3301      	adds	r3, #1
 802e76a:	428c      	cmp	r4, r1
 802e76c:	d1f6      	bne.n	802e75c <memchr+0x8>
 802e76e:	bd10      	pop	{r4, pc}

0802e770 <frexp>:
 802e770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e772:	4617      	mov	r7, r2
 802e774:	2200      	movs	r2, #0
 802e776:	603a      	str	r2, [r7, #0]
 802e778:	4a14      	ldr	r2, [pc, #80]	; (802e7cc <frexp+0x5c>)
 802e77a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802e77e:	4296      	cmp	r6, r2
 802e780:	4604      	mov	r4, r0
 802e782:	460d      	mov	r5, r1
 802e784:	460b      	mov	r3, r1
 802e786:	dc1e      	bgt.n	802e7c6 <frexp+0x56>
 802e788:	4602      	mov	r2, r0
 802e78a:	4332      	orrs	r2, r6
 802e78c:	d01b      	beq.n	802e7c6 <frexp+0x56>
 802e78e:	4a10      	ldr	r2, [pc, #64]	; (802e7d0 <frexp+0x60>)
 802e790:	400a      	ands	r2, r1
 802e792:	b952      	cbnz	r2, 802e7aa <frexp+0x3a>
 802e794:	2200      	movs	r2, #0
 802e796:	4b0f      	ldr	r3, [pc, #60]	; (802e7d4 <frexp+0x64>)
 802e798:	f7f3 ff0a 	bl	80225b0 <__aeabi_dmul>
 802e79c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 802e7a0:	4604      	mov	r4, r0
 802e7a2:	460b      	mov	r3, r1
 802e7a4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802e7a8:	603a      	str	r2, [r7, #0]
 802e7aa:	683a      	ldr	r2, [r7, #0]
 802e7ac:	1536      	asrs	r6, r6, #20
 802e7ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802e7b2:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 802e7b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802e7ba:	4432      	add	r2, r6
 802e7bc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 802e7c0:	603a      	str	r2, [r7, #0]
 802e7c2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 802e7c6:	4620      	mov	r0, r4
 802e7c8:	4629      	mov	r1, r5
 802e7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e7cc:	7fefffff 	.word	0x7fefffff
 802e7d0:	7ff00000 	.word	0x7ff00000
 802e7d4:	43500000 	.word	0x43500000

0802e7d8 <__register_exitproc>:
 802e7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e7dc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 802e84c <__register_exitproc+0x74>
 802e7e0:	4606      	mov	r6, r0
 802e7e2:	f8da 0000 	ldr.w	r0, [sl]
 802e7e6:	4698      	mov	r8, r3
 802e7e8:	460f      	mov	r7, r1
 802e7ea:	4691      	mov	r9, r2
 802e7ec:	f7fd f960 	bl	802bab0 <__retarget_lock_acquire_recursive>
 802e7f0:	4b17      	ldr	r3, [pc, #92]	; (802e850 <__register_exitproc+0x78>)
 802e7f2:	681c      	ldr	r4, [r3, #0]
 802e7f4:	b90c      	cbnz	r4, 802e7fa <__register_exitproc+0x22>
 802e7f6:	4c17      	ldr	r4, [pc, #92]	; (802e854 <__register_exitproc+0x7c>)
 802e7f8:	601c      	str	r4, [r3, #0]
 802e7fa:	6865      	ldr	r5, [r4, #4]
 802e7fc:	f8da 0000 	ldr.w	r0, [sl]
 802e800:	2d1f      	cmp	r5, #31
 802e802:	dd05      	ble.n	802e810 <__register_exitproc+0x38>
 802e804:	f7fd f955 	bl	802bab2 <__retarget_lock_release_recursive>
 802e808:	f04f 30ff 	mov.w	r0, #4294967295
 802e80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e810:	b19e      	cbz	r6, 802e83a <__register_exitproc+0x62>
 802e812:	2201      	movs	r2, #1
 802e814:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 802e818:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 802e81c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 802e820:	40aa      	lsls	r2, r5
 802e822:	4313      	orrs	r3, r2
 802e824:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 802e828:	2e02      	cmp	r6, #2
 802e82a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 802e82e:	bf02      	ittt	eq
 802e830:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 802e834:	4313      	orreq	r3, r2
 802e836:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 802e83a:	1c6b      	adds	r3, r5, #1
 802e83c:	3502      	adds	r5, #2
 802e83e:	6063      	str	r3, [r4, #4]
 802e840:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 802e844:	f7fd f935 	bl	802bab2 <__retarget_lock_release_recursive>
 802e848:	2000      	movs	r0, #0
 802e84a:	e7df      	b.n	802e80c <__register_exitproc+0x34>
 802e84c:	2000033c 	.word	0x2000033c
 802e850:	20006b1c 	.word	0x20006b1c
 802e854:	20006b54 	.word	0x20006b54

0802e858 <quorem>:
 802e858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e85c:	6903      	ldr	r3, [r0, #16]
 802e85e:	690c      	ldr	r4, [r1, #16]
 802e860:	4607      	mov	r7, r0
 802e862:	42a3      	cmp	r3, r4
 802e864:	db7f      	blt.n	802e966 <quorem+0x10e>
 802e866:	3c01      	subs	r4, #1
 802e868:	f100 0514 	add.w	r5, r0, #20
 802e86c:	f101 0814 	add.w	r8, r1, #20
 802e870:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802e874:	9301      	str	r3, [sp, #4]
 802e876:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802e87a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802e87e:	3301      	adds	r3, #1
 802e880:	429a      	cmp	r2, r3
 802e882:	fbb2 f6f3 	udiv	r6, r2, r3
 802e886:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802e88a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802e88e:	d331      	bcc.n	802e8f4 <quorem+0x9c>
 802e890:	f04f 0e00 	mov.w	lr, #0
 802e894:	4640      	mov	r0, r8
 802e896:	46ac      	mov	ip, r5
 802e898:	46f2      	mov	sl, lr
 802e89a:	f850 2b04 	ldr.w	r2, [r0], #4
 802e89e:	b293      	uxth	r3, r2
 802e8a0:	fb06 e303 	mla	r3, r6, r3, lr
 802e8a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802e8a8:	0c1a      	lsrs	r2, r3, #16
 802e8aa:	b29b      	uxth	r3, r3
 802e8ac:	fb06 220e 	mla	r2, r6, lr, r2
 802e8b0:	ebaa 0303 	sub.w	r3, sl, r3
 802e8b4:	f8dc a000 	ldr.w	sl, [ip]
 802e8b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802e8bc:	fa1f fa8a 	uxth.w	sl, sl
 802e8c0:	4453      	add	r3, sl
 802e8c2:	f8dc a000 	ldr.w	sl, [ip]
 802e8c6:	b292      	uxth	r2, r2
 802e8c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802e8cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802e8d0:	b29b      	uxth	r3, r3
 802e8d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802e8d6:	4581      	cmp	r9, r0
 802e8d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802e8dc:	f84c 3b04 	str.w	r3, [ip], #4
 802e8e0:	d2db      	bcs.n	802e89a <quorem+0x42>
 802e8e2:	f855 300b 	ldr.w	r3, [r5, fp]
 802e8e6:	b92b      	cbnz	r3, 802e8f4 <quorem+0x9c>
 802e8e8:	9b01      	ldr	r3, [sp, #4]
 802e8ea:	3b04      	subs	r3, #4
 802e8ec:	429d      	cmp	r5, r3
 802e8ee:	461a      	mov	r2, r3
 802e8f0:	d32d      	bcc.n	802e94e <quorem+0xf6>
 802e8f2:	613c      	str	r4, [r7, #16]
 802e8f4:	4638      	mov	r0, r7
 802e8f6:	f001 f841 	bl	802f97c <__mcmp>
 802e8fa:	2800      	cmp	r0, #0
 802e8fc:	db23      	blt.n	802e946 <quorem+0xee>
 802e8fe:	4629      	mov	r1, r5
 802e900:	2000      	movs	r0, #0
 802e902:	3601      	adds	r6, #1
 802e904:	f858 2b04 	ldr.w	r2, [r8], #4
 802e908:	f8d1 c000 	ldr.w	ip, [r1]
 802e90c:	b293      	uxth	r3, r2
 802e90e:	1ac3      	subs	r3, r0, r3
 802e910:	0c12      	lsrs	r2, r2, #16
 802e912:	fa1f f08c 	uxth.w	r0, ip
 802e916:	4403      	add	r3, r0
 802e918:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802e91c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802e920:	b29b      	uxth	r3, r3
 802e922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802e926:	45c1      	cmp	r9, r8
 802e928:	ea4f 4022 	mov.w	r0, r2, asr #16
 802e92c:	f841 3b04 	str.w	r3, [r1], #4
 802e930:	d2e8      	bcs.n	802e904 <quorem+0xac>
 802e932:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802e936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802e93a:	b922      	cbnz	r2, 802e946 <quorem+0xee>
 802e93c:	3b04      	subs	r3, #4
 802e93e:	429d      	cmp	r5, r3
 802e940:	461a      	mov	r2, r3
 802e942:	d30a      	bcc.n	802e95a <quorem+0x102>
 802e944:	613c      	str	r4, [r7, #16]
 802e946:	4630      	mov	r0, r6
 802e948:	b003      	add	sp, #12
 802e94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e94e:	6812      	ldr	r2, [r2, #0]
 802e950:	3b04      	subs	r3, #4
 802e952:	2a00      	cmp	r2, #0
 802e954:	d1cd      	bne.n	802e8f2 <quorem+0x9a>
 802e956:	3c01      	subs	r4, #1
 802e958:	e7c8      	b.n	802e8ec <quorem+0x94>
 802e95a:	6812      	ldr	r2, [r2, #0]
 802e95c:	3b04      	subs	r3, #4
 802e95e:	2a00      	cmp	r2, #0
 802e960:	d1f0      	bne.n	802e944 <quorem+0xec>
 802e962:	3c01      	subs	r4, #1
 802e964:	e7eb      	b.n	802e93e <quorem+0xe6>
 802e966:	2000      	movs	r0, #0
 802e968:	e7ee      	b.n	802e948 <quorem+0xf0>
 802e96a:	0000      	movs	r0, r0
 802e96c:	0000      	movs	r0, r0
	...

0802e970 <_dtoa_r>:
 802e970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e974:	6b81      	ldr	r1, [r0, #56]	; 0x38
 802e976:	b097      	sub	sp, #92	; 0x5c
 802e978:	4681      	mov	r9, r0
 802e97a:	4614      	mov	r4, r2
 802e97c:	461d      	mov	r5, r3
 802e97e:	4692      	mov	sl, r2
 802e980:	469b      	mov	fp, r3
 802e982:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 802e984:	b149      	cbz	r1, 802e99a <_dtoa_r+0x2a>
 802e986:	2301      	movs	r3, #1
 802e988:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802e98a:	4093      	lsls	r3, r2
 802e98c:	608b      	str	r3, [r1, #8]
 802e98e:	604a      	str	r2, [r1, #4]
 802e990:	f000 fded 	bl	802f56e <_Bfree>
 802e994:	2300      	movs	r3, #0
 802e996:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 802e99a:	1e2b      	subs	r3, r5, #0
 802e99c:	bfad      	iteet	ge
 802e99e:	2300      	movge	r3, #0
 802e9a0:	2201      	movlt	r2, #1
 802e9a2:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 802e9a6:	6033      	strge	r3, [r6, #0]
 802e9a8:	4ba3      	ldr	r3, [pc, #652]	; (802ec38 <_dtoa_r+0x2c8>)
 802e9aa:	bfb8      	it	lt
 802e9ac:	6032      	strlt	r2, [r6, #0]
 802e9ae:	ea33 030b 	bics.w	r3, r3, fp
 802e9b2:	f8cd b00c 	str.w	fp, [sp, #12]
 802e9b6:	d119      	bne.n	802e9ec <_dtoa_r+0x7c>
 802e9b8:	f242 730f 	movw	r3, #9999	; 0x270f
 802e9bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802e9be:	6013      	str	r3, [r2, #0]
 802e9c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802e9c4:	4323      	orrs	r3, r4
 802e9c6:	f000 8586 	beq.w	802f4d6 <_dtoa_r+0xb66>
 802e9ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802e9cc:	b90b      	cbnz	r3, 802e9d2 <_dtoa_r+0x62>
 802e9ce:	4b9b      	ldr	r3, [pc, #620]	; (802ec3c <_dtoa_r+0x2cc>)
 802e9d0:	e021      	b.n	802ea16 <_dtoa_r+0xa6>
 802e9d2:	4b9a      	ldr	r3, [pc, #616]	; (802ec3c <_dtoa_r+0x2cc>)
 802e9d4:	9304      	str	r3, [sp, #16]
 802e9d6:	3303      	adds	r3, #3
 802e9d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802e9da:	6013      	str	r3, [r2, #0]
 802e9dc:	9804      	ldr	r0, [sp, #16]
 802e9de:	b017      	add	sp, #92	; 0x5c
 802e9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e9e4:	4b96      	ldr	r3, [pc, #600]	; (802ec40 <_dtoa_r+0x2d0>)
 802e9e6:	9304      	str	r3, [sp, #16]
 802e9e8:	3308      	adds	r3, #8
 802e9ea:	e7f5      	b.n	802e9d8 <_dtoa_r+0x68>
 802e9ec:	2200      	movs	r2, #0
 802e9ee:	2300      	movs	r3, #0
 802e9f0:	4650      	mov	r0, sl
 802e9f2:	4659      	mov	r1, fp
 802e9f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 802e9f8:	f7f4 f842 	bl	8022a80 <__aeabi_dcmpeq>
 802e9fc:	4607      	mov	r7, r0
 802e9fe:	b160      	cbz	r0, 802ea1a <_dtoa_r+0xaa>
 802ea00:	2301      	movs	r3, #1
 802ea02:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802ea04:	6013      	str	r3, [r2, #0]
 802ea06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802ea08:	2b00      	cmp	r3, #0
 802ea0a:	f000 8561 	beq.w	802f4d0 <_dtoa_r+0xb60>
 802ea0e:	4b8d      	ldr	r3, [pc, #564]	; (802ec44 <_dtoa_r+0x2d4>)
 802ea10:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802ea12:	6013      	str	r3, [r2, #0]
 802ea14:	3b01      	subs	r3, #1
 802ea16:	9304      	str	r3, [sp, #16]
 802ea18:	e7e0      	b.n	802e9dc <_dtoa_r+0x6c>
 802ea1a:	ab14      	add	r3, sp, #80	; 0x50
 802ea1c:	9301      	str	r3, [sp, #4]
 802ea1e:	ab15      	add	r3, sp, #84	; 0x54
 802ea20:	9300      	str	r3, [sp, #0]
 802ea22:	4648      	mov	r0, r9
 802ea24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802ea28:	f001 f850 	bl	802facc <__d2b>
 802ea2c:	9b03      	ldr	r3, [sp, #12]
 802ea2e:	4680      	mov	r8, r0
 802ea30:	f3c3 560a 	ubfx	r6, r3, #20, #11
 802ea34:	2e00      	cmp	r6, #0
 802ea36:	f000 8082 	beq.w	802eb3e <_dtoa_r+0x1ce>
 802ea3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802ea3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ea40:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 802ea44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802ea48:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802ea4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802ea50:	9713      	str	r7, [sp, #76]	; 0x4c
 802ea52:	4619      	mov	r1, r3
 802ea54:	2200      	movs	r2, #0
 802ea56:	4b7c      	ldr	r3, [pc, #496]	; (802ec48 <_dtoa_r+0x2d8>)
 802ea58:	f7f3 fbf2 	bl	8022240 <__aeabi_dsub>
 802ea5c:	a370      	add	r3, pc, #448	; (adr r3, 802ec20 <_dtoa_r+0x2b0>)
 802ea5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea62:	f7f3 fda5 	bl	80225b0 <__aeabi_dmul>
 802ea66:	a370      	add	r3, pc, #448	; (adr r3, 802ec28 <_dtoa_r+0x2b8>)
 802ea68:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea6c:	f7f3 fbea 	bl	8022244 <__adddf3>
 802ea70:	4604      	mov	r4, r0
 802ea72:	4630      	mov	r0, r6
 802ea74:	460d      	mov	r5, r1
 802ea76:	f7f3 fd31 	bl	80224dc <__aeabi_i2d>
 802ea7a:	a36d      	add	r3, pc, #436	; (adr r3, 802ec30 <_dtoa_r+0x2c0>)
 802ea7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea80:	f7f3 fd96 	bl	80225b0 <__aeabi_dmul>
 802ea84:	4602      	mov	r2, r0
 802ea86:	460b      	mov	r3, r1
 802ea88:	4620      	mov	r0, r4
 802ea8a:	4629      	mov	r1, r5
 802ea8c:	f7f3 fbda 	bl	8022244 <__adddf3>
 802ea90:	4604      	mov	r4, r0
 802ea92:	460d      	mov	r5, r1
 802ea94:	f7f4 f83c 	bl	8022b10 <__aeabi_d2iz>
 802ea98:	2200      	movs	r2, #0
 802ea9a:	9003      	str	r0, [sp, #12]
 802ea9c:	2300      	movs	r3, #0
 802ea9e:	4620      	mov	r0, r4
 802eaa0:	4629      	mov	r1, r5
 802eaa2:	f7f3 fff7 	bl	8022a94 <__aeabi_dcmplt>
 802eaa6:	b150      	cbz	r0, 802eabe <_dtoa_r+0x14e>
 802eaa8:	9803      	ldr	r0, [sp, #12]
 802eaaa:	f7f3 fd17 	bl	80224dc <__aeabi_i2d>
 802eaae:	4622      	mov	r2, r4
 802eab0:	462b      	mov	r3, r5
 802eab2:	f7f3 ffe5 	bl	8022a80 <__aeabi_dcmpeq>
 802eab6:	b910      	cbnz	r0, 802eabe <_dtoa_r+0x14e>
 802eab8:	9b03      	ldr	r3, [sp, #12]
 802eaba:	3b01      	subs	r3, #1
 802eabc:	9303      	str	r3, [sp, #12]
 802eabe:	9b03      	ldr	r3, [sp, #12]
 802eac0:	2b16      	cmp	r3, #22
 802eac2:	d85a      	bhi.n	802eb7a <_dtoa_r+0x20a>
 802eac4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802eac8:	9a03      	ldr	r2, [sp, #12]
 802eaca:	4b60      	ldr	r3, [pc, #384]	; (802ec4c <_dtoa_r+0x2dc>)
 802eacc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802ead0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ead4:	f7f3 ffde 	bl	8022a94 <__aeabi_dcmplt>
 802ead8:	2800      	cmp	r0, #0
 802eada:	d050      	beq.n	802eb7e <_dtoa_r+0x20e>
 802eadc:	9b03      	ldr	r3, [sp, #12]
 802eade:	3b01      	subs	r3, #1
 802eae0:	9303      	str	r3, [sp, #12]
 802eae2:	2300      	movs	r3, #0
 802eae4:	9311      	str	r3, [sp, #68]	; 0x44
 802eae6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802eae8:	1b9b      	subs	r3, r3, r6
 802eaea:	1e5a      	subs	r2, r3, #1
 802eaec:	bf49      	itett	mi
 802eaee:	f1c3 0301 	rsbmi	r3, r3, #1
 802eaf2:	2300      	movpl	r3, #0
 802eaf4:	9306      	strmi	r3, [sp, #24]
 802eaf6:	2300      	movmi	r3, #0
 802eaf8:	bf58      	it	pl
 802eafa:	9306      	strpl	r3, [sp, #24]
 802eafc:	9209      	str	r2, [sp, #36]	; 0x24
 802eafe:	bf48      	it	mi
 802eb00:	9309      	strmi	r3, [sp, #36]	; 0x24
 802eb02:	9b03      	ldr	r3, [sp, #12]
 802eb04:	2b00      	cmp	r3, #0
 802eb06:	db3c      	blt.n	802eb82 <_dtoa_r+0x212>
 802eb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802eb0a:	9a03      	ldr	r2, [sp, #12]
 802eb0c:	4413      	add	r3, r2
 802eb0e:	9309      	str	r3, [sp, #36]	; 0x24
 802eb10:	2300      	movs	r3, #0
 802eb12:	9210      	str	r2, [sp, #64]	; 0x40
 802eb14:	930a      	str	r3, [sp, #40]	; 0x28
 802eb16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802eb18:	2b09      	cmp	r3, #9
 802eb1a:	d86a      	bhi.n	802ebf2 <_dtoa_r+0x282>
 802eb1c:	2b05      	cmp	r3, #5
 802eb1e:	bfc4      	itt	gt
 802eb20:	3b04      	subgt	r3, #4
 802eb22:	9320      	strgt	r3, [sp, #128]	; 0x80
 802eb24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802eb26:	bfc8      	it	gt
 802eb28:	2400      	movgt	r4, #0
 802eb2a:	f1a3 0302 	sub.w	r3, r3, #2
 802eb2e:	bfd8      	it	le
 802eb30:	2401      	movle	r4, #1
 802eb32:	2b03      	cmp	r3, #3
 802eb34:	d868      	bhi.n	802ec08 <_dtoa_r+0x298>
 802eb36:	e8df f003 	tbb	[pc, r3]
 802eb3a:	3a2d      	.short	0x3a2d
 802eb3c:	5a38      	.short	0x5a38
 802eb3e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 802eb42:	441e      	add	r6, r3
 802eb44:	f206 4332 	addw	r3, r6, #1074	; 0x432
 802eb48:	2b20      	cmp	r3, #32
 802eb4a:	bfc1      	itttt	gt
 802eb4c:	9a03      	ldrgt	r2, [sp, #12]
 802eb4e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802eb52:	409a      	lslgt	r2, r3
 802eb54:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
 802eb58:	bfcb      	itete	gt
 802eb5a:	fa24 f303 	lsrgt.w	r3, r4, r3
 802eb5e:	f1c3 0320 	rsble	r3, r3, #32
 802eb62:	ea42 0003 	orrgt.w	r0, r2, r3
 802eb66:	fa04 f003 	lslle.w	r0, r4, r3
 802eb6a:	f7f3 fca7 	bl	80224bc <__aeabi_ui2d>
 802eb6e:	2201      	movs	r2, #1
 802eb70:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 802eb74:	3e01      	subs	r6, #1
 802eb76:	9213      	str	r2, [sp, #76]	; 0x4c
 802eb78:	e76b      	b.n	802ea52 <_dtoa_r+0xe2>
 802eb7a:	2301      	movs	r3, #1
 802eb7c:	e7b2      	b.n	802eae4 <_dtoa_r+0x174>
 802eb7e:	9011      	str	r0, [sp, #68]	; 0x44
 802eb80:	e7b1      	b.n	802eae6 <_dtoa_r+0x176>
 802eb82:	9b06      	ldr	r3, [sp, #24]
 802eb84:	9a03      	ldr	r2, [sp, #12]
 802eb86:	1a9b      	subs	r3, r3, r2
 802eb88:	9306      	str	r3, [sp, #24]
 802eb8a:	4253      	negs	r3, r2
 802eb8c:	930a      	str	r3, [sp, #40]	; 0x28
 802eb8e:	2300      	movs	r3, #0
 802eb90:	9310      	str	r3, [sp, #64]	; 0x40
 802eb92:	e7c0      	b.n	802eb16 <_dtoa_r+0x1a6>
 802eb94:	2300      	movs	r3, #0
 802eb96:	930b      	str	r3, [sp, #44]	; 0x2c
 802eb98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802eb9a:	2b00      	cmp	r3, #0
 802eb9c:	dc37      	bgt.n	802ec0e <_dtoa_r+0x29e>
 802eb9e:	2301      	movs	r3, #1
 802eba0:	461a      	mov	r2, r3
 802eba2:	9308      	str	r3, [sp, #32]
 802eba4:	9305      	str	r3, [sp, #20]
 802eba6:	9221      	str	r2, [sp, #132]	; 0x84
 802eba8:	e00c      	b.n	802ebc4 <_dtoa_r+0x254>
 802ebaa:	2301      	movs	r3, #1
 802ebac:	e7f3      	b.n	802eb96 <_dtoa_r+0x226>
 802ebae:	2300      	movs	r3, #0
 802ebb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802ebb2:	930b      	str	r3, [sp, #44]	; 0x2c
 802ebb4:	9b03      	ldr	r3, [sp, #12]
 802ebb6:	4413      	add	r3, r2
 802ebb8:	9308      	str	r3, [sp, #32]
 802ebba:	3301      	adds	r3, #1
 802ebbc:	2b01      	cmp	r3, #1
 802ebbe:	9305      	str	r3, [sp, #20]
 802ebc0:	bfb8      	it	lt
 802ebc2:	2301      	movlt	r3, #1
 802ebc4:	2100      	movs	r1, #0
 802ebc6:	2204      	movs	r2, #4
 802ebc8:	f102 0014 	add.w	r0, r2, #20
 802ebcc:	4298      	cmp	r0, r3
 802ebce:	d922      	bls.n	802ec16 <_dtoa_r+0x2a6>
 802ebd0:	4648      	mov	r0, r9
 802ebd2:	f8c9 103c 	str.w	r1, [r9, #60]	; 0x3c
 802ebd6:	f000 fca5 	bl	802f524 <_Balloc>
 802ebda:	9004      	str	r0, [sp, #16]
 802ebdc:	2800      	cmp	r0, #0
 802ebde:	d13b      	bne.n	802ec58 <_dtoa_r+0x2e8>
 802ebe0:	4602      	mov	r2, r0
 802ebe2:	f240 11af 	movw	r1, #431	; 0x1af
 802ebe6:	4b1a      	ldr	r3, [pc, #104]	; (802ec50 <_dtoa_r+0x2e0>)
 802ebe8:	481a      	ldr	r0, [pc, #104]	; (802ec54 <_dtoa_r+0x2e4>)
 802ebea:	f001 fa63 	bl	80300b4 <__assert_func>
 802ebee:	2301      	movs	r3, #1
 802ebf0:	e7de      	b.n	802ebb0 <_dtoa_r+0x240>
 802ebf2:	2401      	movs	r4, #1
 802ebf4:	2300      	movs	r3, #0
 802ebf6:	940b      	str	r4, [sp, #44]	; 0x2c
 802ebf8:	9320      	str	r3, [sp, #128]	; 0x80
 802ebfa:	f04f 33ff 	mov.w	r3, #4294967295
 802ebfe:	2200      	movs	r2, #0
 802ec00:	9308      	str	r3, [sp, #32]
 802ec02:	9305      	str	r3, [sp, #20]
 802ec04:	2312      	movs	r3, #18
 802ec06:	e7ce      	b.n	802eba6 <_dtoa_r+0x236>
 802ec08:	2301      	movs	r3, #1
 802ec0a:	930b      	str	r3, [sp, #44]	; 0x2c
 802ec0c:	e7f5      	b.n	802ebfa <_dtoa_r+0x28a>
 802ec0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802ec10:	9308      	str	r3, [sp, #32]
 802ec12:	9305      	str	r3, [sp, #20]
 802ec14:	e7d6      	b.n	802ebc4 <_dtoa_r+0x254>
 802ec16:	3101      	adds	r1, #1
 802ec18:	0052      	lsls	r2, r2, #1
 802ec1a:	e7d5      	b.n	802ebc8 <_dtoa_r+0x258>
 802ec1c:	f3af 8000 	nop.w
 802ec20:	636f4361 	.word	0x636f4361
 802ec24:	3fd287a7 	.word	0x3fd287a7
 802ec28:	8b60c8b3 	.word	0x8b60c8b3
 802ec2c:	3fc68a28 	.word	0x3fc68a28
 802ec30:	509f79fb 	.word	0x509f79fb
 802ec34:	3fd34413 	.word	0x3fd34413
 802ec38:	7ff00000 	.word	0x7ff00000
 802ec3c:	080310b5 	.word	0x080310b5
 802ec40:	080310ac 	.word	0x080310ac
 802ec44:	08031061 	.word	0x08031061
 802ec48:	3ff80000 	.word	0x3ff80000
 802ec4c:	080311a8 	.word	0x080311a8
 802ec50:	080310b9 	.word	0x080310b9
 802ec54:	080310ca 	.word	0x080310ca
 802ec58:	9b04      	ldr	r3, [sp, #16]
 802ec5a:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 802ec5e:	9b05      	ldr	r3, [sp, #20]
 802ec60:	2b0e      	cmp	r3, #14
 802ec62:	f200 80a2 	bhi.w	802edaa <_dtoa_r+0x43a>
 802ec66:	2c00      	cmp	r4, #0
 802ec68:	f000 809f 	beq.w	802edaa <_dtoa_r+0x43a>
 802ec6c:	9b03      	ldr	r3, [sp, #12]
 802ec6e:	2b00      	cmp	r3, #0
 802ec70:	dd35      	ble.n	802ecde <_dtoa_r+0x36e>
 802ec72:	f003 020f 	and.w	r2, r3, #15
 802ec76:	4b96      	ldr	r3, [pc, #600]	; (802eed0 <_dtoa_r+0x560>)
 802ec78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802ec7c:	e9d3 4500 	ldrd	r4, r5, [r3]
 802ec80:	9b03      	ldr	r3, [sp, #12]
 802ec82:	05d8      	lsls	r0, r3, #23
 802ec84:	ea4f 1623 	mov.w	r6, r3, asr #4
 802ec88:	d517      	bpl.n	802ecba <_dtoa_r+0x34a>
 802ec8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802ec8e:	4b91      	ldr	r3, [pc, #580]	; (802eed4 <_dtoa_r+0x564>)
 802ec90:	2703      	movs	r7, #3
 802ec92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802ec96:	f7f3 fdb5 	bl	8022804 <__aeabi_ddiv>
 802ec9a:	4682      	mov	sl, r0
 802ec9c:	468b      	mov	fp, r1
 802ec9e:	f006 060f 	and.w	r6, r6, #15
 802eca2:	4b8c      	ldr	r3, [pc, #560]	; (802eed4 <_dtoa_r+0x564>)
 802eca4:	930e      	str	r3, [sp, #56]	; 0x38
 802eca6:	b956      	cbnz	r6, 802ecbe <_dtoa_r+0x34e>
 802eca8:	4622      	mov	r2, r4
 802ecaa:	462b      	mov	r3, r5
 802ecac:	4650      	mov	r0, sl
 802ecae:	4659      	mov	r1, fp
 802ecb0:	f7f3 fda8 	bl	8022804 <__aeabi_ddiv>
 802ecb4:	4682      	mov	sl, r0
 802ecb6:	468b      	mov	fp, r1
 802ecb8:	e02a      	b.n	802ed10 <_dtoa_r+0x3a0>
 802ecba:	2702      	movs	r7, #2
 802ecbc:	e7f1      	b.n	802eca2 <_dtoa_r+0x332>
 802ecbe:	07f1      	lsls	r1, r6, #31
 802ecc0:	d509      	bpl.n	802ecd6 <_dtoa_r+0x366>
 802ecc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802ecc4:	4620      	mov	r0, r4
 802ecc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ecca:	4629      	mov	r1, r5
 802eccc:	f7f3 fc70 	bl	80225b0 <__aeabi_dmul>
 802ecd0:	4604      	mov	r4, r0
 802ecd2:	460d      	mov	r5, r1
 802ecd4:	3701      	adds	r7, #1
 802ecd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802ecd8:	1076      	asrs	r6, r6, #1
 802ecda:	3308      	adds	r3, #8
 802ecdc:	e7e2      	b.n	802eca4 <_dtoa_r+0x334>
 802ecde:	f000 809f 	beq.w	802ee20 <_dtoa_r+0x4b0>
 802ece2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802ece6:	9b03      	ldr	r3, [sp, #12]
 802ece8:	2702      	movs	r7, #2
 802ecea:	425c      	negs	r4, r3
 802ecec:	4b78      	ldr	r3, [pc, #480]	; (802eed0 <_dtoa_r+0x560>)
 802ecee:	f004 020f 	and.w	r2, r4, #15
 802ecf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802ecf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ecfa:	f7f3 fc59 	bl	80225b0 <__aeabi_dmul>
 802ecfe:	2300      	movs	r3, #0
 802ed00:	4682      	mov	sl, r0
 802ed02:	468b      	mov	fp, r1
 802ed04:	4d73      	ldr	r5, [pc, #460]	; (802eed4 <_dtoa_r+0x564>)
 802ed06:	1124      	asrs	r4, r4, #4
 802ed08:	2c00      	cmp	r4, #0
 802ed0a:	d17e      	bne.n	802ee0a <_dtoa_r+0x49a>
 802ed0c:	2b00      	cmp	r3, #0
 802ed0e:	d1d1      	bne.n	802ecb4 <_dtoa_r+0x344>
 802ed10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802ed12:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 802ed16:	2b00      	cmp	r3, #0
 802ed18:	f000 8084 	beq.w	802ee24 <_dtoa_r+0x4b4>
 802ed1c:	2200      	movs	r2, #0
 802ed1e:	4650      	mov	r0, sl
 802ed20:	4659      	mov	r1, fp
 802ed22:	4b6d      	ldr	r3, [pc, #436]	; (802eed8 <_dtoa_r+0x568>)
 802ed24:	f7f3 feb6 	bl	8022a94 <__aeabi_dcmplt>
 802ed28:	2800      	cmp	r0, #0
 802ed2a:	d07b      	beq.n	802ee24 <_dtoa_r+0x4b4>
 802ed2c:	9b05      	ldr	r3, [sp, #20]
 802ed2e:	2b00      	cmp	r3, #0
 802ed30:	d078      	beq.n	802ee24 <_dtoa_r+0x4b4>
 802ed32:	9b08      	ldr	r3, [sp, #32]
 802ed34:	2b00      	cmp	r3, #0
 802ed36:	dd36      	ble.n	802eda6 <_dtoa_r+0x436>
 802ed38:	9b03      	ldr	r3, [sp, #12]
 802ed3a:	4650      	mov	r0, sl
 802ed3c:	4659      	mov	r1, fp
 802ed3e:	2200      	movs	r2, #0
 802ed40:	1e5d      	subs	r5, r3, #1
 802ed42:	4b66      	ldr	r3, [pc, #408]	; (802eedc <_dtoa_r+0x56c>)
 802ed44:	f7f3 fc34 	bl	80225b0 <__aeabi_dmul>
 802ed48:	4682      	mov	sl, r0
 802ed4a:	468b      	mov	fp, r1
 802ed4c:	9c08      	ldr	r4, [sp, #32]
 802ed4e:	3701      	adds	r7, #1
 802ed50:	4638      	mov	r0, r7
 802ed52:	f7f3 fbc3 	bl	80224dc <__aeabi_i2d>
 802ed56:	4652      	mov	r2, sl
 802ed58:	465b      	mov	r3, fp
 802ed5a:	f7f3 fc29 	bl	80225b0 <__aeabi_dmul>
 802ed5e:	2200      	movs	r2, #0
 802ed60:	4b5f      	ldr	r3, [pc, #380]	; (802eee0 <_dtoa_r+0x570>)
 802ed62:	f7f3 fa6f 	bl	8022244 <__adddf3>
 802ed66:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 802ed6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802ed6e:	960f      	str	r6, [sp, #60]	; 0x3c
 802ed70:	2c00      	cmp	r4, #0
 802ed72:	d15a      	bne.n	802ee2a <_dtoa_r+0x4ba>
 802ed74:	2200      	movs	r2, #0
 802ed76:	4650      	mov	r0, sl
 802ed78:	4659      	mov	r1, fp
 802ed7a:	4b5a      	ldr	r3, [pc, #360]	; (802eee4 <_dtoa_r+0x574>)
 802ed7c:	f7f3 fa60 	bl	8022240 <__aeabi_dsub>
 802ed80:	4633      	mov	r3, r6
 802ed82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802ed84:	4682      	mov	sl, r0
 802ed86:	468b      	mov	fp, r1
 802ed88:	f7f3 fea2 	bl	8022ad0 <__aeabi_dcmpgt>
 802ed8c:	2800      	cmp	r0, #0
 802ed8e:	f040 8295 	bne.w	802f2bc <_dtoa_r+0x94c>
 802ed92:	4650      	mov	r0, sl
 802ed94:	4659      	mov	r1, fp
 802ed96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802ed98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802ed9c:	f7f3 fe7a 	bl	8022a94 <__aeabi_dcmplt>
 802eda0:	2800      	cmp	r0, #0
 802eda2:	f040 8289 	bne.w	802f2b8 <_dtoa_r+0x948>
 802eda6:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 802edaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802edac:	2b00      	cmp	r3, #0
 802edae:	f2c0 814e 	blt.w	802f04e <_dtoa_r+0x6de>
 802edb2:	9a03      	ldr	r2, [sp, #12]
 802edb4:	2a0e      	cmp	r2, #14
 802edb6:	f300 814a 	bgt.w	802f04e <_dtoa_r+0x6de>
 802edba:	4b45      	ldr	r3, [pc, #276]	; (802eed0 <_dtoa_r+0x560>)
 802edbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802edc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 802edc4:	e9cd 3406 	strd	r3, r4, [sp, #24]
 802edc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802edca:	2b00      	cmp	r3, #0
 802edcc:	f280 80d7 	bge.w	802ef7e <_dtoa_r+0x60e>
 802edd0:	9b05      	ldr	r3, [sp, #20]
 802edd2:	2b00      	cmp	r3, #0
 802edd4:	f300 80d3 	bgt.w	802ef7e <_dtoa_r+0x60e>
 802edd8:	f040 826d 	bne.w	802f2b6 <_dtoa_r+0x946>
 802eddc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802ede0:	2200      	movs	r2, #0
 802ede2:	4b40      	ldr	r3, [pc, #256]	; (802eee4 <_dtoa_r+0x574>)
 802ede4:	f7f3 fbe4 	bl	80225b0 <__aeabi_dmul>
 802ede8:	4652      	mov	r2, sl
 802edea:	465b      	mov	r3, fp
 802edec:	f7f3 fe66 	bl	8022abc <__aeabi_dcmpge>
 802edf0:	9c05      	ldr	r4, [sp, #20]
 802edf2:	4625      	mov	r5, r4
 802edf4:	2800      	cmp	r0, #0
 802edf6:	f040 8246 	bne.w	802f286 <_dtoa_r+0x916>
 802edfa:	2331      	movs	r3, #49	; 0x31
 802edfc:	9e04      	ldr	r6, [sp, #16]
 802edfe:	f806 3b01 	strb.w	r3, [r6], #1
 802ee02:	9b03      	ldr	r3, [sp, #12]
 802ee04:	3301      	adds	r3, #1
 802ee06:	9303      	str	r3, [sp, #12]
 802ee08:	e241      	b.n	802f28e <_dtoa_r+0x91e>
 802ee0a:	07e2      	lsls	r2, r4, #31
 802ee0c:	d505      	bpl.n	802ee1a <_dtoa_r+0x4aa>
 802ee0e:	e9d5 2300 	ldrd	r2, r3, [r5]
 802ee12:	f7f3 fbcd 	bl	80225b0 <__aeabi_dmul>
 802ee16:	2301      	movs	r3, #1
 802ee18:	3701      	adds	r7, #1
 802ee1a:	1064      	asrs	r4, r4, #1
 802ee1c:	3508      	adds	r5, #8
 802ee1e:	e773      	b.n	802ed08 <_dtoa_r+0x398>
 802ee20:	2702      	movs	r7, #2
 802ee22:	e775      	b.n	802ed10 <_dtoa_r+0x3a0>
 802ee24:	9d03      	ldr	r5, [sp, #12]
 802ee26:	9c05      	ldr	r4, [sp, #20]
 802ee28:	e792      	b.n	802ed50 <_dtoa_r+0x3e0>
 802ee2a:	9904      	ldr	r1, [sp, #16]
 802ee2c:	4b28      	ldr	r3, [pc, #160]	; (802eed0 <_dtoa_r+0x560>)
 802ee2e:	4421      	add	r1, r4
 802ee30:	9112      	str	r1, [sp, #72]	; 0x48
 802ee32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802ee34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802ee38:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 802ee3c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802ee40:	2900      	cmp	r1, #0
 802ee42:	d053      	beq.n	802eeec <_dtoa_r+0x57c>
 802ee44:	2000      	movs	r0, #0
 802ee46:	4928      	ldr	r1, [pc, #160]	; (802eee8 <_dtoa_r+0x578>)
 802ee48:	f7f3 fcdc 	bl	8022804 <__aeabi_ddiv>
 802ee4c:	4632      	mov	r2, r6
 802ee4e:	463b      	mov	r3, r7
 802ee50:	f7f3 f9f6 	bl	8022240 <__aeabi_dsub>
 802ee54:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802ee58:	9e04      	ldr	r6, [sp, #16]
 802ee5a:	4659      	mov	r1, fp
 802ee5c:	4650      	mov	r0, sl
 802ee5e:	f7f3 fe57 	bl	8022b10 <__aeabi_d2iz>
 802ee62:	4604      	mov	r4, r0
 802ee64:	f7f3 fb3a 	bl	80224dc <__aeabi_i2d>
 802ee68:	4602      	mov	r2, r0
 802ee6a:	460b      	mov	r3, r1
 802ee6c:	4650      	mov	r0, sl
 802ee6e:	4659      	mov	r1, fp
 802ee70:	f7f3 f9e6 	bl	8022240 <__aeabi_dsub>
 802ee74:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 802ee78:	3430      	adds	r4, #48	; 0x30
 802ee7a:	f806 4b01 	strb.w	r4, [r6], #1
 802ee7e:	4682      	mov	sl, r0
 802ee80:	468b      	mov	fp, r1
 802ee82:	f7f3 fe07 	bl	8022a94 <__aeabi_dcmplt>
 802ee86:	2800      	cmp	r0, #0
 802ee88:	d171      	bne.n	802ef6e <_dtoa_r+0x5fe>
 802ee8a:	4652      	mov	r2, sl
 802ee8c:	465b      	mov	r3, fp
 802ee8e:	2000      	movs	r0, #0
 802ee90:	4911      	ldr	r1, [pc, #68]	; (802eed8 <_dtoa_r+0x568>)
 802ee92:	f7f3 f9d5 	bl	8022240 <__aeabi_dsub>
 802ee96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 802ee9a:	f7f3 fdfb 	bl	8022a94 <__aeabi_dcmplt>
 802ee9e:	2800      	cmp	r0, #0
 802eea0:	f040 80b7 	bne.w	802f012 <_dtoa_r+0x6a2>
 802eea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802eea6:	429e      	cmp	r6, r3
 802eea8:	f43f af7d 	beq.w	802eda6 <_dtoa_r+0x436>
 802eeac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802eeb0:	2200      	movs	r2, #0
 802eeb2:	4b0a      	ldr	r3, [pc, #40]	; (802eedc <_dtoa_r+0x56c>)
 802eeb4:	f7f3 fb7c 	bl	80225b0 <__aeabi_dmul>
 802eeb8:	2200      	movs	r2, #0
 802eeba:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802eebe:	4b07      	ldr	r3, [pc, #28]	; (802eedc <_dtoa_r+0x56c>)
 802eec0:	4650      	mov	r0, sl
 802eec2:	4659      	mov	r1, fp
 802eec4:	f7f3 fb74 	bl	80225b0 <__aeabi_dmul>
 802eec8:	4682      	mov	sl, r0
 802eeca:	468b      	mov	fp, r1
 802eecc:	e7c5      	b.n	802ee5a <_dtoa_r+0x4ea>
 802eece:	bf00      	nop
 802eed0:	080311a8 	.word	0x080311a8
 802eed4:	08031180 	.word	0x08031180
 802eed8:	3ff00000 	.word	0x3ff00000
 802eedc:	40240000 	.word	0x40240000
 802eee0:	401c0000 	.word	0x401c0000
 802eee4:	40140000 	.word	0x40140000
 802eee8:	3fe00000 	.word	0x3fe00000
 802eeec:	4630      	mov	r0, r6
 802eeee:	4639      	mov	r1, r7
 802eef0:	f7f3 fb5e 	bl	80225b0 <__aeabi_dmul>
 802eef4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802eef8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 802eefa:	9e04      	ldr	r6, [sp, #16]
 802eefc:	4659      	mov	r1, fp
 802eefe:	4650      	mov	r0, sl
 802ef00:	f7f3 fe06 	bl	8022b10 <__aeabi_d2iz>
 802ef04:	4604      	mov	r4, r0
 802ef06:	f7f3 fae9 	bl	80224dc <__aeabi_i2d>
 802ef0a:	4602      	mov	r2, r0
 802ef0c:	460b      	mov	r3, r1
 802ef0e:	4650      	mov	r0, sl
 802ef10:	4659      	mov	r1, fp
 802ef12:	f7f3 f995 	bl	8022240 <__aeabi_dsub>
 802ef16:	3430      	adds	r4, #48	; 0x30
 802ef18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802ef1a:	f806 4b01 	strb.w	r4, [r6], #1
 802ef1e:	429e      	cmp	r6, r3
 802ef20:	4682      	mov	sl, r0
 802ef22:	468b      	mov	fp, r1
 802ef24:	f04f 0200 	mov.w	r2, #0
 802ef28:	d123      	bne.n	802ef72 <_dtoa_r+0x602>
 802ef2a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802ef2e:	4bb1      	ldr	r3, [pc, #708]	; (802f1f4 <_dtoa_r+0x884>)
 802ef30:	f7f3 f988 	bl	8022244 <__adddf3>
 802ef34:	4602      	mov	r2, r0
 802ef36:	460b      	mov	r3, r1
 802ef38:	4650      	mov	r0, sl
 802ef3a:	4659      	mov	r1, fp
 802ef3c:	f7f3 fdc8 	bl	8022ad0 <__aeabi_dcmpgt>
 802ef40:	2800      	cmp	r0, #0
 802ef42:	d166      	bne.n	802f012 <_dtoa_r+0x6a2>
 802ef44:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 802ef48:	2000      	movs	r0, #0
 802ef4a:	49aa      	ldr	r1, [pc, #680]	; (802f1f4 <_dtoa_r+0x884>)
 802ef4c:	f7f3 f978 	bl	8022240 <__aeabi_dsub>
 802ef50:	4602      	mov	r2, r0
 802ef52:	460b      	mov	r3, r1
 802ef54:	4650      	mov	r0, sl
 802ef56:	4659      	mov	r1, fp
 802ef58:	f7f3 fd9c 	bl	8022a94 <__aeabi_dcmplt>
 802ef5c:	2800      	cmp	r0, #0
 802ef5e:	f43f af22 	beq.w	802eda6 <_dtoa_r+0x436>
 802ef62:	463e      	mov	r6, r7
 802ef64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802ef68:	3f01      	subs	r7, #1
 802ef6a:	2b30      	cmp	r3, #48	; 0x30
 802ef6c:	d0f9      	beq.n	802ef62 <_dtoa_r+0x5f2>
 802ef6e:	9503      	str	r5, [sp, #12]
 802ef70:	e03e      	b.n	802eff0 <_dtoa_r+0x680>
 802ef72:	4ba1      	ldr	r3, [pc, #644]	; (802f1f8 <_dtoa_r+0x888>)
 802ef74:	f7f3 fb1c 	bl	80225b0 <__aeabi_dmul>
 802ef78:	4682      	mov	sl, r0
 802ef7a:	468b      	mov	fp, r1
 802ef7c:	e7be      	b.n	802eefc <_dtoa_r+0x58c>
 802ef7e:	4654      	mov	r4, sl
 802ef80:	f04f 0a00 	mov.w	sl, #0
 802ef84:	465d      	mov	r5, fp
 802ef86:	9e04      	ldr	r6, [sp, #16]
 802ef88:	f8df b26c 	ldr.w	fp, [pc, #620]	; 802f1f8 <_dtoa_r+0x888>
 802ef8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802ef90:	4620      	mov	r0, r4
 802ef92:	4629      	mov	r1, r5
 802ef94:	f7f3 fc36 	bl	8022804 <__aeabi_ddiv>
 802ef98:	f7f3 fdba 	bl	8022b10 <__aeabi_d2iz>
 802ef9c:	4607      	mov	r7, r0
 802ef9e:	f7f3 fa9d 	bl	80224dc <__aeabi_i2d>
 802efa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802efa6:	f7f3 fb03 	bl	80225b0 <__aeabi_dmul>
 802efaa:	4602      	mov	r2, r0
 802efac:	460b      	mov	r3, r1
 802efae:	4620      	mov	r0, r4
 802efb0:	4629      	mov	r1, r5
 802efb2:	f7f3 f945 	bl	8022240 <__aeabi_dsub>
 802efb6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 802efba:	f806 4b01 	strb.w	r4, [r6], #1
 802efbe:	9c04      	ldr	r4, [sp, #16]
 802efc0:	9d05      	ldr	r5, [sp, #20]
 802efc2:	1b34      	subs	r4, r6, r4
 802efc4:	42a5      	cmp	r5, r4
 802efc6:	4602      	mov	r2, r0
 802efc8:	460b      	mov	r3, r1
 802efca:	d133      	bne.n	802f034 <_dtoa_r+0x6c4>
 802efcc:	f7f3 f93a 	bl	8022244 <__adddf3>
 802efd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802efd4:	4604      	mov	r4, r0
 802efd6:	460d      	mov	r5, r1
 802efd8:	f7f3 fd7a 	bl	8022ad0 <__aeabi_dcmpgt>
 802efdc:	b9c0      	cbnz	r0, 802f010 <_dtoa_r+0x6a0>
 802efde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802efe2:	4620      	mov	r0, r4
 802efe4:	4629      	mov	r1, r5
 802efe6:	f7f3 fd4b 	bl	8022a80 <__aeabi_dcmpeq>
 802efea:	b108      	cbz	r0, 802eff0 <_dtoa_r+0x680>
 802efec:	07fb      	lsls	r3, r7, #31
 802efee:	d40f      	bmi.n	802f010 <_dtoa_r+0x6a0>
 802eff0:	4641      	mov	r1, r8
 802eff2:	4648      	mov	r0, r9
 802eff4:	f000 fabb 	bl	802f56e <_Bfree>
 802eff8:	2300      	movs	r3, #0
 802effa:	7033      	strb	r3, [r6, #0]
 802effc:	9b03      	ldr	r3, [sp, #12]
 802effe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802f000:	3301      	adds	r3, #1
 802f002:	6013      	str	r3, [r2, #0]
 802f004:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802f006:	2b00      	cmp	r3, #0
 802f008:	f43f ace8 	beq.w	802e9dc <_dtoa_r+0x6c>
 802f00c:	601e      	str	r6, [r3, #0]
 802f00e:	e4e5      	b.n	802e9dc <_dtoa_r+0x6c>
 802f010:	9d03      	ldr	r5, [sp, #12]
 802f012:	4633      	mov	r3, r6
 802f014:	461e      	mov	r6, r3
 802f016:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802f01a:	2a39      	cmp	r2, #57	; 0x39
 802f01c:	d106      	bne.n	802f02c <_dtoa_r+0x6bc>
 802f01e:	9a04      	ldr	r2, [sp, #16]
 802f020:	429a      	cmp	r2, r3
 802f022:	d1f7      	bne.n	802f014 <_dtoa_r+0x6a4>
 802f024:	2230      	movs	r2, #48	; 0x30
 802f026:	9904      	ldr	r1, [sp, #16]
 802f028:	3501      	adds	r5, #1
 802f02a:	700a      	strb	r2, [r1, #0]
 802f02c:	781a      	ldrb	r2, [r3, #0]
 802f02e:	3201      	adds	r2, #1
 802f030:	701a      	strb	r2, [r3, #0]
 802f032:	e79c      	b.n	802ef6e <_dtoa_r+0x5fe>
 802f034:	4652      	mov	r2, sl
 802f036:	465b      	mov	r3, fp
 802f038:	f7f3 faba 	bl	80225b0 <__aeabi_dmul>
 802f03c:	2200      	movs	r2, #0
 802f03e:	2300      	movs	r3, #0
 802f040:	4604      	mov	r4, r0
 802f042:	460d      	mov	r5, r1
 802f044:	f7f3 fd1c 	bl	8022a80 <__aeabi_dcmpeq>
 802f048:	2800      	cmp	r0, #0
 802f04a:	d09f      	beq.n	802ef8c <_dtoa_r+0x61c>
 802f04c:	e7d0      	b.n	802eff0 <_dtoa_r+0x680>
 802f04e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802f050:	2a00      	cmp	r2, #0
 802f052:	f000 80ca 	beq.w	802f1ea <_dtoa_r+0x87a>
 802f056:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802f058:	2a01      	cmp	r2, #1
 802f05a:	f300 80ad 	bgt.w	802f1b8 <_dtoa_r+0x848>
 802f05e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802f060:	2a00      	cmp	r2, #0
 802f062:	f000 80a5 	beq.w	802f1b0 <_dtoa_r+0x840>
 802f066:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802f06a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802f06c:	9e06      	ldr	r6, [sp, #24]
 802f06e:	9a06      	ldr	r2, [sp, #24]
 802f070:	2101      	movs	r1, #1
 802f072:	441a      	add	r2, r3
 802f074:	9206      	str	r2, [sp, #24]
 802f076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802f078:	4648      	mov	r0, r9
 802f07a:	441a      	add	r2, r3
 802f07c:	9209      	str	r2, [sp, #36]	; 0x24
 802f07e:	f000 fb13 	bl	802f6a8 <__i2b>
 802f082:	4605      	mov	r5, r0
 802f084:	b166      	cbz	r6, 802f0a0 <_dtoa_r+0x730>
 802f086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f088:	2b00      	cmp	r3, #0
 802f08a:	dd09      	ble.n	802f0a0 <_dtoa_r+0x730>
 802f08c:	42b3      	cmp	r3, r6
 802f08e:	bfa8      	it	ge
 802f090:	4633      	movge	r3, r6
 802f092:	9a06      	ldr	r2, [sp, #24]
 802f094:	1af6      	subs	r6, r6, r3
 802f096:	1ad2      	subs	r2, r2, r3
 802f098:	9206      	str	r2, [sp, #24]
 802f09a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802f09c:	1ad3      	subs	r3, r2, r3
 802f09e:	9309      	str	r3, [sp, #36]	; 0x24
 802f0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f0a2:	b1f3      	cbz	r3, 802f0e2 <_dtoa_r+0x772>
 802f0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f0a6:	2b00      	cmp	r3, #0
 802f0a8:	f000 80a8 	beq.w	802f1fc <_dtoa_r+0x88c>
 802f0ac:	2c00      	cmp	r4, #0
 802f0ae:	dd10      	ble.n	802f0d2 <_dtoa_r+0x762>
 802f0b0:	4629      	mov	r1, r5
 802f0b2:	4622      	mov	r2, r4
 802f0b4:	4648      	mov	r0, r9
 802f0b6:	f000 fbb5 	bl	802f824 <__pow5mult>
 802f0ba:	4642      	mov	r2, r8
 802f0bc:	4601      	mov	r1, r0
 802f0be:	4605      	mov	r5, r0
 802f0c0:	4648      	mov	r0, r9
 802f0c2:	f000 fb07 	bl	802f6d4 <__multiply>
 802f0c6:	4607      	mov	r7, r0
 802f0c8:	4641      	mov	r1, r8
 802f0ca:	4648      	mov	r0, r9
 802f0cc:	f000 fa4f 	bl	802f56e <_Bfree>
 802f0d0:	46b8      	mov	r8, r7
 802f0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f0d4:	1b1a      	subs	r2, r3, r4
 802f0d6:	d004      	beq.n	802f0e2 <_dtoa_r+0x772>
 802f0d8:	4641      	mov	r1, r8
 802f0da:	4648      	mov	r0, r9
 802f0dc:	f000 fba2 	bl	802f824 <__pow5mult>
 802f0e0:	4680      	mov	r8, r0
 802f0e2:	2101      	movs	r1, #1
 802f0e4:	4648      	mov	r0, r9
 802f0e6:	f000 fadf 	bl	802f6a8 <__i2b>
 802f0ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802f0ec:	4604      	mov	r4, r0
 802f0ee:	2b00      	cmp	r3, #0
 802f0f0:	f340 8086 	ble.w	802f200 <_dtoa_r+0x890>
 802f0f4:	461a      	mov	r2, r3
 802f0f6:	4601      	mov	r1, r0
 802f0f8:	4648      	mov	r0, r9
 802f0fa:	f000 fb93 	bl	802f824 <__pow5mult>
 802f0fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802f100:	4604      	mov	r4, r0
 802f102:	2b01      	cmp	r3, #1
 802f104:	dd7f      	ble.n	802f206 <_dtoa_r+0x896>
 802f106:	2700      	movs	r7, #0
 802f108:	6923      	ldr	r3, [r4, #16]
 802f10a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802f10e:	6918      	ldr	r0, [r3, #16]
 802f110:	f000 fa7c 	bl	802f60c <__hi0bits>
 802f114:	f1c0 0020 	rsb	r0, r0, #32
 802f118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f11a:	4418      	add	r0, r3
 802f11c:	f010 001f 	ands.w	r0, r0, #31
 802f120:	f000 8098 	beq.w	802f254 <_dtoa_r+0x8e4>
 802f124:	f1c0 0320 	rsb	r3, r0, #32
 802f128:	2b04      	cmp	r3, #4
 802f12a:	f340 8088 	ble.w	802f23e <_dtoa_r+0x8ce>
 802f12e:	9b06      	ldr	r3, [sp, #24]
 802f130:	f1c0 001c 	rsb	r0, r0, #28
 802f134:	4403      	add	r3, r0
 802f136:	9306      	str	r3, [sp, #24]
 802f138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f13a:	4406      	add	r6, r0
 802f13c:	4403      	add	r3, r0
 802f13e:	9309      	str	r3, [sp, #36]	; 0x24
 802f140:	9b06      	ldr	r3, [sp, #24]
 802f142:	2b00      	cmp	r3, #0
 802f144:	dd05      	ble.n	802f152 <_dtoa_r+0x7e2>
 802f146:	4641      	mov	r1, r8
 802f148:	461a      	mov	r2, r3
 802f14a:	4648      	mov	r0, r9
 802f14c:	f000 fbaa 	bl	802f8a4 <__lshift>
 802f150:	4680      	mov	r8, r0
 802f152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f154:	2b00      	cmp	r3, #0
 802f156:	dd05      	ble.n	802f164 <_dtoa_r+0x7f4>
 802f158:	4621      	mov	r1, r4
 802f15a:	461a      	mov	r2, r3
 802f15c:	4648      	mov	r0, r9
 802f15e:	f000 fba1 	bl	802f8a4 <__lshift>
 802f162:	4604      	mov	r4, r0
 802f164:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802f166:	2b00      	cmp	r3, #0
 802f168:	d076      	beq.n	802f258 <_dtoa_r+0x8e8>
 802f16a:	4621      	mov	r1, r4
 802f16c:	4640      	mov	r0, r8
 802f16e:	f000 fc05 	bl	802f97c <__mcmp>
 802f172:	2800      	cmp	r0, #0
 802f174:	da70      	bge.n	802f258 <_dtoa_r+0x8e8>
 802f176:	9b03      	ldr	r3, [sp, #12]
 802f178:	4641      	mov	r1, r8
 802f17a:	3b01      	subs	r3, #1
 802f17c:	9303      	str	r3, [sp, #12]
 802f17e:	220a      	movs	r2, #10
 802f180:	2300      	movs	r3, #0
 802f182:	4648      	mov	r0, r9
 802f184:	f000 f9fc 	bl	802f580 <__multadd>
 802f188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f18a:	4680      	mov	r8, r0
 802f18c:	2b00      	cmp	r3, #0
 802f18e:	f000 81a9 	beq.w	802f4e4 <_dtoa_r+0xb74>
 802f192:	2300      	movs	r3, #0
 802f194:	4629      	mov	r1, r5
 802f196:	220a      	movs	r2, #10
 802f198:	4648      	mov	r0, r9
 802f19a:	f000 f9f1 	bl	802f580 <__multadd>
 802f19e:	9b08      	ldr	r3, [sp, #32]
 802f1a0:	4605      	mov	r5, r0
 802f1a2:	2b00      	cmp	r3, #0
 802f1a4:	f300 8093 	bgt.w	802f2ce <_dtoa_r+0x95e>
 802f1a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802f1aa:	2b02      	cmp	r3, #2
 802f1ac:	dc5c      	bgt.n	802f268 <_dtoa_r+0x8f8>
 802f1ae:	e08e      	b.n	802f2ce <_dtoa_r+0x95e>
 802f1b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802f1b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802f1b6:	e758      	b.n	802f06a <_dtoa_r+0x6fa>
 802f1b8:	9b05      	ldr	r3, [sp, #20]
 802f1ba:	1e5c      	subs	r4, r3, #1
 802f1bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f1be:	42a3      	cmp	r3, r4
 802f1c0:	bfbf      	itttt	lt
 802f1c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802f1c4:	9a10      	ldrlt	r2, [sp, #64]	; 0x40
 802f1c6:	1ae3      	sublt	r3, r4, r3
 802f1c8:	18d2      	addlt	r2, r2, r3
 802f1ca:	bfa8      	it	ge
 802f1cc:	1b1c      	subge	r4, r3, r4
 802f1ce:	9b05      	ldr	r3, [sp, #20]
 802f1d0:	bfbe      	ittt	lt
 802f1d2:	9210      	strlt	r2, [sp, #64]	; 0x40
 802f1d4:	940a      	strlt	r4, [sp, #40]	; 0x28
 802f1d6:	2400      	movlt	r4, #0
 802f1d8:	2b00      	cmp	r3, #0
 802f1da:	bfb7      	itett	lt
 802f1dc:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 802f1e0:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 802f1e4:	1a9e      	sublt	r6, r3, r2
 802f1e6:	2300      	movlt	r3, #0
 802f1e8:	e741      	b.n	802f06e <_dtoa_r+0x6fe>
 802f1ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802f1ec:	9e06      	ldr	r6, [sp, #24]
 802f1ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802f1f0:	e748      	b.n	802f084 <_dtoa_r+0x714>
 802f1f2:	bf00      	nop
 802f1f4:	3fe00000 	.word	0x3fe00000
 802f1f8:	40240000 	.word	0x40240000
 802f1fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802f1fe:	e76b      	b.n	802f0d8 <_dtoa_r+0x768>
 802f200:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802f202:	2b01      	cmp	r3, #1
 802f204:	dc17      	bgt.n	802f236 <_dtoa_r+0x8c6>
 802f206:	f1ba 0f00 	cmp.w	sl, #0
 802f20a:	d114      	bne.n	802f236 <_dtoa_r+0x8c6>
 802f20c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802f210:	b99b      	cbnz	r3, 802f23a <_dtoa_r+0x8ca>
 802f212:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 802f216:	0d3f      	lsrs	r7, r7, #20
 802f218:	053f      	lsls	r7, r7, #20
 802f21a:	b137      	cbz	r7, 802f22a <_dtoa_r+0x8ba>
 802f21c:	2701      	movs	r7, #1
 802f21e:	9b06      	ldr	r3, [sp, #24]
 802f220:	3301      	adds	r3, #1
 802f222:	9306      	str	r3, [sp, #24]
 802f224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f226:	3301      	adds	r3, #1
 802f228:	9309      	str	r3, [sp, #36]	; 0x24
 802f22a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802f22c:	2b00      	cmp	r3, #0
 802f22e:	f47f af6b 	bne.w	802f108 <_dtoa_r+0x798>
 802f232:	2001      	movs	r0, #1
 802f234:	e770      	b.n	802f118 <_dtoa_r+0x7a8>
 802f236:	2700      	movs	r7, #0
 802f238:	e7f7      	b.n	802f22a <_dtoa_r+0x8ba>
 802f23a:	4657      	mov	r7, sl
 802f23c:	e7f5      	b.n	802f22a <_dtoa_r+0x8ba>
 802f23e:	f43f af7f 	beq.w	802f140 <_dtoa_r+0x7d0>
 802f242:	9a06      	ldr	r2, [sp, #24]
 802f244:	331c      	adds	r3, #28
 802f246:	441a      	add	r2, r3
 802f248:	9206      	str	r2, [sp, #24]
 802f24a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802f24c:	441e      	add	r6, r3
 802f24e:	441a      	add	r2, r3
 802f250:	9209      	str	r2, [sp, #36]	; 0x24
 802f252:	e775      	b.n	802f140 <_dtoa_r+0x7d0>
 802f254:	4603      	mov	r3, r0
 802f256:	e7f4      	b.n	802f242 <_dtoa_r+0x8d2>
 802f258:	9b05      	ldr	r3, [sp, #20]
 802f25a:	2b00      	cmp	r3, #0
 802f25c:	dc31      	bgt.n	802f2c2 <_dtoa_r+0x952>
 802f25e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802f260:	2b02      	cmp	r3, #2
 802f262:	dd2e      	ble.n	802f2c2 <_dtoa_r+0x952>
 802f264:	9b05      	ldr	r3, [sp, #20]
 802f266:	9308      	str	r3, [sp, #32]
 802f268:	9b08      	ldr	r3, [sp, #32]
 802f26a:	b963      	cbnz	r3, 802f286 <_dtoa_r+0x916>
 802f26c:	4621      	mov	r1, r4
 802f26e:	2205      	movs	r2, #5
 802f270:	4648      	mov	r0, r9
 802f272:	f000 f985 	bl	802f580 <__multadd>
 802f276:	4601      	mov	r1, r0
 802f278:	4604      	mov	r4, r0
 802f27a:	4640      	mov	r0, r8
 802f27c:	f000 fb7e 	bl	802f97c <__mcmp>
 802f280:	2800      	cmp	r0, #0
 802f282:	f73f adba 	bgt.w	802edfa <_dtoa_r+0x48a>
 802f286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802f288:	9e04      	ldr	r6, [sp, #16]
 802f28a:	43db      	mvns	r3, r3
 802f28c:	9303      	str	r3, [sp, #12]
 802f28e:	2700      	movs	r7, #0
 802f290:	4621      	mov	r1, r4
 802f292:	4648      	mov	r0, r9
 802f294:	f000 f96b 	bl	802f56e <_Bfree>
 802f298:	2d00      	cmp	r5, #0
 802f29a:	f43f aea9 	beq.w	802eff0 <_dtoa_r+0x680>
 802f29e:	b12f      	cbz	r7, 802f2ac <_dtoa_r+0x93c>
 802f2a0:	42af      	cmp	r7, r5
 802f2a2:	d003      	beq.n	802f2ac <_dtoa_r+0x93c>
 802f2a4:	4639      	mov	r1, r7
 802f2a6:	4648      	mov	r0, r9
 802f2a8:	f000 f961 	bl	802f56e <_Bfree>
 802f2ac:	4629      	mov	r1, r5
 802f2ae:	4648      	mov	r0, r9
 802f2b0:	f000 f95d 	bl	802f56e <_Bfree>
 802f2b4:	e69c      	b.n	802eff0 <_dtoa_r+0x680>
 802f2b6:	2400      	movs	r4, #0
 802f2b8:	4625      	mov	r5, r4
 802f2ba:	e7e4      	b.n	802f286 <_dtoa_r+0x916>
 802f2bc:	9503      	str	r5, [sp, #12]
 802f2be:	4625      	mov	r5, r4
 802f2c0:	e59b      	b.n	802edfa <_dtoa_r+0x48a>
 802f2c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f2c4:	2b00      	cmp	r3, #0
 802f2c6:	f000 80c4 	beq.w	802f452 <_dtoa_r+0xae2>
 802f2ca:	9b05      	ldr	r3, [sp, #20]
 802f2cc:	9308      	str	r3, [sp, #32]
 802f2ce:	2e00      	cmp	r6, #0
 802f2d0:	dd05      	ble.n	802f2de <_dtoa_r+0x96e>
 802f2d2:	4629      	mov	r1, r5
 802f2d4:	4632      	mov	r2, r6
 802f2d6:	4648      	mov	r0, r9
 802f2d8:	f000 fae4 	bl	802f8a4 <__lshift>
 802f2dc:	4605      	mov	r5, r0
 802f2de:	2f00      	cmp	r7, #0
 802f2e0:	d058      	beq.n	802f394 <_dtoa_r+0xa24>
 802f2e2:	4648      	mov	r0, r9
 802f2e4:	6869      	ldr	r1, [r5, #4]
 802f2e6:	f000 f91d 	bl	802f524 <_Balloc>
 802f2ea:	4606      	mov	r6, r0
 802f2ec:	b920      	cbnz	r0, 802f2f8 <_dtoa_r+0x988>
 802f2ee:	4602      	mov	r2, r0
 802f2f0:	f240 21ef 	movw	r1, #751	; 0x2ef
 802f2f4:	4b7f      	ldr	r3, [pc, #508]	; (802f4f4 <_dtoa_r+0xb84>)
 802f2f6:	e477      	b.n	802ebe8 <_dtoa_r+0x278>
 802f2f8:	692a      	ldr	r2, [r5, #16]
 802f2fa:	f105 010c 	add.w	r1, r5, #12
 802f2fe:	3202      	adds	r2, #2
 802f300:	0092      	lsls	r2, r2, #2
 802f302:	300c      	adds	r0, #12
 802f304:	f7fc fbd6 	bl	802bab4 <memcpy>
 802f308:	2201      	movs	r2, #1
 802f30a:	4631      	mov	r1, r6
 802f30c:	4648      	mov	r0, r9
 802f30e:	f000 fac9 	bl	802f8a4 <__lshift>
 802f312:	462f      	mov	r7, r5
 802f314:	4605      	mov	r5, r0
 802f316:	9b04      	ldr	r3, [sp, #16]
 802f318:	9a04      	ldr	r2, [sp, #16]
 802f31a:	3301      	adds	r3, #1
 802f31c:	9305      	str	r3, [sp, #20]
 802f31e:	9b08      	ldr	r3, [sp, #32]
 802f320:	4413      	add	r3, r2
 802f322:	930a      	str	r3, [sp, #40]	; 0x28
 802f324:	f00a 0301 	and.w	r3, sl, #1
 802f328:	9309      	str	r3, [sp, #36]	; 0x24
 802f32a:	9b05      	ldr	r3, [sp, #20]
 802f32c:	4621      	mov	r1, r4
 802f32e:	4640      	mov	r0, r8
 802f330:	f103 3bff 	add.w	fp, r3, #4294967295
 802f334:	f7ff fa90 	bl	802e858 <quorem>
 802f338:	4639      	mov	r1, r7
 802f33a:	9006      	str	r0, [sp, #24]
 802f33c:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802f340:	4640      	mov	r0, r8
 802f342:	f000 fb1b 	bl	802f97c <__mcmp>
 802f346:	462a      	mov	r2, r5
 802f348:	9008      	str	r0, [sp, #32]
 802f34a:	4621      	mov	r1, r4
 802f34c:	4648      	mov	r0, r9
 802f34e:	f000 fb31 	bl	802f9b4 <__mdiff>
 802f352:	68c2      	ldr	r2, [r0, #12]
 802f354:	4606      	mov	r6, r0
 802f356:	b9fa      	cbnz	r2, 802f398 <_dtoa_r+0xa28>
 802f358:	4601      	mov	r1, r0
 802f35a:	4640      	mov	r0, r8
 802f35c:	f000 fb0e 	bl	802f97c <__mcmp>
 802f360:	4602      	mov	r2, r0
 802f362:	4631      	mov	r1, r6
 802f364:	4648      	mov	r0, r9
 802f366:	920b      	str	r2, [sp, #44]	; 0x2c
 802f368:	f000 f901 	bl	802f56e <_Bfree>
 802f36c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802f36e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802f370:	9e05      	ldr	r6, [sp, #20]
 802f372:	ea43 0102 	orr.w	r1, r3, r2
 802f376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f378:	4319      	orrs	r1, r3
 802f37a:	d10f      	bne.n	802f39c <_dtoa_r+0xa2c>
 802f37c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802f380:	d028      	beq.n	802f3d4 <_dtoa_r+0xa64>
 802f382:	9b08      	ldr	r3, [sp, #32]
 802f384:	2b00      	cmp	r3, #0
 802f386:	dd02      	ble.n	802f38e <_dtoa_r+0xa1e>
 802f388:	9b06      	ldr	r3, [sp, #24]
 802f38a:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 802f38e:	f88b a000 	strb.w	sl, [fp]
 802f392:	e77d      	b.n	802f290 <_dtoa_r+0x920>
 802f394:	4628      	mov	r0, r5
 802f396:	e7bc      	b.n	802f312 <_dtoa_r+0x9a2>
 802f398:	2201      	movs	r2, #1
 802f39a:	e7e2      	b.n	802f362 <_dtoa_r+0x9f2>
 802f39c:	9b08      	ldr	r3, [sp, #32]
 802f39e:	2b00      	cmp	r3, #0
 802f3a0:	db04      	blt.n	802f3ac <_dtoa_r+0xa3c>
 802f3a2:	9920      	ldr	r1, [sp, #128]	; 0x80
 802f3a4:	430b      	orrs	r3, r1
 802f3a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f3a8:	430b      	orrs	r3, r1
 802f3aa:	d120      	bne.n	802f3ee <_dtoa_r+0xa7e>
 802f3ac:	2a00      	cmp	r2, #0
 802f3ae:	ddee      	ble.n	802f38e <_dtoa_r+0xa1e>
 802f3b0:	4641      	mov	r1, r8
 802f3b2:	2201      	movs	r2, #1
 802f3b4:	4648      	mov	r0, r9
 802f3b6:	f000 fa75 	bl	802f8a4 <__lshift>
 802f3ba:	4621      	mov	r1, r4
 802f3bc:	4680      	mov	r8, r0
 802f3be:	f000 fadd 	bl	802f97c <__mcmp>
 802f3c2:	2800      	cmp	r0, #0
 802f3c4:	dc03      	bgt.n	802f3ce <_dtoa_r+0xa5e>
 802f3c6:	d1e2      	bne.n	802f38e <_dtoa_r+0xa1e>
 802f3c8:	f01a 0f01 	tst.w	sl, #1
 802f3cc:	d0df      	beq.n	802f38e <_dtoa_r+0xa1e>
 802f3ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802f3d2:	d1d9      	bne.n	802f388 <_dtoa_r+0xa18>
 802f3d4:	2339      	movs	r3, #57	; 0x39
 802f3d6:	f88b 3000 	strb.w	r3, [fp]
 802f3da:	4633      	mov	r3, r6
 802f3dc:	461e      	mov	r6, r3
 802f3de:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802f3e2:	3b01      	subs	r3, #1
 802f3e4:	2a39      	cmp	r2, #57	; 0x39
 802f3e6:	d06a      	beq.n	802f4be <_dtoa_r+0xb4e>
 802f3e8:	3201      	adds	r2, #1
 802f3ea:	701a      	strb	r2, [r3, #0]
 802f3ec:	e750      	b.n	802f290 <_dtoa_r+0x920>
 802f3ee:	2a00      	cmp	r2, #0
 802f3f0:	dd07      	ble.n	802f402 <_dtoa_r+0xa92>
 802f3f2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802f3f6:	d0ed      	beq.n	802f3d4 <_dtoa_r+0xa64>
 802f3f8:	f10a 0301 	add.w	r3, sl, #1
 802f3fc:	f88b 3000 	strb.w	r3, [fp]
 802f400:	e746      	b.n	802f290 <_dtoa_r+0x920>
 802f402:	9b05      	ldr	r3, [sp, #20]
 802f404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802f406:	f803 ac01 	strb.w	sl, [r3, #-1]
 802f40a:	4293      	cmp	r3, r2
 802f40c:	d041      	beq.n	802f492 <_dtoa_r+0xb22>
 802f40e:	4641      	mov	r1, r8
 802f410:	2300      	movs	r3, #0
 802f412:	220a      	movs	r2, #10
 802f414:	4648      	mov	r0, r9
 802f416:	f000 f8b3 	bl	802f580 <__multadd>
 802f41a:	42af      	cmp	r7, r5
 802f41c:	4680      	mov	r8, r0
 802f41e:	f04f 0300 	mov.w	r3, #0
 802f422:	f04f 020a 	mov.w	r2, #10
 802f426:	4639      	mov	r1, r7
 802f428:	4648      	mov	r0, r9
 802f42a:	d107      	bne.n	802f43c <_dtoa_r+0xacc>
 802f42c:	f000 f8a8 	bl	802f580 <__multadd>
 802f430:	4607      	mov	r7, r0
 802f432:	4605      	mov	r5, r0
 802f434:	9b05      	ldr	r3, [sp, #20]
 802f436:	3301      	adds	r3, #1
 802f438:	9305      	str	r3, [sp, #20]
 802f43a:	e776      	b.n	802f32a <_dtoa_r+0x9ba>
 802f43c:	f000 f8a0 	bl	802f580 <__multadd>
 802f440:	4629      	mov	r1, r5
 802f442:	4607      	mov	r7, r0
 802f444:	2300      	movs	r3, #0
 802f446:	220a      	movs	r2, #10
 802f448:	4648      	mov	r0, r9
 802f44a:	f000 f899 	bl	802f580 <__multadd>
 802f44e:	4605      	mov	r5, r0
 802f450:	e7f0      	b.n	802f434 <_dtoa_r+0xac4>
 802f452:	9b05      	ldr	r3, [sp, #20]
 802f454:	9308      	str	r3, [sp, #32]
 802f456:	9e04      	ldr	r6, [sp, #16]
 802f458:	4621      	mov	r1, r4
 802f45a:	4640      	mov	r0, r8
 802f45c:	f7ff f9fc 	bl	802e858 <quorem>
 802f460:	9b04      	ldr	r3, [sp, #16]
 802f462:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802f466:	f806 ab01 	strb.w	sl, [r6], #1
 802f46a:	1af2      	subs	r2, r6, r3
 802f46c:	9b08      	ldr	r3, [sp, #32]
 802f46e:	4293      	cmp	r3, r2
 802f470:	dd07      	ble.n	802f482 <_dtoa_r+0xb12>
 802f472:	4641      	mov	r1, r8
 802f474:	2300      	movs	r3, #0
 802f476:	220a      	movs	r2, #10
 802f478:	4648      	mov	r0, r9
 802f47a:	f000 f881 	bl	802f580 <__multadd>
 802f47e:	4680      	mov	r8, r0
 802f480:	e7ea      	b.n	802f458 <_dtoa_r+0xae8>
 802f482:	9b08      	ldr	r3, [sp, #32]
 802f484:	2700      	movs	r7, #0
 802f486:	2b00      	cmp	r3, #0
 802f488:	bfcc      	ite	gt
 802f48a:	461e      	movgt	r6, r3
 802f48c:	2601      	movle	r6, #1
 802f48e:	9b04      	ldr	r3, [sp, #16]
 802f490:	441e      	add	r6, r3
 802f492:	4641      	mov	r1, r8
 802f494:	2201      	movs	r2, #1
 802f496:	4648      	mov	r0, r9
 802f498:	f000 fa04 	bl	802f8a4 <__lshift>
 802f49c:	4621      	mov	r1, r4
 802f49e:	4680      	mov	r8, r0
 802f4a0:	f000 fa6c 	bl	802f97c <__mcmp>
 802f4a4:	2800      	cmp	r0, #0
 802f4a6:	dc98      	bgt.n	802f3da <_dtoa_r+0xa6a>
 802f4a8:	d102      	bne.n	802f4b0 <_dtoa_r+0xb40>
 802f4aa:	f01a 0f01 	tst.w	sl, #1
 802f4ae:	d194      	bne.n	802f3da <_dtoa_r+0xa6a>
 802f4b0:	4633      	mov	r3, r6
 802f4b2:	461e      	mov	r6, r3
 802f4b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802f4b8:	2a30      	cmp	r2, #48	; 0x30
 802f4ba:	d0fa      	beq.n	802f4b2 <_dtoa_r+0xb42>
 802f4bc:	e6e8      	b.n	802f290 <_dtoa_r+0x920>
 802f4be:	9a04      	ldr	r2, [sp, #16]
 802f4c0:	429a      	cmp	r2, r3
 802f4c2:	d18b      	bne.n	802f3dc <_dtoa_r+0xa6c>
 802f4c4:	9b03      	ldr	r3, [sp, #12]
 802f4c6:	3301      	adds	r3, #1
 802f4c8:	9303      	str	r3, [sp, #12]
 802f4ca:	2331      	movs	r3, #49	; 0x31
 802f4cc:	7013      	strb	r3, [r2, #0]
 802f4ce:	e6df      	b.n	802f290 <_dtoa_r+0x920>
 802f4d0:	4b09      	ldr	r3, [pc, #36]	; (802f4f8 <_dtoa_r+0xb88>)
 802f4d2:	f7ff baa0 	b.w	802ea16 <_dtoa_r+0xa6>
 802f4d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802f4d8:	2b00      	cmp	r3, #0
 802f4da:	f47f aa83 	bne.w	802e9e4 <_dtoa_r+0x74>
 802f4de:	4b07      	ldr	r3, [pc, #28]	; (802f4fc <_dtoa_r+0xb8c>)
 802f4e0:	f7ff ba99 	b.w	802ea16 <_dtoa_r+0xa6>
 802f4e4:	9b08      	ldr	r3, [sp, #32]
 802f4e6:	2b00      	cmp	r3, #0
 802f4e8:	dcb5      	bgt.n	802f456 <_dtoa_r+0xae6>
 802f4ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802f4ec:	2b02      	cmp	r3, #2
 802f4ee:	f73f aebb 	bgt.w	802f268 <_dtoa_r+0x8f8>
 802f4f2:	e7b0      	b.n	802f456 <_dtoa_r+0xae6>
 802f4f4:	080310b9 	.word	0x080310b9
 802f4f8:	08031060 	.word	0x08031060
 802f4fc:	080310ac 	.word	0x080310ac

0802f500 <__ascii_mbtowc>:
 802f500:	b082      	sub	sp, #8
 802f502:	b901      	cbnz	r1, 802f506 <__ascii_mbtowc+0x6>
 802f504:	a901      	add	r1, sp, #4
 802f506:	b142      	cbz	r2, 802f51a <__ascii_mbtowc+0x1a>
 802f508:	b14b      	cbz	r3, 802f51e <__ascii_mbtowc+0x1e>
 802f50a:	7813      	ldrb	r3, [r2, #0]
 802f50c:	600b      	str	r3, [r1, #0]
 802f50e:	7812      	ldrb	r2, [r2, #0]
 802f510:	1e10      	subs	r0, r2, #0
 802f512:	bf18      	it	ne
 802f514:	2001      	movne	r0, #1
 802f516:	b002      	add	sp, #8
 802f518:	4770      	bx	lr
 802f51a:	4610      	mov	r0, r2
 802f51c:	e7fb      	b.n	802f516 <__ascii_mbtowc+0x16>
 802f51e:	f06f 0001 	mvn.w	r0, #1
 802f522:	e7f8      	b.n	802f516 <__ascii_mbtowc+0x16>

0802f524 <_Balloc>:
 802f524:	6c43      	ldr	r3, [r0, #68]	; 0x44
 802f526:	b570      	push	{r4, r5, r6, lr}
 802f528:	4605      	mov	r5, r0
 802f52a:	460c      	mov	r4, r1
 802f52c:	b17b      	cbz	r3, 802f54e <_Balloc+0x2a>
 802f52e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 802f530:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802f534:	b9a0      	cbnz	r0, 802f560 <_Balloc+0x3c>
 802f536:	2101      	movs	r1, #1
 802f538:	fa01 f604 	lsl.w	r6, r1, r4
 802f53c:	1d72      	adds	r2, r6, #5
 802f53e:	4628      	mov	r0, r5
 802f540:	0092      	lsls	r2, r2, #2
 802f542:	f000 fdd5 	bl	80300f0 <_calloc_r>
 802f546:	b148      	cbz	r0, 802f55c <_Balloc+0x38>
 802f548:	e9c0 4601 	strd	r4, r6, [r0, #4]
 802f54c:	e00b      	b.n	802f566 <_Balloc+0x42>
 802f54e:	2221      	movs	r2, #33	; 0x21
 802f550:	2104      	movs	r1, #4
 802f552:	f000 fdcd 	bl	80300f0 <_calloc_r>
 802f556:	6468      	str	r0, [r5, #68]	; 0x44
 802f558:	2800      	cmp	r0, #0
 802f55a:	d1e8      	bne.n	802f52e <_Balloc+0xa>
 802f55c:	2000      	movs	r0, #0
 802f55e:	bd70      	pop	{r4, r5, r6, pc}
 802f560:	6802      	ldr	r2, [r0, #0]
 802f562:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 802f566:	2300      	movs	r3, #0
 802f568:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802f56c:	e7f7      	b.n	802f55e <_Balloc+0x3a>

0802f56e <_Bfree>:
 802f56e:	b131      	cbz	r1, 802f57e <_Bfree+0x10>
 802f570:	6c43      	ldr	r3, [r0, #68]	; 0x44
 802f572:	684a      	ldr	r2, [r1, #4]
 802f574:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802f578:	6008      	str	r0, [r1, #0]
 802f57a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802f57e:	4770      	bx	lr

0802f580 <__multadd>:
 802f580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f584:	4607      	mov	r7, r0
 802f586:	460c      	mov	r4, r1
 802f588:	461e      	mov	r6, r3
 802f58a:	2000      	movs	r0, #0
 802f58c:	690d      	ldr	r5, [r1, #16]
 802f58e:	f101 0c14 	add.w	ip, r1, #20
 802f592:	f8dc 3000 	ldr.w	r3, [ip]
 802f596:	3001      	adds	r0, #1
 802f598:	b299      	uxth	r1, r3
 802f59a:	fb02 6101 	mla	r1, r2, r1, r6
 802f59e:	0c1e      	lsrs	r6, r3, #16
 802f5a0:	0c0b      	lsrs	r3, r1, #16
 802f5a2:	fb02 3306 	mla	r3, r2, r6, r3
 802f5a6:	b289      	uxth	r1, r1
 802f5a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802f5ac:	4285      	cmp	r5, r0
 802f5ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802f5b2:	f84c 1b04 	str.w	r1, [ip], #4
 802f5b6:	dcec      	bgt.n	802f592 <__multadd+0x12>
 802f5b8:	b30e      	cbz	r6, 802f5fe <__multadd+0x7e>
 802f5ba:	68a3      	ldr	r3, [r4, #8]
 802f5bc:	42ab      	cmp	r3, r5
 802f5be:	dc19      	bgt.n	802f5f4 <__multadd+0x74>
 802f5c0:	6861      	ldr	r1, [r4, #4]
 802f5c2:	4638      	mov	r0, r7
 802f5c4:	3101      	adds	r1, #1
 802f5c6:	f7ff ffad 	bl	802f524 <_Balloc>
 802f5ca:	4680      	mov	r8, r0
 802f5cc:	b928      	cbnz	r0, 802f5da <__multadd+0x5a>
 802f5ce:	4602      	mov	r2, r0
 802f5d0:	21ba      	movs	r1, #186	; 0xba
 802f5d2:	4b0c      	ldr	r3, [pc, #48]	; (802f604 <__multadd+0x84>)
 802f5d4:	480c      	ldr	r0, [pc, #48]	; (802f608 <__multadd+0x88>)
 802f5d6:	f000 fd6d 	bl	80300b4 <__assert_func>
 802f5da:	6922      	ldr	r2, [r4, #16]
 802f5dc:	f104 010c 	add.w	r1, r4, #12
 802f5e0:	3202      	adds	r2, #2
 802f5e2:	0092      	lsls	r2, r2, #2
 802f5e4:	300c      	adds	r0, #12
 802f5e6:	f7fc fa65 	bl	802bab4 <memcpy>
 802f5ea:	4621      	mov	r1, r4
 802f5ec:	4638      	mov	r0, r7
 802f5ee:	f7ff ffbe 	bl	802f56e <_Bfree>
 802f5f2:	4644      	mov	r4, r8
 802f5f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802f5f8:	3501      	adds	r5, #1
 802f5fa:	615e      	str	r6, [r3, #20]
 802f5fc:	6125      	str	r5, [r4, #16]
 802f5fe:	4620      	mov	r0, r4
 802f600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f604:	080310b9 	.word	0x080310b9
 802f608:	08031122 	.word	0x08031122

0802f60c <__hi0bits>:
 802f60c:	0c02      	lsrs	r2, r0, #16
 802f60e:	0412      	lsls	r2, r2, #16
 802f610:	4603      	mov	r3, r0
 802f612:	b9ca      	cbnz	r2, 802f648 <__hi0bits+0x3c>
 802f614:	0403      	lsls	r3, r0, #16
 802f616:	2010      	movs	r0, #16
 802f618:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802f61c:	bf04      	itt	eq
 802f61e:	021b      	lsleq	r3, r3, #8
 802f620:	3008      	addeq	r0, #8
 802f622:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802f626:	bf04      	itt	eq
 802f628:	011b      	lsleq	r3, r3, #4
 802f62a:	3004      	addeq	r0, #4
 802f62c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 802f630:	bf04      	itt	eq
 802f632:	009b      	lsleq	r3, r3, #2
 802f634:	3002      	addeq	r0, #2
 802f636:	2b00      	cmp	r3, #0
 802f638:	db05      	blt.n	802f646 <__hi0bits+0x3a>
 802f63a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 802f63e:	f100 0001 	add.w	r0, r0, #1
 802f642:	bf08      	it	eq
 802f644:	2020      	moveq	r0, #32
 802f646:	4770      	bx	lr
 802f648:	2000      	movs	r0, #0
 802f64a:	e7e5      	b.n	802f618 <__hi0bits+0xc>

0802f64c <__lo0bits>:
 802f64c:	6803      	ldr	r3, [r0, #0]
 802f64e:	4602      	mov	r2, r0
 802f650:	f013 0007 	ands.w	r0, r3, #7
 802f654:	d00b      	beq.n	802f66e <__lo0bits+0x22>
 802f656:	07d9      	lsls	r1, r3, #31
 802f658:	d421      	bmi.n	802f69e <__lo0bits+0x52>
 802f65a:	0798      	lsls	r0, r3, #30
 802f65c:	bf49      	itett	mi
 802f65e:	085b      	lsrmi	r3, r3, #1
 802f660:	089b      	lsrpl	r3, r3, #2
 802f662:	2001      	movmi	r0, #1
 802f664:	6013      	strmi	r3, [r2, #0]
 802f666:	bf5c      	itt	pl
 802f668:	2002      	movpl	r0, #2
 802f66a:	6013      	strpl	r3, [r2, #0]
 802f66c:	4770      	bx	lr
 802f66e:	b299      	uxth	r1, r3
 802f670:	b909      	cbnz	r1, 802f676 <__lo0bits+0x2a>
 802f672:	2010      	movs	r0, #16
 802f674:	0c1b      	lsrs	r3, r3, #16
 802f676:	b2d9      	uxtb	r1, r3
 802f678:	b909      	cbnz	r1, 802f67e <__lo0bits+0x32>
 802f67a:	3008      	adds	r0, #8
 802f67c:	0a1b      	lsrs	r3, r3, #8
 802f67e:	0719      	lsls	r1, r3, #28
 802f680:	bf04      	itt	eq
 802f682:	091b      	lsreq	r3, r3, #4
 802f684:	3004      	addeq	r0, #4
 802f686:	0799      	lsls	r1, r3, #30
 802f688:	bf04      	itt	eq
 802f68a:	089b      	lsreq	r3, r3, #2
 802f68c:	3002      	addeq	r0, #2
 802f68e:	07d9      	lsls	r1, r3, #31
 802f690:	d403      	bmi.n	802f69a <__lo0bits+0x4e>
 802f692:	085b      	lsrs	r3, r3, #1
 802f694:	f100 0001 	add.w	r0, r0, #1
 802f698:	d003      	beq.n	802f6a2 <__lo0bits+0x56>
 802f69a:	6013      	str	r3, [r2, #0]
 802f69c:	4770      	bx	lr
 802f69e:	2000      	movs	r0, #0
 802f6a0:	4770      	bx	lr
 802f6a2:	2020      	movs	r0, #32
 802f6a4:	4770      	bx	lr
	...

0802f6a8 <__i2b>:
 802f6a8:	b510      	push	{r4, lr}
 802f6aa:	460c      	mov	r4, r1
 802f6ac:	2101      	movs	r1, #1
 802f6ae:	f7ff ff39 	bl	802f524 <_Balloc>
 802f6b2:	4602      	mov	r2, r0
 802f6b4:	b928      	cbnz	r0, 802f6c2 <__i2b+0x1a>
 802f6b6:	f240 1145 	movw	r1, #325	; 0x145
 802f6ba:	4b04      	ldr	r3, [pc, #16]	; (802f6cc <__i2b+0x24>)
 802f6bc:	4804      	ldr	r0, [pc, #16]	; (802f6d0 <__i2b+0x28>)
 802f6be:	f000 fcf9 	bl	80300b4 <__assert_func>
 802f6c2:	2301      	movs	r3, #1
 802f6c4:	6144      	str	r4, [r0, #20]
 802f6c6:	6103      	str	r3, [r0, #16]
 802f6c8:	bd10      	pop	{r4, pc}
 802f6ca:	bf00      	nop
 802f6cc:	080310b9 	.word	0x080310b9
 802f6d0:	08031122 	.word	0x08031122

0802f6d4 <__multiply>:
 802f6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f6d8:	4691      	mov	r9, r2
 802f6da:	690a      	ldr	r2, [r1, #16]
 802f6dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802f6e0:	460c      	mov	r4, r1
 802f6e2:	429a      	cmp	r2, r3
 802f6e4:	bfbe      	ittt	lt
 802f6e6:	460b      	movlt	r3, r1
 802f6e8:	464c      	movlt	r4, r9
 802f6ea:	4699      	movlt	r9, r3
 802f6ec:	6927      	ldr	r7, [r4, #16]
 802f6ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802f6f2:	68a3      	ldr	r3, [r4, #8]
 802f6f4:	6861      	ldr	r1, [r4, #4]
 802f6f6:	eb07 060a 	add.w	r6, r7, sl
 802f6fa:	42b3      	cmp	r3, r6
 802f6fc:	b085      	sub	sp, #20
 802f6fe:	bfb8      	it	lt
 802f700:	3101      	addlt	r1, #1
 802f702:	f7ff ff0f 	bl	802f524 <_Balloc>
 802f706:	b930      	cbnz	r0, 802f716 <__multiply+0x42>
 802f708:	4602      	mov	r2, r0
 802f70a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 802f70e:	4b43      	ldr	r3, [pc, #268]	; (802f81c <__multiply+0x148>)
 802f710:	4843      	ldr	r0, [pc, #268]	; (802f820 <__multiply+0x14c>)
 802f712:	f000 fccf 	bl	80300b4 <__assert_func>
 802f716:	f100 0514 	add.w	r5, r0, #20
 802f71a:	462b      	mov	r3, r5
 802f71c:	2200      	movs	r2, #0
 802f71e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802f722:	4543      	cmp	r3, r8
 802f724:	d321      	bcc.n	802f76a <__multiply+0x96>
 802f726:	f104 0314 	add.w	r3, r4, #20
 802f72a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802f72e:	f109 0314 	add.w	r3, r9, #20
 802f732:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802f736:	9202      	str	r2, [sp, #8]
 802f738:	1b3a      	subs	r2, r7, r4
 802f73a:	3a15      	subs	r2, #21
 802f73c:	f022 0203 	bic.w	r2, r2, #3
 802f740:	3204      	adds	r2, #4
 802f742:	f104 0115 	add.w	r1, r4, #21
 802f746:	428f      	cmp	r7, r1
 802f748:	bf38      	it	cc
 802f74a:	2204      	movcc	r2, #4
 802f74c:	9201      	str	r2, [sp, #4]
 802f74e:	9a02      	ldr	r2, [sp, #8]
 802f750:	9303      	str	r3, [sp, #12]
 802f752:	429a      	cmp	r2, r3
 802f754:	d80c      	bhi.n	802f770 <__multiply+0x9c>
 802f756:	2e00      	cmp	r6, #0
 802f758:	dd03      	ble.n	802f762 <__multiply+0x8e>
 802f75a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802f75e:	2b00      	cmp	r3, #0
 802f760:	d05a      	beq.n	802f818 <__multiply+0x144>
 802f762:	6106      	str	r6, [r0, #16]
 802f764:	b005      	add	sp, #20
 802f766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f76a:	f843 2b04 	str.w	r2, [r3], #4
 802f76e:	e7d8      	b.n	802f722 <__multiply+0x4e>
 802f770:	f8b3 a000 	ldrh.w	sl, [r3]
 802f774:	f1ba 0f00 	cmp.w	sl, #0
 802f778:	d023      	beq.n	802f7c2 <__multiply+0xee>
 802f77a:	46a9      	mov	r9, r5
 802f77c:	f04f 0c00 	mov.w	ip, #0
 802f780:	f104 0e14 	add.w	lr, r4, #20
 802f784:	f85e 2b04 	ldr.w	r2, [lr], #4
 802f788:	f8d9 1000 	ldr.w	r1, [r9]
 802f78c:	fa1f fb82 	uxth.w	fp, r2
 802f790:	b289      	uxth	r1, r1
 802f792:	fb0a 110b 	mla	r1, sl, fp, r1
 802f796:	4461      	add	r1, ip
 802f798:	f8d9 c000 	ldr.w	ip, [r9]
 802f79c:	0c12      	lsrs	r2, r2, #16
 802f79e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802f7a2:	fb0a c202 	mla	r2, sl, r2, ip
 802f7a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802f7aa:	b289      	uxth	r1, r1
 802f7ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802f7b0:	4577      	cmp	r7, lr
 802f7b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802f7b6:	f849 1b04 	str.w	r1, [r9], #4
 802f7ba:	d8e3      	bhi.n	802f784 <__multiply+0xb0>
 802f7bc:	9a01      	ldr	r2, [sp, #4]
 802f7be:	f845 c002 	str.w	ip, [r5, r2]
 802f7c2:	9a03      	ldr	r2, [sp, #12]
 802f7c4:	3304      	adds	r3, #4
 802f7c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802f7ca:	f1b9 0f00 	cmp.w	r9, #0
 802f7ce:	d021      	beq.n	802f814 <__multiply+0x140>
 802f7d0:	46ae      	mov	lr, r5
 802f7d2:	f04f 0a00 	mov.w	sl, #0
 802f7d6:	6829      	ldr	r1, [r5, #0]
 802f7d8:	f104 0c14 	add.w	ip, r4, #20
 802f7dc:	f8bc b000 	ldrh.w	fp, [ip]
 802f7e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802f7e4:	b289      	uxth	r1, r1
 802f7e6:	fb09 220b 	mla	r2, r9, fp, r2
 802f7ea:	4452      	add	r2, sl
 802f7ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802f7f0:	f84e 1b04 	str.w	r1, [lr], #4
 802f7f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 802f7f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802f7fc:	f8be 1000 	ldrh.w	r1, [lr]
 802f800:	4567      	cmp	r7, ip
 802f802:	fb09 110a 	mla	r1, r9, sl, r1
 802f806:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802f80a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802f80e:	d8e5      	bhi.n	802f7dc <__multiply+0x108>
 802f810:	9a01      	ldr	r2, [sp, #4]
 802f812:	50a9      	str	r1, [r5, r2]
 802f814:	3504      	adds	r5, #4
 802f816:	e79a      	b.n	802f74e <__multiply+0x7a>
 802f818:	3e01      	subs	r6, #1
 802f81a:	e79c      	b.n	802f756 <__multiply+0x82>
 802f81c:	080310b9 	.word	0x080310b9
 802f820:	08031122 	.word	0x08031122

0802f824 <__pow5mult>:
 802f824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802f828:	4615      	mov	r5, r2
 802f82a:	f012 0203 	ands.w	r2, r2, #3
 802f82e:	4606      	mov	r6, r0
 802f830:	460f      	mov	r7, r1
 802f832:	d007      	beq.n	802f844 <__pow5mult+0x20>
 802f834:	4c1a      	ldr	r4, [pc, #104]	; (802f8a0 <__pow5mult+0x7c>)
 802f836:	3a01      	subs	r2, #1
 802f838:	2300      	movs	r3, #0
 802f83a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802f83e:	f7ff fe9f 	bl	802f580 <__multadd>
 802f842:	4607      	mov	r7, r0
 802f844:	10ad      	asrs	r5, r5, #2
 802f846:	d027      	beq.n	802f898 <__pow5mult+0x74>
 802f848:	6c34      	ldr	r4, [r6, #64]	; 0x40
 802f84a:	b944      	cbnz	r4, 802f85e <__pow5mult+0x3a>
 802f84c:	f240 2171 	movw	r1, #625	; 0x271
 802f850:	4630      	mov	r0, r6
 802f852:	f7ff ff29 	bl	802f6a8 <__i2b>
 802f856:	2300      	movs	r3, #0
 802f858:	4604      	mov	r4, r0
 802f85a:	6430      	str	r0, [r6, #64]	; 0x40
 802f85c:	6003      	str	r3, [r0, #0]
 802f85e:	f04f 0900 	mov.w	r9, #0
 802f862:	07eb      	lsls	r3, r5, #31
 802f864:	d50a      	bpl.n	802f87c <__pow5mult+0x58>
 802f866:	4639      	mov	r1, r7
 802f868:	4622      	mov	r2, r4
 802f86a:	4630      	mov	r0, r6
 802f86c:	f7ff ff32 	bl	802f6d4 <__multiply>
 802f870:	4680      	mov	r8, r0
 802f872:	4639      	mov	r1, r7
 802f874:	4630      	mov	r0, r6
 802f876:	f7ff fe7a 	bl	802f56e <_Bfree>
 802f87a:	4647      	mov	r7, r8
 802f87c:	106d      	asrs	r5, r5, #1
 802f87e:	d00b      	beq.n	802f898 <__pow5mult+0x74>
 802f880:	6820      	ldr	r0, [r4, #0]
 802f882:	b938      	cbnz	r0, 802f894 <__pow5mult+0x70>
 802f884:	4622      	mov	r2, r4
 802f886:	4621      	mov	r1, r4
 802f888:	4630      	mov	r0, r6
 802f88a:	f7ff ff23 	bl	802f6d4 <__multiply>
 802f88e:	6020      	str	r0, [r4, #0]
 802f890:	f8c0 9000 	str.w	r9, [r0]
 802f894:	4604      	mov	r4, r0
 802f896:	e7e4      	b.n	802f862 <__pow5mult+0x3e>
 802f898:	4638      	mov	r0, r7
 802f89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802f89e:	bf00      	nop
 802f8a0:	08031270 	.word	0x08031270

0802f8a4 <__lshift>:
 802f8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802f8a8:	460c      	mov	r4, r1
 802f8aa:	4607      	mov	r7, r0
 802f8ac:	4691      	mov	r9, r2
 802f8ae:	6923      	ldr	r3, [r4, #16]
 802f8b0:	6849      	ldr	r1, [r1, #4]
 802f8b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802f8b6:	68a3      	ldr	r3, [r4, #8]
 802f8b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802f8bc:	f108 0601 	add.w	r6, r8, #1
 802f8c0:	42b3      	cmp	r3, r6
 802f8c2:	db0b      	blt.n	802f8dc <__lshift+0x38>
 802f8c4:	4638      	mov	r0, r7
 802f8c6:	f7ff fe2d 	bl	802f524 <_Balloc>
 802f8ca:	4605      	mov	r5, r0
 802f8cc:	b948      	cbnz	r0, 802f8e2 <__lshift+0x3e>
 802f8ce:	4602      	mov	r2, r0
 802f8d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 802f8d4:	4b27      	ldr	r3, [pc, #156]	; (802f974 <__lshift+0xd0>)
 802f8d6:	4828      	ldr	r0, [pc, #160]	; (802f978 <__lshift+0xd4>)
 802f8d8:	f000 fbec 	bl	80300b4 <__assert_func>
 802f8dc:	3101      	adds	r1, #1
 802f8de:	005b      	lsls	r3, r3, #1
 802f8e0:	e7ee      	b.n	802f8c0 <__lshift+0x1c>
 802f8e2:	2300      	movs	r3, #0
 802f8e4:	f100 0114 	add.w	r1, r0, #20
 802f8e8:	f100 0210 	add.w	r2, r0, #16
 802f8ec:	4618      	mov	r0, r3
 802f8ee:	4553      	cmp	r3, sl
 802f8f0:	db33      	blt.n	802f95a <__lshift+0xb6>
 802f8f2:	6920      	ldr	r0, [r4, #16]
 802f8f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802f8f8:	f104 0314 	add.w	r3, r4, #20
 802f8fc:	f019 091f 	ands.w	r9, r9, #31
 802f900:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802f904:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802f908:	d02b      	beq.n	802f962 <__lshift+0xbe>
 802f90a:	468a      	mov	sl, r1
 802f90c:	2200      	movs	r2, #0
 802f90e:	f1c9 0e20 	rsb	lr, r9, #32
 802f912:	6818      	ldr	r0, [r3, #0]
 802f914:	fa00 f009 	lsl.w	r0, r0, r9
 802f918:	4310      	orrs	r0, r2
 802f91a:	f84a 0b04 	str.w	r0, [sl], #4
 802f91e:	f853 2b04 	ldr.w	r2, [r3], #4
 802f922:	459c      	cmp	ip, r3
 802f924:	fa22 f20e 	lsr.w	r2, r2, lr
 802f928:	d8f3      	bhi.n	802f912 <__lshift+0x6e>
 802f92a:	ebac 0304 	sub.w	r3, ip, r4
 802f92e:	3b15      	subs	r3, #21
 802f930:	f023 0303 	bic.w	r3, r3, #3
 802f934:	3304      	adds	r3, #4
 802f936:	f104 0015 	add.w	r0, r4, #21
 802f93a:	4584      	cmp	ip, r0
 802f93c:	bf38      	it	cc
 802f93e:	2304      	movcc	r3, #4
 802f940:	50ca      	str	r2, [r1, r3]
 802f942:	b10a      	cbz	r2, 802f948 <__lshift+0xa4>
 802f944:	f108 0602 	add.w	r6, r8, #2
 802f948:	3e01      	subs	r6, #1
 802f94a:	4638      	mov	r0, r7
 802f94c:	4621      	mov	r1, r4
 802f94e:	612e      	str	r6, [r5, #16]
 802f950:	f7ff fe0d 	bl	802f56e <_Bfree>
 802f954:	4628      	mov	r0, r5
 802f956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f95a:	f842 0f04 	str.w	r0, [r2, #4]!
 802f95e:	3301      	adds	r3, #1
 802f960:	e7c5      	b.n	802f8ee <__lshift+0x4a>
 802f962:	3904      	subs	r1, #4
 802f964:	f853 2b04 	ldr.w	r2, [r3], #4
 802f968:	459c      	cmp	ip, r3
 802f96a:	f841 2f04 	str.w	r2, [r1, #4]!
 802f96e:	d8f9      	bhi.n	802f964 <__lshift+0xc0>
 802f970:	e7ea      	b.n	802f948 <__lshift+0xa4>
 802f972:	bf00      	nop
 802f974:	080310b9 	.word	0x080310b9
 802f978:	08031122 	.word	0x08031122

0802f97c <__mcmp>:
 802f97c:	4603      	mov	r3, r0
 802f97e:	690a      	ldr	r2, [r1, #16]
 802f980:	6900      	ldr	r0, [r0, #16]
 802f982:	b530      	push	{r4, r5, lr}
 802f984:	1a80      	subs	r0, r0, r2
 802f986:	d10d      	bne.n	802f9a4 <__mcmp+0x28>
 802f988:	3314      	adds	r3, #20
 802f98a:	3114      	adds	r1, #20
 802f98c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802f990:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802f994:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802f998:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802f99c:	4295      	cmp	r5, r2
 802f99e:	d002      	beq.n	802f9a6 <__mcmp+0x2a>
 802f9a0:	d304      	bcc.n	802f9ac <__mcmp+0x30>
 802f9a2:	2001      	movs	r0, #1
 802f9a4:	bd30      	pop	{r4, r5, pc}
 802f9a6:	42a3      	cmp	r3, r4
 802f9a8:	d3f4      	bcc.n	802f994 <__mcmp+0x18>
 802f9aa:	e7fb      	b.n	802f9a4 <__mcmp+0x28>
 802f9ac:	f04f 30ff 	mov.w	r0, #4294967295
 802f9b0:	e7f8      	b.n	802f9a4 <__mcmp+0x28>
	...

0802f9b4 <__mdiff>:
 802f9b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f9b8:	460d      	mov	r5, r1
 802f9ba:	4607      	mov	r7, r0
 802f9bc:	4611      	mov	r1, r2
 802f9be:	4628      	mov	r0, r5
 802f9c0:	4614      	mov	r4, r2
 802f9c2:	f7ff ffdb 	bl	802f97c <__mcmp>
 802f9c6:	1e06      	subs	r6, r0, #0
 802f9c8:	d111      	bne.n	802f9ee <__mdiff+0x3a>
 802f9ca:	4631      	mov	r1, r6
 802f9cc:	4638      	mov	r0, r7
 802f9ce:	f7ff fda9 	bl	802f524 <_Balloc>
 802f9d2:	4602      	mov	r2, r0
 802f9d4:	b928      	cbnz	r0, 802f9e2 <__mdiff+0x2e>
 802f9d6:	f240 2137 	movw	r1, #567	; 0x237
 802f9da:	4b3a      	ldr	r3, [pc, #232]	; (802fac4 <__mdiff+0x110>)
 802f9dc:	483a      	ldr	r0, [pc, #232]	; (802fac8 <__mdiff+0x114>)
 802f9de:	f000 fb69 	bl	80300b4 <__assert_func>
 802f9e2:	2301      	movs	r3, #1
 802f9e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 802f9e8:	4610      	mov	r0, r2
 802f9ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f9ee:	bfa4      	itt	ge
 802f9f0:	4623      	movge	r3, r4
 802f9f2:	462c      	movge	r4, r5
 802f9f4:	4638      	mov	r0, r7
 802f9f6:	6861      	ldr	r1, [r4, #4]
 802f9f8:	bfa6      	itte	ge
 802f9fa:	461d      	movge	r5, r3
 802f9fc:	2600      	movge	r6, #0
 802f9fe:	2601      	movlt	r6, #1
 802fa00:	f7ff fd90 	bl	802f524 <_Balloc>
 802fa04:	4602      	mov	r2, r0
 802fa06:	b918      	cbnz	r0, 802fa10 <__mdiff+0x5c>
 802fa08:	f240 2145 	movw	r1, #581	; 0x245
 802fa0c:	4b2d      	ldr	r3, [pc, #180]	; (802fac4 <__mdiff+0x110>)
 802fa0e:	e7e5      	b.n	802f9dc <__mdiff+0x28>
 802fa10:	f102 0814 	add.w	r8, r2, #20
 802fa14:	46c2      	mov	sl, r8
 802fa16:	f04f 0c00 	mov.w	ip, #0
 802fa1a:	6927      	ldr	r7, [r4, #16]
 802fa1c:	60c6      	str	r6, [r0, #12]
 802fa1e:	692e      	ldr	r6, [r5, #16]
 802fa20:	f104 0014 	add.w	r0, r4, #20
 802fa24:	f105 0914 	add.w	r9, r5, #20
 802fa28:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 802fa2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802fa30:	3410      	adds	r4, #16
 802fa32:	f854 bf04 	ldr.w	fp, [r4, #4]!
 802fa36:	f859 3b04 	ldr.w	r3, [r9], #4
 802fa3a:	fa1f f18b 	uxth.w	r1, fp
 802fa3e:	4461      	add	r1, ip
 802fa40:	fa1f fc83 	uxth.w	ip, r3
 802fa44:	0c1b      	lsrs	r3, r3, #16
 802fa46:	eba1 010c 	sub.w	r1, r1, ip
 802fa4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802fa4e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 802fa52:	b289      	uxth	r1, r1
 802fa54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 802fa58:	454e      	cmp	r6, r9
 802fa5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 802fa5e:	f84a 1b04 	str.w	r1, [sl], #4
 802fa62:	d8e6      	bhi.n	802fa32 <__mdiff+0x7e>
 802fa64:	1b73      	subs	r3, r6, r5
 802fa66:	3b15      	subs	r3, #21
 802fa68:	f023 0303 	bic.w	r3, r3, #3
 802fa6c:	3515      	adds	r5, #21
 802fa6e:	3304      	adds	r3, #4
 802fa70:	42ae      	cmp	r6, r5
 802fa72:	bf38      	it	cc
 802fa74:	2304      	movcc	r3, #4
 802fa76:	4418      	add	r0, r3
 802fa78:	4443      	add	r3, r8
 802fa7a:	461e      	mov	r6, r3
 802fa7c:	4605      	mov	r5, r0
 802fa7e:	4575      	cmp	r5, lr
 802fa80:	d30e      	bcc.n	802faa0 <__mdiff+0xec>
 802fa82:	f10e 0103 	add.w	r1, lr, #3
 802fa86:	1a09      	subs	r1, r1, r0
 802fa88:	f021 0103 	bic.w	r1, r1, #3
 802fa8c:	3803      	subs	r0, #3
 802fa8e:	4586      	cmp	lr, r0
 802fa90:	bf38      	it	cc
 802fa92:	2100      	movcc	r1, #0
 802fa94:	440b      	add	r3, r1
 802fa96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802fa9a:	b189      	cbz	r1, 802fac0 <__mdiff+0x10c>
 802fa9c:	6117      	str	r7, [r2, #16]
 802fa9e:	e7a3      	b.n	802f9e8 <__mdiff+0x34>
 802faa0:	f855 8b04 	ldr.w	r8, [r5], #4
 802faa4:	fa1f f188 	uxth.w	r1, r8
 802faa8:	4461      	add	r1, ip
 802faaa:	140c      	asrs	r4, r1, #16
 802faac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802fab0:	b289      	uxth	r1, r1
 802fab2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802fab6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 802faba:	f846 1b04 	str.w	r1, [r6], #4
 802fabe:	e7de      	b.n	802fa7e <__mdiff+0xca>
 802fac0:	3f01      	subs	r7, #1
 802fac2:	e7e8      	b.n	802fa96 <__mdiff+0xe2>
 802fac4:	080310b9 	.word	0x080310b9
 802fac8:	08031122 	.word	0x08031122

0802facc <__d2b>:
 802facc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802face:	2101      	movs	r1, #1
 802fad0:	4617      	mov	r7, r2
 802fad2:	461c      	mov	r4, r3
 802fad4:	9e08      	ldr	r6, [sp, #32]
 802fad6:	f7ff fd25 	bl	802f524 <_Balloc>
 802fada:	4605      	mov	r5, r0
 802fadc:	b930      	cbnz	r0, 802faec <__d2b+0x20>
 802fade:	4602      	mov	r2, r0
 802fae0:	f240 310f 	movw	r1, #783	; 0x30f
 802fae4:	4b22      	ldr	r3, [pc, #136]	; (802fb70 <__d2b+0xa4>)
 802fae6:	4823      	ldr	r0, [pc, #140]	; (802fb74 <__d2b+0xa8>)
 802fae8:	f000 fae4 	bl	80300b4 <__assert_func>
 802faec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 802faf0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 802faf4:	bb24      	cbnz	r4, 802fb40 <__d2b+0x74>
 802faf6:	2f00      	cmp	r7, #0
 802faf8:	9301      	str	r3, [sp, #4]
 802fafa:	d026      	beq.n	802fb4a <__d2b+0x7e>
 802fafc:	4668      	mov	r0, sp
 802fafe:	9700      	str	r7, [sp, #0]
 802fb00:	f7ff fda4 	bl	802f64c <__lo0bits>
 802fb04:	e9dd 1200 	ldrd	r1, r2, [sp]
 802fb08:	b1e8      	cbz	r0, 802fb46 <__d2b+0x7a>
 802fb0a:	f1c0 0320 	rsb	r3, r0, #32
 802fb0e:	fa02 f303 	lsl.w	r3, r2, r3
 802fb12:	430b      	orrs	r3, r1
 802fb14:	40c2      	lsrs	r2, r0
 802fb16:	616b      	str	r3, [r5, #20]
 802fb18:	9201      	str	r2, [sp, #4]
 802fb1a:	9b01      	ldr	r3, [sp, #4]
 802fb1c:	2b00      	cmp	r3, #0
 802fb1e:	bf14      	ite	ne
 802fb20:	2102      	movne	r1, #2
 802fb22:	2101      	moveq	r1, #1
 802fb24:	61ab      	str	r3, [r5, #24]
 802fb26:	6129      	str	r1, [r5, #16]
 802fb28:	b1bc      	cbz	r4, 802fb5a <__d2b+0x8e>
 802fb2a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 802fb2e:	4404      	add	r4, r0
 802fb30:	6034      	str	r4, [r6, #0]
 802fb32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802fb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fb38:	6018      	str	r0, [r3, #0]
 802fb3a:	4628      	mov	r0, r5
 802fb3c:	b003      	add	sp, #12
 802fb3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802fb40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802fb44:	e7d7      	b.n	802faf6 <__d2b+0x2a>
 802fb46:	6169      	str	r1, [r5, #20]
 802fb48:	e7e7      	b.n	802fb1a <__d2b+0x4e>
 802fb4a:	a801      	add	r0, sp, #4
 802fb4c:	f7ff fd7e 	bl	802f64c <__lo0bits>
 802fb50:	9b01      	ldr	r3, [sp, #4]
 802fb52:	2101      	movs	r1, #1
 802fb54:	616b      	str	r3, [r5, #20]
 802fb56:	3020      	adds	r0, #32
 802fb58:	e7e5      	b.n	802fb26 <__d2b+0x5a>
 802fb5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802fb5e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 802fb62:	6030      	str	r0, [r6, #0]
 802fb64:	6918      	ldr	r0, [r3, #16]
 802fb66:	f7ff fd51 	bl	802f60c <__hi0bits>
 802fb6a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 802fb6e:	e7e2      	b.n	802fb36 <__d2b+0x6a>
 802fb70:	080310b9 	.word	0x080310b9
 802fb74:	08031122 	.word	0x08031122

0802fb78 <_realloc_r>:
 802fb78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fb7c:	460c      	mov	r4, r1
 802fb7e:	4682      	mov	sl, r0
 802fb80:	4611      	mov	r1, r2
 802fb82:	b924      	cbnz	r4, 802fb8e <_realloc_r+0x16>
 802fb84:	b003      	add	sp, #12
 802fb86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fb8a:	f7fc b8c5 	b.w	802bd18 <_malloc_r>
 802fb8e:	9201      	str	r2, [sp, #4]
 802fb90:	f7fc fafc 	bl	802c18c <__malloc_lock>
 802fb94:	9901      	ldr	r1, [sp, #4]
 802fb96:	f854 5c04 	ldr.w	r5, [r4, #-4]
 802fb9a:	f101 080b 	add.w	r8, r1, #11
 802fb9e:	f1b8 0f16 	cmp.w	r8, #22
 802fba2:	d90b      	bls.n	802fbbc <_realloc_r+0x44>
 802fba4:	f038 0807 	bics.w	r8, r8, #7
 802fba8:	d50a      	bpl.n	802fbc0 <_realloc_r+0x48>
 802fbaa:	230c      	movs	r3, #12
 802fbac:	f04f 0b00 	mov.w	fp, #0
 802fbb0:	f8ca 3000 	str.w	r3, [sl]
 802fbb4:	4658      	mov	r0, fp
 802fbb6:	b003      	add	sp, #12
 802fbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fbbc:	f04f 0810 	mov.w	r8, #16
 802fbc0:	4588      	cmp	r8, r1
 802fbc2:	d3f2      	bcc.n	802fbaa <_realloc_r+0x32>
 802fbc4:	f025 0603 	bic.w	r6, r5, #3
 802fbc8:	45b0      	cmp	r8, r6
 802fbca:	f1a4 0908 	sub.w	r9, r4, #8
 802fbce:	f340 8173 	ble.w	802feb8 <_realloc_r+0x340>
 802fbd2:	4a9d      	ldr	r2, [pc, #628]	; (802fe48 <_realloc_r+0x2d0>)
 802fbd4:	eb09 0306 	add.w	r3, r9, r6
 802fbd8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 802fbdc:	685a      	ldr	r2, [r3, #4]
 802fbde:	459c      	cmp	ip, r3
 802fbe0:	d005      	beq.n	802fbee <_realloc_r+0x76>
 802fbe2:	f022 0001 	bic.w	r0, r2, #1
 802fbe6:	4418      	add	r0, r3
 802fbe8:	6840      	ldr	r0, [r0, #4]
 802fbea:	07c7      	lsls	r7, r0, #31
 802fbec:	d447      	bmi.n	802fc7e <_realloc_r+0x106>
 802fbee:	f022 0203 	bic.w	r2, r2, #3
 802fbf2:	459c      	cmp	ip, r3
 802fbf4:	eb06 0702 	add.w	r7, r6, r2
 802fbf8:	d119      	bne.n	802fc2e <_realloc_r+0xb6>
 802fbfa:	f108 0010 	add.w	r0, r8, #16
 802fbfe:	42b8      	cmp	r0, r7
 802fc00:	dc3f      	bgt.n	802fc82 <_realloc_r+0x10a>
 802fc02:	4a91      	ldr	r2, [pc, #580]	; (802fe48 <_realloc_r+0x2d0>)
 802fc04:	eba7 0708 	sub.w	r7, r7, r8
 802fc08:	eb09 0308 	add.w	r3, r9, r8
 802fc0c:	f047 0701 	orr.w	r7, r7, #1
 802fc10:	6093      	str	r3, [r2, #8]
 802fc12:	605f      	str	r7, [r3, #4]
 802fc14:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802fc18:	4650      	mov	r0, sl
 802fc1a:	f003 0301 	and.w	r3, r3, #1
 802fc1e:	ea43 0308 	orr.w	r3, r3, r8
 802fc22:	f844 3c04 	str.w	r3, [r4, #-4]
 802fc26:	f7fc fab7 	bl	802c198 <__malloc_unlock>
 802fc2a:	46a3      	mov	fp, r4
 802fc2c:	e7c2      	b.n	802fbb4 <_realloc_r+0x3c>
 802fc2e:	45b8      	cmp	r8, r7
 802fc30:	dc27      	bgt.n	802fc82 <_realloc_r+0x10a>
 802fc32:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 802fc36:	60da      	str	r2, [r3, #12]
 802fc38:	6093      	str	r3, [r2, #8]
 802fc3a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802fc3e:	eba7 0008 	sub.w	r0, r7, r8
 802fc42:	280f      	cmp	r0, #15
 802fc44:	f003 0301 	and.w	r3, r3, #1
 802fc48:	eb09 0207 	add.w	r2, r9, r7
 802fc4c:	f240 8136 	bls.w	802febc <_realloc_r+0x344>
 802fc50:	eb09 0108 	add.w	r1, r9, r8
 802fc54:	ea48 0303 	orr.w	r3, r8, r3
 802fc58:	f040 0001 	orr.w	r0, r0, #1
 802fc5c:	f8c9 3004 	str.w	r3, [r9, #4]
 802fc60:	6048      	str	r0, [r1, #4]
 802fc62:	6853      	ldr	r3, [r2, #4]
 802fc64:	4650      	mov	r0, sl
 802fc66:	f043 0301 	orr.w	r3, r3, #1
 802fc6a:	6053      	str	r3, [r2, #4]
 802fc6c:	3108      	adds	r1, #8
 802fc6e:	f7fb ff93 	bl	802bb98 <_free_r>
 802fc72:	4650      	mov	r0, sl
 802fc74:	f7fc fa90 	bl	802c198 <__malloc_unlock>
 802fc78:	f109 0b08 	add.w	fp, r9, #8
 802fc7c:	e79a      	b.n	802fbb4 <_realloc_r+0x3c>
 802fc7e:	2200      	movs	r2, #0
 802fc80:	4613      	mov	r3, r2
 802fc82:	07e8      	lsls	r0, r5, #31
 802fc84:	f100 80c9 	bmi.w	802fe1a <_realloc_r+0x2a2>
 802fc88:	f854 5c08 	ldr.w	r5, [r4, #-8]
 802fc8c:	eba9 0505 	sub.w	r5, r9, r5
 802fc90:	6868      	ldr	r0, [r5, #4]
 802fc92:	f020 0003 	bic.w	r0, r0, #3
 802fc96:	eb00 0b06 	add.w	fp, r0, r6
 802fc9a:	2b00      	cmp	r3, #0
 802fc9c:	f000 8088 	beq.w	802fdb0 <_realloc_r+0x238>
 802fca0:	459c      	cmp	ip, r3
 802fca2:	eb02 070b 	add.w	r7, r2, fp
 802fca6:	d14a      	bne.n	802fd3e <_realloc_r+0x1c6>
 802fca8:	f108 0310 	add.w	r3, r8, #16
 802fcac:	42bb      	cmp	r3, r7
 802fcae:	dc7f      	bgt.n	802fdb0 <_realloc_r+0x238>
 802fcb0:	46ab      	mov	fp, r5
 802fcb2:	68eb      	ldr	r3, [r5, #12]
 802fcb4:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 802fcb8:	60d3      	str	r3, [r2, #12]
 802fcba:	609a      	str	r2, [r3, #8]
 802fcbc:	1f32      	subs	r2, r6, #4
 802fcbe:	2a24      	cmp	r2, #36	; 0x24
 802fcc0:	d838      	bhi.n	802fd34 <_realloc_r+0x1bc>
 802fcc2:	2a13      	cmp	r2, #19
 802fcc4:	d934      	bls.n	802fd30 <_realloc_r+0x1b8>
 802fcc6:	6823      	ldr	r3, [r4, #0]
 802fcc8:	2a1b      	cmp	r2, #27
 802fcca:	60ab      	str	r3, [r5, #8]
 802fccc:	6863      	ldr	r3, [r4, #4]
 802fcce:	60eb      	str	r3, [r5, #12]
 802fcd0:	d81b      	bhi.n	802fd0a <_realloc_r+0x192>
 802fcd2:	3408      	adds	r4, #8
 802fcd4:	f105 0310 	add.w	r3, r5, #16
 802fcd8:	6822      	ldr	r2, [r4, #0]
 802fcda:	601a      	str	r2, [r3, #0]
 802fcdc:	6862      	ldr	r2, [r4, #4]
 802fcde:	605a      	str	r2, [r3, #4]
 802fce0:	68a2      	ldr	r2, [r4, #8]
 802fce2:	609a      	str	r2, [r3, #8]
 802fce4:	4a58      	ldr	r2, [pc, #352]	; (802fe48 <_realloc_r+0x2d0>)
 802fce6:	eba7 0708 	sub.w	r7, r7, r8
 802fcea:	eb05 0308 	add.w	r3, r5, r8
 802fcee:	f047 0701 	orr.w	r7, r7, #1
 802fcf2:	6093      	str	r3, [r2, #8]
 802fcf4:	605f      	str	r7, [r3, #4]
 802fcf6:	686b      	ldr	r3, [r5, #4]
 802fcf8:	f003 0301 	and.w	r3, r3, #1
 802fcfc:	ea43 0308 	orr.w	r3, r3, r8
 802fd00:	606b      	str	r3, [r5, #4]
 802fd02:	4650      	mov	r0, sl
 802fd04:	f7fc fa48 	bl	802c198 <__malloc_unlock>
 802fd08:	e754      	b.n	802fbb4 <_realloc_r+0x3c>
 802fd0a:	68a3      	ldr	r3, [r4, #8]
 802fd0c:	2a24      	cmp	r2, #36	; 0x24
 802fd0e:	612b      	str	r3, [r5, #16]
 802fd10:	68e3      	ldr	r3, [r4, #12]
 802fd12:	bf18      	it	ne
 802fd14:	3410      	addne	r4, #16
 802fd16:	616b      	str	r3, [r5, #20]
 802fd18:	bf09      	itett	eq
 802fd1a:	6923      	ldreq	r3, [r4, #16]
 802fd1c:	f105 0318 	addne.w	r3, r5, #24
 802fd20:	61ab      	streq	r3, [r5, #24]
 802fd22:	6962      	ldreq	r2, [r4, #20]
 802fd24:	bf02      	ittt	eq
 802fd26:	f105 0320 	addeq.w	r3, r5, #32
 802fd2a:	61ea      	streq	r2, [r5, #28]
 802fd2c:	3418      	addeq	r4, #24
 802fd2e:	e7d3      	b.n	802fcd8 <_realloc_r+0x160>
 802fd30:	465b      	mov	r3, fp
 802fd32:	e7d1      	b.n	802fcd8 <_realloc_r+0x160>
 802fd34:	4621      	mov	r1, r4
 802fd36:	4658      	mov	r0, fp
 802fd38:	f7fe fca4 	bl	802e684 <memmove>
 802fd3c:	e7d2      	b.n	802fce4 <_realloc_r+0x16c>
 802fd3e:	45b8      	cmp	r8, r7
 802fd40:	dc36      	bgt.n	802fdb0 <_realloc_r+0x238>
 802fd42:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 802fd46:	4628      	mov	r0, r5
 802fd48:	60da      	str	r2, [r3, #12]
 802fd4a:	6093      	str	r3, [r2, #8]
 802fd4c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802fd50:	68eb      	ldr	r3, [r5, #12]
 802fd52:	60d3      	str	r3, [r2, #12]
 802fd54:	609a      	str	r2, [r3, #8]
 802fd56:	1f32      	subs	r2, r6, #4
 802fd58:	2a24      	cmp	r2, #36	; 0x24
 802fd5a:	d825      	bhi.n	802fda8 <_realloc_r+0x230>
 802fd5c:	2a13      	cmp	r2, #19
 802fd5e:	d908      	bls.n	802fd72 <_realloc_r+0x1fa>
 802fd60:	6823      	ldr	r3, [r4, #0]
 802fd62:	2a1b      	cmp	r2, #27
 802fd64:	60ab      	str	r3, [r5, #8]
 802fd66:	6863      	ldr	r3, [r4, #4]
 802fd68:	60eb      	str	r3, [r5, #12]
 802fd6a:	d80a      	bhi.n	802fd82 <_realloc_r+0x20a>
 802fd6c:	3408      	adds	r4, #8
 802fd6e:	f105 0010 	add.w	r0, r5, #16
 802fd72:	6823      	ldr	r3, [r4, #0]
 802fd74:	6003      	str	r3, [r0, #0]
 802fd76:	6863      	ldr	r3, [r4, #4]
 802fd78:	6043      	str	r3, [r0, #4]
 802fd7a:	68a3      	ldr	r3, [r4, #8]
 802fd7c:	6083      	str	r3, [r0, #8]
 802fd7e:	46a9      	mov	r9, r5
 802fd80:	e75b      	b.n	802fc3a <_realloc_r+0xc2>
 802fd82:	68a3      	ldr	r3, [r4, #8]
 802fd84:	2a24      	cmp	r2, #36	; 0x24
 802fd86:	612b      	str	r3, [r5, #16]
 802fd88:	68e3      	ldr	r3, [r4, #12]
 802fd8a:	bf18      	it	ne
 802fd8c:	f105 0018 	addne.w	r0, r5, #24
 802fd90:	616b      	str	r3, [r5, #20]
 802fd92:	bf09      	itett	eq
 802fd94:	6923      	ldreq	r3, [r4, #16]
 802fd96:	3410      	addne	r4, #16
 802fd98:	61ab      	streq	r3, [r5, #24]
 802fd9a:	6963      	ldreq	r3, [r4, #20]
 802fd9c:	bf02      	ittt	eq
 802fd9e:	f105 0020 	addeq.w	r0, r5, #32
 802fda2:	61eb      	streq	r3, [r5, #28]
 802fda4:	3418      	addeq	r4, #24
 802fda6:	e7e4      	b.n	802fd72 <_realloc_r+0x1fa>
 802fda8:	4621      	mov	r1, r4
 802fdaa:	f7fe fc6b 	bl	802e684 <memmove>
 802fdae:	e7e6      	b.n	802fd7e <_realloc_r+0x206>
 802fdb0:	45d8      	cmp	r8, fp
 802fdb2:	dc32      	bgt.n	802fe1a <_realloc_r+0x2a2>
 802fdb4:	4628      	mov	r0, r5
 802fdb6:	68eb      	ldr	r3, [r5, #12]
 802fdb8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802fdbc:	60d3      	str	r3, [r2, #12]
 802fdbe:	609a      	str	r2, [r3, #8]
 802fdc0:	1f32      	subs	r2, r6, #4
 802fdc2:	2a24      	cmp	r2, #36	; 0x24
 802fdc4:	d825      	bhi.n	802fe12 <_realloc_r+0x29a>
 802fdc6:	2a13      	cmp	r2, #19
 802fdc8:	d908      	bls.n	802fddc <_realloc_r+0x264>
 802fdca:	6823      	ldr	r3, [r4, #0]
 802fdcc:	2a1b      	cmp	r2, #27
 802fdce:	60ab      	str	r3, [r5, #8]
 802fdd0:	6863      	ldr	r3, [r4, #4]
 802fdd2:	60eb      	str	r3, [r5, #12]
 802fdd4:	d80a      	bhi.n	802fdec <_realloc_r+0x274>
 802fdd6:	3408      	adds	r4, #8
 802fdd8:	f105 0010 	add.w	r0, r5, #16
 802fddc:	6823      	ldr	r3, [r4, #0]
 802fdde:	6003      	str	r3, [r0, #0]
 802fde0:	6863      	ldr	r3, [r4, #4]
 802fde2:	6043      	str	r3, [r0, #4]
 802fde4:	68a3      	ldr	r3, [r4, #8]
 802fde6:	6083      	str	r3, [r0, #8]
 802fde8:	465f      	mov	r7, fp
 802fdea:	e7c8      	b.n	802fd7e <_realloc_r+0x206>
 802fdec:	68a3      	ldr	r3, [r4, #8]
 802fdee:	2a24      	cmp	r2, #36	; 0x24
 802fdf0:	612b      	str	r3, [r5, #16]
 802fdf2:	68e3      	ldr	r3, [r4, #12]
 802fdf4:	bf18      	it	ne
 802fdf6:	f105 0018 	addne.w	r0, r5, #24
 802fdfa:	616b      	str	r3, [r5, #20]
 802fdfc:	bf09      	itett	eq
 802fdfe:	6923      	ldreq	r3, [r4, #16]
 802fe00:	3410      	addne	r4, #16
 802fe02:	61ab      	streq	r3, [r5, #24]
 802fe04:	6963      	ldreq	r3, [r4, #20]
 802fe06:	bf02      	ittt	eq
 802fe08:	f105 0020 	addeq.w	r0, r5, #32
 802fe0c:	61eb      	streq	r3, [r5, #28]
 802fe0e:	3418      	addeq	r4, #24
 802fe10:	e7e4      	b.n	802fddc <_realloc_r+0x264>
 802fe12:	4621      	mov	r1, r4
 802fe14:	f7fe fc36 	bl	802e684 <memmove>
 802fe18:	e7e6      	b.n	802fde8 <_realloc_r+0x270>
 802fe1a:	4650      	mov	r0, sl
 802fe1c:	f7fb ff7c 	bl	802bd18 <_malloc_r>
 802fe20:	4683      	mov	fp, r0
 802fe22:	2800      	cmp	r0, #0
 802fe24:	f43f af6d 	beq.w	802fd02 <_realloc_r+0x18a>
 802fe28:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802fe2c:	f1a0 0208 	sub.w	r2, r0, #8
 802fe30:	f023 0301 	bic.w	r3, r3, #1
 802fe34:	444b      	add	r3, r9
 802fe36:	4293      	cmp	r3, r2
 802fe38:	d108      	bne.n	802fe4c <_realloc_r+0x2d4>
 802fe3a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 802fe3e:	f027 0703 	bic.w	r7, r7, #3
 802fe42:	4437      	add	r7, r6
 802fe44:	e6f9      	b.n	802fc3a <_realloc_r+0xc2>
 802fe46:	bf00      	nop
 802fe48:	20000340 	.word	0x20000340
 802fe4c:	1f32      	subs	r2, r6, #4
 802fe4e:	2a24      	cmp	r2, #36	; 0x24
 802fe50:	d82e      	bhi.n	802feb0 <_realloc_r+0x338>
 802fe52:	2a13      	cmp	r2, #19
 802fe54:	d929      	bls.n	802feaa <_realloc_r+0x332>
 802fe56:	6823      	ldr	r3, [r4, #0]
 802fe58:	2a1b      	cmp	r2, #27
 802fe5a:	6003      	str	r3, [r0, #0]
 802fe5c:	6863      	ldr	r3, [r4, #4]
 802fe5e:	6043      	str	r3, [r0, #4]
 802fe60:	d80e      	bhi.n	802fe80 <_realloc_r+0x308>
 802fe62:	f104 0208 	add.w	r2, r4, #8
 802fe66:	f100 0308 	add.w	r3, r0, #8
 802fe6a:	6811      	ldr	r1, [r2, #0]
 802fe6c:	6019      	str	r1, [r3, #0]
 802fe6e:	6851      	ldr	r1, [r2, #4]
 802fe70:	6059      	str	r1, [r3, #4]
 802fe72:	6892      	ldr	r2, [r2, #8]
 802fe74:	609a      	str	r2, [r3, #8]
 802fe76:	4621      	mov	r1, r4
 802fe78:	4650      	mov	r0, sl
 802fe7a:	f7fb fe8d 	bl	802bb98 <_free_r>
 802fe7e:	e740      	b.n	802fd02 <_realloc_r+0x18a>
 802fe80:	68a3      	ldr	r3, [r4, #8]
 802fe82:	2a24      	cmp	r2, #36	; 0x24
 802fe84:	6083      	str	r3, [r0, #8]
 802fe86:	68e3      	ldr	r3, [r4, #12]
 802fe88:	bf18      	it	ne
 802fe8a:	f104 0210 	addne.w	r2, r4, #16
 802fe8e:	60c3      	str	r3, [r0, #12]
 802fe90:	bf09      	itett	eq
 802fe92:	6923      	ldreq	r3, [r4, #16]
 802fe94:	f100 0310 	addne.w	r3, r0, #16
 802fe98:	6103      	streq	r3, [r0, #16]
 802fe9a:	6961      	ldreq	r1, [r4, #20]
 802fe9c:	bf02      	ittt	eq
 802fe9e:	f104 0218 	addeq.w	r2, r4, #24
 802fea2:	f100 0318 	addeq.w	r3, r0, #24
 802fea6:	6141      	streq	r1, [r0, #20]
 802fea8:	e7df      	b.n	802fe6a <_realloc_r+0x2f2>
 802feaa:	4603      	mov	r3, r0
 802feac:	4622      	mov	r2, r4
 802feae:	e7dc      	b.n	802fe6a <_realloc_r+0x2f2>
 802feb0:	4621      	mov	r1, r4
 802feb2:	f7fe fbe7 	bl	802e684 <memmove>
 802feb6:	e7de      	b.n	802fe76 <_realloc_r+0x2fe>
 802feb8:	4637      	mov	r7, r6
 802feba:	e6be      	b.n	802fc3a <_realloc_r+0xc2>
 802febc:	431f      	orrs	r7, r3
 802febe:	f8c9 7004 	str.w	r7, [r9, #4]
 802fec2:	6853      	ldr	r3, [r2, #4]
 802fec4:	f043 0301 	orr.w	r3, r3, #1
 802fec8:	6053      	str	r3, [r2, #4]
 802feca:	e6d2      	b.n	802fc72 <_realloc_r+0xfa>

0802fecc <__ascii_wctomb>:
 802fecc:	4603      	mov	r3, r0
 802fece:	4608      	mov	r0, r1
 802fed0:	b141      	cbz	r1, 802fee4 <__ascii_wctomb+0x18>
 802fed2:	2aff      	cmp	r2, #255	; 0xff
 802fed4:	d904      	bls.n	802fee0 <__ascii_wctomb+0x14>
 802fed6:	228a      	movs	r2, #138	; 0x8a
 802fed8:	f04f 30ff 	mov.w	r0, #4294967295
 802fedc:	601a      	str	r2, [r3, #0]
 802fede:	4770      	bx	lr
 802fee0:	2001      	movs	r0, #1
 802fee2:	700a      	strb	r2, [r1, #0]
 802fee4:	4770      	bx	lr
	...

0802fee8 <_wcrtomb_r>:
 802fee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802feea:	4c09      	ldr	r4, [pc, #36]	; (802ff10 <_wcrtomb_r+0x28>)
 802feec:	4605      	mov	r5, r0
 802feee:	461e      	mov	r6, r3
 802fef0:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 802fef4:	b085      	sub	sp, #20
 802fef6:	b909      	cbnz	r1, 802fefc <_wcrtomb_r+0x14>
 802fef8:	460a      	mov	r2, r1
 802fefa:	a901      	add	r1, sp, #4
 802fefc:	47b8      	blx	r7
 802fefe:	1c43      	adds	r3, r0, #1
 802ff00:	bf01      	itttt	eq
 802ff02:	2300      	moveq	r3, #0
 802ff04:	6033      	streq	r3, [r6, #0]
 802ff06:	238a      	moveq	r3, #138	; 0x8a
 802ff08:	602b      	streq	r3, [r5, #0]
 802ff0a:	b005      	add	sp, #20
 802ff0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ff0e:	bf00      	nop
 802ff10:	20000750 	.word	0x20000750

0802ff14 <__swhatbuf_r>:
 802ff14:	b570      	push	{r4, r5, r6, lr}
 802ff16:	460c      	mov	r4, r1
 802ff18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ff1c:	4615      	mov	r5, r2
 802ff1e:	2900      	cmp	r1, #0
 802ff20:	461e      	mov	r6, r3
 802ff22:	b096      	sub	sp, #88	; 0x58
 802ff24:	da07      	bge.n	802ff36 <__swhatbuf_r+0x22>
 802ff26:	89a1      	ldrh	r1, [r4, #12]
 802ff28:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 802ff2c:	d017      	beq.n	802ff5e <__swhatbuf_r+0x4a>
 802ff2e:	2100      	movs	r1, #0
 802ff30:	2340      	movs	r3, #64	; 0x40
 802ff32:	4608      	mov	r0, r1
 802ff34:	e00f      	b.n	802ff56 <__swhatbuf_r+0x42>
 802ff36:	466a      	mov	r2, sp
 802ff38:	f000 f89a 	bl	8030070 <_fstat_r>
 802ff3c:	2800      	cmp	r0, #0
 802ff3e:	dbf2      	blt.n	802ff26 <__swhatbuf_r+0x12>
 802ff40:	9901      	ldr	r1, [sp, #4]
 802ff42:	f44f 6000 	mov.w	r0, #2048	; 0x800
 802ff46:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802ff4a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802ff4e:	4259      	negs	r1, r3
 802ff50:	4159      	adcs	r1, r3
 802ff52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802ff56:	6031      	str	r1, [r6, #0]
 802ff58:	602b      	str	r3, [r5, #0]
 802ff5a:	b016      	add	sp, #88	; 0x58
 802ff5c:	bd70      	pop	{r4, r5, r6, pc}
 802ff5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802ff62:	e7e6      	b.n	802ff32 <__swhatbuf_r+0x1e>

0802ff64 <__smakebuf_r>:
 802ff64:	898b      	ldrh	r3, [r1, #12]
 802ff66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802ff68:	079d      	lsls	r5, r3, #30
 802ff6a:	4606      	mov	r6, r0
 802ff6c:	460c      	mov	r4, r1
 802ff6e:	d507      	bpl.n	802ff80 <__smakebuf_r+0x1c>
 802ff70:	f104 0343 	add.w	r3, r4, #67	; 0x43
 802ff74:	6023      	str	r3, [r4, #0]
 802ff76:	6123      	str	r3, [r4, #16]
 802ff78:	2301      	movs	r3, #1
 802ff7a:	6163      	str	r3, [r4, #20]
 802ff7c:	b002      	add	sp, #8
 802ff7e:	bd70      	pop	{r4, r5, r6, pc}
 802ff80:	466a      	mov	r2, sp
 802ff82:	ab01      	add	r3, sp, #4
 802ff84:	f7ff ffc6 	bl	802ff14 <__swhatbuf_r>
 802ff88:	9900      	ldr	r1, [sp, #0]
 802ff8a:	4605      	mov	r5, r0
 802ff8c:	4630      	mov	r0, r6
 802ff8e:	f7fb fec3 	bl	802bd18 <_malloc_r>
 802ff92:	b948      	cbnz	r0, 802ffa8 <__smakebuf_r+0x44>
 802ff94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ff98:	059a      	lsls	r2, r3, #22
 802ff9a:	d4ef      	bmi.n	802ff7c <__smakebuf_r+0x18>
 802ff9c:	f023 0303 	bic.w	r3, r3, #3
 802ffa0:	f043 0302 	orr.w	r3, r3, #2
 802ffa4:	81a3      	strh	r3, [r4, #12]
 802ffa6:	e7e3      	b.n	802ff70 <__smakebuf_r+0xc>
 802ffa8:	89a3      	ldrh	r3, [r4, #12]
 802ffaa:	6020      	str	r0, [r4, #0]
 802ffac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ffb0:	81a3      	strh	r3, [r4, #12]
 802ffb2:	9b00      	ldr	r3, [sp, #0]
 802ffb4:	6120      	str	r0, [r4, #16]
 802ffb6:	6163      	str	r3, [r4, #20]
 802ffb8:	9b01      	ldr	r3, [sp, #4]
 802ffba:	b15b      	cbz	r3, 802ffd4 <__smakebuf_r+0x70>
 802ffbc:	4630      	mov	r0, r6
 802ffbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ffc2:	f000 f867 	bl	8030094 <_isatty_r>
 802ffc6:	b128      	cbz	r0, 802ffd4 <__smakebuf_r+0x70>
 802ffc8:	89a3      	ldrh	r3, [r4, #12]
 802ffca:	f023 0303 	bic.w	r3, r3, #3
 802ffce:	f043 0301 	orr.w	r3, r3, #1
 802ffd2:	81a3      	strh	r3, [r4, #12]
 802ffd4:	89a3      	ldrh	r3, [r4, #12]
 802ffd6:	431d      	orrs	r5, r3
 802ffd8:	81a5      	strh	r5, [r4, #12]
 802ffda:	e7cf      	b.n	802ff7c <__smakebuf_r+0x18>

0802ffdc <__swbuf_r>:
 802ffdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ffde:	460e      	mov	r6, r1
 802ffe0:	4614      	mov	r4, r2
 802ffe2:	4605      	mov	r5, r0
 802ffe4:	b118      	cbz	r0, 802ffee <__swbuf_r+0x12>
 802ffe6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 802ffe8:	b90b      	cbnz	r3, 802ffee <__swbuf_r+0x12>
 802ffea:	f7fb fc0d 	bl	802b808 <__sinit>
 802ffee:	69a3      	ldr	r3, [r4, #24]
 802fff0:	60a3      	str	r3, [r4, #8]
 802fff2:	89a3      	ldrh	r3, [r4, #12]
 802fff4:	0719      	lsls	r1, r3, #28
 802fff6:	d529      	bpl.n	803004c <__swbuf_r+0x70>
 802fff8:	6923      	ldr	r3, [r4, #16]
 802fffa:	b33b      	cbz	r3, 803004c <__swbuf_r+0x70>
 802fffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030000:	b2f6      	uxtb	r6, r6
 8030002:	049a      	lsls	r2, r3, #18
 8030004:	4637      	mov	r7, r6
 8030006:	d52a      	bpl.n	803005e <__swbuf_r+0x82>
 8030008:	6823      	ldr	r3, [r4, #0]
 803000a:	6922      	ldr	r2, [r4, #16]
 803000c:	1a98      	subs	r0, r3, r2
 803000e:	6963      	ldr	r3, [r4, #20]
 8030010:	4283      	cmp	r3, r0
 8030012:	dc04      	bgt.n	803001e <__swbuf_r+0x42>
 8030014:	4621      	mov	r1, r4
 8030016:	4628      	mov	r0, r5
 8030018:	f7fe f902 	bl	802e220 <_fflush_r>
 803001c:	b9e0      	cbnz	r0, 8030058 <__swbuf_r+0x7c>
 803001e:	68a3      	ldr	r3, [r4, #8]
 8030020:	3b01      	subs	r3, #1
 8030022:	60a3      	str	r3, [r4, #8]
 8030024:	6823      	ldr	r3, [r4, #0]
 8030026:	1c5a      	adds	r2, r3, #1
 8030028:	6022      	str	r2, [r4, #0]
 803002a:	701e      	strb	r6, [r3, #0]
 803002c:	6962      	ldr	r2, [r4, #20]
 803002e:	1c43      	adds	r3, r0, #1
 8030030:	429a      	cmp	r2, r3
 8030032:	d004      	beq.n	803003e <__swbuf_r+0x62>
 8030034:	89a3      	ldrh	r3, [r4, #12]
 8030036:	07db      	lsls	r3, r3, #31
 8030038:	d506      	bpl.n	8030048 <__swbuf_r+0x6c>
 803003a:	2e0a      	cmp	r6, #10
 803003c:	d104      	bne.n	8030048 <__swbuf_r+0x6c>
 803003e:	4621      	mov	r1, r4
 8030040:	4628      	mov	r0, r5
 8030042:	f7fe f8ed 	bl	802e220 <_fflush_r>
 8030046:	b938      	cbnz	r0, 8030058 <__swbuf_r+0x7c>
 8030048:	4638      	mov	r0, r7
 803004a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803004c:	4621      	mov	r1, r4
 803004e:	4628      	mov	r0, r5
 8030050:	f7fe fa56 	bl	802e500 <__swsetup_r>
 8030054:	2800      	cmp	r0, #0
 8030056:	d0d1      	beq.n	802fffc <__swbuf_r+0x20>
 8030058:	f04f 37ff 	mov.w	r7, #4294967295
 803005c:	e7f4      	b.n	8030048 <__swbuf_r+0x6c>
 803005e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8030062:	81a3      	strh	r3, [r4, #12]
 8030064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 803006a:	6663      	str	r3, [r4, #100]	; 0x64
 803006c:	e7cc      	b.n	8030008 <__swbuf_r+0x2c>
	...

08030070 <_fstat_r>:
 8030070:	b538      	push	{r3, r4, r5, lr}
 8030072:	2300      	movs	r3, #0
 8030074:	4d06      	ldr	r5, [pc, #24]	; (8030090 <_fstat_r+0x20>)
 8030076:	4604      	mov	r4, r0
 8030078:	4608      	mov	r0, r1
 803007a:	4611      	mov	r1, r2
 803007c:	602b      	str	r3, [r5, #0]
 803007e:	f7f5 ff70 	bl	8025f62 <_fstat>
 8030082:	1c43      	adds	r3, r0, #1
 8030084:	d102      	bne.n	803008c <_fstat_r+0x1c>
 8030086:	682b      	ldr	r3, [r5, #0]
 8030088:	b103      	cbz	r3, 803008c <_fstat_r+0x1c>
 803008a:	6023      	str	r3, [r4, #0]
 803008c:	bd38      	pop	{r3, r4, r5, pc}
 803008e:	bf00      	nop
 8030090:	20006b14 	.word	0x20006b14

08030094 <_isatty_r>:
 8030094:	b538      	push	{r3, r4, r5, lr}
 8030096:	2300      	movs	r3, #0
 8030098:	4d05      	ldr	r5, [pc, #20]	; (80300b0 <_isatty_r+0x1c>)
 803009a:	4604      	mov	r4, r0
 803009c:	4608      	mov	r0, r1
 803009e:	602b      	str	r3, [r5, #0]
 80300a0:	f7f5 ff64 	bl	8025f6c <_isatty>
 80300a4:	1c43      	adds	r3, r0, #1
 80300a6:	d102      	bne.n	80300ae <_isatty_r+0x1a>
 80300a8:	682b      	ldr	r3, [r5, #0]
 80300aa:	b103      	cbz	r3, 80300ae <_isatty_r+0x1a>
 80300ac:	6023      	str	r3, [r4, #0]
 80300ae:	bd38      	pop	{r3, r4, r5, pc}
 80300b0:	20006b14 	.word	0x20006b14

080300b4 <__assert_func>:
 80300b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80300b6:	4614      	mov	r4, r2
 80300b8:	461a      	mov	r2, r3
 80300ba:	4b09      	ldr	r3, [pc, #36]	; (80300e0 <__assert_func+0x2c>)
 80300bc:	4605      	mov	r5, r0
 80300be:	681b      	ldr	r3, [r3, #0]
 80300c0:	68d8      	ldr	r0, [r3, #12]
 80300c2:	b14c      	cbz	r4, 80300d8 <__assert_func+0x24>
 80300c4:	4b07      	ldr	r3, [pc, #28]	; (80300e4 <__assert_func+0x30>)
 80300c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80300ca:	9100      	str	r1, [sp, #0]
 80300cc:	462b      	mov	r3, r5
 80300ce:	4906      	ldr	r1, [pc, #24]	; (80300e8 <__assert_func+0x34>)
 80300d0:	f000 f844 	bl	803015c <fiprintf>
 80300d4:	f000 f854 	bl	8030180 <abort>
 80300d8:	4b04      	ldr	r3, [pc, #16]	; (80300ec <__assert_func+0x38>)
 80300da:	461c      	mov	r4, r3
 80300dc:	e7f3      	b.n	80300c6 <__assert_func+0x12>
 80300de:	bf00      	nop
 80300e0:	20000338 	.word	0x20000338
 80300e4:	0803137d 	.word	0x0803137d
 80300e8:	0803138a 	.word	0x0803138a
 80300ec:	080313b8 	.word	0x080313b8

080300f0 <_calloc_r>:
 80300f0:	b538      	push	{r3, r4, r5, lr}
 80300f2:	fba1 1502 	umull	r1, r5, r1, r2
 80300f6:	b92d      	cbnz	r5, 8030104 <_calloc_r+0x14>
 80300f8:	f7fb fe0e 	bl	802bd18 <_malloc_r>
 80300fc:	4604      	mov	r4, r0
 80300fe:	b938      	cbnz	r0, 8030110 <_calloc_r+0x20>
 8030100:	4620      	mov	r0, r4
 8030102:	bd38      	pop	{r3, r4, r5, pc}
 8030104:	f7fb fca8 	bl	802ba58 <__errno>
 8030108:	230c      	movs	r3, #12
 803010a:	2400      	movs	r4, #0
 803010c:	6003      	str	r3, [r0, #0]
 803010e:	e7f7      	b.n	8030100 <_calloc_r+0x10>
 8030110:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8030114:	f022 0203 	bic.w	r2, r2, #3
 8030118:	3a04      	subs	r2, #4
 803011a:	2a24      	cmp	r2, #36	; 0x24
 803011c:	d819      	bhi.n	8030152 <_calloc_r+0x62>
 803011e:	2a13      	cmp	r2, #19
 8030120:	d915      	bls.n	803014e <_calloc_r+0x5e>
 8030122:	2a1b      	cmp	r2, #27
 8030124:	e9c0 5500 	strd	r5, r5, [r0]
 8030128:	d806      	bhi.n	8030138 <_calloc_r+0x48>
 803012a:	f100 0308 	add.w	r3, r0, #8
 803012e:	2200      	movs	r2, #0
 8030130:	e9c3 2200 	strd	r2, r2, [r3]
 8030134:	609a      	str	r2, [r3, #8]
 8030136:	e7e3      	b.n	8030100 <_calloc_r+0x10>
 8030138:	2a24      	cmp	r2, #36	; 0x24
 803013a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 803013e:	bf11      	iteee	ne
 8030140:	f100 0310 	addne.w	r3, r0, #16
 8030144:	6105      	streq	r5, [r0, #16]
 8030146:	f100 0318 	addeq.w	r3, r0, #24
 803014a:	6145      	streq	r5, [r0, #20]
 803014c:	e7ef      	b.n	803012e <_calloc_r+0x3e>
 803014e:	4603      	mov	r3, r0
 8030150:	e7ed      	b.n	803012e <_calloc_r+0x3e>
 8030152:	4629      	mov	r1, r5
 8030154:	f7fb fc31 	bl	802b9ba <memset>
 8030158:	e7d2      	b.n	8030100 <_calloc_r+0x10>
	...

0803015c <fiprintf>:
 803015c:	b40e      	push	{r1, r2, r3}
 803015e:	b503      	push	{r0, r1, lr}
 8030160:	4601      	mov	r1, r0
 8030162:	ab03      	add	r3, sp, #12
 8030164:	4805      	ldr	r0, [pc, #20]	; (803017c <fiprintf+0x20>)
 8030166:	f853 2b04 	ldr.w	r2, [r3], #4
 803016a:	6800      	ldr	r0, [r0, #0]
 803016c:	9301      	str	r3, [sp, #4]
 803016e:	f7fd faa7 	bl	802d6c0 <_vfiprintf_r>
 8030172:	b002      	add	sp, #8
 8030174:	f85d eb04 	ldr.w	lr, [sp], #4
 8030178:	b003      	add	sp, #12
 803017a:	4770      	bx	lr
 803017c:	20000338 	.word	0x20000338

08030180 <abort>:
 8030180:	2006      	movs	r0, #6
 8030182:	b508      	push	{r3, lr}
 8030184:	f000 f82c 	bl	80301e0 <raise>
 8030188:	2001      	movs	r0, #1
 803018a:	f7f5 fed1 	bl	8025f30 <_exit>

0803018e <_raise_r>:
 803018e:	291f      	cmp	r1, #31
 8030190:	b538      	push	{r3, r4, r5, lr}
 8030192:	4604      	mov	r4, r0
 8030194:	460d      	mov	r5, r1
 8030196:	d904      	bls.n	80301a2 <_raise_r+0x14>
 8030198:	2316      	movs	r3, #22
 803019a:	6003      	str	r3, [r0, #0]
 803019c:	f04f 30ff 	mov.w	r0, #4294967295
 80301a0:	bd38      	pop	{r3, r4, r5, pc}
 80301a2:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 80301a6:	b112      	cbz	r2, 80301ae <_raise_r+0x20>
 80301a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80301ac:	b94b      	cbnz	r3, 80301c2 <_raise_r+0x34>
 80301ae:	4620      	mov	r0, r4
 80301b0:	f000 f830 	bl	8030214 <_getpid_r>
 80301b4:	462a      	mov	r2, r5
 80301b6:	4601      	mov	r1, r0
 80301b8:	4620      	mov	r0, r4
 80301ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80301be:	f000 b817 	b.w	80301f0 <_kill_r>
 80301c2:	2b01      	cmp	r3, #1
 80301c4:	d00a      	beq.n	80301dc <_raise_r+0x4e>
 80301c6:	1c59      	adds	r1, r3, #1
 80301c8:	d103      	bne.n	80301d2 <_raise_r+0x44>
 80301ca:	2316      	movs	r3, #22
 80301cc:	6003      	str	r3, [r0, #0]
 80301ce:	2001      	movs	r0, #1
 80301d0:	e7e6      	b.n	80301a0 <_raise_r+0x12>
 80301d2:	2400      	movs	r4, #0
 80301d4:	4628      	mov	r0, r5
 80301d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80301da:	4798      	blx	r3
 80301dc:	2000      	movs	r0, #0
 80301de:	e7df      	b.n	80301a0 <_raise_r+0x12>

080301e0 <raise>:
 80301e0:	4b02      	ldr	r3, [pc, #8]	; (80301ec <raise+0xc>)
 80301e2:	4601      	mov	r1, r0
 80301e4:	6818      	ldr	r0, [r3, #0]
 80301e6:	f7ff bfd2 	b.w	803018e <_raise_r>
 80301ea:	bf00      	nop
 80301ec:	20000338 	.word	0x20000338

080301f0 <_kill_r>:
 80301f0:	b538      	push	{r3, r4, r5, lr}
 80301f2:	2300      	movs	r3, #0
 80301f4:	4d06      	ldr	r5, [pc, #24]	; (8030210 <_kill_r+0x20>)
 80301f6:	4604      	mov	r4, r0
 80301f8:	4608      	mov	r0, r1
 80301fa:	4611      	mov	r1, r2
 80301fc:	602b      	str	r3, [r5, #0]
 80301fe:	f7f5 fe8f 	bl	8025f20 <_kill>
 8030202:	1c43      	adds	r3, r0, #1
 8030204:	d102      	bne.n	803020c <_kill_r+0x1c>
 8030206:	682b      	ldr	r3, [r5, #0]
 8030208:	b103      	cbz	r3, 803020c <_kill_r+0x1c>
 803020a:	6023      	str	r3, [r4, #0]
 803020c:	bd38      	pop	{r3, r4, r5, pc}
 803020e:	bf00      	nop
 8030210:	20006b14 	.word	0x20006b14

08030214 <_getpid_r>:
 8030214:	f7f5 be82 	b.w	8025f1c <_getpid>

08030218 <_init>:
 8030218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803021a:	bf00      	nop
 803021c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803021e:	bc08      	pop	{r3}
 8030220:	469e      	mov	lr, r3
 8030222:	4770      	bx	lr

08030224 <_fini>:
 8030224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030226:	bf00      	nop
 8030228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803022a:	bc08      	pop	{r3}
 803022c:	469e      	mov	lr, r3
 803022e:	4770      	bx	lr
