
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002660  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080027f0  080027f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002870  08002870  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002870  08002870  00012870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002878  08002878  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800287c  0800287c  0001287c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001b4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008056  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000178e  00000000  00000000  00028131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000708  00000000  00000000  000298c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000549  00000000  00000000  00029fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021097  00000000  00000000  0002a511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000097b6  00000000  00000000  0004b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4179  00000000  00000000  00054d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002298  00000000  00000000  00118ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0011b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080027d8 	.word	0x080027d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080027d8 	.word	0x080027d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08c      	sub	sp, #48	; 0x30
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
 8000586:	4b51      	ldr	r3, [pc, #324]	; (80006cc <MX_GPIO_Init+0x160>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a50      	ldr	r2, [pc, #320]	; (80006cc <MX_GPIO_Init+0x160>)
 800058c:	f043 0310 	orr.w	r3, r3, #16
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b4e      	ldr	r3, [pc, #312]	; (80006cc <MX_GPIO_Init+0x160>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0310 	and.w	r3, r3, #16
 800059a:	61bb      	str	r3, [r7, #24]
 800059c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
 80005a2:	4b4a      	ldr	r3, [pc, #296]	; (80006cc <MX_GPIO_Init+0x160>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a49      	ldr	r2, [pc, #292]	; (80006cc <MX_GPIO_Init+0x160>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b47      	ldr	r3, [pc, #284]	; (80006cc <MX_GPIO_Init+0x160>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b43      	ldr	r3, [pc, #268]	; (80006cc <MX_GPIO_Init+0x160>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a42      	ldr	r2, [pc, #264]	; (80006cc <MX_GPIO_Init+0x160>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b40      	ldr	r3, [pc, #256]	; (80006cc <MX_GPIO_Init+0x160>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b3c      	ldr	r3, [pc, #240]	; (80006cc <MX_GPIO_Init+0x160>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a3b      	ldr	r2, [pc, #236]	; (80006cc <MX_GPIO_Init+0x160>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <MX_GPIO_Init+0x160>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	4b35      	ldr	r3, [pc, #212]	; (80006cc <MX_GPIO_Init+0x160>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a34      	ldr	r2, [pc, #208]	; (80006cc <MX_GPIO_Init+0x160>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b32      	ldr	r3, [pc, #200]	; (80006cc <MX_GPIO_Init+0x160>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <MX_GPIO_Init+0x160>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a2d      	ldr	r2, [pc, #180]	; (80006cc <MX_GPIO_Init+0x160>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_GPIO_Init+0x160>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800062a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800062e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000630:	2303      	movs	r3, #3
 8000632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	4824      	ldr	r0, [pc, #144]	; (80006d0 <MX_GPIO_Init+0x164>)
 8000640:	f000 fba6 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000648:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064a:	2303      	movs	r3, #3
 800064c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	4619      	mov	r1, r3
 8000658:	481e      	ldr	r0, [pc, #120]	; (80006d4 <MX_GPIO_Init+0x168>)
 800065a:	f000 fb99 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800065e:	2303      	movs	r3, #3
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	4819      	ldr	r0, [pc, #100]	; (80006d8 <MX_GPIO_Init+0x16c>)
 8000672:	f000 fb8d 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000676:	f649 13ff 	movw	r3, #39423	; 0x99ff
 800067a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067c:	2303      	movs	r3, #3
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <MX_GPIO_Init+0x170>)
 800068c:	f000 fb80 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000694:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	480e      	ldr	r0, [pc, #56]	; (80006e0 <MX_GPIO_Init+0x174>)
 80006a6:	f000 fb73 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80006aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b0:	2303      	movs	r3, #3
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <MX_GPIO_Init+0x178>)
 80006c0:	f000 fb66 	bl	8000d90 <HAL_GPIO_Init>

}
 80006c4:	bf00      	nop
 80006c6:	3730      	adds	r7, #48	; 0x30
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40021c00 	.word	0x40021c00
 80006dc:	40020000 	.word	0x40020000
 80006e0:	40020400 	.word	0x40020400
 80006e4:	40020c00 	.word	0x40020c00

080006e8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295
 80006fc:	68b9      	ldr	r1, [r7, #8]
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <_write+0x28>)
 8000700:	f000 fd63 	bl	80011ca <HAL_UART_Transmit>
    return len;
 8000704:	687b      	ldr	r3, [r7, #4]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000088 	.word	0x20000088

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  app_func_t app;
  uint32_t jump_addr, vt_offset, sp_addr;
  volatile config_t *config = (config_t *)BOOT_DATA_ADDRESS;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <main+0x88>)
 800071c:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071e:	f000 f9df 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f7ff ff23 	bl	800056c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000726:	f000 f93f 	bl	80009a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf(VERSION);
 800072a:	481d      	ldr	r0, [pc, #116]	; (80007a0 <main+0x8c>)
 800072c:	f001 f9ea 	bl	8001b04 <puts>

  printf("Start application: ");
 8000730:	481c      	ldr	r0, [pc, #112]	; (80007a4 <main+0x90>)
 8000732:	f001 f981 	bl	8001a38 <iprintf>
  /* Jump to user application */
  if (!config->active_image) {
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10c      	bne.n	800075a <main+0x46>
      printf(" 0\r\n");
 8000740:	4819      	ldr	r0, [pc, #100]	; (80007a8 <main+0x94>)
 8000742:	f001 f9df 	bl	8001b04 <puts>
      vt_offset = APP1_ADDRESS_OFFSET;
 8000746:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800074a:	613b      	str	r3, [r7, #16]
      jump_addr = *(__IO uint32_t *)(APP1_ADDRESS + 4);
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <main+0x98>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	617b      	str	r3, [r7, #20]
      sp_addr = *(__IO uint32_t *)APP1_ADDRESS;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <main+0x9c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	e00b      	b.n	8000772 <main+0x5e>
  } else {
      printf(" 1\r\n");
 800075a:	4816      	ldr	r0, [pc, #88]	; (80007b4 <main+0xa0>)
 800075c:	f001 f9d2 	bl	8001b04 <puts>
      vt_offset = APP2_ADDRESS_OFFSET;
 8000760:	f44f 3308 	mov.w	r3, #139264	; 0x22000
 8000764:	613b      	str	r3, [r7, #16]
      jump_addr = *(__IO uint32_t *)(APP2_ADDRESS + 4);
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <main+0xa4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	617b      	str	r3, [r7, #20]
      sp_addr = *(__IO uint32_t *)APP2_ADDRESS;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <main+0xa8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	60fb      	str	r3, [r7, #12]
  }

  // Relocate the vector table
  SCB->VTOR = FLASH_BASE | vt_offset;
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <main+0xac>)
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800077a:	6093      	str	r3, [r2, #8]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	f383 8808 	msr	MSP, r3
}
 8000786:	bf00      	nop

  // Set the stack pointer
  __set_MSP(sp_addr);
  // Jump to the application
  app = (app_func_t)jump_addr;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	607b      	str	r3, [r7, #4]
  app();
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4798      	blx	r3

  return 0;
 8000790:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 8000792:	4618      	mov	r0, r3
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08003800 	.word	0x08003800
 80007a0:	080027f0 	.word	0x080027f0
 80007a4:	08002818 	.word	0x08002818
 80007a8:	0800282c 	.word	0x0800282c
 80007ac:	08004004 	.word	0x08004004
 80007b0:	08004000 	.word	0x08004000
 80007b4:	08002830 	.word	0x08002830
 80007b8:	08022004 	.word	0x08022004
 80007bc:	08022000 	.word	0x08022000
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <HAL_MspInit+0x4c>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_MspInit+0x4c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 f98a 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	e00a      	b.n	800089c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000886:	f3af 8000 	nop.w
 800088a:	4601      	mov	r1, r0
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	60ba      	str	r2, [r7, #8]
 8000892:	b2ca      	uxtb	r2, r1
 8000894:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	3301      	adds	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	dbf0      	blt.n	8000886 <_read+0x12>
  }

  return len;
 80008a4:	687b      	ldr	r3, [r7, #4]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008d6:	605a      	str	r2, [r3, #4]
  return 0;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_isatty>:

int _isatty(int file)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000920:	4a14      	ldr	r2, [pc, #80]	; (8000974 <_sbrk+0x5c>)
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <_sbrk+0x60>)
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <_sbrk+0x64>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <_sbrk+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d207      	bcs.n	8000958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000948:	f001 fa0a 	bl	8001d60 <__errno>
 800094c:	4603      	mov	r3, r0
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	e009      	b.n	800096c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <_sbrk+0x64>)
 8000968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000c000 	.word	0x2000c000
 8000978:	00000400 	.word	0x00000400
 800097c:	20000084 	.word	0x20000084
 8000980:	20000220 	.word	0x20000220

08000984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART1_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f000 fba6 	bl	8001130 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f7ff feeb 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000088 	.word	0x20000088
 80009f8:	40011000 	.word	0x40011000

080009fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <HAL_UART_MspInit+0x84>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d12c      	bne.n	8000a78 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <HAL_UART_MspInit+0x8c>)
 8000a74:	f000 f98c 	bl	8000d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40011000 	.word	0x40011000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a90:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a92:	490e      	ldr	r1, [pc, #56]	; (8000acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a94:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa8:	4c0b      	ldr	r4, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ab6:	f7ff ff65 	bl	8000984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aba:	f001 f957 	bl	8001d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000abe:	f7ff fe29 	bl	8000714 <main>
  bx  lr    
 8000ac2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ac4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ad0:	08002880 	.word	0x08002880
  ldr r2, =_sbss
 8000ad4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ad8:	2000021c 	.word	0x2000021c

08000adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <HAL_Init+0x40>)
 8000aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_Init+0x40>)
 8000af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_Init+0x40>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f90d 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	200f      	movs	r0, #15
 8000b10:	f000 f808 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff fe5c 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023c00 	.word	0x40023c00

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f917 	bl	8000d76 <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f8ed 	bl	8000d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000004 	.word	0x20000004

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	200000cc 	.word	0x200000cc

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200000cc 	.word	0x200000cc

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff47 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff5c 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff8e 	bl	8000c7c <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5d 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffb0 	bl	8000ce4 <SysTick_Config>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	e16b      	b.n	8001084 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f040 815a 	bne.w	800107e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d005      	beq.n	8000de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d130      	bne.n	8000e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	091b      	lsrs	r3, r3, #4
 8000e2e:	f003 0201 	and.w	r2, r3, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d017      	beq.n	8000e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d123      	bne.n	8000ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	69b9      	ldr	r1, [r7, #24]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80b4 	beq.w	800107e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b60      	ldr	r3, [pc, #384]	; (800109c <HAL_GPIO_Init+0x30c>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a5f      	ldr	r2, [pc, #380]	; (800109c <HAL_GPIO_Init+0x30c>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b5d      	ldr	r3, [pc, #372]	; (800109c <HAL_GPIO_Init+0x30c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f32:	4a5b      	ldr	r2, [pc, #364]	; (80010a0 <HAL_GPIO_Init+0x310>)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a52      	ldr	r2, [pc, #328]	; (80010a4 <HAL_GPIO_Init+0x314>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d02b      	beq.n	8000fb6 <HAL_GPIO_Init+0x226>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a51      	ldr	r2, [pc, #324]	; (80010a8 <HAL_GPIO_Init+0x318>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d025      	beq.n	8000fb2 <HAL_GPIO_Init+0x222>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a50      	ldr	r2, [pc, #320]	; (80010ac <HAL_GPIO_Init+0x31c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d01f      	beq.n	8000fae <HAL_GPIO_Init+0x21e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4f      	ldr	r2, [pc, #316]	; (80010b0 <HAL_GPIO_Init+0x320>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d019      	beq.n	8000faa <HAL_GPIO_Init+0x21a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4e      	ldr	r2, [pc, #312]	; (80010b4 <HAL_GPIO_Init+0x324>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0x216>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4d      	ldr	r2, [pc, #308]	; (80010b8 <HAL_GPIO_Init+0x328>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00d      	beq.n	8000fa2 <HAL_GPIO_Init+0x212>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4c      	ldr	r2, [pc, #304]	; (80010bc <HAL_GPIO_Init+0x32c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d007      	beq.n	8000f9e <HAL_GPIO_Init+0x20e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4b      	ldr	r2, [pc, #300]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_GPIO_Init+0x20a>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e00e      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	e00c      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e00a      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc8:	4935      	ldr	r1, [pc, #212]	; (80010a0 <HAL_GPIO_Init+0x310>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffa:	4a32      	ldr	r2, [pc, #200]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001000:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <HAL_GPIO_Init+0x334>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104e:	4a1d      	ldr	r2, [pc, #116]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001078:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <HAL_GPIO_Init+0x334>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	f67f ae90 	bls.w	8000dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40021400 	.word	0x40021400
 80010bc:	40021800 	.word	0x40021800
 80010c0:	40021c00 	.word	0x40021c00
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_RCC_GetHCLKFreq+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000000 	.word	0x20000000

080010e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80010e4:	f7ff fff0 	bl	80010c8 <HAL_RCC_GetHCLKFreq>
 80010e8:	4602      	mov	r2, r0
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	0a9b      	lsrs	r3, r3, #10
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	4903      	ldr	r1, [pc, #12]	; (8001104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010f6:	5ccb      	ldrb	r3, [r1, r3]
 80010f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	08002834 	.word	0x08002834

08001108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800110c:	f7ff ffdc 	bl	80010c8 <HAL_RCC_GetHCLKFreq>
 8001110:	4602      	mov	r2, r0
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	0b5b      	lsrs	r3, r3, #13
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	4903      	ldr	r1, [pc, #12]	; (800112c <HAL_RCC_GetPCLK2Freq+0x24>)
 800111e:	5ccb      	ldrb	r3, [r1, r3]
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001124:	4618      	mov	r0, r3
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	08002834 	.word	0x08002834

08001130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e03f      	b.n	80011c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d106      	bne.n	800115c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fc50 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f929 	bl	80013cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	695a      	ldr	r2, [r3, #20]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2220      	movs	r2, #32
 80011b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2220      	movs	r2, #32
 80011bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b08a      	sub	sp, #40	; 0x28
 80011ce:	af02      	add	r7, sp, #8
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4613      	mov	r3, r2
 80011d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b20      	cmp	r3, #32
 80011e8:	d17c      	bne.n	80012e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <HAL_UART_Transmit+0x2c>
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e075      	b.n	80012e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <HAL_UART_Transmit+0x3e>
 8001204:	2302      	movs	r3, #2
 8001206:	e06e      	b.n	80012e6 <HAL_UART_Transmit+0x11c>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2200      	movs	r2, #0
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2221      	movs	r2, #33	; 0x21
 800121a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800121e:	f7ff fcc5 	bl	8000bac <HAL_GetTick>
 8001222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	88fa      	ldrh	r2, [r7, #6]
 8001228:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	88fa      	ldrh	r2, [r7, #6]
 800122e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001238:	d108      	bne.n	800124c <HAL_UART_Transmit+0x82>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d104      	bne.n	800124c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	e003      	b.n	8001254 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800125c:	e02a      	b.n	80012b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2200      	movs	r2, #0
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f000 f840 	bl	80012ee <UART_WaitOnFlagUntilTimeout>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e036      	b.n	80012e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10b      	bne.n	8001296 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800128c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	3302      	adds	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	e007      	b.n	80012a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	3301      	adds	r3, #1
 80012a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	3b01      	subs	r3, #1
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1cf      	bne.n	800125e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	2200      	movs	r2, #0
 80012c6:	2140      	movs	r1, #64	; 0x40
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 f810 	bl	80012ee <UART_WaitOnFlagUntilTimeout>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e006      	b.n	80012e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2220      	movs	r2, #32
 80012dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e000      	b.n	80012e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80012e4:	2302      	movs	r3, #2
  }
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b090      	sub	sp, #64	; 0x40
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4613      	mov	r3, r2
 80012fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012fe:	e050      	b.n	80013a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001306:	d04c      	beq.n	80013a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <UART_WaitOnFlagUntilTimeout+0x30>
 800130e:	f7ff fc4d 	bl	8000bac <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800131a:	429a      	cmp	r2, r3
 800131c:	d241      	bcs.n	80013a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	330c      	adds	r3, #12
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001328:	e853 3f00 	ldrex	r3, [r3]
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	330c      	adds	r3, #12
 800133c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800133e:	637a      	str	r2, [r7, #52]	; 0x34
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001346:	e841 2300 	strex	r3, r2, [r1]
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1e5      	bne.n	800131e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3314      	adds	r3, #20
 8001358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	e853 3f00 	ldrex	r3, [r3]
 8001360:	613b      	str	r3, [r7, #16]
   return(result);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	63bb      	str	r3, [r7, #56]	; 0x38
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3314      	adds	r3, #20
 8001370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001372:	623a      	str	r2, [r7, #32]
 8001374:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001376:	69f9      	ldr	r1, [r7, #28]
 8001378:	6a3a      	ldr	r2, [r7, #32]
 800137a:	e841 2300 	strex	r3, r2, [r1]
 800137e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1e5      	bne.n	8001352 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2220      	movs	r2, #32
 800138a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2220      	movs	r2, #32
 8001392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e00f      	b.n	80013c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4013      	ands	r3, r2
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	bf0c      	ite	eq
 80013b2:	2301      	moveq	r3, #1
 80013b4:	2300      	movne	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d09f      	beq.n	8001300 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3740      	adds	r7, #64	; 0x40
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d0:	b0c0      	sub	sp, #256	; 0x100
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80013e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013e8:	68d9      	ldr	r1, [r3, #12]
 80013ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	ea40 0301 	orr.w	r3, r0, r1
 80013f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	431a      	orrs	r2, r3
 8001404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	431a      	orrs	r2, r3
 800140c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4313      	orrs	r3, r2
 8001414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001424:	f021 010c 	bic.w	r1, r1, #12
 8001428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001432:	430b      	orrs	r3, r1
 8001434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001446:	6999      	ldr	r1, [r3, #24]
 8001448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	ea40 0301 	orr.w	r3, r0, r1
 8001452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b8f      	ldr	r3, [pc, #572]	; (8001698 <UART_SetConfig+0x2cc>)
 800145c:	429a      	cmp	r2, r3
 800145e:	d005      	beq.n	800146c <UART_SetConfig+0xa0>
 8001460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4b8d      	ldr	r3, [pc, #564]	; (800169c <UART_SetConfig+0x2d0>)
 8001468:	429a      	cmp	r2, r3
 800146a:	d104      	bne.n	8001476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800146c:	f7ff fe4c 	bl	8001108 <HAL_RCC_GetPCLK2Freq>
 8001470:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001474:	e003      	b.n	800147e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001476:	f7ff fe33 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 800147a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800147e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001488:	f040 810c 	bne.w	80016a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800148c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001490:	2200      	movs	r2, #0
 8001492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001496:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800149a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800149e:	4622      	mov	r2, r4
 80014a0:	462b      	mov	r3, r5
 80014a2:	1891      	adds	r1, r2, r2
 80014a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80014a6:	415b      	adcs	r3, r3
 80014a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014ae:	4621      	mov	r1, r4
 80014b0:	eb12 0801 	adds.w	r8, r2, r1
 80014b4:	4629      	mov	r1, r5
 80014b6:	eb43 0901 	adc.w	r9, r3, r1
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014ce:	4690      	mov	r8, r2
 80014d0:	4699      	mov	r9, r3
 80014d2:	4623      	mov	r3, r4
 80014d4:	eb18 0303 	adds.w	r3, r8, r3
 80014d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80014dc:	462b      	mov	r3, r5
 80014de:	eb49 0303 	adc.w	r3, r9, r3
 80014e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80014e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80014f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80014f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80014fa:	460b      	mov	r3, r1
 80014fc:	18db      	adds	r3, r3, r3
 80014fe:	653b      	str	r3, [r7, #80]	; 0x50
 8001500:	4613      	mov	r3, r2
 8001502:	eb42 0303 	adc.w	r3, r2, r3
 8001506:	657b      	str	r3, [r7, #84]	; 0x54
 8001508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800150c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001510:	f7fe feae 	bl	8000270 <__aeabi_uldivmod>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4b61      	ldr	r3, [pc, #388]	; (80016a0 <UART_SetConfig+0x2d4>)
 800151a:	fba3 2302 	umull	r2, r3, r3, r2
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	011c      	lsls	r4, r3, #4
 8001522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001526:	2200      	movs	r2, #0
 8001528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800152c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001534:	4642      	mov	r2, r8
 8001536:	464b      	mov	r3, r9
 8001538:	1891      	adds	r1, r2, r2
 800153a:	64b9      	str	r1, [r7, #72]	; 0x48
 800153c:	415b      	adcs	r3, r3
 800153e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001544:	4641      	mov	r1, r8
 8001546:	eb12 0a01 	adds.w	sl, r2, r1
 800154a:	4649      	mov	r1, r9
 800154c:	eb43 0b01 	adc.w	fp, r3, r1
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800155c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001564:	4692      	mov	sl, r2
 8001566:	469b      	mov	fp, r3
 8001568:	4643      	mov	r3, r8
 800156a:	eb1a 0303 	adds.w	r3, sl, r3
 800156e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001572:	464b      	mov	r3, r9
 8001574:	eb4b 0303 	adc.w	r3, fp, r3
 8001578:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800157c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001588:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800158c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001590:	460b      	mov	r3, r1
 8001592:	18db      	adds	r3, r3, r3
 8001594:	643b      	str	r3, [r7, #64]	; 0x40
 8001596:	4613      	mov	r3, r2
 8001598:	eb42 0303 	adc.w	r3, r2, r3
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
 800159e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80015a6:	f7fe fe63 	bl	8000270 <__aeabi_uldivmod>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <UART_SetConfig+0x2d4>)
 80015b2:	fba3 2301 	umull	r2, r3, r3, r1
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2264      	movs	r2, #100	; 0x64
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	1acb      	subs	r3, r1, r3
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80015c6:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <UART_SetConfig+0x2d4>)
 80015c8:	fba3 2302 	umull	r2, r3, r3, r2
 80015cc:	095b      	lsrs	r3, r3, #5
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80015d4:	441c      	add	r4, r3
 80015d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015da:	2200      	movs	r2, #0
 80015dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80015e8:	4642      	mov	r2, r8
 80015ea:	464b      	mov	r3, r9
 80015ec:	1891      	adds	r1, r2, r2
 80015ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80015f0:	415b      	adcs	r3, r3
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015f8:	4641      	mov	r1, r8
 80015fa:	1851      	adds	r1, r2, r1
 80015fc:	6339      	str	r1, [r7, #48]	; 0x30
 80015fe:	4649      	mov	r1, r9
 8001600:	414b      	adcs	r3, r1
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001610:	4659      	mov	r1, fp
 8001612:	00cb      	lsls	r3, r1, #3
 8001614:	4651      	mov	r1, sl
 8001616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800161a:	4651      	mov	r1, sl
 800161c:	00ca      	lsls	r2, r1, #3
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	4603      	mov	r3, r0
 8001624:	4642      	mov	r2, r8
 8001626:	189b      	adds	r3, r3, r2
 8001628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800162c:	464b      	mov	r3, r9
 800162e:	460a      	mov	r2, r1
 8001630:	eb42 0303 	adc.w	r3, r2, r3
 8001634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001644:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800164c:	460b      	mov	r3, r1
 800164e:	18db      	adds	r3, r3, r3
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
 8001652:	4613      	mov	r3, r2
 8001654:	eb42 0303 	adc.w	r3, r2, r3
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800165e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001662:	f7fe fe05 	bl	8000270 <__aeabi_uldivmod>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <UART_SetConfig+0x2d4>)
 800166c:	fba3 1302 	umull	r1, r3, r3, r2
 8001670:	095b      	lsrs	r3, r3, #5
 8001672:	2164      	movs	r1, #100	; 0x64
 8001674:	fb01 f303 	mul.w	r3, r1, r3
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	3332      	adds	r3, #50	; 0x32
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <UART_SetConfig+0x2d4>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	095b      	lsrs	r3, r3, #5
 8001686:	f003 0207 	and.w	r2, r3, #7
 800168a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4422      	add	r2, r4
 8001692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001694:	e106      	b.n	80018a4 <UART_SetConfig+0x4d8>
 8001696:	bf00      	nop
 8001698:	40011000 	.word	0x40011000
 800169c:	40011400 	.word	0x40011400
 80016a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016a8:	2200      	movs	r2, #0
 80016aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016b6:	4642      	mov	r2, r8
 80016b8:	464b      	mov	r3, r9
 80016ba:	1891      	adds	r1, r2, r2
 80016bc:	6239      	str	r1, [r7, #32]
 80016be:	415b      	adcs	r3, r3
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
 80016c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016c6:	4641      	mov	r1, r8
 80016c8:	1854      	adds	r4, r2, r1
 80016ca:	4649      	mov	r1, r9
 80016cc:	eb43 0501 	adc.w	r5, r3, r1
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	00eb      	lsls	r3, r5, #3
 80016da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016de:	00e2      	lsls	r2, r4, #3
 80016e0:	4614      	mov	r4, r2
 80016e2:	461d      	mov	r5, r3
 80016e4:	4643      	mov	r3, r8
 80016e6:	18e3      	adds	r3, r4, r3
 80016e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016ec:	464b      	mov	r3, r9
 80016ee:	eb45 0303 	adc.w	r3, r5, r3
 80016f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80016f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001702:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001712:	4629      	mov	r1, r5
 8001714:	008b      	lsls	r3, r1, #2
 8001716:	4621      	mov	r1, r4
 8001718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800171c:	4621      	mov	r1, r4
 800171e:	008a      	lsls	r2, r1, #2
 8001720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001724:	f7fe fda4 	bl	8000270 <__aeabi_uldivmod>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4b60      	ldr	r3, [pc, #384]	; (80018b0 <UART_SetConfig+0x4e4>)
 800172e:	fba3 2302 	umull	r2, r3, r3, r2
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	011c      	lsls	r4, r3, #4
 8001736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800173a:	2200      	movs	r2, #0
 800173c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001740:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001748:	4642      	mov	r2, r8
 800174a:	464b      	mov	r3, r9
 800174c:	1891      	adds	r1, r2, r2
 800174e:	61b9      	str	r1, [r7, #24]
 8001750:	415b      	adcs	r3, r3
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001758:	4641      	mov	r1, r8
 800175a:	1851      	adds	r1, r2, r1
 800175c:	6139      	str	r1, [r7, #16]
 800175e:	4649      	mov	r1, r9
 8001760:	414b      	adcs	r3, r1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001770:	4659      	mov	r1, fp
 8001772:	00cb      	lsls	r3, r1, #3
 8001774:	4651      	mov	r1, sl
 8001776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800177a:	4651      	mov	r1, sl
 800177c:	00ca      	lsls	r2, r1, #3
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	4603      	mov	r3, r0
 8001784:	4642      	mov	r2, r8
 8001786:	189b      	adds	r3, r3, r2
 8001788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800178c:	464b      	mov	r3, r9
 800178e:	460a      	mov	r2, r1
 8001790:	eb42 0303 	adc.w	r3, r2, r3
 8001794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80017a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80017b0:	4649      	mov	r1, r9
 80017b2:	008b      	lsls	r3, r1, #2
 80017b4:	4641      	mov	r1, r8
 80017b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017ba:	4641      	mov	r1, r8
 80017bc:	008a      	lsls	r2, r1, #2
 80017be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80017c2:	f7fe fd55 	bl	8000270 <__aeabi_uldivmod>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4611      	mov	r1, r2
 80017cc:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <UART_SetConfig+0x4e4>)
 80017ce:	fba3 2301 	umull	r2, r3, r3, r1
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2264      	movs	r2, #100	; 0x64
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	1acb      	subs	r3, r1, r3
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	3332      	adds	r3, #50	; 0x32
 80017e0:	4a33      	ldr	r2, [pc, #204]	; (80018b0 <UART_SetConfig+0x4e4>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ec:	441c      	add	r4, r3
 80017ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017f2:	2200      	movs	r2, #0
 80017f4:	673b      	str	r3, [r7, #112]	; 0x70
 80017f6:	677a      	str	r2, [r7, #116]	; 0x74
 80017f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80017fc:	4642      	mov	r2, r8
 80017fe:	464b      	mov	r3, r9
 8001800:	1891      	adds	r1, r2, r2
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	415b      	adcs	r3, r3
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800180c:	4641      	mov	r1, r8
 800180e:	1851      	adds	r1, r2, r1
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	4649      	mov	r1, r9
 8001814:	414b      	adcs	r3, r1
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001824:	4659      	mov	r1, fp
 8001826:	00cb      	lsls	r3, r1, #3
 8001828:	4651      	mov	r1, sl
 800182a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800182e:	4651      	mov	r1, sl
 8001830:	00ca      	lsls	r2, r1, #3
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	4603      	mov	r3, r0
 8001838:	4642      	mov	r2, r8
 800183a:	189b      	adds	r3, r3, r2
 800183c:	66bb      	str	r3, [r7, #104]	; 0x68
 800183e:	464b      	mov	r3, r9
 8001840:	460a      	mov	r2, r1
 8001842:	eb42 0303 	adc.w	r3, r2, r3
 8001846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	663b      	str	r3, [r7, #96]	; 0x60
 8001852:	667a      	str	r2, [r7, #100]	; 0x64
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001860:	4649      	mov	r1, r9
 8001862:	008b      	lsls	r3, r1, #2
 8001864:	4641      	mov	r1, r8
 8001866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800186a:	4641      	mov	r1, r8
 800186c:	008a      	lsls	r2, r1, #2
 800186e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001872:	f7fe fcfd 	bl	8000270 <__aeabi_uldivmod>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <UART_SetConfig+0x4e4>)
 800187c:	fba3 1302 	umull	r1, r3, r3, r2
 8001880:	095b      	lsrs	r3, r3, #5
 8001882:	2164      	movs	r1, #100	; 0x64
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	3332      	adds	r3, #50	; 0x32
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <UART_SetConfig+0x4e4>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	095b      	lsrs	r3, r3, #5
 8001896:	f003 020f 	and.w	r2, r3, #15
 800189a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4422      	add	r2, r4
 80018a2:	609a      	str	r2, [r3, #8]
}
 80018a4:	bf00      	nop
 80018a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80018aa:	46bd      	mov	sp, r7
 80018ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018b0:	51eb851f 	.word	0x51eb851f

080018b4 <std>:
 80018b4:	2300      	movs	r3, #0
 80018b6:	b510      	push	{r4, lr}
 80018b8:	4604      	mov	r4, r0
 80018ba:	e9c0 3300 	strd	r3, r3, [r0]
 80018be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018c2:	6083      	str	r3, [r0, #8]
 80018c4:	8181      	strh	r1, [r0, #12]
 80018c6:	6643      	str	r3, [r0, #100]	; 0x64
 80018c8:	81c2      	strh	r2, [r0, #14]
 80018ca:	6183      	str	r3, [r0, #24]
 80018cc:	4619      	mov	r1, r3
 80018ce:	2208      	movs	r2, #8
 80018d0:	305c      	adds	r0, #92	; 0x5c
 80018d2:	f000 f9f7 	bl	8001cc4 <memset>
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <std+0x58>)
 80018d8:	6263      	str	r3, [r4, #36]	; 0x24
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <std+0x5c>)
 80018dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <std+0x60>)
 80018e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <std+0x64>)
 80018e4:	6323      	str	r3, [r4, #48]	; 0x30
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <std+0x68>)
 80018e8:	6224      	str	r4, [r4, #32]
 80018ea:	429c      	cmp	r4, r3
 80018ec:	d006      	beq.n	80018fc <std+0x48>
 80018ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80018f2:	4294      	cmp	r4, r2
 80018f4:	d002      	beq.n	80018fc <std+0x48>
 80018f6:	33d0      	adds	r3, #208	; 0xd0
 80018f8:	429c      	cmp	r4, r3
 80018fa:	d105      	bne.n	8001908 <std+0x54>
 80018fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001904:	f000 ba56 	b.w	8001db4 <__retarget_lock_init_recursive>
 8001908:	bd10      	pop	{r4, pc}
 800190a:	bf00      	nop
 800190c:	08001b15 	.word	0x08001b15
 8001910:	08001b37 	.word	0x08001b37
 8001914:	08001b6f 	.word	0x08001b6f
 8001918:	08001b93 	.word	0x08001b93
 800191c:	200000d0 	.word	0x200000d0

08001920 <stdio_exit_handler>:
 8001920:	4a02      	ldr	r2, [pc, #8]	; (800192c <stdio_exit_handler+0xc>)
 8001922:	4903      	ldr	r1, [pc, #12]	; (8001930 <stdio_exit_handler+0x10>)
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <stdio_exit_handler+0x14>)
 8001926:	f000 b869 	b.w	80019fc <_fwalk_sglue>
 800192a:	bf00      	nop
 800192c:	2000000c 	.word	0x2000000c
 8001930:	08002661 	.word	0x08002661
 8001934:	20000018 	.word	0x20000018

08001938 <cleanup_stdio>:
 8001938:	6841      	ldr	r1, [r0, #4]
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <cleanup_stdio+0x34>)
 800193c:	4299      	cmp	r1, r3
 800193e:	b510      	push	{r4, lr}
 8001940:	4604      	mov	r4, r0
 8001942:	d001      	beq.n	8001948 <cleanup_stdio+0x10>
 8001944:	f000 fe8c 	bl	8002660 <_fflush_r>
 8001948:	68a1      	ldr	r1, [r4, #8]
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <cleanup_stdio+0x38>)
 800194c:	4299      	cmp	r1, r3
 800194e:	d002      	beq.n	8001956 <cleanup_stdio+0x1e>
 8001950:	4620      	mov	r0, r4
 8001952:	f000 fe85 	bl	8002660 <_fflush_r>
 8001956:	68e1      	ldr	r1, [r4, #12]
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <cleanup_stdio+0x3c>)
 800195a:	4299      	cmp	r1, r3
 800195c:	d004      	beq.n	8001968 <cleanup_stdio+0x30>
 800195e:	4620      	mov	r0, r4
 8001960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001964:	f000 be7c 	b.w	8002660 <_fflush_r>
 8001968:	bd10      	pop	{r4, pc}
 800196a:	bf00      	nop
 800196c:	200000d0 	.word	0x200000d0
 8001970:	20000138 	.word	0x20000138
 8001974:	200001a0 	.word	0x200001a0

08001978 <global_stdio_init.part.0>:
 8001978:	b510      	push	{r4, lr}
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <global_stdio_init.part.0+0x30>)
 800197c:	4c0b      	ldr	r4, [pc, #44]	; (80019ac <global_stdio_init.part.0+0x34>)
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <global_stdio_init.part.0+0x38>)
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	4620      	mov	r0, r4
 8001984:	2200      	movs	r2, #0
 8001986:	2104      	movs	r1, #4
 8001988:	f7ff ff94 	bl	80018b4 <std>
 800198c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001990:	2201      	movs	r2, #1
 8001992:	2109      	movs	r1, #9
 8001994:	f7ff ff8e 	bl	80018b4 <std>
 8001998:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800199c:	2202      	movs	r2, #2
 800199e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019a2:	2112      	movs	r1, #18
 80019a4:	f7ff bf86 	b.w	80018b4 <std>
 80019a8:	20000208 	.word	0x20000208
 80019ac:	200000d0 	.word	0x200000d0
 80019b0:	08001921 	.word	0x08001921

080019b4 <__sfp_lock_acquire>:
 80019b4:	4801      	ldr	r0, [pc, #4]	; (80019bc <__sfp_lock_acquire+0x8>)
 80019b6:	f000 b9fe 	b.w	8001db6 <__retarget_lock_acquire_recursive>
 80019ba:	bf00      	nop
 80019bc:	20000211 	.word	0x20000211

080019c0 <__sfp_lock_release>:
 80019c0:	4801      	ldr	r0, [pc, #4]	; (80019c8 <__sfp_lock_release+0x8>)
 80019c2:	f000 b9f9 	b.w	8001db8 <__retarget_lock_release_recursive>
 80019c6:	bf00      	nop
 80019c8:	20000211 	.word	0x20000211

080019cc <__sinit>:
 80019cc:	b510      	push	{r4, lr}
 80019ce:	4604      	mov	r4, r0
 80019d0:	f7ff fff0 	bl	80019b4 <__sfp_lock_acquire>
 80019d4:	6a23      	ldr	r3, [r4, #32]
 80019d6:	b11b      	cbz	r3, 80019e0 <__sinit+0x14>
 80019d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019dc:	f7ff bff0 	b.w	80019c0 <__sfp_lock_release>
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <__sinit+0x28>)
 80019e2:	6223      	str	r3, [r4, #32]
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__sinit+0x2c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f5      	bne.n	80019d8 <__sinit+0xc>
 80019ec:	f7ff ffc4 	bl	8001978 <global_stdio_init.part.0>
 80019f0:	e7f2      	b.n	80019d8 <__sinit+0xc>
 80019f2:	bf00      	nop
 80019f4:	08001939 	.word	0x08001939
 80019f8:	20000208 	.word	0x20000208

080019fc <_fwalk_sglue>:
 80019fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a00:	4607      	mov	r7, r0
 8001a02:	4688      	mov	r8, r1
 8001a04:	4614      	mov	r4, r2
 8001a06:	2600      	movs	r6, #0
 8001a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8001a10:	d505      	bpl.n	8001a1e <_fwalk_sglue+0x22>
 8001a12:	6824      	ldr	r4, [r4, #0]
 8001a14:	2c00      	cmp	r4, #0
 8001a16:	d1f7      	bne.n	8001a08 <_fwalk_sglue+0xc>
 8001a18:	4630      	mov	r0, r6
 8001a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a1e:	89ab      	ldrh	r3, [r5, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d907      	bls.n	8001a34 <_fwalk_sglue+0x38>
 8001a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	d003      	beq.n	8001a34 <_fwalk_sglue+0x38>
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	4638      	mov	r0, r7
 8001a30:	47c0      	blx	r8
 8001a32:	4306      	orrs	r6, r0
 8001a34:	3568      	adds	r5, #104	; 0x68
 8001a36:	e7e9      	b.n	8001a0c <_fwalk_sglue+0x10>

08001a38 <iprintf>:
 8001a38:	b40f      	push	{r0, r1, r2, r3}
 8001a3a:	b507      	push	{r0, r1, r2, lr}
 8001a3c:	4906      	ldr	r1, [pc, #24]	; (8001a58 <iprintf+0x20>)
 8001a3e:	ab04      	add	r3, sp, #16
 8001a40:	6808      	ldr	r0, [r1, #0]
 8001a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a46:	6881      	ldr	r1, [r0, #8]
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	f000 fad9 	bl	8002000 <_vfiprintf_r>
 8001a4e:	b003      	add	sp, #12
 8001a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a54:	b004      	add	sp, #16
 8001a56:	4770      	bx	lr
 8001a58:	20000064 	.word	0x20000064

08001a5c <_puts_r>:
 8001a5c:	6a03      	ldr	r3, [r0, #32]
 8001a5e:	b570      	push	{r4, r5, r6, lr}
 8001a60:	6884      	ldr	r4, [r0, #8]
 8001a62:	4605      	mov	r5, r0
 8001a64:	460e      	mov	r6, r1
 8001a66:	b90b      	cbnz	r3, 8001a6c <_puts_r+0x10>
 8001a68:	f7ff ffb0 	bl	80019cc <__sinit>
 8001a6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a6e:	07db      	lsls	r3, r3, #31
 8001a70:	d405      	bmi.n	8001a7e <_puts_r+0x22>
 8001a72:	89a3      	ldrh	r3, [r4, #12]
 8001a74:	0598      	lsls	r0, r3, #22
 8001a76:	d402      	bmi.n	8001a7e <_puts_r+0x22>
 8001a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a7a:	f000 f99c 	bl	8001db6 <__retarget_lock_acquire_recursive>
 8001a7e:	89a3      	ldrh	r3, [r4, #12]
 8001a80:	0719      	lsls	r1, r3, #28
 8001a82:	d513      	bpl.n	8001aac <_puts_r+0x50>
 8001a84:	6923      	ldr	r3, [r4, #16]
 8001a86:	b18b      	cbz	r3, 8001aac <_puts_r+0x50>
 8001a88:	3e01      	subs	r6, #1
 8001a8a:	68a3      	ldr	r3, [r4, #8]
 8001a8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a90:	3b01      	subs	r3, #1
 8001a92:	60a3      	str	r3, [r4, #8]
 8001a94:	b9e9      	cbnz	r1, 8001ad2 <_puts_r+0x76>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	da2e      	bge.n	8001af8 <_puts_r+0x9c>
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	210a      	movs	r1, #10
 8001a9e:	4628      	mov	r0, r5
 8001aa0:	f000 f87b 	bl	8001b9a <__swbuf_r>
 8001aa4:	3001      	adds	r0, #1
 8001aa6:	d007      	beq.n	8001ab8 <_puts_r+0x5c>
 8001aa8:	250a      	movs	r5, #10
 8001aaa:	e007      	b.n	8001abc <_puts_r+0x60>
 8001aac:	4621      	mov	r1, r4
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f000 f8b0 	bl	8001c14 <__swsetup_r>
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d0e7      	beq.n	8001a88 <_puts_r+0x2c>
 8001ab8:	f04f 35ff 	mov.w	r5, #4294967295
 8001abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001abe:	07da      	lsls	r2, r3, #31
 8001ac0:	d405      	bmi.n	8001ace <_puts_r+0x72>
 8001ac2:	89a3      	ldrh	r3, [r4, #12]
 8001ac4:	059b      	lsls	r3, r3, #22
 8001ac6:	d402      	bmi.n	8001ace <_puts_r+0x72>
 8001ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aca:	f000 f975 	bl	8001db8 <__retarget_lock_release_recursive>
 8001ace:	4628      	mov	r0, r5
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da04      	bge.n	8001ae0 <_puts_r+0x84>
 8001ad6:	69a2      	ldr	r2, [r4, #24]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dc06      	bgt.n	8001aea <_puts_r+0x8e>
 8001adc:	290a      	cmp	r1, #10
 8001ade:	d004      	beq.n	8001aea <_puts_r+0x8e>
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	6022      	str	r2, [r4, #0]
 8001ae6:	7019      	strb	r1, [r3, #0]
 8001ae8:	e7cf      	b.n	8001a8a <_puts_r+0x2e>
 8001aea:	4622      	mov	r2, r4
 8001aec:	4628      	mov	r0, r5
 8001aee:	f000 f854 	bl	8001b9a <__swbuf_r>
 8001af2:	3001      	adds	r0, #1
 8001af4:	d1c9      	bne.n	8001a8a <_puts_r+0x2e>
 8001af6:	e7df      	b.n	8001ab8 <_puts_r+0x5c>
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	250a      	movs	r5, #10
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	6022      	str	r2, [r4, #0]
 8001b00:	701d      	strb	r5, [r3, #0]
 8001b02:	e7db      	b.n	8001abc <_puts_r+0x60>

08001b04 <puts>:
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <puts+0xc>)
 8001b06:	4601      	mov	r1, r0
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	f7ff bfa7 	b.w	8001a5c <_puts_r>
 8001b0e:	bf00      	nop
 8001b10:	20000064 	.word	0x20000064

08001b14 <__sread>:
 8001b14:	b510      	push	{r4, lr}
 8001b16:	460c      	mov	r4, r1
 8001b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b1c:	f000 f8fc 	bl	8001d18 <_read_r>
 8001b20:	2800      	cmp	r0, #0
 8001b22:	bfab      	itete	ge
 8001b24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b26:	89a3      	ldrhlt	r3, [r4, #12]
 8001b28:	181b      	addge	r3, r3, r0
 8001b2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b2e:	bfac      	ite	ge
 8001b30:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b32:	81a3      	strhlt	r3, [r4, #12]
 8001b34:	bd10      	pop	{r4, pc}

08001b36 <__swrite>:
 8001b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b3a:	461f      	mov	r7, r3
 8001b3c:	898b      	ldrh	r3, [r1, #12]
 8001b3e:	05db      	lsls	r3, r3, #23
 8001b40:	4605      	mov	r5, r0
 8001b42:	460c      	mov	r4, r1
 8001b44:	4616      	mov	r6, r2
 8001b46:	d505      	bpl.n	8001b54 <__swrite+0x1e>
 8001b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f000 f8d0 	bl	8001cf4 <_lseek_r>
 8001b54:	89a3      	ldrh	r3, [r4, #12]
 8001b56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b5e:	81a3      	strh	r3, [r4, #12]
 8001b60:	4632      	mov	r2, r6
 8001b62:	463b      	mov	r3, r7
 8001b64:	4628      	mov	r0, r5
 8001b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b6a:	f000 b8e7 	b.w	8001d3c <_write_r>

08001b6e <__sseek>:
 8001b6e:	b510      	push	{r4, lr}
 8001b70:	460c      	mov	r4, r1
 8001b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b76:	f000 f8bd 	bl	8001cf4 <_lseek_r>
 8001b7a:	1c43      	adds	r3, r0, #1
 8001b7c:	89a3      	ldrh	r3, [r4, #12]
 8001b7e:	bf15      	itete	ne
 8001b80:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b8a:	81a3      	strheq	r3, [r4, #12]
 8001b8c:	bf18      	it	ne
 8001b8e:	81a3      	strhne	r3, [r4, #12]
 8001b90:	bd10      	pop	{r4, pc}

08001b92 <__sclose>:
 8001b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b96:	f000 b89d 	b.w	8001cd4 <_close_r>

08001b9a <__swbuf_r>:
 8001b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9c:	460e      	mov	r6, r1
 8001b9e:	4614      	mov	r4, r2
 8001ba0:	4605      	mov	r5, r0
 8001ba2:	b118      	cbz	r0, 8001bac <__swbuf_r+0x12>
 8001ba4:	6a03      	ldr	r3, [r0, #32]
 8001ba6:	b90b      	cbnz	r3, 8001bac <__swbuf_r+0x12>
 8001ba8:	f7ff ff10 	bl	80019cc <__sinit>
 8001bac:	69a3      	ldr	r3, [r4, #24]
 8001bae:	60a3      	str	r3, [r4, #8]
 8001bb0:	89a3      	ldrh	r3, [r4, #12]
 8001bb2:	071a      	lsls	r2, r3, #28
 8001bb4:	d525      	bpl.n	8001c02 <__swbuf_r+0x68>
 8001bb6:	6923      	ldr	r3, [r4, #16]
 8001bb8:	b31b      	cbz	r3, 8001c02 <__swbuf_r+0x68>
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	6922      	ldr	r2, [r4, #16]
 8001bbe:	1a98      	subs	r0, r3, r2
 8001bc0:	6963      	ldr	r3, [r4, #20]
 8001bc2:	b2f6      	uxtb	r6, r6
 8001bc4:	4283      	cmp	r3, r0
 8001bc6:	4637      	mov	r7, r6
 8001bc8:	dc04      	bgt.n	8001bd4 <__swbuf_r+0x3a>
 8001bca:	4621      	mov	r1, r4
 8001bcc:	4628      	mov	r0, r5
 8001bce:	f000 fd47 	bl	8002660 <_fflush_r>
 8001bd2:	b9e0      	cbnz	r0, 8001c0e <__swbuf_r+0x74>
 8001bd4:	68a3      	ldr	r3, [r4, #8]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	60a3      	str	r3, [r4, #8]
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	6022      	str	r2, [r4, #0]
 8001be0:	701e      	strb	r6, [r3, #0]
 8001be2:	6962      	ldr	r2, [r4, #20]
 8001be4:	1c43      	adds	r3, r0, #1
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d004      	beq.n	8001bf4 <__swbuf_r+0x5a>
 8001bea:	89a3      	ldrh	r3, [r4, #12]
 8001bec:	07db      	lsls	r3, r3, #31
 8001bee:	d506      	bpl.n	8001bfe <__swbuf_r+0x64>
 8001bf0:	2e0a      	cmp	r6, #10
 8001bf2:	d104      	bne.n	8001bfe <__swbuf_r+0x64>
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	4628      	mov	r0, r5
 8001bf8:	f000 fd32 	bl	8002660 <_fflush_r>
 8001bfc:	b938      	cbnz	r0, 8001c0e <__swbuf_r+0x74>
 8001bfe:	4638      	mov	r0, r7
 8001c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c02:	4621      	mov	r1, r4
 8001c04:	4628      	mov	r0, r5
 8001c06:	f000 f805 	bl	8001c14 <__swsetup_r>
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	d0d5      	beq.n	8001bba <__swbuf_r+0x20>
 8001c0e:	f04f 37ff 	mov.w	r7, #4294967295
 8001c12:	e7f4      	b.n	8001bfe <__swbuf_r+0x64>

08001c14 <__swsetup_r>:
 8001c14:	b538      	push	{r3, r4, r5, lr}
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <__swsetup_r+0xac>)
 8001c18:	4605      	mov	r5, r0
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	460c      	mov	r4, r1
 8001c1e:	b118      	cbz	r0, 8001c28 <__swsetup_r+0x14>
 8001c20:	6a03      	ldr	r3, [r0, #32]
 8001c22:	b90b      	cbnz	r3, 8001c28 <__swsetup_r+0x14>
 8001c24:	f7ff fed2 	bl	80019cc <__sinit>
 8001c28:	89a3      	ldrh	r3, [r4, #12]
 8001c2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c2e:	0718      	lsls	r0, r3, #28
 8001c30:	d422      	bmi.n	8001c78 <__swsetup_r+0x64>
 8001c32:	06d9      	lsls	r1, r3, #27
 8001c34:	d407      	bmi.n	8001c46 <__swsetup_r+0x32>
 8001c36:	2309      	movs	r3, #9
 8001c38:	602b      	str	r3, [r5, #0]
 8001c3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c3e:	81a3      	strh	r3, [r4, #12]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	e034      	b.n	8001cb0 <__swsetup_r+0x9c>
 8001c46:	0758      	lsls	r0, r3, #29
 8001c48:	d512      	bpl.n	8001c70 <__swsetup_r+0x5c>
 8001c4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c4c:	b141      	cbz	r1, 8001c60 <__swsetup_r+0x4c>
 8001c4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c52:	4299      	cmp	r1, r3
 8001c54:	d002      	beq.n	8001c5c <__swsetup_r+0x48>
 8001c56:	4628      	mov	r0, r5
 8001c58:	f000 f8b0 	bl	8001dbc <_free_r>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	6363      	str	r3, [r4, #52]	; 0x34
 8001c60:	89a3      	ldrh	r3, [r4, #12]
 8001c62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c66:	81a3      	strh	r3, [r4, #12]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	6063      	str	r3, [r4, #4]
 8001c6c:	6923      	ldr	r3, [r4, #16]
 8001c6e:	6023      	str	r3, [r4, #0]
 8001c70:	89a3      	ldrh	r3, [r4, #12]
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	81a3      	strh	r3, [r4, #12]
 8001c78:	6923      	ldr	r3, [r4, #16]
 8001c7a:	b94b      	cbnz	r3, 8001c90 <__swsetup_r+0x7c>
 8001c7c:	89a3      	ldrh	r3, [r4, #12]
 8001c7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c86:	d003      	beq.n	8001c90 <__swsetup_r+0x7c>
 8001c88:	4621      	mov	r1, r4
 8001c8a:	4628      	mov	r0, r5
 8001c8c:	f000 fd36 	bl	80026fc <__smakebuf_r>
 8001c90:	89a0      	ldrh	r0, [r4, #12]
 8001c92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c96:	f010 0301 	ands.w	r3, r0, #1
 8001c9a:	d00a      	beq.n	8001cb2 <__swsetup_r+0x9e>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60a3      	str	r3, [r4, #8]
 8001ca0:	6963      	ldr	r3, [r4, #20]
 8001ca2:	425b      	negs	r3, r3
 8001ca4:	61a3      	str	r3, [r4, #24]
 8001ca6:	6923      	ldr	r3, [r4, #16]
 8001ca8:	b943      	cbnz	r3, 8001cbc <__swsetup_r+0xa8>
 8001caa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001cae:	d1c4      	bne.n	8001c3a <__swsetup_r+0x26>
 8001cb0:	bd38      	pop	{r3, r4, r5, pc}
 8001cb2:	0781      	lsls	r1, r0, #30
 8001cb4:	bf58      	it	pl
 8001cb6:	6963      	ldrpl	r3, [r4, #20]
 8001cb8:	60a3      	str	r3, [r4, #8]
 8001cba:	e7f4      	b.n	8001ca6 <__swsetup_r+0x92>
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	e7f7      	b.n	8001cb0 <__swsetup_r+0x9c>
 8001cc0:	20000064 	.word	0x20000064

08001cc4 <memset>:
 8001cc4:	4402      	add	r2, r0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d100      	bne.n	8001cce <memset+0xa>
 8001ccc:	4770      	bx	lr
 8001cce:	f803 1b01 	strb.w	r1, [r3], #1
 8001cd2:	e7f9      	b.n	8001cc8 <memset+0x4>

08001cd4 <_close_r>:
 8001cd4:	b538      	push	{r3, r4, r5, lr}
 8001cd6:	4d06      	ldr	r5, [pc, #24]	; (8001cf0 <_close_r+0x1c>)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	4604      	mov	r4, r0
 8001cdc:	4608      	mov	r0, r1
 8001cde:	602b      	str	r3, [r5, #0]
 8001ce0:	f7fe fde5 	bl	80008ae <_close>
 8001ce4:	1c43      	adds	r3, r0, #1
 8001ce6:	d102      	bne.n	8001cee <_close_r+0x1a>
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	b103      	cbz	r3, 8001cee <_close_r+0x1a>
 8001cec:	6023      	str	r3, [r4, #0]
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
 8001cf0:	2000020c 	.word	0x2000020c

08001cf4 <_lseek_r>:
 8001cf4:	b538      	push	{r3, r4, r5, lr}
 8001cf6:	4d07      	ldr	r5, [pc, #28]	; (8001d14 <_lseek_r+0x20>)
 8001cf8:	4604      	mov	r4, r0
 8001cfa:	4608      	mov	r0, r1
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	2200      	movs	r2, #0
 8001d00:	602a      	str	r2, [r5, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	f7fe fdfa 	bl	80008fc <_lseek>
 8001d08:	1c43      	adds	r3, r0, #1
 8001d0a:	d102      	bne.n	8001d12 <_lseek_r+0x1e>
 8001d0c:	682b      	ldr	r3, [r5, #0]
 8001d0e:	b103      	cbz	r3, 8001d12 <_lseek_r+0x1e>
 8001d10:	6023      	str	r3, [r4, #0]
 8001d12:	bd38      	pop	{r3, r4, r5, pc}
 8001d14:	2000020c 	.word	0x2000020c

08001d18 <_read_r>:
 8001d18:	b538      	push	{r3, r4, r5, lr}
 8001d1a:	4d07      	ldr	r5, [pc, #28]	; (8001d38 <_read_r+0x20>)
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	4608      	mov	r0, r1
 8001d20:	4611      	mov	r1, r2
 8001d22:	2200      	movs	r2, #0
 8001d24:	602a      	str	r2, [r5, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f7fe fda4 	bl	8000874 <_read>
 8001d2c:	1c43      	adds	r3, r0, #1
 8001d2e:	d102      	bne.n	8001d36 <_read_r+0x1e>
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	b103      	cbz	r3, 8001d36 <_read_r+0x1e>
 8001d34:	6023      	str	r3, [r4, #0]
 8001d36:	bd38      	pop	{r3, r4, r5, pc}
 8001d38:	2000020c 	.word	0x2000020c

08001d3c <_write_r>:
 8001d3c:	b538      	push	{r3, r4, r5, lr}
 8001d3e:	4d07      	ldr	r5, [pc, #28]	; (8001d5c <_write_r+0x20>)
 8001d40:	4604      	mov	r4, r0
 8001d42:	4608      	mov	r0, r1
 8001d44:	4611      	mov	r1, r2
 8001d46:	2200      	movs	r2, #0
 8001d48:	602a      	str	r2, [r5, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f7fe fccc 	bl	80006e8 <_write>
 8001d50:	1c43      	adds	r3, r0, #1
 8001d52:	d102      	bne.n	8001d5a <_write_r+0x1e>
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	b103      	cbz	r3, 8001d5a <_write_r+0x1e>
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
 8001d5c:	2000020c 	.word	0x2000020c

08001d60 <__errno>:
 8001d60:	4b01      	ldr	r3, [pc, #4]	; (8001d68 <__errno+0x8>)
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000064 	.word	0x20000064

08001d6c <__libc_init_array>:
 8001d6c:	b570      	push	{r4, r5, r6, lr}
 8001d6e:	4d0d      	ldr	r5, [pc, #52]	; (8001da4 <__libc_init_array+0x38>)
 8001d70:	4c0d      	ldr	r4, [pc, #52]	; (8001da8 <__libc_init_array+0x3c>)
 8001d72:	1b64      	subs	r4, r4, r5
 8001d74:	10a4      	asrs	r4, r4, #2
 8001d76:	2600      	movs	r6, #0
 8001d78:	42a6      	cmp	r6, r4
 8001d7a:	d109      	bne.n	8001d90 <__libc_init_array+0x24>
 8001d7c:	4d0b      	ldr	r5, [pc, #44]	; (8001dac <__libc_init_array+0x40>)
 8001d7e:	4c0c      	ldr	r4, [pc, #48]	; (8001db0 <__libc_init_array+0x44>)
 8001d80:	f000 fd2a 	bl	80027d8 <_init>
 8001d84:	1b64      	subs	r4, r4, r5
 8001d86:	10a4      	asrs	r4, r4, #2
 8001d88:	2600      	movs	r6, #0
 8001d8a:	42a6      	cmp	r6, r4
 8001d8c:	d105      	bne.n	8001d9a <__libc_init_array+0x2e>
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}
 8001d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d94:	4798      	blx	r3
 8001d96:	3601      	adds	r6, #1
 8001d98:	e7ee      	b.n	8001d78 <__libc_init_array+0xc>
 8001d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d9e:	4798      	blx	r3
 8001da0:	3601      	adds	r6, #1
 8001da2:	e7f2      	b.n	8001d8a <__libc_init_array+0x1e>
 8001da4:	08002878 	.word	0x08002878
 8001da8:	08002878 	.word	0x08002878
 8001dac:	08002878 	.word	0x08002878
 8001db0:	0800287c 	.word	0x0800287c

08001db4 <__retarget_lock_init_recursive>:
 8001db4:	4770      	bx	lr

08001db6 <__retarget_lock_acquire_recursive>:
 8001db6:	4770      	bx	lr

08001db8 <__retarget_lock_release_recursive>:
 8001db8:	4770      	bx	lr
	...

08001dbc <_free_r>:
 8001dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dbe:	2900      	cmp	r1, #0
 8001dc0:	d044      	beq.n	8001e4c <_free_r+0x90>
 8001dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dc6:	9001      	str	r0, [sp, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f1a1 0404 	sub.w	r4, r1, #4
 8001dce:	bfb8      	it	lt
 8001dd0:	18e4      	addlt	r4, r4, r3
 8001dd2:	f000 f8df 	bl	8001f94 <__malloc_lock>
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <_free_r+0x94>)
 8001dd8:	9801      	ldr	r0, [sp, #4]
 8001dda:	6813      	ldr	r3, [r2, #0]
 8001ddc:	b933      	cbnz	r3, 8001dec <_free_r+0x30>
 8001dde:	6063      	str	r3, [r4, #4]
 8001de0:	6014      	str	r4, [r2, #0]
 8001de2:	b003      	add	sp, #12
 8001de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001de8:	f000 b8da 	b.w	8001fa0 <__malloc_unlock>
 8001dec:	42a3      	cmp	r3, r4
 8001dee:	d908      	bls.n	8001e02 <_free_r+0x46>
 8001df0:	6825      	ldr	r5, [r4, #0]
 8001df2:	1961      	adds	r1, r4, r5
 8001df4:	428b      	cmp	r3, r1
 8001df6:	bf01      	itttt	eq
 8001df8:	6819      	ldreq	r1, [r3, #0]
 8001dfa:	685b      	ldreq	r3, [r3, #4]
 8001dfc:	1949      	addeq	r1, r1, r5
 8001dfe:	6021      	streq	r1, [r4, #0]
 8001e00:	e7ed      	b.n	8001dde <_free_r+0x22>
 8001e02:	461a      	mov	r2, r3
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	b10b      	cbz	r3, 8001e0c <_free_r+0x50>
 8001e08:	42a3      	cmp	r3, r4
 8001e0a:	d9fa      	bls.n	8001e02 <_free_r+0x46>
 8001e0c:	6811      	ldr	r1, [r2, #0]
 8001e0e:	1855      	adds	r5, r2, r1
 8001e10:	42a5      	cmp	r5, r4
 8001e12:	d10b      	bne.n	8001e2c <_free_r+0x70>
 8001e14:	6824      	ldr	r4, [r4, #0]
 8001e16:	4421      	add	r1, r4
 8001e18:	1854      	adds	r4, r2, r1
 8001e1a:	42a3      	cmp	r3, r4
 8001e1c:	6011      	str	r1, [r2, #0]
 8001e1e:	d1e0      	bne.n	8001de2 <_free_r+0x26>
 8001e20:	681c      	ldr	r4, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	6053      	str	r3, [r2, #4]
 8001e26:	440c      	add	r4, r1
 8001e28:	6014      	str	r4, [r2, #0]
 8001e2a:	e7da      	b.n	8001de2 <_free_r+0x26>
 8001e2c:	d902      	bls.n	8001e34 <_free_r+0x78>
 8001e2e:	230c      	movs	r3, #12
 8001e30:	6003      	str	r3, [r0, #0]
 8001e32:	e7d6      	b.n	8001de2 <_free_r+0x26>
 8001e34:	6825      	ldr	r5, [r4, #0]
 8001e36:	1961      	adds	r1, r4, r5
 8001e38:	428b      	cmp	r3, r1
 8001e3a:	bf04      	itt	eq
 8001e3c:	6819      	ldreq	r1, [r3, #0]
 8001e3e:	685b      	ldreq	r3, [r3, #4]
 8001e40:	6063      	str	r3, [r4, #4]
 8001e42:	bf04      	itt	eq
 8001e44:	1949      	addeq	r1, r1, r5
 8001e46:	6021      	streq	r1, [r4, #0]
 8001e48:	6054      	str	r4, [r2, #4]
 8001e4a:	e7ca      	b.n	8001de2 <_free_r+0x26>
 8001e4c:	b003      	add	sp, #12
 8001e4e:	bd30      	pop	{r4, r5, pc}
 8001e50:	20000214 	.word	0x20000214

08001e54 <sbrk_aligned>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0e      	ldr	r6, [pc, #56]	; (8001e90 <sbrk_aligned+0x3c>)
 8001e58:	460c      	mov	r4, r1
 8001e5a:	6831      	ldr	r1, [r6, #0]
 8001e5c:	4605      	mov	r5, r0
 8001e5e:	b911      	cbnz	r1, 8001e66 <sbrk_aligned+0x12>
 8001e60:	f000 fcaa 	bl	80027b8 <_sbrk_r>
 8001e64:	6030      	str	r0, [r6, #0]
 8001e66:	4621      	mov	r1, r4
 8001e68:	4628      	mov	r0, r5
 8001e6a:	f000 fca5 	bl	80027b8 <_sbrk_r>
 8001e6e:	1c43      	adds	r3, r0, #1
 8001e70:	d00a      	beq.n	8001e88 <sbrk_aligned+0x34>
 8001e72:	1cc4      	adds	r4, r0, #3
 8001e74:	f024 0403 	bic.w	r4, r4, #3
 8001e78:	42a0      	cmp	r0, r4
 8001e7a:	d007      	beq.n	8001e8c <sbrk_aligned+0x38>
 8001e7c:	1a21      	subs	r1, r4, r0
 8001e7e:	4628      	mov	r0, r5
 8001e80:	f000 fc9a 	bl	80027b8 <_sbrk_r>
 8001e84:	3001      	adds	r0, #1
 8001e86:	d101      	bne.n	8001e8c <sbrk_aligned+0x38>
 8001e88:	f04f 34ff 	mov.w	r4, #4294967295
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
 8001e90:	20000218 	.word	0x20000218

08001e94 <_malloc_r>:
 8001e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e98:	1ccd      	adds	r5, r1, #3
 8001e9a:	f025 0503 	bic.w	r5, r5, #3
 8001e9e:	3508      	adds	r5, #8
 8001ea0:	2d0c      	cmp	r5, #12
 8001ea2:	bf38      	it	cc
 8001ea4:	250c      	movcc	r5, #12
 8001ea6:	2d00      	cmp	r5, #0
 8001ea8:	4607      	mov	r7, r0
 8001eaa:	db01      	blt.n	8001eb0 <_malloc_r+0x1c>
 8001eac:	42a9      	cmp	r1, r5
 8001eae:	d905      	bls.n	8001ebc <_malloc_r+0x28>
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	2600      	movs	r6, #0
 8001eb6:	4630      	mov	r0, r6
 8001eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ebc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001f90 <_malloc_r+0xfc>
 8001ec0:	f000 f868 	bl	8001f94 <__malloc_lock>
 8001ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8001ec8:	461c      	mov	r4, r3
 8001eca:	bb5c      	cbnz	r4, 8001f24 <_malloc_r+0x90>
 8001ecc:	4629      	mov	r1, r5
 8001ece:	4638      	mov	r0, r7
 8001ed0:	f7ff ffc0 	bl	8001e54 <sbrk_aligned>
 8001ed4:	1c43      	adds	r3, r0, #1
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	d155      	bne.n	8001f86 <_malloc_r+0xf2>
 8001eda:	f8d8 4000 	ldr.w	r4, [r8]
 8001ede:	4626      	mov	r6, r4
 8001ee0:	2e00      	cmp	r6, #0
 8001ee2:	d145      	bne.n	8001f70 <_malloc_r+0xdc>
 8001ee4:	2c00      	cmp	r4, #0
 8001ee6:	d048      	beq.n	8001f7a <_malloc_r+0xe6>
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	4631      	mov	r1, r6
 8001eec:	4638      	mov	r0, r7
 8001eee:	eb04 0903 	add.w	r9, r4, r3
 8001ef2:	f000 fc61 	bl	80027b8 <_sbrk_r>
 8001ef6:	4581      	cmp	r9, r0
 8001ef8:	d13f      	bne.n	8001f7a <_malloc_r+0xe6>
 8001efa:	6821      	ldr	r1, [r4, #0]
 8001efc:	1a6d      	subs	r5, r5, r1
 8001efe:	4629      	mov	r1, r5
 8001f00:	4638      	mov	r0, r7
 8001f02:	f7ff ffa7 	bl	8001e54 <sbrk_aligned>
 8001f06:	3001      	adds	r0, #1
 8001f08:	d037      	beq.n	8001f7a <_malloc_r+0xe6>
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	442b      	add	r3, r5
 8001f0e:	6023      	str	r3, [r4, #0]
 8001f10:	f8d8 3000 	ldr.w	r3, [r8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d038      	beq.n	8001f8a <_malloc_r+0xf6>
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	42a2      	cmp	r2, r4
 8001f1c:	d12b      	bne.n	8001f76 <_malloc_r+0xe2>
 8001f1e:	2200      	movs	r2, #0
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	e00f      	b.n	8001f44 <_malloc_r+0xb0>
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	1b52      	subs	r2, r2, r5
 8001f28:	d41f      	bmi.n	8001f6a <_malloc_r+0xd6>
 8001f2a:	2a0b      	cmp	r2, #11
 8001f2c:	d917      	bls.n	8001f5e <_malloc_r+0xca>
 8001f2e:	1961      	adds	r1, r4, r5
 8001f30:	42a3      	cmp	r3, r4
 8001f32:	6025      	str	r5, [r4, #0]
 8001f34:	bf18      	it	ne
 8001f36:	6059      	strne	r1, [r3, #4]
 8001f38:	6863      	ldr	r3, [r4, #4]
 8001f3a:	bf08      	it	eq
 8001f3c:	f8c8 1000 	streq.w	r1, [r8]
 8001f40:	5162      	str	r2, [r4, r5]
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	4638      	mov	r0, r7
 8001f46:	f104 060b 	add.w	r6, r4, #11
 8001f4a:	f000 f829 	bl	8001fa0 <__malloc_unlock>
 8001f4e:	f026 0607 	bic.w	r6, r6, #7
 8001f52:	1d23      	adds	r3, r4, #4
 8001f54:	1af2      	subs	r2, r6, r3
 8001f56:	d0ae      	beq.n	8001eb6 <_malloc_r+0x22>
 8001f58:	1b9b      	subs	r3, r3, r6
 8001f5a:	50a3      	str	r3, [r4, r2]
 8001f5c:	e7ab      	b.n	8001eb6 <_malloc_r+0x22>
 8001f5e:	42a3      	cmp	r3, r4
 8001f60:	6862      	ldr	r2, [r4, #4]
 8001f62:	d1dd      	bne.n	8001f20 <_malloc_r+0x8c>
 8001f64:	f8c8 2000 	str.w	r2, [r8]
 8001f68:	e7ec      	b.n	8001f44 <_malloc_r+0xb0>
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	6864      	ldr	r4, [r4, #4]
 8001f6e:	e7ac      	b.n	8001eca <_malloc_r+0x36>
 8001f70:	4634      	mov	r4, r6
 8001f72:	6876      	ldr	r6, [r6, #4]
 8001f74:	e7b4      	b.n	8001ee0 <_malloc_r+0x4c>
 8001f76:	4613      	mov	r3, r2
 8001f78:	e7cc      	b.n	8001f14 <_malloc_r+0x80>
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	4638      	mov	r0, r7
 8001f80:	f000 f80e 	bl	8001fa0 <__malloc_unlock>
 8001f84:	e797      	b.n	8001eb6 <_malloc_r+0x22>
 8001f86:	6025      	str	r5, [r4, #0]
 8001f88:	e7dc      	b.n	8001f44 <_malloc_r+0xb0>
 8001f8a:	605b      	str	r3, [r3, #4]
 8001f8c:	deff      	udf	#255	; 0xff
 8001f8e:	bf00      	nop
 8001f90:	20000214 	.word	0x20000214

08001f94 <__malloc_lock>:
 8001f94:	4801      	ldr	r0, [pc, #4]	; (8001f9c <__malloc_lock+0x8>)
 8001f96:	f7ff bf0e 	b.w	8001db6 <__retarget_lock_acquire_recursive>
 8001f9a:	bf00      	nop
 8001f9c:	20000210 	.word	0x20000210

08001fa0 <__malloc_unlock>:
 8001fa0:	4801      	ldr	r0, [pc, #4]	; (8001fa8 <__malloc_unlock+0x8>)
 8001fa2:	f7ff bf09 	b.w	8001db8 <__retarget_lock_release_recursive>
 8001fa6:	bf00      	nop
 8001fa8:	20000210 	.word	0x20000210

08001fac <__sfputc_r>:
 8001fac:	6893      	ldr	r3, [r2, #8]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	b410      	push	{r4}
 8001fb4:	6093      	str	r3, [r2, #8]
 8001fb6:	da08      	bge.n	8001fca <__sfputc_r+0x1e>
 8001fb8:	6994      	ldr	r4, [r2, #24]
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	db01      	blt.n	8001fc2 <__sfputc_r+0x16>
 8001fbe:	290a      	cmp	r1, #10
 8001fc0:	d103      	bne.n	8001fca <__sfputc_r+0x1e>
 8001fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fc6:	f7ff bde8 	b.w	8001b9a <__swbuf_r>
 8001fca:	6813      	ldr	r3, [r2, #0]
 8001fcc:	1c58      	adds	r0, r3, #1
 8001fce:	6010      	str	r0, [r2, #0]
 8001fd0:	7019      	strb	r1, [r3, #0]
 8001fd2:	4608      	mov	r0, r1
 8001fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <__sfputs_r>:
 8001fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fdc:	4606      	mov	r6, r0
 8001fde:	460f      	mov	r7, r1
 8001fe0:	4614      	mov	r4, r2
 8001fe2:	18d5      	adds	r5, r2, r3
 8001fe4:	42ac      	cmp	r4, r5
 8001fe6:	d101      	bne.n	8001fec <__sfputs_r+0x12>
 8001fe8:	2000      	movs	r0, #0
 8001fea:	e007      	b.n	8001ffc <__sfputs_r+0x22>
 8001fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ff0:	463a      	mov	r2, r7
 8001ff2:	4630      	mov	r0, r6
 8001ff4:	f7ff ffda 	bl	8001fac <__sfputc_r>
 8001ff8:	1c43      	adds	r3, r0, #1
 8001ffa:	d1f3      	bne.n	8001fe4 <__sfputs_r+0xa>
 8001ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002000 <_vfiprintf_r>:
 8002000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002004:	460d      	mov	r5, r1
 8002006:	b09d      	sub	sp, #116	; 0x74
 8002008:	4614      	mov	r4, r2
 800200a:	4698      	mov	r8, r3
 800200c:	4606      	mov	r6, r0
 800200e:	b118      	cbz	r0, 8002018 <_vfiprintf_r+0x18>
 8002010:	6a03      	ldr	r3, [r0, #32]
 8002012:	b90b      	cbnz	r3, 8002018 <_vfiprintf_r+0x18>
 8002014:	f7ff fcda 	bl	80019cc <__sinit>
 8002018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800201a:	07d9      	lsls	r1, r3, #31
 800201c:	d405      	bmi.n	800202a <_vfiprintf_r+0x2a>
 800201e:	89ab      	ldrh	r3, [r5, #12]
 8002020:	059a      	lsls	r2, r3, #22
 8002022:	d402      	bmi.n	800202a <_vfiprintf_r+0x2a>
 8002024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002026:	f7ff fec6 	bl	8001db6 <__retarget_lock_acquire_recursive>
 800202a:	89ab      	ldrh	r3, [r5, #12]
 800202c:	071b      	lsls	r3, r3, #28
 800202e:	d501      	bpl.n	8002034 <_vfiprintf_r+0x34>
 8002030:	692b      	ldr	r3, [r5, #16]
 8002032:	b99b      	cbnz	r3, 800205c <_vfiprintf_r+0x5c>
 8002034:	4629      	mov	r1, r5
 8002036:	4630      	mov	r0, r6
 8002038:	f7ff fdec 	bl	8001c14 <__swsetup_r>
 800203c:	b170      	cbz	r0, 800205c <_vfiprintf_r+0x5c>
 800203e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002040:	07dc      	lsls	r4, r3, #31
 8002042:	d504      	bpl.n	800204e <_vfiprintf_r+0x4e>
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	b01d      	add	sp, #116	; 0x74
 800204a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800204e:	89ab      	ldrh	r3, [r5, #12]
 8002050:	0598      	lsls	r0, r3, #22
 8002052:	d4f7      	bmi.n	8002044 <_vfiprintf_r+0x44>
 8002054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002056:	f7ff feaf 	bl	8001db8 <__retarget_lock_release_recursive>
 800205a:	e7f3      	b.n	8002044 <_vfiprintf_r+0x44>
 800205c:	2300      	movs	r3, #0
 800205e:	9309      	str	r3, [sp, #36]	; 0x24
 8002060:	2320      	movs	r3, #32
 8002062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002066:	f8cd 800c 	str.w	r8, [sp, #12]
 800206a:	2330      	movs	r3, #48	; 0x30
 800206c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002220 <_vfiprintf_r+0x220>
 8002070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002074:	f04f 0901 	mov.w	r9, #1
 8002078:	4623      	mov	r3, r4
 800207a:	469a      	mov	sl, r3
 800207c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002080:	b10a      	cbz	r2, 8002086 <_vfiprintf_r+0x86>
 8002082:	2a25      	cmp	r2, #37	; 0x25
 8002084:	d1f9      	bne.n	800207a <_vfiprintf_r+0x7a>
 8002086:	ebba 0b04 	subs.w	fp, sl, r4
 800208a:	d00b      	beq.n	80020a4 <_vfiprintf_r+0xa4>
 800208c:	465b      	mov	r3, fp
 800208e:	4622      	mov	r2, r4
 8002090:	4629      	mov	r1, r5
 8002092:	4630      	mov	r0, r6
 8002094:	f7ff ffa1 	bl	8001fda <__sfputs_r>
 8002098:	3001      	adds	r0, #1
 800209a:	f000 80a9 	beq.w	80021f0 <_vfiprintf_r+0x1f0>
 800209e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020a0:	445a      	add	r2, fp
 80020a2:	9209      	str	r2, [sp, #36]	; 0x24
 80020a4:	f89a 3000 	ldrb.w	r3, [sl]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a1 	beq.w	80021f0 <_vfiprintf_r+0x1f0>
 80020ae:	2300      	movs	r3, #0
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020b8:	f10a 0a01 	add.w	sl, sl, #1
 80020bc:	9304      	str	r3, [sp, #16]
 80020be:	9307      	str	r3, [sp, #28]
 80020c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020c4:	931a      	str	r3, [sp, #104]	; 0x68
 80020c6:	4654      	mov	r4, sl
 80020c8:	2205      	movs	r2, #5
 80020ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020ce:	4854      	ldr	r0, [pc, #336]	; (8002220 <_vfiprintf_r+0x220>)
 80020d0:	f7fe f87e 	bl	80001d0 <memchr>
 80020d4:	9a04      	ldr	r2, [sp, #16]
 80020d6:	b9d8      	cbnz	r0, 8002110 <_vfiprintf_r+0x110>
 80020d8:	06d1      	lsls	r1, r2, #27
 80020da:	bf44      	itt	mi
 80020dc:	2320      	movmi	r3, #32
 80020de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020e2:	0713      	lsls	r3, r2, #28
 80020e4:	bf44      	itt	mi
 80020e6:	232b      	movmi	r3, #43	; 0x2b
 80020e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020ec:	f89a 3000 	ldrb.w	r3, [sl]
 80020f0:	2b2a      	cmp	r3, #42	; 0x2a
 80020f2:	d015      	beq.n	8002120 <_vfiprintf_r+0x120>
 80020f4:	9a07      	ldr	r2, [sp, #28]
 80020f6:	4654      	mov	r4, sl
 80020f8:	2000      	movs	r0, #0
 80020fa:	f04f 0c0a 	mov.w	ip, #10
 80020fe:	4621      	mov	r1, r4
 8002100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002104:	3b30      	subs	r3, #48	; 0x30
 8002106:	2b09      	cmp	r3, #9
 8002108:	d94d      	bls.n	80021a6 <_vfiprintf_r+0x1a6>
 800210a:	b1b0      	cbz	r0, 800213a <_vfiprintf_r+0x13a>
 800210c:	9207      	str	r2, [sp, #28]
 800210e:	e014      	b.n	800213a <_vfiprintf_r+0x13a>
 8002110:	eba0 0308 	sub.w	r3, r0, r8
 8002114:	fa09 f303 	lsl.w	r3, r9, r3
 8002118:	4313      	orrs	r3, r2
 800211a:	9304      	str	r3, [sp, #16]
 800211c:	46a2      	mov	sl, r4
 800211e:	e7d2      	b.n	80020c6 <_vfiprintf_r+0xc6>
 8002120:	9b03      	ldr	r3, [sp, #12]
 8002122:	1d19      	adds	r1, r3, #4
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	9103      	str	r1, [sp, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	bfbb      	ittet	lt
 800212c:	425b      	neglt	r3, r3
 800212e:	f042 0202 	orrlt.w	r2, r2, #2
 8002132:	9307      	strge	r3, [sp, #28]
 8002134:	9307      	strlt	r3, [sp, #28]
 8002136:	bfb8      	it	lt
 8002138:	9204      	strlt	r2, [sp, #16]
 800213a:	7823      	ldrb	r3, [r4, #0]
 800213c:	2b2e      	cmp	r3, #46	; 0x2e
 800213e:	d10c      	bne.n	800215a <_vfiprintf_r+0x15a>
 8002140:	7863      	ldrb	r3, [r4, #1]
 8002142:	2b2a      	cmp	r3, #42	; 0x2a
 8002144:	d134      	bne.n	80021b0 <_vfiprintf_r+0x1b0>
 8002146:	9b03      	ldr	r3, [sp, #12]
 8002148:	1d1a      	adds	r2, r3, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	9203      	str	r2, [sp, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	bfb8      	it	lt
 8002152:	f04f 33ff 	movlt.w	r3, #4294967295
 8002156:	3402      	adds	r4, #2
 8002158:	9305      	str	r3, [sp, #20]
 800215a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002230 <_vfiprintf_r+0x230>
 800215e:	7821      	ldrb	r1, [r4, #0]
 8002160:	2203      	movs	r2, #3
 8002162:	4650      	mov	r0, sl
 8002164:	f7fe f834 	bl	80001d0 <memchr>
 8002168:	b138      	cbz	r0, 800217a <_vfiprintf_r+0x17a>
 800216a:	9b04      	ldr	r3, [sp, #16]
 800216c:	eba0 000a 	sub.w	r0, r0, sl
 8002170:	2240      	movs	r2, #64	; 0x40
 8002172:	4082      	lsls	r2, r0
 8002174:	4313      	orrs	r3, r2
 8002176:	3401      	adds	r4, #1
 8002178:	9304      	str	r3, [sp, #16]
 800217a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800217e:	4829      	ldr	r0, [pc, #164]	; (8002224 <_vfiprintf_r+0x224>)
 8002180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002184:	2206      	movs	r2, #6
 8002186:	f7fe f823 	bl	80001d0 <memchr>
 800218a:	2800      	cmp	r0, #0
 800218c:	d03f      	beq.n	800220e <_vfiprintf_r+0x20e>
 800218e:	4b26      	ldr	r3, [pc, #152]	; (8002228 <_vfiprintf_r+0x228>)
 8002190:	bb1b      	cbnz	r3, 80021da <_vfiprintf_r+0x1da>
 8002192:	9b03      	ldr	r3, [sp, #12]
 8002194:	3307      	adds	r3, #7
 8002196:	f023 0307 	bic.w	r3, r3, #7
 800219a:	3308      	adds	r3, #8
 800219c:	9303      	str	r3, [sp, #12]
 800219e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021a0:	443b      	add	r3, r7
 80021a2:	9309      	str	r3, [sp, #36]	; 0x24
 80021a4:	e768      	b.n	8002078 <_vfiprintf_r+0x78>
 80021a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80021aa:	460c      	mov	r4, r1
 80021ac:	2001      	movs	r0, #1
 80021ae:	e7a6      	b.n	80020fe <_vfiprintf_r+0xfe>
 80021b0:	2300      	movs	r3, #0
 80021b2:	3401      	adds	r4, #1
 80021b4:	9305      	str	r3, [sp, #20]
 80021b6:	4619      	mov	r1, r3
 80021b8:	f04f 0c0a 	mov.w	ip, #10
 80021bc:	4620      	mov	r0, r4
 80021be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021c2:	3a30      	subs	r2, #48	; 0x30
 80021c4:	2a09      	cmp	r2, #9
 80021c6:	d903      	bls.n	80021d0 <_vfiprintf_r+0x1d0>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0c6      	beq.n	800215a <_vfiprintf_r+0x15a>
 80021cc:	9105      	str	r1, [sp, #20]
 80021ce:	e7c4      	b.n	800215a <_vfiprintf_r+0x15a>
 80021d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80021d4:	4604      	mov	r4, r0
 80021d6:	2301      	movs	r3, #1
 80021d8:	e7f0      	b.n	80021bc <_vfiprintf_r+0x1bc>
 80021da:	ab03      	add	r3, sp, #12
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	462a      	mov	r2, r5
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <_vfiprintf_r+0x22c>)
 80021e2:	a904      	add	r1, sp, #16
 80021e4:	4630      	mov	r0, r6
 80021e6:	f3af 8000 	nop.w
 80021ea:	4607      	mov	r7, r0
 80021ec:	1c78      	adds	r0, r7, #1
 80021ee:	d1d6      	bne.n	800219e <_vfiprintf_r+0x19e>
 80021f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021f2:	07d9      	lsls	r1, r3, #31
 80021f4:	d405      	bmi.n	8002202 <_vfiprintf_r+0x202>
 80021f6:	89ab      	ldrh	r3, [r5, #12]
 80021f8:	059a      	lsls	r2, r3, #22
 80021fa:	d402      	bmi.n	8002202 <_vfiprintf_r+0x202>
 80021fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021fe:	f7ff fddb 	bl	8001db8 <__retarget_lock_release_recursive>
 8002202:	89ab      	ldrh	r3, [r5, #12]
 8002204:	065b      	lsls	r3, r3, #25
 8002206:	f53f af1d 	bmi.w	8002044 <_vfiprintf_r+0x44>
 800220a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800220c:	e71c      	b.n	8002048 <_vfiprintf_r+0x48>
 800220e:	ab03      	add	r3, sp, #12
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	462a      	mov	r2, r5
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <_vfiprintf_r+0x22c>)
 8002216:	a904      	add	r1, sp, #16
 8002218:	4630      	mov	r0, r6
 800221a:	f000 f879 	bl	8002310 <_printf_i>
 800221e:	e7e4      	b.n	80021ea <_vfiprintf_r+0x1ea>
 8002220:	0800283c 	.word	0x0800283c
 8002224:	08002846 	.word	0x08002846
 8002228:	00000000 	.word	0x00000000
 800222c:	08001fdb 	.word	0x08001fdb
 8002230:	08002842 	.word	0x08002842

08002234 <_printf_common>:
 8002234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002238:	4616      	mov	r6, r2
 800223a:	4699      	mov	r9, r3
 800223c:	688a      	ldr	r2, [r1, #8]
 800223e:	690b      	ldr	r3, [r1, #16]
 8002240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002244:	4293      	cmp	r3, r2
 8002246:	bfb8      	it	lt
 8002248:	4613      	movlt	r3, r2
 800224a:	6033      	str	r3, [r6, #0]
 800224c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002250:	4607      	mov	r7, r0
 8002252:	460c      	mov	r4, r1
 8002254:	b10a      	cbz	r2, 800225a <_printf_common+0x26>
 8002256:	3301      	adds	r3, #1
 8002258:	6033      	str	r3, [r6, #0]
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	0699      	lsls	r1, r3, #26
 800225e:	bf42      	ittt	mi
 8002260:	6833      	ldrmi	r3, [r6, #0]
 8002262:	3302      	addmi	r3, #2
 8002264:	6033      	strmi	r3, [r6, #0]
 8002266:	6825      	ldr	r5, [r4, #0]
 8002268:	f015 0506 	ands.w	r5, r5, #6
 800226c:	d106      	bne.n	800227c <_printf_common+0x48>
 800226e:	f104 0a19 	add.w	sl, r4, #25
 8002272:	68e3      	ldr	r3, [r4, #12]
 8002274:	6832      	ldr	r2, [r6, #0]
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	42ab      	cmp	r3, r5
 800227a:	dc26      	bgt.n	80022ca <_printf_common+0x96>
 800227c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002280:	1e13      	subs	r3, r2, #0
 8002282:	6822      	ldr	r2, [r4, #0]
 8002284:	bf18      	it	ne
 8002286:	2301      	movne	r3, #1
 8002288:	0692      	lsls	r2, r2, #26
 800228a:	d42b      	bmi.n	80022e4 <_printf_common+0xb0>
 800228c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002290:	4649      	mov	r1, r9
 8002292:	4638      	mov	r0, r7
 8002294:	47c0      	blx	r8
 8002296:	3001      	adds	r0, #1
 8002298:	d01e      	beq.n	80022d8 <_printf_common+0xa4>
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	6922      	ldr	r2, [r4, #16]
 800229e:	f003 0306 	and.w	r3, r3, #6
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf02      	ittt	eq
 80022a6:	68e5      	ldreq	r5, [r4, #12]
 80022a8:	6833      	ldreq	r3, [r6, #0]
 80022aa:	1aed      	subeq	r5, r5, r3
 80022ac:	68a3      	ldr	r3, [r4, #8]
 80022ae:	bf0c      	ite	eq
 80022b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022b4:	2500      	movne	r5, #0
 80022b6:	4293      	cmp	r3, r2
 80022b8:	bfc4      	itt	gt
 80022ba:	1a9b      	subgt	r3, r3, r2
 80022bc:	18ed      	addgt	r5, r5, r3
 80022be:	2600      	movs	r6, #0
 80022c0:	341a      	adds	r4, #26
 80022c2:	42b5      	cmp	r5, r6
 80022c4:	d11a      	bne.n	80022fc <_printf_common+0xc8>
 80022c6:	2000      	movs	r0, #0
 80022c8:	e008      	b.n	80022dc <_printf_common+0xa8>
 80022ca:	2301      	movs	r3, #1
 80022cc:	4652      	mov	r2, sl
 80022ce:	4649      	mov	r1, r9
 80022d0:	4638      	mov	r0, r7
 80022d2:	47c0      	blx	r8
 80022d4:	3001      	adds	r0, #1
 80022d6:	d103      	bne.n	80022e0 <_printf_common+0xac>
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022e0:	3501      	adds	r5, #1
 80022e2:	e7c6      	b.n	8002272 <_printf_common+0x3e>
 80022e4:	18e1      	adds	r1, r4, r3
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	2030      	movs	r0, #48	; 0x30
 80022ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022ee:	4422      	add	r2, r4
 80022f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022f8:	3302      	adds	r3, #2
 80022fa:	e7c7      	b.n	800228c <_printf_common+0x58>
 80022fc:	2301      	movs	r3, #1
 80022fe:	4622      	mov	r2, r4
 8002300:	4649      	mov	r1, r9
 8002302:	4638      	mov	r0, r7
 8002304:	47c0      	blx	r8
 8002306:	3001      	adds	r0, #1
 8002308:	d0e6      	beq.n	80022d8 <_printf_common+0xa4>
 800230a:	3601      	adds	r6, #1
 800230c:	e7d9      	b.n	80022c2 <_printf_common+0x8e>
	...

08002310 <_printf_i>:
 8002310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002314:	7e0f      	ldrb	r7, [r1, #24]
 8002316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002318:	2f78      	cmp	r7, #120	; 0x78
 800231a:	4691      	mov	r9, r2
 800231c:	4680      	mov	r8, r0
 800231e:	460c      	mov	r4, r1
 8002320:	469a      	mov	sl, r3
 8002322:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002326:	d807      	bhi.n	8002338 <_printf_i+0x28>
 8002328:	2f62      	cmp	r7, #98	; 0x62
 800232a:	d80a      	bhi.n	8002342 <_printf_i+0x32>
 800232c:	2f00      	cmp	r7, #0
 800232e:	f000 80d4 	beq.w	80024da <_printf_i+0x1ca>
 8002332:	2f58      	cmp	r7, #88	; 0x58
 8002334:	f000 80c0 	beq.w	80024b8 <_printf_i+0x1a8>
 8002338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800233c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002340:	e03a      	b.n	80023b8 <_printf_i+0xa8>
 8002342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002346:	2b15      	cmp	r3, #21
 8002348:	d8f6      	bhi.n	8002338 <_printf_i+0x28>
 800234a:	a101      	add	r1, pc, #4	; (adr r1, 8002350 <_printf_i+0x40>)
 800234c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002350:	080023a9 	.word	0x080023a9
 8002354:	080023bd 	.word	0x080023bd
 8002358:	08002339 	.word	0x08002339
 800235c:	08002339 	.word	0x08002339
 8002360:	08002339 	.word	0x08002339
 8002364:	08002339 	.word	0x08002339
 8002368:	080023bd 	.word	0x080023bd
 800236c:	08002339 	.word	0x08002339
 8002370:	08002339 	.word	0x08002339
 8002374:	08002339 	.word	0x08002339
 8002378:	08002339 	.word	0x08002339
 800237c:	080024c1 	.word	0x080024c1
 8002380:	080023e9 	.word	0x080023e9
 8002384:	0800247b 	.word	0x0800247b
 8002388:	08002339 	.word	0x08002339
 800238c:	08002339 	.word	0x08002339
 8002390:	080024e3 	.word	0x080024e3
 8002394:	08002339 	.word	0x08002339
 8002398:	080023e9 	.word	0x080023e9
 800239c:	08002339 	.word	0x08002339
 80023a0:	08002339 	.word	0x08002339
 80023a4:	08002483 	.word	0x08002483
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	1d1a      	adds	r2, r3, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	602a      	str	r2, [r5, #0]
 80023b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023b8:	2301      	movs	r3, #1
 80023ba:	e09f      	b.n	80024fc <_printf_i+0x1ec>
 80023bc:	6820      	ldr	r0, [r4, #0]
 80023be:	682b      	ldr	r3, [r5, #0]
 80023c0:	0607      	lsls	r7, r0, #24
 80023c2:	f103 0104 	add.w	r1, r3, #4
 80023c6:	6029      	str	r1, [r5, #0]
 80023c8:	d501      	bpl.n	80023ce <_printf_i+0xbe>
 80023ca:	681e      	ldr	r6, [r3, #0]
 80023cc:	e003      	b.n	80023d6 <_printf_i+0xc6>
 80023ce:	0646      	lsls	r6, r0, #25
 80023d0:	d5fb      	bpl.n	80023ca <_printf_i+0xba>
 80023d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80023d6:	2e00      	cmp	r6, #0
 80023d8:	da03      	bge.n	80023e2 <_printf_i+0xd2>
 80023da:	232d      	movs	r3, #45	; 0x2d
 80023dc:	4276      	negs	r6, r6
 80023de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023e2:	485a      	ldr	r0, [pc, #360]	; (800254c <_printf_i+0x23c>)
 80023e4:	230a      	movs	r3, #10
 80023e6:	e012      	b.n	800240e <_printf_i+0xfe>
 80023e8:	682b      	ldr	r3, [r5, #0]
 80023ea:	6820      	ldr	r0, [r4, #0]
 80023ec:	1d19      	adds	r1, r3, #4
 80023ee:	6029      	str	r1, [r5, #0]
 80023f0:	0605      	lsls	r5, r0, #24
 80023f2:	d501      	bpl.n	80023f8 <_printf_i+0xe8>
 80023f4:	681e      	ldr	r6, [r3, #0]
 80023f6:	e002      	b.n	80023fe <_printf_i+0xee>
 80023f8:	0641      	lsls	r1, r0, #25
 80023fa:	d5fb      	bpl.n	80023f4 <_printf_i+0xe4>
 80023fc:	881e      	ldrh	r6, [r3, #0]
 80023fe:	4853      	ldr	r0, [pc, #332]	; (800254c <_printf_i+0x23c>)
 8002400:	2f6f      	cmp	r7, #111	; 0x6f
 8002402:	bf0c      	ite	eq
 8002404:	2308      	moveq	r3, #8
 8002406:	230a      	movne	r3, #10
 8002408:	2100      	movs	r1, #0
 800240a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800240e:	6865      	ldr	r5, [r4, #4]
 8002410:	60a5      	str	r5, [r4, #8]
 8002412:	2d00      	cmp	r5, #0
 8002414:	bfa2      	ittt	ge
 8002416:	6821      	ldrge	r1, [r4, #0]
 8002418:	f021 0104 	bicge.w	r1, r1, #4
 800241c:	6021      	strge	r1, [r4, #0]
 800241e:	b90e      	cbnz	r6, 8002424 <_printf_i+0x114>
 8002420:	2d00      	cmp	r5, #0
 8002422:	d04b      	beq.n	80024bc <_printf_i+0x1ac>
 8002424:	4615      	mov	r5, r2
 8002426:	fbb6 f1f3 	udiv	r1, r6, r3
 800242a:	fb03 6711 	mls	r7, r3, r1, r6
 800242e:	5dc7      	ldrb	r7, [r0, r7]
 8002430:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002434:	4637      	mov	r7, r6
 8002436:	42bb      	cmp	r3, r7
 8002438:	460e      	mov	r6, r1
 800243a:	d9f4      	bls.n	8002426 <_printf_i+0x116>
 800243c:	2b08      	cmp	r3, #8
 800243e:	d10b      	bne.n	8002458 <_printf_i+0x148>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	07de      	lsls	r6, r3, #31
 8002444:	d508      	bpl.n	8002458 <_printf_i+0x148>
 8002446:	6923      	ldr	r3, [r4, #16]
 8002448:	6861      	ldr	r1, [r4, #4]
 800244a:	4299      	cmp	r1, r3
 800244c:	bfde      	ittt	le
 800244e:	2330      	movle	r3, #48	; 0x30
 8002450:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002454:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002458:	1b52      	subs	r2, r2, r5
 800245a:	6122      	str	r2, [r4, #16]
 800245c:	f8cd a000 	str.w	sl, [sp]
 8002460:	464b      	mov	r3, r9
 8002462:	aa03      	add	r2, sp, #12
 8002464:	4621      	mov	r1, r4
 8002466:	4640      	mov	r0, r8
 8002468:	f7ff fee4 	bl	8002234 <_printf_common>
 800246c:	3001      	adds	r0, #1
 800246e:	d14a      	bne.n	8002506 <_printf_i+0x1f6>
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	b004      	add	sp, #16
 8002476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	f043 0320 	orr.w	r3, r3, #32
 8002480:	6023      	str	r3, [r4, #0]
 8002482:	4833      	ldr	r0, [pc, #204]	; (8002550 <_printf_i+0x240>)
 8002484:	2778      	movs	r7, #120	; 0x78
 8002486:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	6829      	ldr	r1, [r5, #0]
 800248e:	061f      	lsls	r7, r3, #24
 8002490:	f851 6b04 	ldr.w	r6, [r1], #4
 8002494:	d402      	bmi.n	800249c <_printf_i+0x18c>
 8002496:	065f      	lsls	r7, r3, #25
 8002498:	bf48      	it	mi
 800249a:	b2b6      	uxthmi	r6, r6
 800249c:	07df      	lsls	r7, r3, #31
 800249e:	bf48      	it	mi
 80024a0:	f043 0320 	orrmi.w	r3, r3, #32
 80024a4:	6029      	str	r1, [r5, #0]
 80024a6:	bf48      	it	mi
 80024a8:	6023      	strmi	r3, [r4, #0]
 80024aa:	b91e      	cbnz	r6, 80024b4 <_printf_i+0x1a4>
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	f023 0320 	bic.w	r3, r3, #32
 80024b2:	6023      	str	r3, [r4, #0]
 80024b4:	2310      	movs	r3, #16
 80024b6:	e7a7      	b.n	8002408 <_printf_i+0xf8>
 80024b8:	4824      	ldr	r0, [pc, #144]	; (800254c <_printf_i+0x23c>)
 80024ba:	e7e4      	b.n	8002486 <_printf_i+0x176>
 80024bc:	4615      	mov	r5, r2
 80024be:	e7bd      	b.n	800243c <_printf_i+0x12c>
 80024c0:	682b      	ldr	r3, [r5, #0]
 80024c2:	6826      	ldr	r6, [r4, #0]
 80024c4:	6961      	ldr	r1, [r4, #20]
 80024c6:	1d18      	adds	r0, r3, #4
 80024c8:	6028      	str	r0, [r5, #0]
 80024ca:	0635      	lsls	r5, r6, #24
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	d501      	bpl.n	80024d4 <_printf_i+0x1c4>
 80024d0:	6019      	str	r1, [r3, #0]
 80024d2:	e002      	b.n	80024da <_printf_i+0x1ca>
 80024d4:	0670      	lsls	r0, r6, #25
 80024d6:	d5fb      	bpl.n	80024d0 <_printf_i+0x1c0>
 80024d8:	8019      	strh	r1, [r3, #0]
 80024da:	2300      	movs	r3, #0
 80024dc:	6123      	str	r3, [r4, #16]
 80024de:	4615      	mov	r5, r2
 80024e0:	e7bc      	b.n	800245c <_printf_i+0x14c>
 80024e2:	682b      	ldr	r3, [r5, #0]
 80024e4:	1d1a      	adds	r2, r3, #4
 80024e6:	602a      	str	r2, [r5, #0]
 80024e8:	681d      	ldr	r5, [r3, #0]
 80024ea:	6862      	ldr	r2, [r4, #4]
 80024ec:	2100      	movs	r1, #0
 80024ee:	4628      	mov	r0, r5
 80024f0:	f7fd fe6e 	bl	80001d0 <memchr>
 80024f4:	b108      	cbz	r0, 80024fa <_printf_i+0x1ea>
 80024f6:	1b40      	subs	r0, r0, r5
 80024f8:	6060      	str	r0, [r4, #4]
 80024fa:	6863      	ldr	r3, [r4, #4]
 80024fc:	6123      	str	r3, [r4, #16]
 80024fe:	2300      	movs	r3, #0
 8002500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002504:	e7aa      	b.n	800245c <_printf_i+0x14c>
 8002506:	6923      	ldr	r3, [r4, #16]
 8002508:	462a      	mov	r2, r5
 800250a:	4649      	mov	r1, r9
 800250c:	4640      	mov	r0, r8
 800250e:	47d0      	blx	sl
 8002510:	3001      	adds	r0, #1
 8002512:	d0ad      	beq.n	8002470 <_printf_i+0x160>
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	079b      	lsls	r3, r3, #30
 8002518:	d413      	bmi.n	8002542 <_printf_i+0x232>
 800251a:	68e0      	ldr	r0, [r4, #12]
 800251c:	9b03      	ldr	r3, [sp, #12]
 800251e:	4298      	cmp	r0, r3
 8002520:	bfb8      	it	lt
 8002522:	4618      	movlt	r0, r3
 8002524:	e7a6      	b.n	8002474 <_printf_i+0x164>
 8002526:	2301      	movs	r3, #1
 8002528:	4632      	mov	r2, r6
 800252a:	4649      	mov	r1, r9
 800252c:	4640      	mov	r0, r8
 800252e:	47d0      	blx	sl
 8002530:	3001      	adds	r0, #1
 8002532:	d09d      	beq.n	8002470 <_printf_i+0x160>
 8002534:	3501      	adds	r5, #1
 8002536:	68e3      	ldr	r3, [r4, #12]
 8002538:	9903      	ldr	r1, [sp, #12]
 800253a:	1a5b      	subs	r3, r3, r1
 800253c:	42ab      	cmp	r3, r5
 800253e:	dcf2      	bgt.n	8002526 <_printf_i+0x216>
 8002540:	e7eb      	b.n	800251a <_printf_i+0x20a>
 8002542:	2500      	movs	r5, #0
 8002544:	f104 0619 	add.w	r6, r4, #25
 8002548:	e7f5      	b.n	8002536 <_printf_i+0x226>
 800254a:	bf00      	nop
 800254c:	0800284d 	.word	0x0800284d
 8002550:	0800285e 	.word	0x0800285e

08002554 <__sflush_r>:
 8002554:	898a      	ldrh	r2, [r1, #12]
 8002556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800255a:	4605      	mov	r5, r0
 800255c:	0710      	lsls	r0, r2, #28
 800255e:	460c      	mov	r4, r1
 8002560:	d458      	bmi.n	8002614 <__sflush_r+0xc0>
 8002562:	684b      	ldr	r3, [r1, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	dc05      	bgt.n	8002574 <__sflush_r+0x20>
 8002568:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	dc02      	bgt.n	8002574 <__sflush_r+0x20>
 800256e:	2000      	movs	r0, #0
 8002570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002576:	2e00      	cmp	r6, #0
 8002578:	d0f9      	beq.n	800256e <__sflush_r+0x1a>
 800257a:	2300      	movs	r3, #0
 800257c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002580:	682f      	ldr	r7, [r5, #0]
 8002582:	6a21      	ldr	r1, [r4, #32]
 8002584:	602b      	str	r3, [r5, #0]
 8002586:	d032      	beq.n	80025ee <__sflush_r+0x9a>
 8002588:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800258a:	89a3      	ldrh	r3, [r4, #12]
 800258c:	075a      	lsls	r2, r3, #29
 800258e:	d505      	bpl.n	800259c <__sflush_r+0x48>
 8002590:	6863      	ldr	r3, [r4, #4]
 8002592:	1ac0      	subs	r0, r0, r3
 8002594:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002596:	b10b      	cbz	r3, 800259c <__sflush_r+0x48>
 8002598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800259a:	1ac0      	subs	r0, r0, r3
 800259c:	2300      	movs	r3, #0
 800259e:	4602      	mov	r2, r0
 80025a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025a2:	6a21      	ldr	r1, [r4, #32]
 80025a4:	4628      	mov	r0, r5
 80025a6:	47b0      	blx	r6
 80025a8:	1c43      	adds	r3, r0, #1
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	d106      	bne.n	80025bc <__sflush_r+0x68>
 80025ae:	6829      	ldr	r1, [r5, #0]
 80025b0:	291d      	cmp	r1, #29
 80025b2:	d82b      	bhi.n	800260c <__sflush_r+0xb8>
 80025b4:	4a29      	ldr	r2, [pc, #164]	; (800265c <__sflush_r+0x108>)
 80025b6:	410a      	asrs	r2, r1
 80025b8:	07d6      	lsls	r6, r2, #31
 80025ba:	d427      	bmi.n	800260c <__sflush_r+0xb8>
 80025bc:	2200      	movs	r2, #0
 80025be:	6062      	str	r2, [r4, #4]
 80025c0:	04d9      	lsls	r1, r3, #19
 80025c2:	6922      	ldr	r2, [r4, #16]
 80025c4:	6022      	str	r2, [r4, #0]
 80025c6:	d504      	bpl.n	80025d2 <__sflush_r+0x7e>
 80025c8:	1c42      	adds	r2, r0, #1
 80025ca:	d101      	bne.n	80025d0 <__sflush_r+0x7c>
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	b903      	cbnz	r3, 80025d2 <__sflush_r+0x7e>
 80025d0:	6560      	str	r0, [r4, #84]	; 0x54
 80025d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025d4:	602f      	str	r7, [r5, #0]
 80025d6:	2900      	cmp	r1, #0
 80025d8:	d0c9      	beq.n	800256e <__sflush_r+0x1a>
 80025da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025de:	4299      	cmp	r1, r3
 80025e0:	d002      	beq.n	80025e8 <__sflush_r+0x94>
 80025e2:	4628      	mov	r0, r5
 80025e4:	f7ff fbea 	bl	8001dbc <_free_r>
 80025e8:	2000      	movs	r0, #0
 80025ea:	6360      	str	r0, [r4, #52]	; 0x34
 80025ec:	e7c0      	b.n	8002570 <__sflush_r+0x1c>
 80025ee:	2301      	movs	r3, #1
 80025f0:	4628      	mov	r0, r5
 80025f2:	47b0      	blx	r6
 80025f4:	1c41      	adds	r1, r0, #1
 80025f6:	d1c8      	bne.n	800258a <__sflush_r+0x36>
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0c5      	beq.n	800258a <__sflush_r+0x36>
 80025fe:	2b1d      	cmp	r3, #29
 8002600:	d001      	beq.n	8002606 <__sflush_r+0xb2>
 8002602:	2b16      	cmp	r3, #22
 8002604:	d101      	bne.n	800260a <__sflush_r+0xb6>
 8002606:	602f      	str	r7, [r5, #0]
 8002608:	e7b1      	b.n	800256e <__sflush_r+0x1a>
 800260a:	89a3      	ldrh	r3, [r4, #12]
 800260c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002610:	81a3      	strh	r3, [r4, #12]
 8002612:	e7ad      	b.n	8002570 <__sflush_r+0x1c>
 8002614:	690f      	ldr	r7, [r1, #16]
 8002616:	2f00      	cmp	r7, #0
 8002618:	d0a9      	beq.n	800256e <__sflush_r+0x1a>
 800261a:	0793      	lsls	r3, r2, #30
 800261c:	680e      	ldr	r6, [r1, #0]
 800261e:	bf08      	it	eq
 8002620:	694b      	ldreq	r3, [r1, #20]
 8002622:	600f      	str	r7, [r1, #0]
 8002624:	bf18      	it	ne
 8002626:	2300      	movne	r3, #0
 8002628:	eba6 0807 	sub.w	r8, r6, r7
 800262c:	608b      	str	r3, [r1, #8]
 800262e:	f1b8 0f00 	cmp.w	r8, #0
 8002632:	dd9c      	ble.n	800256e <__sflush_r+0x1a>
 8002634:	6a21      	ldr	r1, [r4, #32]
 8002636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002638:	4643      	mov	r3, r8
 800263a:	463a      	mov	r2, r7
 800263c:	4628      	mov	r0, r5
 800263e:	47b0      	blx	r6
 8002640:	2800      	cmp	r0, #0
 8002642:	dc06      	bgt.n	8002652 <__sflush_r+0xfe>
 8002644:	89a3      	ldrh	r3, [r4, #12]
 8002646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264a:	81a3      	strh	r3, [r4, #12]
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	e78e      	b.n	8002570 <__sflush_r+0x1c>
 8002652:	4407      	add	r7, r0
 8002654:	eba8 0800 	sub.w	r8, r8, r0
 8002658:	e7e9      	b.n	800262e <__sflush_r+0xda>
 800265a:	bf00      	nop
 800265c:	dfbffffe 	.word	0xdfbffffe

08002660 <_fflush_r>:
 8002660:	b538      	push	{r3, r4, r5, lr}
 8002662:	690b      	ldr	r3, [r1, #16]
 8002664:	4605      	mov	r5, r0
 8002666:	460c      	mov	r4, r1
 8002668:	b913      	cbnz	r3, 8002670 <_fflush_r+0x10>
 800266a:	2500      	movs	r5, #0
 800266c:	4628      	mov	r0, r5
 800266e:	bd38      	pop	{r3, r4, r5, pc}
 8002670:	b118      	cbz	r0, 800267a <_fflush_r+0x1a>
 8002672:	6a03      	ldr	r3, [r0, #32]
 8002674:	b90b      	cbnz	r3, 800267a <_fflush_r+0x1a>
 8002676:	f7ff f9a9 	bl	80019cc <__sinit>
 800267a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f3      	beq.n	800266a <_fflush_r+0xa>
 8002682:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002684:	07d0      	lsls	r0, r2, #31
 8002686:	d404      	bmi.n	8002692 <_fflush_r+0x32>
 8002688:	0599      	lsls	r1, r3, #22
 800268a:	d402      	bmi.n	8002692 <_fflush_r+0x32>
 800268c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800268e:	f7ff fb92 	bl	8001db6 <__retarget_lock_acquire_recursive>
 8002692:	4628      	mov	r0, r5
 8002694:	4621      	mov	r1, r4
 8002696:	f7ff ff5d 	bl	8002554 <__sflush_r>
 800269a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800269c:	07da      	lsls	r2, r3, #31
 800269e:	4605      	mov	r5, r0
 80026a0:	d4e4      	bmi.n	800266c <_fflush_r+0xc>
 80026a2:	89a3      	ldrh	r3, [r4, #12]
 80026a4:	059b      	lsls	r3, r3, #22
 80026a6:	d4e1      	bmi.n	800266c <_fflush_r+0xc>
 80026a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026aa:	f7ff fb85 	bl	8001db8 <__retarget_lock_release_recursive>
 80026ae:	e7dd      	b.n	800266c <_fflush_r+0xc>

080026b0 <__swhatbuf_r>:
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	460c      	mov	r4, r1
 80026b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b8:	2900      	cmp	r1, #0
 80026ba:	b096      	sub	sp, #88	; 0x58
 80026bc:	4615      	mov	r5, r2
 80026be:	461e      	mov	r6, r3
 80026c0:	da0d      	bge.n	80026de <__swhatbuf_r+0x2e>
 80026c2:	89a3      	ldrh	r3, [r4, #12]
 80026c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80026c8:	f04f 0100 	mov.w	r1, #0
 80026cc:	bf0c      	ite	eq
 80026ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80026d2:	2340      	movne	r3, #64	; 0x40
 80026d4:	2000      	movs	r0, #0
 80026d6:	6031      	str	r1, [r6, #0]
 80026d8:	602b      	str	r3, [r5, #0]
 80026da:	b016      	add	sp, #88	; 0x58
 80026dc:	bd70      	pop	{r4, r5, r6, pc}
 80026de:	466a      	mov	r2, sp
 80026e0:	f000 f848 	bl	8002774 <_fstat_r>
 80026e4:	2800      	cmp	r0, #0
 80026e6:	dbec      	blt.n	80026c2 <__swhatbuf_r+0x12>
 80026e8:	9901      	ldr	r1, [sp, #4]
 80026ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80026ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80026f2:	4259      	negs	r1, r3
 80026f4:	4159      	adcs	r1, r3
 80026f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fa:	e7eb      	b.n	80026d4 <__swhatbuf_r+0x24>

080026fc <__smakebuf_r>:
 80026fc:	898b      	ldrh	r3, [r1, #12]
 80026fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002700:	079d      	lsls	r5, r3, #30
 8002702:	4606      	mov	r6, r0
 8002704:	460c      	mov	r4, r1
 8002706:	d507      	bpl.n	8002718 <__smakebuf_r+0x1c>
 8002708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	6123      	str	r3, [r4, #16]
 8002710:	2301      	movs	r3, #1
 8002712:	6163      	str	r3, [r4, #20]
 8002714:	b002      	add	sp, #8
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	ab01      	add	r3, sp, #4
 800271a:	466a      	mov	r2, sp
 800271c:	f7ff ffc8 	bl	80026b0 <__swhatbuf_r>
 8002720:	9900      	ldr	r1, [sp, #0]
 8002722:	4605      	mov	r5, r0
 8002724:	4630      	mov	r0, r6
 8002726:	f7ff fbb5 	bl	8001e94 <_malloc_r>
 800272a:	b948      	cbnz	r0, 8002740 <__smakebuf_r+0x44>
 800272c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002730:	059a      	lsls	r2, r3, #22
 8002732:	d4ef      	bmi.n	8002714 <__smakebuf_r+0x18>
 8002734:	f023 0303 	bic.w	r3, r3, #3
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	81a3      	strh	r3, [r4, #12]
 800273e:	e7e3      	b.n	8002708 <__smakebuf_r+0xc>
 8002740:	89a3      	ldrh	r3, [r4, #12]
 8002742:	6020      	str	r0, [r4, #0]
 8002744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002748:	81a3      	strh	r3, [r4, #12]
 800274a:	9b00      	ldr	r3, [sp, #0]
 800274c:	6163      	str	r3, [r4, #20]
 800274e:	9b01      	ldr	r3, [sp, #4]
 8002750:	6120      	str	r0, [r4, #16]
 8002752:	b15b      	cbz	r3, 800276c <__smakebuf_r+0x70>
 8002754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002758:	4630      	mov	r0, r6
 800275a:	f000 f81d 	bl	8002798 <_isatty_r>
 800275e:	b128      	cbz	r0, 800276c <__smakebuf_r+0x70>
 8002760:	89a3      	ldrh	r3, [r4, #12]
 8002762:	f023 0303 	bic.w	r3, r3, #3
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	81a3      	strh	r3, [r4, #12]
 800276c:	89a3      	ldrh	r3, [r4, #12]
 800276e:	431d      	orrs	r5, r3
 8002770:	81a5      	strh	r5, [r4, #12]
 8002772:	e7cf      	b.n	8002714 <__smakebuf_r+0x18>

08002774 <_fstat_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	4d07      	ldr	r5, [pc, #28]	; (8002794 <_fstat_r+0x20>)
 8002778:	2300      	movs	r3, #0
 800277a:	4604      	mov	r4, r0
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	602b      	str	r3, [r5, #0]
 8002782:	f7fe f8a0 	bl	80008c6 <_fstat>
 8002786:	1c43      	adds	r3, r0, #1
 8002788:	d102      	bne.n	8002790 <_fstat_r+0x1c>
 800278a:	682b      	ldr	r3, [r5, #0]
 800278c:	b103      	cbz	r3, 8002790 <_fstat_r+0x1c>
 800278e:	6023      	str	r3, [r4, #0]
 8002790:	bd38      	pop	{r3, r4, r5, pc}
 8002792:	bf00      	nop
 8002794:	2000020c 	.word	0x2000020c

08002798 <_isatty_r>:
 8002798:	b538      	push	{r3, r4, r5, lr}
 800279a:	4d06      	ldr	r5, [pc, #24]	; (80027b4 <_isatty_r+0x1c>)
 800279c:	2300      	movs	r3, #0
 800279e:	4604      	mov	r4, r0
 80027a0:	4608      	mov	r0, r1
 80027a2:	602b      	str	r3, [r5, #0]
 80027a4:	f7fe f89f 	bl	80008e6 <_isatty>
 80027a8:	1c43      	adds	r3, r0, #1
 80027aa:	d102      	bne.n	80027b2 <_isatty_r+0x1a>
 80027ac:	682b      	ldr	r3, [r5, #0]
 80027ae:	b103      	cbz	r3, 80027b2 <_isatty_r+0x1a>
 80027b0:	6023      	str	r3, [r4, #0]
 80027b2:	bd38      	pop	{r3, r4, r5, pc}
 80027b4:	2000020c 	.word	0x2000020c

080027b8 <_sbrk_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4d06      	ldr	r5, [pc, #24]	; (80027d4 <_sbrk_r+0x1c>)
 80027bc:	2300      	movs	r3, #0
 80027be:	4604      	mov	r4, r0
 80027c0:	4608      	mov	r0, r1
 80027c2:	602b      	str	r3, [r5, #0]
 80027c4:	f7fe f8a8 	bl	8000918 <_sbrk>
 80027c8:	1c43      	adds	r3, r0, #1
 80027ca:	d102      	bne.n	80027d2 <_sbrk_r+0x1a>
 80027cc:	682b      	ldr	r3, [r5, #0]
 80027ce:	b103      	cbz	r3, 80027d2 <_sbrk_r+0x1a>
 80027d0:	6023      	str	r3, [r4, #0]
 80027d2:	bd38      	pop	{r3, r4, r5, pc}
 80027d4:	2000020c 	.word	0x2000020c

080027d8 <_init>:
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027da:	bf00      	nop
 80027dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027de:	bc08      	pop	{r3}
 80027e0:	469e      	mov	lr, r3
 80027e2:	4770      	bx	lr

080027e4 <_fini>:
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	bf00      	nop
 80027e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ea:	bc08      	pop	{r3}
 80027ec:	469e      	mov	lr, r3
 80027ee:	4770      	bx	lr
